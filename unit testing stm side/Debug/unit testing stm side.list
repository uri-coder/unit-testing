
unit testing stm side.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001ea58  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003514  0801ec28  0801ec28  0002ec28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0802213c  0802213c  000402e4  2**0
                  CONTENTS
  4 .ARM          00000008  0802213c  0802213c  0003213c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08022144  08022144  000402e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08022144  08022144  00032144  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08022148  08022148  00032148  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  0802214c  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001a4  080222f0  000401a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000244  08022390  00040244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          0002408c  200002e4  08022430  000402e4  2**2
                  ALLOC
 12 ._user_heap_stack 00000600  20024370  08022430  00044370  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000402e4  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00040314  2**0
                  CONTENTS, READONLY
 15 .debug_info   00041201  00000000  00000000  00040357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000a942  00000000  00000000  00081558  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00003008  00000000  00000000  0008bea0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 0000257b  00000000  00000000  0008eea8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00030d3e  00000000  00000000  00091423  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000e714  00000000  00000000  000c2161  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000caf8  00000000  00000000  000d0878  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  000dd370  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002e4 	.word	0x200002e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801ec10 	.word	0x0801ec10

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002e8 	.word	0x200002e8
 800020c:	0801ec10 	.word	0x0801ec10

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005b2:	463b      	mov	r3, r7
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005be:	4b21      	ldr	r3, [pc, #132]	; (8000644 <MX_ADC1_Init+0x98>)
 80005c0:	4a21      	ldr	r2, [pc, #132]	; (8000648 <MX_ADC1_Init+0x9c>)
 80005c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005c4:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <MX_ADC1_Init+0x98>)
 80005c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005cc:	4b1d      	ldr	r3, [pc, #116]	; (8000644 <MX_ADC1_Init+0x98>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005d2:	4b1c      	ldr	r3, [pc, #112]	; (8000644 <MX_ADC1_Init+0x98>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005d8:	4b1a      	ldr	r3, [pc, #104]	; (8000644 <MX_ADC1_Init+0x98>)
 80005da:	2200      	movs	r2, #0
 80005dc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005de:	4b19      	ldr	r3, [pc, #100]	; (8000644 <MX_ADC1_Init+0x98>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005e6:	4b17      	ldr	r3, [pc, #92]	; (8000644 <MX_ADC1_Init+0x98>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005ec:	4b15      	ldr	r3, [pc, #84]	; (8000644 <MX_ADC1_Init+0x98>)
 80005ee:	4a17      	ldr	r2, [pc, #92]	; (800064c <MX_ADC1_Init+0xa0>)
 80005f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005f2:	4b14      	ldr	r3, [pc, #80]	; (8000644 <MX_ADC1_Init+0x98>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <MX_ADC1_Init+0x98>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <MX_ADC1_Init+0x98>)
 8000600:	2200      	movs	r2, #0
 8000602:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000606:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <MX_ADC1_Init+0x98>)
 8000608:	2201      	movs	r2, #1
 800060a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800060c:	480d      	ldr	r0, [pc, #52]	; (8000644 <MX_ADC1_Init+0x98>)
 800060e:	f002 ff75 	bl	80034fc <HAL_ADC_Init>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000618:	f001 f834 	bl	8001684 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800061c:	2308      	movs	r3, #8
 800061e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000620:	2301      	movs	r3, #1
 8000622:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000628:	463b      	mov	r3, r7
 800062a:	4619      	mov	r1, r3
 800062c:	4805      	ldr	r0, [pc, #20]	; (8000644 <MX_ADC1_Init+0x98>)
 800062e:	f003 f885 	bl	800373c <HAL_ADC_ConfigChannel>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000638:	f001 f824 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800063c:	bf00      	nop
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000300 	.word	0x20000300
 8000648:	40012000 	.word	0x40012000
 800064c:	0f000001 	.word	0x0f000001

08000650 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000656:	463b      	mov	r3, r7
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000662:	4b21      	ldr	r3, [pc, #132]	; (80006e8 <MX_ADC2_Init+0x98>)
 8000664:	4a21      	ldr	r2, [pc, #132]	; (80006ec <MX_ADC2_Init+0x9c>)
 8000666:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000668:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <MX_ADC2_Init+0x98>)
 800066a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800066e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000670:	4b1d      	ldr	r3, [pc, #116]	; (80006e8 <MX_ADC2_Init+0x98>)
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000676:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <MX_ADC2_Init+0x98>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800067c:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <MX_ADC2_Init+0x98>)
 800067e:	2200      	movs	r2, #0
 8000680:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000682:	4b19      	ldr	r3, [pc, #100]	; (80006e8 <MX_ADC2_Init+0x98>)
 8000684:	2200      	movs	r2, #0
 8000686:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800068a:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <MX_ADC2_Init+0x98>)
 800068c:	2200      	movs	r2, #0
 800068e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000690:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <MX_ADC2_Init+0x98>)
 8000692:	4a17      	ldr	r2, [pc, #92]	; (80006f0 <MX_ADC2_Init+0xa0>)
 8000694:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000696:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <MX_ADC2_Init+0x98>)
 8000698:	2200      	movs	r2, #0
 800069a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <MX_ADC2_Init+0x98>)
 800069e:	2201      	movs	r2, #1
 80006a0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80006a2:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <MX_ADC2_Init+0x98>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006aa:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_ADC2_Init+0x98>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80006b0:	480d      	ldr	r0, [pc, #52]	; (80006e8 <MX_ADC2_Init+0x98>)
 80006b2:	f002 ff23 	bl	80034fc <HAL_ADC_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80006bc:	f000 ffe2 	bl	8001684 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80006c0:	2308      	movs	r3, #8
 80006c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006c4:	2301      	movs	r3, #1
 80006c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006c8:	2300      	movs	r3, #0
 80006ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4805      	ldr	r0, [pc, #20]	; (80006e8 <MX_ADC2_Init+0x98>)
 80006d2:	f003 f833 	bl	800373c <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80006dc:	f000 ffd2 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80006e0:	bf00      	nop
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000348 	.word	0x20000348
 80006ec:	40012100 	.word	0x40012100
 80006f0:	0f000001 	.word	0x0f000001

080006f4 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006fa:	463b      	mov	r3, r7
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000706:	4b21      	ldr	r3, [pc, #132]	; (800078c <MX_ADC3_Init+0x98>)
 8000708:	4a21      	ldr	r2, [pc, #132]	; (8000790 <MX_ADC3_Init+0x9c>)
 800070a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800070c:	4b1f      	ldr	r3, [pc, #124]	; (800078c <MX_ADC3_Init+0x98>)
 800070e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000712:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000714:	4b1d      	ldr	r3, [pc, #116]	; (800078c <MX_ADC3_Init+0x98>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800071a:	4b1c      	ldr	r3, [pc, #112]	; (800078c <MX_ADC3_Init+0x98>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000720:	4b1a      	ldr	r3, [pc, #104]	; (800078c <MX_ADC3_Init+0x98>)
 8000722:	2200      	movs	r2, #0
 8000724:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000726:	4b19      	ldr	r3, [pc, #100]	; (800078c <MX_ADC3_Init+0x98>)
 8000728:	2200      	movs	r2, #0
 800072a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800072e:	4b17      	ldr	r3, [pc, #92]	; (800078c <MX_ADC3_Init+0x98>)
 8000730:	2200      	movs	r2, #0
 8000732:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000734:	4b15      	ldr	r3, [pc, #84]	; (800078c <MX_ADC3_Init+0x98>)
 8000736:	4a17      	ldr	r2, [pc, #92]	; (8000794 <MX_ADC3_Init+0xa0>)
 8000738:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_ADC3_Init+0x98>)
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_ADC3_Init+0x98>)
 8000742:	2201      	movs	r2, #1
 8000744:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_ADC3_Init+0x98>)
 8000748:	2200      	movs	r2, #0
 800074a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800074e:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_ADC3_Init+0x98>)
 8000750:	2201      	movs	r2, #1
 8000752:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000754:	480d      	ldr	r0, [pc, #52]	; (800078c <MX_ADC3_Init+0x98>)
 8000756:	f002 fed1 	bl	80034fc <HAL_ADC_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000760:	f000 ff90 	bl	8001684 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000764:	2307      	movs	r3, #7
 8000766:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000768:	2301      	movs	r3, #1
 800076a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800076c:	2300      	movs	r3, #0
 800076e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000770:	463b      	mov	r3, r7
 8000772:	4619      	mov	r1, r3
 8000774:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_ADC3_Init+0x98>)
 8000776:	f002 ffe1 	bl	800373c <HAL_ADC_ConfigChannel>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000780:	f000 ff80 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000390 	.word	0x20000390
 8000790:	40012200 	.word	0x40012200
 8000794:	0f000001 	.word	0x0f000001

08000798 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08e      	sub	sp, #56	; 0x38
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a3f      	ldr	r2, [pc, #252]	; (80008b4 <HAL_ADC_MspInit+0x11c>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d124      	bne.n	8000804 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007ba:	4b3f      	ldr	r3, [pc, #252]	; (80008b8 <HAL_ADC_MspInit+0x120>)
 80007bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007be:	4a3e      	ldr	r2, [pc, #248]	; (80008b8 <HAL_ADC_MspInit+0x120>)
 80007c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007c4:	6453      	str	r3, [r2, #68]	; 0x44
 80007c6:	4b3c      	ldr	r3, [pc, #240]	; (80008b8 <HAL_ADC_MspInit+0x120>)
 80007c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007ce:	623b      	str	r3, [r7, #32]
 80007d0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	4b39      	ldr	r3, [pc, #228]	; (80008b8 <HAL_ADC_MspInit+0x120>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a38      	ldr	r2, [pc, #224]	; (80008b8 <HAL_ADC_MspInit+0x120>)
 80007d8:	f043 0302 	orr.w	r3, r3, #2
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b36      	ldr	r3, [pc, #216]	; (80008b8 <HAL_ADC_MspInit+0x120>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0302 	and.w	r3, r3, #2
 80007e6:	61fb      	str	r3, [r7, #28]
 80007e8:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007ea:	2301      	movs	r3, #1
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007ee:	2303      	movs	r3, #3
 80007f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fa:	4619      	mov	r1, r3
 80007fc:	482f      	ldr	r0, [pc, #188]	; (80008bc <HAL_ADC_MspInit+0x124>)
 80007fe:	f006 f879 	bl	80068f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000802:	e053      	b.n	80008ac <HAL_ADC_MspInit+0x114>
  else if(adcHandle->Instance==ADC2)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a2d      	ldr	r2, [pc, #180]	; (80008c0 <HAL_ADC_MspInit+0x128>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d124      	bne.n	8000858 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800080e:	4b2a      	ldr	r3, [pc, #168]	; (80008b8 <HAL_ADC_MspInit+0x120>)
 8000810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000812:	4a29      	ldr	r2, [pc, #164]	; (80008b8 <HAL_ADC_MspInit+0x120>)
 8000814:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000818:	6453      	str	r3, [r2, #68]	; 0x44
 800081a:	4b27      	ldr	r3, [pc, #156]	; (80008b8 <HAL_ADC_MspInit+0x120>)
 800081c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000822:	61bb      	str	r3, [r7, #24]
 8000824:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	4b24      	ldr	r3, [pc, #144]	; (80008b8 <HAL_ADC_MspInit+0x120>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a23      	ldr	r2, [pc, #140]	; (80008b8 <HAL_ADC_MspInit+0x120>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b21      	ldr	r3, [pc, #132]	; (80008b8 <HAL_ADC_MspInit+0x120>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0302 	and.w	r3, r3, #2
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800083e:	2301      	movs	r3, #1
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000842:	2303      	movs	r3, #3
 8000844:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084e:	4619      	mov	r1, r3
 8000850:	481a      	ldr	r0, [pc, #104]	; (80008bc <HAL_ADC_MspInit+0x124>)
 8000852:	f006 f84f 	bl	80068f4 <HAL_GPIO_Init>
}
 8000856:	e029      	b.n	80008ac <HAL_ADC_MspInit+0x114>
  else if(adcHandle->Instance==ADC3)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a19      	ldr	r2, [pc, #100]	; (80008c4 <HAL_ADC_MspInit+0x12c>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d124      	bne.n	80008ac <HAL_ADC_MspInit+0x114>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <HAL_ADC_MspInit+0x120>)
 8000864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000866:	4a14      	ldr	r2, [pc, #80]	; (80008b8 <HAL_ADC_MspInit+0x120>)
 8000868:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800086c:	6453      	str	r3, [r2, #68]	; 0x44
 800086e:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <HAL_ADC_MspInit+0x120>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <HAL_ADC_MspInit+0x120>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a0e      	ldr	r2, [pc, #56]	; (80008b8 <HAL_ADC_MspInit+0x120>)
 8000880:	f043 0320 	orr.w	r3, r3, #32
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <HAL_ADC_MspInit+0x120>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0320 	and.w	r3, r3, #32
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000892:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000898:	2303      	movs	r3, #3
 800089a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a4:	4619      	mov	r1, r3
 80008a6:	4808      	ldr	r0, [pc, #32]	; (80008c8 <HAL_ADC_MspInit+0x130>)
 80008a8:	f006 f824 	bl	80068f4 <HAL_GPIO_Init>
}
 80008ac:	bf00      	nop
 80008ae:	3738      	adds	r7, #56	; 0x38
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40012000 	.word	0x40012000
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40020400 	.word	0x40020400
 80008c0:	40012100 	.word	0x40012100
 80008c4:	40012200 	.word	0x40012200
 80008c8:	40021400 	.word	0x40021400

080008cc <MX_CAN1_Init>:
CAN_HandleTypeDef hcan1;
CAN_HandleTypeDef hcan2;

/* CAN1 init function */
void MX_CAN1_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	af00      	add	r7, sp, #0
  /* USER CODE END CAN1_Init 0 */

  /* USER CODE BEGIN CAN1_Init 1 */

  /* USER CODE END CAN1_Init 1 */
  hcan1.Instance = CAN1;
 80008d0:	4b17      	ldr	r3, [pc, #92]	; (8000930 <MX_CAN1_Init+0x64>)
 80008d2:	4a18      	ldr	r2, [pc, #96]	; (8000934 <MX_CAN1_Init+0x68>)
 80008d4:	601a      	str	r2, [r3, #0]
  hcan1.Init.Prescaler = 16;
 80008d6:	4b16      	ldr	r3, [pc, #88]	; (8000930 <MX_CAN1_Init+0x64>)
 80008d8:	2210      	movs	r2, #16
 80008da:	605a      	str	r2, [r3, #4]
  hcan1.Init.Mode = CAN_MODE_NORMAL;
 80008dc:	4b14      	ldr	r3, [pc, #80]	; (8000930 <MX_CAN1_Init+0x64>)
 80008de:	2200      	movs	r2, #0
 80008e0:	609a      	str	r2, [r3, #8]
  hcan1.Init.SyncJumpWidth = CAN_SJW_1TQ;
 80008e2:	4b13      	ldr	r3, [pc, #76]	; (8000930 <MX_CAN1_Init+0x64>)
 80008e4:	2200      	movs	r2, #0
 80008e6:	60da      	str	r2, [r3, #12]
  hcan1.Init.TimeSeg1 = CAN_BS1_2TQ;
 80008e8:	4b11      	ldr	r3, [pc, #68]	; (8000930 <MX_CAN1_Init+0x64>)
 80008ea:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80008ee:	611a      	str	r2, [r3, #16]
  hcan1.Init.TimeSeg2 = CAN_BS2_2TQ;
 80008f0:	4b0f      	ldr	r3, [pc, #60]	; (8000930 <MX_CAN1_Init+0x64>)
 80008f2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80008f6:	615a      	str	r2, [r3, #20]
  hcan1.Init.TimeTriggeredMode = DISABLE;
 80008f8:	4b0d      	ldr	r3, [pc, #52]	; (8000930 <MX_CAN1_Init+0x64>)
 80008fa:	2200      	movs	r2, #0
 80008fc:	761a      	strb	r2, [r3, #24]
  hcan1.Init.AutoBusOff = DISABLE;
 80008fe:	4b0c      	ldr	r3, [pc, #48]	; (8000930 <MX_CAN1_Init+0x64>)
 8000900:	2200      	movs	r2, #0
 8000902:	765a      	strb	r2, [r3, #25]
  hcan1.Init.AutoWakeUp = DISABLE;
 8000904:	4b0a      	ldr	r3, [pc, #40]	; (8000930 <MX_CAN1_Init+0x64>)
 8000906:	2200      	movs	r2, #0
 8000908:	769a      	strb	r2, [r3, #26]
  hcan1.Init.AutoRetransmission = DISABLE;
 800090a:	4b09      	ldr	r3, [pc, #36]	; (8000930 <MX_CAN1_Init+0x64>)
 800090c:	2200      	movs	r2, #0
 800090e:	76da      	strb	r2, [r3, #27]
  hcan1.Init.ReceiveFifoLocked = DISABLE;
 8000910:	4b07      	ldr	r3, [pc, #28]	; (8000930 <MX_CAN1_Init+0x64>)
 8000912:	2200      	movs	r2, #0
 8000914:	771a      	strb	r2, [r3, #28]
  hcan1.Init.TransmitFifoPriority = DISABLE;
 8000916:	4b06      	ldr	r3, [pc, #24]	; (8000930 <MX_CAN1_Init+0x64>)
 8000918:	2200      	movs	r2, #0
 800091a:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan1) != HAL_OK)
 800091c:	4804      	ldr	r0, [pc, #16]	; (8000930 <MX_CAN1_Init+0x64>)
 800091e:	f003 f95d 	bl	8003bdc <HAL_CAN_Init>
 8000922:	4603      	mov	r3, r0
 8000924:	2b00      	cmp	r3, #0
 8000926:	d001      	beq.n	800092c <MX_CAN1_Init+0x60>
  {
    Error_Handler();
 8000928:	f000 feac 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN CAN1_Init 2 */

  /* USER CODE END CAN1_Init 2 */

}
 800092c:	bf00      	nop
 800092e:	bd80      	pop	{r7, pc}
 8000930:	200003d8 	.word	0x200003d8
 8000934:	40006400 	.word	0x40006400

08000938 <MX_CAN2_Init>:
/* CAN2 init function */
void MX_CAN2_Init(void)
{
 8000938:	b580      	push	{r7, lr}
 800093a:	af00      	add	r7, sp, #0
  /* USER CODE END CAN2_Init 0 */

  /* USER CODE BEGIN CAN2_Init 1 */

  /* USER CODE END CAN2_Init 1 */
  hcan2.Instance = CAN2;
 800093c:	4b17      	ldr	r3, [pc, #92]	; (800099c <MX_CAN2_Init+0x64>)
 800093e:	4a18      	ldr	r2, [pc, #96]	; (80009a0 <MX_CAN2_Init+0x68>)
 8000940:	601a      	str	r2, [r3, #0]
  hcan2.Init.Prescaler = 16;
 8000942:	4b16      	ldr	r3, [pc, #88]	; (800099c <MX_CAN2_Init+0x64>)
 8000944:	2210      	movs	r2, #16
 8000946:	605a      	str	r2, [r3, #4]
  hcan2.Init.Mode = CAN_MODE_NORMAL;
 8000948:	4b14      	ldr	r3, [pc, #80]	; (800099c <MX_CAN2_Init+0x64>)
 800094a:	2200      	movs	r2, #0
 800094c:	609a      	str	r2, [r3, #8]
  hcan2.Init.SyncJumpWidth = CAN_SJW_1TQ;
 800094e:	4b13      	ldr	r3, [pc, #76]	; (800099c <MX_CAN2_Init+0x64>)
 8000950:	2200      	movs	r2, #0
 8000952:	60da      	str	r2, [r3, #12]
  hcan2.Init.TimeSeg1 = CAN_BS1_2TQ;
 8000954:	4b11      	ldr	r3, [pc, #68]	; (800099c <MX_CAN2_Init+0x64>)
 8000956:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800095a:	611a      	str	r2, [r3, #16]
  hcan2.Init.TimeSeg2 = CAN_BS2_2TQ;
 800095c:	4b0f      	ldr	r3, [pc, #60]	; (800099c <MX_CAN2_Init+0x64>)
 800095e:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8000962:	615a      	str	r2, [r3, #20]
  hcan2.Init.TimeTriggeredMode = DISABLE;
 8000964:	4b0d      	ldr	r3, [pc, #52]	; (800099c <MX_CAN2_Init+0x64>)
 8000966:	2200      	movs	r2, #0
 8000968:	761a      	strb	r2, [r3, #24]
  hcan2.Init.AutoBusOff = DISABLE;
 800096a:	4b0c      	ldr	r3, [pc, #48]	; (800099c <MX_CAN2_Init+0x64>)
 800096c:	2200      	movs	r2, #0
 800096e:	765a      	strb	r2, [r3, #25]
  hcan2.Init.AutoWakeUp = DISABLE;
 8000970:	4b0a      	ldr	r3, [pc, #40]	; (800099c <MX_CAN2_Init+0x64>)
 8000972:	2200      	movs	r2, #0
 8000974:	769a      	strb	r2, [r3, #26]
  hcan2.Init.AutoRetransmission = DISABLE;
 8000976:	4b09      	ldr	r3, [pc, #36]	; (800099c <MX_CAN2_Init+0x64>)
 8000978:	2200      	movs	r2, #0
 800097a:	76da      	strb	r2, [r3, #27]
  hcan2.Init.ReceiveFifoLocked = DISABLE;
 800097c:	4b07      	ldr	r3, [pc, #28]	; (800099c <MX_CAN2_Init+0x64>)
 800097e:	2200      	movs	r2, #0
 8000980:	771a      	strb	r2, [r3, #28]
  hcan2.Init.TransmitFifoPriority = DISABLE;
 8000982:	4b06      	ldr	r3, [pc, #24]	; (800099c <MX_CAN2_Init+0x64>)
 8000984:	2200      	movs	r2, #0
 8000986:	775a      	strb	r2, [r3, #29]
  if (HAL_CAN_Init(&hcan2) != HAL_OK)
 8000988:	4804      	ldr	r0, [pc, #16]	; (800099c <MX_CAN2_Init+0x64>)
 800098a:	f003 f927 	bl	8003bdc <HAL_CAN_Init>
 800098e:	4603      	mov	r3, r0
 8000990:	2b00      	cmp	r3, #0
 8000992:	d001      	beq.n	8000998 <MX_CAN2_Init+0x60>
  {
    Error_Handler();
 8000994:	f000 fe76 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN CAN2_Init 2 */

  /* USER CODE END CAN2_Init 2 */

}
 8000998:	bf00      	nop
 800099a:	bd80      	pop	{r7, pc}
 800099c:	20000400 	.word	0x20000400
 80009a0:	40006800 	.word	0x40006800

080009a4 <HAL_CAN_MspInit>:

static uint32_t HAL_RCC_CAN1_CLK_ENABLED=0;

void HAL_CAN_MspInit(CAN_HandleTypeDef* canHandle)
{
 80009a4:	b580      	push	{r7, lr}
 80009a6:	b08c      	sub	sp, #48	; 0x30
 80009a8:	af00      	add	r7, sp, #0
 80009aa:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80009ac:	f107 031c 	add.w	r3, r7, #28
 80009b0:	2200      	movs	r2, #0
 80009b2:	601a      	str	r2, [r3, #0]
 80009b4:	605a      	str	r2, [r3, #4]
 80009b6:	609a      	str	r2, [r3, #8]
 80009b8:	60da      	str	r2, [r3, #12]
 80009ba:	611a      	str	r2, [r3, #16]
  if(canHandle->Instance==CAN1)
 80009bc:	687b      	ldr	r3, [r7, #4]
 80009be:	681b      	ldr	r3, [r3, #0]
 80009c0:	4a4e      	ldr	r2, [pc, #312]	; (8000afc <HAL_CAN_MspInit+0x158>)
 80009c2:	4293      	cmp	r3, r2
 80009c4:	d152      	bne.n	8000a6c <HAL_CAN_MspInit+0xc8>
  {
  /* USER CODE BEGIN CAN1_MspInit 0 */

  /* USER CODE END CAN1_MspInit 0 */
    /* CAN1 clock enable */
    HAL_RCC_CAN1_CLK_ENABLED++;
 80009c6:	4b4e      	ldr	r3, [pc, #312]	; (8000b00 <HAL_CAN_MspInit+0x15c>)
 80009c8:	681b      	ldr	r3, [r3, #0]
 80009ca:	3301      	adds	r3, #1
 80009cc:	4a4c      	ldr	r2, [pc, #304]	; (8000b00 <HAL_CAN_MspInit+0x15c>)
 80009ce:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 80009d0:	4b4b      	ldr	r3, [pc, #300]	; (8000b00 <HAL_CAN_MspInit+0x15c>)
 80009d2:	681b      	ldr	r3, [r3, #0]
 80009d4:	2b01      	cmp	r3, #1
 80009d6:	d10b      	bne.n	80009f0 <HAL_CAN_MspInit+0x4c>
      __HAL_RCC_CAN1_CLK_ENABLE();
 80009d8:	4b4a      	ldr	r3, [pc, #296]	; (8000b04 <HAL_CAN_MspInit+0x160>)
 80009da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009dc:	4a49      	ldr	r2, [pc, #292]	; (8000b04 <HAL_CAN_MspInit+0x160>)
 80009de:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80009e2:	6413      	str	r3, [r2, #64]	; 0x40
 80009e4:	4b47      	ldr	r3, [pc, #284]	; (8000b04 <HAL_CAN_MspInit+0x160>)
 80009e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80009e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80009ec:	61bb      	str	r3, [r7, #24]
 80009ee:	69bb      	ldr	r3, [r7, #24]
    }

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80009f0:	4b44      	ldr	r3, [pc, #272]	; (8000b04 <HAL_CAN_MspInit+0x160>)
 80009f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009f4:	4a43      	ldr	r2, [pc, #268]	; (8000b04 <HAL_CAN_MspInit+0x160>)
 80009f6:	f043 0301 	orr.w	r3, r3, #1
 80009fa:	6313      	str	r3, [r2, #48]	; 0x30
 80009fc:	4b41      	ldr	r3, [pc, #260]	; (8000b04 <HAL_CAN_MspInit+0x160>)
 80009fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000a00:	f003 0301 	and.w	r3, r3, #1
 8000a04:	617b      	str	r3, [r7, #20]
 8000a06:	697b      	ldr	r3, [r7, #20]
    /**CAN1 GPIO Configuration
    PA11     ------> CAN1_RX
    PA12     ------> CAN1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_12;
 8000a08:	f44f 53c0 	mov.w	r3, #6144	; 0x1800
 8000a0c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000a0e:	2302      	movs	r3, #2
 8000a10:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000a12:	2300      	movs	r3, #0
 8000a14:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000a16:	2303      	movs	r3, #3
 8000a18:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN1;
 8000a1a:	2309      	movs	r3, #9
 8000a1c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000a1e:	f107 031c 	add.w	r3, r7, #28
 8000a22:	4619      	mov	r1, r3
 8000a24:	4838      	ldr	r0, [pc, #224]	; (8000b08 <HAL_CAN_MspInit+0x164>)
 8000a26:	f005 ff65 	bl	80068f4 <HAL_GPIO_Init>

    /* CAN1 interrupt Init */
    HAL_NVIC_SetPriority(CAN1_TX_IRQn, 5, 0);
 8000a2a:	2200      	movs	r2, #0
 8000a2c:	2105      	movs	r1, #5
 8000a2e:	2013      	movs	r0, #19
 8000a30:	f003 fcc0 	bl	80043b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_TX_IRQn);
 8000a34:	2013      	movs	r0, #19
 8000a36:	f003 fcd9 	bl	80043ec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX0_IRQn, 5, 0);
 8000a3a:	2200      	movs	r2, #0
 8000a3c:	2105      	movs	r1, #5
 8000a3e:	2014      	movs	r0, #20
 8000a40:	f003 fcb8 	bl	80043b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX0_IRQn);
 8000a44:	2014      	movs	r0, #20
 8000a46:	f003 fcd1 	bl	80043ec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_RX1_IRQn, 5, 0);
 8000a4a:	2200      	movs	r2, #0
 8000a4c:	2105      	movs	r1, #5
 8000a4e:	2015      	movs	r0, #21
 8000a50:	f003 fcb0 	bl	80043b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_RX1_IRQn);
 8000a54:	2015      	movs	r0, #21
 8000a56:	f003 fcc9 	bl	80043ec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(CAN1_SCE_IRQn, 5, 0);
 8000a5a:	2200      	movs	r2, #0
 8000a5c:	2105      	movs	r1, #5
 8000a5e:	2016      	movs	r0, #22
 8000a60:	f003 fca8 	bl	80043b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(CAN1_SCE_IRQn);
 8000a64:	2016      	movs	r0, #22
 8000a66:	f003 fcc1 	bl	80043ec <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN CAN2_MspInit 1 */

  /* USER CODE END CAN2_MspInit 1 */
  }
}
 8000a6a:	e042      	b.n	8000af2 <HAL_CAN_MspInit+0x14e>
  else if(canHandle->Instance==CAN2)
 8000a6c:	687b      	ldr	r3, [r7, #4]
 8000a6e:	681b      	ldr	r3, [r3, #0]
 8000a70:	4a26      	ldr	r2, [pc, #152]	; (8000b0c <HAL_CAN_MspInit+0x168>)
 8000a72:	4293      	cmp	r3, r2
 8000a74:	d13d      	bne.n	8000af2 <HAL_CAN_MspInit+0x14e>
    __HAL_RCC_CAN2_CLK_ENABLE();
 8000a76:	4b23      	ldr	r3, [pc, #140]	; (8000b04 <HAL_CAN_MspInit+0x160>)
 8000a78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a7a:	4a22      	ldr	r2, [pc, #136]	; (8000b04 <HAL_CAN_MspInit+0x160>)
 8000a7c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8000a80:	6413      	str	r3, [r2, #64]	; 0x40
 8000a82:	4b20      	ldr	r3, [pc, #128]	; (8000b04 <HAL_CAN_MspInit+0x160>)
 8000a84:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000a86:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8000a8a:	613b      	str	r3, [r7, #16]
 8000a8c:	693b      	ldr	r3, [r7, #16]
    HAL_RCC_CAN1_CLK_ENABLED++;
 8000a8e:	4b1c      	ldr	r3, [pc, #112]	; (8000b00 <HAL_CAN_MspInit+0x15c>)
 8000a90:	681b      	ldr	r3, [r3, #0]
 8000a92:	3301      	adds	r3, #1
 8000a94:	4a1a      	ldr	r2, [pc, #104]	; (8000b00 <HAL_CAN_MspInit+0x15c>)
 8000a96:	6013      	str	r3, [r2, #0]
    if(HAL_RCC_CAN1_CLK_ENABLED==1){
 8000a98:	4b19      	ldr	r3, [pc, #100]	; (8000b00 <HAL_CAN_MspInit+0x15c>)
 8000a9a:	681b      	ldr	r3, [r3, #0]
 8000a9c:	2b01      	cmp	r3, #1
 8000a9e:	d10b      	bne.n	8000ab8 <HAL_CAN_MspInit+0x114>
      __HAL_RCC_CAN1_CLK_ENABLE();
 8000aa0:	4b18      	ldr	r3, [pc, #96]	; (8000b04 <HAL_CAN_MspInit+0x160>)
 8000aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000aa4:	4a17      	ldr	r2, [pc, #92]	; (8000b04 <HAL_CAN_MspInit+0x160>)
 8000aa6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8000aaa:	6413      	str	r3, [r2, #64]	; 0x40
 8000aac:	4b15      	ldr	r3, [pc, #84]	; (8000b04 <HAL_CAN_MspInit+0x160>)
 8000aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ab0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8000ab4:	60fb      	str	r3, [r7, #12]
 8000ab6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000ab8:	4b12      	ldr	r3, [pc, #72]	; (8000b04 <HAL_CAN_MspInit+0x160>)
 8000aba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000abc:	4a11      	ldr	r2, [pc, #68]	; (8000b04 <HAL_CAN_MspInit+0x160>)
 8000abe:	f043 0302 	orr.w	r3, r3, #2
 8000ac2:	6313      	str	r3, [r2, #48]	; 0x30
 8000ac4:	4b0f      	ldr	r3, [pc, #60]	; (8000b04 <HAL_CAN_MspInit+0x160>)
 8000ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ac8:	f003 0302 	and.w	r3, r3, #2
 8000acc:	60bb      	str	r3, [r7, #8]
 8000ace:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_6;
 8000ad0:	f44f 5382 	mov.w	r3, #4160	; 0x1040
 8000ad4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000ad6:	2302      	movs	r3, #2
 8000ad8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ada:	2300      	movs	r3, #0
 8000adc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000ade:	2303      	movs	r3, #3
 8000ae0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_CAN2;
 8000ae2:	2309      	movs	r3, #9
 8000ae4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000ae6:	f107 031c 	add.w	r3, r7, #28
 8000aea:	4619      	mov	r1, r3
 8000aec:	4808      	ldr	r0, [pc, #32]	; (8000b10 <HAL_CAN_MspInit+0x16c>)
 8000aee:	f005 ff01 	bl	80068f4 <HAL_GPIO_Init>
}
 8000af2:	bf00      	nop
 8000af4:	3730      	adds	r7, #48	; 0x30
 8000af6:	46bd      	mov	sp, r7
 8000af8:	bd80      	pop	{r7, pc}
 8000afa:	bf00      	nop
 8000afc:	40006400 	.word	0x40006400
 8000b00:	20000428 	.word	0x20000428
 8000b04:	40023800 	.word	0x40023800
 8000b08:	40020000 	.word	0x40020000
 8000b0c:	40006800 	.word	0x40006800
 8000b10:	40020400 	.word	0x40020400

08000b14 <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 8000b14:	b580      	push	{r7, lr}
 8000b16:	b082      	sub	sp, #8
 8000b18:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 8000b1a:	463b      	mov	r3, r7
 8000b1c:	2200      	movs	r2, #0
 8000b1e:	601a      	str	r2, [r3, #0]
 8000b20:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 8000b22:	4b0f      	ldr	r3, [pc, #60]	; (8000b60 <MX_DAC_Init+0x4c>)
 8000b24:	4a0f      	ldr	r2, [pc, #60]	; (8000b64 <MX_DAC_Init+0x50>)
 8000b26:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 8000b28:	480d      	ldr	r0, [pc, #52]	; (8000b60 <MX_DAC_Init+0x4c>)
 8000b2a:	f003 fc6d 	bl	8004408 <HAL_DAC_Init>
 8000b2e:	4603      	mov	r3, r0
 8000b30:	2b00      	cmp	r3, #0
 8000b32:	d001      	beq.n	8000b38 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 8000b34:	f000 fda6 	bl	8001684 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 8000b38:	2300      	movs	r3, #0
 8000b3a:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 8000b3c:	2300      	movs	r3, #0
 8000b3e:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 8000b40:	463b      	mov	r3, r7
 8000b42:	2200      	movs	r2, #0
 8000b44:	4619      	mov	r1, r3
 8000b46:	4806      	ldr	r0, [pc, #24]	; (8000b60 <MX_DAC_Init+0x4c>)
 8000b48:	f003 fd01 	bl	800454e <HAL_DAC_ConfigChannel>
 8000b4c:	4603      	mov	r3, r0
 8000b4e:	2b00      	cmp	r3, #0
 8000b50:	d001      	beq.n	8000b56 <MX_DAC_Init+0x42>
  {
    Error_Handler();
 8000b52:	f000 fd97 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 8000b56:	bf00      	nop
 8000b58:	3708      	adds	r7, #8
 8000b5a:	46bd      	mov	sp, r7
 8000b5c:	bd80      	pop	{r7, pc}
 8000b5e:	bf00      	nop
 8000b60:	2000042c 	.word	0x2000042c
 8000b64:	40007400 	.word	0x40007400

08000b68 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000b68:	b580      	push	{r7, lr}
 8000b6a:	b08a      	sub	sp, #40	; 0x28
 8000b6c:	af00      	add	r7, sp, #0
 8000b6e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b70:	f107 0314 	add.w	r3, r7, #20
 8000b74:	2200      	movs	r2, #0
 8000b76:	601a      	str	r2, [r3, #0]
 8000b78:	605a      	str	r2, [r3, #4]
 8000b7a:	609a      	str	r2, [r3, #8]
 8000b7c:	60da      	str	r2, [r3, #12]
 8000b7e:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000b80:	687b      	ldr	r3, [r7, #4]
 8000b82:	681b      	ldr	r3, [r3, #0]
 8000b84:	4a15      	ldr	r2, [pc, #84]	; (8000bdc <HAL_DAC_MspInit+0x74>)
 8000b86:	4293      	cmp	r3, r2
 8000b88:	d123      	bne.n	8000bd2 <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000b8a:	4b15      	ldr	r3, [pc, #84]	; (8000be0 <HAL_DAC_MspInit+0x78>)
 8000b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8e:	4a14      	ldr	r2, [pc, #80]	; (8000be0 <HAL_DAC_MspInit+0x78>)
 8000b90:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 8000b94:	6413      	str	r3, [r2, #64]	; 0x40
 8000b96:	4b12      	ldr	r3, [pc, #72]	; (8000be0 <HAL_DAC_MspInit+0x78>)
 8000b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b9a:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000b9e:	613b      	str	r3, [r7, #16]
 8000ba0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000ba2:	4b0f      	ldr	r3, [pc, #60]	; (8000be0 <HAL_DAC_MspInit+0x78>)
 8000ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba6:	4a0e      	ldr	r2, [pc, #56]	; (8000be0 <HAL_DAC_MspInit+0x78>)
 8000ba8:	f043 0301 	orr.w	r3, r3, #1
 8000bac:	6313      	str	r3, [r2, #48]	; 0x30
 8000bae:	4b0c      	ldr	r3, [pc, #48]	; (8000be0 <HAL_DAC_MspInit+0x78>)
 8000bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bb2:	f003 0301 	and.w	r3, r3, #1
 8000bb6:	60fb      	str	r3, [r7, #12]
 8000bb8:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000bba:	2310      	movs	r3, #16
 8000bbc:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000bbe:	2303      	movs	r3, #3
 8000bc0:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000bc2:	2300      	movs	r3, #0
 8000bc4:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000bc6:	f107 0314 	add.w	r3, r7, #20
 8000bca:	4619      	mov	r1, r3
 8000bcc:	4805      	ldr	r0, [pc, #20]	; (8000be4 <HAL_DAC_MspInit+0x7c>)
 8000bce:	f005 fe91 	bl	80068f4 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 8000bd2:	bf00      	nop
 8000bd4:	3728      	adds	r7, #40	; 0x28
 8000bd6:	46bd      	mov	sp, r7
 8000bd8:	bd80      	pop	{r7, pc}
 8000bda:	bf00      	nop
 8000bdc:	40007400 	.word	0x40007400
 8000be0:	40023800 	.word	0x40023800
 8000be4:	40020000 	.word	0x40020000

08000be8 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8000be8:	b580      	push	{r7, lr}
 8000bea:	b082      	sub	sp, #8
 8000bec:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8000bee:	4b4e      	ldr	r3, [pc, #312]	; (8000d28 <MX_DMA_Init+0x140>)
 8000bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf2:	4a4d      	ldr	r2, [pc, #308]	; (8000d28 <MX_DMA_Init+0x140>)
 8000bf4:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfa:	4b4b      	ldr	r3, [pc, #300]	; (8000d28 <MX_DMA_Init+0x140>)
 8000bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bfe:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000c02:	607b      	str	r3, [r7, #4]
 8000c04:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 8000c06:	4b48      	ldr	r3, [pc, #288]	; (8000d28 <MX_DMA_Init+0x140>)
 8000c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0a:	4a47      	ldr	r2, [pc, #284]	; (8000d28 <MX_DMA_Init+0x140>)
 8000c0c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8000c10:	6313      	str	r3, [r2, #48]	; 0x30
 8000c12:	4b45      	ldr	r3, [pc, #276]	; (8000d28 <MX_DMA_Init+0x140>)
 8000c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c16:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8000c1a:	603b      	str	r3, [r7, #0]
 8000c1c:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 8000c1e:	2200      	movs	r2, #0
 8000c20:	2105      	movs	r1, #5
 8000c22:	200b      	movs	r0, #11
 8000c24:	f003 fbc6 	bl	80043b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 8000c28:	200b      	movs	r0, #11
 8000c2a:	f003 fbdf 	bl	80043ec <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 8000c2e:	2200      	movs	r2, #0
 8000c30:	2105      	movs	r1, #5
 8000c32:	200c      	movs	r0, #12
 8000c34:	f003 fbbe 	bl	80043b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 8000c38:	200c      	movs	r0, #12
 8000c3a:	f003 fbd7 	bl	80043ec <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 8000c3e:	2200      	movs	r2, #0
 8000c40:	2105      	movs	r1, #5
 8000c42:	200d      	movs	r0, #13
 8000c44:	f003 fbb6 	bl	80043b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000c48:	200d      	movs	r0, #13
 8000c4a:	f003 fbcf 	bl	80043ec <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000c4e:	2200      	movs	r2, #0
 8000c50:	2105      	movs	r1, #5
 8000c52:	200e      	movs	r0, #14
 8000c54:	f003 fbae 	bl	80043b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000c58:	200e      	movs	r0, #14
 8000c5a:	f003 fbc7 	bl	80043ec <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000c5e:	2200      	movs	r2, #0
 8000c60:	2105      	movs	r1, #5
 8000c62:	200f      	movs	r0, #15
 8000c64:	f003 fba6 	bl	80043b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000c68:	200f      	movs	r0, #15
 8000c6a:	f003 fbbf 	bl	80043ec <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000c6e:	2200      	movs	r2, #0
 8000c70:	2105      	movs	r1, #5
 8000c72:	2010      	movs	r0, #16
 8000c74:	f003 fb9e 	bl	80043b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000c78:	2010      	movs	r0, #16
 8000c7a:	f003 fbb7 	bl	80043ec <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000c7e:	2200      	movs	r2, #0
 8000c80:	2105      	movs	r1, #5
 8000c82:	2011      	movs	r0, #17
 8000c84:	f003 fb96 	bl	80043b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000c88:	2011      	movs	r0, #17
 8000c8a:	f003 fbaf 	bl	80043ec <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000c8e:	2200      	movs	r2, #0
 8000c90:	2105      	movs	r1, #5
 8000c92:	202f      	movs	r0, #47	; 0x2f
 8000c94:	f003 fb8e 	bl	80043b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000c98:	202f      	movs	r0, #47	; 0x2f
 8000c9a:	f003 fba7 	bl	80043ec <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000c9e:	2200      	movs	r2, #0
 8000ca0:	2105      	movs	r1, #5
 8000ca2:	2038      	movs	r0, #56	; 0x38
 8000ca4:	f003 fb86 	bl	80043b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000ca8:	2038      	movs	r0, #56	; 0x38
 8000caa:	f003 fb9f 	bl	80043ec <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000cae:	2200      	movs	r2, #0
 8000cb0:	2105      	movs	r1, #5
 8000cb2:	2039      	movs	r0, #57	; 0x39
 8000cb4:	f003 fb7e 	bl	80043b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000cb8:	2039      	movs	r0, #57	; 0x39
 8000cba:	f003 fb97 	bl	80043ec <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000cbe:	2200      	movs	r2, #0
 8000cc0:	2105      	movs	r1, #5
 8000cc2:	203a      	movs	r0, #58	; 0x3a
 8000cc4:	f003 fb76 	bl	80043b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000cc8:	203a      	movs	r0, #58	; 0x3a
 8000cca:	f003 fb8f 	bl	80043ec <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000cce:	2200      	movs	r2, #0
 8000cd0:	2105      	movs	r1, #5
 8000cd2:	203b      	movs	r0, #59	; 0x3b
 8000cd4:	f003 fb6e 	bl	80043b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000cd8:	203b      	movs	r0, #59	; 0x3b
 8000cda:	f003 fb87 	bl	80043ec <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8000cde:	2200      	movs	r2, #0
 8000ce0:	2105      	movs	r1, #5
 8000ce2:	203c      	movs	r0, #60	; 0x3c
 8000ce4:	f003 fb66 	bl	80043b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000ce8:	203c      	movs	r0, #60	; 0x3c
 8000cea:	f003 fb7f 	bl	80043ec <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 8000cee:	2200      	movs	r2, #0
 8000cf0:	2105      	movs	r1, #5
 8000cf2:	2044      	movs	r0, #68	; 0x44
 8000cf4:	f003 fb5e 	bl	80043b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000cf8:	2044      	movs	r0, #68	; 0x44
 8000cfa:	f003 fb77 	bl	80043ec <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8000cfe:	2200      	movs	r2, #0
 8000d00:	2105      	movs	r1, #5
 8000d02:	2045      	movs	r0, #69	; 0x45
 8000d04:	f003 fb56 	bl	80043b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000d08:	2045      	movs	r0, #69	; 0x45
 8000d0a:	f003 fb6f 	bl	80043ec <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8000d0e:	2200      	movs	r2, #0
 8000d10:	2105      	movs	r1, #5
 8000d12:	2046      	movs	r0, #70	; 0x46
 8000d14:	f003 fb4e 	bl	80043b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000d18:	2046      	movs	r0, #70	; 0x46
 8000d1a:	f003 fb67 	bl	80043ec <HAL_NVIC_EnableIRQ>

}
 8000d1e:	bf00      	nop
 8000d20:	3708      	adds	r7, #8
 8000d22:	46bd      	mov	sp, r7
 8000d24:	bd80      	pop	{r7, pc}
 8000d26:	bf00      	nop
 8000d28:	40023800 	.word	0x40023800

08000d2c <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000d2c:	b480      	push	{r7}
 8000d2e:	b085      	sub	sp, #20
 8000d30:	af00      	add	r7, sp, #0
 8000d32:	60f8      	str	r0, [r7, #12]
 8000d34:	60b9      	str	r1, [r7, #8]
 8000d36:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000d38:	68fb      	ldr	r3, [r7, #12]
 8000d3a:	4a07      	ldr	r2, [pc, #28]	; (8000d58 <vApplicationGetIdleTaskMemory+0x2c>)
 8000d3c:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000d3e:	68bb      	ldr	r3, [r7, #8]
 8000d40:	4a06      	ldr	r2, [pc, #24]	; (8000d5c <vApplicationGetIdleTaskMemory+0x30>)
 8000d42:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000d44:	687b      	ldr	r3, [r7, #4]
 8000d46:	2280      	movs	r2, #128	; 0x80
 8000d48:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000d4a:	bf00      	nop
 8000d4c:	3714      	adds	r7, #20
 8000d4e:	46bd      	mov	sp, r7
 8000d50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d54:	4770      	bx	lr
 8000d56:	bf00      	nop
 8000d58:	20000444 	.word	0x20000444
 8000d5c:	200004e4 	.word	0x200004e4

08000d60 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000d60:	b5b0      	push	{r4, r5, r7, lr}
 8000d62:	b088      	sub	sp, #32
 8000d64:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000d66:	4b0a      	ldr	r3, [pc, #40]	; (8000d90 <MX_FREERTOS_Init+0x30>)
 8000d68:	1d3c      	adds	r4, r7, #4
 8000d6a:	461d      	mov	r5, r3
 8000d6c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000d6e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000d70:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000d74:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000d78:	1d3b      	adds	r3, r7, #4
 8000d7a:	2100      	movs	r1, #0
 8000d7c:	4618      	mov	r0, r3
 8000d7e:	f00e fa1c 	bl	800f1ba <osThreadCreate>
 8000d82:	4603      	mov	r3, r0
 8000d84:	4a03      	ldr	r2, [pc, #12]	; (8000d94 <MX_FREERTOS_Init+0x34>)
 8000d86:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000d88:	bf00      	nop
 8000d8a:	3720      	adds	r7, #32
 8000d8c:	46bd      	mov	sp, r7
 8000d8e:	bdb0      	pop	{r4, r5, r7, pc}
 8000d90:	0801ec34 	.word	0x0801ec34
 8000d94:	20000440 	.word	0x20000440

08000d98 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000d98:	b580      	push	{r7, lr}
 8000d9a:	b082      	sub	sp, #8
 8000d9c:	af00      	add	r7, sp, #0
 8000d9e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000da0:	f00d fb36 	bl	800e410 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000da4:	2001      	movs	r0, #1
 8000da6:	f00e fa60 	bl	800f26a <osDelay>
 8000daa:	e7fb      	b.n	8000da4 <StartDefaultTask+0xc>

08000dac <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000dac:	b580      	push	{r7, lr}
 8000dae:	b08e      	sub	sp, #56	; 0x38
 8000db0:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000db2:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000db6:	2200      	movs	r2, #0
 8000db8:	601a      	str	r2, [r3, #0]
 8000dba:	605a      	str	r2, [r3, #4]
 8000dbc:	609a      	str	r2, [r3, #8]
 8000dbe:	60da      	str	r2, [r3, #12]
 8000dc0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000dc2:	4b4c      	ldr	r3, [pc, #304]	; (8000ef4 <MX_GPIO_Init+0x148>)
 8000dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dc6:	4a4b      	ldr	r2, [pc, #300]	; (8000ef4 <MX_GPIO_Init+0x148>)
 8000dc8:	f043 0310 	orr.w	r3, r3, #16
 8000dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dce:	4b49      	ldr	r3, [pc, #292]	; (8000ef4 <MX_GPIO_Init+0x148>)
 8000dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dd2:	f003 0310 	and.w	r3, r3, #16
 8000dd6:	623b      	str	r3, [r7, #32]
 8000dd8:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000dda:	4b46      	ldr	r3, [pc, #280]	; (8000ef4 <MX_GPIO_Init+0x148>)
 8000ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dde:	4a45      	ldr	r2, [pc, #276]	; (8000ef4 <MX_GPIO_Init+0x148>)
 8000de0:	f043 0304 	orr.w	r3, r3, #4
 8000de4:	6313      	str	r3, [r2, #48]	; 0x30
 8000de6:	4b43      	ldr	r3, [pc, #268]	; (8000ef4 <MX_GPIO_Init+0x148>)
 8000de8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000dea:	f003 0304 	and.w	r3, r3, #4
 8000dee:	61fb      	str	r3, [r7, #28]
 8000df0:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000df2:	4b40      	ldr	r3, [pc, #256]	; (8000ef4 <MX_GPIO_Init+0x148>)
 8000df4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000df6:	4a3f      	ldr	r2, [pc, #252]	; (8000ef4 <MX_GPIO_Init+0x148>)
 8000df8:	f043 0320 	orr.w	r3, r3, #32
 8000dfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000dfe:	4b3d      	ldr	r3, [pc, #244]	; (8000ef4 <MX_GPIO_Init+0x148>)
 8000e00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e02:	f003 0320 	and.w	r3, r3, #32
 8000e06:	61bb      	str	r3, [r7, #24]
 8000e08:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000e0a:	4b3a      	ldr	r3, [pc, #232]	; (8000ef4 <MX_GPIO_Init+0x148>)
 8000e0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e0e:	4a39      	ldr	r2, [pc, #228]	; (8000ef4 <MX_GPIO_Init+0x148>)
 8000e10:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000e14:	6313      	str	r3, [r2, #48]	; 0x30
 8000e16:	4b37      	ldr	r3, [pc, #220]	; (8000ef4 <MX_GPIO_Init+0x148>)
 8000e18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e1a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000e1e:	617b      	str	r3, [r7, #20]
 8000e20:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000e22:	4b34      	ldr	r3, [pc, #208]	; (8000ef4 <MX_GPIO_Init+0x148>)
 8000e24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e26:	4a33      	ldr	r2, [pc, #204]	; (8000ef4 <MX_GPIO_Init+0x148>)
 8000e28:	f043 0301 	orr.w	r3, r3, #1
 8000e2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e2e:	4b31      	ldr	r3, [pc, #196]	; (8000ef4 <MX_GPIO_Init+0x148>)
 8000e30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e32:	f003 0301 	and.w	r3, r3, #1
 8000e36:	613b      	str	r3, [r7, #16]
 8000e38:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000e3a:	4b2e      	ldr	r3, [pc, #184]	; (8000ef4 <MX_GPIO_Init+0x148>)
 8000e3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e3e:	4a2d      	ldr	r2, [pc, #180]	; (8000ef4 <MX_GPIO_Init+0x148>)
 8000e40:	f043 0302 	orr.w	r3, r3, #2
 8000e44:	6313      	str	r3, [r2, #48]	; 0x30
 8000e46:	4b2b      	ldr	r3, [pc, #172]	; (8000ef4 <MX_GPIO_Init+0x148>)
 8000e48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e4a:	f003 0302 	and.w	r3, r3, #2
 8000e4e:	60fb      	str	r3, [r7, #12]
 8000e50:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000e52:	4b28      	ldr	r3, [pc, #160]	; (8000ef4 <MX_GPIO_Init+0x148>)
 8000e54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e56:	4a27      	ldr	r2, [pc, #156]	; (8000ef4 <MX_GPIO_Init+0x148>)
 8000e58:	f043 0308 	orr.w	r3, r3, #8
 8000e5c:	6313      	str	r3, [r2, #48]	; 0x30
 8000e5e:	4b25      	ldr	r3, [pc, #148]	; (8000ef4 <MX_GPIO_Init+0x148>)
 8000e60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e62:	f003 0308 	and.w	r3, r3, #8
 8000e66:	60bb      	str	r3, [r7, #8]
 8000e68:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000e6a:	4b22      	ldr	r3, [pc, #136]	; (8000ef4 <MX_GPIO_Init+0x148>)
 8000e6c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e6e:	4a21      	ldr	r2, [pc, #132]	; (8000ef4 <MX_GPIO_Init+0x148>)
 8000e70:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000e74:	6313      	str	r3, [r2, #48]	; 0x30
 8000e76:	4b1f      	ldr	r3, [pc, #124]	; (8000ef4 <MX_GPIO_Init+0x148>)
 8000e78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000e7a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000e7e:	607b      	str	r3, [r7, #4]
 8000e80:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000e82:	2200      	movs	r2, #0
 8000e84:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000e88:	481b      	ldr	r0, [pc, #108]	; (8000ef8 <MX_GPIO_Init+0x14c>)
 8000e8a:	f005 fedf 	bl	8006c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000e8e:	2200      	movs	r2, #0
 8000e90:	2140      	movs	r1, #64	; 0x40
 8000e92:	481a      	ldr	r0, [pc, #104]	; (8000efc <MX_GPIO_Init+0x150>)
 8000e94:	f005 feda 	bl	8006c4c <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000e98:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000e9c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000e9e:	2301      	movs	r3, #1
 8000ea0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000eaa:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eae:	4619      	mov	r1, r3
 8000eb0:	4811      	ldr	r0, [pc, #68]	; (8000ef8 <MX_GPIO_Init+0x14c>)
 8000eb2:	f005 fd1f 	bl	80068f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000eb6:	2340      	movs	r3, #64	; 0x40
 8000eb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000eba:	2301      	movs	r3, #1
 8000ebc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000ec6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000eca:	4619      	mov	r1, r3
 8000ecc:	480b      	ldr	r0, [pc, #44]	; (8000efc <MX_GPIO_Init+0x150>)
 8000ece:	f005 fd11 	bl	80068f4 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000ed2:	2380      	movs	r3, #128	; 0x80
 8000ed4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000eda:	2300      	movs	r3, #0
 8000edc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000ede:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000ee2:	4619      	mov	r1, r3
 8000ee4:	4805      	ldr	r0, [pc, #20]	; (8000efc <MX_GPIO_Init+0x150>)
 8000ee6:	f005 fd05 	bl	80068f4 <HAL_GPIO_Init>

}
 8000eea:	bf00      	nop
 8000eec:	3738      	adds	r7, #56	; 0x38
 8000eee:	46bd      	mov	sp, r7
 8000ef0:	bd80      	pop	{r7, pc}
 8000ef2:	bf00      	nop
 8000ef4:	40023800 	.word	0x40023800
 8000ef8:	40020400 	.word	0x40020400
 8000efc:	40021800 	.word	0x40021800

08000f00 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c3_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000f00:	b580      	push	{r7, lr}
 8000f02:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000f04:	4b1b      	ldr	r3, [pc, #108]	; (8000f74 <MX_I2C1_Init+0x74>)
 8000f06:	4a1c      	ldr	r2, [pc, #112]	; (8000f78 <MX_I2C1_Init+0x78>)
 8000f08:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000f0a:	4b1a      	ldr	r3, [pc, #104]	; (8000f74 <MX_I2C1_Init+0x74>)
 8000f0c:	4a1b      	ldr	r2, [pc, #108]	; (8000f7c <MX_I2C1_Init+0x7c>)
 8000f0e:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000f10:	4b18      	ldr	r3, [pc, #96]	; (8000f74 <MX_I2C1_Init+0x74>)
 8000f12:	2200      	movs	r2, #0
 8000f14:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f16:	4b17      	ldr	r3, [pc, #92]	; (8000f74 <MX_I2C1_Init+0x74>)
 8000f18:	2201      	movs	r2, #1
 8000f1a:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f1c:	4b15      	ldr	r3, [pc, #84]	; (8000f74 <MX_I2C1_Init+0x74>)
 8000f1e:	2200      	movs	r2, #0
 8000f20:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000f22:	4b14      	ldr	r3, [pc, #80]	; (8000f74 <MX_I2C1_Init+0x74>)
 8000f24:	2200      	movs	r2, #0
 8000f26:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000f28:	4b12      	ldr	r3, [pc, #72]	; (8000f74 <MX_I2C1_Init+0x74>)
 8000f2a:	2200      	movs	r2, #0
 8000f2c:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000f2e:	4b11      	ldr	r3, [pc, #68]	; (8000f74 <MX_I2C1_Init+0x74>)
 8000f30:	2200      	movs	r2, #0
 8000f32:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000f34:	4b0f      	ldr	r3, [pc, #60]	; (8000f74 <MX_I2C1_Init+0x74>)
 8000f36:	2200      	movs	r2, #0
 8000f38:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000f3a:	480e      	ldr	r0, [pc, #56]	; (8000f74 <MX_I2C1_Init+0x74>)
 8000f3c:	f005 fea0 	bl	8006c80 <HAL_I2C_Init>
 8000f40:	4603      	mov	r3, r0
 8000f42:	2b00      	cmp	r3, #0
 8000f44:	d001      	beq.n	8000f4a <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000f46:	f000 fb9d 	bl	8001684 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000f4a:	2100      	movs	r1, #0
 8000f4c:	4809      	ldr	r0, [pc, #36]	; (8000f74 <MX_I2C1_Init+0x74>)
 8000f4e:	f007 fdf3 	bl	8008b38 <HAL_I2CEx_ConfigAnalogFilter>
 8000f52:	4603      	mov	r3, r0
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d001      	beq.n	8000f5c <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000f58:	f000 fb94 	bl	8001684 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000f5c:	2100      	movs	r1, #0
 8000f5e:	4805      	ldr	r0, [pc, #20]	; (8000f74 <MX_I2C1_Init+0x74>)
 8000f60:	f007 fe35 	bl	8008bce <HAL_I2CEx_ConfigDigitalFilter>
 8000f64:	4603      	mov	r3, r0
 8000f66:	2b00      	cmp	r3, #0
 8000f68:	d001      	beq.n	8000f6e <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000f6a:	f000 fb8b 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000f6e:	bf00      	nop
 8000f70:	bd80      	pop	{r7, pc}
 8000f72:	bf00      	nop
 8000f74:	200006e4 	.word	0x200006e4
 8000f78:	40005400 	.word	0x40005400
 8000f7c:	20404768 	.word	0x20404768

08000f80 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000f80:	b580      	push	{r7, lr}
 8000f82:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000f84:	4b1b      	ldr	r3, [pc, #108]	; (8000ff4 <MX_I2C2_Init+0x74>)
 8000f86:	4a1c      	ldr	r2, [pc, #112]	; (8000ff8 <MX_I2C2_Init+0x78>)
 8000f88:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 8000f8a:	4b1a      	ldr	r3, [pc, #104]	; (8000ff4 <MX_I2C2_Init+0x74>)
 8000f8c:	4a1b      	ldr	r2, [pc, #108]	; (8000ffc <MX_I2C2_Init+0x7c>)
 8000f8e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000f90:	4b18      	ldr	r3, [pc, #96]	; (8000ff4 <MX_I2C2_Init+0x74>)
 8000f92:	2200      	movs	r2, #0
 8000f94:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000f96:	4b17      	ldr	r3, [pc, #92]	; (8000ff4 <MX_I2C2_Init+0x74>)
 8000f98:	2201      	movs	r2, #1
 8000f9a:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000f9c:	4b15      	ldr	r3, [pc, #84]	; (8000ff4 <MX_I2C2_Init+0x74>)
 8000f9e:	2200      	movs	r2, #0
 8000fa0:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000fa2:	4b14      	ldr	r3, [pc, #80]	; (8000ff4 <MX_I2C2_Init+0x74>)
 8000fa4:	2200      	movs	r2, #0
 8000fa6:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000fa8:	4b12      	ldr	r3, [pc, #72]	; (8000ff4 <MX_I2C2_Init+0x74>)
 8000faa:	2200      	movs	r2, #0
 8000fac:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000fae:	4b11      	ldr	r3, [pc, #68]	; (8000ff4 <MX_I2C2_Init+0x74>)
 8000fb0:	2200      	movs	r2, #0
 8000fb2:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000fb4:	4b0f      	ldr	r3, [pc, #60]	; (8000ff4 <MX_I2C2_Init+0x74>)
 8000fb6:	2200      	movs	r2, #0
 8000fb8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000fba:	480e      	ldr	r0, [pc, #56]	; (8000ff4 <MX_I2C2_Init+0x74>)
 8000fbc:	f005 fe60 	bl	8006c80 <HAL_I2C_Init>
 8000fc0:	4603      	mov	r3, r0
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	d001      	beq.n	8000fca <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000fc6:	f000 fb5d 	bl	8001684 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000fca:	2100      	movs	r1, #0
 8000fcc:	4809      	ldr	r0, [pc, #36]	; (8000ff4 <MX_I2C2_Init+0x74>)
 8000fce:	f007 fdb3 	bl	8008b38 <HAL_I2CEx_ConfigAnalogFilter>
 8000fd2:	4603      	mov	r3, r0
 8000fd4:	2b00      	cmp	r3, #0
 8000fd6:	d001      	beq.n	8000fdc <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000fd8:	f000 fb54 	bl	8001684 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000fdc:	2100      	movs	r1, #0
 8000fde:	4805      	ldr	r0, [pc, #20]	; (8000ff4 <MX_I2C2_Init+0x74>)
 8000fe0:	f007 fdf5 	bl	8008bce <HAL_I2CEx_ConfigDigitalFilter>
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	2b00      	cmp	r3, #0
 8000fe8:	d001      	beq.n	8000fee <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000fea:	f000 fb4b 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000fee:	bf00      	nop
 8000ff0:	bd80      	pop	{r7, pc}
 8000ff2:	bf00      	nop
 8000ff4:	20000738 	.word	0x20000738
 8000ff8:	40005800 	.word	0x40005800
 8000ffc:	20404768 	.word	0x20404768

08001000 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8001000:	b580      	push	{r7, lr}
 8001002:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8001004:	4b1b      	ldr	r3, [pc, #108]	; (8001074 <MX_I2C3_Init+0x74>)
 8001006:	4a1c      	ldr	r2, [pc, #112]	; (8001078 <MX_I2C3_Init+0x78>)
 8001008:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20404768;
 800100a:	4b1a      	ldr	r3, [pc, #104]	; (8001074 <MX_I2C3_Init+0x74>)
 800100c:	4a1b      	ldr	r2, [pc, #108]	; (800107c <MX_I2C3_Init+0x7c>)
 800100e:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8001010:	4b18      	ldr	r3, [pc, #96]	; (8001074 <MX_I2C3_Init+0x74>)
 8001012:	2200      	movs	r2, #0
 8001014:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001016:	4b17      	ldr	r3, [pc, #92]	; (8001074 <MX_I2C3_Init+0x74>)
 8001018:	2201      	movs	r2, #1
 800101a:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800101c:	4b15      	ldr	r3, [pc, #84]	; (8001074 <MX_I2C3_Init+0x74>)
 800101e:	2200      	movs	r2, #0
 8001020:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8001022:	4b14      	ldr	r3, [pc, #80]	; (8001074 <MX_I2C3_Init+0x74>)
 8001024:	2200      	movs	r2, #0
 8001026:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8001028:	4b12      	ldr	r3, [pc, #72]	; (8001074 <MX_I2C3_Init+0x74>)
 800102a:	2200      	movs	r2, #0
 800102c:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800102e:	4b11      	ldr	r3, [pc, #68]	; (8001074 <MX_I2C3_Init+0x74>)
 8001030:	2200      	movs	r2, #0
 8001032:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001034:	4b0f      	ldr	r3, [pc, #60]	; (8001074 <MX_I2C3_Init+0x74>)
 8001036:	2200      	movs	r2, #0
 8001038:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 800103a:	480e      	ldr	r0, [pc, #56]	; (8001074 <MX_I2C3_Init+0x74>)
 800103c:	f005 fe20 	bl	8006c80 <HAL_I2C_Init>
 8001040:	4603      	mov	r3, r0
 8001042:	2b00      	cmp	r3, #0
 8001044:	d001      	beq.n	800104a <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8001046:	f000 fb1d 	bl	8001684 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 800104a:	2100      	movs	r1, #0
 800104c:	4809      	ldr	r0, [pc, #36]	; (8001074 <MX_I2C3_Init+0x74>)
 800104e:	f007 fd73 	bl	8008b38 <HAL_I2CEx_ConfigAnalogFilter>
 8001052:	4603      	mov	r3, r0
 8001054:	2b00      	cmp	r3, #0
 8001056:	d001      	beq.n	800105c <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8001058:	f000 fb14 	bl	8001684 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 800105c:	2100      	movs	r1, #0
 800105e:	4805      	ldr	r0, [pc, #20]	; (8001074 <MX_I2C3_Init+0x74>)
 8001060:	f007 fdb5 	bl	8008bce <HAL_I2CEx_ConfigDigitalFilter>
 8001064:	4603      	mov	r3, r0
 8001066:	2b00      	cmp	r3, #0
 8001068:	d001      	beq.n	800106e <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 800106a:	f000 fb0b 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 800106e:	bf00      	nop
 8001070:	bd80      	pop	{r7, pc}
 8001072:	bf00      	nop
 8001074:	2000078c 	.word	0x2000078c
 8001078:	40005c00 	.word	0x40005c00
 800107c:	20404768 	.word	0x20404768

08001080 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8001080:	b580      	push	{r7, lr}
 8001082:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8001084:	4b1b      	ldr	r3, [pc, #108]	; (80010f4 <MX_I2C4_Init+0x74>)
 8001086:	4a1c      	ldr	r2, [pc, #112]	; (80010f8 <MX_I2C4_Init+0x78>)
 8001088:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20404768;
 800108a:	4b1a      	ldr	r3, [pc, #104]	; (80010f4 <MX_I2C4_Init+0x74>)
 800108c:	4a1b      	ldr	r2, [pc, #108]	; (80010fc <MX_I2C4_Init+0x7c>)
 800108e:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8001090:	4b18      	ldr	r3, [pc, #96]	; (80010f4 <MX_I2C4_Init+0x74>)
 8001092:	2200      	movs	r2, #0
 8001094:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001096:	4b17      	ldr	r3, [pc, #92]	; (80010f4 <MX_I2C4_Init+0x74>)
 8001098:	2201      	movs	r2, #1
 800109a:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800109c:	4b15      	ldr	r3, [pc, #84]	; (80010f4 <MX_I2C4_Init+0x74>)
 800109e:	2200      	movs	r2, #0
 80010a0:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 80010a2:	4b14      	ldr	r3, [pc, #80]	; (80010f4 <MX_I2C4_Init+0x74>)
 80010a4:	2200      	movs	r2, #0
 80010a6:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 80010a8:	4b12      	ldr	r3, [pc, #72]	; (80010f4 <MX_I2C4_Init+0x74>)
 80010aa:	2200      	movs	r2, #0
 80010ac:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80010ae:	4b11      	ldr	r3, [pc, #68]	; (80010f4 <MX_I2C4_Init+0x74>)
 80010b0:	2200      	movs	r2, #0
 80010b2:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80010b4:	4b0f      	ldr	r3, [pc, #60]	; (80010f4 <MX_I2C4_Init+0x74>)
 80010b6:	2200      	movs	r2, #0
 80010b8:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 80010ba:	480e      	ldr	r0, [pc, #56]	; (80010f4 <MX_I2C4_Init+0x74>)
 80010bc:	f005 fde0 	bl	8006c80 <HAL_I2C_Init>
 80010c0:	4603      	mov	r3, r0
 80010c2:	2b00      	cmp	r3, #0
 80010c4:	d001      	beq.n	80010ca <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 80010c6:	f000 fadd 	bl	8001684 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 80010ca:	2100      	movs	r1, #0
 80010cc:	4809      	ldr	r0, [pc, #36]	; (80010f4 <MX_I2C4_Init+0x74>)
 80010ce:	f007 fd33 	bl	8008b38 <HAL_I2CEx_ConfigAnalogFilter>
 80010d2:	4603      	mov	r3, r0
 80010d4:	2b00      	cmp	r3, #0
 80010d6:	d001      	beq.n	80010dc <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 80010d8:	f000 fad4 	bl	8001684 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 80010dc:	2100      	movs	r1, #0
 80010de:	4805      	ldr	r0, [pc, #20]	; (80010f4 <MX_I2C4_Init+0x74>)
 80010e0:	f007 fd75 	bl	8008bce <HAL_I2CEx_ConfigDigitalFilter>
 80010e4:	4603      	mov	r3, r0
 80010e6:	2b00      	cmp	r3, #0
 80010e8:	d001      	beq.n	80010ee <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 80010ea:	f000 facb 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 80010ee:	bf00      	nop
 80010f0:	bd80      	pop	{r7, pc}
 80010f2:	bf00      	nop
 80010f4:	200007e0 	.word	0x200007e0
 80010f8:	40006000 	.word	0x40006000
 80010fc:	20404768 	.word	0x20404768

08001100 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8001100:	b580      	push	{r7, lr}
 8001102:	b0b2      	sub	sp, #200	; 0xc8
 8001104:	af00      	add	r7, sp, #0
 8001106:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001108:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800110c:	2200      	movs	r2, #0
 800110e:	601a      	str	r2, [r3, #0]
 8001110:	605a      	str	r2, [r3, #4]
 8001112:	609a      	str	r2, [r3, #8]
 8001114:	60da      	str	r2, [r3, #12]
 8001116:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8001118:	f107 0330 	add.w	r3, r7, #48	; 0x30
 800111c:	2284      	movs	r2, #132	; 0x84
 800111e:	2100      	movs	r1, #0
 8001120:	4618      	mov	r0, r3
 8001122:	f01c fe72 	bl	801de0a <memset>
  if(i2cHandle->Instance==I2C1)
 8001126:	687b      	ldr	r3, [r7, #4]
 8001128:	681b      	ldr	r3, [r3, #0]
 800112a:	4a69      	ldr	r2, [pc, #420]	; (80012d0 <HAL_I2C_MspInit+0x1d0>)
 800112c:	4293      	cmp	r3, r2
 800112e:	d17c      	bne.n	800122a <HAL_I2C_MspInit+0x12a>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8001130:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8001134:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8001136:	2300      	movs	r3, #0
 8001138:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800113c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001140:	4618      	mov	r0, r3
 8001142:	f008 faed 	bl	8009720 <HAL_RCCEx_PeriphCLKConfig>
 8001146:	4603      	mov	r3, r0
 8001148:	2b00      	cmp	r3, #0
 800114a:	d001      	beq.n	8001150 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 800114c:	f000 fa9a 	bl	8001684 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001150:	4b60      	ldr	r3, [pc, #384]	; (80012d4 <HAL_I2C_MspInit+0x1d4>)
 8001152:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001154:	4a5f      	ldr	r2, [pc, #380]	; (80012d4 <HAL_I2C_MspInit+0x1d4>)
 8001156:	f043 0302 	orr.w	r3, r3, #2
 800115a:	6313      	str	r3, [r2, #48]	; 0x30
 800115c:	4b5d      	ldr	r3, [pc, #372]	; (80012d4 <HAL_I2C_MspInit+0x1d4>)
 800115e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001160:	f003 0302 	and.w	r3, r3, #2
 8001164:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001166:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001168:	f44f 7340 	mov.w	r3, #768	; 0x300
 800116c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001170:	2312      	movs	r3, #18
 8001172:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001176:	2301      	movs	r3, #1
 8001178:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800117c:	2303      	movs	r3, #3
 800117e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001182:	2304      	movs	r3, #4
 8001184:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001188:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800118c:	4619      	mov	r1, r3
 800118e:	4852      	ldr	r0, [pc, #328]	; (80012d8 <HAL_I2C_MspInit+0x1d8>)
 8001190:	f005 fbb0 	bl	80068f4 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001194:	4b4f      	ldr	r3, [pc, #316]	; (80012d4 <HAL_I2C_MspInit+0x1d4>)
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001198:	4a4e      	ldr	r2, [pc, #312]	; (80012d4 <HAL_I2C_MspInit+0x1d4>)
 800119a:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800119e:	6413      	str	r3, [r2, #64]	; 0x40
 80011a0:	4b4c      	ldr	r3, [pc, #304]	; (80012d4 <HAL_I2C_MspInit+0x1d4>)
 80011a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80011a8:	62bb      	str	r3, [r7, #40]	; 0x28
 80011aa:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 80011ac:	4b4b      	ldr	r3, [pc, #300]	; (80012dc <HAL_I2C_MspInit+0x1dc>)
 80011ae:	4a4c      	ldr	r2, [pc, #304]	; (80012e0 <HAL_I2C_MspInit+0x1e0>)
 80011b0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 80011b2:	4b4a      	ldr	r3, [pc, #296]	; (80012dc <HAL_I2C_MspInit+0x1dc>)
 80011b4:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80011b8:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80011ba:	4b48      	ldr	r3, [pc, #288]	; (80012dc <HAL_I2C_MspInit+0x1dc>)
 80011bc:	2200      	movs	r2, #0
 80011be:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80011c0:	4b46      	ldr	r3, [pc, #280]	; (80012dc <HAL_I2C_MspInit+0x1dc>)
 80011c2:	2200      	movs	r2, #0
 80011c4:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80011c6:	4b45      	ldr	r3, [pc, #276]	; (80012dc <HAL_I2C_MspInit+0x1dc>)
 80011c8:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80011cc:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80011ce:	4b43      	ldr	r3, [pc, #268]	; (80012dc <HAL_I2C_MspInit+0x1dc>)
 80011d0:	2200      	movs	r2, #0
 80011d2:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80011d4:	4b41      	ldr	r3, [pc, #260]	; (80012dc <HAL_I2C_MspInit+0x1dc>)
 80011d6:	2200      	movs	r2, #0
 80011d8:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 80011da:	4b40      	ldr	r3, [pc, #256]	; (80012dc <HAL_I2C_MspInit+0x1dc>)
 80011dc:	2200      	movs	r2, #0
 80011de:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011e0:	4b3e      	ldr	r3, [pc, #248]	; (80012dc <HAL_I2C_MspInit+0x1dc>)
 80011e2:	2200      	movs	r2, #0
 80011e4:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011e6:	4b3d      	ldr	r3, [pc, #244]	; (80012dc <HAL_I2C_MspInit+0x1dc>)
 80011e8:	2200      	movs	r2, #0
 80011ea:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 80011ec:	483b      	ldr	r0, [pc, #236]	; (80012dc <HAL_I2C_MspInit+0x1dc>)
 80011ee:	f003 fa07 	bl	8004600 <HAL_DMA_Init>
 80011f2:	4603      	mov	r3, r0
 80011f4:	2b00      	cmp	r3, #0
 80011f6:	d001      	beq.n	80011fc <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 80011f8:	f000 fa44 	bl	8001684 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	4a37      	ldr	r2, [pc, #220]	; (80012dc <HAL_I2C_MspInit+0x1dc>)
 8001200:	63da      	str	r2, [r3, #60]	; 0x3c
 8001202:	4a36      	ldr	r2, [pc, #216]	; (80012dc <HAL_I2C_MspInit+0x1dc>)
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8001208:	2200      	movs	r2, #0
 800120a:	2105      	movs	r1, #5
 800120c:	201f      	movs	r0, #31
 800120e:	f003 f8d1 	bl	80043b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8001212:	201f      	movs	r0, #31
 8001214:	f003 f8ea 	bl	80043ec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8001218:	2200      	movs	r2, #0
 800121a:	2105      	movs	r1, #5
 800121c:	2020      	movs	r0, #32
 800121e:	f003 f8c9 	bl	80043b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8001222:	2020      	movs	r0, #32
 8001224:	f003 f8e2 	bl	80043ec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8001228:	e158      	b.n	80014dc <HAL_I2C_MspInit+0x3dc>
  else if(i2cHandle->Instance==I2C2)
 800122a:	687b      	ldr	r3, [r7, #4]
 800122c:	681b      	ldr	r3, [r3, #0]
 800122e:	4a2d      	ldr	r2, [pc, #180]	; (80012e4 <HAL_I2C_MspInit+0x1e4>)
 8001230:	4293      	cmp	r3, r2
 8001232:	d15b      	bne.n	80012ec <HAL_I2C_MspInit+0x1ec>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8001234:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8001238:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 800123a:	2300      	movs	r3, #0
 800123c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001240:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001244:	4618      	mov	r0, r3
 8001246:	f008 fa6b 	bl	8009720 <HAL_RCCEx_PeriphCLKConfig>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <HAL_I2C_MspInit+0x154>
      Error_Handler();
 8001250:	f000 fa18 	bl	8001684 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001254:	4b1f      	ldr	r3, [pc, #124]	; (80012d4 <HAL_I2C_MspInit+0x1d4>)
 8001256:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001258:	4a1e      	ldr	r2, [pc, #120]	; (80012d4 <HAL_I2C_MspInit+0x1d4>)
 800125a:	f043 0320 	orr.w	r3, r3, #32
 800125e:	6313      	str	r3, [r2, #48]	; 0x30
 8001260:	4b1c      	ldr	r3, [pc, #112]	; (80012d4 <HAL_I2C_MspInit+0x1d4>)
 8001262:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001264:	f003 0320 	and.w	r3, r3, #32
 8001268:	627b      	str	r3, [r7, #36]	; 0x24
 800126a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800126c:	2303      	movs	r3, #3
 800126e:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001272:	2312      	movs	r3, #18
 8001274:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001278:	2301      	movs	r3, #1
 800127a:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800127e:	2303      	movs	r3, #3
 8001280:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001284:	2304      	movs	r3, #4
 8001286:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 800128a:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800128e:	4619      	mov	r1, r3
 8001290:	4815      	ldr	r0, [pc, #84]	; (80012e8 <HAL_I2C_MspInit+0x1e8>)
 8001292:	f005 fb2f 	bl	80068f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001296:	4b0f      	ldr	r3, [pc, #60]	; (80012d4 <HAL_I2C_MspInit+0x1d4>)
 8001298:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800129a:	4a0e      	ldr	r2, [pc, #56]	; (80012d4 <HAL_I2C_MspInit+0x1d4>)
 800129c:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80012a0:	6413      	str	r3, [r2, #64]	; 0x40
 80012a2:	4b0c      	ldr	r3, [pc, #48]	; (80012d4 <HAL_I2C_MspInit+0x1d4>)
 80012a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80012a6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80012aa:	623b      	str	r3, [r7, #32]
 80012ac:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 80012ae:	2200      	movs	r2, #0
 80012b0:	2105      	movs	r1, #5
 80012b2:	2021      	movs	r0, #33	; 0x21
 80012b4:	f003 f87e 	bl	80043b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 80012b8:	2021      	movs	r0, #33	; 0x21
 80012ba:	f003 f897 	bl	80043ec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 80012be:	2200      	movs	r2, #0
 80012c0:	2105      	movs	r1, #5
 80012c2:	2022      	movs	r0, #34	; 0x22
 80012c4:	f003 f876 	bl	80043b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 80012c8:	2022      	movs	r0, #34	; 0x22
 80012ca:	f003 f88f 	bl	80043ec <HAL_NVIC_EnableIRQ>
}
 80012ce:	e105      	b.n	80014dc <HAL_I2C_MspInit+0x3dc>
 80012d0:	40005400 	.word	0x40005400
 80012d4:	40023800 	.word	0x40023800
 80012d8:	40020400 	.word	0x40020400
 80012dc:	20000834 	.word	0x20000834
 80012e0:	40026088 	.word	0x40026088
 80012e4:	40005800 	.word	0x40005800
 80012e8:	40021400 	.word	0x40021400
  else if(i2cHandle->Instance==I2C3)
 80012ec:	687b      	ldr	r3, [r7, #4]
 80012ee:	681b      	ldr	r3, [r3, #0]
 80012f0:	4a7c      	ldr	r2, [pc, #496]	; (80014e4 <HAL_I2C_MspInit+0x3e4>)
 80012f2:	4293      	cmp	r3, r2
 80012f4:	f040 809f 	bne.w	8001436 <HAL_I2C_MspInit+0x336>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80012f8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80012fc:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80012fe:	2300      	movs	r3, #0
 8001300:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001304:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001308:	4618      	mov	r0, r3
 800130a:	f008 fa09 	bl	8009720 <HAL_RCCEx_PeriphCLKConfig>
 800130e:	4603      	mov	r3, r0
 8001310:	2b00      	cmp	r3, #0
 8001312:	d001      	beq.n	8001318 <HAL_I2C_MspInit+0x218>
      Error_Handler();
 8001314:	f000 f9b6 	bl	8001684 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001318:	4b73      	ldr	r3, [pc, #460]	; (80014e8 <HAL_I2C_MspInit+0x3e8>)
 800131a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800131c:	4a72      	ldr	r2, [pc, #456]	; (80014e8 <HAL_I2C_MspInit+0x3e8>)
 800131e:	f043 0304 	orr.w	r3, r3, #4
 8001322:	6313      	str	r3, [r2, #48]	; 0x30
 8001324:	4b70      	ldr	r3, [pc, #448]	; (80014e8 <HAL_I2C_MspInit+0x3e8>)
 8001326:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001328:	f003 0304 	and.w	r3, r3, #4
 800132c:	61fb      	str	r3, [r7, #28]
 800132e:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001330:	4b6d      	ldr	r3, [pc, #436]	; (80014e8 <HAL_I2C_MspInit+0x3e8>)
 8001332:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001334:	4a6c      	ldr	r2, [pc, #432]	; (80014e8 <HAL_I2C_MspInit+0x3e8>)
 8001336:	f043 0301 	orr.w	r3, r3, #1
 800133a:	6313      	str	r3, [r2, #48]	; 0x30
 800133c:	4b6a      	ldr	r3, [pc, #424]	; (80014e8 <HAL_I2C_MspInit+0x3e8>)
 800133e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001340:	f003 0301 	and.w	r3, r3, #1
 8001344:	61bb      	str	r3, [r7, #24]
 8001346:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001348:	f44f 7300 	mov.w	r3, #512	; 0x200
 800134c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001350:	2312      	movs	r3, #18
 8001352:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001356:	2300      	movs	r3, #0
 8001358:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800135c:	2303      	movs	r3, #3
 800135e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001362:	2304      	movs	r3, #4
 8001364:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001368:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800136c:	4619      	mov	r1, r3
 800136e:	485f      	ldr	r0, [pc, #380]	; (80014ec <HAL_I2C_MspInit+0x3ec>)
 8001370:	f005 fac0 	bl	80068f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8001374:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001378:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800137c:	2312      	movs	r3, #18
 800137e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001382:	2300      	movs	r3, #0
 8001384:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001388:	2303      	movs	r3, #3
 800138a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800138e:	2304      	movs	r3, #4
 8001390:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001394:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001398:	4619      	mov	r1, r3
 800139a:	4855      	ldr	r0, [pc, #340]	; (80014f0 <HAL_I2C_MspInit+0x3f0>)
 800139c:	f005 faaa 	bl	80068f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 80013a0:	4b51      	ldr	r3, [pc, #324]	; (80014e8 <HAL_I2C_MspInit+0x3e8>)
 80013a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013a4:	4a50      	ldr	r2, [pc, #320]	; (80014e8 <HAL_I2C_MspInit+0x3e8>)
 80013a6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80013aa:	6413      	str	r3, [r2, #64]	; 0x40
 80013ac:	4b4e      	ldr	r3, [pc, #312]	; (80014e8 <HAL_I2C_MspInit+0x3e8>)
 80013ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80013b0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 80013b4:	617b      	str	r3, [r7, #20]
 80013b6:	697b      	ldr	r3, [r7, #20]
    hdma_i2c3_rx.Instance = DMA1_Stream1;
 80013b8:	4b4e      	ldr	r3, [pc, #312]	; (80014f4 <HAL_I2C_MspInit+0x3f4>)
 80013ba:	4a4f      	ldr	r2, [pc, #316]	; (80014f8 <HAL_I2C_MspInit+0x3f8>)
 80013bc:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_1;
 80013be:	4b4d      	ldr	r3, [pc, #308]	; (80014f4 <HAL_I2C_MspInit+0x3f4>)
 80013c0:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 80013c4:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80013c6:	4b4b      	ldr	r3, [pc, #300]	; (80014f4 <HAL_I2C_MspInit+0x3f4>)
 80013c8:	2200      	movs	r2, #0
 80013ca:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80013cc:	4b49      	ldr	r3, [pc, #292]	; (80014f4 <HAL_I2C_MspInit+0x3f4>)
 80013ce:	2200      	movs	r2, #0
 80013d0:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 80013d2:	4b48      	ldr	r3, [pc, #288]	; (80014f4 <HAL_I2C_MspInit+0x3f4>)
 80013d4:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80013d8:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80013da:	4b46      	ldr	r3, [pc, #280]	; (80014f4 <HAL_I2C_MspInit+0x3f4>)
 80013dc:	2200      	movs	r2, #0
 80013de:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80013e0:	4b44      	ldr	r3, [pc, #272]	; (80014f4 <HAL_I2C_MspInit+0x3f4>)
 80013e2:	2200      	movs	r2, #0
 80013e4:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 80013e6:	4b43      	ldr	r3, [pc, #268]	; (80014f4 <HAL_I2C_MspInit+0x3f4>)
 80013e8:	2200      	movs	r2, #0
 80013ea:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80013ec:	4b41      	ldr	r3, [pc, #260]	; (80014f4 <HAL_I2C_MspInit+0x3f4>)
 80013ee:	2200      	movs	r2, #0
 80013f0:	621a      	str	r2, [r3, #32]
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80013f2:	4b40      	ldr	r3, [pc, #256]	; (80014f4 <HAL_I2C_MspInit+0x3f4>)
 80013f4:	2200      	movs	r2, #0
 80013f6:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 80013f8:	483e      	ldr	r0, [pc, #248]	; (80014f4 <HAL_I2C_MspInit+0x3f4>)
 80013fa:	f003 f901 	bl	8004600 <HAL_DMA_Init>
 80013fe:	4603      	mov	r3, r0
 8001400:	2b00      	cmp	r3, #0
 8001402:	d001      	beq.n	8001408 <HAL_I2C_MspInit+0x308>
      Error_Handler();
 8001404:	f000 f93e 	bl	8001684 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c3_rx);
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	4a3a      	ldr	r2, [pc, #232]	; (80014f4 <HAL_I2C_MspInit+0x3f4>)
 800140c:	63da      	str	r2, [r3, #60]	; 0x3c
 800140e:	4a39      	ldr	r2, [pc, #228]	; (80014f4 <HAL_I2C_MspInit+0x3f4>)
 8001410:	687b      	ldr	r3, [r7, #4]
 8001412:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 8001414:	2200      	movs	r2, #0
 8001416:	2105      	movs	r1, #5
 8001418:	2048      	movs	r0, #72	; 0x48
 800141a:	f002 ffcb 	bl	80043b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 800141e:	2048      	movs	r0, #72	; 0x48
 8001420:	f002 ffe4 	bl	80043ec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 5, 0);
 8001424:	2200      	movs	r2, #0
 8001426:	2105      	movs	r1, #5
 8001428:	2049      	movs	r0, #73	; 0x49
 800142a:	f002 ffc3 	bl	80043b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 800142e:	2049      	movs	r0, #73	; 0x49
 8001430:	f002 ffdc 	bl	80043ec <HAL_NVIC_EnableIRQ>
}
 8001434:	e052      	b.n	80014dc <HAL_I2C_MspInit+0x3dc>
  else if(i2cHandle->Instance==I2C4)
 8001436:	687b      	ldr	r3, [r7, #4]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	4a30      	ldr	r2, [pc, #192]	; (80014fc <HAL_I2C_MspInit+0x3fc>)
 800143c:	4293      	cmp	r3, r2
 800143e:	d14d      	bne.n	80014dc <HAL_I2C_MspInit+0x3dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 8001440:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 8001444:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 8001446:	2300      	movs	r3, #0
 8001448:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 800144c:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001450:	4618      	mov	r0, r3
 8001452:	f008 f965 	bl	8009720 <HAL_RCCEx_PeriphCLKConfig>
 8001456:	4603      	mov	r3, r0
 8001458:	2b00      	cmp	r3, #0
 800145a:	d001      	beq.n	8001460 <HAL_I2C_MspInit+0x360>
      Error_Handler();
 800145c:	f000 f912 	bl	8001684 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001460:	4b21      	ldr	r3, [pc, #132]	; (80014e8 <HAL_I2C_MspInit+0x3e8>)
 8001462:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001464:	4a20      	ldr	r2, [pc, #128]	; (80014e8 <HAL_I2C_MspInit+0x3e8>)
 8001466:	f043 0320 	orr.w	r3, r3, #32
 800146a:	6313      	str	r3, [r2, #48]	; 0x30
 800146c:	4b1e      	ldr	r3, [pc, #120]	; (80014e8 <HAL_I2C_MspInit+0x3e8>)
 800146e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001470:	f003 0320 	and.w	r3, r3, #32
 8001474:	613b      	str	r3, [r7, #16]
 8001476:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001478:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 800147c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001480:	2312      	movs	r3, #18
 8001482:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001486:	2300      	movs	r3, #0
 8001488:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800148c:	2303      	movs	r3, #3
 800148e:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 8001492:	2304      	movs	r3, #4
 8001494:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001498:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 800149c:	4619      	mov	r1, r3
 800149e:	4818      	ldr	r0, [pc, #96]	; (8001500 <HAL_I2C_MspInit+0x400>)
 80014a0:	f005 fa28 	bl	80068f4 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 80014a4:	4b10      	ldr	r3, [pc, #64]	; (80014e8 <HAL_I2C_MspInit+0x3e8>)
 80014a6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014a8:	4a0f      	ldr	r2, [pc, #60]	; (80014e8 <HAL_I2C_MspInit+0x3e8>)
 80014aa:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80014ae:	6413      	str	r3, [r2, #64]	; 0x40
 80014b0:	4b0d      	ldr	r3, [pc, #52]	; (80014e8 <HAL_I2C_MspInit+0x3e8>)
 80014b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80014b4:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80014b8:	60fb      	str	r3, [r7, #12]
 80014ba:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 5, 0);
 80014bc:	2200      	movs	r2, #0
 80014be:	2105      	movs	r1, #5
 80014c0:	205f      	movs	r0, #95	; 0x5f
 80014c2:	f002 ff77 	bl	80043b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 80014c6:	205f      	movs	r0, #95	; 0x5f
 80014c8:	f002 ff90 	bl	80043ec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 5, 0);
 80014cc:	2200      	movs	r2, #0
 80014ce:	2105      	movs	r1, #5
 80014d0:	2060      	movs	r0, #96	; 0x60
 80014d2:	f002 ff6f 	bl	80043b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 80014d6:	2060      	movs	r0, #96	; 0x60
 80014d8:	f002 ff88 	bl	80043ec <HAL_NVIC_EnableIRQ>
}
 80014dc:	bf00      	nop
 80014de:	37c8      	adds	r7, #200	; 0xc8
 80014e0:	46bd      	mov	sp, r7
 80014e2:	bd80      	pop	{r7, pc}
 80014e4:	40005c00 	.word	0x40005c00
 80014e8:	40023800 	.word	0x40023800
 80014ec:	40020800 	.word	0x40020800
 80014f0:	40020000 	.word	0x40020000
 80014f4:	20000894 	.word	0x20000894
 80014f8:	40026028 	.word	0x40026028
 80014fc:	40006000 	.word	0x40006000
 8001500:	40021400 	.word	0x40021400

08001504 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001504:	b580      	push	{r7, lr}
 8001506:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001508:	f001 ff77 	bl	80033fa <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800150c:	f000 f83a 	bl	8001584 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001510:	f7ff fc4c 	bl	8000dac <MX_GPIO_Init>
  MX_DMA_Init();
 8001514:	f7ff fb68 	bl	8000be8 <MX_DMA_Init>
  MX_I2C1_Init();
 8001518:	f7ff fcf2 	bl	8000f00 <MX_I2C1_Init>
  MX_I2C2_Init();
 800151c:	f7ff fd30 	bl	8000f80 <MX_I2C2_Init>
  MX_SPI1_Init();
 8001520:	f000 f8b6 	bl	8001690 <MX_SPI1_Init>
  MX_SPI2_Init();
 8001524:	f000 f8ec 	bl	8001700 <MX_SPI2_Init>
  MX_UART4_Init();
 8001528:	f000 ffcc 	bl	80024c4 <MX_UART4_Init>
  MX_UART5_Init();
 800152c:	f000 fffa 	bl	8002524 <MX_UART5_Init>
  MX_ADC1_Init();
 8001530:	f7ff f83c 	bl	80005ac <MX_ADC1_Init>
  MX_ADC2_Init();
 8001534:	f7ff f88c 	bl	8000650 <MX_ADC2_Init>
  MX_ADC3_Init();
 8001538:	f7ff f8dc 	bl	80006f4 <MX_ADC3_Init>
  MX_DAC_Init();
 800153c:	f7ff faea 	bl	8000b14 <MX_DAC_Init>
  MX_I2C3_Init();
 8001540:	f7ff fd5e 	bl	8001000 <MX_I2C3_Init>
  MX_I2C4_Init();
 8001544:	f7ff fd9c 	bl	8001080 <MX_I2C4_Init>
  MX_SPI3_Init();
 8001548:	f000 f918 	bl	800177c <MX_SPI3_Init>
  MX_SPI4_Init();
 800154c:	f000 f954 	bl	80017f8 <MX_SPI4_Init>
  MX_SPI5_Init();
 8001550:	f000 f98c 	bl	800186c <MX_SPI5_Init>
  MX_UART7_Init();
 8001554:	f001 f816 	bl	8002584 <MX_UART7_Init>
  MX_UART8_Init();
 8001558:	f001 f844 	bl	80025e4 <MX_UART8_Init>
  MX_USART1_UART_Init();
 800155c:	f001 f872 	bl	8002644 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001560:	f001 f8a0 	bl	80026a4 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 8001564:	f001 f8ce 	bl	8002704 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001568:	f001 f8fc 	bl	8002764 <MX_USART6_UART_Init>
  MX_CAN1_Init();
 800156c:	f7ff f9ae 	bl	80008cc <MX_CAN1_Init>
  MX_CAN2_Init();
 8001570:	f7ff f9e2 	bl	8000938 <MX_CAN2_Init>
  /* USER CODE BEGIN 2 */
  ur_main();
 8001574:	f01b fff6 	bl	801d564 <ur_main>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001578:	f7ff fbf2 	bl	8000d60 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800157c:	f00d fe06 	bl	800f18c <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001580:	e7fe      	b.n	8001580 <main+0x7c>
	...

08001584 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b094      	sub	sp, #80	; 0x50
 8001588:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800158a:	f107 0320 	add.w	r3, r7, #32
 800158e:	2230      	movs	r2, #48	; 0x30
 8001590:	2100      	movs	r1, #0
 8001592:	4618      	mov	r0, r3
 8001594:	f01c fc39 	bl	801de0a <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001598:	f107 030c 	add.w	r3, r7, #12
 800159c:	2200      	movs	r2, #0
 800159e:	601a      	str	r2, [r3, #0]
 80015a0:	605a      	str	r2, [r3, #4]
 80015a2:	609a      	str	r2, [r3, #8]
 80015a4:	60da      	str	r2, [r3, #12]
 80015a6:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80015a8:	f007 fb5e 	bl	8008c68 <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80015ac:	4b2a      	ldr	r3, [pc, #168]	; (8001658 <SystemClock_Config+0xd4>)
 80015ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015b0:	4a29      	ldr	r2, [pc, #164]	; (8001658 <SystemClock_Config+0xd4>)
 80015b2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80015b6:	6413      	str	r3, [r2, #64]	; 0x40
 80015b8:	4b27      	ldr	r3, [pc, #156]	; (8001658 <SystemClock_Config+0xd4>)
 80015ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80015bc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80015c0:	60bb      	str	r3, [r7, #8]
 80015c2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80015c4:	4b25      	ldr	r3, [pc, #148]	; (800165c <SystemClock_Config+0xd8>)
 80015c6:	681b      	ldr	r3, [r3, #0]
 80015c8:	4a24      	ldr	r2, [pc, #144]	; (800165c <SystemClock_Config+0xd8>)
 80015ca:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80015ce:	6013      	str	r3, [r2, #0]
 80015d0:	4b22      	ldr	r3, [pc, #136]	; (800165c <SystemClock_Config+0xd8>)
 80015d2:	681b      	ldr	r3, [r3, #0]
 80015d4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80015d8:	607b      	str	r3, [r7, #4]
 80015da:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80015dc:	2301      	movs	r3, #1
 80015de:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 80015e0:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 80015e4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80015e6:	2302      	movs	r3, #2
 80015e8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80015ea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80015ee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80015f0:	2304      	movs	r3, #4
 80015f2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80015f4:	23d8      	movs	r3, #216	; 0xd8
 80015f6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80015f8:	2302      	movs	r3, #2
 80015fa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80015fc:	2303      	movs	r3, #3
 80015fe:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001600:	f107 0320 	add.w	r3, r7, #32
 8001604:	4618      	mov	r0, r3
 8001606:	f007 fb8f 	bl	8008d28 <HAL_RCC_OscConfig>
 800160a:	4603      	mov	r3, r0
 800160c:	2b00      	cmp	r3, #0
 800160e:	d001      	beq.n	8001614 <SystemClock_Config+0x90>
  {
    Error_Handler();
 8001610:	f000 f838 	bl	8001684 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 8001614:	f007 fb38 	bl	8008c88 <HAL_PWREx_EnableOverDrive>
 8001618:	4603      	mov	r3, r0
 800161a:	2b00      	cmp	r3, #0
 800161c:	d001      	beq.n	8001622 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 800161e:	f000 f831 	bl	8001684 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001622:	230f      	movs	r3, #15
 8001624:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001626:	2302      	movs	r3, #2
 8001628:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800162a:	2300      	movs	r3, #0
 800162c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800162e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8001632:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8001634:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001638:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 800163a:	f107 030c 	add.w	r3, r7, #12
 800163e:	2107      	movs	r1, #7
 8001640:	4618      	mov	r0, r3
 8001642:	f007 fe15 	bl	8009270 <HAL_RCC_ClockConfig>
 8001646:	4603      	mov	r3, r0
 8001648:	2b00      	cmp	r3, #0
 800164a:	d001      	beq.n	8001650 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 800164c:	f000 f81a 	bl	8001684 <Error_Handler>
  }
}
 8001650:	bf00      	nop
 8001652:	3750      	adds	r7, #80	; 0x50
 8001654:	46bd      	mov	sp, r7
 8001656:	bd80      	pop	{r7, pc}
 8001658:	40023800 	.word	0x40023800
 800165c:	40007000 	.word	0x40007000

08001660 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001660:	b580      	push	{r7, lr}
 8001662:	b082      	sub	sp, #8
 8001664:	af00      	add	r7, sp, #0
 8001666:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	681b      	ldr	r3, [r3, #0]
 800166c:	4a04      	ldr	r2, [pc, #16]	; (8001680 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800166e:	4293      	cmp	r3, r2
 8001670:	d101      	bne.n	8001676 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001672:	f001 fecf 	bl	8003414 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001676:	bf00      	nop
 8001678:	3708      	adds	r7, #8
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40010000 	.word	0x40010000

08001684 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001688:	b672      	cpsid	i
}
 800168a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800168c:	e7fe      	b.n	800168c <Error_Handler+0x8>
	...

08001690 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001690:	b580      	push	{r7, lr}
 8001692:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001694:	4b18      	ldr	r3, [pc, #96]	; (80016f8 <MX_SPI1_Init+0x68>)
 8001696:	4a19      	ldr	r2, [pc, #100]	; (80016fc <MX_SPI1_Init+0x6c>)
 8001698:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800169a:	4b17      	ldr	r3, [pc, #92]	; (80016f8 <MX_SPI1_Init+0x68>)
 800169c:	2200      	movs	r2, #0
 800169e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80016a0:	4b15      	ldr	r3, [pc, #84]	; (80016f8 <MX_SPI1_Init+0x68>)
 80016a2:	2200      	movs	r2, #0
 80016a4:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80016a6:	4b14      	ldr	r3, [pc, #80]	; (80016f8 <MX_SPI1_Init+0x68>)
 80016a8:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80016ac:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80016ae:	4b12      	ldr	r3, [pc, #72]	; (80016f8 <MX_SPI1_Init+0x68>)
 80016b0:	2200      	movs	r2, #0
 80016b2:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 80016b4:	4b10      	ldr	r3, [pc, #64]	; (80016f8 <MX_SPI1_Init+0x68>)
 80016b6:	2200      	movs	r2, #0
 80016b8:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 80016ba:	4b0f      	ldr	r3, [pc, #60]	; (80016f8 <MX_SPI1_Init+0x68>)
 80016bc:	2200      	movs	r2, #0
 80016be:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80016c0:	4b0d      	ldr	r3, [pc, #52]	; (80016f8 <MX_SPI1_Init+0x68>)
 80016c2:	2200      	movs	r2, #0
 80016c4:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 80016c6:	4b0c      	ldr	r3, [pc, #48]	; (80016f8 <MX_SPI1_Init+0x68>)
 80016c8:	2200      	movs	r2, #0
 80016ca:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80016cc:	4b0a      	ldr	r3, [pc, #40]	; (80016f8 <MX_SPI1_Init+0x68>)
 80016ce:	2200      	movs	r2, #0
 80016d0:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 80016d2:	4b09      	ldr	r3, [pc, #36]	; (80016f8 <MX_SPI1_Init+0x68>)
 80016d4:	2207      	movs	r2, #7
 80016d6:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80016d8:	4b07      	ldr	r3, [pc, #28]	; (80016f8 <MX_SPI1_Init+0x68>)
 80016da:	2200      	movs	r2, #0
 80016dc:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80016de:	4b06      	ldr	r3, [pc, #24]	; (80016f8 <MX_SPI1_Init+0x68>)
 80016e0:	2200      	movs	r2, #0
 80016e2:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 80016e4:	4804      	ldr	r0, [pc, #16]	; (80016f8 <MX_SPI1_Init+0x68>)
 80016e6:	f008 fc0b 	bl	8009f00 <HAL_SPI_Init>
 80016ea:	4603      	mov	r3, r0
 80016ec:	2b00      	cmp	r3, #0
 80016ee:	d001      	beq.n	80016f4 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 80016f0:	f7ff ffc8 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80016f4:	bf00      	nop
 80016f6:	bd80      	pop	{r7, pc}
 80016f8:	200008f4 	.word	0x200008f4
 80016fc:	40013000 	.word	0x40013000

08001700 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 8001704:	4b1b      	ldr	r3, [pc, #108]	; (8001774 <MX_SPI2_Init+0x74>)
 8001706:	4a1c      	ldr	r2, [pc, #112]	; (8001778 <MX_SPI2_Init+0x78>)
 8001708:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 800170a:	4b1a      	ldr	r3, [pc, #104]	; (8001774 <MX_SPI2_Init+0x74>)
 800170c:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001710:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 8001712:	4b18      	ldr	r3, [pc, #96]	; (8001774 <MX_SPI2_Init+0x74>)
 8001714:	2200      	movs	r2, #0
 8001716:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 8001718:	4b16      	ldr	r3, [pc, #88]	; (8001774 <MX_SPI2_Init+0x74>)
 800171a:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800171e:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001720:	4b14      	ldr	r3, [pc, #80]	; (8001774 <MX_SPI2_Init+0x74>)
 8001722:	2200      	movs	r2, #0
 8001724:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001726:	4b13      	ldr	r3, [pc, #76]	; (8001774 <MX_SPI2_Init+0x74>)
 8001728:	2200      	movs	r2, #0
 800172a:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 800172c:	4b11      	ldr	r3, [pc, #68]	; (8001774 <MX_SPI2_Init+0x74>)
 800172e:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001732:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001734:	4b0f      	ldr	r3, [pc, #60]	; (8001774 <MX_SPI2_Init+0x74>)
 8001736:	2200      	movs	r2, #0
 8001738:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800173a:	4b0e      	ldr	r3, [pc, #56]	; (8001774 <MX_SPI2_Init+0x74>)
 800173c:	2200      	movs	r2, #0
 800173e:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 8001740:	4b0c      	ldr	r3, [pc, #48]	; (8001774 <MX_SPI2_Init+0x74>)
 8001742:	2200      	movs	r2, #0
 8001744:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001746:	4b0b      	ldr	r3, [pc, #44]	; (8001774 <MX_SPI2_Init+0x74>)
 8001748:	2200      	movs	r2, #0
 800174a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 800174c:	4b09      	ldr	r3, [pc, #36]	; (8001774 <MX_SPI2_Init+0x74>)
 800174e:	2207      	movs	r2, #7
 8001750:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001752:	4b08      	ldr	r3, [pc, #32]	; (8001774 <MX_SPI2_Init+0x74>)
 8001754:	2200      	movs	r2, #0
 8001756:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001758:	4b06      	ldr	r3, [pc, #24]	; (8001774 <MX_SPI2_Init+0x74>)
 800175a:	2208      	movs	r2, #8
 800175c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800175e:	4805      	ldr	r0, [pc, #20]	; (8001774 <MX_SPI2_Init+0x74>)
 8001760:	f008 fbce 	bl	8009f00 <HAL_SPI_Init>
 8001764:	4603      	mov	r3, r0
 8001766:	2b00      	cmp	r3, #0
 8001768:	d001      	beq.n	800176e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800176a:	f7ff ff8b 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800176e:	bf00      	nop
 8001770:	bd80      	pop	{r7, pc}
 8001772:	bf00      	nop
 8001774:	20000958 	.word	0x20000958
 8001778:	40003800 	.word	0x40003800

0800177c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001780:	4b1b      	ldr	r3, [pc, #108]	; (80017f0 <MX_SPI3_Init+0x74>)
 8001782:	4a1c      	ldr	r2, [pc, #112]	; (80017f4 <MX_SPI3_Init+0x78>)
 8001784:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001786:	4b1a      	ldr	r3, [pc, #104]	; (80017f0 <MX_SPI3_Init+0x74>)
 8001788:	f44f 7282 	mov.w	r2, #260	; 0x104
 800178c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800178e:	4b18      	ldr	r3, [pc, #96]	; (80017f0 <MX_SPI3_Init+0x74>)
 8001790:	2200      	movs	r2, #0
 8001792:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001794:	4b16      	ldr	r3, [pc, #88]	; (80017f0 <MX_SPI3_Init+0x74>)
 8001796:	f44f 7240 	mov.w	r2, #768	; 0x300
 800179a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800179c:	4b14      	ldr	r3, [pc, #80]	; (80017f0 <MX_SPI3_Init+0x74>)
 800179e:	2200      	movs	r2, #0
 80017a0:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 80017a2:	4b13      	ldr	r3, [pc, #76]	; (80017f0 <MX_SPI3_Init+0x74>)
 80017a4:	2200      	movs	r2, #0
 80017a6:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 80017a8:	4b11      	ldr	r3, [pc, #68]	; (80017f0 <MX_SPI3_Init+0x74>)
 80017aa:	f44f 7200 	mov.w	r2, #512	; 0x200
 80017ae:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80017b0:	4b0f      	ldr	r3, [pc, #60]	; (80017f0 <MX_SPI3_Init+0x74>)
 80017b2:	2200      	movs	r2, #0
 80017b4:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80017b6:	4b0e      	ldr	r3, [pc, #56]	; (80017f0 <MX_SPI3_Init+0x74>)
 80017b8:	2200      	movs	r2, #0
 80017ba:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 80017bc:	4b0c      	ldr	r3, [pc, #48]	; (80017f0 <MX_SPI3_Init+0x74>)
 80017be:	2200      	movs	r2, #0
 80017c0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80017c2:	4b0b      	ldr	r3, [pc, #44]	; (80017f0 <MX_SPI3_Init+0x74>)
 80017c4:	2200      	movs	r2, #0
 80017c6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 80017c8:	4b09      	ldr	r3, [pc, #36]	; (80017f0 <MX_SPI3_Init+0x74>)
 80017ca:	2207      	movs	r2, #7
 80017cc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80017ce:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <MX_SPI3_Init+0x74>)
 80017d0:	2200      	movs	r2, #0
 80017d2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80017d4:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <MX_SPI3_Init+0x74>)
 80017d6:	2208      	movs	r2, #8
 80017d8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 80017da:	4805      	ldr	r0, [pc, #20]	; (80017f0 <MX_SPI3_Init+0x74>)
 80017dc:	f008 fb90 	bl	8009f00 <HAL_SPI_Init>
 80017e0:	4603      	mov	r3, r0
 80017e2:	2b00      	cmp	r3, #0
 80017e4:	d001      	beq.n	80017ea <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 80017e6:	f7ff ff4d 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	200009bc 	.word	0x200009bc
 80017f4:	40003c00 	.word	0x40003c00

080017f8 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80017f8:	b580      	push	{r7, lr}
 80017fa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80017fc:	4b19      	ldr	r3, [pc, #100]	; (8001864 <MX_SPI4_Init+0x6c>)
 80017fe:	4a1a      	ldr	r2, [pc, #104]	; (8001868 <MX_SPI4_Init+0x70>)
 8001800:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 8001802:	4b18      	ldr	r3, [pc, #96]	; (8001864 <MX_SPI4_Init+0x6c>)
 8001804:	2200      	movs	r2, #0
 8001806:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 8001808:	4b16      	ldr	r3, [pc, #88]	; (8001864 <MX_SPI4_Init+0x6c>)
 800180a:	2200      	movs	r2, #0
 800180c:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 800180e:	4b15      	ldr	r3, [pc, #84]	; (8001864 <MX_SPI4_Init+0x6c>)
 8001810:	f44f 7240 	mov.w	r2, #768	; 0x300
 8001814:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001816:	4b13      	ldr	r3, [pc, #76]	; (8001864 <MX_SPI4_Init+0x6c>)
 8001818:	2200      	movs	r2, #0
 800181a:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 800181c:	4b11      	ldr	r3, [pc, #68]	; (8001864 <MX_SPI4_Init+0x6c>)
 800181e:	2200      	movs	r2, #0
 8001820:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 8001822:	4b10      	ldr	r3, [pc, #64]	; (8001864 <MX_SPI4_Init+0x6c>)
 8001824:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001828:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 800182a:	4b0e      	ldr	r3, [pc, #56]	; (8001864 <MX_SPI4_Init+0x6c>)
 800182c:	2200      	movs	r2, #0
 800182e:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 8001830:	4b0c      	ldr	r3, [pc, #48]	; (8001864 <MX_SPI4_Init+0x6c>)
 8001832:	2200      	movs	r2, #0
 8001834:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001836:	4b0b      	ldr	r3, [pc, #44]	; (8001864 <MX_SPI4_Init+0x6c>)
 8001838:	2200      	movs	r2, #0
 800183a:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 800183c:	4b09      	ldr	r3, [pc, #36]	; (8001864 <MX_SPI4_Init+0x6c>)
 800183e:	2207      	movs	r2, #7
 8001840:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001842:	4b08      	ldr	r3, [pc, #32]	; (8001864 <MX_SPI4_Init+0x6c>)
 8001844:	2200      	movs	r2, #0
 8001846:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 8001848:	4b06      	ldr	r3, [pc, #24]	; (8001864 <MX_SPI4_Init+0x6c>)
 800184a:	2200      	movs	r2, #0
 800184c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 800184e:	4805      	ldr	r0, [pc, #20]	; (8001864 <MX_SPI4_Init+0x6c>)
 8001850:	f008 fb56 	bl	8009f00 <HAL_SPI_Init>
 8001854:	4603      	mov	r3, r0
 8001856:	2b00      	cmp	r3, #0
 8001858:	d001      	beq.n	800185e <MX_SPI4_Init+0x66>
  {
    Error_Handler();
 800185a:	f7ff ff13 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800185e:	bf00      	nop
 8001860:	bd80      	pop	{r7, pc}
 8001862:	bf00      	nop
 8001864:	20000a20 	.word	0x20000a20
 8001868:	40013400 	.word	0x40013400

0800186c <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 800186c:	b580      	push	{r7, lr}
 800186e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8001870:	4b1b      	ldr	r3, [pc, #108]	; (80018e0 <MX_SPI5_Init+0x74>)
 8001872:	4a1c      	ldr	r2, [pc, #112]	; (80018e4 <MX_SPI5_Init+0x78>)
 8001874:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001876:	4b1a      	ldr	r3, [pc, #104]	; (80018e0 <MX_SPI5_Init+0x74>)
 8001878:	f44f 7282 	mov.w	r2, #260	; 0x104
 800187c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800187e:	4b18      	ldr	r3, [pc, #96]	; (80018e0 <MX_SPI5_Init+0x74>)
 8001880:	2200      	movs	r2, #0
 8001882:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 8001884:	4b16      	ldr	r3, [pc, #88]	; (80018e0 <MX_SPI5_Init+0x74>)
 8001886:	f44f 7240 	mov.w	r2, #768	; 0x300
 800188a:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800188c:	4b14      	ldr	r3, [pc, #80]	; (80018e0 <MX_SPI5_Init+0x74>)
 800188e:	2200      	movs	r2, #0
 8001890:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001892:	4b13      	ldr	r3, [pc, #76]	; (80018e0 <MX_SPI5_Init+0x74>)
 8001894:	2200      	movs	r2, #0
 8001896:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001898:	4b11      	ldr	r3, [pc, #68]	; (80018e0 <MX_SPI5_Init+0x74>)
 800189a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800189e:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80018a0:	4b0f      	ldr	r3, [pc, #60]	; (80018e0 <MX_SPI5_Init+0x74>)
 80018a2:	2200      	movs	r2, #0
 80018a4:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80018a6:	4b0e      	ldr	r3, [pc, #56]	; (80018e0 <MX_SPI5_Init+0x74>)
 80018a8:	2200      	movs	r2, #0
 80018aa:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 80018ac:	4b0c      	ldr	r3, [pc, #48]	; (80018e0 <MX_SPI5_Init+0x74>)
 80018ae:	2200      	movs	r2, #0
 80018b0:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80018b2:	4b0b      	ldr	r3, [pc, #44]	; (80018e0 <MX_SPI5_Init+0x74>)
 80018b4:	2200      	movs	r2, #0
 80018b6:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 80018b8:	4b09      	ldr	r3, [pc, #36]	; (80018e0 <MX_SPI5_Init+0x74>)
 80018ba:	2207      	movs	r2, #7
 80018bc:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80018be:	4b08      	ldr	r3, [pc, #32]	; (80018e0 <MX_SPI5_Init+0x74>)
 80018c0:	2200      	movs	r2, #0
 80018c2:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 80018c4:	4b06      	ldr	r3, [pc, #24]	; (80018e0 <MX_SPI5_Init+0x74>)
 80018c6:	2208      	movs	r2, #8
 80018c8:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 80018ca:	4805      	ldr	r0, [pc, #20]	; (80018e0 <MX_SPI5_Init+0x74>)
 80018cc:	f008 fb18 	bl	8009f00 <HAL_SPI_Init>
 80018d0:	4603      	mov	r3, r0
 80018d2:	2b00      	cmp	r3, #0
 80018d4:	d001      	beq.n	80018da <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 80018d6:	f7ff fed5 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 80018da:	bf00      	nop
 80018dc:	bd80      	pop	{r7, pc}
 80018de:	bf00      	nop
 80018e0:	20000a84 	.word	0x20000a84
 80018e4:	40015000 	.word	0x40015000

080018e8 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b094      	sub	sp, #80	; 0x50
 80018ec:	af00      	add	r7, sp, #0
 80018ee:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80018f0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018f4:	2200      	movs	r2, #0
 80018f6:	601a      	str	r2, [r3, #0]
 80018f8:	605a      	str	r2, [r3, #4]
 80018fa:	609a      	str	r2, [r3, #8]
 80018fc:	60da      	str	r2, [r3, #12]
 80018fe:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001900:	687b      	ldr	r3, [r7, #4]
 8001902:	681b      	ldr	r3, [r3, #0]
 8001904:	4a9f      	ldr	r2, [pc, #636]	; (8001b84 <HAL_SPI_MspInit+0x29c>)
 8001906:	4293      	cmp	r3, r2
 8001908:	f040 80ba 	bne.w	8001a80 <HAL_SPI_MspInit+0x198>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800190c:	4b9e      	ldr	r3, [pc, #632]	; (8001b88 <HAL_SPI_MspInit+0x2a0>)
 800190e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001910:	4a9d      	ldr	r2, [pc, #628]	; (8001b88 <HAL_SPI_MspInit+0x2a0>)
 8001912:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001916:	6453      	str	r3, [r2, #68]	; 0x44
 8001918:	4b9b      	ldr	r3, [pc, #620]	; (8001b88 <HAL_SPI_MspInit+0x2a0>)
 800191a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800191c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001920:	63bb      	str	r3, [r7, #56]	; 0x38
 8001922:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001924:	4b98      	ldr	r3, [pc, #608]	; (8001b88 <HAL_SPI_MspInit+0x2a0>)
 8001926:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001928:	4a97      	ldr	r2, [pc, #604]	; (8001b88 <HAL_SPI_MspInit+0x2a0>)
 800192a:	f043 0301 	orr.w	r3, r3, #1
 800192e:	6313      	str	r3, [r2, #48]	; 0x30
 8001930:	4b95      	ldr	r3, [pc, #596]	; (8001b88 <HAL_SPI_MspInit+0x2a0>)
 8001932:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001934:	f003 0301 	and.w	r3, r3, #1
 8001938:	637b      	str	r3, [r7, #52]	; 0x34
 800193a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800193c:	4b92      	ldr	r3, [pc, #584]	; (8001b88 <HAL_SPI_MspInit+0x2a0>)
 800193e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001940:	4a91      	ldr	r2, [pc, #580]	; (8001b88 <HAL_SPI_MspInit+0x2a0>)
 8001942:	f043 0302 	orr.w	r3, r3, #2
 8001946:	6313      	str	r3, [r2, #48]	; 0x30
 8001948:	4b8f      	ldr	r3, [pc, #572]	; (8001b88 <HAL_SPI_MspInit+0x2a0>)
 800194a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800194c:	f003 0302 	and.w	r3, r3, #2
 8001950:	633b      	str	r3, [r7, #48]	; 0x30
 8001952:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA15     ------> SPI1_NSS
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_15;
 8001954:	f248 0320 	movw	r3, #32800	; 0x8020
 8001958:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800195a:	2302      	movs	r3, #2
 800195c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800195e:	2300      	movs	r3, #0
 8001960:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001962:	2303      	movs	r3, #3
 8001964:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001966:	2305      	movs	r3, #5
 8001968:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800196a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800196e:	4619      	mov	r1, r3
 8001970:	4886      	ldr	r0, [pc, #536]	; (8001b8c <HAL_SPI_MspInit+0x2a4>)
 8001972:	f004 ffbf 	bl	80068f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001976:	2340      	movs	r3, #64	; 0x40
 8001978:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800197a:	2302      	movs	r3, #2
 800197c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800197e:	2301      	movs	r3, #1
 8001980:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001982:	2303      	movs	r3, #3
 8001984:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001986:	2305      	movs	r3, #5
 8001988:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800198a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800198e:	4619      	mov	r1, r3
 8001990:	487e      	ldr	r0, [pc, #504]	; (8001b8c <HAL_SPI_MspInit+0x2a4>)
 8001992:	f004 ffaf 	bl	80068f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001996:	2320      	movs	r3, #32
 8001998:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800199a:	2302      	movs	r3, #2
 800199c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800199e:	2301      	movs	r3, #1
 80019a0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019a2:	2303      	movs	r3, #3
 80019a4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019a6:	2305      	movs	r3, #5
 80019a8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019aa:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019ae:	4619      	mov	r1, r3
 80019b0:	4877      	ldr	r0, [pc, #476]	; (8001b90 <HAL_SPI_MspInit+0x2a8>)
 80019b2:	f004 ff9f 	bl	80068f4 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 80019b6:	4b77      	ldr	r3, [pc, #476]	; (8001b94 <HAL_SPI_MspInit+0x2ac>)
 80019b8:	4a77      	ldr	r2, [pc, #476]	; (8001b98 <HAL_SPI_MspInit+0x2b0>)
 80019ba:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 80019bc:	4b75      	ldr	r3, [pc, #468]	; (8001b94 <HAL_SPI_MspInit+0x2ac>)
 80019be:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80019c2:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80019c4:	4b73      	ldr	r3, [pc, #460]	; (8001b94 <HAL_SPI_MspInit+0x2ac>)
 80019c6:	2200      	movs	r2, #0
 80019c8:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80019ca:	4b72      	ldr	r3, [pc, #456]	; (8001b94 <HAL_SPI_MspInit+0x2ac>)
 80019cc:	2200      	movs	r2, #0
 80019ce:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 80019d0:	4b70      	ldr	r3, [pc, #448]	; (8001b94 <HAL_SPI_MspInit+0x2ac>)
 80019d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80019d6:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80019d8:	4b6e      	ldr	r3, [pc, #440]	; (8001b94 <HAL_SPI_MspInit+0x2ac>)
 80019da:	2200      	movs	r2, #0
 80019dc:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80019de:	4b6d      	ldr	r3, [pc, #436]	; (8001b94 <HAL_SPI_MspInit+0x2ac>)
 80019e0:	2200      	movs	r2, #0
 80019e2:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 80019e4:	4b6b      	ldr	r3, [pc, #428]	; (8001b94 <HAL_SPI_MspInit+0x2ac>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 80019ea:	4b6a      	ldr	r3, [pc, #424]	; (8001b94 <HAL_SPI_MspInit+0x2ac>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80019f0:	4b68      	ldr	r3, [pc, #416]	; (8001b94 <HAL_SPI_MspInit+0x2ac>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80019f6:	4867      	ldr	r0, [pc, #412]	; (8001b94 <HAL_SPI_MspInit+0x2ac>)
 80019f8:	f002 fe02 	bl	8004600 <HAL_DMA_Init>
 80019fc:	4603      	mov	r3, r0
 80019fe:	2b00      	cmp	r3, #0
 8001a00:	d001      	beq.n	8001a06 <HAL_SPI_MspInit+0x11e>
    {
      Error_Handler();
 8001a02:	f7ff fe3f 	bl	8001684 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 8001a06:	687b      	ldr	r3, [r7, #4]
 8001a08:	4a62      	ldr	r2, [pc, #392]	; (8001b94 <HAL_SPI_MspInit+0x2ac>)
 8001a0a:	659a      	str	r2, [r3, #88]	; 0x58
 8001a0c:	4a61      	ldr	r2, [pc, #388]	; (8001b94 <HAL_SPI_MspInit+0x2ac>)
 8001a0e:	687b      	ldr	r3, [r7, #4]
 8001a10:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 8001a12:	4b62      	ldr	r3, [pc, #392]	; (8001b9c <HAL_SPI_MspInit+0x2b4>)
 8001a14:	4a62      	ldr	r2, [pc, #392]	; (8001ba0 <HAL_SPI_MspInit+0x2b8>)
 8001a16:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 8001a18:	4b60      	ldr	r3, [pc, #384]	; (8001b9c <HAL_SPI_MspInit+0x2b4>)
 8001a1a:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001a1e:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001a20:	4b5e      	ldr	r3, [pc, #376]	; (8001b9c <HAL_SPI_MspInit+0x2b4>)
 8001a22:	2240      	movs	r2, #64	; 0x40
 8001a24:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a26:	4b5d      	ldr	r3, [pc, #372]	; (8001b9c <HAL_SPI_MspInit+0x2b4>)
 8001a28:	2200      	movs	r2, #0
 8001a2a:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001a2c:	4b5b      	ldr	r3, [pc, #364]	; (8001b9c <HAL_SPI_MspInit+0x2b4>)
 8001a2e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001a32:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001a34:	4b59      	ldr	r3, [pc, #356]	; (8001b9c <HAL_SPI_MspInit+0x2b4>)
 8001a36:	2200      	movs	r2, #0
 8001a38:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001a3a:	4b58      	ldr	r3, [pc, #352]	; (8001b9c <HAL_SPI_MspInit+0x2b4>)
 8001a3c:	2200      	movs	r2, #0
 8001a3e:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 8001a40:	4b56      	ldr	r3, [pc, #344]	; (8001b9c <HAL_SPI_MspInit+0x2b4>)
 8001a42:	2200      	movs	r2, #0
 8001a44:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001a46:	4b55      	ldr	r3, [pc, #340]	; (8001b9c <HAL_SPI_MspInit+0x2b4>)
 8001a48:	2200      	movs	r2, #0
 8001a4a:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001a4c:	4b53      	ldr	r3, [pc, #332]	; (8001b9c <HAL_SPI_MspInit+0x2b4>)
 8001a4e:	2200      	movs	r2, #0
 8001a50:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001a52:	4852      	ldr	r0, [pc, #328]	; (8001b9c <HAL_SPI_MspInit+0x2b4>)
 8001a54:	f002 fdd4 	bl	8004600 <HAL_DMA_Init>
 8001a58:	4603      	mov	r3, r0
 8001a5a:	2b00      	cmp	r3, #0
 8001a5c:	d001      	beq.n	8001a62 <HAL_SPI_MspInit+0x17a>
    {
      Error_Handler();
 8001a5e:	f7ff fe11 	bl	8001684 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001a62:	687b      	ldr	r3, [r7, #4]
 8001a64:	4a4d      	ldr	r2, [pc, #308]	; (8001b9c <HAL_SPI_MspInit+0x2b4>)
 8001a66:	655a      	str	r2, [r3, #84]	; 0x54
 8001a68:	4a4c      	ldr	r2, [pc, #304]	; (8001b9c <HAL_SPI_MspInit+0x2b4>)
 8001a6a:	687b      	ldr	r3, [r7, #4]
 8001a6c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 8001a6e:	2200      	movs	r2, #0
 8001a70:	2105      	movs	r1, #5
 8001a72:	2023      	movs	r0, #35	; 0x23
 8001a74:	f002 fc9e 	bl	80043b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001a78:	2023      	movs	r0, #35	; 0x23
 8001a7a:	f002 fcb7 	bl	80043ec <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 8001a7e:	e1bd      	b.n	8001dfc <HAL_SPI_MspInit+0x514>
  else if(spiHandle->Instance==SPI2)
 8001a80:	687b      	ldr	r3, [r7, #4]
 8001a82:	681b      	ldr	r3, [r3, #0]
 8001a84:	4a47      	ldr	r2, [pc, #284]	; (8001ba4 <HAL_SPI_MspInit+0x2bc>)
 8001a86:	4293      	cmp	r3, r2
 8001a88:	f040 8094 	bne.w	8001bb4 <HAL_SPI_MspInit+0x2cc>
    __HAL_RCC_SPI2_CLK_ENABLE();
 8001a8c:	4b3e      	ldr	r3, [pc, #248]	; (8001b88 <HAL_SPI_MspInit+0x2a0>)
 8001a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a90:	4a3d      	ldr	r2, [pc, #244]	; (8001b88 <HAL_SPI_MspInit+0x2a0>)
 8001a92:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001a96:	6413      	str	r3, [r2, #64]	; 0x40
 8001a98:	4b3b      	ldr	r3, [pc, #236]	; (8001b88 <HAL_SPI_MspInit+0x2a0>)
 8001a9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001a9c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001aa0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001aa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001aa4:	4b38      	ldr	r3, [pc, #224]	; (8001b88 <HAL_SPI_MspInit+0x2a0>)
 8001aa6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001aa8:	4a37      	ldr	r2, [pc, #220]	; (8001b88 <HAL_SPI_MspInit+0x2a0>)
 8001aaa:	f043 0304 	orr.w	r3, r3, #4
 8001aae:	6313      	str	r3, [r2, #48]	; 0x30
 8001ab0:	4b35      	ldr	r3, [pc, #212]	; (8001b88 <HAL_SPI_MspInit+0x2a0>)
 8001ab2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ab4:	f003 0304 	and.w	r3, r3, #4
 8001ab8:	62bb      	str	r3, [r7, #40]	; 0x28
 8001aba:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001abc:	4b32      	ldr	r3, [pc, #200]	; (8001b88 <HAL_SPI_MspInit+0x2a0>)
 8001abe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ac0:	4a31      	ldr	r2, [pc, #196]	; (8001b88 <HAL_SPI_MspInit+0x2a0>)
 8001ac2:	f043 0302 	orr.w	r3, r3, #2
 8001ac6:	6313      	str	r3, [r2, #48]	; 0x30
 8001ac8:	4b2f      	ldr	r3, [pc, #188]	; (8001b88 <HAL_SPI_MspInit+0x2a0>)
 8001aca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001acc:	f003 0302 	and.w	r3, r3, #2
 8001ad0:	627b      	str	r3, [r7, #36]	; 0x24
 8001ad2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001ad4:	230c      	movs	r3, #12
 8001ad6:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001ad8:	2302      	movs	r3, #2
 8001ada:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001adc:	2301      	movs	r3, #1
 8001ade:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001ae0:	2303      	movs	r3, #3
 8001ae2:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001ae4:	2305      	movs	r3, #5
 8001ae6:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001ae8:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001aec:	4619      	mov	r1, r3
 8001aee:	482e      	ldr	r0, [pc, #184]	; (8001ba8 <HAL_SPI_MspInit+0x2c0>)
 8001af0:	f004 ff00 	bl	80068f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001af4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001af8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001afa:	2302      	movs	r3, #2
 8001afc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001afe:	2300      	movs	r3, #0
 8001b00:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b02:	2303      	movs	r3, #3
 8001b04:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001b06:	2305      	movs	r3, #5
 8001b08:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001b0a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001b0e:	4619      	mov	r1, r3
 8001b10:	481f      	ldr	r0, [pc, #124]	; (8001b90 <HAL_SPI_MspInit+0x2a8>)
 8001b12:	f004 feef 	bl	80068f4 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 8001b16:	4b25      	ldr	r3, [pc, #148]	; (8001bac <HAL_SPI_MspInit+0x2c4>)
 8001b18:	4a25      	ldr	r2, [pc, #148]	; (8001bb0 <HAL_SPI_MspInit+0x2c8>)
 8001b1a:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 8001b1c:	4b23      	ldr	r3, [pc, #140]	; (8001bac <HAL_SPI_MspInit+0x2c4>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001b22:	4b22      	ldr	r3, [pc, #136]	; (8001bac <HAL_SPI_MspInit+0x2c4>)
 8001b24:	2200      	movs	r2, #0
 8001b26:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001b28:	4b20      	ldr	r3, [pc, #128]	; (8001bac <HAL_SPI_MspInit+0x2c4>)
 8001b2a:	2200      	movs	r2, #0
 8001b2c:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001b2e:	4b1f      	ldr	r3, [pc, #124]	; (8001bac <HAL_SPI_MspInit+0x2c4>)
 8001b30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b34:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b36:	4b1d      	ldr	r3, [pc, #116]	; (8001bac <HAL_SPI_MspInit+0x2c4>)
 8001b38:	2200      	movs	r2, #0
 8001b3a:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b3c:	4b1b      	ldr	r3, [pc, #108]	; (8001bac <HAL_SPI_MspInit+0x2c4>)
 8001b3e:	2200      	movs	r2, #0
 8001b40:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 8001b42:	4b1a      	ldr	r3, [pc, #104]	; (8001bac <HAL_SPI_MspInit+0x2c4>)
 8001b44:	2200      	movs	r2, #0
 8001b46:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001b48:	4b18      	ldr	r3, [pc, #96]	; (8001bac <HAL_SPI_MspInit+0x2c4>)
 8001b4a:	2200      	movs	r2, #0
 8001b4c:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b4e:	4b17      	ldr	r3, [pc, #92]	; (8001bac <HAL_SPI_MspInit+0x2c4>)
 8001b50:	2200      	movs	r2, #0
 8001b52:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001b54:	4815      	ldr	r0, [pc, #84]	; (8001bac <HAL_SPI_MspInit+0x2c4>)
 8001b56:	f002 fd53 	bl	8004600 <HAL_DMA_Init>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	2b00      	cmp	r3, #0
 8001b5e:	d001      	beq.n	8001b64 <HAL_SPI_MspInit+0x27c>
      Error_Handler();
 8001b60:	f7ff fd90 	bl	8001684 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	4a11      	ldr	r2, [pc, #68]	; (8001bac <HAL_SPI_MspInit+0x2c4>)
 8001b68:	659a      	str	r2, [r3, #88]	; 0x58
 8001b6a:	4a10      	ldr	r2, [pc, #64]	; (8001bac <HAL_SPI_MspInit+0x2c4>)
 8001b6c:	687b      	ldr	r3, [r7, #4]
 8001b6e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8001b70:	2200      	movs	r2, #0
 8001b72:	2105      	movs	r1, #5
 8001b74:	2024      	movs	r0, #36	; 0x24
 8001b76:	f002 fc1d 	bl	80043b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 8001b7a:	2024      	movs	r0, #36	; 0x24
 8001b7c:	f002 fc36 	bl	80043ec <HAL_NVIC_EnableIRQ>
}
 8001b80:	e13c      	b.n	8001dfc <HAL_SPI_MspInit+0x514>
 8001b82:	bf00      	nop
 8001b84:	40013000 	.word	0x40013000
 8001b88:	40023800 	.word	0x40023800
 8001b8c:	40020000 	.word	0x40020000
 8001b90:	40020400 	.word	0x40020400
 8001b94:	20000ae8 	.word	0x20000ae8
 8001b98:	40026440 	.word	0x40026440
 8001b9c:	20000b48 	.word	0x20000b48
 8001ba0:	40026458 	.word	0x40026458
 8001ba4:	40003800 	.word	0x40003800
 8001ba8:	40020800 	.word	0x40020800
 8001bac:	20000ba8 	.word	0x20000ba8
 8001bb0:	40026058 	.word	0x40026058
  else if(spiHandle->Instance==SPI3)
 8001bb4:	687b      	ldr	r3, [r7, #4]
 8001bb6:	681b      	ldr	r3, [r3, #0]
 8001bb8:	4a92      	ldr	r2, [pc, #584]	; (8001e04 <HAL_SPI_MspInit+0x51c>)
 8001bba:	4293      	cmp	r3, r2
 8001bbc:	d15d      	bne.n	8001c7a <HAL_SPI_MspInit+0x392>
    __HAL_RCC_SPI3_CLK_ENABLE();
 8001bbe:	4b92      	ldr	r3, [pc, #584]	; (8001e08 <HAL_SPI_MspInit+0x520>)
 8001bc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bc2:	4a91      	ldr	r2, [pc, #580]	; (8001e08 <HAL_SPI_MspInit+0x520>)
 8001bc4:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001bc8:	6413      	str	r3, [r2, #64]	; 0x40
 8001bca:	4b8f      	ldr	r3, [pc, #572]	; (8001e08 <HAL_SPI_MspInit+0x520>)
 8001bcc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bce:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001bd2:	623b      	str	r3, [r7, #32]
 8001bd4:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001bd6:	4b8c      	ldr	r3, [pc, #560]	; (8001e08 <HAL_SPI_MspInit+0x520>)
 8001bd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bda:	4a8b      	ldr	r2, [pc, #556]	; (8001e08 <HAL_SPI_MspInit+0x520>)
 8001bdc:	f043 0302 	orr.w	r3, r3, #2
 8001be0:	6313      	str	r3, [r2, #48]	; 0x30
 8001be2:	4b89      	ldr	r3, [pc, #548]	; (8001e08 <HAL_SPI_MspInit+0x520>)
 8001be4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001be6:	f003 0302 	and.w	r3, r3, #2
 8001bea:	61fb      	str	r3, [r7, #28]
 8001bec:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001bee:	4b86      	ldr	r3, [pc, #536]	; (8001e08 <HAL_SPI_MspInit+0x520>)
 8001bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bf2:	4a85      	ldr	r2, [pc, #532]	; (8001e08 <HAL_SPI_MspInit+0x520>)
 8001bf4:	f043 0304 	orr.w	r3, r3, #4
 8001bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8001bfa:	4b83      	ldr	r3, [pc, #524]	; (8001e08 <HAL_SPI_MspInit+0x520>)
 8001bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001bfe:	f003 0304 	and.w	r3, r3, #4
 8001c02:	61bb      	str	r3, [r7, #24]
 8001c04:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8001c06:	2304      	movs	r3, #4
 8001c08:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c0a:	2302      	movs	r3, #2
 8001c0c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c0e:	2300      	movs	r3, #0
 8001c10:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c12:	2303      	movs	r3, #3
 8001c14:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 8001c16:	2307      	movs	r3, #7
 8001c18:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c1a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c1e:	4619      	mov	r1, r3
 8001c20:	487a      	ldr	r0, [pc, #488]	; (8001e0c <HAL_SPI_MspInit+0x524>)
 8001c22:	f004 fe67 	bl	80068f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001c26:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001c2a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c2c:	2302      	movs	r3, #2
 8001c2e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c30:	2300      	movs	r3, #0
 8001c32:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c34:	2303      	movs	r3, #3
 8001c36:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c38:	2306      	movs	r3, #6
 8001c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001c3c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c40:	4619      	mov	r1, r3
 8001c42:	4873      	ldr	r0, [pc, #460]	; (8001e10 <HAL_SPI_MspInit+0x528>)
 8001c44:	f004 fe56 	bl	80068f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001c48:	2310      	movs	r3, #16
 8001c4a:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001c4c:	2302      	movs	r3, #2
 8001c4e:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c50:	2300      	movs	r3, #0
 8001c52:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001c54:	2303      	movs	r3, #3
 8001c56:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001c58:	2306      	movs	r3, #6
 8001c5a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c5c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001c60:	4619      	mov	r1, r3
 8001c62:	486a      	ldr	r0, [pc, #424]	; (8001e0c <HAL_SPI_MspInit+0x524>)
 8001c64:	f004 fe46 	bl	80068f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8001c68:	2200      	movs	r2, #0
 8001c6a:	2105      	movs	r1, #5
 8001c6c:	2033      	movs	r0, #51	; 0x33
 8001c6e:	f002 fba1 	bl	80043b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001c72:	2033      	movs	r0, #51	; 0x33
 8001c74:	f002 fbba 	bl	80043ec <HAL_NVIC_EnableIRQ>
}
 8001c78:	e0c0      	b.n	8001dfc <HAL_SPI_MspInit+0x514>
  else if(spiHandle->Instance==SPI4)
 8001c7a:	687b      	ldr	r3, [r7, #4]
 8001c7c:	681b      	ldr	r3, [r3, #0]
 8001c7e:	4a65      	ldr	r2, [pc, #404]	; (8001e14 <HAL_SPI_MspInit+0x52c>)
 8001c80:	4293      	cmp	r3, r2
 8001c82:	f040 808d 	bne.w	8001da0 <HAL_SPI_MspInit+0x4b8>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001c86:	4b60      	ldr	r3, [pc, #384]	; (8001e08 <HAL_SPI_MspInit+0x520>)
 8001c88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c8a:	4a5f      	ldr	r2, [pc, #380]	; (8001e08 <HAL_SPI_MspInit+0x520>)
 8001c8c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001c90:	6453      	str	r3, [r2, #68]	; 0x44
 8001c92:	4b5d      	ldr	r3, [pc, #372]	; (8001e08 <HAL_SPI_MspInit+0x520>)
 8001c94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c96:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001c9a:	617b      	str	r3, [r7, #20]
 8001c9c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001c9e:	4b5a      	ldr	r3, [pc, #360]	; (8001e08 <HAL_SPI_MspInit+0x520>)
 8001ca0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001ca2:	4a59      	ldr	r2, [pc, #356]	; (8001e08 <HAL_SPI_MspInit+0x520>)
 8001ca4:	f043 0310 	orr.w	r3, r3, #16
 8001ca8:	6313      	str	r3, [r2, #48]	; 0x30
 8001caa:	4b57      	ldr	r3, [pc, #348]	; (8001e08 <HAL_SPI_MspInit+0x520>)
 8001cac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001cae:	f003 0310 	and.w	r3, r3, #16
 8001cb2:	613b      	str	r3, [r7, #16]
 8001cb4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001cb6:	2364      	movs	r3, #100	; 0x64
 8001cb8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001cba:	2302      	movs	r3, #2
 8001cbc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001cbe:	2300      	movs	r3, #0
 8001cc0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001cc2:	2303      	movs	r3, #3
 8001cc4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001cc6:	2305      	movs	r3, #5
 8001cc8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001cca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001cce:	4619      	mov	r1, r3
 8001cd0:	4851      	ldr	r0, [pc, #324]	; (8001e18 <HAL_SPI_MspInit+0x530>)
 8001cd2:	f004 fe0f 	bl	80068f4 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 8001cd6:	4b51      	ldr	r3, [pc, #324]	; (8001e1c <HAL_SPI_MspInit+0x534>)
 8001cd8:	4a51      	ldr	r2, [pc, #324]	; (8001e20 <HAL_SPI_MspInit+0x538>)
 8001cda:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 8001cdc:	4b4f      	ldr	r3, [pc, #316]	; (8001e1c <HAL_SPI_MspInit+0x534>)
 8001cde:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001ce2:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001ce4:	4b4d      	ldr	r3, [pc, #308]	; (8001e1c <HAL_SPI_MspInit+0x534>)
 8001ce6:	2200      	movs	r2, #0
 8001ce8:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001cea:	4b4c      	ldr	r3, [pc, #304]	; (8001e1c <HAL_SPI_MspInit+0x534>)
 8001cec:	2200      	movs	r2, #0
 8001cee:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001cf0:	4b4a      	ldr	r3, [pc, #296]	; (8001e1c <HAL_SPI_MspInit+0x534>)
 8001cf2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001cf6:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001cf8:	4b48      	ldr	r3, [pc, #288]	; (8001e1c <HAL_SPI_MspInit+0x534>)
 8001cfa:	2200      	movs	r2, #0
 8001cfc:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001cfe:	4b47      	ldr	r3, [pc, #284]	; (8001e1c <HAL_SPI_MspInit+0x534>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8001d04:	4b45      	ldr	r3, [pc, #276]	; (8001e1c <HAL_SPI_MspInit+0x534>)
 8001d06:	2200      	movs	r2, #0
 8001d08:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001d0a:	4b44      	ldr	r3, [pc, #272]	; (8001e1c <HAL_SPI_MspInit+0x534>)
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d10:	4b42      	ldr	r3, [pc, #264]	; (8001e1c <HAL_SPI_MspInit+0x534>)
 8001d12:	2200      	movs	r2, #0
 8001d14:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8001d16:	4841      	ldr	r0, [pc, #260]	; (8001e1c <HAL_SPI_MspInit+0x534>)
 8001d18:	f002 fc72 	bl	8004600 <HAL_DMA_Init>
 8001d1c:	4603      	mov	r3, r0
 8001d1e:	2b00      	cmp	r3, #0
 8001d20:	d001      	beq.n	8001d26 <HAL_SPI_MspInit+0x43e>
      Error_Handler();
 8001d22:	f7ff fcaf 	bl	8001684 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 8001d26:	687b      	ldr	r3, [r7, #4]
 8001d28:	4a3c      	ldr	r2, [pc, #240]	; (8001e1c <HAL_SPI_MspInit+0x534>)
 8001d2a:	659a      	str	r2, [r3, #88]	; 0x58
 8001d2c:	4a3b      	ldr	r2, [pc, #236]	; (8001e1c <HAL_SPI_MspInit+0x534>)
 8001d2e:	687b      	ldr	r3, [r7, #4]
 8001d30:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi4_tx.Instance = DMA2_Stream4;
 8001d32:	4b3c      	ldr	r3, [pc, #240]	; (8001e24 <HAL_SPI_MspInit+0x53c>)
 8001d34:	4a3c      	ldr	r2, [pc, #240]	; (8001e28 <HAL_SPI_MspInit+0x540>)
 8001d36:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_5;
 8001d38:	4b3a      	ldr	r3, [pc, #232]	; (8001e24 <HAL_SPI_MspInit+0x53c>)
 8001d3a:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001d3e:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001d40:	4b38      	ldr	r3, [pc, #224]	; (8001e24 <HAL_SPI_MspInit+0x53c>)
 8001d42:	2240      	movs	r2, #64	; 0x40
 8001d44:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001d46:	4b37      	ldr	r3, [pc, #220]	; (8001e24 <HAL_SPI_MspInit+0x53c>)
 8001d48:	2200      	movs	r2, #0
 8001d4a:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001d4c:	4b35      	ldr	r3, [pc, #212]	; (8001e24 <HAL_SPI_MspInit+0x53c>)
 8001d4e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001d52:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001d54:	4b33      	ldr	r3, [pc, #204]	; (8001e24 <HAL_SPI_MspInit+0x53c>)
 8001d56:	2200      	movs	r2, #0
 8001d58:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001d5a:	4b32      	ldr	r3, [pc, #200]	; (8001e24 <HAL_SPI_MspInit+0x53c>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8001d60:	4b30      	ldr	r3, [pc, #192]	; (8001e24 <HAL_SPI_MspInit+0x53c>)
 8001d62:	2200      	movs	r2, #0
 8001d64:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001d66:	4b2f      	ldr	r3, [pc, #188]	; (8001e24 <HAL_SPI_MspInit+0x53c>)
 8001d68:	2200      	movs	r2, #0
 8001d6a:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001d6c:	4b2d      	ldr	r3, [pc, #180]	; (8001e24 <HAL_SPI_MspInit+0x53c>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8001d72:	482c      	ldr	r0, [pc, #176]	; (8001e24 <HAL_SPI_MspInit+0x53c>)
 8001d74:	f002 fc44 	bl	8004600 <HAL_DMA_Init>
 8001d78:	4603      	mov	r3, r0
 8001d7a:	2b00      	cmp	r3, #0
 8001d7c:	d001      	beq.n	8001d82 <HAL_SPI_MspInit+0x49a>
      Error_Handler();
 8001d7e:	f7ff fc81 	bl	8001684 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 8001d82:	687b      	ldr	r3, [r7, #4]
 8001d84:	4a27      	ldr	r2, [pc, #156]	; (8001e24 <HAL_SPI_MspInit+0x53c>)
 8001d86:	655a      	str	r2, [r3, #84]	; 0x54
 8001d88:	4a26      	ldr	r2, [pc, #152]	; (8001e24 <HAL_SPI_MspInit+0x53c>)
 8001d8a:	687b      	ldr	r3, [r7, #4]
 8001d8c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 8001d8e:	2200      	movs	r2, #0
 8001d90:	2105      	movs	r1, #5
 8001d92:	2054      	movs	r0, #84	; 0x54
 8001d94:	f002 fb0e 	bl	80043b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001d98:	2054      	movs	r0, #84	; 0x54
 8001d9a:	f002 fb27 	bl	80043ec <HAL_NVIC_EnableIRQ>
}
 8001d9e:	e02d      	b.n	8001dfc <HAL_SPI_MspInit+0x514>
  else if(spiHandle->Instance==SPI5)
 8001da0:	687b      	ldr	r3, [r7, #4]
 8001da2:	681b      	ldr	r3, [r3, #0]
 8001da4:	4a21      	ldr	r2, [pc, #132]	; (8001e2c <HAL_SPI_MspInit+0x544>)
 8001da6:	4293      	cmp	r3, r2
 8001da8:	d128      	bne.n	8001dfc <HAL_SPI_MspInit+0x514>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001daa:	4b17      	ldr	r3, [pc, #92]	; (8001e08 <HAL_SPI_MspInit+0x520>)
 8001dac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dae:	4a16      	ldr	r2, [pc, #88]	; (8001e08 <HAL_SPI_MspInit+0x520>)
 8001db0:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001db4:	6453      	str	r3, [r2, #68]	; 0x44
 8001db6:	4b14      	ldr	r3, [pc, #80]	; (8001e08 <HAL_SPI_MspInit+0x520>)
 8001db8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001dba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001dbe:	60fb      	str	r3, [r7, #12]
 8001dc0:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001dc2:	4b11      	ldr	r3, [pc, #68]	; (8001e08 <HAL_SPI_MspInit+0x520>)
 8001dc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dc6:	4a10      	ldr	r2, [pc, #64]	; (8001e08 <HAL_SPI_MspInit+0x520>)
 8001dc8:	f043 0320 	orr.w	r3, r3, #32
 8001dcc:	6313      	str	r3, [r2, #48]	; 0x30
 8001dce:	4b0e      	ldr	r3, [pc, #56]	; (8001e08 <HAL_SPI_MspInit+0x520>)
 8001dd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001dd2:	f003 0320 	and.w	r3, r3, #32
 8001dd6:	60bb      	str	r3, [r7, #8]
 8001dd8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11;
 8001dda:	f44f 6318 	mov.w	r3, #2432	; 0x980
 8001dde:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001de0:	2302      	movs	r3, #2
 8001de2:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001de4:	2300      	movs	r3, #0
 8001de6:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001de8:	2303      	movs	r3, #3
 8001dea:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001dec:	2305      	movs	r3, #5
 8001dee:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001df0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001df4:	4619      	mov	r1, r3
 8001df6:	480e      	ldr	r0, [pc, #56]	; (8001e30 <HAL_SPI_MspInit+0x548>)
 8001df8:	f004 fd7c 	bl	80068f4 <HAL_GPIO_Init>
}
 8001dfc:	bf00      	nop
 8001dfe:	3750      	adds	r7, #80	; 0x50
 8001e00:	46bd      	mov	sp, r7
 8001e02:	bd80      	pop	{r7, pc}
 8001e04:	40003c00 	.word	0x40003c00
 8001e08:	40023800 	.word	0x40023800
 8001e0c:	40020400 	.word	0x40020400
 8001e10:	40020800 	.word	0x40020800
 8001e14:	40013400 	.word	0x40013400
 8001e18:	40021000 	.word	0x40021000
 8001e1c:	20000c08 	.word	0x20000c08
 8001e20:	40026410 	.word	0x40026410
 8001e24:	20000c68 	.word	0x20000c68
 8001e28:	40026470 	.word	0x40026470
 8001e2c:	40015000 	.word	0x40015000
 8001e30:	40021400 	.word	0x40021400

08001e34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e34:	b580      	push	{r7, lr}
 8001e36:	b082      	sub	sp, #8
 8001e38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001e3a:	4b15      	ldr	r3, [pc, #84]	; (8001e90 <HAL_MspInit+0x5c>)
 8001e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e3e:	4a14      	ldr	r2, [pc, #80]	; (8001e90 <HAL_MspInit+0x5c>)
 8001e40:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e44:	6413      	str	r3, [r2, #64]	; 0x40
 8001e46:	4b12      	ldr	r3, [pc, #72]	; (8001e90 <HAL_MspInit+0x5c>)
 8001e48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001e4a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001e4e:	607b      	str	r3, [r7, #4]
 8001e50:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001e52:	4b0f      	ldr	r3, [pc, #60]	; (8001e90 <HAL_MspInit+0x5c>)
 8001e54:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e56:	4a0e      	ldr	r2, [pc, #56]	; (8001e90 <HAL_MspInit+0x5c>)
 8001e58:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001e5c:	6453      	str	r3, [r2, #68]	; 0x44
 8001e5e:	4b0c      	ldr	r3, [pc, #48]	; (8001e90 <HAL_MspInit+0x5c>)
 8001e60:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001e62:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001e66:	603b      	str	r3, [r7, #0]
 8001e68:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	210f      	movs	r1, #15
 8001e6e:	f06f 0001 	mvn.w	r0, #1
 8001e72:	f002 fa9f 	bl	80043b4 <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 8001e76:	2200      	movs	r2, #0
 8001e78:	2105      	movs	r1, #5
 8001e7a:	2004      	movs	r0, #4
 8001e7c:	f002 fa9a 	bl	80043b4 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8001e80:	2004      	movs	r0, #4
 8001e82:	f002 fab3 	bl	80043ec <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001e86:	bf00      	nop
 8001e88:	3708      	adds	r7, #8
 8001e8a:	46bd      	mov	sp, r7
 8001e8c:	bd80      	pop	{r7, pc}
 8001e8e:	bf00      	nop
 8001e90:	40023800 	.word	0x40023800

08001e94 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e94:	b580      	push	{r7, lr}
 8001e96:	b08c      	sub	sp, #48	; 0x30
 8001e98:	af00      	add	r7, sp, #0
 8001e9a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001e9c:	2300      	movs	r3, #0
 8001e9e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001ea0:	2300      	movs	r3, #0
 8001ea2:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001ea4:	4b2f      	ldr	r3, [pc, #188]	; (8001f64 <HAL_InitTick+0xd0>)
 8001ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001ea8:	4a2e      	ldr	r2, [pc, #184]	; (8001f64 <HAL_InitTick+0xd0>)
 8001eaa:	f043 0301 	orr.w	r3, r3, #1
 8001eae:	6453      	str	r3, [r2, #68]	; 0x44
 8001eb0:	4b2c      	ldr	r3, [pc, #176]	; (8001f64 <HAL_InitTick+0xd0>)
 8001eb2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001eb4:	f003 0301 	and.w	r3, r3, #1
 8001eb8:	60bb      	str	r3, [r7, #8]
 8001eba:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001ebc:	f107 020c 	add.w	r2, r7, #12
 8001ec0:	f107 0310 	add.w	r3, r7, #16
 8001ec4:	4611      	mov	r1, r2
 8001ec6:	4618      	mov	r0, r3
 8001ec8:	f007 fbf8 	bl	80096bc <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001ecc:	f007 fbe2 	bl	8009694 <HAL_RCC_GetPCLK2Freq>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	005b      	lsls	r3, r3, #1
 8001ed4:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001ed6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001ed8:	4a23      	ldr	r2, [pc, #140]	; (8001f68 <HAL_InitTick+0xd4>)
 8001eda:	fba2 2303 	umull	r2, r3, r2, r3
 8001ede:	0c9b      	lsrs	r3, r3, #18
 8001ee0:	3b01      	subs	r3, #1
 8001ee2:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001ee4:	4b21      	ldr	r3, [pc, #132]	; (8001f6c <HAL_InitTick+0xd8>)
 8001ee6:	4a22      	ldr	r2, [pc, #136]	; (8001f70 <HAL_InitTick+0xdc>)
 8001ee8:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001eea:	4b20      	ldr	r3, [pc, #128]	; (8001f6c <HAL_InitTick+0xd8>)
 8001eec:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ef0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001ef2:	4a1e      	ldr	r2, [pc, #120]	; (8001f6c <HAL_InitTick+0xd8>)
 8001ef4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ef6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001ef8:	4b1c      	ldr	r3, [pc, #112]	; (8001f6c <HAL_InitTick+0xd8>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001efe:	4b1b      	ldr	r3, [pc, #108]	; (8001f6c <HAL_InitTick+0xd8>)
 8001f00:	2200      	movs	r2, #0
 8001f02:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001f04:	4b19      	ldr	r3, [pc, #100]	; (8001f6c <HAL_InitTick+0xd8>)
 8001f06:	2200      	movs	r2, #0
 8001f08:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001f0a:	4818      	ldr	r0, [pc, #96]	; (8001f6c <HAL_InitTick+0xd8>)
 8001f0c:	f009 ffbe 	bl	800be8c <HAL_TIM_Base_Init>
 8001f10:	4603      	mov	r3, r0
 8001f12:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001f16:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d11b      	bne.n	8001f56 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001f1e:	4813      	ldr	r0, [pc, #76]	; (8001f6c <HAL_InitTick+0xd8>)
 8001f20:	f00a f816 	bl	800bf50 <HAL_TIM_Base_Start_IT>
 8001f24:	4603      	mov	r3, r0
 8001f26:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001f2a:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d111      	bne.n	8001f56 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001f32:	2019      	movs	r0, #25
 8001f34:	f002 fa5a 	bl	80043ec <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001f38:	687b      	ldr	r3, [r7, #4]
 8001f3a:	2b0f      	cmp	r3, #15
 8001f3c:	d808      	bhi.n	8001f50 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001f3e:	2200      	movs	r2, #0
 8001f40:	6879      	ldr	r1, [r7, #4]
 8001f42:	2019      	movs	r0, #25
 8001f44:	f002 fa36 	bl	80043b4 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001f48:	4a0a      	ldr	r2, [pc, #40]	; (8001f74 <HAL_InitTick+0xe0>)
 8001f4a:	687b      	ldr	r3, [r7, #4]
 8001f4c:	6013      	str	r3, [r2, #0]
 8001f4e:	e002      	b.n	8001f56 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001f50:	2301      	movs	r3, #1
 8001f52:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001f56:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001f5a:	4618      	mov	r0, r3
 8001f5c:	3730      	adds	r7, #48	; 0x30
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	40023800 	.word	0x40023800
 8001f68:	431bde83 	.word	0x431bde83
 8001f6c:	20000cc8 	.word	0x20000cc8
 8001f70:	40010000 	.word	0x40010000
 8001f74:	20000004 	.word	0x20000004

08001f78 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001f78:	b480      	push	{r7}
 8001f7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001f7c:	e7fe      	b.n	8001f7c <NMI_Handler+0x4>

08001f7e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001f7e:	b480      	push	{r7}
 8001f80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001f82:	e7fe      	b.n	8001f82 <HardFault_Handler+0x4>

08001f84 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001f84:	b480      	push	{r7}
 8001f86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001f88:	e7fe      	b.n	8001f88 <MemManage_Handler+0x4>

08001f8a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001f8a:	b480      	push	{r7}
 8001f8c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001f8e:	e7fe      	b.n	8001f8e <BusFault_Handler+0x4>

08001f90 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001f90:	b480      	push	{r7}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001f94:	e7fe      	b.n	8001f94 <UsageFault_Handler+0x4>

08001f96 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001f96:	b480      	push	{r7}
 8001f98:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	46bd      	mov	sp, r7
 8001f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fa2:	4770      	bx	lr

08001fa4 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8001fa8:	f004 fa0e 	bl	80063c8 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8001fac:	bf00      	nop
 8001fae:	bd80      	pop	{r7, pc}

08001fb0 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001fb0:	b580      	push	{r7, lr}
 8001fb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001fb4:	4802      	ldr	r0, [pc, #8]	; (8001fc0 <DMA1_Stream0_IRQHandler+0x10>)
 8001fb6:	f002 fcc3 	bl	8004940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001fba:	bf00      	nop
 8001fbc:	bd80      	pop	{r7, pc}
 8001fbe:	bf00      	nop
 8001fc0:	20001278 	.word	0x20001278

08001fc4 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8001fc8:	4802      	ldr	r0, [pc, #8]	; (8001fd4 <DMA1_Stream1_IRQHandler+0x10>)
 8001fca:	f002 fcb9 	bl	8004940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001fce:	bf00      	nop
 8001fd0:	bd80      	pop	{r7, pc}
 8001fd2:	bf00      	nop
 8001fd4:	20000894 	.word	0x20000894

08001fd8 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001fdc:	4802      	ldr	r0, [pc, #8]	; (8001fe8 <DMA1_Stream2_IRQHandler+0x10>)
 8001fde:	f002 fcaf 	bl	8004940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001fe2:	bf00      	nop
 8001fe4:	bd80      	pop	{r7, pc}
 8001fe6:	bf00      	nop
 8001fe8:	200011b8 	.word	0x200011b8

08001fec <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001fec:	b580      	push	{r7, lr}
 8001fee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001ff0:	4802      	ldr	r0, [pc, #8]	; (8001ffc <DMA1_Stream3_IRQHandler+0x10>)
 8001ff2:	f002 fca5 	bl	8004940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001ff6:	bf00      	nop
 8001ff8:	bd80      	pop	{r7, pc}
 8001ffa:	bf00      	nop
 8001ffc:	20000ba8 	.word	0x20000ba8

08002000 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8002000:	b580      	push	{r7, lr}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8002004:	4802      	ldr	r0, [pc, #8]	; (8002010 <DMA1_Stream4_IRQHandler+0x10>)
 8002006:	f002 fc9b 	bl	8004940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	bd80      	pop	{r7, pc}
 800200e:	bf00      	nop
 8002010:	20001158 	.word	0x20001158

08002014 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002014:	b580      	push	{r7, lr}
 8002016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8002018:	4802      	ldr	r0, [pc, #8]	; (8002024 <DMA1_Stream5_IRQHandler+0x10>)
 800201a:	f002 fc91 	bl	8004940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800201e:	bf00      	nop
 8002020:	bd80      	pop	{r7, pc}
 8002022:	bf00      	nop
 8002024:	20000834 	.word	0x20000834

08002028 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 800202c:	4802      	ldr	r0, [pc, #8]	; (8002038 <DMA1_Stream6_IRQHandler+0x10>)
 800202e:	f002 fc87 	bl	8004940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}
 8002036:	bf00      	nop
 8002038:	200012d8 	.word	0x200012d8

0800203c <CAN1_TX_IRQHandler>:

/**
  * @brief This function handles CAN1 TX interrupts.
  */
void CAN1_TX_IRQHandler(void)
{
 800203c:	b580      	push	{r7, lr}
 800203e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_TX_IRQn 0 */

  /* USER CODE END CAN1_TX_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002040:	4802      	ldr	r0, [pc, #8]	; (800204c <CAN1_TX_IRQHandler+0x10>)
 8002042:	f001 fec6 	bl	8003dd2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_TX_IRQn 1 */

  /* USER CODE END CAN1_TX_IRQn 1 */
}
 8002046:	bf00      	nop
 8002048:	bd80      	pop	{r7, pc}
 800204a:	bf00      	nop
 800204c:	200003d8 	.word	0x200003d8

08002050 <CAN1_RX0_IRQHandler>:

/**
  * @brief This function handles CAN1 RX0 interrupts.
  */
void CAN1_RX0_IRQHandler(void)
{
 8002050:	b580      	push	{r7, lr}
 8002052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX0_IRQn 0 */

  /* USER CODE END CAN1_RX0_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002054:	4802      	ldr	r0, [pc, #8]	; (8002060 <CAN1_RX0_IRQHandler+0x10>)
 8002056:	f001 febc 	bl	8003dd2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX0_IRQn 1 */

  /* USER CODE END CAN1_RX0_IRQn 1 */
}
 800205a:	bf00      	nop
 800205c:	bd80      	pop	{r7, pc}
 800205e:	bf00      	nop
 8002060:	200003d8 	.word	0x200003d8

08002064 <CAN1_RX1_IRQHandler>:

/**
  * @brief This function handles CAN1 RX1 interrupt.
  */
void CAN1_RX1_IRQHandler(void)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_RX1_IRQn 0 */

  /* USER CODE END CAN1_RX1_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 8002068:	4802      	ldr	r0, [pc, #8]	; (8002074 <CAN1_RX1_IRQHandler+0x10>)
 800206a:	f001 feb2 	bl	8003dd2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_RX1_IRQn 1 */

  /* USER CODE END CAN1_RX1_IRQn 1 */
}
 800206e:	bf00      	nop
 8002070:	bd80      	pop	{r7, pc}
 8002072:	bf00      	nop
 8002074:	200003d8 	.word	0x200003d8

08002078 <CAN1_SCE_IRQHandler>:

/**
  * @brief This function handles CAN1 SCE interrupt.
  */
void CAN1_SCE_IRQHandler(void)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN CAN1_SCE_IRQn 0 */

  /* USER CODE END CAN1_SCE_IRQn 0 */
  HAL_CAN_IRQHandler(&hcan1);
 800207c:	4802      	ldr	r0, [pc, #8]	; (8002088 <CAN1_SCE_IRQHandler+0x10>)
 800207e:	f001 fea8 	bl	8003dd2 <HAL_CAN_IRQHandler>
  /* USER CODE BEGIN CAN1_SCE_IRQn 1 */

  /* USER CODE END CAN1_SCE_IRQn 1 */
}
 8002082:	bf00      	nop
 8002084:	bd80      	pop	{r7, pc}
 8002086:	bf00      	nop
 8002088:	200003d8 	.word	0x200003d8

0800208c <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 800208c:	b580      	push	{r7, lr}
 800208e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8002090:	4802      	ldr	r0, [pc, #8]	; (800209c <TIM1_UP_TIM10_IRQHandler+0x10>)
 8002092:	f009 ffd5 	bl	800c040 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8002096:	bf00      	nop
 8002098:	bd80      	pop	{r7, pc}
 800209a:	bf00      	nop
 800209c:	20000cc8 	.word	0x20000cc8

080020a0 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 80020a4:	4802      	ldr	r0, [pc, #8]	; (80020b0 <I2C1_EV_IRQHandler+0x10>)
 80020a6:	f005 f8a9 	bl	80071fc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 80020aa:	bf00      	nop
 80020ac:	bd80      	pop	{r7, pc}
 80020ae:	bf00      	nop
 80020b0:	200006e4 	.word	0x200006e4

080020b4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80020b8:	4802      	ldr	r0, [pc, #8]	; (80020c4 <I2C1_ER_IRQHandler+0x10>)
 80020ba:	f005 f8b9 	bl	8007230 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80020be:	bf00      	nop
 80020c0:	bd80      	pop	{r7, pc}
 80020c2:	bf00      	nop
 80020c4:	200006e4 	.word	0x200006e4

080020c8 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 80020c8:	b580      	push	{r7, lr}
 80020ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 80020cc:	4802      	ldr	r0, [pc, #8]	; (80020d8 <I2C2_EV_IRQHandler+0x10>)
 80020ce:	f005 f895 	bl	80071fc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 80020d2:	bf00      	nop
 80020d4:	bd80      	pop	{r7, pc}
 80020d6:	bf00      	nop
 80020d8:	20000738 	.word	0x20000738

080020dc <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 80020dc:	b580      	push	{r7, lr}
 80020de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 80020e0:	4802      	ldr	r0, [pc, #8]	; (80020ec <I2C2_ER_IRQHandler+0x10>)
 80020e2:	f005 f8a5 	bl	8007230 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	20000738 	.word	0x20000738

080020f0 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 80020f0:	b580      	push	{r7, lr}
 80020f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 80020f4:	4802      	ldr	r0, [pc, #8]	; (8002100 <SPI1_IRQHandler+0x10>)
 80020f6:	f008 fe25 	bl	800ad44 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 80020fa:	bf00      	nop
 80020fc:	bd80      	pop	{r7, pc}
 80020fe:	bf00      	nop
 8002100:	200008f4 	.word	0x200008f4

08002104 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8002104:	b580      	push	{r7, lr}
 8002106:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8002108:	4802      	ldr	r0, [pc, #8]	; (8002114 <SPI2_IRQHandler+0x10>)
 800210a:	f008 fe1b 	bl	800ad44 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 800210e:	bf00      	nop
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	20000958 	.word	0x20000958

08002118 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8002118:	b580      	push	{r7, lr}
 800211a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800211c:	4802      	ldr	r0, [pc, #8]	; (8002128 <USART1_IRQHandler+0x10>)
 800211e:	f00a fc5f 	bl	800c9e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8002122:	bf00      	nop
 8002124:	bd80      	pop	{r7, pc}
 8002126:	bf00      	nop
 8002128:	20000f38 	.word	0x20000f38

0800212c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800212c:	b580      	push	{r7, lr}
 800212e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002130:	4802      	ldr	r0, [pc, #8]	; (800213c <USART2_IRQHandler+0x10>)
 8002132:	f00a fc55 	bl	800c9e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002136:	bf00      	nop
 8002138:	bd80      	pop	{r7, pc}
 800213a:	bf00      	nop
 800213c:	20000fc0 	.word	0x20000fc0

08002140 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8002140:	b580      	push	{r7, lr}
 8002142:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8002144:	4802      	ldr	r0, [pc, #8]	; (8002150 <USART3_IRQHandler+0x10>)
 8002146:	f00a fc4b 	bl	800c9e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800214a:	bf00      	nop
 800214c:	bd80      	pop	{r7, pc}
 800214e:	bf00      	nop
 8002150:	20001048 	.word	0x20001048

08002154 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8002154:	b580      	push	{r7, lr}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8002158:	4802      	ldr	r0, [pc, #8]	; (8002164 <DMA1_Stream7_IRQHandler+0x10>)
 800215a:	f002 fbf1 	bl	8004940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 800215e:	bf00      	nop
 8002160:	bd80      	pop	{r7, pc}
 8002162:	bf00      	nop
 8002164:	20001218 	.word	0x20001218

08002168 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8002168:	b580      	push	{r7, lr}
 800216a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 800216c:	4802      	ldr	r0, [pc, #8]	; (8002178 <SPI3_IRQHandler+0x10>)
 800216e:	f008 fde9 	bl	800ad44 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8002172:	bf00      	nop
 8002174:	bd80      	pop	{r7, pc}
 8002176:	bf00      	nop
 8002178:	200009bc 	.word	0x200009bc

0800217c <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 800217c:	b580      	push	{r7, lr}
 800217e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8002180:	4802      	ldr	r0, [pc, #8]	; (800218c <UART4_IRQHandler+0x10>)
 8002182:	f00a fc2d 	bl	800c9e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8002186:	bf00      	nop
 8002188:	bd80      	pop	{r7, pc}
 800218a:	bf00      	nop
 800218c:	20000d18 	.word	0x20000d18

08002190 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8002190:	b580      	push	{r7, lr}
 8002192:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8002194:	4802      	ldr	r0, [pc, #8]	; (80021a0 <UART5_IRQHandler+0x10>)
 8002196:	f00a fc23 	bl	800c9e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800219a:	bf00      	nop
 800219c:	bd80      	pop	{r7, pc}
 800219e:	bf00      	nop
 80021a0:	20000da0 	.word	0x20000da0

080021a4 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 80021a4:	b580      	push	{r7, lr}
 80021a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 80021a8:	4802      	ldr	r0, [pc, #8]	; (80021b4 <DMA2_Stream0_IRQHandler+0x10>)
 80021aa:	f002 fbc9 	bl	8004940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 80021ae:	bf00      	nop
 80021b0:	bd80      	pop	{r7, pc}
 80021b2:	bf00      	nop
 80021b4:	20000c08 	.word	0x20000c08

080021b8 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 80021b8:	b580      	push	{r7, lr}
 80021ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 80021bc:	4802      	ldr	r0, [pc, #8]	; (80021c8 <DMA2_Stream1_IRQHandler+0x10>)
 80021be:	f002 fbbf 	bl	8004940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 80021c2:	bf00      	nop
 80021c4:	bd80      	pop	{r7, pc}
 80021c6:	bf00      	nop
 80021c8:	200013f8 	.word	0x200013f8

080021cc <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 80021cc:	b580      	push	{r7, lr}
 80021ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 80021d0:	4802      	ldr	r0, [pc, #8]	; (80021dc <DMA2_Stream2_IRQHandler+0x10>)
 80021d2:	f002 fbb5 	bl	8004940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 80021d6:	bf00      	nop
 80021d8:	bd80      	pop	{r7, pc}
 80021da:	bf00      	nop
 80021dc:	20000ae8 	.word	0x20000ae8

080021e0 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 80021e4:	4802      	ldr	r0, [pc, #8]	; (80021f0 <DMA2_Stream3_IRQHandler+0x10>)
 80021e6:	f002 fbab 	bl	8004940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 80021ea:	bf00      	nop
 80021ec:	bd80      	pop	{r7, pc}
 80021ee:	bf00      	nop
 80021f0:	20000b48 	.word	0x20000b48

080021f4 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 80021f4:	b580      	push	{r7, lr}
 80021f6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 80021f8:	4802      	ldr	r0, [pc, #8]	; (8002204 <DMA2_Stream4_IRQHandler+0x10>)
 80021fa:	f002 fba1 	bl	8004940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 80021fe:	bf00      	nop
 8002200:	bd80      	pop	{r7, pc}
 8002202:	bf00      	nop
 8002204:	20000c68 	.word	0x20000c68

08002208 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8002208:	b580      	push	{r7, lr}
 800220a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 800220c:	4802      	ldr	r0, [pc, #8]	; (8002218 <ETH_IRQHandler+0x10>)
 800220e:	f003 f9a9 	bl	8005564 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8002212:	bf00      	nop
 8002214:	bd80      	pop	{r7, pc}
 8002216:	bf00      	nop
 8002218:	20005eb8 	.word	0x20005eb8

0800221c <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 800221c:	b580      	push	{r7, lr}
 800221e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8002220:	4802      	ldr	r0, [pc, #8]	; (800222c <ETH_WKUP_IRQHandler+0x10>)
 8002222:	f003 f99f 	bl	8005564 <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8002226:	bf00      	nop
 8002228:	bd80      	pop	{r7, pc}
 800222a:	bf00      	nop
 800222c:	20005eb8 	.word	0x20005eb8

08002230 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8002230:	b580      	push	{r7, lr}
 8002232:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8002234:	4802      	ldr	r0, [pc, #8]	; (8002240 <DMA2_Stream5_IRQHandler+0x10>)
 8002236:	f002 fb83 	bl	8004940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 800223a:	bf00      	nop
 800223c:	bd80      	pop	{r7, pc}
 800223e:	bf00      	nop
 8002240:	20001338 	.word	0x20001338

08002244 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8002244:	b580      	push	{r7, lr}
 8002246:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8002248:	4802      	ldr	r0, [pc, #8]	; (8002254 <DMA2_Stream6_IRQHandler+0x10>)
 800224a:	f002 fb79 	bl	8004940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 800224e:	bf00      	nop
 8002250:	bd80      	pop	{r7, pc}
 8002252:	bf00      	nop
 8002254:	20001458 	.word	0x20001458

08002258 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 800225c:	4802      	ldr	r0, [pc, #8]	; (8002268 <DMA2_Stream7_IRQHandler+0x10>)
 800225e:	f002 fb6f 	bl	8004940 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8002262:	bf00      	nop
 8002264:	bd80      	pop	{r7, pc}
 8002266:	bf00      	nop
 8002268:	20001398 	.word	0x20001398

0800226c <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 800226c:	b580      	push	{r7, lr}
 800226e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8002270:	4802      	ldr	r0, [pc, #8]	; (800227c <USART6_IRQHandler+0x10>)
 8002272:	f00a fbb5 	bl	800c9e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	200010d0 	.word	0x200010d0

08002280 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8002280:	b580      	push	{r7, lr}
 8002282:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8002284:	4802      	ldr	r0, [pc, #8]	; (8002290 <I2C3_EV_IRQHandler+0x10>)
 8002286:	f004 ffb9 	bl	80071fc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 800228a:	bf00      	nop
 800228c:	bd80      	pop	{r7, pc}
 800228e:	bf00      	nop
 8002290:	2000078c 	.word	0x2000078c

08002294 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8002294:	b580      	push	{r7, lr}
 8002296:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8002298:	4802      	ldr	r0, [pc, #8]	; (80022a4 <I2C3_ER_IRQHandler+0x10>)
 800229a:	f004 ffc9 	bl	8007230 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 800229e:	bf00      	nop
 80022a0:	bd80      	pop	{r7, pc}
 80022a2:	bf00      	nop
 80022a4:	2000078c 	.word	0x2000078c

080022a8 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 80022a8:	b580      	push	{r7, lr}
 80022aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 80022ac:	4802      	ldr	r0, [pc, #8]	; (80022b8 <UART7_IRQHandler+0x10>)
 80022ae:	f00a fb97 	bl	800c9e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 80022b2:	bf00      	nop
 80022b4:	bd80      	pop	{r7, pc}
 80022b6:	bf00      	nop
 80022b8:	20000e28 	.word	0x20000e28

080022bc <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 80022bc:	b580      	push	{r7, lr}
 80022be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 80022c0:	4802      	ldr	r0, [pc, #8]	; (80022cc <UART8_IRQHandler+0x10>)
 80022c2:	f00a fb8d 	bl	800c9e0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 80022c6:	bf00      	nop
 80022c8:	bd80      	pop	{r7, pc}
 80022ca:	bf00      	nop
 80022cc:	20000eb0 	.word	0x20000eb0

080022d0 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 80022d0:	b580      	push	{r7, lr}
 80022d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 80022d4:	4802      	ldr	r0, [pc, #8]	; (80022e0 <SPI4_IRQHandler+0x10>)
 80022d6:	f008 fd35 	bl	800ad44 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 80022da:	bf00      	nop
 80022dc:	bd80      	pop	{r7, pc}
 80022de:	bf00      	nop
 80022e0:	20000a20 	.word	0x20000a20

080022e4 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 80022e8:	4802      	ldr	r0, [pc, #8]	; (80022f4 <I2C4_EV_IRQHandler+0x10>)
 80022ea:	f004 ff87 	bl	80071fc <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 80022ee:	bf00      	nop
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	200007e0 	.word	0x200007e0

080022f8 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 80022fc:	4802      	ldr	r0, [pc, #8]	; (8002308 <I2C4_ER_IRQHandler+0x10>)
 80022fe:	f004 ff97 	bl	8007230 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 8002302:	bf00      	nop
 8002304:	bd80      	pop	{r7, pc}
 8002306:	bf00      	nop
 8002308:	200007e0 	.word	0x200007e0

0800230c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800230c:	b480      	push	{r7}
 800230e:	af00      	add	r7, sp, #0
  return 1;
 8002310:	2301      	movs	r3, #1
}
 8002312:	4618      	mov	r0, r3
 8002314:	46bd      	mov	sp, r7
 8002316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800231a:	4770      	bx	lr

0800231c <_kill>:

int _kill(int pid, int sig)
{
 800231c:	b480      	push	{r7}
 800231e:	b083      	sub	sp, #12
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
 8002324:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002326:	4b05      	ldr	r3, [pc, #20]	; (800233c <_kill+0x20>)
 8002328:	2216      	movs	r2, #22
 800232a:	601a      	str	r2, [r3, #0]
  return -1;
 800232c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002330:	4618      	mov	r0, r3
 8002332:	370c      	adds	r7, #12
 8002334:	46bd      	mov	sp, r7
 8002336:	f85d 7b04 	ldr.w	r7, [sp], #4
 800233a:	4770      	bx	lr
 800233c:	20024360 	.word	0x20024360

08002340 <_exit>:

void _exit (int status)
{
 8002340:	b580      	push	{r7, lr}
 8002342:	b082      	sub	sp, #8
 8002344:	af00      	add	r7, sp, #0
 8002346:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002348:	f04f 31ff 	mov.w	r1, #4294967295
 800234c:	6878      	ldr	r0, [r7, #4]
 800234e:	f7ff ffe5 	bl	800231c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002352:	e7fe      	b.n	8002352 <_exit+0x12>

08002354 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002354:	b580      	push	{r7, lr}
 8002356:	b086      	sub	sp, #24
 8002358:	af00      	add	r7, sp, #0
 800235a:	60f8      	str	r0, [r7, #12]
 800235c:	60b9      	str	r1, [r7, #8]
 800235e:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002360:	2300      	movs	r3, #0
 8002362:	617b      	str	r3, [r7, #20]
 8002364:	e00a      	b.n	800237c <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002366:	f3af 8000 	nop.w
 800236a:	4601      	mov	r1, r0
 800236c:	68bb      	ldr	r3, [r7, #8]
 800236e:	1c5a      	adds	r2, r3, #1
 8002370:	60ba      	str	r2, [r7, #8]
 8002372:	b2ca      	uxtb	r2, r1
 8002374:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002376:	697b      	ldr	r3, [r7, #20]
 8002378:	3301      	adds	r3, #1
 800237a:	617b      	str	r3, [r7, #20]
 800237c:	697a      	ldr	r2, [r7, #20]
 800237e:	687b      	ldr	r3, [r7, #4]
 8002380:	429a      	cmp	r2, r3
 8002382:	dbf0      	blt.n	8002366 <_read+0x12>
  }

  return len;
 8002384:	687b      	ldr	r3, [r7, #4]
}
 8002386:	4618      	mov	r0, r3
 8002388:	3718      	adds	r7, #24
 800238a:	46bd      	mov	sp, r7
 800238c:	bd80      	pop	{r7, pc}

0800238e <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800238e:	b580      	push	{r7, lr}
 8002390:	b086      	sub	sp, #24
 8002392:	af00      	add	r7, sp, #0
 8002394:	60f8      	str	r0, [r7, #12]
 8002396:	60b9      	str	r1, [r7, #8]
 8002398:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800239a:	2300      	movs	r3, #0
 800239c:	617b      	str	r3, [r7, #20]
 800239e:	e009      	b.n	80023b4 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80023a0:	68bb      	ldr	r3, [r7, #8]
 80023a2:	1c5a      	adds	r2, r3, #1
 80023a4:	60ba      	str	r2, [r7, #8]
 80023a6:	781b      	ldrb	r3, [r3, #0]
 80023a8:	4618      	mov	r0, r3
 80023aa:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80023ae:	697b      	ldr	r3, [r7, #20]
 80023b0:	3301      	adds	r3, #1
 80023b2:	617b      	str	r3, [r7, #20]
 80023b4:	697a      	ldr	r2, [r7, #20]
 80023b6:	687b      	ldr	r3, [r7, #4]
 80023b8:	429a      	cmp	r2, r3
 80023ba:	dbf1      	blt.n	80023a0 <_write+0x12>
  }
  return len;
 80023bc:	687b      	ldr	r3, [r7, #4]
}
 80023be:	4618      	mov	r0, r3
 80023c0:	3718      	adds	r7, #24
 80023c2:	46bd      	mov	sp, r7
 80023c4:	bd80      	pop	{r7, pc}

080023c6 <_close>:

int _close(int file)
{
 80023c6:	b480      	push	{r7}
 80023c8:	b083      	sub	sp, #12
 80023ca:	af00      	add	r7, sp, #0
 80023cc:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80023ce:	f04f 33ff 	mov.w	r3, #4294967295
}
 80023d2:	4618      	mov	r0, r3
 80023d4:	370c      	adds	r7, #12
 80023d6:	46bd      	mov	sp, r7
 80023d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023dc:	4770      	bx	lr

080023de <_fstat>:


int _fstat(int file, struct stat *st)
{
 80023de:	b480      	push	{r7}
 80023e0:	b083      	sub	sp, #12
 80023e2:	af00      	add	r7, sp, #0
 80023e4:	6078      	str	r0, [r7, #4]
 80023e6:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 80023e8:	683b      	ldr	r3, [r7, #0]
 80023ea:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80023ee:	605a      	str	r2, [r3, #4]
  return 0;
 80023f0:	2300      	movs	r3, #0
}
 80023f2:	4618      	mov	r0, r3
 80023f4:	370c      	adds	r7, #12
 80023f6:	46bd      	mov	sp, r7
 80023f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023fc:	4770      	bx	lr

080023fe <_isatty>:

int _isatty(int file)
{
 80023fe:	b480      	push	{r7}
 8002400:	b083      	sub	sp, #12
 8002402:	af00      	add	r7, sp, #0
 8002404:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002406:	2301      	movs	r3, #1
}
 8002408:	4618      	mov	r0, r3
 800240a:	370c      	adds	r7, #12
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002414:	b480      	push	{r7}
 8002416:	b085      	sub	sp, #20
 8002418:	af00      	add	r7, sp, #0
 800241a:	60f8      	str	r0, [r7, #12]
 800241c:	60b9      	str	r1, [r7, #8]
 800241e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002420:	2300      	movs	r3, #0
}
 8002422:	4618      	mov	r0, r3
 8002424:	3714      	adds	r7, #20
 8002426:	46bd      	mov	sp, r7
 8002428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800242c:	4770      	bx	lr
	...

08002430 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002430:	b480      	push	{r7}
 8002432:	b087      	sub	sp, #28
 8002434:	af00      	add	r7, sp, #0
 8002436:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002438:	4a14      	ldr	r2, [pc, #80]	; (800248c <_sbrk+0x5c>)
 800243a:	4b15      	ldr	r3, [pc, #84]	; (8002490 <_sbrk+0x60>)
 800243c:	1ad3      	subs	r3, r2, r3
 800243e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002440:	697b      	ldr	r3, [r7, #20]
 8002442:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002444:	4b13      	ldr	r3, [pc, #76]	; (8002494 <_sbrk+0x64>)
 8002446:	681b      	ldr	r3, [r3, #0]
 8002448:	2b00      	cmp	r3, #0
 800244a:	d102      	bne.n	8002452 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800244c:	4b11      	ldr	r3, [pc, #68]	; (8002494 <_sbrk+0x64>)
 800244e:	4a12      	ldr	r2, [pc, #72]	; (8002498 <_sbrk+0x68>)
 8002450:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002452:	4b10      	ldr	r3, [pc, #64]	; (8002494 <_sbrk+0x64>)
 8002454:	681a      	ldr	r2, [r3, #0]
 8002456:	687b      	ldr	r3, [r7, #4]
 8002458:	4413      	add	r3, r2
 800245a:	693a      	ldr	r2, [r7, #16]
 800245c:	429a      	cmp	r2, r3
 800245e:	d205      	bcs.n	800246c <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8002460:	4b0e      	ldr	r3, [pc, #56]	; (800249c <_sbrk+0x6c>)
 8002462:	220c      	movs	r2, #12
 8002464:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002466:	f04f 33ff 	mov.w	r3, #4294967295
 800246a:	e009      	b.n	8002480 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 800246c:	4b09      	ldr	r3, [pc, #36]	; (8002494 <_sbrk+0x64>)
 800246e:	681b      	ldr	r3, [r3, #0]
 8002470:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002472:	4b08      	ldr	r3, [pc, #32]	; (8002494 <_sbrk+0x64>)
 8002474:	681a      	ldr	r2, [r3, #0]
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4413      	add	r3, r2
 800247a:	4a06      	ldr	r2, [pc, #24]	; (8002494 <_sbrk+0x64>)
 800247c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800247e:	68fb      	ldr	r3, [r7, #12]
}
 8002480:	4618      	mov	r0, r3
 8002482:	371c      	adds	r7, #28
 8002484:	46bd      	mov	sp, r7
 8002486:	f85d 7b04 	ldr.w	r7, [sp], #4
 800248a:	4770      	bx	lr
 800248c:	20050000 	.word	0x20050000
 8002490:	00000400 	.word	0x00000400
 8002494:	20000d14 	.word	0x20000d14
 8002498:	20024370 	.word	0x20024370
 800249c:	20024360 	.word	0x20024360

080024a0 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80024a0:	b480      	push	{r7}
 80024a2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80024a4:	4b06      	ldr	r3, [pc, #24]	; (80024c0 <SystemInit+0x20>)
 80024a6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80024aa:	4a05      	ldr	r2, [pc, #20]	; (80024c0 <SystemInit+0x20>)
 80024ac:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80024b0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80024b4:	bf00      	nop
 80024b6:	46bd      	mov	sp, r7
 80024b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80024bc:	4770      	bx	lr
 80024be:	bf00      	nop
 80024c0:	e000ed00 	.word	0xe000ed00

080024c4 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart6_rx;
DMA_HandleTypeDef hdma_usart6_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 80024c8:	4b14      	ldr	r3, [pc, #80]	; (800251c <MX_UART4_Init+0x58>)
 80024ca:	4a15      	ldr	r2, [pc, #84]	; (8002520 <MX_UART4_Init+0x5c>)
 80024cc:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 80024ce:	4b13      	ldr	r3, [pc, #76]	; (800251c <MX_UART4_Init+0x58>)
 80024d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024d4:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 80024d6:	4b11      	ldr	r3, [pc, #68]	; (800251c <MX_UART4_Init+0x58>)
 80024d8:	2200      	movs	r2, #0
 80024da:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 80024dc:	4b0f      	ldr	r3, [pc, #60]	; (800251c <MX_UART4_Init+0x58>)
 80024de:	2200      	movs	r2, #0
 80024e0:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 80024e2:	4b0e      	ldr	r3, [pc, #56]	; (800251c <MX_UART4_Init+0x58>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 80024e8:	4b0c      	ldr	r3, [pc, #48]	; (800251c <MX_UART4_Init+0x58>)
 80024ea:	220c      	movs	r2, #12
 80024ec:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ee:	4b0b      	ldr	r3, [pc, #44]	; (800251c <MX_UART4_Init+0x58>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 80024f4:	4b09      	ldr	r3, [pc, #36]	; (800251c <MX_UART4_Init+0x58>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024fa:	4b08      	ldr	r3, [pc, #32]	; (800251c <MX_UART4_Init+0x58>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002500:	4b06      	ldr	r3, [pc, #24]	; (800251c <MX_UART4_Init+0x58>)
 8002502:	2200      	movs	r2, #0
 8002504:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002506:	4805      	ldr	r0, [pc, #20]	; (800251c <MX_UART4_Init+0x58>)
 8002508:	f009 ff94 	bl	800c434 <HAL_UART_Init>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8002512:	f7ff f8b7 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	20000d18 	.word	0x20000d18
 8002520:	40004c00 	.word	0x40004c00

08002524 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002528:	4b14      	ldr	r3, [pc, #80]	; (800257c <MX_UART5_Init+0x58>)
 800252a:	4a15      	ldr	r2, [pc, #84]	; (8002580 <MX_UART5_Init+0x5c>)
 800252c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800252e:	4b13      	ldr	r3, [pc, #76]	; (800257c <MX_UART5_Init+0x58>)
 8002530:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002534:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002536:	4b11      	ldr	r3, [pc, #68]	; (800257c <MX_UART5_Init+0x58>)
 8002538:	2200      	movs	r2, #0
 800253a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800253c:	4b0f      	ldr	r3, [pc, #60]	; (800257c <MX_UART5_Init+0x58>)
 800253e:	2200      	movs	r2, #0
 8002540:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8002542:	4b0e      	ldr	r3, [pc, #56]	; (800257c <MX_UART5_Init+0x58>)
 8002544:	2200      	movs	r2, #0
 8002546:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8002548:	4b0c      	ldr	r3, [pc, #48]	; (800257c <MX_UART5_Init+0x58>)
 800254a:	220c      	movs	r2, #12
 800254c:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800254e:	4b0b      	ldr	r3, [pc, #44]	; (800257c <MX_UART5_Init+0x58>)
 8002550:	2200      	movs	r2, #0
 8002552:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8002554:	4b09      	ldr	r3, [pc, #36]	; (800257c <MX_UART5_Init+0x58>)
 8002556:	2200      	movs	r2, #0
 8002558:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800255a:	4b08      	ldr	r3, [pc, #32]	; (800257c <MX_UART5_Init+0x58>)
 800255c:	2200      	movs	r2, #0
 800255e:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002560:	4b06      	ldr	r3, [pc, #24]	; (800257c <MX_UART5_Init+0x58>)
 8002562:	2200      	movs	r2, #0
 8002564:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8002566:	4805      	ldr	r0, [pc, #20]	; (800257c <MX_UART5_Init+0x58>)
 8002568:	f009 ff64 	bl	800c434 <HAL_UART_Init>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 8002572:	f7ff f887 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8002576:	bf00      	nop
 8002578:	bd80      	pop	{r7, pc}
 800257a:	bf00      	nop
 800257c:	20000da0 	.word	0x20000da0
 8002580:	40005000 	.word	0x40005000

08002584 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 8002584:	b580      	push	{r7, lr}
 8002586:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 8002588:	4b14      	ldr	r3, [pc, #80]	; (80025dc <MX_UART7_Init+0x58>)
 800258a:	4a15      	ldr	r2, [pc, #84]	; (80025e0 <MX_UART7_Init+0x5c>)
 800258c:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 800258e:	4b13      	ldr	r3, [pc, #76]	; (80025dc <MX_UART7_Init+0x58>)
 8002590:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002594:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 8002596:	4b11      	ldr	r3, [pc, #68]	; (80025dc <MX_UART7_Init+0x58>)
 8002598:	2200      	movs	r2, #0
 800259a:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 800259c:	4b0f      	ldr	r3, [pc, #60]	; (80025dc <MX_UART7_Init+0x58>)
 800259e:	2200      	movs	r2, #0
 80025a0:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 80025a2:	4b0e      	ldr	r3, [pc, #56]	; (80025dc <MX_UART7_Init+0x58>)
 80025a4:	2200      	movs	r2, #0
 80025a6:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 80025a8:	4b0c      	ldr	r3, [pc, #48]	; (80025dc <MX_UART7_Init+0x58>)
 80025aa:	220c      	movs	r2, #12
 80025ac:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80025ae:	4b0b      	ldr	r3, [pc, #44]	; (80025dc <MX_UART7_Init+0x58>)
 80025b0:	2200      	movs	r2, #0
 80025b2:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 80025b4:	4b09      	ldr	r3, [pc, #36]	; (80025dc <MX_UART7_Init+0x58>)
 80025b6:	2200      	movs	r2, #0
 80025b8:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80025ba:	4b08      	ldr	r3, [pc, #32]	; (80025dc <MX_UART7_Init+0x58>)
 80025bc:	2200      	movs	r2, #0
 80025be:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80025c0:	4b06      	ldr	r3, [pc, #24]	; (80025dc <MX_UART7_Init+0x58>)
 80025c2:	2200      	movs	r2, #0
 80025c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 80025c6:	4805      	ldr	r0, [pc, #20]	; (80025dc <MX_UART7_Init+0x58>)
 80025c8:	f009 ff34 	bl	800c434 <HAL_UART_Init>
 80025cc:	4603      	mov	r3, r0
 80025ce:	2b00      	cmp	r3, #0
 80025d0:	d001      	beq.n	80025d6 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 80025d2:	f7ff f857 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 80025d6:	bf00      	nop
 80025d8:	bd80      	pop	{r7, pc}
 80025da:	bf00      	nop
 80025dc:	20000e28 	.word	0x20000e28
 80025e0:	40007800 	.word	0x40007800

080025e4 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 80025e4:	b580      	push	{r7, lr}
 80025e6:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 80025e8:	4b14      	ldr	r3, [pc, #80]	; (800263c <MX_UART8_Init+0x58>)
 80025ea:	4a15      	ldr	r2, [pc, #84]	; (8002640 <MX_UART8_Init+0x5c>)
 80025ec:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 80025ee:	4b13      	ldr	r3, [pc, #76]	; (800263c <MX_UART8_Init+0x58>)
 80025f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80025f4:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 80025f6:	4b11      	ldr	r3, [pc, #68]	; (800263c <MX_UART8_Init+0x58>)
 80025f8:	2200      	movs	r2, #0
 80025fa:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 80025fc:	4b0f      	ldr	r3, [pc, #60]	; (800263c <MX_UART8_Init+0x58>)
 80025fe:	2200      	movs	r2, #0
 8002600:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8002602:	4b0e      	ldr	r3, [pc, #56]	; (800263c <MX_UART8_Init+0x58>)
 8002604:	2200      	movs	r2, #0
 8002606:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8002608:	4b0c      	ldr	r3, [pc, #48]	; (800263c <MX_UART8_Init+0x58>)
 800260a:	220c      	movs	r2, #12
 800260c:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800260e:	4b0b      	ldr	r3, [pc, #44]	; (800263c <MX_UART8_Init+0x58>)
 8002610:	2200      	movs	r2, #0
 8002612:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8002614:	4b09      	ldr	r3, [pc, #36]	; (800263c <MX_UART8_Init+0x58>)
 8002616:	2200      	movs	r2, #0
 8002618:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800261a:	4b08      	ldr	r3, [pc, #32]	; (800263c <MX_UART8_Init+0x58>)
 800261c:	2200      	movs	r2, #0
 800261e:	621a      	str	r2, [r3, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002620:	4b06      	ldr	r3, [pc, #24]	; (800263c <MX_UART8_Init+0x58>)
 8002622:	2200      	movs	r2, #0
 8002624:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8002626:	4805      	ldr	r0, [pc, #20]	; (800263c <MX_UART8_Init+0x58>)
 8002628:	f009 ff04 	bl	800c434 <HAL_UART_Init>
 800262c:	4603      	mov	r3, r0
 800262e:	2b00      	cmp	r3, #0
 8002630:	d001      	beq.n	8002636 <MX_UART8_Init+0x52>
  {
    Error_Handler();
 8002632:	f7ff f827 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8002636:	bf00      	nop
 8002638:	bd80      	pop	{r7, pc}
 800263a:	bf00      	nop
 800263c:	20000eb0 	.word	0x20000eb0
 8002640:	40007c00 	.word	0x40007c00

08002644 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 8002644:	b580      	push	{r7, lr}
 8002646:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 8002648:	4b14      	ldr	r3, [pc, #80]	; (800269c <MX_USART1_UART_Init+0x58>)
 800264a:	4a15      	ldr	r2, [pc, #84]	; (80026a0 <MX_USART1_UART_Init+0x5c>)
 800264c:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800264e:	4b13      	ldr	r3, [pc, #76]	; (800269c <MX_USART1_UART_Init+0x58>)
 8002650:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002654:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 8002656:	4b11      	ldr	r3, [pc, #68]	; (800269c <MX_USART1_UART_Init+0x58>)
 8002658:	2200      	movs	r2, #0
 800265a:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800265c:	4b0f      	ldr	r3, [pc, #60]	; (800269c <MX_USART1_UART_Init+0x58>)
 800265e:	2200      	movs	r2, #0
 8002660:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 8002662:	4b0e      	ldr	r3, [pc, #56]	; (800269c <MX_USART1_UART_Init+0x58>)
 8002664:	2200      	movs	r2, #0
 8002666:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 8002668:	4b0c      	ldr	r3, [pc, #48]	; (800269c <MX_USART1_UART_Init+0x58>)
 800266a:	220c      	movs	r2, #12
 800266c:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800266e:	4b0b      	ldr	r3, [pc, #44]	; (800269c <MX_USART1_UART_Init+0x58>)
 8002670:	2200      	movs	r2, #0
 8002672:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 8002674:	4b09      	ldr	r3, [pc, #36]	; (800269c <MX_USART1_UART_Init+0x58>)
 8002676:	2200      	movs	r2, #0
 8002678:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800267a:	4b08      	ldr	r3, [pc, #32]	; (800269c <MX_USART1_UART_Init+0x58>)
 800267c:	2200      	movs	r2, #0
 800267e:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002680:	4b06      	ldr	r3, [pc, #24]	; (800269c <MX_USART1_UART_Init+0x58>)
 8002682:	2200      	movs	r2, #0
 8002684:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 8002686:	4805      	ldr	r0, [pc, #20]	; (800269c <MX_USART1_UART_Init+0x58>)
 8002688:	f009 fed4 	bl	800c434 <HAL_UART_Init>
 800268c:	4603      	mov	r3, r0
 800268e:	2b00      	cmp	r3, #0
 8002690:	d001      	beq.n	8002696 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 8002692:	f7fe fff7 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 8002696:	bf00      	nop
 8002698:	bd80      	pop	{r7, pc}
 800269a:	bf00      	nop
 800269c:	20000f38 	.word	0x20000f38
 80026a0:	40011000 	.word	0x40011000

080026a4 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 80026a4:	b580      	push	{r7, lr}
 80026a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80026a8:	4b14      	ldr	r3, [pc, #80]	; (80026fc <MX_USART2_UART_Init+0x58>)
 80026aa:	4a15      	ldr	r2, [pc, #84]	; (8002700 <MX_USART2_UART_Init+0x5c>)
 80026ac:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80026ae:	4b13      	ldr	r3, [pc, #76]	; (80026fc <MX_USART2_UART_Init+0x58>)
 80026b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80026b4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80026b6:	4b11      	ldr	r3, [pc, #68]	; (80026fc <MX_USART2_UART_Init+0x58>)
 80026b8:	2200      	movs	r2, #0
 80026ba:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80026bc:	4b0f      	ldr	r3, [pc, #60]	; (80026fc <MX_USART2_UART_Init+0x58>)
 80026be:	2200      	movs	r2, #0
 80026c0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80026c2:	4b0e      	ldr	r3, [pc, #56]	; (80026fc <MX_USART2_UART_Init+0x58>)
 80026c4:	2200      	movs	r2, #0
 80026c6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80026c8:	4b0c      	ldr	r3, [pc, #48]	; (80026fc <MX_USART2_UART_Init+0x58>)
 80026ca:	220c      	movs	r2, #12
 80026cc:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80026ce:	4b0b      	ldr	r3, [pc, #44]	; (80026fc <MX_USART2_UART_Init+0x58>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80026d4:	4b09      	ldr	r3, [pc, #36]	; (80026fc <MX_USART2_UART_Init+0x58>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80026da:	4b08      	ldr	r3, [pc, #32]	; (80026fc <MX_USART2_UART_Init+0x58>)
 80026dc:	2200      	movs	r2, #0
 80026de:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80026e0:	4b06      	ldr	r3, [pc, #24]	; (80026fc <MX_USART2_UART_Init+0x58>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80026e6:	4805      	ldr	r0, [pc, #20]	; (80026fc <MX_USART2_UART_Init+0x58>)
 80026e8:	f009 fea4 	bl	800c434 <HAL_UART_Init>
 80026ec:	4603      	mov	r3, r0
 80026ee:	2b00      	cmp	r3, #0
 80026f0:	d001      	beq.n	80026f6 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 80026f2:	f7fe ffc7 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80026f6:	bf00      	nop
 80026f8:	bd80      	pop	{r7, pc}
 80026fa:	bf00      	nop
 80026fc:	20000fc0 	.word	0x20000fc0
 8002700:	40004400 	.word	0x40004400

08002704 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002704:	b580      	push	{r7, lr}
 8002706:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002708:	4b14      	ldr	r3, [pc, #80]	; (800275c <MX_USART3_UART_Init+0x58>)
 800270a:	4a15      	ldr	r2, [pc, #84]	; (8002760 <MX_USART3_UART_Init+0x5c>)
 800270c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800270e:	4b13      	ldr	r3, [pc, #76]	; (800275c <MX_USART3_UART_Init+0x58>)
 8002710:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002714:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002716:	4b11      	ldr	r3, [pc, #68]	; (800275c <MX_USART3_UART_Init+0x58>)
 8002718:	2200      	movs	r2, #0
 800271a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800271c:	4b0f      	ldr	r3, [pc, #60]	; (800275c <MX_USART3_UART_Init+0x58>)
 800271e:	2200      	movs	r2, #0
 8002720:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002722:	4b0e      	ldr	r3, [pc, #56]	; (800275c <MX_USART3_UART_Init+0x58>)
 8002724:	2200      	movs	r2, #0
 8002726:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002728:	4b0c      	ldr	r3, [pc, #48]	; (800275c <MX_USART3_UART_Init+0x58>)
 800272a:	220c      	movs	r2, #12
 800272c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800272e:	4b0b      	ldr	r3, [pc, #44]	; (800275c <MX_USART3_UART_Init+0x58>)
 8002730:	2200      	movs	r2, #0
 8002732:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002734:	4b09      	ldr	r3, [pc, #36]	; (800275c <MX_USART3_UART_Init+0x58>)
 8002736:	2200      	movs	r2, #0
 8002738:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800273a:	4b08      	ldr	r3, [pc, #32]	; (800275c <MX_USART3_UART_Init+0x58>)
 800273c:	2200      	movs	r2, #0
 800273e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002740:	4b06      	ldr	r3, [pc, #24]	; (800275c <MX_USART3_UART_Init+0x58>)
 8002742:	2200      	movs	r2, #0
 8002744:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8002746:	4805      	ldr	r0, [pc, #20]	; (800275c <MX_USART3_UART_Init+0x58>)
 8002748:	f009 fe74 	bl	800c434 <HAL_UART_Init>
 800274c:	4603      	mov	r3, r0
 800274e:	2b00      	cmp	r3, #0
 8002750:	d001      	beq.n	8002756 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 8002752:	f7fe ff97 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 8002756:	bf00      	nop
 8002758:	bd80      	pop	{r7, pc}
 800275a:	bf00      	nop
 800275c:	20001048 	.word	0x20001048
 8002760:	40004800 	.word	0x40004800

08002764 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 8002764:	b580      	push	{r7, lr}
 8002766:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8002768:	4b14      	ldr	r3, [pc, #80]	; (80027bc <MX_USART6_UART_Init+0x58>)
 800276a:	4a15      	ldr	r2, [pc, #84]	; (80027c0 <MX_USART6_UART_Init+0x5c>)
 800276c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800276e:	4b13      	ldr	r3, [pc, #76]	; (80027bc <MX_USART6_UART_Init+0x58>)
 8002770:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002774:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8002776:	4b11      	ldr	r3, [pc, #68]	; (80027bc <MX_USART6_UART_Init+0x58>)
 8002778:	2200      	movs	r2, #0
 800277a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800277c:	4b0f      	ldr	r3, [pc, #60]	; (80027bc <MX_USART6_UART_Init+0x58>)
 800277e:	2200      	movs	r2, #0
 8002780:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8002782:	4b0e      	ldr	r3, [pc, #56]	; (80027bc <MX_USART6_UART_Init+0x58>)
 8002784:	2200      	movs	r2, #0
 8002786:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8002788:	4b0c      	ldr	r3, [pc, #48]	; (80027bc <MX_USART6_UART_Init+0x58>)
 800278a:	220c      	movs	r2, #12
 800278c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800278e:	4b0b      	ldr	r3, [pc, #44]	; (80027bc <MX_USART6_UART_Init+0x58>)
 8002790:	2200      	movs	r2, #0
 8002792:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8002794:	4b09      	ldr	r3, [pc, #36]	; (80027bc <MX_USART6_UART_Init+0x58>)
 8002796:	2200      	movs	r2, #0
 8002798:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800279a:	4b08      	ldr	r3, [pc, #32]	; (80027bc <MX_USART6_UART_Init+0x58>)
 800279c:	2200      	movs	r2, #0
 800279e:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80027a0:	4b06      	ldr	r3, [pc, #24]	; (80027bc <MX_USART6_UART_Init+0x58>)
 80027a2:	2200      	movs	r2, #0
 80027a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80027a6:	4805      	ldr	r0, [pc, #20]	; (80027bc <MX_USART6_UART_Init+0x58>)
 80027a8:	f009 fe44 	bl	800c434 <HAL_UART_Init>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d001      	beq.n	80027b6 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 80027b2:	f7fe ff67 	bl	8001684 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80027b6:	bf00      	nop
 80027b8:	bd80      	pop	{r7, pc}
 80027ba:	bf00      	nop
 80027bc:	200010d0 	.word	0x200010d0
 80027c0:	40011400 	.word	0x40011400

080027c4 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 80027c4:	b580      	push	{r7, lr}
 80027c6:	b0bc      	sub	sp, #240	; 0xf0
 80027c8:	af00      	add	r7, sp, #0
 80027ca:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027cc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80027d0:	2200      	movs	r2, #0
 80027d2:	601a      	str	r2, [r3, #0]
 80027d4:	605a      	str	r2, [r3, #4]
 80027d6:	609a      	str	r2, [r3, #8]
 80027d8:	60da      	str	r2, [r3, #12]
 80027da:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 80027dc:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80027e0:	2284      	movs	r2, #132	; 0x84
 80027e2:	2100      	movs	r1, #0
 80027e4:	4618      	mov	r0, r3
 80027e6:	f01b fb10 	bl	801de0a <memset>
  if(uartHandle->Instance==UART4)
 80027ea:	687b      	ldr	r3, [r7, #4]
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4a64      	ldr	r2, [pc, #400]	; (8002980 <HAL_UART_MspInit+0x1bc>)
 80027f0:	4293      	cmp	r3, r2
 80027f2:	f040 80d5 	bne.w	80029a0 <HAL_UART_MspInit+0x1dc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 80027f6:	f44f 7300 	mov.w	r3, #512	; 0x200
 80027fa:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 80027fc:	2300      	movs	r3, #0
 80027fe:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002802:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002806:	4618      	mov	r0, r3
 8002808:	f006 ff8a 	bl	8009720 <HAL_RCCEx_PeriphCLKConfig>
 800280c:	4603      	mov	r3, r0
 800280e:	2b00      	cmp	r3, #0
 8002810:	d001      	beq.n	8002816 <HAL_UART_MspInit+0x52>
    {
      Error_Handler();
 8002812:	f7fe ff37 	bl	8001684 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002816:	4b5b      	ldr	r3, [pc, #364]	; (8002984 <HAL_UART_MspInit+0x1c0>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	4a5a      	ldr	r2, [pc, #360]	; (8002984 <HAL_UART_MspInit+0x1c0>)
 800281c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002820:	6413      	str	r3, [r2, #64]	; 0x40
 8002822:	4b58      	ldr	r3, [pc, #352]	; (8002984 <HAL_UART_MspInit+0x1c0>)
 8002824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002826:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800282a:	657b      	str	r3, [r7, #84]	; 0x54
 800282c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800282e:	4b55      	ldr	r3, [pc, #340]	; (8002984 <HAL_UART_MspInit+0x1c0>)
 8002830:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002832:	4a54      	ldr	r2, [pc, #336]	; (8002984 <HAL_UART_MspInit+0x1c0>)
 8002834:	f043 0301 	orr.w	r3, r3, #1
 8002838:	6313      	str	r3, [r2, #48]	; 0x30
 800283a:	4b52      	ldr	r3, [pc, #328]	; (8002984 <HAL_UART_MspInit+0x1c0>)
 800283c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800283e:	f003 0301 	and.w	r3, r3, #1
 8002842:	653b      	str	r3, [r7, #80]	; 0x50
 8002844:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002846:	4b4f      	ldr	r3, [pc, #316]	; (8002984 <HAL_UART_MspInit+0x1c0>)
 8002848:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800284a:	4a4e      	ldr	r2, [pc, #312]	; (8002984 <HAL_UART_MspInit+0x1c0>)
 800284c:	f043 0304 	orr.w	r3, r3, #4
 8002850:	6313      	str	r3, [r2, #48]	; 0x30
 8002852:	4b4c      	ldr	r3, [pc, #304]	; (8002984 <HAL_UART_MspInit+0x1c0>)
 8002854:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002856:	f003 0304 	and.w	r3, r3, #4
 800285a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800285c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800285e:	2301      	movs	r3, #1
 8002860:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002864:	2302      	movs	r3, #2
 8002866:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800286a:	2301      	movs	r3, #1
 800286c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002870:	2303      	movs	r3, #3
 8002872:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002876:	2308      	movs	r3, #8
 8002878:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800287c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002880:	4619      	mov	r1, r3
 8002882:	4841      	ldr	r0, [pc, #260]	; (8002988 <HAL_UART_MspInit+0x1c4>)
 8002884:	f004 f836 	bl	80068f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 8002888:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800288c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002890:	2302      	movs	r3, #2
 8002892:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002896:	2301      	movs	r3, #1
 8002898:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800289c:	2303      	movs	r3, #3
 800289e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80028a2:	2308      	movs	r3, #8
 80028a4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80028a8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80028ac:	4619      	mov	r1, r3
 80028ae:	4837      	ldr	r0, [pc, #220]	; (800298c <HAL_UART_MspInit+0x1c8>)
 80028b0:	f004 f820 	bl	80068f4 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 80028b4:	4b36      	ldr	r3, [pc, #216]	; (8002990 <HAL_UART_MspInit+0x1cc>)
 80028b6:	4a37      	ldr	r2, [pc, #220]	; (8002994 <HAL_UART_MspInit+0x1d0>)
 80028b8:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 80028ba:	4b35      	ldr	r3, [pc, #212]	; (8002990 <HAL_UART_MspInit+0x1cc>)
 80028bc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80028c0:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80028c2:	4b33      	ldr	r3, [pc, #204]	; (8002990 <HAL_UART_MspInit+0x1cc>)
 80028c4:	2240      	movs	r2, #64	; 0x40
 80028c6:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80028c8:	4b31      	ldr	r3, [pc, #196]	; (8002990 <HAL_UART_MspInit+0x1cc>)
 80028ca:	2200      	movs	r2, #0
 80028cc:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 80028ce:	4b30      	ldr	r3, [pc, #192]	; (8002990 <HAL_UART_MspInit+0x1cc>)
 80028d0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80028d4:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80028d6:	4b2e      	ldr	r3, [pc, #184]	; (8002990 <HAL_UART_MspInit+0x1cc>)
 80028d8:	2200      	movs	r2, #0
 80028da:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80028dc:	4b2c      	ldr	r3, [pc, #176]	; (8002990 <HAL_UART_MspInit+0x1cc>)
 80028de:	2200      	movs	r2, #0
 80028e0:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 80028e2:	4b2b      	ldr	r3, [pc, #172]	; (8002990 <HAL_UART_MspInit+0x1cc>)
 80028e4:	2200      	movs	r2, #0
 80028e6:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 80028e8:	4b29      	ldr	r3, [pc, #164]	; (8002990 <HAL_UART_MspInit+0x1cc>)
 80028ea:	2200      	movs	r2, #0
 80028ec:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80028ee:	4b28      	ldr	r3, [pc, #160]	; (8002990 <HAL_UART_MspInit+0x1cc>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 80028f4:	4826      	ldr	r0, [pc, #152]	; (8002990 <HAL_UART_MspInit+0x1cc>)
 80028f6:	f001 fe83 	bl	8004600 <HAL_DMA_Init>
 80028fa:	4603      	mov	r3, r0
 80028fc:	2b00      	cmp	r3, #0
 80028fe:	d001      	beq.n	8002904 <HAL_UART_MspInit+0x140>
    {
      Error_Handler();
 8002900:	f7fe fec0 	bl	8001684 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	4a22      	ldr	r2, [pc, #136]	; (8002990 <HAL_UART_MspInit+0x1cc>)
 8002908:	671a      	str	r2, [r3, #112]	; 0x70
 800290a:	4a21      	ldr	r2, [pc, #132]	; (8002990 <HAL_UART_MspInit+0x1cc>)
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8002910:	4b21      	ldr	r3, [pc, #132]	; (8002998 <HAL_UART_MspInit+0x1d4>)
 8002912:	4a22      	ldr	r2, [pc, #136]	; (800299c <HAL_UART_MspInit+0x1d8>)
 8002914:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8002916:	4b20      	ldr	r3, [pc, #128]	; (8002998 <HAL_UART_MspInit+0x1d4>)
 8002918:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800291c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800291e:	4b1e      	ldr	r3, [pc, #120]	; (8002998 <HAL_UART_MspInit+0x1d4>)
 8002920:	2200      	movs	r2, #0
 8002922:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002924:	4b1c      	ldr	r3, [pc, #112]	; (8002998 <HAL_UART_MspInit+0x1d4>)
 8002926:	2200      	movs	r2, #0
 8002928:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800292a:	4b1b      	ldr	r3, [pc, #108]	; (8002998 <HAL_UART_MspInit+0x1d4>)
 800292c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002930:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002932:	4b19      	ldr	r3, [pc, #100]	; (8002998 <HAL_UART_MspInit+0x1d4>)
 8002934:	2200      	movs	r2, #0
 8002936:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002938:	4b17      	ldr	r3, [pc, #92]	; (8002998 <HAL_UART_MspInit+0x1d4>)
 800293a:	2200      	movs	r2, #0
 800293c:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800293e:	4b16      	ldr	r3, [pc, #88]	; (8002998 <HAL_UART_MspInit+0x1d4>)
 8002940:	2200      	movs	r2, #0
 8002942:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002944:	4b14      	ldr	r3, [pc, #80]	; (8002998 <HAL_UART_MspInit+0x1d4>)
 8002946:	2200      	movs	r2, #0
 8002948:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800294a:	4b13      	ldr	r3, [pc, #76]	; (8002998 <HAL_UART_MspInit+0x1d4>)
 800294c:	2200      	movs	r2, #0
 800294e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 8002950:	4811      	ldr	r0, [pc, #68]	; (8002998 <HAL_UART_MspInit+0x1d4>)
 8002952:	f001 fe55 	bl	8004600 <HAL_DMA_Init>
 8002956:	4603      	mov	r3, r0
 8002958:	2b00      	cmp	r3, #0
 800295a:	d001      	beq.n	8002960 <HAL_UART_MspInit+0x19c>
    {
      Error_Handler();
 800295c:	f7fe fe92 	bl	8001684 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 8002960:	687b      	ldr	r3, [r7, #4]
 8002962:	4a0d      	ldr	r2, [pc, #52]	; (8002998 <HAL_UART_MspInit+0x1d4>)
 8002964:	675a      	str	r2, [r3, #116]	; 0x74
 8002966:	4a0c      	ldr	r2, [pc, #48]	; (8002998 <HAL_UART_MspInit+0x1d4>)
 8002968:	687b      	ldr	r3, [r7, #4]
 800296a:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 800296c:	2200      	movs	r2, #0
 800296e:	2105      	movs	r1, #5
 8002970:	2034      	movs	r0, #52	; 0x34
 8002972:	f001 fd1f 	bl	80043b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 8002976:	2034      	movs	r0, #52	; 0x34
 8002978:	f001 fd38 	bl	80043ec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 800297c:	e3f4      	b.n	8003168 <HAL_UART_MspInit+0x9a4>
 800297e:	bf00      	nop
 8002980:	40004c00 	.word	0x40004c00
 8002984:	40023800 	.word	0x40023800
 8002988:	40020000 	.word	0x40020000
 800298c:	40020800 	.word	0x40020800
 8002990:	20001158 	.word	0x20001158
 8002994:	40026070 	.word	0x40026070
 8002998:	200011b8 	.word	0x200011b8
 800299c:	40026040 	.word	0x40026040
  else if(uartHandle->Instance==UART5)
 80029a0:	687b      	ldr	r3, [r7, #4]
 80029a2:	681b      	ldr	r3, [r3, #0]
 80029a4:	4a9a      	ldr	r2, [pc, #616]	; (8002c10 <HAL_UART_MspInit+0x44c>)
 80029a6:	4293      	cmp	r3, r2
 80029a8:	f040 80c4 	bne.w	8002b34 <HAL_UART_MspInit+0x370>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 80029ac:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80029b0:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 80029b2:	2300      	movs	r3, #0
 80029b4:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029b8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80029bc:	4618      	mov	r0, r3
 80029be:	f006 feaf 	bl	8009720 <HAL_RCCEx_PeriphCLKConfig>
 80029c2:	4603      	mov	r3, r0
 80029c4:	2b00      	cmp	r3, #0
 80029c6:	d001      	beq.n	80029cc <HAL_UART_MspInit+0x208>
      Error_Handler();
 80029c8:	f7fe fe5c 	bl	8001684 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 80029cc:	4b91      	ldr	r3, [pc, #580]	; (8002c14 <HAL_UART_MspInit+0x450>)
 80029ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d0:	4a90      	ldr	r2, [pc, #576]	; (8002c14 <HAL_UART_MspInit+0x450>)
 80029d2:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80029d6:	6413      	str	r3, [r2, #64]	; 0x40
 80029d8:	4b8e      	ldr	r3, [pc, #568]	; (8002c14 <HAL_UART_MspInit+0x450>)
 80029da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029dc:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80029e0:	64bb      	str	r3, [r7, #72]	; 0x48
 80029e2:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80029e4:	4b8b      	ldr	r3, [pc, #556]	; (8002c14 <HAL_UART_MspInit+0x450>)
 80029e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e8:	4a8a      	ldr	r2, [pc, #552]	; (8002c14 <HAL_UART_MspInit+0x450>)
 80029ea:	f043 0304 	orr.w	r3, r3, #4
 80029ee:	6313      	str	r3, [r2, #48]	; 0x30
 80029f0:	4b88      	ldr	r3, [pc, #544]	; (8002c14 <HAL_UART_MspInit+0x450>)
 80029f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029f4:	f003 0304 	and.w	r3, r3, #4
 80029f8:	647b      	str	r3, [r7, #68]	; 0x44
 80029fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    __HAL_RCC_GPIOD_CLK_ENABLE();
 80029fc:	4b85      	ldr	r3, [pc, #532]	; (8002c14 <HAL_UART_MspInit+0x450>)
 80029fe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a00:	4a84      	ldr	r2, [pc, #528]	; (8002c14 <HAL_UART_MspInit+0x450>)
 8002a02:	f043 0308 	orr.w	r3, r3, #8
 8002a06:	6313      	str	r3, [r2, #48]	; 0x30
 8002a08:	4b82      	ldr	r3, [pc, #520]	; (8002c14 <HAL_UART_MspInit+0x450>)
 8002a0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0c:	f003 0308 	and.w	r3, r3, #8
 8002a10:	643b      	str	r3, [r7, #64]	; 0x40
 8002a12:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002a14:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002a18:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a1c:	2302      	movs	r3, #2
 8002a1e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a22:	2301      	movs	r3, #1
 8002a24:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a28:	2303      	movs	r3, #3
 8002a2a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002a2e:	2308      	movs	r3, #8
 8002a30:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a34:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002a38:	4619      	mov	r1, r3
 8002a3a:	4877      	ldr	r0, [pc, #476]	; (8002c18 <HAL_UART_MspInit+0x454>)
 8002a3c:	f003 ff5a 	bl	80068f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 8002a40:	2304      	movs	r3, #4
 8002a42:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a46:	2302      	movs	r3, #2
 8002a48:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002a4c:	2301      	movs	r3, #1
 8002a4e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a52:	2303      	movs	r3, #3
 8002a54:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8002a58:	2308      	movs	r3, #8
 8002a5a:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002a5e:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002a62:	4619      	mov	r1, r3
 8002a64:	486d      	ldr	r0, [pc, #436]	; (8002c1c <HAL_UART_MspInit+0x458>)
 8002a66:	f003 ff45 	bl	80068f4 <HAL_GPIO_Init>
    hdma_uart5_tx.Instance = DMA1_Stream7;
 8002a6a:	4b6d      	ldr	r3, [pc, #436]	; (8002c20 <HAL_UART_MspInit+0x45c>)
 8002a6c:	4a6d      	ldr	r2, [pc, #436]	; (8002c24 <HAL_UART_MspInit+0x460>)
 8002a6e:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 8002a70:	4b6b      	ldr	r3, [pc, #428]	; (8002c20 <HAL_UART_MspInit+0x45c>)
 8002a72:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002a76:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002a78:	4b69      	ldr	r3, [pc, #420]	; (8002c20 <HAL_UART_MspInit+0x45c>)
 8002a7a:	2240      	movs	r2, #64	; 0x40
 8002a7c:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a7e:	4b68      	ldr	r3, [pc, #416]	; (8002c20 <HAL_UART_MspInit+0x45c>)
 8002a80:	2200      	movs	r2, #0
 8002a82:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002a84:	4b66      	ldr	r3, [pc, #408]	; (8002c20 <HAL_UART_MspInit+0x45c>)
 8002a86:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a8a:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a8c:	4b64      	ldr	r3, [pc, #400]	; (8002c20 <HAL_UART_MspInit+0x45c>)
 8002a8e:	2200      	movs	r2, #0
 8002a90:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a92:	4b63      	ldr	r3, [pc, #396]	; (8002c20 <HAL_UART_MspInit+0x45c>)
 8002a94:	2200      	movs	r2, #0
 8002a96:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 8002a98:	4b61      	ldr	r3, [pc, #388]	; (8002c20 <HAL_UART_MspInit+0x45c>)
 8002a9a:	2200      	movs	r2, #0
 8002a9c:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002a9e:	4b60      	ldr	r3, [pc, #384]	; (8002c20 <HAL_UART_MspInit+0x45c>)
 8002aa0:	2200      	movs	r2, #0
 8002aa2:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002aa4:	4b5e      	ldr	r3, [pc, #376]	; (8002c20 <HAL_UART_MspInit+0x45c>)
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 8002aaa:	485d      	ldr	r0, [pc, #372]	; (8002c20 <HAL_UART_MspInit+0x45c>)
 8002aac:	f001 fda8 	bl	8004600 <HAL_DMA_Init>
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	2b00      	cmp	r3, #0
 8002ab4:	d001      	beq.n	8002aba <HAL_UART_MspInit+0x2f6>
      Error_Handler();
 8002ab6:	f7fe fde5 	bl	8001684 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 8002aba:	687b      	ldr	r3, [r7, #4]
 8002abc:	4a58      	ldr	r2, [pc, #352]	; (8002c20 <HAL_UART_MspInit+0x45c>)
 8002abe:	671a      	str	r2, [r3, #112]	; 0x70
 8002ac0:	4a57      	ldr	r2, [pc, #348]	; (8002c20 <HAL_UART_MspInit+0x45c>)
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8002ac6:	4b58      	ldr	r3, [pc, #352]	; (8002c28 <HAL_UART_MspInit+0x464>)
 8002ac8:	4a58      	ldr	r2, [pc, #352]	; (8002c2c <HAL_UART_MspInit+0x468>)
 8002aca:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 8002acc:	4b56      	ldr	r3, [pc, #344]	; (8002c28 <HAL_UART_MspInit+0x464>)
 8002ace:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002ad2:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002ad4:	4b54      	ldr	r3, [pc, #336]	; (8002c28 <HAL_UART_MspInit+0x464>)
 8002ad6:	2200      	movs	r2, #0
 8002ad8:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002ada:	4b53      	ldr	r3, [pc, #332]	; (8002c28 <HAL_UART_MspInit+0x464>)
 8002adc:	2200      	movs	r2, #0
 8002ade:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002ae0:	4b51      	ldr	r3, [pc, #324]	; (8002c28 <HAL_UART_MspInit+0x464>)
 8002ae2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ae6:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ae8:	4b4f      	ldr	r3, [pc, #316]	; (8002c28 <HAL_UART_MspInit+0x464>)
 8002aea:	2200      	movs	r2, #0
 8002aec:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002aee:	4b4e      	ldr	r3, [pc, #312]	; (8002c28 <HAL_UART_MspInit+0x464>)
 8002af0:	2200      	movs	r2, #0
 8002af2:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8002af4:	4b4c      	ldr	r3, [pc, #304]	; (8002c28 <HAL_UART_MspInit+0x464>)
 8002af6:	2200      	movs	r2, #0
 8002af8:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002afa:	4b4b      	ldr	r3, [pc, #300]	; (8002c28 <HAL_UART_MspInit+0x464>)
 8002afc:	2200      	movs	r2, #0
 8002afe:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b00:	4b49      	ldr	r3, [pc, #292]	; (8002c28 <HAL_UART_MspInit+0x464>)
 8002b02:	2200      	movs	r2, #0
 8002b04:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002b06:	4848      	ldr	r0, [pc, #288]	; (8002c28 <HAL_UART_MspInit+0x464>)
 8002b08:	f001 fd7a 	bl	8004600 <HAL_DMA_Init>
 8002b0c:	4603      	mov	r3, r0
 8002b0e:	2b00      	cmp	r3, #0
 8002b10:	d001      	beq.n	8002b16 <HAL_UART_MspInit+0x352>
      Error_Handler();
 8002b12:	f7fe fdb7 	bl	8001684 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8002b16:	687b      	ldr	r3, [r7, #4]
 8002b18:	4a43      	ldr	r2, [pc, #268]	; (8002c28 <HAL_UART_MspInit+0x464>)
 8002b1a:	675a      	str	r2, [r3, #116]	; 0x74
 8002b1c:	4a42      	ldr	r2, [pc, #264]	; (8002c28 <HAL_UART_MspInit+0x464>)
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8002b22:	2200      	movs	r2, #0
 8002b24:	2105      	movs	r1, #5
 8002b26:	2035      	movs	r0, #53	; 0x35
 8002b28:	f001 fc44 	bl	80043b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8002b2c:	2035      	movs	r0, #53	; 0x35
 8002b2e:	f001 fc5d 	bl	80043ec <HAL_NVIC_EnableIRQ>
}
 8002b32:	e319      	b.n	8003168 <HAL_UART_MspInit+0x9a4>
  else if(uartHandle->Instance==UART7)
 8002b34:	687b      	ldr	r3, [r7, #4]
 8002b36:	681b      	ldr	r3, [r3, #0]
 8002b38:	4a3d      	ldr	r2, [pc, #244]	; (8002c30 <HAL_UART_MspInit+0x46c>)
 8002b3a:	4293      	cmp	r3, r2
 8002b3c:	d17e      	bne.n	8002c3c <HAL_UART_MspInit+0x478>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 8002b3e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002b42:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 8002b44:	2300      	movs	r3, #0
 8002b46:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002b4a:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f006 fde6 	bl	8009720 <HAL_RCCEx_PeriphCLKConfig>
 8002b54:	4603      	mov	r3, r0
 8002b56:	2b00      	cmp	r3, #0
 8002b58:	d001      	beq.n	8002b5e <HAL_UART_MspInit+0x39a>
      Error_Handler();
 8002b5a:	f7fe fd93 	bl	8001684 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 8002b5e:	4b2d      	ldr	r3, [pc, #180]	; (8002c14 <HAL_UART_MspInit+0x450>)
 8002b60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b62:	4a2c      	ldr	r2, [pc, #176]	; (8002c14 <HAL_UART_MspInit+0x450>)
 8002b64:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 8002b68:	6413      	str	r3, [r2, #64]	; 0x40
 8002b6a:	4b2a      	ldr	r3, [pc, #168]	; (8002c14 <HAL_UART_MspInit+0x450>)
 8002b6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b6e:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 8002b72:	63fb      	str	r3, [r7, #60]	; 0x3c
 8002b74:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8002b76:	4b27      	ldr	r3, [pc, #156]	; (8002c14 <HAL_UART_MspInit+0x450>)
 8002b78:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b7a:	4a26      	ldr	r2, [pc, #152]	; (8002c14 <HAL_UART_MspInit+0x450>)
 8002b7c:	f043 0320 	orr.w	r3, r3, #32
 8002b80:	6313      	str	r3, [r2, #48]	; 0x30
 8002b82:	4b24      	ldr	r3, [pc, #144]	; (8002c14 <HAL_UART_MspInit+0x450>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	f003 0320 	and.w	r3, r3, #32
 8002b8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8002b8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002b8e:	4b21      	ldr	r3, [pc, #132]	; (8002c14 <HAL_UART_MspInit+0x450>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	4a20      	ldr	r2, [pc, #128]	; (8002c14 <HAL_UART_MspInit+0x450>)
 8002b94:	f043 0310 	orr.w	r3, r3, #16
 8002b98:	6313      	str	r3, [r2, #48]	; 0x30
 8002b9a:	4b1e      	ldr	r3, [pc, #120]	; (8002c14 <HAL_UART_MspInit+0x450>)
 8002b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b9e:	f003 0310 	and.w	r3, r3, #16
 8002ba2:	637b      	str	r3, [r7, #52]	; 0x34
 8002ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002ba6:	2340      	movs	r3, #64	; 0x40
 8002ba8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bac:	2302      	movs	r3, #2
 8002bae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bb2:	2300      	movs	r3, #0
 8002bb4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bb8:	2303      	movs	r3, #3
 8002bba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002bbe:	2308      	movs	r3, #8
 8002bc0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002bc4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002bc8:	4619      	mov	r1, r3
 8002bca:	481a      	ldr	r0, [pc, #104]	; (8002c34 <HAL_UART_MspInit+0x470>)
 8002bcc:	f003 fe92 	bl	80068f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002bd0:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002bd4:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bd8:	2302      	movs	r3, #2
 8002bda:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bde:	2300      	movs	r3, #0
 8002be0:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002be4:	2303      	movs	r3, #3
 8002be6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 8002bea:	2308      	movs	r3, #8
 8002bec:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002bf0:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	4810      	ldr	r0, [pc, #64]	; (8002c38 <HAL_UART_MspInit+0x474>)
 8002bf8:	f003 fe7c 	bl	80068f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	2105      	movs	r1, #5
 8002c00:	2052      	movs	r0, #82	; 0x52
 8002c02:	f001 fbd7 	bl	80043b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8002c06:	2052      	movs	r0, #82	; 0x52
 8002c08:	f001 fbf0 	bl	80043ec <HAL_NVIC_EnableIRQ>
}
 8002c0c:	e2ac      	b.n	8003168 <HAL_UART_MspInit+0x9a4>
 8002c0e:	bf00      	nop
 8002c10:	40005000 	.word	0x40005000
 8002c14:	40023800 	.word	0x40023800
 8002c18:	40020800 	.word	0x40020800
 8002c1c:	40020c00 	.word	0x40020c00
 8002c20:	20001218 	.word	0x20001218
 8002c24:	400260b8 	.word	0x400260b8
 8002c28:	20001278 	.word	0x20001278
 8002c2c:	40026010 	.word	0x40026010
 8002c30:	40007800 	.word	0x40007800
 8002c34:	40021400 	.word	0x40021400
 8002c38:	40021000 	.word	0x40021000
  else if(uartHandle->Instance==UART8)
 8002c3c:	687b      	ldr	r3, [r7, #4]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a8f      	ldr	r2, [pc, #572]	; (8002e80 <HAL_UART_MspInit+0x6bc>)
 8002c42:	4293      	cmp	r3, r2
 8002c44:	d173      	bne.n	8002d2e <HAL_UART_MspInit+0x56a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 8002c46:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8002c4a:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 8002c4c:	2300      	movs	r3, #0
 8002c4e:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c52:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002c56:	4618      	mov	r0, r3
 8002c58:	f006 fd62 	bl	8009720 <HAL_RCCEx_PeriphCLKConfig>
 8002c5c:	4603      	mov	r3, r0
 8002c5e:	2b00      	cmp	r3, #0
 8002c60:	d001      	beq.n	8002c66 <HAL_UART_MspInit+0x4a2>
      Error_Handler();
 8002c62:	f7fe fd0f 	bl	8001684 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 8002c66:	4b87      	ldr	r3, [pc, #540]	; (8002e84 <HAL_UART_MspInit+0x6c0>)
 8002c68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c6a:	4a86      	ldr	r2, [pc, #536]	; (8002e84 <HAL_UART_MspInit+0x6c0>)
 8002c6c:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8002c70:	6413      	str	r3, [r2, #64]	; 0x40
 8002c72:	4b84      	ldr	r3, [pc, #528]	; (8002e84 <HAL_UART_MspInit+0x6c0>)
 8002c74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c76:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c7a:	633b      	str	r3, [r7, #48]	; 0x30
 8002c7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8002c7e:	4b81      	ldr	r3, [pc, #516]	; (8002e84 <HAL_UART_MspInit+0x6c0>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	4a80      	ldr	r2, [pc, #512]	; (8002e84 <HAL_UART_MspInit+0x6c0>)
 8002c84:	f043 0310 	orr.w	r3, r3, #16
 8002c88:	6313      	str	r3, [r2, #48]	; 0x30
 8002c8a:	4b7e      	ldr	r3, [pc, #504]	; (8002e84 <HAL_UART_MspInit+0x6c0>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	f003 0310 	and.w	r3, r3, #16
 8002c92:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8002c96:	2303      	movs	r3, #3
 8002c98:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9c:	2302      	movs	r3, #2
 8002c9e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ca8:	2303      	movs	r3, #3
 8002caa:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002cae:	2308      	movs	r3, #8
 8002cb0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002cb4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002cb8:	4619      	mov	r1, r3
 8002cba:	4873      	ldr	r0, [pc, #460]	; (8002e88 <HAL_UART_MspInit+0x6c4>)
 8002cbc:	f003 fe1a 	bl	80068f4 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream6;
 8002cc0:	4b72      	ldr	r3, [pc, #456]	; (8002e8c <HAL_UART_MspInit+0x6c8>)
 8002cc2:	4a73      	ldr	r2, [pc, #460]	; (8002e90 <HAL_UART_MspInit+0x6cc>)
 8002cc4:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 8002cc6:	4b71      	ldr	r3, [pc, #452]	; (8002e8c <HAL_UART_MspInit+0x6c8>)
 8002cc8:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002ccc:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002cce:	4b6f      	ldr	r3, [pc, #444]	; (8002e8c <HAL_UART_MspInit+0x6c8>)
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002cd4:	4b6d      	ldr	r3, [pc, #436]	; (8002e8c <HAL_UART_MspInit+0x6c8>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002cda:	4b6c      	ldr	r3, [pc, #432]	; (8002e8c <HAL_UART_MspInit+0x6c8>)
 8002cdc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002ce0:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002ce2:	4b6a      	ldr	r3, [pc, #424]	; (8002e8c <HAL_UART_MspInit+0x6c8>)
 8002ce4:	2200      	movs	r2, #0
 8002ce6:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ce8:	4b68      	ldr	r3, [pc, #416]	; (8002e8c <HAL_UART_MspInit+0x6c8>)
 8002cea:	2200      	movs	r2, #0
 8002cec:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 8002cee:	4b67      	ldr	r3, [pc, #412]	; (8002e8c <HAL_UART_MspInit+0x6c8>)
 8002cf0:	2200      	movs	r2, #0
 8002cf2:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002cf4:	4b65      	ldr	r3, [pc, #404]	; (8002e8c <HAL_UART_MspInit+0x6c8>)
 8002cf6:	2200      	movs	r2, #0
 8002cf8:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002cfa:	4b64      	ldr	r3, [pc, #400]	; (8002e8c <HAL_UART_MspInit+0x6c8>)
 8002cfc:	2200      	movs	r2, #0
 8002cfe:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8002d00:	4862      	ldr	r0, [pc, #392]	; (8002e8c <HAL_UART_MspInit+0x6c8>)
 8002d02:	f001 fc7d 	bl	8004600 <HAL_DMA_Init>
 8002d06:	4603      	mov	r3, r0
 8002d08:	2b00      	cmp	r3, #0
 8002d0a:	d001      	beq.n	8002d10 <HAL_UART_MspInit+0x54c>
      Error_Handler();
 8002d0c:	f7fe fcba 	bl	8001684 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart8_rx);
 8002d10:	687b      	ldr	r3, [r7, #4]
 8002d12:	4a5e      	ldr	r2, [pc, #376]	; (8002e8c <HAL_UART_MspInit+0x6c8>)
 8002d14:	675a      	str	r2, [r3, #116]	; 0x74
 8002d16:	4a5d      	ldr	r2, [pc, #372]	; (8002e8c <HAL_UART_MspInit+0x6c8>)
 8002d18:	687b      	ldr	r3, [r7, #4]
 8002d1a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	2105      	movs	r1, #5
 8002d20:	2053      	movs	r0, #83	; 0x53
 8002d22:	f001 fb47 	bl	80043b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8002d26:	2053      	movs	r0, #83	; 0x53
 8002d28:	f001 fb60 	bl	80043ec <HAL_NVIC_EnableIRQ>
}
 8002d2c:	e21c      	b.n	8003168 <HAL_UART_MspInit+0x9a4>
  else if(uartHandle->Instance==USART1)
 8002d2e:	687b      	ldr	r3, [r7, #4]
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4a58      	ldr	r2, [pc, #352]	; (8002e94 <HAL_UART_MspInit+0x6d0>)
 8002d34:	4293      	cmp	r3, r2
 8002d36:	f040 80b9 	bne.w	8002eac <HAL_UART_MspInit+0x6e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002d3a:	2340      	movs	r3, #64	; 0x40
 8002d3c:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002d3e:	2300      	movs	r3, #0
 8002d40:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d44:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002d48:	4618      	mov	r0, r3
 8002d4a:	f006 fce9 	bl	8009720 <HAL_RCCEx_PeriphCLKConfig>
 8002d4e:	4603      	mov	r3, r0
 8002d50:	2b00      	cmp	r3, #0
 8002d52:	d001      	beq.n	8002d58 <HAL_UART_MspInit+0x594>
      Error_Handler();
 8002d54:	f7fe fc96 	bl	8001684 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002d58:	4b4a      	ldr	r3, [pc, #296]	; (8002e84 <HAL_UART_MspInit+0x6c0>)
 8002d5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d5c:	4a49      	ldr	r2, [pc, #292]	; (8002e84 <HAL_UART_MspInit+0x6c0>)
 8002d5e:	f043 0310 	orr.w	r3, r3, #16
 8002d62:	6453      	str	r3, [r2, #68]	; 0x44
 8002d64:	4b47      	ldr	r3, [pc, #284]	; (8002e84 <HAL_UART_MspInit+0x6c0>)
 8002d66:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002d68:	f003 0310 	and.w	r3, r3, #16
 8002d6c:	62bb      	str	r3, [r7, #40]	; 0x28
 8002d6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d70:	4b44      	ldr	r3, [pc, #272]	; (8002e84 <HAL_UART_MspInit+0x6c0>)
 8002d72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d74:	4a43      	ldr	r2, [pc, #268]	; (8002e84 <HAL_UART_MspInit+0x6c0>)
 8002d76:	f043 0301 	orr.w	r3, r3, #1
 8002d7a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d7c:	4b41      	ldr	r3, [pc, #260]	; (8002e84 <HAL_UART_MspInit+0x6c0>)
 8002d7e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d80:	f003 0301 	and.w	r3, r3, #1
 8002d84:	627b      	str	r3, [r7, #36]	; 0x24
 8002d86:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002d88:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002d8c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d90:	2302      	movs	r3, #2
 8002d92:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d96:	2300      	movs	r3, #0
 8002d98:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d9c:	2303      	movs	r3, #3
 8002d9e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002da2:	2307      	movs	r3, #7
 8002da4:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002da8:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002dac:	4619      	mov	r1, r3
 8002dae:	483a      	ldr	r0, [pc, #232]	; (8002e98 <HAL_UART_MspInit+0x6d4>)
 8002db0:	f003 fda0 	bl	80068f4 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8002db4:	4b39      	ldr	r3, [pc, #228]	; (8002e9c <HAL_UART_MspInit+0x6d8>)
 8002db6:	4a3a      	ldr	r2, [pc, #232]	; (8002ea0 <HAL_UART_MspInit+0x6dc>)
 8002db8:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002dba:	4b38      	ldr	r3, [pc, #224]	; (8002e9c <HAL_UART_MspInit+0x6d8>)
 8002dbc:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002dc0:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002dc2:	4b36      	ldr	r3, [pc, #216]	; (8002e9c <HAL_UART_MspInit+0x6d8>)
 8002dc4:	2200      	movs	r2, #0
 8002dc6:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dc8:	4b34      	ldr	r3, [pc, #208]	; (8002e9c <HAL_UART_MspInit+0x6d8>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002dce:	4b33      	ldr	r3, [pc, #204]	; (8002e9c <HAL_UART_MspInit+0x6d8>)
 8002dd0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dd4:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dd6:	4b31      	ldr	r3, [pc, #196]	; (8002e9c <HAL_UART_MspInit+0x6d8>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002ddc:	4b2f      	ldr	r3, [pc, #188]	; (8002e9c <HAL_UART_MspInit+0x6d8>)
 8002dde:	2200      	movs	r2, #0
 8002de0:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002de2:	4b2e      	ldr	r3, [pc, #184]	; (8002e9c <HAL_UART_MspInit+0x6d8>)
 8002de4:	2200      	movs	r2, #0
 8002de6:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002de8:	4b2c      	ldr	r3, [pc, #176]	; (8002e9c <HAL_UART_MspInit+0x6d8>)
 8002dea:	2200      	movs	r2, #0
 8002dec:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002dee:	4b2b      	ldr	r3, [pc, #172]	; (8002e9c <HAL_UART_MspInit+0x6d8>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002df4:	4829      	ldr	r0, [pc, #164]	; (8002e9c <HAL_UART_MspInit+0x6d8>)
 8002df6:	f001 fc03 	bl	8004600 <HAL_DMA_Init>
 8002dfa:	4603      	mov	r3, r0
 8002dfc:	2b00      	cmp	r3, #0
 8002dfe:	d001      	beq.n	8002e04 <HAL_UART_MspInit+0x640>
      Error_Handler();
 8002e00:	f7fe fc40 	bl	8001684 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002e04:	687b      	ldr	r3, [r7, #4]
 8002e06:	4a25      	ldr	r2, [pc, #148]	; (8002e9c <HAL_UART_MspInit+0x6d8>)
 8002e08:	675a      	str	r2, [r3, #116]	; 0x74
 8002e0a:	4a24      	ldr	r2, [pc, #144]	; (8002e9c <HAL_UART_MspInit+0x6d8>)
 8002e0c:	687b      	ldr	r3, [r7, #4]
 8002e0e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002e10:	4b24      	ldr	r3, [pc, #144]	; (8002ea4 <HAL_UART_MspInit+0x6e0>)
 8002e12:	4a25      	ldr	r2, [pc, #148]	; (8002ea8 <HAL_UART_MspInit+0x6e4>)
 8002e14:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002e16:	4b23      	ldr	r3, [pc, #140]	; (8002ea4 <HAL_UART_MspInit+0x6e0>)
 8002e18:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002e1c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e1e:	4b21      	ldr	r3, [pc, #132]	; (8002ea4 <HAL_UART_MspInit+0x6e0>)
 8002e20:	2240      	movs	r2, #64	; 0x40
 8002e22:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e24:	4b1f      	ldr	r3, [pc, #124]	; (8002ea4 <HAL_UART_MspInit+0x6e0>)
 8002e26:	2200      	movs	r2, #0
 8002e28:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e2a:	4b1e      	ldr	r3, [pc, #120]	; (8002ea4 <HAL_UART_MspInit+0x6e0>)
 8002e2c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e30:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e32:	4b1c      	ldr	r3, [pc, #112]	; (8002ea4 <HAL_UART_MspInit+0x6e0>)
 8002e34:	2200      	movs	r2, #0
 8002e36:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e38:	4b1a      	ldr	r3, [pc, #104]	; (8002ea4 <HAL_UART_MspInit+0x6e0>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002e3e:	4b19      	ldr	r3, [pc, #100]	; (8002ea4 <HAL_UART_MspInit+0x6e0>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002e44:	4b17      	ldr	r3, [pc, #92]	; (8002ea4 <HAL_UART_MspInit+0x6e0>)
 8002e46:	2200      	movs	r2, #0
 8002e48:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e4a:	4b16      	ldr	r3, [pc, #88]	; (8002ea4 <HAL_UART_MspInit+0x6e0>)
 8002e4c:	2200      	movs	r2, #0
 8002e4e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002e50:	4814      	ldr	r0, [pc, #80]	; (8002ea4 <HAL_UART_MspInit+0x6e0>)
 8002e52:	f001 fbd5 	bl	8004600 <HAL_DMA_Init>
 8002e56:	4603      	mov	r3, r0
 8002e58:	2b00      	cmp	r3, #0
 8002e5a:	d001      	beq.n	8002e60 <HAL_UART_MspInit+0x69c>
      Error_Handler();
 8002e5c:	f7fe fc12 	bl	8001684 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002e60:	687b      	ldr	r3, [r7, #4]
 8002e62:	4a10      	ldr	r2, [pc, #64]	; (8002ea4 <HAL_UART_MspInit+0x6e0>)
 8002e64:	671a      	str	r2, [r3, #112]	; 0x70
 8002e66:	4a0f      	ldr	r2, [pc, #60]	; (8002ea4 <HAL_UART_MspInit+0x6e0>)
 8002e68:	687b      	ldr	r3, [r7, #4]
 8002e6a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	2105      	movs	r1, #5
 8002e70:	2025      	movs	r0, #37	; 0x25
 8002e72:	f001 fa9f 	bl	80043b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002e76:	2025      	movs	r0, #37	; 0x25
 8002e78:	f001 fab8 	bl	80043ec <HAL_NVIC_EnableIRQ>
}
 8002e7c:	e174      	b.n	8003168 <HAL_UART_MspInit+0x9a4>
 8002e7e:	bf00      	nop
 8002e80:	40007c00 	.word	0x40007c00
 8002e84:	40023800 	.word	0x40023800
 8002e88:	40021000 	.word	0x40021000
 8002e8c:	200012d8 	.word	0x200012d8
 8002e90:	400260a0 	.word	0x400260a0
 8002e94:	40011000 	.word	0x40011000
 8002e98:	40020000 	.word	0x40020000
 8002e9c:	20001338 	.word	0x20001338
 8002ea0:	40026488 	.word	0x40026488
 8002ea4:	20001398 	.word	0x20001398
 8002ea8:	400264b8 	.word	0x400264b8
  else if(uartHandle->Instance==USART2)
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	681b      	ldr	r3, [r3, #0]
 8002eb0:	4aaf      	ldr	r2, [pc, #700]	; (8003170 <HAL_UART_MspInit+0x9ac>)
 8002eb2:	4293      	cmp	r3, r2
 8002eb4:	d165      	bne.n	8002f82 <HAL_UART_MspInit+0x7be>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002eb6:	2380      	movs	r3, #128	; 0x80
 8002eb8:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002eba:	2300      	movs	r3, #0
 8002ebc:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002ec0:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f006 fc2b 	bl	8009720 <HAL_RCCEx_PeriphCLKConfig>
 8002eca:	4603      	mov	r3, r0
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	d001      	beq.n	8002ed4 <HAL_UART_MspInit+0x710>
      Error_Handler();
 8002ed0:	f7fe fbd8 	bl	8001684 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002ed4:	4ba7      	ldr	r3, [pc, #668]	; (8003174 <HAL_UART_MspInit+0x9b0>)
 8002ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ed8:	4aa6      	ldr	r2, [pc, #664]	; (8003174 <HAL_UART_MspInit+0x9b0>)
 8002eda:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002ede:	6413      	str	r3, [r2, #64]	; 0x40
 8002ee0:	4ba4      	ldr	r3, [pc, #656]	; (8003174 <HAL_UART_MspInit+0x9b0>)
 8002ee2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ee4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002ee8:	623b      	str	r3, [r7, #32]
 8002eea:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002eec:	4ba1      	ldr	r3, [pc, #644]	; (8003174 <HAL_UART_MspInit+0x9b0>)
 8002eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ef0:	4aa0      	ldr	r2, [pc, #640]	; (8003174 <HAL_UART_MspInit+0x9b0>)
 8002ef2:	f043 0301 	orr.w	r3, r3, #1
 8002ef6:	6313      	str	r3, [r2, #48]	; 0x30
 8002ef8:	4b9e      	ldr	r3, [pc, #632]	; (8003174 <HAL_UART_MspInit+0x9b0>)
 8002efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002efc:	f003 0301 	and.w	r3, r3, #1
 8002f00:	61fb      	str	r3, [r7, #28]
 8002f02:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002f04:	4b9b      	ldr	r3, [pc, #620]	; (8003174 <HAL_UART_MspInit+0x9b0>)
 8002f06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f08:	4a9a      	ldr	r2, [pc, #616]	; (8003174 <HAL_UART_MspInit+0x9b0>)
 8002f0a:	f043 0308 	orr.w	r3, r3, #8
 8002f0e:	6313      	str	r3, [r2, #48]	; 0x30
 8002f10:	4b98      	ldr	r3, [pc, #608]	; (8003174 <HAL_UART_MspInit+0x9b0>)
 8002f12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002f14:	f003 0308 	and.w	r3, r3, #8
 8002f18:	61bb      	str	r3, [r7, #24]
 8002f1a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002f1c:	2308      	movs	r3, #8
 8002f1e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f22:	2302      	movs	r3, #2
 8002f24:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f28:	2300      	movs	r3, #0
 8002f2a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f2e:	2303      	movs	r3, #3
 8002f30:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f34:	2307      	movs	r3, #7
 8002f36:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002f3a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002f3e:	4619      	mov	r1, r3
 8002f40:	488d      	ldr	r0, [pc, #564]	; (8003178 <HAL_UART_MspInit+0x9b4>)
 8002f42:	f003 fcd7 	bl	80068f4 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002f46:	2320      	movs	r3, #32
 8002f48:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002f4c:	2302      	movs	r3, #2
 8002f4e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002f52:	2300      	movs	r3, #0
 8002f54:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002f58:	2303      	movs	r3, #3
 8002f5a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002f5e:	2307      	movs	r3, #7
 8002f60:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002f64:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002f68:	4619      	mov	r1, r3
 8002f6a:	4884      	ldr	r0, [pc, #528]	; (800317c <HAL_UART_MspInit+0x9b8>)
 8002f6c:	f003 fcc2 	bl	80068f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002f70:	2200      	movs	r2, #0
 8002f72:	2105      	movs	r1, #5
 8002f74:	2026      	movs	r0, #38	; 0x26
 8002f76:	f001 fa1d 	bl	80043b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002f7a:	2026      	movs	r0, #38	; 0x26
 8002f7c:	f001 fa36 	bl	80043ec <HAL_NVIC_EnableIRQ>
}
 8002f80:	e0f2      	b.n	8003168 <HAL_UART_MspInit+0x9a4>
  else if(uartHandle->Instance==USART3)
 8002f82:	687b      	ldr	r3, [r7, #4]
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4a7e      	ldr	r2, [pc, #504]	; (8003180 <HAL_UART_MspInit+0x9bc>)
 8002f88:	4293      	cmp	r3, r2
 8002f8a:	d146      	bne.n	800301a <HAL_UART_MspInit+0x856>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002f8c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002f90:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002f92:	2300      	movs	r3, #0
 8002f94:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002f98:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002f9c:	4618      	mov	r0, r3
 8002f9e:	f006 fbbf 	bl	8009720 <HAL_RCCEx_PeriphCLKConfig>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d001      	beq.n	8002fac <HAL_UART_MspInit+0x7e8>
      Error_Handler();
 8002fa8:	f7fe fb6c 	bl	8001684 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002fac:	4b71      	ldr	r3, [pc, #452]	; (8003174 <HAL_UART_MspInit+0x9b0>)
 8002fae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fb0:	4a70      	ldr	r2, [pc, #448]	; (8003174 <HAL_UART_MspInit+0x9b0>)
 8002fb2:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002fb6:	6413      	str	r3, [r2, #64]	; 0x40
 8002fb8:	4b6e      	ldr	r3, [pc, #440]	; (8003174 <HAL_UART_MspInit+0x9b0>)
 8002fba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fbc:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002fc0:	617b      	str	r3, [r7, #20]
 8002fc2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002fc4:	4b6b      	ldr	r3, [pc, #428]	; (8003174 <HAL_UART_MspInit+0x9b0>)
 8002fc6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fc8:	4a6a      	ldr	r2, [pc, #424]	; (8003174 <HAL_UART_MspInit+0x9b0>)
 8002fca:	f043 0308 	orr.w	r3, r3, #8
 8002fce:	6313      	str	r3, [r2, #48]	; 0x30
 8002fd0:	4b68      	ldr	r3, [pc, #416]	; (8003174 <HAL_UART_MspInit+0x9b0>)
 8002fd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002fd4:	f003 0308 	and.w	r3, r3, #8
 8002fd8:	613b      	str	r3, [r7, #16]
 8002fda:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002fdc:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002fe0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002fe4:	2302      	movs	r3, #2
 8002fe6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002fea:	2301      	movs	r3, #1
 8002fec:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002ff0:	2303      	movs	r3, #3
 8002ff2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002ff6:	2307      	movs	r3, #7
 8002ff8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002ffc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003000:	4619      	mov	r1, r3
 8003002:	485e      	ldr	r0, [pc, #376]	; (800317c <HAL_UART_MspInit+0x9b8>)
 8003004:	f003 fc76 	bl	80068f4 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8003008:	2200      	movs	r2, #0
 800300a:	2105      	movs	r1, #5
 800300c:	2027      	movs	r0, #39	; 0x27
 800300e:	f001 f9d1 	bl	80043b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8003012:	2027      	movs	r0, #39	; 0x27
 8003014:	f001 f9ea 	bl	80043ec <HAL_NVIC_EnableIRQ>
}
 8003018:	e0a6      	b.n	8003168 <HAL_UART_MspInit+0x9a4>
  else if(uartHandle->Instance==USART6)
 800301a:	687b      	ldr	r3, [r7, #4]
 800301c:	681b      	ldr	r3, [r3, #0]
 800301e:	4a59      	ldr	r2, [pc, #356]	; (8003184 <HAL_UART_MspInit+0x9c0>)
 8003020:	4293      	cmp	r3, r2
 8003022:	f040 80a1 	bne.w	8003168 <HAL_UART_MspInit+0x9a4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8003026:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800302a:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 800302c:	2300      	movs	r3, #0
 800302e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8003032:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8003036:	4618      	mov	r0, r3
 8003038:	f006 fb72 	bl	8009720 <HAL_RCCEx_PeriphCLKConfig>
 800303c:	4603      	mov	r3, r0
 800303e:	2b00      	cmp	r3, #0
 8003040:	d001      	beq.n	8003046 <HAL_UART_MspInit+0x882>
      Error_Handler();
 8003042:	f7fe fb1f 	bl	8001684 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003046:	4b4b      	ldr	r3, [pc, #300]	; (8003174 <HAL_UART_MspInit+0x9b0>)
 8003048:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800304a:	4a4a      	ldr	r2, [pc, #296]	; (8003174 <HAL_UART_MspInit+0x9b0>)
 800304c:	f043 0320 	orr.w	r3, r3, #32
 8003050:	6453      	str	r3, [r2, #68]	; 0x44
 8003052:	4b48      	ldr	r3, [pc, #288]	; (8003174 <HAL_UART_MspInit+0x9b0>)
 8003054:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003056:	f003 0320 	and.w	r3, r3, #32
 800305a:	60fb      	str	r3, [r7, #12]
 800305c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800305e:	4b45      	ldr	r3, [pc, #276]	; (8003174 <HAL_UART_MspInit+0x9b0>)
 8003060:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003062:	4a44      	ldr	r2, [pc, #272]	; (8003174 <HAL_UART_MspInit+0x9b0>)
 8003064:	f043 0304 	orr.w	r3, r3, #4
 8003068:	6313      	str	r3, [r2, #48]	; 0x30
 800306a:	4b42      	ldr	r3, [pc, #264]	; (8003174 <HAL_UART_MspInit+0x9b0>)
 800306c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800306e:	f003 0304 	and.w	r3, r3, #4
 8003072:	60bb      	str	r3, [r7, #8]
 8003074:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003076:	23c0      	movs	r3, #192	; 0xc0
 8003078:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800307c:	2302      	movs	r3, #2
 800307e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003082:	2300      	movs	r3, #0
 8003084:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003088:	2303      	movs	r3, #3
 800308a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800308e:	2308      	movs	r3, #8
 8003090:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003094:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8003098:	4619      	mov	r1, r3
 800309a:	483b      	ldr	r0, [pc, #236]	; (8003188 <HAL_UART_MspInit+0x9c4>)
 800309c:	f003 fc2a 	bl	80068f4 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 80030a0:	4b3a      	ldr	r3, [pc, #232]	; (800318c <HAL_UART_MspInit+0x9c8>)
 80030a2:	4a3b      	ldr	r2, [pc, #236]	; (8003190 <HAL_UART_MspInit+0x9cc>)
 80030a4:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 80030a6:	4b39      	ldr	r3, [pc, #228]	; (800318c <HAL_UART_MspInit+0x9c8>)
 80030a8:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 80030ac:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80030ae:	4b37      	ldr	r3, [pc, #220]	; (800318c <HAL_UART_MspInit+0x9c8>)
 80030b0:	2200      	movs	r2, #0
 80030b2:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80030b4:	4b35      	ldr	r3, [pc, #212]	; (800318c <HAL_UART_MspInit+0x9c8>)
 80030b6:	2200      	movs	r2, #0
 80030b8:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 80030ba:	4b34      	ldr	r3, [pc, #208]	; (800318c <HAL_UART_MspInit+0x9c8>)
 80030bc:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80030c0:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80030c2:	4b32      	ldr	r3, [pc, #200]	; (800318c <HAL_UART_MspInit+0x9c8>)
 80030c4:	2200      	movs	r2, #0
 80030c6:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80030c8:	4b30      	ldr	r3, [pc, #192]	; (800318c <HAL_UART_MspInit+0x9c8>)
 80030ca:	2200      	movs	r2, #0
 80030cc:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 80030ce:	4b2f      	ldr	r3, [pc, #188]	; (800318c <HAL_UART_MspInit+0x9c8>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 80030d4:	4b2d      	ldr	r3, [pc, #180]	; (800318c <HAL_UART_MspInit+0x9c8>)
 80030d6:	2200      	movs	r2, #0
 80030d8:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80030da:	4b2c      	ldr	r3, [pc, #176]	; (800318c <HAL_UART_MspInit+0x9c8>)
 80030dc:	2200      	movs	r2, #0
 80030de:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 80030e0:	482a      	ldr	r0, [pc, #168]	; (800318c <HAL_UART_MspInit+0x9c8>)
 80030e2:	f001 fa8d 	bl	8004600 <HAL_DMA_Init>
 80030e6:	4603      	mov	r3, r0
 80030e8:	2b00      	cmp	r3, #0
 80030ea:	d001      	beq.n	80030f0 <HAL_UART_MspInit+0x92c>
      Error_Handler();
 80030ec:	f7fe faca 	bl	8001684 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 80030f0:	687b      	ldr	r3, [r7, #4]
 80030f2:	4a26      	ldr	r2, [pc, #152]	; (800318c <HAL_UART_MspInit+0x9c8>)
 80030f4:	675a      	str	r2, [r3, #116]	; 0x74
 80030f6:	4a25      	ldr	r2, [pc, #148]	; (800318c <HAL_UART_MspInit+0x9c8>)
 80030f8:	687b      	ldr	r3, [r7, #4]
 80030fa:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 80030fc:	4b25      	ldr	r3, [pc, #148]	; (8003194 <HAL_UART_MspInit+0x9d0>)
 80030fe:	4a26      	ldr	r2, [pc, #152]	; (8003198 <HAL_UART_MspInit+0x9d4>)
 8003100:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8003102:	4b24      	ldr	r3, [pc, #144]	; (8003194 <HAL_UART_MspInit+0x9d0>)
 8003104:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8003108:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800310a:	4b22      	ldr	r3, [pc, #136]	; (8003194 <HAL_UART_MspInit+0x9d0>)
 800310c:	2240      	movs	r2, #64	; 0x40
 800310e:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003110:	4b20      	ldr	r3, [pc, #128]	; (8003194 <HAL_UART_MspInit+0x9d0>)
 8003112:	2200      	movs	r2, #0
 8003114:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003116:	4b1f      	ldr	r3, [pc, #124]	; (8003194 <HAL_UART_MspInit+0x9d0>)
 8003118:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800311c:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800311e:	4b1d      	ldr	r3, [pc, #116]	; (8003194 <HAL_UART_MspInit+0x9d0>)
 8003120:	2200      	movs	r2, #0
 8003122:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003124:	4b1b      	ldr	r3, [pc, #108]	; (8003194 <HAL_UART_MspInit+0x9d0>)
 8003126:	2200      	movs	r2, #0
 8003128:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 800312a:	4b1a      	ldr	r3, [pc, #104]	; (8003194 <HAL_UART_MspInit+0x9d0>)
 800312c:	2200      	movs	r2, #0
 800312e:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003130:	4b18      	ldr	r3, [pc, #96]	; (8003194 <HAL_UART_MspInit+0x9d0>)
 8003132:	2200      	movs	r2, #0
 8003134:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003136:	4b17      	ldr	r3, [pc, #92]	; (8003194 <HAL_UART_MspInit+0x9d0>)
 8003138:	2200      	movs	r2, #0
 800313a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 800313c:	4815      	ldr	r0, [pc, #84]	; (8003194 <HAL_UART_MspInit+0x9d0>)
 800313e:	f001 fa5f 	bl	8004600 <HAL_DMA_Init>
 8003142:	4603      	mov	r3, r0
 8003144:	2b00      	cmp	r3, #0
 8003146:	d001      	beq.n	800314c <HAL_UART_MspInit+0x988>
      Error_Handler();
 8003148:	f7fe fa9c 	bl	8001684 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 800314c:	687b      	ldr	r3, [r7, #4]
 800314e:	4a11      	ldr	r2, [pc, #68]	; (8003194 <HAL_UART_MspInit+0x9d0>)
 8003150:	671a      	str	r2, [r3, #112]	; 0x70
 8003152:	4a10      	ldr	r2, [pc, #64]	; (8003194 <HAL_UART_MspInit+0x9d0>)
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8003158:	2200      	movs	r2, #0
 800315a:	2105      	movs	r1, #5
 800315c:	2047      	movs	r0, #71	; 0x47
 800315e:	f001 f929 	bl	80043b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003162:	2047      	movs	r0, #71	; 0x47
 8003164:	f001 f942 	bl	80043ec <HAL_NVIC_EnableIRQ>
}
 8003168:	bf00      	nop
 800316a:	37f0      	adds	r7, #240	; 0xf0
 800316c:	46bd      	mov	sp, r7
 800316e:	bd80      	pop	{r7, pc}
 8003170:	40004400 	.word	0x40004400
 8003174:	40023800 	.word	0x40023800
 8003178:	40020000 	.word	0x40020000
 800317c:	40020c00 	.word	0x40020c00
 8003180:	40004800 	.word	0x40004800
 8003184:	40011400 	.word	0x40011400
 8003188:	40020800 	.word	0x40020800
 800318c:	200013f8 	.word	0x200013f8
 8003190:	40026428 	.word	0x40026428
 8003194:	20001458 	.word	0x20001458
 8003198:	400264a0 	.word	0x400264a0

0800319c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 800319c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80031d4 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 80031a0:	f7ff f97e 	bl	80024a0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80031a4:	480c      	ldr	r0, [pc, #48]	; (80031d8 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 80031a6:	490d      	ldr	r1, [pc, #52]	; (80031dc <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80031a8:	4a0d      	ldr	r2, [pc, #52]	; (80031e0 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80031aa:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80031ac:	e002      	b.n	80031b4 <LoopCopyDataInit>

080031ae <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80031ae:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80031b0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80031b2:	3304      	adds	r3, #4

080031b4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80031b4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80031b6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80031b8:	d3f9      	bcc.n	80031ae <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80031ba:	4a0a      	ldr	r2, [pc, #40]	; (80031e4 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80031bc:	4c0a      	ldr	r4, [pc, #40]	; (80031e8 <LoopFillZerobss+0x22>)
  movs r3, #0
 80031be:	2300      	movs	r3, #0
  b LoopFillZerobss
 80031c0:	e001      	b.n	80031c6 <LoopFillZerobss>

080031c2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80031c2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80031c4:	3204      	adds	r2, #4

080031c6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80031c6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80031c8:	d3fb      	bcc.n	80031c2 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 80031ca:	f01a fec3 	bl	801df54 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80031ce:	f7fe f999 	bl	8001504 <main>
  bx  lr    
 80031d2:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 80031d4:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 80031d8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80031dc:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 80031e0:	0802214c 	.word	0x0802214c
  ldr r2, =_sbss
 80031e4:	200002e4 	.word	0x200002e4
  ldr r4, =_ebss
 80031e8:	20024370 	.word	0x20024370

080031ec <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80031ec:	e7fe      	b.n	80031ec <ADC_IRQHandler>

080031ee <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 80031ee:	b480      	push	{r7}
 80031f0:	b083      	sub	sp, #12
 80031f2:	af00      	add	r7, sp, #0
 80031f4:	6078      	str	r0, [r7, #4]
 80031f6:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	d00b      	beq.n	8003216 <LAN8742_RegisterBusIO+0x28>
 80031fe:	683b      	ldr	r3, [r7, #0]
 8003200:	68db      	ldr	r3, [r3, #12]
 8003202:	2b00      	cmp	r3, #0
 8003204:	d007      	beq.n	8003216 <LAN8742_RegisterBusIO+0x28>
 8003206:	683b      	ldr	r3, [r7, #0]
 8003208:	689b      	ldr	r3, [r3, #8]
 800320a:	2b00      	cmp	r3, #0
 800320c:	d003      	beq.n	8003216 <LAN8742_RegisterBusIO+0x28>
 800320e:	683b      	ldr	r3, [r7, #0]
 8003210:	691b      	ldr	r3, [r3, #16]
 8003212:	2b00      	cmp	r3, #0
 8003214:	d102      	bne.n	800321c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8003216:	f04f 33ff 	mov.w	r3, #4294967295
 800321a:	e014      	b.n	8003246 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 800321c:	683b      	ldr	r3, [r7, #0]
 800321e:	681a      	ldr	r2, [r3, #0]
 8003220:	687b      	ldr	r3, [r7, #4]
 8003222:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8003224:	683b      	ldr	r3, [r7, #0]
 8003226:	685a      	ldr	r2, [r3, #4]
 8003228:	687b      	ldr	r3, [r7, #4]
 800322a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 800322c:	683b      	ldr	r3, [r7, #0]
 800322e:	68da      	ldr	r2, [r3, #12]
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8003234:	683b      	ldr	r3, [r7, #0]
 8003236:	689a      	ldr	r2, [r3, #8]
 8003238:	687b      	ldr	r3, [r7, #4]
 800323a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	691a      	ldr	r2, [r3, #16]
 8003240:	687b      	ldr	r3, [r7, #4]
 8003242:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8003244:	2300      	movs	r3, #0
}
 8003246:	4618      	mov	r0, r3
 8003248:	370c      	adds	r7, #12
 800324a:	46bd      	mov	sp, r7
 800324c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003250:	4770      	bx	lr

08003252 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8003252:	b580      	push	{r7, lr}
 8003254:	b086      	sub	sp, #24
 8003256:	af00      	add	r7, sp, #0
 8003258:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 800325a:	2300      	movs	r3, #0
 800325c:	60fb      	str	r3, [r7, #12]
 800325e:	2300      	movs	r3, #0
 8003260:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8003262:	2300      	movs	r3, #0
 8003264:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8003266:	687b      	ldr	r3, [r7, #4]
 8003268:	685b      	ldr	r3, [r3, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d139      	bne.n	80032e2 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	689b      	ldr	r3, [r3, #8]
 8003272:	2b00      	cmp	r3, #0
 8003274:	d002      	beq.n	800327c <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	689b      	ldr	r3, [r3, #8]
 800327a:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 800327c:	687b      	ldr	r3, [r7, #4]
 800327e:	2220      	movs	r2, #32
 8003280:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8003282:	2300      	movs	r3, #0
 8003284:	617b      	str	r3, [r7, #20]
 8003286:	e01c      	b.n	80032c2 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8003288:	687b      	ldr	r3, [r7, #4]
 800328a:	695b      	ldr	r3, [r3, #20]
 800328c:	f107 020c 	add.w	r2, r7, #12
 8003290:	2112      	movs	r1, #18
 8003292:	6978      	ldr	r0, [r7, #20]
 8003294:	4798      	blx	r3
 8003296:	4603      	mov	r3, r0
 8003298:	2b00      	cmp	r3, #0
 800329a:	da03      	bge.n	80032a4 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 800329c:	f06f 0304 	mvn.w	r3, #4
 80032a0:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 80032a2:	e00b      	b.n	80032bc <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f003 031f 	and.w	r3, r3, #31
 80032aa:	697a      	ldr	r2, [r7, #20]
 80032ac:	429a      	cmp	r2, r3
 80032ae:	d105      	bne.n	80032bc <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	697a      	ldr	r2, [r7, #20]
 80032b4:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 80032b6:	2300      	movs	r3, #0
 80032b8:	613b      	str	r3, [r7, #16]
         break;
 80032ba:	e005      	b.n	80032c8 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80032bc:	697b      	ldr	r3, [r7, #20]
 80032be:	3301      	adds	r3, #1
 80032c0:	617b      	str	r3, [r7, #20]
 80032c2:	697b      	ldr	r3, [r7, #20]
 80032c4:	2b1f      	cmp	r3, #31
 80032c6:	d9df      	bls.n	8003288 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 80032c8:	687b      	ldr	r3, [r7, #4]
 80032ca:	681b      	ldr	r3, [r3, #0]
 80032cc:	2b1f      	cmp	r3, #31
 80032ce:	d902      	bls.n	80032d6 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 80032d0:	f06f 0302 	mvn.w	r3, #2
 80032d4:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 80032d6:	693b      	ldr	r3, [r7, #16]
 80032d8:	2b00      	cmp	r3, #0
 80032da:	d102      	bne.n	80032e2 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 80032dc:	687b      	ldr	r3, [r7, #4]
 80032de:	2201      	movs	r2, #1
 80032e0:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 80032e2:	693b      	ldr	r3, [r7, #16]
 }
 80032e4:	4618      	mov	r0, r3
 80032e6:	3718      	adds	r7, #24
 80032e8:	46bd      	mov	sp, r7
 80032ea:	bd80      	pop	{r7, pc}

080032ec <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b084      	sub	sp, #16
 80032f0:	af00      	add	r7, sp, #0
 80032f2:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 80032f4:	2300      	movs	r3, #0
 80032f6:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	695b      	ldr	r3, [r3, #20]
 80032fc:	687a      	ldr	r2, [r7, #4]
 80032fe:	6810      	ldr	r0, [r2, #0]
 8003300:	f107 020c 	add.w	r2, r7, #12
 8003304:	2101      	movs	r1, #1
 8003306:	4798      	blx	r3
 8003308:	4603      	mov	r3, r0
 800330a:	2b00      	cmp	r3, #0
 800330c:	da02      	bge.n	8003314 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800330e:	f06f 0304 	mvn.w	r3, #4
 8003312:	e06e      	b.n	80033f2 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	695b      	ldr	r3, [r3, #20]
 8003318:	687a      	ldr	r2, [r7, #4]
 800331a:	6810      	ldr	r0, [r2, #0]
 800331c:	f107 020c 	add.w	r2, r7, #12
 8003320:	2101      	movs	r1, #1
 8003322:	4798      	blx	r3
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	da02      	bge.n	8003330 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800332a:	f06f 0304 	mvn.w	r3, #4
 800332e:	e060      	b.n	80033f2 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8003330:	68fb      	ldr	r3, [r7, #12]
 8003332:	f003 0304 	and.w	r3, r3, #4
 8003336:	2b00      	cmp	r3, #0
 8003338:	d101      	bne.n	800333e <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 800333a:	2301      	movs	r3, #1
 800333c:	e059      	b.n	80033f2 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	695b      	ldr	r3, [r3, #20]
 8003342:	687a      	ldr	r2, [r7, #4]
 8003344:	6810      	ldr	r0, [r2, #0]
 8003346:	f107 020c 	add.w	r2, r7, #12
 800334a:	2100      	movs	r1, #0
 800334c:	4798      	blx	r3
 800334e:	4603      	mov	r3, r0
 8003350:	2b00      	cmp	r3, #0
 8003352:	da02      	bge.n	800335a <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8003354:	f06f 0304 	mvn.w	r3, #4
 8003358:	e04b      	b.n	80033f2 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8003360:	2b00      	cmp	r3, #0
 8003362:	d11b      	bne.n	800339c <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d006      	beq.n	800337c <LAN8742_GetLinkState+0x90>
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003374:	2b00      	cmp	r3, #0
 8003376:	d001      	beq.n	800337c <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8003378:	2302      	movs	r3, #2
 800337a:	e03a      	b.n	80033f2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8003382:	2b00      	cmp	r3, #0
 8003384:	d001      	beq.n	800338a <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 8003386:	2303      	movs	r3, #3
 8003388:	e033      	b.n	80033f2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 800338a:	68fb      	ldr	r3, [r7, #12]
 800338c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003390:	2b00      	cmp	r3, #0
 8003392:	d001      	beq.n	8003398 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 8003394:	2304      	movs	r3, #4
 8003396:	e02c      	b.n	80033f2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8003398:	2305      	movs	r3, #5
 800339a:	e02a      	b.n	80033f2 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	695b      	ldr	r3, [r3, #20]
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	6810      	ldr	r0, [r2, #0]
 80033a4:	f107 020c 	add.w	r2, r7, #12
 80033a8:	211f      	movs	r1, #31
 80033aa:	4798      	blx	r3
 80033ac:	4603      	mov	r3, r0
 80033ae:	2b00      	cmp	r3, #0
 80033b0:	da02      	bge.n	80033b8 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80033b2:	f06f 0304 	mvn.w	r3, #4
 80033b6:	e01c      	b.n	80033f2 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d101      	bne.n	80033c6 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80033c2:	2306      	movs	r3, #6
 80033c4:	e015      	b.n	80033f2 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	f003 031c 	and.w	r3, r3, #28
 80033cc:	2b18      	cmp	r3, #24
 80033ce:	d101      	bne.n	80033d4 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80033d0:	2302      	movs	r3, #2
 80033d2:	e00e      	b.n	80033f2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	f003 031c 	and.w	r3, r3, #28
 80033da:	2b08      	cmp	r3, #8
 80033dc:	d101      	bne.n	80033e2 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80033de:	2303      	movs	r3, #3
 80033e0:	e007      	b.n	80033f2 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	f003 031c 	and.w	r3, r3, #28
 80033e8:	2b14      	cmp	r3, #20
 80033ea:	d101      	bne.n	80033f0 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80033ec:	2304      	movs	r3, #4
 80033ee:	e000      	b.n	80033f2 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80033f0:	2305      	movs	r3, #5
    }
  }
}
 80033f2:	4618      	mov	r0, r3
 80033f4:	3710      	adds	r7, #16
 80033f6:	46bd      	mov	sp, r7
 80033f8:	bd80      	pop	{r7, pc}

080033fa <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80033fa:	b580      	push	{r7, lr}
 80033fc:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80033fe:	2003      	movs	r0, #3
 8003400:	f000 ffcd 	bl	800439e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003404:	200f      	movs	r0, #15
 8003406:	f7fe fd45 	bl	8001e94 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800340a:	f7fe fd13 	bl	8001e34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800340e:	2300      	movs	r3, #0
}
 8003410:	4618      	mov	r0, r3
 8003412:	bd80      	pop	{r7, pc}

08003414 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003414:	b480      	push	{r7}
 8003416:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003418:	4b06      	ldr	r3, [pc, #24]	; (8003434 <HAL_IncTick+0x20>)
 800341a:	781b      	ldrb	r3, [r3, #0]
 800341c:	461a      	mov	r2, r3
 800341e:	4b06      	ldr	r3, [pc, #24]	; (8003438 <HAL_IncTick+0x24>)
 8003420:	681b      	ldr	r3, [r3, #0]
 8003422:	4413      	add	r3, r2
 8003424:	4a04      	ldr	r2, [pc, #16]	; (8003438 <HAL_IncTick+0x24>)
 8003426:	6013      	str	r3, [r2, #0]
}
 8003428:	bf00      	nop
 800342a:	46bd      	mov	sp, r7
 800342c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003430:	4770      	bx	lr
 8003432:	bf00      	nop
 8003434:	20000008 	.word	0x20000008
 8003438:	200014b8 	.word	0x200014b8

0800343c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800343c:	b480      	push	{r7}
 800343e:	af00      	add	r7, sp, #0
  return uwTick;
 8003440:	4b03      	ldr	r3, [pc, #12]	; (8003450 <HAL_GetTick+0x14>)
 8003442:	681b      	ldr	r3, [r3, #0]
}
 8003444:	4618      	mov	r0, r3
 8003446:	46bd      	mov	sp, r7
 8003448:	f85d 7b04 	ldr.w	r7, [sp], #4
 800344c:	4770      	bx	lr
 800344e:	bf00      	nop
 8003450:	200014b8 	.word	0x200014b8

08003454 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003454:	b580      	push	{r7, lr}
 8003456:	b084      	sub	sp, #16
 8003458:	af00      	add	r7, sp, #0
 800345a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800345c:	f7ff ffee 	bl	800343c <HAL_GetTick>
 8003460:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003462:	687b      	ldr	r3, [r7, #4]
 8003464:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003466:	68fb      	ldr	r3, [r7, #12]
 8003468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800346c:	d005      	beq.n	800347a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800346e:	4b0a      	ldr	r3, [pc, #40]	; (8003498 <HAL_Delay+0x44>)
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	461a      	mov	r2, r3
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	4413      	add	r3, r2
 8003478:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 800347a:	bf00      	nop
 800347c:	f7ff ffde 	bl	800343c <HAL_GetTick>
 8003480:	4602      	mov	r2, r0
 8003482:	68bb      	ldr	r3, [r7, #8]
 8003484:	1ad3      	subs	r3, r2, r3
 8003486:	68fa      	ldr	r2, [r7, #12]
 8003488:	429a      	cmp	r2, r3
 800348a:	d8f7      	bhi.n	800347c <HAL_Delay+0x28>
  {
  }
}
 800348c:	bf00      	nop
 800348e:	bf00      	nop
 8003490:	3710      	adds	r7, #16
 8003492:	46bd      	mov	sp, r7
 8003494:	bd80      	pop	{r7, pc}
 8003496:	bf00      	nop
 8003498:	20000008 	.word	0x20000008

0800349c <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 800349c:	b480      	push	{r7}
 800349e:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 80034a0:	4b03      	ldr	r3, [pc, #12]	; (80034b0 <HAL_GetREVID+0x14>)
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	0c1b      	lsrs	r3, r3, #16
}
 80034a6:	4618      	mov	r0, r3
 80034a8:	46bd      	mov	sp, r7
 80034aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034ae:	4770      	bx	lr
 80034b0:	e0042000 	.word	0xe0042000

080034b4 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 80034b4:	b480      	push	{r7}
 80034b6:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 80034b8:	4b03      	ldr	r3, [pc, #12]	; (80034c8 <HAL_GetUIDw0+0x14>)
 80034ba:	681b      	ldr	r3, [r3, #0]
}
 80034bc:	4618      	mov	r0, r3
 80034be:	46bd      	mov	sp, r7
 80034c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034c4:	4770      	bx	lr
 80034c6:	bf00      	nop
 80034c8:	1ff0f420 	.word	0x1ff0f420

080034cc <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 80034cc:	b480      	push	{r7}
 80034ce:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 80034d0:	4b03      	ldr	r3, [pc, #12]	; (80034e0 <HAL_GetUIDw1+0x14>)
 80034d2:	681b      	ldr	r3, [r3, #0]
}
 80034d4:	4618      	mov	r0, r3
 80034d6:	46bd      	mov	sp, r7
 80034d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034dc:	4770      	bx	lr
 80034de:	bf00      	nop
 80034e0:	1ff0f424 	.word	0x1ff0f424

080034e4 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 80034e4:	b480      	push	{r7}
 80034e6:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 80034e8:	4b03      	ldr	r3, [pc, #12]	; (80034f8 <HAL_GetUIDw2+0x14>)
 80034ea:	681b      	ldr	r3, [r3, #0]
}
 80034ec:	4618      	mov	r0, r3
 80034ee:	46bd      	mov	sp, r7
 80034f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034f4:	4770      	bx	lr
 80034f6:	bf00      	nop
 80034f8:	1ff0f428 	.word	0x1ff0f428

080034fc <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 80034fc:	b580      	push	{r7, lr}
 80034fe:	b084      	sub	sp, #16
 8003500:	af00      	add	r7, sp, #0
 8003502:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003504:	2300      	movs	r3, #0
 8003506:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003508:	687b      	ldr	r3, [r7, #4]
 800350a:	2b00      	cmp	r3, #0
 800350c:	d101      	bne.n	8003512 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800350e:	2301      	movs	r3, #1
 8003510:	e031      	b.n	8003576 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003516:	2b00      	cmp	r3, #0
 8003518:	d109      	bne.n	800352e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800351a:	6878      	ldr	r0, [r7, #4]
 800351c:	f7fd f93c 	bl	8000798 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	2200      	movs	r2, #0
 8003524:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003526:	687b      	ldr	r3, [r7, #4]
 8003528:	2200      	movs	r2, #0
 800352a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800352e:	687b      	ldr	r3, [r7, #4]
 8003530:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003532:	f003 0310 	and.w	r3, r3, #16
 8003536:	2b00      	cmp	r3, #0
 8003538:	d116      	bne.n	8003568 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800353a:	687b      	ldr	r3, [r7, #4]
 800353c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800353e:	4b10      	ldr	r3, [pc, #64]	; (8003580 <HAL_ADC_Init+0x84>)
 8003540:	4013      	ands	r3, r2
 8003542:	f043 0202 	orr.w	r2, r3, #2
 8003546:	687b      	ldr	r3, [r7, #4]
 8003548:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 800354a:	6878      	ldr	r0, [r7, #4]
 800354c:	f000 fa4c 	bl	80039e8 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2200      	movs	r2, #0
 8003554:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 8003556:	687b      	ldr	r3, [r7, #4]
 8003558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800355a:	f023 0303 	bic.w	r3, r3, #3
 800355e:	f043 0201 	orr.w	r2, r3, #1
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	641a      	str	r2, [r3, #64]	; 0x40
 8003566:	e001      	b.n	800356c <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 8003568:	2301      	movs	r3, #1
 800356a:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 800356c:	687b      	ldr	r3, [r7, #4]
 800356e:	2200      	movs	r2, #0
 8003570:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 8003574:	7bfb      	ldrb	r3, [r7, #15]
}
 8003576:	4618      	mov	r0, r3
 8003578:	3710      	adds	r7, #16
 800357a:	46bd      	mov	sp, r7
 800357c:	bd80      	pop	{r7, pc}
 800357e:	bf00      	nop
 8003580:	ffffeefd 	.word	0xffffeefd

08003584 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 8003584:	b480      	push	{r7}
 8003586:	b085      	sub	sp, #20
 8003588:	af00      	add	r7, sp, #0
 800358a:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 800358c:	2300      	movs	r3, #0
 800358e:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003596:	2b01      	cmp	r3, #1
 8003598:	d101      	bne.n	800359e <HAL_ADC_Start+0x1a>
 800359a:	2302      	movs	r3, #2
 800359c:	e0ad      	b.n	80036fa <HAL_ADC_Start+0x176>
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	2201      	movs	r2, #1
 80035a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	689b      	ldr	r3, [r3, #8]
 80035ac:	f003 0301 	and.w	r3, r3, #1
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d018      	beq.n	80035e6 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 80035b4:	687b      	ldr	r3, [r7, #4]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	689a      	ldr	r2, [r3, #8]
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	f042 0201 	orr.w	r2, r2, #1
 80035c2:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 80035c4:	4b50      	ldr	r3, [pc, #320]	; (8003708 <HAL_ADC_Start+0x184>)
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	4a50      	ldr	r2, [pc, #320]	; (800370c <HAL_ADC_Start+0x188>)
 80035ca:	fba2 2303 	umull	r2, r3, r2, r3
 80035ce:	0c9a      	lsrs	r2, r3, #18
 80035d0:	4613      	mov	r3, r2
 80035d2:	005b      	lsls	r3, r3, #1
 80035d4:	4413      	add	r3, r2
 80035d6:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80035d8:	e002      	b.n	80035e0 <HAL_ADC_Start+0x5c>
    {
      counter--;
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	3b01      	subs	r3, #1
 80035de:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	2b00      	cmp	r3, #0
 80035e4:	d1f9      	bne.n	80035da <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	681b      	ldr	r3, [r3, #0]
 80035ea:	689b      	ldr	r3, [r3, #8]
 80035ec:	f003 0301 	and.w	r3, r3, #1
 80035f0:	2b01      	cmp	r3, #1
 80035f2:	d175      	bne.n	80036e0 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 80035f4:	687b      	ldr	r3, [r7, #4]
 80035f6:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 80035f8:	4b45      	ldr	r3, [pc, #276]	; (8003710 <HAL_ADC_Start+0x18c>)
 80035fa:	4013      	ands	r3, r2
 80035fc:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	681b      	ldr	r3, [r3, #0]
 8003608:	685b      	ldr	r3, [r3, #4]
 800360a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800360e:	2b00      	cmp	r3, #0
 8003610:	d007      	beq.n	8003622 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003612:	687b      	ldr	r3, [r7, #4]
 8003614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003616:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800361a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003626:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800362a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800362e:	d106      	bne.n	800363e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003634:	f023 0206 	bic.w	r2, r3, #6
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	645a      	str	r2, [r3, #68]	; 0x44
 800363c:	e002      	b.n	8003644 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	2200      	movs	r2, #0
 8003642:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 8003644:	687b      	ldr	r3, [r7, #4]
 8003646:	2200      	movs	r2, #0
 8003648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f06f 0222 	mvn.w	r2, #34	; 0x22
 8003654:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 8003656:	4b2f      	ldr	r3, [pc, #188]	; (8003714 <HAL_ADC_Start+0x190>)
 8003658:	685b      	ldr	r3, [r3, #4]
 800365a:	f003 031f 	and.w	r3, r3, #31
 800365e:	2b00      	cmp	r3, #0
 8003660:	d10f      	bne.n	8003682 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	689b      	ldr	r3, [r3, #8]
 8003668:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800366c:	2b00      	cmp	r3, #0
 800366e:	d143      	bne.n	80036f8 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	689a      	ldr	r2, [r3, #8]
 8003676:	687b      	ldr	r3, [r7, #4]
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800367e:	609a      	str	r2, [r3, #8]
 8003680:	e03a      	b.n	80036f8 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	4a24      	ldr	r2, [pc, #144]	; (8003718 <HAL_ADC_Start+0x194>)
 8003688:	4293      	cmp	r3, r2
 800368a:	d10e      	bne.n	80036aa <HAL_ADC_Start+0x126>
 800368c:	687b      	ldr	r3, [r7, #4]
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	689b      	ldr	r3, [r3, #8]
 8003692:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 8003696:	2b00      	cmp	r3, #0
 8003698:	d107      	bne.n	80036aa <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800369a:	687b      	ldr	r3, [r7, #4]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	689a      	ldr	r2, [r3, #8]
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80036a8:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 80036aa:	4b1a      	ldr	r3, [pc, #104]	; (8003714 <HAL_ADC_Start+0x190>)
 80036ac:	685b      	ldr	r3, [r3, #4]
 80036ae:	f003 0310 	and.w	r3, r3, #16
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d120      	bne.n	80036f8 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	681b      	ldr	r3, [r3, #0]
 80036ba:	4a18      	ldr	r2, [pc, #96]	; (800371c <HAL_ADC_Start+0x198>)
 80036bc:	4293      	cmp	r3, r2
 80036be:	d11b      	bne.n	80036f8 <HAL_ADC_Start+0x174>
 80036c0:	687b      	ldr	r3, [r7, #4]
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	689b      	ldr	r3, [r3, #8]
 80036c6:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80036ca:	2b00      	cmp	r3, #0
 80036cc:	d114      	bne.n	80036f8 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80036ce:	687b      	ldr	r3, [r7, #4]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	689a      	ldr	r2, [r3, #8]
 80036d4:	687b      	ldr	r3, [r7, #4]
 80036d6:	681b      	ldr	r3, [r3, #0]
 80036d8:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80036dc:	609a      	str	r2, [r3, #8]
 80036de:	e00b      	b.n	80036f8 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 80036e0:	687b      	ldr	r3, [r7, #4]
 80036e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036e4:	f043 0210 	orr.w	r2, r3, #16
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80036f0:	f043 0201 	orr.w	r2, r3, #1
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 80036f8:	2300      	movs	r3, #0
}
 80036fa:	4618      	mov	r0, r3
 80036fc:	3714      	adds	r7, #20
 80036fe:	46bd      	mov	sp, r7
 8003700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003704:	4770      	bx	lr
 8003706:	bf00      	nop
 8003708:	20000000 	.word	0x20000000
 800370c:	431bde83 	.word	0x431bde83
 8003710:	fffff8fe 	.word	0xfffff8fe
 8003714:	40012300 	.word	0x40012300
 8003718:	40012000 	.word	0x40012000
 800371c:	40012200 	.word	0x40012200

08003720 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003720:	b480      	push	{r7}
 8003722:	b083      	sub	sp, #12
 8003724:	af00      	add	r7, sp, #0
 8003726:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003728:	687b      	ldr	r3, [r7, #4]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800372e:	4618      	mov	r0, r3
 8003730:	370c      	adds	r7, #12
 8003732:	46bd      	mov	sp, r7
 8003734:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003738:	4770      	bx	lr
	...

0800373c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800373c:	b480      	push	{r7}
 800373e:	b085      	sub	sp, #20
 8003740:	af00      	add	r7, sp, #0
 8003742:	6078      	str	r0, [r7, #4]
 8003744:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 8003746:	2300      	movs	r3, #0
 8003748:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003750:	2b01      	cmp	r3, #1
 8003752:	d101      	bne.n	8003758 <HAL_ADC_ConfigChannel+0x1c>
 8003754:	2302      	movs	r3, #2
 8003756:	e136      	b.n	80039c6 <HAL_ADC_ConfigChannel+0x28a>
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	2201      	movs	r2, #1
 800375c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 8003760:	683b      	ldr	r3, [r7, #0]
 8003762:	681b      	ldr	r3, [r3, #0]
 8003764:	2b09      	cmp	r3, #9
 8003766:	d93a      	bls.n	80037de <HAL_ADC_ConfigChannel+0xa2>
 8003768:	683b      	ldr	r3, [r7, #0]
 800376a:	681b      	ldr	r3, [r3, #0]
 800376c:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003770:	d035      	beq.n	80037de <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 8003772:	687b      	ldr	r3, [r7, #4]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	68d9      	ldr	r1, [r3, #12]
 8003778:	683b      	ldr	r3, [r7, #0]
 800377a:	681b      	ldr	r3, [r3, #0]
 800377c:	b29b      	uxth	r3, r3
 800377e:	461a      	mov	r2, r3
 8003780:	4613      	mov	r3, r2
 8003782:	005b      	lsls	r3, r3, #1
 8003784:	4413      	add	r3, r2
 8003786:	3b1e      	subs	r3, #30
 8003788:	2207      	movs	r2, #7
 800378a:	fa02 f303 	lsl.w	r3, r2, r3
 800378e:	43da      	mvns	r2, r3
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	400a      	ands	r2, r1
 8003796:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003798:	683b      	ldr	r3, [r7, #0]
 800379a:	681b      	ldr	r3, [r3, #0]
 800379c:	4a8d      	ldr	r2, [pc, #564]	; (80039d4 <HAL_ADC_ConfigChannel+0x298>)
 800379e:	4293      	cmp	r3, r2
 80037a0:	d10a      	bne.n	80037b8 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 80037a2:	687b      	ldr	r3, [r7, #4]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	68d9      	ldr	r1, [r3, #12]
 80037a8:	683b      	ldr	r3, [r7, #0]
 80037aa:	689b      	ldr	r3, [r3, #8]
 80037ac:	061a      	lsls	r2, r3, #24
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	430a      	orrs	r2, r1
 80037b4:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80037b6:	e035      	b.n	8003824 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 80037b8:	687b      	ldr	r3, [r7, #4]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	68d9      	ldr	r1, [r3, #12]
 80037be:	683b      	ldr	r3, [r7, #0]
 80037c0:	689a      	ldr	r2, [r3, #8]
 80037c2:	683b      	ldr	r3, [r7, #0]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	b29b      	uxth	r3, r3
 80037c8:	4618      	mov	r0, r3
 80037ca:	4603      	mov	r3, r0
 80037cc:	005b      	lsls	r3, r3, #1
 80037ce:	4403      	add	r3, r0
 80037d0:	3b1e      	subs	r3, #30
 80037d2:	409a      	lsls	r2, r3
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	430a      	orrs	r2, r1
 80037da:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80037dc:	e022      	b.n	8003824 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 80037de:	687b      	ldr	r3, [r7, #4]
 80037e0:	681b      	ldr	r3, [r3, #0]
 80037e2:	6919      	ldr	r1, [r3, #16]
 80037e4:	683b      	ldr	r3, [r7, #0]
 80037e6:	681b      	ldr	r3, [r3, #0]
 80037e8:	b29b      	uxth	r3, r3
 80037ea:	461a      	mov	r2, r3
 80037ec:	4613      	mov	r3, r2
 80037ee:	005b      	lsls	r3, r3, #1
 80037f0:	4413      	add	r3, r2
 80037f2:	2207      	movs	r2, #7
 80037f4:	fa02 f303 	lsl.w	r3, r2, r3
 80037f8:	43da      	mvns	r2, r3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	400a      	ands	r2, r1
 8003800:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003802:	687b      	ldr	r3, [r7, #4]
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	6919      	ldr	r1, [r3, #16]
 8003808:	683b      	ldr	r3, [r7, #0]
 800380a:	689a      	ldr	r2, [r3, #8]
 800380c:	683b      	ldr	r3, [r7, #0]
 800380e:	681b      	ldr	r3, [r3, #0]
 8003810:	b29b      	uxth	r3, r3
 8003812:	4618      	mov	r0, r3
 8003814:	4603      	mov	r3, r0
 8003816:	005b      	lsls	r3, r3, #1
 8003818:	4403      	add	r3, r0
 800381a:	409a      	lsls	r2, r3
 800381c:	687b      	ldr	r3, [r7, #4]
 800381e:	681b      	ldr	r3, [r3, #0]
 8003820:	430a      	orrs	r2, r1
 8003822:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003824:	683b      	ldr	r3, [r7, #0]
 8003826:	685b      	ldr	r3, [r3, #4]
 8003828:	2b06      	cmp	r3, #6
 800382a:	d824      	bhi.n	8003876 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800382c:	687b      	ldr	r3, [r7, #4]
 800382e:	681b      	ldr	r3, [r3, #0]
 8003830:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003832:	683b      	ldr	r3, [r7, #0]
 8003834:	685a      	ldr	r2, [r3, #4]
 8003836:	4613      	mov	r3, r2
 8003838:	009b      	lsls	r3, r3, #2
 800383a:	4413      	add	r3, r2
 800383c:	3b05      	subs	r3, #5
 800383e:	221f      	movs	r2, #31
 8003840:	fa02 f303 	lsl.w	r3, r2, r3
 8003844:	43da      	mvns	r2, r3
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	400a      	ands	r2, r1
 800384c:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 800384e:	687b      	ldr	r3, [r7, #4]
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003854:	683b      	ldr	r3, [r7, #0]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	b29b      	uxth	r3, r3
 800385a:	4618      	mov	r0, r3
 800385c:	683b      	ldr	r3, [r7, #0]
 800385e:	685a      	ldr	r2, [r3, #4]
 8003860:	4613      	mov	r3, r2
 8003862:	009b      	lsls	r3, r3, #2
 8003864:	4413      	add	r3, r2
 8003866:	3b05      	subs	r3, #5
 8003868:	fa00 f203 	lsl.w	r2, r0, r3
 800386c:	687b      	ldr	r3, [r7, #4]
 800386e:	681b      	ldr	r3, [r3, #0]
 8003870:	430a      	orrs	r2, r1
 8003872:	635a      	str	r2, [r3, #52]	; 0x34
 8003874:	e04c      	b.n	8003910 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 8003876:	683b      	ldr	r3, [r7, #0]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	2b0c      	cmp	r3, #12
 800387c:	d824      	bhi.n	80038c8 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 800387e:	687b      	ldr	r3, [r7, #4]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003884:	683b      	ldr	r3, [r7, #0]
 8003886:	685a      	ldr	r2, [r3, #4]
 8003888:	4613      	mov	r3, r2
 800388a:	009b      	lsls	r3, r3, #2
 800388c:	4413      	add	r3, r2
 800388e:	3b23      	subs	r3, #35	; 0x23
 8003890:	221f      	movs	r2, #31
 8003892:	fa02 f303 	lsl.w	r3, r2, r3
 8003896:	43da      	mvns	r2, r3
 8003898:	687b      	ldr	r3, [r7, #4]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	400a      	ands	r2, r1
 800389e:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 80038a0:	687b      	ldr	r3, [r7, #4]
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80038a6:	683b      	ldr	r3, [r7, #0]
 80038a8:	681b      	ldr	r3, [r3, #0]
 80038aa:	b29b      	uxth	r3, r3
 80038ac:	4618      	mov	r0, r3
 80038ae:	683b      	ldr	r3, [r7, #0]
 80038b0:	685a      	ldr	r2, [r3, #4]
 80038b2:	4613      	mov	r3, r2
 80038b4:	009b      	lsls	r3, r3, #2
 80038b6:	4413      	add	r3, r2
 80038b8:	3b23      	subs	r3, #35	; 0x23
 80038ba:	fa00 f203 	lsl.w	r2, r0, r3
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	631a      	str	r2, [r3, #48]	; 0x30
 80038c6:	e023      	b.n	8003910 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038ce:	683b      	ldr	r3, [r7, #0]
 80038d0:	685a      	ldr	r2, [r3, #4]
 80038d2:	4613      	mov	r3, r2
 80038d4:	009b      	lsls	r3, r3, #2
 80038d6:	4413      	add	r3, r2
 80038d8:	3b41      	subs	r3, #65	; 0x41
 80038da:	221f      	movs	r2, #31
 80038dc:	fa02 f303 	lsl.w	r3, r2, r3
 80038e0:	43da      	mvns	r2, r3
 80038e2:	687b      	ldr	r3, [r7, #4]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	400a      	ands	r2, r1
 80038e8:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 80038ea:	687b      	ldr	r3, [r7, #4]
 80038ec:	681b      	ldr	r3, [r3, #0]
 80038ee:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038f0:	683b      	ldr	r3, [r7, #0]
 80038f2:	681b      	ldr	r3, [r3, #0]
 80038f4:	b29b      	uxth	r3, r3
 80038f6:	4618      	mov	r0, r3
 80038f8:	683b      	ldr	r3, [r7, #0]
 80038fa:	685a      	ldr	r2, [r3, #4]
 80038fc:	4613      	mov	r3, r2
 80038fe:	009b      	lsls	r3, r3, #2
 8003900:	4413      	add	r3, r2
 8003902:	3b41      	subs	r3, #65	; 0x41
 8003904:	fa00 f203 	lsl.w	r2, r0, r3
 8003908:	687b      	ldr	r3, [r7, #4]
 800390a:	681b      	ldr	r3, [r3, #0]
 800390c:	430a      	orrs	r2, r1
 800390e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003910:	687b      	ldr	r3, [r7, #4]
 8003912:	681b      	ldr	r3, [r3, #0]
 8003914:	4a30      	ldr	r2, [pc, #192]	; (80039d8 <HAL_ADC_ConfigChannel+0x29c>)
 8003916:	4293      	cmp	r3, r2
 8003918:	d10a      	bne.n	8003930 <HAL_ADC_ConfigChannel+0x1f4>
 800391a:	683b      	ldr	r3, [r7, #0]
 800391c:	681b      	ldr	r3, [r3, #0]
 800391e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003922:	d105      	bne.n	8003930 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003924:	4b2d      	ldr	r3, [pc, #180]	; (80039dc <HAL_ADC_ConfigChannel+0x2a0>)
 8003926:	685b      	ldr	r3, [r3, #4]
 8003928:	4a2c      	ldr	r2, [pc, #176]	; (80039dc <HAL_ADC_ConfigChannel+0x2a0>)
 800392a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800392e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003930:	687b      	ldr	r3, [r7, #4]
 8003932:	681b      	ldr	r3, [r3, #0]
 8003934:	4a28      	ldr	r2, [pc, #160]	; (80039d8 <HAL_ADC_ConfigChannel+0x29c>)
 8003936:	4293      	cmp	r3, r2
 8003938:	d10f      	bne.n	800395a <HAL_ADC_ConfigChannel+0x21e>
 800393a:	683b      	ldr	r3, [r7, #0]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	2b12      	cmp	r3, #18
 8003940:	d10b      	bne.n	800395a <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 8003942:	4b26      	ldr	r3, [pc, #152]	; (80039dc <HAL_ADC_ConfigChannel+0x2a0>)
 8003944:	685b      	ldr	r3, [r3, #4]
 8003946:	4a25      	ldr	r2, [pc, #148]	; (80039dc <HAL_ADC_ConfigChannel+0x2a0>)
 8003948:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800394c:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 800394e:	4b23      	ldr	r3, [pc, #140]	; (80039dc <HAL_ADC_ConfigChannel+0x2a0>)
 8003950:	685b      	ldr	r3, [r3, #4]
 8003952:	4a22      	ldr	r2, [pc, #136]	; (80039dc <HAL_ADC_ConfigChannel+0x2a0>)
 8003954:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8003958:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	681b      	ldr	r3, [r3, #0]
 800395e:	4a1e      	ldr	r2, [pc, #120]	; (80039d8 <HAL_ADC_ConfigChannel+0x29c>)
 8003960:	4293      	cmp	r3, r2
 8003962:	d12b      	bne.n	80039bc <HAL_ADC_ConfigChannel+0x280>
 8003964:	683b      	ldr	r3, [r7, #0]
 8003966:	681b      	ldr	r3, [r3, #0]
 8003968:	4a1a      	ldr	r2, [pc, #104]	; (80039d4 <HAL_ADC_ConfigChannel+0x298>)
 800396a:	4293      	cmp	r3, r2
 800396c:	d003      	beq.n	8003976 <HAL_ADC_ConfigChannel+0x23a>
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	681b      	ldr	r3, [r3, #0]
 8003972:	2b11      	cmp	r3, #17
 8003974:	d122      	bne.n	80039bc <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 8003976:	4b19      	ldr	r3, [pc, #100]	; (80039dc <HAL_ADC_ConfigChannel+0x2a0>)
 8003978:	685b      	ldr	r3, [r3, #4]
 800397a:	4a18      	ldr	r2, [pc, #96]	; (80039dc <HAL_ADC_ConfigChannel+0x2a0>)
 800397c:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 8003980:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 8003982:	4b16      	ldr	r3, [pc, #88]	; (80039dc <HAL_ADC_ConfigChannel+0x2a0>)
 8003984:	685b      	ldr	r3, [r3, #4]
 8003986:	4a15      	ldr	r2, [pc, #84]	; (80039dc <HAL_ADC_ConfigChannel+0x2a0>)
 8003988:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800398c:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4a10      	ldr	r2, [pc, #64]	; (80039d4 <HAL_ADC_ConfigChannel+0x298>)
 8003994:	4293      	cmp	r3, r2
 8003996:	d111      	bne.n	80039bc <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 8003998:	4b11      	ldr	r3, [pc, #68]	; (80039e0 <HAL_ADC_ConfigChannel+0x2a4>)
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	4a11      	ldr	r2, [pc, #68]	; (80039e4 <HAL_ADC_ConfigChannel+0x2a8>)
 800399e:	fba2 2303 	umull	r2, r3, r2, r3
 80039a2:	0c9a      	lsrs	r2, r3, #18
 80039a4:	4613      	mov	r3, r2
 80039a6:	009b      	lsls	r3, r3, #2
 80039a8:	4413      	add	r3, r2
 80039aa:	005b      	lsls	r3, r3, #1
 80039ac:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80039ae:	e002      	b.n	80039b6 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	3b01      	subs	r3, #1
 80039b4:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	2b00      	cmp	r3, #0
 80039ba:	d1f9      	bne.n	80039b0 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 80039bc:	687b      	ldr	r3, [r7, #4]
 80039be:	2200      	movs	r2, #0
 80039c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 80039c4:	2300      	movs	r3, #0
}
 80039c6:	4618      	mov	r0, r3
 80039c8:	3714      	adds	r7, #20
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr
 80039d2:	bf00      	nop
 80039d4:	10000012 	.word	0x10000012
 80039d8:	40012000 	.word	0x40012000
 80039dc:	40012300 	.word	0x40012300
 80039e0:	20000000 	.word	0x20000000
 80039e4:	431bde83 	.word	0x431bde83

080039e8 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 80039e8:	b480      	push	{r7}
 80039ea:	b083      	sub	sp, #12
 80039ec:	af00      	add	r7, sp, #0
 80039ee:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 80039f0:	4b78      	ldr	r3, [pc, #480]	; (8003bd4 <ADC_Init+0x1ec>)
 80039f2:	685b      	ldr	r3, [r3, #4]
 80039f4:	4a77      	ldr	r2, [pc, #476]	; (8003bd4 <ADC_Init+0x1ec>)
 80039f6:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 80039fa:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 80039fc:	4b75      	ldr	r3, [pc, #468]	; (8003bd4 <ADC_Init+0x1ec>)
 80039fe:	685a      	ldr	r2, [r3, #4]
 8003a00:	687b      	ldr	r3, [r7, #4]
 8003a02:	685b      	ldr	r3, [r3, #4]
 8003a04:	4973      	ldr	r1, [pc, #460]	; (8003bd4 <ADC_Init+0x1ec>)
 8003a06:	4313      	orrs	r3, r2
 8003a08:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 8003a0a:	687b      	ldr	r3, [r7, #4]
 8003a0c:	681b      	ldr	r3, [r3, #0]
 8003a0e:	685a      	ldr	r2, [r3, #4]
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	681b      	ldr	r3, [r3, #0]
 8003a14:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003a18:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	6859      	ldr	r1, [r3, #4]
 8003a20:	687b      	ldr	r3, [r7, #4]
 8003a22:	691b      	ldr	r3, [r3, #16]
 8003a24:	021a      	lsls	r2, r3, #8
 8003a26:	687b      	ldr	r3, [r7, #4]
 8003a28:	681b      	ldr	r3, [r3, #0]
 8003a2a:	430a      	orrs	r2, r1
 8003a2c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 8003a2e:	687b      	ldr	r3, [r7, #4]
 8003a30:	681b      	ldr	r3, [r3, #0]
 8003a32:	685a      	ldr	r2, [r3, #4]
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	681b      	ldr	r3, [r3, #0]
 8003a38:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 8003a3c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	681b      	ldr	r3, [r3, #0]
 8003a42:	6859      	ldr	r1, [r3, #4]
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	689a      	ldr	r2, [r3, #8]
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	430a      	orrs	r2, r1
 8003a4e:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 8003a50:	687b      	ldr	r3, [r7, #4]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	689a      	ldr	r2, [r3, #8]
 8003a56:	687b      	ldr	r3, [r7, #4]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003a5e:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	681b      	ldr	r3, [r3, #0]
 8003a64:	6899      	ldr	r1, [r3, #8]
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	68da      	ldr	r2, [r3, #12]
 8003a6a:	687b      	ldr	r3, [r7, #4]
 8003a6c:	681b      	ldr	r3, [r3, #0]
 8003a6e:	430a      	orrs	r2, r1
 8003a70:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 8003a72:	687b      	ldr	r3, [r7, #4]
 8003a74:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003a76:	4a58      	ldr	r2, [pc, #352]	; (8003bd8 <ADC_Init+0x1f0>)
 8003a78:	4293      	cmp	r3, r2
 8003a7a:	d022      	beq.n	8003ac2 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	689a      	ldr	r2, [r3, #8]
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	681b      	ldr	r3, [r3, #0]
 8003a86:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003a8a:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	6899      	ldr	r1, [r3, #8]
 8003a92:	687b      	ldr	r3, [r7, #4]
 8003a94:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	681b      	ldr	r3, [r3, #0]
 8003a9a:	430a      	orrs	r2, r1
 8003a9c:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	689a      	ldr	r2, [r3, #8]
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003aac:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	681b      	ldr	r3, [r3, #0]
 8003ab2:	6899      	ldr	r1, [r3, #8]
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	430a      	orrs	r2, r1
 8003abe:	609a      	str	r2, [r3, #8]
 8003ac0:	e00f      	b.n	8003ae2 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	681b      	ldr	r3, [r3, #0]
 8003ac6:	689a      	ldr	r2, [r3, #8]
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	681b      	ldr	r3, [r3, #0]
 8003acc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003ad0:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	681b      	ldr	r3, [r3, #0]
 8003ad6:	689a      	ldr	r2, [r3, #8]
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	681b      	ldr	r3, [r3, #0]
 8003adc:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003ae0:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	689a      	ldr	r2, [r3, #8]
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	f022 0202 	bic.w	r2, r2, #2
 8003af0:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	6899      	ldr	r1, [r3, #8]
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	699b      	ldr	r3, [r3, #24]
 8003afc:	005a      	lsls	r2, r3, #1
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	681b      	ldr	r3, [r3, #0]
 8003b02:	430a      	orrs	r2, r1
 8003b04:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003b06:	687b      	ldr	r3, [r7, #4]
 8003b08:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003b0c:	2b00      	cmp	r3, #0
 8003b0e:	d01b      	beq.n	8003b48 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	685a      	ldr	r2, [r3, #4]
 8003b16:	687b      	ldr	r3, [r7, #4]
 8003b18:	681b      	ldr	r3, [r3, #0]
 8003b1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003b1e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	685a      	ldr	r2, [r3, #4]
 8003b26:	687b      	ldr	r3, [r7, #4]
 8003b28:	681b      	ldr	r3, [r3, #0]
 8003b2a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 8003b2e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003b30:	687b      	ldr	r3, [r7, #4]
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	6859      	ldr	r1, [r3, #4]
 8003b36:	687b      	ldr	r3, [r7, #4]
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	3b01      	subs	r3, #1
 8003b3c:	035a      	lsls	r2, r3, #13
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	430a      	orrs	r2, r1
 8003b44:	605a      	str	r2, [r3, #4]
 8003b46:	e007      	b.n	8003b58 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 8003b48:	687b      	ldr	r3, [r7, #4]
 8003b4a:	681b      	ldr	r3, [r3, #0]
 8003b4c:	685a      	ldr	r2, [r3, #4]
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003b56:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	681b      	ldr	r3, [r3, #0]
 8003b5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003b5e:	687b      	ldr	r3, [r7, #4]
 8003b60:	681b      	ldr	r3, [r3, #0]
 8003b62:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 8003b66:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003b6e:	687b      	ldr	r3, [r7, #4]
 8003b70:	69db      	ldr	r3, [r3, #28]
 8003b72:	3b01      	subs	r3, #1
 8003b74:	051a      	lsls	r2, r3, #20
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	430a      	orrs	r2, r1
 8003b7c:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 8003b7e:	687b      	ldr	r3, [r7, #4]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	689a      	ldr	r2, [r3, #8]
 8003b84:	687b      	ldr	r3, [r7, #4]
 8003b86:	681b      	ldr	r3, [r3, #0]
 8003b88:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 8003b8c:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	6899      	ldr	r1, [r3, #8]
 8003b94:	687b      	ldr	r3, [r7, #4]
 8003b96:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8003b9a:	025a      	lsls	r2, r3, #9
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	430a      	orrs	r2, r1
 8003ba2:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	689a      	ldr	r2, [r3, #8]
 8003baa:	687b      	ldr	r3, [r7, #4]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003bb2:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003bb4:	687b      	ldr	r3, [r7, #4]
 8003bb6:	681b      	ldr	r3, [r3, #0]
 8003bb8:	6899      	ldr	r1, [r3, #8]
 8003bba:	687b      	ldr	r3, [r7, #4]
 8003bbc:	695b      	ldr	r3, [r3, #20]
 8003bbe:	029a      	lsls	r2, r3, #10
 8003bc0:	687b      	ldr	r3, [r7, #4]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	430a      	orrs	r2, r1
 8003bc6:	609a      	str	r2, [r3, #8]
}
 8003bc8:	bf00      	nop
 8003bca:	370c      	adds	r7, #12
 8003bcc:	46bd      	mov	sp, r7
 8003bce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bd2:	4770      	bx	lr
 8003bd4:	40012300 	.word	0x40012300
 8003bd8:	0f000001 	.word	0x0f000001

08003bdc <HAL_CAN_Init>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_CAN_Init(CAN_HandleTypeDef *hcan)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Check CAN handle */
  if (hcan == NULL)
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	2b00      	cmp	r3, #0
 8003be8:	d101      	bne.n	8003bee <HAL_CAN_Init+0x12>
  {
    return HAL_ERROR;
 8003bea:	2301      	movs	r3, #1
 8003bec:	e0ed      	b.n	8003dca <HAL_CAN_Init+0x1ee>
    /* Init the low level hardware: CLOCK, NVIC */
    hcan->MspInitCallback(hcan);
  }

#else
  if (hcan->State == HAL_CAN_STATE_RESET)
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	f893 3020 	ldrb.w	r3, [r3, #32]
 8003bf4:	b2db      	uxtb	r3, r3
 8003bf6:	2b00      	cmp	r3, #0
 8003bf8:	d102      	bne.n	8003c00 <HAL_CAN_Init+0x24>
  {
    /* Init the low level hardware: CLOCK, NVIC */
    HAL_CAN_MspInit(hcan);
 8003bfa:	6878      	ldr	r0, [r7, #4]
 8003bfc:	f7fc fed2 	bl	80009a4 <HAL_CAN_MspInit>
  }
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */

  /* Request initialisation */
  SET_BIT(hcan->Instance->MCR, CAN_MCR_INRQ);
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	681a      	ldr	r2, [r3, #0]
 8003c06:	687b      	ldr	r3, [r7, #4]
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	f042 0201 	orr.w	r2, r2, #1
 8003c0e:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c10:	f7ff fc14 	bl	800343c <HAL_GetTick>
 8003c14:	60f8      	str	r0, [r7, #12]

  /* Wait initialisation acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003c16:	e012      	b.n	8003c3e <HAL_CAN_Init+0x62>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003c18:	f7ff fc10 	bl	800343c <HAL_GetTick>
 8003c1c:	4602      	mov	r2, r0
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	1ad3      	subs	r3, r2, r3
 8003c22:	2b0a      	cmp	r3, #10
 8003c24:	d90b      	bls.n	8003c3e <HAL_CAN_Init+0x62>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003c26:	687b      	ldr	r3, [r7, #4]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c2a:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003c2e:	687b      	ldr	r3, [r7, #4]
 8003c30:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2205      	movs	r2, #5
 8003c36:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003c3a:	2301      	movs	r3, #1
 8003c3c:	e0c5      	b.n	8003dca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_INAK) == 0U)
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	685b      	ldr	r3, [r3, #4]
 8003c44:	f003 0301 	and.w	r3, r3, #1
 8003c48:	2b00      	cmp	r3, #0
 8003c4a:	d0e5      	beq.n	8003c18 <HAL_CAN_Init+0x3c>
    }
  }

  /* Exit from sleep mode */
  CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_SLEEP);
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	681a      	ldr	r2, [r3, #0]
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f022 0202 	bic.w	r2, r2, #2
 8003c5a:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003c5c:	f7ff fbee 	bl	800343c <HAL_GetTick>
 8003c60:	60f8      	str	r0, [r7, #12]

  /* Check Sleep mode leave acknowledge */
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003c62:	e012      	b.n	8003c8a <HAL_CAN_Init+0xae>
  {
    if ((HAL_GetTick() - tickstart) > CAN_TIMEOUT_VALUE)
 8003c64:	f7ff fbea 	bl	800343c <HAL_GetTick>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	1ad3      	subs	r3, r2, r3
 8003c6e:	2b0a      	cmp	r3, #10
 8003c70:	d90b      	bls.n	8003c8a <HAL_CAN_Init+0xae>
    {
      /* Update error code */
      hcan->ErrorCode |= HAL_CAN_ERROR_TIMEOUT;
 8003c72:	687b      	ldr	r3, [r7, #4]
 8003c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003c76:	f443 3200 	orr.w	r2, r3, #131072	; 0x20000
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Change CAN state */
      hcan->State = HAL_CAN_STATE_ERROR;
 8003c7e:	687b      	ldr	r3, [r7, #4]
 8003c80:	2205      	movs	r2, #5
 8003c82:	f883 2020 	strb.w	r2, [r3, #32]

      return HAL_ERROR;
 8003c86:	2301      	movs	r3, #1
 8003c88:	e09f      	b.n	8003dca <HAL_CAN_Init+0x1ee>
  while ((hcan->Instance->MSR & CAN_MSR_SLAK) != 0U)
 8003c8a:	687b      	ldr	r3, [r7, #4]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	685b      	ldr	r3, [r3, #4]
 8003c90:	f003 0302 	and.w	r3, r3, #2
 8003c94:	2b00      	cmp	r3, #0
 8003c96:	d1e5      	bne.n	8003c64 <HAL_CAN_Init+0x88>
    }
  }

  /* Set the time triggered communication mode */
  if (hcan->Init.TimeTriggeredMode == ENABLE)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	7e1b      	ldrb	r3, [r3, #24]
 8003c9c:	2b01      	cmp	r3, #1
 8003c9e:	d108      	bne.n	8003cb2 <HAL_CAN_Init+0xd6>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	681a      	ldr	r2, [r3, #0]
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003cae:	601a      	str	r2, [r3, #0]
 8003cb0:	e007      	b.n	8003cc2 <HAL_CAN_Init+0xe6>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TTCM);
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	681b      	ldr	r3, [r3, #0]
 8003cb6:	681a      	ldr	r2, [r3, #0]
 8003cb8:	687b      	ldr	r3, [r7, #4]
 8003cba:	681b      	ldr	r3, [r3, #0]
 8003cbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003cc0:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic bus-off management */
  if (hcan->Init.AutoBusOff == ENABLE)
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	7e5b      	ldrb	r3, [r3, #25]
 8003cc6:	2b01      	cmp	r3, #1
 8003cc8:	d108      	bne.n	8003cdc <HAL_CAN_Init+0x100>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003cca:	687b      	ldr	r3, [r7, #4]
 8003ccc:	681b      	ldr	r3, [r3, #0]
 8003cce:	681a      	ldr	r2, [r3, #0]
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	681b      	ldr	r3, [r3, #0]
 8003cd4:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003cd8:	601a      	str	r2, [r3, #0]
 8003cda:	e007      	b.n	8003cec <HAL_CAN_Init+0x110>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_ABOM);
 8003cdc:	687b      	ldr	r3, [r7, #4]
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	681a      	ldr	r2, [r3, #0]
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003cea:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic wake-up mode */
  if (hcan->Init.AutoWakeUp == ENABLE)
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	7e9b      	ldrb	r3, [r3, #26]
 8003cf0:	2b01      	cmp	r3, #1
 8003cf2:	d108      	bne.n	8003d06 <HAL_CAN_Init+0x12a>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	681b      	ldr	r3, [r3, #0]
 8003cf8:	681a      	ldr	r2, [r3, #0]
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	681b      	ldr	r3, [r3, #0]
 8003cfe:	f042 0220 	orr.w	r2, r2, #32
 8003d02:	601a      	str	r2, [r3, #0]
 8003d04:	e007      	b.n	8003d16 <HAL_CAN_Init+0x13a>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_AWUM);
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	687b      	ldr	r3, [r7, #4]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f022 0220 	bic.w	r2, r2, #32
 8003d14:	601a      	str	r2, [r3, #0]
  }

  /* Set the automatic retransmission */
  if (hcan->Init.AutoRetransmission == ENABLE)
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	7edb      	ldrb	r3, [r3, #27]
 8003d1a:	2b01      	cmp	r3, #1
 8003d1c:	d108      	bne.n	8003d30 <HAL_CAN_Init+0x154>
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	681a      	ldr	r2, [r3, #0]
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	f022 0210 	bic.w	r2, r2, #16
 8003d2c:	601a      	str	r2, [r3, #0]
 8003d2e:	e007      	b.n	8003d40 <HAL_CAN_Init+0x164>
  }
  else
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_NART);
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	681b      	ldr	r3, [r3, #0]
 8003d34:	681a      	ldr	r2, [r3, #0]
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	f042 0210 	orr.w	r2, r2, #16
 8003d3e:	601a      	str	r2, [r3, #0]
  }

  /* Set the receive FIFO locked mode */
  if (hcan->Init.ReceiveFifoLocked == ENABLE)
 8003d40:	687b      	ldr	r3, [r7, #4]
 8003d42:	7f1b      	ldrb	r3, [r3, #28]
 8003d44:	2b01      	cmp	r3, #1
 8003d46:	d108      	bne.n	8003d5a <HAL_CAN_Init+0x17e>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	681a      	ldr	r2, [r3, #0]
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	681b      	ldr	r3, [r3, #0]
 8003d52:	f042 0208 	orr.w	r2, r2, #8
 8003d56:	601a      	str	r2, [r3, #0]
 8003d58:	e007      	b.n	8003d6a <HAL_CAN_Init+0x18e>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_RFLM);
 8003d5a:	687b      	ldr	r3, [r7, #4]
 8003d5c:	681b      	ldr	r3, [r3, #0]
 8003d5e:	681a      	ldr	r2, [r3, #0]
 8003d60:	687b      	ldr	r3, [r7, #4]
 8003d62:	681b      	ldr	r3, [r3, #0]
 8003d64:	f022 0208 	bic.w	r2, r2, #8
 8003d68:	601a      	str	r2, [r3, #0]
  }

  /* Set the transmit FIFO priority */
  if (hcan->Init.TransmitFifoPriority == ENABLE)
 8003d6a:	687b      	ldr	r3, [r7, #4]
 8003d6c:	7f5b      	ldrb	r3, [r3, #29]
 8003d6e:	2b01      	cmp	r3, #1
 8003d70:	d108      	bne.n	8003d84 <HAL_CAN_Init+0x1a8>
  {
    SET_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	681a      	ldr	r2, [r3, #0]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f042 0204 	orr.w	r2, r2, #4
 8003d80:	601a      	str	r2, [r3, #0]
 8003d82:	e007      	b.n	8003d94 <HAL_CAN_Init+0x1b8>
  }
  else
  {
    CLEAR_BIT(hcan->Instance->MCR, CAN_MCR_TXFP);
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	681b      	ldr	r3, [r3, #0]
 8003d88:	681a      	ldr	r2, [r3, #0]
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	f022 0204 	bic.w	r2, r2, #4
 8003d92:	601a      	str	r2, [r3, #0]
  }

  /* Set the bit timing register */
  WRITE_REG(hcan->Instance->BTR, (uint32_t)(hcan->Init.Mode           |
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	689a      	ldr	r2, [r3, #8]
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	68db      	ldr	r3, [r3, #12]
 8003d9c:	431a      	orrs	r2, r3
 8003d9e:	687b      	ldr	r3, [r7, #4]
 8003da0:	691b      	ldr	r3, [r3, #16]
 8003da2:	431a      	orrs	r2, r3
 8003da4:	687b      	ldr	r3, [r7, #4]
 8003da6:	695b      	ldr	r3, [r3, #20]
 8003da8:	ea42 0103 	orr.w	r1, r2, r3
 8003dac:	687b      	ldr	r3, [r7, #4]
 8003dae:	685b      	ldr	r3, [r3, #4]
 8003db0:	1e5a      	subs	r2, r3, #1
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	430a      	orrs	r2, r1
 8003db8:	61da      	str	r2, [r3, #28]
                                            hcan->Init.TimeSeg1       |
                                            hcan->Init.TimeSeg2       |
                                            (hcan->Init.Prescaler - 1U)));

  /* Initialize the error code */
  hcan->ErrorCode = HAL_CAN_ERROR_NONE;
 8003dba:	687b      	ldr	r3, [r7, #4]
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	625a      	str	r2, [r3, #36]	; 0x24

  /* Initialize the CAN state */
  hcan->State = HAL_CAN_STATE_READY;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	f883 2020 	strb.w	r2, [r3, #32]

  /* Return function status */
  return HAL_OK;
 8003dc8:	2300      	movs	r3, #0
}
 8003dca:	4618      	mov	r0, r3
 8003dcc:	3710      	adds	r7, #16
 8003dce:	46bd      	mov	sp, r7
 8003dd0:	bd80      	pop	{r7, pc}

08003dd2 <HAL_CAN_IRQHandler>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
void HAL_CAN_IRQHandler(CAN_HandleTypeDef *hcan)
{
 8003dd2:	b580      	push	{r7, lr}
 8003dd4:	b08a      	sub	sp, #40	; 0x28
 8003dd6:	af00      	add	r7, sp, #0
 8003dd8:	6078      	str	r0, [r7, #4]
  uint32_t errorcode = HAL_CAN_ERROR_NONE;
 8003dda:	2300      	movs	r3, #0
 8003ddc:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t interrupts = READ_REG(hcan->Instance->IER);
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	695b      	ldr	r3, [r3, #20]
 8003de4:	623b      	str	r3, [r7, #32]
  uint32_t msrflags = READ_REG(hcan->Instance->MSR);
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	685b      	ldr	r3, [r3, #4]
 8003dec:	61fb      	str	r3, [r7, #28]
  uint32_t tsrflags = READ_REG(hcan->Instance->TSR);
 8003dee:	687b      	ldr	r3, [r7, #4]
 8003df0:	681b      	ldr	r3, [r3, #0]
 8003df2:	689b      	ldr	r3, [r3, #8]
 8003df4:	61bb      	str	r3, [r7, #24]
  uint32_t rf0rflags = READ_REG(hcan->Instance->RF0R);
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	681b      	ldr	r3, [r3, #0]
 8003dfa:	68db      	ldr	r3, [r3, #12]
 8003dfc:	617b      	str	r3, [r7, #20]
  uint32_t rf1rflags = READ_REG(hcan->Instance->RF1R);
 8003dfe:	687b      	ldr	r3, [r7, #4]
 8003e00:	681b      	ldr	r3, [r3, #0]
 8003e02:	691b      	ldr	r3, [r3, #16]
 8003e04:	613b      	str	r3, [r7, #16]
  uint32_t esrflags = READ_REG(hcan->Instance->ESR);
 8003e06:	687b      	ldr	r3, [r7, #4]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	699b      	ldr	r3, [r3, #24]
 8003e0c:	60fb      	str	r3, [r7, #12]

  /* Transmit Mailbox empty interrupt management *****************************/
  if ((interrupts & CAN_IT_TX_MAILBOX_EMPTY) != 0U)
 8003e0e:	6a3b      	ldr	r3, [r7, #32]
 8003e10:	f003 0301 	and.w	r3, r3, #1
 8003e14:	2b00      	cmp	r3, #0
 8003e16:	d07c      	beq.n	8003f12 <HAL_CAN_IRQHandler+0x140>
  {
    /* Transmit Mailbox 0 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP0) != 0U)
 8003e18:	69bb      	ldr	r3, [r7, #24]
 8003e1a:	f003 0301 	and.w	r3, r3, #1
 8003e1e:	2b00      	cmp	r3, #0
 8003e20:	d023      	beq.n	8003e6a <HAL_CAN_IRQHandler+0x98>
    {
      /* Clear the Transmission Complete flag (and TXOK0,ALST0,TERR0 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP0);
 8003e22:	687b      	ldr	r3, [r7, #4]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	2201      	movs	r2, #1
 8003e28:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK0) != 0U)
 8003e2a:	69bb      	ldr	r3, [r7, #24]
 8003e2c:	f003 0302 	and.w	r3, r3, #2
 8003e30:	2b00      	cmp	r3, #0
 8003e32:	d003      	beq.n	8003e3c <HAL_CAN_IRQHandler+0x6a>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox0CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox0CompleteCallback(hcan);
 8003e34:	6878      	ldr	r0, [r7, #4]
 8003e36:	f000 f983 	bl	8004140 <HAL_CAN_TxMailbox0CompleteCallback>
 8003e3a:	e016      	b.n	8003e6a <HAL_CAN_IRQHandler+0x98>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST0) != 0U)
 8003e3c:	69bb      	ldr	r3, [r7, #24]
 8003e3e:	f003 0304 	and.w	r3, r3, #4
 8003e42:	2b00      	cmp	r3, #0
 8003e44:	d004      	beq.n	8003e50 <HAL_CAN_IRQHandler+0x7e>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST0;
 8003e46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e48:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8003e4c:	627b      	str	r3, [r7, #36]	; 0x24
 8003e4e:	e00c      	b.n	8003e6a <HAL_CAN_IRQHandler+0x98>
        }
        else if ((tsrflags & CAN_TSR_TERR0) != 0U)
 8003e50:	69bb      	ldr	r3, [r7, #24]
 8003e52:	f003 0308 	and.w	r3, r3, #8
 8003e56:	2b00      	cmp	r3, #0
 8003e58:	d004      	beq.n	8003e64 <HAL_CAN_IRQHandler+0x92>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR0;
 8003e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e5c:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8003e60:	627b      	str	r3, [r7, #36]	; 0x24
 8003e62:	e002      	b.n	8003e6a <HAL_CAN_IRQHandler+0x98>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox0AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox0AbortCallback(hcan);
 8003e64:	6878      	ldr	r0, [r7, #4]
 8003e66:	f000 f989 	bl	800417c <HAL_CAN_TxMailbox0AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 1 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP1) != 0U)
 8003e6a:	69bb      	ldr	r3, [r7, #24]
 8003e6c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d024      	beq.n	8003ebe <HAL_CAN_IRQHandler+0xec>
    {
      /* Clear the Transmission Complete flag (and TXOK1,ALST1,TERR1 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP1);
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	681b      	ldr	r3, [r3, #0]
 8003e78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003e7c:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK1) != 0U)
 8003e7e:	69bb      	ldr	r3, [r7, #24]
 8003e80:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003e84:	2b00      	cmp	r3, #0
 8003e86:	d003      	beq.n	8003e90 <HAL_CAN_IRQHandler+0xbe>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox1CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox1CompleteCallback(hcan);
 8003e88:	6878      	ldr	r0, [r7, #4]
 8003e8a:	f000 f963 	bl	8004154 <HAL_CAN_TxMailbox1CompleteCallback>
 8003e8e:	e016      	b.n	8003ebe <HAL_CAN_IRQHandler+0xec>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST1) != 0U)
 8003e90:	69bb      	ldr	r3, [r7, #24]
 8003e92:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8003e96:	2b00      	cmp	r3, #0
 8003e98:	d004      	beq.n	8003ea4 <HAL_CAN_IRQHandler+0xd2>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST1;
 8003e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003e9c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8003ea0:	627b      	str	r3, [r7, #36]	; 0x24
 8003ea2:	e00c      	b.n	8003ebe <HAL_CAN_IRQHandler+0xec>
        }
        else if ((tsrflags & CAN_TSR_TERR1) != 0U)
 8003ea4:	69bb      	ldr	r3, [r7, #24]
 8003ea6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d004      	beq.n	8003eb8 <HAL_CAN_IRQHandler+0xe6>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR1;
 8003eae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003eb0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8003eb6:	e002      	b.n	8003ebe <HAL_CAN_IRQHandler+0xec>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox1AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox1AbortCallback(hcan);
 8003eb8:	6878      	ldr	r0, [r7, #4]
 8003eba:	f000 f969 	bl	8004190 <HAL_CAN_TxMailbox1AbortCallback>
        }
      }
    }

    /* Transmit Mailbox 2 management *****************************************/
    if ((tsrflags & CAN_TSR_RQCP2) != 0U)
 8003ebe:	69bb      	ldr	r3, [r7, #24]
 8003ec0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003ec4:	2b00      	cmp	r3, #0
 8003ec6:	d024      	beq.n	8003f12 <HAL_CAN_IRQHandler+0x140>
    {
      /* Clear the Transmission Complete flag (and TXOK2,ALST2,TERR2 bits) */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_RQCP2);
 8003ec8:	687b      	ldr	r3, [r7, #4]
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8003ed0:	609a      	str	r2, [r3, #8]

      if ((tsrflags & CAN_TSR_TXOK2) != 0U)
 8003ed2:	69bb      	ldr	r3, [r7, #24]
 8003ed4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d003      	beq.n	8003ee4 <HAL_CAN_IRQHandler+0x112>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
        /* Call registered callback*/
        hcan->TxMailbox2CompleteCallback(hcan);
#else
        /* Call weak (surcharged) callback */
        HAL_CAN_TxMailbox2CompleteCallback(hcan);
 8003edc:	6878      	ldr	r0, [r7, #4]
 8003ede:	f000 f943 	bl	8004168 <HAL_CAN_TxMailbox2CompleteCallback>
 8003ee2:	e016      	b.n	8003f12 <HAL_CAN_IRQHandler+0x140>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
      }
      else
      {
        if ((tsrflags & CAN_TSR_ALST2) != 0U)
 8003ee4:	69bb      	ldr	r3, [r7, #24]
 8003ee6:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003eea:	2b00      	cmp	r3, #0
 8003eec:	d004      	beq.n	8003ef8 <HAL_CAN_IRQHandler+0x126>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_ALST2;
 8003eee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003ef0:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003ef4:	627b      	str	r3, [r7, #36]	; 0x24
 8003ef6:	e00c      	b.n	8003f12 <HAL_CAN_IRQHandler+0x140>
        }
        else if ((tsrflags & CAN_TSR_TERR2) != 0U)
 8003ef8:	69bb      	ldr	r3, [r7, #24]
 8003efa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d004      	beq.n	8003f0c <HAL_CAN_IRQHandler+0x13a>
        {
          /* Update error code */
          errorcode |= HAL_CAN_ERROR_TX_TERR2;
 8003f02:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f04:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003f08:	627b      	str	r3, [r7, #36]	; 0x24
 8003f0a:	e002      	b.n	8003f12 <HAL_CAN_IRQHandler+0x140>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
          /* Call registered callback*/
          hcan->TxMailbox2AbortCallback(hcan);
#else
          /* Call weak (surcharged) callback */
          HAL_CAN_TxMailbox2AbortCallback(hcan);
 8003f0c:	6878      	ldr	r0, [r7, #4]
 8003f0e:	f000 f949 	bl	80041a4 <HAL_CAN_TxMailbox2AbortCallback>
      }
    }
  }

  /* Receive FIFO 0 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO0_OVERRUN) != 0U)
 8003f12:	6a3b      	ldr	r3, [r7, #32]
 8003f14:	f003 0308 	and.w	r3, r3, #8
 8003f18:	2b00      	cmp	r3, #0
 8003f1a:	d00c      	beq.n	8003f36 <HAL_CAN_IRQHandler+0x164>
  {
    if ((rf0rflags & CAN_RF0R_FOVR0) != 0U)
 8003f1c:	697b      	ldr	r3, [r7, #20]
 8003f1e:	f003 0310 	and.w	r3, r3, #16
 8003f22:	2b00      	cmp	r3, #0
 8003f24:	d007      	beq.n	8003f36 <HAL_CAN_IRQHandler+0x164>
    {
      /* Set CAN error code to Rx Fifo 0 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV0;
 8003f26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f28:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003f2c:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO0 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV0);
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	2210      	movs	r2, #16
 8003f34:	60da      	str	r2, [r3, #12]
    }
  }

  /* Receive FIFO 0 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO0_FULL) != 0U)
 8003f36:	6a3b      	ldr	r3, [r7, #32]
 8003f38:	f003 0304 	and.w	r3, r3, #4
 8003f3c:	2b00      	cmp	r3, #0
 8003f3e:	d00b      	beq.n	8003f58 <HAL_CAN_IRQHandler+0x186>
  {
    if ((rf0rflags & CAN_RF0R_FULL0) != 0U)
 8003f40:	697b      	ldr	r3, [r7, #20]
 8003f42:	f003 0308 	and.w	r3, r3, #8
 8003f46:	2b00      	cmp	r3, #0
 8003f48:	d006      	beq.n	8003f58 <HAL_CAN_IRQHandler+0x186>
    {
      /* Clear FIFO 0 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF0);
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	681b      	ldr	r3, [r3, #0]
 8003f4e:	2208      	movs	r2, #8
 8003f50:	60da      	str	r2, [r3, #12]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0FullCallback(hcan);
 8003f52:	6878      	ldr	r0, [r7, #4]
 8003f54:	f000 f93a 	bl	80041cc <HAL_CAN_RxFifo0FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 0 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO0_MSG_PENDING) != 0U)
 8003f58:	6a3b      	ldr	r3, [r7, #32]
 8003f5a:	f003 0302 	and.w	r3, r3, #2
 8003f5e:	2b00      	cmp	r3, #0
 8003f60:	d009      	beq.n	8003f76 <HAL_CAN_IRQHandler+0x1a4>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF0R & CAN_RF0R_FMP0) != 0U)
 8003f62:	687b      	ldr	r3, [r7, #4]
 8003f64:	681b      	ldr	r3, [r3, #0]
 8003f66:	68db      	ldr	r3, [r3, #12]
 8003f68:	f003 0303 	and.w	r3, r3, #3
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d002      	beq.n	8003f76 <HAL_CAN_IRQHandler+0x1a4>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo0MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo0MsgPendingCallback(hcan);
 8003f70:	6878      	ldr	r0, [r7, #4]
 8003f72:	f000 f921 	bl	80041b8 <HAL_CAN_RxFifo0MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 overrun interrupt management *****************************/
  if ((interrupts & CAN_IT_RX_FIFO1_OVERRUN) != 0U)
 8003f76:	6a3b      	ldr	r3, [r7, #32]
 8003f78:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003f7c:	2b00      	cmp	r3, #0
 8003f7e:	d00c      	beq.n	8003f9a <HAL_CAN_IRQHandler+0x1c8>
  {
    if ((rf1rflags & CAN_RF1R_FOVR1) != 0U)
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	f003 0310 	and.w	r3, r3, #16
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d007      	beq.n	8003f9a <HAL_CAN_IRQHandler+0x1c8>
    {
      /* Set CAN error code to Rx Fifo 1 overrun error */
      errorcode |= HAL_CAN_ERROR_RX_FOV1;
 8003f8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003f8c:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003f90:	627b      	str	r3, [r7, #36]	; 0x24

      /* Clear FIFO1 Overrun Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FOV1);
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	2210      	movs	r2, #16
 8003f98:	611a      	str	r2, [r3, #16]
    }
  }

  /* Receive FIFO 1 full interrupt management ********************************/
  if ((interrupts & CAN_IT_RX_FIFO1_FULL) != 0U)
 8003f9a:	6a3b      	ldr	r3, [r7, #32]
 8003f9c:	f003 0320 	and.w	r3, r3, #32
 8003fa0:	2b00      	cmp	r3, #0
 8003fa2:	d00b      	beq.n	8003fbc <HAL_CAN_IRQHandler+0x1ea>
  {
    if ((rf1rflags & CAN_RF1R_FULL1) != 0U)
 8003fa4:	693b      	ldr	r3, [r7, #16]
 8003fa6:	f003 0308 	and.w	r3, r3, #8
 8003faa:	2b00      	cmp	r3, #0
 8003fac:	d006      	beq.n	8003fbc <HAL_CAN_IRQHandler+0x1ea>
    {
      /* Clear FIFO 1 full Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_FF1);
 8003fae:	687b      	ldr	r3, [r7, #4]
 8003fb0:	681b      	ldr	r3, [r3, #0]
 8003fb2:	2208      	movs	r2, #8
 8003fb4:	611a      	str	r2, [r3, #16]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1FullCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1FullCallback(hcan);
 8003fb6:	6878      	ldr	r0, [r7, #4]
 8003fb8:	f000 f91c 	bl	80041f4 <HAL_CAN_RxFifo1FullCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Receive FIFO 1 message pending interrupt management *********************/
  if ((interrupts & CAN_IT_RX_FIFO1_MSG_PENDING) != 0U)
 8003fbc:	6a3b      	ldr	r3, [r7, #32]
 8003fbe:	f003 0310 	and.w	r3, r3, #16
 8003fc2:	2b00      	cmp	r3, #0
 8003fc4:	d009      	beq.n	8003fda <HAL_CAN_IRQHandler+0x208>
  {
    /* Check if message is still pending */
    if ((hcan->Instance->RF1R & CAN_RF1R_FMP1) != 0U)
 8003fc6:	687b      	ldr	r3, [r7, #4]
 8003fc8:	681b      	ldr	r3, [r3, #0]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	f003 0303 	and.w	r3, r3, #3
 8003fd0:	2b00      	cmp	r3, #0
 8003fd2:	d002      	beq.n	8003fda <HAL_CAN_IRQHandler+0x208>
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->RxFifo1MsgPendingCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_RxFifo1MsgPendingCallback(hcan);
 8003fd4:	6878      	ldr	r0, [r7, #4]
 8003fd6:	f000 f903 	bl	80041e0 <HAL_CAN_RxFifo1MsgPendingCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Sleep interrupt management *********************************************/
  if ((interrupts & CAN_IT_SLEEP_ACK) != 0U)
 8003fda:	6a3b      	ldr	r3, [r7, #32]
 8003fdc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003fe0:	2b00      	cmp	r3, #0
 8003fe2:	d00b      	beq.n	8003ffc <HAL_CAN_IRQHandler+0x22a>
  {
    if ((msrflags & CAN_MSR_SLAKI) != 0U)
 8003fe4:	69fb      	ldr	r3, [r7, #28]
 8003fe6:	f003 0310 	and.w	r3, r3, #16
 8003fea:	2b00      	cmp	r3, #0
 8003fec:	d006      	beq.n	8003ffc <HAL_CAN_IRQHandler+0x22a>
    {
      /* Clear Sleep interrupt Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_SLAKI);
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	2210      	movs	r2, #16
 8003ff4:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->SleepCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_SleepCallback(hcan);
 8003ff6:	6878      	ldr	r0, [r7, #4]
 8003ff8:	f000 f906 	bl	8004208 <HAL_CAN_SleepCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* WakeUp interrupt management *********************************************/
  if ((interrupts & CAN_IT_WAKEUP) != 0U)
 8003ffc:	6a3b      	ldr	r3, [r7, #32]
 8003ffe:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004002:	2b00      	cmp	r3, #0
 8004004:	d00b      	beq.n	800401e <HAL_CAN_IRQHandler+0x24c>
  {
    if ((msrflags & CAN_MSR_WKUI) != 0U)
 8004006:	69fb      	ldr	r3, [r7, #28]
 8004008:	f003 0308 	and.w	r3, r3, #8
 800400c:	2b00      	cmp	r3, #0
 800400e:	d006      	beq.n	800401e <HAL_CAN_IRQHandler+0x24c>
    {
      /* Clear WakeUp Flag */
      __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_WKU);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	2208      	movs	r2, #8
 8004016:	605a      	str	r2, [r3, #4]
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
      /* Call registered callback*/
      hcan->WakeUpFromRxMsgCallback(hcan);
#else
      /* Call weak (surcharged) callback */
      HAL_CAN_WakeUpFromRxMsgCallback(hcan);
 8004018:	6878      	ldr	r0, [r7, #4]
 800401a:	f000 f8ff 	bl	800421c <HAL_CAN_WakeUpFromRxMsgCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
    }
  }

  /* Error interrupts management *********************************************/
  if ((interrupts & CAN_IT_ERROR) != 0U)
 800401e:	6a3b      	ldr	r3, [r7, #32]
 8004020:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004024:	2b00      	cmp	r3, #0
 8004026:	d07b      	beq.n	8004120 <HAL_CAN_IRQHandler+0x34e>
  {
    if ((msrflags & CAN_MSR_ERRI) != 0U)
 8004028:	69fb      	ldr	r3, [r7, #28]
 800402a:	f003 0304 	and.w	r3, r3, #4
 800402e:	2b00      	cmp	r3, #0
 8004030:	d072      	beq.n	8004118 <HAL_CAN_IRQHandler+0x346>
    {
      /* Check Error Warning Flag */
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004032:	6a3b      	ldr	r3, [r7, #32]
 8004034:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004038:	2b00      	cmp	r3, #0
 800403a:	d008      	beq.n	800404e <HAL_CAN_IRQHandler+0x27c>
          ((esrflags & CAN_ESR_EWGF) != 0U))
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	f003 0301 	and.w	r3, r3, #1
      if (((interrupts & CAN_IT_ERROR_WARNING) != 0U) &&
 8004042:	2b00      	cmp	r3, #0
 8004044:	d003      	beq.n	800404e <HAL_CAN_IRQHandler+0x27c>
      {
        /* Set CAN error code to Error Warning */
        errorcode |= HAL_CAN_ERROR_EWG;
 8004046:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004048:	f043 0301 	orr.w	r3, r3, #1
 800404c:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Warning Flag as read-only */
      }

      /* Check Error Passive Flag */
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800404e:	6a3b      	ldr	r3, [r7, #32]
 8004050:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004054:	2b00      	cmp	r3, #0
 8004056:	d008      	beq.n	800406a <HAL_CAN_IRQHandler+0x298>
          ((esrflags & CAN_ESR_EPVF) != 0U))
 8004058:	68fb      	ldr	r3, [r7, #12]
 800405a:	f003 0302 	and.w	r3, r3, #2
      if (((interrupts & CAN_IT_ERROR_PASSIVE) != 0U) &&
 800405e:	2b00      	cmp	r3, #0
 8004060:	d003      	beq.n	800406a <HAL_CAN_IRQHandler+0x298>
      {
        /* Set CAN error code to Error Passive */
        errorcode |= HAL_CAN_ERROR_EPV;
 8004062:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004064:	f043 0302 	orr.w	r3, r3, #2
 8004068:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Passive Flag as read-only */
      }

      /* Check Bus-off Flag */
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800406a:	6a3b      	ldr	r3, [r7, #32]
 800406c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004070:	2b00      	cmp	r3, #0
 8004072:	d008      	beq.n	8004086 <HAL_CAN_IRQHandler+0x2b4>
          ((esrflags & CAN_ESR_BOFF) != 0U))
 8004074:	68fb      	ldr	r3, [r7, #12]
 8004076:	f003 0304 	and.w	r3, r3, #4
      if (((interrupts & CAN_IT_BUSOFF) != 0U) &&
 800407a:	2b00      	cmp	r3, #0
 800407c:	d003      	beq.n	8004086 <HAL_CAN_IRQHandler+0x2b4>
      {
        /* Set CAN error code to Bus-Off */
        errorcode |= HAL_CAN_ERROR_BOF;
 800407e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004080:	f043 0304 	orr.w	r3, r3, #4
 8004084:	627b      	str	r3, [r7, #36]	; 0x24

        /* No need for clear of Error Bus-Off as read-only */
      }

      /* Check Last Error Code Flag */
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004086:	6a3b      	ldr	r3, [r7, #32]
 8004088:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800408c:	2b00      	cmp	r3, #0
 800408e:	d043      	beq.n	8004118 <HAL_CAN_IRQHandler+0x346>
          ((esrflags & CAN_ESR_LEC) != 0U))
 8004090:	68fb      	ldr	r3, [r7, #12]
 8004092:	f003 0370 	and.w	r3, r3, #112	; 0x70
      if (((interrupts & CAN_IT_LAST_ERROR_CODE) != 0U) &&
 8004096:	2b00      	cmp	r3, #0
 8004098:	d03e      	beq.n	8004118 <HAL_CAN_IRQHandler+0x346>
      {
        switch (esrflags & CAN_ESR_LEC)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	f003 0370 	and.w	r3, r3, #112	; 0x70
 80040a0:	2b60      	cmp	r3, #96	; 0x60
 80040a2:	d02b      	beq.n	80040fc <HAL_CAN_IRQHandler+0x32a>
 80040a4:	2b60      	cmp	r3, #96	; 0x60
 80040a6:	d82e      	bhi.n	8004106 <HAL_CAN_IRQHandler+0x334>
 80040a8:	2b50      	cmp	r3, #80	; 0x50
 80040aa:	d022      	beq.n	80040f2 <HAL_CAN_IRQHandler+0x320>
 80040ac:	2b50      	cmp	r3, #80	; 0x50
 80040ae:	d82a      	bhi.n	8004106 <HAL_CAN_IRQHandler+0x334>
 80040b0:	2b40      	cmp	r3, #64	; 0x40
 80040b2:	d019      	beq.n	80040e8 <HAL_CAN_IRQHandler+0x316>
 80040b4:	2b40      	cmp	r3, #64	; 0x40
 80040b6:	d826      	bhi.n	8004106 <HAL_CAN_IRQHandler+0x334>
 80040b8:	2b30      	cmp	r3, #48	; 0x30
 80040ba:	d010      	beq.n	80040de <HAL_CAN_IRQHandler+0x30c>
 80040bc:	2b30      	cmp	r3, #48	; 0x30
 80040be:	d822      	bhi.n	8004106 <HAL_CAN_IRQHandler+0x334>
 80040c0:	2b10      	cmp	r3, #16
 80040c2:	d002      	beq.n	80040ca <HAL_CAN_IRQHandler+0x2f8>
 80040c4:	2b20      	cmp	r3, #32
 80040c6:	d005      	beq.n	80040d4 <HAL_CAN_IRQHandler+0x302>
          case (CAN_ESR_LEC_2 | CAN_ESR_LEC_1):
            /* Set CAN error code to CRC error */
            errorcode |= HAL_CAN_ERROR_CRC;
            break;
          default:
            break;
 80040c8:	e01d      	b.n	8004106 <HAL_CAN_IRQHandler+0x334>
            errorcode |= HAL_CAN_ERROR_STF;
 80040ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040cc:	f043 0308 	orr.w	r3, r3, #8
 80040d0:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040d2:	e019      	b.n	8004108 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_FOR;
 80040d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040d6:	f043 0310 	orr.w	r3, r3, #16
 80040da:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040dc:	e014      	b.n	8004108 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_ACK;
 80040de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040e0:	f043 0320 	orr.w	r3, r3, #32
 80040e4:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040e6:	e00f      	b.n	8004108 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BR;
 80040e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040ea:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80040ee:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040f0:	e00a      	b.n	8004108 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_BD;
 80040f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040f4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80040f8:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 80040fa:	e005      	b.n	8004108 <HAL_CAN_IRQHandler+0x336>
            errorcode |= HAL_CAN_ERROR_CRC;
 80040fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80040fe:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004102:	627b      	str	r3, [r7, #36]	; 0x24
            break;
 8004104:	e000      	b.n	8004108 <HAL_CAN_IRQHandler+0x336>
            break;
 8004106:	bf00      	nop
        }

        /* Clear Last error code Flag */
        CLEAR_BIT(hcan->Instance->ESR, CAN_ESR_LEC);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	699a      	ldr	r2, [r3, #24]
 800410e:	687b      	ldr	r3, [r7, #4]
 8004110:	681b      	ldr	r3, [r3, #0]
 8004112:	f022 0270 	bic.w	r2, r2, #112	; 0x70
 8004116:	619a      	str	r2, [r3, #24]
      }
    }

    /* Clear ERRI Flag */
    __HAL_CAN_CLEAR_FLAG(hcan, CAN_FLAG_ERRI);
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	2204      	movs	r2, #4
 800411e:	605a      	str	r2, [r3, #4]
  }

  /* Call the Error call Back in case of Errors */
  if (errorcode != HAL_CAN_ERROR_NONE)
 8004120:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004122:	2b00      	cmp	r3, #0
 8004124:	d008      	beq.n	8004138 <HAL_CAN_IRQHandler+0x366>
  {
    /* Update error code in handle */
    hcan->ErrorCode |= errorcode;
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800412a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800412c:	431a      	orrs	r2, r3
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	625a      	str	r2, [r3, #36]	; 0x24
#if USE_HAL_CAN_REGISTER_CALLBACKS == 1
    /* Call registered callback*/
    hcan->ErrorCallback(hcan);
#else
    /* Call weak (surcharged) callback */
    HAL_CAN_ErrorCallback(hcan);
 8004132:	6878      	ldr	r0, [r7, #4]
 8004134:	f000 f87c 	bl	8004230 <HAL_CAN_ErrorCallback>
#endif /* USE_HAL_CAN_REGISTER_CALLBACKS */
  }
}
 8004138:	bf00      	nop
 800413a:	3728      	adds	r7, #40	; 0x28
 800413c:	46bd      	mov	sp, r7
 800413e:	bd80      	pop	{r7, pc}

08004140 <HAL_CAN_TxMailbox0CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004140:	b480      	push	{r7}
 8004142:	b083      	sub	sp, #12
 8004144:	af00      	add	r7, sp, #0
 8004146:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0CompleteCallback could be implemented in the
            user file
   */
}
 8004148:	bf00      	nop
 800414a:	370c      	adds	r7, #12
 800414c:	46bd      	mov	sp, r7
 800414e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004152:	4770      	bx	lr

08004154 <HAL_CAN_TxMailbox1CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004154:	b480      	push	{r7}
 8004156:	b083      	sub	sp, #12
 8004158:	af00      	add	r7, sp, #0
 800415a:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1CompleteCallback could be implemented in the
            user file
   */
}
 800415c:	bf00      	nop
 800415e:	370c      	adds	r7, #12
 8004160:	46bd      	mov	sp, r7
 8004162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004166:	4770      	bx	lr

08004168 <HAL_CAN_TxMailbox2CompleteCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2CompleteCallback(CAN_HandleTypeDef *hcan)
{
 8004168:	b480      	push	{r7}
 800416a:	b083      	sub	sp, #12
 800416c:	af00      	add	r7, sp, #0
 800416e:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2CompleteCallback could be implemented in the
            user file
   */
}
 8004170:	bf00      	nop
 8004172:	370c      	adds	r7, #12
 8004174:	46bd      	mov	sp, r7
 8004176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800417a:	4770      	bx	lr

0800417c <HAL_CAN_TxMailbox0AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox0AbortCallback(CAN_HandleTypeDef *hcan)
{
 800417c:	b480      	push	{r7}
 800417e:	b083      	sub	sp, #12
 8004180:	af00      	add	r7, sp, #0
 8004182:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox0AbortCallback could be implemented in the
            user file
   */
}
 8004184:	bf00      	nop
 8004186:	370c      	adds	r7, #12
 8004188:	46bd      	mov	sp, r7
 800418a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800418e:	4770      	bx	lr

08004190 <HAL_CAN_TxMailbox1AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox1AbortCallback(CAN_HandleTypeDef *hcan)
{
 8004190:	b480      	push	{r7}
 8004192:	b083      	sub	sp, #12
 8004194:	af00      	add	r7, sp, #0
 8004196:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox1AbortCallback could be implemented in the
            user file
   */
}
 8004198:	bf00      	nop
 800419a:	370c      	adds	r7, #12
 800419c:	46bd      	mov	sp, r7
 800419e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041a2:	4770      	bx	lr

080041a4 <HAL_CAN_TxMailbox2AbortCallback>:
  * @param  hcan pointer to an CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_TxMailbox2AbortCallback(CAN_HandleTypeDef *hcan)
{
 80041a4:	b480      	push	{r7}
 80041a6:	b083      	sub	sp, #12
 80041a8:	af00      	add	r7, sp, #0
 80041aa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_TxMailbox2AbortCallback could be implemented in the
            user file
   */
}
 80041ac:	bf00      	nop
 80041ae:	370c      	adds	r7, #12
 80041b0:	46bd      	mov	sp, r7
 80041b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041b6:	4770      	bx	lr

080041b8 <HAL_CAN_RxFifo0MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80041b8:	b480      	push	{r7}
 80041ba:	b083      	sub	sp, #12
 80041bc:	af00      	add	r7, sp, #0
 80041be:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0MsgPendingCallback could be implemented in the
            user file
   */
}
 80041c0:	bf00      	nop
 80041c2:	370c      	adds	r7, #12
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <HAL_CAN_RxFifo0FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo0FullCallback(CAN_HandleTypeDef *hcan)
{
 80041cc:	b480      	push	{r7}
 80041ce:	b083      	sub	sp, #12
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo0FullCallback could be implemented in the user
            file
   */
}
 80041d4:	bf00      	nop
 80041d6:	370c      	adds	r7, #12
 80041d8:	46bd      	mov	sp, r7
 80041da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041de:	4770      	bx	lr

080041e0 <HAL_CAN_RxFifo1MsgPendingCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1MsgPendingCallback(CAN_HandleTypeDef *hcan)
{
 80041e0:	b480      	push	{r7}
 80041e2:	b083      	sub	sp, #12
 80041e4:	af00      	add	r7, sp, #0
 80041e6:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1MsgPendingCallback could be implemented in the
            user file
   */
}
 80041e8:	bf00      	nop
 80041ea:	370c      	adds	r7, #12
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr

080041f4 <HAL_CAN_RxFifo1FullCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_RxFifo1FullCallback(CAN_HandleTypeDef *hcan)
{
 80041f4:	b480      	push	{r7}
 80041f6:	b083      	sub	sp, #12
 80041f8:	af00      	add	r7, sp, #0
 80041fa:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_RxFifo1FullCallback could be implemented in the user
            file
   */
}
 80041fc:	bf00      	nop
 80041fe:	370c      	adds	r7, #12
 8004200:	46bd      	mov	sp, r7
 8004202:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004206:	4770      	bx	lr

08004208 <HAL_CAN_SleepCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_SleepCallback(CAN_HandleTypeDef *hcan)
{
 8004208:	b480      	push	{r7}
 800420a:	b083      	sub	sp, #12
 800420c:	af00      	add	r7, sp, #0
 800420e:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_SleepCallback could be implemented in the user file
   */
}
 8004210:	bf00      	nop
 8004212:	370c      	adds	r7, #12
 8004214:	46bd      	mov	sp, r7
 8004216:	f85d 7b04 	ldr.w	r7, [sp], #4
 800421a:	4770      	bx	lr

0800421c <HAL_CAN_WakeUpFromRxMsgCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_WakeUpFromRxMsgCallback(CAN_HandleTypeDef *hcan)
{
 800421c:	b480      	push	{r7}
 800421e:	b083      	sub	sp, #12
 8004220:	af00      	add	r7, sp, #0
 8004222:	6078      	str	r0, [r7, #4]

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_WakeUpFromRxMsgCallback could be implemented in the
            user file
   */
}
 8004224:	bf00      	nop
 8004226:	370c      	adds	r7, #12
 8004228:	46bd      	mov	sp, r7
 800422a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422e:	4770      	bx	lr

08004230 <HAL_CAN_ErrorCallback>:
  * @param  hcan pointer to a CAN_HandleTypeDef structure that contains
  *         the configuration information for the specified CAN.
  * @retval None
  */
__weak void HAL_CAN_ErrorCallback(CAN_HandleTypeDef *hcan)
{
 8004230:	b480      	push	{r7}
 8004232:	b083      	sub	sp, #12
 8004234:	af00      	add	r7, sp, #0
 8004236:	6078      	str	r0, [r7, #4]
  UNUSED(hcan);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_CAN_ErrorCallback could be implemented in the user file
   */
}
 8004238:	bf00      	nop
 800423a:	370c      	adds	r7, #12
 800423c:	46bd      	mov	sp, r7
 800423e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004242:	4770      	bx	lr

08004244 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004244:	b480      	push	{r7}
 8004246:	b085      	sub	sp, #20
 8004248:	af00      	add	r7, sp, #0
 800424a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	f003 0307 	and.w	r3, r3, #7
 8004252:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8004254:	4b0b      	ldr	r3, [pc, #44]	; (8004284 <__NVIC_SetPriorityGrouping+0x40>)
 8004256:	68db      	ldr	r3, [r3, #12]
 8004258:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800425a:	68ba      	ldr	r2, [r7, #8]
 800425c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004260:	4013      	ands	r3, r2
 8004262:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 800426c:	4b06      	ldr	r3, [pc, #24]	; (8004288 <__NVIC_SetPriorityGrouping+0x44>)
 800426e:	4313      	orrs	r3, r2
 8004270:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8004272:	4a04      	ldr	r2, [pc, #16]	; (8004284 <__NVIC_SetPriorityGrouping+0x40>)
 8004274:	68bb      	ldr	r3, [r7, #8]
 8004276:	60d3      	str	r3, [r2, #12]
}
 8004278:	bf00      	nop
 800427a:	3714      	adds	r7, #20
 800427c:	46bd      	mov	sp, r7
 800427e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004282:	4770      	bx	lr
 8004284:	e000ed00 	.word	0xe000ed00
 8004288:	05fa0000 	.word	0x05fa0000

0800428c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800428c:	b480      	push	{r7}
 800428e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004290:	4b04      	ldr	r3, [pc, #16]	; (80042a4 <__NVIC_GetPriorityGrouping+0x18>)
 8004292:	68db      	ldr	r3, [r3, #12]
 8004294:	0a1b      	lsrs	r3, r3, #8
 8004296:	f003 0307 	and.w	r3, r3, #7
}
 800429a:	4618      	mov	r0, r3
 800429c:	46bd      	mov	sp, r7
 800429e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a2:	4770      	bx	lr
 80042a4:	e000ed00 	.word	0xe000ed00

080042a8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80042a8:	b480      	push	{r7}
 80042aa:	b083      	sub	sp, #12
 80042ac:	af00      	add	r7, sp, #0
 80042ae:	4603      	mov	r3, r0
 80042b0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042b2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	db0b      	blt.n	80042d2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80042ba:	79fb      	ldrb	r3, [r7, #7]
 80042bc:	f003 021f 	and.w	r2, r3, #31
 80042c0:	4907      	ldr	r1, [pc, #28]	; (80042e0 <__NVIC_EnableIRQ+0x38>)
 80042c2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042c6:	095b      	lsrs	r3, r3, #5
 80042c8:	2001      	movs	r0, #1
 80042ca:	fa00 f202 	lsl.w	r2, r0, r2
 80042ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80042d2:	bf00      	nop
 80042d4:	370c      	adds	r7, #12
 80042d6:	46bd      	mov	sp, r7
 80042d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042dc:	4770      	bx	lr
 80042de:	bf00      	nop
 80042e0:	e000e100 	.word	0xe000e100

080042e4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80042e4:	b480      	push	{r7}
 80042e6:	b083      	sub	sp, #12
 80042e8:	af00      	add	r7, sp, #0
 80042ea:	4603      	mov	r3, r0
 80042ec:	6039      	str	r1, [r7, #0]
 80042ee:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80042f0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	db0a      	blt.n	800430e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80042f8:	683b      	ldr	r3, [r7, #0]
 80042fa:	b2da      	uxtb	r2, r3
 80042fc:	490c      	ldr	r1, [pc, #48]	; (8004330 <__NVIC_SetPriority+0x4c>)
 80042fe:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004302:	0112      	lsls	r2, r2, #4
 8004304:	b2d2      	uxtb	r2, r2
 8004306:	440b      	add	r3, r1
 8004308:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800430c:	e00a      	b.n	8004324 <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800430e:	683b      	ldr	r3, [r7, #0]
 8004310:	b2da      	uxtb	r2, r3
 8004312:	4908      	ldr	r1, [pc, #32]	; (8004334 <__NVIC_SetPriority+0x50>)
 8004314:	79fb      	ldrb	r3, [r7, #7]
 8004316:	f003 030f 	and.w	r3, r3, #15
 800431a:	3b04      	subs	r3, #4
 800431c:	0112      	lsls	r2, r2, #4
 800431e:	b2d2      	uxtb	r2, r2
 8004320:	440b      	add	r3, r1
 8004322:	761a      	strb	r2, [r3, #24]
}
 8004324:	bf00      	nop
 8004326:	370c      	adds	r7, #12
 8004328:	46bd      	mov	sp, r7
 800432a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800432e:	4770      	bx	lr
 8004330:	e000e100 	.word	0xe000e100
 8004334:	e000ed00 	.word	0xe000ed00

08004338 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004338:	b480      	push	{r7}
 800433a:	b089      	sub	sp, #36	; 0x24
 800433c:	af00      	add	r7, sp, #0
 800433e:	60f8      	str	r0, [r7, #12]
 8004340:	60b9      	str	r1, [r7, #8]
 8004342:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004344:	68fb      	ldr	r3, [r7, #12]
 8004346:	f003 0307 	and.w	r3, r3, #7
 800434a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800434c:	69fb      	ldr	r3, [r7, #28]
 800434e:	f1c3 0307 	rsb	r3, r3, #7
 8004352:	2b04      	cmp	r3, #4
 8004354:	bf28      	it	cs
 8004356:	2304      	movcs	r3, #4
 8004358:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800435a:	69fb      	ldr	r3, [r7, #28]
 800435c:	3304      	adds	r3, #4
 800435e:	2b06      	cmp	r3, #6
 8004360:	d902      	bls.n	8004368 <NVIC_EncodePriority+0x30>
 8004362:	69fb      	ldr	r3, [r7, #28]
 8004364:	3b03      	subs	r3, #3
 8004366:	e000      	b.n	800436a <NVIC_EncodePriority+0x32>
 8004368:	2300      	movs	r3, #0
 800436a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800436c:	f04f 32ff 	mov.w	r2, #4294967295
 8004370:	69bb      	ldr	r3, [r7, #24]
 8004372:	fa02 f303 	lsl.w	r3, r2, r3
 8004376:	43da      	mvns	r2, r3
 8004378:	68bb      	ldr	r3, [r7, #8]
 800437a:	401a      	ands	r2, r3
 800437c:	697b      	ldr	r3, [r7, #20]
 800437e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004380:	f04f 31ff 	mov.w	r1, #4294967295
 8004384:	697b      	ldr	r3, [r7, #20]
 8004386:	fa01 f303 	lsl.w	r3, r1, r3
 800438a:	43d9      	mvns	r1, r3
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004390:	4313      	orrs	r3, r2
         );
}
 8004392:	4618      	mov	r0, r3
 8004394:	3724      	adds	r7, #36	; 0x24
 8004396:	46bd      	mov	sp, r7
 8004398:	f85d 7b04 	ldr.w	r7, [sp], #4
 800439c:	4770      	bx	lr

0800439e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800439e:	b580      	push	{r7, lr}
 80043a0:	b082      	sub	sp, #8
 80043a2:	af00      	add	r7, sp, #0
 80043a4:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80043a6:	6878      	ldr	r0, [r7, #4]
 80043a8:	f7ff ff4c 	bl	8004244 <__NVIC_SetPriorityGrouping>
}
 80043ac:	bf00      	nop
 80043ae:	3708      	adds	r7, #8
 80043b0:	46bd      	mov	sp, r7
 80043b2:	bd80      	pop	{r7, pc}

080043b4 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80043b4:	b580      	push	{r7, lr}
 80043b6:	b086      	sub	sp, #24
 80043b8:	af00      	add	r7, sp, #0
 80043ba:	4603      	mov	r3, r0
 80043bc:	60b9      	str	r1, [r7, #8]
 80043be:	607a      	str	r2, [r7, #4]
 80043c0:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 80043c2:	2300      	movs	r3, #0
 80043c4:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80043c6:	f7ff ff61 	bl	800428c <__NVIC_GetPriorityGrouping>
 80043ca:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	68b9      	ldr	r1, [r7, #8]
 80043d0:	6978      	ldr	r0, [r7, #20]
 80043d2:	f7ff ffb1 	bl	8004338 <NVIC_EncodePriority>
 80043d6:	4602      	mov	r2, r0
 80043d8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80043dc:	4611      	mov	r1, r2
 80043de:	4618      	mov	r0, r3
 80043e0:	f7ff ff80 	bl	80042e4 <__NVIC_SetPriority>
}
 80043e4:	bf00      	nop
 80043e6:	3718      	adds	r7, #24
 80043e8:	46bd      	mov	sp, r7
 80043ea:	bd80      	pop	{r7, pc}

080043ec <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043ec:	b580      	push	{r7, lr}
 80043ee:	b082      	sub	sp, #8
 80043f0:	af00      	add	r7, sp, #0
 80043f2:	4603      	mov	r3, r0
 80043f4:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043fa:	4618      	mov	r0, r3
 80043fc:	f7ff ff54 	bl	80042a8 <__NVIC_EnableIRQ>
}
 8004400:	bf00      	nop
 8004402:	3708      	adds	r7, #8
 8004404:	46bd      	mov	sp, r7
 8004406:	bd80      	pop	{r7, pc}

08004408 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8004408:	b580      	push	{r7, lr}
 800440a:	b082      	sub	sp, #8
 800440c:	af00      	add	r7, sp, #0
 800440e:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2b00      	cmp	r3, #0
 8004414:	d101      	bne.n	800441a <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8004416:	2301      	movs	r3, #1
 8004418:	e014      	b.n	8004444 <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	791b      	ldrb	r3, [r3, #4]
 800441e:	b2db      	uxtb	r3, r3
 8004420:	2b00      	cmp	r3, #0
 8004422:	d105      	bne.n	8004430 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	2200      	movs	r2, #0
 8004428:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 800442a:	6878      	ldr	r0, [r7, #4]
 800442c:	f7fc fb9c 	bl	8000b68 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	2202      	movs	r2, #2
 8004434:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	2200      	movs	r2, #0
 800443a:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	2201      	movs	r2, #1
 8004440:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8004442:	2300      	movs	r3, #0
}
 8004444:	4618      	mov	r0, r3
 8004446:	3708      	adds	r7, #8
 8004448:	46bd      	mov	sp, r7
 800444a:	bd80      	pop	{r7, pc}

0800444c <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 800444c:	b480      	push	{r7}
 800444e:	b083      	sub	sp, #12
 8004450:	af00      	add	r7, sp, #0
 8004452:	6078      	str	r0, [r7, #4]
 8004454:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	2b00      	cmp	r3, #0
 800445a:	d101      	bne.n	8004460 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e046      	b.n	80044ee <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	795b      	ldrb	r3, [r3, #5]
 8004464:	2b01      	cmp	r3, #1
 8004466:	d101      	bne.n	800446c <HAL_DAC_Start+0x20>
 8004468:	2302      	movs	r3, #2
 800446a:	e040      	b.n	80044ee <HAL_DAC_Start+0xa2>
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	2201      	movs	r2, #1
 8004470:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	2202      	movs	r2, #2
 8004476:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	681b      	ldr	r3, [r3, #0]
 800447c:	6819      	ldr	r1, [r3, #0]
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	f003 0310 	and.w	r3, r3, #16
 8004484:	2201      	movs	r2, #1
 8004486:	409a      	lsls	r2, r3
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	430a      	orrs	r2, r1
 800448e:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8004490:	683b      	ldr	r3, [r7, #0]
 8004492:	2b00      	cmp	r3, #0
 8004494:	d10f      	bne.n	80044b6 <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 80044a0:	2b3c      	cmp	r3, #60	; 0x3c
 80044a2:	d11d      	bne.n	80044e0 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	681b      	ldr	r3, [r3, #0]
 80044a8:	685a      	ldr	r2, [r3, #4]
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	f042 0201 	orr.w	r2, r2, #1
 80044b2:	605a      	str	r2, [r3, #4]
 80044b4:	e014      	b.n	80044e0 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	681b      	ldr	r3, [r3, #0]
 80044ba:	681b      	ldr	r3, [r3, #0]
 80044bc:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80044c0:	683b      	ldr	r3, [r7, #0]
 80044c2:	f003 0310 	and.w	r3, r3, #16
 80044c6:	213c      	movs	r1, #60	; 0x3c
 80044c8:	fa01 f303 	lsl.w	r3, r1, r3
 80044cc:	429a      	cmp	r2, r3
 80044ce:	d107      	bne.n	80044e0 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	681b      	ldr	r3, [r3, #0]
 80044d4:	685a      	ldr	r2, [r3, #4]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	f042 0202 	orr.w	r2, r2, #2
 80044de:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	2201      	movs	r2, #1
 80044e4:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	2200      	movs	r2, #0
 80044ea:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 80044ec:	2300      	movs	r3, #0
}
 80044ee:	4618      	mov	r0, r3
 80044f0:	370c      	adds	r7, #12
 80044f2:	46bd      	mov	sp, r7
 80044f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044f8:	4770      	bx	lr

080044fa <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 80044fa:	b480      	push	{r7}
 80044fc:	b087      	sub	sp, #28
 80044fe:	af00      	add	r7, sp, #0
 8004500:	60f8      	str	r0, [r7, #12]
 8004502:	60b9      	str	r1, [r7, #8]
 8004504:	607a      	str	r2, [r7, #4]
 8004506:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8004508:	2300      	movs	r3, #0
 800450a:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	2b00      	cmp	r3, #0
 8004510:	d101      	bne.n	8004516 <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8004512:	2301      	movs	r3, #1
 8004514:	e015      	b.n	8004542 <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 800451c:	68bb      	ldr	r3, [r7, #8]
 800451e:	2b00      	cmp	r3, #0
 8004520:	d105      	bne.n	800452e <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8004522:	697a      	ldr	r2, [r7, #20]
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	4413      	add	r3, r2
 8004528:	3308      	adds	r3, #8
 800452a:	617b      	str	r3, [r7, #20]
 800452c:	e004      	b.n	8004538 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 800452e:	697a      	ldr	r2, [r7, #20]
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	4413      	add	r3, r2
 8004534:	3314      	adds	r3, #20
 8004536:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8004538:	697b      	ldr	r3, [r7, #20]
 800453a:	461a      	mov	r2, r3
 800453c:	683b      	ldr	r3, [r7, #0]
 800453e:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8004540:	2300      	movs	r3, #0
}
 8004542:	4618      	mov	r0, r3
 8004544:	371c      	adds	r7, #28
 8004546:	46bd      	mov	sp, r7
 8004548:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454c:	4770      	bx	lr

0800454e <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 800454e:	b480      	push	{r7}
 8004550:	b089      	sub	sp, #36	; 0x24
 8004552:	af00      	add	r7, sp, #0
 8004554:	60f8      	str	r0, [r7, #12]
 8004556:	60b9      	str	r1, [r7, #8]
 8004558:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800455a:	2300      	movs	r3, #0
 800455c:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 800455e:	68fb      	ldr	r3, [r7, #12]
 8004560:	2b00      	cmp	r3, #0
 8004562:	d002      	beq.n	800456a <HAL_DAC_ConfigChannel+0x1c>
 8004564:	68bb      	ldr	r3, [r7, #8]
 8004566:	2b00      	cmp	r3, #0
 8004568:	d101      	bne.n	800456e <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 800456a:	2301      	movs	r3, #1
 800456c:	e042      	b.n	80045f4 <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	795b      	ldrb	r3, [r3, #5]
 8004572:	2b01      	cmp	r3, #1
 8004574:	d101      	bne.n	800457a <HAL_DAC_ConfigChannel+0x2c>
 8004576:	2302      	movs	r3, #2
 8004578:	e03c      	b.n	80045f4 <HAL_DAC_ConfigChannel+0xa6>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	2201      	movs	r2, #1
 800457e:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8004580:	68fb      	ldr	r3, [r7, #12]
 8004582:	2202      	movs	r2, #2
 8004584:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8004586:	68fb      	ldr	r3, [r7, #12]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	681b      	ldr	r3, [r3, #0]
 800458c:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 800458e:	687b      	ldr	r3, [r7, #4]
 8004590:	f003 0310 	and.w	r3, r3, #16
 8004594:	f640 72fe 	movw	r2, #4094	; 0xffe
 8004598:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 800459c:	43db      	mvns	r3, r3
 800459e:	69ba      	ldr	r2, [r7, #24]
 80045a0:	4013      	ands	r3, r2
 80045a2:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 80045a4:	68bb      	ldr	r3, [r7, #8]
 80045a6:	681a      	ldr	r2, [r3, #0]
 80045a8:	68bb      	ldr	r3, [r7, #8]
 80045aa:	685b      	ldr	r3, [r3, #4]
 80045ac:	4313      	orrs	r3, r2
 80045ae:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f003 0310 	and.w	r3, r3, #16
 80045b6:	697a      	ldr	r2, [r7, #20]
 80045b8:	fa02 f303 	lsl.w	r3, r2, r3
 80045bc:	69ba      	ldr	r2, [r7, #24]
 80045be:	4313      	orrs	r3, r2
 80045c0:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	681b      	ldr	r3, [r3, #0]
 80045c6:	69ba      	ldr	r2, [r7, #24]
 80045c8:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	6819      	ldr	r1, [r3, #0]
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	f003 0310 	and.w	r3, r3, #16
 80045d6:	22c0      	movs	r2, #192	; 0xc0
 80045d8:	fa02 f303 	lsl.w	r3, r2, r3
 80045dc:	43da      	mvns	r2, r3
 80045de:	68fb      	ldr	r3, [r7, #12]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	400a      	ands	r2, r1
 80045e4:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	2201      	movs	r2, #1
 80045ea:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	2200      	movs	r2, #0
 80045f0:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 80045f2:	7ffb      	ldrb	r3, [r7, #31]
}
 80045f4:	4618      	mov	r0, r3
 80045f6:	3724      	adds	r7, #36	; 0x24
 80045f8:	46bd      	mov	sp, r7
 80045fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fe:	4770      	bx	lr

08004600 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8004600:	b580      	push	{r7, lr}
 8004602:	b086      	sub	sp, #24
 8004604:	af00      	add	r7, sp, #0
 8004606:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8004608:	2300      	movs	r3, #0
 800460a:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 800460c:	f7fe ff16 	bl	800343c <HAL_GetTick>
 8004610:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	2b00      	cmp	r3, #0
 8004616:	d101      	bne.n	800461c <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8004618:	2301      	movs	r3, #1
 800461a:	e099      	b.n	8004750 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	2202      	movs	r2, #2
 8004620:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	2200      	movs	r2, #0
 8004628:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 800462c:	687b      	ldr	r3, [r7, #4]
 800462e:	681b      	ldr	r3, [r3, #0]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	681b      	ldr	r3, [r3, #0]
 8004636:	f022 0201 	bic.w	r2, r2, #1
 800463a:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800463c:	e00f      	b.n	800465e <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800463e:	f7fe fefd 	bl	800343c <HAL_GetTick>
 8004642:	4602      	mov	r2, r0
 8004644:	693b      	ldr	r3, [r7, #16]
 8004646:	1ad3      	subs	r3, r2, r3
 8004648:	2b05      	cmp	r3, #5
 800464a:	d908      	bls.n	800465e <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	2220      	movs	r2, #32
 8004650:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004652:	687b      	ldr	r3, [r7, #4]
 8004654:	2203      	movs	r2, #3
 8004656:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800465a:	2303      	movs	r3, #3
 800465c:	e078      	b.n	8004750 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	f003 0301 	and.w	r3, r3, #1
 8004668:	2b00      	cmp	r3, #0
 800466a:	d1e8      	bne.n	800463e <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	681b      	ldr	r3, [r3, #0]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004674:	697a      	ldr	r2, [r7, #20]
 8004676:	4b38      	ldr	r3, [pc, #224]	; (8004758 <HAL_DMA_Init+0x158>)
 8004678:	4013      	ands	r3, r2
 800467a:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	685a      	ldr	r2, [r3, #4]
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	689b      	ldr	r3, [r3, #8]
 8004684:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800468a:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	691b      	ldr	r3, [r3, #16]
 8004690:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004692:	687b      	ldr	r3, [r7, #4]
 8004694:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004696:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004698:	687b      	ldr	r3, [r7, #4]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 80046a2:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 80046a4:	687b      	ldr	r3, [r7, #4]
 80046a6:	6a1b      	ldr	r3, [r3, #32]
 80046a8:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 80046aa:	697a      	ldr	r2, [r7, #20]
 80046ac:	4313      	orrs	r3, r2
 80046ae:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046b0:	687b      	ldr	r3, [r7, #4]
 80046b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046b4:	2b04      	cmp	r3, #4
 80046b6:	d107      	bne.n	80046c8 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80046bc:	687b      	ldr	r3, [r7, #4]
 80046be:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c0:	4313      	orrs	r3, r2
 80046c2:	697a      	ldr	r2, [r7, #20]
 80046c4:	4313      	orrs	r3, r2
 80046c6:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	697a      	ldr	r2, [r7, #20]
 80046ce:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80046d0:	687b      	ldr	r3, [r7, #4]
 80046d2:	681b      	ldr	r3, [r3, #0]
 80046d4:	695b      	ldr	r3, [r3, #20]
 80046d6:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80046d8:	697b      	ldr	r3, [r7, #20]
 80046da:	f023 0307 	bic.w	r3, r3, #7
 80046de:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e4:	697a      	ldr	r2, [r7, #20]
 80046e6:	4313      	orrs	r3, r2
 80046e8:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046ee:	2b04      	cmp	r3, #4
 80046f0:	d117      	bne.n	8004722 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80046f6:	697a      	ldr	r2, [r7, #20]
 80046f8:	4313      	orrs	r3, r2
 80046fa:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004700:	2b00      	cmp	r3, #0
 8004702:	d00e      	beq.n	8004722 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004704:	6878      	ldr	r0, [r7, #4]
 8004706:	f000 fb23 	bl	8004d50 <DMA_CheckFifoParam>
 800470a:	4603      	mov	r3, r0
 800470c:	2b00      	cmp	r3, #0
 800470e:	d008      	beq.n	8004722 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004710:	687b      	ldr	r3, [r7, #4]
 8004712:	2240      	movs	r2, #64	; 0x40
 8004714:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8004716:	687b      	ldr	r3, [r7, #4]
 8004718:	2200      	movs	r2, #0
 800471a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800471e:	2301      	movs	r3, #1
 8004720:	e016      	b.n	8004750 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	697a      	ldr	r2, [r7, #20]
 8004728:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800472a:	6878      	ldr	r0, [r7, #4]
 800472c:	f000 fada 	bl	8004ce4 <DMA_CalcBaseAndBitshift>
 8004730:	4603      	mov	r3, r0
 8004732:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004734:	687b      	ldr	r3, [r7, #4]
 8004736:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004738:	223f      	movs	r2, #63	; 0x3f
 800473a:	409a      	lsls	r2, r3
 800473c:	68fb      	ldr	r3, [r7, #12]
 800473e:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004740:	687b      	ldr	r3, [r7, #4]
 8004742:	2200      	movs	r2, #0
 8004744:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	2201      	movs	r2, #1
 800474a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800474e:	2300      	movs	r3, #0
}
 8004750:	4618      	mov	r0, r3
 8004752:	3718      	adds	r7, #24
 8004754:	46bd      	mov	sp, r7
 8004756:	bd80      	pop	{r7, pc}
 8004758:	f010803f 	.word	0xf010803f

0800475c <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800475c:	b580      	push	{r7, lr}
 800475e:	b086      	sub	sp, #24
 8004760:	af00      	add	r7, sp, #0
 8004762:	60f8      	str	r0, [r7, #12]
 8004764:	60b9      	str	r1, [r7, #8]
 8004766:	607a      	str	r2, [r7, #4]
 8004768:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800476a:	2300      	movs	r3, #0
 800476c:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800476e:	68fb      	ldr	r3, [r7, #12]
 8004770:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004772:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004774:	68fb      	ldr	r3, [r7, #12]
 8004776:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800477a:	2b01      	cmp	r3, #1
 800477c:	d101      	bne.n	8004782 <HAL_DMA_Start_IT+0x26>
 800477e:	2302      	movs	r3, #2
 8004780:	e048      	b.n	8004814 <HAL_DMA_Start_IT+0xb8>
 8004782:	68fb      	ldr	r3, [r7, #12]
 8004784:	2201      	movs	r2, #1
 8004786:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800478a:	68fb      	ldr	r3, [r7, #12]
 800478c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004790:	b2db      	uxtb	r3, r3
 8004792:	2b01      	cmp	r3, #1
 8004794:	d137      	bne.n	8004806 <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	2202      	movs	r2, #2
 800479a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800479e:	68fb      	ldr	r3, [r7, #12]
 80047a0:	2200      	movs	r2, #0
 80047a2:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80047a4:	683b      	ldr	r3, [r7, #0]
 80047a6:	687a      	ldr	r2, [r7, #4]
 80047a8:	68b9      	ldr	r1, [r7, #8]
 80047aa:	68f8      	ldr	r0, [r7, #12]
 80047ac:	f000 fa6c 	bl	8004c88 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80047b4:	223f      	movs	r2, #63	; 0x3f
 80047b6:	409a      	lsls	r2, r3
 80047b8:	693b      	ldr	r3, [r7, #16]
 80047ba:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	681a      	ldr	r2, [r3, #0]
 80047c2:	68fb      	ldr	r3, [r7, #12]
 80047c4:	681b      	ldr	r3, [r3, #0]
 80047c6:	f042 0216 	orr.w	r2, r2, #22
 80047ca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	695a      	ldr	r2, [r3, #20]
 80047d2:	68fb      	ldr	r3, [r7, #12]
 80047d4:	681b      	ldr	r3, [r3, #0]
 80047d6:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 80047da:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d007      	beq.n	80047f4 <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	681a      	ldr	r2, [r3, #0]
 80047ea:	68fb      	ldr	r3, [r7, #12]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	f042 0208 	orr.w	r2, r2, #8
 80047f2:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80047f4:	68fb      	ldr	r3, [r7, #12]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	681a      	ldr	r2, [r3, #0]
 80047fa:	68fb      	ldr	r3, [r7, #12]
 80047fc:	681b      	ldr	r3, [r3, #0]
 80047fe:	f042 0201 	orr.w	r2, r2, #1
 8004802:	601a      	str	r2, [r3, #0]
 8004804:	e005      	b.n	8004812 <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004806:	68fb      	ldr	r3, [r7, #12]
 8004808:	2200      	movs	r2, #0
 800480a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800480e:	2302      	movs	r3, #2
 8004810:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8004812:	7dfb      	ldrb	r3, [r7, #23]
}
 8004814:	4618      	mov	r0, r3
 8004816:	3718      	adds	r7, #24
 8004818:	46bd      	mov	sp, r7
 800481a:	bd80      	pop	{r7, pc}

0800481c <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800481c:	b580      	push	{r7, lr}
 800481e:	b084      	sub	sp, #16
 8004820:	af00      	add	r7, sp, #0
 8004822:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004828:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800482a:	f7fe fe07 	bl	800343c <HAL_GetTick>
 800482e:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004836:	b2db      	uxtb	r3, r3
 8004838:	2b02      	cmp	r3, #2
 800483a:	d008      	beq.n	800484e <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800483c:	687b      	ldr	r3, [r7, #4]
 800483e:	2280      	movs	r2, #128	; 0x80
 8004840:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	2200      	movs	r2, #0
 8004846:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800484a:	2301      	movs	r3, #1
 800484c:	e052      	b.n	80048f4 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	681a      	ldr	r2, [r3, #0]
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	f022 0216 	bic.w	r2, r2, #22
 800485c:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800485e:	687b      	ldr	r3, [r7, #4]
 8004860:	681b      	ldr	r3, [r3, #0]
 8004862:	695a      	ldr	r2, [r3, #20]
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	681b      	ldr	r3, [r3, #0]
 8004868:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800486c:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004872:	2b00      	cmp	r3, #0
 8004874:	d103      	bne.n	800487e <HAL_DMA_Abort+0x62>
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800487a:	2b00      	cmp	r3, #0
 800487c:	d007      	beq.n	800488e <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800487e:	687b      	ldr	r3, [r7, #4]
 8004880:	681b      	ldr	r3, [r3, #0]
 8004882:	681a      	ldr	r2, [r3, #0]
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	681b      	ldr	r3, [r3, #0]
 8004888:	f022 0208 	bic.w	r2, r2, #8
 800488c:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	681b      	ldr	r3, [r3, #0]
 8004892:	681a      	ldr	r2, [r3, #0]
 8004894:	687b      	ldr	r3, [r7, #4]
 8004896:	681b      	ldr	r3, [r3, #0]
 8004898:	f022 0201 	bic.w	r2, r2, #1
 800489c:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800489e:	e013      	b.n	80048c8 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80048a0:	f7fe fdcc 	bl	800343c <HAL_GetTick>
 80048a4:	4602      	mov	r2, r0
 80048a6:	68bb      	ldr	r3, [r7, #8]
 80048a8:	1ad3      	subs	r3, r2, r3
 80048aa:	2b05      	cmp	r3, #5
 80048ac:	d90c      	bls.n	80048c8 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2220      	movs	r2, #32
 80048b2:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2203      	movs	r2, #3
 80048b8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	2200      	movs	r2, #0
 80048c0:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 80048c4:	2303      	movs	r3, #3
 80048c6:	e015      	b.n	80048f4 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	681b      	ldr	r3, [r3, #0]
 80048cc:	681b      	ldr	r3, [r3, #0]
 80048ce:	f003 0301 	and.w	r3, r3, #1
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d1e4      	bne.n	80048a0 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80048da:	223f      	movs	r2, #63	; 0x3f
 80048dc:	409a      	lsls	r2, r3
 80048de:	68fb      	ldr	r3, [r7, #12]
 80048e0:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	2201      	movs	r2, #1
 80048e6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	2200      	movs	r2, #0
 80048ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 80048f2:	2300      	movs	r3, #0
}
 80048f4:	4618      	mov	r0, r3
 80048f6:	3710      	adds	r7, #16
 80048f8:	46bd      	mov	sp, r7
 80048fa:	bd80      	pop	{r7, pc}

080048fc <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80048fc:	b480      	push	{r7}
 80048fe:	b083      	sub	sp, #12
 8004900:	af00      	add	r7, sp, #0
 8004902:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800490a:	b2db      	uxtb	r3, r3
 800490c:	2b02      	cmp	r3, #2
 800490e:	d004      	beq.n	800491a <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2280      	movs	r2, #128	; 0x80
 8004914:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004916:	2301      	movs	r3, #1
 8004918:	e00c      	b.n	8004934 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	2205      	movs	r2, #5
 800491e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	681b      	ldr	r3, [r3, #0]
 8004926:	681a      	ldr	r2, [r3, #0]
 8004928:	687b      	ldr	r3, [r7, #4]
 800492a:	681b      	ldr	r3, [r3, #0]
 800492c:	f022 0201 	bic.w	r2, r2, #1
 8004930:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004932:	2300      	movs	r3, #0
}
 8004934:	4618      	mov	r0, r3
 8004936:	370c      	adds	r7, #12
 8004938:	46bd      	mov	sp, r7
 800493a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800493e:	4770      	bx	lr

08004940 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004940:	b580      	push	{r7, lr}
 8004942:	b086      	sub	sp, #24
 8004944:	af00      	add	r7, sp, #0
 8004946:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004948:	2300      	movs	r3, #0
 800494a:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 800494c:	4b8e      	ldr	r3, [pc, #568]	; (8004b88 <HAL_DMA_IRQHandler+0x248>)
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	4a8e      	ldr	r2, [pc, #568]	; (8004b8c <HAL_DMA_IRQHandler+0x24c>)
 8004952:	fba2 2303 	umull	r2, r3, r2, r3
 8004956:	0a9b      	lsrs	r3, r3, #10
 8004958:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800495e:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004960:	693b      	ldr	r3, [r7, #16]
 8004962:	681b      	ldr	r3, [r3, #0]
 8004964:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800496a:	2208      	movs	r2, #8
 800496c:	409a      	lsls	r2, r3
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	4013      	ands	r3, r2
 8004972:	2b00      	cmp	r3, #0
 8004974:	d01a      	beq.n	80049ac <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	681b      	ldr	r3, [r3, #0]
 800497c:	f003 0304 	and.w	r3, r3, #4
 8004980:	2b00      	cmp	r3, #0
 8004982:	d013      	beq.n	80049ac <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004984:	687b      	ldr	r3, [r7, #4]
 8004986:	681b      	ldr	r3, [r3, #0]
 8004988:	681a      	ldr	r2, [r3, #0]
 800498a:	687b      	ldr	r3, [r7, #4]
 800498c:	681b      	ldr	r3, [r3, #0]
 800498e:	f022 0204 	bic.w	r2, r2, #4
 8004992:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004994:	687b      	ldr	r3, [r7, #4]
 8004996:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004998:	2208      	movs	r2, #8
 800499a:	409a      	lsls	r2, r3
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049a4:	f043 0201 	orr.w	r2, r3, #1
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80049ac:	687b      	ldr	r3, [r7, #4]
 80049ae:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049b0:	2201      	movs	r2, #1
 80049b2:	409a      	lsls	r2, r3
 80049b4:	68fb      	ldr	r3, [r7, #12]
 80049b6:	4013      	ands	r3, r2
 80049b8:	2b00      	cmp	r3, #0
 80049ba:	d012      	beq.n	80049e2 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	681b      	ldr	r3, [r3, #0]
 80049c0:	695b      	ldr	r3, [r3, #20]
 80049c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d00b      	beq.n	80049e2 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049ce:	2201      	movs	r2, #1
 80049d0:	409a      	lsls	r2, r3
 80049d2:	693b      	ldr	r3, [r7, #16]
 80049d4:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80049d6:	687b      	ldr	r3, [r7, #4]
 80049d8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80049da:	f043 0202 	orr.w	r2, r3, #2
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80049e6:	2204      	movs	r2, #4
 80049e8:	409a      	lsls	r2, r3
 80049ea:	68fb      	ldr	r3, [r7, #12]
 80049ec:	4013      	ands	r3, r2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d012      	beq.n	8004a18 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	681b      	ldr	r3, [r3, #0]
 80049f6:	681b      	ldr	r3, [r3, #0]
 80049f8:	f003 0302 	and.w	r3, r3, #2
 80049fc:	2b00      	cmp	r3, #0
 80049fe:	d00b      	beq.n	8004a18 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a04:	2204      	movs	r2, #4
 8004a06:	409a      	lsls	r2, r3
 8004a08:	693b      	ldr	r3, [r7, #16]
 8004a0a:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004a0c:	687b      	ldr	r3, [r7, #4]
 8004a0e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004a10:	f043 0204 	orr.w	r2, r3, #4
 8004a14:	687b      	ldr	r3, [r7, #4]
 8004a16:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a1c:	2210      	movs	r2, #16
 8004a1e:	409a      	lsls	r2, r3
 8004a20:	68fb      	ldr	r3, [r7, #12]
 8004a22:	4013      	ands	r3, r2
 8004a24:	2b00      	cmp	r3, #0
 8004a26:	d043      	beq.n	8004ab0 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	681b      	ldr	r3, [r3, #0]
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	f003 0308 	and.w	r3, r3, #8
 8004a32:	2b00      	cmp	r3, #0
 8004a34:	d03c      	beq.n	8004ab0 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004a36:	687b      	ldr	r3, [r7, #4]
 8004a38:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004a3a:	2210      	movs	r2, #16
 8004a3c:	409a      	lsls	r2, r3
 8004a3e:	693b      	ldr	r3, [r7, #16]
 8004a40:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	d018      	beq.n	8004a82 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	681b      	ldr	r3, [r3, #0]
 8004a56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004a5a:	2b00      	cmp	r3, #0
 8004a5c:	d108      	bne.n	8004a70 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a62:	2b00      	cmp	r3, #0
 8004a64:	d024      	beq.n	8004ab0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004a66:	687b      	ldr	r3, [r7, #4]
 8004a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a6a:	6878      	ldr	r0, [r7, #4]
 8004a6c:	4798      	blx	r3
 8004a6e:	e01f      	b.n	8004ab0 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	d01b      	beq.n	8004ab0 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004a78:	687b      	ldr	r3, [r7, #4]
 8004a7a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a7c:	6878      	ldr	r0, [r7, #4]
 8004a7e:	4798      	blx	r3
 8004a80:	e016      	b.n	8004ab0 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004a82:	687b      	ldr	r3, [r7, #4]
 8004a84:	681b      	ldr	r3, [r3, #0]
 8004a86:	681b      	ldr	r3, [r3, #0]
 8004a88:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004a8c:	2b00      	cmp	r3, #0
 8004a8e:	d107      	bne.n	8004aa0 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004a90:	687b      	ldr	r3, [r7, #4]
 8004a92:	681b      	ldr	r3, [r3, #0]
 8004a94:	681a      	ldr	r2, [r3, #0]
 8004a96:	687b      	ldr	r3, [r7, #4]
 8004a98:	681b      	ldr	r3, [r3, #0]
 8004a9a:	f022 0208 	bic.w	r2, r2, #8
 8004a9e:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aa4:	2b00      	cmp	r3, #0
 8004aa6:	d003      	beq.n	8004ab0 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004aac:	6878      	ldr	r0, [r7, #4]
 8004aae:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ab4:	2220      	movs	r2, #32
 8004ab6:	409a      	lsls	r2, r3
 8004ab8:	68fb      	ldr	r3, [r7, #12]
 8004aba:	4013      	ands	r3, r2
 8004abc:	2b00      	cmp	r3, #0
 8004abe:	f000 808f 	beq.w	8004be0 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	681b      	ldr	r3, [r3, #0]
 8004ac6:	681b      	ldr	r3, [r3, #0]
 8004ac8:	f003 0310 	and.w	r3, r3, #16
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	f000 8087 	beq.w	8004be0 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004ad2:	687b      	ldr	r3, [r7, #4]
 8004ad4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004ad6:	2220      	movs	r2, #32
 8004ad8:	409a      	lsls	r2, r3
 8004ada:	693b      	ldr	r3, [r7, #16]
 8004adc:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ae4:	b2db      	uxtb	r3, r3
 8004ae6:	2b05      	cmp	r3, #5
 8004ae8:	d136      	bne.n	8004b58 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f022 0216 	bic.w	r2, r2, #22
 8004af8:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	681b      	ldr	r3, [r3, #0]
 8004afe:	695a      	ldr	r2, [r3, #20]
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004b08:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b0e:	2b00      	cmp	r3, #0
 8004b10:	d103      	bne.n	8004b1a <HAL_DMA_IRQHandler+0x1da>
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004b16:	2b00      	cmp	r3, #0
 8004b18:	d007      	beq.n	8004b2a <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	681a      	ldr	r2, [r3, #0]
 8004b20:	687b      	ldr	r3, [r7, #4]
 8004b22:	681b      	ldr	r3, [r3, #0]
 8004b24:	f022 0208 	bic.w	r2, r2, #8
 8004b28:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004b2e:	223f      	movs	r2, #63	; 0x3f
 8004b30:	409a      	lsls	r2, r3
 8004b32:	693b      	ldr	r3, [r7, #16]
 8004b34:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	2201      	movs	r2, #1
 8004b3a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 8004b46:	687b      	ldr	r3, [r7, #4]
 8004b48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d07e      	beq.n	8004c4c <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004b52:	6878      	ldr	r0, [r7, #4]
 8004b54:	4798      	blx	r3
        }
        return;
 8004b56:	e079      	b.n	8004c4c <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004b58:	687b      	ldr	r3, [r7, #4]
 8004b5a:	681b      	ldr	r3, [r3, #0]
 8004b5c:	681b      	ldr	r3, [r3, #0]
 8004b5e:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d01d      	beq.n	8004ba2 <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004b66:	687b      	ldr	r3, [r7, #4]
 8004b68:	681b      	ldr	r3, [r3, #0]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004b70:	2b00      	cmp	r3, #0
 8004b72:	d10d      	bne.n	8004b90 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004b74:	687b      	ldr	r3, [r7, #4]
 8004b76:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d031      	beq.n	8004be0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004b80:	6878      	ldr	r0, [r7, #4]
 8004b82:	4798      	blx	r3
 8004b84:	e02c      	b.n	8004be0 <HAL_DMA_IRQHandler+0x2a0>
 8004b86:	bf00      	nop
 8004b88:	20000000 	.word	0x20000000
 8004b8c:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b94:	2b00      	cmp	r3, #0
 8004b96:	d023      	beq.n	8004be0 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004b9c:	6878      	ldr	r0, [r7, #4]
 8004b9e:	4798      	blx	r3
 8004ba0:	e01e      	b.n	8004be0 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	681b      	ldr	r3, [r3, #0]
 8004ba6:	681b      	ldr	r3, [r3, #0]
 8004ba8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004bac:	2b00      	cmp	r3, #0
 8004bae:	d10f      	bne.n	8004bd0 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	681a      	ldr	r2, [r3, #0]
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	f022 0210 	bic.w	r2, r2, #16
 8004bbe:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 8004bc0:	687b      	ldr	r3, [r7, #4]
 8004bc2:	2201      	movs	r2, #1
 8004bc4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	2200      	movs	r2, #0
 8004bcc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 8004bd0:	687b      	ldr	r3, [r7, #4]
 8004bd2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bd4:	2b00      	cmp	r3, #0
 8004bd6:	d003      	beq.n	8004be0 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004bdc:	6878      	ldr	r0, [r7, #4]
 8004bde:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004be0:	687b      	ldr	r3, [r7, #4]
 8004be2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004be4:	2b00      	cmp	r3, #0
 8004be6:	d032      	beq.n	8004c4e <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004bec:	f003 0301 	and.w	r3, r3, #1
 8004bf0:	2b00      	cmp	r3, #0
 8004bf2:	d022      	beq.n	8004c3a <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004bf4:	687b      	ldr	r3, [r7, #4]
 8004bf6:	2205      	movs	r2, #5
 8004bf8:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004bfc:	687b      	ldr	r3, [r7, #4]
 8004bfe:	681b      	ldr	r3, [r3, #0]
 8004c00:	681a      	ldr	r2, [r3, #0]
 8004c02:	687b      	ldr	r3, [r7, #4]
 8004c04:	681b      	ldr	r3, [r3, #0]
 8004c06:	f022 0201 	bic.w	r2, r2, #1
 8004c0a:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004c0c:	68bb      	ldr	r3, [r7, #8]
 8004c0e:	3301      	adds	r3, #1
 8004c10:	60bb      	str	r3, [r7, #8]
 8004c12:	697a      	ldr	r2, [r7, #20]
 8004c14:	429a      	cmp	r2, r3
 8004c16:	d307      	bcc.n	8004c28 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	681b      	ldr	r3, [r3, #0]
 8004c1e:	f003 0301 	and.w	r3, r3, #1
 8004c22:	2b00      	cmp	r3, #0
 8004c24:	d1f2      	bne.n	8004c0c <HAL_DMA_IRQHandler+0x2cc>
 8004c26:	e000      	b.n	8004c2a <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004c28:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	2201      	movs	r2, #1
 8004c2e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	2200      	movs	r2, #0
 8004c36:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d005      	beq.n	8004c4e <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004c42:	687b      	ldr	r3, [r7, #4]
 8004c44:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004c46:	6878      	ldr	r0, [r7, #4]
 8004c48:	4798      	blx	r3
 8004c4a:	e000      	b.n	8004c4e <HAL_DMA_IRQHandler+0x30e>
        return;
 8004c4c:	bf00      	nop
    }
  }
}
 8004c4e:	3718      	adds	r7, #24
 8004c50:	46bd      	mov	sp, r7
 8004c52:	bd80      	pop	{r7, pc}

08004c54 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004c54:	b480      	push	{r7}
 8004c56:	b083      	sub	sp, #12
 8004c58:	af00      	add	r7, sp, #0
 8004c5a:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004c5c:	687b      	ldr	r3, [r7, #4]
 8004c5e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004c62:	b2db      	uxtb	r3, r3
}
 8004c64:	4618      	mov	r0, r3
 8004c66:	370c      	adds	r7, #12
 8004c68:	46bd      	mov	sp, r7
 8004c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c6e:	4770      	bx	lr

08004c70 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004c70:	b480      	push	{r7}
 8004c72:	b083      	sub	sp, #12
 8004c74:	af00      	add	r7, sp, #0
 8004c76:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004c7c:	4618      	mov	r0, r3
 8004c7e:	370c      	adds	r7, #12
 8004c80:	46bd      	mov	sp, r7
 8004c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004c86:	4770      	bx	lr

08004c88 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004c88:	b480      	push	{r7}
 8004c8a:	b085      	sub	sp, #20
 8004c8c:	af00      	add	r7, sp, #0
 8004c8e:	60f8      	str	r0, [r7, #12]
 8004c90:	60b9      	str	r1, [r7, #8]
 8004c92:	607a      	str	r2, [r7, #4]
 8004c94:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004c96:	68fb      	ldr	r3, [r7, #12]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	681a      	ldr	r2, [r3, #0]
 8004c9c:	68fb      	ldr	r3, [r7, #12]
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004ca4:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004ca6:	68fb      	ldr	r3, [r7, #12]
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	683a      	ldr	r2, [r7, #0]
 8004cac:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8004cae:	68fb      	ldr	r3, [r7, #12]
 8004cb0:	689b      	ldr	r3, [r3, #8]
 8004cb2:	2b40      	cmp	r3, #64	; 0x40
 8004cb4:	d108      	bne.n	8004cc8 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004cb6:	68fb      	ldr	r3, [r7, #12]
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	687a      	ldr	r2, [r7, #4]
 8004cbc:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	68ba      	ldr	r2, [r7, #8]
 8004cc4:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004cc6:	e007      	b.n	8004cd8 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004cc8:	68fb      	ldr	r3, [r7, #12]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	68ba      	ldr	r2, [r7, #8]
 8004cce:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8004cd0:	68fb      	ldr	r3, [r7, #12]
 8004cd2:	681b      	ldr	r3, [r3, #0]
 8004cd4:	687a      	ldr	r2, [r7, #4]
 8004cd6:	60da      	str	r2, [r3, #12]
}
 8004cd8:	bf00      	nop
 8004cda:	3714      	adds	r7, #20
 8004cdc:	46bd      	mov	sp, r7
 8004cde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ce2:	4770      	bx	lr

08004ce4 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004ce4:	b480      	push	{r7}
 8004ce6:	b085      	sub	sp, #20
 8004ce8:	af00      	add	r7, sp, #0
 8004cea:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	b2db      	uxtb	r3, r3
 8004cf2:	3b10      	subs	r3, #16
 8004cf4:	4a13      	ldr	r2, [pc, #76]	; (8004d44 <DMA_CalcBaseAndBitshift+0x60>)
 8004cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8004cfa:	091b      	lsrs	r3, r3, #4
 8004cfc:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004cfe:	4a12      	ldr	r2, [pc, #72]	; (8004d48 <DMA_CalcBaseAndBitshift+0x64>)
 8004d00:	68fb      	ldr	r3, [r7, #12]
 8004d02:	4413      	add	r3, r2
 8004d04:	781b      	ldrb	r3, [r3, #0]
 8004d06:	461a      	mov	r2, r3
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004d0c:	68fb      	ldr	r3, [r7, #12]
 8004d0e:	2b03      	cmp	r3, #3
 8004d10:	d908      	bls.n	8004d24 <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004d12:	687b      	ldr	r3, [r7, #4]
 8004d14:	681b      	ldr	r3, [r3, #0]
 8004d16:	461a      	mov	r2, r3
 8004d18:	4b0c      	ldr	r3, [pc, #48]	; (8004d4c <DMA_CalcBaseAndBitshift+0x68>)
 8004d1a:	4013      	ands	r3, r2
 8004d1c:	1d1a      	adds	r2, r3, #4
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	659a      	str	r2, [r3, #88]	; 0x58
 8004d22:	e006      	b.n	8004d32 <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	461a      	mov	r2, r3
 8004d2a:	4b08      	ldr	r3, [pc, #32]	; (8004d4c <DMA_CalcBaseAndBitshift+0x68>)
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	687a      	ldr	r2, [r7, #4]
 8004d30:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004d32:	687b      	ldr	r3, [r7, #4]
 8004d34:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004d36:	4618      	mov	r0, r3
 8004d38:	3714      	adds	r7, #20
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d40:	4770      	bx	lr
 8004d42:	bf00      	nop
 8004d44:	aaaaaaab 	.word	0xaaaaaaab
 8004d48:	080217ec 	.word	0x080217ec
 8004d4c:	fffffc00 	.word	0xfffffc00

08004d50 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004d50:	b480      	push	{r7}
 8004d52:	b085      	sub	sp, #20
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004d60:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	699b      	ldr	r3, [r3, #24]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	d11f      	bne.n	8004daa <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004d6a:	68bb      	ldr	r3, [r7, #8]
 8004d6c:	2b03      	cmp	r3, #3
 8004d6e:	d856      	bhi.n	8004e1e <DMA_CheckFifoParam+0xce>
 8004d70:	a201      	add	r2, pc, #4	; (adr r2, 8004d78 <DMA_CheckFifoParam+0x28>)
 8004d72:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004d76:	bf00      	nop
 8004d78:	08004d89 	.word	0x08004d89
 8004d7c:	08004d9b 	.word	0x08004d9b
 8004d80:	08004d89 	.word	0x08004d89
 8004d84:	08004e1f 	.word	0x08004e1f
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d8c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004d90:	2b00      	cmp	r3, #0
 8004d92:	d046      	beq.n	8004e22 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004d94:	2301      	movs	r3, #1
 8004d96:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004d98:	e043      	b.n	8004e22 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004d9a:	687b      	ldr	r3, [r7, #4]
 8004d9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9e:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004da2:	d140      	bne.n	8004e26 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004da4:	2301      	movs	r3, #1
 8004da6:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004da8:	e03d      	b.n	8004e26 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	699b      	ldr	r3, [r3, #24]
 8004dae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004db2:	d121      	bne.n	8004df8 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 8004db4:	68bb      	ldr	r3, [r7, #8]
 8004db6:	2b03      	cmp	r3, #3
 8004db8:	d837      	bhi.n	8004e2a <DMA_CheckFifoParam+0xda>
 8004dba:	a201      	add	r2, pc, #4	; (adr r2, 8004dc0 <DMA_CheckFifoParam+0x70>)
 8004dbc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004dc0:	08004dd1 	.word	0x08004dd1
 8004dc4:	08004dd7 	.word	0x08004dd7
 8004dc8:	08004dd1 	.word	0x08004dd1
 8004dcc:	08004de9 	.word	0x08004de9
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8004dd0:	2301      	movs	r3, #1
 8004dd2:	73fb      	strb	r3, [r7, #15]
      break;
 8004dd4:	e030      	b.n	8004e38 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dda:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004dde:	2b00      	cmp	r3, #0
 8004de0:	d025      	beq.n	8004e2e <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8004de2:	2301      	movs	r3, #1
 8004de4:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004de6:	e022      	b.n	8004e2e <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004de8:	687b      	ldr	r3, [r7, #4]
 8004dea:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dec:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004df0:	d11f      	bne.n	8004e32 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004df2:	2301      	movs	r3, #1
 8004df4:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004df6:	e01c      	b.n	8004e32 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004df8:	68bb      	ldr	r3, [r7, #8]
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d903      	bls.n	8004e06 <DMA_CheckFifoParam+0xb6>
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	2b03      	cmp	r3, #3
 8004e02:	d003      	beq.n	8004e0c <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004e04:	e018      	b.n	8004e38 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004e06:	2301      	movs	r3, #1
 8004e08:	73fb      	strb	r3, [r7, #15]
      break;
 8004e0a:	e015      	b.n	8004e38 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e10:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d00e      	beq.n	8004e36 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	73fb      	strb	r3, [r7, #15]
      break;
 8004e1c:	e00b      	b.n	8004e36 <DMA_CheckFifoParam+0xe6>
      break;
 8004e1e:	bf00      	nop
 8004e20:	e00a      	b.n	8004e38 <DMA_CheckFifoParam+0xe8>
      break;
 8004e22:	bf00      	nop
 8004e24:	e008      	b.n	8004e38 <DMA_CheckFifoParam+0xe8>
      break;
 8004e26:	bf00      	nop
 8004e28:	e006      	b.n	8004e38 <DMA_CheckFifoParam+0xe8>
      break;
 8004e2a:	bf00      	nop
 8004e2c:	e004      	b.n	8004e38 <DMA_CheckFifoParam+0xe8>
      break;
 8004e2e:	bf00      	nop
 8004e30:	e002      	b.n	8004e38 <DMA_CheckFifoParam+0xe8>
      break;   
 8004e32:	bf00      	nop
 8004e34:	e000      	b.n	8004e38 <DMA_CheckFifoParam+0xe8>
      break;
 8004e36:	bf00      	nop
    }
  } 
  
  return status; 
 8004e38:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e3a:	4618      	mov	r0, r3
 8004e3c:	3714      	adds	r7, #20
 8004e3e:	46bd      	mov	sp, r7
 8004e40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e44:	4770      	bx	lr
 8004e46:	bf00      	nop

08004e48 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004e48:	b580      	push	{r7, lr}
 8004e4a:	b084      	sub	sp, #16
 8004e4c:	af00      	add	r7, sp, #0
 8004e4e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004e50:	687b      	ldr	r3, [r7, #4]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d101      	bne.n	8004e5a <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 8004e56:	2301      	movs	r3, #1
 8004e58:	e086      	b.n	8004f68 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004e5a:	687b      	ldr	r3, [r7, #4]
 8004e5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d106      	bne.n	8004e72 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004e64:	687b      	ldr	r3, [r7, #4]
 8004e66:	2223      	movs	r2, #35	; 0x23
 8004e68:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004e6c:	6878      	ldr	r0, [r7, #4]
 8004e6e:	f009 ff0d 	bl	800ec8c <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004e72:	4b3f      	ldr	r3, [pc, #252]	; (8004f70 <HAL_ETH_Init+0x128>)
 8004e74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e76:	4a3e      	ldr	r2, [pc, #248]	; (8004f70 <HAL_ETH_Init+0x128>)
 8004e78:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004e7c:	6453      	str	r3, [r2, #68]	; 0x44
 8004e7e:	4b3c      	ldr	r3, [pc, #240]	; (8004f70 <HAL_ETH_Init+0x128>)
 8004e80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004e82:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004e86:	60bb      	str	r3, [r7, #8]
 8004e88:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004e8a:	4b3a      	ldr	r3, [pc, #232]	; (8004f74 <HAL_ETH_Init+0x12c>)
 8004e8c:	685b      	ldr	r3, [r3, #4]
 8004e8e:	4a39      	ldr	r2, [pc, #228]	; (8004f74 <HAL_ETH_Init+0x12c>)
 8004e90:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8004e94:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 8004e96:	4b37      	ldr	r3, [pc, #220]	; (8004f74 <HAL_ETH_Init+0x12c>)
 8004e98:	685a      	ldr	r2, [r3, #4]
 8004e9a:	687b      	ldr	r3, [r7, #4]
 8004e9c:	689b      	ldr	r3, [r3, #8]
 8004e9e:	4935      	ldr	r1, [pc, #212]	; (8004f74 <HAL_ETH_Init+0x12c>)
 8004ea0:	4313      	orrs	r3, r2
 8004ea2:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8004ea4:	4b33      	ldr	r3, [pc, #204]	; (8004f74 <HAL_ETH_Init+0x12c>)
 8004ea6:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004eb0:	681b      	ldr	r3, [r3, #0]
 8004eb2:	687a      	ldr	r2, [r7, #4]
 8004eb4:	6812      	ldr	r2, [r2, #0]
 8004eb6:	f043 0301 	orr.w	r3, r3, #1
 8004eba:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004ebe:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ec0:	f7fe fabc 	bl	800343c <HAL_GetTick>
 8004ec4:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004ec6:	e011      	b.n	8004eec <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 8004ec8:	f7fe fab8 	bl	800343c <HAL_GetTick>
 8004ecc:	4602      	mov	r2, r0
 8004ece:	68fb      	ldr	r3, [r7, #12]
 8004ed0:	1ad3      	subs	r3, r2, r3
 8004ed2:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8004ed6:	d909      	bls.n	8004eec <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	2204      	movs	r2, #4
 8004edc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004ee0:	687b      	ldr	r3, [r7, #4]
 8004ee2:	22e0      	movs	r2, #224	; 0xe0
 8004ee4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 8004ee8:	2301      	movs	r3, #1
 8004eea:	e03d      	b.n	8004f68 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ef4:	681b      	ldr	r3, [r3, #0]
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d1e4      	bne.n	8004ec8 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8004efe:	6878      	ldr	r0, [r7, #4]
 8004f00:	f000 ff4e 	bl	8005da0 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8004f04:	6878      	ldr	r0, [r7, #4]
 8004f06:	f000 fff9 	bl	8005efc <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004f0a:	6878      	ldr	r0, [r7, #4]
 8004f0c:	f001 f84f 	bl	8005fae <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004f10:	687b      	ldr	r3, [r7, #4]
 8004f12:	685b      	ldr	r3, [r3, #4]
 8004f14:	461a      	mov	r2, r3
 8004f16:	2100      	movs	r1, #0
 8004f18:	6878      	ldr	r0, [r7, #4]
 8004f1a:	f000 ffb7 	bl	8005e8c <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8004f1e:	687b      	ldr	r3, [r7, #4]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8004f2c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8004f2e:	687b      	ldr	r3, [r7, #4]
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 8004f36:	687b      	ldr	r3, [r7, #4]
 8004f38:	681a      	ldr	r2, [r3, #0]
 8004f3a:	4b0f      	ldr	r3, [pc, #60]	; (8004f78 <HAL_ETH_Init+0x130>)
 8004f3c:	430b      	orrs	r3, r1
 8004f3e:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 8004f52:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	2200      	movs	r2, #0
 8004f5a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004f5e:	687b      	ldr	r3, [r7, #4]
 8004f60:	2210      	movs	r2, #16
 8004f62:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8004f66:	2300      	movs	r3, #0
}
 8004f68:	4618      	mov	r0, r3
 8004f6a:	3710      	adds	r7, #16
 8004f6c:	46bd      	mov	sp, r7
 8004f6e:	bd80      	pop	{r7, pc}
 8004f70:	40023800 	.word	0x40023800
 8004f74:	40013800 	.word	0x40013800
 8004f78:	00020060 	.word	0x00020060

08004f7c <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8004f7c:	b580      	push	{r7, lr}
 8004f7e:	b084      	sub	sp, #16
 8004f80:	af00      	add	r7, sp, #0
 8004f82:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004f8a:	2b10      	cmp	r3, #16
 8004f8c:	d15f      	bne.n	800504e <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004f8e:	687b      	ldr	r3, [r7, #4]
 8004f90:	2223      	movs	r2, #35	; 0x23
 8004f92:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 8004f96:	687b      	ldr	r3, [r7, #4]
 8004f98:	2201      	movs	r2, #1
 8004f9a:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8004f9c:	687b      	ldr	r3, [r7, #4]
 8004f9e:	2204      	movs	r2, #4
 8004fa0:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8004fa2:	6878      	ldr	r0, [r7, #4]
 8004fa4:	f000 f9f6 	bl	8005394 <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8004fa8:	687b      	ldr	r3, [r7, #4]
 8004faa:	681b      	ldr	r3, [r3, #0]
 8004fac:	681b      	ldr	r3, [r3, #0]
 8004fae:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004fb0:	2001      	movs	r0, #1
 8004fb2:	f7fe fa4f 	bl	8003454 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004fb6:	687b      	ldr	r3, [r7, #4]
 8004fb8:	681b      	ldr	r3, [r3, #0]
 8004fba:	68fa      	ldr	r2, [r7, #12]
 8004fbc:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8004fbe:	687b      	ldr	r3, [r7, #4]
 8004fc0:	681b      	ldr	r3, [r3, #0]
 8004fc2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fc6:	699b      	ldr	r3, [r3, #24]
 8004fc8:	687a      	ldr	r2, [r7, #4]
 8004fca:	6812      	ldr	r2, [r2, #0]
 8004fcc:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8004fd0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004fd4:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8004fd6:	687b      	ldr	r3, [r7, #4]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004fde:	699b      	ldr	r3, [r3, #24]
 8004fe0:	687a      	ldr	r2, [r7, #4]
 8004fe2:	6812      	ldr	r2, [r2, #0]
 8004fe4:	f043 0302 	orr.w	r3, r3, #2
 8004fe8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004fec:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8004fee:	6878      	ldr	r0, [r7, #4]
 8004ff0:	f000 fd73 	bl	8005ada <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	681a      	ldr	r2, [r3, #0]
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f042 0208 	orr.w	r2, r2, #8
 8005002:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8005004:	687b      	ldr	r3, [r7, #4]
 8005006:	681b      	ldr	r3, [r3, #0]
 8005008:	681b      	ldr	r3, [r3, #0]
 800500a:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 800500c:	2001      	movs	r0, #1
 800500e:	f7fe fa21 	bl	8003454 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8005012:	687b      	ldr	r3, [r7, #4]
 8005014:	681b      	ldr	r3, [r3, #0]
 8005016:	68fa      	ldr	r2, [r7, #12]
 8005018:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 800501a:	687b      	ldr	r3, [r7, #4]
 800501c:	681b      	ldr	r3, [r3, #0]
 800501e:	681a      	ldr	r2, [r3, #0]
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	681b      	ldr	r3, [r3, #0]
 8005024:	f042 0204 	orr.w	r2, r2, #4
 8005028:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005032:	69d9      	ldr	r1, [r3, #28]
 8005034:	687b      	ldr	r3, [r7, #4]
 8005036:	681a      	ldr	r2, [r3, #0]
 8005038:	4b07      	ldr	r3, [pc, #28]	; (8005058 <HAL_ETH_Start_IT+0xdc>)
 800503a:	430b      	orrs	r3, r1
 800503c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005040:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8005042:	687b      	ldr	r3, [r7, #4]
 8005044:	2223      	movs	r2, #35	; 0x23
 8005046:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 800504a:	2300      	movs	r3, #0
 800504c:	e000      	b.n	8005050 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
  }
}
 8005050:	4618      	mov	r0, r3
 8005052:	3710      	adds	r7, #16
 8005054:	46bd      	mov	sp, r7
 8005056:	bd80      	pop	{r7, pc}
 8005058:	0001a0c1 	.word	0x0001a0c1

0800505c <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 800505c:	b580      	push	{r7, lr}
 800505e:	b086      	sub	sp, #24
 8005060:	af00      	add	r7, sp, #0
 8005062:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800506a:	2b23      	cmp	r3, #35	; 0x23
 800506c:	d16e      	bne.n	800514c <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	2223      	movs	r2, #35	; 0x23
 8005072:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8005076:	687b      	ldr	r3, [r7, #4]
 8005078:	681b      	ldr	r3, [r3, #0]
 800507a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800507e:	69d9      	ldr	r1, [r3, #28]
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681a      	ldr	r2, [r3, #0]
 8005084:	4b34      	ldr	r3, [pc, #208]	; (8005158 <HAL_ETH_Stop_IT+0xfc>)
 8005086:	400b      	ands	r3, r1
 8005088:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800508c:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 800508e:	687b      	ldr	r3, [r7, #4]
 8005090:	681b      	ldr	r3, [r3, #0]
 8005092:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005096:	699b      	ldr	r3, [r3, #24]
 8005098:	687a      	ldr	r2, [r7, #4]
 800509a:	6812      	ldr	r2, [r2, #0]
 800509c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80050a0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80050a4:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80050ae:	699b      	ldr	r3, [r3, #24]
 80050b0:	687a      	ldr	r2, [r7, #4]
 80050b2:	6812      	ldr	r2, [r2, #0]
 80050b4:	f023 0302 	bic.w	r3, r3, #2
 80050b8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80050bc:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	681b      	ldr	r3, [r3, #0]
 80050c2:	681a      	ldr	r2, [r3, #0]
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	681b      	ldr	r3, [r3, #0]
 80050c8:	f022 0204 	bic.w	r2, r2, #4
 80050cc:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80050d6:	2001      	movs	r0, #1
 80050d8:	f7fe f9bc 	bl	8003454 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	693a      	ldr	r2, [r7, #16]
 80050e2:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80050e4:	6878      	ldr	r0, [r7, #4]
 80050e6:	f000 fcf8 	bl	8005ada <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80050ea:	687b      	ldr	r3, [r7, #4]
 80050ec:	681b      	ldr	r3, [r3, #0]
 80050ee:	681a      	ldr	r2, [r3, #0]
 80050f0:	687b      	ldr	r3, [r7, #4]
 80050f2:	681b      	ldr	r3, [r3, #0]
 80050f4:	f022 0208 	bic.w	r2, r2, #8
 80050f8:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80050fa:	687b      	ldr	r3, [r7, #4]
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8005102:	2001      	movs	r0, #1
 8005104:	f7fe f9a6 	bl	8003454 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8005108:	687b      	ldr	r3, [r7, #4]
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	693a      	ldr	r2, [r7, #16]
 800510e:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8005110:	2300      	movs	r3, #0
 8005112:	617b      	str	r3, [r7, #20]
 8005114:	e00e      	b.n	8005134 <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	697a      	ldr	r2, [r7, #20]
 800511a:	3212      	adds	r2, #18
 800511c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005120:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8005122:	68fb      	ldr	r3, [r7, #12]
 8005124:	685b      	ldr	r3, [r3, #4]
 8005126:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800512a:	68fb      	ldr	r3, [r7, #12]
 800512c:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 800512e:	697b      	ldr	r3, [r7, #20]
 8005130:	3301      	adds	r3, #1
 8005132:	617b      	str	r3, [r7, #20]
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	2b03      	cmp	r3, #3
 8005138:	d9ed      	bls.n	8005116 <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	2210      	movs	r2, #16
 8005144:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8005148:	2300      	movs	r3, #0
 800514a:	e000      	b.n	800514e <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 800514c:	2301      	movs	r3, #1
  }
}
 800514e:	4618      	mov	r0, r3
 8005150:	3718      	adds	r7, #24
 8005152:	46bd      	mov	sp, r7
 8005154:	bd80      	pop	{r7, pc}
 8005156:	bf00      	nop
 8005158:	fffe5f3e 	.word	0xfffe5f3e

0800515c <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 800515c:	b580      	push	{r7, lr}
 800515e:	b082      	sub	sp, #8
 8005160:	af00      	add	r7, sp, #0
 8005162:	6078      	str	r0, [r7, #4]
 8005164:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8005166:	683b      	ldr	r3, [r7, #0]
 8005168:	2b00      	cmp	r3, #0
 800516a:	d109      	bne.n	8005180 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800516c:	687b      	ldr	r3, [r7, #4]
 800516e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005172:	f043 0201 	orr.w	r2, r3, #1
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800517c:	2301      	movs	r3, #1
 800517e:	e045      	b.n	800520c <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8005180:	687b      	ldr	r3, [r7, #4]
 8005182:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005186:	2b23      	cmp	r3, #35	; 0x23
 8005188:	d13f      	bne.n	800520a <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 800518a:	683b      	ldr	r3, [r7, #0]
 800518c:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8005192:	2201      	movs	r2, #1
 8005194:	6839      	ldr	r1, [r7, #0]
 8005196:	6878      	ldr	r0, [r7, #4]
 8005198:	f000 ff78 	bl	800608c <ETH_Prepare_Tx_Descriptors>
 800519c:	4603      	mov	r3, r0
 800519e:	2b00      	cmp	r3, #0
 80051a0:	d009      	beq.n	80051b6 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80051a8:	f043 0202 	orr.w	r2, r3, #2
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80051b2:	2301      	movs	r3, #1
 80051b4:	e02a      	b.n	800520c <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80051b6:	f3bf 8f4f 	dsb	sy
}
 80051ba:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c0:	1c5a      	adds	r2, r3, #1
 80051c2:	687b      	ldr	r3, [r7, #4]
 80051c4:	629a      	str	r2, [r3, #40]	; 0x28
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051ca:	2b03      	cmp	r3, #3
 80051cc:	d904      	bls.n	80051d8 <HAL_ETH_Transmit_IT+0x7c>
 80051ce:	687b      	ldr	r3, [r7, #4]
 80051d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051d2:	1f1a      	subs	r2, r3, #4
 80051d4:	687b      	ldr	r3, [r7, #4]
 80051d6:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80051d8:	687b      	ldr	r3, [r7, #4]
 80051da:	681b      	ldr	r3, [r3, #0]
 80051dc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051e0:	695b      	ldr	r3, [r3, #20]
 80051e2:	f003 0304 	and.w	r3, r3, #4
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d00d      	beq.n	8005206 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80051ea:	687b      	ldr	r3, [r7, #4]
 80051ec:	681b      	ldr	r3, [r3, #0]
 80051ee:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051f2:	461a      	mov	r2, r3
 80051f4:	2304      	movs	r3, #4
 80051f6:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005200:	461a      	mov	r2, r3
 8005202:	2300      	movs	r3, #0
 8005204:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8005206:	2300      	movs	r3, #0
 8005208:	e000      	b.n	800520c <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 800520a:	2301      	movs	r3, #1
  }
}
 800520c:	4618      	mov	r0, r3
 800520e:	3708      	adds	r7, #8
 8005210:	46bd      	mov	sp, r7
 8005212:	bd80      	pop	{r7, pc}

08005214 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8005214:	b580      	push	{r7, lr}
 8005216:	b088      	sub	sp, #32
 8005218:	af00      	add	r7, sp, #0
 800521a:	6078      	str	r0, [r7, #4]
 800521c:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 800521e:	2300      	movs	r3, #0
 8005220:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8005222:	2300      	movs	r3, #0
 8005224:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 8005226:	683b      	ldr	r3, [r7, #0]
 8005228:	2b00      	cmp	r3, #0
 800522a:	d109      	bne.n	8005240 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 800522c:	687b      	ldr	r3, [r7, #4]
 800522e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8005232:	f043 0201 	orr.w	r2, r3, #1
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 800523c:	2301      	movs	r3, #1
 800523e:	e0a4      	b.n	800538a <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8005240:	687b      	ldr	r3, [r7, #4]
 8005242:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005246:	2b23      	cmp	r3, #35	; 0x23
 8005248:	d001      	beq.n	800524e <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 800524a:	2301      	movs	r3, #1
 800524c:	e09d      	b.n	800538a <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 800524e:	687b      	ldr	r3, [r7, #4]
 8005250:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8005252:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8005254:	687b      	ldr	r3, [r7, #4]
 8005256:	69fa      	ldr	r2, [r7, #28]
 8005258:	3212      	adds	r2, #18
 800525a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800525e:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005264:	f1c3 0304 	rsb	r3, r3, #4
 8005268:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800526a:	e066      	b.n	800533a <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 800526c:	69bb      	ldr	r3, [r7, #24]
 800526e:	681b      	ldr	r3, [r3, #0]
 8005270:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005274:	2b00      	cmp	r3, #0
 8005276:	d007      	beq.n	8005288 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8005278:	69bb      	ldr	r3, [r7, #24]
 800527a:	69da      	ldr	r2, [r3, #28]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8005280:	69bb      	ldr	r3, [r7, #24]
 8005282:	699a      	ldr	r2, [r3, #24]
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8005288:	69bb      	ldr	r3, [r7, #24]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005290:	2b00      	cmp	r3, #0
 8005292:	d103      	bne.n	800529c <HAL_ETH_ReadData+0x88>
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8005298:	2b00      	cmp	r3, #0
 800529a:	d03c      	beq.n	8005316 <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 800529c:	69bb      	ldr	r3, [r7, #24]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	d005      	beq.n	80052b4 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80052a8:	687b      	ldr	r3, [r7, #4]
 80052aa:	2200      	movs	r2, #0
 80052ac:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	2200      	movs	r2, #0
 80052b2:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 80052b4:	69bb      	ldr	r3, [r7, #24]
 80052b6:	681b      	ldr	r3, [r3, #0]
 80052b8:	0c1b      	lsrs	r3, r3, #16
 80052ba:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80052be:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80052c0:	69bb      	ldr	r3, [r7, #24]
 80052c2:	681b      	ldr	r3, [r3, #0]
 80052c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052c8:	2b00      	cmp	r3, #0
 80052ca:	d005      	beq.n	80052d8 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80052cc:	69bb      	ldr	r3, [r7, #24]
 80052ce:	681a      	ldr	r2, [r3, #0]
 80052d0:	687b      	ldr	r3, [r7, #4]
 80052d2:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80052d4:	2301      	movs	r3, #1
 80052d6:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80052d8:	69bb      	ldr	r3, [r7, #24]
 80052da:	689a      	ldr	r2, [r3, #8]
 80052dc:	69bb      	ldr	r3, [r7, #24]
 80052de:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80052e6:	687b      	ldr	r3, [r7, #4]
 80052e8:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80052ec:	69bb      	ldr	r3, [r7, #24]
 80052ee:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80052f0:	461a      	mov	r2, r3
 80052f2:	68bb      	ldr	r3, [r7, #8]
 80052f4:	b29b      	uxth	r3, r3
 80052f6:	f009 fe9d 	bl	800f034 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80052fe:	1c5a      	adds	r2, r3, #1
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8005308:	68bb      	ldr	r3, [r7, #8]
 800530a:	441a      	add	r2, r3
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8005310:	69bb      	ldr	r3, [r7, #24]
 8005312:	2200      	movs	r2, #0
 8005314:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8005316:	69fb      	ldr	r3, [r7, #28]
 8005318:	3301      	adds	r3, #1
 800531a:	61fb      	str	r3, [r7, #28]
 800531c:	69fb      	ldr	r3, [r7, #28]
 800531e:	2b03      	cmp	r3, #3
 8005320:	d902      	bls.n	8005328 <HAL_ETH_ReadData+0x114>
 8005322:	69fb      	ldr	r3, [r7, #28]
 8005324:	3b04      	subs	r3, #4
 8005326:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	69fa      	ldr	r2, [r7, #28]
 800532c:	3212      	adds	r2, #18
 800532e:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005332:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8005334:	697b      	ldr	r3, [r7, #20]
 8005336:	3301      	adds	r3, #1
 8005338:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 800533a:	69bb      	ldr	r3, [r7, #24]
 800533c:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 800533e:	2b00      	cmp	r3, #0
 8005340:	db06      	blt.n	8005350 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8005342:	697a      	ldr	r2, [r7, #20]
 8005344:	68fb      	ldr	r3, [r7, #12]
 8005346:	429a      	cmp	r2, r3
 8005348:	d202      	bcs.n	8005350 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 800534a:	7cfb      	ldrb	r3, [r7, #19]
 800534c:	2b00      	cmp	r3, #0
 800534e:	d08d      	beq.n	800526c <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8005350:	687b      	ldr	r3, [r7, #4]
 8005352:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8005354:	697b      	ldr	r3, [r7, #20]
 8005356:	441a      	add	r2, r3
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005360:	2b00      	cmp	r3, #0
 8005362:	d002      	beq.n	800536a <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8005364:	6878      	ldr	r0, [r7, #4]
 8005366:	f000 f815 	bl	8005394 <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	69fa      	ldr	r2, [r7, #28]
 800536e:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8005370:	7cfb      	ldrb	r3, [r7, #19]
 8005372:	2b01      	cmp	r3, #1
 8005374:	d108      	bne.n	8005388 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 800537a:	683b      	ldr	r3, [r7, #0]
 800537c:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2200      	movs	r2, #0
 8005382:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8005384:	2300      	movs	r3, #0
 8005386:	e000      	b.n	800538a <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8005388:	2301      	movs	r3, #1
}
 800538a:	4618      	mov	r0, r3
 800538c:	3720      	adds	r7, #32
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
	...

08005394 <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8005394:	b580      	push	{r7, lr}
 8005396:	b088      	sub	sp, #32
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 800539c:	2300      	movs	r3, #0
 800539e:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 80053a0:	2301      	movs	r3, #1
 80053a2:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 80053a8:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	69fa      	ldr	r2, [r7, #28]
 80053ae:	3212      	adds	r2, #18
 80053b0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80053b4:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80053ba:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 80053bc:	e042      	b.n	8005444 <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 80053be:	697b      	ldr	r3, [r7, #20]
 80053c0:	6a1b      	ldr	r3, [r3, #32]
 80053c2:	2b00      	cmp	r3, #0
 80053c4:	d112      	bne.n	80053ec <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 80053c6:	f107 0308 	add.w	r3, r7, #8
 80053ca:	4618      	mov	r0, r3
 80053cc:	f009 fe02 	bl	800efd4 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 80053d0:	68bb      	ldr	r3, [r7, #8]
 80053d2:	2b00      	cmp	r3, #0
 80053d4:	d102      	bne.n	80053dc <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 80053d6:	2300      	movs	r3, #0
 80053d8:	74fb      	strb	r3, [r7, #19]
 80053da:	e007      	b.n	80053ec <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 80053dc:	68bb      	ldr	r3, [r7, #8]
 80053de:	461a      	mov	r2, r3
 80053e0:	697b      	ldr	r3, [r7, #20]
 80053e2:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 80053e4:	68bb      	ldr	r3, [r7, #8]
 80053e6:	461a      	mov	r2, r3
 80053e8:	697b      	ldr	r3, [r7, #20]
 80053ea:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 80053ec:	7cfb      	ldrb	r3, [r7, #19]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d028      	beq.n	8005444 <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80053f6:	2b00      	cmp	r3, #0
 80053f8:	d106      	bne.n	8005408 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 80053fa:	687b      	ldr	r3, [r7, #4]
 80053fc:	695a      	ldr	r2, [r3, #20]
 80053fe:	4b26      	ldr	r3, [pc, #152]	; (8005498 <ETH_UpdateDescriptor+0x104>)
 8005400:	4313      	orrs	r3, r2
 8005402:	697a      	ldr	r2, [r7, #20]
 8005404:	6053      	str	r3, [r2, #4]
 8005406:	e005      	b.n	8005414 <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	695b      	ldr	r3, [r3, #20]
 800540c:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8005410:	697b      	ldr	r3, [r7, #20]
 8005412:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8005414:	697b      	ldr	r3, [r7, #20]
 8005416:	681b      	ldr	r3, [r3, #0]
 8005418:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8005420:	69fb      	ldr	r3, [r7, #28]
 8005422:	3301      	adds	r3, #1
 8005424:	61fb      	str	r3, [r7, #28]
 8005426:	69fb      	ldr	r3, [r7, #28]
 8005428:	2b03      	cmp	r3, #3
 800542a:	d902      	bls.n	8005432 <ETH_UpdateDescriptor+0x9e>
 800542c:	69fb      	ldr	r3, [r7, #28]
 800542e:	3b04      	subs	r3, #4
 8005430:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	69fa      	ldr	r2, [r7, #28]
 8005436:	3212      	adds	r2, #18
 8005438:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800543c:	617b      	str	r3, [r7, #20]
      desccount--;
 800543e:	69bb      	ldr	r3, [r7, #24]
 8005440:	3b01      	subs	r3, #1
 8005442:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8005444:	69bb      	ldr	r3, [r7, #24]
 8005446:	2b00      	cmp	r3, #0
 8005448:	d002      	beq.n	8005450 <ETH_UpdateDescriptor+0xbc>
 800544a:	7cfb      	ldrb	r3, [r7, #19]
 800544c:	2b00      	cmp	r3, #0
 800544e:	d1b6      	bne.n	80053be <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8005450:	687b      	ldr	r3, [r7, #4]
 8005452:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8005454:	69ba      	ldr	r2, [r7, #24]
 8005456:	429a      	cmp	r2, r3
 8005458:	d01a      	beq.n	8005490 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 800545a:	69fb      	ldr	r3, [r7, #28]
 800545c:	3301      	adds	r3, #1
 800545e:	f003 0303 	and.w	r3, r3, #3
 8005462:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8005464:	f3bf 8f5f 	dmb	sy
}
 8005468:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6919      	ldr	r1, [r3, #16]
 800546e:	68fa      	ldr	r2, [r7, #12]
 8005470:	4613      	mov	r3, r2
 8005472:	009b      	lsls	r3, r3, #2
 8005474:	4413      	add	r3, r2
 8005476:	00db      	lsls	r3, r3, #3
 8005478:	18ca      	adds	r2, r1, r3
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005482:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8005484:	687b      	ldr	r3, [r7, #4]
 8005486:	69fa      	ldr	r2, [r7, #28]
 8005488:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	69ba      	ldr	r2, [r7, #24]
 800548e:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8005490:	bf00      	nop
 8005492:	3720      	adds	r7, #32
 8005494:	46bd      	mov	sp, r7
 8005496:	bd80      	pop	{r7, pc}
 8005498:	80004000 	.word	0x80004000

0800549c <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 800549c:	b580      	push	{r7, lr}
 800549e:	b086      	sub	sp, #24
 80054a0:	af00      	add	r7, sp, #0
 80054a2:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	3318      	adds	r3, #24
 80054a8:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 80054aa:	68bb      	ldr	r3, [r7, #8]
 80054ac:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80054ae:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 80054b0:	68bb      	ldr	r3, [r7, #8]
 80054b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80054b4:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 80054b6:	2301      	movs	r3, #1
 80054b8:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 80054ba:	e047      	b.n	800554c <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 80054bc:	2301      	movs	r3, #1
 80054be:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 80054c0:	697b      	ldr	r3, [r7, #20]
 80054c2:	3b01      	subs	r3, #1
 80054c4:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 80054c6:	68ba      	ldr	r2, [r7, #8]
 80054c8:	693b      	ldr	r3, [r7, #16]
 80054ca:	3304      	adds	r3, #4
 80054cc:	009b      	lsls	r3, r3, #2
 80054ce:	4413      	add	r3, r2
 80054d0:	685b      	ldr	r3, [r3, #4]
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d10a      	bne.n	80054ec <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 80054d6:	693b      	ldr	r3, [r7, #16]
 80054d8:	3301      	adds	r3, #1
 80054da:	613b      	str	r3, [r7, #16]
 80054dc:	693b      	ldr	r3, [r7, #16]
 80054de:	2b03      	cmp	r3, #3
 80054e0:	d902      	bls.n	80054e8 <HAL_ETH_ReleaseTxPacket+0x4c>
 80054e2:	693b      	ldr	r3, [r7, #16]
 80054e4:	3b04      	subs	r3, #4
 80054e6:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 80054e8:	2300      	movs	r3, #0
 80054ea:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 80054ec:	7bbb      	ldrb	r3, [r7, #14]
 80054ee:	2b00      	cmp	r3, #0
 80054f0:	d02c      	beq.n	800554c <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	68d9      	ldr	r1, [r3, #12]
 80054f6:	693a      	ldr	r2, [r7, #16]
 80054f8:	4613      	mov	r3, r2
 80054fa:	009b      	lsls	r3, r3, #2
 80054fc:	4413      	add	r3, r2
 80054fe:	00db      	lsls	r3, r3, #3
 8005500:	440b      	add	r3, r1
 8005502:	681b      	ldr	r3, [r3, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	db1f      	blt.n	8005548 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8005508:	68ba      	ldr	r2, [r7, #8]
 800550a:	693b      	ldr	r3, [r7, #16]
 800550c:	3304      	adds	r3, #4
 800550e:	009b      	lsls	r3, r3, #2
 8005510:	4413      	add	r3, r2
 8005512:	685b      	ldr	r3, [r3, #4]
 8005514:	4618      	mov	r0, r3
 8005516:	f009 fdcf 	bl	800f0b8 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 800551a:	68ba      	ldr	r2, [r7, #8]
 800551c:	693b      	ldr	r3, [r7, #16]
 800551e:	3304      	adds	r3, #4
 8005520:	009b      	lsls	r3, r3, #2
 8005522:	4413      	add	r3, r2
 8005524:	2200      	movs	r2, #0
 8005526:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8005528:	693b      	ldr	r3, [r7, #16]
 800552a:	3301      	adds	r3, #1
 800552c:	613b      	str	r3, [r7, #16]
 800552e:	693b      	ldr	r3, [r7, #16]
 8005530:	2b03      	cmp	r3, #3
 8005532:	d902      	bls.n	800553a <HAL_ETH_ReleaseTxPacket+0x9e>
 8005534:	693b      	ldr	r3, [r7, #16]
 8005536:	3b04      	subs	r3, #4
 8005538:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 800553a:	68bb      	ldr	r3, [r7, #8]
 800553c:	697a      	ldr	r2, [r7, #20]
 800553e:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8005540:	68bb      	ldr	r3, [r7, #8]
 8005542:	693a      	ldr	r2, [r7, #16]
 8005544:	62da      	str	r2, [r3, #44]	; 0x2c
 8005546:	e001      	b.n	800554c <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8005548:	2300      	movs	r3, #0
 800554a:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 800554c:	697b      	ldr	r3, [r7, #20]
 800554e:	2b00      	cmp	r3, #0
 8005550:	d002      	beq.n	8005558 <HAL_ETH_ReleaseTxPacket+0xbc>
 8005552:	7bfb      	ldrb	r3, [r7, #15]
 8005554:	2b00      	cmp	r3, #0
 8005556:	d1b1      	bne.n	80054bc <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8005558:	2300      	movs	r3, #0
}
 800555a:	4618      	mov	r0, r3
 800555c:	3718      	adds	r7, #24
 800555e:	46bd      	mov	sp, r7
 8005560:	bd80      	pop	{r7, pc}
	...

08005564 <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8005564:	b580      	push	{r7, lr}
 8005566:	b086      	sub	sp, #24
 8005568:	af00      	add	r7, sp, #0
 800556a:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005572:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	681b      	ldr	r3, [r3, #0]
 8005578:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800557c:	695b      	ldr	r3, [r3, #20]
 800557e:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8005580:	687b      	ldr	r3, [r7, #4]
 8005582:	681b      	ldr	r3, [r3, #0]
 8005584:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005588:	69db      	ldr	r3, [r3, #28]
 800558a:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 800558c:	4b4b      	ldr	r3, [pc, #300]	; (80056bc <HAL_ETH_IRQHandler+0x158>)
 800558e:	695b      	ldr	r3, [r3, #20]
 8005590:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8005592:	693b      	ldr	r3, [r7, #16]
 8005594:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005598:	2b00      	cmp	r3, #0
 800559a:	d00e      	beq.n	80055ba <HAL_ETH_IRQHandler+0x56>
 800559c:	68fb      	ldr	r3, [r7, #12]
 800559e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d009      	beq.n	80055ba <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	681b      	ldr	r3, [r3, #0]
 80055aa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055ae:	461a      	mov	r2, r3
 80055b0:	4b43      	ldr	r3, [pc, #268]	; (80056c0 <HAL_ETH_IRQHandler+0x15c>)
 80055b2:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 80055b4:	6878      	ldr	r0, [r7, #4]
 80055b6:	f009 f899 	bl	800e6ec <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 80055ba:	693b      	ldr	r3, [r7, #16]
 80055bc:	f003 0301 	and.w	r3, r3, #1
 80055c0:	2b00      	cmp	r3, #0
 80055c2:	d00f      	beq.n	80055e4 <HAL_ETH_IRQHandler+0x80>
 80055c4:	68fb      	ldr	r3, [r7, #12]
 80055c6:	f003 0301 	and.w	r3, r3, #1
 80055ca:	2b00      	cmp	r3, #0
 80055cc:	d00a      	beq.n	80055e4 <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	681b      	ldr	r3, [r3, #0]
 80055d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80055d6:	461a      	mov	r2, r3
 80055d8:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 80055dc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 80055de:	6878      	ldr	r0, [r7, #4]
 80055e0:	f009 f894 	bl	800e70c <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 80055e4:	693b      	ldr	r3, [r7, #16]
 80055e6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d042      	beq.n	8005674 <HAL_ETH_IRQHandler+0x110>
 80055ee:	68fb      	ldr	r3, [r7, #12]
 80055f0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80055f4:	2b00      	cmp	r3, #0
 80055f6:	d03d      	beq.n	8005674 <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80055fe:	f043 0208 	orr.w	r2, r3, #8
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8005608:	693b      	ldr	r3, [r7, #16]
 800560a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800560e:	2b00      	cmp	r3, #0
 8005610:	d01a      	beq.n	8005648 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	681b      	ldr	r3, [r3, #0]
 8005616:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800561a:	695a      	ldr	r2, [r3, #20]
 800561c:	4b29      	ldr	r3, [pc, #164]	; (80056c4 <HAL_ETH_IRQHandler+0x160>)
 800561e:	4013      	ands	r3, r2
 8005620:	687a      	ldr	r2, [r7, #4]
 8005622:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800562e:	69db      	ldr	r3, [r3, #28]
 8005630:	687a      	ldr	r2, [r7, #4]
 8005632:	6812      	ldr	r2, [r2, #0]
 8005634:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8005638:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800563c:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	22e0      	movs	r2, #224	; 0xe0
 8005642:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8005646:	e012      	b.n	800566e <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8005648:	687b      	ldr	r3, [r7, #4]
 800564a:	681b      	ldr	r3, [r3, #0]
 800564c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005650:	695a      	ldr	r2, [r3, #20]
 8005652:	f248 6380 	movw	r3, #34432	; 0x8680
 8005656:	4013      	ands	r3, r2
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 800565e:	687b      	ldr	r3, [r7, #4]
 8005660:	681b      	ldr	r3, [r3, #0]
 8005662:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005666:	461a      	mov	r2, r3
 8005668:	f248 6380 	movw	r3, #34432	; 0x8680
 800566c:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 800566e:	6878      	ldr	r0, [r7, #4]
 8005670:	f009 f85c 	bl	800e72c <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8005674:	697b      	ldr	r3, [r7, #20]
 8005676:	f003 0308 	and.w	r3, r3, #8
 800567a:	2b00      	cmp	r3, #0
 800567c:	d00e      	beq.n	800569c <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 800567e:	687b      	ldr	r3, [r7, #4]
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005684:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 800568e:	6878      	ldr	r0, [r7, #4]
 8005690:	f000 f81a 	bl	80056c8 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	2200      	movs	r2, #0
 8005698:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 800569c:	68bb      	ldr	r3, [r7, #8]
 800569e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80056a2:	2b00      	cmp	r3, #0
 80056a4:	d006      	beq.n	80056b4 <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80056a6:	4b05      	ldr	r3, [pc, #20]	; (80056bc <HAL_ETH_IRQHandler+0x158>)
 80056a8:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 80056ac:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 80056ae:	6878      	ldr	r0, [r7, #4]
 80056b0:	f000 f814 	bl	80056dc <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 80056b4:	bf00      	nop
 80056b6:	3718      	adds	r7, #24
 80056b8:	46bd      	mov	sp, r7
 80056ba:	bd80      	pop	{r7, pc}
 80056bc:	40013c00 	.word	0x40013c00
 80056c0:	00010040 	.word	0x00010040
 80056c4:	007e2000 	.word	0x007e2000

080056c8 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 80056c8:	b480      	push	{r7}
 80056ca:	b083      	sub	sp, #12
 80056cc:	af00      	add	r7, sp, #0
 80056ce:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 80056d0:	bf00      	nop
 80056d2:	370c      	adds	r7, #12
 80056d4:	46bd      	mov	sp, r7
 80056d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056da:	4770      	bx	lr

080056dc <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 80056dc:	b480      	push	{r7}
 80056de:	b083      	sub	sp, #12
 80056e0:	af00      	add	r7, sp, #0
 80056e2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 80056e4:	bf00      	nop
 80056e6:	370c      	adds	r7, #12
 80056e8:	46bd      	mov	sp, r7
 80056ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056ee:	4770      	bx	lr

080056f0 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b086      	sub	sp, #24
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	60f8      	str	r0, [r7, #12]
 80056f8:	60b9      	str	r1, [r7, #8]
 80056fa:	607a      	str	r2, [r7, #4]
 80056fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80056fe:	68fb      	ldr	r3, [r7, #12]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	691b      	ldr	r3, [r3, #16]
 8005704:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8005706:	697b      	ldr	r3, [r7, #20]
 8005708:	f003 031c 	and.w	r3, r3, #28
 800570c:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 800570e:	68bb      	ldr	r3, [r7, #8]
 8005710:	02db      	lsls	r3, r3, #11
 8005712:	b29b      	uxth	r3, r3
 8005714:	697a      	ldr	r2, [r7, #20]
 8005716:	4313      	orrs	r3, r2
 8005718:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	019b      	lsls	r3, r3, #6
 800571e:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8005722:	697a      	ldr	r2, [r7, #20]
 8005724:	4313      	orrs	r3, r2
 8005726:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8005728:	697b      	ldr	r3, [r7, #20]
 800572a:	f023 0302 	bic.w	r3, r3, #2
 800572e:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8005730:	697b      	ldr	r3, [r7, #20]
 8005732:	f043 0301 	orr.w	r3, r3, #1
 8005736:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8005738:	68fb      	ldr	r3, [r7, #12]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	697a      	ldr	r2, [r7, #20]
 800573e:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8005740:	f7fd fe7c 	bl	800343c <HAL_GetTick>
 8005744:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005746:	e00d      	b.n	8005764 <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8005748:	f7fd fe78 	bl	800343c <HAL_GetTick>
 800574c:	4602      	mov	r2, r0
 800574e:	693b      	ldr	r3, [r7, #16]
 8005750:	1ad3      	subs	r3, r2, r3
 8005752:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005756:	d301      	bcc.n	800575c <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8005758:	2301      	movs	r3, #1
 800575a:	e010      	b.n	800577e <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 800575c:	68fb      	ldr	r3, [r7, #12]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	691b      	ldr	r3, [r3, #16]
 8005762:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005764:	697b      	ldr	r3, [r7, #20]
 8005766:	f003 0301 	and.w	r3, r3, #1
 800576a:	2b00      	cmp	r3, #0
 800576c:	d1ec      	bne.n	8005748 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 800576e:	68fb      	ldr	r3, [r7, #12]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	695b      	ldr	r3, [r3, #20]
 8005774:	b29b      	uxth	r3, r3
 8005776:	461a      	mov	r2, r3
 8005778:	683b      	ldr	r3, [r7, #0]
 800577a:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 800577c:	2300      	movs	r3, #0
}
 800577e:	4618      	mov	r0, r3
 8005780:	3718      	adds	r7, #24
 8005782:	46bd      	mov	sp, r7
 8005784:	bd80      	pop	{r7, pc}

08005786 <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b086      	sub	sp, #24
 800578a:	af00      	add	r7, sp, #0
 800578c:	60f8      	str	r0, [r7, #12]
 800578e:	60b9      	str	r1, [r7, #8]
 8005790:	607a      	str	r2, [r7, #4]
 8005792:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8005794:	68fb      	ldr	r3, [r7, #12]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800579c:	697b      	ldr	r3, [r7, #20]
 800579e:	f003 031c 	and.w	r3, r3, #28
 80057a2:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80057a4:	68bb      	ldr	r3, [r7, #8]
 80057a6:	02db      	lsls	r3, r3, #11
 80057a8:	b29b      	uxth	r3, r3
 80057aa:	697a      	ldr	r2, [r7, #20]
 80057ac:	4313      	orrs	r3, r2
 80057ae:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 80057b0:	687b      	ldr	r3, [r7, #4]
 80057b2:	019b      	lsls	r3, r3, #6
 80057b4:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 80057b8:	697a      	ldr	r2, [r7, #20]
 80057ba:	4313      	orrs	r3, r2
 80057bc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 80057be:	697b      	ldr	r3, [r7, #20]
 80057c0:	f043 0302 	orr.w	r3, r3, #2
 80057c4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 80057c6:	697b      	ldr	r3, [r7, #20]
 80057c8:	f043 0301 	orr.w	r3, r3, #1
 80057cc:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 80057ce:	683b      	ldr	r3, [r7, #0]
 80057d0:	b29a      	uxth	r2, r3
 80057d2:	68fb      	ldr	r3, [r7, #12]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 80057d8:	68fb      	ldr	r3, [r7, #12]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	697a      	ldr	r2, [r7, #20]
 80057de:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 80057e0:	f7fd fe2c 	bl	800343c <HAL_GetTick>
 80057e4:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80057e6:	e00d      	b.n	8005804 <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 80057e8:	f7fd fe28 	bl	800343c <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	693b      	ldr	r3, [r7, #16]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80057f6:	d301      	bcc.n	80057fc <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 80057f8:	2301      	movs	r3, #1
 80057fa:	e009      	b.n	8005810 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80057fc:	68fb      	ldr	r3, [r7, #12]
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	691b      	ldr	r3, [r3, #16]
 8005802:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8005804:	697b      	ldr	r3, [r7, #20]
 8005806:	f003 0301 	and.w	r3, r3, #1
 800580a:	2b00      	cmp	r3, #0
 800580c:	d1ec      	bne.n	80057e8 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 800580e:	2300      	movs	r3, #0
}
 8005810:	4618      	mov	r0, r3
 8005812:	3718      	adds	r7, #24
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}

08005818 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8005818:	b480      	push	{r7}
 800581a:	b083      	sub	sp, #12
 800581c:	af00      	add	r7, sp, #0
 800581e:	6078      	str	r0, [r7, #4]
 8005820:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8005822:	683b      	ldr	r3, [r7, #0]
 8005824:	2b00      	cmp	r3, #0
 8005826:	d101      	bne.n	800582c <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8005828:	2301      	movs	r3, #1
 800582a:	e0e6      	b.n	80059fa <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	681b      	ldr	r3, [r3, #0]
 8005832:	f003 0310 	and.w	r3, r3, #16
 8005836:	2b00      	cmp	r3, #0
 8005838:	bf14      	ite	ne
 800583a:	2301      	movne	r3, #1
 800583c:	2300      	moveq	r3, #0
 800583e:	b2db      	uxtb	r3, r3
 8005840:	461a      	mov	r2, r3
 8005842:	683b      	ldr	r3, [r7, #0]
 8005844:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005860:	2b00      	cmp	r3, #0
 8005862:	bf0c      	ite	eq
 8005864:	2301      	moveq	r3, #1
 8005866:	2300      	movne	r3, #0
 8005868:	b2db      	uxtb	r3, r3
 800586a:	461a      	mov	r2, r3
 800586c:	683b      	ldr	r3, [r7, #0]
 800586e:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	681b      	ldr	r3, [r3, #0]
 8005878:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 800587c:	2b00      	cmp	r3, #0
 800587e:	bf14      	ite	ne
 8005880:	2301      	movne	r3, #1
 8005882:	2300      	moveq	r3, #0
 8005884:	b2db      	uxtb	r3, r3
 8005886:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8005888:	683b      	ldr	r3, [r7, #0]
 800588a:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	681b      	ldr	r3, [r3, #0]
 8005892:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8005896:	2b00      	cmp	r3, #0
 8005898:	bf0c      	ite	eq
 800589a:	2301      	moveq	r3, #1
 800589c:	2300      	movne	r3, #0
 800589e:	b2db      	uxtb	r3, r3
 80058a0:	461a      	mov	r2, r3
 80058a2:	683b      	ldr	r3, [r7, #0]
 80058a4:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80058a6:	687b      	ldr	r3, [r7, #4]
 80058a8:	681b      	ldr	r3, [r3, #0]
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80058b0:	2b00      	cmp	r3, #0
 80058b2:	bf14      	ite	ne
 80058b4:	2301      	movne	r3, #1
 80058b6:	2300      	moveq	r3, #0
 80058b8:	b2db      	uxtb	r3, r3
 80058ba:	461a      	mov	r2, r3
 80058bc:	683b      	ldr	r3, [r7, #0]
 80058be:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	681b      	ldr	r3, [r3, #0]
 80058c4:	681b      	ldr	r3, [r3, #0]
 80058c6:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 80058ca:	683b      	ldr	r3, [r7, #0]
 80058cc:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 80058ce:	687b      	ldr	r3, [r7, #4]
 80058d0:	681b      	ldr	r3, [r3, #0]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 80058d8:	683b      	ldr	r3, [r7, #0]
 80058da:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	681b      	ldr	r3, [r3, #0]
 80058e0:	681b      	ldr	r3, [r3, #0]
 80058e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	bf0c      	ite	eq
 80058ea:	2301      	moveq	r3, #1
 80058ec:	2300      	movne	r3, #0
 80058ee:	b2db      	uxtb	r3, r3
 80058f0:	461a      	mov	r2, r3
 80058f2:	683b      	ldr	r3, [r7, #0]
 80058f4:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8005900:	2b00      	cmp	r3, #0
 8005902:	bf0c      	ite	eq
 8005904:	2301      	moveq	r3, #1
 8005906:	2300      	movne	r3, #0
 8005908:	b2db      	uxtb	r3, r3
 800590a:	461a      	mov	r2, r3
 800590c:	683b      	ldr	r3, [r7, #0]
 800590e:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800591a:	2b00      	cmp	r3, #0
 800591c:	bf14      	ite	ne
 800591e:	2301      	movne	r3, #1
 8005920:	2300      	moveq	r3, #0
 8005922:	b2db      	uxtb	r3, r3
 8005924:	461a      	mov	r2, r3
 8005926:	683b      	ldr	r3, [r7, #0]
 8005928:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 800592a:	687b      	ldr	r3, [r7, #4]
 800592c:	681b      	ldr	r3, [r3, #0]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 8005934:	683b      	ldr	r3, [r7, #0]
 8005936:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	681b      	ldr	r3, [r3, #0]
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8005942:	2b00      	cmp	r3, #0
 8005944:	bf14      	ite	ne
 8005946:	2301      	movne	r3, #1
 8005948:	2300      	moveq	r3, #0
 800594a:	b2db      	uxtb	r3, r3
 800594c:	461a      	mov	r2, r3
 800594e:	683b      	ldr	r3, [r7, #0]
 8005950:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 8005952:	687b      	ldr	r3, [r7, #4]
 8005954:	681b      	ldr	r3, [r3, #0]
 8005956:	681b      	ldr	r3, [r3, #0]
 8005958:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800595c:	2b00      	cmp	r3, #0
 800595e:	bf14      	ite	ne
 8005960:	2301      	movne	r3, #1
 8005962:	2300      	moveq	r3, #0
 8005964:	b2db      	uxtb	r3, r3
 8005966:	461a      	mov	r2, r3
 8005968:	683b      	ldr	r3, [r7, #0]
 800596a:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681b      	ldr	r3, [r3, #0]
 8005970:	699b      	ldr	r3, [r3, #24]
 8005972:	f003 0302 	and.w	r3, r3, #2
 8005976:	2b00      	cmp	r3, #0
 8005978:	bf14      	ite	ne
 800597a:	2301      	movne	r3, #1
 800597c:	2300      	moveq	r3, #0
 800597e:	b2db      	uxtb	r3, r3
 8005980:	461a      	mov	r2, r3
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	681b      	ldr	r3, [r3, #0]
 800598c:	699b      	ldr	r3, [r3, #24]
 800598e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005992:	2b00      	cmp	r3, #0
 8005994:	bf0c      	ite	eq
 8005996:	2301      	moveq	r3, #1
 8005998:	2300      	movne	r3, #0
 800599a:	b2db      	uxtb	r3, r3
 800599c:	461a      	mov	r2, r3
 800599e:	683b      	ldr	r3, [r7, #0]
 80059a0:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	681b      	ldr	r3, [r3, #0]
 80059a8:	699b      	ldr	r3, [r3, #24]
 80059aa:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80059ae:	683b      	ldr	r3, [r7, #0]
 80059b0:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	699b      	ldr	r3, [r3, #24]
 80059b8:	0c1b      	lsrs	r3, r3, #16
 80059ba:	b29a      	uxth	r2, r3
 80059bc:	683b      	ldr	r3, [r7, #0]
 80059be:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	681b      	ldr	r3, [r3, #0]
 80059c4:	699b      	ldr	r3, [r3, #24]
 80059c6:	f003 0304 	and.w	r3, r3, #4
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	bf14      	ite	ne
 80059ce:	2301      	movne	r3, #1
 80059d0:	2300      	moveq	r3, #0
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	461a      	mov	r2, r3
 80059d6:	683b      	ldr	r3, [r7, #0]
 80059d8:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80059dc:	687b      	ldr	r3, [r7, #4]
 80059de:	681b      	ldr	r3, [r3, #0]
 80059e0:	699b      	ldr	r3, [r3, #24]
 80059e2:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	bf14      	ite	ne
 80059ea:	2301      	movne	r3, #1
 80059ec:	2300      	moveq	r3, #0
 80059ee:	b2db      	uxtb	r3, r3
 80059f0:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80059f2:	683b      	ldr	r3, [r7, #0]
 80059f4:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 80059f8:	2300      	movs	r3, #0
}
 80059fa:	4618      	mov	r0, r3
 80059fc:	370c      	adds	r7, #12
 80059fe:	46bd      	mov	sp, r7
 8005a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a04:	4770      	bx	lr

08005a06 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8005a06:	b580      	push	{r7, lr}
 8005a08:	b082      	sub	sp, #8
 8005a0a:	af00      	add	r7, sp, #0
 8005a0c:	6078      	str	r0, [r7, #4]
 8005a0e:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8005a10:	683b      	ldr	r3, [r7, #0]
 8005a12:	2b00      	cmp	r3, #0
 8005a14:	d101      	bne.n	8005a1a <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8005a16:	2301      	movs	r3, #1
 8005a18:	e00b      	b.n	8005a32 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8005a1a:	687b      	ldr	r3, [r7, #4]
 8005a1c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005a20:	2b10      	cmp	r3, #16
 8005a22:	d105      	bne.n	8005a30 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8005a24:	6839      	ldr	r1, [r7, #0]
 8005a26:	6878      	ldr	r0, [r7, #4]
 8005a28:	f000 f87c 	bl	8005b24 <ETH_SetMACConfig>

    return HAL_OK;
 8005a2c:	2300      	movs	r3, #0
 8005a2e:	e000      	b.n	8005a32 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8005a30:	2301      	movs	r3, #1
  }
}
 8005a32:	4618      	mov	r0, r3
 8005a34:	3708      	adds	r7, #8
 8005a36:	46bd      	mov	sp, r7
 8005a38:	bd80      	pop	{r7, pc}
	...

08005a3c <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8005a3c:	b580      	push	{r7, lr}
 8005a3e:	b084      	sub	sp, #16
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8005a4c:	68fb      	ldr	r3, [r7, #12]
 8005a4e:	f023 031c 	bic.w	r3, r3, #28
 8005a52:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8005a54:	f003 fdfe 	bl	8009654 <HAL_RCC_GetHCLKFreq>
 8005a58:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8005a5a:	68bb      	ldr	r3, [r7, #8]
 8005a5c:	4a14      	ldr	r2, [pc, #80]	; (8005ab0 <HAL_ETH_SetMDIOClockRange+0x74>)
 8005a5e:	4293      	cmp	r3, r2
 8005a60:	d804      	bhi.n	8005a6c <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 8005a62:	68fb      	ldr	r3, [r7, #12]
 8005a64:	f043 0308 	orr.w	r3, r3, #8
 8005a68:	60fb      	str	r3, [r7, #12]
 8005a6a:	e019      	b.n	8005aa0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8005a6c:	68bb      	ldr	r3, [r7, #8]
 8005a6e:	4a11      	ldr	r2, [pc, #68]	; (8005ab4 <HAL_ETH_SetMDIOClockRange+0x78>)
 8005a70:	4293      	cmp	r3, r2
 8005a72:	d204      	bcs.n	8005a7e <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 8005a74:	68fb      	ldr	r3, [r7, #12]
 8005a76:	f043 030c 	orr.w	r3, r3, #12
 8005a7a:	60fb      	str	r3, [r7, #12]
 8005a7c:	e010      	b.n	8005aa0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8005a7e:	68bb      	ldr	r3, [r7, #8]
 8005a80:	4a0d      	ldr	r2, [pc, #52]	; (8005ab8 <HAL_ETH_SetMDIOClockRange+0x7c>)
 8005a82:	4293      	cmp	r3, r2
 8005a84:	d90c      	bls.n	8005aa0 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 8005a86:	68bb      	ldr	r3, [r7, #8]
 8005a88:	4a0c      	ldr	r2, [pc, #48]	; (8005abc <HAL_ETH_SetMDIOClockRange+0x80>)
 8005a8a:	4293      	cmp	r3, r2
 8005a8c:	d804      	bhi.n	8005a98 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8005a8e:	68fb      	ldr	r3, [r7, #12]
 8005a90:	f043 0304 	orr.w	r3, r3, #4
 8005a94:	60fb      	str	r3, [r7, #12]
 8005a96:	e003      	b.n	8005aa0 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8005a98:	68fb      	ldr	r3, [r7, #12]
 8005a9a:	f043 0310 	orr.w	r3, r3, #16
 8005a9e:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8005aa0:	687b      	ldr	r3, [r7, #4]
 8005aa2:	681b      	ldr	r3, [r3, #0]
 8005aa4:	68fa      	ldr	r2, [r7, #12]
 8005aa6:	611a      	str	r2, [r3, #16]
}
 8005aa8:	bf00      	nop
 8005aaa:	3710      	adds	r7, #16
 8005aac:	46bd      	mov	sp, r7
 8005aae:	bd80      	pop	{r7, pc}
 8005ab0:	02160ebf 	.word	0x02160ebf
 8005ab4:	03938700 	.word	0x03938700
 8005ab8:	05f5e0ff 	.word	0x05f5e0ff
 8005abc:	08f0d17f 	.word	0x08f0d17f

08005ac0 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 8005ac0:	b480      	push	{r7}
 8005ac2:	b083      	sub	sp, #12
 8005ac4:	af00      	add	r7, sp, #0
 8005ac6:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 8005ac8:	687b      	ldr	r3, [r7, #4]
 8005aca:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8005ace:	4618      	mov	r0, r3
 8005ad0:	370c      	adds	r7, #12
 8005ad2:	46bd      	mov	sp, r7
 8005ad4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad8:	4770      	bx	lr

08005ada <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 8005ada:	b580      	push	{r7, lr}
 8005adc:	b084      	sub	sp, #16
 8005ade:	af00      	add	r7, sp, #0
 8005ae0:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8005ae2:	2300      	movs	r3, #0
 8005ae4:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005aee:	699b      	ldr	r3, [r3, #24]
 8005af0:	687a      	ldr	r2, [r7, #4]
 8005af2:	6812      	ldr	r2, [r2, #0]
 8005af4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005af8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005afc:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8005afe:	687b      	ldr	r3, [r7, #4]
 8005b00:	681b      	ldr	r3, [r3, #0]
 8005b02:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005b06:	699b      	ldr	r3, [r3, #24]
 8005b08:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005b0a:	2001      	movs	r0, #1
 8005b0c:	f7fd fca2 	bl	8003454 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681a      	ldr	r2, [r3, #0]
 8005b14:	68fb      	ldr	r3, [r7, #12]
 8005b16:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005b1a:	6193      	str	r3, [r2, #24]
}
 8005b1c:	bf00      	nop
 8005b1e:	3710      	adds	r7, #16
 8005b20:	46bd      	mov	sp, r7
 8005b22:	bd80      	pop	{r7, pc}

08005b24 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 8005b24:	b580      	push	{r7, lr}
 8005b26:	b084      	sub	sp, #16
 8005b28:	af00      	add	r7, sp, #0
 8005b2a:	6078      	str	r0, [r7, #4]
 8005b2c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	681b      	ldr	r3, [r3, #0]
 8005b34:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 8005b36:	68fa      	ldr	r2, [r7, #12]
 8005b38:	4b53      	ldr	r3, [pc, #332]	; (8005c88 <ETH_SetMACConfig+0x164>)
 8005b3a:	4013      	ands	r3, r2
 8005b3c:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8005b3e:	683b      	ldr	r3, [r7, #0]
 8005b40:	7b9b      	ldrb	r3, [r3, #14]
 8005b42:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005b44:	683a      	ldr	r2, [r7, #0]
 8005b46:	7c12      	ldrb	r2, [r2, #16]
 8005b48:	2a00      	cmp	r2, #0
 8005b4a:	d102      	bne.n	8005b52 <ETH_SetMACConfig+0x2e>
 8005b4c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005b50:	e000      	b.n	8005b54 <ETH_SetMACConfig+0x30>
 8005b52:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8005b54:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8005b56:	683a      	ldr	r2, [r7, #0]
 8005b58:	7c52      	ldrb	r2, [r2, #17]
 8005b5a:	2a00      	cmp	r2, #0
 8005b5c:	d102      	bne.n	8005b64 <ETH_SetMACConfig+0x40>
 8005b5e:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 8005b62:	e000      	b.n	8005b66 <ETH_SetMACConfig+0x42>
 8005b64:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 8005b66:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8005b68:	683b      	ldr	r3, [r7, #0]
 8005b6a:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8005b6c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8005b6e:	683b      	ldr	r3, [r7, #0]
 8005b70:	7fdb      	ldrb	r3, [r3, #31]
 8005b72:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 8005b74:	431a      	orrs	r2, r3
                        macconf->Speed |
 8005b76:	683b      	ldr	r3, [r7, #0]
 8005b78:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8005b7a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8005b7c:	683a      	ldr	r2, [r7, #0]
 8005b7e:	7f92      	ldrb	r2, [r2, #30]
 8005b80:	2a00      	cmp	r2, #0
 8005b82:	d102      	bne.n	8005b8a <ETH_SetMACConfig+0x66>
 8005b84:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005b88:	e000      	b.n	8005b8c <ETH_SetMACConfig+0x68>
 8005b8a:	2200      	movs	r2, #0
                        macconf->Speed |
 8005b8c:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8005b8e:	683b      	ldr	r3, [r7, #0]
 8005b90:	7f1b      	ldrb	r3, [r3, #28]
 8005b92:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8005b94:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 8005b96:	683b      	ldr	r3, [r7, #0]
 8005b98:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8005b9a:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8005b9c:	683b      	ldr	r3, [r7, #0]
 8005b9e:	791b      	ldrb	r3, [r3, #4]
 8005ba0:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 8005ba2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8005ba4:	683a      	ldr	r2, [r7, #0]
 8005ba6:	f892 2020 	ldrb.w	r2, [r2, #32]
 8005baa:	2a00      	cmp	r2, #0
 8005bac:	d102      	bne.n	8005bb4 <ETH_SetMACConfig+0x90>
 8005bae:	f44f 7200 	mov.w	r2, #512	; 0x200
 8005bb2:	e000      	b.n	8005bb6 <ETH_SetMACConfig+0x92>
 8005bb4:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8005bb6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005bb8:	683b      	ldr	r3, [r7, #0]
 8005bba:	7bdb      	ldrb	r3, [r3, #15]
 8005bbc:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8005bbe:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 8005bc0:	683b      	ldr	r3, [r7, #0]
 8005bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8005bc4:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8005bc6:	683b      	ldr	r3, [r7, #0]
 8005bc8:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8005bcc:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8005bce:	4313      	orrs	r3, r2
 8005bd0:	68fa      	ldr	r2, [r7, #12]
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8005bd6:	687b      	ldr	r3, [r7, #4]
 8005bd8:	681b      	ldr	r3, [r3, #0]
 8005bda:	68fa      	ldr	r2, [r7, #12]
 8005bdc:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 8005bde:	687b      	ldr	r3, [r7, #4]
 8005be0:	681b      	ldr	r3, [r3, #0]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005be6:	2001      	movs	r0, #1
 8005be8:	f7fd fc34 	bl	8003454 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	68fa      	ldr	r2, [r7, #12]
 8005bf2:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	699b      	ldr	r3, [r3, #24]
 8005bfa:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8005bfc:	68fa      	ldr	r2, [r7, #12]
 8005bfe:	f64f 7341 	movw	r3, #65345	; 0xff41
 8005c02:	4013      	ands	r3, r2
 8005c04:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005c06:	683b      	ldr	r3, [r7, #0]
 8005c08:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005c0a:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005c0c:	683a      	ldr	r2, [r7, #0]
 8005c0e:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 8005c12:	2a00      	cmp	r2, #0
 8005c14:	d101      	bne.n	8005c1a <ETH_SetMACConfig+0xf6>
 8005c16:	2280      	movs	r2, #128	; 0x80
 8005c18:	e000      	b.n	8005c1c <ETH_SetMACConfig+0xf8>
 8005c1a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005c1c:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8005c1e:	683b      	ldr	r3, [r7, #0]
 8005c20:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005c22:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005c24:	683a      	ldr	r2, [r7, #0]
 8005c26:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8005c2a:	2a01      	cmp	r2, #1
 8005c2c:	d101      	bne.n	8005c32 <ETH_SetMACConfig+0x10e>
 8005c2e:	2208      	movs	r2, #8
 8005c30:	e000      	b.n	8005c34 <ETH_SetMACConfig+0x110>
 8005c32:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8005c34:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8005c36:	683a      	ldr	r2, [r7, #0]
 8005c38:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8005c3c:	2a01      	cmp	r2, #1
 8005c3e:	d101      	bne.n	8005c44 <ETH_SetMACConfig+0x120>
 8005c40:	2204      	movs	r2, #4
 8005c42:	e000      	b.n	8005c46 <ETH_SetMACConfig+0x122>
 8005c44:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8005c46:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8005c48:	683a      	ldr	r2, [r7, #0]
 8005c4a:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8005c4e:	2a01      	cmp	r2, #1
 8005c50:	d101      	bne.n	8005c56 <ETH_SetMACConfig+0x132>
 8005c52:	2202      	movs	r2, #2
 8005c54:	e000      	b.n	8005c58 <ETH_SetMACConfig+0x134>
 8005c56:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005c58:	4313      	orrs	r3, r2
 8005c5a:	68fa      	ldr	r2, [r7, #12]
 8005c5c:	4313      	orrs	r3, r2
 8005c5e:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005c60:	687b      	ldr	r3, [r7, #4]
 8005c62:	681b      	ldr	r3, [r3, #0]
 8005c64:	68fa      	ldr	r2, [r7, #12]
 8005c66:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	699b      	ldr	r3, [r3, #24]
 8005c6e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005c70:	2001      	movs	r0, #1
 8005c72:	f7fd fbef 	bl	8003454 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 8005c76:	687b      	ldr	r3, [r7, #4]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	68fa      	ldr	r2, [r7, #12]
 8005c7c:	619a      	str	r2, [r3, #24]
}
 8005c7e:	bf00      	nop
 8005c80:	3710      	adds	r7, #16
 8005c82:	46bd      	mov	sp, r7
 8005c84:	bd80      	pop	{r7, pc}
 8005c86:	bf00      	nop
 8005c88:	fd20810f 	.word	0xfd20810f

08005c8c <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8005c8c:	b580      	push	{r7, lr}
 8005c8e:	b084      	sub	sp, #16
 8005c90:	af00      	add	r7, sp, #0
 8005c92:	6078      	str	r0, [r7, #4]
 8005c94:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	681b      	ldr	r3, [r3, #0]
 8005c9a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005c9e:	699b      	ldr	r3, [r3, #24]
 8005ca0:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 8005ca2:	68fa      	ldr	r2, [r7, #12]
 8005ca4:	4b3d      	ldr	r3, [pc, #244]	; (8005d9c <ETH_SetDMAConfig+0x110>)
 8005ca6:	4013      	ands	r3, r2
 8005ca8:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005caa:	683b      	ldr	r3, [r7, #0]
 8005cac:	7b1b      	ldrb	r3, [r3, #12]
 8005cae:	2b00      	cmp	r3, #0
 8005cb0:	d102      	bne.n	8005cb8 <ETH_SetDMAConfig+0x2c>
 8005cb2:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8005cb6:	e000      	b.n	8005cba <ETH_SetDMAConfig+0x2e>
 8005cb8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8005cba:	683b      	ldr	r3, [r7, #0]
 8005cbc:	7b5b      	ldrb	r3, [r3, #13]
 8005cbe:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005cc0:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8005cc2:	683a      	ldr	r2, [r7, #0]
 8005cc4:	7f52      	ldrb	r2, [r2, #29]
 8005cc6:	2a00      	cmp	r2, #0
 8005cc8:	d102      	bne.n	8005cd0 <ETH_SetDMAConfig+0x44>
 8005cca:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 8005cce:	e000      	b.n	8005cd2 <ETH_SetDMAConfig+0x46>
 8005cd0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8005cd2:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005cd4:	683b      	ldr	r3, [r7, #0]
 8005cd6:	7b9b      	ldrb	r3, [r3, #14]
 8005cd8:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8005cda:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8005cdc:	683b      	ldr	r3, [r7, #0]
 8005cde:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8005ce0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005ce2:	683b      	ldr	r3, [r7, #0]
 8005ce4:	7f1b      	ldrb	r3, [r3, #28]
 8005ce6:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8005ce8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005cea:	683b      	ldr	r3, [r7, #0]
 8005cec:	7f9b      	ldrb	r3, [r3, #30]
 8005cee:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 8005cf0:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 8005cf2:	683b      	ldr	r3, [r7, #0]
 8005cf4:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8005cf6:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8005cf8:	683b      	ldr	r3, [r7, #0]
 8005cfa:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 8005cfe:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8005d00:	4313      	orrs	r3, r2
 8005d02:	68fa      	ldr	r2, [r7, #12]
 8005d04:	4313      	orrs	r3, r2
 8005d06:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d10:	461a      	mov	r2, r3
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d1e:	699b      	ldr	r3, [r3, #24]
 8005d20:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005d22:	2001      	movs	r0, #1
 8005d24:	f7fd fb96 	bl	8003454 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005d28:	687b      	ldr	r3, [r7, #4]
 8005d2a:	681b      	ldr	r3, [r3, #0]
 8005d2c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d30:	461a      	mov	r2, r3
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005d36:	683b      	ldr	r3, [r7, #0]
 8005d38:	791b      	ldrb	r3, [r3, #4]
 8005d3a:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8005d3c:	683b      	ldr	r3, [r7, #0]
 8005d3e:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005d40:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005d42:	683b      	ldr	r3, [r7, #0]
 8005d44:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 8005d46:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8005d48:	683b      	ldr	r3, [r7, #0]
 8005d4a:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005d4c:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005d4e:	683b      	ldr	r3, [r7, #0]
 8005d50:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 8005d54:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 8005d56:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005d58:	683b      	ldr	r3, [r7, #0]
 8005d5a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005d5c:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005d5e:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8005d60:	683b      	ldr	r3, [r7, #0]
 8005d62:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005d64:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005d66:	687a      	ldr	r2, [r7, #4]
 8005d68:	6812      	ldr	r2, [r2, #0]
 8005d6a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005d6e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005d72:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005d80:	2001      	movs	r0, #1
 8005d82:	f7fd fb67 	bl	8003454 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005d8e:	461a      	mov	r2, r3
 8005d90:	68fb      	ldr	r3, [r7, #12]
 8005d92:	6013      	str	r3, [r2, #0]
}
 8005d94:	bf00      	nop
 8005d96:	3710      	adds	r7, #16
 8005d98:	46bd      	mov	sp, r7
 8005d9a:	bd80      	pop	{r7, pc}
 8005d9c:	f8de3f23 	.word	0xf8de3f23

08005da0 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005da0:	b580      	push	{r7, lr}
 8005da2:	b0a6      	sub	sp, #152	; 0x98
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8005da8:	2301      	movs	r3, #1
 8005daa:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 8005dae:	2301      	movs	r3, #1
 8005db0:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8005db4:	2300      	movs	r3, #0
 8005db6:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8005db8:	2300      	movs	r3, #0
 8005dba:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 8005dca:	2301      	movs	r3, #1
 8005dcc:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 8005dd0:	2301      	movs	r3, #1
 8005dd2:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 8005dd6:	2300      	movs	r3, #0
 8005dd8:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8005ddc:	2300      	movs	r3, #0
 8005dde:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8005de2:	2300      	movs	r3, #0
 8005de4:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 8005de6:	2300      	movs	r3, #0
 8005de8:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8005dec:	2300      	movs	r3, #0
 8005dee:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8005df0:	2300      	movs	r3, #0
 8005df2:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 8005df6:	2300      	movs	r3, #0
 8005df8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8005dfc:	2300      	movs	r3, #0
 8005dfe:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8005e02:	2300      	movs	r3, #0
 8005e04:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005e08:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005e0c:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005e0e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8005e12:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 8005e14:	2300      	movs	r3, #0
 8005e16:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005e1a:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005e1e:	4619      	mov	r1, r3
 8005e20:	6878      	ldr	r0, [r7, #4]
 8005e22:	f7ff fe7f 	bl	8005b24 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 8005e26:	2301      	movs	r3, #1
 8005e28:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8005e2a:	2301      	movs	r3, #1
 8005e2c:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8005e2e:	2301      	movs	r3, #1
 8005e30:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 8005e34:	2301      	movs	r3, #1
 8005e36:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8005e38:	2300      	movs	r3, #0
 8005e3a:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8005e3c:	2300      	movs	r3, #0
 8005e3e:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8005e42:	2300      	movs	r3, #0
 8005e44:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8005e48:	2300      	movs	r3, #0
 8005e4a:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8005e4c:	2301      	movs	r3, #1
 8005e4e:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 8005e52:	2301      	movs	r3, #1
 8005e54:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 8005e56:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005e5a:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005e5c:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005e60:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 8005e62:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005e66:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8005e68:	2301      	movs	r3, #1
 8005e6a:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8005e6e:	2300      	movs	r3, #0
 8005e70:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 8005e72:	2300      	movs	r3, #0
 8005e74:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 8005e76:	f107 0308 	add.w	r3, r7, #8
 8005e7a:	4619      	mov	r1, r3
 8005e7c:	6878      	ldr	r0, [r7, #4]
 8005e7e:	f7ff ff05 	bl	8005c8c <ETH_SetDMAConfig>
}
 8005e82:	bf00      	nop
 8005e84:	3798      	adds	r7, #152	; 0x98
 8005e86:	46bd      	mov	sp, r7
 8005e88:	bd80      	pop	{r7, pc}
	...

08005e8c <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005e8c:	b480      	push	{r7}
 8005e8e:	b087      	sub	sp, #28
 8005e90:	af00      	add	r7, sp, #0
 8005e92:	60f8      	str	r0, [r7, #12]
 8005e94:	60b9      	str	r1, [r7, #8]
 8005e96:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	3305      	adds	r3, #5
 8005e9c:	781b      	ldrb	r3, [r3, #0]
 8005e9e:	021b      	lsls	r3, r3, #8
 8005ea0:	687a      	ldr	r2, [r7, #4]
 8005ea2:	3204      	adds	r2, #4
 8005ea4:	7812      	ldrb	r2, [r2, #0]
 8005ea6:	4313      	orrs	r3, r2
 8005ea8:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 8005eaa:	68ba      	ldr	r2, [r7, #8]
 8005eac:	4b11      	ldr	r3, [pc, #68]	; (8005ef4 <ETH_MACAddressConfig+0x68>)
 8005eae:	4413      	add	r3, r2
 8005eb0:	461a      	mov	r2, r3
 8005eb2:	697b      	ldr	r3, [r7, #20]
 8005eb4:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 8005eb6:	687b      	ldr	r3, [r7, #4]
 8005eb8:	3303      	adds	r3, #3
 8005eba:	781b      	ldrb	r3, [r3, #0]
 8005ebc:	061a      	lsls	r2, r3, #24
 8005ebe:	687b      	ldr	r3, [r7, #4]
 8005ec0:	3302      	adds	r3, #2
 8005ec2:	781b      	ldrb	r3, [r3, #0]
 8005ec4:	041b      	lsls	r3, r3, #16
 8005ec6:	431a      	orrs	r2, r3
 8005ec8:	687b      	ldr	r3, [r7, #4]
 8005eca:	3301      	adds	r3, #1
 8005ecc:	781b      	ldrb	r3, [r3, #0]
 8005ece:	021b      	lsls	r3, r3, #8
 8005ed0:	4313      	orrs	r3, r2
 8005ed2:	687a      	ldr	r2, [r7, #4]
 8005ed4:	7812      	ldrb	r2, [r2, #0]
 8005ed6:	4313      	orrs	r3, r2
 8005ed8:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 8005eda:	68ba      	ldr	r2, [r7, #8]
 8005edc:	4b06      	ldr	r3, [pc, #24]	; (8005ef8 <ETH_MACAddressConfig+0x6c>)
 8005ede:	4413      	add	r3, r2
 8005ee0:	461a      	mov	r2, r3
 8005ee2:	697b      	ldr	r3, [r7, #20]
 8005ee4:	6013      	str	r3, [r2, #0]
}
 8005ee6:	bf00      	nop
 8005ee8:	371c      	adds	r7, #28
 8005eea:	46bd      	mov	sp, r7
 8005eec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef0:	4770      	bx	lr
 8005ef2:	bf00      	nop
 8005ef4:	40028040 	.word	0x40028040
 8005ef8:	40028044 	.word	0x40028044

08005efc <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8005efc:	b480      	push	{r7}
 8005efe:	b085      	sub	sp, #20
 8005f00:	af00      	add	r7, sp, #0
 8005f02:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005f04:	2300      	movs	r3, #0
 8005f06:	60fb      	str	r3, [r7, #12]
 8005f08:	e03e      	b.n	8005f88 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	68d9      	ldr	r1, [r3, #12]
 8005f0e:	68fa      	ldr	r2, [r7, #12]
 8005f10:	4613      	mov	r3, r2
 8005f12:	009b      	lsls	r3, r3, #2
 8005f14:	4413      	add	r3, r2
 8005f16:	00db      	lsls	r3, r3, #3
 8005f18:	440b      	add	r3, r1
 8005f1a:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8005f1c:	68bb      	ldr	r3, [r7, #8]
 8005f1e:	2200      	movs	r2, #0
 8005f20:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 8005f22:	68bb      	ldr	r3, [r7, #8]
 8005f24:	2200      	movs	r2, #0
 8005f26:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8005f28:	68bb      	ldr	r3, [r7, #8]
 8005f2a:	2200      	movs	r2, #0
 8005f2c:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005f2e:	68bb      	ldr	r3, [r7, #8]
 8005f30:	2200      	movs	r2, #0
 8005f32:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8005f34:	68b9      	ldr	r1, [r7, #8]
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	68fa      	ldr	r2, [r7, #12]
 8005f3a:	3206      	adds	r2, #6
 8005f3c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8005f40:	68bb      	ldr	r3, [r7, #8]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005f48:	68bb      	ldr	r3, [r7, #8]
 8005f4a:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8005f4c:	68fb      	ldr	r3, [r7, #12]
 8005f4e:	2b02      	cmp	r3, #2
 8005f50:	d80c      	bhi.n	8005f6c <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 8005f52:	687b      	ldr	r3, [r7, #4]
 8005f54:	68d9      	ldr	r1, [r3, #12]
 8005f56:	68fb      	ldr	r3, [r7, #12]
 8005f58:	1c5a      	adds	r2, r3, #1
 8005f5a:	4613      	mov	r3, r2
 8005f5c:	009b      	lsls	r3, r3, #2
 8005f5e:	4413      	add	r3, r2
 8005f60:	00db      	lsls	r3, r3, #3
 8005f62:	440b      	add	r3, r1
 8005f64:	461a      	mov	r2, r3
 8005f66:	68bb      	ldr	r3, [r7, #8]
 8005f68:	60da      	str	r2, [r3, #12]
 8005f6a:	e004      	b.n	8005f76 <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	68db      	ldr	r3, [r3, #12]
 8005f70:	461a      	mov	r2, r3
 8005f72:	68bb      	ldr	r3, [r7, #8]
 8005f74:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 8005f76:	68bb      	ldr	r3, [r7, #8]
 8005f78:	681b      	ldr	r3, [r3, #0]
 8005f7a:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8005f7e:	68bb      	ldr	r3, [r7, #8]
 8005f80:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8005f82:	68fb      	ldr	r3, [r7, #12]
 8005f84:	3301      	adds	r3, #1
 8005f86:	60fb      	str	r3, [r7, #12]
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2b03      	cmp	r3, #3
 8005f8c:	d9bd      	bls.n	8005f0a <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2200      	movs	r2, #0
 8005f92:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	68da      	ldr	r2, [r3, #12]
 8005f98:	687b      	ldr	r3, [r7, #4]
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005fa0:	611a      	str	r2, [r3, #16]
}
 8005fa2:	bf00      	nop
 8005fa4:	3714      	adds	r7, #20
 8005fa6:	46bd      	mov	sp, r7
 8005fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fac:	4770      	bx	lr

08005fae <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8005fae:	b480      	push	{r7}
 8005fb0:	b085      	sub	sp, #20
 8005fb2:	af00      	add	r7, sp, #0
 8005fb4:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005fb6:	2300      	movs	r3, #0
 8005fb8:	60fb      	str	r3, [r7, #12]
 8005fba:	e048      	b.n	800604e <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	6919      	ldr	r1, [r3, #16]
 8005fc0:	68fa      	ldr	r2, [r7, #12]
 8005fc2:	4613      	mov	r3, r2
 8005fc4:	009b      	lsls	r3, r3, #2
 8005fc6:	4413      	add	r3, r2
 8005fc8:	00db      	lsls	r3, r3, #3
 8005fca:	440b      	add	r3, r1
 8005fcc:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 8005fce:	68bb      	ldr	r3, [r7, #8]
 8005fd0:	2200      	movs	r2, #0
 8005fd2:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 8005fd4:	68bb      	ldr	r3, [r7, #8]
 8005fd6:	2200      	movs	r2, #0
 8005fd8:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 8005fda:	68bb      	ldr	r3, [r7, #8]
 8005fdc:	2200      	movs	r2, #0
 8005fde:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 8005fe0:	68bb      	ldr	r3, [r7, #8]
 8005fe2:	2200      	movs	r2, #0
 8005fe4:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 8005fe6:	68bb      	ldr	r3, [r7, #8]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 8005fec:	68bb      	ldr	r3, [r7, #8]
 8005fee:	2200      	movs	r2, #0
 8005ff0:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8005ff2:	68bb      	ldr	r3, [r7, #8]
 8005ff4:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8005ff8:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	695b      	ldr	r3, [r3, #20]
 8005ffe:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 800600e:	68bb      	ldr	r3, [r7, #8]
 8006010:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8006012:	68b9      	ldr	r1, [r7, #8]
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	68fa      	ldr	r2, [r7, #12]
 8006018:	3212      	adds	r2, #18
 800601a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	2b02      	cmp	r3, #2
 8006022:	d80c      	bhi.n	800603e <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8006024:	687b      	ldr	r3, [r7, #4]
 8006026:	6919      	ldr	r1, [r3, #16]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	1c5a      	adds	r2, r3, #1
 800602c:	4613      	mov	r3, r2
 800602e:	009b      	lsls	r3, r3, #2
 8006030:	4413      	add	r3, r2
 8006032:	00db      	lsls	r3, r3, #3
 8006034:	440b      	add	r3, r1
 8006036:	461a      	mov	r2, r3
 8006038:	68bb      	ldr	r3, [r7, #8]
 800603a:	60da      	str	r2, [r3, #12]
 800603c:	e004      	b.n	8006048 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 800603e:	687b      	ldr	r3, [r7, #4]
 8006040:	691b      	ldr	r3, [r3, #16]
 8006042:	461a      	mov	r2, r3
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8006048:	68fb      	ldr	r3, [r7, #12]
 800604a:	3301      	adds	r3, #1
 800604c:	60fb      	str	r3, [r7, #12]
 800604e:	68fb      	ldr	r3, [r7, #12]
 8006050:	2b03      	cmp	r3, #3
 8006052:	d9b3      	bls.n	8005fbc <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	2200      	movs	r2, #0
 8006058:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 800605a:	687b      	ldr	r3, [r7, #4]
 800605c:	2200      	movs	r2, #0
 800605e:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	2200      	movs	r2, #0
 8006064:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	2200      	movs	r2, #0
 800606a:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 800606c:	687b      	ldr	r3, [r7, #4]
 800606e:	2200      	movs	r2, #0
 8006070:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	691a      	ldr	r2, [r3, #16]
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	681b      	ldr	r3, [r3, #0]
 800607a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800607e:	60da      	str	r2, [r3, #12]
}
 8006080:	bf00      	nop
 8006082:	3714      	adds	r7, #20
 8006084:	46bd      	mov	sp, r7
 8006086:	f85d 7b04 	ldr.w	r7, [sp], #4
 800608a:	4770      	bx	lr

0800608c <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 800608c:	b480      	push	{r7}
 800608e:	b091      	sub	sp, #68	; 0x44
 8006090:	af00      	add	r7, sp, #0
 8006092:	60f8      	str	r0, [r7, #12]
 8006094:	60b9      	str	r1, [r7, #8]
 8006096:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8006098:	68fb      	ldr	r3, [r7, #12]
 800609a:	3318      	adds	r3, #24
 800609c:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 800609e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a0:	691b      	ldr	r3, [r3, #16]
 80060a2:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 80060a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060a6:	691b      	ldr	r3, [r3, #16]
 80060a8:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80060aa:	2300      	movs	r3, #0
 80060ac:	637b      	str	r3, [r7, #52]	; 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80060ae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80060b0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80060b2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80060b6:	633b      	str	r3, [r7, #48]	; 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80060b8:	68bb      	ldr	r3, [r7, #8]
 80060ba:	689b      	ldr	r3, [r3, #8]
 80060bc:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t           bd_count = 0;
 80060be:	2300      	movs	r3, #0
 80060c0:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80060c2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060c4:	681b      	ldr	r3, [r3, #0]
 80060c6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80060ca:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80060ce:	d007      	beq.n	80060e0 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80060d0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80060d2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80060d4:	3304      	adds	r3, #4
 80060d6:	009b      	lsls	r3, r3, #2
 80060d8:	4413      	add	r3, r2
 80060da:	685b      	ldr	r3, [r3, #4]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d001      	beq.n	80060e4 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80060e0:	2302      	movs	r3, #2
 80060e2:	e111      	b.n	8006308 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 80060e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80060e6:	3301      	adds	r3, #1
 80060e8:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80060ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80060ec:	681b      	ldr	r3, [r3, #0]
 80060ee:	461a      	mov	r2, r3
 80060f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f2:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80060f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80060f6:	685a      	ldr	r2, [r3, #4]
 80060f8:	4b86      	ldr	r3, [pc, #536]	; (8006314 <ETH_Prepare_Tx_Descriptors+0x288>)
 80060fa:	4013      	ands	r3, r2
 80060fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80060fe:	6852      	ldr	r2, [r2, #4]
 8006100:	431a      	orrs	r2, r3
 8006102:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006104:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8006106:	68bb      	ldr	r3, [r7, #8]
 8006108:	681b      	ldr	r3, [r3, #0]
 800610a:	f003 0301 	and.w	r3, r3, #1
 800610e:	2b00      	cmp	r3, #0
 8006110:	d008      	beq.n	8006124 <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8006112:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006114:	681b      	ldr	r3, [r3, #0]
 8006116:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 800611a:	68bb      	ldr	r3, [r7, #8]
 800611c:	695b      	ldr	r3, [r3, #20]
 800611e:	431a      	orrs	r2, r3
 8006120:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006122:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8006124:	68bb      	ldr	r3, [r7, #8]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	f003 0320 	and.w	r3, r3, #32
 800612c:	2b00      	cmp	r3, #0
 800612e:	d008      	beq.n	8006142 <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8006130:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8006138:	68bb      	ldr	r3, [r7, #8]
 800613a:	691b      	ldr	r3, [r3, #16]
 800613c:	431a      	orrs	r2, r3
 800613e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006140:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8006142:	68bb      	ldr	r3, [r7, #8]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	f003 0304 	and.w	r3, r3, #4
 800614a:	2b00      	cmp	r3, #0
 800614c:	d005      	beq.n	800615a <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 800614e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006150:	681b      	ldr	r3, [r3, #0]
 8006152:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006158:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800615a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800615c:	681b      	ldr	r3, [r3, #0]
 800615e:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8006162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006164:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8006166:	e082      	b.n	800626e <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8006168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800616a:	681b      	ldr	r3, [r3, #0]
 800616c:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8006170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006172:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	2b00      	cmp	r3, #0
 8006178:	d006      	beq.n	8006188 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800617a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800617c:	681b      	ldr	r3, [r3, #0]
 800617e:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006184:	601a      	str	r2, [r3, #0]
 8006186:	e005      	b.n	8006194 <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8006188:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006190:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006192:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8006194:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006196:	3301      	adds	r3, #1
 8006198:	63fb      	str	r3, [r7, #60]	; 0x3c
 800619a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800619c:	2b03      	cmp	r3, #3
 800619e:	d902      	bls.n	80061a6 <ETH_Prepare_Tx_Descriptors+0x11a>
 80061a0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061a2:	3b04      	subs	r3, #4
 80061a4:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80061a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80061aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061ae:	633b      	str	r3, [r7, #48]	; 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80061b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061b2:	681b      	ldr	r3, [r3, #0]
 80061b4:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80061b8:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80061bc:	d007      	beq.n	80061ce <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80061be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80061c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061c2:	3304      	adds	r3, #4
 80061c4:	009b      	lsls	r3, r3, #2
 80061c6:	4413      	add	r3, r2
 80061c8:	685b      	ldr	r3, [r3, #4]
 80061ca:	2b00      	cmp	r3, #0
 80061cc:	d029      	beq.n	8006222 <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 80061ce:	6a3b      	ldr	r3, [r7, #32]
 80061d0:	63fb      	str	r3, [r7, #60]	; 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80061d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80061d4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80061d6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061da:	633b      	str	r3, [r7, #48]	; 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80061dc:	2300      	movs	r3, #0
 80061de:	63bb      	str	r3, [r7, #56]	; 0x38
 80061e0:	e019      	b.n	8006216 <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 80061e2:	f3bf 8f5f 	dmb	sy
}
 80061e6:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80061e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80061f0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80061f2:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80061f4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061f6:	3301      	adds	r3, #1
 80061f8:	63fb      	str	r3, [r7, #60]	; 0x3c
 80061fa:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80061fc:	2b03      	cmp	r3, #3
 80061fe:	d902      	bls.n	8006206 <ETH_Prepare_Tx_Descriptors+0x17a>
 8006200:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006202:	3b04      	subs	r3, #4
 8006204:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8006206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006208:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800620a:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800620e:	633b      	str	r3, [r7, #48]	; 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8006210:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006212:	3301      	adds	r3, #1
 8006214:	63bb      	str	r3, [r7, #56]	; 0x38
 8006216:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006218:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800621a:	429a      	cmp	r2, r3
 800621c:	d3e1      	bcc.n	80061e2 <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 800621e:	2302      	movs	r3, #2
 8006220:	e072      	b.n	8006308 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8006222:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006224:	681b      	ldr	r3, [r3, #0]
 8006226:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800622a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800622c:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 800622e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006230:	3301      	adds	r3, #1
 8006232:	637b      	str	r3, [r7, #52]	; 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8006234:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006236:	689b      	ldr	r3, [r3, #8]
 8006238:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 800623a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800623c:	681b      	ldr	r3, [r3, #0]
 800623e:	461a      	mov	r2, r3
 8006240:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006242:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8006244:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006246:	685a      	ldr	r2, [r3, #4]
 8006248:	4b32      	ldr	r3, [pc, #200]	; (8006314 <ETH_Prepare_Tx_Descriptors+0x288>)
 800624a:	4013      	ands	r3, r2
 800624c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800624e:	6852      	ldr	r2, [r2, #4]
 8006250:	431a      	orrs	r2, r3
 8006252:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006254:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8006256:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006258:	3301      	adds	r3, #1
 800625a:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 800625c:	f3bf 8f5f 	dmb	sy
}
 8006260:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8006262:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 800626a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800626c:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 800626e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006270:	689b      	ldr	r3, [r3, #8]
 8006272:	2b00      	cmp	r3, #0
 8006274:	f47f af78 	bne.w	8006168 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	2b00      	cmp	r3, #0
 800627c:	d006      	beq.n	800628c <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800627e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8006286:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006288:	601a      	str	r2, [r3, #0]
 800628a:	e005      	b.n	8006298 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 800628c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8006294:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006296:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8006298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800629a:	681b      	ldr	r3, [r3, #0]
 800629c:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 80062a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062a2:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 80062a4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062a6:	6a3a      	ldr	r2, [r7, #32]
 80062a8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80062ac:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80062ae:	f3bf 8f5f 	dmb	sy
}
 80062b2:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80062b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062b6:	681b      	ldr	r3, [r3, #0]
 80062b8:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80062bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80062be:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80062c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062c2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80062c4:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80062c6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80062c8:	3304      	adds	r3, #4
 80062ca:	009b      	lsls	r3, r3, #2
 80062cc:	440b      	add	r3, r1
 80062ce:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80062d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062d2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80062d4:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80062d6:	f3ef 8310 	mrs	r3, PRIMASK
 80062da:	613b      	str	r3, [r7, #16]
  return(result);
 80062dc:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80062de:	61fb      	str	r3, [r7, #28]
 80062e0:	2301      	movs	r3, #1
 80062e2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062e4:	697b      	ldr	r3, [r7, #20]
 80062e6:	f383 8810 	msr	PRIMASK, r3
}
 80062ea:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80062ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062ee:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80062f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80062f2:	4413      	add	r3, r2
 80062f4:	1c5a      	adds	r2, r3, #1
 80062f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80062f8:	629a      	str	r2, [r3, #40]	; 0x28
 80062fa:	69fb      	ldr	r3, [r7, #28]
 80062fc:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80062fe:	69bb      	ldr	r3, [r7, #24]
 8006300:	f383 8810 	msr	PRIMASK, r3
}
 8006304:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8006306:	2300      	movs	r3, #0
}
 8006308:	4618      	mov	r0, r3
 800630a:	3744      	adds	r7, #68	; 0x44
 800630c:	46bd      	mov	sp, r7
 800630e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006312:	4770      	bx	lr
 8006314:	ffffe000 	.word	0xffffe000

08006318 <HAL_FLASH_Program_IT>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program_IT(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006318:	b580      	push	{r7, lr}
 800631a:	b086      	sub	sp, #24
 800631c:	af00      	add	r7, sp, #0
 800631e:	60f8      	str	r0, [r7, #12]
 8006320:	60b9      	str	r1, [r7, #8]
 8006322:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_OK;
 8006326:	2300      	movs	r3, #0
 8006328:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800632a:	4b25      	ldr	r3, [pc, #148]	; (80063c0 <HAL_FLASH_Program_IT+0xa8>)
 800632c:	7d1b      	ldrb	r3, [r3, #20]
 800632e:	2b01      	cmp	r3, #1
 8006330:	d101      	bne.n	8006336 <HAL_FLASH_Program_IT+0x1e>
 8006332:	2302      	movs	r3, #2
 8006334:	e040      	b.n	80063b8 <HAL_FLASH_Program_IT+0xa0>
 8006336:	4b22      	ldr	r3, [pc, #136]	; (80063c0 <HAL_FLASH_Program_IT+0xa8>)
 8006338:	2201      	movs	r2, #1
 800633a:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Enable End of FLASH Operation interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
 800633c:	4b21      	ldr	r3, [pc, #132]	; (80063c4 <HAL_FLASH_Program_IT+0xac>)
 800633e:	691b      	ldr	r3, [r3, #16]
 8006340:	4a20      	ldr	r2, [pc, #128]	; (80063c4 <HAL_FLASH_Program_IT+0xac>)
 8006342:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8006346:	6113      	str	r3, [r2, #16]
  
  /* Enable Error source interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
 8006348:	4b1e      	ldr	r3, [pc, #120]	; (80063c4 <HAL_FLASH_Program_IT+0xac>)
 800634a:	691b      	ldr	r3, [r3, #16]
 800634c:	4a1d      	ldr	r2, [pc, #116]	; (80063c4 <HAL_FLASH_Program_IT+0xac>)
 800634e:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 8006352:	6113      	str	r3, [r2, #16]
  
  /* Clear pending flags (if any) */  
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP    | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |\
 8006354:	4b1b      	ldr	r3, [pc, #108]	; (80063c4 <HAL_FLASH_Program_IT+0xac>)
 8006356:	22f3      	movs	r2, #243	; 0xf3
 8006358:	60da      	str	r2, [r3, #12]
                         FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR| FLASH_FLAG_ERSERR);  

  pFlash.ProcedureOnGoing = FLASH_PROC_PROGRAM;
 800635a:	4b19      	ldr	r3, [pc, #100]	; (80063c0 <HAL_FLASH_Program_IT+0xa8>)
 800635c:	2203      	movs	r2, #3
 800635e:	701a      	strb	r2, [r3, #0]
  pFlash.Address = Address;
 8006360:	4a17      	ldr	r2, [pc, #92]	; (80063c0 <HAL_FLASH_Program_IT+0xa8>)
 8006362:	68bb      	ldr	r3, [r7, #8]
 8006364:	6113      	str	r3, [r2, #16]
  
  switch(TypeProgram)
 8006366:	68fb      	ldr	r3, [r7, #12]
 8006368:	2b03      	cmp	r3, #3
 800636a:	d823      	bhi.n	80063b4 <HAL_FLASH_Program_IT+0x9c>
 800636c:	a201      	add	r2, pc, #4	; (adr r2, 8006374 <HAL_FLASH_Program_IT+0x5c>)
 800636e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006372:	bf00      	nop
 8006374:	08006385 	.word	0x08006385
 8006378:	08006391 	.word	0x08006391
 800637c:	0800639d 	.word	0x0800639d
 8006380:	080063a9 	.word	0x080063a9
  {
    case FLASH_TYPEPROGRAM_BYTE :
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8006384:	783b      	ldrb	r3, [r7, #0]
 8006386:	4619      	mov	r1, r3
 8006388:	68b8      	ldr	r0, [r7, #8]
 800638a:	f000 f985 	bl	8006698 <FLASH_Program_Byte>
      break;
 800638e:	e012      	b.n	80063b6 <HAL_FLASH_Program_IT+0x9e>
    }
    
    case FLASH_TYPEPROGRAM_HALFWORD :
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8006390:	883b      	ldrh	r3, [r7, #0]
 8006392:	4619      	mov	r1, r3
 8006394:	68b8      	ldr	r0, [r7, #8]
 8006396:	f000 f959 	bl	800664c <FLASH_Program_HalfWord>
      break;
 800639a:	e00c      	b.n	80063b6 <HAL_FLASH_Program_IT+0x9e>
    }
    
    case FLASH_TYPEPROGRAM_WORD :
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 800639c:	683b      	ldr	r3, [r7, #0]
 800639e:	4619      	mov	r1, r3
 80063a0:	68b8      	ldr	r0, [r7, #8]
 80063a2:	f000 f92d 	bl	8006600 <FLASH_Program_Word>
      break;
 80063a6:	e006      	b.n	80063b6 <HAL_FLASH_Program_IT+0x9e>
    }
    
    case FLASH_TYPEPROGRAM_DOUBLEWORD :
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80063a8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80063ac:	68b8      	ldr	r0, [r7, #8]
 80063ae:	f000 f8f1 	bl	8006594 <FLASH_Program_DoubleWord>
      break;
 80063b2:	e000      	b.n	80063b6 <HAL_FLASH_Program_IT+0x9e>
    }
    default :
      break;
 80063b4:	bf00      	nop
  }
  return status;
 80063b6:	7dfb      	ldrb	r3, [r7, #23]
}
 80063b8:	4618      	mov	r0, r3
 80063ba:	3718      	adds	r7, #24
 80063bc:	46bd      	mov	sp, r7
 80063be:	bd80      	pop	{r7, pc}
 80063c0:	200014bc 	.word	0x200014bc
 80063c4:	40023c00 	.word	0x40023c00

080063c8 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 80063c8:	b580      	push	{r7, lr}
 80063ca:	b082      	sub	sp, #8
 80063cc:	af00      	add	r7, sp, #0
  uint32_t temp = 0;
 80063ce:	2300      	movs	r3, #0
 80063d0:	607b      	str	r3, [r7, #4]
  
  /* If the program operation is completed, disable the PG Bit */
  FLASH->CR &= (~FLASH_CR_PG);
 80063d2:	4b55      	ldr	r3, [pc, #340]	; (8006528 <HAL_FLASH_IRQHandler+0x160>)
 80063d4:	691b      	ldr	r3, [r3, #16]
 80063d6:	4a54      	ldr	r2, [pc, #336]	; (8006528 <HAL_FLASH_IRQHandler+0x160>)
 80063d8:	f023 0301 	bic.w	r3, r3, #1
 80063dc:	6113      	str	r3, [r2, #16]

  /* If the erase operation is completed, disable the SER Bit */
  FLASH->CR &= (~FLASH_CR_SER);
 80063de:	4b52      	ldr	r3, [pc, #328]	; (8006528 <HAL_FLASH_IRQHandler+0x160>)
 80063e0:	691b      	ldr	r3, [r3, #16]
 80063e2:	4a51      	ldr	r2, [pc, #324]	; (8006528 <HAL_FLASH_IRQHandler+0x160>)
 80063e4:	f023 0302 	bic.w	r3, r3, #2
 80063e8:	6113      	str	r3, [r2, #16]
  FLASH->CR &= SECTOR_MASK; 
 80063ea:	4b4f      	ldr	r3, [pc, #316]	; (8006528 <HAL_FLASH_IRQHandler+0x160>)
 80063ec:	691b      	ldr	r3, [r3, #16]
 80063ee:	4a4e      	ldr	r2, [pc, #312]	; (8006528 <HAL_FLASH_IRQHandler+0x160>)
 80063f0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80063f4:	6113      	str	r3, [r2, #16]

  /* if the erase operation is completed, disable the MER Bit */
  FLASH->CR &= (~FLASH_MER_BIT);
 80063f6:	4b4c      	ldr	r3, [pc, #304]	; (8006528 <HAL_FLASH_IRQHandler+0x160>)
 80063f8:	691b      	ldr	r3, [r3, #16]
 80063fa:	4a4b      	ldr	r2, [pc, #300]	; (8006528 <HAL_FLASH_IRQHandler+0x160>)
 80063fc:	f023 0304 	bic.w	r3, r3, #4
 8006400:	6113      	str	r3, [r2, #16]

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8006402:	4b49      	ldr	r3, [pc, #292]	; (8006528 <HAL_FLASH_IRQHandler+0x160>)
 8006404:	68db      	ldr	r3, [r3, #12]
 8006406:	f003 0301 	and.w	r3, r3, #1
 800640a:	2b00      	cmp	r3, #0
 800640c:	d049      	beq.n	80064a2 <HAL_FLASH_IRQHandler+0xda>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800640e:	4b46      	ldr	r3, [pc, #280]	; (8006528 <HAL_FLASH_IRQHandler+0x160>)
 8006410:	2201      	movs	r2, #1
 8006412:	60da      	str	r2, [r3, #12]
    
    switch (pFlash.ProcedureOnGoing)
 8006414:	4b45      	ldr	r3, [pc, #276]	; (800652c <HAL_FLASH_IRQHandler+0x164>)
 8006416:	781b      	ldrb	r3, [r3, #0]
 8006418:	b2db      	uxtb	r3, r3
 800641a:	2b03      	cmp	r3, #3
 800641c:	d037      	beq.n	800648e <HAL_FLASH_IRQHandler+0xc6>
 800641e:	2b03      	cmp	r3, #3
 8006420:	dc3e      	bgt.n	80064a0 <HAL_FLASH_IRQHandler+0xd8>
 8006422:	2b01      	cmp	r3, #1
 8006424:	d002      	beq.n	800642c <HAL_FLASH_IRQHandler+0x64>
 8006426:	2b02      	cmp	r3, #2
 8006428:	d02a      	beq.n	8006480 <HAL_FLASH_IRQHandler+0xb8>
        /* Programming procedure is completed */
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
        break;
      }
      default :
        break;
 800642a:	e039      	b.n	80064a0 <HAL_FLASH_IRQHandler+0xd8>
        pFlash.NbSectorsToErase--;
 800642c:	4b3f      	ldr	r3, [pc, #252]	; (800652c <HAL_FLASH_IRQHandler+0x164>)
 800642e:	685b      	ldr	r3, [r3, #4]
 8006430:	3b01      	subs	r3, #1
 8006432:	4a3e      	ldr	r2, [pc, #248]	; (800652c <HAL_FLASH_IRQHandler+0x164>)
 8006434:	6053      	str	r3, [r2, #4]
        if(pFlash.NbSectorsToErase != 0)
 8006436:	4b3d      	ldr	r3, [pc, #244]	; (800652c <HAL_FLASH_IRQHandler+0x164>)
 8006438:	685b      	ldr	r3, [r3, #4]
 800643a:	2b00      	cmp	r3, #0
 800643c:	d013      	beq.n	8006466 <HAL_FLASH_IRQHandler+0x9e>
          temp = pFlash.Sector;
 800643e:	4b3b      	ldr	r3, [pc, #236]	; (800652c <HAL_FLASH_IRQHandler+0x164>)
 8006440:	68db      	ldr	r3, [r3, #12]
 8006442:	607b      	str	r3, [r7, #4]
          HAL_FLASH_EndOfOperationCallback(temp);
 8006444:	6878      	ldr	r0, [r7, #4]
 8006446:	f016 fb77 	bl	801cb38 <HAL_FLASH_EndOfOperationCallback>
          temp = ++pFlash.Sector;
 800644a:	4b38      	ldr	r3, [pc, #224]	; (800652c <HAL_FLASH_IRQHandler+0x164>)
 800644c:	68db      	ldr	r3, [r3, #12]
 800644e:	3301      	adds	r3, #1
 8006450:	4a36      	ldr	r2, [pc, #216]	; (800652c <HAL_FLASH_IRQHandler+0x164>)
 8006452:	60d3      	str	r3, [r2, #12]
 8006454:	607b      	str	r3, [r7, #4]
          FLASH_Erase_Sector(temp, pFlash.VoltageForErase);
 8006456:	4b35      	ldr	r3, [pc, #212]	; (800652c <HAL_FLASH_IRQHandler+0x164>)
 8006458:	7a1b      	ldrb	r3, [r3, #8]
 800645a:	b2db      	uxtb	r3, r3
 800645c:	4619      	mov	r1, r3
 800645e:	6878      	ldr	r0, [r7, #4]
 8006460:	f000 f9fc 	bl	800685c <FLASH_Erase_Sector>
        break;
 8006464:	e01d      	b.n	80064a2 <HAL_FLASH_IRQHandler+0xda>
          pFlash.Sector = temp = 0xFFFFFFFFU;
 8006466:	f04f 33ff 	mov.w	r3, #4294967295
 800646a:	607b      	str	r3, [r7, #4]
 800646c:	4a2f      	ldr	r2, [pc, #188]	; (800652c <HAL_FLASH_IRQHandler+0x164>)
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	60d3      	str	r3, [r2, #12]
          HAL_FLASH_EndOfOperationCallback(temp);
 8006472:	6878      	ldr	r0, [r7, #4]
 8006474:	f016 fb60 	bl	801cb38 <HAL_FLASH_EndOfOperationCallback>
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8006478:	4b2c      	ldr	r3, [pc, #176]	; (800652c <HAL_FLASH_IRQHandler+0x164>)
 800647a:	2200      	movs	r2, #0
 800647c:	701a      	strb	r2, [r3, #0]
        break;
 800647e:	e010      	b.n	80064a2 <HAL_FLASH_IRQHandler+0xda>
        HAL_FLASH_EndOfOperationCallback(0);
 8006480:	2000      	movs	r0, #0
 8006482:	f016 fb59 	bl	801cb38 <HAL_FLASH_EndOfOperationCallback>
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8006486:	4b29      	ldr	r3, [pc, #164]	; (800652c <HAL_FLASH_IRQHandler+0x164>)
 8006488:	2200      	movs	r2, #0
 800648a:	701a      	strb	r2, [r3, #0]
        break;
 800648c:	e009      	b.n	80064a2 <HAL_FLASH_IRQHandler+0xda>
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 800648e:	4b27      	ldr	r3, [pc, #156]	; (800652c <HAL_FLASH_IRQHandler+0x164>)
 8006490:	691b      	ldr	r3, [r3, #16]
 8006492:	4618      	mov	r0, r3
 8006494:	f016 fb50 	bl	801cb38 <HAL_FLASH_EndOfOperationCallback>
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8006498:	4b24      	ldr	r3, [pc, #144]	; (800652c <HAL_FLASH_IRQHandler+0x164>)
 800649a:	2200      	movs	r2, #0
 800649c:	701a      	strb	r2, [r3, #0]
        break;
 800649e:	e000      	b.n	80064a2 <HAL_FLASH_IRQHandler+0xda>
        break;
 80064a0:	bf00      	nop
    }
  }
  
  /* Check FLASH operation error flags */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 80064a2:	4b21      	ldr	r3, [pc, #132]	; (8006528 <HAL_FLASH_IRQHandler+0x160>)
 80064a4:	68db      	ldr	r3, [r3, #12]
 80064a6:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80064aa:	2b00      	cmp	r3, #0
 80064ac:	d023      	beq.n	80064f6 <HAL_FLASH_IRQHandler+0x12e>
  {
    switch (pFlash.ProcedureOnGoing)
 80064ae:	4b1f      	ldr	r3, [pc, #124]	; (800652c <HAL_FLASH_IRQHandler+0x164>)
 80064b0:	781b      	ldrb	r3, [r3, #0]
 80064b2:	b2db      	uxtb	r3, r3
 80064b4:	2b03      	cmp	r3, #3
 80064b6:	d011      	beq.n	80064dc <HAL_FLASH_IRQHandler+0x114>
 80064b8:	2b03      	cmp	r3, #3
 80064ba:	dc13      	bgt.n	80064e4 <HAL_FLASH_IRQHandler+0x11c>
 80064bc:	2b01      	cmp	r3, #1
 80064be:	d002      	beq.n	80064c6 <HAL_FLASH_IRQHandler+0xfe>
 80064c0:	2b02      	cmp	r3, #2
 80064c2:	d008      	beq.n	80064d6 <HAL_FLASH_IRQHandler+0x10e>
        /*return the faulty address*/
        temp = pFlash.Address;
        break;
      }
    default :
      break;
 80064c4:	e00e      	b.n	80064e4 <HAL_FLASH_IRQHandler+0x11c>
        temp = pFlash.Sector;
 80064c6:	4b19      	ldr	r3, [pc, #100]	; (800652c <HAL_FLASH_IRQHandler+0x164>)
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	607b      	str	r3, [r7, #4]
        pFlash.Sector = 0xFFFFFFFFU;
 80064cc:	4b17      	ldr	r3, [pc, #92]	; (800652c <HAL_FLASH_IRQHandler+0x164>)
 80064ce:	f04f 32ff 	mov.w	r2, #4294967295
 80064d2:	60da      	str	r2, [r3, #12]
        break;
 80064d4:	e007      	b.n	80064e6 <HAL_FLASH_IRQHandler+0x11e>
        temp = 0;
 80064d6:	2300      	movs	r3, #0
 80064d8:	607b      	str	r3, [r7, #4]
        break;
 80064da:	e004      	b.n	80064e6 <HAL_FLASH_IRQHandler+0x11e>
        temp = pFlash.Address;
 80064dc:	4b13      	ldr	r3, [pc, #76]	; (800652c <HAL_FLASH_IRQHandler+0x164>)
 80064de:	691b      	ldr	r3, [r3, #16]
 80064e0:	607b      	str	r3, [r7, #4]
        break;
 80064e2:	e000      	b.n	80064e6 <HAL_FLASH_IRQHandler+0x11e>
      break;
 80064e4:	bf00      	nop
    }
    /*Save the Error code*/
    FLASH_SetErrorCode();
 80064e6:	f000 f8fb 	bl	80066e0 <FLASH_SetErrorCode>

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(temp);
 80064ea:	6878      	ldr	r0, [r7, #4]
 80064ec:	f016 fb36 	bl	801cb5c <HAL_FLASH_OperationErrorCallback>

    /*Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 80064f0:	4b0e      	ldr	r3, [pc, #56]	; (800652c <HAL_FLASH_IRQHandler+0x164>)
 80064f2:	2200      	movs	r2, #0
 80064f4:	701a      	strb	r2, [r3, #0]
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 80064f6:	4b0d      	ldr	r3, [pc, #52]	; (800652c <HAL_FLASH_IRQHandler+0x164>)
 80064f8:	781b      	ldrb	r3, [r3, #0]
 80064fa:	b2db      	uxtb	r3, r3
 80064fc:	2b00      	cmp	r3, #0
 80064fe:	d10e      	bne.n	800651e <HAL_FLASH_IRQHandler+0x156>
  {
    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8006500:	4b09      	ldr	r3, [pc, #36]	; (8006528 <HAL_FLASH_IRQHandler+0x160>)
 8006502:	691b      	ldr	r3, [r3, #16]
 8006504:	4a08      	ldr	r2, [pc, #32]	; (8006528 <HAL_FLASH_IRQHandler+0x160>)
 8006506:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800650a:	6113      	str	r3, [r2, #16]

    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 800650c:	4b06      	ldr	r3, [pc, #24]	; (8006528 <HAL_FLASH_IRQHandler+0x160>)
 800650e:	691b      	ldr	r3, [r3, #16]
 8006510:	4a05      	ldr	r2, [pc, #20]	; (8006528 <HAL_FLASH_IRQHandler+0x160>)
 8006512:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8006516:	6113      	str	r3, [r2, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8006518:	4b04      	ldr	r3, [pc, #16]	; (800652c <HAL_FLASH_IRQHandler+0x164>)
 800651a:	2200      	movs	r2, #0
 800651c:	751a      	strb	r2, [r3, #20]
  }
  
}
 800651e:	bf00      	nop
 8006520:	3708      	adds	r7, #8
 8006522:	46bd      	mov	sp, r7
 8006524:	bd80      	pop	{r7, pc}
 8006526:	bf00      	nop
 8006528:	40023c00 	.word	0x40023c00
 800652c:	200014bc 	.word	0x200014bc

08006530 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006530:	b480      	push	{r7}
 8006532:	b083      	sub	sp, #12
 8006534:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006536:	2300      	movs	r3, #0
 8006538:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800653a:	4b0b      	ldr	r3, [pc, #44]	; (8006568 <HAL_FLASH_Unlock+0x38>)
 800653c:	691b      	ldr	r3, [r3, #16]
 800653e:	2b00      	cmp	r3, #0
 8006540:	da0b      	bge.n	800655a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006542:	4b09      	ldr	r3, [pc, #36]	; (8006568 <HAL_FLASH_Unlock+0x38>)
 8006544:	4a09      	ldr	r2, [pc, #36]	; (800656c <HAL_FLASH_Unlock+0x3c>)
 8006546:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006548:	4b07      	ldr	r3, [pc, #28]	; (8006568 <HAL_FLASH_Unlock+0x38>)
 800654a:	4a09      	ldr	r2, [pc, #36]	; (8006570 <HAL_FLASH_Unlock+0x40>)
 800654c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800654e:	4b06      	ldr	r3, [pc, #24]	; (8006568 <HAL_FLASH_Unlock+0x38>)
 8006550:	691b      	ldr	r3, [r3, #16]
 8006552:	2b00      	cmp	r3, #0
 8006554:	da01      	bge.n	800655a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8006556:	2301      	movs	r3, #1
 8006558:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800655a:	79fb      	ldrb	r3, [r7, #7]
}
 800655c:	4618      	mov	r0, r3
 800655e:	370c      	adds	r7, #12
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr
 8006568:	40023c00 	.word	0x40023c00
 800656c:	45670123 	.word	0x45670123
 8006570:	cdef89ab 	.word	0xcdef89ab

08006574 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006574:	b480      	push	{r7}
 8006576:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8006578:	4b05      	ldr	r3, [pc, #20]	; (8006590 <HAL_FLASH_Lock+0x1c>)
 800657a:	691b      	ldr	r3, [r3, #16]
 800657c:	4a04      	ldr	r2, [pc, #16]	; (8006590 <HAL_FLASH_Lock+0x1c>)
 800657e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006582:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8006584:	2300      	movs	r3, #0
}
 8006586:	4618      	mov	r0, r3
 8006588:	46bd      	mov	sp, r7
 800658a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800658e:	4770      	bx	lr
 8006590:	40023c00 	.word	0x40023c00

08006594 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006594:	b480      	push	{r7}
 8006596:	b085      	sub	sp, #20
 8006598:	af00      	add	r7, sp, #0
 800659a:	60f8      	str	r0, [r7, #12]
 800659c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80065a0:	4b16      	ldr	r3, [pc, #88]	; (80065fc <FLASH_Program_DoubleWord+0x68>)
 80065a2:	691b      	ldr	r3, [r3, #16]
 80065a4:	4a15      	ldr	r2, [pc, #84]	; (80065fc <FLASH_Program_DoubleWord+0x68>)
 80065a6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065aa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80065ac:	4b13      	ldr	r3, [pc, #76]	; (80065fc <FLASH_Program_DoubleWord+0x68>)
 80065ae:	691b      	ldr	r3, [r3, #16]
 80065b0:	4a12      	ldr	r2, [pc, #72]	; (80065fc <FLASH_Program_DoubleWord+0x68>)
 80065b2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80065b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80065b8:	4b10      	ldr	r3, [pc, #64]	; (80065fc <FLASH_Program_DoubleWord+0x68>)
 80065ba:	691b      	ldr	r3, [r3, #16]
 80065bc:	4a0f      	ldr	r2, [pc, #60]	; (80065fc <FLASH_Program_DoubleWord+0x68>)
 80065be:	f043 0301 	orr.w	r3, r3, #1
 80065c2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80065c4:	68fb      	ldr	r3, [r7, #12]
 80065c6:	683a      	ldr	r2, [r7, #0]
 80065c8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80065ca:	f3bf 8f6f 	isb	sy
}
 80065ce:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80065d0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80065d4:	f04f 0200 	mov.w	r2, #0
 80065d8:	f04f 0300 	mov.w	r3, #0
 80065dc:	000a      	movs	r2, r1
 80065de:	2300      	movs	r3, #0
 80065e0:	68f9      	ldr	r1, [r7, #12]
 80065e2:	3104      	adds	r1, #4
 80065e4:	4613      	mov	r3, r2
 80065e6:	600b      	str	r3, [r1, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80065e8:	f3bf 8f4f 	dsb	sy
}
 80065ec:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80065ee:	bf00      	nop
 80065f0:	3714      	adds	r7, #20
 80065f2:	46bd      	mov	sp, r7
 80065f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f8:	4770      	bx	lr
 80065fa:	bf00      	nop
 80065fc:	40023c00 	.word	0x40023c00

08006600 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8006600:	b480      	push	{r7}
 8006602:	b083      	sub	sp, #12
 8006604:	af00      	add	r7, sp, #0
 8006606:	6078      	str	r0, [r7, #4]
 8006608:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 800660a:	4b0f      	ldr	r3, [pc, #60]	; (8006648 <FLASH_Program_Word+0x48>)
 800660c:	691b      	ldr	r3, [r3, #16]
 800660e:	4a0e      	ldr	r2, [pc, #56]	; (8006648 <FLASH_Program_Word+0x48>)
 8006610:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006614:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8006616:	4b0c      	ldr	r3, [pc, #48]	; (8006648 <FLASH_Program_Word+0x48>)
 8006618:	691b      	ldr	r3, [r3, #16]
 800661a:	4a0b      	ldr	r2, [pc, #44]	; (8006648 <FLASH_Program_Word+0x48>)
 800661c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006620:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006622:	4b09      	ldr	r3, [pc, #36]	; (8006648 <FLASH_Program_Word+0x48>)
 8006624:	691b      	ldr	r3, [r3, #16]
 8006626:	4a08      	ldr	r2, [pc, #32]	; (8006648 <FLASH_Program_Word+0x48>)
 8006628:	f043 0301 	orr.w	r3, r3, #1
 800662c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800662e:	687b      	ldr	r3, [r7, #4]
 8006630:	683a      	ldr	r2, [r7, #0]
 8006632:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006634:	f3bf 8f4f 	dsb	sy
}
 8006638:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800663a:	bf00      	nop
 800663c:	370c      	adds	r7, #12
 800663e:	46bd      	mov	sp, r7
 8006640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006644:	4770      	bx	lr
 8006646:	bf00      	nop
 8006648:	40023c00 	.word	0x40023c00

0800664c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800664c:	b480      	push	{r7}
 800664e:	b083      	sub	sp, #12
 8006650:	af00      	add	r7, sp, #0
 8006652:	6078      	str	r0, [r7, #4]
 8006654:	460b      	mov	r3, r1
 8006656:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8006658:	4b0e      	ldr	r3, [pc, #56]	; (8006694 <FLASH_Program_HalfWord+0x48>)
 800665a:	691b      	ldr	r3, [r3, #16]
 800665c:	4a0d      	ldr	r2, [pc, #52]	; (8006694 <FLASH_Program_HalfWord+0x48>)
 800665e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006662:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8006664:	4b0b      	ldr	r3, [pc, #44]	; (8006694 <FLASH_Program_HalfWord+0x48>)
 8006666:	691b      	ldr	r3, [r3, #16]
 8006668:	4a0a      	ldr	r2, [pc, #40]	; (8006694 <FLASH_Program_HalfWord+0x48>)
 800666a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800666e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006670:	4b08      	ldr	r3, [pc, #32]	; (8006694 <FLASH_Program_HalfWord+0x48>)
 8006672:	691b      	ldr	r3, [r3, #16]
 8006674:	4a07      	ldr	r2, [pc, #28]	; (8006694 <FLASH_Program_HalfWord+0x48>)
 8006676:	f043 0301 	orr.w	r3, r3, #1
 800667a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	887a      	ldrh	r2, [r7, #2]
 8006680:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8006682:	f3bf 8f4f 	dsb	sy
}
 8006686:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 8006688:	bf00      	nop
 800668a:	370c      	adds	r7, #12
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr
 8006694:	40023c00 	.word	0x40023c00

08006698 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8006698:	b480      	push	{r7}
 800669a:	b083      	sub	sp, #12
 800669c:	af00      	add	r7, sp, #0
 800669e:	6078      	str	r0, [r7, #4]
 80066a0:	460b      	mov	r3, r1
 80066a2:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 80066a4:	4b0d      	ldr	r3, [pc, #52]	; (80066dc <FLASH_Program_Byte+0x44>)
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	4a0c      	ldr	r2, [pc, #48]	; (80066dc <FLASH_Program_Byte+0x44>)
 80066aa:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80066ae:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80066b0:	4b0a      	ldr	r3, [pc, #40]	; (80066dc <FLASH_Program_Byte+0x44>)
 80066b2:	4a0a      	ldr	r2, [pc, #40]	; (80066dc <FLASH_Program_Byte+0x44>)
 80066b4:	691b      	ldr	r3, [r3, #16]
 80066b6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80066b8:	4b08      	ldr	r3, [pc, #32]	; (80066dc <FLASH_Program_Byte+0x44>)
 80066ba:	691b      	ldr	r3, [r3, #16]
 80066bc:	4a07      	ldr	r2, [pc, #28]	; (80066dc <FLASH_Program_Byte+0x44>)
 80066be:	f043 0301 	orr.w	r3, r3, #1
 80066c2:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	78fa      	ldrb	r2, [r7, #3]
 80066c8:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 80066ca:	f3bf 8f4f 	dsb	sy
}
 80066ce:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80066d0:	bf00      	nop
 80066d2:	370c      	adds	r7, #12
 80066d4:	46bd      	mov	sp, r7
 80066d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066da:	4770      	bx	lr
 80066dc:	40023c00 	.word	0x40023c00

080066e0 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 80066e0:	b480      	push	{r7}
 80066e2:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80066e4:	4b21      	ldr	r3, [pc, #132]	; (800676c <FLASH_SetErrorCode+0x8c>)
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	f003 0302 	and.w	r3, r3, #2
 80066ec:	2b00      	cmp	r3, #0
 80066ee:	d005      	beq.n	80066fc <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80066f0:	4b1f      	ldr	r3, [pc, #124]	; (8006770 <FLASH_SetErrorCode+0x90>)
 80066f2:	699b      	ldr	r3, [r3, #24]
 80066f4:	f043 0320 	orr.w	r3, r3, #32
 80066f8:	4a1d      	ldr	r2, [pc, #116]	; (8006770 <FLASH_SetErrorCode+0x90>)
 80066fa:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80066fc:	4b1b      	ldr	r3, [pc, #108]	; (800676c <FLASH_SetErrorCode+0x8c>)
 80066fe:	68db      	ldr	r3, [r3, #12]
 8006700:	f003 0310 	and.w	r3, r3, #16
 8006704:	2b00      	cmp	r3, #0
 8006706:	d005      	beq.n	8006714 <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006708:	4b19      	ldr	r3, [pc, #100]	; (8006770 <FLASH_SetErrorCode+0x90>)
 800670a:	699b      	ldr	r3, [r3, #24]
 800670c:	f043 0310 	orr.w	r3, r3, #16
 8006710:	4a17      	ldr	r2, [pc, #92]	; (8006770 <FLASH_SetErrorCode+0x90>)
 8006712:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8006714:	4b15      	ldr	r3, [pc, #84]	; (800676c <FLASH_SetErrorCode+0x8c>)
 8006716:	68db      	ldr	r3, [r3, #12]
 8006718:	f003 0320 	and.w	r3, r3, #32
 800671c:	2b00      	cmp	r3, #0
 800671e:	d005      	beq.n	800672c <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8006720:	4b13      	ldr	r3, [pc, #76]	; (8006770 <FLASH_SetErrorCode+0x90>)
 8006722:	699b      	ldr	r3, [r3, #24]
 8006724:	f043 0308 	orr.w	r3, r3, #8
 8006728:	4a11      	ldr	r2, [pc, #68]	; (8006770 <FLASH_SetErrorCode+0x90>)
 800672a:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 800672c:	4b0f      	ldr	r3, [pc, #60]	; (800676c <FLASH_SetErrorCode+0x8c>)
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006734:	2b00      	cmp	r3, #0
 8006736:	d005      	beq.n	8006744 <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8006738:	4b0d      	ldr	r3, [pc, #52]	; (8006770 <FLASH_SetErrorCode+0x90>)
 800673a:	699b      	ldr	r3, [r3, #24]
 800673c:	f043 0304 	orr.w	r3, r3, #4
 8006740:	4a0b      	ldr	r2, [pc, #44]	; (8006770 <FLASH_SetErrorCode+0x90>)
 8006742:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8006744:	4b09      	ldr	r3, [pc, #36]	; (800676c <FLASH_SetErrorCode+0x8c>)
 8006746:	68db      	ldr	r3, [r3, #12]
 8006748:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800674c:	2b00      	cmp	r3, #0
 800674e:	d005      	beq.n	800675c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8006750:	4b07      	ldr	r3, [pc, #28]	; (8006770 <FLASH_SetErrorCode+0x90>)
 8006752:	699b      	ldr	r3, [r3, #24]
 8006754:	f043 0302 	orr.w	r3, r3, #2
 8006758:	4a05      	ldr	r2, [pc, #20]	; (8006770 <FLASH_SetErrorCode+0x90>)
 800675a:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 800675c:	4b03      	ldr	r3, [pc, #12]	; (800676c <FLASH_SetErrorCode+0x8c>)
 800675e:	22f2      	movs	r2, #242	; 0xf2
 8006760:	60da      	str	r2, [r3, #12]
}
 8006762:	bf00      	nop
 8006764:	46bd      	mov	sp, r7
 8006766:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676a:	4770      	bx	lr
 800676c:	40023c00 	.word	0x40023c00
 8006770:	200014bc 	.word	0x200014bc

08006774 <HAL_FLASHEx_Erase_IT>:
  *         contains the configuration information for the erasing.
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase_IT(FLASH_EraseInitTypeDef *pEraseInit)
{
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800677c:	2300      	movs	r3, #0
 800677e:	73fb      	strb	r3, [r7, #15]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006780:	4b21      	ldr	r3, [pc, #132]	; (8006808 <HAL_FLASHEx_Erase_IT+0x94>)
 8006782:	7d1b      	ldrb	r3, [r3, #20]
 8006784:	2b01      	cmp	r3, #1
 8006786:	d101      	bne.n	800678c <HAL_FLASHEx_Erase_IT+0x18>
 8006788:	2302      	movs	r3, #2
 800678a:	e039      	b.n	8006800 <HAL_FLASHEx_Erase_IT+0x8c>
 800678c:	4b1e      	ldr	r3, [pc, #120]	; (8006808 <HAL_FLASHEx_Erase_IT+0x94>)
 800678e:	2201      	movs	r2, #1
 8006790:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Enable End of FLASH Operation interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_EOP);
 8006792:	4b1e      	ldr	r3, [pc, #120]	; (800680c <HAL_FLASHEx_Erase_IT+0x98>)
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	4a1d      	ldr	r2, [pc, #116]	; (800680c <HAL_FLASHEx_Erase_IT+0x98>)
 8006798:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800679c:	6113      	str	r3, [r2, #16]
  
  /* Enable Error source interrupt */
  __HAL_FLASH_ENABLE_IT(FLASH_IT_ERR);
 800679e:	4b1b      	ldr	r3, [pc, #108]	; (800680c <HAL_FLASHEx_Erase_IT+0x98>)
 80067a0:	691b      	ldr	r3, [r3, #16]
 80067a2:	4a1a      	ldr	r2, [pc, #104]	; (800680c <HAL_FLASHEx_Erase_IT+0x98>)
 80067a4:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 80067a8:	6113      	str	r3, [r2, #16]
  
  /* Clear pending flags (if any) */  
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP    | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR |\
 80067aa:	4b18      	ldr	r3, [pc, #96]	; (800680c <HAL_FLASHEx_Erase_IT+0x98>)
 80067ac:	22f3      	movs	r2, #243	; 0xf3
 80067ae:	60da      	str	r2, [r3, #12]
                         FLASH_FLAG_PGAERR | FLASH_FLAG_PGPERR| FLASH_FLAG_ERSERR);  
  
  if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80067b0:	687b      	ldr	r3, [r7, #4]
 80067b2:	681b      	ldr	r3, [r3, #0]
 80067b4:	2b01      	cmp	r3, #1
 80067b6:	d109      	bne.n	80067cc <HAL_FLASHEx_Erase_IT+0x58>
  {
    /*Mass erase to be done*/
    pFlash.ProcedureOnGoing = FLASH_PROC_MASSERASE;
 80067b8:	4b13      	ldr	r3, [pc, #76]	; (8006808 <HAL_FLASHEx_Erase_IT+0x94>)
 80067ba:	2202      	movs	r2, #2
 80067bc:	701a      	strb	r2, [r3, #0]
#if defined (FLASH_OPTCR_nDBANK)    
    FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
#else
    FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	68db      	ldr	r3, [r3, #12]
 80067c2:	b2db      	uxtb	r3, r3
 80067c4:	4618      	mov	r0, r3
 80067c6:	f000 f823 	bl	8006810 <FLASH_MassErase>
 80067ca:	e018      	b.n	80067fe <HAL_FLASHEx_Erase_IT+0x8a>
    /* Erase by sector to be done*/

    /* Check the parameters */
    assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

    pFlash.ProcedureOnGoing = FLASH_PROC_SECTERASE;
 80067cc:	4b0e      	ldr	r3, [pc, #56]	; (8006808 <HAL_FLASHEx_Erase_IT+0x94>)
 80067ce:	2201      	movs	r2, #1
 80067d0:	701a      	strb	r2, [r3, #0]
    pFlash.NbSectorsToErase = pEraseInit->NbSectors;
 80067d2:	687b      	ldr	r3, [r7, #4]
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	4a0c      	ldr	r2, [pc, #48]	; (8006808 <HAL_FLASHEx_Erase_IT+0x94>)
 80067d8:	6053      	str	r3, [r2, #4]
    pFlash.Sector = pEraseInit->Sector;
 80067da:	687b      	ldr	r3, [r7, #4]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	4a0a      	ldr	r2, [pc, #40]	; (8006808 <HAL_FLASHEx_Erase_IT+0x94>)
 80067e0:	60d3      	str	r3, [r2, #12]
    pFlash.VoltageForErase = (uint8_t)pEraseInit->VoltageRange;
 80067e2:	687b      	ldr	r3, [r7, #4]
 80067e4:	68db      	ldr	r3, [r3, #12]
 80067e6:	b2da      	uxtb	r2, r3
 80067e8:	4b07      	ldr	r3, [pc, #28]	; (8006808 <HAL_FLASHEx_Erase_IT+0x94>)
 80067ea:	721a      	strb	r2, [r3, #8]

    /*Erase 1st sector and wait for IT*/
    FLASH_Erase_Sector(pEraseInit->Sector, pEraseInit->VoltageRange);
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	685a      	ldr	r2, [r3, #4]
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	68db      	ldr	r3, [r3, #12]
 80067f4:	b2db      	uxtb	r3, r3
 80067f6:	4619      	mov	r1, r3
 80067f8:	4610      	mov	r0, r2
 80067fa:	f000 f82f 	bl	800685c <FLASH_Erase_Sector>
  }

  return status;
 80067fe:	7bfb      	ldrb	r3, [r7, #15]
}
 8006800:	4618      	mov	r0, r3
 8006802:	3710      	adds	r7, #16
 8006804:	46bd      	mov	sp, r7
 8006806:	bd80      	pop	{r7, pc}
 8006808:	200014bc 	.word	0x200014bc
 800680c:	40023c00 	.word	0x40023c00

08006810 <FLASH_MassErase>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange)
{
 8006810:	b480      	push	{r7}
 8006812:	b083      	sub	sp, #12
 8006814:	af00      	add	r7, sp, #0
 8006816:	4603      	mov	r3, r0
 8006818:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 800681a:	4b0f      	ldr	r3, [pc, #60]	; (8006858 <FLASH_MassErase+0x48>)
 800681c:	691b      	ldr	r3, [r3, #16]
 800681e:	4a0e      	ldr	r2, [pc, #56]	; (8006858 <FLASH_MassErase+0x48>)
 8006820:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006824:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8006826:	4b0c      	ldr	r3, [pc, #48]	; (8006858 <FLASH_MassErase+0x48>)
 8006828:	691b      	ldr	r3, [r3, #16]
 800682a:	4a0b      	ldr	r2, [pc, #44]	; (8006858 <FLASH_MassErase+0x48>)
 800682c:	f043 0304 	orr.w	r3, r3, #4
 8006830:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 8006832:	4b09      	ldr	r3, [pc, #36]	; (8006858 <FLASH_MassErase+0x48>)
 8006834:	691a      	ldr	r2, [r3, #16]
 8006836:	79fb      	ldrb	r3, [r7, #7]
 8006838:	021b      	lsls	r3, r3, #8
 800683a:	4313      	orrs	r3, r2
 800683c:	4a06      	ldr	r2, [pc, #24]	; (8006858 <FLASH_MassErase+0x48>)
 800683e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006842:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8006844:	f3bf 8f4f 	dsb	sy
}
 8006848:	bf00      	nop
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800684a:	bf00      	nop
 800684c:	370c      	adds	r7, #12
 800684e:	46bd      	mov	sp, r7
 8006850:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006854:	4770      	bx	lr
 8006856:	bf00      	nop
 8006858:	40023c00 	.word	0x40023c00

0800685c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800685c:	b480      	push	{r7}
 800685e:	b085      	sub	sp, #20
 8006860:	af00      	add	r7, sp, #0
 8006862:	6078      	str	r0, [r7, #4]
 8006864:	460b      	mov	r3, r1
 8006866:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 8006868:	2300      	movs	r3, #0
 800686a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800686c:	78fb      	ldrb	r3, [r7, #3]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d102      	bne.n	8006878 <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8006872:	2300      	movs	r3, #0
 8006874:	60fb      	str	r3, [r7, #12]
 8006876:	e010      	b.n	800689a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8006878:	78fb      	ldrb	r3, [r7, #3]
 800687a:	2b01      	cmp	r3, #1
 800687c:	d103      	bne.n	8006886 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800687e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006882:	60fb      	str	r3, [r7, #12]
 8006884:	e009      	b.n	800689a <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8006886:	78fb      	ldrb	r3, [r7, #3]
 8006888:	2b02      	cmp	r3, #2
 800688a:	d103      	bne.n	8006894 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800688c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006890:	60fb      	str	r3, [r7, #12]
 8006892:	e002      	b.n	800689a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8006894:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006898:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 800689a:	4b15      	ldr	r3, [pc, #84]	; (80068f0 <FLASH_Erase_Sector+0x94>)
 800689c:	691b      	ldr	r3, [r3, #16]
 800689e:	4a14      	ldr	r2, [pc, #80]	; (80068f0 <FLASH_Erase_Sector+0x94>)
 80068a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068a4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80068a6:	4b12      	ldr	r3, [pc, #72]	; (80068f0 <FLASH_Erase_Sector+0x94>)
 80068a8:	691a      	ldr	r2, [r3, #16]
 80068aa:	4911      	ldr	r1, [pc, #68]	; (80068f0 <FLASH_Erase_Sector+0x94>)
 80068ac:	68fb      	ldr	r3, [r7, #12]
 80068ae:	4313      	orrs	r3, r2
 80068b0:	610b      	str	r3, [r1, #16]
  FLASH->CR &= SECTOR_MASK;
 80068b2:	4b0f      	ldr	r3, [pc, #60]	; (80068f0 <FLASH_Erase_Sector+0x94>)
 80068b4:	691b      	ldr	r3, [r3, #16]
 80068b6:	4a0e      	ldr	r2, [pc, #56]	; (80068f0 <FLASH_Erase_Sector+0x94>)
 80068b8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80068bc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80068be:	4b0c      	ldr	r3, [pc, #48]	; (80068f0 <FLASH_Erase_Sector+0x94>)
 80068c0:	691a      	ldr	r2, [r3, #16]
 80068c2:	687b      	ldr	r3, [r7, #4]
 80068c4:	00db      	lsls	r3, r3, #3
 80068c6:	4313      	orrs	r3, r2
 80068c8:	4a09      	ldr	r2, [pc, #36]	; (80068f0 <FLASH_Erase_Sector+0x94>)
 80068ca:	f043 0302 	orr.w	r3, r3, #2
 80068ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80068d0:	4b07      	ldr	r3, [pc, #28]	; (80068f0 <FLASH_Erase_Sector+0x94>)
 80068d2:	691b      	ldr	r3, [r3, #16]
 80068d4:	4a06      	ldr	r2, [pc, #24]	; (80068f0 <FLASH_Erase_Sector+0x94>)
 80068d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80068da:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 80068dc:	f3bf 8f4f 	dsb	sy
}
 80068e0:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80068e2:	bf00      	nop
 80068e4:	3714      	adds	r7, #20
 80068e6:	46bd      	mov	sp, r7
 80068e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ec:	4770      	bx	lr
 80068ee:	bf00      	nop
 80068f0:	40023c00 	.word	0x40023c00

080068f4 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80068f4:	b480      	push	{r7}
 80068f6:	b089      	sub	sp, #36	; 0x24
 80068f8:	af00      	add	r7, sp, #0
 80068fa:	6078      	str	r0, [r7, #4]
 80068fc:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80068fe:	2300      	movs	r3, #0
 8006900:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 8006902:	2300      	movs	r3, #0
 8006904:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 8006906:	2300      	movs	r3, #0
 8006908:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 800690a:	2300      	movs	r3, #0
 800690c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 800690e:	2300      	movs	r3, #0
 8006910:	61fb      	str	r3, [r7, #28]
 8006912:	e175      	b.n	8006c00 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 8006914:	2201      	movs	r2, #1
 8006916:	69fb      	ldr	r3, [r7, #28]
 8006918:	fa02 f303 	lsl.w	r3, r2, r3
 800691c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800691e:	683b      	ldr	r3, [r7, #0]
 8006920:	681b      	ldr	r3, [r3, #0]
 8006922:	697a      	ldr	r2, [r7, #20]
 8006924:	4013      	ands	r3, r2
 8006926:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 8006928:	693a      	ldr	r2, [r7, #16]
 800692a:	697b      	ldr	r3, [r7, #20]
 800692c:	429a      	cmp	r2, r3
 800692e:	f040 8164 	bne.w	8006bfa <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006932:	683b      	ldr	r3, [r7, #0]
 8006934:	685b      	ldr	r3, [r3, #4]
 8006936:	f003 0303 	and.w	r3, r3, #3
 800693a:	2b01      	cmp	r3, #1
 800693c:	d005      	beq.n	800694a <HAL_GPIO_Init+0x56>
 800693e:	683b      	ldr	r3, [r7, #0]
 8006940:	685b      	ldr	r3, [r3, #4]
 8006942:	f003 0303 	and.w	r3, r3, #3
 8006946:	2b02      	cmp	r3, #2
 8006948:	d130      	bne.n	80069ac <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	689b      	ldr	r3, [r3, #8]
 800694e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006950:	69fb      	ldr	r3, [r7, #28]
 8006952:	005b      	lsls	r3, r3, #1
 8006954:	2203      	movs	r2, #3
 8006956:	fa02 f303 	lsl.w	r3, r2, r3
 800695a:	43db      	mvns	r3, r3
 800695c:	69ba      	ldr	r2, [r7, #24]
 800695e:	4013      	ands	r3, r2
 8006960:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006962:	683b      	ldr	r3, [r7, #0]
 8006964:	68da      	ldr	r2, [r3, #12]
 8006966:	69fb      	ldr	r3, [r7, #28]
 8006968:	005b      	lsls	r3, r3, #1
 800696a:	fa02 f303 	lsl.w	r3, r2, r3
 800696e:	69ba      	ldr	r2, [r7, #24]
 8006970:	4313      	orrs	r3, r2
 8006972:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	69ba      	ldr	r2, [r7, #24]
 8006978:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	685b      	ldr	r3, [r3, #4]
 800697e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006980:	2201      	movs	r2, #1
 8006982:	69fb      	ldr	r3, [r7, #28]
 8006984:	fa02 f303 	lsl.w	r3, r2, r3
 8006988:	43db      	mvns	r3, r3
 800698a:	69ba      	ldr	r2, [r7, #24]
 800698c:	4013      	ands	r3, r2
 800698e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006990:	683b      	ldr	r3, [r7, #0]
 8006992:	685b      	ldr	r3, [r3, #4]
 8006994:	091b      	lsrs	r3, r3, #4
 8006996:	f003 0201 	and.w	r2, r3, #1
 800699a:	69fb      	ldr	r3, [r7, #28]
 800699c:	fa02 f303 	lsl.w	r3, r2, r3
 80069a0:	69ba      	ldr	r2, [r7, #24]
 80069a2:	4313      	orrs	r3, r2
 80069a4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	69ba      	ldr	r2, [r7, #24]
 80069aa:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80069ac:	683b      	ldr	r3, [r7, #0]
 80069ae:	685b      	ldr	r3, [r3, #4]
 80069b0:	f003 0303 	and.w	r3, r3, #3
 80069b4:	2b03      	cmp	r3, #3
 80069b6:	d017      	beq.n	80069e8 <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80069b8:	687b      	ldr	r3, [r7, #4]
 80069ba:	68db      	ldr	r3, [r3, #12]
 80069bc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80069be:	69fb      	ldr	r3, [r7, #28]
 80069c0:	005b      	lsls	r3, r3, #1
 80069c2:	2203      	movs	r2, #3
 80069c4:	fa02 f303 	lsl.w	r3, r2, r3
 80069c8:	43db      	mvns	r3, r3
 80069ca:	69ba      	ldr	r2, [r7, #24]
 80069cc:	4013      	ands	r3, r2
 80069ce:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80069d0:	683b      	ldr	r3, [r7, #0]
 80069d2:	689a      	ldr	r2, [r3, #8]
 80069d4:	69fb      	ldr	r3, [r7, #28]
 80069d6:	005b      	lsls	r3, r3, #1
 80069d8:	fa02 f303 	lsl.w	r3, r2, r3
 80069dc:	69ba      	ldr	r2, [r7, #24]
 80069de:	4313      	orrs	r3, r2
 80069e0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80069e2:	687b      	ldr	r3, [r7, #4]
 80069e4:	69ba      	ldr	r2, [r7, #24]
 80069e6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80069e8:	683b      	ldr	r3, [r7, #0]
 80069ea:	685b      	ldr	r3, [r3, #4]
 80069ec:	f003 0303 	and.w	r3, r3, #3
 80069f0:	2b02      	cmp	r3, #2
 80069f2:	d123      	bne.n	8006a3c <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80069f4:	69fb      	ldr	r3, [r7, #28]
 80069f6:	08da      	lsrs	r2, r3, #3
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	3208      	adds	r2, #8
 80069fc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006a00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 8006a02:	69fb      	ldr	r3, [r7, #28]
 8006a04:	f003 0307 	and.w	r3, r3, #7
 8006a08:	009b      	lsls	r3, r3, #2
 8006a0a:	220f      	movs	r2, #15
 8006a0c:	fa02 f303 	lsl.w	r3, r2, r3
 8006a10:	43db      	mvns	r3, r3
 8006a12:	69ba      	ldr	r2, [r7, #24]
 8006a14:	4013      	ands	r3, r2
 8006a16:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 8006a18:	683b      	ldr	r3, [r7, #0]
 8006a1a:	691a      	ldr	r2, [r3, #16]
 8006a1c:	69fb      	ldr	r3, [r7, #28]
 8006a1e:	f003 0307 	and.w	r3, r3, #7
 8006a22:	009b      	lsls	r3, r3, #2
 8006a24:	fa02 f303 	lsl.w	r3, r2, r3
 8006a28:	69ba      	ldr	r2, [r7, #24]
 8006a2a:	4313      	orrs	r3, r2
 8006a2c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006a2e:	69fb      	ldr	r3, [r7, #28]
 8006a30:	08da      	lsrs	r2, r3, #3
 8006a32:	687b      	ldr	r3, [r7, #4]
 8006a34:	3208      	adds	r2, #8
 8006a36:	69b9      	ldr	r1, [r7, #24]
 8006a38:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	681b      	ldr	r3, [r3, #0]
 8006a40:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006a42:	69fb      	ldr	r3, [r7, #28]
 8006a44:	005b      	lsls	r3, r3, #1
 8006a46:	2203      	movs	r2, #3
 8006a48:	fa02 f303 	lsl.w	r3, r2, r3
 8006a4c:	43db      	mvns	r3, r3
 8006a4e:	69ba      	ldr	r2, [r7, #24]
 8006a50:	4013      	ands	r3, r2
 8006a52:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006a54:	683b      	ldr	r3, [r7, #0]
 8006a56:	685b      	ldr	r3, [r3, #4]
 8006a58:	f003 0203 	and.w	r2, r3, #3
 8006a5c:	69fb      	ldr	r3, [r7, #28]
 8006a5e:	005b      	lsls	r3, r3, #1
 8006a60:	fa02 f303 	lsl.w	r3, r2, r3
 8006a64:	69ba      	ldr	r2, [r7, #24]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	69ba      	ldr	r2, [r7, #24]
 8006a6e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006a70:	683b      	ldr	r3, [r7, #0]
 8006a72:	685b      	ldr	r3, [r3, #4]
 8006a74:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006a78:	2b00      	cmp	r3, #0
 8006a7a:	f000 80be 	beq.w	8006bfa <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006a7e:	4b66      	ldr	r3, [pc, #408]	; (8006c18 <HAL_GPIO_Init+0x324>)
 8006a80:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a82:	4a65      	ldr	r2, [pc, #404]	; (8006c18 <HAL_GPIO_Init+0x324>)
 8006a84:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006a88:	6453      	str	r3, [r2, #68]	; 0x44
 8006a8a:	4b63      	ldr	r3, [pc, #396]	; (8006c18 <HAL_GPIO_Init+0x324>)
 8006a8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a8e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006a92:	60fb      	str	r3, [r7, #12]
 8006a94:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 8006a96:	4a61      	ldr	r2, [pc, #388]	; (8006c1c <HAL_GPIO_Init+0x328>)
 8006a98:	69fb      	ldr	r3, [r7, #28]
 8006a9a:	089b      	lsrs	r3, r3, #2
 8006a9c:	3302      	adds	r3, #2
 8006a9e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006aa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006aa4:	69fb      	ldr	r3, [r7, #28]
 8006aa6:	f003 0303 	and.w	r3, r3, #3
 8006aaa:	009b      	lsls	r3, r3, #2
 8006aac:	220f      	movs	r2, #15
 8006aae:	fa02 f303 	lsl.w	r3, r2, r3
 8006ab2:	43db      	mvns	r3, r3
 8006ab4:	69ba      	ldr	r2, [r7, #24]
 8006ab6:	4013      	ands	r3, r2
 8006ab8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 8006aba:	687b      	ldr	r3, [r7, #4]
 8006abc:	4a58      	ldr	r2, [pc, #352]	; (8006c20 <HAL_GPIO_Init+0x32c>)
 8006abe:	4293      	cmp	r3, r2
 8006ac0:	d037      	beq.n	8006b32 <HAL_GPIO_Init+0x23e>
 8006ac2:	687b      	ldr	r3, [r7, #4]
 8006ac4:	4a57      	ldr	r2, [pc, #348]	; (8006c24 <HAL_GPIO_Init+0x330>)
 8006ac6:	4293      	cmp	r3, r2
 8006ac8:	d031      	beq.n	8006b2e <HAL_GPIO_Init+0x23a>
 8006aca:	687b      	ldr	r3, [r7, #4]
 8006acc:	4a56      	ldr	r2, [pc, #344]	; (8006c28 <HAL_GPIO_Init+0x334>)
 8006ace:	4293      	cmp	r3, r2
 8006ad0:	d02b      	beq.n	8006b2a <HAL_GPIO_Init+0x236>
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	4a55      	ldr	r2, [pc, #340]	; (8006c2c <HAL_GPIO_Init+0x338>)
 8006ad6:	4293      	cmp	r3, r2
 8006ad8:	d025      	beq.n	8006b26 <HAL_GPIO_Init+0x232>
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	4a54      	ldr	r2, [pc, #336]	; (8006c30 <HAL_GPIO_Init+0x33c>)
 8006ade:	4293      	cmp	r3, r2
 8006ae0:	d01f      	beq.n	8006b22 <HAL_GPIO_Init+0x22e>
 8006ae2:	687b      	ldr	r3, [r7, #4]
 8006ae4:	4a53      	ldr	r2, [pc, #332]	; (8006c34 <HAL_GPIO_Init+0x340>)
 8006ae6:	4293      	cmp	r3, r2
 8006ae8:	d019      	beq.n	8006b1e <HAL_GPIO_Init+0x22a>
 8006aea:	687b      	ldr	r3, [r7, #4]
 8006aec:	4a52      	ldr	r2, [pc, #328]	; (8006c38 <HAL_GPIO_Init+0x344>)
 8006aee:	4293      	cmp	r3, r2
 8006af0:	d013      	beq.n	8006b1a <HAL_GPIO_Init+0x226>
 8006af2:	687b      	ldr	r3, [r7, #4]
 8006af4:	4a51      	ldr	r2, [pc, #324]	; (8006c3c <HAL_GPIO_Init+0x348>)
 8006af6:	4293      	cmp	r3, r2
 8006af8:	d00d      	beq.n	8006b16 <HAL_GPIO_Init+0x222>
 8006afa:	687b      	ldr	r3, [r7, #4]
 8006afc:	4a50      	ldr	r2, [pc, #320]	; (8006c40 <HAL_GPIO_Init+0x34c>)
 8006afe:	4293      	cmp	r3, r2
 8006b00:	d007      	beq.n	8006b12 <HAL_GPIO_Init+0x21e>
 8006b02:	687b      	ldr	r3, [r7, #4]
 8006b04:	4a4f      	ldr	r2, [pc, #316]	; (8006c44 <HAL_GPIO_Init+0x350>)
 8006b06:	4293      	cmp	r3, r2
 8006b08:	d101      	bne.n	8006b0e <HAL_GPIO_Init+0x21a>
 8006b0a:	2309      	movs	r3, #9
 8006b0c:	e012      	b.n	8006b34 <HAL_GPIO_Init+0x240>
 8006b0e:	230a      	movs	r3, #10
 8006b10:	e010      	b.n	8006b34 <HAL_GPIO_Init+0x240>
 8006b12:	2308      	movs	r3, #8
 8006b14:	e00e      	b.n	8006b34 <HAL_GPIO_Init+0x240>
 8006b16:	2307      	movs	r3, #7
 8006b18:	e00c      	b.n	8006b34 <HAL_GPIO_Init+0x240>
 8006b1a:	2306      	movs	r3, #6
 8006b1c:	e00a      	b.n	8006b34 <HAL_GPIO_Init+0x240>
 8006b1e:	2305      	movs	r3, #5
 8006b20:	e008      	b.n	8006b34 <HAL_GPIO_Init+0x240>
 8006b22:	2304      	movs	r3, #4
 8006b24:	e006      	b.n	8006b34 <HAL_GPIO_Init+0x240>
 8006b26:	2303      	movs	r3, #3
 8006b28:	e004      	b.n	8006b34 <HAL_GPIO_Init+0x240>
 8006b2a:	2302      	movs	r3, #2
 8006b2c:	e002      	b.n	8006b34 <HAL_GPIO_Init+0x240>
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e000      	b.n	8006b34 <HAL_GPIO_Init+0x240>
 8006b32:	2300      	movs	r3, #0
 8006b34:	69fa      	ldr	r2, [r7, #28]
 8006b36:	f002 0203 	and.w	r2, r2, #3
 8006b3a:	0092      	lsls	r2, r2, #2
 8006b3c:	4093      	lsls	r3, r2
 8006b3e:	69ba      	ldr	r2, [r7, #24]
 8006b40:	4313      	orrs	r3, r2
 8006b42:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006b44:	4935      	ldr	r1, [pc, #212]	; (8006c1c <HAL_GPIO_Init+0x328>)
 8006b46:	69fb      	ldr	r3, [r7, #28]
 8006b48:	089b      	lsrs	r3, r3, #2
 8006b4a:	3302      	adds	r3, #2
 8006b4c:	69ba      	ldr	r2, [r7, #24]
 8006b4e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006b52:	4b3d      	ldr	r3, [pc, #244]	; (8006c48 <HAL_GPIO_Init+0x354>)
 8006b54:	689b      	ldr	r3, [r3, #8]
 8006b56:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	43db      	mvns	r3, r3
 8006b5c:	69ba      	ldr	r2, [r7, #24]
 8006b5e:	4013      	ands	r3, r2
 8006b60:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	685b      	ldr	r3, [r3, #4]
 8006b66:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006b6a:	2b00      	cmp	r3, #0
 8006b6c:	d003      	beq.n	8006b76 <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006b6e:	69ba      	ldr	r2, [r7, #24]
 8006b70:	693b      	ldr	r3, [r7, #16]
 8006b72:	4313      	orrs	r3, r2
 8006b74:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006b76:	4a34      	ldr	r2, [pc, #208]	; (8006c48 <HAL_GPIO_Init+0x354>)
 8006b78:	69bb      	ldr	r3, [r7, #24]
 8006b7a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006b7c:	4b32      	ldr	r3, [pc, #200]	; (8006c48 <HAL_GPIO_Init+0x354>)
 8006b7e:	68db      	ldr	r3, [r3, #12]
 8006b80:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	43db      	mvns	r3, r3
 8006b86:	69ba      	ldr	r2, [r7, #24]
 8006b88:	4013      	ands	r3, r2
 8006b8a:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006b8c:	683b      	ldr	r3, [r7, #0]
 8006b8e:	685b      	ldr	r3, [r3, #4]
 8006b90:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d003      	beq.n	8006ba0 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8006b98:	69ba      	ldr	r2, [r7, #24]
 8006b9a:	693b      	ldr	r3, [r7, #16]
 8006b9c:	4313      	orrs	r3, r2
 8006b9e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006ba0:	4a29      	ldr	r2, [pc, #164]	; (8006c48 <HAL_GPIO_Init+0x354>)
 8006ba2:	69bb      	ldr	r3, [r7, #24]
 8006ba4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8006ba6:	4b28      	ldr	r3, [pc, #160]	; (8006c48 <HAL_GPIO_Init+0x354>)
 8006ba8:	685b      	ldr	r3, [r3, #4]
 8006baa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bac:	693b      	ldr	r3, [r7, #16]
 8006bae:	43db      	mvns	r3, r3
 8006bb0:	69ba      	ldr	r2, [r7, #24]
 8006bb2:	4013      	ands	r3, r2
 8006bb4:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 8006bb6:	683b      	ldr	r3, [r7, #0]
 8006bb8:	685b      	ldr	r3, [r3, #4]
 8006bba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006bbe:	2b00      	cmp	r3, #0
 8006bc0:	d003      	beq.n	8006bca <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8006bc2:	69ba      	ldr	r2, [r7, #24]
 8006bc4:	693b      	ldr	r3, [r7, #16]
 8006bc6:	4313      	orrs	r3, r2
 8006bc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006bca:	4a1f      	ldr	r2, [pc, #124]	; (8006c48 <HAL_GPIO_Init+0x354>)
 8006bcc:	69bb      	ldr	r3, [r7, #24]
 8006bce:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006bd0:	4b1d      	ldr	r3, [pc, #116]	; (8006c48 <HAL_GPIO_Init+0x354>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006bd6:	693b      	ldr	r3, [r7, #16]
 8006bd8:	43db      	mvns	r3, r3
 8006bda:	69ba      	ldr	r2, [r7, #24]
 8006bdc:	4013      	ands	r3, r2
 8006bde:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 8006be0:	683b      	ldr	r3, [r7, #0]
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006be8:	2b00      	cmp	r3, #0
 8006bea:	d003      	beq.n	8006bf4 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8006bec:	69ba      	ldr	r2, [r7, #24]
 8006bee:	693b      	ldr	r3, [r7, #16]
 8006bf0:	4313      	orrs	r3, r2
 8006bf2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006bf4:	4a14      	ldr	r2, [pc, #80]	; (8006c48 <HAL_GPIO_Init+0x354>)
 8006bf6:	69bb      	ldr	r3, [r7, #24]
 8006bf8:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 8006bfa:	69fb      	ldr	r3, [r7, #28]
 8006bfc:	3301      	adds	r3, #1
 8006bfe:	61fb      	str	r3, [r7, #28]
 8006c00:	69fb      	ldr	r3, [r7, #28]
 8006c02:	2b0f      	cmp	r3, #15
 8006c04:	f67f ae86 	bls.w	8006914 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 8006c08:	bf00      	nop
 8006c0a:	bf00      	nop
 8006c0c:	3724      	adds	r7, #36	; 0x24
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
 8006c16:	bf00      	nop
 8006c18:	40023800 	.word	0x40023800
 8006c1c:	40013800 	.word	0x40013800
 8006c20:	40020000 	.word	0x40020000
 8006c24:	40020400 	.word	0x40020400
 8006c28:	40020800 	.word	0x40020800
 8006c2c:	40020c00 	.word	0x40020c00
 8006c30:	40021000 	.word	0x40021000
 8006c34:	40021400 	.word	0x40021400
 8006c38:	40021800 	.word	0x40021800
 8006c3c:	40021c00 	.word	0x40021c00
 8006c40:	40022000 	.word	0x40022000
 8006c44:	40022400 	.word	0x40022400
 8006c48:	40013c00 	.word	0x40013c00

08006c4c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	b083      	sub	sp, #12
 8006c50:	af00      	add	r7, sp, #0
 8006c52:	6078      	str	r0, [r7, #4]
 8006c54:	460b      	mov	r3, r1
 8006c56:	807b      	strh	r3, [r7, #2]
 8006c58:	4613      	mov	r3, r2
 8006c5a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006c5c:	787b      	ldrb	r3, [r7, #1]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	d003      	beq.n	8006c6a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006c62:	887a      	ldrh	r2, [r7, #2]
 8006c64:	687b      	ldr	r3, [r7, #4]
 8006c66:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 8006c68:	e003      	b.n	8006c72 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 8006c6a:	887b      	ldrh	r3, [r7, #2]
 8006c6c:	041a      	lsls	r2, r3, #16
 8006c6e:	687b      	ldr	r3, [r7, #4]
 8006c70:	619a      	str	r2, [r3, #24]
}
 8006c72:	bf00      	nop
 8006c74:	370c      	adds	r7, #12
 8006c76:	46bd      	mov	sp, r7
 8006c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c7c:	4770      	bx	lr
	...

08006c80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006c80:	b580      	push	{r7, lr}
 8006c82:	b082      	sub	sp, #8
 8006c84:	af00      	add	r7, sp, #0
 8006c86:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	2b00      	cmp	r3, #0
 8006c8c:	d101      	bne.n	8006c92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006c8e:	2301      	movs	r3, #1
 8006c90:	e08b      	b.n	8006daa <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006c98:	b2db      	uxtb	r3, r3
 8006c9a:	2b00      	cmp	r3, #0
 8006c9c:	d106      	bne.n	8006cac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	2200      	movs	r2, #0
 8006ca2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 8006ca6:	6878      	ldr	r0, [r7, #4]
 8006ca8:	f7fa fa2a 	bl	8001100 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006cac:	687b      	ldr	r3, [r7, #4]
 8006cae:	2224      	movs	r2, #36	; 0x24
 8006cb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	681a      	ldr	r2, [r3, #0]
 8006cba:	687b      	ldr	r3, [r7, #4]
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	f022 0201 	bic.w	r2, r2, #1
 8006cc2:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	685a      	ldr	r2, [r3, #4]
 8006cc8:	687b      	ldr	r3, [r7, #4]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8006cd0:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	689a      	ldr	r2, [r3, #8]
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006ce0:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8006ce2:	687b      	ldr	r3, [r7, #4]
 8006ce4:	68db      	ldr	r3, [r3, #12]
 8006ce6:	2b01      	cmp	r3, #1
 8006ce8:	d107      	bne.n	8006cfa <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	689a      	ldr	r2, [r3, #8]
 8006cee:	687b      	ldr	r3, [r7, #4]
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006cf6:	609a      	str	r2, [r3, #8]
 8006cf8:	e006      	b.n	8006d08 <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 8006cfa:	687b      	ldr	r3, [r7, #4]
 8006cfc:	689a      	ldr	r2, [r3, #8]
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 8006d06:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	2b02      	cmp	r3, #2
 8006d0e:	d108      	bne.n	8006d22 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006d10:	687b      	ldr	r3, [r7, #4]
 8006d12:	681b      	ldr	r3, [r3, #0]
 8006d14:	685a      	ldr	r2, [r3, #4]
 8006d16:	687b      	ldr	r3, [r7, #4]
 8006d18:	681b      	ldr	r3, [r3, #0]
 8006d1a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006d1e:	605a      	str	r2, [r3, #4]
 8006d20:	e007      	b.n	8006d32 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	685a      	ldr	r2, [r3, #4]
 8006d28:	687b      	ldr	r3, [r7, #4]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006d30:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	681b      	ldr	r3, [r3, #0]
 8006d36:	6859      	ldr	r1, [r3, #4]
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	681a      	ldr	r2, [r3, #0]
 8006d3c:	4b1d      	ldr	r3, [pc, #116]	; (8006db4 <HAL_I2C_Init+0x134>)
 8006d3e:	430b      	orrs	r3, r1
 8006d40:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006d42:	687b      	ldr	r3, [r7, #4]
 8006d44:	681b      	ldr	r3, [r3, #0]
 8006d46:	68da      	ldr	r2, [r3, #12]
 8006d48:	687b      	ldr	r3, [r7, #4]
 8006d4a:	681b      	ldr	r3, [r3, #0]
 8006d4c:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006d50:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	691a      	ldr	r2, [r3, #16]
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	695b      	ldr	r3, [r3, #20]
 8006d5a:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006d5e:	687b      	ldr	r3, [r7, #4]
 8006d60:	699b      	ldr	r3, [r3, #24]
 8006d62:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	681b      	ldr	r3, [r3, #0]
 8006d68:	430a      	orrs	r2, r1
 8006d6a:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	69d9      	ldr	r1, [r3, #28]
 8006d70:	687b      	ldr	r3, [r7, #4]
 8006d72:	6a1a      	ldr	r2, [r3, #32]
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	430a      	orrs	r2, r1
 8006d7a:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006d7c:	687b      	ldr	r3, [r7, #4]
 8006d7e:	681b      	ldr	r3, [r3, #0]
 8006d80:	681a      	ldr	r2, [r3, #0]
 8006d82:	687b      	ldr	r3, [r7, #4]
 8006d84:	681b      	ldr	r3, [r3, #0]
 8006d86:	f042 0201 	orr.w	r2, r2, #1
 8006d8a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	2200      	movs	r2, #0
 8006d90:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	2220      	movs	r2, #32
 8006d96:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 8006d9a:	687b      	ldr	r3, [r7, #4]
 8006d9c:	2200      	movs	r2, #0
 8006d9e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	2200      	movs	r2, #0
 8006da4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 8006da8:	2300      	movs	r3, #0
}
 8006daa:	4618      	mov	r0, r3
 8006dac:	3708      	adds	r7, #8
 8006dae:	46bd      	mov	sp, r7
 8006db0:	bd80      	pop	{r7, pc}
 8006db2:	bf00      	nop
 8006db4:	02008000 	.word	0x02008000

08006db8 <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
 8006db8:	b580      	push	{r7, lr}
 8006dba:	b088      	sub	sp, #32
 8006dbc:	af02      	add	r7, sp, #8
 8006dbe:	60f8      	str	r0, [r7, #12]
 8006dc0:	607a      	str	r2, [r7, #4]
 8006dc2:	461a      	mov	r2, r3
 8006dc4:	460b      	mov	r3, r1
 8006dc6:	817b      	strh	r3, [r7, #10]
 8006dc8:	4613      	mov	r3, r2
 8006dca:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006dcc:	68fb      	ldr	r3, [r7, #12]
 8006dce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006dd2:	b2db      	uxtb	r3, r3
 8006dd4:	2b20      	cmp	r3, #32
 8006dd6:	d153      	bne.n	8006e80 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006dd8:	68fb      	ldr	r3, [r7, #12]
 8006dda:	681b      	ldr	r3, [r3, #0]
 8006ddc:	699b      	ldr	r3, [r3, #24]
 8006dde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006de2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006de6:	d101      	bne.n	8006dec <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 8006de8:	2302      	movs	r3, #2
 8006dea:	e04a      	b.n	8006e82 <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006df2:	2b01      	cmp	r3, #1
 8006df4:	d101      	bne.n	8006dfa <HAL_I2C_Master_Receive_IT+0x42>
 8006df6:	2302      	movs	r3, #2
 8006df8:	e043      	b.n	8006e82 <HAL_I2C_Master_Receive_IT+0xca>
 8006dfa:	68fb      	ldr	r3, [r7, #12]
 8006dfc:	2201      	movs	r2, #1
 8006dfe:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006e02:	68fb      	ldr	r3, [r7, #12]
 8006e04:	2222      	movs	r2, #34	; 0x22
 8006e06:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2210      	movs	r2, #16
 8006e0e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006e12:	68fb      	ldr	r3, [r7, #12]
 8006e14:	2200      	movs	r2, #0
 8006e16:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006e18:	68fb      	ldr	r3, [r7, #12]
 8006e1a:	687a      	ldr	r2, [r7, #4]
 8006e1c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006e1e:	68fb      	ldr	r3, [r7, #12]
 8006e20:	893a      	ldrh	r2, [r7, #8]
 8006e22:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006e24:	68fb      	ldr	r3, [r7, #12]
 8006e26:	4a19      	ldr	r2, [pc, #100]	; (8006e8c <HAL_I2C_Master_Receive_IT+0xd4>)
 8006e28:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 8006e2a:	68fb      	ldr	r3, [r7, #12]
 8006e2c:	4a18      	ldr	r2, [pc, #96]	; (8006e90 <HAL_I2C_Master_Receive_IT+0xd8>)
 8006e2e:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e34:	b29b      	uxth	r3, r3
 8006e36:	2bff      	cmp	r3, #255	; 0xff
 8006e38:	d906      	bls.n	8006e48 <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = 1U;
 8006e3a:	68fb      	ldr	r3, [r7, #12]
 8006e3c:	2201      	movs	r2, #1
 8006e3e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8006e40:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006e44:	617b      	str	r3, [r7, #20]
 8006e46:	e007      	b.n	8006e58 <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e4c:	b29a      	uxth	r2, r3
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006e52:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006e56:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8006e58:	68fb      	ldr	r3, [r7, #12]
 8006e5a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006e5c:	b2da      	uxtb	r2, r3
 8006e5e:	8979      	ldrh	r1, [r7, #10]
 8006e60:	4b0c      	ldr	r3, [pc, #48]	; (8006e94 <HAL_I2C_Master_Receive_IT+0xdc>)
 8006e62:	9300      	str	r3, [sp, #0]
 8006e64:	697b      	ldr	r3, [r7, #20]
 8006e66:	68f8      	ldr	r0, [r7, #12]
 8006e68:	f001 fd52 	bl	8008910 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006e6c:	68fb      	ldr	r3, [r7, #12]
 8006e6e:	2200      	movs	r2, #0
 8006e70:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006e74:	2102      	movs	r1, #2
 8006e76:	68f8      	ldr	r0, [r7, #12]
 8006e78:	f001 fd7c 	bl	8008974 <I2C_Enable_IRQ>

    return HAL_OK;
 8006e7c:	2300      	movs	r3, #0
 8006e7e:	e000      	b.n	8006e82 <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8006e80:	2302      	movs	r3, #2
  }
}
 8006e82:	4618      	mov	r0, r3
 8006e84:	3718      	adds	r7, #24
 8006e86:	46bd      	mov	sp, r7
 8006e88:	bd80      	pop	{r7, pc}
 8006e8a:	bf00      	nop
 8006e8c:	ffff0000 	.word	0xffff0000
 8006e90:	0800737b 	.word	0x0800737b
 8006e94:	80002400 	.word	0x80002400

08006e98 <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b084      	sub	sp, #16
 8006e9c:	af00      	add	r7, sp, #0
 8006e9e:	60f8      	str	r0, [r7, #12]
 8006ea0:	60b9      	str	r1, [r7, #8]
 8006ea2:	4613      	mov	r3, r2
 8006ea4:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006eac:	b2db      	uxtb	r3, r3
 8006eae:	2b20      	cmp	r3, #32
 8006eb0:	d156      	bne.n	8006f60 <HAL_I2C_Slave_Transmit_IT+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006eb8:	2b01      	cmp	r3, #1
 8006eba:	d101      	bne.n	8006ec0 <HAL_I2C_Slave_Transmit_IT+0x28>
 8006ebc:	2302      	movs	r3, #2
 8006ebe:	e050      	b.n	8006f62 <HAL_I2C_Slave_Transmit_IT+0xca>
 8006ec0:	68fb      	ldr	r3, [r7, #12]
 8006ec2:	2201      	movs	r2, #1
 8006ec4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	2221      	movs	r2, #33	; 0x21
 8006ecc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 8006ed0:	68fb      	ldr	r3, [r7, #12]
 8006ed2:	2220      	movs	r2, #32
 8006ed4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	2200      	movs	r2, #0
 8006edc:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 8006ede:	68fb      	ldr	r3, [r7, #12]
 8006ee0:	681b      	ldr	r3, [r3, #0]
 8006ee2:	685a      	ldr	r2, [r3, #4]
 8006ee4:	68fb      	ldr	r3, [r7, #12]
 8006ee6:	681b      	ldr	r3, [r3, #0]
 8006ee8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006eec:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006eee:	68fb      	ldr	r3, [r7, #12]
 8006ef0:	68ba      	ldr	r2, [r7, #8]
 8006ef2:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006ef4:	68fb      	ldr	r3, [r7, #12]
 8006ef6:	88fa      	ldrh	r2, [r7, #6]
 8006ef8:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8006efa:	68fb      	ldr	r3, [r7, #12]
 8006efc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006efe:	b29a      	uxth	r2, r3
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	4a19      	ldr	r2, [pc, #100]	; (8006f6c <HAL_I2C_Slave_Transmit_IT+0xd4>)
 8006f08:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 8006f0a:	68fb      	ldr	r3, [r7, #12]
 8006f0c:	4a18      	ldr	r2, [pc, #96]	; (8006f70 <HAL_I2C_Slave_Transmit_IT+0xd8>)
 8006f0e:	635a      	str	r2, [r3, #52]	; 0x34

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 8006f10:	68fb      	ldr	r3, [r7, #12]
 8006f12:	6a1b      	ldr	r3, [r3, #32]
 8006f14:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8006f18:	d117      	bne.n	8006f4a <HAL_I2C_Slave_Transmit_IT+0xb2>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006f1a:	68fb      	ldr	r3, [r7, #12]
 8006f1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f1e:	781a      	ldrb	r2, [r3, #0]
 8006f20:	68fb      	ldr	r3, [r7, #12]
 8006f22:	681b      	ldr	r3, [r3, #0]
 8006f24:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f26:	68fb      	ldr	r3, [r7, #12]
 8006f28:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f2a:	1c5a      	adds	r2, r3, #1
 8006f2c:	68fb      	ldr	r3, [r7, #12]
 8006f2e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006f30:	68fb      	ldr	r3, [r7, #12]
 8006f32:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f34:	b29b      	uxth	r3, r3
 8006f36:	3b01      	subs	r3, #1
 8006f38:	b29a      	uxth	r2, r3
 8006f3a:	68fb      	ldr	r3, [r7, #12]
 8006f3c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f42:	3b01      	subs	r3, #1
 8006f44:	b29a      	uxth	r2, r3
 8006f46:	68fb      	ldr	r3, [r7, #12]
 8006f48:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006f4a:	68fb      	ldr	r3, [r7, #12]
 8006f4c:	2200      	movs	r2, #0
 8006f4e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8006f52:	f248 0101 	movw	r1, #32769	; 0x8001
 8006f56:	68f8      	ldr	r0, [r7, #12]
 8006f58:	f001 fd0c 	bl	8008974 <I2C_Enable_IRQ>

    return HAL_OK;
 8006f5c:	2300      	movs	r3, #0
 8006f5e:	e000      	b.n	8006f62 <HAL_I2C_Slave_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8006f60:	2302      	movs	r3, #2
  }
}
 8006f62:	4618      	mov	r0, r3
 8006f64:	3710      	adds	r7, #16
 8006f66:	46bd      	mov	sp, r7
 8006f68:	bd80      	pop	{r7, pc}
 8006f6a:	bf00      	nop
 8006f6c:	ffff0000 	.word	0xffff0000
 8006f70:	080075e5 	.word	0x080075e5

08006f74 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8006f74:	b580      	push	{r7, lr}
 8006f76:	b088      	sub	sp, #32
 8006f78:	af02      	add	r7, sp, #8
 8006f7a:	60f8      	str	r0, [r7, #12]
 8006f7c:	607a      	str	r2, [r7, #4]
 8006f7e:	461a      	mov	r2, r3
 8006f80:	460b      	mov	r3, r1
 8006f82:	817b      	strh	r3, [r7, #10]
 8006f84:	4613      	mov	r3, r2
 8006f86:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 8006f88:	68fb      	ldr	r3, [r7, #12]
 8006f8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006f8e:	b2db      	uxtb	r3, r3
 8006f90:	2b20      	cmp	r3, #32
 8006f92:	f040 80cd 	bne.w	8007130 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 8006f96:	68fb      	ldr	r3, [r7, #12]
 8006f98:	681b      	ldr	r3, [r3, #0]
 8006f9a:	699b      	ldr	r3, [r3, #24]
 8006f9c:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006fa0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006fa4:	d101      	bne.n	8006faa <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 8006fa6:	2302      	movs	r3, #2
 8006fa8:	e0c3      	b.n	8007132 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006faa:	68fb      	ldr	r3, [r7, #12]
 8006fac:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fb0:	2b01      	cmp	r3, #1
 8006fb2:	d101      	bne.n	8006fb8 <HAL_I2C_Master_Receive_DMA+0x44>
 8006fb4:	2302      	movs	r3, #2
 8006fb6:	e0bc      	b.n	8007132 <HAL_I2C_Master_Receive_DMA+0x1be>
 8006fb8:	68fb      	ldr	r3, [r7, #12]
 8006fba:	2201      	movs	r2, #1
 8006fbc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8006fc0:	68fb      	ldr	r3, [r7, #12]
 8006fc2:	2222      	movs	r2, #34	; 0x22
 8006fc4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8006fc8:	68fb      	ldr	r3, [r7, #12]
 8006fca:	2210      	movs	r2, #16
 8006fcc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8006fd0:	68fb      	ldr	r3, [r7, #12]
 8006fd2:	2200      	movs	r2, #0
 8006fd4:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8006fd6:	68fb      	ldr	r3, [r7, #12]
 8006fd8:	687a      	ldr	r2, [r7, #4]
 8006fda:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006fdc:	68fb      	ldr	r3, [r7, #12]
 8006fde:	893a      	ldrh	r2, [r7, #8]
 8006fe0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006fe2:	68fb      	ldr	r3, [r7, #12]
 8006fe4:	4a55      	ldr	r2, [pc, #340]	; (800713c <HAL_I2C_Master_Receive_DMA+0x1c8>)
 8006fe6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	4a55      	ldr	r2, [pc, #340]	; (8007140 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 8006fec:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006fee:	68fb      	ldr	r3, [r7, #12]
 8006ff0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	2bff      	cmp	r3, #255	; 0xff
 8006ff6:	d906      	bls.n	8007006 <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = 1U;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8006ffe:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007002:	617b      	str	r3, [r7, #20]
 8007004:	e007      	b.n	8007016 <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007006:	68fb      	ldr	r3, [r7, #12]
 8007008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800700a:	b29a      	uxth	r2, r3
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8007010:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007014:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 8007016:	68fb      	ldr	r3, [r7, #12]
 8007018:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800701a:	2b00      	cmp	r3, #0
 800701c:	d070      	beq.n	8007100 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 800701e:	68fb      	ldr	r3, [r7, #12]
 8007020:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007022:	2b00      	cmp	r3, #0
 8007024:	d020      	beq.n	8007068 <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 8007026:	68fb      	ldr	r3, [r7, #12]
 8007028:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800702a:	4a46      	ldr	r2, [pc, #280]	; (8007144 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 800702c:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007032:	4a45      	ldr	r2, [pc, #276]	; (8007148 <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8007034:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 8007036:	68fb      	ldr	r3, [r7, #12]
 8007038:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800703a:	2200      	movs	r2, #0
 800703c:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 800703e:	68fb      	ldr	r3, [r7, #12]
 8007040:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007042:	2200      	movs	r2, #0
 8007044:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8007046:	68fb      	ldr	r3, [r7, #12]
 8007048:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800704a:	68fb      	ldr	r3, [r7, #12]
 800704c:	681b      	ldr	r3, [r3, #0]
 800704e:	3324      	adds	r3, #36	; 0x24
 8007050:	4619      	mov	r1, r3
 8007052:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8007054:	68fb      	ldr	r3, [r7, #12]
 8007056:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 8007058:	f7fd fb80 	bl	800475c <HAL_DMA_Start_IT>
 800705c:	4603      	mov	r3, r0
 800705e:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8007060:	7cfb      	ldrb	r3, [r7, #19]
 8007062:	2b00      	cmp	r3, #0
 8007064:	d138      	bne.n	80070d8 <HAL_I2C_Master_Receive_DMA+0x164>
 8007066:	e013      	b.n	8007090 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 8007068:	68fb      	ldr	r3, [r7, #12]
 800706a:	2220      	movs	r2, #32
 800706c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8007070:	68fb      	ldr	r3, [r7, #12]
 8007072:	2200      	movs	r2, #0
 8007074:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 8007078:	68fb      	ldr	r3, [r7, #12]
 800707a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800707c:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	2200      	movs	r2, #0
 8007088:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 800708c:	2301      	movs	r3, #1
 800708e:	e050      	b.n	8007132 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8007090:	68fb      	ldr	r3, [r7, #12]
 8007092:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007094:	b2da      	uxtb	r2, r3
 8007096:	8979      	ldrh	r1, [r7, #10]
 8007098:	4b2c      	ldr	r3, [pc, #176]	; (800714c <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800709a:	9300      	str	r3, [sp, #0]
 800709c:	697b      	ldr	r3, [r7, #20]
 800709e:	68f8      	ldr	r0, [r7, #12]
 80070a0:	f001 fc36 	bl	8008910 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 80070a4:	68fb      	ldr	r3, [r7, #12]
 80070a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070a8:	b29a      	uxth	r2, r3
 80070aa:	68fb      	ldr	r3, [r7, #12]
 80070ac:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070ae:	1ad3      	subs	r3, r2, r3
 80070b0:	b29a      	uxth	r2, r3
 80070b2:	68fb      	ldr	r3, [r7, #12]
 80070b4:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	2200      	movs	r2, #0
 80070ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80070be:	2110      	movs	r1, #16
 80070c0:	68f8      	ldr	r0, [r7, #12]
 80070c2:	f001 fc57 	bl	8008974 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80070c6:	68fb      	ldr	r3, [r7, #12]
 80070c8:	681b      	ldr	r3, [r3, #0]
 80070ca:	681a      	ldr	r2, [r3, #0]
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	681b      	ldr	r3, [r3, #0]
 80070d0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80070d4:	601a      	str	r2, [r3, #0]
 80070d6:	e029      	b.n	800712c <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	2220      	movs	r2, #32
 80070dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80070e0:	68fb      	ldr	r3, [r7, #12]
 80070e2:	2200      	movs	r2, #0
 80070e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80070e8:	68fb      	ldr	r3, [r7, #12]
 80070ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80070ec:	f043 0210 	orr.w	r2, r3, #16
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80070f4:	68fb      	ldr	r3, [r7, #12]
 80070f6:	2200      	movs	r2, #0
 80070f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80070fc:	2301      	movs	r3, #1
 80070fe:	e018      	b.n	8007132 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 8007100:	68fb      	ldr	r3, [r7, #12]
 8007102:	4a13      	ldr	r2, [pc, #76]	; (8007150 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 8007104:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800710a:	b2da      	uxtb	r2, r3
 800710c:	8979      	ldrh	r1, [r7, #10]
 800710e:	4b0f      	ldr	r3, [pc, #60]	; (800714c <HAL_I2C_Master_Receive_DMA+0x1d8>)
 8007110:	9300      	str	r3, [sp, #0]
 8007112:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007116:	68f8      	ldr	r0, [r7, #12]
 8007118:	f001 fbfa 	bl	8008910 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800711c:	68fb      	ldr	r3, [r7, #12]
 800711e:	2200      	movs	r2, #0
 8007120:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007124:	2102      	movs	r1, #2
 8007126:	68f8      	ldr	r0, [r7, #12]
 8007128:	f001 fc24 	bl	8008974 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800712c:	2300      	movs	r3, #0
 800712e:	e000      	b.n	8007132 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8007130:	2302      	movs	r3, #2
  }
}
 8007132:	4618      	mov	r0, r3
 8007134:	3718      	adds	r7, #24
 8007136:	46bd      	mov	sp, r7
 8007138:	bd80      	pop	{r7, pc}
 800713a:	bf00      	nop
 800713c:	ffff0000 	.word	0xffff0000
 8007140:	080077d7 	.word	0x080077d7
 8007144:	080087af 	.word	0x080087af
 8007148:	08008861 	.word	0x08008861
 800714c:	80002400 	.word	0x80002400
 8007150:	0800737b 	.word	0x0800737b

08007154 <HAL_I2C_Master_Abort_IT>:
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Abort_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress)
{
 8007154:	b580      	push	{r7, lr}
 8007156:	b086      	sub	sp, #24
 8007158:	af02      	add	r7, sp, #8
 800715a:	6078      	str	r0, [r7, #4]
 800715c:	460b      	mov	r3, r1
 800715e:	807b      	strh	r3, [r7, #2]
  HAL_I2C_ModeTypeDef tmp_mode = hi2c->Mode;
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007166:	73fb      	strb	r3, [r7, #15]

  if ((tmp_mode == HAL_I2C_MODE_MASTER) || (tmp_mode == HAL_I2C_MODE_MEM))
 8007168:	7bfb      	ldrb	r3, [r7, #15]
 800716a:	2b10      	cmp	r3, #16
 800716c:	d002      	beq.n	8007174 <HAL_I2C_Master_Abort_IT+0x20>
 800716e:	7bfb      	ldrb	r3, [r7, #15]
 8007170:	2b40      	cmp	r3, #64	; 0x40
 8007172:	d13c      	bne.n	80071ee <HAL_I2C_Master_Abort_IT+0x9a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8007174:	687b      	ldr	r3, [r7, #4]
 8007176:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800717a:	2b01      	cmp	r3, #1
 800717c:	d101      	bne.n	8007182 <HAL_I2C_Master_Abort_IT+0x2e>
 800717e:	2302      	movs	r3, #2
 8007180:	e036      	b.n	80071f0 <HAL_I2C_Master_Abort_IT+0x9c>
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	2201      	movs	r2, #1
 8007186:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Disable Interrupts and Store Previous state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800718a:	687b      	ldr	r3, [r7, #4]
 800718c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007190:	b2db      	uxtb	r3, r3
 8007192:	2b21      	cmp	r3, #33	; 0x21
 8007194:	d107      	bne.n	80071a6 <HAL_I2C_Master_Abort_IT+0x52>
    {
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007196:	2101      	movs	r1, #1
 8007198:	6878      	ldr	r0, [r7, #4]
 800719a:	f001 fc6f 	bl	8008a7c <I2C_Disable_IRQ>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800719e:	687b      	ldr	r3, [r7, #4]
 80071a0:	2211      	movs	r2, #17
 80071a2:	631a      	str	r2, [r3, #48]	; 0x30
 80071a4:	e00c      	b.n	80071c0 <HAL_I2C_Master_Abort_IT+0x6c>
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80071ac:	b2db      	uxtb	r3, r3
 80071ae:	2b22      	cmp	r3, #34	; 0x22
 80071b0:	d106      	bne.n	80071c0 <HAL_I2C_Master_Abort_IT+0x6c>
    {
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80071b2:	2102      	movs	r1, #2
 80071b4:	6878      	ldr	r0, [r7, #4]
 80071b6:	f001 fc61 	bl	8008a7c <I2C_Disable_IRQ>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	2212      	movs	r2, #18
 80071be:	631a      	str	r2, [r3, #48]	; 0x30
    {
      /* Do nothing */
    }

    /* Set State at HAL_I2C_STATE_ABORT */
    hi2c->State = HAL_I2C_STATE_ABORT;
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	2260      	movs	r2, #96	; 0x60
 80071c4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set NBYTES to 1 to generate a dummy read on I2C peripheral */
    /* Set AUTOEND mode, this will generate a NACK then STOP condition to abort the current transfer */
    I2C_TransferConfig(hi2c, DevAddress, 1, I2C_AUTOEND_MODE, I2C_GENERATE_STOP);
 80071c8:	8879      	ldrh	r1, [r7, #2]
 80071ca:	4b0b      	ldr	r3, [pc, #44]	; (80071f8 <HAL_I2C_Master_Abort_IT+0xa4>)
 80071cc:	9300      	str	r3, [sp, #0]
 80071ce:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80071d2:	2201      	movs	r2, #1
 80071d4:	6878      	ldr	r0, [r7, #4]
 80071d6:	f001 fb9b 	bl	8008910 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80071e2:	2120      	movs	r1, #32
 80071e4:	6878      	ldr	r0, [r7, #4]
 80071e6:	f001 fbc5 	bl	8008974 <I2C_Enable_IRQ>

    return HAL_OK;
 80071ea:	2300      	movs	r3, #0
 80071ec:	e000      	b.n	80071f0 <HAL_I2C_Master_Abort_IT+0x9c>
  }
  else
  {
    /* Wrong usage of abort function */
    /* This function should be used only in case of abort monitored by master device */
    return HAL_ERROR;
 80071ee:	2301      	movs	r3, #1
  }
}
 80071f0:	4618      	mov	r0, r3
 80071f2:	3710      	adds	r7, #16
 80071f4:	46bd      	mov	sp, r7
 80071f6:	bd80      	pop	{r7, pc}
 80071f8:	80004000 	.word	0x80004000

080071fc <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80071fc:	b580      	push	{r7, lr}
 80071fe:	b084      	sub	sp, #16
 8007200:	af00      	add	r7, sp, #0
 8007202:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	681b      	ldr	r3, [r3, #0]
 8007208:	699b      	ldr	r3, [r3, #24]
 800720a:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	681b      	ldr	r3, [r3, #0]
 8007212:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007218:	2b00      	cmp	r3, #0
 800721a:	d005      	beq.n	8007228 <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007220:	68ba      	ldr	r2, [r7, #8]
 8007222:	68f9      	ldr	r1, [r7, #12]
 8007224:	6878      	ldr	r0, [r7, #4]
 8007226:	4798      	blx	r3
  }
}
 8007228:	bf00      	nop
 800722a:	3710      	adds	r7, #16
 800722c:	46bd      	mov	sp, r7
 800722e:	bd80      	pop	{r7, pc}

08007230 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8007230:	b580      	push	{r7, lr}
 8007232:	b086      	sub	sp, #24
 8007234:	af00      	add	r7, sp, #0
 8007236:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	699b      	ldr	r3, [r3, #24]
 800723e:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	681b      	ldr	r3, [r3, #0]
 8007246:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007248:	697b      	ldr	r3, [r7, #20]
 800724a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800724e:	2b00      	cmp	r3, #0
 8007250:	d00f      	beq.n	8007272 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8007252:	693b      	ldr	r3, [r7, #16]
 8007254:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8007258:	2b00      	cmp	r3, #0
 800725a:	d00a      	beq.n	8007272 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007260:	f043 0201 	orr.w	r2, r3, #1
 8007264:	687b      	ldr	r3, [r7, #4]
 8007266:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	f44f 7280 	mov.w	r2, #256	; 0x100
 8007270:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007272:	697b      	ldr	r3, [r7, #20]
 8007274:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007278:	2b00      	cmp	r3, #0
 800727a:	d00f      	beq.n	800729c <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800727c:	693b      	ldr	r3, [r7, #16]
 800727e:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8007282:	2b00      	cmp	r3, #0
 8007284:	d00a      	beq.n	800729c <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800728a:	f043 0208 	orr.w	r2, r3, #8
 800728e:	687b      	ldr	r3, [r7, #4]
 8007290:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	681b      	ldr	r3, [r3, #0]
 8007296:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800729a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800729c:	697b      	ldr	r3, [r7, #20]
 800729e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072a2:	2b00      	cmp	r3, #0
 80072a4:	d00f      	beq.n	80072c6 <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 80072a6:	693b      	ldr	r3, [r7, #16]
 80072a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 80072ac:	2b00      	cmp	r3, #0
 80072ae:	d00a      	beq.n	80072c6 <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 80072b0:	687b      	ldr	r3, [r7, #4]
 80072b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072b4:	f043 0202 	orr.w	r2, r3, #2
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f44f 7200 	mov.w	r2, #512	; 0x200
 80072c4:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80072c6:	687b      	ldr	r3, [r7, #4]
 80072c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80072ca:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	f003 030b 	and.w	r3, r3, #11
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d003      	beq.n	80072de <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 80072d6:	68f9      	ldr	r1, [r7, #12]
 80072d8:	6878      	ldr	r0, [r7, #4]
 80072da:	f001 f92d 	bl	8008538 <I2C_ITError>
  }
}
 80072de:	bf00      	nop
 80072e0:	3718      	adds	r7, #24
 80072e2:	46bd      	mov	sp, r7
 80072e4:	bd80      	pop	{r7, pc}

080072e6 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80072e6:	b480      	push	{r7}
 80072e8:	b083      	sub	sp, #12
 80072ea:	af00      	add	r7, sp, #0
 80072ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 80072ee:	bf00      	nop
 80072f0:	370c      	adds	r7, #12
 80072f2:	46bd      	mov	sp, r7
 80072f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f8:	4770      	bx	lr

080072fa <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80072fa:	b480      	push	{r7}
 80072fc:	b083      	sub	sp, #12
 80072fe:	af00      	add	r7, sp, #0
 8007300:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8007302:	bf00      	nop
 8007304:	370c      	adds	r7, #12
 8007306:	46bd      	mov	sp, r7
 8007308:	f85d 7b04 	ldr.w	r7, [sp], #4
 800730c:	4770      	bx	lr

0800730e <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800730e:	b480      	push	{r7}
 8007310:	b083      	sub	sp, #12
 8007312:	af00      	add	r7, sp, #0
 8007314:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8007316:	bf00      	nop
 8007318:	370c      	adds	r7, #12
 800731a:	46bd      	mov	sp, r7
 800731c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007320:	4770      	bx	lr

08007322 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8007322:	b480      	push	{r7}
 8007324:	b083      	sub	sp, #12
 8007326:	af00      	add	r7, sp, #0
 8007328:	6078      	str	r0, [r7, #4]
 800732a:	460b      	mov	r3, r1
 800732c:	70fb      	strb	r3, [r7, #3]
 800732e:	4613      	mov	r3, r2
 8007330:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8007332:	bf00      	nop
 8007334:	370c      	adds	r7, #12
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr

0800733e <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800733e:	b480      	push	{r7}
 8007340:	b083      	sub	sp, #12
 8007342:	af00      	add	r7, sp, #0
 8007344:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8007346:	bf00      	nop
 8007348:	370c      	adds	r7, #12
 800734a:	46bd      	mov	sp, r7
 800734c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007350:	4770      	bx	lr

08007352 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007352:	b480      	push	{r7}
 8007354:	b083      	sub	sp, #12
 8007356:	af00      	add	r7, sp, #0
 8007358:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800735a:	bf00      	nop
 800735c:	370c      	adds	r7, #12
 800735e:	46bd      	mov	sp, r7
 8007360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007364:	4770      	bx	lr

08007366 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8007366:	b480      	push	{r7}
 8007368:	b083      	sub	sp, #12
 800736a:	af00      	add	r7, sp, #0
 800736c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800736e:	bf00      	nop
 8007370:	370c      	adds	r7, #12
 8007372:	46bd      	mov	sp, r7
 8007374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007378:	4770      	bx	lr

0800737a <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800737a:	b580      	push	{r7, lr}
 800737c:	b088      	sub	sp, #32
 800737e:	af02      	add	r7, sp, #8
 8007380:	60f8      	str	r0, [r7, #12]
 8007382:	60b9      	str	r1, [r7, #8]
 8007384:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8007386:	68bb      	ldr	r3, [r7, #8]
 8007388:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007390:	2b01      	cmp	r3, #1
 8007392:	d101      	bne.n	8007398 <I2C_Master_ISR_IT+0x1e>
 8007394:	2302      	movs	r3, #2
 8007396:	e121      	b.n	80075dc <I2C_Master_ISR_IT+0x262>
 8007398:	68fb      	ldr	r3, [r7, #12]
 800739a:	2201      	movs	r2, #1
 800739c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	f003 0310 	and.w	r3, r3, #16
 80073a6:	2b00      	cmp	r3, #0
 80073a8:	d012      	beq.n	80073d0 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 80073b0:	2b00      	cmp	r3, #0
 80073b2:	d00d      	beq.n	80073d0 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80073b4:	68fb      	ldr	r3, [r7, #12]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	2210      	movs	r2, #16
 80073ba:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073c0:	f043 0204 	orr.w	r2, r3, #4
 80073c4:	68fb      	ldr	r3, [r7, #12]
 80073c6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 80073c8:	68f8      	ldr	r0, [r7, #12]
 80073ca:	f001 f9cc 	bl	8008766 <I2C_Flush_TXDR>
 80073ce:	e0f2      	b.n	80075b6 <I2C_Master_ISR_IT+0x23c>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	f003 0304 	and.w	r3, r3, #4
 80073d6:	2b00      	cmp	r3, #0
 80073d8:	d022      	beq.n	8007420 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80073e0:	2b00      	cmp	r3, #0
 80073e2:	d01d      	beq.n	8007420 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80073e4:	697b      	ldr	r3, [r7, #20]
 80073e6:	f023 0304 	bic.w	r3, r3, #4
 80073ea:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80073ec:	68fb      	ldr	r3, [r7, #12]
 80073ee:	681b      	ldr	r3, [r3, #0]
 80073f0:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80073f2:	68fb      	ldr	r3, [r7, #12]
 80073f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073f6:	b2d2      	uxtb	r2, r2
 80073f8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80073fa:	68fb      	ldr	r3, [r7, #12]
 80073fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073fe:	1c5a      	adds	r2, r3, #1
 8007400:	68fb      	ldr	r3, [r7, #12]
 8007402:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8007404:	68fb      	ldr	r3, [r7, #12]
 8007406:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007408:	3b01      	subs	r3, #1
 800740a:	b29a      	uxth	r2, r3
 800740c:	68fb      	ldr	r3, [r7, #12]
 800740e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8007410:	68fb      	ldr	r3, [r7, #12]
 8007412:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007414:	b29b      	uxth	r3, r3
 8007416:	3b01      	subs	r3, #1
 8007418:	b29a      	uxth	r2, r3
 800741a:	68fb      	ldr	r3, [r7, #12]
 800741c:	855a      	strh	r2, [r3, #42]	; 0x2a
 800741e:	e0ca      	b.n	80075b6 <I2C_Master_ISR_IT+0x23c>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8007420:	697b      	ldr	r3, [r7, #20]
 8007422:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007426:	2b00      	cmp	r3, #0
 8007428:	d128      	bne.n	800747c <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800742a:	697b      	ldr	r3, [r7, #20]
 800742c:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8007430:	2b00      	cmp	r3, #0
 8007432:	d023      	beq.n	800747c <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800743a:	2b00      	cmp	r3, #0
 800743c:	d01e      	beq.n	800747c <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 800743e:	68fb      	ldr	r3, [r7, #12]
 8007440:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007442:	b29b      	uxth	r3, r3
 8007444:	2b00      	cmp	r3, #0
 8007446:	f000 80b6 	beq.w	80075b6 <I2C_Master_ISR_IT+0x23c>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800744e:	781a      	ldrb	r2, [r3, #0]
 8007450:	68fb      	ldr	r3, [r7, #12]
 8007452:	681b      	ldr	r3, [r3, #0]
 8007454:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007456:	68fb      	ldr	r3, [r7, #12]
 8007458:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800745a:	1c5a      	adds	r2, r3, #1
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007460:	68fb      	ldr	r3, [r7, #12]
 8007462:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007464:	3b01      	subs	r3, #1
 8007466:	b29a      	uxth	r2, r3
 8007468:	68fb      	ldr	r3, [r7, #12]
 800746a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800746c:	68fb      	ldr	r3, [r7, #12]
 800746e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007470:	b29b      	uxth	r3, r3
 8007472:	3b01      	subs	r3, #1
 8007474:	b29a      	uxth	r2, r3
 8007476:	68fb      	ldr	r3, [r7, #12]
 8007478:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 800747a:	e09c      	b.n	80075b6 <I2C_Master_ISR_IT+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800747c:	697b      	ldr	r3, [r7, #20]
 800747e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007482:	2b00      	cmp	r3, #0
 8007484:	d06a      	beq.n	800755c <I2C_Master_ISR_IT+0x1e2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800748c:	2b00      	cmp	r3, #0
 800748e:	d065      	beq.n	800755c <I2C_Master_ISR_IT+0x1e2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007490:	68fb      	ldr	r3, [r7, #12]
 8007492:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007494:	b29b      	uxth	r3, r3
 8007496:	2b00      	cmp	r3, #0
 8007498:	d04e      	beq.n	8007538 <I2C_Master_ISR_IT+0x1be>
 800749a:	68fb      	ldr	r3, [r7, #12]
 800749c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800749e:	2b00      	cmp	r3, #0
 80074a0:	d14a      	bne.n	8007538 <I2C_Master_ISR_IT+0x1be>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 80074a2:	68fb      	ldr	r3, [r7, #12]
 80074a4:	681b      	ldr	r3, [r3, #0]
 80074a6:	685b      	ldr	r3, [r3, #4]
 80074a8:	b29b      	uxth	r3, r3
 80074aa:	f3c3 0309 	ubfx	r3, r3, #0, #10
 80074ae:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074b4:	b29b      	uxth	r3, r3
 80074b6:	2bff      	cmp	r3, #255	; 0xff
 80074b8:	d91c      	bls.n	80074f4 <I2C_Master_ISR_IT+0x17a>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80074ba:	68fb      	ldr	r3, [r7, #12]
 80074bc:	681b      	ldr	r3, [r3, #0]
 80074be:	699b      	ldr	r3, [r3, #24]
 80074c0:	0c1b      	lsrs	r3, r3, #16
 80074c2:	b2db      	uxtb	r3, r3
 80074c4:	f003 0301 	and.w	r3, r3, #1
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	2b01      	cmp	r3, #1
 80074cc:	d103      	bne.n	80074d6 <I2C_Master_ISR_IT+0x15c>
        {
          hi2c->XferSize = 1U;
 80074ce:	68fb      	ldr	r3, [r7, #12]
 80074d0:	2201      	movs	r2, #1
 80074d2:	851a      	strh	r2, [r3, #40]	; 0x28
 80074d4:	e002      	b.n	80074dc <I2C_Master_ISR_IT+0x162>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 80074d6:	68fb      	ldr	r3, [r7, #12]
 80074d8:	22ff      	movs	r2, #255	; 0xff
 80074da:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 80074dc:	68fb      	ldr	r3, [r7, #12]
 80074de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80074e0:	b2da      	uxtb	r2, r3
 80074e2:	8a79      	ldrh	r1, [r7, #18]
 80074e4:	2300      	movs	r3, #0
 80074e6:	9300      	str	r3, [sp, #0]
 80074e8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80074ec:	68f8      	ldr	r0, [r7, #12]
 80074ee:	f001 fa0f 	bl	8008910 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80074f2:	e032      	b.n	800755a <I2C_Master_ISR_IT+0x1e0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80074f8:	b29a      	uxth	r2, r3
 80074fa:	68fb      	ldr	r3, [r7, #12]
 80074fc:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80074fe:	68fb      	ldr	r3, [r7, #12]
 8007500:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007502:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007506:	d00b      	beq.n	8007520 <I2C_Master_ISR_IT+0x1a6>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8007508:	68fb      	ldr	r3, [r7, #12]
 800750a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800750c:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800750e:	68fb      	ldr	r3, [r7, #12]
 8007510:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8007512:	8a79      	ldrh	r1, [r7, #18]
 8007514:	2000      	movs	r0, #0
 8007516:	9000      	str	r0, [sp, #0]
 8007518:	68f8      	ldr	r0, [r7, #12]
 800751a:	f001 f9f9 	bl	8008910 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800751e:	e01c      	b.n	800755a <I2C_Master_ISR_IT+0x1e0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8007520:	68fb      	ldr	r3, [r7, #12]
 8007522:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007524:	b2da      	uxtb	r2, r3
 8007526:	8a79      	ldrh	r1, [r7, #18]
 8007528:	2300      	movs	r3, #0
 800752a:	9300      	str	r3, [sp, #0]
 800752c:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007530:	68f8      	ldr	r0, [r7, #12]
 8007532:	f001 f9ed 	bl	8008910 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007536:	e010      	b.n	800755a <I2C_Master_ISR_IT+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	685b      	ldr	r3, [r3, #4]
 800753e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007542:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007546:	d003      	beq.n	8007550 <I2C_Master_ISR_IT+0x1d6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8007548:	68f8      	ldr	r0, [r7, #12]
 800754a:	f000 fcdc 	bl	8007f06 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800754e:	e032      	b.n	80075b6 <I2C_Master_ISR_IT+0x23c>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007550:	2140      	movs	r1, #64	; 0x40
 8007552:	68f8      	ldr	r0, [r7, #12]
 8007554:	f000 fff0 	bl	8008538 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8007558:	e02d      	b.n	80075b6 <I2C_Master_ISR_IT+0x23c>
 800755a:	e02c      	b.n	80075b6 <I2C_Master_ISR_IT+0x23c>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800755c:	697b      	ldr	r3, [r7, #20]
 800755e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007562:	2b00      	cmp	r3, #0
 8007564:	d027      	beq.n	80075b6 <I2C_Master_ISR_IT+0x23c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800756c:	2b00      	cmp	r3, #0
 800756e:	d022      	beq.n	80075b6 <I2C_Master_ISR_IT+0x23c>
  {
    if (hi2c->XferCount == 0U)
 8007570:	68fb      	ldr	r3, [r7, #12]
 8007572:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007574:	b29b      	uxth	r3, r3
 8007576:	2b00      	cmp	r3, #0
 8007578:	d119      	bne.n	80075ae <I2C_Master_ISR_IT+0x234>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800757a:	68fb      	ldr	r3, [r7, #12]
 800757c:	681b      	ldr	r3, [r3, #0]
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007584:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007588:	d015      	beq.n	80075b6 <I2C_Master_ISR_IT+0x23c>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800758a:	68fb      	ldr	r3, [r7, #12]
 800758c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800758e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007592:	d108      	bne.n	80075a6 <I2C_Master_ISR_IT+0x22c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007594:	68fb      	ldr	r3, [r7, #12]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	685a      	ldr	r2, [r3, #4]
 800759a:	68fb      	ldr	r3, [r7, #12]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80075a2:	605a      	str	r2, [r3, #4]
 80075a4:	e007      	b.n	80075b6 <I2C_Master_ISR_IT+0x23c>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 80075a6:	68f8      	ldr	r0, [r7, #12]
 80075a8:	f000 fcad 	bl	8007f06 <I2C_ITMasterSeqCplt>
 80075ac:	e003      	b.n	80075b6 <I2C_Master_ISR_IT+0x23c>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 80075ae:	2140      	movs	r1, #64	; 0x40
 80075b0:	68f8      	ldr	r0, [r7, #12]
 80075b2:	f000 ffc1 	bl	8008538 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80075b6:	697b      	ldr	r3, [r7, #20]
 80075b8:	f003 0320 	and.w	r3, r3, #32
 80075bc:	2b00      	cmp	r3, #0
 80075be:	d008      	beq.n	80075d2 <I2C_Master_ISR_IT+0x258>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80075c0:	687b      	ldr	r3, [r7, #4]
 80075c2:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 80075c6:	2b00      	cmp	r3, #0
 80075c8:	d003      	beq.n	80075d2 <I2C_Master_ISR_IT+0x258>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 80075ca:	6979      	ldr	r1, [r7, #20]
 80075cc:	68f8      	ldr	r0, [r7, #12]
 80075ce:	f000 fd33 	bl	8008038 <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80075d2:	68fb      	ldr	r3, [r7, #12]
 80075d4:	2200      	movs	r2, #0
 80075d6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80075da:	2300      	movs	r3, #0
}
 80075dc:	4618      	mov	r0, r3
 80075de:	3718      	adds	r7, #24
 80075e0:	46bd      	mov	sp, r7
 80075e2:	bd80      	pop	{r7, pc}

080075e4 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 80075e4:	b580      	push	{r7, lr}
 80075e6:	b086      	sub	sp, #24
 80075e8:	af00      	add	r7, sp, #0
 80075ea:	60f8      	str	r0, [r7, #12]
 80075ec:	60b9      	str	r1, [r7, #8]
 80075ee:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 80075f0:	68fb      	ldr	r3, [r7, #12]
 80075f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80075f4:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 80075f6:	68bb      	ldr	r3, [r7, #8]
 80075f8:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 80075fa:	68fb      	ldr	r3, [r7, #12]
 80075fc:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007600:	2b01      	cmp	r3, #1
 8007602:	d101      	bne.n	8007608 <I2C_Slave_ISR_IT+0x24>
 8007604:	2302      	movs	r3, #2
 8007606:	e0e2      	b.n	80077ce <I2C_Slave_ISR_IT+0x1ea>
 8007608:	68fb      	ldr	r3, [r7, #12]
 800760a:	2201      	movs	r2, #1
 800760c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007610:	693b      	ldr	r3, [r7, #16]
 8007612:	f003 0320 	and.w	r3, r3, #32
 8007616:	2b00      	cmp	r3, #0
 8007618:	d009      	beq.n	800762e <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007620:	2b00      	cmp	r3, #0
 8007622:	d004      	beq.n	800762e <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8007624:	6939      	ldr	r1, [r7, #16]
 8007626:	68f8      	ldr	r0, [r7, #12]
 8007628:	f000 fdce 	bl	80081c8 <I2C_ITSlaveCplt>
 800762c:	e0ca      	b.n	80077c4 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800762e:	693b      	ldr	r3, [r7, #16]
 8007630:	f003 0310 	and.w	r3, r3, #16
 8007634:	2b00      	cmp	r3, #0
 8007636:	d04b      	beq.n	80076d0 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800763e:	2b00      	cmp	r3, #0
 8007640:	d046      	beq.n	80076d0 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007642:	68fb      	ldr	r3, [r7, #12]
 8007644:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007646:	b29b      	uxth	r3, r3
 8007648:	2b00      	cmp	r3, #0
 800764a:	d128      	bne.n	800769e <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800764c:	68fb      	ldr	r3, [r7, #12]
 800764e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007652:	b2db      	uxtb	r3, r3
 8007654:	2b28      	cmp	r3, #40	; 0x28
 8007656:	d108      	bne.n	800766a <I2C_Slave_ISR_IT+0x86>
 8007658:	697b      	ldr	r3, [r7, #20]
 800765a:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800765e:	d104      	bne.n	800766a <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007660:	6939      	ldr	r1, [r7, #16]
 8007662:	68f8      	ldr	r0, [r7, #12]
 8007664:	f000 ff14 	bl	8008490 <I2C_ITListenCplt>
 8007668:	e031      	b.n	80076ce <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800766a:	68fb      	ldr	r3, [r7, #12]
 800766c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007670:	b2db      	uxtb	r3, r3
 8007672:	2b29      	cmp	r3, #41	; 0x29
 8007674:	d10e      	bne.n	8007694 <I2C_Slave_ISR_IT+0xb0>
 8007676:	697b      	ldr	r3, [r7, #20]
 8007678:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800767c:	d00a      	beq.n	8007694 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800767e:	68fb      	ldr	r3, [r7, #12]
 8007680:	681b      	ldr	r3, [r3, #0]
 8007682:	2210      	movs	r2, #16
 8007684:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007686:	68f8      	ldr	r0, [r7, #12]
 8007688:	f001 f86d 	bl	8008766 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800768c:	68f8      	ldr	r0, [r7, #12]
 800768e:	f000 fc77 	bl	8007f80 <I2C_ITSlaveSeqCplt>
 8007692:	e01c      	b.n	80076ce <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007694:	68fb      	ldr	r3, [r7, #12]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	2210      	movs	r2, #16
 800769a:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800769c:	e08f      	b.n	80077be <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800769e:	68fb      	ldr	r3, [r7, #12]
 80076a0:	681b      	ldr	r3, [r3, #0]
 80076a2:	2210      	movs	r2, #16
 80076a4:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80076a6:	68fb      	ldr	r3, [r7, #12]
 80076a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076aa:	f043 0204 	orr.w	r2, r3, #4
 80076ae:	68fb      	ldr	r3, [r7, #12]
 80076b0:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80076b2:	697b      	ldr	r3, [r7, #20]
 80076b4:	2b00      	cmp	r3, #0
 80076b6:	d003      	beq.n	80076c0 <I2C_Slave_ISR_IT+0xdc>
 80076b8:	697b      	ldr	r3, [r7, #20]
 80076ba:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80076be:	d17e      	bne.n	80077be <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80076c0:	68fb      	ldr	r3, [r7, #12]
 80076c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80076c4:	4619      	mov	r1, r3
 80076c6:	68f8      	ldr	r0, [r7, #12]
 80076c8:	f000 ff36 	bl	8008538 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 80076cc:	e077      	b.n	80077be <I2C_Slave_ISR_IT+0x1da>
 80076ce:	e076      	b.n	80077be <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80076d0:	693b      	ldr	r3, [r7, #16]
 80076d2:	f003 0304 	and.w	r3, r3, #4
 80076d6:	2b00      	cmp	r3, #0
 80076d8:	d02f      	beq.n	800773a <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 80076e0:	2b00      	cmp	r3, #0
 80076e2:	d02a      	beq.n	800773a <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 80076e4:	68fb      	ldr	r3, [r7, #12]
 80076e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80076e8:	b29b      	uxth	r3, r3
 80076ea:	2b00      	cmp	r3, #0
 80076ec:	d018      	beq.n	8007720 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80076ee:	68fb      	ldr	r3, [r7, #12]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80076f4:	68fb      	ldr	r3, [r7, #12]
 80076f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80076f8:	b2d2      	uxtb	r2, r2
 80076fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80076fc:	68fb      	ldr	r3, [r7, #12]
 80076fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007700:	1c5a      	adds	r2, r3, #1
 8007702:	68fb      	ldr	r3, [r7, #12]
 8007704:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8007706:	68fb      	ldr	r3, [r7, #12]
 8007708:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800770a:	3b01      	subs	r3, #1
 800770c:	b29a      	uxth	r2, r3
 800770e:	68fb      	ldr	r3, [r7, #12]
 8007710:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007712:	68fb      	ldr	r3, [r7, #12]
 8007714:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007716:	b29b      	uxth	r3, r3
 8007718:	3b01      	subs	r3, #1
 800771a:	b29a      	uxth	r2, r3
 800771c:	68fb      	ldr	r3, [r7, #12]
 800771e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8007720:	68fb      	ldr	r3, [r7, #12]
 8007722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007724:	b29b      	uxth	r3, r3
 8007726:	2b00      	cmp	r3, #0
 8007728:	d14b      	bne.n	80077c2 <I2C_Slave_ISR_IT+0x1de>
 800772a:	697b      	ldr	r3, [r7, #20]
 800772c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007730:	d047      	beq.n	80077c2 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8007732:	68f8      	ldr	r0, [r7, #12]
 8007734:	f000 fc24 	bl	8007f80 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8007738:	e043      	b.n	80077c2 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800773a:	693b      	ldr	r3, [r7, #16]
 800773c:	f003 0308 	and.w	r3, r3, #8
 8007740:	2b00      	cmp	r3, #0
 8007742:	d009      	beq.n	8007758 <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800774a:	2b00      	cmp	r3, #0
 800774c:	d004      	beq.n	8007758 <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800774e:	6939      	ldr	r1, [r7, #16]
 8007750:	68f8      	ldr	r0, [r7, #12]
 8007752:	f000 fb54 	bl	8007dfe <I2C_ITAddrCplt>
 8007756:	e035      	b.n	80077c4 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	f003 0302 	and.w	r3, r3, #2
 800775e:	2b00      	cmp	r3, #0
 8007760:	d030      	beq.n	80077c4 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007768:	2b00      	cmp	r3, #0
 800776a:	d02b      	beq.n	80077c4 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800776c:	68fb      	ldr	r3, [r7, #12]
 800776e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007770:	b29b      	uxth	r3, r3
 8007772:	2b00      	cmp	r3, #0
 8007774:	d018      	beq.n	80077a8 <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8007776:	68fb      	ldr	r3, [r7, #12]
 8007778:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800777a:	781a      	ldrb	r2, [r3, #0]
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	681b      	ldr	r3, [r3, #0]
 8007780:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8007782:	68fb      	ldr	r3, [r7, #12]
 8007784:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007786:	1c5a      	adds	r2, r3, #1
 8007788:	68fb      	ldr	r3, [r7, #12]
 800778a:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 800778c:	68fb      	ldr	r3, [r7, #12]
 800778e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007790:	b29b      	uxth	r3, r3
 8007792:	3b01      	subs	r3, #1
 8007794:	b29a      	uxth	r2, r3
 8007796:	68fb      	ldr	r3, [r7, #12]
 8007798:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 800779a:	68fb      	ldr	r3, [r7, #12]
 800779c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800779e:	3b01      	subs	r3, #1
 80077a0:	b29a      	uxth	r2, r3
 80077a2:	68fb      	ldr	r3, [r7, #12]
 80077a4:	851a      	strh	r2, [r3, #40]	; 0x28
 80077a6:	e00d      	b.n	80077c4 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 80077a8:	697b      	ldr	r3, [r7, #20]
 80077aa:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80077ae:	d002      	beq.n	80077b6 <I2C_Slave_ISR_IT+0x1d2>
 80077b0:	697b      	ldr	r3, [r7, #20]
 80077b2:	2b00      	cmp	r3, #0
 80077b4:	d106      	bne.n	80077c4 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 80077b6:	68f8      	ldr	r0, [r7, #12]
 80077b8:	f000 fbe2 	bl	8007f80 <I2C_ITSlaveSeqCplt>
 80077bc:	e002      	b.n	80077c4 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 80077be:	bf00      	nop
 80077c0:	e000      	b.n	80077c4 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 80077c2:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80077c4:	68fb      	ldr	r3, [r7, #12]
 80077c6:	2200      	movs	r2, #0
 80077c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80077cc:	2300      	movs	r3, #0
}
 80077ce:	4618      	mov	r0, r3
 80077d0:	3718      	adds	r7, #24
 80077d2:	46bd      	mov	sp, r7
 80077d4:	bd80      	pop	{r7, pc}

080077d6 <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 80077d6:	b580      	push	{r7, lr}
 80077d8:	b088      	sub	sp, #32
 80077da:	af02      	add	r7, sp, #8
 80077dc:	60f8      	str	r0, [r7, #12]
 80077de:	60b9      	str	r1, [r7, #8]
 80077e0:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80077e2:	68fb      	ldr	r3, [r7, #12]
 80077e4:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80077e8:	2b01      	cmp	r3, #1
 80077ea:	d101      	bne.n	80077f0 <I2C_Master_ISR_DMA+0x1a>
 80077ec:	2302      	movs	r3, #2
 80077ee:	e0e7      	b.n	80079c0 <I2C_Master_ISR_DMA+0x1ea>
 80077f0:	68fb      	ldr	r3, [r7, #12]
 80077f2:	2201      	movs	r2, #1
 80077f4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80077f8:	68bb      	ldr	r3, [r7, #8]
 80077fa:	f003 0310 	and.w	r3, r3, #16
 80077fe:	2b00      	cmp	r3, #0
 8007800:	d016      	beq.n	8007830 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007802:	687b      	ldr	r3, [r7, #4]
 8007804:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007808:	2b00      	cmp	r3, #0
 800780a:	d011      	beq.n	8007830 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800780c:	68fb      	ldr	r3, [r7, #12]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	2210      	movs	r2, #16
 8007812:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007814:	68fb      	ldr	r3, [r7, #12]
 8007816:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007818:	f043 0204 	orr.w	r2, r3, #4
 800781c:	68fb      	ldr	r3, [r7, #12]
 800781e:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007820:	2120      	movs	r1, #32
 8007822:	68f8      	ldr	r0, [r7, #12]
 8007824:	f001 f8a6 	bl	8008974 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007828:	68f8      	ldr	r0, [r7, #12]
 800782a:	f000 ff9c 	bl	8008766 <I2C_Flush_TXDR>
 800782e:	e0c2      	b.n	80079b6 <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007830:	68bb      	ldr	r3, [r7, #8]
 8007832:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007836:	2b00      	cmp	r3, #0
 8007838:	d07f      	beq.n	800793a <I2C_Master_ISR_DMA+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800783a:	687b      	ldr	r3, [r7, #4]
 800783c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007840:	2b00      	cmp	r3, #0
 8007842:	d07a      	beq.n	800793a <I2C_Master_ISR_DMA+0x164>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8007844:	68fb      	ldr	r3, [r7, #12]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	681a      	ldr	r2, [r3, #0]
 800784a:	68fb      	ldr	r3, [r7, #12]
 800784c:	681b      	ldr	r3, [r3, #0]
 800784e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007852:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007858:	b29b      	uxth	r3, r3
 800785a:	2b00      	cmp	r3, #0
 800785c:	d05c      	beq.n	8007918 <I2C_Master_ISR_DMA+0x142>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800785e:	68fb      	ldr	r3, [r7, #12]
 8007860:	681b      	ldr	r3, [r3, #0]
 8007862:	685b      	ldr	r3, [r3, #4]
 8007864:	b29b      	uxth	r3, r3
 8007866:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800786a:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800786c:	68fb      	ldr	r3, [r7, #12]
 800786e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007870:	b29b      	uxth	r3, r3
 8007872:	2bff      	cmp	r3, #255	; 0xff
 8007874:	d914      	bls.n	80078a0 <I2C_Master_ISR_DMA+0xca>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8007876:	68fb      	ldr	r3, [r7, #12]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	699b      	ldr	r3, [r3, #24]
 800787c:	0c1b      	lsrs	r3, r3, #16
 800787e:	b2db      	uxtb	r3, r3
 8007880:	f003 0301 	and.w	r3, r3, #1
 8007884:	b2db      	uxtb	r3, r3
 8007886:	2b01      	cmp	r3, #1
 8007888:	d103      	bne.n	8007892 <I2C_Master_ISR_DMA+0xbc>
        {
          hi2c->XferSize = 1U;
 800788a:	68fb      	ldr	r3, [r7, #12]
 800788c:	2201      	movs	r2, #1
 800788e:	851a      	strh	r2, [r3, #40]	; 0x28
 8007890:	e002      	b.n	8007898 <I2C_Master_ISR_DMA+0xc2>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007892:	68fb      	ldr	r3, [r7, #12]
 8007894:	22ff      	movs	r2, #255	; 0xff
 8007896:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 8007898:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800789c:	617b      	str	r3, [r7, #20]
 800789e:	e010      	b.n	80078c2 <I2C_Master_ISR_DMA+0xec>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80078a0:	68fb      	ldr	r3, [r7, #12]
 80078a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078a4:	b29a      	uxth	r2, r3
 80078a6:	68fb      	ldr	r3, [r7, #12]
 80078a8:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 80078aa:	68fb      	ldr	r3, [r7, #12]
 80078ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078ae:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80078b2:	d003      	beq.n	80078bc <I2C_Master_ISR_DMA+0xe6>
        {
          xfermode = hi2c->XferOptions;
 80078b4:	68fb      	ldr	r3, [r7, #12]
 80078b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078b8:	617b      	str	r3, [r7, #20]
 80078ba:	e002      	b.n	80078c2 <I2C_Master_ISR_DMA+0xec>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80078bc:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80078c0:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80078c2:	68fb      	ldr	r3, [r7, #12]
 80078c4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078c6:	b2da      	uxtb	r2, r3
 80078c8:	8a79      	ldrh	r1, [r7, #18]
 80078ca:	2300      	movs	r3, #0
 80078cc:	9300      	str	r3, [sp, #0]
 80078ce:	697b      	ldr	r3, [r7, #20]
 80078d0:	68f8      	ldr	r0, [r7, #12]
 80078d2:	f001 f81d 	bl	8008910 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80078da:	b29a      	uxth	r2, r3
 80078dc:	68fb      	ldr	r3, [r7, #12]
 80078de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80078e0:	1ad3      	subs	r3, r2, r3
 80078e2:	b29a      	uxth	r2, r3
 80078e4:	68fb      	ldr	r3, [r7, #12]
 80078e6:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80078e8:	68fb      	ldr	r3, [r7, #12]
 80078ea:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078ee:	b2db      	uxtb	r3, r3
 80078f0:	2b22      	cmp	r3, #34	; 0x22
 80078f2:	d108      	bne.n	8007906 <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80078f4:	68fb      	ldr	r3, [r7, #12]
 80078f6:	681b      	ldr	r3, [r3, #0]
 80078f8:	681a      	ldr	r2, [r3, #0]
 80078fa:	68fb      	ldr	r3, [r7, #12]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007902:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007904:	e057      	b.n	80079b6 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007906:	68fb      	ldr	r3, [r7, #12]
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	681a      	ldr	r2, [r3, #0]
 800790c:	68fb      	ldr	r3, [r7, #12]
 800790e:	681b      	ldr	r3, [r3, #0]
 8007910:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007914:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007916:	e04e      	b.n	80079b6 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	685b      	ldr	r3, [r3, #4]
 800791e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007922:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007926:	d003      	beq.n	8007930 <I2C_Master_ISR_DMA+0x15a>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8007928:	68f8      	ldr	r0, [r7, #12]
 800792a:	f000 faec 	bl	8007f06 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800792e:	e042      	b.n	80079b6 <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007930:	2140      	movs	r1, #64	; 0x40
 8007932:	68f8      	ldr	r0, [r7, #12]
 8007934:	f000 fe00 	bl	8008538 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8007938:	e03d      	b.n	80079b6 <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800793a:	68bb      	ldr	r3, [r7, #8]
 800793c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007940:	2b00      	cmp	r3, #0
 8007942:	d028      	beq.n	8007996 <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007944:	687b      	ldr	r3, [r7, #4]
 8007946:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800794a:	2b00      	cmp	r3, #0
 800794c:	d023      	beq.n	8007996 <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007952:	b29b      	uxth	r3, r3
 8007954:	2b00      	cmp	r3, #0
 8007956:	d119      	bne.n	800798c <I2C_Master_ISR_DMA+0x1b6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8007958:	68fb      	ldr	r3, [r7, #12]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	685b      	ldr	r3, [r3, #4]
 800795e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007962:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007966:	d025      	beq.n	80079b4 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8007968:	68fb      	ldr	r3, [r7, #12]
 800796a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800796c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007970:	d108      	bne.n	8007984 <I2C_Master_ISR_DMA+0x1ae>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007972:	68fb      	ldr	r3, [r7, #12]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	685a      	ldr	r2, [r3, #4]
 8007978:	68fb      	ldr	r3, [r7, #12]
 800797a:	681b      	ldr	r3, [r3, #0]
 800797c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007980:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8007982:	e017      	b.n	80079b4 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8007984:	68f8      	ldr	r0, [r7, #12]
 8007986:	f000 fabe 	bl	8007f06 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800798a:	e013      	b.n	80079b4 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800798c:	2140      	movs	r1, #64	; 0x40
 800798e:	68f8      	ldr	r0, [r7, #12]
 8007990:	f000 fdd2 	bl	8008538 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007994:	e00e      	b.n	80079b4 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007996:	68bb      	ldr	r3, [r7, #8]
 8007998:	f003 0320 	and.w	r3, r3, #32
 800799c:	2b00      	cmp	r3, #0
 800799e:	d00a      	beq.n	80079b6 <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d005      	beq.n	80079b6 <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 80079aa:	68b9      	ldr	r1, [r7, #8]
 80079ac:	68f8      	ldr	r0, [r7, #12]
 80079ae:	f000 fb43 	bl	8008038 <I2C_ITMasterCplt>
 80079b2:	e000      	b.n	80079b6 <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 80079b4:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80079b6:	68fb      	ldr	r3, [r7, #12]
 80079b8:	2200      	movs	r2, #0
 80079ba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80079be:	2300      	movs	r3, #0
}
 80079c0:	4618      	mov	r0, r3
 80079c2:	3718      	adds	r7, #24
 80079c4:	46bd      	mov	sp, r7
 80079c6:	bd80      	pop	{r7, pc}

080079c8 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80079c8:	b580      	push	{r7, lr}
 80079ca:	b088      	sub	sp, #32
 80079cc:	af02      	add	r7, sp, #8
 80079ce:	60f8      	str	r0, [r7, #12]
 80079d0:	60b9      	str	r1, [r7, #8]
 80079d2:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80079d4:	4b90      	ldr	r3, [pc, #576]	; (8007c18 <I2C_Mem_ISR_DMA+0x250>)
 80079d6:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80079de:	2b01      	cmp	r3, #1
 80079e0:	d101      	bne.n	80079e6 <I2C_Mem_ISR_DMA+0x1e>
 80079e2:	2302      	movs	r3, #2
 80079e4:	e12f      	b.n	8007c46 <I2C_Mem_ISR_DMA+0x27e>
 80079e6:	68fb      	ldr	r3, [r7, #12]
 80079e8:	2201      	movs	r2, #1
 80079ea:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	f003 0310 	and.w	r3, r3, #16
 80079f4:	2b00      	cmp	r3, #0
 80079f6:	d016      	beq.n	8007a26 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80079f8:	687b      	ldr	r3, [r7, #4]
 80079fa:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80079fe:	2b00      	cmp	r3, #0
 8007a00:	d011      	beq.n	8007a26 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007a02:	68fb      	ldr	r3, [r7, #12]
 8007a04:	681b      	ldr	r3, [r3, #0]
 8007a06:	2210      	movs	r2, #16
 8007a08:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007a0e:	f043 0204 	orr.w	r2, r3, #4
 8007a12:	68fb      	ldr	r3, [r7, #12]
 8007a14:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007a16:	2120      	movs	r1, #32
 8007a18:	68f8      	ldr	r0, [r7, #12]
 8007a1a:	f000 ffab 	bl	8008974 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007a1e:	68f8      	ldr	r0, [r7, #12]
 8007a20:	f000 fea1 	bl	8008766 <I2C_Flush_TXDR>
 8007a24:	e10a      	b.n	8007c3c <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007a26:	68bb      	ldr	r3, [r7, #8]
 8007a28:	f003 0302 	and.w	r3, r3, #2
 8007a2c:	2b00      	cmp	r3, #0
 8007a2e:	d00e      	beq.n	8007a4e <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 8007a36:	2b00      	cmp	r3, #0
 8007a38:	d009      	beq.n	8007a4e <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 8007a3a:	68fb      	ldr	r3, [r7, #12]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	68fa      	ldr	r2, [r7, #12]
 8007a40:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007a42:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8007a44:	68fb      	ldr	r3, [r7, #12]
 8007a46:	f04f 32ff 	mov.w	r2, #4294967295
 8007a4a:	651a      	str	r2, [r3, #80]	; 0x50
 8007a4c:	e0f6      	b.n	8007c3c <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007a4e:	68bb      	ldr	r3, [r7, #8]
 8007a50:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	d06d      	beq.n	8007b34 <I2C_Mem_ISR_DMA+0x16c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007a58:	687b      	ldr	r3, [r7, #4]
 8007a5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007a5e:	2b00      	cmp	r3, #0
 8007a60:	d068      	beq.n	8007b34 <I2C_Mem_ISR_DMA+0x16c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007a62:	2101      	movs	r1, #1
 8007a64:	68f8      	ldr	r0, [r7, #12]
 8007a66:	f001 f809 	bl	8008a7c <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007a6a:	2110      	movs	r1, #16
 8007a6c:	68f8      	ldr	r0, [r7, #12]
 8007a6e:	f000 ff81 	bl	8008974 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8007a72:	68fb      	ldr	r3, [r7, #12]
 8007a74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a76:	b29b      	uxth	r3, r3
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	d056      	beq.n	8007b2a <I2C_Mem_ISR_DMA+0x162>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007a7c:	68fb      	ldr	r3, [r7, #12]
 8007a7e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007a80:	b29b      	uxth	r3, r3
 8007a82:	2bff      	cmp	r3, #255	; 0xff
 8007a84:	d91e      	bls.n	8007ac4 <I2C_Mem_ISR_DMA+0xfc>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8007a86:	68fb      	ldr	r3, [r7, #12]
 8007a88:	681b      	ldr	r3, [r3, #0]
 8007a8a:	699b      	ldr	r3, [r3, #24]
 8007a8c:	0c1b      	lsrs	r3, r3, #16
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	f003 0301 	and.w	r3, r3, #1
 8007a94:	b2db      	uxtb	r3, r3
 8007a96:	2b01      	cmp	r3, #1
 8007a98:	d103      	bne.n	8007aa2 <I2C_Mem_ISR_DMA+0xda>
        {
          hi2c->XferSize = 1U;
 8007a9a:	68fb      	ldr	r3, [r7, #12]
 8007a9c:	2201      	movs	r2, #1
 8007a9e:	851a      	strh	r2, [r3, #40]	; 0x28
 8007aa0:	e002      	b.n	8007aa8 <I2C_Mem_ISR_DMA+0xe0>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007aa2:	68fb      	ldr	r3, [r7, #12]
 8007aa4:	22ff      	movs	r2, #255	; 0xff
 8007aa6:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007aa8:	68fb      	ldr	r3, [r7, #12]
 8007aaa:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007aac:	b299      	uxth	r1, r3
 8007aae:	68fb      	ldr	r3, [r7, #12]
 8007ab0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ab2:	b2da      	uxtb	r2, r3
 8007ab4:	2300      	movs	r3, #0
 8007ab6:	9300      	str	r3, [sp, #0]
 8007ab8:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007abc:	68f8      	ldr	r0, [r7, #12]
 8007abe:	f000 ff27 	bl	8008910 <I2C_TransferConfig>
 8007ac2:	e011      	b.n	8007ae8 <I2C_Mem_ISR_DMA+0x120>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007ac8:	b29a      	uxth	r2, r3
 8007aca:	68fb      	ldr	r3, [r7, #12]
 8007acc:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007ace:	68fb      	ldr	r3, [r7, #12]
 8007ad0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007ad2:	b299      	uxth	r1, r3
 8007ad4:	68fb      	ldr	r3, [r7, #12]
 8007ad6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ad8:	b2da      	uxtb	r2, r3
 8007ada:	2300      	movs	r3, #0
 8007adc:	9300      	str	r3, [sp, #0]
 8007ade:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007ae2:	68f8      	ldr	r0, [r7, #12]
 8007ae4:	f000 ff14 	bl	8008910 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 8007ae8:	68fb      	ldr	r3, [r7, #12]
 8007aea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007aec:	b29a      	uxth	r2, r3
 8007aee:	68fb      	ldr	r3, [r7, #12]
 8007af0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007af2:	1ad3      	subs	r3, r2, r3
 8007af4:	b29a      	uxth	r2, r3
 8007af6:	68fb      	ldr	r3, [r7, #12]
 8007af8:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007afa:	68fb      	ldr	r3, [r7, #12]
 8007afc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b00:	b2db      	uxtb	r3, r3
 8007b02:	2b22      	cmp	r3, #34	; 0x22
 8007b04:	d108      	bne.n	8007b18 <I2C_Mem_ISR_DMA+0x150>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007b06:	68fb      	ldr	r3, [r7, #12]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681a      	ldr	r2, [r3, #0]
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007b14:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007b16:	e091      	b.n	8007c3c <I2C_Mem_ISR_DMA+0x274>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007b18:	68fb      	ldr	r3, [r7, #12]
 8007b1a:	681b      	ldr	r3, [r3, #0]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	68fb      	ldr	r3, [r7, #12]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b26:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 8007b28:	e088      	b.n	8007c3c <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007b2a:	2140      	movs	r1, #64	; 0x40
 8007b2c:	68f8      	ldr	r0, [r7, #12]
 8007b2e:	f000 fd03 	bl	8008538 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8007b32:	e083      	b.n	8007c3c <I2C_Mem_ISR_DMA+0x274>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007b34:	68bb      	ldr	r3, [r7, #8]
 8007b36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d070      	beq.n	8007c20 <I2C_Mem_ISR_DMA+0x258>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007b44:	2b00      	cmp	r3, #0
 8007b46:	d06b      	beq.n	8007c20 <I2C_Mem_ISR_DMA+0x258>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007b48:	2101      	movs	r1, #1
 8007b4a:	68f8      	ldr	r0, [r7, #12]
 8007b4c:	f000 ff96 	bl	8008a7c <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007b50:	2110      	movs	r1, #16
 8007b52:	68f8      	ldr	r0, [r7, #12]
 8007b54:	f000 ff0e 	bl	8008974 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007b58:	68fb      	ldr	r3, [r7, #12]
 8007b5a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b5e:	b2db      	uxtb	r3, r3
 8007b60:	2b22      	cmp	r3, #34	; 0x22
 8007b62:	d101      	bne.n	8007b68 <I2C_Mem_ISR_DMA+0x1a0>
    {
      direction = I2C_GENERATE_START_READ;
 8007b64:	4b2d      	ldr	r3, [pc, #180]	; (8007c1c <I2C_Mem_ISR_DMA+0x254>)
 8007b66:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b6c:	b29b      	uxth	r3, r3
 8007b6e:	2bff      	cmp	r3, #255	; 0xff
 8007b70:	d91e      	bls.n	8007bb0 <I2C_Mem_ISR_DMA+0x1e8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	699b      	ldr	r3, [r3, #24]
 8007b78:	0c1b      	lsrs	r3, r3, #16
 8007b7a:	b2db      	uxtb	r3, r3
 8007b7c:	f003 0301 	and.w	r3, r3, #1
 8007b80:	b2db      	uxtb	r3, r3
 8007b82:	2b01      	cmp	r3, #1
 8007b84:	d103      	bne.n	8007b8e <I2C_Mem_ISR_DMA+0x1c6>
      {
        hi2c->XferSize = 1U;
 8007b86:	68fb      	ldr	r3, [r7, #12]
 8007b88:	2201      	movs	r2, #1
 8007b8a:	851a      	strh	r2, [r3, #40]	; 0x28
 8007b8c:	e002      	b.n	8007b94 <I2C_Mem_ISR_DMA+0x1cc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	22ff      	movs	r2, #255	; 0xff
 8007b92:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007b98:	b299      	uxth	r1, r3
 8007b9a:	68fb      	ldr	r3, [r7, #12]
 8007b9c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007b9e:	b2da      	uxtb	r2, r3
 8007ba0:	697b      	ldr	r3, [r7, #20]
 8007ba2:	9300      	str	r3, [sp, #0]
 8007ba4:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007ba8:	68f8      	ldr	r0, [r7, #12]
 8007baa:	f000 feb1 	bl	8008910 <I2C_TransferConfig>
 8007bae:	e011      	b.n	8007bd4 <I2C_Mem_ISR_DMA+0x20c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bb4:	b29a      	uxth	r2, r3
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007bba:	68fb      	ldr	r3, [r7, #12]
 8007bbc:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007bbe:	b299      	uxth	r1, r3
 8007bc0:	68fb      	ldr	r3, [r7, #12]
 8007bc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bc4:	b2da      	uxtb	r2, r3
 8007bc6:	697b      	ldr	r3, [r7, #20]
 8007bc8:	9300      	str	r3, [sp, #0]
 8007bca:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8007bce:	68f8      	ldr	r0, [r7, #12]
 8007bd0:	f000 fe9e 	bl	8008910 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007bd8:	b29a      	uxth	r2, r3
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007bde:	1ad3      	subs	r3, r2, r3
 8007be0:	b29a      	uxth	r2, r3
 8007be2:	68fb      	ldr	r3, [r7, #12]
 8007be4:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007be6:	68fb      	ldr	r3, [r7, #12]
 8007be8:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bec:	b2db      	uxtb	r3, r3
 8007bee:	2b22      	cmp	r3, #34	; 0x22
 8007bf0:	d108      	bne.n	8007c04 <I2C_Mem_ISR_DMA+0x23c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 8007bf2:	68fb      	ldr	r3, [r7, #12]
 8007bf4:	681b      	ldr	r3, [r3, #0]
 8007bf6:	681a      	ldr	r2, [r3, #0]
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007c00:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007c02:	e01b      	b.n	8007c3c <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 8007c04:	68fb      	ldr	r3, [r7, #12]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	681a      	ldr	r2, [r3, #0]
 8007c0a:	68fb      	ldr	r3, [r7, #12]
 8007c0c:	681b      	ldr	r3, [r3, #0]
 8007c0e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007c12:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007c14:	e012      	b.n	8007c3c <I2C_Mem_ISR_DMA+0x274>
 8007c16:	bf00      	nop
 8007c18:	80002000 	.word	0x80002000
 8007c1c:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007c20:	68bb      	ldr	r3, [r7, #8]
 8007c22:	f003 0320 	and.w	r3, r3, #32
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d008      	beq.n	8007c3c <I2C_Mem_ISR_DMA+0x274>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007c30:	2b00      	cmp	r3, #0
 8007c32:	d003      	beq.n	8007c3c <I2C_Mem_ISR_DMA+0x274>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8007c34:	68b9      	ldr	r1, [r7, #8]
 8007c36:	68f8      	ldr	r0, [r7, #12]
 8007c38:	f000 f9fe 	bl	8008038 <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007c3c:	68fb      	ldr	r3, [r7, #12]
 8007c3e:	2200      	movs	r2, #0
 8007c40:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007c44:	2300      	movs	r3, #0
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	3718      	adds	r7, #24
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	bd80      	pop	{r7, pc}
 8007c4e:	bf00      	nop

08007c50 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8007c50:	b580      	push	{r7, lr}
 8007c52:	b088      	sub	sp, #32
 8007c54:	af00      	add	r7, sp, #0
 8007c56:	60f8      	str	r0, [r7, #12]
 8007c58:	60b9      	str	r1, [r7, #8]
 8007c5a:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007c5c:	68fb      	ldr	r3, [r7, #12]
 8007c5e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c60:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8007c62:	2300      	movs	r3, #0
 8007c64:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 8007c66:	68fb      	ldr	r3, [r7, #12]
 8007c68:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007c6c:	2b01      	cmp	r3, #1
 8007c6e:	d101      	bne.n	8007c74 <I2C_Slave_ISR_DMA+0x24>
 8007c70:	2302      	movs	r3, #2
 8007c72:	e0c0      	b.n	8007df6 <I2C_Slave_ISR_DMA+0x1a6>
 8007c74:	68fb      	ldr	r3, [r7, #12]
 8007c76:	2201      	movs	r2, #1
 8007c78:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007c7c:	68bb      	ldr	r3, [r7, #8]
 8007c7e:	f003 0320 	and.w	r3, r3, #32
 8007c82:	2b00      	cmp	r3, #0
 8007c84:	d009      	beq.n	8007c9a <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007c86:	687b      	ldr	r3, [r7, #4]
 8007c88:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007c8c:	2b00      	cmp	r3, #0
 8007c8e:	d004      	beq.n	8007c9a <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8007c90:	68b9      	ldr	r1, [r7, #8]
 8007c92:	68f8      	ldr	r0, [r7, #12]
 8007c94:	f000 fa98 	bl	80081c8 <I2C_ITSlaveCplt>
 8007c98:	e0a8      	b.n	8007dec <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007c9a:	68bb      	ldr	r3, [r7, #8]
 8007c9c:	f003 0310 	and.w	r3, r3, #16
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	f000 8095 	beq.w	8007dd0 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007cac:	2b00      	cmp	r3, #0
 8007cae:	f000 808f 	beq.w	8007dd0 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cb8:	2b00      	cmp	r3, #0
 8007cba:	d104      	bne.n	8007cc6 <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 8007cbc:	687b      	ldr	r3, [r7, #4]
 8007cbe:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007cc2:	2b00      	cmp	r3, #0
 8007cc4:	d07d      	beq.n	8007dc2 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 8007cc6:	68fb      	ldr	r3, [r7, #12]
 8007cc8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d00c      	beq.n	8007ce8 <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007cd4:	2b00      	cmp	r3, #0
 8007cd6:	d007      	beq.n	8007ce8 <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8007cd8:	68fb      	ldr	r3, [r7, #12]
 8007cda:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007cdc:	681b      	ldr	r3, [r3, #0]
 8007cde:	685b      	ldr	r3, [r3, #4]
 8007ce0:	2b00      	cmp	r3, #0
 8007ce2:	d101      	bne.n	8007ce8 <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 8007ce4:	2301      	movs	r3, #1
 8007ce6:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 8007ce8:	68fb      	ldr	r3, [r7, #12]
 8007cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cec:	2b00      	cmp	r3, #0
 8007cee:	d00c      	beq.n	8007d0a <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d007      	beq.n	8007d0a <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	685b      	ldr	r3, [r3, #4]
 8007d02:	2b00      	cmp	r3, #0
 8007d04:	d101      	bne.n	8007d0a <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 8007d06:	2301      	movs	r3, #1
 8007d08:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 8007d0a:	69fb      	ldr	r3, [r7, #28]
 8007d0c:	2b01      	cmp	r3, #1
 8007d0e:	d128      	bne.n	8007d62 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007d10:	68fb      	ldr	r3, [r7, #12]
 8007d12:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d16:	b2db      	uxtb	r3, r3
 8007d18:	2b28      	cmp	r3, #40	; 0x28
 8007d1a:	d108      	bne.n	8007d2e <I2C_Slave_ISR_DMA+0xde>
 8007d1c:	69bb      	ldr	r3, [r7, #24]
 8007d1e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007d22:	d104      	bne.n	8007d2e <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8007d24:	68b9      	ldr	r1, [r7, #8]
 8007d26:	68f8      	ldr	r0, [r7, #12]
 8007d28:	f000 fbb2 	bl	8008490 <I2C_ITListenCplt>
 8007d2c:	e048      	b.n	8007dc0 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007d2e:	68fb      	ldr	r3, [r7, #12]
 8007d30:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d34:	b2db      	uxtb	r3, r3
 8007d36:	2b29      	cmp	r3, #41	; 0x29
 8007d38:	d10e      	bne.n	8007d58 <I2C_Slave_ISR_DMA+0x108>
 8007d3a:	69bb      	ldr	r3, [r7, #24]
 8007d3c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007d40:	d00a      	beq.n	8007d58 <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d42:	68fb      	ldr	r3, [r7, #12]
 8007d44:	681b      	ldr	r3, [r3, #0]
 8007d46:	2210      	movs	r2, #16
 8007d48:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 8007d4a:	68f8      	ldr	r0, [r7, #12]
 8007d4c:	f000 fd0b 	bl	8008766 <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8007d50:	68f8      	ldr	r0, [r7, #12]
 8007d52:	f000 f915 	bl	8007f80 <I2C_ITSlaveSeqCplt>
 8007d56:	e033      	b.n	8007dc0 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d58:	68fb      	ldr	r3, [r7, #12]
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	2210      	movs	r2, #16
 8007d5e:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8007d60:	e034      	b.n	8007dcc <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007d62:	68fb      	ldr	r3, [r7, #12]
 8007d64:	681b      	ldr	r3, [r3, #0]
 8007d66:	2210      	movs	r2, #16
 8007d68:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007d6a:	68fb      	ldr	r3, [r7, #12]
 8007d6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007d6e:	f043 0204 	orr.w	r2, r3, #4
 8007d72:	68fb      	ldr	r3, [r7, #12]
 8007d74:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 8007d76:	68fb      	ldr	r3, [r7, #12]
 8007d78:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d7c:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007d7e:	69bb      	ldr	r3, [r7, #24]
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	d003      	beq.n	8007d8c <I2C_Slave_ISR_DMA+0x13c>
 8007d84:	69bb      	ldr	r3, [r7, #24]
 8007d86:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007d8a:	d11f      	bne.n	8007dcc <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007d8c:	7dfb      	ldrb	r3, [r7, #23]
 8007d8e:	2b21      	cmp	r3, #33	; 0x21
 8007d90:	d002      	beq.n	8007d98 <I2C_Slave_ISR_DMA+0x148>
 8007d92:	7dfb      	ldrb	r3, [r7, #23]
 8007d94:	2b29      	cmp	r3, #41	; 0x29
 8007d96:	d103      	bne.n	8007da0 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	2221      	movs	r2, #33	; 0x21
 8007d9c:	631a      	str	r2, [r3, #48]	; 0x30
 8007d9e:	e008      	b.n	8007db2 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007da0:	7dfb      	ldrb	r3, [r7, #23]
 8007da2:	2b22      	cmp	r3, #34	; 0x22
 8007da4:	d002      	beq.n	8007dac <I2C_Slave_ISR_DMA+0x15c>
 8007da6:	7dfb      	ldrb	r3, [r7, #23]
 8007da8:	2b2a      	cmp	r3, #42	; 0x2a
 8007daa:	d102      	bne.n	8007db2 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007dac:	68fb      	ldr	r3, [r7, #12]
 8007dae:	2222      	movs	r2, #34	; 0x22
 8007db0:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8007db2:	68fb      	ldr	r3, [r7, #12]
 8007db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007db6:	4619      	mov	r1, r3
 8007db8:	68f8      	ldr	r0, [r7, #12]
 8007dba:	f000 fbbd 	bl	8008538 <I2C_ITError>
      if (treatdmanack == 1U)
 8007dbe:	e005      	b.n	8007dcc <I2C_Slave_ISR_DMA+0x17c>
 8007dc0:	e004      	b.n	8007dcc <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007dc2:	68fb      	ldr	r3, [r7, #12]
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	2210      	movs	r2, #16
 8007dc8:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007dca:	e00f      	b.n	8007dec <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 8007dcc:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007dce:	e00d      	b.n	8007dec <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007dd0:	68bb      	ldr	r3, [r7, #8]
 8007dd2:	f003 0308 	and.w	r3, r3, #8
 8007dd6:	2b00      	cmp	r3, #0
 8007dd8:	d008      	beq.n	8007dec <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 8007de0:	2b00      	cmp	r3, #0
 8007de2:	d003      	beq.n	8007dec <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 8007de4:	68b9      	ldr	r1, [r7, #8]
 8007de6:	68f8      	ldr	r0, [r7, #12]
 8007de8:	f000 f809 	bl	8007dfe <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007dec:	68fb      	ldr	r3, [r7, #12]
 8007dee:	2200      	movs	r2, #0
 8007df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007df4:	2300      	movs	r3, #0
}
 8007df6:	4618      	mov	r0, r3
 8007df8:	3720      	adds	r7, #32
 8007dfa:	46bd      	mov	sp, r7
 8007dfc:	bd80      	pop	{r7, pc}

08007dfe <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007dfe:	b580      	push	{r7, lr}
 8007e00:	b084      	sub	sp, #16
 8007e02:	af00      	add	r7, sp, #0
 8007e04:	6078      	str	r0, [r7, #4]
 8007e06:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007e0e:	b2db      	uxtb	r3, r3
 8007e10:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8007e14:	2b28      	cmp	r3, #40	; 0x28
 8007e16:	d16a      	bne.n	8007eee <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 8007e18:	687b      	ldr	r3, [r7, #4]
 8007e1a:	681b      	ldr	r3, [r3, #0]
 8007e1c:	699b      	ldr	r3, [r3, #24]
 8007e1e:	0c1b      	lsrs	r3, r3, #16
 8007e20:	b2db      	uxtb	r3, r3
 8007e22:	f003 0301 	and.w	r3, r3, #1
 8007e26:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	681b      	ldr	r3, [r3, #0]
 8007e2c:	699b      	ldr	r3, [r3, #24]
 8007e2e:	0c1b      	lsrs	r3, r3, #16
 8007e30:	b29b      	uxth	r3, r3
 8007e32:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007e36:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 8007e38:	687b      	ldr	r3, [r7, #4]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	689b      	ldr	r3, [r3, #8]
 8007e3e:	b29b      	uxth	r3, r3
 8007e40:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007e44:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 8007e46:	687b      	ldr	r3, [r7, #4]
 8007e48:	681b      	ldr	r3, [r3, #0]
 8007e4a:	68db      	ldr	r3, [r3, #12]
 8007e4c:	b29b      	uxth	r3, r3
 8007e4e:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007e52:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	68db      	ldr	r3, [r3, #12]
 8007e58:	2b02      	cmp	r3, #2
 8007e5a:	d138      	bne.n	8007ece <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8007e5c:	897b      	ldrh	r3, [r7, #10]
 8007e5e:	09db      	lsrs	r3, r3, #7
 8007e60:	b29a      	uxth	r2, r3
 8007e62:	89bb      	ldrh	r3, [r7, #12]
 8007e64:	4053      	eors	r3, r2
 8007e66:	b29b      	uxth	r3, r3
 8007e68:	f003 0306 	and.w	r3, r3, #6
 8007e6c:	2b00      	cmp	r3, #0
 8007e6e:	d11c      	bne.n	8007eaa <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8007e70:	897b      	ldrh	r3, [r7, #10]
 8007e72:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8007e74:	687b      	ldr	r3, [r7, #4]
 8007e76:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e78:	1c5a      	adds	r2, r3, #1
 8007e7a:	687b      	ldr	r3, [r7, #4]
 8007e7c:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007e82:	2b02      	cmp	r3, #2
 8007e84:	d13b      	bne.n	8007efe <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	2200      	movs	r2, #0
 8007e8a:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	681b      	ldr	r3, [r3, #0]
 8007e90:	2208      	movs	r2, #8
 8007e92:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2200      	movs	r2, #0
 8007e98:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007e9c:	89ba      	ldrh	r2, [r7, #12]
 8007e9e:	7bfb      	ldrb	r3, [r7, #15]
 8007ea0:	4619      	mov	r1, r3
 8007ea2:	6878      	ldr	r0, [r7, #4]
 8007ea4:	f7ff fa3d 	bl	8007322 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8007ea8:	e029      	b.n	8007efe <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 8007eaa:	893b      	ldrh	r3, [r7, #8]
 8007eac:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007eae:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007eb2:	6878      	ldr	r0, [r7, #4]
 8007eb4:	f000 fde2 	bl	8008a7c <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 8007eb8:	687b      	ldr	r3, [r7, #4]
 8007eba:	2200      	movs	r2, #0
 8007ebc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007ec0:	89ba      	ldrh	r2, [r7, #12]
 8007ec2:	7bfb      	ldrb	r3, [r7, #15]
 8007ec4:	4619      	mov	r1, r3
 8007ec6:	6878      	ldr	r0, [r7, #4]
 8007ec8:	f7ff fa2b 	bl	8007322 <HAL_I2C_AddrCallback>
}
 8007ecc:	e017      	b.n	8007efe <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007ece:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007ed2:	6878      	ldr	r0, [r7, #4]
 8007ed4:	f000 fdd2 	bl	8008a7c <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 8007ed8:	687b      	ldr	r3, [r7, #4]
 8007eda:	2200      	movs	r2, #0
 8007edc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007ee0:	89ba      	ldrh	r2, [r7, #12]
 8007ee2:	7bfb      	ldrb	r3, [r7, #15]
 8007ee4:	4619      	mov	r1, r3
 8007ee6:	6878      	ldr	r0, [r7, #4]
 8007ee8:	f7ff fa1b 	bl	8007322 <HAL_I2C_AddrCallback>
}
 8007eec:	e007      	b.n	8007efe <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007eee:	687b      	ldr	r3, [r7, #4]
 8007ef0:	681b      	ldr	r3, [r3, #0]
 8007ef2:	2208      	movs	r2, #8
 8007ef4:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 8007ef6:	687b      	ldr	r3, [r7, #4]
 8007ef8:	2200      	movs	r2, #0
 8007efa:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 8007efe:	bf00      	nop
 8007f00:	3710      	adds	r7, #16
 8007f02:	46bd      	mov	sp, r7
 8007f04:	bd80      	pop	{r7, pc}

08007f06 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007f06:	b580      	push	{r7, lr}
 8007f08:	b082      	sub	sp, #8
 8007f0a:	af00      	add	r7, sp, #0
 8007f0c:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2200      	movs	r2, #0
 8007f12:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	2b21      	cmp	r3, #33	; 0x21
 8007f20:	d115      	bne.n	8007f4e <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	2220      	movs	r2, #32
 8007f26:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	2211      	movs	r2, #17
 8007f2e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	2200      	movs	r2, #0
 8007f34:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007f36:	2101      	movs	r1, #1
 8007f38:	6878      	ldr	r0, [r7, #4]
 8007f3a:	f000 fd9f 	bl	8008a7c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	2200      	movs	r2, #0
 8007f42:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 8007f46:	6878      	ldr	r0, [r7, #4]
 8007f48:	f7ff f9cd 	bl	80072e6 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007f4c:	e014      	b.n	8007f78 <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8007f4e:	687b      	ldr	r3, [r7, #4]
 8007f50:	2220      	movs	r2, #32
 8007f52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	2212      	movs	r2, #18
 8007f5a:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	2200      	movs	r2, #0
 8007f60:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007f62:	2102      	movs	r1, #2
 8007f64:	6878      	ldr	r0, [r7, #4]
 8007f66:	f000 fd89 	bl	8008a7c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	2200      	movs	r2, #0
 8007f6e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8007f72:	6878      	ldr	r0, [r7, #4]
 8007f74:	f014 fed4 	bl	801cd20 <HAL_I2C_MasterRxCpltCallback>
}
 8007f78:	bf00      	nop
 8007f7a:	3708      	adds	r7, #8
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	bd80      	pop	{r7, pc}

08007f80 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007f80:	b580      	push	{r7, lr}
 8007f82:	b084      	sub	sp, #16
 8007f84:	af00      	add	r7, sp, #0
 8007f86:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	681b      	ldr	r3, [r3, #0]
 8007f8c:	681b      	ldr	r3, [r3, #0]
 8007f8e:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007f90:	687b      	ldr	r3, [r7, #4]
 8007f92:	2200      	movs	r2, #0
 8007f94:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007f98:	68fb      	ldr	r3, [r7, #12]
 8007f9a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007f9e:	2b00      	cmp	r3, #0
 8007fa0:	d008      	beq.n	8007fb4 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007fa2:	687b      	ldr	r3, [r7, #4]
 8007fa4:	681b      	ldr	r3, [r3, #0]
 8007fa6:	681a      	ldr	r2, [r3, #0]
 8007fa8:	687b      	ldr	r3, [r7, #4]
 8007faa:	681b      	ldr	r3, [r3, #0]
 8007fac:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007fb0:	601a      	str	r2, [r3, #0]
 8007fb2:	e00c      	b.n	8007fce <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007fba:	2b00      	cmp	r3, #0
 8007fbc:	d007      	beq.n	8007fce <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007fbe:	687b      	ldr	r3, [r7, #4]
 8007fc0:	681b      	ldr	r3, [r3, #0]
 8007fc2:	681a      	ldr	r2, [r3, #0]
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	681b      	ldr	r3, [r3, #0]
 8007fc8:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007fcc:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007fd4:	b2db      	uxtb	r3, r3
 8007fd6:	2b29      	cmp	r3, #41	; 0x29
 8007fd8:	d112      	bne.n	8008000 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007fda:	687b      	ldr	r3, [r7, #4]
 8007fdc:	2228      	movs	r2, #40	; 0x28
 8007fde:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8007fe2:	687b      	ldr	r3, [r7, #4]
 8007fe4:	2221      	movs	r2, #33	; 0x21
 8007fe6:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007fe8:	2101      	movs	r1, #1
 8007fea:	6878      	ldr	r0, [r7, #4]
 8007fec:	f000 fd46 	bl	8008a7c <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007ff0:	687b      	ldr	r3, [r7, #4]
 8007ff2:	2200      	movs	r2, #0
 8007ff4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007ff8:	6878      	ldr	r0, [r7, #4]
 8007ffa:	f7ff f97e 	bl	80072fa <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 8007ffe:	e017      	b.n	8008030 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008006:	b2db      	uxtb	r3, r3
 8008008:	2b2a      	cmp	r3, #42	; 0x2a
 800800a:	d111      	bne.n	8008030 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800800c:	687b      	ldr	r3, [r7, #4]
 800800e:	2228      	movs	r2, #40	; 0x28
 8008010:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008014:	687b      	ldr	r3, [r7, #4]
 8008016:	2222      	movs	r2, #34	; 0x22
 8008018:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800801a:	2102      	movs	r1, #2
 800801c:	6878      	ldr	r0, [r7, #4]
 800801e:	f000 fd2d 	bl	8008a7c <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8008022:	687b      	ldr	r3, [r7, #4]
 8008024:	2200      	movs	r2, #0
 8008026:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800802a:	6878      	ldr	r0, [r7, #4]
 800802c:	f7ff f96f 	bl	800730e <HAL_I2C_SlaveRxCpltCallback>
}
 8008030:	bf00      	nop
 8008032:	3710      	adds	r7, #16
 8008034:	46bd      	mov	sp, r7
 8008036:	bd80      	pop	{r7, pc}

08008038 <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008038:	b580      	push	{r7, lr}
 800803a:	b086      	sub	sp, #24
 800803c:	af00      	add	r7, sp, #0
 800803e:	6078      	str	r0, [r7, #4]
 8008040:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8008042:	683b      	ldr	r3, [r7, #0]
 8008044:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8008046:	687b      	ldr	r3, [r7, #4]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	2220      	movs	r2, #32
 800804c:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008054:	b2db      	uxtb	r3, r3
 8008056:	2b21      	cmp	r3, #33	; 0x21
 8008058:	d107      	bne.n	800806a <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800805a:	2101      	movs	r1, #1
 800805c:	6878      	ldr	r0, [r7, #4]
 800805e:	f000 fd0d 	bl	8008a7c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8008062:	687b      	ldr	r3, [r7, #4]
 8008064:	2211      	movs	r2, #17
 8008066:	631a      	str	r2, [r3, #48]	; 0x30
 8008068:	e00c      	b.n	8008084 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008070:	b2db      	uxtb	r3, r3
 8008072:	2b22      	cmp	r3, #34	; 0x22
 8008074:	d106      	bne.n	8008084 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8008076:	2102      	movs	r1, #2
 8008078:	6878      	ldr	r0, [r7, #4]
 800807a:	f000 fcff 	bl	8008a7c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800807e:	687b      	ldr	r3, [r7, #4]
 8008080:	2212      	movs	r2, #18
 8008082:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	681b      	ldr	r3, [r3, #0]
 8008088:	6859      	ldr	r1, [r3, #4]
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	4b4c      	ldr	r3, [pc, #304]	; (80081c0 <I2C_ITMasterCplt+0x188>)
 8008090:	400b      	ands	r3, r1
 8008092:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8008094:	687b      	ldr	r3, [r7, #4]
 8008096:	2200      	movs	r2, #0
 8008098:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	4a49      	ldr	r2, [pc, #292]	; (80081c4 <I2C_ITMasterCplt+0x18c>)
 800809e:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 80080a0:	697b      	ldr	r3, [r7, #20]
 80080a2:	f003 0310 	and.w	r3, r3, #16
 80080a6:	2b00      	cmp	r3, #0
 80080a8:	d009      	beq.n	80080be <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	681b      	ldr	r3, [r3, #0]
 80080ae:	2210      	movs	r2, #16
 80080b0:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080b6:	f043 0204 	orr.w	r2, r3, #4
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80080c4:	b2db      	uxtb	r3, r3
 80080c6:	2b60      	cmp	r3, #96	; 0x60
 80080c8:	d10a      	bne.n	80080e0 <I2C_ITMasterCplt+0xa8>
 80080ca:	697b      	ldr	r3, [r7, #20]
 80080cc:	f003 0304 	and.w	r3, r3, #4
 80080d0:	2b00      	cmp	r3, #0
 80080d2:	d005      	beq.n	80080e0 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	681b      	ldr	r3, [r3, #0]
 80080d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80080da:	b2db      	uxtb	r3, r3
 80080dc:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80080de:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80080e0:	6878      	ldr	r0, [r7, #4]
 80080e2:	f000 fb40 	bl	8008766 <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80080ea:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80080f2:	b2db      	uxtb	r3, r3
 80080f4:	2b60      	cmp	r3, #96	; 0x60
 80080f6:	d002      	beq.n	80080fe <I2C_ITMasterCplt+0xc6>
 80080f8:	693b      	ldr	r3, [r7, #16]
 80080fa:	2b00      	cmp	r3, #0
 80080fc:	d006      	beq.n	800810c <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008102:	4619      	mov	r1, r3
 8008104:	6878      	ldr	r0, [r7, #4]
 8008106:	f000 fa17 	bl	8008538 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800810a:	e054      	b.n	80081b6 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008112:	b2db      	uxtb	r3, r3
 8008114:	2b21      	cmp	r3, #33	; 0x21
 8008116:	d124      	bne.n	8008162 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	2220      	movs	r2, #32
 800811c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	2200      	movs	r2, #0
 8008124:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8008126:	687b      	ldr	r3, [r7, #4]
 8008128:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800812c:	b2db      	uxtb	r3, r3
 800812e:	2b40      	cmp	r3, #64	; 0x40
 8008130:	d10b      	bne.n	800814a <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008132:	687b      	ldr	r3, [r7, #4]
 8008134:	2200      	movs	r2, #0
 8008136:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	2200      	movs	r2, #0
 800813e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8008142:	6878      	ldr	r0, [r7, #4]
 8008144:	f7ff f905 	bl	8007352 <HAL_I2C_MemTxCpltCallback>
}
 8008148:	e035      	b.n	80081b6 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800814a:	687b      	ldr	r3, [r7, #4]
 800814c:	2200      	movs	r2, #0
 800814e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008152:	687b      	ldr	r3, [r7, #4]
 8008154:	2200      	movs	r2, #0
 8008156:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800815a:	6878      	ldr	r0, [r7, #4]
 800815c:	f7ff f8c3 	bl	80072e6 <HAL_I2C_MasterTxCpltCallback>
}
 8008160:	e029      	b.n	80081b6 <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008168:	b2db      	uxtb	r3, r3
 800816a:	2b22      	cmp	r3, #34	; 0x22
 800816c:	d123      	bne.n	80081b6 <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	2220      	movs	r2, #32
 8008172:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008176:	687b      	ldr	r3, [r7, #4]
 8008178:	2200      	movs	r2, #0
 800817a:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8008182:	b2db      	uxtb	r3, r3
 8008184:	2b40      	cmp	r3, #64	; 0x40
 8008186:	d10b      	bne.n	80081a0 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	2200      	movs	r2, #0
 800818c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	2200      	movs	r2, #0
 8008194:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 8008198:	6878      	ldr	r0, [r7, #4]
 800819a:	f7ff f8e4 	bl	8007366 <HAL_I2C_MemRxCpltCallback>
}
 800819e:	e00a      	b.n	80081b6 <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 80081a8:	687b      	ldr	r3, [r7, #4]
 80081aa:	2200      	movs	r2, #0
 80081ac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 80081b0:	6878      	ldr	r0, [r7, #4]
 80081b2:	f014 fdb5 	bl	801cd20 <HAL_I2C_MasterRxCpltCallback>
}
 80081b6:	bf00      	nop
 80081b8:	3718      	adds	r7, #24
 80081ba:	46bd      	mov	sp, r7
 80081bc:	bd80      	pop	{r7, pc}
 80081be:	bf00      	nop
 80081c0:	fe00e800 	.word	0xfe00e800
 80081c4:	ffff0000 	.word	0xffff0000

080081c8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80081c8:	b580      	push	{r7, lr}
 80081ca:	b086      	sub	sp, #24
 80081cc:	af00      	add	r7, sp, #0
 80081ce:	6078      	str	r0, [r7, #4]
 80081d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	681b      	ldr	r3, [r3, #0]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80081e2:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80081ea:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	681b      	ldr	r3, [r3, #0]
 80081f0:	2220      	movs	r2, #32
 80081f2:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80081f4:	7afb      	ldrb	r3, [r7, #11]
 80081f6:	2b21      	cmp	r3, #33	; 0x21
 80081f8:	d002      	beq.n	8008200 <I2C_ITSlaveCplt+0x38>
 80081fa:	7afb      	ldrb	r3, [r7, #11]
 80081fc:	2b29      	cmp	r3, #41	; 0x29
 80081fe:	d108      	bne.n	8008212 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 8008200:	f248 0101 	movw	r1, #32769	; 0x8001
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 fc39 	bl	8008a7c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	2221      	movs	r2, #33	; 0x21
 800820e:	631a      	str	r2, [r3, #48]	; 0x30
 8008210:	e019      	b.n	8008246 <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8008212:	7afb      	ldrb	r3, [r7, #11]
 8008214:	2b22      	cmp	r3, #34	; 0x22
 8008216:	d002      	beq.n	800821e <I2C_ITSlaveCplt+0x56>
 8008218:	7afb      	ldrb	r3, [r7, #11]
 800821a:	2b2a      	cmp	r3, #42	; 0x2a
 800821c:	d108      	bne.n	8008230 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800821e:	f248 0102 	movw	r1, #32770	; 0x8002
 8008222:	6878      	ldr	r0, [r7, #4]
 8008224:	f000 fc2a 	bl	8008a7c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	2222      	movs	r2, #34	; 0x22
 800822c:	631a      	str	r2, [r3, #48]	; 0x30
 800822e:	e00a      	b.n	8008246 <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8008230:	7afb      	ldrb	r3, [r7, #11]
 8008232:	2b28      	cmp	r3, #40	; 0x28
 8008234:	d107      	bne.n	8008246 <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8008236:	f248 0103 	movw	r1, #32771	; 0x8003
 800823a:	6878      	ldr	r0, [r7, #4]
 800823c:	f000 fc1e 	bl	8008a7c <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2200      	movs	r2, #0
 8008244:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008246:	687b      	ldr	r3, [r7, #4]
 8008248:	681b      	ldr	r3, [r3, #0]
 800824a:	685a      	ldr	r2, [r3, #4]
 800824c:	687b      	ldr	r3, [r7, #4]
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8008254:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	6859      	ldr	r1, [r3, #4]
 800825c:	687b      	ldr	r3, [r7, #4]
 800825e:	681a      	ldr	r2, [r3, #0]
 8008260:	4b89      	ldr	r3, [pc, #548]	; (8008488 <I2C_ITSlaveCplt+0x2c0>)
 8008262:	400b      	ands	r3, r1
 8008264:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8008266:	6878      	ldr	r0, [r7, #4]
 8008268:	f000 fa7d 	bl	8008766 <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800826c:	693b      	ldr	r3, [r7, #16]
 800826e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8008272:	2b00      	cmp	r3, #0
 8008274:	d013      	beq.n	800829e <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008276:	687b      	ldr	r3, [r7, #4]
 8008278:	681b      	ldr	r3, [r3, #0]
 800827a:	681a      	ldr	r2, [r3, #0]
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	681b      	ldr	r3, [r3, #0]
 8008280:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8008284:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8008286:	687b      	ldr	r3, [r7, #4]
 8008288:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800828a:	2b00      	cmp	r3, #0
 800828c:	d01f      	beq.n	80082ce <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800828e:	687b      	ldr	r3, [r7, #4]
 8008290:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	685b      	ldr	r3, [r3, #4]
 8008296:	b29a      	uxth	r2, r3
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	855a      	strh	r2, [r3, #42]	; 0x2a
 800829c:	e017      	b.n	80082ce <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800829e:	693b      	ldr	r3, [r7, #16]
 80082a0:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80082a4:	2b00      	cmp	r3, #0
 80082a6:	d012      	beq.n	80082ce <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	681a      	ldr	r2, [r3, #0]
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	681b      	ldr	r3, [r3, #0]
 80082b2:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80082b6:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d006      	beq.n	80082ce <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	685b      	ldr	r3, [r3, #4]
 80082c8:	b29a      	uxth	r2, r3
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 80082ce:	697b      	ldr	r3, [r7, #20]
 80082d0:	f003 0304 	and.w	r3, r3, #4
 80082d4:	2b00      	cmp	r3, #0
 80082d6:	d020      	beq.n	800831a <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 80082d8:	697b      	ldr	r3, [r7, #20]
 80082da:	f023 0304 	bic.w	r3, r3, #4
 80082de:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80082e0:	687b      	ldr	r3, [r7, #4]
 80082e2:	681b      	ldr	r3, [r3, #0]
 80082e4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80082e6:	687b      	ldr	r3, [r7, #4]
 80082e8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082ea:	b2d2      	uxtb	r2, r2
 80082ec:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80082ee:	687b      	ldr	r3, [r7, #4]
 80082f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80082f2:	1c5a      	adds	r2, r3, #1
 80082f4:	687b      	ldr	r3, [r7, #4]
 80082f6:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80082f8:	687b      	ldr	r3, [r7, #4]
 80082fa:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80082fc:	2b00      	cmp	r3, #0
 80082fe:	d00c      	beq.n	800831a <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8008304:	3b01      	subs	r3, #1
 8008306:	b29a      	uxth	r2, r3
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008310:	b29b      	uxth	r3, r3
 8008312:	3b01      	subs	r3, #1
 8008314:	b29a      	uxth	r2, r3
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800831e:	b29b      	uxth	r3, r3
 8008320:	2b00      	cmp	r3, #0
 8008322:	d005      	beq.n	8008330 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008324:	687b      	ldr	r3, [r7, #4]
 8008326:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008328:	f043 0204 	orr.w	r2, r3, #4
 800832c:	687b      	ldr	r3, [r7, #4]
 800832e:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008330:	697b      	ldr	r3, [r7, #20]
 8008332:	f003 0310 	and.w	r3, r3, #16
 8008336:	2b00      	cmp	r3, #0
 8008338:	d049      	beq.n	80083ce <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 800833a:	693b      	ldr	r3, [r7, #16]
 800833c:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8008340:	2b00      	cmp	r3, #0
 8008342:	d044      	beq.n	80083ce <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008348:	b29b      	uxth	r3, r3
 800834a:	2b00      	cmp	r3, #0
 800834c:	d128      	bne.n	80083a0 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008354:	b2db      	uxtb	r3, r3
 8008356:	2b28      	cmp	r3, #40	; 0x28
 8008358:	d108      	bne.n	800836c <I2C_ITSlaveCplt+0x1a4>
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8008360:	d104      	bne.n	800836c <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8008362:	6979      	ldr	r1, [r7, #20]
 8008364:	6878      	ldr	r0, [r7, #4]
 8008366:	f000 f893 	bl	8008490 <I2C_ITListenCplt>
 800836a:	e030      	b.n	80083ce <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008372:	b2db      	uxtb	r3, r3
 8008374:	2b29      	cmp	r3, #41	; 0x29
 8008376:	d10e      	bne.n	8008396 <I2C_ITSlaveCplt+0x1ce>
 8008378:	68fb      	ldr	r3, [r7, #12]
 800837a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800837e:	d00a      	beq.n	8008396 <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	2210      	movs	r2, #16
 8008386:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8008388:	6878      	ldr	r0, [r7, #4]
 800838a:	f000 f9ec 	bl	8008766 <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800838e:	6878      	ldr	r0, [r7, #4]
 8008390:	f7ff fdf6 	bl	8007f80 <I2C_ITSlaveSeqCplt>
 8008394:	e01b      	b.n	80083ce <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008396:	687b      	ldr	r3, [r7, #4]
 8008398:	681b      	ldr	r3, [r3, #0]
 800839a:	2210      	movs	r2, #16
 800839c:	61da      	str	r2, [r3, #28]
 800839e:	e016      	b.n	80083ce <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	681b      	ldr	r3, [r3, #0]
 80083a4:	2210      	movs	r2, #16
 80083a6:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083ac:	f043 0204 	orr.w	r2, r3, #4
 80083b0:	687b      	ldr	r3, [r7, #4]
 80083b2:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 80083b4:	68fb      	ldr	r3, [r7, #12]
 80083b6:	2b00      	cmp	r3, #0
 80083b8:	d003      	beq.n	80083c2 <I2C_ITSlaveCplt+0x1fa>
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80083c0:	d105      	bne.n	80083ce <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 80083c2:	687b      	ldr	r3, [r7, #4]
 80083c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083c6:	4619      	mov	r1, r3
 80083c8:	6878      	ldr	r0, [r7, #4]
 80083ca:	f000 f8b5 	bl	8008538 <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	2200      	movs	r2, #0
 80083d2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2200      	movs	r2, #0
 80083da:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083e0:	2b00      	cmp	r3, #0
 80083e2:	d010      	beq.n	8008406 <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80083e8:	4619      	mov	r1, r3
 80083ea:	6878      	ldr	r0, [r7, #4]
 80083ec:	f000 f8a4 	bl	8008538 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80083f0:	687b      	ldr	r3, [r7, #4]
 80083f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083f6:	b2db      	uxtb	r3, r3
 80083f8:	2b28      	cmp	r3, #40	; 0x28
 80083fa:	d141      	bne.n	8008480 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 80083fc:	6979      	ldr	r1, [r7, #20]
 80083fe:	6878      	ldr	r0, [r7, #4]
 8008400:	f000 f846 	bl	8008490 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008404:	e03c      	b.n	8008480 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8008406:	687b      	ldr	r3, [r7, #4]
 8008408:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800840a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800840e:	d014      	beq.n	800843a <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8008410:	6878      	ldr	r0, [r7, #4]
 8008412:	f7ff fdb5 	bl	8007f80 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8008416:	687b      	ldr	r3, [r7, #4]
 8008418:	4a1c      	ldr	r2, [pc, #112]	; (800848c <I2C_ITSlaveCplt+0x2c4>)
 800841a:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	2220      	movs	r2, #32
 8008420:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	2200      	movs	r2, #0
 8008428:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 800842a:	687b      	ldr	r3, [r7, #4]
 800842c:	2200      	movs	r2, #0
 800842e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f7fe ff83 	bl	800733e <HAL_I2C_ListenCpltCallback>
}
 8008438:	e022      	b.n	8008480 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008440:	b2db      	uxtb	r3, r3
 8008442:	2b22      	cmp	r3, #34	; 0x22
 8008444:	d10e      	bne.n	8008464 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	2220      	movs	r2, #32
 800844a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	2200      	movs	r2, #0
 8008452:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	2200      	movs	r2, #0
 8008458:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f7fe ff56 	bl	800730e <HAL_I2C_SlaveRxCpltCallback>
}
 8008462:	e00d      	b.n	8008480 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2220      	movs	r2, #32
 8008468:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800846c:	687b      	ldr	r3, [r7, #4]
 800846e:	2200      	movs	r2, #0
 8008470:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	2200      	movs	r2, #0
 8008476:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800847a:	6878      	ldr	r0, [r7, #4]
 800847c:	f7fe ff3d 	bl	80072fa <HAL_I2C_SlaveTxCpltCallback>
}
 8008480:	bf00      	nop
 8008482:	3718      	adds	r7, #24
 8008484:	46bd      	mov	sp, r7
 8008486:	bd80      	pop	{r7, pc}
 8008488:	fe00e800 	.word	0xfe00e800
 800848c:	ffff0000 	.word	0xffff0000

08008490 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8008490:	b580      	push	{r7, lr}
 8008492:	b082      	sub	sp, #8
 8008494:	af00      	add	r7, sp, #0
 8008496:	6078      	str	r0, [r7, #4]
 8008498:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800849a:	687b      	ldr	r3, [r7, #4]
 800849c:	4a25      	ldr	r2, [pc, #148]	; (8008534 <I2C_ITListenCplt+0xa4>)
 800849e:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	2200      	movs	r2, #0
 80084a4:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	2220      	movs	r2, #32
 80084aa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80084ae:	687b      	ldr	r3, [r7, #4]
 80084b0:	2200      	movs	r2, #0
 80084b2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2200      	movs	r2, #0
 80084ba:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 80084bc:	683b      	ldr	r3, [r7, #0]
 80084be:	f003 0304 	and.w	r3, r3, #4
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d022      	beq.n	800850c <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	681b      	ldr	r3, [r3, #0]
 80084ca:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80084cc:	687b      	ldr	r3, [r7, #4]
 80084ce:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d0:	b2d2      	uxtb	r2, r2
 80084d2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80084d4:	687b      	ldr	r3, [r7, #4]
 80084d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80084d8:	1c5a      	adds	r2, r3, #1
 80084da:	687b      	ldr	r3, [r7, #4]
 80084dc:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d012      	beq.n	800850c <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80084ea:	3b01      	subs	r3, #1
 80084ec:	b29a      	uxth	r2, r3
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80084f6:	b29b      	uxth	r3, r3
 80084f8:	3b01      	subs	r3, #1
 80084fa:	b29a      	uxth	r2, r3
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8008500:	687b      	ldr	r3, [r7, #4]
 8008502:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8008504:	f043 0204 	orr.w	r2, r3, #4
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800850c:	f248 0103 	movw	r1, #32771	; 0x8003
 8008510:	6878      	ldr	r0, [r7, #4]
 8008512:	f000 fab3 	bl	8008a7c <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	2210      	movs	r2, #16
 800851c:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800851e:	687b      	ldr	r3, [r7, #4]
 8008520:	2200      	movs	r2, #0
 8008522:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f7fe ff09 	bl	800733e <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800852c:	bf00      	nop
 800852e:	3708      	adds	r7, #8
 8008530:	46bd      	mov	sp, r7
 8008532:	bd80      	pop	{r7, pc}
 8008534:	ffff0000 	.word	0xffff0000

08008538 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8008538:	b580      	push	{r7, lr}
 800853a:	b084      	sub	sp, #16
 800853c:	af00      	add	r7, sp, #0
 800853e:	6078      	str	r0, [r7, #4]
 8008540:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008548:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800854a:	687b      	ldr	r3, [r7, #4]
 800854c:	2200      	movs	r2, #0
 800854e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	4a6d      	ldr	r2, [pc, #436]	; (800870c <I2C_ITError+0x1d4>)
 8008556:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	2200      	movs	r2, #0
 800855c:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800855e:	687b      	ldr	r3, [r7, #4]
 8008560:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8008562:	683b      	ldr	r3, [r7, #0]
 8008564:	431a      	orrs	r2, r3
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800856a:	7bfb      	ldrb	r3, [r7, #15]
 800856c:	2b28      	cmp	r3, #40	; 0x28
 800856e:	d005      	beq.n	800857c <I2C_ITError+0x44>
 8008570:	7bfb      	ldrb	r3, [r7, #15]
 8008572:	2b29      	cmp	r3, #41	; 0x29
 8008574:	d002      	beq.n	800857c <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8008576:	7bfb      	ldrb	r3, [r7, #15]
 8008578:	2b2a      	cmp	r3, #42	; 0x2a
 800857a:	d10b      	bne.n	8008594 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800857c:	2103      	movs	r1, #3
 800857e:	6878      	ldr	r0, [r7, #4]
 8008580:	f000 fa7c 	bl	8008a7c <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2228      	movs	r2, #40	; 0x28
 8008588:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	4a60      	ldr	r2, [pc, #384]	; (8008710 <I2C_ITError+0x1d8>)
 8008590:	635a      	str	r2, [r3, #52]	; 0x34
 8008592:	e030      	b.n	80085f6 <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8008594:	f248 0103 	movw	r1, #32771	; 0x8003
 8008598:	6878      	ldr	r0, [r7, #4]
 800859a:	f000 fa6f 	bl	8008a7c <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800859e:	6878      	ldr	r0, [r7, #4]
 80085a0:	f000 f8e1 	bl	8008766 <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80085aa:	b2db      	uxtb	r3, r3
 80085ac:	2b60      	cmp	r3, #96	; 0x60
 80085ae:	d01f      	beq.n	80085f0 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	2220      	movs	r2, #32
 80085b4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	681b      	ldr	r3, [r3, #0]
 80085bc:	699b      	ldr	r3, [r3, #24]
 80085be:	f003 0320 	and.w	r3, r3, #32
 80085c2:	2b20      	cmp	r3, #32
 80085c4:	d114      	bne.n	80085f0 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80085c6:	687b      	ldr	r3, [r7, #4]
 80085c8:	681b      	ldr	r3, [r3, #0]
 80085ca:	699b      	ldr	r3, [r3, #24]
 80085cc:	f003 0310 	and.w	r3, r3, #16
 80085d0:	2b10      	cmp	r3, #16
 80085d2:	d109      	bne.n	80085e8 <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	681b      	ldr	r3, [r3, #0]
 80085d8:	2210      	movs	r2, #16
 80085da:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80085e0:	f043 0204 	orr.w	r2, r3, #4
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80085e8:	687b      	ldr	r3, [r7, #4]
 80085ea:	681b      	ldr	r3, [r3, #0]
 80085ec:	2220      	movs	r2, #32
 80085ee:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2200      	movs	r2, #0
 80085f4:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085fa:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008600:	2b00      	cmp	r3, #0
 8008602:	d039      	beq.n	8008678 <I2C_ITError+0x140>
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	2b11      	cmp	r3, #17
 8008608:	d002      	beq.n	8008610 <I2C_ITError+0xd8>
 800860a:	68bb      	ldr	r3, [r7, #8]
 800860c:	2b21      	cmp	r3, #33	; 0x21
 800860e:	d133      	bne.n	8008678 <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800861a:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800861e:	d107      	bne.n	8008630 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	681a      	ldr	r2, [r3, #0]
 8008626:	687b      	ldr	r3, [r7, #4]
 8008628:	681b      	ldr	r3, [r3, #0]
 800862a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800862e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008634:	4618      	mov	r0, r3
 8008636:	f7fc fb0d 	bl	8004c54 <HAL_DMA_GetState>
 800863a:	4603      	mov	r3, r0
 800863c:	2b01      	cmp	r3, #1
 800863e:	d017      	beq.n	8008670 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008644:	4a33      	ldr	r2, [pc, #204]	; (8008714 <I2C_ITError+0x1dc>)
 8008646:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	2200      	movs	r2, #0
 800864c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8008650:	687b      	ldr	r3, [r7, #4]
 8008652:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008654:	4618      	mov	r0, r3
 8008656:	f7fc f951 	bl	80048fc <HAL_DMA_Abort_IT>
 800865a:	4603      	mov	r3, r0
 800865c:	2b00      	cmp	r3, #0
 800865e:	d04d      	beq.n	80086fc <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8008660:	687b      	ldr	r3, [r7, #4]
 8008662:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008664:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008666:	687a      	ldr	r2, [r7, #4]
 8008668:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800866a:	4610      	mov	r0, r2
 800866c:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800866e:	e045      	b.n	80086fc <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8008670:	6878      	ldr	r0, [r7, #4]
 8008672:	f000 f851 	bl	8008718 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8008676:	e041      	b.n	80086fc <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800867c:	2b00      	cmp	r3, #0
 800867e:	d039      	beq.n	80086f4 <I2C_ITError+0x1bc>
 8008680:	68bb      	ldr	r3, [r7, #8]
 8008682:	2b12      	cmp	r3, #18
 8008684:	d002      	beq.n	800868c <I2C_ITError+0x154>
 8008686:	68bb      	ldr	r3, [r7, #8]
 8008688:	2b22      	cmp	r3, #34	; 0x22
 800868a:	d133      	bne.n	80086f4 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	681b      	ldr	r3, [r3, #0]
 8008692:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8008696:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800869a:	d107      	bne.n	80086ac <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	681a      	ldr	r2, [r3, #0]
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80086aa:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086b0:	4618      	mov	r0, r3
 80086b2:	f7fc facf 	bl	8004c54 <HAL_DMA_GetState>
 80086b6:	4603      	mov	r3, r0
 80086b8:	2b01      	cmp	r3, #1
 80086ba:	d017      	beq.n	80086ec <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086c0:	4a14      	ldr	r2, [pc, #80]	; (8008714 <I2C_ITError+0x1dc>)
 80086c2:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80086c4:	687b      	ldr	r3, [r7, #4]
 80086c6:	2200      	movs	r2, #0
 80086c8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086d0:	4618      	mov	r0, r3
 80086d2:	f7fc f913 	bl	80048fc <HAL_DMA_Abort_IT>
 80086d6:	4603      	mov	r3, r0
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d011      	beq.n	8008700 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80086e0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80086e2:	687a      	ldr	r2, [r7, #4]
 80086e4:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 80086e6:	4610      	mov	r0, r2
 80086e8:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80086ea:	e009      	b.n	8008700 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 80086ec:	6878      	ldr	r0, [r7, #4]
 80086ee:	f000 f813 	bl	8008718 <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80086f2:	e005      	b.n	8008700 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 80086f4:	6878      	ldr	r0, [r7, #4]
 80086f6:	f000 f80f 	bl	8008718 <I2C_TreatErrorCallback>
  }
}
 80086fa:	e002      	b.n	8008702 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80086fc:	bf00      	nop
 80086fe:	e000      	b.n	8008702 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8008700:	bf00      	nop
}
 8008702:	bf00      	nop
 8008704:	3710      	adds	r7, #16
 8008706:	46bd      	mov	sp, r7
 8008708:	bd80      	pop	{r7, pc}
 800870a:	bf00      	nop
 800870c:	ffff0000 	.word	0xffff0000
 8008710:	080075e5 	.word	0x080075e5
 8008714:	080088d5 	.word	0x080088d5

08008718 <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8008718:	b580      	push	{r7, lr}
 800871a:	b082      	sub	sp, #8
 800871c:	af00      	add	r7, sp, #0
 800871e:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8008720:	687b      	ldr	r3, [r7, #4]
 8008722:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008726:	b2db      	uxtb	r3, r3
 8008728:	2b60      	cmp	r3, #96	; 0x60
 800872a:	d10e      	bne.n	800874a <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	2220      	movs	r2, #32
 8008730:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	2200      	movs	r2, #0
 8008738:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800873a:	687b      	ldr	r3, [r7, #4]
 800873c:	2200      	movs	r2, #0
 800873e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8008742:	6878      	ldr	r0, [r7, #4]
 8008744:	f014 fb2c 	bl	801cda0 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8008748:	e009      	b.n	800875e <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 800874a:	687b      	ldr	r3, [r7, #4]
 800874c:	2200      	movs	r2, #0
 800874e:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8008750:	687b      	ldr	r3, [r7, #4]
 8008752:	2200      	movs	r2, #0
 8008754:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8008758:	6878      	ldr	r0, [r7, #4]
 800875a:	f014 fafd 	bl	801cd58 <HAL_I2C_ErrorCallback>
}
 800875e:	bf00      	nop
 8008760:	3708      	adds	r7, #8
 8008762:	46bd      	mov	sp, r7
 8008764:	bd80      	pop	{r7, pc}

08008766 <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8008766:	b480      	push	{r7}
 8008768:	b083      	sub	sp, #12
 800876a:	af00      	add	r7, sp, #0
 800876c:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800876e:	687b      	ldr	r3, [r7, #4]
 8008770:	681b      	ldr	r3, [r3, #0]
 8008772:	699b      	ldr	r3, [r3, #24]
 8008774:	f003 0302 	and.w	r3, r3, #2
 8008778:	2b02      	cmp	r3, #2
 800877a:	d103      	bne.n	8008784 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800877c:	687b      	ldr	r3, [r7, #4]
 800877e:	681b      	ldr	r3, [r3, #0]
 8008780:	2200      	movs	r2, #0
 8008782:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	699b      	ldr	r3, [r3, #24]
 800878a:	f003 0301 	and.w	r3, r3, #1
 800878e:	2b01      	cmp	r3, #1
 8008790:	d007      	beq.n	80087a2 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	681b      	ldr	r3, [r3, #0]
 8008796:	699a      	ldr	r2, [r3, #24]
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f042 0201 	orr.w	r2, r2, #1
 80087a0:	619a      	str	r2, [r3, #24]
  }
}
 80087a2:	bf00      	nop
 80087a4:	370c      	adds	r7, #12
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr

080087ae <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 80087ae:	b580      	push	{r7, lr}
 80087b0:	b084      	sub	sp, #16
 80087b2:	af00      	add	r7, sp, #0
 80087b4:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80087b6:	687b      	ldr	r3, [r7, #4]
 80087b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ba:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	681b      	ldr	r3, [r3, #0]
 80087c0:	681a      	ldr	r2, [r3, #0]
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80087ca:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 80087cc:	68fb      	ldr	r3, [r7, #12]
 80087ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087d0:	b29b      	uxth	r3, r3
 80087d2:	2b00      	cmp	r3, #0
 80087d4:	d104      	bne.n	80087e0 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80087d6:	2120      	movs	r1, #32
 80087d8:	68f8      	ldr	r0, [r7, #12]
 80087da:	f000 f8cb 	bl	8008974 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 80087de:	e03b      	b.n	8008858 <I2C_DMAMasterReceiveCplt+0xaa>
    hi2c->pBuffPtr += hi2c->XferSize;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80087e4:	68fa      	ldr	r2, [r7, #12]
 80087e6:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 80087e8:	441a      	add	r2, r3
 80087ea:	68fb      	ldr	r3, [r7, #12]
 80087ec:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80087ee:	68fb      	ldr	r3, [r7, #12]
 80087f0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80087f2:	b29b      	uxth	r3, r3
 80087f4:	2bff      	cmp	r3, #255	; 0xff
 80087f6:	d911      	bls.n	800881c <I2C_DMAMasterReceiveCplt+0x6e>
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	681b      	ldr	r3, [r3, #0]
 80087fc:	699b      	ldr	r3, [r3, #24]
 80087fe:	0c1b      	lsrs	r3, r3, #16
 8008800:	b2db      	uxtb	r3, r3
 8008802:	f003 0301 	and.w	r3, r3, #1
 8008806:	b2db      	uxtb	r3, r3
 8008808:	2b01      	cmp	r3, #1
 800880a:	d103      	bne.n	8008814 <I2C_DMAMasterReceiveCplt+0x66>
        hi2c->XferSize = 1U;
 800880c:	68fb      	ldr	r3, [r7, #12]
 800880e:	2201      	movs	r2, #1
 8008810:	851a      	strh	r2, [r3, #40]	; 0x28
 8008812:	e008      	b.n	8008826 <I2C_DMAMasterReceiveCplt+0x78>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8008814:	68fb      	ldr	r3, [r7, #12]
 8008816:	22ff      	movs	r2, #255	; 0xff
 8008818:	851a      	strh	r2, [r3, #40]	; 0x28
 800881a:	e004      	b.n	8008826 <I2C_DMAMasterReceiveCplt+0x78>
      hi2c->XferSize = hi2c->XferCount;
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008820:	b29a      	uxth	r2, r3
 8008822:	68fb      	ldr	r3, [r7, #12]
 8008824:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8008826:	68fb      	ldr	r3, [r7, #12]
 8008828:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800882a:	68fb      	ldr	r3, [r7, #12]
 800882c:	681b      	ldr	r3, [r3, #0]
 800882e:	3324      	adds	r3, #36	; 0x24
 8008830:	4619      	mov	r1, r3
 8008832:	68fb      	ldr	r3, [r7, #12]
 8008834:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008836:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 8008838:	68fb      	ldr	r3, [r7, #12]
 800883a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800883c:	f7fb ff8e 	bl	800475c <HAL_DMA_Start_IT>
 8008840:	4603      	mov	r3, r0
 8008842:	2b00      	cmp	r3, #0
 8008844:	d004      	beq.n	8008850 <I2C_DMAMasterReceiveCplt+0xa2>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 8008846:	2110      	movs	r1, #16
 8008848:	68f8      	ldr	r0, [r7, #12]
 800884a:	f7ff fe75 	bl	8008538 <I2C_ITError>
}
 800884e:	e003      	b.n	8008858 <I2C_DMAMasterReceiveCplt+0xaa>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8008850:	2140      	movs	r1, #64	; 0x40
 8008852:	68f8      	ldr	r0, [r7, #12]
 8008854:	f000 f88e 	bl	8008974 <I2C_Enable_IRQ>
}
 8008858:	bf00      	nop
 800885a:	3710      	adds	r7, #16
 800885c:	46bd      	mov	sp, r7
 800885e:	bd80      	pop	{r7, pc}

08008860 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8008860:	b580      	push	{r7, lr}
 8008862:	b084      	sub	sp, #16
 8008864:	af00      	add	r7, sp, #0
 8008866:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 8008868:	2300      	movs	r3, #0
 800886a:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800886c:	687b      	ldr	r3, [r7, #4]
 800886e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008870:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8008872:	68bb      	ldr	r3, [r7, #8]
 8008874:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008876:	2b00      	cmp	r3, #0
 8008878:	d007      	beq.n	800888a <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800887a:	68bb      	ldr	r3, [r7, #8]
 800887c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800887e:	681b      	ldr	r3, [r3, #0]
 8008880:	685b      	ldr	r3, [r3, #4]
 8008882:	2b00      	cmp	r3, #0
 8008884:	d101      	bne.n	800888a <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 8008886:	2301      	movs	r3, #1
 8008888:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800888a:	68bb      	ldr	r3, [r7, #8]
 800888c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800888e:	2b00      	cmp	r3, #0
 8008890:	d007      	beq.n	80088a2 <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8008892:	68bb      	ldr	r3, [r7, #8]
 8008894:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008896:	681b      	ldr	r3, [r3, #0]
 8008898:	685b      	ldr	r3, [r3, #4]
 800889a:	2b00      	cmp	r3, #0
 800889c:	d101      	bne.n	80088a2 <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 800889e:	2301      	movs	r3, #1
 80088a0:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 80088a2:	6878      	ldr	r0, [r7, #4]
 80088a4:	f7fc f9e4 	bl	8004c70 <HAL_DMA_GetError>
 80088a8:	4603      	mov	r3, r0
 80088aa:	2b02      	cmp	r3, #2
 80088ac:	d00e      	beq.n	80088cc <I2C_DMAError+0x6c>
 80088ae:	68fb      	ldr	r3, [r7, #12]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d00b      	beq.n	80088cc <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 80088b4:	68bb      	ldr	r3, [r7, #8]
 80088b6:	681b      	ldr	r3, [r3, #0]
 80088b8:	685a      	ldr	r2, [r3, #4]
 80088ba:	68bb      	ldr	r3, [r7, #8]
 80088bc:	681b      	ldr	r3, [r3, #0]
 80088be:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80088c2:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80088c4:	2110      	movs	r1, #16
 80088c6:	68b8      	ldr	r0, [r7, #8]
 80088c8:	f7ff fe36 	bl	8008538 <I2C_ITError>
  }
}
 80088cc:	bf00      	nop
 80088ce:	3710      	adds	r7, #16
 80088d0:	46bd      	mov	sp, r7
 80088d2:	bd80      	pop	{r7, pc}

080088d4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80088d4:	b580      	push	{r7, lr}
 80088d6:	b084      	sub	sp, #16
 80088d8:	af00      	add	r7, sp, #0
 80088da:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80088dc:	687b      	ldr	r3, [r7, #4]
 80088de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e0:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088e6:	2b00      	cmp	r3, #0
 80088e8:	d003      	beq.n	80088f2 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088ee:	2200      	movs	r2, #0
 80088f0:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d003      	beq.n	8008902 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80088fe:	2200      	movs	r2, #0
 8008900:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 8008902:	68f8      	ldr	r0, [r7, #12]
 8008904:	f7ff ff08 	bl	8008718 <I2C_TreatErrorCallback>
}
 8008908:	bf00      	nop
 800890a:	3710      	adds	r7, #16
 800890c:	46bd      	mov	sp, r7
 800890e:	bd80      	pop	{r7, pc}

08008910 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 8008910:	b480      	push	{r7}
 8008912:	b087      	sub	sp, #28
 8008914:	af00      	add	r7, sp, #0
 8008916:	60f8      	str	r0, [r7, #12]
 8008918:	607b      	str	r3, [r7, #4]
 800891a:	460b      	mov	r3, r1
 800891c:	817b      	strh	r3, [r7, #10]
 800891e:	4613      	mov	r3, r2
 8008920:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008922:	897b      	ldrh	r3, [r7, #10]
 8008924:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008928:	7a7b      	ldrb	r3, [r7, #9]
 800892a:	041b      	lsls	r3, r3, #16
 800892c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008930:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008932:	687b      	ldr	r3, [r7, #4]
 8008934:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008936:	6a3b      	ldr	r3, [r7, #32]
 8008938:	4313      	orrs	r3, r2
 800893a:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 800893e:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	685a      	ldr	r2, [r3, #4]
 8008946:	6a3b      	ldr	r3, [r7, #32]
 8008948:	0d5b      	lsrs	r3, r3, #21
 800894a:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 800894e:	4b08      	ldr	r3, [pc, #32]	; (8008970 <I2C_TransferConfig+0x60>)
 8008950:	430b      	orrs	r3, r1
 8008952:	43db      	mvns	r3, r3
 8008954:	ea02 0103 	and.w	r1, r2, r3
 8008958:	68fb      	ldr	r3, [r7, #12]
 800895a:	681b      	ldr	r3, [r3, #0]
 800895c:	697a      	ldr	r2, [r7, #20]
 800895e:	430a      	orrs	r2, r1
 8008960:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008962:	bf00      	nop
 8008964:	371c      	adds	r7, #28
 8008966:	46bd      	mov	sp, r7
 8008968:	f85d 7b04 	ldr.w	r7, [sp], #4
 800896c:	4770      	bx	lr
 800896e:	bf00      	nop
 8008970:	03ff63ff 	.word	0x03ff63ff

08008974 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008974:	b480      	push	{r7}
 8008976:	b085      	sub	sp, #20
 8008978:	af00      	add	r7, sp, #0
 800897a:	6078      	str	r0, [r7, #4]
 800897c:	460b      	mov	r3, r1
 800897e:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008980:	2300      	movs	r3, #0
 8008982:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8008984:	687b      	ldr	r3, [r7, #4]
 8008986:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008988:	4a39      	ldr	r2, [pc, #228]	; (8008a70 <I2C_Enable_IRQ+0xfc>)
 800898a:	4293      	cmp	r3, r2
 800898c:	d032      	beq.n	80089f4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800898e:	687b      	ldr	r3, [r7, #4]
 8008990:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8008992:	4a38      	ldr	r2, [pc, #224]	; (8008a74 <I2C_Enable_IRQ+0x100>)
 8008994:	4293      	cmp	r3, r2
 8008996:	d02d      	beq.n	80089f4 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 8008998:	687b      	ldr	r3, [r7, #4]
 800899a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800899c:	4a36      	ldr	r2, [pc, #216]	; (8008a78 <I2C_Enable_IRQ+0x104>)
 800899e:	4293      	cmp	r3, r2
 80089a0:	d028      	beq.n	80089f4 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80089a2:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80089a6:	2b00      	cmp	r3, #0
 80089a8:	da03      	bge.n	80089b2 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80089aa:	68fb      	ldr	r3, [r7, #12]
 80089ac:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80089b0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80089b2:	887b      	ldrh	r3, [r7, #2]
 80089b4:	f003 0301 	and.w	r3, r3, #1
 80089b8:	2b00      	cmp	r3, #0
 80089ba:	d003      	beq.n	80089c4 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80089bc:	68fb      	ldr	r3, [r7, #12]
 80089be:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80089c2:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80089c4:	887b      	ldrh	r3, [r7, #2]
 80089c6:	f003 0302 	and.w	r3, r3, #2
 80089ca:	2b00      	cmp	r3, #0
 80089cc:	d003      	beq.n	80089d6 <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80089d4:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80089d6:	887b      	ldrh	r3, [r7, #2]
 80089d8:	2b10      	cmp	r3, #16
 80089da:	d103      	bne.n	80089e4 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80089dc:	68fb      	ldr	r3, [r7, #12]
 80089de:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80089e2:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80089e4:	887b      	ldrh	r3, [r7, #2]
 80089e6:	2b20      	cmp	r3, #32
 80089e8:	d133      	bne.n	8008a52 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	f043 0320 	orr.w	r3, r3, #32
 80089f0:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80089f2:	e02e      	b.n	8008a52 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80089f4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80089f8:	2b00      	cmp	r3, #0
 80089fa:	da03      	bge.n	8008a04 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008a02:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008a04:	887b      	ldrh	r3, [r7, #2]
 8008a06:	f003 0301 	and.w	r3, r3, #1
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	d003      	beq.n	8008a16 <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 8008a0e:	68fb      	ldr	r3, [r7, #12]
 8008a10:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 8008a14:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008a16:	887b      	ldrh	r3, [r7, #2]
 8008a18:	f003 0302 	and.w	r3, r3, #2
 8008a1c:	2b00      	cmp	r3, #0
 8008a1e:	d003      	beq.n	8008a28 <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 8008a26:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008a28:	887b      	ldrh	r3, [r7, #2]
 8008a2a:	2b10      	cmp	r3, #16
 8008a2c:	d103      	bne.n	8008a36 <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008a2e:	68fb      	ldr	r3, [r7, #12]
 8008a30:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8008a34:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008a36:	887b      	ldrh	r3, [r7, #2]
 8008a38:	2b20      	cmp	r3, #32
 8008a3a:	d103      	bne.n	8008a44 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008a42:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008a44:	887b      	ldrh	r3, [r7, #2]
 8008a46:	2b40      	cmp	r3, #64	; 0x40
 8008a48:	d103      	bne.n	8008a52 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 8008a4a:	68fb      	ldr	r3, [r7, #12]
 8008a4c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008a50:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	6819      	ldr	r1, [r3, #0]
 8008a58:	687b      	ldr	r3, [r7, #4]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	68fa      	ldr	r2, [r7, #12]
 8008a5e:	430a      	orrs	r2, r1
 8008a60:	601a      	str	r2, [r3, #0]
}
 8008a62:	bf00      	nop
 8008a64:	3714      	adds	r7, #20
 8008a66:	46bd      	mov	sp, r7
 8008a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a6c:	4770      	bx	lr
 8008a6e:	bf00      	nop
 8008a70:	080077d7 	.word	0x080077d7
 8008a74:	08007c51 	.word	0x08007c51
 8008a78:	080079c9 	.word	0x080079c9

08008a7c <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008a7c:	b480      	push	{r7}
 8008a7e:	b085      	sub	sp, #20
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	460b      	mov	r3, r1
 8008a86:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008a88:	2300      	movs	r3, #0
 8008a8a:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008a8c:	887b      	ldrh	r3, [r7, #2]
 8008a8e:	f003 0301 	and.w	r3, r3, #1
 8008a92:	2b00      	cmp	r3, #0
 8008a94:	d00f      	beq.n	8008ab6 <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 8008a96:	68fb      	ldr	r3, [r7, #12]
 8008a98:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8008a9c:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008aa4:	b2db      	uxtb	r3, r3
 8008aa6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008aaa:	2b28      	cmp	r3, #40	; 0x28
 8008aac:	d003      	beq.n	8008ab6 <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008aae:	68fb      	ldr	r3, [r7, #12]
 8008ab0:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8008ab4:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 8008ab6:	887b      	ldrh	r3, [r7, #2]
 8008ab8:	f003 0302 	and.w	r3, r3, #2
 8008abc:	2b00      	cmp	r3, #0
 8008abe:	d00f      	beq.n	8008ae0 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 8008ac6:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008ace:	b2db      	uxtb	r3, r3
 8008ad0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8008ad4:	2b28      	cmp	r3, #40	; 0x28
 8008ad6:	d003      	beq.n	8008ae0 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8008ade:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008ae0:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	da03      	bge.n	8008af0 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008aee:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 8008af0:	887b      	ldrh	r3, [r7, #2]
 8008af2:	2b10      	cmp	r3, #16
 8008af4:	d103      	bne.n	8008afe <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8008afc:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 8008afe:	887b      	ldrh	r3, [r7, #2]
 8008b00:	2b20      	cmp	r3, #32
 8008b02:	d103      	bne.n	8008b0c <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 8008b04:	68fb      	ldr	r3, [r7, #12]
 8008b06:	f043 0320 	orr.w	r3, r3, #32
 8008b0a:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008b0c:	887b      	ldrh	r3, [r7, #2]
 8008b0e:	2b40      	cmp	r3, #64	; 0x40
 8008b10:	d103      	bne.n	8008b1a <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008b18:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 8008b1a:	687b      	ldr	r3, [r7, #4]
 8008b1c:	681b      	ldr	r3, [r3, #0]
 8008b1e:	6819      	ldr	r1, [r3, #0]
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	43da      	mvns	r2, r3
 8008b24:	687b      	ldr	r3, [r7, #4]
 8008b26:	681b      	ldr	r3, [r3, #0]
 8008b28:	400a      	ands	r2, r1
 8008b2a:	601a      	str	r2, [r3, #0]
}
 8008b2c:	bf00      	nop
 8008b2e:	3714      	adds	r7, #20
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b083      	sub	sp, #12
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008b48:	b2db      	uxtb	r3, r3
 8008b4a:	2b20      	cmp	r3, #32
 8008b4c:	d138      	bne.n	8008bc0 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008b4e:	687b      	ldr	r3, [r7, #4]
 8008b50:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008b54:	2b01      	cmp	r3, #1
 8008b56:	d101      	bne.n	8008b5c <HAL_I2CEx_ConfigAnalogFilter+0x24>
 8008b58:	2302      	movs	r3, #2
 8008b5a:	e032      	b.n	8008bc2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008b5c:	687b      	ldr	r3, [r7, #4]
 8008b5e:	2201      	movs	r2, #1
 8008b60:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	2224      	movs	r2, #36	; 0x24
 8008b68:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008b6c:	687b      	ldr	r3, [r7, #4]
 8008b6e:	681b      	ldr	r3, [r3, #0]
 8008b70:	681a      	ldr	r2, [r3, #0]
 8008b72:	687b      	ldr	r3, [r7, #4]
 8008b74:	681b      	ldr	r3, [r3, #0]
 8008b76:	f022 0201 	bic.w	r2, r2, #1
 8008b7a:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	681a      	ldr	r2, [r3, #0]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8008b8a:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	6819      	ldr	r1, [r3, #0]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	683a      	ldr	r2, [r7, #0]
 8008b98:	430a      	orrs	r2, r1
 8008b9a:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	681b      	ldr	r3, [r3, #0]
 8008ba0:	681a      	ldr	r2, [r3, #0]
 8008ba2:	687b      	ldr	r3, [r7, #4]
 8008ba4:	681b      	ldr	r3, [r3, #0]
 8008ba6:	f042 0201 	orr.w	r2, r2, #1
 8008baa:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	2220      	movs	r2, #32
 8008bb0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2200      	movs	r2, #0
 8008bb8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008bbc:	2300      	movs	r3, #0
 8008bbe:	e000      	b.n	8008bc2 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 8008bc0:	2302      	movs	r3, #2
  }
}
 8008bc2:	4618      	mov	r0, r3
 8008bc4:	370c      	adds	r7, #12
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr

08008bce <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 8008bce:	b480      	push	{r7}
 8008bd0:	b085      	sub	sp, #20
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
 8008bd6:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008bde:	b2db      	uxtb	r3, r3
 8008be0:	2b20      	cmp	r3, #32
 8008be2:	d139      	bne.n	8008c58 <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008be4:	687b      	ldr	r3, [r7, #4]
 8008be6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008bea:	2b01      	cmp	r3, #1
 8008bec:	d101      	bne.n	8008bf2 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 8008bee:	2302      	movs	r3, #2
 8008bf0:	e033      	b.n	8008c5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	2201      	movs	r2, #1
 8008bf6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008bfa:	687b      	ldr	r3, [r7, #4]
 8008bfc:	2224      	movs	r2, #36	; 0x24
 8008bfe:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008c02:	687b      	ldr	r3, [r7, #4]
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	681a      	ldr	r2, [r3, #0]
 8008c08:	687b      	ldr	r3, [r7, #4]
 8008c0a:	681b      	ldr	r3, [r3, #0]
 8008c0c:	f022 0201 	bic.w	r2, r2, #1
 8008c10:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 8008c12:	687b      	ldr	r3, [r7, #4]
 8008c14:	681b      	ldr	r3, [r3, #0]
 8008c16:	681b      	ldr	r3, [r3, #0]
 8008c18:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 8008c1a:	68fb      	ldr	r3, [r7, #12]
 8008c1c:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008c20:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008c22:	683b      	ldr	r3, [r7, #0]
 8008c24:	021b      	lsls	r3, r3, #8
 8008c26:	68fa      	ldr	r2, [r7, #12]
 8008c28:	4313      	orrs	r3, r2
 8008c2a:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008c2c:	687b      	ldr	r3, [r7, #4]
 8008c2e:	681b      	ldr	r3, [r3, #0]
 8008c30:	68fa      	ldr	r2, [r7, #12]
 8008c32:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008c34:	687b      	ldr	r3, [r7, #4]
 8008c36:	681b      	ldr	r3, [r3, #0]
 8008c38:	681a      	ldr	r2, [r3, #0]
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	681b      	ldr	r3, [r3, #0]
 8008c3e:	f042 0201 	orr.w	r2, r2, #1
 8008c42:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008c44:	687b      	ldr	r3, [r7, #4]
 8008c46:	2220      	movs	r2, #32
 8008c48:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008c4c:	687b      	ldr	r3, [r7, #4]
 8008c4e:	2200      	movs	r2, #0
 8008c50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008c54:	2300      	movs	r3, #0
 8008c56:	e000      	b.n	8008c5a <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 8008c58:	2302      	movs	r3, #2
  }
}
 8008c5a:	4618      	mov	r0, r3
 8008c5c:	3714      	adds	r7, #20
 8008c5e:	46bd      	mov	sp, r7
 8008c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c64:	4770      	bx	lr
	...

08008c68 <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8008c68:	b480      	push	{r7}
 8008c6a:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008c6c:	4b05      	ldr	r3, [pc, #20]	; (8008c84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	4a04      	ldr	r2, [pc, #16]	; (8008c84 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008c72:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8008c76:	6013      	str	r3, [r2, #0]
}
 8008c78:	bf00      	nop
 8008c7a:	46bd      	mov	sp, r7
 8008c7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c80:	4770      	bx	lr
 8008c82:	bf00      	nop
 8008c84:	40007000 	.word	0x40007000

08008c88 <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 8008c88:	b580      	push	{r7, lr}
 8008c8a:	b082      	sub	sp, #8
 8008c8c:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8008c8e:	2300      	movs	r3, #0
 8008c90:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008c92:	4b23      	ldr	r3, [pc, #140]	; (8008d20 <HAL_PWREx_EnableOverDrive+0x98>)
 8008c94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008c96:	4a22      	ldr	r2, [pc, #136]	; (8008d20 <HAL_PWREx_EnableOverDrive+0x98>)
 8008c98:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008c9c:	6413      	str	r3, [r2, #64]	; 0x40
 8008c9e:	4b20      	ldr	r3, [pc, #128]	; (8008d20 <HAL_PWREx_EnableOverDrive+0x98>)
 8008ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ca2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ca6:	603b      	str	r3, [r7, #0]
 8008ca8:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8008caa:	4b1e      	ldr	r3, [pc, #120]	; (8008d24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008cac:	681b      	ldr	r3, [r3, #0]
 8008cae:	4a1d      	ldr	r2, [pc, #116]	; (8008d24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008cb0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008cb4:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008cb6:	f7fa fbc1 	bl	800343c <HAL_GetTick>
 8008cba:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008cbc:	e009      	b.n	8008cd2 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008cbe:	f7fa fbbd 	bl	800343c <HAL_GetTick>
 8008cc2:	4602      	mov	r2, r0
 8008cc4:	687b      	ldr	r3, [r7, #4]
 8008cc6:	1ad3      	subs	r3, r2, r3
 8008cc8:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008ccc:	d901      	bls.n	8008cd2 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 8008cce:	2303      	movs	r3, #3
 8008cd0:	e022      	b.n	8008d18 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8008cd2:	4b14      	ldr	r3, [pc, #80]	; (8008d24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008cd4:	685b      	ldr	r3, [r3, #4]
 8008cd6:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008cda:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008cde:	d1ee      	bne.n	8008cbe <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8008ce0:	4b10      	ldr	r3, [pc, #64]	; (8008d24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008ce2:	681b      	ldr	r3, [r3, #0]
 8008ce4:	4a0f      	ldr	r2, [pc, #60]	; (8008d24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008ce6:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8008cea:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8008cec:	f7fa fba6 	bl	800343c <HAL_GetTick>
 8008cf0:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008cf2:	e009      	b.n	8008d08 <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8008cf4:	f7fa fba2 	bl	800343c <HAL_GetTick>
 8008cf8:	4602      	mov	r2, r0
 8008cfa:	687b      	ldr	r3, [r7, #4]
 8008cfc:	1ad3      	subs	r3, r2, r3
 8008cfe:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8008d02:	d901      	bls.n	8008d08 <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 8008d04:	2303      	movs	r3, #3
 8008d06:	e007      	b.n	8008d18 <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8008d08:	4b06      	ldr	r3, [pc, #24]	; (8008d24 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008d0a:	685b      	ldr	r3, [r3, #4]
 8008d0c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d10:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 8008d14:	d1ee      	bne.n	8008cf4 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 8008d16:	2300      	movs	r3, #0
}
 8008d18:	4618      	mov	r0, r3
 8008d1a:	3708      	adds	r7, #8
 8008d1c:	46bd      	mov	sp, r7
 8008d1e:	bd80      	pop	{r7, pc}
 8008d20:	40023800 	.word	0x40023800
 8008d24:	40007000 	.word	0x40007000

08008d28 <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008d28:	b580      	push	{r7, lr}
 8008d2a:	b086      	sub	sp, #24
 8008d2c:	af00      	add	r7, sp, #0
 8008d2e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008d30:	2300      	movs	r3, #0
 8008d32:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d101      	bne.n	8008d3e <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 8008d3a:	2301      	movs	r3, #1
 8008d3c:	e291      	b.n	8009262 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	681b      	ldr	r3, [r3, #0]
 8008d42:	f003 0301 	and.w	r3, r3, #1
 8008d46:	2b00      	cmp	r3, #0
 8008d48:	f000 8087 	beq.w	8008e5a <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008d4c:	4b96      	ldr	r3, [pc, #600]	; (8008fa8 <HAL_RCC_OscConfig+0x280>)
 8008d4e:	689b      	ldr	r3, [r3, #8]
 8008d50:	f003 030c 	and.w	r3, r3, #12
 8008d54:	2b04      	cmp	r3, #4
 8008d56:	d00c      	beq.n	8008d72 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008d58:	4b93      	ldr	r3, [pc, #588]	; (8008fa8 <HAL_RCC_OscConfig+0x280>)
 8008d5a:	689b      	ldr	r3, [r3, #8]
 8008d5c:	f003 030c 	and.w	r3, r3, #12
 8008d60:	2b08      	cmp	r3, #8
 8008d62:	d112      	bne.n	8008d8a <HAL_RCC_OscConfig+0x62>
 8008d64:	4b90      	ldr	r3, [pc, #576]	; (8008fa8 <HAL_RCC_OscConfig+0x280>)
 8008d66:	685b      	ldr	r3, [r3, #4]
 8008d68:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008d6c:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008d70:	d10b      	bne.n	8008d8a <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008d72:	4b8d      	ldr	r3, [pc, #564]	; (8008fa8 <HAL_RCC_OscConfig+0x280>)
 8008d74:	681b      	ldr	r3, [r3, #0]
 8008d76:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008d7a:	2b00      	cmp	r3, #0
 8008d7c:	d06c      	beq.n	8008e58 <HAL_RCC_OscConfig+0x130>
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	685b      	ldr	r3, [r3, #4]
 8008d82:	2b00      	cmp	r3, #0
 8008d84:	d168      	bne.n	8008e58 <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 8008d86:	2301      	movs	r3, #1
 8008d88:	e26b      	b.n	8009262 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008d8a:	687b      	ldr	r3, [r7, #4]
 8008d8c:	685b      	ldr	r3, [r3, #4]
 8008d8e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008d92:	d106      	bne.n	8008da2 <HAL_RCC_OscConfig+0x7a>
 8008d94:	4b84      	ldr	r3, [pc, #528]	; (8008fa8 <HAL_RCC_OscConfig+0x280>)
 8008d96:	681b      	ldr	r3, [r3, #0]
 8008d98:	4a83      	ldr	r2, [pc, #524]	; (8008fa8 <HAL_RCC_OscConfig+0x280>)
 8008d9a:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008d9e:	6013      	str	r3, [r2, #0]
 8008da0:	e02e      	b.n	8008e00 <HAL_RCC_OscConfig+0xd8>
 8008da2:	687b      	ldr	r3, [r7, #4]
 8008da4:	685b      	ldr	r3, [r3, #4]
 8008da6:	2b00      	cmp	r3, #0
 8008da8:	d10c      	bne.n	8008dc4 <HAL_RCC_OscConfig+0x9c>
 8008daa:	4b7f      	ldr	r3, [pc, #508]	; (8008fa8 <HAL_RCC_OscConfig+0x280>)
 8008dac:	681b      	ldr	r3, [r3, #0]
 8008dae:	4a7e      	ldr	r2, [pc, #504]	; (8008fa8 <HAL_RCC_OscConfig+0x280>)
 8008db0:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008db4:	6013      	str	r3, [r2, #0]
 8008db6:	4b7c      	ldr	r3, [pc, #496]	; (8008fa8 <HAL_RCC_OscConfig+0x280>)
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	4a7b      	ldr	r2, [pc, #492]	; (8008fa8 <HAL_RCC_OscConfig+0x280>)
 8008dbc:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008dc0:	6013      	str	r3, [r2, #0]
 8008dc2:	e01d      	b.n	8008e00 <HAL_RCC_OscConfig+0xd8>
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	685b      	ldr	r3, [r3, #4]
 8008dc8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008dcc:	d10c      	bne.n	8008de8 <HAL_RCC_OscConfig+0xc0>
 8008dce:	4b76      	ldr	r3, [pc, #472]	; (8008fa8 <HAL_RCC_OscConfig+0x280>)
 8008dd0:	681b      	ldr	r3, [r3, #0]
 8008dd2:	4a75      	ldr	r2, [pc, #468]	; (8008fa8 <HAL_RCC_OscConfig+0x280>)
 8008dd4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8008dd8:	6013      	str	r3, [r2, #0]
 8008dda:	4b73      	ldr	r3, [pc, #460]	; (8008fa8 <HAL_RCC_OscConfig+0x280>)
 8008ddc:	681b      	ldr	r3, [r3, #0]
 8008dde:	4a72      	ldr	r2, [pc, #456]	; (8008fa8 <HAL_RCC_OscConfig+0x280>)
 8008de0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008de4:	6013      	str	r3, [r2, #0]
 8008de6:	e00b      	b.n	8008e00 <HAL_RCC_OscConfig+0xd8>
 8008de8:	4b6f      	ldr	r3, [pc, #444]	; (8008fa8 <HAL_RCC_OscConfig+0x280>)
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	4a6e      	ldr	r2, [pc, #440]	; (8008fa8 <HAL_RCC_OscConfig+0x280>)
 8008dee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008df2:	6013      	str	r3, [r2, #0]
 8008df4:	4b6c      	ldr	r3, [pc, #432]	; (8008fa8 <HAL_RCC_OscConfig+0x280>)
 8008df6:	681b      	ldr	r3, [r3, #0]
 8008df8:	4a6b      	ldr	r2, [pc, #428]	; (8008fa8 <HAL_RCC_OscConfig+0x280>)
 8008dfa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8008dfe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	685b      	ldr	r3, [r3, #4]
 8008e04:	2b00      	cmp	r3, #0
 8008e06:	d013      	beq.n	8008e30 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e08:	f7fa fb18 	bl	800343c <HAL_GetTick>
 8008e0c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e0e:	e008      	b.n	8008e22 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e10:	f7fa fb14 	bl	800343c <HAL_GetTick>
 8008e14:	4602      	mov	r2, r0
 8008e16:	693b      	ldr	r3, [r7, #16]
 8008e18:	1ad3      	subs	r3, r2, r3
 8008e1a:	2b64      	cmp	r3, #100	; 0x64
 8008e1c:	d901      	bls.n	8008e22 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008e1e:	2303      	movs	r3, #3
 8008e20:	e21f      	b.n	8009262 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008e22:	4b61      	ldr	r3, [pc, #388]	; (8008fa8 <HAL_RCC_OscConfig+0x280>)
 8008e24:	681b      	ldr	r3, [r3, #0]
 8008e26:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d0f0      	beq.n	8008e10 <HAL_RCC_OscConfig+0xe8>
 8008e2e:	e014      	b.n	8008e5a <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008e30:	f7fa fb04 	bl	800343c <HAL_GetTick>
 8008e34:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008e36:	e008      	b.n	8008e4a <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8008e38:	f7fa fb00 	bl	800343c <HAL_GetTick>
 8008e3c:	4602      	mov	r2, r0
 8008e3e:	693b      	ldr	r3, [r7, #16]
 8008e40:	1ad3      	subs	r3, r2, r3
 8008e42:	2b64      	cmp	r3, #100	; 0x64
 8008e44:	d901      	bls.n	8008e4a <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 8008e46:	2303      	movs	r3, #3
 8008e48:	e20b      	b.n	8009262 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008e4a:	4b57      	ldr	r3, [pc, #348]	; (8008fa8 <HAL_RCC_OscConfig+0x280>)
 8008e4c:	681b      	ldr	r3, [r3, #0]
 8008e4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	d1f0      	bne.n	8008e38 <HAL_RCC_OscConfig+0x110>
 8008e56:	e000      	b.n	8008e5a <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008e58:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f003 0302 	and.w	r3, r3, #2
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d069      	beq.n	8008f3a <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 8008e66:	4b50      	ldr	r3, [pc, #320]	; (8008fa8 <HAL_RCC_OscConfig+0x280>)
 8008e68:	689b      	ldr	r3, [r3, #8]
 8008e6a:	f003 030c 	and.w	r3, r3, #12
 8008e6e:	2b00      	cmp	r3, #0
 8008e70:	d00b      	beq.n	8008e8a <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008e72:	4b4d      	ldr	r3, [pc, #308]	; (8008fa8 <HAL_RCC_OscConfig+0x280>)
 8008e74:	689b      	ldr	r3, [r3, #8]
 8008e76:	f003 030c 	and.w	r3, r3, #12
 8008e7a:	2b08      	cmp	r3, #8
 8008e7c:	d11c      	bne.n	8008eb8 <HAL_RCC_OscConfig+0x190>
 8008e7e:	4b4a      	ldr	r3, [pc, #296]	; (8008fa8 <HAL_RCC_OscConfig+0x280>)
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008e86:	2b00      	cmp	r3, #0
 8008e88:	d116      	bne.n	8008eb8 <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008e8a:	4b47      	ldr	r3, [pc, #284]	; (8008fa8 <HAL_RCC_OscConfig+0x280>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	f003 0302 	and.w	r3, r3, #2
 8008e92:	2b00      	cmp	r3, #0
 8008e94:	d005      	beq.n	8008ea2 <HAL_RCC_OscConfig+0x17a>
 8008e96:	687b      	ldr	r3, [r7, #4]
 8008e98:	68db      	ldr	r3, [r3, #12]
 8008e9a:	2b01      	cmp	r3, #1
 8008e9c:	d001      	beq.n	8008ea2 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008e9e:	2301      	movs	r3, #1
 8008ea0:	e1df      	b.n	8009262 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ea2:	4b41      	ldr	r3, [pc, #260]	; (8008fa8 <HAL_RCC_OscConfig+0x280>)
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	691b      	ldr	r3, [r3, #16]
 8008eae:	00db      	lsls	r3, r3, #3
 8008eb0:	493d      	ldr	r1, [pc, #244]	; (8008fa8 <HAL_RCC_OscConfig+0x280>)
 8008eb2:	4313      	orrs	r3, r2
 8008eb4:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008eb6:	e040      	b.n	8008f3a <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	68db      	ldr	r3, [r3, #12]
 8008ebc:	2b00      	cmp	r3, #0
 8008ebe:	d023      	beq.n	8008f08 <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008ec0:	4b39      	ldr	r3, [pc, #228]	; (8008fa8 <HAL_RCC_OscConfig+0x280>)
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a38      	ldr	r2, [pc, #224]	; (8008fa8 <HAL_RCC_OscConfig+0x280>)
 8008ec6:	f043 0301 	orr.w	r3, r3, #1
 8008eca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008ecc:	f7fa fab6 	bl	800343c <HAL_GetTick>
 8008ed0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ed2:	e008      	b.n	8008ee6 <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008ed4:	f7fa fab2 	bl	800343c <HAL_GetTick>
 8008ed8:	4602      	mov	r2, r0
 8008eda:	693b      	ldr	r3, [r7, #16]
 8008edc:	1ad3      	subs	r3, r2, r3
 8008ede:	2b02      	cmp	r3, #2
 8008ee0:	d901      	bls.n	8008ee6 <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 8008ee2:	2303      	movs	r3, #3
 8008ee4:	e1bd      	b.n	8009262 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ee6:	4b30      	ldr	r3, [pc, #192]	; (8008fa8 <HAL_RCC_OscConfig+0x280>)
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	f003 0302 	and.w	r3, r3, #2
 8008eee:	2b00      	cmp	r3, #0
 8008ef0:	d0f0      	beq.n	8008ed4 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008ef2:	4b2d      	ldr	r3, [pc, #180]	; (8008fa8 <HAL_RCC_OscConfig+0x280>)
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	691b      	ldr	r3, [r3, #16]
 8008efe:	00db      	lsls	r3, r3, #3
 8008f00:	4929      	ldr	r1, [pc, #164]	; (8008fa8 <HAL_RCC_OscConfig+0x280>)
 8008f02:	4313      	orrs	r3, r2
 8008f04:	600b      	str	r3, [r1, #0]
 8008f06:	e018      	b.n	8008f3a <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8008f08:	4b27      	ldr	r3, [pc, #156]	; (8008fa8 <HAL_RCC_OscConfig+0x280>)
 8008f0a:	681b      	ldr	r3, [r3, #0]
 8008f0c:	4a26      	ldr	r2, [pc, #152]	; (8008fa8 <HAL_RCC_OscConfig+0x280>)
 8008f0e:	f023 0301 	bic.w	r3, r3, #1
 8008f12:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008f14:	f7fa fa92 	bl	800343c <HAL_GetTick>
 8008f18:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008f1a:	e008      	b.n	8008f2e <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008f1c:	f7fa fa8e 	bl	800343c <HAL_GetTick>
 8008f20:	4602      	mov	r2, r0
 8008f22:	693b      	ldr	r3, [r7, #16]
 8008f24:	1ad3      	subs	r3, r2, r3
 8008f26:	2b02      	cmp	r3, #2
 8008f28:	d901      	bls.n	8008f2e <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 8008f2a:	2303      	movs	r3, #3
 8008f2c:	e199      	b.n	8009262 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008f2e:	4b1e      	ldr	r3, [pc, #120]	; (8008fa8 <HAL_RCC_OscConfig+0x280>)
 8008f30:	681b      	ldr	r3, [r3, #0]
 8008f32:	f003 0302 	and.w	r3, r3, #2
 8008f36:	2b00      	cmp	r3, #0
 8008f38:	d1f0      	bne.n	8008f1c <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f003 0308 	and.w	r3, r3, #8
 8008f42:	2b00      	cmp	r3, #0
 8008f44:	d038      	beq.n	8008fb8 <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	695b      	ldr	r3, [r3, #20]
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d019      	beq.n	8008f82 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008f4e:	4b16      	ldr	r3, [pc, #88]	; (8008fa8 <HAL_RCC_OscConfig+0x280>)
 8008f50:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f52:	4a15      	ldr	r2, [pc, #84]	; (8008fa8 <HAL_RCC_OscConfig+0x280>)
 8008f54:	f043 0301 	orr.w	r3, r3, #1
 8008f58:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f5a:	f7fa fa6f 	bl	800343c <HAL_GetTick>
 8008f5e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008f60:	e008      	b.n	8008f74 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008f62:	f7fa fa6b 	bl	800343c <HAL_GetTick>
 8008f66:	4602      	mov	r2, r0
 8008f68:	693b      	ldr	r3, [r7, #16]
 8008f6a:	1ad3      	subs	r3, r2, r3
 8008f6c:	2b02      	cmp	r3, #2
 8008f6e:	d901      	bls.n	8008f74 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008f70:	2303      	movs	r3, #3
 8008f72:	e176      	b.n	8009262 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008f74:	4b0c      	ldr	r3, [pc, #48]	; (8008fa8 <HAL_RCC_OscConfig+0x280>)
 8008f76:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f78:	f003 0302 	and.w	r3, r3, #2
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d0f0      	beq.n	8008f62 <HAL_RCC_OscConfig+0x23a>
 8008f80:	e01a      	b.n	8008fb8 <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008f82:	4b09      	ldr	r3, [pc, #36]	; (8008fa8 <HAL_RCC_OscConfig+0x280>)
 8008f84:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008f86:	4a08      	ldr	r2, [pc, #32]	; (8008fa8 <HAL_RCC_OscConfig+0x280>)
 8008f88:	f023 0301 	bic.w	r3, r3, #1
 8008f8c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008f8e:	f7fa fa55 	bl	800343c <HAL_GetTick>
 8008f92:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008f94:	e00a      	b.n	8008fac <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008f96:	f7fa fa51 	bl	800343c <HAL_GetTick>
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	693b      	ldr	r3, [r7, #16]
 8008f9e:	1ad3      	subs	r3, r2, r3
 8008fa0:	2b02      	cmp	r3, #2
 8008fa2:	d903      	bls.n	8008fac <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008fa4:	2303      	movs	r3, #3
 8008fa6:	e15c      	b.n	8009262 <HAL_RCC_OscConfig+0x53a>
 8008fa8:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008fac:	4b91      	ldr	r3, [pc, #580]	; (80091f4 <HAL_RCC_OscConfig+0x4cc>)
 8008fae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008fb0:	f003 0302 	and.w	r3, r3, #2
 8008fb4:	2b00      	cmp	r3, #0
 8008fb6:	d1ee      	bne.n	8008f96 <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	681b      	ldr	r3, [r3, #0]
 8008fbc:	f003 0304 	and.w	r3, r3, #4
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	f000 80a4 	beq.w	800910e <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008fc6:	4b8b      	ldr	r3, [pc, #556]	; (80091f4 <HAL_RCC_OscConfig+0x4cc>)
 8008fc8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fce:	2b00      	cmp	r3, #0
 8008fd0:	d10d      	bne.n	8008fee <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 8008fd2:	4b88      	ldr	r3, [pc, #544]	; (80091f4 <HAL_RCC_OscConfig+0x4cc>)
 8008fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fd6:	4a87      	ldr	r2, [pc, #540]	; (80091f4 <HAL_RCC_OscConfig+0x4cc>)
 8008fd8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008fdc:	6413      	str	r3, [r2, #64]	; 0x40
 8008fde:	4b85      	ldr	r3, [pc, #532]	; (80091f4 <HAL_RCC_OscConfig+0x4cc>)
 8008fe0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fe2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008fe6:	60bb      	str	r3, [r7, #8]
 8008fe8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8008fea:	2301      	movs	r3, #1
 8008fec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008fee:	4b82      	ldr	r3, [pc, #520]	; (80091f8 <HAL_RCC_OscConfig+0x4d0>)
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008ff6:	2b00      	cmp	r3, #0
 8008ff8:	d118      	bne.n	800902c <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 8008ffa:	4b7f      	ldr	r3, [pc, #508]	; (80091f8 <HAL_RCC_OscConfig+0x4d0>)
 8008ffc:	681b      	ldr	r3, [r3, #0]
 8008ffe:	4a7e      	ldr	r2, [pc, #504]	; (80091f8 <HAL_RCC_OscConfig+0x4d0>)
 8009000:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009004:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8009006:	f7fa fa19 	bl	800343c <HAL_GetTick>
 800900a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 800900c:	e008      	b.n	8009020 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800900e:	f7fa fa15 	bl	800343c <HAL_GetTick>
 8009012:	4602      	mov	r2, r0
 8009014:	693b      	ldr	r3, [r7, #16]
 8009016:	1ad3      	subs	r3, r2, r3
 8009018:	2b64      	cmp	r3, #100	; 0x64
 800901a:	d901      	bls.n	8009020 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 800901c:	2303      	movs	r3, #3
 800901e:	e120      	b.n	8009262 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8009020:	4b75      	ldr	r3, [pc, #468]	; (80091f8 <HAL_RCC_OscConfig+0x4d0>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009028:	2b00      	cmp	r3, #0
 800902a:	d0f0      	beq.n	800900e <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800902c:	687b      	ldr	r3, [r7, #4]
 800902e:	689b      	ldr	r3, [r3, #8]
 8009030:	2b01      	cmp	r3, #1
 8009032:	d106      	bne.n	8009042 <HAL_RCC_OscConfig+0x31a>
 8009034:	4b6f      	ldr	r3, [pc, #444]	; (80091f4 <HAL_RCC_OscConfig+0x4cc>)
 8009036:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009038:	4a6e      	ldr	r2, [pc, #440]	; (80091f4 <HAL_RCC_OscConfig+0x4cc>)
 800903a:	f043 0301 	orr.w	r3, r3, #1
 800903e:	6713      	str	r3, [r2, #112]	; 0x70
 8009040:	e02d      	b.n	800909e <HAL_RCC_OscConfig+0x376>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	689b      	ldr	r3, [r3, #8]
 8009046:	2b00      	cmp	r3, #0
 8009048:	d10c      	bne.n	8009064 <HAL_RCC_OscConfig+0x33c>
 800904a:	4b6a      	ldr	r3, [pc, #424]	; (80091f4 <HAL_RCC_OscConfig+0x4cc>)
 800904c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800904e:	4a69      	ldr	r2, [pc, #420]	; (80091f4 <HAL_RCC_OscConfig+0x4cc>)
 8009050:	f023 0301 	bic.w	r3, r3, #1
 8009054:	6713      	str	r3, [r2, #112]	; 0x70
 8009056:	4b67      	ldr	r3, [pc, #412]	; (80091f4 <HAL_RCC_OscConfig+0x4cc>)
 8009058:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800905a:	4a66      	ldr	r2, [pc, #408]	; (80091f4 <HAL_RCC_OscConfig+0x4cc>)
 800905c:	f023 0304 	bic.w	r3, r3, #4
 8009060:	6713      	str	r3, [r2, #112]	; 0x70
 8009062:	e01c      	b.n	800909e <HAL_RCC_OscConfig+0x376>
 8009064:	687b      	ldr	r3, [r7, #4]
 8009066:	689b      	ldr	r3, [r3, #8]
 8009068:	2b05      	cmp	r3, #5
 800906a:	d10c      	bne.n	8009086 <HAL_RCC_OscConfig+0x35e>
 800906c:	4b61      	ldr	r3, [pc, #388]	; (80091f4 <HAL_RCC_OscConfig+0x4cc>)
 800906e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009070:	4a60      	ldr	r2, [pc, #384]	; (80091f4 <HAL_RCC_OscConfig+0x4cc>)
 8009072:	f043 0304 	orr.w	r3, r3, #4
 8009076:	6713      	str	r3, [r2, #112]	; 0x70
 8009078:	4b5e      	ldr	r3, [pc, #376]	; (80091f4 <HAL_RCC_OscConfig+0x4cc>)
 800907a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800907c:	4a5d      	ldr	r2, [pc, #372]	; (80091f4 <HAL_RCC_OscConfig+0x4cc>)
 800907e:	f043 0301 	orr.w	r3, r3, #1
 8009082:	6713      	str	r3, [r2, #112]	; 0x70
 8009084:	e00b      	b.n	800909e <HAL_RCC_OscConfig+0x376>
 8009086:	4b5b      	ldr	r3, [pc, #364]	; (80091f4 <HAL_RCC_OscConfig+0x4cc>)
 8009088:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800908a:	4a5a      	ldr	r2, [pc, #360]	; (80091f4 <HAL_RCC_OscConfig+0x4cc>)
 800908c:	f023 0301 	bic.w	r3, r3, #1
 8009090:	6713      	str	r3, [r2, #112]	; 0x70
 8009092:	4b58      	ldr	r3, [pc, #352]	; (80091f4 <HAL_RCC_OscConfig+0x4cc>)
 8009094:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009096:	4a57      	ldr	r2, [pc, #348]	; (80091f4 <HAL_RCC_OscConfig+0x4cc>)
 8009098:	f023 0304 	bic.w	r3, r3, #4
 800909c:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800909e:	687b      	ldr	r3, [r7, #4]
 80090a0:	689b      	ldr	r3, [r3, #8]
 80090a2:	2b00      	cmp	r3, #0
 80090a4:	d015      	beq.n	80090d2 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090a6:	f7fa f9c9 	bl	800343c <HAL_GetTick>
 80090aa:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80090ac:	e00a      	b.n	80090c4 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80090ae:	f7fa f9c5 	bl	800343c <HAL_GetTick>
 80090b2:	4602      	mov	r2, r0
 80090b4:	693b      	ldr	r3, [r7, #16]
 80090b6:	1ad3      	subs	r3, r2, r3
 80090b8:	f241 3288 	movw	r2, #5000	; 0x1388
 80090bc:	4293      	cmp	r3, r2
 80090be:	d901      	bls.n	80090c4 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80090c0:	2303      	movs	r3, #3
 80090c2:	e0ce      	b.n	8009262 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80090c4:	4b4b      	ldr	r3, [pc, #300]	; (80091f4 <HAL_RCC_OscConfig+0x4cc>)
 80090c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090c8:	f003 0302 	and.w	r3, r3, #2
 80090cc:	2b00      	cmp	r3, #0
 80090ce:	d0ee      	beq.n	80090ae <HAL_RCC_OscConfig+0x386>
 80090d0:	e014      	b.n	80090fc <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80090d2:	f7fa f9b3 	bl	800343c <HAL_GetTick>
 80090d6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80090d8:	e00a      	b.n	80090f0 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80090da:	f7fa f9af 	bl	800343c <HAL_GetTick>
 80090de:	4602      	mov	r2, r0
 80090e0:	693b      	ldr	r3, [r7, #16]
 80090e2:	1ad3      	subs	r3, r2, r3
 80090e4:	f241 3288 	movw	r2, #5000	; 0x1388
 80090e8:	4293      	cmp	r3, r2
 80090ea:	d901      	bls.n	80090f0 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80090ec:	2303      	movs	r3, #3
 80090ee:	e0b8      	b.n	8009262 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80090f0:	4b40      	ldr	r3, [pc, #256]	; (80091f4 <HAL_RCC_OscConfig+0x4cc>)
 80090f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090f4:	f003 0302 	and.w	r3, r3, #2
 80090f8:	2b00      	cmp	r3, #0
 80090fa:	d1ee      	bne.n	80090da <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80090fc:	7dfb      	ldrb	r3, [r7, #23]
 80090fe:	2b01      	cmp	r3, #1
 8009100:	d105      	bne.n	800910e <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8009102:	4b3c      	ldr	r3, [pc, #240]	; (80091f4 <HAL_RCC_OscConfig+0x4cc>)
 8009104:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009106:	4a3b      	ldr	r2, [pc, #236]	; (80091f4 <HAL_RCC_OscConfig+0x4cc>)
 8009108:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800910c:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	699b      	ldr	r3, [r3, #24]
 8009112:	2b00      	cmp	r3, #0
 8009114:	f000 80a4 	beq.w	8009260 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8009118:	4b36      	ldr	r3, [pc, #216]	; (80091f4 <HAL_RCC_OscConfig+0x4cc>)
 800911a:	689b      	ldr	r3, [r3, #8]
 800911c:	f003 030c 	and.w	r3, r3, #12
 8009120:	2b08      	cmp	r3, #8
 8009122:	d06b      	beq.n	80091fc <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	699b      	ldr	r3, [r3, #24]
 8009128:	2b02      	cmp	r3, #2
 800912a:	d149      	bne.n	80091c0 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800912c:	4b31      	ldr	r3, [pc, #196]	; (80091f4 <HAL_RCC_OscConfig+0x4cc>)
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	4a30      	ldr	r2, [pc, #192]	; (80091f4 <HAL_RCC_OscConfig+0x4cc>)
 8009132:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009136:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009138:	f7fa f980 	bl	800343c <HAL_GetTick>
 800913c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800913e:	e008      	b.n	8009152 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8009140:	f7fa f97c 	bl	800343c <HAL_GetTick>
 8009144:	4602      	mov	r2, r0
 8009146:	693b      	ldr	r3, [r7, #16]
 8009148:	1ad3      	subs	r3, r2, r3
 800914a:	2b02      	cmp	r3, #2
 800914c:	d901      	bls.n	8009152 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 800914e:	2303      	movs	r3, #3
 8009150:	e087      	b.n	8009262 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8009152:	4b28      	ldr	r3, [pc, #160]	; (80091f4 <HAL_RCC_OscConfig+0x4cc>)
 8009154:	681b      	ldr	r3, [r3, #0]
 8009156:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800915a:	2b00      	cmp	r3, #0
 800915c:	d1f0      	bne.n	8009140 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 800915e:	687b      	ldr	r3, [r7, #4]
 8009160:	69da      	ldr	r2, [r3, #28]
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	6a1b      	ldr	r3, [r3, #32]
 8009166:	431a      	orrs	r2, r3
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800916c:	019b      	lsls	r3, r3, #6
 800916e:	431a      	orrs	r2, r3
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009174:	085b      	lsrs	r3, r3, #1
 8009176:	3b01      	subs	r3, #1
 8009178:	041b      	lsls	r3, r3, #16
 800917a:	431a      	orrs	r2, r3
 800917c:	687b      	ldr	r3, [r7, #4]
 800917e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009180:	061b      	lsls	r3, r3, #24
 8009182:	4313      	orrs	r3, r2
 8009184:	4a1b      	ldr	r2, [pc, #108]	; (80091f4 <HAL_RCC_OscConfig+0x4cc>)
 8009186:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800918a:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800918c:	4b19      	ldr	r3, [pc, #100]	; (80091f4 <HAL_RCC_OscConfig+0x4cc>)
 800918e:	681b      	ldr	r3, [r3, #0]
 8009190:	4a18      	ldr	r2, [pc, #96]	; (80091f4 <HAL_RCC_OscConfig+0x4cc>)
 8009192:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8009196:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009198:	f7fa f950 	bl	800343c <HAL_GetTick>
 800919c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800919e:	e008      	b.n	80091b2 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80091a0:	f7fa f94c 	bl	800343c <HAL_GetTick>
 80091a4:	4602      	mov	r2, r0
 80091a6:	693b      	ldr	r3, [r7, #16]
 80091a8:	1ad3      	subs	r3, r2, r3
 80091aa:	2b02      	cmp	r3, #2
 80091ac:	d901      	bls.n	80091b2 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 80091ae:	2303      	movs	r3, #3
 80091b0:	e057      	b.n	8009262 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80091b2:	4b10      	ldr	r3, [pc, #64]	; (80091f4 <HAL_RCC_OscConfig+0x4cc>)
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d0f0      	beq.n	80091a0 <HAL_RCC_OscConfig+0x478>
 80091be:	e04f      	b.n	8009260 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80091c0:	4b0c      	ldr	r3, [pc, #48]	; (80091f4 <HAL_RCC_OscConfig+0x4cc>)
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	4a0b      	ldr	r2, [pc, #44]	; (80091f4 <HAL_RCC_OscConfig+0x4cc>)
 80091c6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80091ca:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80091cc:	f7fa f936 	bl	800343c <HAL_GetTick>
 80091d0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80091d2:	e008      	b.n	80091e6 <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80091d4:	f7fa f932 	bl	800343c <HAL_GetTick>
 80091d8:	4602      	mov	r2, r0
 80091da:	693b      	ldr	r3, [r7, #16]
 80091dc:	1ad3      	subs	r3, r2, r3
 80091de:	2b02      	cmp	r3, #2
 80091e0:	d901      	bls.n	80091e6 <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80091e2:	2303      	movs	r3, #3
 80091e4:	e03d      	b.n	8009262 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80091e6:	4b03      	ldr	r3, [pc, #12]	; (80091f4 <HAL_RCC_OscConfig+0x4cc>)
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80091ee:	2b00      	cmp	r3, #0
 80091f0:	d1f0      	bne.n	80091d4 <HAL_RCC_OscConfig+0x4ac>
 80091f2:	e035      	b.n	8009260 <HAL_RCC_OscConfig+0x538>
 80091f4:	40023800 	.word	0x40023800
 80091f8:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80091fc:	4b1b      	ldr	r3, [pc, #108]	; (800926c <HAL_RCC_OscConfig+0x544>)
 80091fe:	685b      	ldr	r3, [r3, #4]
 8009200:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009202:	687b      	ldr	r3, [r7, #4]
 8009204:	699b      	ldr	r3, [r3, #24]
 8009206:	2b01      	cmp	r3, #1
 8009208:	d028      	beq.n	800925c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800920a:	68fb      	ldr	r3, [r7, #12]
 800920c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8009210:	687b      	ldr	r3, [r7, #4]
 8009212:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8009214:	429a      	cmp	r2, r3
 8009216:	d121      	bne.n	800925c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009218:	68fb      	ldr	r3, [r7, #12]
 800921a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800921e:	687b      	ldr	r3, [r7, #4]
 8009220:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8009222:	429a      	cmp	r2, r3
 8009224:	d11a      	bne.n	800925c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009226:	68fa      	ldr	r2, [r7, #12]
 8009228:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 800922c:	4013      	ands	r3, r2
 800922e:	687a      	ldr	r2, [r7, #4]
 8009230:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8009232:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8009234:	4293      	cmp	r3, r2
 8009236:	d111      	bne.n	800925c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009238:	68fb      	ldr	r3, [r7, #12]
 800923a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009242:	085b      	lsrs	r3, r3, #1
 8009244:	3b01      	subs	r3, #1
 8009246:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8009248:	429a      	cmp	r2, r3
 800924a:	d107      	bne.n	800925c <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 800924c:	68fb      	ldr	r3, [r7, #12]
 800924e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009256:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8009258:	429a      	cmp	r2, r3
 800925a:	d001      	beq.n	8009260 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 800925c:	2301      	movs	r3, #1
 800925e:	e000      	b.n	8009262 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8009260:	2300      	movs	r3, #0
}
 8009262:	4618      	mov	r0, r3
 8009264:	3718      	adds	r7, #24
 8009266:	46bd      	mov	sp, r7
 8009268:	bd80      	pop	{r7, pc}
 800926a:	bf00      	nop
 800926c:	40023800 	.word	0x40023800

08009270 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8009270:	b580      	push	{r7, lr}
 8009272:	b084      	sub	sp, #16
 8009274:	af00      	add	r7, sp, #0
 8009276:	6078      	str	r0, [r7, #4]
 8009278:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800927a:	2300      	movs	r3, #0
 800927c:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800927e:	687b      	ldr	r3, [r7, #4]
 8009280:	2b00      	cmp	r3, #0
 8009282:	d101      	bne.n	8009288 <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8009284:	2301      	movs	r3, #1
 8009286:	e0d0      	b.n	800942a <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8009288:	4b6a      	ldr	r3, [pc, #424]	; (8009434 <HAL_RCC_ClockConfig+0x1c4>)
 800928a:	681b      	ldr	r3, [r3, #0]
 800928c:	f003 030f 	and.w	r3, r3, #15
 8009290:	683a      	ldr	r2, [r7, #0]
 8009292:	429a      	cmp	r2, r3
 8009294:	d910      	bls.n	80092b8 <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8009296:	4b67      	ldr	r3, [pc, #412]	; (8009434 <HAL_RCC_ClockConfig+0x1c4>)
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	f023 020f 	bic.w	r2, r3, #15
 800929e:	4965      	ldr	r1, [pc, #404]	; (8009434 <HAL_RCC_ClockConfig+0x1c4>)
 80092a0:	683b      	ldr	r3, [r7, #0]
 80092a2:	4313      	orrs	r3, r2
 80092a4:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80092a6:	4b63      	ldr	r3, [pc, #396]	; (8009434 <HAL_RCC_ClockConfig+0x1c4>)
 80092a8:	681b      	ldr	r3, [r3, #0]
 80092aa:	f003 030f 	and.w	r3, r3, #15
 80092ae:	683a      	ldr	r2, [r7, #0]
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d001      	beq.n	80092b8 <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 80092b4:	2301      	movs	r3, #1
 80092b6:	e0b8      	b.n	800942a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	f003 0302 	and.w	r3, r3, #2
 80092c0:	2b00      	cmp	r3, #0
 80092c2:	d020      	beq.n	8009306 <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f003 0304 	and.w	r3, r3, #4
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d005      	beq.n	80092dc <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80092d0:	4b59      	ldr	r3, [pc, #356]	; (8009438 <HAL_RCC_ClockConfig+0x1c8>)
 80092d2:	689b      	ldr	r3, [r3, #8]
 80092d4:	4a58      	ldr	r2, [pc, #352]	; (8009438 <HAL_RCC_ClockConfig+0x1c8>)
 80092d6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80092da:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	f003 0308 	and.w	r3, r3, #8
 80092e4:	2b00      	cmp	r3, #0
 80092e6:	d005      	beq.n	80092f4 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80092e8:	4b53      	ldr	r3, [pc, #332]	; (8009438 <HAL_RCC_ClockConfig+0x1c8>)
 80092ea:	689b      	ldr	r3, [r3, #8]
 80092ec:	4a52      	ldr	r2, [pc, #328]	; (8009438 <HAL_RCC_ClockConfig+0x1c8>)
 80092ee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80092f2:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80092f4:	4b50      	ldr	r3, [pc, #320]	; (8009438 <HAL_RCC_ClockConfig+0x1c8>)
 80092f6:	689b      	ldr	r3, [r3, #8]
 80092f8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	689b      	ldr	r3, [r3, #8]
 8009300:	494d      	ldr	r1, [pc, #308]	; (8009438 <HAL_RCC_ClockConfig+0x1c8>)
 8009302:	4313      	orrs	r3, r2
 8009304:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8009306:	687b      	ldr	r3, [r7, #4]
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	f003 0301 	and.w	r3, r3, #1
 800930e:	2b00      	cmp	r3, #0
 8009310:	d040      	beq.n	8009394 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8009312:	687b      	ldr	r3, [r7, #4]
 8009314:	685b      	ldr	r3, [r3, #4]
 8009316:	2b01      	cmp	r3, #1
 8009318:	d107      	bne.n	800932a <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800931a:	4b47      	ldr	r3, [pc, #284]	; (8009438 <HAL_RCC_ClockConfig+0x1c8>)
 800931c:	681b      	ldr	r3, [r3, #0]
 800931e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8009322:	2b00      	cmp	r3, #0
 8009324:	d115      	bne.n	8009352 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8009326:	2301      	movs	r3, #1
 8009328:	e07f      	b.n	800942a <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	685b      	ldr	r3, [r3, #4]
 800932e:	2b02      	cmp	r3, #2
 8009330:	d107      	bne.n	8009342 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8009332:	4b41      	ldr	r3, [pc, #260]	; (8009438 <HAL_RCC_ClockConfig+0x1c8>)
 8009334:	681b      	ldr	r3, [r3, #0]
 8009336:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800933a:	2b00      	cmp	r3, #0
 800933c:	d109      	bne.n	8009352 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800933e:	2301      	movs	r3, #1
 8009340:	e073      	b.n	800942a <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8009342:	4b3d      	ldr	r3, [pc, #244]	; (8009438 <HAL_RCC_ClockConfig+0x1c8>)
 8009344:	681b      	ldr	r3, [r3, #0]
 8009346:	f003 0302 	and.w	r3, r3, #2
 800934a:	2b00      	cmp	r3, #0
 800934c:	d101      	bne.n	8009352 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 800934e:	2301      	movs	r3, #1
 8009350:	e06b      	b.n	800942a <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8009352:	4b39      	ldr	r3, [pc, #228]	; (8009438 <HAL_RCC_ClockConfig+0x1c8>)
 8009354:	689b      	ldr	r3, [r3, #8]
 8009356:	f023 0203 	bic.w	r2, r3, #3
 800935a:	687b      	ldr	r3, [r7, #4]
 800935c:	685b      	ldr	r3, [r3, #4]
 800935e:	4936      	ldr	r1, [pc, #216]	; (8009438 <HAL_RCC_ClockConfig+0x1c8>)
 8009360:	4313      	orrs	r3, r2
 8009362:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009364:	f7fa f86a 	bl	800343c <HAL_GetTick>
 8009368:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800936a:	e00a      	b.n	8009382 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800936c:	f7fa f866 	bl	800343c <HAL_GetTick>
 8009370:	4602      	mov	r2, r0
 8009372:	68fb      	ldr	r3, [r7, #12]
 8009374:	1ad3      	subs	r3, r2, r3
 8009376:	f241 3288 	movw	r2, #5000	; 0x1388
 800937a:	4293      	cmp	r3, r2
 800937c:	d901      	bls.n	8009382 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 800937e:	2303      	movs	r3, #3
 8009380:	e053      	b.n	800942a <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8009382:	4b2d      	ldr	r3, [pc, #180]	; (8009438 <HAL_RCC_ClockConfig+0x1c8>)
 8009384:	689b      	ldr	r3, [r3, #8]
 8009386:	f003 020c 	and.w	r2, r3, #12
 800938a:	687b      	ldr	r3, [r7, #4]
 800938c:	685b      	ldr	r3, [r3, #4]
 800938e:	009b      	lsls	r3, r3, #2
 8009390:	429a      	cmp	r2, r3
 8009392:	d1eb      	bne.n	800936c <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8009394:	4b27      	ldr	r3, [pc, #156]	; (8009434 <HAL_RCC_ClockConfig+0x1c4>)
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	f003 030f 	and.w	r3, r3, #15
 800939c:	683a      	ldr	r2, [r7, #0]
 800939e:	429a      	cmp	r2, r3
 80093a0:	d210      	bcs.n	80093c4 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80093a2:	4b24      	ldr	r3, [pc, #144]	; (8009434 <HAL_RCC_ClockConfig+0x1c4>)
 80093a4:	681b      	ldr	r3, [r3, #0]
 80093a6:	f023 020f 	bic.w	r2, r3, #15
 80093aa:	4922      	ldr	r1, [pc, #136]	; (8009434 <HAL_RCC_ClockConfig+0x1c4>)
 80093ac:	683b      	ldr	r3, [r7, #0]
 80093ae:	4313      	orrs	r3, r2
 80093b0:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 80093b2:	4b20      	ldr	r3, [pc, #128]	; (8009434 <HAL_RCC_ClockConfig+0x1c4>)
 80093b4:	681b      	ldr	r3, [r3, #0]
 80093b6:	f003 030f 	and.w	r3, r3, #15
 80093ba:	683a      	ldr	r2, [r7, #0]
 80093bc:	429a      	cmp	r2, r3
 80093be:	d001      	beq.n	80093c4 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 80093c0:	2301      	movs	r3, #1
 80093c2:	e032      	b.n	800942a <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	681b      	ldr	r3, [r3, #0]
 80093c8:	f003 0304 	and.w	r3, r3, #4
 80093cc:	2b00      	cmp	r3, #0
 80093ce:	d008      	beq.n	80093e2 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80093d0:	4b19      	ldr	r3, [pc, #100]	; (8009438 <HAL_RCC_ClockConfig+0x1c8>)
 80093d2:	689b      	ldr	r3, [r3, #8]
 80093d4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	68db      	ldr	r3, [r3, #12]
 80093dc:	4916      	ldr	r1, [pc, #88]	; (8009438 <HAL_RCC_ClockConfig+0x1c8>)
 80093de:	4313      	orrs	r3, r2
 80093e0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80093e2:	687b      	ldr	r3, [r7, #4]
 80093e4:	681b      	ldr	r3, [r3, #0]
 80093e6:	f003 0308 	and.w	r3, r3, #8
 80093ea:	2b00      	cmp	r3, #0
 80093ec:	d009      	beq.n	8009402 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 80093ee:	4b12      	ldr	r3, [pc, #72]	; (8009438 <HAL_RCC_ClockConfig+0x1c8>)
 80093f0:	689b      	ldr	r3, [r3, #8]
 80093f2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	691b      	ldr	r3, [r3, #16]
 80093fa:	00db      	lsls	r3, r3, #3
 80093fc:	490e      	ldr	r1, [pc, #56]	; (8009438 <HAL_RCC_ClockConfig+0x1c8>)
 80093fe:	4313      	orrs	r3, r2
 8009400:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8009402:	f000 f821 	bl	8009448 <HAL_RCC_GetSysClockFreq>
 8009406:	4602      	mov	r2, r0
 8009408:	4b0b      	ldr	r3, [pc, #44]	; (8009438 <HAL_RCC_ClockConfig+0x1c8>)
 800940a:	689b      	ldr	r3, [r3, #8]
 800940c:	091b      	lsrs	r3, r3, #4
 800940e:	f003 030f 	and.w	r3, r3, #15
 8009412:	490a      	ldr	r1, [pc, #40]	; (800943c <HAL_RCC_ClockConfig+0x1cc>)
 8009414:	5ccb      	ldrb	r3, [r1, r3]
 8009416:	fa22 f303 	lsr.w	r3, r2, r3
 800941a:	4a09      	ldr	r2, [pc, #36]	; (8009440 <HAL_RCC_ClockConfig+0x1d0>)
 800941c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 800941e:	4b09      	ldr	r3, [pc, #36]	; (8009444 <HAL_RCC_ClockConfig+0x1d4>)
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	4618      	mov	r0, r3
 8009424:	f7f8 fd36 	bl	8001e94 <HAL_InitTick>

  return HAL_OK;
 8009428:	2300      	movs	r3, #0
}
 800942a:	4618      	mov	r0, r3
 800942c:	3710      	adds	r7, #16
 800942e:	46bd      	mov	sp, r7
 8009430:	bd80      	pop	{r7, pc}
 8009432:	bf00      	nop
 8009434:	40023c00 	.word	0x40023c00
 8009438:	40023800 	.word	0x40023800
 800943c:	080217d4 	.word	0x080217d4
 8009440:	20000000 	.word	0x20000000
 8009444:	20000004 	.word	0x20000004

08009448 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8009448:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800944c:	b094      	sub	sp, #80	; 0x50
 800944e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8009450:	2300      	movs	r3, #0
 8009452:	647b      	str	r3, [r7, #68]	; 0x44
 8009454:	2300      	movs	r3, #0
 8009456:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009458:	2300      	movs	r3, #0
 800945a:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 800945c:	2300      	movs	r3, #0
 800945e:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8009460:	4b79      	ldr	r3, [pc, #484]	; (8009648 <HAL_RCC_GetSysClockFreq+0x200>)
 8009462:	689b      	ldr	r3, [r3, #8]
 8009464:	f003 030c 	and.w	r3, r3, #12
 8009468:	2b08      	cmp	r3, #8
 800946a:	d00d      	beq.n	8009488 <HAL_RCC_GetSysClockFreq+0x40>
 800946c:	2b08      	cmp	r3, #8
 800946e:	f200 80e1 	bhi.w	8009634 <HAL_RCC_GetSysClockFreq+0x1ec>
 8009472:	2b00      	cmp	r3, #0
 8009474:	d002      	beq.n	800947c <HAL_RCC_GetSysClockFreq+0x34>
 8009476:	2b04      	cmp	r3, #4
 8009478:	d003      	beq.n	8009482 <HAL_RCC_GetSysClockFreq+0x3a>
 800947a:	e0db      	b.n	8009634 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800947c:	4b73      	ldr	r3, [pc, #460]	; (800964c <HAL_RCC_GetSysClockFreq+0x204>)
 800947e:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009480:	e0db      	b.n	800963a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8009482:	4b73      	ldr	r3, [pc, #460]	; (8009650 <HAL_RCC_GetSysClockFreq+0x208>)
 8009484:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009486:	e0d8      	b.n	800963a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8009488:	4b6f      	ldr	r3, [pc, #444]	; (8009648 <HAL_RCC_GetSysClockFreq+0x200>)
 800948a:	685b      	ldr	r3, [r3, #4]
 800948c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8009490:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8009492:	4b6d      	ldr	r3, [pc, #436]	; (8009648 <HAL_RCC_GetSysClockFreq+0x200>)
 8009494:	685b      	ldr	r3, [r3, #4]
 8009496:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800949a:	2b00      	cmp	r3, #0
 800949c:	d063      	beq.n	8009566 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800949e:	4b6a      	ldr	r3, [pc, #424]	; (8009648 <HAL_RCC_GetSysClockFreq+0x200>)
 80094a0:	685b      	ldr	r3, [r3, #4]
 80094a2:	099b      	lsrs	r3, r3, #6
 80094a4:	2200      	movs	r2, #0
 80094a6:	63bb      	str	r3, [r7, #56]	; 0x38
 80094a8:	63fa      	str	r2, [r7, #60]	; 0x3c
 80094aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80094ac:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80094b0:	633b      	str	r3, [r7, #48]	; 0x30
 80094b2:	2300      	movs	r3, #0
 80094b4:	637b      	str	r3, [r7, #52]	; 0x34
 80094b6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 80094ba:	4622      	mov	r2, r4
 80094bc:	462b      	mov	r3, r5
 80094be:	f04f 0000 	mov.w	r0, #0
 80094c2:	f04f 0100 	mov.w	r1, #0
 80094c6:	0159      	lsls	r1, r3, #5
 80094c8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80094cc:	0150      	lsls	r0, r2, #5
 80094ce:	4602      	mov	r2, r0
 80094d0:	460b      	mov	r3, r1
 80094d2:	4621      	mov	r1, r4
 80094d4:	1a51      	subs	r1, r2, r1
 80094d6:	6139      	str	r1, [r7, #16]
 80094d8:	4629      	mov	r1, r5
 80094da:	eb63 0301 	sbc.w	r3, r3, r1
 80094de:	617b      	str	r3, [r7, #20]
 80094e0:	f04f 0200 	mov.w	r2, #0
 80094e4:	f04f 0300 	mov.w	r3, #0
 80094e8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80094ec:	4659      	mov	r1, fp
 80094ee:	018b      	lsls	r3, r1, #6
 80094f0:	4651      	mov	r1, sl
 80094f2:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80094f6:	4651      	mov	r1, sl
 80094f8:	018a      	lsls	r2, r1, #6
 80094fa:	4651      	mov	r1, sl
 80094fc:	ebb2 0801 	subs.w	r8, r2, r1
 8009500:	4659      	mov	r1, fp
 8009502:	eb63 0901 	sbc.w	r9, r3, r1
 8009506:	f04f 0200 	mov.w	r2, #0
 800950a:	f04f 0300 	mov.w	r3, #0
 800950e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009512:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009516:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800951a:	4690      	mov	r8, r2
 800951c:	4699      	mov	r9, r3
 800951e:	4623      	mov	r3, r4
 8009520:	eb18 0303 	adds.w	r3, r8, r3
 8009524:	60bb      	str	r3, [r7, #8]
 8009526:	462b      	mov	r3, r5
 8009528:	eb49 0303 	adc.w	r3, r9, r3
 800952c:	60fb      	str	r3, [r7, #12]
 800952e:	f04f 0200 	mov.w	r2, #0
 8009532:	f04f 0300 	mov.w	r3, #0
 8009536:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800953a:	4629      	mov	r1, r5
 800953c:	024b      	lsls	r3, r1, #9
 800953e:	4621      	mov	r1, r4
 8009540:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8009544:	4621      	mov	r1, r4
 8009546:	024a      	lsls	r2, r1, #9
 8009548:	4610      	mov	r0, r2
 800954a:	4619      	mov	r1, r3
 800954c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800954e:	2200      	movs	r2, #0
 8009550:	62bb      	str	r3, [r7, #40]	; 0x28
 8009552:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009554:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009558:	f7f6 feaa 	bl	80002b0 <__aeabi_uldivmod>
 800955c:	4602      	mov	r2, r0
 800955e:	460b      	mov	r3, r1
 8009560:	4613      	mov	r3, r2
 8009562:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009564:	e058      	b.n	8009618 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8009566:	4b38      	ldr	r3, [pc, #224]	; (8009648 <HAL_RCC_GetSysClockFreq+0x200>)
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	099b      	lsrs	r3, r3, #6
 800956c:	2200      	movs	r2, #0
 800956e:	4618      	mov	r0, r3
 8009570:	4611      	mov	r1, r2
 8009572:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8009576:	623b      	str	r3, [r7, #32]
 8009578:	2300      	movs	r3, #0
 800957a:	627b      	str	r3, [r7, #36]	; 0x24
 800957c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8009580:	4642      	mov	r2, r8
 8009582:	464b      	mov	r3, r9
 8009584:	f04f 0000 	mov.w	r0, #0
 8009588:	f04f 0100 	mov.w	r1, #0
 800958c:	0159      	lsls	r1, r3, #5
 800958e:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8009592:	0150      	lsls	r0, r2, #5
 8009594:	4602      	mov	r2, r0
 8009596:	460b      	mov	r3, r1
 8009598:	4641      	mov	r1, r8
 800959a:	ebb2 0a01 	subs.w	sl, r2, r1
 800959e:	4649      	mov	r1, r9
 80095a0:	eb63 0b01 	sbc.w	fp, r3, r1
 80095a4:	f04f 0200 	mov.w	r2, #0
 80095a8:	f04f 0300 	mov.w	r3, #0
 80095ac:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80095b0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80095b4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80095b8:	ebb2 040a 	subs.w	r4, r2, sl
 80095bc:	eb63 050b 	sbc.w	r5, r3, fp
 80095c0:	f04f 0200 	mov.w	r2, #0
 80095c4:	f04f 0300 	mov.w	r3, #0
 80095c8:	00eb      	lsls	r3, r5, #3
 80095ca:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80095ce:	00e2      	lsls	r2, r4, #3
 80095d0:	4614      	mov	r4, r2
 80095d2:	461d      	mov	r5, r3
 80095d4:	4643      	mov	r3, r8
 80095d6:	18e3      	adds	r3, r4, r3
 80095d8:	603b      	str	r3, [r7, #0]
 80095da:	464b      	mov	r3, r9
 80095dc:	eb45 0303 	adc.w	r3, r5, r3
 80095e0:	607b      	str	r3, [r7, #4]
 80095e2:	f04f 0200 	mov.w	r2, #0
 80095e6:	f04f 0300 	mov.w	r3, #0
 80095ea:	e9d7 4500 	ldrd	r4, r5, [r7]
 80095ee:	4629      	mov	r1, r5
 80095f0:	028b      	lsls	r3, r1, #10
 80095f2:	4621      	mov	r1, r4
 80095f4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80095f8:	4621      	mov	r1, r4
 80095fa:	028a      	lsls	r2, r1, #10
 80095fc:	4610      	mov	r0, r2
 80095fe:	4619      	mov	r1, r3
 8009600:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009602:	2200      	movs	r2, #0
 8009604:	61bb      	str	r3, [r7, #24]
 8009606:	61fa      	str	r2, [r7, #28]
 8009608:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800960c:	f7f6 fe50 	bl	80002b0 <__aeabi_uldivmod>
 8009610:	4602      	mov	r2, r0
 8009612:	460b      	mov	r3, r1
 8009614:	4613      	mov	r3, r2
 8009616:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8009618:	4b0b      	ldr	r3, [pc, #44]	; (8009648 <HAL_RCC_GetSysClockFreq+0x200>)
 800961a:	685b      	ldr	r3, [r3, #4]
 800961c:	0c1b      	lsrs	r3, r3, #16
 800961e:	f003 0303 	and.w	r3, r3, #3
 8009622:	3301      	adds	r3, #1
 8009624:	005b      	lsls	r3, r3, #1
 8009626:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8009628:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800962a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800962c:	fbb2 f3f3 	udiv	r3, r2, r3
 8009630:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009632:	e002      	b.n	800963a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8009634:	4b05      	ldr	r3, [pc, #20]	; (800964c <HAL_RCC_GetSysClockFreq+0x204>)
 8009636:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8009638:	bf00      	nop
    }
  }
  return sysclockfreq;
 800963a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 800963c:	4618      	mov	r0, r3
 800963e:	3750      	adds	r7, #80	; 0x50
 8009640:	46bd      	mov	sp, r7
 8009642:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009646:	bf00      	nop
 8009648:	40023800 	.word	0x40023800
 800964c:	00f42400 	.word	0x00f42400
 8009650:	007a1200 	.word	0x007a1200

08009654 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8009654:	b480      	push	{r7}
 8009656:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8009658:	4b03      	ldr	r3, [pc, #12]	; (8009668 <HAL_RCC_GetHCLKFreq+0x14>)
 800965a:	681b      	ldr	r3, [r3, #0]
}
 800965c:	4618      	mov	r0, r3
 800965e:	46bd      	mov	sp, r7
 8009660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009664:	4770      	bx	lr
 8009666:	bf00      	nop
 8009668:	20000000 	.word	0x20000000

0800966c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800966c:	b580      	push	{r7, lr}
 800966e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8009670:	f7ff fff0 	bl	8009654 <HAL_RCC_GetHCLKFreq>
 8009674:	4602      	mov	r2, r0
 8009676:	4b05      	ldr	r3, [pc, #20]	; (800968c <HAL_RCC_GetPCLK1Freq+0x20>)
 8009678:	689b      	ldr	r3, [r3, #8]
 800967a:	0a9b      	lsrs	r3, r3, #10
 800967c:	f003 0307 	and.w	r3, r3, #7
 8009680:	4903      	ldr	r1, [pc, #12]	; (8009690 <HAL_RCC_GetPCLK1Freq+0x24>)
 8009682:	5ccb      	ldrb	r3, [r1, r3]
 8009684:	fa22 f303 	lsr.w	r3, r2, r3
}
 8009688:	4618      	mov	r0, r3
 800968a:	bd80      	pop	{r7, pc}
 800968c:	40023800 	.word	0x40023800
 8009690:	080217e4 	.word	0x080217e4

08009694 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8009694:	b580      	push	{r7, lr}
 8009696:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8009698:	f7ff ffdc 	bl	8009654 <HAL_RCC_GetHCLKFreq>
 800969c:	4602      	mov	r2, r0
 800969e:	4b05      	ldr	r3, [pc, #20]	; (80096b4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80096a0:	689b      	ldr	r3, [r3, #8]
 80096a2:	0b5b      	lsrs	r3, r3, #13
 80096a4:	f003 0307 	and.w	r3, r3, #7
 80096a8:	4903      	ldr	r1, [pc, #12]	; (80096b8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80096aa:	5ccb      	ldrb	r3, [r1, r3]
 80096ac:	fa22 f303 	lsr.w	r3, r2, r3
}
 80096b0:	4618      	mov	r0, r3
 80096b2:	bd80      	pop	{r7, pc}
 80096b4:	40023800 	.word	0x40023800
 80096b8:	080217e4 	.word	0x080217e4

080096bc <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 80096bc:	b480      	push	{r7}
 80096be:	b083      	sub	sp, #12
 80096c0:	af00      	add	r7, sp, #0
 80096c2:	6078      	str	r0, [r7, #4]
 80096c4:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 80096c6:	687b      	ldr	r3, [r7, #4]
 80096c8:	220f      	movs	r2, #15
 80096ca:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 80096cc:	4b12      	ldr	r3, [pc, #72]	; (8009718 <HAL_RCC_GetClockConfig+0x5c>)
 80096ce:	689b      	ldr	r3, [r3, #8]
 80096d0:	f003 0203 	and.w	r2, r3, #3
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 80096d8:	4b0f      	ldr	r3, [pc, #60]	; (8009718 <HAL_RCC_GetClockConfig+0x5c>)
 80096da:	689b      	ldr	r3, [r3, #8]
 80096dc:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 80096e0:	687b      	ldr	r3, [r7, #4]
 80096e2:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 80096e4:	4b0c      	ldr	r3, [pc, #48]	; (8009718 <HAL_RCC_GetClockConfig+0x5c>)
 80096e6:	689b      	ldr	r3, [r3, #8]
 80096e8:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 80096f0:	4b09      	ldr	r3, [pc, #36]	; (8009718 <HAL_RCC_GetClockConfig+0x5c>)
 80096f2:	689b      	ldr	r3, [r3, #8]
 80096f4:	08db      	lsrs	r3, r3, #3
 80096f6:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 80096fa:	687b      	ldr	r3, [r7, #4]
 80096fc:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 80096fe:	4b07      	ldr	r3, [pc, #28]	; (800971c <HAL_RCC_GetClockConfig+0x60>)
 8009700:	681b      	ldr	r3, [r3, #0]
 8009702:	f003 020f 	and.w	r2, r3, #15
 8009706:	683b      	ldr	r3, [r7, #0]
 8009708:	601a      	str	r2, [r3, #0]
}
 800970a:	bf00      	nop
 800970c:	370c      	adds	r7, #12
 800970e:	46bd      	mov	sp, r7
 8009710:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009714:	4770      	bx	lr
 8009716:	bf00      	nop
 8009718:	40023800 	.word	0x40023800
 800971c:	40023c00 	.word	0x40023c00

08009720 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8009720:	b580      	push	{r7, lr}
 8009722:	b088      	sub	sp, #32
 8009724:	af00      	add	r7, sp, #0
 8009726:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8009728:	2300      	movs	r3, #0
 800972a:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 800972c:	2300      	movs	r3, #0
 800972e:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8009730:	2300      	movs	r3, #0
 8009732:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8009734:	2300      	movs	r3, #0
 8009736:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8009738:	2300      	movs	r3, #0
 800973a:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	681b      	ldr	r3, [r3, #0]
 8009740:	f003 0301 	and.w	r3, r3, #1
 8009744:	2b00      	cmp	r3, #0
 8009746:	d012      	beq.n	800976e <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8009748:	4b69      	ldr	r3, [pc, #420]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800974a:	689b      	ldr	r3, [r3, #8]
 800974c:	4a68      	ldr	r2, [pc, #416]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800974e:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8009752:	6093      	str	r3, [r2, #8]
 8009754:	4b66      	ldr	r3, [pc, #408]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009756:	689a      	ldr	r2, [r3, #8]
 8009758:	687b      	ldr	r3, [r7, #4]
 800975a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800975c:	4964      	ldr	r1, [pc, #400]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800975e:	4313      	orrs	r3, r2
 8009760:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009766:	2b00      	cmp	r3, #0
 8009768:	d101      	bne.n	800976e <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 800976a:	2301      	movs	r3, #1
 800976c:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 800976e:	687b      	ldr	r3, [r7, #4]
 8009770:	681b      	ldr	r3, [r3, #0]
 8009772:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009776:	2b00      	cmp	r3, #0
 8009778:	d017      	beq.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 800977a:	4b5d      	ldr	r3, [pc, #372]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800977c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009780:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009788:	4959      	ldr	r1, [pc, #356]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800978a:	4313      	orrs	r3, r2
 800978c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8009790:	687b      	ldr	r3, [r7, #4]
 8009792:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009794:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009798:	d101      	bne.n	800979e <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 800979a:	2301      	movs	r3, #1
 800979c:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 800979e:	687b      	ldr	r3, [r7, #4]
 80097a0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80097a2:	2b00      	cmp	r3, #0
 80097a4:	d101      	bne.n	80097aa <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 80097a6:	2301      	movs	r3, #1
 80097a8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	681b      	ldr	r3, [r3, #0]
 80097ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80097b2:	2b00      	cmp	r3, #0
 80097b4:	d017      	beq.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 80097b6:	4b4e      	ldr	r3, [pc, #312]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097b8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80097bc:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097c4:	494a      	ldr	r1, [pc, #296]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80097c6:	4313      	orrs	r3, r2
 80097c8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 80097cc:	687b      	ldr	r3, [r7, #4]
 80097ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097d0:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80097d4:	d101      	bne.n	80097da <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 80097d6:	2301      	movs	r3, #1
 80097d8:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80097de:	2b00      	cmp	r3, #0
 80097e0:	d101      	bne.n	80097e6 <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 80097e2:	2301      	movs	r3, #1
 80097e4:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 80097e6:	687b      	ldr	r3, [r7, #4]
 80097e8:	681b      	ldr	r3, [r3, #0]
 80097ea:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80097ee:	2b00      	cmp	r3, #0
 80097f0:	d001      	beq.n	80097f6 <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 80097f2:	2301      	movs	r3, #1
 80097f4:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 80097f6:	687b      	ldr	r3, [r7, #4]
 80097f8:	681b      	ldr	r3, [r3, #0]
 80097fa:	f003 0320 	and.w	r3, r3, #32
 80097fe:	2b00      	cmp	r3, #0
 8009800:	f000 808b 	beq.w	800991a <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8009804:	4b3a      	ldr	r3, [pc, #232]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009808:	4a39      	ldr	r2, [pc, #228]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800980a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800980e:	6413      	str	r3, [r2, #64]	; 0x40
 8009810:	4b37      	ldr	r3, [pc, #220]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009814:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8009818:	60bb      	str	r3, [r7, #8]
 800981a:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 800981c:	4b35      	ldr	r3, [pc, #212]	; (80098f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 800981e:	681b      	ldr	r3, [r3, #0]
 8009820:	4a34      	ldr	r2, [pc, #208]	; (80098f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009822:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8009826:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009828:	f7f9 fe08 	bl	800343c <HAL_GetTick>
 800982c:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 800982e:	e008      	b.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009830:	f7f9 fe04 	bl	800343c <HAL_GetTick>
 8009834:	4602      	mov	r2, r0
 8009836:	697b      	ldr	r3, [r7, #20]
 8009838:	1ad3      	subs	r3, r2, r3
 800983a:	2b64      	cmp	r3, #100	; 0x64
 800983c:	d901      	bls.n	8009842 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 800983e:	2303      	movs	r3, #3
 8009840:	e357      	b.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009842:	4b2c      	ldr	r3, [pc, #176]	; (80098f4 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009844:	681b      	ldr	r3, [r3, #0]
 8009846:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800984a:	2b00      	cmp	r3, #0
 800984c:	d0f0      	beq.n	8009830 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 800984e:	4b28      	ldr	r3, [pc, #160]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009850:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009852:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009856:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 8009858:	693b      	ldr	r3, [r7, #16]
 800985a:	2b00      	cmp	r3, #0
 800985c:	d035      	beq.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009862:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009866:	693a      	ldr	r2, [r7, #16]
 8009868:	429a      	cmp	r2, r3
 800986a:	d02e      	beq.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 800986c:	4b20      	ldr	r3, [pc, #128]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800986e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009870:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009874:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8009876:	4b1e      	ldr	r3, [pc, #120]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800987a:	4a1d      	ldr	r2, [pc, #116]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800987c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009880:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009882:	4b1b      	ldr	r3, [pc, #108]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009884:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009886:	4a1a      	ldr	r2, [pc, #104]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009888:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800988c:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 800988e:	4a18      	ldr	r2, [pc, #96]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009890:	693b      	ldr	r3, [r7, #16]
 8009892:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009894:	4b16      	ldr	r3, [pc, #88]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009896:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009898:	f003 0301 	and.w	r3, r3, #1
 800989c:	2b01      	cmp	r3, #1
 800989e:	d114      	bne.n	80098ca <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80098a0:	f7f9 fdcc 	bl	800343c <HAL_GetTick>
 80098a4:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80098a6:	e00a      	b.n	80098be <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80098a8:	f7f9 fdc8 	bl	800343c <HAL_GetTick>
 80098ac:	4602      	mov	r2, r0
 80098ae:	697b      	ldr	r3, [r7, #20]
 80098b0:	1ad3      	subs	r3, r2, r3
 80098b2:	f241 3288 	movw	r2, #5000	; 0x1388
 80098b6:	4293      	cmp	r3, r2
 80098b8:	d901      	bls.n	80098be <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 80098ba:	2303      	movs	r3, #3
 80098bc:	e319      	b.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80098be:	4b0c      	ldr	r3, [pc, #48]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80098c0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80098c2:	f003 0302 	and.w	r3, r3, #2
 80098c6:	2b00      	cmp	r3, #0
 80098c8:	d0ee      	beq.n	80098a8 <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80098ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80098d2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80098d6:	d111      	bne.n	80098fc <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80098d8:	4b05      	ldr	r3, [pc, #20]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80098da:	689b      	ldr	r3, [r3, #8]
 80098dc:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80098e4:	4b04      	ldr	r3, [pc, #16]	; (80098f8 <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80098e6:	400b      	ands	r3, r1
 80098e8:	4901      	ldr	r1, [pc, #4]	; (80098f0 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80098ea:	4313      	orrs	r3, r2
 80098ec:	608b      	str	r3, [r1, #8]
 80098ee:	e00b      	b.n	8009908 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80098f0:	40023800 	.word	0x40023800
 80098f4:	40007000 	.word	0x40007000
 80098f8:	0ffffcff 	.word	0x0ffffcff
 80098fc:	4baa      	ldr	r3, [pc, #680]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80098fe:	689b      	ldr	r3, [r3, #8]
 8009900:	4aa9      	ldr	r2, [pc, #676]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009902:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 8009906:	6093      	str	r3, [r2, #8]
 8009908:	4ba7      	ldr	r3, [pc, #668]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800990a:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009910:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8009914:	49a4      	ldr	r1, [pc, #656]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009916:	4313      	orrs	r3, r2
 8009918:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f003 0310 	and.w	r3, r3, #16
 8009922:	2b00      	cmp	r3, #0
 8009924:	d010      	beq.n	8009948 <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 8009926:	4ba0      	ldr	r3, [pc, #640]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009928:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800992c:	4a9e      	ldr	r2, [pc, #632]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800992e:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009932:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 8009936:	4b9c      	ldr	r3, [pc, #624]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009938:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 800993c:	687b      	ldr	r3, [r7, #4]
 800993e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009940:	4999      	ldr	r1, [pc, #612]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009942:	4313      	orrs	r3, r2
 8009944:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	681b      	ldr	r3, [r3, #0]
 800994c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009950:	2b00      	cmp	r3, #0
 8009952:	d00a      	beq.n	800996a <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009954:	4b94      	ldr	r3, [pc, #592]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009956:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800995a:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 800995e:	687b      	ldr	r3, [r7, #4]
 8009960:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009962:	4991      	ldr	r1, [pc, #580]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009964:	4313      	orrs	r3, r2
 8009966:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800996a:	687b      	ldr	r3, [r7, #4]
 800996c:	681b      	ldr	r3, [r3, #0]
 800996e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009972:	2b00      	cmp	r3, #0
 8009974:	d00a      	beq.n	800998c <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 8009976:	4b8c      	ldr	r3, [pc, #560]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009978:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800997c:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009980:	687b      	ldr	r3, [r7, #4]
 8009982:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009984:	4988      	ldr	r1, [pc, #544]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009986:	4313      	orrs	r3, r2
 8009988:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	681b      	ldr	r3, [r3, #0]
 8009990:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009994:	2b00      	cmp	r3, #0
 8009996:	d00a      	beq.n	80099ae <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8009998:	4b83      	ldr	r3, [pc, #524]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800999a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800999e:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80099a6:	4980      	ldr	r1, [pc, #512]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80099a8:	4313      	orrs	r3, r2
 80099aa:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	681b      	ldr	r3, [r3, #0]
 80099b2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d00a      	beq.n	80099d0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 80099ba:	4b7b      	ldr	r3, [pc, #492]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80099bc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099c0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80099c4:	687b      	ldr	r3, [r7, #4]
 80099c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80099c8:	4977      	ldr	r1, [pc, #476]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80099ca:	4313      	orrs	r3, r2
 80099cc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80099d0:	687b      	ldr	r3, [r7, #4]
 80099d2:	681b      	ldr	r3, [r3, #0]
 80099d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d00a      	beq.n	80099f2 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80099dc:	4b72      	ldr	r3, [pc, #456]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80099de:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80099e2:	f023 0203 	bic.w	r2, r3, #3
 80099e6:	687b      	ldr	r3, [r7, #4]
 80099e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80099ea:	496f      	ldr	r1, [pc, #444]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80099ec:	4313      	orrs	r3, r2
 80099ee:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80099f2:	687b      	ldr	r3, [r7, #4]
 80099f4:	681b      	ldr	r3, [r3, #0]
 80099f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80099fa:	2b00      	cmp	r3, #0
 80099fc:	d00a      	beq.n	8009a14 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80099fe:	4b6a      	ldr	r3, [pc, #424]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a00:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a04:	f023 020c 	bic.w	r2, r3, #12
 8009a08:	687b      	ldr	r3, [r7, #4]
 8009a0a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8009a0c:	4966      	ldr	r1, [pc, #408]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a0e:	4313      	orrs	r3, r2
 8009a10:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 8009a14:	687b      	ldr	r3, [r7, #4]
 8009a16:	681b      	ldr	r3, [r3, #0]
 8009a18:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009a1c:	2b00      	cmp	r3, #0
 8009a1e:	d00a      	beq.n	8009a36 <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009a20:	4b61      	ldr	r3, [pc, #388]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a22:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a26:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 8009a2a:	687b      	ldr	r3, [r7, #4]
 8009a2c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009a2e:	495e      	ldr	r1, [pc, #376]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a30:	4313      	orrs	r3, r2
 8009a32:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 8009a36:	687b      	ldr	r3, [r7, #4]
 8009a38:	681b      	ldr	r3, [r3, #0]
 8009a3a:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d00a      	beq.n	8009a58 <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009a42:	4b59      	ldr	r3, [pc, #356]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a44:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a48:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009a4c:	687b      	ldr	r3, [r7, #4]
 8009a4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009a50:	4955      	ldr	r1, [pc, #340]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a52:	4313      	orrs	r3, r2
 8009a54:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 8009a58:	687b      	ldr	r3, [r7, #4]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009a60:	2b00      	cmp	r3, #0
 8009a62:	d00a      	beq.n	8009a7a <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009a64:	4b50      	ldr	r3, [pc, #320]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a6a:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009a6e:	687b      	ldr	r3, [r7, #4]
 8009a70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009a72:	494d      	ldr	r1, [pc, #308]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a74:	4313      	orrs	r3, r2
 8009a76:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	681b      	ldr	r3, [r3, #0]
 8009a7e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009a82:	2b00      	cmp	r3, #0
 8009a84:	d00a      	beq.n	8009a9c <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 8009a86:	4b48      	ldr	r3, [pc, #288]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a88:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009a8c:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009a94:	4944      	ldr	r1, [pc, #272]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009a96:	4313      	orrs	r3, r2
 8009a98:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009a9c:	687b      	ldr	r3, [r7, #4]
 8009a9e:	681b      	ldr	r3, [r3, #0]
 8009aa0:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009aa4:	2b00      	cmp	r3, #0
 8009aa6:	d00a      	beq.n	8009abe <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 8009aa8:	4b3f      	ldr	r3, [pc, #252]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009aaa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009aae:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009ab2:	687b      	ldr	r3, [r7, #4]
 8009ab4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8009ab6:	493c      	ldr	r1, [pc, #240]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009ab8:	4313      	orrs	r3, r2
 8009aba:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 8009abe:	687b      	ldr	r3, [r7, #4]
 8009ac0:	681b      	ldr	r3, [r3, #0]
 8009ac2:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8009ac6:	2b00      	cmp	r3, #0
 8009ac8:	d00a      	beq.n	8009ae0 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 8009aca:	4b37      	ldr	r3, [pc, #220]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009acc:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009ad0:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 8009ad4:	687b      	ldr	r3, [r7, #4]
 8009ad6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009ad8:	4933      	ldr	r1, [pc, #204]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009ada:	4313      	orrs	r3, r2
 8009adc:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8009ae8:	2b00      	cmp	r3, #0
 8009aea:	d00a      	beq.n	8009b02 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 8009aec:	4b2e      	ldr	r3, [pc, #184]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009aee:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009af2:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 8009af6:	687b      	ldr	r3, [r7, #4]
 8009af8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8009afa:	492b      	ldr	r1, [pc, #172]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009afc:	4313      	orrs	r3, r2
 8009afe:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 8009b02:	687b      	ldr	r3, [r7, #4]
 8009b04:	681b      	ldr	r3, [r3, #0]
 8009b06:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009b0a:	2b00      	cmp	r3, #0
 8009b0c:	d011      	beq.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 8009b0e:	4b26      	ldr	r3, [pc, #152]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b10:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b14:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 8009b18:	687b      	ldr	r3, [r7, #4]
 8009b1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b1c:	4922      	ldr	r1, [pc, #136]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b1e:	4313      	orrs	r3, r2
 8009b20:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009b28:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009b2c:	d101      	bne.n	8009b32 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8009b2e:	2301      	movs	r3, #1
 8009b30:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009b32:	687b      	ldr	r3, [r7, #4]
 8009b34:	681b      	ldr	r3, [r3, #0]
 8009b36:	f003 0308 	and.w	r3, r3, #8
 8009b3a:	2b00      	cmp	r3, #0
 8009b3c:	d001      	beq.n	8009b42 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8009b3e:	2301      	movs	r3, #1
 8009b40:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009b42:	687b      	ldr	r3, [r7, #4]
 8009b44:	681b      	ldr	r3, [r3, #0]
 8009b46:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8009b4a:	2b00      	cmp	r3, #0
 8009b4c:	d00a      	beq.n	8009b64 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009b4e:	4b16      	ldr	r3, [pc, #88]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b50:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b54:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 8009b58:	687b      	ldr	r3, [r7, #4]
 8009b5a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009b5c:	4912      	ldr	r1, [pc, #72]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b5e:	4313      	orrs	r3, r2
 8009b60:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009b64:	687b      	ldr	r3, [r7, #4]
 8009b66:	681b      	ldr	r3, [r3, #0]
 8009b68:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009b6c:	2b00      	cmp	r3, #0
 8009b6e:	d00b      	beq.n	8009b88 <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009b70:	4b0d      	ldr	r3, [pc, #52]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b72:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009b76:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009b80:	4909      	ldr	r1, [pc, #36]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b82:	4313      	orrs	r3, r2
 8009b84:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 8009b88:	69fb      	ldr	r3, [r7, #28]
 8009b8a:	2b01      	cmp	r3, #1
 8009b8c:	d006      	beq.n	8009b9c <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009b8e:	687b      	ldr	r3, [r7, #4]
 8009b90:	681b      	ldr	r3, [r3, #0]
 8009b92:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009b96:	2b00      	cmp	r3, #0
 8009b98:	f000 80d9 	beq.w	8009d4e <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009b9c:	4b02      	ldr	r3, [pc, #8]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	4a01      	ldr	r2, [pc, #4]	; (8009ba8 <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009ba2:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 8009ba6:	e001      	b.n	8009bac <HAL_RCCEx_PeriphCLKConfig+0x48c>
 8009ba8:	40023800 	.word	0x40023800
 8009bac:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009bae:	f7f9 fc45 	bl	800343c <HAL_GetTick>
 8009bb2:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009bb4:	e008      	b.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009bb6:	f7f9 fc41 	bl	800343c <HAL_GetTick>
 8009bba:	4602      	mov	r2, r0
 8009bbc:	697b      	ldr	r3, [r7, #20]
 8009bbe:	1ad3      	subs	r3, r2, r3
 8009bc0:	2b64      	cmp	r3, #100	; 0x64
 8009bc2:	d901      	bls.n	8009bc8 <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009bc4:	2303      	movs	r3, #3
 8009bc6:	e194      	b.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009bc8:	4b6c      	ldr	r3, [pc, #432]	; (8009d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009bd0:	2b00      	cmp	r3, #0
 8009bd2:	d1f0      	bne.n	8009bb6 <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 8009bd4:	687b      	ldr	r3, [r7, #4]
 8009bd6:	681b      	ldr	r3, [r3, #0]
 8009bd8:	f003 0301 	and.w	r3, r3, #1
 8009bdc:	2b00      	cmp	r3, #0
 8009bde:	d021      	beq.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0x504>
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8009be4:	2b00      	cmp	r3, #0
 8009be6:	d11d      	bne.n	8009c24 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009be8:	4b64      	ldr	r3, [pc, #400]	; (8009d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009bea:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bee:	0c1b      	lsrs	r3, r3, #16
 8009bf0:	f003 0303 	and.w	r3, r3, #3
 8009bf4:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009bf6:	4b61      	ldr	r3, [pc, #388]	; (8009d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009bf8:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009bfc:	0e1b      	lsrs	r3, r3, #24
 8009bfe:	f003 030f 	and.w	r3, r3, #15
 8009c02:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 8009c04:	687b      	ldr	r3, [r7, #4]
 8009c06:	685b      	ldr	r3, [r3, #4]
 8009c08:	019a      	lsls	r2, r3, #6
 8009c0a:	693b      	ldr	r3, [r7, #16]
 8009c0c:	041b      	lsls	r3, r3, #16
 8009c0e:	431a      	orrs	r2, r3
 8009c10:	68fb      	ldr	r3, [r7, #12]
 8009c12:	061b      	lsls	r3, r3, #24
 8009c14:	431a      	orrs	r2, r3
 8009c16:	687b      	ldr	r3, [r7, #4]
 8009c18:	689b      	ldr	r3, [r3, #8]
 8009c1a:	071b      	lsls	r3, r3, #28
 8009c1c:	4957      	ldr	r1, [pc, #348]	; (8009d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009c1e:	4313      	orrs	r3, r2
 8009c20:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009c24:	687b      	ldr	r3, [r7, #4]
 8009c26:	681b      	ldr	r3, [r3, #0]
 8009c28:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009c2c:	2b00      	cmp	r3, #0
 8009c2e:	d004      	beq.n	8009c3a <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009c30:	687b      	ldr	r3, [r7, #4]
 8009c32:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009c34:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009c38:	d00a      	beq.n	8009c50 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009c3a:	687b      	ldr	r3, [r7, #4]
 8009c3c:	681b      	ldr	r3, [r3, #0]
 8009c3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009c42:	2b00      	cmp	r3, #0
 8009c44:	d02e      	beq.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 8009c46:	687b      	ldr	r3, [r7, #4]
 8009c48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009c4a:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009c4e:	d129      	bne.n	8009ca4 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009c50:	4b4a      	ldr	r3, [pc, #296]	; (8009d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009c52:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c56:	0c1b      	lsrs	r3, r3, #16
 8009c58:	f003 0303 	and.w	r3, r3, #3
 8009c5c:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009c5e:	4b47      	ldr	r3, [pc, #284]	; (8009d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009c60:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009c64:	0f1b      	lsrs	r3, r3, #28
 8009c66:	f003 0307 	and.w	r3, r3, #7
 8009c6a:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009c6c:	687b      	ldr	r3, [r7, #4]
 8009c6e:	685b      	ldr	r3, [r3, #4]
 8009c70:	019a      	lsls	r2, r3, #6
 8009c72:	693b      	ldr	r3, [r7, #16]
 8009c74:	041b      	lsls	r3, r3, #16
 8009c76:	431a      	orrs	r2, r3
 8009c78:	687b      	ldr	r3, [r7, #4]
 8009c7a:	68db      	ldr	r3, [r3, #12]
 8009c7c:	061b      	lsls	r3, r3, #24
 8009c7e:	431a      	orrs	r2, r3
 8009c80:	68fb      	ldr	r3, [r7, #12]
 8009c82:	071b      	lsls	r3, r3, #28
 8009c84:	493d      	ldr	r1, [pc, #244]	; (8009d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009c86:	4313      	orrs	r3, r2
 8009c88:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009c8c:	4b3b      	ldr	r3, [pc, #236]	; (8009d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009c8e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009c92:	f023 021f 	bic.w	r2, r3, #31
 8009c96:	687b      	ldr	r3, [r7, #4]
 8009c98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009c9a:	3b01      	subs	r3, #1
 8009c9c:	4937      	ldr	r1, [pc, #220]	; (8009d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009c9e:	4313      	orrs	r3, r2
 8009ca0:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009ca4:	687b      	ldr	r3, [r7, #4]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009cac:	2b00      	cmp	r3, #0
 8009cae:	d01d      	beq.n	8009cec <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009cb0:	4b32      	ldr	r3, [pc, #200]	; (8009d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009cb2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009cb6:	0e1b      	lsrs	r3, r3, #24
 8009cb8:	f003 030f 	and.w	r3, r3, #15
 8009cbc:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009cbe:	4b2f      	ldr	r3, [pc, #188]	; (8009d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009cc0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009cc4:	0f1b      	lsrs	r3, r3, #28
 8009cc6:	f003 0307 	and.w	r3, r3, #7
 8009cca:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 8009ccc:	687b      	ldr	r3, [r7, #4]
 8009cce:	685b      	ldr	r3, [r3, #4]
 8009cd0:	019a      	lsls	r2, r3, #6
 8009cd2:	687b      	ldr	r3, [r7, #4]
 8009cd4:	691b      	ldr	r3, [r3, #16]
 8009cd6:	041b      	lsls	r3, r3, #16
 8009cd8:	431a      	orrs	r2, r3
 8009cda:	693b      	ldr	r3, [r7, #16]
 8009cdc:	061b      	lsls	r3, r3, #24
 8009cde:	431a      	orrs	r2, r3
 8009ce0:	68fb      	ldr	r3, [r7, #12]
 8009ce2:	071b      	lsls	r3, r3, #28
 8009ce4:	4925      	ldr	r1, [pc, #148]	; (8009d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009ce6:	4313      	orrs	r3, r2
 8009ce8:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 8009cec:	687b      	ldr	r3, [r7, #4]
 8009cee:	681b      	ldr	r3, [r3, #0]
 8009cf0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8009cf4:	2b00      	cmp	r3, #0
 8009cf6:	d011      	beq.n	8009d1c <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 8009cf8:	687b      	ldr	r3, [r7, #4]
 8009cfa:	685b      	ldr	r3, [r3, #4]
 8009cfc:	019a      	lsls	r2, r3, #6
 8009cfe:	687b      	ldr	r3, [r7, #4]
 8009d00:	691b      	ldr	r3, [r3, #16]
 8009d02:	041b      	lsls	r3, r3, #16
 8009d04:	431a      	orrs	r2, r3
 8009d06:	687b      	ldr	r3, [r7, #4]
 8009d08:	68db      	ldr	r3, [r3, #12]
 8009d0a:	061b      	lsls	r3, r3, #24
 8009d0c:	431a      	orrs	r2, r3
 8009d0e:	687b      	ldr	r3, [r7, #4]
 8009d10:	689b      	ldr	r3, [r3, #8]
 8009d12:	071b      	lsls	r3, r3, #28
 8009d14:	4919      	ldr	r1, [pc, #100]	; (8009d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009d16:	4313      	orrs	r3, r2
 8009d18:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009d1c:	4b17      	ldr	r3, [pc, #92]	; (8009d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009d1e:	681b      	ldr	r3, [r3, #0]
 8009d20:	4a16      	ldr	r2, [pc, #88]	; (8009d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009d22:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 8009d26:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d28:	f7f9 fb88 	bl	800343c <HAL_GetTick>
 8009d2c:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009d2e:	e008      	b.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009d30:	f7f9 fb84 	bl	800343c <HAL_GetTick>
 8009d34:	4602      	mov	r2, r0
 8009d36:	697b      	ldr	r3, [r7, #20]
 8009d38:	1ad3      	subs	r3, r2, r3
 8009d3a:	2b64      	cmp	r3, #100	; 0x64
 8009d3c:	d901      	bls.n	8009d42 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009d3e:	2303      	movs	r3, #3
 8009d40:	e0d7      	b.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009d42:	4b0e      	ldr	r3, [pc, #56]	; (8009d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8009d4a:	2b00      	cmp	r3, #0
 8009d4c:	d0f0      	beq.n	8009d30 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009d4e:	69bb      	ldr	r3, [r7, #24]
 8009d50:	2b01      	cmp	r3, #1
 8009d52:	f040 80cd 	bne.w	8009ef0 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 8009d56:	4b09      	ldr	r3, [pc, #36]	; (8009d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009d58:	681b      	ldr	r3, [r3, #0]
 8009d5a:	4a08      	ldr	r2, [pc, #32]	; (8009d7c <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009d5c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009d60:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009d62:	f7f9 fb6b 	bl	800343c <HAL_GetTick>
 8009d66:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009d68:	e00a      	b.n	8009d80 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009d6a:	f7f9 fb67 	bl	800343c <HAL_GetTick>
 8009d6e:	4602      	mov	r2, r0
 8009d70:	697b      	ldr	r3, [r7, #20]
 8009d72:	1ad3      	subs	r3, r2, r3
 8009d74:	2b64      	cmp	r3, #100	; 0x64
 8009d76:	d903      	bls.n	8009d80 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009d78:	2303      	movs	r3, #3
 8009d7a:	e0ba      	b.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009d7c:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009d80:	4b5e      	ldr	r3, [pc, #376]	; (8009efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009d82:	681b      	ldr	r3, [r3, #0]
 8009d84:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009d88:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009d8c:	d0ed      	beq.n	8009d6a <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009d8e:	687b      	ldr	r3, [r7, #4]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009d96:	2b00      	cmp	r3, #0
 8009d98:	d003      	beq.n	8009da2 <HAL_RCCEx_PeriphCLKConfig+0x682>
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009d9e:	2b00      	cmp	r3, #0
 8009da0:	d009      	beq.n	8009db6 <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009da2:	687b      	ldr	r3, [r7, #4]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009daa:	2b00      	cmp	r3, #0
 8009dac:	d02e      	beq.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009dae:	687b      	ldr	r3, [r7, #4]
 8009db0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009db2:	2b00      	cmp	r3, #0
 8009db4:	d12a      	bne.n	8009e0c <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009db6:	4b51      	ldr	r3, [pc, #324]	; (8009efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009db8:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dbc:	0c1b      	lsrs	r3, r3, #16
 8009dbe:	f003 0303 	and.w	r3, r3, #3
 8009dc2:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009dc4:	4b4d      	ldr	r3, [pc, #308]	; (8009efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009dc6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009dca:	0f1b      	lsrs	r3, r3, #28
 8009dcc:	f003 0307 	and.w	r3, r3, #7
 8009dd0:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 8009dd2:	687b      	ldr	r3, [r7, #4]
 8009dd4:	695b      	ldr	r3, [r3, #20]
 8009dd6:	019a      	lsls	r2, r3, #6
 8009dd8:	693b      	ldr	r3, [r7, #16]
 8009dda:	041b      	lsls	r3, r3, #16
 8009ddc:	431a      	orrs	r2, r3
 8009dde:	687b      	ldr	r3, [r7, #4]
 8009de0:	699b      	ldr	r3, [r3, #24]
 8009de2:	061b      	lsls	r3, r3, #24
 8009de4:	431a      	orrs	r2, r3
 8009de6:	68fb      	ldr	r3, [r7, #12]
 8009de8:	071b      	lsls	r3, r3, #28
 8009dea:	4944      	ldr	r1, [pc, #272]	; (8009efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009dec:	4313      	orrs	r3, r2
 8009dee:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 8009df2:	4b42      	ldr	r3, [pc, #264]	; (8009efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009df4:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009df8:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 8009dfc:	687b      	ldr	r3, [r7, #4]
 8009dfe:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009e00:	3b01      	subs	r3, #1
 8009e02:	021b      	lsls	r3, r3, #8
 8009e04:	493d      	ldr	r1, [pc, #244]	; (8009efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009e06:	4313      	orrs	r3, r2
 8009e08:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 8009e0c:	687b      	ldr	r3, [r7, #4]
 8009e0e:	681b      	ldr	r3, [r3, #0]
 8009e10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d022      	beq.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x73e>
 8009e18:	687b      	ldr	r3, [r7, #4]
 8009e1a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009e1c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009e20:	d11d      	bne.n	8009e5e <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009e22:	4b36      	ldr	r3, [pc, #216]	; (8009efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009e24:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e28:	0e1b      	lsrs	r3, r3, #24
 8009e2a:	f003 030f 	and.w	r3, r3, #15
 8009e2e:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009e30:	4b32      	ldr	r3, [pc, #200]	; (8009efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009e32:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e36:	0f1b      	lsrs	r3, r3, #28
 8009e38:	f003 0307 	and.w	r3, r3, #7
 8009e3c:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009e3e:	687b      	ldr	r3, [r7, #4]
 8009e40:	695b      	ldr	r3, [r3, #20]
 8009e42:	019a      	lsls	r2, r3, #6
 8009e44:	687b      	ldr	r3, [r7, #4]
 8009e46:	6a1b      	ldr	r3, [r3, #32]
 8009e48:	041b      	lsls	r3, r3, #16
 8009e4a:	431a      	orrs	r2, r3
 8009e4c:	693b      	ldr	r3, [r7, #16]
 8009e4e:	061b      	lsls	r3, r3, #24
 8009e50:	431a      	orrs	r2, r3
 8009e52:	68fb      	ldr	r3, [r7, #12]
 8009e54:	071b      	lsls	r3, r3, #28
 8009e56:	4929      	ldr	r1, [pc, #164]	; (8009efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009e58:	4313      	orrs	r3, r2
 8009e5a:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009e5e:	687b      	ldr	r3, [r7, #4]
 8009e60:	681b      	ldr	r3, [r3, #0]
 8009e62:	f003 0308 	and.w	r3, r3, #8
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d028      	beq.n	8009ebc <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009e6a:	4b24      	ldr	r3, [pc, #144]	; (8009efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009e6c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e70:	0e1b      	lsrs	r3, r3, #24
 8009e72:	f003 030f 	and.w	r3, r3, #15
 8009e76:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 8009e78:	4b20      	ldr	r3, [pc, #128]	; (8009efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009e7a:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009e7e:	0c1b      	lsrs	r3, r3, #16
 8009e80:	f003 0303 	and.w	r3, r3, #3
 8009e84:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 8009e86:	687b      	ldr	r3, [r7, #4]
 8009e88:	695b      	ldr	r3, [r3, #20]
 8009e8a:	019a      	lsls	r2, r3, #6
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	041b      	lsls	r3, r3, #16
 8009e90:	431a      	orrs	r2, r3
 8009e92:	693b      	ldr	r3, [r7, #16]
 8009e94:	061b      	lsls	r3, r3, #24
 8009e96:	431a      	orrs	r2, r3
 8009e98:	687b      	ldr	r3, [r7, #4]
 8009e9a:	69db      	ldr	r3, [r3, #28]
 8009e9c:	071b      	lsls	r3, r3, #28
 8009e9e:	4917      	ldr	r1, [pc, #92]	; (8009efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009ea0:	4313      	orrs	r3, r2
 8009ea2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 8009ea6:	4b15      	ldr	r3, [pc, #84]	; (8009efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009ea8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009eac:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009eb0:	687b      	ldr	r3, [r7, #4]
 8009eb2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009eb4:	4911      	ldr	r1, [pc, #68]	; (8009efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009eb6:	4313      	orrs	r3, r2
 8009eb8:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 8009ebc:	4b0f      	ldr	r3, [pc, #60]	; (8009efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009ebe:	681b      	ldr	r3, [r3, #0]
 8009ec0:	4a0e      	ldr	r2, [pc, #56]	; (8009efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009ec2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8009ec6:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009ec8:	f7f9 fab8 	bl	800343c <HAL_GetTick>
 8009ecc:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009ece:	e008      	b.n	8009ee2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 8009ed0:	f7f9 fab4 	bl	800343c <HAL_GetTick>
 8009ed4:	4602      	mov	r2, r0
 8009ed6:	697b      	ldr	r3, [r7, #20]
 8009ed8:	1ad3      	subs	r3, r2, r3
 8009eda:	2b64      	cmp	r3, #100	; 0x64
 8009edc:	d901      	bls.n	8009ee2 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009ede:	2303      	movs	r3, #3
 8009ee0:	e007      	b.n	8009ef2 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 8009ee2:	4b06      	ldr	r3, [pc, #24]	; (8009efc <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8009eea:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009eee:	d1ef      	bne.n	8009ed0 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 8009ef0:	2300      	movs	r3, #0
}
 8009ef2:	4618      	mov	r0, r3
 8009ef4:	3720      	adds	r7, #32
 8009ef6:	46bd      	mov	sp, r7
 8009ef8:	bd80      	pop	{r7, pc}
 8009efa:	bf00      	nop
 8009efc:	40023800 	.word	0x40023800

08009f00 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8009f00:	b580      	push	{r7, lr}
 8009f02:	b084      	sub	sp, #16
 8009f04:	af00      	add	r7, sp, #0
 8009f06:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	2b00      	cmp	r3, #0
 8009f0c:	d101      	bne.n	8009f12 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8009f0e:	2301      	movs	r3, #1
 8009f10:	e09d      	b.n	800a04e <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8009f12:	687b      	ldr	r3, [r7, #4]
 8009f14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009f16:	2b00      	cmp	r3, #0
 8009f18:	d108      	bne.n	8009f2c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8009f1a:	687b      	ldr	r3, [r7, #4]
 8009f1c:	685b      	ldr	r3, [r3, #4]
 8009f1e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009f22:	d009      	beq.n	8009f38 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009f24:	687b      	ldr	r3, [r7, #4]
 8009f26:	2200      	movs	r2, #0
 8009f28:	61da      	str	r2, [r3, #28]
 8009f2a:	e005      	b.n	8009f38 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009f2c:	687b      	ldr	r3, [r7, #4]
 8009f2e:	2200      	movs	r2, #0
 8009f30:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009f32:	687b      	ldr	r3, [r7, #4]
 8009f34:	2200      	movs	r2, #0
 8009f36:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	2200      	movs	r2, #0
 8009f3c:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009f44:	b2db      	uxtb	r3, r3
 8009f46:	2b00      	cmp	r3, #0
 8009f48:	d106      	bne.n	8009f58 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8009f4a:	687b      	ldr	r3, [r7, #4]
 8009f4c:	2200      	movs	r2, #0
 8009f4e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009f52:	6878      	ldr	r0, [r7, #4]
 8009f54:	f7f7 fcc8 	bl	80018e8 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8009f58:	687b      	ldr	r3, [r7, #4]
 8009f5a:	2202      	movs	r2, #2
 8009f5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	681a      	ldr	r2, [r3, #0]
 8009f66:	687b      	ldr	r3, [r7, #4]
 8009f68:	681b      	ldr	r3, [r3, #0]
 8009f6a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009f6e:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009f70:	687b      	ldr	r3, [r7, #4]
 8009f72:	68db      	ldr	r3, [r3, #12]
 8009f74:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009f78:	d902      	bls.n	8009f80 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 8009f7a:	2300      	movs	r3, #0
 8009f7c:	60fb      	str	r3, [r7, #12]
 8009f7e:	e002      	b.n	8009f86 <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009f80:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009f84:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 8009f86:	687b      	ldr	r3, [r7, #4]
 8009f88:	68db      	ldr	r3, [r3, #12]
 8009f8a:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009f8e:	d007      	beq.n	8009fa0 <HAL_SPI_Init+0xa0>
 8009f90:	687b      	ldr	r3, [r7, #4]
 8009f92:	68db      	ldr	r3, [r3, #12]
 8009f94:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009f98:	d002      	beq.n	8009fa0 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	2200      	movs	r2, #0
 8009f9e:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009fa0:	687b      	ldr	r3, [r7, #4]
 8009fa2:	685b      	ldr	r3, [r3, #4]
 8009fa4:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	689b      	ldr	r3, [r3, #8]
 8009fac:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009fb0:	431a      	orrs	r2, r3
 8009fb2:	687b      	ldr	r3, [r7, #4]
 8009fb4:	691b      	ldr	r3, [r3, #16]
 8009fb6:	f003 0302 	and.w	r3, r3, #2
 8009fba:	431a      	orrs	r2, r3
 8009fbc:	687b      	ldr	r3, [r7, #4]
 8009fbe:	695b      	ldr	r3, [r3, #20]
 8009fc0:	f003 0301 	and.w	r3, r3, #1
 8009fc4:	431a      	orrs	r2, r3
 8009fc6:	687b      	ldr	r3, [r7, #4]
 8009fc8:	699b      	ldr	r3, [r3, #24]
 8009fca:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009fce:	431a      	orrs	r2, r3
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	69db      	ldr	r3, [r3, #28]
 8009fd4:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8009fd8:	431a      	orrs	r2, r3
 8009fda:	687b      	ldr	r3, [r7, #4]
 8009fdc:	6a1b      	ldr	r3, [r3, #32]
 8009fde:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009fe2:	ea42 0103 	orr.w	r1, r2, r3
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009fea:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8009fee:	687b      	ldr	r3, [r7, #4]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	430a      	orrs	r2, r1
 8009ff4:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 8009ff6:	687b      	ldr	r3, [r7, #4]
 8009ff8:	699b      	ldr	r3, [r3, #24]
 8009ffa:	0c1b      	lsrs	r3, r3, #16
 8009ffc:	f003 0204 	and.w	r2, r3, #4
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a004:	f003 0310 	and.w	r3, r3, #16
 800a008:	431a      	orrs	r2, r3
 800a00a:	687b      	ldr	r3, [r7, #4]
 800a00c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800a00e:	f003 0308 	and.w	r3, r3, #8
 800a012:	431a      	orrs	r2, r3
 800a014:	687b      	ldr	r3, [r7, #4]
 800a016:	68db      	ldr	r3, [r3, #12]
 800a018:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 800a01c:	ea42 0103 	orr.w	r1, r2, r3
 800a020:	68fb      	ldr	r3, [r7, #12]
 800a022:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800a026:	687b      	ldr	r3, [r7, #4]
 800a028:	681b      	ldr	r3, [r3, #0]
 800a02a:	430a      	orrs	r2, r1
 800a02c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 800a02e:	687b      	ldr	r3, [r7, #4]
 800a030:	681b      	ldr	r3, [r3, #0]
 800a032:	69da      	ldr	r2, [r3, #28]
 800a034:	687b      	ldr	r3, [r7, #4]
 800a036:	681b      	ldr	r3, [r3, #0]
 800a038:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800a03c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	2200      	movs	r2, #0
 800a042:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 800a044:	687b      	ldr	r3, [r7, #4]
 800a046:	2201      	movs	r2, #1
 800a048:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 800a04c:	2300      	movs	r3, #0
}
 800a04e:	4618      	mov	r0, r3
 800a050:	3710      	adds	r7, #16
 800a052:	46bd      	mov	sp, r7
 800a054:	bd80      	pop	{r7, pc}
	...

0800a058 <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800a058:	b480      	push	{r7}
 800a05a:	b087      	sub	sp, #28
 800a05c:	af00      	add	r7, sp, #0
 800a05e:	60f8      	str	r0, [r7, #12]
 800a060:	60b9      	str	r1, [r7, #8]
 800a062:	4613      	mov	r3, r2
 800a064:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a066:	2300      	movs	r3, #0
 800a068:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 800a06a:	68bb      	ldr	r3, [r7, #8]
 800a06c:	2b00      	cmp	r3, #0
 800a06e:	d002      	beq.n	800a076 <HAL_SPI_Transmit_IT+0x1e>
 800a070:	88fb      	ldrh	r3, [r7, #6]
 800a072:	2b00      	cmp	r3, #0
 800a074:	d102      	bne.n	800a07c <HAL_SPI_Transmit_IT+0x24>
  {
    errorcode = HAL_ERROR;
 800a076:	2301      	movs	r3, #1
 800a078:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a07a:	e06d      	b.n	800a158 <HAL_SPI_Transmit_IT+0x100>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 800a07c:	68fb      	ldr	r3, [r7, #12]
 800a07e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a082:	b2db      	uxtb	r3, r3
 800a084:	2b01      	cmp	r3, #1
 800a086:	d002      	beq.n	800a08e <HAL_SPI_Transmit_IT+0x36>
  {
    errorcode = HAL_BUSY;
 800a088:	2302      	movs	r3, #2
 800a08a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a08c:	e064      	b.n	800a158 <HAL_SPI_Transmit_IT+0x100>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a08e:	68fb      	ldr	r3, [r7, #12]
 800a090:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a094:	2b01      	cmp	r3, #1
 800a096:	d101      	bne.n	800a09c <HAL_SPI_Transmit_IT+0x44>
 800a098:	2302      	movs	r3, #2
 800a09a:	e05e      	b.n	800a15a <HAL_SPI_Transmit_IT+0x102>
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	2201      	movs	r2, #1
 800a0a0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a0a4:	68fb      	ldr	r3, [r7, #12]
 800a0a6:	2203      	movs	r2, #3
 800a0a8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a0ac:	68fb      	ldr	r3, [r7, #12]
 800a0ae:	2200      	movs	r2, #0
 800a0b0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a0b2:	68fb      	ldr	r3, [r7, #12]
 800a0b4:	68ba      	ldr	r2, [r7, #8]
 800a0b6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a0b8:	68fb      	ldr	r3, [r7, #12]
 800a0ba:	88fa      	ldrh	r2, [r7, #6]
 800a0bc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a0be:	68fb      	ldr	r3, [r7, #12]
 800a0c0:	88fa      	ldrh	r2, [r7, #6]
 800a0c2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a0c4:	68fb      	ldr	r3, [r7, #12]
 800a0c6:	2200      	movs	r2, #0
 800a0c8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 800a0ca:	68fb      	ldr	r3, [r7, #12]
 800a0cc:	2200      	movs	r2, #0
 800a0ce:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800a0d2:	68fb      	ldr	r3, [r7, #12]
 800a0d4:	2200      	movs	r2, #0
 800a0d6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2200      	movs	r2, #0
 800a0de:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a0e0:	68fb      	ldr	r3, [r7, #12]
 800a0e2:	68db      	ldr	r3, [r3, #12]
 800a0e4:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a0e8:	d903      	bls.n	800a0f2 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	4a1e      	ldr	r2, [pc, #120]	; (800a168 <HAL_SPI_Transmit_IT+0x110>)
 800a0ee:	651a      	str	r2, [r3, #80]	; 0x50
 800a0f0:	e002      	b.n	800a0f8 <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 800a0f2:	68fb      	ldr	r3, [r7, #12]
 800a0f4:	4a1d      	ldr	r2, [pc, #116]	; (800a16c <HAL_SPI_Transmit_IT+0x114>)
 800a0f6:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a0f8:	68fb      	ldr	r3, [r7, #12]
 800a0fa:	689b      	ldr	r3, [r3, #8]
 800a0fc:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a100:	d10f      	bne.n	800a122 <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a102:	68fb      	ldr	r3, [r7, #12]
 800a104:	681b      	ldr	r3, [r3, #0]
 800a106:	681a      	ldr	r2, [r3, #0]
 800a108:	68fb      	ldr	r3, [r7, #12]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a110:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a112:	68fb      	ldr	r3, [r7, #12]
 800a114:	681b      	ldr	r3, [r3, #0]
 800a116:	681a      	ldr	r2, [r3, #0]
 800a118:	68fb      	ldr	r3, [r7, #12]
 800a11a:	681b      	ldr	r3, [r3, #0]
 800a11c:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a120:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a122:	68fb      	ldr	r3, [r7, #12]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	681b      	ldr	r3, [r3, #0]
 800a128:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a12c:	2b40      	cmp	r3, #64	; 0x40
 800a12e:	d007      	beq.n	800a140 <HAL_SPI_Transmit_IT+0xe8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a130:	68fb      	ldr	r3, [r7, #12]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	681a      	ldr	r2, [r3, #0]
 800a136:	68fb      	ldr	r3, [r7, #12]
 800a138:	681b      	ldr	r3, [r3, #0]
 800a13a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a13e:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a140:	68fb      	ldr	r3, [r7, #12]
 800a142:	2200      	movs	r2, #0
 800a144:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800a148:	68fb      	ldr	r3, [r7, #12]
 800a14a:	681b      	ldr	r3, [r3, #0]
 800a14c:	685a      	ldr	r2, [r3, #4]
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	681b      	ldr	r3, [r3, #0]
 800a152:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800a156:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 800a158:	7dfb      	ldrb	r3, [r7, #23]
}
 800a15a:	4618      	mov	r0, r3
 800a15c:	371c      	adds	r7, #28
 800a15e:	46bd      	mov	sp, r7
 800a160:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a164:	4770      	bx	lr
 800a166:	bf00      	nop
 800a168:	0800b6d7 	.word	0x0800b6d7
 800a16c:	0800b691 	.word	0x0800b691

0800a170 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800a170:	b580      	push	{r7, lr}
 800a172:	b086      	sub	sp, #24
 800a174:	af00      	add	r7, sp, #0
 800a176:	60f8      	str	r0, [r7, #12]
 800a178:	60b9      	str	r1, [r7, #8]
 800a17a:	4613      	mov	r3, r2
 800a17c:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a17e:	2300      	movs	r3, #0
 800a180:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 800a182:	68fb      	ldr	r3, [r7, #12]
 800a184:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a188:	b2db      	uxtb	r3, r3
 800a18a:	2b01      	cmp	r3, #1
 800a18c:	d002      	beq.n	800a194 <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 800a18e:	2302      	movs	r3, #2
 800a190:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a192:	e092      	b.n	800a2ba <HAL_SPI_Receive_IT+0x14a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a194:	68fb      	ldr	r3, [r7, #12]
 800a196:	689b      	ldr	r3, [r3, #8]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d110      	bne.n	800a1be <HAL_SPI_Receive_IT+0x4e>
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	685b      	ldr	r3, [r3, #4]
 800a1a0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a1a4:	d10b      	bne.n	800a1be <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a1a6:	68fb      	ldr	r3, [r7, #12]
 800a1a8:	2204      	movs	r2, #4
 800a1aa:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 800a1ae:	88fb      	ldrh	r3, [r7, #6]
 800a1b0:	68ba      	ldr	r2, [r7, #8]
 800a1b2:	68b9      	ldr	r1, [r7, #8]
 800a1b4:	68f8      	ldr	r0, [r7, #12]
 800a1b6:	f000 f889 	bl	800a2cc <HAL_SPI_TransmitReceive_IT>
 800a1ba:	4603      	mov	r3, r0
 800a1bc:	e07e      	b.n	800a2bc <HAL_SPI_Receive_IT+0x14c>
  }


  if ((pData == NULL) || (Size == 0U))
 800a1be:	68bb      	ldr	r3, [r7, #8]
 800a1c0:	2b00      	cmp	r3, #0
 800a1c2:	d002      	beq.n	800a1ca <HAL_SPI_Receive_IT+0x5a>
 800a1c4:	88fb      	ldrh	r3, [r7, #6]
 800a1c6:	2b00      	cmp	r3, #0
 800a1c8:	d102      	bne.n	800a1d0 <HAL_SPI_Receive_IT+0x60>
  {
    errorcode = HAL_ERROR;
 800a1ca:	2301      	movs	r3, #1
 800a1cc:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a1ce:	e074      	b.n	800a2ba <HAL_SPI_Receive_IT+0x14a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a1d6:	2b01      	cmp	r3, #1
 800a1d8:	d101      	bne.n	800a1de <HAL_SPI_Receive_IT+0x6e>
 800a1da:	2302      	movs	r3, #2
 800a1dc:	e06e      	b.n	800a2bc <HAL_SPI_Receive_IT+0x14c>
 800a1de:	68fb      	ldr	r3, [r7, #12]
 800a1e0:	2201      	movs	r2, #1
 800a1e2:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	2204      	movs	r2, #4
 800a1ea:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a1ee:	68fb      	ldr	r3, [r7, #12]
 800a1f0:	2200      	movs	r2, #0
 800a1f2:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a1f4:	68fb      	ldr	r3, [r7, #12]
 800a1f6:	68ba      	ldr	r2, [r7, #8]
 800a1f8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800a1fa:	68fb      	ldr	r3, [r7, #12]
 800a1fc:	88fa      	ldrh	r2, [r7, #6]
 800a1fe:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	88fa      	ldrh	r2, [r7, #6]
 800a206:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	2200      	movs	r2, #0
 800a20e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 800a210:	68fb      	ldr	r3, [r7, #12]
 800a212:	2200      	movs	r2, #0
 800a214:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800a216:	68fb      	ldr	r3, [r7, #12]
 800a218:	2200      	movs	r2, #0
 800a21a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	2200      	movs	r2, #0
 800a220:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a222:	68fb      	ldr	r3, [r7, #12]
 800a224:	68db      	ldr	r3, [r3, #12]
 800a226:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a22a:	d90b      	bls.n	800a244 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	681b      	ldr	r3, [r3, #0]
 800a230:	685a      	ldr	r2, [r3, #4]
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	681b      	ldr	r3, [r3, #0]
 800a236:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a23a:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 800a23c:	68fb      	ldr	r3, [r7, #12]
 800a23e:	4a21      	ldr	r2, [pc, #132]	; (800a2c4 <HAL_SPI_Receive_IT+0x154>)
 800a240:	64da      	str	r2, [r3, #76]	; 0x4c
 800a242:	e00a      	b.n	800a25a <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	681b      	ldr	r3, [r3, #0]
 800a248:	685a      	ldr	r2, [r3, #4]
 800a24a:	68fb      	ldr	r3, [r7, #12]
 800a24c:	681b      	ldr	r3, [r3, #0]
 800a24e:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a252:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	4a1c      	ldr	r2, [pc, #112]	; (800a2c8 <HAL_SPI_Receive_IT+0x158>)
 800a258:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a25a:	68fb      	ldr	r3, [r7, #12]
 800a25c:	689b      	ldr	r3, [r3, #8]
 800a25e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a262:	d10f      	bne.n	800a284 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a264:	68fb      	ldr	r3, [r7, #12]
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	681a      	ldr	r2, [r3, #0]
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a272:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800a274:	68fb      	ldr	r3, [r7, #12]
 800a276:	681b      	ldr	r3, [r3, #0]
 800a278:	681a      	ldr	r2, [r3, #0]
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	681b      	ldr	r3, [r3, #0]
 800a27e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a282:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a284:	68fb      	ldr	r3, [r7, #12]
 800a286:	681b      	ldr	r3, [r3, #0]
 800a288:	681b      	ldr	r3, [r3, #0]
 800a28a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a28e:	2b40      	cmp	r3, #64	; 0x40
 800a290:	d007      	beq.n	800a2a2 <HAL_SPI_Receive_IT+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	681b      	ldr	r3, [r3, #0]
 800a296:	681a      	ldr	r2, [r3, #0]
 800a298:	68fb      	ldr	r3, [r7, #12]
 800a29a:	681b      	ldr	r3, [r3, #0]
 800a29c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a2a0:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a2a2:	68fb      	ldr	r3, [r7, #12]
 800a2a4:	2200      	movs	r2, #0
 800a2a6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800a2aa:	68fb      	ldr	r3, [r7, #12]
 800a2ac:	681b      	ldr	r3, [r3, #0]
 800a2ae:	685a      	ldr	r2, [r3, #4]
 800a2b0:	68fb      	ldr	r3, [r7, #12]
 800a2b2:	681b      	ldr	r3, [r3, #0]
 800a2b4:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 800a2b8:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 800a2ba:	7dfb      	ldrb	r3, [r7, #23]
}
 800a2bc:	4618      	mov	r0, r3
 800a2be:	3718      	adds	r7, #24
 800a2c0:	46bd      	mov	sp, r7
 800a2c2:	bd80      	pop	{r7, pc}
 800a2c4:	0800b645 	.word	0x0800b645
 800a2c8:	0800b5f5 	.word	0x0800b5f5

0800a2cc <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b087      	sub	sp, #28
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	60f8      	str	r0, [r7, #12]
 800a2d4:	60b9      	str	r1, [r7, #8]
 800a2d6:	607a      	str	r2, [r7, #4]
 800a2d8:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 800a2da:	2300      	movs	r3, #0
 800a2dc:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a2de:	68fb      	ldr	r3, [r7, #12]
 800a2e0:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a2e4:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800a2e6:	68fb      	ldr	r3, [r7, #12]
 800a2e8:	685b      	ldr	r3, [r3, #4]
 800a2ea:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800a2ec:	7dbb      	ldrb	r3, [r7, #22]
 800a2ee:	2b01      	cmp	r3, #1
 800a2f0:	d00d      	beq.n	800a30e <HAL_SPI_TransmitReceive_IT+0x42>
 800a2f2:	693b      	ldr	r3, [r7, #16]
 800a2f4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a2f8:	d106      	bne.n	800a308 <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a2fa:	68fb      	ldr	r3, [r7, #12]
 800a2fc:	689b      	ldr	r3, [r3, #8]
 800a2fe:	2b00      	cmp	r3, #0
 800a300:	d102      	bne.n	800a308 <HAL_SPI_TransmitReceive_IT+0x3c>
 800a302:	7dbb      	ldrb	r3, [r7, #22]
 800a304:	2b04      	cmp	r3, #4
 800a306:	d002      	beq.n	800a30e <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 800a308:	2302      	movs	r3, #2
 800a30a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a30c:	e07d      	b.n	800a40a <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a30e:	68bb      	ldr	r3, [r7, #8]
 800a310:	2b00      	cmp	r3, #0
 800a312:	d005      	beq.n	800a320 <HAL_SPI_TransmitReceive_IT+0x54>
 800a314:	687b      	ldr	r3, [r7, #4]
 800a316:	2b00      	cmp	r3, #0
 800a318:	d002      	beq.n	800a320 <HAL_SPI_TransmitReceive_IT+0x54>
 800a31a:	887b      	ldrh	r3, [r7, #2]
 800a31c:	2b00      	cmp	r3, #0
 800a31e:	d102      	bne.n	800a326 <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 800a320:	2301      	movs	r3, #1
 800a322:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a324:	e071      	b.n	800a40a <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 800a326:	68fb      	ldr	r3, [r7, #12]
 800a328:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a32c:	2b01      	cmp	r3, #1
 800a32e:	d101      	bne.n	800a334 <HAL_SPI_TransmitReceive_IT+0x68>
 800a330:	2302      	movs	r3, #2
 800a332:	e06b      	b.n	800a40c <HAL_SPI_TransmitReceive_IT+0x140>
 800a334:	68fb      	ldr	r3, [r7, #12]
 800a336:	2201      	movs	r2, #1
 800a338:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a342:	b2db      	uxtb	r3, r3
 800a344:	2b04      	cmp	r3, #4
 800a346:	d003      	beq.n	800a350 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	2205      	movs	r2, #5
 800a34c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a350:	68fb      	ldr	r3, [r7, #12]
 800a352:	2200      	movs	r2, #0
 800a354:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a356:	68fb      	ldr	r3, [r7, #12]
 800a358:	68ba      	ldr	r2, [r7, #8]
 800a35a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a35c:	68fb      	ldr	r3, [r7, #12]
 800a35e:	887a      	ldrh	r2, [r7, #2]
 800a360:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a362:	68fb      	ldr	r3, [r7, #12]
 800a364:	887a      	ldrh	r2, [r7, #2]
 800a366:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a368:	68fb      	ldr	r3, [r7, #12]
 800a36a:	687a      	ldr	r2, [r7, #4]
 800a36c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800a36e:	68fb      	ldr	r3, [r7, #12]
 800a370:	887a      	ldrh	r2, [r7, #2]
 800a372:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800a376:	68fb      	ldr	r3, [r7, #12]
 800a378:	887a      	ldrh	r2, [r7, #2]
 800a37a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a37e:	68fb      	ldr	r3, [r7, #12]
 800a380:	68db      	ldr	r3, [r3, #12]
 800a382:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a386:	d906      	bls.n	800a396 <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	4a23      	ldr	r2, [pc, #140]	; (800a418 <HAL_SPI_TransmitReceive_IT+0x14c>)
 800a38c:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 800a38e:	68fb      	ldr	r3, [r7, #12]
 800a390:	4a22      	ldr	r2, [pc, #136]	; (800a41c <HAL_SPI_TransmitReceive_IT+0x150>)
 800a392:	651a      	str	r2, [r3, #80]	; 0x50
 800a394:	e005      	b.n	800a3a2 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 800a396:	68fb      	ldr	r3, [r7, #12]
 800a398:	4a21      	ldr	r2, [pc, #132]	; (800a420 <HAL_SPI_TransmitReceive_IT+0x154>)
 800a39a:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 800a39c:	68fb      	ldr	r3, [r7, #12]
 800a39e:	4a21      	ldr	r2, [pc, #132]	; (800a424 <HAL_SPI_TransmitReceive_IT+0x158>)
 800a3a0:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 800a3a2:	68fb      	ldr	r3, [r7, #12]
 800a3a4:	68db      	ldr	r3, [r3, #12]
 800a3a6:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a3aa:	d802      	bhi.n	800a3b2 <HAL_SPI_TransmitReceive_IT+0xe6>
 800a3ac:	887b      	ldrh	r3, [r7, #2]
 800a3ae:	2b01      	cmp	r3, #1
 800a3b0:	d908      	bls.n	800a3c4 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a3b2:	68fb      	ldr	r3, [r7, #12]
 800a3b4:	681b      	ldr	r3, [r3, #0]
 800a3b6:	685a      	ldr	r2, [r3, #4]
 800a3b8:	68fb      	ldr	r3, [r7, #12]
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a3c0:	605a      	str	r2, [r3, #4]
 800a3c2:	e007      	b.n	800a3d4 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a3c4:	68fb      	ldr	r3, [r7, #12]
 800a3c6:	681b      	ldr	r3, [r3, #0]
 800a3c8:	685a      	ldr	r2, [r3, #4]
 800a3ca:	68fb      	ldr	r3, [r7, #12]
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a3d2:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	681b      	ldr	r3, [r3, #0]
 800a3d8:	681b      	ldr	r3, [r3, #0]
 800a3da:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3de:	2b40      	cmp	r3, #64	; 0x40
 800a3e0:	d007      	beq.n	800a3f2 <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a3e2:	68fb      	ldr	r3, [r7, #12]
 800a3e4:	681b      	ldr	r3, [r3, #0]
 800a3e6:	681a      	ldr	r2, [r3, #0]
 800a3e8:	68fb      	ldr	r3, [r7, #12]
 800a3ea:	681b      	ldr	r3, [r3, #0]
 800a3ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a3f0:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a3f2:	68fb      	ldr	r3, [r7, #12]
 800a3f4:	2200      	movs	r2, #0
 800a3f6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800a3fa:	68fb      	ldr	r3, [r7, #12]
 800a3fc:	681b      	ldr	r3, [r3, #0]
 800a3fe:	685a      	ldr	r2, [r3, #4]
 800a400:	68fb      	ldr	r3, [r7, #12]
 800a402:	681b      	ldr	r3, [r3, #0]
 800a404:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 800a408:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 800a40a:	7dfb      	ldrb	r3, [r7, #23]
}
 800a40c:	4618      	mov	r0, r3
 800a40e:	371c      	adds	r7, #28
 800a410:	46bd      	mov	sp, r7
 800a412:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a416:	4770      	bx	lr
 800a418:	0800b52f 	.word	0x0800b52f
 800a41c:	0800b595 	.word	0x0800b595
 800a420:	0800b3df 	.word	0x0800b3df
 800a424:	0800b49d 	.word	0x0800b49d

0800a428 <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800a428:	b580      	push	{r7, lr}
 800a42a:	b086      	sub	sp, #24
 800a42c:	af00      	add	r7, sp, #0
 800a42e:	60f8      	str	r0, [r7, #12]
 800a430:	60b9      	str	r1, [r7, #8]
 800a432:	4613      	mov	r3, r2
 800a434:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a436:	2300      	movs	r3, #0
 800a438:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a43a:	68fb      	ldr	r3, [r7, #12]
 800a43c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a440:	2b01      	cmp	r3, #1
 800a442:	d101      	bne.n	800a448 <HAL_SPI_Transmit_DMA+0x20>
 800a444:	2302      	movs	r3, #2
 800a446:	e0d4      	b.n	800a5f2 <HAL_SPI_Transmit_DMA+0x1ca>
 800a448:	68fb      	ldr	r3, [r7, #12]
 800a44a:	2201      	movs	r2, #1
 800a44c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 800a450:	68fb      	ldr	r3, [r7, #12]
 800a452:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a456:	b2db      	uxtb	r3, r3
 800a458:	2b01      	cmp	r3, #1
 800a45a:	d002      	beq.n	800a462 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 800a45c:	2302      	movs	r3, #2
 800a45e:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a460:	e0c2      	b.n	800a5e8 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 800a462:	68bb      	ldr	r3, [r7, #8]
 800a464:	2b00      	cmp	r3, #0
 800a466:	d002      	beq.n	800a46e <HAL_SPI_Transmit_DMA+0x46>
 800a468:	88fb      	ldrh	r3, [r7, #6]
 800a46a:	2b00      	cmp	r3, #0
 800a46c:	d102      	bne.n	800a474 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 800a46e:	2301      	movs	r3, #1
 800a470:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a472:	e0b9      	b.n	800a5e8 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 800a474:	68fb      	ldr	r3, [r7, #12]
 800a476:	2203      	movs	r2, #3
 800a478:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a47c:	68fb      	ldr	r3, [r7, #12]
 800a47e:	2200      	movs	r2, #0
 800a480:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 800a482:	68fb      	ldr	r3, [r7, #12]
 800a484:	68ba      	ldr	r2, [r7, #8]
 800a486:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a488:	68fb      	ldr	r3, [r7, #12]
 800a48a:	88fa      	ldrh	r2, [r7, #6]
 800a48c:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a48e:	68fb      	ldr	r3, [r7, #12]
 800a490:	88fa      	ldrh	r2, [r7, #6]
 800a492:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 800a494:	68fb      	ldr	r3, [r7, #12]
 800a496:	2200      	movs	r2, #0
 800a498:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 800a49a:	68fb      	ldr	r3, [r7, #12]
 800a49c:	2200      	movs	r2, #0
 800a49e:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 800a4a0:	68fb      	ldr	r3, [r7, #12]
 800a4a2:	2200      	movs	r2, #0
 800a4a4:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 800a4a6:	68fb      	ldr	r3, [r7, #12]
 800a4a8:	2200      	movs	r2, #0
 800a4aa:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 800a4ae:	68fb      	ldr	r3, [r7, #12]
 800a4b0:	2200      	movs	r2, #0
 800a4b2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a4b6:	68fb      	ldr	r3, [r7, #12]
 800a4b8:	689b      	ldr	r3, [r3, #8]
 800a4ba:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a4be:	d10f      	bne.n	800a4e0 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a4c0:	68fb      	ldr	r3, [r7, #12]
 800a4c2:	681b      	ldr	r3, [r3, #0]
 800a4c4:	681a      	ldr	r2, [r3, #0]
 800a4c6:	68fb      	ldr	r3, [r7, #12]
 800a4c8:	681b      	ldr	r3, [r3, #0]
 800a4ca:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a4ce:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 800a4d0:	68fb      	ldr	r3, [r7, #12]
 800a4d2:	681b      	ldr	r3, [r3, #0]
 800a4d4:	681a      	ldr	r2, [r3, #0]
 800a4d6:	68fb      	ldr	r3, [r7, #12]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a4de:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 800a4e0:	68fb      	ldr	r3, [r7, #12]
 800a4e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4e4:	4a45      	ldr	r2, [pc, #276]	; (800a5fc <HAL_SPI_Transmit_DMA+0x1d4>)
 800a4e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 800a4e8:	68fb      	ldr	r3, [r7, #12]
 800a4ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4ec:	4a44      	ldr	r2, [pc, #272]	; (800a600 <HAL_SPI_Transmit_DMA+0x1d8>)
 800a4ee:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 800a4f0:	68fb      	ldr	r3, [r7, #12]
 800a4f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4f4:	4a43      	ldr	r2, [pc, #268]	; (800a604 <HAL_SPI_Transmit_DMA+0x1dc>)
 800a4f6:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 800a4f8:	68fb      	ldr	r3, [r7, #12]
 800a4fa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a4fc:	2200      	movs	r2, #0
 800a4fe:	651a      	str	r2, [r3, #80]	; 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800a500:	68fb      	ldr	r3, [r7, #12]
 800a502:	681b      	ldr	r3, [r3, #0]
 800a504:	685a      	ldr	r2, [r3, #4]
 800a506:	68fb      	ldr	r3, [r7, #12]
 800a508:	681b      	ldr	r3, [r3, #0]
 800a50a:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a50e:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	68db      	ldr	r3, [r3, #12]
 800a514:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a518:	d82d      	bhi.n	800a576 <HAL_SPI_Transmit_DMA+0x14e>
 800a51a:	68fb      	ldr	r3, [r7, #12]
 800a51c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a51e:	699b      	ldr	r3, [r3, #24]
 800a520:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a524:	d127      	bne.n	800a576 <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 800a526:	68fb      	ldr	r3, [r7, #12]
 800a528:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a52a:	b29b      	uxth	r3, r3
 800a52c:	f003 0301 	and.w	r3, r3, #1
 800a530:	2b00      	cmp	r3, #0
 800a532:	d10f      	bne.n	800a554 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800a534:	68fb      	ldr	r3, [r7, #12]
 800a536:	681b      	ldr	r3, [r3, #0]
 800a538:	685a      	ldr	r2, [r3, #4]
 800a53a:	68fb      	ldr	r3, [r7, #12]
 800a53c:	681b      	ldr	r3, [r3, #0]
 800a53e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a542:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 800a544:	68fb      	ldr	r3, [r7, #12]
 800a546:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a548:	b29b      	uxth	r3, r3
 800a54a:	085b      	lsrs	r3, r3, #1
 800a54c:	b29a      	uxth	r2, r3
 800a54e:	68fb      	ldr	r3, [r7, #12]
 800a550:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a552:	e010      	b.n	800a576 <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800a554:	68fb      	ldr	r3, [r7, #12]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	685a      	ldr	r2, [r3, #4]
 800a55a:	68fb      	ldr	r3, [r7, #12]
 800a55c:	681b      	ldr	r3, [r3, #0]
 800a55e:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a562:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800a564:	68fb      	ldr	r3, [r7, #12]
 800a566:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a568:	b29b      	uxth	r3, r3
 800a56a:	085b      	lsrs	r3, r3, #1
 800a56c:	b29b      	uxth	r3, r3
 800a56e:	3301      	adds	r3, #1
 800a570:	b29a      	uxth	r2, r3
 800a572:	68fb      	ldr	r3, [r7, #12]
 800a574:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a576:	68fb      	ldr	r3, [r7, #12]
 800a578:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800a57a:	68fb      	ldr	r3, [r7, #12]
 800a57c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a57e:	4619      	mov	r1, r3
 800a580:	68fb      	ldr	r3, [r7, #12]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	330c      	adds	r3, #12
 800a586:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800a588:	68fb      	ldr	r3, [r7, #12]
 800a58a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a58c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a58e:	f7fa f8e5 	bl	800475c <HAL_DMA_Start_IT>
 800a592:	4603      	mov	r3, r0
 800a594:	2b00      	cmp	r3, #0
 800a596:	d008      	beq.n	800a5aa <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a598:	68fb      	ldr	r3, [r7, #12]
 800a59a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a59c:	f043 0210 	orr.w	r2, r3, #16
 800a5a0:	68fb      	ldr	r3, [r7, #12]
 800a5a2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800a5a4:	2301      	movs	r3, #1
 800a5a6:	75fb      	strb	r3, [r7, #23]

    goto error;
 800a5a8:	e01e      	b.n	800a5e8 <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a5aa:	68fb      	ldr	r3, [r7, #12]
 800a5ac:	681b      	ldr	r3, [r3, #0]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5b4:	2b40      	cmp	r3, #64	; 0x40
 800a5b6:	d007      	beq.n	800a5c8 <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a5b8:	68fb      	ldr	r3, [r7, #12]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	681a      	ldr	r2, [r3, #0]
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	681b      	ldr	r3, [r3, #0]
 800a5c2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a5c6:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a5c8:	68fb      	ldr	r3, [r7, #12]
 800a5ca:	681b      	ldr	r3, [r3, #0]
 800a5cc:	685a      	ldr	r2, [r3, #4]
 800a5ce:	68fb      	ldr	r3, [r7, #12]
 800a5d0:	681b      	ldr	r3, [r3, #0]
 800a5d2:	f042 0220 	orr.w	r2, r2, #32
 800a5d6:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a5d8:	68fb      	ldr	r3, [r7, #12]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	685a      	ldr	r2, [r3, #4]
 800a5de:	68fb      	ldr	r3, [r7, #12]
 800a5e0:	681b      	ldr	r3, [r3, #0]
 800a5e2:	f042 0202 	orr.w	r2, r2, #2
 800a5e6:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a5e8:	68fb      	ldr	r3, [r7, #12]
 800a5ea:	2200      	movs	r2, #0
 800a5ec:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a5f0:	7dfb      	ldrb	r3, [r7, #23]
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3718      	adds	r7, #24
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}
 800a5fa:	bf00      	nop
 800a5fc:	0800b161 	.word	0x0800b161
 800a600:	0800af7d 	.word	0x0800af7d
 800a604:	0800b1b5 	.word	0x0800b1b5

0800a608 <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800a608:	b580      	push	{r7, lr}
 800a60a:	b086      	sub	sp, #24
 800a60c:	af00      	add	r7, sp, #0
 800a60e:	60f8      	str	r0, [r7, #12]
 800a610:	60b9      	str	r1, [r7, #8]
 800a612:	4613      	mov	r3, r2
 800a614:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a616:	2300      	movs	r3, #0
 800a618:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 800a61a:	68fb      	ldr	r3, [r7, #12]
 800a61c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a620:	b2db      	uxtb	r3, r3
 800a622:	2b01      	cmp	r3, #1
 800a624:	d002      	beq.n	800a62c <HAL_SPI_Receive_DMA+0x24>
  {
    errorcode = HAL_BUSY;
 800a626:	2302      	movs	r3, #2
 800a628:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a62a:	e0fe      	b.n	800a82a <HAL_SPI_Receive_DMA+0x222>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a62c:	68fb      	ldr	r3, [r7, #12]
 800a62e:	689b      	ldr	r3, [r3, #8]
 800a630:	2b00      	cmp	r3, #0
 800a632:	d110      	bne.n	800a656 <HAL_SPI_Receive_DMA+0x4e>
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	685b      	ldr	r3, [r3, #4]
 800a638:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a63c:	d10b      	bne.n	800a656 <HAL_SPI_Receive_DMA+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800a63e:	68fb      	ldr	r3, [r7, #12]
 800a640:	2204      	movs	r2, #4
 800a642:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 800a646:	88fb      	ldrh	r3, [r7, #6]
 800a648:	68ba      	ldr	r2, [r7, #8]
 800a64a:	68b9      	ldr	r1, [r7, #8]
 800a64c:	68f8      	ldr	r0, [r7, #12]
 800a64e:	f000 f8fb 	bl	800a848 <HAL_SPI_TransmitReceive_DMA>
 800a652:	4603      	mov	r3, r0
 800a654:	e0ee      	b.n	800a834 <HAL_SPI_Receive_DMA+0x22c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 800a656:	68fb      	ldr	r3, [r7, #12]
 800a658:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a65c:	2b01      	cmp	r3, #1
 800a65e:	d101      	bne.n	800a664 <HAL_SPI_Receive_DMA+0x5c>
 800a660:	2302      	movs	r3, #2
 800a662:	e0e7      	b.n	800a834 <HAL_SPI_Receive_DMA+0x22c>
 800a664:	68fb      	ldr	r3, [r7, #12]
 800a666:	2201      	movs	r2, #1
 800a668:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 800a66c:	68bb      	ldr	r3, [r7, #8]
 800a66e:	2b00      	cmp	r3, #0
 800a670:	d002      	beq.n	800a678 <HAL_SPI_Receive_DMA+0x70>
 800a672:	88fb      	ldrh	r3, [r7, #6]
 800a674:	2b00      	cmp	r3, #0
 800a676:	d102      	bne.n	800a67e <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 800a678:	2301      	movs	r3, #1
 800a67a:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a67c:	e0d5      	b.n	800a82a <HAL_SPI_Receive_DMA+0x222>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 800a67e:	68fb      	ldr	r3, [r7, #12]
 800a680:	2204      	movs	r2, #4
 800a682:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a686:	68fb      	ldr	r3, [r7, #12]
 800a688:	2200      	movs	r2, #0
 800a68a:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 800a68c:	68fb      	ldr	r3, [r7, #12]
 800a68e:	68ba      	ldr	r2, [r7, #8]
 800a690:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800a692:	68fb      	ldr	r3, [r7, #12]
 800a694:	88fa      	ldrh	r2, [r7, #6]
 800a696:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800a69a:	68fb      	ldr	r3, [r7, #12]
 800a69c:	88fa      	ldrh	r2, [r7, #6]
 800a69e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a6a2:	68fb      	ldr	r3, [r7, #12]
 800a6a4:	2200      	movs	r2, #0
 800a6a6:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a6a8:	68fb      	ldr	r3, [r7, #12]
 800a6aa:	2200      	movs	r2, #0
 800a6ac:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 800a6ae:	68fb      	ldr	r3, [r7, #12]
 800a6b0:	2200      	movs	r2, #0
 800a6b2:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 800a6b4:	68fb      	ldr	r3, [r7, #12]
 800a6b6:	2200      	movs	r2, #0
 800a6b8:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800a6ba:	68fb      	ldr	r3, [r7, #12]
 800a6bc:	689b      	ldr	r3, [r3, #8]
 800a6be:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a6c2:	d10f      	bne.n	800a6e4 <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 800a6c4:	68fb      	ldr	r3, [r7, #12]
 800a6c6:	681b      	ldr	r3, [r3, #0]
 800a6c8:	681a      	ldr	r2, [r3, #0]
 800a6ca:	68fb      	ldr	r3, [r7, #12]
 800a6cc:	681b      	ldr	r3, [r3, #0]
 800a6ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a6d2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 800a6d4:	68fb      	ldr	r3, [r7, #12]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	681a      	ldr	r2, [r3, #0]
 800a6da:	68fb      	ldr	r3, [r7, #12]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a6e2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a6e4:	68fb      	ldr	r3, [r7, #12]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	685a      	ldr	r2, [r3, #4]
 800a6ea:	68fb      	ldr	r3, [r7, #12]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a6f2:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a6f4:	68fb      	ldr	r3, [r7, #12]
 800a6f6:	68db      	ldr	r3, [r3, #12]
 800a6f8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a6fc:	d908      	bls.n	800a710 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a6fe:	68fb      	ldr	r3, [r7, #12]
 800a700:	681b      	ldr	r3, [r3, #0]
 800a702:	685a      	ldr	r2, [r3, #4]
 800a704:	68fb      	ldr	r3, [r7, #12]
 800a706:	681b      	ldr	r3, [r3, #0]
 800a708:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a70c:	605a      	str	r2, [r3, #4]
 800a70e:	e042      	b.n	800a796 <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a710:	68fb      	ldr	r3, [r7, #12]
 800a712:	681b      	ldr	r3, [r3, #0]
 800a714:	685a      	ldr	r2, [r3, #4]
 800a716:	68fb      	ldr	r3, [r7, #12]
 800a718:	681b      	ldr	r3, [r3, #0]
 800a71a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a71e:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a720:	68fb      	ldr	r3, [r7, #12]
 800a722:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a724:	699b      	ldr	r3, [r3, #24]
 800a726:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a72a:	d134      	bne.n	800a796 <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a72c:	68fb      	ldr	r3, [r7, #12]
 800a72e:	681b      	ldr	r3, [r3, #0]
 800a730:	685a      	ldr	r2, [r3, #4]
 800a732:	68fb      	ldr	r3, [r7, #12]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a73a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800a73c:	68fb      	ldr	r3, [r7, #12]
 800a73e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a742:	b29b      	uxth	r3, r3
 800a744:	f003 0301 	and.w	r3, r3, #1
 800a748:	2b00      	cmp	r3, #0
 800a74a:	d111      	bne.n	800a770 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a74c:	68fb      	ldr	r3, [r7, #12]
 800a74e:	681b      	ldr	r3, [r3, #0]
 800a750:	685a      	ldr	r2, [r3, #4]
 800a752:	68fb      	ldr	r3, [r7, #12]
 800a754:	681b      	ldr	r3, [r3, #0]
 800a756:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a75a:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800a75c:	68fb      	ldr	r3, [r7, #12]
 800a75e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a762:	b29b      	uxth	r3, r3
 800a764:	085b      	lsrs	r3, r3, #1
 800a766:	b29a      	uxth	r2, r3
 800a768:	68fb      	ldr	r3, [r7, #12]
 800a76a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800a76e:	e012      	b.n	800a796 <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a770:	68fb      	ldr	r3, [r7, #12]
 800a772:	681b      	ldr	r3, [r3, #0]
 800a774:	685a      	ldr	r2, [r3, #4]
 800a776:	68fb      	ldr	r3, [r7, #12]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a77e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800a780:	68fb      	ldr	r3, [r7, #12]
 800a782:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a786:	b29b      	uxth	r3, r3
 800a788:	085b      	lsrs	r3, r3, #1
 800a78a:	b29b      	uxth	r3, r3
 800a78c:	3301      	adds	r3, #1
 800a78e:	b29a      	uxth	r2, r3
 800a790:	68fb      	ldr	r3, [r7, #12]
 800a792:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a796:	68fb      	ldr	r3, [r7, #12]
 800a798:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a79a:	4a28      	ldr	r2, [pc, #160]	; (800a83c <HAL_SPI_Receive_DMA+0x234>)
 800a79c:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 800a79e:	68fb      	ldr	r3, [r7, #12]
 800a7a0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7a2:	4a27      	ldr	r2, [pc, #156]	; (800a840 <HAL_SPI_Receive_DMA+0x238>)
 800a7a4:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a7a6:	68fb      	ldr	r3, [r7, #12]
 800a7a8:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7aa:	4a26      	ldr	r2, [pc, #152]	; (800a844 <HAL_SPI_Receive_DMA+0x23c>)
 800a7ac:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800a7ae:	68fb      	ldr	r3, [r7, #12]
 800a7b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a7b2:	2200      	movs	r2, #0
 800a7b4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a7b6:	68fb      	ldr	r3, [r7, #12]
 800a7b8:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800a7ba:	68fb      	ldr	r3, [r7, #12]
 800a7bc:	681b      	ldr	r3, [r3, #0]
 800a7be:	330c      	adds	r3, #12
 800a7c0:	4619      	mov	r1, r3
 800a7c2:	68fb      	ldr	r3, [r7, #12]
 800a7c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a7c6:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800a7c8:	68fb      	ldr	r3, [r7, #12]
 800a7ca:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a7ce:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a7d0:	f7f9 ffc4 	bl	800475c <HAL_DMA_Start_IT>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d008      	beq.n	800a7ec <HAL_SPI_Receive_DMA+0x1e4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a7da:	68fb      	ldr	r3, [r7, #12]
 800a7dc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7de:	f043 0210 	orr.w	r2, r3, #16
 800a7e2:	68fb      	ldr	r3, [r7, #12]
 800a7e4:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800a7e6:	2301      	movs	r3, #1
 800a7e8:	75fb      	strb	r3, [r7, #23]

    goto error;
 800a7ea:	e01e      	b.n	800a82a <HAL_SPI_Receive_DMA+0x222>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a7ec:	68fb      	ldr	r3, [r7, #12]
 800a7ee:	681b      	ldr	r3, [r3, #0]
 800a7f0:	681b      	ldr	r3, [r3, #0]
 800a7f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a7f6:	2b40      	cmp	r3, #64	; 0x40
 800a7f8:	d007      	beq.n	800a80a <HAL_SPI_Receive_DMA+0x202>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a7fa:	68fb      	ldr	r3, [r7, #12]
 800a7fc:	681b      	ldr	r3, [r3, #0]
 800a7fe:	681a      	ldr	r2, [r3, #0]
 800a800:	68fb      	ldr	r3, [r7, #12]
 800a802:	681b      	ldr	r3, [r3, #0]
 800a804:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a808:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a80a:	68fb      	ldr	r3, [r7, #12]
 800a80c:	681b      	ldr	r3, [r3, #0]
 800a80e:	685a      	ldr	r2, [r3, #4]
 800a810:	68fb      	ldr	r3, [r7, #12]
 800a812:	681b      	ldr	r3, [r3, #0]
 800a814:	f042 0220 	orr.w	r2, r2, #32
 800a818:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a81a:	68fb      	ldr	r3, [r7, #12]
 800a81c:	681b      	ldr	r3, [r3, #0]
 800a81e:	685a      	ldr	r2, [r3, #4]
 800a820:	68fb      	ldr	r3, [r7, #12]
 800a822:	681b      	ldr	r3, [r3, #0]
 800a824:	f042 0201 	orr.w	r2, r2, #1
 800a828:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a82a:	68fb      	ldr	r3, [r7, #12]
 800a82c:	2200      	movs	r2, #0
 800a82e:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a832:	7dfb      	ldrb	r3, [r7, #23]
}
 800a834:	4618      	mov	r0, r3
 800a836:	3718      	adds	r7, #24
 800a838:	46bd      	mov	sp, r7
 800a83a:	bd80      	pop	{r7, pc}
 800a83c:	0800b17d 	.word	0x0800b17d
 800a840:	0800b025 	.word	0x0800b025
 800a844:	0800b1b5 	.word	0x0800b1b5

0800a848 <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800a848:	b580      	push	{r7, lr}
 800a84a:	b086      	sub	sp, #24
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	60f8      	str	r0, [r7, #12]
 800a850:	60b9      	str	r1, [r7, #8]
 800a852:	607a      	str	r2, [r7, #4]
 800a854:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a856:	2300      	movs	r3, #0
 800a858:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800a85a:	68fb      	ldr	r3, [r7, #12]
 800a85c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a860:	2b01      	cmp	r3, #1
 800a862:	d101      	bne.n	800a868 <HAL_SPI_TransmitReceive_DMA+0x20>
 800a864:	2302      	movs	r3, #2
 800a866:	e164      	b.n	800ab32 <HAL_SPI_TransmitReceive_DMA+0x2ea>
 800a868:	68fb      	ldr	r3, [r7, #12]
 800a86a:	2201      	movs	r2, #1
 800a86c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a870:	68fb      	ldr	r3, [r7, #12]
 800a872:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a876:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800a878:	68fb      	ldr	r3, [r7, #12]
 800a87a:	685b      	ldr	r3, [r3, #4]
 800a87c:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800a87e:	7dbb      	ldrb	r3, [r7, #22]
 800a880:	2b01      	cmp	r3, #1
 800a882:	d00d      	beq.n	800a8a0 <HAL_SPI_TransmitReceive_DMA+0x58>
 800a884:	693b      	ldr	r3, [r7, #16]
 800a886:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a88a:	d106      	bne.n	800a89a <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a88c:	68fb      	ldr	r3, [r7, #12]
 800a88e:	689b      	ldr	r3, [r3, #8]
 800a890:	2b00      	cmp	r3, #0
 800a892:	d102      	bne.n	800a89a <HAL_SPI_TransmitReceive_DMA+0x52>
 800a894:	7dbb      	ldrb	r3, [r7, #22]
 800a896:	2b04      	cmp	r3, #4
 800a898:	d002      	beq.n	800a8a0 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800a89a:	2302      	movs	r3, #2
 800a89c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a89e:	e143      	b.n	800ab28 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a8a0:	68bb      	ldr	r3, [r7, #8]
 800a8a2:	2b00      	cmp	r3, #0
 800a8a4:	d005      	beq.n	800a8b2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800a8a6:	687b      	ldr	r3, [r7, #4]
 800a8a8:	2b00      	cmp	r3, #0
 800a8aa:	d002      	beq.n	800a8b2 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800a8ac:	887b      	ldrh	r3, [r7, #2]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d102      	bne.n	800a8b8 <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800a8b2:	2301      	movs	r3, #1
 800a8b4:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a8b6:	e137      	b.n	800ab28 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a8b8:	68fb      	ldr	r3, [r7, #12]
 800a8ba:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a8be:	b2db      	uxtb	r3, r3
 800a8c0:	2b04      	cmp	r3, #4
 800a8c2:	d003      	beq.n	800a8cc <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a8c4:	68fb      	ldr	r3, [r7, #12]
 800a8c6:	2205      	movs	r2, #5
 800a8c8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a8cc:	68fb      	ldr	r3, [r7, #12]
 800a8ce:	2200      	movs	r2, #0
 800a8d0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a8d2:	68fb      	ldr	r3, [r7, #12]
 800a8d4:	68ba      	ldr	r2, [r7, #8]
 800a8d6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a8d8:	68fb      	ldr	r3, [r7, #12]
 800a8da:	887a      	ldrh	r2, [r7, #2]
 800a8dc:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a8de:	68fb      	ldr	r3, [r7, #12]
 800a8e0:	887a      	ldrh	r2, [r7, #2]
 800a8e2:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a8e4:	68fb      	ldr	r3, [r7, #12]
 800a8e6:	687a      	ldr	r2, [r7, #4]
 800a8e8:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800a8ea:	68fb      	ldr	r3, [r7, #12]
 800a8ec:	887a      	ldrh	r2, [r7, #2]
 800a8ee:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800a8f2:	68fb      	ldr	r3, [r7, #12]
 800a8f4:	887a      	ldrh	r2, [r7, #2]
 800a8f6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a8fa:	68fb      	ldr	r3, [r7, #12]
 800a8fc:	2200      	movs	r2, #0
 800a8fe:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a900:	68fb      	ldr	r3, [r7, #12]
 800a902:	2200      	movs	r2, #0
 800a904:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800a906:	68fb      	ldr	r3, [r7, #12]
 800a908:	681b      	ldr	r3, [r3, #0]
 800a90a:	685a      	ldr	r2, [r3, #4]
 800a90c:	68fb      	ldr	r3, [r7, #12]
 800a90e:	681b      	ldr	r3, [r3, #0]
 800a910:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800a914:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a916:	68fb      	ldr	r3, [r7, #12]
 800a918:	68db      	ldr	r3, [r3, #12]
 800a91a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a91e:	d908      	bls.n	800a932 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	681b      	ldr	r3, [r3, #0]
 800a924:	685a      	ldr	r2, [r3, #4]
 800a926:	68fb      	ldr	r3, [r7, #12]
 800a928:	681b      	ldr	r3, [r3, #0]
 800a92a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a92e:	605a      	str	r2, [r3, #4]
 800a930:	e06f      	b.n	800aa12 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a932:	68fb      	ldr	r3, [r7, #12]
 800a934:	681b      	ldr	r3, [r3, #0]
 800a936:	685a      	ldr	r2, [r3, #4]
 800a938:	68fb      	ldr	r3, [r7, #12]
 800a93a:	681b      	ldr	r3, [r3, #0]
 800a93c:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a940:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a942:	68fb      	ldr	r3, [r7, #12]
 800a944:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a946:	699b      	ldr	r3, [r3, #24]
 800a948:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a94c:	d126      	bne.n	800a99c <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800a94e:	68fb      	ldr	r3, [r7, #12]
 800a950:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800a952:	f003 0301 	and.w	r3, r3, #1
 800a956:	2b00      	cmp	r3, #0
 800a958:	d10f      	bne.n	800a97a <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800a95a:	68fb      	ldr	r3, [r7, #12]
 800a95c:	681b      	ldr	r3, [r3, #0]
 800a95e:	685a      	ldr	r2, [r3, #4]
 800a960:	68fb      	ldr	r3, [r7, #12]
 800a962:	681b      	ldr	r3, [r3, #0]
 800a964:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a968:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800a96a:	68fb      	ldr	r3, [r7, #12]
 800a96c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a96e:	b29b      	uxth	r3, r3
 800a970:	085b      	lsrs	r3, r3, #1
 800a972:	b29a      	uxth	r2, r3
 800a974:	68fb      	ldr	r3, [r7, #12]
 800a976:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a978:	e010      	b.n	800a99c <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800a97a:	68fb      	ldr	r3, [r7, #12]
 800a97c:	681b      	ldr	r3, [r3, #0]
 800a97e:	685a      	ldr	r2, [r3, #4]
 800a980:	68fb      	ldr	r3, [r7, #12]
 800a982:	681b      	ldr	r3, [r3, #0]
 800a984:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a988:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800a98a:	68fb      	ldr	r3, [r7, #12]
 800a98c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a98e:	b29b      	uxth	r3, r3
 800a990:	085b      	lsrs	r3, r3, #1
 800a992:	b29b      	uxth	r3, r3
 800a994:	3301      	adds	r3, #1
 800a996:	b29a      	uxth	r2, r3
 800a998:	68fb      	ldr	r3, [r7, #12]
 800a99a:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a99c:	68fb      	ldr	r3, [r7, #12]
 800a99e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a9a0:	699b      	ldr	r3, [r3, #24]
 800a9a2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a9a6:	d134      	bne.n	800aa12 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a9a8:	68fb      	ldr	r3, [r7, #12]
 800a9aa:	681b      	ldr	r3, [r3, #0]
 800a9ac:	685a      	ldr	r2, [r3, #4]
 800a9ae:	68fb      	ldr	r3, [r7, #12]
 800a9b0:	681b      	ldr	r3, [r3, #0]
 800a9b2:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a9b6:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800a9b8:	68fb      	ldr	r3, [r7, #12]
 800a9ba:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a9be:	b29b      	uxth	r3, r3
 800a9c0:	f003 0301 	and.w	r3, r3, #1
 800a9c4:	2b00      	cmp	r3, #0
 800a9c6:	d111      	bne.n	800a9ec <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a9c8:	68fb      	ldr	r3, [r7, #12]
 800a9ca:	681b      	ldr	r3, [r3, #0]
 800a9cc:	685a      	ldr	r2, [r3, #4]
 800a9ce:	68fb      	ldr	r3, [r7, #12]
 800a9d0:	681b      	ldr	r3, [r3, #0]
 800a9d2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a9d6:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800a9d8:	68fb      	ldr	r3, [r7, #12]
 800a9da:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a9de:	b29b      	uxth	r3, r3
 800a9e0:	085b      	lsrs	r3, r3, #1
 800a9e2:	b29a      	uxth	r2, r3
 800a9e4:	68fb      	ldr	r3, [r7, #12]
 800a9e6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800a9ea:	e012      	b.n	800aa12 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a9ec:	68fb      	ldr	r3, [r7, #12]
 800a9ee:	681b      	ldr	r3, [r3, #0]
 800a9f0:	685a      	ldr	r2, [r3, #4]
 800a9f2:	68fb      	ldr	r3, [r7, #12]
 800a9f4:	681b      	ldr	r3, [r3, #0]
 800a9f6:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a9fa:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800a9fc:	68fb      	ldr	r3, [r7, #12]
 800a9fe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aa02:	b29b      	uxth	r3, r3
 800aa04:	085b      	lsrs	r3, r3, #1
 800aa06:	b29b      	uxth	r3, r3
 800aa08:	3301      	adds	r3, #1
 800aa0a:	b29a      	uxth	r2, r3
 800aa0c:	68fb      	ldr	r3, [r7, #12]
 800aa0e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800aa12:	68fb      	ldr	r3, [r7, #12]
 800aa14:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800aa18:	b2db      	uxtb	r3, r3
 800aa1a:	2b04      	cmp	r3, #4
 800aa1c:	d108      	bne.n	800aa30 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800aa1e:	68fb      	ldr	r3, [r7, #12]
 800aa20:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa22:	4a46      	ldr	r2, [pc, #280]	; (800ab3c <HAL_SPI_TransmitReceive_DMA+0x2f4>)
 800aa24:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800aa26:	68fb      	ldr	r3, [r7, #12]
 800aa28:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa2a:	4a45      	ldr	r2, [pc, #276]	; (800ab40 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 800aa2c:	63da      	str	r2, [r3, #60]	; 0x3c
 800aa2e:	e007      	b.n	800aa40 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800aa30:	68fb      	ldr	r3, [r7, #12]
 800aa32:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa34:	4a43      	ldr	r2, [pc, #268]	; (800ab44 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 800aa36:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800aa38:	68fb      	ldr	r3, [r7, #12]
 800aa3a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa3c:	4a42      	ldr	r2, [pc, #264]	; (800ab48 <HAL_SPI_TransmitReceive_DMA+0x300>)
 800aa3e:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800aa40:	68fb      	ldr	r3, [r7, #12]
 800aa42:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa44:	4a41      	ldr	r2, [pc, #260]	; (800ab4c <HAL_SPI_TransmitReceive_DMA+0x304>)
 800aa46:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800aa48:	68fb      	ldr	r3, [r7, #12]
 800aa4a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800aa50:	68fb      	ldr	r3, [r7, #12]
 800aa52:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800aa54:	68fb      	ldr	r3, [r7, #12]
 800aa56:	681b      	ldr	r3, [r3, #0]
 800aa58:	330c      	adds	r3, #12
 800aa5a:	4619      	mov	r1, r3
 800aa5c:	68fb      	ldr	r3, [r7, #12]
 800aa5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800aa60:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800aa62:	68fb      	ldr	r3, [r7, #12]
 800aa64:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800aa68:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800aa6a:	f7f9 fe77 	bl	800475c <HAL_DMA_Start_IT>
 800aa6e:	4603      	mov	r3, r0
 800aa70:	2b00      	cmp	r3, #0
 800aa72:	d008      	beq.n	800aa86 <HAL_SPI_TransmitReceive_DMA+0x23e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800aa74:	68fb      	ldr	r3, [r7, #12]
 800aa76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa78:	f043 0210 	orr.w	r2, r3, #16
 800aa7c:	68fb      	ldr	r3, [r7, #12]
 800aa7e:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800aa80:	2301      	movs	r3, #1
 800aa82:	75fb      	strb	r3, [r7, #23]

    goto error;
 800aa84:	e050      	b.n	800ab28 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800aa86:	68fb      	ldr	r3, [r7, #12]
 800aa88:	681b      	ldr	r3, [r3, #0]
 800aa8a:	685a      	ldr	r2, [r3, #4]
 800aa8c:	68fb      	ldr	r3, [r7, #12]
 800aa8e:	681b      	ldr	r3, [r3, #0]
 800aa90:	f042 0201 	orr.w	r2, r2, #1
 800aa94:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800aa96:	68fb      	ldr	r3, [r7, #12]
 800aa98:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa9a:	2200      	movs	r2, #0
 800aa9c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800aa9e:	68fb      	ldr	r3, [r7, #12]
 800aaa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaa2:	2200      	movs	r2, #0
 800aaa4:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800aaa6:	68fb      	ldr	r3, [r7, #12]
 800aaa8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aaaa:	2200      	movs	r2, #0
 800aaac:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800aaae:	68fb      	ldr	r3, [r7, #12]
 800aab0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aab2:	2200      	movs	r2, #0
 800aab4:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800aab6:	68fb      	ldr	r3, [r7, #12]
 800aab8:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800aaba:	68fb      	ldr	r3, [r7, #12]
 800aabc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aabe:	4619      	mov	r1, r3
 800aac0:	68fb      	ldr	r3, [r7, #12]
 800aac2:	681b      	ldr	r3, [r3, #0]
 800aac4:	330c      	adds	r3, #12
 800aac6:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800aac8:	68fb      	ldr	r3, [r7, #12]
 800aaca:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aacc:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800aace:	f7f9 fe45 	bl	800475c <HAL_DMA_Start_IT>
 800aad2:	4603      	mov	r3, r0
 800aad4:	2b00      	cmp	r3, #0
 800aad6:	d008      	beq.n	800aaea <HAL_SPI_TransmitReceive_DMA+0x2a2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800aad8:	68fb      	ldr	r3, [r7, #12]
 800aada:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aadc:	f043 0210 	orr.w	r2, r3, #16
 800aae0:	68fb      	ldr	r3, [r7, #12]
 800aae2:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800aae4:	2301      	movs	r3, #1
 800aae6:	75fb      	strb	r3, [r7, #23]

    goto error;
 800aae8:	e01e      	b.n	800ab28 <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800aaea:	68fb      	ldr	r3, [r7, #12]
 800aaec:	681b      	ldr	r3, [r3, #0]
 800aaee:	681b      	ldr	r3, [r3, #0]
 800aaf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800aaf4:	2b40      	cmp	r3, #64	; 0x40
 800aaf6:	d007      	beq.n	800ab08 <HAL_SPI_TransmitReceive_DMA+0x2c0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800aaf8:	68fb      	ldr	r3, [r7, #12]
 800aafa:	681b      	ldr	r3, [r3, #0]
 800aafc:	681a      	ldr	r2, [r3, #0]
 800aafe:	68fb      	ldr	r3, [r7, #12]
 800ab00:	681b      	ldr	r3, [r3, #0]
 800ab02:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800ab06:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800ab08:	68fb      	ldr	r3, [r7, #12]
 800ab0a:	681b      	ldr	r3, [r3, #0]
 800ab0c:	685a      	ldr	r2, [r3, #4]
 800ab0e:	68fb      	ldr	r3, [r7, #12]
 800ab10:	681b      	ldr	r3, [r3, #0]
 800ab12:	f042 0220 	orr.w	r2, r2, #32
 800ab16:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800ab18:	68fb      	ldr	r3, [r7, #12]
 800ab1a:	681b      	ldr	r3, [r3, #0]
 800ab1c:	685a      	ldr	r2, [r3, #4]
 800ab1e:	68fb      	ldr	r3, [r7, #12]
 800ab20:	681b      	ldr	r3, [r3, #0]
 800ab22:	f042 0202 	orr.w	r2, r2, #2
 800ab26:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800ab28:	68fb      	ldr	r3, [r7, #12]
 800ab2a:	2200      	movs	r2, #0
 800ab2c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800ab30:	7dfb      	ldrb	r3, [r7, #23]
}
 800ab32:	4618      	mov	r0, r3
 800ab34:	3718      	adds	r7, #24
 800ab36:	46bd      	mov	sp, r7
 800ab38:	bd80      	pop	{r7, pc}
 800ab3a:	bf00      	nop
 800ab3c:	0800b17d 	.word	0x0800b17d
 800ab40:	0800b025 	.word	0x0800b025
 800ab44:	0800b199 	.word	0x0800b199
 800ab48:	0800b0cf 	.word	0x0800b0cf
 800ab4c:	0800b1b5 	.word	0x0800b1b5

0800ab50 <HAL_SPI_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort_IT(SPI_HandleTypeDef *hspi)
{
 800ab50:	b580      	push	{r7, lr}
 800ab52:	b088      	sub	sp, #32
 800ab54:	af00      	add	r7, sp, #0
 800ab56:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt ;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 800ab58:	2300      	movs	r3, #0
 800ab5a:	77fb      	strb	r3, [r7, #31]
  abortcplt = 1U;
 800ab5c:	2301      	movs	r3, #1
 800ab5e:	61bb      	str	r3, [r7, #24]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800ab60:	4b72      	ldr	r3, [pc, #456]	; (800ad2c <HAL_SPI_Abort_IT+0x1dc>)
 800ab62:	681b      	ldr	r3, [r3, #0]
 800ab64:	4a72      	ldr	r2, [pc, #456]	; (800ad30 <HAL_SPI_Abort_IT+0x1e0>)
 800ab66:	fba2 2303 	umull	r2, r3, r2, r3
 800ab6a:	0a5b      	lsrs	r3, r3, #9
 800ab6c:	2264      	movs	r2, #100	; 0x64
 800ab6e:	fb02 f303 	mul.w	r3, r2, r3
 800ab72:	613b      	str	r3, [r7, #16]
  count = resetcount;
 800ab74:	693b      	ldr	r3, [r7, #16]
 800ab76:	617b      	str	r3, [r7, #20]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	681b      	ldr	r3, [r3, #0]
 800ab7c:	685a      	ldr	r2, [r3, #4]
 800ab7e:	687b      	ldr	r3, [r7, #4]
 800ab80:	681b      	ldr	r3, [r3, #0]
 800ab82:	f022 0220 	bic.w	r2, r2, #32
 800ab86:	605a      	str	r2, [r3, #4]

  /* Change Rx and Tx Irq Handler to Disable TXEIE, RXNEIE and ERRIE interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 800ab88:	687b      	ldr	r3, [r7, #4]
 800ab8a:	681b      	ldr	r3, [r3, #0]
 800ab8c:	685b      	ldr	r3, [r3, #4]
 800ab8e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ab92:	2b80      	cmp	r3, #128	; 0x80
 800ab94:	d117      	bne.n	800abc6 <HAL_SPI_Abort_IT+0x76>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 800ab96:	687b      	ldr	r3, [r7, #4]
 800ab98:	4a66      	ldr	r2, [pc, #408]	; (800ad34 <HAL_SPI_Abort_IT+0x1e4>)
 800ab9a:	651a      	str	r2, [r3, #80]	; 0x50
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 800ab9c:	697b      	ldr	r3, [r7, #20]
 800ab9e:	2b00      	cmp	r3, #0
 800aba0:	d106      	bne.n	800abb0 <HAL_SPI_Abort_IT+0x60>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800aba2:	687b      	ldr	r3, [r7, #4]
 800aba4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aba6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800abaa:	687b      	ldr	r3, [r7, #4]
 800abac:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800abae:	e008      	b.n	800abc2 <HAL_SPI_Abort_IT+0x72>
      }
      count--;
 800abb0:	697b      	ldr	r3, [r7, #20]
 800abb2:	3b01      	subs	r3, #1
 800abb4:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 800abb6:	687b      	ldr	r3, [r7, #4]
 800abb8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800abbc:	b2db      	uxtb	r3, r3
 800abbe:	2b07      	cmp	r3, #7
 800abc0:	d1ec      	bne.n	800ab9c <HAL_SPI_Abort_IT+0x4c>
    /* Reset Timeout Counter */
    count = resetcount;
 800abc2:	693b      	ldr	r3, [r7, #16]
 800abc4:	617b      	str	r3, [r7, #20]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 800abc6:	687b      	ldr	r3, [r7, #4]
 800abc8:	681b      	ldr	r3, [r3, #0]
 800abca:	685b      	ldr	r3, [r3, #4]
 800abcc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800abd0:	2b40      	cmp	r3, #64	; 0x40
 800abd2:	d117      	bne.n	800ac04 <HAL_SPI_Abort_IT+0xb4>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 800abd4:	687b      	ldr	r3, [r7, #4]
 800abd6:	4a58      	ldr	r2, [pc, #352]	; (800ad38 <HAL_SPI_Abort_IT+0x1e8>)
 800abd8:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 800abda:	697b      	ldr	r3, [r7, #20]
 800abdc:	2b00      	cmp	r3, #0
 800abde:	d106      	bne.n	800abee <HAL_SPI_Abort_IT+0x9e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800abe0:	687b      	ldr	r3, [r7, #4]
 800abe2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800abe4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800abe8:	687b      	ldr	r3, [r7, #4]
 800abea:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800abec:	e008      	b.n	800ac00 <HAL_SPI_Abort_IT+0xb0>
      }
      count--;
 800abee:	697b      	ldr	r3, [r7, #20]
 800abf0:	3b01      	subs	r3, #1
 800abf2:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 800abf4:	687b      	ldr	r3, [r7, #4]
 800abf6:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800abfa:	b2db      	uxtb	r3, r3
 800abfc:	2b07      	cmp	r3, #7
 800abfe:	d1ec      	bne.n	800abda <HAL_SPI_Abort_IT+0x8a>
    /* Reset Timeout Counter */
    count = resetcount;
 800ac00:	693b      	ldr	r3, [r7, #16]
 800ac02:	617b      	str	r3, [r7, #20]
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to SPI Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (hspi->hdmatx != NULL)
 800ac04:	687b      	ldr	r3, [r7, #4]
 800ac06:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac08:	2b00      	cmp	r3, #0
 800ac0a:	d00f      	beq.n	800ac2c <HAL_SPI_Abort_IT+0xdc>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	685b      	ldr	r3, [r3, #4]
 800ac12:	f003 0302 	and.w	r3, r3, #2
 800ac16:	2b02      	cmp	r3, #2
 800ac18:	d104      	bne.n	800ac24 <HAL_SPI_Abort_IT+0xd4>
    {
      hspi->hdmatx->XferAbortCallback = SPI_DMATxAbortCallback;
 800ac1a:	687b      	ldr	r3, [r7, #4]
 800ac1c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac1e:	4a47      	ldr	r2, [pc, #284]	; (800ad3c <HAL_SPI_Abort_IT+0x1ec>)
 800ac20:	651a      	str	r2, [r3, #80]	; 0x50
 800ac22:	e003      	b.n	800ac2c <HAL_SPI_Abort_IT+0xdc>
    }
    else
    {
      hspi->hdmatx->XferAbortCallback = NULL;
 800ac24:	687b      	ldr	r3, [r7, #4]
 800ac26:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac28:	2200      	movs	r2, #0
 800ac2a:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (hspi->hdmarx != NULL)
 800ac2c:	687b      	ldr	r3, [r7, #4]
 800ac2e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac30:	2b00      	cmp	r3, #0
 800ac32:	d00f      	beq.n	800ac54 <HAL_SPI_Abort_IT+0x104>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 800ac34:	687b      	ldr	r3, [r7, #4]
 800ac36:	681b      	ldr	r3, [r3, #0]
 800ac38:	685b      	ldr	r3, [r3, #4]
 800ac3a:	f003 0301 	and.w	r3, r3, #1
 800ac3e:	2b01      	cmp	r3, #1
 800ac40:	d104      	bne.n	800ac4c <HAL_SPI_Abort_IT+0xfc>
    {
      hspi->hdmarx->XferAbortCallback = SPI_DMARxAbortCallback;
 800ac42:	687b      	ldr	r3, [r7, #4]
 800ac44:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac46:	4a3e      	ldr	r2, [pc, #248]	; (800ad40 <HAL_SPI_Abort_IT+0x1f0>)
 800ac48:	651a      	str	r2, [r3, #80]	; 0x50
 800ac4a:	e003      	b.n	800ac54 <HAL_SPI_Abort_IT+0x104>
    }
    else
    {
      hspi->hdmarx->XferAbortCallback = NULL;
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ac50:	2200      	movs	r2, #0
 800ac52:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 800ac54:	687b      	ldr	r3, [r7, #4]
 800ac56:	681b      	ldr	r3, [r3, #0]
 800ac58:	685b      	ldr	r3, [r3, #4]
 800ac5a:	f003 0302 	and.w	r3, r3, #2
 800ac5e:	2b02      	cmp	r3, #2
 800ac60:	d115      	bne.n	800ac8e <HAL_SPI_Abort_IT+0x13e>
  {
    /* Abort the SPI DMA Tx Stream/Channel */
    if (hspi->hdmatx != NULL)
 800ac62:	687b      	ldr	r3, [r7, #4]
 800ac64:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac66:	2b00      	cmp	r3, #0
 800ac68:	d011      	beq.n	800ac8e <HAL_SPI_Abort_IT+0x13e>
    {
      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
 800ac6a:	687b      	ldr	r3, [r7, #4]
 800ac6c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f7f9 fe44 	bl	80048fc <HAL_DMA_Abort_IT>
 800ac74:	4603      	mov	r3, r0
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d007      	beq.n	800ac8a <HAL_SPI_Abort_IT+0x13a>
      {
        hspi->hdmatx->XferAbortCallback = NULL;
 800ac7a:	687b      	ldr	r3, [r7, #4]
 800ac7c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ac7e:	2200      	movs	r2, #0
 800ac80:	651a      	str	r2, [r3, #80]	; 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800ac82:	687b      	ldr	r3, [r7, #4]
 800ac84:	2240      	movs	r2, #64	; 0x40
 800ac86:	661a      	str	r2, [r3, #96]	; 0x60
 800ac88:	e001      	b.n	800ac8e <HAL_SPI_Abort_IT+0x13e>
      }
      else
      {
        abortcplt = 0U;
 800ac8a:	2300      	movs	r3, #0
 800ac8c:	61bb      	str	r3, [r7, #24]
      }
    }
  }
  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 800ac8e:	687b      	ldr	r3, [r7, #4]
 800ac90:	681b      	ldr	r3, [r3, #0]
 800ac92:	685b      	ldr	r3, [r3, #4]
 800ac94:	f003 0301 	and.w	r3, r3, #1
 800ac98:	2b01      	cmp	r3, #1
 800ac9a:	d115      	bne.n	800acc8 <HAL_SPI_Abort_IT+0x178>
  {
    /* Abort the SPI DMA Rx Stream/Channel */
    if (hspi->hdmarx != NULL)
 800ac9c:	687b      	ldr	r3, [r7, #4]
 800ac9e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aca0:	2b00      	cmp	r3, #0
 800aca2:	d011      	beq.n	800acc8 <HAL_SPI_Abort_IT+0x178>
    {
      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aca8:	4618      	mov	r0, r3
 800acaa:	f7f9 fe27 	bl	80048fc <HAL_DMA_Abort_IT>
 800acae:	4603      	mov	r3, r0
 800acb0:	2b00      	cmp	r3, #0
 800acb2:	d007      	beq.n	800acc4 <HAL_SPI_Abort_IT+0x174>
      {
        hspi->hdmarx->XferAbortCallback = NULL;
 800acb4:	687b      	ldr	r3, [r7, #4]
 800acb6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800acb8:	2200      	movs	r2, #0
 800acba:	651a      	str	r2, [r3, #80]	; 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	2240      	movs	r2, #64	; 0x40
 800acc0:	661a      	str	r2, [r3, #96]	; 0x60
 800acc2:	e001      	b.n	800acc8 <HAL_SPI_Abort_IT+0x178>
      }
      else
      {
        abortcplt = 0U;
 800acc4:	2300      	movs	r3, #0
 800acc6:	61bb      	str	r3, [r7, #24]
      }
    }
  }

  if (abortcplt == 1U)
 800acc8:	69bb      	ldr	r3, [r7, #24]
 800acca:	2b01      	cmp	r3, #1
 800accc:	d129      	bne.n	800ad22 <HAL_SPI_Abort_IT+0x1d2>
  {
    /* Reset Tx and Rx transfer counters */
    hspi->RxXferCount = 0U;
 800acce:	687b      	ldr	r3, [r7, #4]
 800acd0:	2200      	movs	r2, #0
 800acd2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->TxXferCount = 0U;
 800acd6:	687b      	ldr	r3, [r7, #4]
 800acd8:	2200      	movs	r2, #0
 800acda:	87da      	strh	r2, [r3, #62]	; 0x3e

    /* Check error during Abort procedure */
    if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 800acdc:	687b      	ldr	r3, [r7, #4]
 800acde:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ace0:	2b40      	cmp	r3, #64	; 0x40
 800ace2:	d102      	bne.n	800acea <HAL_SPI_Abort_IT+0x19a>
    {
      /* return HAL_Error in case of error during Abort procedure */
      errorcode = HAL_ERROR;
 800ace4:	2301      	movs	r3, #1
 800ace6:	77fb      	strb	r3, [r7, #31]
 800ace8:	e002      	b.n	800acf0 <HAL_SPI_Abort_IT+0x1a0>
    }
    else
    {
      /* Reset errorCode */
      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800acea:	687b      	ldr	r3, [r7, #4]
 800acec:	2200      	movs	r2, #0
 800acee:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear the Error flags in the SR register */
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800acf0:	2300      	movs	r3, #0
 800acf2:	60fb      	str	r3, [r7, #12]
 800acf4:	687b      	ldr	r3, [r7, #4]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	68db      	ldr	r3, [r3, #12]
 800acfa:	60fb      	str	r3, [r7, #12]
 800acfc:	687b      	ldr	r3, [r7, #4]
 800acfe:	681b      	ldr	r3, [r3, #0]
 800ad00:	689b      	ldr	r3, [r3, #8]
 800ad02:	60fb      	str	r3, [r7, #12]
 800ad04:	68fb      	ldr	r3, [r7, #12]
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ad06:	2300      	movs	r3, #0
 800ad08:	60bb      	str	r3, [r7, #8]
 800ad0a:	687b      	ldr	r3, [r7, #4]
 800ad0c:	681b      	ldr	r3, [r3, #0]
 800ad0e:	689b      	ldr	r3, [r3, #8]
 800ad10:	60bb      	str	r3, [r7, #8]
 800ad12:	68bb      	ldr	r3, [r7, #8]

    /* Restore hspi->State to Ready */
    hspi->State = HAL_SPI_STATE_READY;
 800ad14:	687b      	ldr	r3, [r7, #4]
 800ad16:	2201      	movs	r2, #1
 800ad18:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* As no DMA to be aborted, call directly user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->AbortCpltCallback(hspi);
#else
    HAL_SPI_AbortCpltCallback(hspi);
 800ad1c:	6878      	ldr	r0, [r7, #4]
 800ad1e:	f012 f9db 	bl	801d0d8 <HAL_SPI_AbortCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  return errorcode;
 800ad22:	7ffb      	ldrb	r3, [r7, #31]
}
 800ad24:	4618      	mov	r0, r3
 800ad26:	3720      	adds	r7, #32
 800ad28:	46bd      	mov	sp, r7
 800ad2a:	bd80      	pop	{r7, pc}
 800ad2c:	20000000 	.word	0x20000000
 800ad30:	057619f1 	.word	0x057619f1
 800ad34:	0800bd49 	.word	0x0800bd49
 800ad38:	0800bc89 	.word	0x0800bc89
 800ad3c:	0800b21f 	.word	0x0800b21f
 800ad40:	0800b2fd 	.word	0x0800b2fd

0800ad44 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800ad44:	b580      	push	{r7, lr}
 800ad46:	b088      	sub	sp, #32
 800ad48:	af00      	add	r7, sp, #0
 800ad4a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800ad4c:	687b      	ldr	r3, [r7, #4]
 800ad4e:	681b      	ldr	r3, [r3, #0]
 800ad50:	685b      	ldr	r3, [r3, #4]
 800ad52:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800ad54:	687b      	ldr	r3, [r7, #4]
 800ad56:	681b      	ldr	r3, [r3, #0]
 800ad58:	689b      	ldr	r3, [r3, #8]
 800ad5a:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ad5c:	69bb      	ldr	r3, [r7, #24]
 800ad5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad62:	2b00      	cmp	r3, #0
 800ad64:	d10e      	bne.n	800ad84 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ad66:	69bb      	ldr	r3, [r7, #24]
 800ad68:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800ad6c:	2b00      	cmp	r3, #0
 800ad6e:	d009      	beq.n	800ad84 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800ad70:	69fb      	ldr	r3, [r7, #28]
 800ad72:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ad76:	2b00      	cmp	r3, #0
 800ad78:	d004      	beq.n	800ad84 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800ad7a:	687b      	ldr	r3, [r7, #4]
 800ad7c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800ad7e:	6878      	ldr	r0, [r7, #4]
 800ad80:	4798      	blx	r3
    return;
 800ad82:	e0ce      	b.n	800af22 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800ad84:	69bb      	ldr	r3, [r7, #24]
 800ad86:	f003 0302 	and.w	r3, r3, #2
 800ad8a:	2b00      	cmp	r3, #0
 800ad8c:	d009      	beq.n	800ada2 <HAL_SPI_IRQHandler+0x5e>
 800ad8e:	69fb      	ldr	r3, [r7, #28]
 800ad90:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800ad94:	2b00      	cmp	r3, #0
 800ad96:	d004      	beq.n	800ada2 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800ad98:	687b      	ldr	r3, [r7, #4]
 800ad9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ad9c:	6878      	ldr	r0, [r7, #4]
 800ad9e:	4798      	blx	r3
    return;
 800ada0:	e0bf      	b.n	800af22 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800ada2:	69bb      	ldr	r3, [r7, #24]
 800ada4:	f003 0320 	and.w	r3, r3, #32
 800ada8:	2b00      	cmp	r3, #0
 800adaa:	d10a      	bne.n	800adc2 <HAL_SPI_IRQHandler+0x7e>
 800adac:	69bb      	ldr	r3, [r7, #24]
 800adae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800adb2:	2b00      	cmp	r3, #0
 800adb4:	d105      	bne.n	800adc2 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800adb6:	69bb      	ldr	r3, [r7, #24]
 800adb8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800adbc:	2b00      	cmp	r3, #0
 800adbe:	f000 80b0 	beq.w	800af22 <HAL_SPI_IRQHandler+0x1de>
 800adc2:	69fb      	ldr	r3, [r7, #28]
 800adc4:	f003 0320 	and.w	r3, r3, #32
 800adc8:	2b00      	cmp	r3, #0
 800adca:	f000 80aa 	beq.w	800af22 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800adce:	69bb      	ldr	r3, [r7, #24]
 800add0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800add4:	2b00      	cmp	r3, #0
 800add6:	d023      	beq.n	800ae20 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800add8:	687b      	ldr	r3, [r7, #4]
 800adda:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800adde:	b2db      	uxtb	r3, r3
 800ade0:	2b03      	cmp	r3, #3
 800ade2:	d011      	beq.n	800ae08 <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800ade4:	687b      	ldr	r3, [r7, #4]
 800ade6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ade8:	f043 0204 	orr.w	r2, r3, #4
 800adec:	687b      	ldr	r3, [r7, #4]
 800adee:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800adf0:	2300      	movs	r3, #0
 800adf2:	617b      	str	r3, [r7, #20]
 800adf4:	687b      	ldr	r3, [r7, #4]
 800adf6:	681b      	ldr	r3, [r3, #0]
 800adf8:	68db      	ldr	r3, [r3, #12]
 800adfa:	617b      	str	r3, [r7, #20]
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	681b      	ldr	r3, [r3, #0]
 800ae00:	689b      	ldr	r3, [r3, #8]
 800ae02:	617b      	str	r3, [r7, #20]
 800ae04:	697b      	ldr	r3, [r7, #20]
 800ae06:	e00b      	b.n	800ae20 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ae08:	2300      	movs	r3, #0
 800ae0a:	613b      	str	r3, [r7, #16]
 800ae0c:	687b      	ldr	r3, [r7, #4]
 800ae0e:	681b      	ldr	r3, [r3, #0]
 800ae10:	68db      	ldr	r3, [r3, #12]
 800ae12:	613b      	str	r3, [r7, #16]
 800ae14:	687b      	ldr	r3, [r7, #4]
 800ae16:	681b      	ldr	r3, [r3, #0]
 800ae18:	689b      	ldr	r3, [r3, #8]
 800ae1a:	613b      	str	r3, [r7, #16]
 800ae1c:	693b      	ldr	r3, [r7, #16]
        return;
 800ae1e:	e080      	b.n	800af22 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800ae20:	69bb      	ldr	r3, [r7, #24]
 800ae22:	f003 0320 	and.w	r3, r3, #32
 800ae26:	2b00      	cmp	r3, #0
 800ae28:	d014      	beq.n	800ae54 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800ae2a:	687b      	ldr	r3, [r7, #4]
 800ae2c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae2e:	f043 0201 	orr.w	r2, r3, #1
 800ae32:	687b      	ldr	r3, [r7, #4]
 800ae34:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800ae36:	2300      	movs	r3, #0
 800ae38:	60fb      	str	r3, [r7, #12]
 800ae3a:	687b      	ldr	r3, [r7, #4]
 800ae3c:	681b      	ldr	r3, [r3, #0]
 800ae3e:	689b      	ldr	r3, [r3, #8]
 800ae40:	60fb      	str	r3, [r7, #12]
 800ae42:	687b      	ldr	r3, [r7, #4]
 800ae44:	681b      	ldr	r3, [r3, #0]
 800ae46:	681a      	ldr	r2, [r3, #0]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	681b      	ldr	r3, [r3, #0]
 800ae4c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ae50:	601a      	str	r2, [r3, #0]
 800ae52:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800ae54:	69bb      	ldr	r3, [r7, #24]
 800ae56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ae5a:	2b00      	cmp	r3, #0
 800ae5c:	d00c      	beq.n	800ae78 <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800ae5e:	687b      	ldr	r3, [r7, #4]
 800ae60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae62:	f043 0208 	orr.w	r2, r3, #8
 800ae66:	687b      	ldr	r3, [r7, #4]
 800ae68:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	60bb      	str	r3, [r7, #8]
 800ae6e:	687b      	ldr	r3, [r7, #4]
 800ae70:	681b      	ldr	r3, [r3, #0]
 800ae72:	689b      	ldr	r3, [r3, #8]
 800ae74:	60bb      	str	r3, [r7, #8]
 800ae76:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800ae78:	687b      	ldr	r3, [r7, #4]
 800ae7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ae7c:	2b00      	cmp	r3, #0
 800ae7e:	d04f      	beq.n	800af20 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	685a      	ldr	r2, [r3, #4]
 800ae86:	687b      	ldr	r3, [r7, #4]
 800ae88:	681b      	ldr	r3, [r3, #0]
 800ae8a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800ae8e:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	2201      	movs	r2, #1
 800ae94:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800ae98:	69fb      	ldr	r3, [r7, #28]
 800ae9a:	f003 0302 	and.w	r3, r3, #2
 800ae9e:	2b00      	cmp	r3, #0
 800aea0:	d104      	bne.n	800aeac <HAL_SPI_IRQHandler+0x168>
 800aea2:	69fb      	ldr	r3, [r7, #28]
 800aea4:	f003 0301 	and.w	r3, r3, #1
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d034      	beq.n	800af16 <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800aeac:	687b      	ldr	r3, [r7, #4]
 800aeae:	681b      	ldr	r3, [r3, #0]
 800aeb0:	685a      	ldr	r2, [r3, #4]
 800aeb2:	687b      	ldr	r3, [r7, #4]
 800aeb4:	681b      	ldr	r3, [r3, #0]
 800aeb6:	f022 0203 	bic.w	r2, r2, #3
 800aeba:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800aebc:	687b      	ldr	r3, [r7, #4]
 800aebe:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aec0:	2b00      	cmp	r3, #0
 800aec2:	d011      	beq.n	800aee8 <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800aec4:	687b      	ldr	r3, [r7, #4]
 800aec6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aec8:	4a17      	ldr	r2, [pc, #92]	; (800af28 <HAL_SPI_IRQHandler+0x1e4>)
 800aeca:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800aecc:	687b      	ldr	r3, [r7, #4]
 800aece:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aed0:	4618      	mov	r0, r3
 800aed2:	f7f9 fd13 	bl	80048fc <HAL_DMA_Abort_IT>
 800aed6:	4603      	mov	r3, r0
 800aed8:	2b00      	cmp	r3, #0
 800aeda:	d005      	beq.n	800aee8 <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800aedc:	687b      	ldr	r3, [r7, #4]
 800aede:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aee0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800aee4:	687b      	ldr	r3, [r7, #4]
 800aee6:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800aee8:	687b      	ldr	r3, [r7, #4]
 800aeea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d016      	beq.n	800af1e <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800aef0:	687b      	ldr	r3, [r7, #4]
 800aef2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aef4:	4a0c      	ldr	r2, [pc, #48]	; (800af28 <HAL_SPI_IRQHandler+0x1e4>)
 800aef6:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800aef8:	687b      	ldr	r3, [r7, #4]
 800aefa:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aefc:	4618      	mov	r0, r3
 800aefe:	f7f9 fcfd 	bl	80048fc <HAL_DMA_Abort_IT>
 800af02:	4603      	mov	r3, r0
 800af04:	2b00      	cmp	r3, #0
 800af06:	d00a      	beq.n	800af1e <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800af08:	687b      	ldr	r3, [r7, #4]
 800af0a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800af0c:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800af10:	687b      	ldr	r3, [r7, #4]
 800af12:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800af14:	e003      	b.n	800af1e <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800af16:	6878      	ldr	r0, [r7, #4]
 800af18:	f012 f8fa 	bl	801d110 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800af1c:	e000      	b.n	800af20 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800af1e:	bf00      	nop
    return;
 800af20:	bf00      	nop
  }
}
 800af22:	3720      	adds	r7, #32
 800af24:	46bd      	mov	sp, r7
 800af26:	bd80      	pop	{r7, pc}
 800af28:	0800b1f5 	.word	0x0800b1f5

0800af2c <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800af2c:	b480      	push	{r7}
 800af2e:	b083      	sub	sp, #12
 800af30:	af00      	add	r7, sp, #0
 800af32:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800af34:	bf00      	nop
 800af36:	370c      	adds	r7, #12
 800af38:	46bd      	mov	sp, r7
 800af3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af3e:	4770      	bx	lr

0800af40 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800af40:	b480      	push	{r7}
 800af42:	b083      	sub	sp, #12
 800af44:	af00      	add	r7, sp, #0
 800af46:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800af48:	bf00      	nop
 800af4a:	370c      	adds	r7, #12
 800af4c:	46bd      	mov	sp, r7
 800af4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af52:	4770      	bx	lr

0800af54 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800af54:	b480      	push	{r7}
 800af56:	b083      	sub	sp, #12
 800af58:	af00      	add	r7, sp, #0
 800af5a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800af5c:	bf00      	nop
 800af5e:	370c      	adds	r7, #12
 800af60:	46bd      	mov	sp, r7
 800af62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af66:	4770      	bx	lr

0800af68 <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800af68:	b480      	push	{r7}
 800af6a:	b083      	sub	sp, #12
 800af6c:	af00      	add	r7, sp, #0
 800af6e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800af70:	bf00      	nop
 800af72:	370c      	adds	r7, #12
 800af74:	46bd      	mov	sp, r7
 800af76:	f85d 7b04 	ldr.w	r7, [sp], #4
 800af7a:	4770      	bx	lr

0800af7c <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800af7c:	b580      	push	{r7, lr}
 800af7e:	b086      	sub	sp, #24
 800af80:	af00      	add	r7, sp, #0
 800af82:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800af84:	687b      	ldr	r3, [r7, #4]
 800af86:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800af88:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800af8a:	f7f8 fa57 	bl	800343c <HAL_GetTick>
 800af8e:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800af90:	687b      	ldr	r3, [r7, #4]
 800af92:	681b      	ldr	r3, [r3, #0]
 800af94:	681b      	ldr	r3, [r3, #0]
 800af96:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800af9a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800af9e:	d03b      	beq.n	800b018 <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800afa0:	697b      	ldr	r3, [r7, #20]
 800afa2:	681b      	ldr	r3, [r3, #0]
 800afa4:	685a      	ldr	r2, [r3, #4]
 800afa6:	697b      	ldr	r3, [r7, #20]
 800afa8:	681b      	ldr	r3, [r3, #0]
 800afaa:	f022 0220 	bic.w	r2, r2, #32
 800afae:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800afb0:	697b      	ldr	r3, [r7, #20]
 800afb2:	681b      	ldr	r3, [r3, #0]
 800afb4:	685a      	ldr	r2, [r3, #4]
 800afb6:	697b      	ldr	r3, [r7, #20]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	f022 0202 	bic.w	r2, r2, #2
 800afbe:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800afc0:	693a      	ldr	r2, [r7, #16]
 800afc2:	2164      	movs	r1, #100	; 0x64
 800afc4:	6978      	ldr	r0, [r7, #20]
 800afc6:	f000 fd43 	bl	800ba50 <SPI_EndRxTxTransaction>
 800afca:	4603      	mov	r3, r0
 800afcc:	2b00      	cmp	r3, #0
 800afce:	d005      	beq.n	800afdc <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800afd0:	697b      	ldr	r3, [r7, #20]
 800afd2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800afd4:	f043 0220 	orr.w	r2, r3, #32
 800afd8:	697b      	ldr	r3, [r7, #20]
 800afda:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	689b      	ldr	r3, [r3, #8]
 800afe0:	2b00      	cmp	r3, #0
 800afe2:	d10a      	bne.n	800affa <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800afe4:	2300      	movs	r3, #0
 800afe6:	60fb      	str	r3, [r7, #12]
 800afe8:	697b      	ldr	r3, [r7, #20]
 800afea:	681b      	ldr	r3, [r3, #0]
 800afec:	68db      	ldr	r3, [r3, #12]
 800afee:	60fb      	str	r3, [r7, #12]
 800aff0:	697b      	ldr	r3, [r7, #20]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	689b      	ldr	r3, [r3, #8]
 800aff6:	60fb      	str	r3, [r7, #12]
 800aff8:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800affa:	697b      	ldr	r3, [r7, #20]
 800affc:	2200      	movs	r2, #0
 800affe:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800b000:	697b      	ldr	r3, [r7, #20]
 800b002:	2201      	movs	r2, #1
 800b004:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b008:	697b      	ldr	r3, [r7, #20]
 800b00a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	d003      	beq.n	800b018 <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b010:	6978      	ldr	r0, [r7, #20]
 800b012:	f012 f87d 	bl	801d110 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b016:	e002      	b.n	800b01e <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800b018:	6978      	ldr	r0, [r7, #20]
 800b01a:	f7ff ff87 	bl	800af2c <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b01e:	3718      	adds	r7, #24
 800b020:	46bd      	mov	sp, r7
 800b022:	bd80      	pop	{r7, pc}

0800b024 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b024:	b580      	push	{r7, lr}
 800b026:	b084      	sub	sp, #16
 800b028:	af00      	add	r7, sp, #0
 800b02a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b02c:	687b      	ldr	r3, [r7, #4]
 800b02e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b030:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b032:	f7f8 fa03 	bl	800343c <HAL_GetTick>
 800b036:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800b038:	687b      	ldr	r3, [r7, #4]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	681b      	ldr	r3, [r3, #0]
 800b03e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b042:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b046:	d03c      	beq.n	800b0c2 <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b048:	68fb      	ldr	r3, [r7, #12]
 800b04a:	681b      	ldr	r3, [r3, #0]
 800b04c:	685a      	ldr	r2, [r3, #4]
 800b04e:	68fb      	ldr	r3, [r7, #12]
 800b050:	681b      	ldr	r3, [r3, #0]
 800b052:	f022 0220 	bic.w	r2, r2, #32
 800b056:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800b058:	68fb      	ldr	r3, [r7, #12]
 800b05a:	689b      	ldr	r3, [r3, #8]
 800b05c:	2b00      	cmp	r3, #0
 800b05e:	d10d      	bne.n	800b07c <SPI_DMAReceiveCplt+0x58>
 800b060:	68fb      	ldr	r3, [r7, #12]
 800b062:	685b      	ldr	r3, [r3, #4]
 800b064:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b068:	d108      	bne.n	800b07c <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b06a:	68fb      	ldr	r3, [r7, #12]
 800b06c:	681b      	ldr	r3, [r3, #0]
 800b06e:	685a      	ldr	r2, [r3, #4]
 800b070:	68fb      	ldr	r3, [r7, #12]
 800b072:	681b      	ldr	r3, [r3, #0]
 800b074:	f022 0203 	bic.w	r2, r2, #3
 800b078:	605a      	str	r2, [r3, #4]
 800b07a:	e007      	b.n	800b08c <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800b07c:	68fb      	ldr	r3, [r7, #12]
 800b07e:	681b      	ldr	r3, [r3, #0]
 800b080:	685a      	ldr	r2, [r3, #4]
 800b082:	68fb      	ldr	r3, [r7, #12]
 800b084:	681b      	ldr	r3, [r3, #0]
 800b086:	f022 0201 	bic.w	r2, r2, #1
 800b08a:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b08c:	68ba      	ldr	r2, [r7, #8]
 800b08e:	2164      	movs	r1, #100	; 0x64
 800b090:	68f8      	ldr	r0, [r7, #12]
 800b092:	f000 fc61 	bl	800b958 <SPI_EndRxTransaction>
 800b096:	4603      	mov	r3, r0
 800b098:	2b00      	cmp	r3, #0
 800b09a:	d002      	beq.n	800b0a2 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800b09c:	68fb      	ldr	r3, [r7, #12]
 800b09e:	2220      	movs	r2, #32
 800b0a0:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800b0a2:	68fb      	ldr	r3, [r7, #12]
 800b0a4:	2200      	movs	r2, #0
 800b0a6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	2201      	movs	r2, #1
 800b0ae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b0b2:	68fb      	ldr	r3, [r7, #12]
 800b0b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b0b6:	2b00      	cmp	r3, #0
 800b0b8:	d003      	beq.n	800b0c2 <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b0ba:	68f8      	ldr	r0, [r7, #12]
 800b0bc:	f012 f828 	bl	801d110 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b0c0:	e002      	b.n	800b0c8 <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800b0c2:	68f8      	ldr	r0, [r7, #12]
 800b0c4:	f011 ffc4 	bl	801d050 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b0c8:	3710      	adds	r7, #16
 800b0ca:	46bd      	mov	sp, r7
 800b0cc:	bd80      	pop	{r7, pc}

0800b0ce <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b0ce:	b580      	push	{r7, lr}
 800b0d0:	b084      	sub	sp, #16
 800b0d2:	af00      	add	r7, sp, #0
 800b0d4:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b0d6:	687b      	ldr	r3, [r7, #4]
 800b0d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b0da:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b0dc:	f7f8 f9ae 	bl	800343c <HAL_GetTick>
 800b0e0:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800b0e2:	687b      	ldr	r3, [r7, #4]
 800b0e4:	681b      	ldr	r3, [r3, #0]
 800b0e6:	681b      	ldr	r3, [r3, #0]
 800b0e8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b0ec:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800b0f0:	d030      	beq.n	800b154 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b0f2:	68fb      	ldr	r3, [r7, #12]
 800b0f4:	681b      	ldr	r3, [r3, #0]
 800b0f6:	685a      	ldr	r2, [r3, #4]
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	681b      	ldr	r3, [r3, #0]
 800b0fc:	f022 0220 	bic.w	r2, r2, #32
 800b100:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b102:	68ba      	ldr	r2, [r7, #8]
 800b104:	2164      	movs	r1, #100	; 0x64
 800b106:	68f8      	ldr	r0, [r7, #12]
 800b108:	f000 fca2 	bl	800ba50 <SPI_EndRxTxTransaction>
 800b10c:	4603      	mov	r3, r0
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d005      	beq.n	800b11e <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b112:	68fb      	ldr	r3, [r7, #12]
 800b114:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b116:	f043 0220 	orr.w	r2, r3, #32
 800b11a:	68fb      	ldr	r3, [r7, #12]
 800b11c:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b11e:	68fb      	ldr	r3, [r7, #12]
 800b120:	681b      	ldr	r3, [r3, #0]
 800b122:	685a      	ldr	r2, [r3, #4]
 800b124:	68fb      	ldr	r3, [r7, #12]
 800b126:	681b      	ldr	r3, [r3, #0]
 800b128:	f022 0203 	bic.w	r2, r2, #3
 800b12c:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800b12e:	68fb      	ldr	r3, [r7, #12]
 800b130:	2200      	movs	r2, #0
 800b132:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800b134:	68fb      	ldr	r3, [r7, #12]
 800b136:	2200      	movs	r2, #0
 800b138:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800b13c:	68fb      	ldr	r3, [r7, #12]
 800b13e:	2201      	movs	r2, #1
 800b140:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b144:	68fb      	ldr	r3, [r7, #12]
 800b146:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b148:	2b00      	cmp	r3, #0
 800b14a:	d003      	beq.n	800b154 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800b14c:	68f8      	ldr	r0, [r7, #12]
 800b14e:	f011 ffdf 	bl	801d110 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800b152:	e002      	b.n	800b15a <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800b154:	68f8      	ldr	r0, [r7, #12]
 800b156:	f011 ff97 	bl	801d088 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b15a:	3710      	adds	r7, #16
 800b15c:	46bd      	mov	sp, r7
 800b15e:	bd80      	pop	{r7, pc}

0800b160 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800b160:	b580      	push	{r7, lr}
 800b162:	b084      	sub	sp, #16
 800b164:	af00      	add	r7, sp, #0
 800b166:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b168:	687b      	ldr	r3, [r7, #4]
 800b16a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b16c:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800b16e:	68f8      	ldr	r0, [r7, #12]
 800b170:	f7ff fee6 	bl	800af40 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b174:	bf00      	nop
 800b176:	3710      	adds	r7, #16
 800b178:	46bd      	mov	sp, r7
 800b17a:	bd80      	pop	{r7, pc}

0800b17c <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b17c:	b580      	push	{r7, lr}
 800b17e:	b084      	sub	sp, #16
 800b180:	af00      	add	r7, sp, #0
 800b182:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b184:	687b      	ldr	r3, [r7, #4]
 800b186:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b188:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800b18a:	68f8      	ldr	r0, [r7, #12]
 800b18c:	f7ff fee2 	bl	800af54 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b190:	bf00      	nop
 800b192:	3710      	adds	r7, #16
 800b194:	46bd      	mov	sp, r7
 800b196:	bd80      	pop	{r7, pc}

0800b198 <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800b198:	b580      	push	{r7, lr}
 800b19a:	b084      	sub	sp, #16
 800b19c:	af00      	add	r7, sp, #0
 800b19e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b1a0:	687b      	ldr	r3, [r7, #4]
 800b1a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1a4:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800b1a6:	68f8      	ldr	r0, [r7, #12]
 800b1a8:	f7ff fede 	bl	800af68 <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b1ac:	bf00      	nop
 800b1ae:	3710      	adds	r7, #16
 800b1b0:	46bd      	mov	sp, r7
 800b1b2:	bd80      	pop	{r7, pc}

0800b1b4 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800b1b4:	b580      	push	{r7, lr}
 800b1b6:	b084      	sub	sp, #16
 800b1b8:	af00      	add	r7, sp, #0
 800b1ba:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b1bc:	687b      	ldr	r3, [r7, #4]
 800b1be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b1c0:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800b1c2:	68fb      	ldr	r3, [r7, #12]
 800b1c4:	681b      	ldr	r3, [r3, #0]
 800b1c6:	685a      	ldr	r2, [r3, #4]
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	f022 0203 	bic.w	r2, r2, #3
 800b1d0:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800b1d2:	68fb      	ldr	r3, [r7, #12]
 800b1d4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b1d6:	f043 0210 	orr.w	r2, r3, #16
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800b1de:	68fb      	ldr	r3, [r7, #12]
 800b1e0:	2201      	movs	r2, #1
 800b1e2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b1e6:	68f8      	ldr	r0, [r7, #12]
 800b1e8:	f011 ff92 	bl	801d110 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b1ec:	bf00      	nop
 800b1ee:	3710      	adds	r7, #16
 800b1f0:	46bd      	mov	sp, r7
 800b1f2:	bd80      	pop	{r7, pc}

0800b1f4 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800b1f4:	b580      	push	{r7, lr}
 800b1f6:	b084      	sub	sp, #16
 800b1f8:	af00      	add	r7, sp, #0
 800b1fa:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b1fc:	687b      	ldr	r3, [r7, #4]
 800b1fe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b200:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800b202:	68fb      	ldr	r3, [r7, #12]
 800b204:	2200      	movs	r2, #0
 800b206:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800b20a:	68fb      	ldr	r3, [r7, #12]
 800b20c:	2200      	movs	r2, #0
 800b20e:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800b210:	68f8      	ldr	r0, [r7, #12]
 800b212:	f011 ff7d 	bl	801d110 <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b216:	bf00      	nop
 800b218:	3710      	adds	r7, #16
 800b21a:	46bd      	mov	sp, r7
 800b21c:	bd80      	pop	{r7, pc}

0800b21e <SPI_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800b21e:	b580      	push	{r7, lr}
 800b220:	b088      	sub	sp, #32
 800b222:	af02      	add	r7, sp, #8
 800b224:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b226:	687b      	ldr	r3, [r7, #4]
 800b228:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b22a:	617b      	str	r3, [r7, #20]

  hspi->hdmatx->XferAbortCallback = NULL;
 800b22c:	697b      	ldr	r3, [r7, #20]
 800b22e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b230:	2200      	movs	r2, #0
 800b232:	651a      	str	r2, [r3, #80]	; 0x50

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800b234:	697b      	ldr	r3, [r7, #20]
 800b236:	681b      	ldr	r3, [r3, #0]
 800b238:	685a      	ldr	r2, [r3, #4]
 800b23a:	697b      	ldr	r3, [r7, #20]
 800b23c:	681b      	ldr	r3, [r3, #0]
 800b23e:	f022 0202 	bic.w	r2, r2, #2
 800b242:	605a      	str	r2, [r3, #4]

  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800b244:	f7f8 f8fa 	bl	800343c <HAL_GetTick>
 800b248:	4603      	mov	r3, r0
 800b24a:	461a      	mov	r2, r3
 800b24c:	2164      	movs	r1, #100	; 0x64
 800b24e:	6978      	ldr	r0, [r7, #20]
 800b250:	f000 fbfe 	bl	800ba50 <SPI_EndRxTxTransaction>
 800b254:	4603      	mov	r3, r0
 800b256:	2b00      	cmp	r3, #0
 800b258:	d002      	beq.n	800b260 <SPI_DMATxAbortCallback+0x42>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800b25a:	697b      	ldr	r3, [r7, #20]
 800b25c:	2240      	movs	r2, #64	; 0x40
 800b25e:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b260:	697b      	ldr	r3, [r7, #20]
 800b262:	681b      	ldr	r3, [r3, #0]
 800b264:	681a      	ldr	r2, [r3, #0]
 800b266:	697b      	ldr	r3, [r7, #20]
 800b268:	681b      	ldr	r3, [r3, #0]
 800b26a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b26e:	601a      	str	r2, [r3, #0]

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800b270:	f7f8 f8e4 	bl	800343c <HAL_GetTick>
 800b274:	4603      	mov	r3, r0
 800b276:	9300      	str	r3, [sp, #0]
 800b278:	2364      	movs	r3, #100	; 0x64
 800b27a:	2200      	movs	r2, #0
 800b27c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b280:	6978      	ldr	r0, [r7, #20]
 800b282:	f000 fad3 	bl	800b82c <SPI_WaitFifoStateUntilTimeout>
 800b286:	4603      	mov	r3, r0
 800b288:	2b00      	cmp	r3, #0
 800b28a:	d002      	beq.n	800b292 <SPI_DMATxAbortCallback+0x74>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800b28c:	697b      	ldr	r3, [r7, #20]
 800b28e:	2240      	movs	r2, #64	; 0x40
 800b290:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmarx != NULL)
 800b292:	697b      	ldr	r3, [r7, #20]
 800b294:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b296:	2b00      	cmp	r3, #0
 800b298:	d004      	beq.n	800b2a4 <SPI_DMATxAbortCallback+0x86>
  {
    if (hspi->hdmarx->XferAbortCallback != NULL)
 800b29a:	697b      	ldr	r3, [r7, #20]
 800b29c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b29e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b2a0:	2b00      	cmp	r3, #0
 800b2a2:	d127      	bne.n	800b2f4 <SPI_DMATxAbortCallback+0xd6>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 800b2a4:	697b      	ldr	r3, [r7, #20]
 800b2a6:	2200      	movs	r2, #0
 800b2a8:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800b2ac:	697b      	ldr	r3, [r7, #20]
 800b2ae:	2200      	movs	r2, #0
 800b2b0:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 800b2b2:	697b      	ldr	r3, [r7, #20]
 800b2b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b2b6:	2b40      	cmp	r3, #64	; 0x40
 800b2b8:	d002      	beq.n	800b2c0 <SPI_DMATxAbortCallback+0xa2>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b2ba:	697b      	ldr	r3, [r7, #20]
 800b2bc:	2200      	movs	r2, #0
 800b2be:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b2c0:	2300      	movs	r3, #0
 800b2c2:	613b      	str	r3, [r7, #16]
 800b2c4:	697b      	ldr	r3, [r7, #20]
 800b2c6:	681b      	ldr	r3, [r3, #0]
 800b2c8:	68db      	ldr	r3, [r3, #12]
 800b2ca:	613b      	str	r3, [r7, #16]
 800b2cc:	697b      	ldr	r3, [r7, #20]
 800b2ce:	681b      	ldr	r3, [r3, #0]
 800b2d0:	689b      	ldr	r3, [r3, #8]
 800b2d2:	613b      	str	r3, [r7, #16]
 800b2d4:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b2d6:	2300      	movs	r3, #0
 800b2d8:	60fb      	str	r3, [r7, #12]
 800b2da:	697b      	ldr	r3, [r7, #20]
 800b2dc:	681b      	ldr	r3, [r3, #0]
 800b2de:	689b      	ldr	r3, [r3, #8]
 800b2e0:	60fb      	str	r3, [r7, #12]
 800b2e2:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 800b2e4:	697b      	ldr	r3, [r7, #20]
 800b2e6:	2201      	movs	r2, #1
 800b2e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 800b2ec:	6978      	ldr	r0, [r7, #20]
 800b2ee:	f011 fef3 	bl	801d0d8 <HAL_SPI_AbortCpltCallback>
 800b2f2:	e000      	b.n	800b2f6 <SPI_DMATxAbortCallback+0xd8>
      return;
 800b2f4:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b2f6:	3718      	adds	r7, #24
 800b2f8:	46bd      	mov	sp, r7
 800b2fa:	bd80      	pop	{r7, pc}

0800b2fc <SPI_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800b2fc:	b580      	push	{r7, lr}
 800b2fe:	b088      	sub	sp, #32
 800b300:	af02      	add	r7, sp, #8
 800b302:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800b304:	687b      	ldr	r3, [r7, #4]
 800b306:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b308:	617b      	str	r3, [r7, #20]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b30a:	697b      	ldr	r3, [r7, #20]
 800b30c:	681b      	ldr	r3, [r3, #0]
 800b30e:	681a      	ldr	r2, [r3, #0]
 800b310:	697b      	ldr	r3, [r7, #20]
 800b312:	681b      	ldr	r3, [r3, #0]
 800b314:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b318:	601a      	str	r2, [r3, #0]

  hspi->hdmarx->XferAbortCallback = NULL;
 800b31a:	697b      	ldr	r3, [r7, #20]
 800b31c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800b31e:	2200      	movs	r2, #0
 800b320:	651a      	str	r2, [r3, #80]	; 0x50

  /* Disable Rx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800b322:	697b      	ldr	r3, [r7, #20]
 800b324:	681b      	ldr	r3, [r3, #0]
 800b326:	685a      	ldr	r2, [r3, #4]
 800b328:	697b      	ldr	r3, [r7, #20]
 800b32a:	681b      	ldr	r3, [r3, #0]
 800b32c:	f022 0201 	bic.w	r2, r2, #1
 800b330:	605a      	str	r2, [r3, #4]

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800b332:	f7f8 f883 	bl	800343c <HAL_GetTick>
 800b336:	4603      	mov	r3, r0
 800b338:	9300      	str	r3, [sp, #0]
 800b33a:	2364      	movs	r3, #100	; 0x64
 800b33c:	2200      	movs	r2, #0
 800b33e:	2180      	movs	r1, #128	; 0x80
 800b340:	6978      	ldr	r0, [r7, #20]
 800b342:	f000 f9eb 	bl	800b71c <SPI_WaitFlagStateUntilTimeout>
 800b346:	4603      	mov	r3, r0
 800b348:	2b00      	cmp	r3, #0
 800b34a:	d002      	beq.n	800b352 <SPI_DMARxAbortCallback+0x56>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800b34c:	697b      	ldr	r3, [r7, #20]
 800b34e:	2240      	movs	r2, #64	; 0x40
 800b350:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800b352:	f7f8 f873 	bl	800343c <HAL_GetTick>
 800b356:	4603      	mov	r3, r0
 800b358:	9300      	str	r3, [sp, #0]
 800b35a:	2364      	movs	r3, #100	; 0x64
 800b35c:	2200      	movs	r2, #0
 800b35e:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b362:	6978      	ldr	r0, [r7, #20]
 800b364:	f000 fa62 	bl	800b82c <SPI_WaitFifoStateUntilTimeout>
 800b368:	4603      	mov	r3, r0
 800b36a:	2b00      	cmp	r3, #0
 800b36c:	d002      	beq.n	800b374 <SPI_DMARxAbortCallback+0x78>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800b36e:	697b      	ldr	r3, [r7, #20]
 800b370:	2240      	movs	r2, #64	; 0x40
 800b372:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmatx != NULL)
 800b374:	697b      	ldr	r3, [r7, #20]
 800b376:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b378:	2b00      	cmp	r3, #0
 800b37a:	d004      	beq.n	800b386 <SPI_DMARxAbortCallback+0x8a>
  {
    if (hspi->hdmatx->XferAbortCallback != NULL)
 800b37c:	697b      	ldr	r3, [r7, #20]
 800b37e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800b380:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800b382:	2b00      	cmp	r3, #0
 800b384:	d127      	bne.n	800b3d6 <SPI_DMARxAbortCallback+0xda>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 800b386:	697b      	ldr	r3, [r7, #20]
 800b388:	2200      	movs	r2, #0
 800b38a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800b38e:	697b      	ldr	r3, [r7, #20]
 800b390:	2200      	movs	r2, #0
 800b392:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 800b394:	697b      	ldr	r3, [r7, #20]
 800b396:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b398:	2b40      	cmp	r3, #64	; 0x40
 800b39a:	d002      	beq.n	800b3a2 <SPI_DMARxAbortCallback+0xa6>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800b39c:	697b      	ldr	r3, [r7, #20]
 800b39e:	2200      	movs	r2, #0
 800b3a0:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b3a2:	2300      	movs	r3, #0
 800b3a4:	613b      	str	r3, [r7, #16]
 800b3a6:	697b      	ldr	r3, [r7, #20]
 800b3a8:	681b      	ldr	r3, [r3, #0]
 800b3aa:	68db      	ldr	r3, [r3, #12]
 800b3ac:	613b      	str	r3, [r7, #16]
 800b3ae:	697b      	ldr	r3, [r7, #20]
 800b3b0:	681b      	ldr	r3, [r3, #0]
 800b3b2:	689b      	ldr	r3, [r3, #8]
 800b3b4:	613b      	str	r3, [r7, #16]
 800b3b6:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800b3b8:	2300      	movs	r3, #0
 800b3ba:	60fb      	str	r3, [r7, #12]
 800b3bc:	697b      	ldr	r3, [r7, #20]
 800b3be:	681b      	ldr	r3, [r3, #0]
 800b3c0:	689b      	ldr	r3, [r3, #8]
 800b3c2:	60fb      	str	r3, [r7, #12]
 800b3c4:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 800b3c6:	697b      	ldr	r3, [r7, #20]
 800b3c8:	2201      	movs	r2, #1
 800b3ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 800b3ce:	6978      	ldr	r0, [r7, #20]
 800b3d0:	f011 fe82 	bl	801d0d8 <HAL_SPI_AbortCpltCallback>
 800b3d4:	e000      	b.n	800b3d8 <SPI_DMARxAbortCallback+0xdc>
      return;
 800b3d6:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800b3d8:	3718      	adds	r7, #24
 800b3da:	46bd      	mov	sp, r7
 800b3dc:	bd80      	pop	{r7, pc}

0800b3de <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800b3de:	b580      	push	{r7, lr}
 800b3e0:	b082      	sub	sp, #8
 800b3e2:	af00      	add	r7, sp, #0
 800b3e4:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800b3e6:	687b      	ldr	r3, [r7, #4]
 800b3e8:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b3ec:	b29b      	uxth	r3, r3
 800b3ee:	2b01      	cmp	r3, #1
 800b3f0:	d923      	bls.n	800b43a <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800b3f2:	687b      	ldr	r3, [r7, #4]
 800b3f4:	681b      	ldr	r3, [r3, #0]
 800b3f6:	68da      	ldr	r2, [r3, #12]
 800b3f8:	687b      	ldr	r3, [r7, #4]
 800b3fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b3fc:	b292      	uxth	r2, r2
 800b3fe:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b404:	1c9a      	adds	r2, r3, #2
 800b406:	687b      	ldr	r3, [r7, #4]
 800b408:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800b40a:	687b      	ldr	r3, [r7, #4]
 800b40c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b410:	b29b      	uxth	r3, r3
 800b412:	3b02      	subs	r3, #2
 800b414:	b29a      	uxth	r2, r3
 800b416:	687b      	ldr	r3, [r7, #4]
 800b418:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800b41c:	687b      	ldr	r3, [r7, #4]
 800b41e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b422:	b29b      	uxth	r3, r3
 800b424:	2b01      	cmp	r3, #1
 800b426:	d11f      	bne.n	800b468 <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	681b      	ldr	r3, [r3, #0]
 800b42c:	685a      	ldr	r2, [r3, #4]
 800b42e:	687b      	ldr	r3, [r7, #4]
 800b430:	681b      	ldr	r3, [r3, #0]
 800b432:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800b436:	605a      	str	r2, [r3, #4]
 800b438:	e016      	b.n	800b468 <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	f103 020c 	add.w	r2, r3, #12
 800b442:	687b      	ldr	r3, [r7, #4]
 800b444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b446:	7812      	ldrb	r2, [r2, #0]
 800b448:	b2d2      	uxtb	r2, r2
 800b44a:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b450:	1c5a      	adds	r2, r3, #1
 800b452:	687b      	ldr	r3, [r7, #4]
 800b454:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800b456:	687b      	ldr	r3, [r7, #4]
 800b458:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b45c:	b29b      	uxth	r3, r3
 800b45e:	3b01      	subs	r3, #1
 800b460:	b29a      	uxth	r2, r3
 800b462:	687b      	ldr	r3, [r7, #4]
 800b464:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800b468:	687b      	ldr	r3, [r7, #4]
 800b46a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b46e:	b29b      	uxth	r3, r3
 800b470:	2b00      	cmp	r3, #0
 800b472:	d10f      	bne.n	800b494 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	685a      	ldr	r2, [r3, #4]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b482:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800b484:	687b      	ldr	r3, [r7, #4]
 800b486:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b488:	b29b      	uxth	r3, r3
 800b48a:	2b00      	cmp	r3, #0
 800b48c:	d102      	bne.n	800b494 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800b48e:	6878      	ldr	r0, [r7, #4]
 800b490:	f000 fb48 	bl	800bb24 <SPI_CloseRxTx_ISR>
    }
  }
}
 800b494:	bf00      	nop
 800b496:	3708      	adds	r7, #8
 800b498:	46bd      	mov	sp, r7
 800b49a:	bd80      	pop	{r7, pc}

0800b49c <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800b49c:	b580      	push	{r7, lr}
 800b49e:	b082      	sub	sp, #8
 800b4a0:	af00      	add	r7, sp, #0
 800b4a2:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800b4a4:	687b      	ldr	r3, [r7, #4]
 800b4a6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b4a8:	b29b      	uxth	r3, r3
 800b4aa:	2b01      	cmp	r3, #1
 800b4ac:	d912      	bls.n	800b4d4 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4b2:	881a      	ldrh	r2, [r3, #0]
 800b4b4:	687b      	ldr	r3, [r7, #4]
 800b4b6:	681b      	ldr	r3, [r3, #0]
 800b4b8:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800b4ba:	687b      	ldr	r3, [r7, #4]
 800b4bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4be:	1c9a      	adds	r2, r3, #2
 800b4c0:	687b      	ldr	r3, [r7, #4]
 800b4c2:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800b4c4:	687b      	ldr	r3, [r7, #4]
 800b4c6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b4c8:	b29b      	uxth	r3, r3
 800b4ca:	3b02      	subs	r3, #2
 800b4cc:	b29a      	uxth	r2, r3
 800b4ce:	687b      	ldr	r3, [r7, #4]
 800b4d0:	87da      	strh	r2, [r3, #62]	; 0x3e
 800b4d2:	e012      	b.n	800b4fa <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b4d4:	687b      	ldr	r3, [r7, #4]
 800b4d6:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b4d8:	687b      	ldr	r3, [r7, #4]
 800b4da:	681b      	ldr	r3, [r3, #0]
 800b4dc:	330c      	adds	r3, #12
 800b4de:	7812      	ldrb	r2, [r2, #0]
 800b4e0:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800b4e2:	687b      	ldr	r3, [r7, #4]
 800b4e4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b4e6:	1c5a      	adds	r2, r3, #1
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 800b4ec:	687b      	ldr	r3, [r7, #4]
 800b4ee:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b4f0:	b29b      	uxth	r3, r3
 800b4f2:	3b01      	subs	r3, #1
 800b4f4:	b29a      	uxth	r2, r3
 800b4f6:	687b      	ldr	r3, [r7, #4]
 800b4f8:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800b4fa:	687b      	ldr	r3, [r7, #4]
 800b4fc:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b4fe:	b29b      	uxth	r3, r3
 800b500:	2b00      	cmp	r3, #0
 800b502:	d110      	bne.n	800b526 <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800b504:	687b      	ldr	r3, [r7, #4]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	685a      	ldr	r2, [r3, #4]
 800b50a:	687b      	ldr	r3, [r7, #4]
 800b50c:	681b      	ldr	r3, [r3, #0]
 800b50e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b512:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800b514:	687b      	ldr	r3, [r7, #4]
 800b516:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b51a:	b29b      	uxth	r3, r3
 800b51c:	2b00      	cmp	r3, #0
 800b51e:	d102      	bne.n	800b526 <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 800b520:	6878      	ldr	r0, [r7, #4]
 800b522:	f000 faff 	bl	800bb24 <SPI_CloseRxTx_ISR>
    }
  }
}
 800b526:	bf00      	nop
 800b528:	3708      	adds	r7, #8
 800b52a:	46bd      	mov	sp, r7
 800b52c:	bd80      	pop	{r7, pc}

0800b52e <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800b52e:	b580      	push	{r7, lr}
 800b530:	b082      	sub	sp, #8
 800b532:	af00      	add	r7, sp, #0
 800b534:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800b536:	687b      	ldr	r3, [r7, #4]
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	68da      	ldr	r2, [r3, #12]
 800b53c:	687b      	ldr	r3, [r7, #4]
 800b53e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b540:	b292      	uxth	r2, r2
 800b542:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800b544:	687b      	ldr	r3, [r7, #4]
 800b546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b548:	1c9a      	adds	r2, r3, #2
 800b54a:	687b      	ldr	r3, [r7, #4]
 800b54c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b554:	b29b      	uxth	r3, r3
 800b556:	3b01      	subs	r3, #1
 800b558:	b29a      	uxth	r2, r3
 800b55a:	687b      	ldr	r3, [r7, #4]
 800b55c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 800b560:	687b      	ldr	r3, [r7, #4]
 800b562:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b566:	b29b      	uxth	r3, r3
 800b568:	2b00      	cmp	r3, #0
 800b56a:	d10f      	bne.n	800b58c <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	681b      	ldr	r3, [r3, #0]
 800b570:	685a      	ldr	r2, [r3, #4]
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b57a:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800b57c:	687b      	ldr	r3, [r7, #4]
 800b57e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b580:	b29b      	uxth	r3, r3
 800b582:	2b00      	cmp	r3, #0
 800b584:	d102      	bne.n	800b58c <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800b586:	6878      	ldr	r0, [r7, #4]
 800b588:	f000 facc 	bl	800bb24 <SPI_CloseRxTx_ISR>
    }
  }
}
 800b58c:	bf00      	nop
 800b58e:	3708      	adds	r7, #8
 800b590:	46bd      	mov	sp, r7
 800b592:	bd80      	pop	{r7, pc}

0800b594 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800b594:	b580      	push	{r7, lr}
 800b596:	b082      	sub	sp, #8
 800b598:	af00      	add	r7, sp, #0
 800b59a:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5a0:	881a      	ldrh	r2, [r3, #0]
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800b5a8:	687b      	ldr	r3, [r7, #4]
 800b5aa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b5ac:	1c9a      	adds	r2, r3, #2
 800b5ae:	687b      	ldr	r3, [r7, #4]
 800b5b0:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800b5b2:	687b      	ldr	r3, [r7, #4]
 800b5b4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b5b6:	b29b      	uxth	r3, r3
 800b5b8:	3b01      	subs	r3, #1
 800b5ba:	b29a      	uxth	r2, r3
 800b5bc:	687b      	ldr	r3, [r7, #4]
 800b5be:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800b5c0:	687b      	ldr	r3, [r7, #4]
 800b5c2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b5c4:	b29b      	uxth	r3, r3
 800b5c6:	2b00      	cmp	r3, #0
 800b5c8:	d110      	bne.n	800b5ec <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800b5ca:	687b      	ldr	r3, [r7, #4]
 800b5cc:	681b      	ldr	r3, [r3, #0]
 800b5ce:	685a      	ldr	r2, [r3, #4]
 800b5d0:	687b      	ldr	r3, [r7, #4]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b5d8:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800b5da:	687b      	ldr	r3, [r7, #4]
 800b5dc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b5e0:	b29b      	uxth	r3, r3
 800b5e2:	2b00      	cmp	r3, #0
 800b5e4:	d102      	bne.n	800b5ec <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800b5e6:	6878      	ldr	r0, [r7, #4]
 800b5e8:	f000 fa9c 	bl	800bb24 <SPI_CloseRxTx_ISR>
    }
  }
}
 800b5ec:	bf00      	nop
 800b5ee:	3708      	adds	r7, #8
 800b5f0:	46bd      	mov	sp, r7
 800b5f2:	bd80      	pop	{r7, pc}

0800b5f4 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800b5f4:	b580      	push	{r7, lr}
 800b5f6:	b082      	sub	sp, #8
 800b5f8:	af00      	add	r7, sp, #0
 800b5fa:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800b5fc:	687b      	ldr	r3, [r7, #4]
 800b5fe:	681b      	ldr	r3, [r3, #0]
 800b600:	f103 020c 	add.w	r2, r3, #12
 800b604:	687b      	ldr	r3, [r7, #4]
 800b606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b608:	7812      	ldrb	r2, [r2, #0]
 800b60a:	b2d2      	uxtb	r2, r2
 800b60c:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800b60e:	687b      	ldr	r3, [r7, #4]
 800b610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b612:	1c5a      	adds	r2, r3, #1
 800b614:	687b      	ldr	r3, [r7, #4]
 800b616:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800b618:	687b      	ldr	r3, [r7, #4]
 800b61a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b61e:	b29b      	uxth	r3, r3
 800b620:	3b01      	subs	r3, #1
 800b622:	b29a      	uxth	r2, r3
 800b624:	687b      	ldr	r3, [r7, #4]
 800b626:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800b62a:	687b      	ldr	r3, [r7, #4]
 800b62c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b630:	b29b      	uxth	r3, r3
 800b632:	2b00      	cmp	r3, #0
 800b634:	d102      	bne.n	800b63c <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800b636:	6878      	ldr	r0, [r7, #4]
 800b638:	f000 fab6 	bl	800bba8 <SPI_CloseRx_ISR>
  }
}
 800b63c:	bf00      	nop
 800b63e:	3708      	adds	r7, #8
 800b640:	46bd      	mov	sp, r7
 800b642:	bd80      	pop	{r7, pc}

0800b644 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800b644:	b580      	push	{r7, lr}
 800b646:	b082      	sub	sp, #8
 800b648:	af00      	add	r7, sp, #0
 800b64a:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800b64c:	687b      	ldr	r3, [r7, #4]
 800b64e:	681b      	ldr	r3, [r3, #0]
 800b650:	68da      	ldr	r2, [r3, #12]
 800b652:	687b      	ldr	r3, [r7, #4]
 800b654:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b656:	b292      	uxth	r2, r2
 800b658:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800b65a:	687b      	ldr	r3, [r7, #4]
 800b65c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800b65e:	1c9a      	adds	r2, r3, #2
 800b660:	687b      	ldr	r3, [r7, #4]
 800b662:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800b664:	687b      	ldr	r3, [r7, #4]
 800b666:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b66a:	b29b      	uxth	r3, r3
 800b66c:	3b01      	subs	r3, #1
 800b66e:	b29a      	uxth	r2, r3
 800b670:	687b      	ldr	r3, [r7, #4]
 800b672:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800b676:	687b      	ldr	r3, [r7, #4]
 800b678:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800b67c:	b29b      	uxth	r3, r3
 800b67e:	2b00      	cmp	r3, #0
 800b680:	d102      	bne.n	800b688 <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800b682:	6878      	ldr	r0, [r7, #4]
 800b684:	f000 fa90 	bl	800bba8 <SPI_CloseRx_ISR>
  }
}
 800b688:	bf00      	nop
 800b68a:	3708      	adds	r7, #8
 800b68c:	46bd      	mov	sp, r7
 800b68e:	bd80      	pop	{r7, pc}

0800b690 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800b690:	b580      	push	{r7, lr}
 800b692:	b082      	sub	sp, #8
 800b694:	af00      	add	r7, sp, #0
 800b696:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800b698:	687b      	ldr	r3, [r7, #4]
 800b69a:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	681b      	ldr	r3, [r3, #0]
 800b6a0:	330c      	adds	r3, #12
 800b6a2:	7812      	ldrb	r2, [r2, #0]
 800b6a4:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6aa:	1c5a      	adds	r2, r3, #1
 800b6ac:	687b      	ldr	r3, [r7, #4]
 800b6ae:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800b6b0:	687b      	ldr	r3, [r7, #4]
 800b6b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b6b4:	b29b      	uxth	r3, r3
 800b6b6:	3b01      	subs	r3, #1
 800b6b8:	b29a      	uxth	r2, r3
 800b6ba:	687b      	ldr	r3, [r7, #4]
 800b6bc:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800b6be:	687b      	ldr	r3, [r7, #4]
 800b6c0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b6c2:	b29b      	uxth	r3, r3
 800b6c4:	2b00      	cmp	r3, #0
 800b6c6:	d102      	bne.n	800b6ce <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800b6c8:	6878      	ldr	r0, [r7, #4]
 800b6ca:	f000 fa9d 	bl	800bc08 <SPI_CloseTx_ISR>
  }
}
 800b6ce:	bf00      	nop
 800b6d0:	3708      	adds	r7, #8
 800b6d2:	46bd      	mov	sp, r7
 800b6d4:	bd80      	pop	{r7, pc}

0800b6d6 <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800b6d6:	b580      	push	{r7, lr}
 800b6d8:	b082      	sub	sp, #8
 800b6da:	af00      	add	r7, sp, #0
 800b6dc:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800b6de:	687b      	ldr	r3, [r7, #4]
 800b6e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6e2:	881a      	ldrh	r2, [r3, #0]
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	681b      	ldr	r3, [r3, #0]
 800b6e8:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800b6ea:	687b      	ldr	r3, [r7, #4]
 800b6ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800b6ee:	1c9a      	adds	r2, r3, #2
 800b6f0:	687b      	ldr	r3, [r7, #4]
 800b6f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b6f8:	b29b      	uxth	r3, r3
 800b6fa:	3b01      	subs	r3, #1
 800b6fc:	b29a      	uxth	r2, r3
 800b6fe:	687b      	ldr	r3, [r7, #4]
 800b700:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800b702:	687b      	ldr	r3, [r7, #4]
 800b704:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800b706:	b29b      	uxth	r3, r3
 800b708:	2b00      	cmp	r3, #0
 800b70a:	d102      	bne.n	800b712 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800b70c:	6878      	ldr	r0, [r7, #4]
 800b70e:	f000 fa7b 	bl	800bc08 <SPI_CloseTx_ISR>
  }
}
 800b712:	bf00      	nop
 800b714:	3708      	adds	r7, #8
 800b716:	46bd      	mov	sp, r7
 800b718:	bd80      	pop	{r7, pc}
	...

0800b71c <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b088      	sub	sp, #32
 800b720:	af00      	add	r7, sp, #0
 800b722:	60f8      	str	r0, [r7, #12]
 800b724:	60b9      	str	r1, [r7, #8]
 800b726:	603b      	str	r3, [r7, #0]
 800b728:	4613      	mov	r3, r2
 800b72a:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800b72c:	f7f7 fe86 	bl	800343c <HAL_GetTick>
 800b730:	4602      	mov	r2, r0
 800b732:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800b734:	1a9b      	subs	r3, r3, r2
 800b736:	683a      	ldr	r2, [r7, #0]
 800b738:	4413      	add	r3, r2
 800b73a:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800b73c:	f7f7 fe7e 	bl	800343c <HAL_GetTick>
 800b740:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800b742:	4b39      	ldr	r3, [pc, #228]	; (800b828 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800b744:	681b      	ldr	r3, [r3, #0]
 800b746:	015b      	lsls	r3, r3, #5
 800b748:	0d1b      	lsrs	r3, r3, #20
 800b74a:	69fa      	ldr	r2, [r7, #28]
 800b74c:	fb02 f303 	mul.w	r3, r2, r3
 800b750:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b752:	e054      	b.n	800b7fe <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800b754:	683b      	ldr	r3, [r7, #0]
 800b756:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b75a:	d050      	beq.n	800b7fe <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b75c:	f7f7 fe6e 	bl	800343c <HAL_GetTick>
 800b760:	4602      	mov	r2, r0
 800b762:	69bb      	ldr	r3, [r7, #24]
 800b764:	1ad3      	subs	r3, r2, r3
 800b766:	69fa      	ldr	r2, [r7, #28]
 800b768:	429a      	cmp	r2, r3
 800b76a:	d902      	bls.n	800b772 <SPI_WaitFlagStateUntilTimeout+0x56>
 800b76c:	69fb      	ldr	r3, [r7, #28]
 800b76e:	2b00      	cmp	r3, #0
 800b770:	d13d      	bne.n	800b7ee <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b772:	68fb      	ldr	r3, [r7, #12]
 800b774:	681b      	ldr	r3, [r3, #0]
 800b776:	685a      	ldr	r2, [r3, #4]
 800b778:	68fb      	ldr	r3, [r7, #12]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b780:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b782:	68fb      	ldr	r3, [r7, #12]
 800b784:	685b      	ldr	r3, [r3, #4]
 800b786:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b78a:	d111      	bne.n	800b7b0 <SPI_WaitFlagStateUntilTimeout+0x94>
 800b78c:	68fb      	ldr	r3, [r7, #12]
 800b78e:	689b      	ldr	r3, [r3, #8]
 800b790:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b794:	d004      	beq.n	800b7a0 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b796:	68fb      	ldr	r3, [r7, #12]
 800b798:	689b      	ldr	r3, [r3, #8]
 800b79a:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b79e:	d107      	bne.n	800b7b0 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b7a0:	68fb      	ldr	r3, [r7, #12]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	681a      	ldr	r2, [r3, #0]
 800b7a6:	68fb      	ldr	r3, [r7, #12]
 800b7a8:	681b      	ldr	r3, [r3, #0]
 800b7aa:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b7ae:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b7b0:	68fb      	ldr	r3, [r7, #12]
 800b7b2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b7b4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b7b8:	d10f      	bne.n	800b7da <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800b7ba:	68fb      	ldr	r3, [r7, #12]
 800b7bc:	681b      	ldr	r3, [r3, #0]
 800b7be:	681a      	ldr	r2, [r3, #0]
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	681b      	ldr	r3, [r3, #0]
 800b7c4:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b7c8:	601a      	str	r2, [r3, #0]
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	681b      	ldr	r3, [r3, #0]
 800b7ce:	681a      	ldr	r2, [r3, #0]
 800b7d0:	68fb      	ldr	r3, [r7, #12]
 800b7d2:	681b      	ldr	r3, [r3, #0]
 800b7d4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b7d8:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b7da:	68fb      	ldr	r3, [r7, #12]
 800b7dc:	2201      	movs	r2, #1
 800b7de:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b7e2:	68fb      	ldr	r3, [r7, #12]
 800b7e4:	2200      	movs	r2, #0
 800b7e6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b7ea:	2303      	movs	r3, #3
 800b7ec:	e017      	b.n	800b81e <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b7ee:	697b      	ldr	r3, [r7, #20]
 800b7f0:	2b00      	cmp	r3, #0
 800b7f2:	d101      	bne.n	800b7f8 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800b7f4:	2300      	movs	r3, #0
 800b7f6:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800b7f8:	697b      	ldr	r3, [r7, #20]
 800b7fa:	3b01      	subs	r3, #1
 800b7fc:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800b7fe:	68fb      	ldr	r3, [r7, #12]
 800b800:	681b      	ldr	r3, [r3, #0]
 800b802:	689a      	ldr	r2, [r3, #8]
 800b804:	68bb      	ldr	r3, [r7, #8]
 800b806:	4013      	ands	r3, r2
 800b808:	68ba      	ldr	r2, [r7, #8]
 800b80a:	429a      	cmp	r2, r3
 800b80c:	bf0c      	ite	eq
 800b80e:	2301      	moveq	r3, #1
 800b810:	2300      	movne	r3, #0
 800b812:	b2db      	uxtb	r3, r3
 800b814:	461a      	mov	r2, r3
 800b816:	79fb      	ldrb	r3, [r7, #7]
 800b818:	429a      	cmp	r2, r3
 800b81a:	d19b      	bne.n	800b754 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b81c:	2300      	movs	r3, #0
}
 800b81e:	4618      	mov	r0, r3
 800b820:	3720      	adds	r7, #32
 800b822:	46bd      	mov	sp, r7
 800b824:	bd80      	pop	{r7, pc}
 800b826:	bf00      	nop
 800b828:	20000000 	.word	0x20000000

0800b82c <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b82c:	b580      	push	{r7, lr}
 800b82e:	b08a      	sub	sp, #40	; 0x28
 800b830:	af00      	add	r7, sp, #0
 800b832:	60f8      	str	r0, [r7, #12]
 800b834:	60b9      	str	r1, [r7, #8]
 800b836:	607a      	str	r2, [r7, #4]
 800b838:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800b83a:	2300      	movs	r3, #0
 800b83c:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b83e:	f7f7 fdfd 	bl	800343c <HAL_GetTick>
 800b842:	4602      	mov	r2, r0
 800b844:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b846:	1a9b      	subs	r3, r3, r2
 800b848:	683a      	ldr	r2, [r7, #0]
 800b84a:	4413      	add	r3, r2
 800b84c:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800b84e:	f7f7 fdf5 	bl	800343c <HAL_GetTick>
 800b852:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800b854:	68fb      	ldr	r3, [r7, #12]
 800b856:	681b      	ldr	r3, [r3, #0]
 800b858:	330c      	adds	r3, #12
 800b85a:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b85c:	4b3d      	ldr	r3, [pc, #244]	; (800b954 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800b85e:	681a      	ldr	r2, [r3, #0]
 800b860:	4613      	mov	r3, r2
 800b862:	009b      	lsls	r3, r3, #2
 800b864:	4413      	add	r3, r2
 800b866:	00da      	lsls	r2, r3, #3
 800b868:	1ad3      	subs	r3, r2, r3
 800b86a:	0d1b      	lsrs	r3, r3, #20
 800b86c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b86e:	fb02 f303 	mul.w	r3, r2, r3
 800b872:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800b874:	e060      	b.n	800b938 <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b876:	68bb      	ldr	r3, [r7, #8]
 800b878:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b87c:	d107      	bne.n	800b88e <SPI_WaitFifoStateUntilTimeout+0x62>
 800b87e:	687b      	ldr	r3, [r7, #4]
 800b880:	2b00      	cmp	r3, #0
 800b882:	d104      	bne.n	800b88e <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800b884:	69fb      	ldr	r3, [r7, #28]
 800b886:	781b      	ldrb	r3, [r3, #0]
 800b888:	b2db      	uxtb	r3, r3
 800b88a:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800b88c:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b88e:	683b      	ldr	r3, [r7, #0]
 800b890:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b894:	d050      	beq.n	800b938 <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b896:	f7f7 fdd1 	bl	800343c <HAL_GetTick>
 800b89a:	4602      	mov	r2, r0
 800b89c:	6a3b      	ldr	r3, [r7, #32]
 800b89e:	1ad3      	subs	r3, r2, r3
 800b8a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b8a2:	429a      	cmp	r2, r3
 800b8a4:	d902      	bls.n	800b8ac <SPI_WaitFifoStateUntilTimeout+0x80>
 800b8a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b8a8:	2b00      	cmp	r3, #0
 800b8aa:	d13d      	bne.n	800b928 <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b8ac:	68fb      	ldr	r3, [r7, #12]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	685a      	ldr	r2, [r3, #4]
 800b8b2:	68fb      	ldr	r3, [r7, #12]
 800b8b4:	681b      	ldr	r3, [r3, #0]
 800b8b6:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b8ba:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b8bc:	68fb      	ldr	r3, [r7, #12]
 800b8be:	685b      	ldr	r3, [r3, #4]
 800b8c0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b8c4:	d111      	bne.n	800b8ea <SPI_WaitFifoStateUntilTimeout+0xbe>
 800b8c6:	68fb      	ldr	r3, [r7, #12]
 800b8c8:	689b      	ldr	r3, [r3, #8]
 800b8ca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b8ce:	d004      	beq.n	800b8da <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b8d0:	68fb      	ldr	r3, [r7, #12]
 800b8d2:	689b      	ldr	r3, [r3, #8]
 800b8d4:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b8d8:	d107      	bne.n	800b8ea <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b8da:	68fb      	ldr	r3, [r7, #12]
 800b8dc:	681b      	ldr	r3, [r3, #0]
 800b8de:	681a      	ldr	r2, [r3, #0]
 800b8e0:	68fb      	ldr	r3, [r7, #12]
 800b8e2:	681b      	ldr	r3, [r3, #0]
 800b8e4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b8e8:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b8ea:	68fb      	ldr	r3, [r7, #12]
 800b8ec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b8ee:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b8f2:	d10f      	bne.n	800b914 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800b8f4:	68fb      	ldr	r3, [r7, #12]
 800b8f6:	681b      	ldr	r3, [r3, #0]
 800b8f8:	681a      	ldr	r2, [r3, #0]
 800b8fa:	68fb      	ldr	r3, [r7, #12]
 800b8fc:	681b      	ldr	r3, [r3, #0]
 800b8fe:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b902:	601a      	str	r2, [r3, #0]
 800b904:	68fb      	ldr	r3, [r7, #12]
 800b906:	681b      	ldr	r3, [r3, #0]
 800b908:	681a      	ldr	r2, [r3, #0]
 800b90a:	68fb      	ldr	r3, [r7, #12]
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b912:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b914:	68fb      	ldr	r3, [r7, #12]
 800b916:	2201      	movs	r2, #1
 800b918:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b91c:	68fb      	ldr	r3, [r7, #12]
 800b91e:	2200      	movs	r2, #0
 800b920:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b924:	2303      	movs	r3, #3
 800b926:	e010      	b.n	800b94a <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b928:	69bb      	ldr	r3, [r7, #24]
 800b92a:	2b00      	cmp	r3, #0
 800b92c:	d101      	bne.n	800b932 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800b92e:	2300      	movs	r3, #0
 800b930:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800b932:	69bb      	ldr	r3, [r7, #24]
 800b934:	3b01      	subs	r3, #1
 800b936:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800b938:	68fb      	ldr	r3, [r7, #12]
 800b93a:	681b      	ldr	r3, [r3, #0]
 800b93c:	689a      	ldr	r2, [r3, #8]
 800b93e:	68bb      	ldr	r3, [r7, #8]
 800b940:	4013      	ands	r3, r2
 800b942:	687a      	ldr	r2, [r7, #4]
 800b944:	429a      	cmp	r2, r3
 800b946:	d196      	bne.n	800b876 <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800b948:	2300      	movs	r3, #0
}
 800b94a:	4618      	mov	r0, r3
 800b94c:	3728      	adds	r7, #40	; 0x28
 800b94e:	46bd      	mov	sp, r7
 800b950:	bd80      	pop	{r7, pc}
 800b952:	bf00      	nop
 800b954:	20000000 	.word	0x20000000

0800b958 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b958:	b580      	push	{r7, lr}
 800b95a:	b088      	sub	sp, #32
 800b95c:	af02      	add	r7, sp, #8
 800b95e:	60f8      	str	r0, [r7, #12]
 800b960:	60b9      	str	r1, [r7, #8]
 800b962:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b964:	68fb      	ldr	r3, [r7, #12]
 800b966:	685b      	ldr	r3, [r3, #4]
 800b968:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b96c:	d111      	bne.n	800b992 <SPI_EndRxTransaction+0x3a>
 800b96e:	68fb      	ldr	r3, [r7, #12]
 800b970:	689b      	ldr	r3, [r3, #8]
 800b972:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b976:	d004      	beq.n	800b982 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	689b      	ldr	r3, [r3, #8]
 800b97c:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b980:	d107      	bne.n	800b992 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b982:	68fb      	ldr	r3, [r7, #12]
 800b984:	681b      	ldr	r3, [r3, #0]
 800b986:	681a      	ldr	r2, [r3, #0]
 800b988:	68fb      	ldr	r3, [r7, #12]
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b990:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b992:	68fb      	ldr	r3, [r7, #12]
 800b994:	685b      	ldr	r3, [r3, #4]
 800b996:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b99a:	d112      	bne.n	800b9c2 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b99c:	687b      	ldr	r3, [r7, #4]
 800b99e:	9300      	str	r3, [sp, #0]
 800b9a0:	68bb      	ldr	r3, [r7, #8]
 800b9a2:	2200      	movs	r2, #0
 800b9a4:	2180      	movs	r1, #128	; 0x80
 800b9a6:	68f8      	ldr	r0, [r7, #12]
 800b9a8:	f7ff feb8 	bl	800b71c <SPI_WaitFlagStateUntilTimeout>
 800b9ac:	4603      	mov	r3, r0
 800b9ae:	2b00      	cmp	r3, #0
 800b9b0:	d021      	beq.n	800b9f6 <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b9b2:	68fb      	ldr	r3, [r7, #12]
 800b9b4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b9b6:	f043 0220 	orr.w	r2, r3, #32
 800b9ba:	68fb      	ldr	r3, [r7, #12]
 800b9bc:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800b9be:	2303      	movs	r3, #3
 800b9c0:	e03d      	b.n	800ba3e <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b9c2:	4b21      	ldr	r3, [pc, #132]	; (800ba48 <SPI_EndRxTransaction+0xf0>)
 800b9c4:	681b      	ldr	r3, [r3, #0]
 800b9c6:	4a21      	ldr	r2, [pc, #132]	; (800ba4c <SPI_EndRxTransaction+0xf4>)
 800b9c8:	fba2 2303 	umull	r2, r3, r2, r3
 800b9cc:	0d5b      	lsrs	r3, r3, #21
 800b9ce:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b9d2:	fb02 f303 	mul.w	r3, r2, r3
 800b9d6:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b9d8:	697b      	ldr	r3, [r7, #20]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d00a      	beq.n	800b9f4 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800b9de:	697b      	ldr	r3, [r7, #20]
 800b9e0:	3b01      	subs	r3, #1
 800b9e2:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b9e4:	68fb      	ldr	r3, [r7, #12]
 800b9e6:	681b      	ldr	r3, [r3, #0]
 800b9e8:	689b      	ldr	r3, [r3, #8]
 800b9ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9ee:	2b80      	cmp	r3, #128	; 0x80
 800b9f0:	d0f2      	beq.n	800b9d8 <SPI_EndRxTransaction+0x80>
 800b9f2:	e000      	b.n	800b9f6 <SPI_EndRxTransaction+0x9e>
        break;
 800b9f4:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b9f6:	68fb      	ldr	r3, [r7, #12]
 800b9f8:	685b      	ldr	r3, [r3, #4]
 800b9fa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b9fe:	d11d      	bne.n	800ba3c <SPI_EndRxTransaction+0xe4>
 800ba00:	68fb      	ldr	r3, [r7, #12]
 800ba02:	689b      	ldr	r3, [r3, #8]
 800ba04:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800ba08:	d004      	beq.n	800ba14 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800ba0a:	68fb      	ldr	r3, [r7, #12]
 800ba0c:	689b      	ldr	r3, [r3, #8]
 800ba0e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ba12:	d113      	bne.n	800ba3c <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ba14:	687b      	ldr	r3, [r7, #4]
 800ba16:	9300      	str	r3, [sp, #0]
 800ba18:	68bb      	ldr	r3, [r7, #8]
 800ba1a:	2200      	movs	r2, #0
 800ba1c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ba20:	68f8      	ldr	r0, [r7, #12]
 800ba22:	f7ff ff03 	bl	800b82c <SPI_WaitFifoStateUntilTimeout>
 800ba26:	4603      	mov	r3, r0
 800ba28:	2b00      	cmp	r3, #0
 800ba2a:	d007      	beq.n	800ba3c <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ba2c:	68fb      	ldr	r3, [r7, #12]
 800ba2e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba30:	f043 0220 	orr.w	r2, r3, #32
 800ba34:	68fb      	ldr	r3, [r7, #12]
 800ba36:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800ba38:	2303      	movs	r3, #3
 800ba3a:	e000      	b.n	800ba3e <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 800ba3c:	2300      	movs	r3, #0
}
 800ba3e:	4618      	mov	r0, r3
 800ba40:	3718      	adds	r7, #24
 800ba42:	46bd      	mov	sp, r7
 800ba44:	bd80      	pop	{r7, pc}
 800ba46:	bf00      	nop
 800ba48:	20000000 	.word	0x20000000
 800ba4c:	165e9f81 	.word	0x165e9f81

0800ba50 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800ba50:	b580      	push	{r7, lr}
 800ba52:	b088      	sub	sp, #32
 800ba54:	af02      	add	r7, sp, #8
 800ba56:	60f8      	str	r0, [r7, #12]
 800ba58:	60b9      	str	r1, [r7, #8]
 800ba5a:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800ba5c:	687b      	ldr	r3, [r7, #4]
 800ba5e:	9300      	str	r3, [sp, #0]
 800ba60:	68bb      	ldr	r3, [r7, #8]
 800ba62:	2200      	movs	r2, #0
 800ba64:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800ba68:	68f8      	ldr	r0, [r7, #12]
 800ba6a:	f7ff fedf 	bl	800b82c <SPI_WaitFifoStateUntilTimeout>
 800ba6e:	4603      	mov	r3, r0
 800ba70:	2b00      	cmp	r3, #0
 800ba72:	d007      	beq.n	800ba84 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800ba74:	68fb      	ldr	r3, [r7, #12]
 800ba76:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ba78:	f043 0220 	orr.w	r2, r3, #32
 800ba7c:	68fb      	ldr	r3, [r7, #12]
 800ba7e:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800ba80:	2303      	movs	r3, #3
 800ba82:	e046      	b.n	800bb12 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800ba84:	4b25      	ldr	r3, [pc, #148]	; (800bb1c <SPI_EndRxTxTransaction+0xcc>)
 800ba86:	681b      	ldr	r3, [r3, #0]
 800ba88:	4a25      	ldr	r2, [pc, #148]	; (800bb20 <SPI_EndRxTxTransaction+0xd0>)
 800ba8a:	fba2 2303 	umull	r2, r3, r2, r3
 800ba8e:	0d5b      	lsrs	r3, r3, #21
 800ba90:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800ba94:	fb02 f303 	mul.w	r3, r2, r3
 800ba98:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800ba9a:	68fb      	ldr	r3, [r7, #12]
 800ba9c:	685b      	ldr	r3, [r3, #4]
 800ba9e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800baa2:	d112      	bne.n	800baca <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	9300      	str	r3, [sp, #0]
 800baa8:	68bb      	ldr	r3, [r7, #8]
 800baaa:	2200      	movs	r2, #0
 800baac:	2180      	movs	r1, #128	; 0x80
 800baae:	68f8      	ldr	r0, [r7, #12]
 800bab0:	f7ff fe34 	bl	800b71c <SPI_WaitFlagStateUntilTimeout>
 800bab4:	4603      	mov	r3, r0
 800bab6:	2b00      	cmp	r3, #0
 800bab8:	d016      	beq.n	800bae8 <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800baba:	68fb      	ldr	r3, [r7, #12]
 800babc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800babe:	f043 0220 	orr.w	r2, r3, #32
 800bac2:	68fb      	ldr	r3, [r7, #12]
 800bac4:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800bac6:	2303      	movs	r3, #3
 800bac8:	e023      	b.n	800bb12 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800baca:	697b      	ldr	r3, [r7, #20]
 800bacc:	2b00      	cmp	r3, #0
 800bace:	d00a      	beq.n	800bae6 <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800bad0:	697b      	ldr	r3, [r7, #20]
 800bad2:	3b01      	subs	r3, #1
 800bad4:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800bad6:	68fb      	ldr	r3, [r7, #12]
 800bad8:	681b      	ldr	r3, [r3, #0]
 800bada:	689b      	ldr	r3, [r3, #8]
 800badc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bae0:	2b80      	cmp	r3, #128	; 0x80
 800bae2:	d0f2      	beq.n	800baca <SPI_EndRxTxTransaction+0x7a>
 800bae4:	e000      	b.n	800bae8 <SPI_EndRxTxTransaction+0x98>
        break;
 800bae6:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800bae8:	687b      	ldr	r3, [r7, #4]
 800baea:	9300      	str	r3, [sp, #0]
 800baec:	68bb      	ldr	r3, [r7, #8]
 800baee:	2200      	movs	r2, #0
 800baf0:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800baf4:	68f8      	ldr	r0, [r7, #12]
 800baf6:	f7ff fe99 	bl	800b82c <SPI_WaitFifoStateUntilTimeout>
 800bafa:	4603      	mov	r3, r0
 800bafc:	2b00      	cmp	r3, #0
 800bafe:	d007      	beq.n	800bb10 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bb00:	68fb      	ldr	r3, [r7, #12]
 800bb02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb04:	f043 0220 	orr.w	r2, r3, #32
 800bb08:	68fb      	ldr	r3, [r7, #12]
 800bb0a:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800bb0c:	2303      	movs	r3, #3
 800bb0e:	e000      	b.n	800bb12 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800bb10:	2300      	movs	r3, #0
}
 800bb12:	4618      	mov	r0, r3
 800bb14:	3718      	adds	r7, #24
 800bb16:	46bd      	mov	sp, r7
 800bb18:	bd80      	pop	{r7, pc}
 800bb1a:	bf00      	nop
 800bb1c:	20000000 	.word	0x20000000
 800bb20:	165e9f81 	.word	0x165e9f81

0800bb24 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800bb24:	b580      	push	{r7, lr}
 800bb26:	b084      	sub	sp, #16
 800bb28:	af00      	add	r7, sp, #0
 800bb2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800bb2c:	f7f7 fc86 	bl	800343c <HAL_GetTick>
 800bb30:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800bb32:	687b      	ldr	r3, [r7, #4]
 800bb34:	681b      	ldr	r3, [r3, #0]
 800bb36:	685a      	ldr	r2, [r3, #4]
 800bb38:	687b      	ldr	r3, [r7, #4]
 800bb3a:	681b      	ldr	r3, [r3, #0]
 800bb3c:	f022 0220 	bic.w	r2, r2, #32
 800bb40:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800bb42:	68fa      	ldr	r2, [r7, #12]
 800bb44:	2164      	movs	r1, #100	; 0x64
 800bb46:	6878      	ldr	r0, [r7, #4]
 800bb48:	f7ff ff82 	bl	800ba50 <SPI_EndRxTxTransaction>
 800bb4c:	4603      	mov	r3, r0
 800bb4e:	2b00      	cmp	r3, #0
 800bb50:	d005      	beq.n	800bb5e <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bb52:	687b      	ldr	r3, [r7, #4]
 800bb54:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb56:	f043 0220 	orr.w	r2, r3, #32
 800bb5a:	687b      	ldr	r3, [r7, #4]
 800bb5c:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800bb5e:	687b      	ldr	r3, [r7, #4]
 800bb60:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bb62:	2b00      	cmp	r3, #0
 800bb64:	d115      	bne.n	800bb92 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800bb66:	687b      	ldr	r3, [r7, #4]
 800bb68:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800bb6c:	b2db      	uxtb	r3, r3
 800bb6e:	2b04      	cmp	r3, #4
 800bb70:	d107      	bne.n	800bb82 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800bb72:	687b      	ldr	r3, [r7, #4]
 800bb74:	2201      	movs	r2, #1
 800bb76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800bb7a:	6878      	ldr	r0, [r7, #4]
 800bb7c:	f011 fa68 	bl	801d050 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800bb80:	e00e      	b.n	800bba0 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800bb82:	687b      	ldr	r3, [r7, #4]
 800bb84:	2201      	movs	r2, #1
 800bb86:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800bb8a:	6878      	ldr	r0, [r7, #4]
 800bb8c:	f011 fa7c 	bl	801d088 <HAL_SPI_TxRxCpltCallback>
}
 800bb90:	e006      	b.n	800bba0 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800bb92:	687b      	ldr	r3, [r7, #4]
 800bb94:	2201      	movs	r2, #1
 800bb96:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800bb9a:	6878      	ldr	r0, [r7, #4]
 800bb9c:	f011 fab8 	bl	801d110 <HAL_SPI_ErrorCallback>
}
 800bba0:	bf00      	nop
 800bba2:	3710      	adds	r7, #16
 800bba4:	46bd      	mov	sp, r7
 800bba6:	bd80      	pop	{r7, pc}

0800bba8 <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800bba8:	b580      	push	{r7, lr}
 800bbaa:	b082      	sub	sp, #8
 800bbac:	af00      	add	r7, sp, #0
 800bbae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800bbb0:	687b      	ldr	r3, [r7, #4]
 800bbb2:	681b      	ldr	r3, [r3, #0]
 800bbb4:	685a      	ldr	r2, [r3, #4]
 800bbb6:	687b      	ldr	r3, [r7, #4]
 800bbb8:	681b      	ldr	r3, [r3, #0]
 800bbba:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800bbbe:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800bbc0:	f7f7 fc3c 	bl	800343c <HAL_GetTick>
 800bbc4:	4603      	mov	r3, r0
 800bbc6:	461a      	mov	r2, r3
 800bbc8:	2164      	movs	r1, #100	; 0x64
 800bbca:	6878      	ldr	r0, [r7, #4]
 800bbcc:	f7ff fec4 	bl	800b958 <SPI_EndRxTransaction>
 800bbd0:	4603      	mov	r3, r0
 800bbd2:	2b00      	cmp	r3, #0
 800bbd4:	d005      	beq.n	800bbe2 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bbd6:	687b      	ldr	r3, [r7, #4]
 800bbd8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bbda:	f043 0220 	orr.w	r2, r3, #32
 800bbde:	687b      	ldr	r3, [r7, #4]
 800bbe0:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800bbe2:	687b      	ldr	r3, [r7, #4]
 800bbe4:	2201      	movs	r2, #1
 800bbe6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800bbea:	687b      	ldr	r3, [r7, #4]
 800bbec:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bbee:	2b00      	cmp	r3, #0
 800bbf0:	d103      	bne.n	800bbfa <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800bbf2:	6878      	ldr	r0, [r7, #4]
 800bbf4:	f011 fa2c 	bl	801d050 <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800bbf8:	e002      	b.n	800bc00 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 800bbfa:	6878      	ldr	r0, [r7, #4]
 800bbfc:	f011 fa88 	bl	801d110 <HAL_SPI_ErrorCallback>
}
 800bc00:	bf00      	nop
 800bc02:	3708      	adds	r7, #8
 800bc04:	46bd      	mov	sp, r7
 800bc06:	bd80      	pop	{r7, pc}

0800bc08 <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800bc08:	b580      	push	{r7, lr}
 800bc0a:	b084      	sub	sp, #16
 800bc0c:	af00      	add	r7, sp, #0
 800bc0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800bc10:	f7f7 fc14 	bl	800343c <HAL_GetTick>
 800bc14:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800bc16:	687b      	ldr	r3, [r7, #4]
 800bc18:	681b      	ldr	r3, [r3, #0]
 800bc1a:	685a      	ldr	r2, [r3, #4]
 800bc1c:	687b      	ldr	r3, [r7, #4]
 800bc1e:	681b      	ldr	r3, [r3, #0]
 800bc20:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800bc24:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800bc26:	68fa      	ldr	r2, [r7, #12]
 800bc28:	2164      	movs	r1, #100	; 0x64
 800bc2a:	6878      	ldr	r0, [r7, #4]
 800bc2c:	f7ff ff10 	bl	800ba50 <SPI_EndRxTxTransaction>
 800bc30:	4603      	mov	r3, r0
 800bc32:	2b00      	cmp	r3, #0
 800bc34:	d005      	beq.n	800bc42 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800bc36:	687b      	ldr	r3, [r7, #4]
 800bc38:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc3a:	f043 0220 	orr.w	r2, r3, #32
 800bc3e:	687b      	ldr	r3, [r7, #4]
 800bc40:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800bc42:	687b      	ldr	r3, [r7, #4]
 800bc44:	689b      	ldr	r3, [r3, #8]
 800bc46:	2b00      	cmp	r3, #0
 800bc48:	d10a      	bne.n	800bc60 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800bc4a:	2300      	movs	r3, #0
 800bc4c:	60bb      	str	r3, [r7, #8]
 800bc4e:	687b      	ldr	r3, [r7, #4]
 800bc50:	681b      	ldr	r3, [r3, #0]
 800bc52:	68db      	ldr	r3, [r3, #12]
 800bc54:	60bb      	str	r3, [r7, #8]
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	681b      	ldr	r3, [r3, #0]
 800bc5a:	689b      	ldr	r3, [r3, #8]
 800bc5c:	60bb      	str	r3, [r7, #8]
 800bc5e:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800bc60:	687b      	ldr	r3, [r7, #4]
 800bc62:	2201      	movs	r2, #1
 800bc64:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800bc68:	687b      	ldr	r3, [r7, #4]
 800bc6a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bc6c:	2b00      	cmp	r3, #0
 800bc6e:	d003      	beq.n	800bc78 <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800bc70:	6878      	ldr	r0, [r7, #4]
 800bc72:	f011 fa4d 	bl	801d110 <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800bc76:	e002      	b.n	800bc7e <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 800bc78:	6878      	ldr	r0, [r7, #4]
 800bc7a:	f7ff f957 	bl	800af2c <HAL_SPI_TxCpltCallback>
}
 800bc7e:	bf00      	nop
 800bc80:	3710      	adds	r7, #16
 800bc82:	46bd      	mov	sp, r7
 800bc84:	bd80      	pop	{r7, pc}
	...

0800bc88 <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 800bc88:	b580      	push	{r7, lr}
 800bc8a:	b086      	sub	sp, #24
 800bc8c:	af02      	add	r7, sp, #8
 800bc8e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bc90:	687b      	ldr	r3, [r7, #4]
 800bc92:	681b      	ldr	r3, [r3, #0]
 800bc94:	681a      	ldr	r2, [r3, #0]
 800bc96:	687b      	ldr	r3, [r7, #4]
 800bc98:	681b      	ldr	r3, [r3, #0]
 800bc9a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bc9e:	601a      	str	r2, [r3, #0]

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800bca0:	4b27      	ldr	r3, [pc, #156]	; (800bd40 <SPI_AbortRx_ISR+0xb8>)
 800bca2:	681b      	ldr	r3, [r3, #0]
 800bca4:	4a27      	ldr	r2, [pc, #156]	; (800bd44 <SPI_AbortRx_ISR+0xbc>)
 800bca6:	fba2 2303 	umull	r2, r3, r2, r3
 800bcaa:	0a5b      	lsrs	r3, r3, #9
 800bcac:	2264      	movs	r2, #100	; 0x64
 800bcae:	fb02 f303 	mul.w	r3, r2, r3
 800bcb2:	60fb      	str	r3, [r7, #12]

  /* Disable RXNEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXNEIE));
 800bcb4:	687b      	ldr	r3, [r7, #4]
 800bcb6:	681b      	ldr	r3, [r3, #0]
 800bcb8:	685a      	ldr	r2, [r3, #4]
 800bcba:	687b      	ldr	r3, [r7, #4]
 800bcbc:	681b      	ldr	r3, [r3, #0]
 800bcbe:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bcc2:	605a      	str	r2, [r3, #4]

  /* Check RXNEIE is disabled */
  do
  {
    if (count == 0U)
 800bcc4:	68fb      	ldr	r3, [r7, #12]
 800bcc6:	2b00      	cmp	r3, #0
 800bcc8:	d106      	bne.n	800bcd8 <SPI_AbortRx_ISR+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bcca:	687b      	ldr	r3, [r7, #4]
 800bccc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bcce:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bcd2:	687b      	ldr	r3, [r7, #4]
 800bcd4:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 800bcd6:	e009      	b.n	800bcec <SPI_AbortRx_ISR+0x64>
    }
    count--;
 800bcd8:	68fb      	ldr	r3, [r7, #12]
 800bcda:	3b01      	subs	r3, #1
 800bcdc:	60fb      	str	r3, [r7, #12]
  } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
 800bcde:	687b      	ldr	r3, [r7, #4]
 800bce0:	681b      	ldr	r3, [r3, #0]
 800bce2:	685b      	ldr	r3, [r3, #4]
 800bce4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bce8:	2b40      	cmp	r3, #64	; 0x40
 800bcea:	d0eb      	beq.n	800bcc4 <SPI_AbortRx_ISR+0x3c>

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800bcec:	f7f7 fba6 	bl	800343c <HAL_GetTick>
 800bcf0:	4603      	mov	r3, r0
 800bcf2:	9300      	str	r3, [sp, #0]
 800bcf4:	2364      	movs	r3, #100	; 0x64
 800bcf6:	2200      	movs	r2, #0
 800bcf8:	2180      	movs	r1, #128	; 0x80
 800bcfa:	6878      	ldr	r0, [r7, #4]
 800bcfc:	f7ff fd0e 	bl	800b71c <SPI_WaitFlagStateUntilTimeout>
 800bd00:	4603      	mov	r3, r0
 800bd02:	2b00      	cmp	r3, #0
 800bd04:	d002      	beq.n	800bd0c <SPI_AbortRx_ISR+0x84>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800bd06:	687b      	ldr	r3, [r7, #4]
 800bd08:	2240      	movs	r2, #64	; 0x40
 800bd0a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800bd0c:	f7f7 fb96 	bl	800343c <HAL_GetTick>
 800bd10:	4603      	mov	r3, r0
 800bd12:	9300      	str	r3, [sp, #0]
 800bd14:	2364      	movs	r3, #100	; 0x64
 800bd16:	2200      	movs	r2, #0
 800bd18:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800bd1c:	6878      	ldr	r0, [r7, #4]
 800bd1e:	f7ff fd85 	bl	800b82c <SPI_WaitFifoStateUntilTimeout>
 800bd22:	4603      	mov	r3, r0
 800bd24:	2b00      	cmp	r3, #0
 800bd26:	d002      	beq.n	800bd2e <SPI_AbortRx_ISR+0xa6>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800bd28:	687b      	ldr	r3, [r7, #4]
 800bd2a:	2240      	movs	r2, #64	; 0x40
 800bd2c:	661a      	str	r2, [r3, #96]	; 0x60
  }

  hspi->State = HAL_SPI_STATE_ABORT;
 800bd2e:	687b      	ldr	r3, [r7, #4]
 800bd30:	2207      	movs	r2, #7
 800bd32:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
}
 800bd36:	bf00      	nop
 800bd38:	3710      	adds	r7, #16
 800bd3a:	46bd      	mov	sp, r7
 800bd3c:	bd80      	pop	{r7, pc}
 800bd3e:	bf00      	nop
 800bd40:	20000000 	.word	0x20000000
 800bd44:	057619f1 	.word	0x057619f1

0800bd48 <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b086      	sub	sp, #24
 800bd4c:	af02      	add	r7, sp, #8
 800bd4e:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800bd50:	4b4c      	ldr	r3, [pc, #304]	; (800be84 <SPI_AbortTx_ISR+0x13c>)
 800bd52:	681b      	ldr	r3, [r3, #0]
 800bd54:	4a4c      	ldr	r2, [pc, #304]	; (800be88 <SPI_AbortTx_ISR+0x140>)
 800bd56:	fba2 2303 	umull	r2, r3, r2, r3
 800bd5a:	0a5b      	lsrs	r3, r3, #9
 800bd5c:	2264      	movs	r2, #100	; 0x64
 800bd5e:	fb02 f303 	mul.w	r3, r2, r3
 800bd62:	60fb      	str	r3, [r7, #12]

  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 800bd64:	687b      	ldr	r3, [r7, #4]
 800bd66:	681b      	ldr	r3, [r3, #0]
 800bd68:	685a      	ldr	r2, [r3, #4]
 800bd6a:	687b      	ldr	r3, [r7, #4]
 800bd6c:	681b      	ldr	r3, [r3, #0]
 800bd6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800bd72:	605a      	str	r2, [r3, #4]

  /* Check TXEIE is disabled */
  do
  {
    if (count == 0U)
 800bd74:	68fb      	ldr	r3, [r7, #12]
 800bd76:	2b00      	cmp	r3, #0
 800bd78:	d106      	bne.n	800bd88 <SPI_AbortTx_ISR+0x40>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800bd7a:	687b      	ldr	r3, [r7, #4]
 800bd7c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bd7e:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800bd82:	687b      	ldr	r3, [r7, #4]
 800bd84:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 800bd86:	e009      	b.n	800bd9c <SPI_AbortTx_ISR+0x54>
    }
    count--;
 800bd88:	68fb      	ldr	r3, [r7, #12]
 800bd8a:	3b01      	subs	r3, #1
 800bd8c:	60fb      	str	r3, [r7, #12]
  } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE));
 800bd8e:	687b      	ldr	r3, [r7, #4]
 800bd90:	681b      	ldr	r3, [r3, #0]
 800bd92:	685b      	ldr	r3, [r3, #4]
 800bd94:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800bd98:	2b80      	cmp	r3, #128	; 0x80
 800bd9a:	d0eb      	beq.n	800bd74 <SPI_AbortTx_ISR+0x2c>

  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800bd9c:	f7f7 fb4e 	bl	800343c <HAL_GetTick>
 800bda0:	4603      	mov	r3, r0
 800bda2:	461a      	mov	r2, r3
 800bda4:	2164      	movs	r1, #100	; 0x64
 800bda6:	6878      	ldr	r0, [r7, #4]
 800bda8:	f7ff fe52 	bl	800ba50 <SPI_EndRxTxTransaction>
 800bdac:	4603      	mov	r3, r0
 800bdae:	2b00      	cmp	r3, #0
 800bdb0:	d002      	beq.n	800bdb8 <SPI_AbortTx_ISR+0x70>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800bdb2:	687b      	ldr	r3, [r7, #4]
 800bdb4:	2240      	movs	r2, #64	; 0x40
 800bdb6:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 800bdb8:	687b      	ldr	r3, [r7, #4]
 800bdba:	681b      	ldr	r3, [r3, #0]
 800bdbc:	681a      	ldr	r2, [r3, #0]
 800bdbe:	687b      	ldr	r3, [r7, #4]
 800bdc0:	681b      	ldr	r3, [r3, #0]
 800bdc2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800bdc6:	601a      	str	r2, [r3, #0]

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800bdc8:	f7f7 fb38 	bl	800343c <HAL_GetTick>
 800bdcc:	4603      	mov	r3, r0
 800bdce:	9300      	str	r3, [sp, #0]
 800bdd0:	2364      	movs	r3, #100	; 0x64
 800bdd2:	2200      	movs	r2, #0
 800bdd4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800bdd8:	6878      	ldr	r0, [r7, #4]
 800bdda:	f7ff fd27 	bl	800b82c <SPI_WaitFifoStateUntilTimeout>
 800bdde:	4603      	mov	r3, r0
 800bde0:	2b00      	cmp	r3, #0
 800bde2:	d002      	beq.n	800bdea <SPI_AbortTx_ISR+0xa2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800bde4:	687b      	ldr	r3, [r7, #4]
 800bde6:	2240      	movs	r2, #64	; 0x40
 800bde8:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Check case of Full-Duplex Mode and disable directly RXNEIE interrupt */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 800bdea:	687b      	ldr	r3, [r7, #4]
 800bdec:	681b      	ldr	r3, [r3, #0]
 800bdee:	685b      	ldr	r3, [r3, #4]
 800bdf0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800bdf4:	2b40      	cmp	r3, #64	; 0x40
 800bdf6:	d13c      	bne.n	800be72 <SPI_AbortTx_ISR+0x12a>
  {
    /* Disable RXNEIE interrupt */
    CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXNEIE));
 800bdf8:	687b      	ldr	r3, [r7, #4]
 800bdfa:	681b      	ldr	r3, [r3, #0]
 800bdfc:	685a      	ldr	r2, [r3, #4]
 800bdfe:	687b      	ldr	r3, [r7, #4]
 800be00:	681b      	ldr	r3, [r3, #0]
 800be02:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800be06:	605a      	str	r2, [r3, #4]

    /* Check RXNEIE is disabled */
    do
    {
      if (count == 0U)
 800be08:	68fb      	ldr	r3, [r7, #12]
 800be0a:	2b00      	cmp	r3, #0
 800be0c:	d106      	bne.n	800be1c <SPI_AbortTx_ISR+0xd4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800be0e:	687b      	ldr	r3, [r7, #4]
 800be10:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800be12:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800be16:	687b      	ldr	r3, [r7, #4]
 800be18:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800be1a:	e009      	b.n	800be30 <SPI_AbortTx_ISR+0xe8>
      }
      count--;
 800be1c:	68fb      	ldr	r3, [r7, #12]
 800be1e:	3b01      	subs	r3, #1
 800be20:	60fb      	str	r3, [r7, #12]
    } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
 800be22:	687b      	ldr	r3, [r7, #4]
 800be24:	681b      	ldr	r3, [r3, #0]
 800be26:	685b      	ldr	r3, [r3, #4]
 800be28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800be2c:	2b40      	cmp	r3, #64	; 0x40
 800be2e:	d0eb      	beq.n	800be08 <SPI_AbortTx_ISR+0xc0>

    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800be30:	f7f7 fb04 	bl	800343c <HAL_GetTick>
 800be34:	4603      	mov	r3, r0
 800be36:	9300      	str	r3, [sp, #0]
 800be38:	2364      	movs	r3, #100	; 0x64
 800be3a:	2200      	movs	r2, #0
 800be3c:	2180      	movs	r1, #128	; 0x80
 800be3e:	6878      	ldr	r0, [r7, #4]
 800be40:	f7ff fc6c 	bl	800b71c <SPI_WaitFlagStateUntilTimeout>
 800be44:	4603      	mov	r3, r0
 800be46:	2b00      	cmp	r3, #0
 800be48:	d002      	beq.n	800be50 <SPI_AbortTx_ISR+0x108>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800be4a:	687b      	ldr	r3, [r7, #4]
 800be4c:	2240      	movs	r2, #64	; 0x40
 800be4e:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800be50:	f7f7 faf4 	bl	800343c <HAL_GetTick>
 800be54:	4603      	mov	r3, r0
 800be56:	9300      	str	r3, [sp, #0]
 800be58:	2364      	movs	r3, #100	; 0x64
 800be5a:	2200      	movs	r2, #0
 800be5c:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800be60:	6878      	ldr	r0, [r7, #4]
 800be62:	f7ff fce3 	bl	800b82c <SPI_WaitFifoStateUntilTimeout>
 800be66:	4603      	mov	r3, r0
 800be68:	2b00      	cmp	r3, #0
 800be6a:	d002      	beq.n	800be72 <SPI_AbortTx_ISR+0x12a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800be6c:	687b      	ldr	r3, [r7, #4]
 800be6e:	2240      	movs	r2, #64	; 0x40
 800be70:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }
  hspi->State = HAL_SPI_STATE_ABORT;
 800be72:	687b      	ldr	r3, [r7, #4]
 800be74:	2207      	movs	r2, #7
 800be76:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
}
 800be7a:	bf00      	nop
 800be7c:	3710      	adds	r7, #16
 800be7e:	46bd      	mov	sp, r7
 800be80:	bd80      	pop	{r7, pc}
 800be82:	bf00      	nop
 800be84:	20000000 	.word	0x20000000
 800be88:	057619f1 	.word	0x057619f1

0800be8c <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800be8c:	b580      	push	{r7, lr}
 800be8e:	b082      	sub	sp, #8
 800be90:	af00      	add	r7, sp, #0
 800be92:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800be94:	687b      	ldr	r3, [r7, #4]
 800be96:	2b00      	cmp	r3, #0
 800be98:	d101      	bne.n	800be9e <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800be9a:	2301      	movs	r3, #1
 800be9c:	e049      	b.n	800bf32 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800be9e:	687b      	ldr	r3, [r7, #4]
 800bea0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bea4:	b2db      	uxtb	r3, r3
 800bea6:	2b00      	cmp	r3, #0
 800bea8:	d106      	bne.n	800beb8 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800beaa:	687b      	ldr	r3, [r7, #4]
 800beac:	2200      	movs	r2, #0
 800beae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800beb2:	6878      	ldr	r0, [r7, #4]
 800beb4:	f000 f841 	bl	800bf3a <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800beb8:	687b      	ldr	r3, [r7, #4]
 800beba:	2202      	movs	r2, #2
 800bebc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800bec0:	687b      	ldr	r3, [r7, #4]
 800bec2:	681a      	ldr	r2, [r3, #0]
 800bec4:	687b      	ldr	r3, [r7, #4]
 800bec6:	3304      	adds	r3, #4
 800bec8:	4619      	mov	r1, r3
 800beca:	4610      	mov	r0, r2
 800becc:	f000 f9e8 	bl	800c2a0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800bed0:	687b      	ldr	r3, [r7, #4]
 800bed2:	2201      	movs	r2, #1
 800bed4:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bed8:	687b      	ldr	r3, [r7, #4]
 800beda:	2201      	movs	r2, #1
 800bedc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800bee0:	687b      	ldr	r3, [r7, #4]
 800bee2:	2201      	movs	r2, #1
 800bee4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800bee8:	687b      	ldr	r3, [r7, #4]
 800beea:	2201      	movs	r2, #1
 800beec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800bef0:	687b      	ldr	r3, [r7, #4]
 800bef2:	2201      	movs	r2, #1
 800bef4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800bef8:	687b      	ldr	r3, [r7, #4]
 800befa:	2201      	movs	r2, #1
 800befc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800bf00:	687b      	ldr	r3, [r7, #4]
 800bf02:	2201      	movs	r2, #1
 800bf04:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800bf08:	687b      	ldr	r3, [r7, #4]
 800bf0a:	2201      	movs	r2, #1
 800bf0c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800bf10:	687b      	ldr	r3, [r7, #4]
 800bf12:	2201      	movs	r2, #1
 800bf14:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800bf18:	687b      	ldr	r3, [r7, #4]
 800bf1a:	2201      	movs	r2, #1
 800bf1c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800bf20:	687b      	ldr	r3, [r7, #4]
 800bf22:	2201      	movs	r2, #1
 800bf24:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	2201      	movs	r2, #1
 800bf2c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800bf30:	2300      	movs	r3, #0
}
 800bf32:	4618      	mov	r0, r3
 800bf34:	3708      	adds	r7, #8
 800bf36:	46bd      	mov	sp, r7
 800bf38:	bd80      	pop	{r7, pc}

0800bf3a <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800bf3a:	b480      	push	{r7}
 800bf3c:	b083      	sub	sp, #12
 800bf3e:	af00      	add	r7, sp, #0
 800bf40:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800bf42:	bf00      	nop
 800bf44:	370c      	adds	r7, #12
 800bf46:	46bd      	mov	sp, r7
 800bf48:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bf4c:	4770      	bx	lr
	...

0800bf50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800bf50:	b480      	push	{r7}
 800bf52:	b085      	sub	sp, #20
 800bf54:	af00      	add	r7, sp, #0
 800bf56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800bf5e:	b2db      	uxtb	r3, r3
 800bf60:	2b01      	cmp	r3, #1
 800bf62:	d001      	beq.n	800bf68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800bf64:	2301      	movs	r3, #1
 800bf66:	e054      	b.n	800c012 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800bf68:	687b      	ldr	r3, [r7, #4]
 800bf6a:	2202      	movs	r2, #2
 800bf6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800bf70:	687b      	ldr	r3, [r7, #4]
 800bf72:	681b      	ldr	r3, [r3, #0]
 800bf74:	68da      	ldr	r2, [r3, #12]
 800bf76:	687b      	ldr	r3, [r7, #4]
 800bf78:	681b      	ldr	r3, [r3, #0]
 800bf7a:	f042 0201 	orr.w	r2, r2, #1
 800bf7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800bf80:	687b      	ldr	r3, [r7, #4]
 800bf82:	681b      	ldr	r3, [r3, #0]
 800bf84:	4a26      	ldr	r2, [pc, #152]	; (800c020 <HAL_TIM_Base_Start_IT+0xd0>)
 800bf86:	4293      	cmp	r3, r2
 800bf88:	d022      	beq.n	800bfd0 <HAL_TIM_Base_Start_IT+0x80>
 800bf8a:	687b      	ldr	r3, [r7, #4]
 800bf8c:	681b      	ldr	r3, [r3, #0]
 800bf8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bf92:	d01d      	beq.n	800bfd0 <HAL_TIM_Base_Start_IT+0x80>
 800bf94:	687b      	ldr	r3, [r7, #4]
 800bf96:	681b      	ldr	r3, [r3, #0]
 800bf98:	4a22      	ldr	r2, [pc, #136]	; (800c024 <HAL_TIM_Base_Start_IT+0xd4>)
 800bf9a:	4293      	cmp	r3, r2
 800bf9c:	d018      	beq.n	800bfd0 <HAL_TIM_Base_Start_IT+0x80>
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	4a21      	ldr	r2, [pc, #132]	; (800c028 <HAL_TIM_Base_Start_IT+0xd8>)
 800bfa4:	4293      	cmp	r3, r2
 800bfa6:	d013      	beq.n	800bfd0 <HAL_TIM_Base_Start_IT+0x80>
 800bfa8:	687b      	ldr	r3, [r7, #4]
 800bfaa:	681b      	ldr	r3, [r3, #0]
 800bfac:	4a1f      	ldr	r2, [pc, #124]	; (800c02c <HAL_TIM_Base_Start_IT+0xdc>)
 800bfae:	4293      	cmp	r3, r2
 800bfb0:	d00e      	beq.n	800bfd0 <HAL_TIM_Base_Start_IT+0x80>
 800bfb2:	687b      	ldr	r3, [r7, #4]
 800bfb4:	681b      	ldr	r3, [r3, #0]
 800bfb6:	4a1e      	ldr	r2, [pc, #120]	; (800c030 <HAL_TIM_Base_Start_IT+0xe0>)
 800bfb8:	4293      	cmp	r3, r2
 800bfba:	d009      	beq.n	800bfd0 <HAL_TIM_Base_Start_IT+0x80>
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	4a1c      	ldr	r2, [pc, #112]	; (800c034 <HAL_TIM_Base_Start_IT+0xe4>)
 800bfc2:	4293      	cmp	r3, r2
 800bfc4:	d004      	beq.n	800bfd0 <HAL_TIM_Base_Start_IT+0x80>
 800bfc6:	687b      	ldr	r3, [r7, #4]
 800bfc8:	681b      	ldr	r3, [r3, #0]
 800bfca:	4a1b      	ldr	r2, [pc, #108]	; (800c038 <HAL_TIM_Base_Start_IT+0xe8>)
 800bfcc:	4293      	cmp	r3, r2
 800bfce:	d115      	bne.n	800bffc <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	689a      	ldr	r2, [r3, #8]
 800bfd6:	4b19      	ldr	r3, [pc, #100]	; (800c03c <HAL_TIM_Base_Start_IT+0xec>)
 800bfd8:	4013      	ands	r3, r2
 800bfda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bfdc:	68fb      	ldr	r3, [r7, #12]
 800bfde:	2b06      	cmp	r3, #6
 800bfe0:	d015      	beq.n	800c00e <HAL_TIM_Base_Start_IT+0xbe>
 800bfe2:	68fb      	ldr	r3, [r7, #12]
 800bfe4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800bfe8:	d011      	beq.n	800c00e <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	681b      	ldr	r3, [r3, #0]
 800bfee:	681a      	ldr	r2, [r3, #0]
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	681b      	ldr	r3, [r3, #0]
 800bff4:	f042 0201 	orr.w	r2, r2, #1
 800bff8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800bffa:	e008      	b.n	800c00e <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800bffc:	687b      	ldr	r3, [r7, #4]
 800bffe:	681b      	ldr	r3, [r3, #0]
 800c000:	681a      	ldr	r2, [r3, #0]
 800c002:	687b      	ldr	r3, [r7, #4]
 800c004:	681b      	ldr	r3, [r3, #0]
 800c006:	f042 0201 	orr.w	r2, r2, #1
 800c00a:	601a      	str	r2, [r3, #0]
 800c00c:	e000      	b.n	800c010 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800c00e:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800c010:	2300      	movs	r3, #0
}
 800c012:	4618      	mov	r0, r3
 800c014:	3714      	adds	r7, #20
 800c016:	46bd      	mov	sp, r7
 800c018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c01c:	4770      	bx	lr
 800c01e:	bf00      	nop
 800c020:	40010000 	.word	0x40010000
 800c024:	40000400 	.word	0x40000400
 800c028:	40000800 	.word	0x40000800
 800c02c:	40000c00 	.word	0x40000c00
 800c030:	40010400 	.word	0x40010400
 800c034:	40014000 	.word	0x40014000
 800c038:	40001800 	.word	0x40001800
 800c03c:	00010007 	.word	0x00010007

0800c040 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800c040:	b580      	push	{r7, lr}
 800c042:	b084      	sub	sp, #16
 800c044:	af00      	add	r7, sp, #0
 800c046:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800c048:	687b      	ldr	r3, [r7, #4]
 800c04a:	681b      	ldr	r3, [r3, #0]
 800c04c:	68db      	ldr	r3, [r3, #12]
 800c04e:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800c050:	687b      	ldr	r3, [r7, #4]
 800c052:	681b      	ldr	r3, [r3, #0]
 800c054:	691b      	ldr	r3, [r3, #16]
 800c056:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800c058:	68bb      	ldr	r3, [r7, #8]
 800c05a:	f003 0302 	and.w	r3, r3, #2
 800c05e:	2b00      	cmp	r3, #0
 800c060:	d020      	beq.n	800c0a4 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800c062:	68fb      	ldr	r3, [r7, #12]
 800c064:	f003 0302 	and.w	r3, r3, #2
 800c068:	2b00      	cmp	r3, #0
 800c06a:	d01b      	beq.n	800c0a4 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	681b      	ldr	r3, [r3, #0]
 800c070:	f06f 0202 	mvn.w	r2, #2
 800c074:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800c076:	687b      	ldr	r3, [r7, #4]
 800c078:	2201      	movs	r2, #1
 800c07a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	699b      	ldr	r3, [r3, #24]
 800c082:	f003 0303 	and.w	r3, r3, #3
 800c086:	2b00      	cmp	r3, #0
 800c088:	d003      	beq.n	800c092 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800c08a:	6878      	ldr	r0, [r7, #4]
 800c08c:	f000 f8e9 	bl	800c262 <HAL_TIM_IC_CaptureCallback>
 800c090:	e005      	b.n	800c09e <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800c092:	6878      	ldr	r0, [r7, #4]
 800c094:	f000 f8db 	bl	800c24e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c098:	6878      	ldr	r0, [r7, #4]
 800c09a:	f000 f8ec 	bl	800c276 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	2200      	movs	r2, #0
 800c0a2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800c0a4:	68bb      	ldr	r3, [r7, #8]
 800c0a6:	f003 0304 	and.w	r3, r3, #4
 800c0aa:	2b00      	cmp	r3, #0
 800c0ac:	d020      	beq.n	800c0f0 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800c0ae:	68fb      	ldr	r3, [r7, #12]
 800c0b0:	f003 0304 	and.w	r3, r3, #4
 800c0b4:	2b00      	cmp	r3, #0
 800c0b6:	d01b      	beq.n	800c0f0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800c0b8:	687b      	ldr	r3, [r7, #4]
 800c0ba:	681b      	ldr	r3, [r3, #0]
 800c0bc:	f06f 0204 	mvn.w	r2, #4
 800c0c0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800c0c2:	687b      	ldr	r3, [r7, #4]
 800c0c4:	2202      	movs	r2, #2
 800c0c6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800c0c8:	687b      	ldr	r3, [r7, #4]
 800c0ca:	681b      	ldr	r3, [r3, #0]
 800c0cc:	699b      	ldr	r3, [r3, #24]
 800c0ce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c0d2:	2b00      	cmp	r3, #0
 800c0d4:	d003      	beq.n	800c0de <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c0d6:	6878      	ldr	r0, [r7, #4]
 800c0d8:	f000 f8c3 	bl	800c262 <HAL_TIM_IC_CaptureCallback>
 800c0dc:	e005      	b.n	800c0ea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c0de:	6878      	ldr	r0, [r7, #4]
 800c0e0:	f000 f8b5 	bl	800c24e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c0e4:	6878      	ldr	r0, [r7, #4]
 800c0e6:	f000 f8c6 	bl	800c276 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c0ea:	687b      	ldr	r3, [r7, #4]
 800c0ec:	2200      	movs	r2, #0
 800c0ee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800c0f0:	68bb      	ldr	r3, [r7, #8]
 800c0f2:	f003 0308 	and.w	r3, r3, #8
 800c0f6:	2b00      	cmp	r3, #0
 800c0f8:	d020      	beq.n	800c13c <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800c0fa:	68fb      	ldr	r3, [r7, #12]
 800c0fc:	f003 0308 	and.w	r3, r3, #8
 800c100:	2b00      	cmp	r3, #0
 800c102:	d01b      	beq.n	800c13c <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800c104:	687b      	ldr	r3, [r7, #4]
 800c106:	681b      	ldr	r3, [r3, #0]
 800c108:	f06f 0208 	mvn.w	r2, #8
 800c10c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	2204      	movs	r2, #4
 800c112:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800c114:	687b      	ldr	r3, [r7, #4]
 800c116:	681b      	ldr	r3, [r3, #0]
 800c118:	69db      	ldr	r3, [r3, #28]
 800c11a:	f003 0303 	and.w	r3, r3, #3
 800c11e:	2b00      	cmp	r3, #0
 800c120:	d003      	beq.n	800c12a <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c122:	6878      	ldr	r0, [r7, #4]
 800c124:	f000 f89d 	bl	800c262 <HAL_TIM_IC_CaptureCallback>
 800c128:	e005      	b.n	800c136 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c12a:	6878      	ldr	r0, [r7, #4]
 800c12c:	f000 f88f 	bl	800c24e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c130:	6878      	ldr	r0, [r7, #4]
 800c132:	f000 f8a0 	bl	800c276 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c136:	687b      	ldr	r3, [r7, #4]
 800c138:	2200      	movs	r2, #0
 800c13a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800c13c:	68bb      	ldr	r3, [r7, #8]
 800c13e:	f003 0310 	and.w	r3, r3, #16
 800c142:	2b00      	cmp	r3, #0
 800c144:	d020      	beq.n	800c188 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800c146:	68fb      	ldr	r3, [r7, #12]
 800c148:	f003 0310 	and.w	r3, r3, #16
 800c14c:	2b00      	cmp	r3, #0
 800c14e:	d01b      	beq.n	800c188 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800c150:	687b      	ldr	r3, [r7, #4]
 800c152:	681b      	ldr	r3, [r3, #0]
 800c154:	f06f 0210 	mvn.w	r2, #16
 800c158:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	2208      	movs	r2, #8
 800c15e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800c160:	687b      	ldr	r3, [r7, #4]
 800c162:	681b      	ldr	r3, [r3, #0]
 800c164:	69db      	ldr	r3, [r3, #28]
 800c166:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	d003      	beq.n	800c176 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800c16e:	6878      	ldr	r0, [r7, #4]
 800c170:	f000 f877 	bl	800c262 <HAL_TIM_IC_CaptureCallback>
 800c174:	e005      	b.n	800c182 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800c176:	6878      	ldr	r0, [r7, #4]
 800c178:	f000 f869 	bl	800c24e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800c17c:	6878      	ldr	r0, [r7, #4]
 800c17e:	f000 f87a 	bl	800c276 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800c182:	687b      	ldr	r3, [r7, #4]
 800c184:	2200      	movs	r2, #0
 800c186:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800c188:	68bb      	ldr	r3, [r7, #8]
 800c18a:	f003 0301 	and.w	r3, r3, #1
 800c18e:	2b00      	cmp	r3, #0
 800c190:	d00c      	beq.n	800c1ac <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800c192:	68fb      	ldr	r3, [r7, #12]
 800c194:	f003 0301 	and.w	r3, r3, #1
 800c198:	2b00      	cmp	r3, #0
 800c19a:	d007      	beq.n	800c1ac <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800c19c:	687b      	ldr	r3, [r7, #4]
 800c19e:	681b      	ldr	r3, [r3, #0]
 800c1a0:	f06f 0201 	mvn.w	r2, #1
 800c1a4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800c1a6:	6878      	ldr	r0, [r7, #4]
 800c1a8:	f7f5 fa5a 	bl	8001660 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c1ac:	68bb      	ldr	r3, [r7, #8]
 800c1ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1b2:	2b00      	cmp	r3, #0
 800c1b4:	d104      	bne.n	800c1c0 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800c1b6:	68bb      	ldr	r3, [r7, #8]
 800c1b8:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800c1bc:	2b00      	cmp	r3, #0
 800c1be:	d00c      	beq.n	800c1da <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c1c0:	68fb      	ldr	r3, [r7, #12]
 800c1c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1c6:	2b00      	cmp	r3, #0
 800c1c8:	d007      	beq.n	800c1da <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800c1ca:	687b      	ldr	r3, [r7, #4]
 800c1cc:	681b      	ldr	r3, [r3, #0]
 800c1ce:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800c1d2:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800c1d4:	6878      	ldr	r0, [r7, #4]
 800c1d6:	f000 f919 	bl	800c40c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800c1da:	68bb      	ldr	r3, [r7, #8]
 800c1dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c1e0:	2b00      	cmp	r3, #0
 800c1e2:	d00c      	beq.n	800c1fe <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800c1e4:	68fb      	ldr	r3, [r7, #12]
 800c1e6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c1ea:	2b00      	cmp	r3, #0
 800c1ec:	d007      	beq.n	800c1fe <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800c1ee:	687b      	ldr	r3, [r7, #4]
 800c1f0:	681b      	ldr	r3, [r3, #0]
 800c1f2:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800c1f6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800c1f8:	6878      	ldr	r0, [r7, #4]
 800c1fa:	f000 f911 	bl	800c420 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800c1fe:	68bb      	ldr	r3, [r7, #8]
 800c200:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c204:	2b00      	cmp	r3, #0
 800c206:	d00c      	beq.n	800c222 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800c208:	68fb      	ldr	r3, [r7, #12]
 800c20a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c20e:	2b00      	cmp	r3, #0
 800c210:	d007      	beq.n	800c222 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	681b      	ldr	r3, [r3, #0]
 800c216:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800c21a:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800c21c:	6878      	ldr	r0, [r7, #4]
 800c21e:	f000 f834 	bl	800c28a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800c222:	68bb      	ldr	r3, [r7, #8]
 800c224:	f003 0320 	and.w	r3, r3, #32
 800c228:	2b00      	cmp	r3, #0
 800c22a:	d00c      	beq.n	800c246 <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800c22c:	68fb      	ldr	r3, [r7, #12]
 800c22e:	f003 0320 	and.w	r3, r3, #32
 800c232:	2b00      	cmp	r3, #0
 800c234:	d007      	beq.n	800c246 <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	681b      	ldr	r3, [r3, #0]
 800c23a:	f06f 0220 	mvn.w	r2, #32
 800c23e:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800c240:	6878      	ldr	r0, [r7, #4]
 800c242:	f000 f8d9 	bl	800c3f8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800c246:	bf00      	nop
 800c248:	3710      	adds	r7, #16
 800c24a:	46bd      	mov	sp, r7
 800c24c:	bd80      	pop	{r7, pc}

0800c24e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800c24e:	b480      	push	{r7}
 800c250:	b083      	sub	sp, #12
 800c252:	af00      	add	r7, sp, #0
 800c254:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800c256:	bf00      	nop
 800c258:	370c      	adds	r7, #12
 800c25a:	46bd      	mov	sp, r7
 800c25c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c260:	4770      	bx	lr

0800c262 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800c262:	b480      	push	{r7}
 800c264:	b083      	sub	sp, #12
 800c266:	af00      	add	r7, sp, #0
 800c268:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800c26a:	bf00      	nop
 800c26c:	370c      	adds	r7, #12
 800c26e:	46bd      	mov	sp, r7
 800c270:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c274:	4770      	bx	lr

0800c276 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800c276:	b480      	push	{r7}
 800c278:	b083      	sub	sp, #12
 800c27a:	af00      	add	r7, sp, #0
 800c27c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800c27e:	bf00      	nop
 800c280:	370c      	adds	r7, #12
 800c282:	46bd      	mov	sp, r7
 800c284:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c288:	4770      	bx	lr

0800c28a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800c28a:	b480      	push	{r7}
 800c28c:	b083      	sub	sp, #12
 800c28e:	af00      	add	r7, sp, #0
 800c290:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800c292:	bf00      	nop
 800c294:	370c      	adds	r7, #12
 800c296:	46bd      	mov	sp, r7
 800c298:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c29c:	4770      	bx	lr
	...

0800c2a0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800c2a0:	b480      	push	{r7}
 800c2a2:	b085      	sub	sp, #20
 800c2a4:	af00      	add	r7, sp, #0
 800c2a6:	6078      	str	r0, [r7, #4]
 800c2a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	681b      	ldr	r3, [r3, #0]
 800c2ae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800c2b0:	687b      	ldr	r3, [r7, #4]
 800c2b2:	4a46      	ldr	r2, [pc, #280]	; (800c3cc <TIM_Base_SetConfig+0x12c>)
 800c2b4:	4293      	cmp	r3, r2
 800c2b6:	d013      	beq.n	800c2e0 <TIM_Base_SetConfig+0x40>
 800c2b8:	687b      	ldr	r3, [r7, #4]
 800c2ba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c2be:	d00f      	beq.n	800c2e0 <TIM_Base_SetConfig+0x40>
 800c2c0:	687b      	ldr	r3, [r7, #4]
 800c2c2:	4a43      	ldr	r2, [pc, #268]	; (800c3d0 <TIM_Base_SetConfig+0x130>)
 800c2c4:	4293      	cmp	r3, r2
 800c2c6:	d00b      	beq.n	800c2e0 <TIM_Base_SetConfig+0x40>
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	4a42      	ldr	r2, [pc, #264]	; (800c3d4 <TIM_Base_SetConfig+0x134>)
 800c2cc:	4293      	cmp	r3, r2
 800c2ce:	d007      	beq.n	800c2e0 <TIM_Base_SetConfig+0x40>
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	4a41      	ldr	r2, [pc, #260]	; (800c3d8 <TIM_Base_SetConfig+0x138>)
 800c2d4:	4293      	cmp	r3, r2
 800c2d6:	d003      	beq.n	800c2e0 <TIM_Base_SetConfig+0x40>
 800c2d8:	687b      	ldr	r3, [r7, #4]
 800c2da:	4a40      	ldr	r2, [pc, #256]	; (800c3dc <TIM_Base_SetConfig+0x13c>)
 800c2dc:	4293      	cmp	r3, r2
 800c2de:	d108      	bne.n	800c2f2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800c2e0:	68fb      	ldr	r3, [r7, #12]
 800c2e2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800c2e6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800c2e8:	683b      	ldr	r3, [r7, #0]
 800c2ea:	685b      	ldr	r3, [r3, #4]
 800c2ec:	68fa      	ldr	r2, [r7, #12]
 800c2ee:	4313      	orrs	r3, r2
 800c2f0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800c2f2:	687b      	ldr	r3, [r7, #4]
 800c2f4:	4a35      	ldr	r2, [pc, #212]	; (800c3cc <TIM_Base_SetConfig+0x12c>)
 800c2f6:	4293      	cmp	r3, r2
 800c2f8:	d02b      	beq.n	800c352 <TIM_Base_SetConfig+0xb2>
 800c2fa:	687b      	ldr	r3, [r7, #4]
 800c2fc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800c300:	d027      	beq.n	800c352 <TIM_Base_SetConfig+0xb2>
 800c302:	687b      	ldr	r3, [r7, #4]
 800c304:	4a32      	ldr	r2, [pc, #200]	; (800c3d0 <TIM_Base_SetConfig+0x130>)
 800c306:	4293      	cmp	r3, r2
 800c308:	d023      	beq.n	800c352 <TIM_Base_SetConfig+0xb2>
 800c30a:	687b      	ldr	r3, [r7, #4]
 800c30c:	4a31      	ldr	r2, [pc, #196]	; (800c3d4 <TIM_Base_SetConfig+0x134>)
 800c30e:	4293      	cmp	r3, r2
 800c310:	d01f      	beq.n	800c352 <TIM_Base_SetConfig+0xb2>
 800c312:	687b      	ldr	r3, [r7, #4]
 800c314:	4a30      	ldr	r2, [pc, #192]	; (800c3d8 <TIM_Base_SetConfig+0x138>)
 800c316:	4293      	cmp	r3, r2
 800c318:	d01b      	beq.n	800c352 <TIM_Base_SetConfig+0xb2>
 800c31a:	687b      	ldr	r3, [r7, #4]
 800c31c:	4a2f      	ldr	r2, [pc, #188]	; (800c3dc <TIM_Base_SetConfig+0x13c>)
 800c31e:	4293      	cmp	r3, r2
 800c320:	d017      	beq.n	800c352 <TIM_Base_SetConfig+0xb2>
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	4a2e      	ldr	r2, [pc, #184]	; (800c3e0 <TIM_Base_SetConfig+0x140>)
 800c326:	4293      	cmp	r3, r2
 800c328:	d013      	beq.n	800c352 <TIM_Base_SetConfig+0xb2>
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	4a2d      	ldr	r2, [pc, #180]	; (800c3e4 <TIM_Base_SetConfig+0x144>)
 800c32e:	4293      	cmp	r3, r2
 800c330:	d00f      	beq.n	800c352 <TIM_Base_SetConfig+0xb2>
 800c332:	687b      	ldr	r3, [r7, #4]
 800c334:	4a2c      	ldr	r2, [pc, #176]	; (800c3e8 <TIM_Base_SetConfig+0x148>)
 800c336:	4293      	cmp	r3, r2
 800c338:	d00b      	beq.n	800c352 <TIM_Base_SetConfig+0xb2>
 800c33a:	687b      	ldr	r3, [r7, #4]
 800c33c:	4a2b      	ldr	r2, [pc, #172]	; (800c3ec <TIM_Base_SetConfig+0x14c>)
 800c33e:	4293      	cmp	r3, r2
 800c340:	d007      	beq.n	800c352 <TIM_Base_SetConfig+0xb2>
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	4a2a      	ldr	r2, [pc, #168]	; (800c3f0 <TIM_Base_SetConfig+0x150>)
 800c346:	4293      	cmp	r3, r2
 800c348:	d003      	beq.n	800c352 <TIM_Base_SetConfig+0xb2>
 800c34a:	687b      	ldr	r3, [r7, #4]
 800c34c:	4a29      	ldr	r2, [pc, #164]	; (800c3f4 <TIM_Base_SetConfig+0x154>)
 800c34e:	4293      	cmp	r3, r2
 800c350:	d108      	bne.n	800c364 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800c352:	68fb      	ldr	r3, [r7, #12]
 800c354:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800c358:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800c35a:	683b      	ldr	r3, [r7, #0]
 800c35c:	68db      	ldr	r3, [r3, #12]
 800c35e:	68fa      	ldr	r2, [r7, #12]
 800c360:	4313      	orrs	r3, r2
 800c362:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800c364:	68fb      	ldr	r3, [r7, #12]
 800c366:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800c36a:	683b      	ldr	r3, [r7, #0]
 800c36c:	695b      	ldr	r3, [r3, #20]
 800c36e:	4313      	orrs	r3, r2
 800c370:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	68fa      	ldr	r2, [r7, #12]
 800c376:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800c378:	683b      	ldr	r3, [r7, #0]
 800c37a:	689a      	ldr	r2, [r3, #8]
 800c37c:	687b      	ldr	r3, [r7, #4]
 800c37e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800c380:	683b      	ldr	r3, [r7, #0]
 800c382:	681a      	ldr	r2, [r3, #0]
 800c384:	687b      	ldr	r3, [r7, #4]
 800c386:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800c388:	687b      	ldr	r3, [r7, #4]
 800c38a:	4a10      	ldr	r2, [pc, #64]	; (800c3cc <TIM_Base_SetConfig+0x12c>)
 800c38c:	4293      	cmp	r3, r2
 800c38e:	d003      	beq.n	800c398 <TIM_Base_SetConfig+0xf8>
 800c390:	687b      	ldr	r3, [r7, #4]
 800c392:	4a12      	ldr	r2, [pc, #72]	; (800c3dc <TIM_Base_SetConfig+0x13c>)
 800c394:	4293      	cmp	r3, r2
 800c396:	d103      	bne.n	800c3a0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800c398:	683b      	ldr	r3, [r7, #0]
 800c39a:	691a      	ldr	r2, [r3, #16]
 800c39c:	687b      	ldr	r3, [r7, #4]
 800c39e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800c3a0:	687b      	ldr	r3, [r7, #4]
 800c3a2:	2201      	movs	r2, #1
 800c3a4:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800c3a6:	687b      	ldr	r3, [r7, #4]
 800c3a8:	691b      	ldr	r3, [r3, #16]
 800c3aa:	f003 0301 	and.w	r3, r3, #1
 800c3ae:	2b01      	cmp	r3, #1
 800c3b0:	d105      	bne.n	800c3be <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800c3b2:	687b      	ldr	r3, [r7, #4]
 800c3b4:	691b      	ldr	r3, [r3, #16]
 800c3b6:	f023 0201 	bic.w	r2, r3, #1
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	611a      	str	r2, [r3, #16]
  }
}
 800c3be:	bf00      	nop
 800c3c0:	3714      	adds	r7, #20
 800c3c2:	46bd      	mov	sp, r7
 800c3c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c3c8:	4770      	bx	lr
 800c3ca:	bf00      	nop
 800c3cc:	40010000 	.word	0x40010000
 800c3d0:	40000400 	.word	0x40000400
 800c3d4:	40000800 	.word	0x40000800
 800c3d8:	40000c00 	.word	0x40000c00
 800c3dc:	40010400 	.word	0x40010400
 800c3e0:	40014000 	.word	0x40014000
 800c3e4:	40014400 	.word	0x40014400
 800c3e8:	40014800 	.word	0x40014800
 800c3ec:	40001800 	.word	0x40001800
 800c3f0:	40001c00 	.word	0x40001c00
 800c3f4:	40002000 	.word	0x40002000

0800c3f8 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800c3f8:	b480      	push	{r7}
 800c3fa:	b083      	sub	sp, #12
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800c400:	bf00      	nop
 800c402:	370c      	adds	r7, #12
 800c404:	46bd      	mov	sp, r7
 800c406:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c40a:	4770      	bx	lr

0800c40c <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800c40c:	b480      	push	{r7}
 800c40e:	b083      	sub	sp, #12
 800c410:	af00      	add	r7, sp, #0
 800c412:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800c414:	bf00      	nop
 800c416:	370c      	adds	r7, #12
 800c418:	46bd      	mov	sp, r7
 800c41a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c41e:	4770      	bx	lr

0800c420 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800c420:	b480      	push	{r7}
 800c422:	b083      	sub	sp, #12
 800c424:	af00      	add	r7, sp, #0
 800c426:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800c428:	bf00      	nop
 800c42a:	370c      	adds	r7, #12
 800c42c:	46bd      	mov	sp, r7
 800c42e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c432:	4770      	bx	lr

0800c434 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800c434:	b580      	push	{r7, lr}
 800c436:	b082      	sub	sp, #8
 800c438:	af00      	add	r7, sp, #0
 800c43a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800c43c:	687b      	ldr	r3, [r7, #4]
 800c43e:	2b00      	cmp	r3, #0
 800c440:	d101      	bne.n	800c446 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800c442:	2301      	movs	r3, #1
 800c444:	e040      	b.n	800c4c8 <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800c446:	687b      	ldr	r3, [r7, #4]
 800c448:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c44a:	2b00      	cmp	r3, #0
 800c44c:	d106      	bne.n	800c45c <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800c44e:	687b      	ldr	r3, [r7, #4]
 800c450:	2200      	movs	r2, #0
 800c452:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800c456:	6878      	ldr	r0, [r7, #4]
 800c458:	f7f6 f9b4 	bl	80027c4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800c45c:	687b      	ldr	r3, [r7, #4]
 800c45e:	2224      	movs	r2, #36	; 0x24
 800c460:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800c462:	687b      	ldr	r3, [r7, #4]
 800c464:	681b      	ldr	r3, [r3, #0]
 800c466:	681a      	ldr	r2, [r3, #0]
 800c468:	687b      	ldr	r3, [r7, #4]
 800c46a:	681b      	ldr	r3, [r3, #0]
 800c46c:	f022 0201 	bic.w	r2, r2, #1
 800c470:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800c472:	687b      	ldr	r3, [r7, #4]
 800c474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800c476:	2b00      	cmp	r3, #0
 800c478:	d002      	beq.n	800c480 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800c47a:	6878      	ldr	r0, [r7, #4]
 800c47c:	f001 f810 	bl	800d4a0 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800c480:	6878      	ldr	r0, [r7, #4]
 800c482:	f000 fda9 	bl	800cfd8 <UART_SetConfig>
 800c486:	4603      	mov	r3, r0
 800c488:	2b01      	cmp	r3, #1
 800c48a:	d101      	bne.n	800c490 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800c48c:	2301      	movs	r3, #1
 800c48e:	e01b      	b.n	800c4c8 <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800c490:	687b      	ldr	r3, [r7, #4]
 800c492:	681b      	ldr	r3, [r3, #0]
 800c494:	685a      	ldr	r2, [r3, #4]
 800c496:	687b      	ldr	r3, [r7, #4]
 800c498:	681b      	ldr	r3, [r3, #0]
 800c49a:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800c49e:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800c4a0:	687b      	ldr	r3, [r7, #4]
 800c4a2:	681b      	ldr	r3, [r3, #0]
 800c4a4:	689a      	ldr	r2, [r3, #8]
 800c4a6:	687b      	ldr	r3, [r7, #4]
 800c4a8:	681b      	ldr	r3, [r3, #0]
 800c4aa:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800c4ae:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800c4b0:	687b      	ldr	r3, [r7, #4]
 800c4b2:	681b      	ldr	r3, [r3, #0]
 800c4b4:	681a      	ldr	r2, [r3, #0]
 800c4b6:	687b      	ldr	r3, [r7, #4]
 800c4b8:	681b      	ldr	r3, [r3, #0]
 800c4ba:	f042 0201 	orr.w	r2, r2, #1
 800c4be:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800c4c0:	6878      	ldr	r0, [r7, #4]
 800c4c2:	f001 f88f 	bl	800d5e4 <UART_CheckIdleState>
 800c4c6:	4603      	mov	r3, r0
}
 800c4c8:	4618      	mov	r0, r3
 800c4ca:	3708      	adds	r7, #8
 800c4cc:	46bd      	mov	sp, r7
 800c4ce:	bd80      	pop	{r7, pc}

0800c4d0 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c4d0:	b480      	push	{r7}
 800c4d2:	b08b      	sub	sp, #44	; 0x2c
 800c4d4:	af00      	add	r7, sp, #0
 800c4d6:	60f8      	str	r0, [r7, #12]
 800c4d8:	60b9      	str	r1, [r7, #8]
 800c4da:	4613      	mov	r3, r2
 800c4dc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c4de:	68fb      	ldr	r3, [r7, #12]
 800c4e0:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c4e2:	2b20      	cmp	r3, #32
 800c4e4:	d147      	bne.n	800c576 <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800c4e6:	68bb      	ldr	r3, [r7, #8]
 800c4e8:	2b00      	cmp	r3, #0
 800c4ea:	d002      	beq.n	800c4f2 <HAL_UART_Transmit_IT+0x22>
 800c4ec:	88fb      	ldrh	r3, [r7, #6]
 800c4ee:	2b00      	cmp	r3, #0
 800c4f0:	d101      	bne.n	800c4f6 <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800c4f2:	2301      	movs	r3, #1
 800c4f4:	e040      	b.n	800c578 <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800c4f6:	68fb      	ldr	r3, [r7, #12]
 800c4f8:	68ba      	ldr	r2, [r7, #8]
 800c4fa:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800c4fc:	68fb      	ldr	r3, [r7, #12]
 800c4fe:	88fa      	ldrh	r2, [r7, #6]
 800c500:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800c504:	68fb      	ldr	r3, [r7, #12]
 800c506:	88fa      	ldrh	r2, [r7, #6]
 800c508:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800c50c:	68fb      	ldr	r3, [r7, #12]
 800c50e:	2200      	movs	r2, #0
 800c510:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c512:	68fb      	ldr	r3, [r7, #12]
 800c514:	2200      	movs	r2, #0
 800c516:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c51a:	68fb      	ldr	r3, [r7, #12]
 800c51c:	2221      	movs	r2, #33	; 0x21
 800c51e:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800c520:	68fb      	ldr	r3, [r7, #12]
 800c522:	689b      	ldr	r3, [r3, #8]
 800c524:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800c528:	d107      	bne.n	800c53a <HAL_UART_Transmit_IT+0x6a>
 800c52a:	68fb      	ldr	r3, [r7, #12]
 800c52c:	691b      	ldr	r3, [r3, #16]
 800c52e:	2b00      	cmp	r3, #0
 800c530:	d103      	bne.n	800c53a <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800c532:	68fb      	ldr	r3, [r7, #12]
 800c534:	4a13      	ldr	r2, [pc, #76]	; (800c584 <HAL_UART_Transmit_IT+0xb4>)
 800c536:	66da      	str	r2, [r3, #108]	; 0x6c
 800c538:	e002      	b.n	800c540 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800c53a:	68fb      	ldr	r3, [r7, #12]
 800c53c:	4a12      	ldr	r2, [pc, #72]	; (800c588 <HAL_UART_Transmit_IT+0xb8>)
 800c53e:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800c540:	68fb      	ldr	r3, [r7, #12]
 800c542:	681b      	ldr	r3, [r3, #0]
 800c544:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c546:	697b      	ldr	r3, [r7, #20]
 800c548:	e853 3f00 	ldrex	r3, [r3]
 800c54c:	613b      	str	r3, [r7, #16]
   return(result);
 800c54e:	693b      	ldr	r3, [r7, #16]
 800c550:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c554:	627b      	str	r3, [r7, #36]	; 0x24
 800c556:	68fb      	ldr	r3, [r7, #12]
 800c558:	681b      	ldr	r3, [r3, #0]
 800c55a:	461a      	mov	r2, r3
 800c55c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c55e:	623b      	str	r3, [r7, #32]
 800c560:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c562:	69f9      	ldr	r1, [r7, #28]
 800c564:	6a3a      	ldr	r2, [r7, #32]
 800c566:	e841 2300 	strex	r3, r2, [r1]
 800c56a:	61bb      	str	r3, [r7, #24]
   return(result);
 800c56c:	69bb      	ldr	r3, [r7, #24]
 800c56e:	2b00      	cmp	r3, #0
 800c570:	d1e6      	bne.n	800c540 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800c572:	2300      	movs	r3, #0
 800c574:	e000      	b.n	800c578 <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800c576:	2302      	movs	r3, #2
  }
}
 800c578:	4618      	mov	r0, r3
 800c57a:	372c      	adds	r7, #44	; 0x2c
 800c57c:	46bd      	mov	sp, r7
 800c57e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c582:	4770      	bx	lr
 800c584:	0800dfad 	.word	0x0800dfad
 800c588:	0800def7 	.word	0x0800def7

0800c58c <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b08a      	sub	sp, #40	; 0x28
 800c590:	af00      	add	r7, sp, #0
 800c592:	60f8      	str	r0, [r7, #12]
 800c594:	60b9      	str	r1, [r7, #8]
 800c596:	4613      	mov	r3, r2
 800c598:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c5a0:	2b20      	cmp	r3, #32
 800c5a2:	d132      	bne.n	800c60a <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c5a4:	68bb      	ldr	r3, [r7, #8]
 800c5a6:	2b00      	cmp	r3, #0
 800c5a8:	d002      	beq.n	800c5b0 <HAL_UART_Receive_IT+0x24>
 800c5aa:	88fb      	ldrh	r3, [r7, #6]
 800c5ac:	2b00      	cmp	r3, #0
 800c5ae:	d101      	bne.n	800c5b4 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800c5b0:	2301      	movs	r3, #1
 800c5b2:	e02b      	b.n	800c60c <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5b4:	68fb      	ldr	r3, [r7, #12]
 800c5b6:	2200      	movs	r2, #0
 800c5b8:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c5ba:	68fb      	ldr	r3, [r7, #12]
 800c5bc:	681b      	ldr	r3, [r3, #0]
 800c5be:	685b      	ldr	r3, [r3, #4]
 800c5c0:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c5c4:	2b00      	cmp	r3, #0
 800c5c6:	d018      	beq.n	800c5fa <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	681b      	ldr	r3, [r3, #0]
 800c5cc:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5ce:	697b      	ldr	r3, [r7, #20]
 800c5d0:	e853 3f00 	ldrex	r3, [r3]
 800c5d4:	613b      	str	r3, [r7, #16]
   return(result);
 800c5d6:	693b      	ldr	r3, [r7, #16]
 800c5d8:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c5dc:	627b      	str	r3, [r7, #36]	; 0x24
 800c5de:	68fb      	ldr	r3, [r7, #12]
 800c5e0:	681b      	ldr	r3, [r3, #0]
 800c5e2:	461a      	mov	r2, r3
 800c5e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5e6:	623b      	str	r3, [r7, #32]
 800c5e8:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5ea:	69f9      	ldr	r1, [r7, #28]
 800c5ec:	6a3a      	ldr	r2, [r7, #32]
 800c5ee:	e841 2300 	strex	r3, r2, [r1]
 800c5f2:	61bb      	str	r3, [r7, #24]
   return(result);
 800c5f4:	69bb      	ldr	r3, [r7, #24]
 800c5f6:	2b00      	cmp	r3, #0
 800c5f8:	d1e6      	bne.n	800c5c8 <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800c5fa:	88fb      	ldrh	r3, [r7, #6]
 800c5fc:	461a      	mov	r2, r3
 800c5fe:	68b9      	ldr	r1, [r7, #8]
 800c600:	68f8      	ldr	r0, [r7, #12]
 800c602:	f001 f8b3 	bl	800d76c <UART_Start_Receive_IT>
 800c606:	4603      	mov	r3, r0
 800c608:	e000      	b.n	800c60c <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800c60a:	2302      	movs	r3, #2
  }
}
 800c60c:	4618      	mov	r0, r3
 800c60e:	3728      	adds	r7, #40	; 0x28
 800c610:	46bd      	mov	sp, r7
 800c612:	bd80      	pop	{r7, pc}

0800c614 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800c614:	b580      	push	{r7, lr}
 800c616:	b08a      	sub	sp, #40	; 0x28
 800c618:	af00      	add	r7, sp, #0
 800c61a:	60f8      	str	r0, [r7, #12]
 800c61c:	60b9      	str	r1, [r7, #8]
 800c61e:	4613      	mov	r3, r2
 800c620:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800c622:	68fb      	ldr	r3, [r7, #12]
 800c624:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800c626:	2b20      	cmp	r3, #32
 800c628:	d165      	bne.n	800c6f6 <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800c62a:	68bb      	ldr	r3, [r7, #8]
 800c62c:	2b00      	cmp	r3, #0
 800c62e:	d002      	beq.n	800c636 <HAL_UART_Transmit_DMA+0x22>
 800c630:	88fb      	ldrh	r3, [r7, #6]
 800c632:	2b00      	cmp	r3, #0
 800c634:	d101      	bne.n	800c63a <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800c636:	2301      	movs	r3, #1
 800c638:	e05e      	b.n	800c6f8 <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800c63a:	68fb      	ldr	r3, [r7, #12]
 800c63c:	68ba      	ldr	r2, [r7, #8]
 800c63e:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800c640:	68fb      	ldr	r3, [r7, #12]
 800c642:	88fa      	ldrh	r2, [r7, #6]
 800c644:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800c648:	68fb      	ldr	r3, [r7, #12]
 800c64a:	88fa      	ldrh	r2, [r7, #6]
 800c64c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	2200      	movs	r2, #0
 800c654:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800c658:	68fb      	ldr	r3, [r7, #12]
 800c65a:	2221      	movs	r2, #33	; 0x21
 800c65c:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 800c65e:	68fb      	ldr	r3, [r7, #12]
 800c660:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c662:	2b00      	cmp	r3, #0
 800c664:	d027      	beq.n	800c6b6 <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c66a:	4a25      	ldr	r2, [pc, #148]	; (800c700 <HAL_UART_Transmit_DMA+0xec>)
 800c66c:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800c66e:	68fb      	ldr	r3, [r7, #12]
 800c670:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c672:	4a24      	ldr	r2, [pc, #144]	; (800c704 <HAL_UART_Transmit_DMA+0xf0>)
 800c674:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800c676:	68fb      	ldr	r3, [r7, #12]
 800c678:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c67a:	4a23      	ldr	r2, [pc, #140]	; (800c708 <HAL_UART_Transmit_DMA+0xf4>)
 800c67c:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800c67e:	68fb      	ldr	r3, [r7, #12]
 800c680:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c682:	2200      	movs	r2, #0
 800c684:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800c686:	68fb      	ldr	r3, [r7, #12]
 800c688:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800c68a:	68fb      	ldr	r3, [r7, #12]
 800c68c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800c68e:	4619      	mov	r1, r3
 800c690:	68fb      	ldr	r3, [r7, #12]
 800c692:	681b      	ldr	r3, [r3, #0]
 800c694:	3328      	adds	r3, #40	; 0x28
 800c696:	461a      	mov	r2, r3
 800c698:	88fb      	ldrh	r3, [r7, #6]
 800c69a:	f7f8 f85f 	bl	800475c <HAL_DMA_Start_IT>
 800c69e:	4603      	mov	r3, r0
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	d008      	beq.n	800c6b6 <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	2210      	movs	r2, #16
 800c6a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800c6ac:	68fb      	ldr	r3, [r7, #12]
 800c6ae:	2220      	movs	r2, #32
 800c6b0:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800c6b2:	2301      	movs	r3, #1
 800c6b4:	e020      	b.n	800c6f8 <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800c6b6:	68fb      	ldr	r3, [r7, #12]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	2240      	movs	r2, #64	; 0x40
 800c6bc:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c6be:	68fb      	ldr	r3, [r7, #12]
 800c6c0:	681b      	ldr	r3, [r3, #0]
 800c6c2:	3308      	adds	r3, #8
 800c6c4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6c6:	697b      	ldr	r3, [r7, #20]
 800c6c8:	e853 3f00 	ldrex	r3, [r3]
 800c6cc:	613b      	str	r3, [r7, #16]
   return(result);
 800c6ce:	693b      	ldr	r3, [r7, #16]
 800c6d0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c6d4:	627b      	str	r3, [r7, #36]	; 0x24
 800c6d6:	68fb      	ldr	r3, [r7, #12]
 800c6d8:	681b      	ldr	r3, [r3, #0]
 800c6da:	3308      	adds	r3, #8
 800c6dc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800c6de:	623a      	str	r2, [r7, #32]
 800c6e0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6e2:	69f9      	ldr	r1, [r7, #28]
 800c6e4:	6a3a      	ldr	r2, [r7, #32]
 800c6e6:	e841 2300 	strex	r3, r2, [r1]
 800c6ea:	61bb      	str	r3, [r7, #24]
   return(result);
 800c6ec:	69bb      	ldr	r3, [r7, #24]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d1e5      	bne.n	800c6be <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800c6f2:	2300      	movs	r3, #0
 800c6f4:	e000      	b.n	800c6f8 <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800c6f6:	2302      	movs	r3, #2
  }
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	3728      	adds	r7, #40	; 0x28
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}
 800c700:	0800db4d 	.word	0x0800db4d
 800c704:	0800dbe3 	.word	0x0800dbe3
 800c708:	0800dd65 	.word	0x0800dd65

0800c70c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800c70c:	b580      	push	{r7, lr}
 800c70e:	b08a      	sub	sp, #40	; 0x28
 800c710:	af00      	add	r7, sp, #0
 800c712:	60f8      	str	r0, [r7, #12]
 800c714:	60b9      	str	r1, [r7, #8]
 800c716:	4613      	mov	r3, r2
 800c718:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800c71a:	68fb      	ldr	r3, [r7, #12]
 800c71c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800c720:	2b20      	cmp	r3, #32
 800c722:	d132      	bne.n	800c78a <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800c724:	68bb      	ldr	r3, [r7, #8]
 800c726:	2b00      	cmp	r3, #0
 800c728:	d002      	beq.n	800c730 <HAL_UART_Receive_DMA+0x24>
 800c72a:	88fb      	ldrh	r3, [r7, #6]
 800c72c:	2b00      	cmp	r3, #0
 800c72e:	d101      	bne.n	800c734 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800c730:	2301      	movs	r3, #1
 800c732:	e02b      	b.n	800c78c <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c734:	68fb      	ldr	r3, [r7, #12]
 800c736:	2200      	movs	r2, #0
 800c738:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800c73a:	68fb      	ldr	r3, [r7, #12]
 800c73c:	681b      	ldr	r3, [r3, #0]
 800c73e:	685b      	ldr	r3, [r3, #4]
 800c740:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800c744:	2b00      	cmp	r3, #0
 800c746:	d018      	beq.n	800c77a <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800c748:	68fb      	ldr	r3, [r7, #12]
 800c74a:	681b      	ldr	r3, [r3, #0]
 800c74c:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c74e:	697b      	ldr	r3, [r7, #20]
 800c750:	e853 3f00 	ldrex	r3, [r3]
 800c754:	613b      	str	r3, [r7, #16]
   return(result);
 800c756:	693b      	ldr	r3, [r7, #16]
 800c758:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800c75c:	627b      	str	r3, [r7, #36]	; 0x24
 800c75e:	68fb      	ldr	r3, [r7, #12]
 800c760:	681b      	ldr	r3, [r3, #0]
 800c762:	461a      	mov	r2, r3
 800c764:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c766:	623b      	str	r3, [r7, #32]
 800c768:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c76a:	69f9      	ldr	r1, [r7, #28]
 800c76c:	6a3a      	ldr	r2, [r7, #32]
 800c76e:	e841 2300 	strex	r3, r2, [r1]
 800c772:	61bb      	str	r3, [r7, #24]
   return(result);
 800c774:	69bb      	ldr	r3, [r7, #24]
 800c776:	2b00      	cmp	r3, #0
 800c778:	d1e6      	bne.n	800c748 <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800c77a:	88fb      	ldrh	r3, [r7, #6]
 800c77c:	461a      	mov	r2, r3
 800c77e:	68b9      	ldr	r1, [r7, #8]
 800c780:	68f8      	ldr	r0, [r7, #12]
 800c782:	f001 f8b9 	bl	800d8f8 <UART_Start_Receive_DMA>
 800c786:	4603      	mov	r3, r0
 800c788:	e000      	b.n	800c78c <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800c78a:	2302      	movs	r3, #2
  }
}
 800c78c:	4618      	mov	r0, r3
 800c78e:	3728      	adds	r7, #40	; 0x28
 800c790:	46bd      	mov	sp, r7
 800c792:	bd80      	pop	{r7, pc}

0800c794 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 800c794:	b580      	push	{r7, lr}
 800c796:	b0a2      	sub	sp, #136	; 0x88
 800c798:	af00      	add	r7, sp, #0
 800c79a:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 800c79c:	2301      	movs	r3, #1
 800c79e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800c7a2:	687b      	ldr	r3, [r7, #4]
 800c7a4:	681b      	ldr	r3, [r3, #0]
 800c7a6:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7a8:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c7aa:	e853 3f00 	ldrex	r3, [r3]
 800c7ae:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c7b0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c7b2:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800c7b6:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800c7ba:	687b      	ldr	r3, [r7, #4]
 800c7bc:	681b      	ldr	r3, [r3, #0]
 800c7be:	461a      	mov	r2, r3
 800c7c0:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800c7c4:	66fb      	str	r3, [r7, #108]	; 0x6c
 800c7c6:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7c8:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c7ca:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c7cc:	e841 2300 	strex	r3, r2, [r1]
 800c7d0:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c7d2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c7d4:	2b00      	cmp	r3, #0
 800c7d6:	d1e4      	bne.n	800c7a2 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	681b      	ldr	r3, [r3, #0]
 800c7dc:	3308      	adds	r3, #8
 800c7de:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c7e0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c7e2:	e853 3f00 	ldrex	r3, [r3]
 800c7e6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c7e8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c7ea:	f023 0301 	bic.w	r3, r3, #1
 800c7ee:	67fb      	str	r3, [r7, #124]	; 0x7c
 800c7f0:	687b      	ldr	r3, [r7, #4]
 800c7f2:	681b      	ldr	r3, [r3, #0]
 800c7f4:	3308      	adds	r3, #8
 800c7f6:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800c7f8:	65ba      	str	r2, [r7, #88]	; 0x58
 800c7fa:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c7fc:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c7fe:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c800:	e841 2300 	strex	r3, r2, [r1]
 800c804:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c806:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c808:	2b00      	cmp	r3, #0
 800c80a:	d1e5      	bne.n	800c7d8 <HAL_UART_Abort_IT+0x44>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c80c:	687b      	ldr	r3, [r7, #4]
 800c80e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c810:	2b01      	cmp	r3, #1
 800c812:	d118      	bne.n	800c846 <HAL_UART_Abort_IT+0xb2>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800c814:	687b      	ldr	r3, [r7, #4]
 800c816:	681b      	ldr	r3, [r3, #0]
 800c818:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c81a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c81c:	e853 3f00 	ldrex	r3, [r3]
 800c820:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c822:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c824:	f023 0310 	bic.w	r3, r3, #16
 800c828:	67bb      	str	r3, [r7, #120]	; 0x78
 800c82a:	687b      	ldr	r3, [r7, #4]
 800c82c:	681b      	ldr	r3, [r3, #0]
 800c82e:	461a      	mov	r2, r3
 800c830:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c832:	647b      	str	r3, [r7, #68]	; 0x44
 800c834:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c836:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c838:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c83a:	e841 2300 	strex	r3, r2, [r1]
 800c83e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c840:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c842:	2b00      	cmp	r3, #0
 800c844:	d1e6      	bne.n	800c814 <HAL_UART_Abort_IT+0x80>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800c846:	687b      	ldr	r3, [r7, #4]
 800c848:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c84a:	2b00      	cmp	r3, #0
 800c84c:	d00f      	beq.n	800c86e <HAL_UART_Abort_IT+0xda>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	681b      	ldr	r3, [r3, #0]
 800c852:	689b      	ldr	r3, [r3, #8]
 800c854:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c858:	2b80      	cmp	r3, #128	; 0x80
 800c85a:	d104      	bne.n	800c866 <HAL_UART_Abort_IT+0xd2>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800c85c:	687b      	ldr	r3, [r7, #4]
 800c85e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c860:	4a5d      	ldr	r2, [pc, #372]	; (800c9d8 <HAL_UART_Abort_IT+0x244>)
 800c862:	651a      	str	r2, [r3, #80]	; 0x50
 800c864:	e003      	b.n	800c86e <HAL_UART_Abort_IT+0xda>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800c866:	687b      	ldr	r3, [r7, #4]
 800c868:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c86a:	2200      	movs	r2, #0
 800c86c:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800c86e:	687b      	ldr	r3, [r7, #4]
 800c870:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c872:	2b00      	cmp	r3, #0
 800c874:	d00f      	beq.n	800c896 <HAL_UART_Abort_IT+0x102>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c876:	687b      	ldr	r3, [r7, #4]
 800c878:	681b      	ldr	r3, [r3, #0]
 800c87a:	689b      	ldr	r3, [r3, #8]
 800c87c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c880:	2b40      	cmp	r3, #64	; 0x40
 800c882:	d104      	bne.n	800c88e <HAL_UART_Abort_IT+0xfa>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800c884:	687b      	ldr	r3, [r7, #4]
 800c886:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c888:	4a54      	ldr	r2, [pc, #336]	; (800c9dc <HAL_UART_Abort_IT+0x248>)
 800c88a:	651a      	str	r2, [r3, #80]	; 0x50
 800c88c:	e003      	b.n	800c896 <HAL_UART_Abort_IT+0x102>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800c88e:	687b      	ldr	r3, [r7, #4]
 800c890:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c892:	2200      	movs	r2, #0
 800c894:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800c896:	687b      	ldr	r3, [r7, #4]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	689b      	ldr	r3, [r3, #8]
 800c89c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c8a0:	2b80      	cmp	r3, #128	; 0x80
 800c8a2:	d12d      	bne.n	800c900 <HAL_UART_Abort_IT+0x16c>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c8a4:	687b      	ldr	r3, [r7, #4]
 800c8a6:	681b      	ldr	r3, [r3, #0]
 800c8a8:	3308      	adds	r3, #8
 800c8aa:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c8ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c8ae:	e853 3f00 	ldrex	r3, [r3]
 800c8b2:	623b      	str	r3, [r7, #32]
   return(result);
 800c8b4:	6a3b      	ldr	r3, [r7, #32]
 800c8b6:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c8ba:	677b      	str	r3, [r7, #116]	; 0x74
 800c8bc:	687b      	ldr	r3, [r7, #4]
 800c8be:	681b      	ldr	r3, [r3, #0]
 800c8c0:	3308      	adds	r3, #8
 800c8c2:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c8c4:	633a      	str	r2, [r7, #48]	; 0x30
 800c8c6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c8c8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c8ca:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c8cc:	e841 2300 	strex	r3, r2, [r1]
 800c8d0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c8d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c8d4:	2b00      	cmp	r3, #0
 800c8d6:	d1e5      	bne.n	800c8a4 <HAL_UART_Abort_IT+0x110>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800c8d8:	687b      	ldr	r3, [r7, #4]
 800c8da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8dc:	2b00      	cmp	r3, #0
 800c8de:	d00f      	beq.n	800c900 <HAL_UART_Abort_IT+0x16c>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800c8e0:	687b      	ldr	r3, [r7, #4]
 800c8e2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8e4:	4618      	mov	r0, r3
 800c8e6:	f7f8 f809 	bl	80048fc <HAL_DMA_Abort_IT>
 800c8ea:	4603      	mov	r3, r0
 800c8ec:	2b00      	cmp	r3, #0
 800c8ee:	d004      	beq.n	800c8fa <HAL_UART_Abort_IT+0x166>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 800c8f0:	687b      	ldr	r3, [r7, #4]
 800c8f2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c8f4:	2200      	movs	r2, #0
 800c8f6:	651a      	str	r2, [r3, #80]	; 0x50
 800c8f8:	e002      	b.n	800c900 <HAL_UART_Abort_IT+0x16c>
      }
      else
      {
        abortcplt = 0U;
 800c8fa:	2300      	movs	r3, #0
 800c8fc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c900:	687b      	ldr	r3, [r7, #4]
 800c902:	681b      	ldr	r3, [r3, #0]
 800c904:	689b      	ldr	r3, [r3, #8]
 800c906:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c90a:	2b40      	cmp	r3, #64	; 0x40
 800c90c:	d130      	bne.n	800c970 <HAL_UART_Abort_IT+0x1dc>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c90e:	687b      	ldr	r3, [r7, #4]
 800c910:	681b      	ldr	r3, [r3, #0]
 800c912:	3308      	adds	r3, #8
 800c914:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c916:	693b      	ldr	r3, [r7, #16]
 800c918:	e853 3f00 	ldrex	r3, [r3]
 800c91c:	60fb      	str	r3, [r7, #12]
   return(result);
 800c91e:	68fb      	ldr	r3, [r7, #12]
 800c920:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c924:	673b      	str	r3, [r7, #112]	; 0x70
 800c926:	687b      	ldr	r3, [r7, #4]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	3308      	adds	r3, #8
 800c92c:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c92e:	61fa      	str	r2, [r7, #28]
 800c930:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c932:	69b9      	ldr	r1, [r7, #24]
 800c934:	69fa      	ldr	r2, [r7, #28]
 800c936:	e841 2300 	strex	r3, r2, [r1]
 800c93a:	617b      	str	r3, [r7, #20]
   return(result);
 800c93c:	697b      	ldr	r3, [r7, #20]
 800c93e:	2b00      	cmp	r3, #0
 800c940:	d1e5      	bne.n	800c90e <HAL_UART_Abort_IT+0x17a>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800c942:	687b      	ldr	r3, [r7, #4]
 800c944:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c946:	2b00      	cmp	r3, #0
 800c948:	d012      	beq.n	800c970 <HAL_UART_Abort_IT+0x1dc>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c94a:	687b      	ldr	r3, [r7, #4]
 800c94c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c94e:	4618      	mov	r0, r3
 800c950:	f7f7 ffd4 	bl	80048fc <HAL_DMA_Abort_IT>
 800c954:	4603      	mov	r3, r0
 800c956:	2b00      	cmp	r3, #0
 800c958:	d007      	beq.n	800c96a <HAL_UART_Abort_IT+0x1d6>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800c95a:	687b      	ldr	r3, [r7, #4]
 800c95c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c95e:	2200      	movs	r2, #0
 800c960:	651a      	str	r2, [r3, #80]	; 0x50
        abortcplt = 1U;
 800c962:	2301      	movs	r3, #1
 800c964:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c968:	e002      	b.n	800c970 <HAL_UART_Abort_IT+0x1dc>
      }
      else
      {
        abortcplt = 0U;
 800c96a:	2300      	movs	r3, #0
 800c96c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 800c970:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c974:	2b01      	cmp	r3, #1
 800c976:	d12a      	bne.n	800c9ce <HAL_UART_Abort_IT+0x23a>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 800c978:	687b      	ldr	r3, [r7, #4]
 800c97a:	2200      	movs	r2, #0
 800c97c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->RxXferCount = 0U;
 800c980:	687b      	ldr	r3, [r7, #4]
 800c982:	2200      	movs	r2, #0
 800c984:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	2200      	movs	r2, #0
 800c98c:	669a      	str	r2, [r3, #104]	; 0x68
    huart->TxISR = NULL;
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	2200      	movs	r2, #0
 800c992:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	2200      	movs	r2, #0
 800c998:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800c99c:	687b      	ldr	r3, [r7, #4]
 800c99e:	681b      	ldr	r3, [r3, #0]
 800c9a0:	220f      	movs	r2, #15
 800c9a2:	621a      	str	r2, [r3, #32]


    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	699a      	ldr	r2, [r3, #24]
 800c9aa:	687b      	ldr	r3, [r7, #4]
 800c9ac:	681b      	ldr	r3, [r3, #0]
 800c9ae:	f042 0208 	orr.w	r2, r2, #8
 800c9b2:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800c9b4:	687b      	ldr	r3, [r7, #4]
 800c9b6:	2220      	movs	r2, #32
 800c9b8:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_READY;
 800c9ba:	687b      	ldr	r3, [r7, #4]
 800c9bc:	2220      	movs	r2, #32
 800c9be:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	2200      	movs	r2, #0
 800c9c6:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 800c9c8:	6878      	ldr	r0, [r7, #4]
 800c9ca:	f010 fd9b 	bl	801d504 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800c9ce:	2300      	movs	r3, #0
}
 800c9d0:	4618      	mov	r0, r3
 800c9d2:	3788      	adds	r7, #136	; 0x88
 800c9d4:	46bd      	mov	sp, r7
 800c9d6:	bd80      	pop	{r7, pc}
 800c9d8:	0800de0f 	.word	0x0800de0f
 800c9dc:	0800de7b 	.word	0x0800de7b

0800c9e0 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b0ba      	sub	sp, #232	; 0xe8
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c9e8:	687b      	ldr	r3, [r7, #4]
 800c9ea:	681b      	ldr	r3, [r3, #0]
 800c9ec:	69db      	ldr	r3, [r3, #28]
 800c9ee:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c9f2:	687b      	ldr	r3, [r7, #4]
 800c9f4:	681b      	ldr	r3, [r3, #0]
 800c9f6:	681b      	ldr	r3, [r3, #0]
 800c9f8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	681b      	ldr	r3, [r3, #0]
 800ca00:	689b      	ldr	r3, [r3, #8]
 800ca02:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800ca06:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800ca0a:	f640 030f 	movw	r3, #2063	; 0x80f
 800ca0e:	4013      	ands	r3, r2
 800ca10:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800ca14:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ca18:	2b00      	cmp	r3, #0
 800ca1a:	d115      	bne.n	800ca48 <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800ca1c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca20:	f003 0320 	and.w	r3, r3, #32
 800ca24:	2b00      	cmp	r3, #0
 800ca26:	d00f      	beq.n	800ca48 <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800ca28:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca2c:	f003 0320 	and.w	r3, r3, #32
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d009      	beq.n	800ca48 <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800ca34:	687b      	ldr	r3, [r7, #4]
 800ca36:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca38:	2b00      	cmp	r3, #0
 800ca3a:	f000 8297 	beq.w	800cf6c <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800ca42:	6878      	ldr	r0, [r7, #4]
 800ca44:	4798      	blx	r3
      }
      return;
 800ca46:	e291      	b.n	800cf6c <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800ca48:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800ca4c:	2b00      	cmp	r3, #0
 800ca4e:	f000 8117 	beq.w	800cc80 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800ca52:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800ca56:	f003 0301 	and.w	r3, r3, #1
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d106      	bne.n	800ca6c <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800ca5e:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800ca62:	4b85      	ldr	r3, [pc, #532]	; (800cc78 <HAL_UART_IRQHandler+0x298>)
 800ca64:	4013      	ands	r3, r2
 800ca66:	2b00      	cmp	r3, #0
 800ca68:	f000 810a 	beq.w	800cc80 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800ca6c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800ca70:	f003 0301 	and.w	r3, r3, #1
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d011      	beq.n	800ca9c <HAL_UART_IRQHandler+0xbc>
 800ca78:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800ca7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	d00b      	beq.n	800ca9c <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	681b      	ldr	r3, [r3, #0]
 800ca88:	2201      	movs	r2, #1
 800ca8a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800ca8c:	687b      	ldr	r3, [r7, #4]
 800ca8e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ca92:	f043 0201 	orr.w	r2, r3, #1
 800ca96:	687b      	ldr	r3, [r7, #4]
 800ca98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800ca9c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800caa0:	f003 0302 	and.w	r3, r3, #2
 800caa4:	2b00      	cmp	r3, #0
 800caa6:	d011      	beq.n	800cacc <HAL_UART_IRQHandler+0xec>
 800caa8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800caac:	f003 0301 	and.w	r3, r3, #1
 800cab0:	2b00      	cmp	r3, #0
 800cab2:	d00b      	beq.n	800cacc <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	2202      	movs	r2, #2
 800caba:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cac2:	f043 0204 	orr.w	r2, r3, #4
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800cacc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cad0:	f003 0304 	and.w	r3, r3, #4
 800cad4:	2b00      	cmp	r3, #0
 800cad6:	d011      	beq.n	800cafc <HAL_UART_IRQHandler+0x11c>
 800cad8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cadc:	f003 0301 	and.w	r3, r3, #1
 800cae0:	2b00      	cmp	r3, #0
 800cae2:	d00b      	beq.n	800cafc <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800cae4:	687b      	ldr	r3, [r7, #4]
 800cae6:	681b      	ldr	r3, [r3, #0]
 800cae8:	2204      	movs	r2, #4
 800caea:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800caf2:	f043 0202 	orr.w	r2, r3, #2
 800caf6:	687b      	ldr	r3, [r7, #4]
 800caf8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800cafc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb00:	f003 0308 	and.w	r3, r3, #8
 800cb04:	2b00      	cmp	r3, #0
 800cb06:	d017      	beq.n	800cb38 <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800cb08:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb0c:	f003 0320 	and.w	r3, r3, #32
 800cb10:	2b00      	cmp	r3, #0
 800cb12:	d105      	bne.n	800cb20 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800cb14:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800cb18:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800cb1c:	2b00      	cmp	r3, #0
 800cb1e:	d00b      	beq.n	800cb38 <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	681b      	ldr	r3, [r3, #0]
 800cb24:	2208      	movs	r2, #8
 800cb26:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb2e:	f043 0208 	orr.w	r2, r3, #8
 800cb32:	687b      	ldr	r3, [r7, #4]
 800cb34:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800cb38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb3c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cb40:	2b00      	cmp	r3, #0
 800cb42:	d012      	beq.n	800cb6a <HAL_UART_IRQHandler+0x18a>
 800cb44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb48:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800cb4c:	2b00      	cmp	r3, #0
 800cb4e:	d00c      	beq.n	800cb6a <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cb50:	687b      	ldr	r3, [r7, #4]
 800cb52:	681b      	ldr	r3, [r3, #0]
 800cb54:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cb58:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800cb5a:	687b      	ldr	r3, [r7, #4]
 800cb5c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb60:	f043 0220 	orr.w	r2, r3, #32
 800cb64:	687b      	ldr	r3, [r7, #4]
 800cb66:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800cb6a:	687b      	ldr	r3, [r7, #4]
 800cb6c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cb70:	2b00      	cmp	r3, #0
 800cb72:	f000 81fd 	beq.w	800cf70 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800cb76:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cb7a:	f003 0320 	and.w	r3, r3, #32
 800cb7e:	2b00      	cmp	r3, #0
 800cb80:	d00d      	beq.n	800cb9e <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800cb82:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cb86:	f003 0320 	and.w	r3, r3, #32
 800cb8a:	2b00      	cmp	r3, #0
 800cb8c:	d007      	beq.n	800cb9e <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800cb8e:	687b      	ldr	r3, [r7, #4]
 800cb90:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d003      	beq.n	800cb9e <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800cb96:	687b      	ldr	r3, [r7, #4]
 800cb98:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800cb9a:	6878      	ldr	r0, [r7, #4]
 800cb9c:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800cba4:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cba8:	687b      	ldr	r3, [r7, #4]
 800cbaa:	681b      	ldr	r3, [r3, #0]
 800cbac:	689b      	ldr	r3, [r3, #8]
 800cbae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbb2:	2b40      	cmp	r3, #64	; 0x40
 800cbb4:	d005      	beq.n	800cbc2 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800cbb6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800cbba:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800cbbe:	2b00      	cmp	r3, #0
 800cbc0:	d04f      	beq.n	800cc62 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800cbc2:	6878      	ldr	r0, [r7, #4]
 800cbc4:	f000 ff5e 	bl	800da84 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cbc8:	687b      	ldr	r3, [r7, #4]
 800cbca:	681b      	ldr	r3, [r3, #0]
 800cbcc:	689b      	ldr	r3, [r3, #8]
 800cbce:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cbd2:	2b40      	cmp	r3, #64	; 0x40
 800cbd4:	d141      	bne.n	800cc5a <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	681b      	ldr	r3, [r3, #0]
 800cbda:	3308      	adds	r3, #8
 800cbdc:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cbe0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800cbe4:	e853 3f00 	ldrex	r3, [r3]
 800cbe8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800cbec:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800cbf0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cbf4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800cbf8:	687b      	ldr	r3, [r7, #4]
 800cbfa:	681b      	ldr	r3, [r3, #0]
 800cbfc:	3308      	adds	r3, #8
 800cbfe:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800cc02:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800cc06:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cc0a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800cc0e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800cc12:	e841 2300 	strex	r3, r2, [r1]
 800cc16:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800cc1a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800cc1e:	2b00      	cmp	r3, #0
 800cc20:	d1d9      	bne.n	800cbd6 <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800cc22:	687b      	ldr	r3, [r7, #4]
 800cc24:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc26:	2b00      	cmp	r3, #0
 800cc28:	d013      	beq.n	800cc52 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800cc2a:	687b      	ldr	r3, [r7, #4]
 800cc2c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc2e:	4a13      	ldr	r2, [pc, #76]	; (800cc7c <HAL_UART_IRQHandler+0x29c>)
 800cc30:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800cc32:	687b      	ldr	r3, [r7, #4]
 800cc34:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc36:	4618      	mov	r0, r3
 800cc38:	f7f7 fe60 	bl	80048fc <HAL_DMA_Abort_IT>
 800cc3c:	4603      	mov	r3, r0
 800cc3e:	2b00      	cmp	r3, #0
 800cc40:	d017      	beq.n	800cc72 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800cc42:	687b      	ldr	r3, [r7, #4]
 800cc44:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cc46:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800cc48:	687a      	ldr	r2, [r7, #4]
 800cc4a:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800cc4c:	4610      	mov	r0, r2
 800cc4e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc50:	e00f      	b.n	800cc72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800cc52:	6878      	ldr	r0, [r7, #4]
 800cc54:	f010 fc1c 	bl	801d490 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc58:	e00b      	b.n	800cc72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800cc5a:	6878      	ldr	r0, [r7, #4]
 800cc5c:	f010 fc18 	bl	801d490 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc60:	e007      	b.n	800cc72 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800cc62:	6878      	ldr	r0, [r7, #4]
 800cc64:	f010 fc14 	bl	801d490 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cc68:	687b      	ldr	r3, [r7, #4]
 800cc6a:	2200      	movs	r2, #0
 800cc6c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800cc70:	e17e      	b.n	800cf70 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800cc72:	bf00      	nop
    return;
 800cc74:	e17c      	b.n	800cf70 <HAL_UART_IRQHandler+0x590>
 800cc76:	bf00      	nop
 800cc78:	04000120 	.word	0x04000120
 800cc7c:	0800dde3 	.word	0x0800dde3

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800cc80:	687b      	ldr	r3, [r7, #4]
 800cc82:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800cc84:	2b01      	cmp	r3, #1
 800cc86:	f040 814c 	bne.w	800cf22 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800cc8a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cc8e:	f003 0310 	and.w	r3, r3, #16
 800cc92:	2b00      	cmp	r3, #0
 800cc94:	f000 8145 	beq.w	800cf22 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800cc98:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cc9c:	f003 0310 	and.w	r3, r3, #16
 800cca0:	2b00      	cmp	r3, #0
 800cca2:	f000 813e 	beq.w	800cf22 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	2210      	movs	r2, #16
 800ccac:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	681b      	ldr	r3, [r3, #0]
 800ccb2:	689b      	ldr	r3, [r3, #8]
 800ccb4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ccb8:	2b40      	cmp	r3, #64	; 0x40
 800ccba:	f040 80b6 	bne.w	800ce2a <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800ccbe:	687b      	ldr	r3, [r7, #4]
 800ccc0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ccc2:	681b      	ldr	r3, [r3, #0]
 800ccc4:	685b      	ldr	r3, [r3, #4]
 800ccc6:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800ccca:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800ccce:	2b00      	cmp	r3, #0
 800ccd0:	f000 8150 	beq.w	800cf74 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800ccd4:	687b      	ldr	r3, [r7, #4]
 800ccd6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800ccda:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ccde:	429a      	cmp	r2, r3
 800cce0:	f080 8148 	bcs.w	800cf74 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800cce4:	687b      	ldr	r3, [r7, #4]
 800cce6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800ccea:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800ccee:	687b      	ldr	r3, [r7, #4]
 800ccf0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ccf2:	69db      	ldr	r3, [r3, #28]
 800ccf4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800ccf8:	f000 8086 	beq.w	800ce08 <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800ccfc:	687b      	ldr	r3, [r7, #4]
 800ccfe:	681b      	ldr	r3, [r3, #0]
 800cd00:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd04:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800cd08:	e853 3f00 	ldrex	r3, [r3]
 800cd0c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800cd10:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800cd14:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800cd18:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800cd1c:	687b      	ldr	r3, [r7, #4]
 800cd1e:	681b      	ldr	r3, [r3, #0]
 800cd20:	461a      	mov	r2, r3
 800cd22:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800cd26:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800cd2a:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd2e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800cd32:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800cd36:	e841 2300 	strex	r3, r2, [r1]
 800cd3a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800cd3e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800cd42:	2b00      	cmp	r3, #0
 800cd44:	d1da      	bne.n	800ccfc <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800cd46:	687b      	ldr	r3, [r7, #4]
 800cd48:	681b      	ldr	r3, [r3, #0]
 800cd4a:	3308      	adds	r3, #8
 800cd4c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd4e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800cd50:	e853 3f00 	ldrex	r3, [r3]
 800cd54:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800cd56:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800cd58:	f023 0301 	bic.w	r3, r3, #1
 800cd5c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800cd60:	687b      	ldr	r3, [r7, #4]
 800cd62:	681b      	ldr	r3, [r3, #0]
 800cd64:	3308      	adds	r3, #8
 800cd66:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800cd6a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800cd6e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cd70:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800cd72:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800cd76:	e841 2300 	strex	r3, r2, [r1]
 800cd7a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800cd7c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d1e1      	bne.n	800cd46 <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800cd82:	687b      	ldr	r3, [r7, #4]
 800cd84:	681b      	ldr	r3, [r3, #0]
 800cd86:	3308      	adds	r3, #8
 800cd88:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cd8a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800cd8c:	e853 3f00 	ldrex	r3, [r3]
 800cd90:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800cd92:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800cd94:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800cd98:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	681b      	ldr	r3, [r3, #0]
 800cda0:	3308      	adds	r3, #8
 800cda2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800cda6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800cda8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdaa:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800cdac:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800cdae:	e841 2300 	strex	r3, r2, [r1]
 800cdb2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800cdb4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800cdb6:	2b00      	cmp	r3, #0
 800cdb8:	d1e3      	bne.n	800cd82 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800cdba:	687b      	ldr	r3, [r7, #4]
 800cdbc:	2220      	movs	r2, #32
 800cdbe:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cdc2:	687b      	ldr	r3, [r7, #4]
 800cdc4:	2200      	movs	r2, #0
 800cdc6:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800cdc8:	687b      	ldr	r3, [r7, #4]
 800cdca:	681b      	ldr	r3, [r3, #0]
 800cdcc:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cdce:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800cdd0:	e853 3f00 	ldrex	r3, [r3]
 800cdd4:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800cdd6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800cdd8:	f023 0310 	bic.w	r3, r3, #16
 800cddc:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800cde0:	687b      	ldr	r3, [r7, #4]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	461a      	mov	r2, r3
 800cde6:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800cdea:	65bb      	str	r3, [r7, #88]	; 0x58
 800cdec:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cdee:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800cdf0:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800cdf2:	e841 2300 	strex	r3, r2, [r1]
 800cdf6:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800cdf8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800cdfa:	2b00      	cmp	r3, #0
 800cdfc:	d1e4      	bne.n	800cdc8 <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800cdfe:	687b      	ldr	r3, [r7, #4]
 800ce00:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ce02:	4618      	mov	r0, r3
 800ce04:	f7f7 fd0a 	bl	800481c <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800ce08:	687b      	ldr	r3, [r7, #4]
 800ce0a:	2202      	movs	r2, #2
 800ce0c:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800ce0e:	687b      	ldr	r3, [r7, #4]
 800ce10:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ce1a:	b29b      	uxth	r3, r3
 800ce1c:	1ad3      	subs	r3, r2, r3
 800ce1e:	b29b      	uxth	r3, r3
 800ce20:	4619      	mov	r1, r3
 800ce22:	6878      	ldr	r0, [r7, #4]
 800ce24:	f000 f8cc 	bl	800cfc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800ce28:	e0a4      	b.n	800cf74 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800ce2a:	687b      	ldr	r3, [r7, #4]
 800ce2c:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800ce30:	687b      	ldr	r3, [r7, #4]
 800ce32:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ce36:	b29b      	uxth	r3, r3
 800ce38:	1ad3      	subs	r3, r2, r3
 800ce3a:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800ce44:	b29b      	uxth	r3, r3
 800ce46:	2b00      	cmp	r3, #0
 800ce48:	f000 8096 	beq.w	800cf78 <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800ce4c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800ce50:	2b00      	cmp	r3, #0
 800ce52:	f000 8091 	beq.w	800cf78 <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800ce56:	687b      	ldr	r3, [r7, #4]
 800ce58:	681b      	ldr	r3, [r3, #0]
 800ce5a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ce5e:	e853 3f00 	ldrex	r3, [r3]
 800ce62:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800ce64:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ce66:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800ce6a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800ce6e:	687b      	ldr	r3, [r7, #4]
 800ce70:	681b      	ldr	r3, [r3, #0]
 800ce72:	461a      	mov	r2, r3
 800ce74:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800ce78:	647b      	str	r3, [r7, #68]	; 0x44
 800ce7a:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce7c:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800ce7e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ce80:	e841 2300 	strex	r3, r2, [r1]
 800ce84:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800ce86:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800ce88:	2b00      	cmp	r3, #0
 800ce8a:	d1e4      	bne.n	800ce56 <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800ce8c:	687b      	ldr	r3, [r7, #4]
 800ce8e:	681b      	ldr	r3, [r3, #0]
 800ce90:	3308      	adds	r3, #8
 800ce92:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce96:	e853 3f00 	ldrex	r3, [r3]
 800ce9a:	623b      	str	r3, [r7, #32]
   return(result);
 800ce9c:	6a3b      	ldr	r3, [r7, #32]
 800ce9e:	f023 0301 	bic.w	r3, r3, #1
 800cea2:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800cea6:	687b      	ldr	r3, [r7, #4]
 800cea8:	681b      	ldr	r3, [r3, #0]
 800ceaa:	3308      	adds	r3, #8
 800ceac:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800ceb0:	633a      	str	r2, [r7, #48]	; 0x30
 800ceb2:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ceb4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800ceb6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800ceb8:	e841 2300 	strex	r3, r2, [r1]
 800cebc:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800cebe:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800cec0:	2b00      	cmp	r3, #0
 800cec2:	d1e3      	bne.n	800ce8c <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800cec4:	687b      	ldr	r3, [r7, #4]
 800cec6:	2220      	movs	r2, #32
 800cec8:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800cecc:	687b      	ldr	r3, [r7, #4]
 800cece:	2200      	movs	r2, #0
 800ced0:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800ced2:	687b      	ldr	r3, [r7, #4]
 800ced4:	2200      	movs	r2, #0
 800ced6:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800ced8:	687b      	ldr	r3, [r7, #4]
 800ceda:	681b      	ldr	r3, [r3, #0]
 800cedc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800cede:	693b      	ldr	r3, [r7, #16]
 800cee0:	e853 3f00 	ldrex	r3, [r3]
 800cee4:	60fb      	str	r3, [r7, #12]
   return(result);
 800cee6:	68fb      	ldr	r3, [r7, #12]
 800cee8:	f023 0310 	bic.w	r3, r3, #16
 800ceec:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800cef0:	687b      	ldr	r3, [r7, #4]
 800cef2:	681b      	ldr	r3, [r3, #0]
 800cef4:	461a      	mov	r2, r3
 800cef6:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800cefa:	61fb      	str	r3, [r7, #28]
 800cefc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800cefe:	69b9      	ldr	r1, [r7, #24]
 800cf00:	69fa      	ldr	r2, [r7, #28]
 800cf02:	e841 2300 	strex	r3, r2, [r1]
 800cf06:	617b      	str	r3, [r7, #20]
   return(result);
 800cf08:	697b      	ldr	r3, [r7, #20]
 800cf0a:	2b00      	cmp	r3, #0
 800cf0c:	d1e4      	bne.n	800ced8 <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800cf0e:	687b      	ldr	r3, [r7, #4]
 800cf10:	2202      	movs	r2, #2
 800cf12:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800cf14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800cf18:	4619      	mov	r1, r3
 800cf1a:	6878      	ldr	r0, [r7, #4]
 800cf1c:	f000 f850 	bl	800cfc0 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800cf20:	e02a      	b.n	800cf78 <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800cf22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf2a:	2b00      	cmp	r3, #0
 800cf2c:	d00e      	beq.n	800cf4c <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800cf2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cf36:	2b00      	cmp	r3, #0
 800cf38:	d008      	beq.n	800cf4c <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800cf3a:	687b      	ldr	r3, [r7, #4]
 800cf3c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf3e:	2b00      	cmp	r3, #0
 800cf40:	d01c      	beq.n	800cf7c <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800cf42:	687b      	ldr	r3, [r7, #4]
 800cf44:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800cf46:	6878      	ldr	r0, [r7, #4]
 800cf48:	4798      	blx	r3
    }
    return;
 800cf4a:	e017      	b.n	800cf7c <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800cf4c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800cf50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf54:	2b00      	cmp	r3, #0
 800cf56:	d012      	beq.n	800cf7e <HAL_UART_IRQHandler+0x59e>
 800cf58:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800cf5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cf60:	2b00      	cmp	r3, #0
 800cf62:	d00c      	beq.n	800cf7e <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800cf64:	6878      	ldr	r0, [r7, #4]
 800cf66:	f001 f881 	bl	800e06c <UART_EndTransmit_IT>
    return;
 800cf6a:	e008      	b.n	800cf7e <HAL_UART_IRQHandler+0x59e>
      return;
 800cf6c:	bf00      	nop
 800cf6e:	e006      	b.n	800cf7e <HAL_UART_IRQHandler+0x59e>
    return;
 800cf70:	bf00      	nop
 800cf72:	e004      	b.n	800cf7e <HAL_UART_IRQHandler+0x59e>
      return;
 800cf74:	bf00      	nop
 800cf76:	e002      	b.n	800cf7e <HAL_UART_IRQHandler+0x59e>
      return;
 800cf78:	bf00      	nop
 800cf7a:	e000      	b.n	800cf7e <HAL_UART_IRQHandler+0x59e>
    return;
 800cf7c:	bf00      	nop
  }

}
 800cf7e:	37e8      	adds	r7, #232	; 0xe8
 800cf80:	46bd      	mov	sp, r7
 800cf82:	bd80      	pop	{r7, pc}

0800cf84 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800cf84:	b480      	push	{r7}
 800cf86:	b083      	sub	sp, #12
 800cf88:	af00      	add	r7, sp, #0
 800cf8a:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800cf8c:	bf00      	nop
 800cf8e:	370c      	adds	r7, #12
 800cf90:	46bd      	mov	sp, r7
 800cf92:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cf96:	4770      	bx	lr

0800cf98 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cf98:	b480      	push	{r7}
 800cf9a:	b083      	sub	sp, #12
 800cf9c:	af00      	add	r7, sp, #0
 800cf9e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800cfa0:	bf00      	nop
 800cfa2:	370c      	adds	r7, #12
 800cfa4:	46bd      	mov	sp, r7
 800cfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfaa:	4770      	bx	lr

0800cfac <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800cfac:	b480      	push	{r7}
 800cfae:	b083      	sub	sp, #12
 800cfb0:	af00      	add	r7, sp, #0
 800cfb2:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800cfb4:	bf00      	nop
 800cfb6:	370c      	adds	r7, #12
 800cfb8:	46bd      	mov	sp, r7
 800cfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfbe:	4770      	bx	lr

0800cfc0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800cfc0:	b480      	push	{r7}
 800cfc2:	b083      	sub	sp, #12
 800cfc4:	af00      	add	r7, sp, #0
 800cfc6:	6078      	str	r0, [r7, #4]
 800cfc8:	460b      	mov	r3, r1
 800cfca:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800cfcc:	bf00      	nop
 800cfce:	370c      	adds	r7, #12
 800cfd0:	46bd      	mov	sp, r7
 800cfd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cfd6:	4770      	bx	lr

0800cfd8 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800cfd8:	b580      	push	{r7, lr}
 800cfda:	b088      	sub	sp, #32
 800cfdc:	af00      	add	r7, sp, #0
 800cfde:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800cfe0:	2300      	movs	r3, #0
 800cfe2:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800cfe4:	687b      	ldr	r3, [r7, #4]
 800cfe6:	689a      	ldr	r2, [r3, #8]
 800cfe8:	687b      	ldr	r3, [r7, #4]
 800cfea:	691b      	ldr	r3, [r3, #16]
 800cfec:	431a      	orrs	r2, r3
 800cfee:	687b      	ldr	r3, [r7, #4]
 800cff0:	695b      	ldr	r3, [r3, #20]
 800cff2:	431a      	orrs	r2, r3
 800cff4:	687b      	ldr	r3, [r7, #4]
 800cff6:	69db      	ldr	r3, [r3, #28]
 800cff8:	4313      	orrs	r3, r2
 800cffa:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800cffc:	687b      	ldr	r3, [r7, #4]
 800cffe:	681b      	ldr	r3, [r3, #0]
 800d000:	681a      	ldr	r2, [r3, #0]
 800d002:	4ba6      	ldr	r3, [pc, #664]	; (800d29c <UART_SetConfig+0x2c4>)
 800d004:	4013      	ands	r3, r2
 800d006:	687a      	ldr	r2, [r7, #4]
 800d008:	6812      	ldr	r2, [r2, #0]
 800d00a:	6979      	ldr	r1, [r7, #20]
 800d00c:	430b      	orrs	r3, r1
 800d00e:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800d010:	687b      	ldr	r3, [r7, #4]
 800d012:	681b      	ldr	r3, [r3, #0]
 800d014:	685b      	ldr	r3, [r3, #4]
 800d016:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800d01a:	687b      	ldr	r3, [r7, #4]
 800d01c:	68da      	ldr	r2, [r3, #12]
 800d01e:	687b      	ldr	r3, [r7, #4]
 800d020:	681b      	ldr	r3, [r3, #0]
 800d022:	430a      	orrs	r2, r1
 800d024:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800d026:	687b      	ldr	r3, [r7, #4]
 800d028:	699b      	ldr	r3, [r3, #24]
 800d02a:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800d02c:	687b      	ldr	r3, [r7, #4]
 800d02e:	6a1b      	ldr	r3, [r3, #32]
 800d030:	697a      	ldr	r2, [r7, #20]
 800d032:	4313      	orrs	r3, r2
 800d034:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800d036:	687b      	ldr	r3, [r7, #4]
 800d038:	681b      	ldr	r3, [r3, #0]
 800d03a:	689b      	ldr	r3, [r3, #8]
 800d03c:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800d040:	687b      	ldr	r3, [r7, #4]
 800d042:	681b      	ldr	r3, [r3, #0]
 800d044:	697a      	ldr	r2, [r7, #20]
 800d046:	430a      	orrs	r2, r1
 800d048:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800d04a:	687b      	ldr	r3, [r7, #4]
 800d04c:	681b      	ldr	r3, [r3, #0]
 800d04e:	4a94      	ldr	r2, [pc, #592]	; (800d2a0 <UART_SetConfig+0x2c8>)
 800d050:	4293      	cmp	r3, r2
 800d052:	d120      	bne.n	800d096 <UART_SetConfig+0xbe>
 800d054:	4b93      	ldr	r3, [pc, #588]	; (800d2a4 <UART_SetConfig+0x2cc>)
 800d056:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d05a:	f003 0303 	and.w	r3, r3, #3
 800d05e:	2b03      	cmp	r3, #3
 800d060:	d816      	bhi.n	800d090 <UART_SetConfig+0xb8>
 800d062:	a201      	add	r2, pc, #4	; (adr r2, 800d068 <UART_SetConfig+0x90>)
 800d064:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d068:	0800d079 	.word	0x0800d079
 800d06c:	0800d085 	.word	0x0800d085
 800d070:	0800d07f 	.word	0x0800d07f
 800d074:	0800d08b 	.word	0x0800d08b
 800d078:	2301      	movs	r3, #1
 800d07a:	77fb      	strb	r3, [r7, #31]
 800d07c:	e150      	b.n	800d320 <UART_SetConfig+0x348>
 800d07e:	2302      	movs	r3, #2
 800d080:	77fb      	strb	r3, [r7, #31]
 800d082:	e14d      	b.n	800d320 <UART_SetConfig+0x348>
 800d084:	2304      	movs	r3, #4
 800d086:	77fb      	strb	r3, [r7, #31]
 800d088:	e14a      	b.n	800d320 <UART_SetConfig+0x348>
 800d08a:	2308      	movs	r3, #8
 800d08c:	77fb      	strb	r3, [r7, #31]
 800d08e:	e147      	b.n	800d320 <UART_SetConfig+0x348>
 800d090:	2310      	movs	r3, #16
 800d092:	77fb      	strb	r3, [r7, #31]
 800d094:	e144      	b.n	800d320 <UART_SetConfig+0x348>
 800d096:	687b      	ldr	r3, [r7, #4]
 800d098:	681b      	ldr	r3, [r3, #0]
 800d09a:	4a83      	ldr	r2, [pc, #524]	; (800d2a8 <UART_SetConfig+0x2d0>)
 800d09c:	4293      	cmp	r3, r2
 800d09e:	d132      	bne.n	800d106 <UART_SetConfig+0x12e>
 800d0a0:	4b80      	ldr	r3, [pc, #512]	; (800d2a4 <UART_SetConfig+0x2cc>)
 800d0a2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d0a6:	f003 030c 	and.w	r3, r3, #12
 800d0aa:	2b0c      	cmp	r3, #12
 800d0ac:	d828      	bhi.n	800d100 <UART_SetConfig+0x128>
 800d0ae:	a201      	add	r2, pc, #4	; (adr r2, 800d0b4 <UART_SetConfig+0xdc>)
 800d0b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d0b4:	0800d0e9 	.word	0x0800d0e9
 800d0b8:	0800d101 	.word	0x0800d101
 800d0bc:	0800d101 	.word	0x0800d101
 800d0c0:	0800d101 	.word	0x0800d101
 800d0c4:	0800d0f5 	.word	0x0800d0f5
 800d0c8:	0800d101 	.word	0x0800d101
 800d0cc:	0800d101 	.word	0x0800d101
 800d0d0:	0800d101 	.word	0x0800d101
 800d0d4:	0800d0ef 	.word	0x0800d0ef
 800d0d8:	0800d101 	.word	0x0800d101
 800d0dc:	0800d101 	.word	0x0800d101
 800d0e0:	0800d101 	.word	0x0800d101
 800d0e4:	0800d0fb 	.word	0x0800d0fb
 800d0e8:	2300      	movs	r3, #0
 800d0ea:	77fb      	strb	r3, [r7, #31]
 800d0ec:	e118      	b.n	800d320 <UART_SetConfig+0x348>
 800d0ee:	2302      	movs	r3, #2
 800d0f0:	77fb      	strb	r3, [r7, #31]
 800d0f2:	e115      	b.n	800d320 <UART_SetConfig+0x348>
 800d0f4:	2304      	movs	r3, #4
 800d0f6:	77fb      	strb	r3, [r7, #31]
 800d0f8:	e112      	b.n	800d320 <UART_SetConfig+0x348>
 800d0fa:	2308      	movs	r3, #8
 800d0fc:	77fb      	strb	r3, [r7, #31]
 800d0fe:	e10f      	b.n	800d320 <UART_SetConfig+0x348>
 800d100:	2310      	movs	r3, #16
 800d102:	77fb      	strb	r3, [r7, #31]
 800d104:	e10c      	b.n	800d320 <UART_SetConfig+0x348>
 800d106:	687b      	ldr	r3, [r7, #4]
 800d108:	681b      	ldr	r3, [r3, #0]
 800d10a:	4a68      	ldr	r2, [pc, #416]	; (800d2ac <UART_SetConfig+0x2d4>)
 800d10c:	4293      	cmp	r3, r2
 800d10e:	d120      	bne.n	800d152 <UART_SetConfig+0x17a>
 800d110:	4b64      	ldr	r3, [pc, #400]	; (800d2a4 <UART_SetConfig+0x2cc>)
 800d112:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d116:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800d11a:	2b30      	cmp	r3, #48	; 0x30
 800d11c:	d013      	beq.n	800d146 <UART_SetConfig+0x16e>
 800d11e:	2b30      	cmp	r3, #48	; 0x30
 800d120:	d814      	bhi.n	800d14c <UART_SetConfig+0x174>
 800d122:	2b20      	cmp	r3, #32
 800d124:	d009      	beq.n	800d13a <UART_SetConfig+0x162>
 800d126:	2b20      	cmp	r3, #32
 800d128:	d810      	bhi.n	800d14c <UART_SetConfig+0x174>
 800d12a:	2b00      	cmp	r3, #0
 800d12c:	d002      	beq.n	800d134 <UART_SetConfig+0x15c>
 800d12e:	2b10      	cmp	r3, #16
 800d130:	d006      	beq.n	800d140 <UART_SetConfig+0x168>
 800d132:	e00b      	b.n	800d14c <UART_SetConfig+0x174>
 800d134:	2300      	movs	r3, #0
 800d136:	77fb      	strb	r3, [r7, #31]
 800d138:	e0f2      	b.n	800d320 <UART_SetConfig+0x348>
 800d13a:	2302      	movs	r3, #2
 800d13c:	77fb      	strb	r3, [r7, #31]
 800d13e:	e0ef      	b.n	800d320 <UART_SetConfig+0x348>
 800d140:	2304      	movs	r3, #4
 800d142:	77fb      	strb	r3, [r7, #31]
 800d144:	e0ec      	b.n	800d320 <UART_SetConfig+0x348>
 800d146:	2308      	movs	r3, #8
 800d148:	77fb      	strb	r3, [r7, #31]
 800d14a:	e0e9      	b.n	800d320 <UART_SetConfig+0x348>
 800d14c:	2310      	movs	r3, #16
 800d14e:	77fb      	strb	r3, [r7, #31]
 800d150:	e0e6      	b.n	800d320 <UART_SetConfig+0x348>
 800d152:	687b      	ldr	r3, [r7, #4]
 800d154:	681b      	ldr	r3, [r3, #0]
 800d156:	4a56      	ldr	r2, [pc, #344]	; (800d2b0 <UART_SetConfig+0x2d8>)
 800d158:	4293      	cmp	r3, r2
 800d15a:	d120      	bne.n	800d19e <UART_SetConfig+0x1c6>
 800d15c:	4b51      	ldr	r3, [pc, #324]	; (800d2a4 <UART_SetConfig+0x2cc>)
 800d15e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d162:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800d166:	2bc0      	cmp	r3, #192	; 0xc0
 800d168:	d013      	beq.n	800d192 <UART_SetConfig+0x1ba>
 800d16a:	2bc0      	cmp	r3, #192	; 0xc0
 800d16c:	d814      	bhi.n	800d198 <UART_SetConfig+0x1c0>
 800d16e:	2b80      	cmp	r3, #128	; 0x80
 800d170:	d009      	beq.n	800d186 <UART_SetConfig+0x1ae>
 800d172:	2b80      	cmp	r3, #128	; 0x80
 800d174:	d810      	bhi.n	800d198 <UART_SetConfig+0x1c0>
 800d176:	2b00      	cmp	r3, #0
 800d178:	d002      	beq.n	800d180 <UART_SetConfig+0x1a8>
 800d17a:	2b40      	cmp	r3, #64	; 0x40
 800d17c:	d006      	beq.n	800d18c <UART_SetConfig+0x1b4>
 800d17e:	e00b      	b.n	800d198 <UART_SetConfig+0x1c0>
 800d180:	2300      	movs	r3, #0
 800d182:	77fb      	strb	r3, [r7, #31]
 800d184:	e0cc      	b.n	800d320 <UART_SetConfig+0x348>
 800d186:	2302      	movs	r3, #2
 800d188:	77fb      	strb	r3, [r7, #31]
 800d18a:	e0c9      	b.n	800d320 <UART_SetConfig+0x348>
 800d18c:	2304      	movs	r3, #4
 800d18e:	77fb      	strb	r3, [r7, #31]
 800d190:	e0c6      	b.n	800d320 <UART_SetConfig+0x348>
 800d192:	2308      	movs	r3, #8
 800d194:	77fb      	strb	r3, [r7, #31]
 800d196:	e0c3      	b.n	800d320 <UART_SetConfig+0x348>
 800d198:	2310      	movs	r3, #16
 800d19a:	77fb      	strb	r3, [r7, #31]
 800d19c:	e0c0      	b.n	800d320 <UART_SetConfig+0x348>
 800d19e:	687b      	ldr	r3, [r7, #4]
 800d1a0:	681b      	ldr	r3, [r3, #0]
 800d1a2:	4a44      	ldr	r2, [pc, #272]	; (800d2b4 <UART_SetConfig+0x2dc>)
 800d1a4:	4293      	cmp	r3, r2
 800d1a6:	d125      	bne.n	800d1f4 <UART_SetConfig+0x21c>
 800d1a8:	4b3e      	ldr	r3, [pc, #248]	; (800d2a4 <UART_SetConfig+0x2cc>)
 800d1aa:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d1ae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800d1b2:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d1b6:	d017      	beq.n	800d1e8 <UART_SetConfig+0x210>
 800d1b8:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800d1bc:	d817      	bhi.n	800d1ee <UART_SetConfig+0x216>
 800d1be:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d1c2:	d00b      	beq.n	800d1dc <UART_SetConfig+0x204>
 800d1c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d1c8:	d811      	bhi.n	800d1ee <UART_SetConfig+0x216>
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	d003      	beq.n	800d1d6 <UART_SetConfig+0x1fe>
 800d1ce:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d1d2:	d006      	beq.n	800d1e2 <UART_SetConfig+0x20a>
 800d1d4:	e00b      	b.n	800d1ee <UART_SetConfig+0x216>
 800d1d6:	2300      	movs	r3, #0
 800d1d8:	77fb      	strb	r3, [r7, #31]
 800d1da:	e0a1      	b.n	800d320 <UART_SetConfig+0x348>
 800d1dc:	2302      	movs	r3, #2
 800d1de:	77fb      	strb	r3, [r7, #31]
 800d1e0:	e09e      	b.n	800d320 <UART_SetConfig+0x348>
 800d1e2:	2304      	movs	r3, #4
 800d1e4:	77fb      	strb	r3, [r7, #31]
 800d1e6:	e09b      	b.n	800d320 <UART_SetConfig+0x348>
 800d1e8:	2308      	movs	r3, #8
 800d1ea:	77fb      	strb	r3, [r7, #31]
 800d1ec:	e098      	b.n	800d320 <UART_SetConfig+0x348>
 800d1ee:	2310      	movs	r3, #16
 800d1f0:	77fb      	strb	r3, [r7, #31]
 800d1f2:	e095      	b.n	800d320 <UART_SetConfig+0x348>
 800d1f4:	687b      	ldr	r3, [r7, #4]
 800d1f6:	681b      	ldr	r3, [r3, #0]
 800d1f8:	4a2f      	ldr	r2, [pc, #188]	; (800d2b8 <UART_SetConfig+0x2e0>)
 800d1fa:	4293      	cmp	r3, r2
 800d1fc:	d125      	bne.n	800d24a <UART_SetConfig+0x272>
 800d1fe:	4b29      	ldr	r3, [pc, #164]	; (800d2a4 <UART_SetConfig+0x2cc>)
 800d200:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d204:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800d208:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d20c:	d017      	beq.n	800d23e <UART_SetConfig+0x266>
 800d20e:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800d212:	d817      	bhi.n	800d244 <UART_SetConfig+0x26c>
 800d214:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d218:	d00b      	beq.n	800d232 <UART_SetConfig+0x25a>
 800d21a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d21e:	d811      	bhi.n	800d244 <UART_SetConfig+0x26c>
 800d220:	2b00      	cmp	r3, #0
 800d222:	d003      	beq.n	800d22c <UART_SetConfig+0x254>
 800d224:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800d228:	d006      	beq.n	800d238 <UART_SetConfig+0x260>
 800d22a:	e00b      	b.n	800d244 <UART_SetConfig+0x26c>
 800d22c:	2301      	movs	r3, #1
 800d22e:	77fb      	strb	r3, [r7, #31]
 800d230:	e076      	b.n	800d320 <UART_SetConfig+0x348>
 800d232:	2302      	movs	r3, #2
 800d234:	77fb      	strb	r3, [r7, #31]
 800d236:	e073      	b.n	800d320 <UART_SetConfig+0x348>
 800d238:	2304      	movs	r3, #4
 800d23a:	77fb      	strb	r3, [r7, #31]
 800d23c:	e070      	b.n	800d320 <UART_SetConfig+0x348>
 800d23e:	2308      	movs	r3, #8
 800d240:	77fb      	strb	r3, [r7, #31]
 800d242:	e06d      	b.n	800d320 <UART_SetConfig+0x348>
 800d244:	2310      	movs	r3, #16
 800d246:	77fb      	strb	r3, [r7, #31]
 800d248:	e06a      	b.n	800d320 <UART_SetConfig+0x348>
 800d24a:	687b      	ldr	r3, [r7, #4]
 800d24c:	681b      	ldr	r3, [r3, #0]
 800d24e:	4a1b      	ldr	r2, [pc, #108]	; (800d2bc <UART_SetConfig+0x2e4>)
 800d250:	4293      	cmp	r3, r2
 800d252:	d138      	bne.n	800d2c6 <UART_SetConfig+0x2ee>
 800d254:	4b13      	ldr	r3, [pc, #76]	; (800d2a4 <UART_SetConfig+0x2cc>)
 800d256:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d25a:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800d25e:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d262:	d017      	beq.n	800d294 <UART_SetConfig+0x2bc>
 800d264:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800d268:	d82a      	bhi.n	800d2c0 <UART_SetConfig+0x2e8>
 800d26a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d26e:	d00b      	beq.n	800d288 <UART_SetConfig+0x2b0>
 800d270:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800d274:	d824      	bhi.n	800d2c0 <UART_SetConfig+0x2e8>
 800d276:	2b00      	cmp	r3, #0
 800d278:	d003      	beq.n	800d282 <UART_SetConfig+0x2aa>
 800d27a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d27e:	d006      	beq.n	800d28e <UART_SetConfig+0x2b6>
 800d280:	e01e      	b.n	800d2c0 <UART_SetConfig+0x2e8>
 800d282:	2300      	movs	r3, #0
 800d284:	77fb      	strb	r3, [r7, #31]
 800d286:	e04b      	b.n	800d320 <UART_SetConfig+0x348>
 800d288:	2302      	movs	r3, #2
 800d28a:	77fb      	strb	r3, [r7, #31]
 800d28c:	e048      	b.n	800d320 <UART_SetConfig+0x348>
 800d28e:	2304      	movs	r3, #4
 800d290:	77fb      	strb	r3, [r7, #31]
 800d292:	e045      	b.n	800d320 <UART_SetConfig+0x348>
 800d294:	2308      	movs	r3, #8
 800d296:	77fb      	strb	r3, [r7, #31]
 800d298:	e042      	b.n	800d320 <UART_SetConfig+0x348>
 800d29a:	bf00      	nop
 800d29c:	efff69f3 	.word	0xefff69f3
 800d2a0:	40011000 	.word	0x40011000
 800d2a4:	40023800 	.word	0x40023800
 800d2a8:	40004400 	.word	0x40004400
 800d2ac:	40004800 	.word	0x40004800
 800d2b0:	40004c00 	.word	0x40004c00
 800d2b4:	40005000 	.word	0x40005000
 800d2b8:	40011400 	.word	0x40011400
 800d2bc:	40007800 	.word	0x40007800
 800d2c0:	2310      	movs	r3, #16
 800d2c2:	77fb      	strb	r3, [r7, #31]
 800d2c4:	e02c      	b.n	800d320 <UART_SetConfig+0x348>
 800d2c6:	687b      	ldr	r3, [r7, #4]
 800d2c8:	681b      	ldr	r3, [r3, #0]
 800d2ca:	4a72      	ldr	r2, [pc, #456]	; (800d494 <UART_SetConfig+0x4bc>)
 800d2cc:	4293      	cmp	r3, r2
 800d2ce:	d125      	bne.n	800d31c <UART_SetConfig+0x344>
 800d2d0:	4b71      	ldr	r3, [pc, #452]	; (800d498 <UART_SetConfig+0x4c0>)
 800d2d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800d2d6:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800d2da:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d2de:	d017      	beq.n	800d310 <UART_SetConfig+0x338>
 800d2e0:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800d2e4:	d817      	bhi.n	800d316 <UART_SetConfig+0x33e>
 800d2e6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d2ea:	d00b      	beq.n	800d304 <UART_SetConfig+0x32c>
 800d2ec:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d2f0:	d811      	bhi.n	800d316 <UART_SetConfig+0x33e>
 800d2f2:	2b00      	cmp	r3, #0
 800d2f4:	d003      	beq.n	800d2fe <UART_SetConfig+0x326>
 800d2f6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800d2fa:	d006      	beq.n	800d30a <UART_SetConfig+0x332>
 800d2fc:	e00b      	b.n	800d316 <UART_SetConfig+0x33e>
 800d2fe:	2300      	movs	r3, #0
 800d300:	77fb      	strb	r3, [r7, #31]
 800d302:	e00d      	b.n	800d320 <UART_SetConfig+0x348>
 800d304:	2302      	movs	r3, #2
 800d306:	77fb      	strb	r3, [r7, #31]
 800d308:	e00a      	b.n	800d320 <UART_SetConfig+0x348>
 800d30a:	2304      	movs	r3, #4
 800d30c:	77fb      	strb	r3, [r7, #31]
 800d30e:	e007      	b.n	800d320 <UART_SetConfig+0x348>
 800d310:	2308      	movs	r3, #8
 800d312:	77fb      	strb	r3, [r7, #31]
 800d314:	e004      	b.n	800d320 <UART_SetConfig+0x348>
 800d316:	2310      	movs	r3, #16
 800d318:	77fb      	strb	r3, [r7, #31]
 800d31a:	e001      	b.n	800d320 <UART_SetConfig+0x348>
 800d31c:	2310      	movs	r3, #16
 800d31e:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800d320:	687b      	ldr	r3, [r7, #4]
 800d322:	69db      	ldr	r3, [r3, #28]
 800d324:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800d328:	d15b      	bne.n	800d3e2 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800d32a:	7ffb      	ldrb	r3, [r7, #31]
 800d32c:	2b08      	cmp	r3, #8
 800d32e:	d828      	bhi.n	800d382 <UART_SetConfig+0x3aa>
 800d330:	a201      	add	r2, pc, #4	; (adr r2, 800d338 <UART_SetConfig+0x360>)
 800d332:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d336:	bf00      	nop
 800d338:	0800d35d 	.word	0x0800d35d
 800d33c:	0800d365 	.word	0x0800d365
 800d340:	0800d36d 	.word	0x0800d36d
 800d344:	0800d383 	.word	0x0800d383
 800d348:	0800d373 	.word	0x0800d373
 800d34c:	0800d383 	.word	0x0800d383
 800d350:	0800d383 	.word	0x0800d383
 800d354:	0800d383 	.word	0x0800d383
 800d358:	0800d37b 	.word	0x0800d37b
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d35c:	f7fc f986 	bl	800966c <HAL_RCC_GetPCLK1Freq>
 800d360:	61b8      	str	r0, [r7, #24]
        break;
 800d362:	e013      	b.n	800d38c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d364:	f7fc f996 	bl	8009694 <HAL_RCC_GetPCLK2Freq>
 800d368:	61b8      	str	r0, [r7, #24]
        break;
 800d36a:	e00f      	b.n	800d38c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d36c:	4b4b      	ldr	r3, [pc, #300]	; (800d49c <UART_SetConfig+0x4c4>)
 800d36e:	61bb      	str	r3, [r7, #24]
        break;
 800d370:	e00c      	b.n	800d38c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d372:	f7fc f869 	bl	8009448 <HAL_RCC_GetSysClockFreq>
 800d376:	61b8      	str	r0, [r7, #24]
        break;
 800d378:	e008      	b.n	800d38c <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d37a:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d37e:	61bb      	str	r3, [r7, #24]
        break;
 800d380:	e004      	b.n	800d38c <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800d382:	2300      	movs	r3, #0
 800d384:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800d386:	2301      	movs	r3, #1
 800d388:	77bb      	strb	r3, [r7, #30]
        break;
 800d38a:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800d38c:	69bb      	ldr	r3, [r7, #24]
 800d38e:	2b00      	cmp	r3, #0
 800d390:	d074      	beq.n	800d47c <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800d392:	69bb      	ldr	r3, [r7, #24]
 800d394:	005a      	lsls	r2, r3, #1
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	685b      	ldr	r3, [r3, #4]
 800d39a:	085b      	lsrs	r3, r3, #1
 800d39c:	441a      	add	r2, r3
 800d39e:	687b      	ldr	r3, [r7, #4]
 800d3a0:	685b      	ldr	r3, [r3, #4]
 800d3a2:	fbb2 f3f3 	udiv	r3, r2, r3
 800d3a6:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d3a8:	693b      	ldr	r3, [r7, #16]
 800d3aa:	2b0f      	cmp	r3, #15
 800d3ac:	d916      	bls.n	800d3dc <UART_SetConfig+0x404>
 800d3ae:	693b      	ldr	r3, [r7, #16]
 800d3b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d3b4:	d212      	bcs.n	800d3dc <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800d3b6:	693b      	ldr	r3, [r7, #16]
 800d3b8:	b29b      	uxth	r3, r3
 800d3ba:	f023 030f 	bic.w	r3, r3, #15
 800d3be:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800d3c0:	693b      	ldr	r3, [r7, #16]
 800d3c2:	085b      	lsrs	r3, r3, #1
 800d3c4:	b29b      	uxth	r3, r3
 800d3c6:	f003 0307 	and.w	r3, r3, #7
 800d3ca:	b29a      	uxth	r2, r3
 800d3cc:	89fb      	ldrh	r3, [r7, #14]
 800d3ce:	4313      	orrs	r3, r2
 800d3d0:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800d3d2:	687b      	ldr	r3, [r7, #4]
 800d3d4:	681b      	ldr	r3, [r3, #0]
 800d3d6:	89fa      	ldrh	r2, [r7, #14]
 800d3d8:	60da      	str	r2, [r3, #12]
 800d3da:	e04f      	b.n	800d47c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800d3dc:	2301      	movs	r3, #1
 800d3de:	77bb      	strb	r3, [r7, #30]
 800d3e0:	e04c      	b.n	800d47c <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800d3e2:	7ffb      	ldrb	r3, [r7, #31]
 800d3e4:	2b08      	cmp	r3, #8
 800d3e6:	d828      	bhi.n	800d43a <UART_SetConfig+0x462>
 800d3e8:	a201      	add	r2, pc, #4	; (adr r2, 800d3f0 <UART_SetConfig+0x418>)
 800d3ea:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800d3ee:	bf00      	nop
 800d3f0:	0800d415 	.word	0x0800d415
 800d3f4:	0800d41d 	.word	0x0800d41d
 800d3f8:	0800d425 	.word	0x0800d425
 800d3fc:	0800d43b 	.word	0x0800d43b
 800d400:	0800d42b 	.word	0x0800d42b
 800d404:	0800d43b 	.word	0x0800d43b
 800d408:	0800d43b 	.word	0x0800d43b
 800d40c:	0800d43b 	.word	0x0800d43b
 800d410:	0800d433 	.word	0x0800d433
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800d414:	f7fc f92a 	bl	800966c <HAL_RCC_GetPCLK1Freq>
 800d418:	61b8      	str	r0, [r7, #24]
        break;
 800d41a:	e013      	b.n	800d444 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800d41c:	f7fc f93a 	bl	8009694 <HAL_RCC_GetPCLK2Freq>
 800d420:	61b8      	str	r0, [r7, #24]
        break;
 800d422:	e00f      	b.n	800d444 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800d424:	4b1d      	ldr	r3, [pc, #116]	; (800d49c <UART_SetConfig+0x4c4>)
 800d426:	61bb      	str	r3, [r7, #24]
        break;
 800d428:	e00c      	b.n	800d444 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800d42a:	f7fc f80d 	bl	8009448 <HAL_RCC_GetSysClockFreq>
 800d42e:	61b8      	str	r0, [r7, #24]
        break;
 800d430:	e008      	b.n	800d444 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800d432:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800d436:	61bb      	str	r3, [r7, #24]
        break;
 800d438:	e004      	b.n	800d444 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800d43a:	2300      	movs	r3, #0
 800d43c:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800d43e:	2301      	movs	r3, #1
 800d440:	77bb      	strb	r3, [r7, #30]
        break;
 800d442:	bf00      	nop
    }

    if (pclk != 0U)
 800d444:	69bb      	ldr	r3, [r7, #24]
 800d446:	2b00      	cmp	r3, #0
 800d448:	d018      	beq.n	800d47c <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800d44a:	687b      	ldr	r3, [r7, #4]
 800d44c:	685b      	ldr	r3, [r3, #4]
 800d44e:	085a      	lsrs	r2, r3, #1
 800d450:	69bb      	ldr	r3, [r7, #24]
 800d452:	441a      	add	r2, r3
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	685b      	ldr	r3, [r3, #4]
 800d458:	fbb2 f3f3 	udiv	r3, r2, r3
 800d45c:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800d45e:	693b      	ldr	r3, [r7, #16]
 800d460:	2b0f      	cmp	r3, #15
 800d462:	d909      	bls.n	800d478 <UART_SetConfig+0x4a0>
 800d464:	693b      	ldr	r3, [r7, #16]
 800d466:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d46a:	d205      	bcs.n	800d478 <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800d46c:	693b      	ldr	r3, [r7, #16]
 800d46e:	b29a      	uxth	r2, r3
 800d470:	687b      	ldr	r3, [r7, #4]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	60da      	str	r2, [r3, #12]
 800d476:	e001      	b.n	800d47c <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800d478:	2301      	movs	r3, #1
 800d47a:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800d47c:	687b      	ldr	r3, [r7, #4]
 800d47e:	2200      	movs	r2, #0
 800d480:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800d482:	687b      	ldr	r3, [r7, #4]
 800d484:	2200      	movs	r2, #0
 800d486:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800d488:	7fbb      	ldrb	r3, [r7, #30]
}
 800d48a:	4618      	mov	r0, r3
 800d48c:	3720      	adds	r7, #32
 800d48e:	46bd      	mov	sp, r7
 800d490:	bd80      	pop	{r7, pc}
 800d492:	bf00      	nop
 800d494:	40007c00 	.word	0x40007c00
 800d498:	40023800 	.word	0x40023800
 800d49c:	00f42400 	.word	0x00f42400

0800d4a0 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800d4a0:	b480      	push	{r7}
 800d4a2:	b083      	sub	sp, #12
 800d4a4:	af00      	add	r7, sp, #0
 800d4a6:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800d4a8:	687b      	ldr	r3, [r7, #4]
 800d4aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ac:	f003 0308 	and.w	r3, r3, #8
 800d4b0:	2b00      	cmp	r3, #0
 800d4b2:	d00a      	beq.n	800d4ca <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800d4b4:	687b      	ldr	r3, [r7, #4]
 800d4b6:	681b      	ldr	r3, [r3, #0]
 800d4b8:	685b      	ldr	r3, [r3, #4]
 800d4ba:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800d4be:	687b      	ldr	r3, [r7, #4]
 800d4c0:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800d4c2:	687b      	ldr	r3, [r7, #4]
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	430a      	orrs	r2, r1
 800d4c8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4ce:	f003 0301 	and.w	r3, r3, #1
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d00a      	beq.n	800d4ec <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	681b      	ldr	r3, [r3, #0]
 800d4da:	685b      	ldr	r3, [r3, #4]
 800d4dc:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800d4e0:	687b      	ldr	r3, [r7, #4]
 800d4e2:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800d4e4:	687b      	ldr	r3, [r7, #4]
 800d4e6:	681b      	ldr	r3, [r3, #0]
 800d4e8:	430a      	orrs	r2, r1
 800d4ea:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800d4ec:	687b      	ldr	r3, [r7, #4]
 800d4ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d4f0:	f003 0302 	and.w	r3, r3, #2
 800d4f4:	2b00      	cmp	r3, #0
 800d4f6:	d00a      	beq.n	800d50e <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800d4f8:	687b      	ldr	r3, [r7, #4]
 800d4fa:	681b      	ldr	r3, [r3, #0]
 800d4fc:	685b      	ldr	r3, [r3, #4]
 800d4fe:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800d502:	687b      	ldr	r3, [r7, #4]
 800d504:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800d506:	687b      	ldr	r3, [r7, #4]
 800d508:	681b      	ldr	r3, [r3, #0]
 800d50a:	430a      	orrs	r2, r1
 800d50c:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800d50e:	687b      	ldr	r3, [r7, #4]
 800d510:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d512:	f003 0304 	and.w	r3, r3, #4
 800d516:	2b00      	cmp	r3, #0
 800d518:	d00a      	beq.n	800d530 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800d51a:	687b      	ldr	r3, [r7, #4]
 800d51c:	681b      	ldr	r3, [r3, #0]
 800d51e:	685b      	ldr	r3, [r3, #4]
 800d520:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800d524:	687b      	ldr	r3, [r7, #4]
 800d526:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	681b      	ldr	r3, [r3, #0]
 800d52c:	430a      	orrs	r2, r1
 800d52e:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800d530:	687b      	ldr	r3, [r7, #4]
 800d532:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d534:	f003 0310 	and.w	r3, r3, #16
 800d538:	2b00      	cmp	r3, #0
 800d53a:	d00a      	beq.n	800d552 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800d53c:	687b      	ldr	r3, [r7, #4]
 800d53e:	681b      	ldr	r3, [r3, #0]
 800d540:	689b      	ldr	r3, [r3, #8]
 800d542:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800d546:	687b      	ldr	r3, [r7, #4]
 800d548:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800d54a:	687b      	ldr	r3, [r7, #4]
 800d54c:	681b      	ldr	r3, [r3, #0]
 800d54e:	430a      	orrs	r2, r1
 800d550:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800d552:	687b      	ldr	r3, [r7, #4]
 800d554:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d556:	f003 0320 	and.w	r3, r3, #32
 800d55a:	2b00      	cmp	r3, #0
 800d55c:	d00a      	beq.n	800d574 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800d55e:	687b      	ldr	r3, [r7, #4]
 800d560:	681b      	ldr	r3, [r3, #0]
 800d562:	689b      	ldr	r3, [r3, #8]
 800d564:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800d568:	687b      	ldr	r3, [r7, #4]
 800d56a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800d56c:	687b      	ldr	r3, [r7, #4]
 800d56e:	681b      	ldr	r3, [r3, #0]
 800d570:	430a      	orrs	r2, r1
 800d572:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800d574:	687b      	ldr	r3, [r7, #4]
 800d576:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d578:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d57c:	2b00      	cmp	r3, #0
 800d57e:	d01a      	beq.n	800d5b6 <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800d580:	687b      	ldr	r3, [r7, #4]
 800d582:	681b      	ldr	r3, [r3, #0]
 800d584:	685b      	ldr	r3, [r3, #4]
 800d586:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800d58a:	687b      	ldr	r3, [r7, #4]
 800d58c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800d58e:	687b      	ldr	r3, [r7, #4]
 800d590:	681b      	ldr	r3, [r3, #0]
 800d592:	430a      	orrs	r2, r1
 800d594:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800d596:	687b      	ldr	r3, [r7, #4]
 800d598:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800d59a:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800d59e:	d10a      	bne.n	800d5b6 <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800d5a0:	687b      	ldr	r3, [r7, #4]
 800d5a2:	681b      	ldr	r3, [r3, #0]
 800d5a4:	685b      	ldr	r3, [r3, #4]
 800d5a6:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800d5ae:	687b      	ldr	r3, [r7, #4]
 800d5b0:	681b      	ldr	r3, [r3, #0]
 800d5b2:	430a      	orrs	r2, r1
 800d5b4:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800d5b6:	687b      	ldr	r3, [r7, #4]
 800d5b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d5ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d5be:	2b00      	cmp	r3, #0
 800d5c0:	d00a      	beq.n	800d5d8 <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800d5c2:	687b      	ldr	r3, [r7, #4]
 800d5c4:	681b      	ldr	r3, [r3, #0]
 800d5c6:	685b      	ldr	r3, [r3, #4]
 800d5c8:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800d5cc:	687b      	ldr	r3, [r7, #4]
 800d5ce:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800d5d0:	687b      	ldr	r3, [r7, #4]
 800d5d2:	681b      	ldr	r3, [r3, #0]
 800d5d4:	430a      	orrs	r2, r1
 800d5d6:	605a      	str	r2, [r3, #4]
  }
}
 800d5d8:	bf00      	nop
 800d5da:	370c      	adds	r7, #12
 800d5dc:	46bd      	mov	sp, r7
 800d5de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d5e2:	4770      	bx	lr

0800d5e4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800d5e4:	b580      	push	{r7, lr}
 800d5e6:	b08c      	sub	sp, #48	; 0x30
 800d5e8:	af02      	add	r7, sp, #8
 800d5ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d5ec:	687b      	ldr	r3, [r7, #4]
 800d5ee:	2200      	movs	r2, #0
 800d5f0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800d5f4:	f7f5 ff22 	bl	800343c <HAL_GetTick>
 800d5f8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	681b      	ldr	r3, [r3, #0]
 800d5fe:	681b      	ldr	r3, [r3, #0]
 800d600:	f003 0308 	and.w	r3, r3, #8
 800d604:	2b08      	cmp	r3, #8
 800d606:	d12e      	bne.n	800d666 <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800d608:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800d60c:	9300      	str	r3, [sp, #0]
 800d60e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d610:	2200      	movs	r2, #0
 800d612:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800d616:	6878      	ldr	r0, [r7, #4]
 800d618:	f000 f83b 	bl	800d692 <UART_WaitOnFlagUntilTimeout>
 800d61c:	4603      	mov	r3, r0
 800d61e:	2b00      	cmp	r3, #0
 800d620:	d021      	beq.n	800d666 <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800d622:	687b      	ldr	r3, [r7, #4]
 800d624:	681b      	ldr	r3, [r3, #0]
 800d626:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d628:	693b      	ldr	r3, [r7, #16]
 800d62a:	e853 3f00 	ldrex	r3, [r3]
 800d62e:	60fb      	str	r3, [r7, #12]
   return(result);
 800d630:	68fb      	ldr	r3, [r7, #12]
 800d632:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d636:	623b      	str	r3, [r7, #32]
 800d638:	687b      	ldr	r3, [r7, #4]
 800d63a:	681b      	ldr	r3, [r3, #0]
 800d63c:	461a      	mov	r2, r3
 800d63e:	6a3b      	ldr	r3, [r7, #32]
 800d640:	61fb      	str	r3, [r7, #28]
 800d642:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d644:	69b9      	ldr	r1, [r7, #24]
 800d646:	69fa      	ldr	r2, [r7, #28]
 800d648:	e841 2300 	strex	r3, r2, [r1]
 800d64c:	617b      	str	r3, [r7, #20]
   return(result);
 800d64e:	697b      	ldr	r3, [r7, #20]
 800d650:	2b00      	cmp	r3, #0
 800d652:	d1e6      	bne.n	800d622 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800d654:	687b      	ldr	r3, [r7, #4]
 800d656:	2220      	movs	r2, #32
 800d658:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800d65a:	687b      	ldr	r3, [r7, #4]
 800d65c:	2200      	movs	r2, #0
 800d65e:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800d662:	2303      	movs	r3, #3
 800d664:	e011      	b.n	800d68a <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	2220      	movs	r2, #32
 800d66a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800d66c:	687b      	ldr	r3, [r7, #4]
 800d66e:	2220      	movs	r2, #32
 800d670:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d674:	687b      	ldr	r3, [r7, #4]
 800d676:	2200      	movs	r2, #0
 800d678:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d67a:	687b      	ldr	r3, [r7, #4]
 800d67c:	2200      	movs	r2, #0
 800d67e:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800d680:	687b      	ldr	r3, [r7, #4]
 800d682:	2200      	movs	r2, #0
 800d684:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800d688:	2300      	movs	r3, #0
}
 800d68a:	4618      	mov	r0, r3
 800d68c:	3728      	adds	r7, #40	; 0x28
 800d68e:	46bd      	mov	sp, r7
 800d690:	bd80      	pop	{r7, pc}

0800d692 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800d692:	b580      	push	{r7, lr}
 800d694:	b084      	sub	sp, #16
 800d696:	af00      	add	r7, sp, #0
 800d698:	60f8      	str	r0, [r7, #12]
 800d69a:	60b9      	str	r1, [r7, #8]
 800d69c:	603b      	str	r3, [r7, #0]
 800d69e:	4613      	mov	r3, r2
 800d6a0:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d6a2:	e04f      	b.n	800d744 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800d6a4:	69bb      	ldr	r3, [r7, #24]
 800d6a6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800d6aa:	d04b      	beq.n	800d744 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800d6ac:	f7f5 fec6 	bl	800343c <HAL_GetTick>
 800d6b0:	4602      	mov	r2, r0
 800d6b2:	683b      	ldr	r3, [r7, #0]
 800d6b4:	1ad3      	subs	r3, r2, r3
 800d6b6:	69ba      	ldr	r2, [r7, #24]
 800d6b8:	429a      	cmp	r2, r3
 800d6ba:	d302      	bcc.n	800d6c2 <UART_WaitOnFlagUntilTimeout+0x30>
 800d6bc:	69bb      	ldr	r3, [r7, #24]
 800d6be:	2b00      	cmp	r3, #0
 800d6c0:	d101      	bne.n	800d6c6 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800d6c2:	2303      	movs	r3, #3
 800d6c4:	e04e      	b.n	800d764 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800d6c6:	68fb      	ldr	r3, [r7, #12]
 800d6c8:	681b      	ldr	r3, [r3, #0]
 800d6ca:	681b      	ldr	r3, [r3, #0]
 800d6cc:	f003 0304 	and.w	r3, r3, #4
 800d6d0:	2b00      	cmp	r3, #0
 800d6d2:	d037      	beq.n	800d744 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d6d4:	68bb      	ldr	r3, [r7, #8]
 800d6d6:	2b80      	cmp	r3, #128	; 0x80
 800d6d8:	d034      	beq.n	800d744 <UART_WaitOnFlagUntilTimeout+0xb2>
 800d6da:	68bb      	ldr	r3, [r7, #8]
 800d6dc:	2b40      	cmp	r3, #64	; 0x40
 800d6de:	d031      	beq.n	800d744 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800d6e0:	68fb      	ldr	r3, [r7, #12]
 800d6e2:	681b      	ldr	r3, [r3, #0]
 800d6e4:	69db      	ldr	r3, [r3, #28]
 800d6e6:	f003 0308 	and.w	r3, r3, #8
 800d6ea:	2b08      	cmp	r3, #8
 800d6ec:	d110      	bne.n	800d710 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	681b      	ldr	r3, [r3, #0]
 800d6f2:	2208      	movs	r2, #8
 800d6f4:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d6f6:	68f8      	ldr	r0, [r7, #12]
 800d6f8:	f000 f9c4 	bl	800da84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800d6fc:	68fb      	ldr	r3, [r7, #12]
 800d6fe:	2208      	movs	r2, #8
 800d700:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	2200      	movs	r2, #0
 800d708:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800d70c:	2301      	movs	r3, #1
 800d70e:	e029      	b.n	800d764 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	681b      	ldr	r3, [r3, #0]
 800d714:	69db      	ldr	r3, [r3, #28]
 800d716:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800d71a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800d71e:	d111      	bne.n	800d744 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800d720:	68fb      	ldr	r3, [r7, #12]
 800d722:	681b      	ldr	r3, [r3, #0]
 800d724:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800d728:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800d72a:	68f8      	ldr	r0, [r7, #12]
 800d72c:	f000 f9aa 	bl	800da84 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800d730:	68fb      	ldr	r3, [r7, #12]
 800d732:	2220      	movs	r2, #32
 800d734:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	2200      	movs	r2, #0
 800d73c:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800d740:	2303      	movs	r3, #3
 800d742:	e00f      	b.n	800d764 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800d744:	68fb      	ldr	r3, [r7, #12]
 800d746:	681b      	ldr	r3, [r3, #0]
 800d748:	69da      	ldr	r2, [r3, #28]
 800d74a:	68bb      	ldr	r3, [r7, #8]
 800d74c:	4013      	ands	r3, r2
 800d74e:	68ba      	ldr	r2, [r7, #8]
 800d750:	429a      	cmp	r2, r3
 800d752:	bf0c      	ite	eq
 800d754:	2301      	moveq	r3, #1
 800d756:	2300      	movne	r3, #0
 800d758:	b2db      	uxtb	r3, r3
 800d75a:	461a      	mov	r2, r3
 800d75c:	79fb      	ldrb	r3, [r7, #7]
 800d75e:	429a      	cmp	r2, r3
 800d760:	d0a0      	beq.n	800d6a4 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800d762:	2300      	movs	r3, #0
}
 800d764:	4618      	mov	r0, r3
 800d766:	3710      	adds	r7, #16
 800d768:	46bd      	mov	sp, r7
 800d76a:	bd80      	pop	{r7, pc}

0800d76c <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d76c:	b480      	push	{r7}
 800d76e:	b097      	sub	sp, #92	; 0x5c
 800d770:	af00      	add	r7, sp, #0
 800d772:	60f8      	str	r0, [r7, #12]
 800d774:	60b9      	str	r1, [r7, #8]
 800d776:	4613      	mov	r3, r2
 800d778:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800d77a:	68fb      	ldr	r3, [r7, #12]
 800d77c:	68ba      	ldr	r2, [r7, #8]
 800d77e:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800d780:	68fb      	ldr	r3, [r7, #12]
 800d782:	88fa      	ldrh	r2, [r7, #6]
 800d784:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800d788:	68fb      	ldr	r3, [r7, #12]
 800d78a:	88fa      	ldrh	r2, [r7, #6]
 800d78c:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800d790:	68fb      	ldr	r3, [r7, #12]
 800d792:	2200      	movs	r2, #0
 800d794:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800d796:	68fb      	ldr	r3, [r7, #12]
 800d798:	689b      	ldr	r3, [r3, #8]
 800d79a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d79e:	d10e      	bne.n	800d7be <UART_Start_Receive_IT+0x52>
 800d7a0:	68fb      	ldr	r3, [r7, #12]
 800d7a2:	691b      	ldr	r3, [r3, #16]
 800d7a4:	2b00      	cmp	r3, #0
 800d7a6:	d105      	bne.n	800d7b4 <UART_Start_Receive_IT+0x48>
 800d7a8:	68fb      	ldr	r3, [r7, #12]
 800d7aa:	f240 12ff 	movw	r2, #511	; 0x1ff
 800d7ae:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d7b2:	e02d      	b.n	800d810 <UART_Start_Receive_IT+0xa4>
 800d7b4:	68fb      	ldr	r3, [r7, #12]
 800d7b6:	22ff      	movs	r2, #255	; 0xff
 800d7b8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d7bc:	e028      	b.n	800d810 <UART_Start_Receive_IT+0xa4>
 800d7be:	68fb      	ldr	r3, [r7, #12]
 800d7c0:	689b      	ldr	r3, [r3, #8]
 800d7c2:	2b00      	cmp	r3, #0
 800d7c4:	d10d      	bne.n	800d7e2 <UART_Start_Receive_IT+0x76>
 800d7c6:	68fb      	ldr	r3, [r7, #12]
 800d7c8:	691b      	ldr	r3, [r3, #16]
 800d7ca:	2b00      	cmp	r3, #0
 800d7cc:	d104      	bne.n	800d7d8 <UART_Start_Receive_IT+0x6c>
 800d7ce:	68fb      	ldr	r3, [r7, #12]
 800d7d0:	22ff      	movs	r2, #255	; 0xff
 800d7d2:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d7d6:	e01b      	b.n	800d810 <UART_Start_Receive_IT+0xa4>
 800d7d8:	68fb      	ldr	r3, [r7, #12]
 800d7da:	227f      	movs	r2, #127	; 0x7f
 800d7dc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d7e0:	e016      	b.n	800d810 <UART_Start_Receive_IT+0xa4>
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	689b      	ldr	r3, [r3, #8]
 800d7e6:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800d7ea:	d10d      	bne.n	800d808 <UART_Start_Receive_IT+0x9c>
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	691b      	ldr	r3, [r3, #16]
 800d7f0:	2b00      	cmp	r3, #0
 800d7f2:	d104      	bne.n	800d7fe <UART_Start_Receive_IT+0x92>
 800d7f4:	68fb      	ldr	r3, [r7, #12]
 800d7f6:	227f      	movs	r2, #127	; 0x7f
 800d7f8:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d7fc:	e008      	b.n	800d810 <UART_Start_Receive_IT+0xa4>
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	223f      	movs	r2, #63	; 0x3f
 800d802:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800d806:	e003      	b.n	800d810 <UART_Start_Receive_IT+0xa4>
 800d808:	68fb      	ldr	r3, [r7, #12]
 800d80a:	2200      	movs	r2, #0
 800d80c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d810:	68fb      	ldr	r3, [r7, #12]
 800d812:	2200      	movs	r2, #0
 800d814:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d818:	68fb      	ldr	r3, [r7, #12]
 800d81a:	2222      	movs	r2, #34	; 0x22
 800d81c:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d820:	68fb      	ldr	r3, [r7, #12]
 800d822:	681b      	ldr	r3, [r3, #0]
 800d824:	3308      	adds	r3, #8
 800d826:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d828:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d82a:	e853 3f00 	ldrex	r3, [r3]
 800d82e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d830:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d832:	f043 0301 	orr.w	r3, r3, #1
 800d836:	657b      	str	r3, [r7, #84]	; 0x54
 800d838:	68fb      	ldr	r3, [r7, #12]
 800d83a:	681b      	ldr	r3, [r3, #0]
 800d83c:	3308      	adds	r3, #8
 800d83e:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d840:	64ba      	str	r2, [r7, #72]	; 0x48
 800d842:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d844:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d846:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d848:	e841 2300 	strex	r3, r2, [r1]
 800d84c:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d84e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d850:	2b00      	cmp	r3, #0
 800d852:	d1e5      	bne.n	800d820 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d854:	68fb      	ldr	r3, [r7, #12]
 800d856:	689b      	ldr	r3, [r3, #8]
 800d858:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d85c:	d107      	bne.n	800d86e <UART_Start_Receive_IT+0x102>
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	691b      	ldr	r3, [r3, #16]
 800d862:	2b00      	cmp	r3, #0
 800d864:	d103      	bne.n	800d86e <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800d866:	68fb      	ldr	r3, [r7, #12]
 800d868:	4a21      	ldr	r2, [pc, #132]	; (800d8f0 <UART_Start_Receive_IT+0x184>)
 800d86a:	669a      	str	r2, [r3, #104]	; 0x68
 800d86c:	e002      	b.n	800d874 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800d86e:	68fb      	ldr	r3, [r7, #12]
 800d870:	4a20      	ldr	r2, [pc, #128]	; (800d8f4 <UART_Start_Receive_IT+0x188>)
 800d872:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d874:	68fb      	ldr	r3, [r7, #12]
 800d876:	691b      	ldr	r3, [r3, #16]
 800d878:	2b00      	cmp	r3, #0
 800d87a:	d019      	beq.n	800d8b0 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800d87c:	68fb      	ldr	r3, [r7, #12]
 800d87e:	681b      	ldr	r3, [r3, #0]
 800d880:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d882:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d884:	e853 3f00 	ldrex	r3, [r3]
 800d888:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d88a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d88c:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800d890:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d892:	68fb      	ldr	r3, [r7, #12]
 800d894:	681b      	ldr	r3, [r3, #0]
 800d896:	461a      	mov	r2, r3
 800d898:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d89a:	637b      	str	r3, [r7, #52]	; 0x34
 800d89c:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d89e:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d8a0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d8a2:	e841 2300 	strex	r3, r2, [r1]
 800d8a6:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d8aa:	2b00      	cmp	r3, #0
 800d8ac:	d1e6      	bne.n	800d87c <UART_Start_Receive_IT+0x110>
 800d8ae:	e018      	b.n	800d8e2 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800d8b0:	68fb      	ldr	r3, [r7, #12]
 800d8b2:	681b      	ldr	r3, [r3, #0]
 800d8b4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d8b6:	697b      	ldr	r3, [r7, #20]
 800d8b8:	e853 3f00 	ldrex	r3, [r3]
 800d8bc:	613b      	str	r3, [r7, #16]
   return(result);
 800d8be:	693b      	ldr	r3, [r7, #16]
 800d8c0:	f043 0320 	orr.w	r3, r3, #32
 800d8c4:	653b      	str	r3, [r7, #80]	; 0x50
 800d8c6:	68fb      	ldr	r3, [r7, #12]
 800d8c8:	681b      	ldr	r3, [r3, #0]
 800d8ca:	461a      	mov	r2, r3
 800d8cc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d8ce:	623b      	str	r3, [r7, #32]
 800d8d0:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d8d2:	69f9      	ldr	r1, [r7, #28]
 800d8d4:	6a3a      	ldr	r2, [r7, #32]
 800d8d6:	e841 2300 	strex	r3, r2, [r1]
 800d8da:	61bb      	str	r3, [r7, #24]
   return(result);
 800d8dc:	69bb      	ldr	r3, [r7, #24]
 800d8de:	2b00      	cmp	r3, #0
 800d8e0:	d1e6      	bne.n	800d8b0 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800d8e2:	2300      	movs	r3, #0
}
 800d8e4:	4618      	mov	r0, r3
 800d8e6:	375c      	adds	r7, #92	; 0x5c
 800d8e8:	46bd      	mov	sp, r7
 800d8ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d8ee:	4770      	bx	lr
 800d8f0:	0800e269 	.word	0x0800e269
 800d8f4:	0800e0c1 	.word	0x0800e0c1

0800d8f8 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d8f8:	b580      	push	{r7, lr}
 800d8fa:	b096      	sub	sp, #88	; 0x58
 800d8fc:	af00      	add	r7, sp, #0
 800d8fe:	60f8      	str	r0, [r7, #12]
 800d900:	60b9      	str	r1, [r7, #8]
 800d902:	4613      	mov	r3, r2
 800d904:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d906:	68fb      	ldr	r3, [r7, #12]
 800d908:	68ba      	ldr	r2, [r7, #8]
 800d90a:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800d90c:	68fb      	ldr	r3, [r7, #12]
 800d90e:	88fa      	ldrh	r2, [r7, #6]
 800d910:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d914:	68fb      	ldr	r3, [r7, #12]
 800d916:	2200      	movs	r2, #0
 800d918:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d91c:	68fb      	ldr	r3, [r7, #12]
 800d91e:	2222      	movs	r2, #34	; 0x22
 800d920:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800d924:	68fb      	ldr	r3, [r7, #12]
 800d926:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d928:	2b00      	cmp	r3, #0
 800d92a:	d028      	beq.n	800d97e <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d92c:	68fb      	ldr	r3, [r7, #12]
 800d92e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d930:	4a3e      	ldr	r2, [pc, #248]	; (800da2c <UART_Start_Receive_DMA+0x134>)
 800d932:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d934:	68fb      	ldr	r3, [r7, #12]
 800d936:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d938:	4a3d      	ldr	r2, [pc, #244]	; (800da30 <UART_Start_Receive_DMA+0x138>)
 800d93a:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d93c:	68fb      	ldr	r3, [r7, #12]
 800d93e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d940:	4a3c      	ldr	r2, [pc, #240]	; (800da34 <UART_Start_Receive_DMA+0x13c>)
 800d942:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d944:	68fb      	ldr	r3, [r7, #12]
 800d946:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d948:	2200      	movs	r2, #0
 800d94a:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d94c:	68fb      	ldr	r3, [r7, #12]
 800d94e:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800d950:	68fb      	ldr	r3, [r7, #12]
 800d952:	681b      	ldr	r3, [r3, #0]
 800d954:	3324      	adds	r3, #36	; 0x24
 800d956:	4619      	mov	r1, r3
 800d958:	68fb      	ldr	r3, [r7, #12]
 800d95a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d95c:	461a      	mov	r2, r3
 800d95e:	88fb      	ldrh	r3, [r7, #6]
 800d960:	f7f6 fefc 	bl	800475c <HAL_DMA_Start_IT>
 800d964:	4603      	mov	r3, r0
 800d966:	2b00      	cmp	r3, #0
 800d968:	d009      	beq.n	800d97e <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d96a:	68fb      	ldr	r3, [r7, #12]
 800d96c:	2210      	movs	r2, #16
 800d96e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d972:	68fb      	ldr	r3, [r7, #12]
 800d974:	2220      	movs	r2, #32
 800d976:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800d97a:	2301      	movs	r3, #1
 800d97c:	e051      	b.n	800da22 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d97e:	68fb      	ldr	r3, [r7, #12]
 800d980:	691b      	ldr	r3, [r3, #16]
 800d982:	2b00      	cmp	r3, #0
 800d984:	d018      	beq.n	800d9b8 <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d986:	68fb      	ldr	r3, [r7, #12]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d98c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d98e:	e853 3f00 	ldrex	r3, [r3]
 800d992:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d994:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d996:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d99a:	657b      	str	r3, [r7, #84]	; 0x54
 800d99c:	68fb      	ldr	r3, [r7, #12]
 800d99e:	681b      	ldr	r3, [r3, #0]
 800d9a0:	461a      	mov	r2, r3
 800d9a2:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d9a4:	64bb      	str	r3, [r7, #72]	; 0x48
 800d9a6:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9a8:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d9aa:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d9ac:	e841 2300 	strex	r3, r2, [r1]
 800d9b0:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d9b2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d9b4:	2b00      	cmp	r3, #0
 800d9b6:	d1e6      	bne.n	800d986 <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d9b8:	68fb      	ldr	r3, [r7, #12]
 800d9ba:	681b      	ldr	r3, [r3, #0]
 800d9bc:	3308      	adds	r3, #8
 800d9be:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9c2:	e853 3f00 	ldrex	r3, [r3]
 800d9c6:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d9c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d9ca:	f043 0301 	orr.w	r3, r3, #1
 800d9ce:	653b      	str	r3, [r7, #80]	; 0x50
 800d9d0:	68fb      	ldr	r3, [r7, #12]
 800d9d2:	681b      	ldr	r3, [r3, #0]
 800d9d4:	3308      	adds	r3, #8
 800d9d6:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d9d8:	637a      	str	r2, [r7, #52]	; 0x34
 800d9da:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9dc:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d9de:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d9e0:	e841 2300 	strex	r3, r2, [r1]
 800d9e4:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d9e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d9e8:	2b00      	cmp	r3, #0
 800d9ea:	d1e5      	bne.n	800d9b8 <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d9ec:	68fb      	ldr	r3, [r7, #12]
 800d9ee:	681b      	ldr	r3, [r3, #0]
 800d9f0:	3308      	adds	r3, #8
 800d9f2:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9f4:	697b      	ldr	r3, [r7, #20]
 800d9f6:	e853 3f00 	ldrex	r3, [r3]
 800d9fa:	613b      	str	r3, [r7, #16]
   return(result);
 800d9fc:	693b      	ldr	r3, [r7, #16]
 800d9fe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800da02:	64fb      	str	r3, [r7, #76]	; 0x4c
 800da04:	68fb      	ldr	r3, [r7, #12]
 800da06:	681b      	ldr	r3, [r3, #0]
 800da08:	3308      	adds	r3, #8
 800da0a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800da0c:	623a      	str	r2, [r7, #32]
 800da0e:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da10:	69f9      	ldr	r1, [r7, #28]
 800da12:	6a3a      	ldr	r2, [r7, #32]
 800da14:	e841 2300 	strex	r3, r2, [r1]
 800da18:	61bb      	str	r3, [r7, #24]
   return(result);
 800da1a:	69bb      	ldr	r3, [r7, #24]
 800da1c:	2b00      	cmp	r3, #0
 800da1e:	d1e5      	bne.n	800d9ec <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800da20:	2300      	movs	r3, #0
}
 800da22:	4618      	mov	r0, r3
 800da24:	3758      	adds	r7, #88	; 0x58
 800da26:	46bd      	mov	sp, r7
 800da28:	bd80      	pop	{r7, pc}
 800da2a:	bf00      	nop
 800da2c:	0800dbff 	.word	0x0800dbff
 800da30:	0800dd27 	.word	0x0800dd27
 800da34:	0800dd65 	.word	0x0800dd65

0800da38 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800da38:	b480      	push	{r7}
 800da3a:	b089      	sub	sp, #36	; 0x24
 800da3c:	af00      	add	r7, sp, #0
 800da3e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800da40:	687b      	ldr	r3, [r7, #4]
 800da42:	681b      	ldr	r3, [r3, #0]
 800da44:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	e853 3f00 	ldrex	r3, [r3]
 800da4c:	60bb      	str	r3, [r7, #8]
   return(result);
 800da4e:	68bb      	ldr	r3, [r7, #8]
 800da50:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800da54:	61fb      	str	r3, [r7, #28]
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	681b      	ldr	r3, [r3, #0]
 800da5a:	461a      	mov	r2, r3
 800da5c:	69fb      	ldr	r3, [r7, #28]
 800da5e:	61bb      	str	r3, [r7, #24]
 800da60:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800da62:	6979      	ldr	r1, [r7, #20]
 800da64:	69ba      	ldr	r2, [r7, #24]
 800da66:	e841 2300 	strex	r3, r2, [r1]
 800da6a:	613b      	str	r3, [r7, #16]
   return(result);
 800da6c:	693b      	ldr	r3, [r7, #16]
 800da6e:	2b00      	cmp	r3, #0
 800da70:	d1e6      	bne.n	800da40 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800da72:	687b      	ldr	r3, [r7, #4]
 800da74:	2220      	movs	r2, #32
 800da76:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800da78:	bf00      	nop
 800da7a:	3724      	adds	r7, #36	; 0x24
 800da7c:	46bd      	mov	sp, r7
 800da7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800da82:	4770      	bx	lr

0800da84 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800da84:	b480      	push	{r7}
 800da86:	b095      	sub	sp, #84	; 0x54
 800da88:	af00      	add	r7, sp, #0
 800da8a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800da8c:	687b      	ldr	r3, [r7, #4]
 800da8e:	681b      	ldr	r3, [r3, #0]
 800da90:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800da92:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800da94:	e853 3f00 	ldrex	r3, [r3]
 800da98:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800da9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800da9c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800daa0:	64fb      	str	r3, [r7, #76]	; 0x4c
 800daa2:	687b      	ldr	r3, [r7, #4]
 800daa4:	681b      	ldr	r3, [r3, #0]
 800daa6:	461a      	mov	r2, r3
 800daa8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800daaa:	643b      	str	r3, [r7, #64]	; 0x40
 800daac:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800daae:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800dab0:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800dab2:	e841 2300 	strex	r3, r2, [r1]
 800dab6:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800dab8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800daba:	2b00      	cmp	r3, #0
 800dabc:	d1e6      	bne.n	800da8c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dabe:	687b      	ldr	r3, [r7, #4]
 800dac0:	681b      	ldr	r3, [r3, #0]
 800dac2:	3308      	adds	r3, #8
 800dac4:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dac6:	6a3b      	ldr	r3, [r7, #32]
 800dac8:	e853 3f00 	ldrex	r3, [r3]
 800dacc:	61fb      	str	r3, [r7, #28]
   return(result);
 800dace:	69fb      	ldr	r3, [r7, #28]
 800dad0:	f023 0301 	bic.w	r3, r3, #1
 800dad4:	64bb      	str	r3, [r7, #72]	; 0x48
 800dad6:	687b      	ldr	r3, [r7, #4]
 800dad8:	681b      	ldr	r3, [r3, #0]
 800dada:	3308      	adds	r3, #8
 800dadc:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800dade:	62fa      	str	r2, [r7, #44]	; 0x2c
 800dae0:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dae2:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800dae4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800dae6:	e841 2300 	strex	r3, r2, [r1]
 800daea:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800daec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800daee:	2b00      	cmp	r3, #0
 800daf0:	d1e5      	bne.n	800dabe <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800daf2:	687b      	ldr	r3, [r7, #4]
 800daf4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800daf6:	2b01      	cmp	r3, #1
 800daf8:	d118      	bne.n	800db2c <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dafa:	687b      	ldr	r3, [r7, #4]
 800dafc:	681b      	ldr	r3, [r3, #0]
 800dafe:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db00:	68fb      	ldr	r3, [r7, #12]
 800db02:	e853 3f00 	ldrex	r3, [r3]
 800db06:	60bb      	str	r3, [r7, #8]
   return(result);
 800db08:	68bb      	ldr	r3, [r7, #8]
 800db0a:	f023 0310 	bic.w	r3, r3, #16
 800db0e:	647b      	str	r3, [r7, #68]	; 0x44
 800db10:	687b      	ldr	r3, [r7, #4]
 800db12:	681b      	ldr	r3, [r3, #0]
 800db14:	461a      	mov	r2, r3
 800db16:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800db18:	61bb      	str	r3, [r7, #24]
 800db1a:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db1c:	6979      	ldr	r1, [r7, #20]
 800db1e:	69ba      	ldr	r2, [r7, #24]
 800db20:	e841 2300 	strex	r3, r2, [r1]
 800db24:	613b      	str	r3, [r7, #16]
   return(result);
 800db26:	693b      	ldr	r3, [r7, #16]
 800db28:	2b00      	cmp	r3, #0
 800db2a:	d1e6      	bne.n	800dafa <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800db2c:	687b      	ldr	r3, [r7, #4]
 800db2e:	2220      	movs	r2, #32
 800db30:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2200      	movs	r2, #0
 800db38:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800db3a:	687b      	ldr	r3, [r7, #4]
 800db3c:	2200      	movs	r2, #0
 800db3e:	669a      	str	r2, [r3, #104]	; 0x68
}
 800db40:	bf00      	nop
 800db42:	3754      	adds	r7, #84	; 0x54
 800db44:	46bd      	mov	sp, r7
 800db46:	f85d 7b04 	ldr.w	r7, [sp], #4
 800db4a:	4770      	bx	lr

0800db4c <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800db4c:	b580      	push	{r7, lr}
 800db4e:	b090      	sub	sp, #64	; 0x40
 800db50:	af00      	add	r7, sp, #0
 800db52:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800db54:	687b      	ldr	r3, [r7, #4]
 800db56:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800db58:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800db5a:	687b      	ldr	r3, [r7, #4]
 800db5c:	69db      	ldr	r3, [r3, #28]
 800db5e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800db62:	d037      	beq.n	800dbd4 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800db64:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db66:	2200      	movs	r2, #0
 800db68:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800db6c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db6e:	681b      	ldr	r3, [r3, #0]
 800db70:	3308      	adds	r3, #8
 800db72:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db74:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db76:	e853 3f00 	ldrex	r3, [r3]
 800db7a:	623b      	str	r3, [r7, #32]
   return(result);
 800db7c:	6a3b      	ldr	r3, [r7, #32]
 800db7e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800db82:	63bb      	str	r3, [r7, #56]	; 0x38
 800db84:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800db86:	681b      	ldr	r3, [r3, #0]
 800db88:	3308      	adds	r3, #8
 800db8a:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800db8c:	633a      	str	r2, [r7, #48]	; 0x30
 800db8e:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db90:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800db92:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800db94:	e841 2300 	strex	r3, r2, [r1]
 800db98:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800db9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800db9c:	2b00      	cmp	r3, #0
 800db9e:	d1e5      	bne.n	800db6c <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dba0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dba2:	681b      	ldr	r3, [r3, #0]
 800dba4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dba6:	693b      	ldr	r3, [r7, #16]
 800dba8:	e853 3f00 	ldrex	r3, [r3]
 800dbac:	60fb      	str	r3, [r7, #12]
   return(result);
 800dbae:	68fb      	ldr	r3, [r7, #12]
 800dbb0:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800dbb4:	637b      	str	r3, [r7, #52]	; 0x34
 800dbb6:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dbb8:	681b      	ldr	r3, [r3, #0]
 800dbba:	461a      	mov	r2, r3
 800dbbc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dbbe:	61fb      	str	r3, [r7, #28]
 800dbc0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dbc2:	69b9      	ldr	r1, [r7, #24]
 800dbc4:	69fa      	ldr	r2, [r7, #28]
 800dbc6:	e841 2300 	strex	r3, r2, [r1]
 800dbca:	617b      	str	r3, [r7, #20]
   return(result);
 800dbcc:	697b      	ldr	r3, [r7, #20]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d1e6      	bne.n	800dba0 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dbd2:	e002      	b.n	800dbda <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800dbd4:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800dbd6:	f7ff f9d5 	bl	800cf84 <HAL_UART_TxCpltCallback>
}
 800dbda:	bf00      	nop
 800dbdc:	3740      	adds	r7, #64	; 0x40
 800dbde:	46bd      	mov	sp, r7
 800dbe0:	bd80      	pop	{r7, pc}

0800dbe2 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dbe2:	b580      	push	{r7, lr}
 800dbe4:	b084      	sub	sp, #16
 800dbe6:	af00      	add	r7, sp, #0
 800dbe8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dbea:	687b      	ldr	r3, [r7, #4]
 800dbec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dbee:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800dbf0:	68f8      	ldr	r0, [r7, #12]
 800dbf2:	f7ff f9d1 	bl	800cf98 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800dbf6:	bf00      	nop
 800dbf8:	3710      	adds	r7, #16
 800dbfa:	46bd      	mov	sp, r7
 800dbfc:	bd80      	pop	{r7, pc}

0800dbfe <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800dbfe:	b580      	push	{r7, lr}
 800dc00:	b09c      	sub	sp, #112	; 0x70
 800dc02:	af00      	add	r7, sp, #0
 800dc04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dc06:	687b      	ldr	r3, [r7, #4]
 800dc08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dc0a:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800dc0c:	687b      	ldr	r3, [r7, #4]
 800dc0e:	69db      	ldr	r3, [r3, #28]
 800dc10:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800dc14:	d071      	beq.n	800dcfa <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800dc16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc18:	2200      	movs	r2, #0
 800dc1a:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800dc1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc20:	681b      	ldr	r3, [r3, #0]
 800dc22:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc24:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dc26:	e853 3f00 	ldrex	r3, [r3]
 800dc2a:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800dc2c:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dc2e:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800dc32:	66bb      	str	r3, [r7, #104]	; 0x68
 800dc34:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc36:	681b      	ldr	r3, [r3, #0]
 800dc38:	461a      	mov	r2, r3
 800dc3a:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800dc3c:	65bb      	str	r3, [r7, #88]	; 0x58
 800dc3e:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc40:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800dc42:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800dc44:	e841 2300 	strex	r3, r2, [r1]
 800dc48:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800dc4a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800dc4c:	2b00      	cmp	r3, #0
 800dc4e:	d1e6      	bne.n	800dc1e <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dc50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc52:	681b      	ldr	r3, [r3, #0]
 800dc54:	3308      	adds	r3, #8
 800dc56:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dc5a:	e853 3f00 	ldrex	r3, [r3]
 800dc5e:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800dc60:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800dc62:	f023 0301 	bic.w	r3, r3, #1
 800dc66:	667b      	str	r3, [r7, #100]	; 0x64
 800dc68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc6a:	681b      	ldr	r3, [r3, #0]
 800dc6c:	3308      	adds	r3, #8
 800dc6e:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800dc70:	647a      	str	r2, [r7, #68]	; 0x44
 800dc72:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dc74:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800dc76:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800dc78:	e841 2300 	strex	r3, r2, [r1]
 800dc7c:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800dc7e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800dc80:	2b00      	cmp	r3, #0
 800dc82:	d1e5      	bne.n	800dc50 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800dc84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc86:	681b      	ldr	r3, [r3, #0]
 800dc88:	3308      	adds	r3, #8
 800dc8a:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dc8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dc8e:	e853 3f00 	ldrex	r3, [r3]
 800dc92:	623b      	str	r3, [r7, #32]
   return(result);
 800dc94:	6a3b      	ldr	r3, [r7, #32]
 800dc96:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800dc9a:	663b      	str	r3, [r7, #96]	; 0x60
 800dc9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dc9e:	681b      	ldr	r3, [r3, #0]
 800dca0:	3308      	adds	r3, #8
 800dca2:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800dca4:	633a      	str	r2, [r7, #48]	; 0x30
 800dca6:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dca8:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dcaa:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dcac:	e841 2300 	strex	r3, r2, [r1]
 800dcb0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dcb2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dcb4:	2b00      	cmp	r3, #0
 800dcb6:	d1e5      	bne.n	800dc84 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800dcb8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dcba:	2220      	movs	r2, #32
 800dcbc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dcc0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dcc2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dcc4:	2b01      	cmp	r3, #1
 800dcc6:	d118      	bne.n	800dcfa <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800dcc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dcca:	681b      	ldr	r3, [r3, #0]
 800dccc:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dcce:	693b      	ldr	r3, [r7, #16]
 800dcd0:	e853 3f00 	ldrex	r3, [r3]
 800dcd4:	60fb      	str	r3, [r7, #12]
   return(result);
 800dcd6:	68fb      	ldr	r3, [r7, #12]
 800dcd8:	f023 0310 	bic.w	r3, r3, #16
 800dcdc:	65fb      	str	r3, [r7, #92]	; 0x5c
 800dcde:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dce0:	681b      	ldr	r3, [r3, #0]
 800dce2:	461a      	mov	r2, r3
 800dce4:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800dce6:	61fb      	str	r3, [r7, #28]
 800dce8:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dcea:	69b9      	ldr	r1, [r7, #24]
 800dcec:	69fa      	ldr	r2, [r7, #28]
 800dcee:	e841 2300 	strex	r3, r2, [r1]
 800dcf2:	617b      	str	r3, [r7, #20]
   return(result);
 800dcf4:	697b      	ldr	r3, [r7, #20]
 800dcf6:	2b00      	cmp	r3, #0
 800dcf8:	d1e6      	bne.n	800dcc8 <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800dcfa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dcfc:	2200      	movs	r2, #0
 800dcfe:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd00:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd02:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd04:	2b01      	cmp	r3, #1
 800dd06:	d107      	bne.n	800dd18 <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dd08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800dd0a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800dd0e:	4619      	mov	r1, r3
 800dd10:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800dd12:	f7ff f955 	bl	800cfc0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dd16:	e002      	b.n	800dd1e <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800dd18:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800dd1a:	f00f fb89 	bl	801d430 <HAL_UART_RxCpltCallback>
}
 800dd1e:	bf00      	nop
 800dd20:	3770      	adds	r7, #112	; 0x70
 800dd22:	46bd      	mov	sp, r7
 800dd24:	bd80      	pop	{r7, pc}

0800dd26 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800dd26:	b580      	push	{r7, lr}
 800dd28:	b084      	sub	sp, #16
 800dd2a:	af00      	add	r7, sp, #0
 800dd2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dd2e:	687b      	ldr	r3, [r7, #4]
 800dd30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd32:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800dd34:	68fb      	ldr	r3, [r7, #12]
 800dd36:	2201      	movs	r2, #1
 800dd38:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800dd3e:	2b01      	cmp	r3, #1
 800dd40:	d109      	bne.n	800dd56 <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800dd48:	085b      	lsrs	r3, r3, #1
 800dd4a:	b29b      	uxth	r3, r3
 800dd4c:	4619      	mov	r1, r3
 800dd4e:	68f8      	ldr	r0, [r7, #12]
 800dd50:	f7ff f936 	bl	800cfc0 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800dd54:	e002      	b.n	800dd5c <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800dd56:	68f8      	ldr	r0, [r7, #12]
 800dd58:	f7ff f928 	bl	800cfac <HAL_UART_RxHalfCpltCallback>
}
 800dd5c:	bf00      	nop
 800dd5e:	3710      	adds	r7, #16
 800dd60:	46bd      	mov	sp, r7
 800dd62:	bd80      	pop	{r7, pc}

0800dd64 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800dd64:	b580      	push	{r7, lr}
 800dd66:	b086      	sub	sp, #24
 800dd68:	af00      	add	r7, sp, #0
 800dd6a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800dd6c:	687b      	ldr	r3, [r7, #4]
 800dd6e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800dd70:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800dd72:	697b      	ldr	r3, [r7, #20]
 800dd74:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dd76:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800dd78:	697b      	ldr	r3, [r7, #20]
 800dd7a:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800dd7e:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800dd80:	697b      	ldr	r3, [r7, #20]
 800dd82:	681b      	ldr	r3, [r3, #0]
 800dd84:	689b      	ldr	r3, [r3, #8]
 800dd86:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800dd8a:	2b80      	cmp	r3, #128	; 0x80
 800dd8c:	d109      	bne.n	800dda2 <UART_DMAError+0x3e>
 800dd8e:	693b      	ldr	r3, [r7, #16]
 800dd90:	2b21      	cmp	r3, #33	; 0x21
 800dd92:	d106      	bne.n	800dda2 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800dd94:	697b      	ldr	r3, [r7, #20]
 800dd96:	2200      	movs	r2, #0
 800dd98:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800dd9c:	6978      	ldr	r0, [r7, #20]
 800dd9e:	f7ff fe4b 	bl	800da38 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800dda2:	697b      	ldr	r3, [r7, #20]
 800dda4:	681b      	ldr	r3, [r3, #0]
 800dda6:	689b      	ldr	r3, [r3, #8]
 800dda8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ddac:	2b40      	cmp	r3, #64	; 0x40
 800ddae:	d109      	bne.n	800ddc4 <UART_DMAError+0x60>
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	2b22      	cmp	r3, #34	; 0x22
 800ddb4:	d106      	bne.n	800ddc4 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800ddb6:	697b      	ldr	r3, [r7, #20]
 800ddb8:	2200      	movs	r2, #0
 800ddba:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800ddbe:	6978      	ldr	r0, [r7, #20]
 800ddc0:	f7ff fe60 	bl	800da84 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800ddc4:	697b      	ldr	r3, [r7, #20]
 800ddc6:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800ddca:	f043 0210 	orr.w	r2, r3, #16
 800ddce:	697b      	ldr	r3, [r7, #20]
 800ddd0:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800ddd4:	6978      	ldr	r0, [r7, #20]
 800ddd6:	f00f fb5b 	bl	801d490 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800ddda:	bf00      	nop
 800dddc:	3718      	adds	r7, #24
 800ddde:	46bd      	mov	sp, r7
 800dde0:	bd80      	pop	{r7, pc}

0800dde2 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800dde2:	b580      	push	{r7, lr}
 800dde4:	b084      	sub	sp, #16
 800dde6:	af00      	add	r7, sp, #0
 800dde8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800ddea:	687b      	ldr	r3, [r7, #4]
 800ddec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ddee:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800ddf0:	68fb      	ldr	r3, [r7, #12]
 800ddf2:	2200      	movs	r2, #0
 800ddf4:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800ddf8:	68fb      	ldr	r3, [r7, #12]
 800ddfa:	2200      	movs	r2, #0
 800ddfc:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800de00:	68f8      	ldr	r0, [r7, #12]
 800de02:	f00f fb45 	bl	801d490 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800de06:	bf00      	nop
 800de08:	3710      	adds	r7, #16
 800de0a:	46bd      	mov	sp, r7
 800de0c:	bd80      	pop	{r7, pc}

0800de0e <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800de0e:	b580      	push	{r7, lr}
 800de10:	b084      	sub	sp, #16
 800de12:	af00      	add	r7, sp, #0
 800de14:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800de16:	687b      	ldr	r3, [r7, #4]
 800de18:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de1a:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 800de1c:	68fb      	ldr	r3, [r7, #12]
 800de1e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de20:	2200      	movs	r2, #0
 800de22:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de28:	2b00      	cmp	r3, #0
 800de2a:	d004      	beq.n	800de36 <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 800de2c:	68fb      	ldr	r3, [r7, #12]
 800de2e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de30:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de32:	2b00      	cmp	r3, #0
 800de34:	d11d      	bne.n	800de72 <UART_DMATxAbortCallback+0x64>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	2200      	movs	r2, #0
 800de3a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	2200      	movs	r2, #0
 800de42:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800de46:	68fb      	ldr	r3, [r7, #12]
 800de48:	2200      	movs	r2, #0
 800de4a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800de4e:	68fb      	ldr	r3, [r7, #12]
 800de50:	681b      	ldr	r3, [r3, #0]
 800de52:	220f      	movs	r2, #15
 800de54:	621a      	str	r2, [r3, #32]


  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800de56:	68fb      	ldr	r3, [r7, #12]
 800de58:	2220      	movs	r2, #32
 800de5a:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800de5c:	68fb      	ldr	r3, [r7, #12]
 800de5e:	2220      	movs	r2, #32
 800de60:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	2200      	movs	r2, #0
 800de68:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800de6a:	68f8      	ldr	r0, [r7, #12]
 800de6c:	f00f fb4a 	bl	801d504 <HAL_UART_AbortCpltCallback>
 800de70:	e000      	b.n	800de74 <UART_DMATxAbortCallback+0x66>
      return;
 800de72:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800de74:	3710      	adds	r7, #16
 800de76:	46bd      	mov	sp, r7
 800de78:	bd80      	pop	{r7, pc}

0800de7a <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800de7a:	b580      	push	{r7, lr}
 800de7c:	b084      	sub	sp, #16
 800de7e:	af00      	add	r7, sp, #0
 800de80:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800de82:	687b      	ldr	r3, [r7, #4]
 800de84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800de86:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800de8c:	2200      	movs	r2, #0
 800de8e:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 800de90:	68fb      	ldr	r3, [r7, #12]
 800de92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de94:	2b00      	cmp	r3, #0
 800de96:	d004      	beq.n	800dea2 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 800de98:	68fb      	ldr	r3, [r7, #12]
 800de9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800de9c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800de9e:	2b00      	cmp	r3, #0
 800dea0:	d125      	bne.n	800deee <UART_DMARxAbortCallback+0x74>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 800dea2:	68fb      	ldr	r3, [r7, #12]
 800dea4:	2200      	movs	r2, #0
 800dea6:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 800deaa:	68fb      	ldr	r3, [r7, #12]
 800deac:	2200      	movs	r2, #0
 800deae:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800deb2:	68fb      	ldr	r3, [r7, #12]
 800deb4:	2200      	movs	r2, #0
 800deb6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800deba:	68fb      	ldr	r3, [r7, #12]
 800debc:	681b      	ldr	r3, [r3, #0]
 800debe:	220f      	movs	r2, #15
 800dec0:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	681b      	ldr	r3, [r3, #0]
 800dec6:	699a      	ldr	r2, [r3, #24]
 800dec8:	68fb      	ldr	r3, [r7, #12]
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	f042 0208 	orr.w	r2, r2, #8
 800ded0:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800ded2:	68fb      	ldr	r3, [r7, #12]
 800ded4:	2220      	movs	r2, #32
 800ded6:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800ded8:	68fb      	ldr	r3, [r7, #12]
 800deda:	2220      	movs	r2, #32
 800dedc:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800dee0:	68fb      	ldr	r3, [r7, #12]
 800dee2:	2200      	movs	r2, #0
 800dee4:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800dee6:	68f8      	ldr	r0, [r7, #12]
 800dee8:	f00f fb0c 	bl	801d504 <HAL_UART_AbortCpltCallback>
 800deec:	e000      	b.n	800def0 <UART_DMARxAbortCallback+0x76>
      return;
 800deee:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800def0:	3710      	adds	r7, #16
 800def2:	46bd      	mov	sp, r7
 800def4:	bd80      	pop	{r7, pc}

0800def6 <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800def6:	b480      	push	{r7}
 800def8:	b08f      	sub	sp, #60	; 0x3c
 800defa:	af00      	add	r7, sp, #0
 800defc:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800defe:	687b      	ldr	r3, [r7, #4]
 800df00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800df02:	2b21      	cmp	r3, #33	; 0x21
 800df04:	d14c      	bne.n	800dfa0 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800df06:	687b      	ldr	r3, [r7, #4]
 800df08:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800df0c:	b29b      	uxth	r3, r3
 800df0e:	2b00      	cmp	r3, #0
 800df10:	d132      	bne.n	800df78 <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800df12:	687b      	ldr	r3, [r7, #4]
 800df14:	681b      	ldr	r3, [r3, #0]
 800df16:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df18:	6a3b      	ldr	r3, [r7, #32]
 800df1a:	e853 3f00 	ldrex	r3, [r3]
 800df1e:	61fb      	str	r3, [r7, #28]
   return(result);
 800df20:	69fb      	ldr	r3, [r7, #28]
 800df22:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800df26:	637b      	str	r3, [r7, #52]	; 0x34
 800df28:	687b      	ldr	r3, [r7, #4]
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	461a      	mov	r2, r3
 800df2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800df30:	62fb      	str	r3, [r7, #44]	; 0x2c
 800df32:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df34:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800df36:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800df38:	e841 2300 	strex	r3, r2, [r1]
 800df3c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800df3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800df40:	2b00      	cmp	r3, #0
 800df42:	d1e6      	bne.n	800df12 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800df44:	687b      	ldr	r3, [r7, #4]
 800df46:	681b      	ldr	r3, [r3, #0]
 800df48:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800df4a:	68fb      	ldr	r3, [r7, #12]
 800df4c:	e853 3f00 	ldrex	r3, [r3]
 800df50:	60bb      	str	r3, [r7, #8]
   return(result);
 800df52:	68bb      	ldr	r3, [r7, #8]
 800df54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800df58:	633b      	str	r3, [r7, #48]	; 0x30
 800df5a:	687b      	ldr	r3, [r7, #4]
 800df5c:	681b      	ldr	r3, [r3, #0]
 800df5e:	461a      	mov	r2, r3
 800df60:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800df62:	61bb      	str	r3, [r7, #24]
 800df64:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800df66:	6979      	ldr	r1, [r7, #20]
 800df68:	69ba      	ldr	r2, [r7, #24]
 800df6a:	e841 2300 	strex	r3, r2, [r1]
 800df6e:	613b      	str	r3, [r7, #16]
   return(result);
 800df70:	693b      	ldr	r3, [r7, #16]
 800df72:	2b00      	cmp	r3, #0
 800df74:	d1e6      	bne.n	800df44 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800df76:	e013      	b.n	800dfa0 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800df78:	687b      	ldr	r3, [r7, #4]
 800df7a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df7c:	781a      	ldrb	r2, [r3, #0]
 800df7e:	687b      	ldr	r3, [r7, #4]
 800df80:	681b      	ldr	r3, [r3, #0]
 800df82:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800df84:	687b      	ldr	r3, [r7, #4]
 800df86:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800df88:	1c5a      	adds	r2, r3, #1
 800df8a:	687b      	ldr	r3, [r7, #4]
 800df8c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800df8e:	687b      	ldr	r3, [r7, #4]
 800df90:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800df94:	b29b      	uxth	r3, r3
 800df96:	3b01      	subs	r3, #1
 800df98:	b29a      	uxth	r2, r3
 800df9a:	687b      	ldr	r3, [r7, #4]
 800df9c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800dfa0:	bf00      	nop
 800dfa2:	373c      	adds	r7, #60	; 0x3c
 800dfa4:	46bd      	mov	sp, r7
 800dfa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800dfaa:	4770      	bx	lr

0800dfac <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800dfac:	b480      	push	{r7}
 800dfae:	b091      	sub	sp, #68	; 0x44
 800dfb0:	af00      	add	r7, sp, #0
 800dfb2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800dfb8:	2b21      	cmp	r3, #33	; 0x21
 800dfba:	d151      	bne.n	800e060 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800dfbc:	687b      	ldr	r3, [r7, #4]
 800dfbe:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800dfc2:	b29b      	uxth	r3, r3
 800dfc4:	2b00      	cmp	r3, #0
 800dfc6:	d132      	bne.n	800e02e <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800dfc8:	687b      	ldr	r3, [r7, #4]
 800dfca:	681b      	ldr	r3, [r3, #0]
 800dfcc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800dfce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800dfd0:	e853 3f00 	ldrex	r3, [r3]
 800dfd4:	623b      	str	r3, [r7, #32]
   return(result);
 800dfd6:	6a3b      	ldr	r3, [r7, #32]
 800dfd8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800dfdc:	63bb      	str	r3, [r7, #56]	; 0x38
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	681b      	ldr	r3, [r3, #0]
 800dfe2:	461a      	mov	r2, r3
 800dfe4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800dfe6:	633b      	str	r3, [r7, #48]	; 0x30
 800dfe8:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dfea:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800dfec:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800dfee:	e841 2300 	strex	r3, r2, [r1]
 800dff2:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800dff4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800dff6:	2b00      	cmp	r3, #0
 800dff8:	d1e6      	bne.n	800dfc8 <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800dffa:	687b      	ldr	r3, [r7, #4]
 800dffc:	681b      	ldr	r3, [r3, #0]
 800dffe:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e000:	693b      	ldr	r3, [r7, #16]
 800e002:	e853 3f00 	ldrex	r3, [r3]
 800e006:	60fb      	str	r3, [r7, #12]
   return(result);
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e00e:	637b      	str	r3, [r7, #52]	; 0x34
 800e010:	687b      	ldr	r3, [r7, #4]
 800e012:	681b      	ldr	r3, [r3, #0]
 800e014:	461a      	mov	r2, r3
 800e016:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e018:	61fb      	str	r3, [r7, #28]
 800e01a:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e01c:	69b9      	ldr	r1, [r7, #24]
 800e01e:	69fa      	ldr	r2, [r7, #28]
 800e020:	e841 2300 	strex	r3, r2, [r1]
 800e024:	617b      	str	r3, [r7, #20]
   return(result);
 800e026:	697b      	ldr	r3, [r7, #20]
 800e028:	2b00      	cmp	r3, #0
 800e02a:	d1e6      	bne.n	800dffa <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800e02c:	e018      	b.n	800e060 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800e02e:	687b      	ldr	r3, [r7, #4]
 800e030:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e032:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800e034:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e036:	881b      	ldrh	r3, [r3, #0]
 800e038:	461a      	mov	r2, r3
 800e03a:	687b      	ldr	r3, [r7, #4]
 800e03c:	681b      	ldr	r3, [r3, #0]
 800e03e:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800e042:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800e048:	1c9a      	adds	r2, r3, #2
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800e04e:	687b      	ldr	r3, [r7, #4]
 800e050:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800e054:	b29b      	uxth	r3, r3
 800e056:	3b01      	subs	r3, #1
 800e058:	b29a      	uxth	r2, r3
 800e05a:	687b      	ldr	r3, [r7, #4]
 800e05c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800e060:	bf00      	nop
 800e062:	3744      	adds	r7, #68	; 0x44
 800e064:	46bd      	mov	sp, r7
 800e066:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e06a:	4770      	bx	lr

0800e06c <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800e06c:	b580      	push	{r7, lr}
 800e06e:	b088      	sub	sp, #32
 800e070:	af00      	add	r7, sp, #0
 800e072:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800e074:	687b      	ldr	r3, [r7, #4]
 800e076:	681b      	ldr	r3, [r3, #0]
 800e078:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e07a:	68fb      	ldr	r3, [r7, #12]
 800e07c:	e853 3f00 	ldrex	r3, [r3]
 800e080:	60bb      	str	r3, [r7, #8]
   return(result);
 800e082:	68bb      	ldr	r3, [r7, #8]
 800e084:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800e088:	61fb      	str	r3, [r7, #28]
 800e08a:	687b      	ldr	r3, [r7, #4]
 800e08c:	681b      	ldr	r3, [r3, #0]
 800e08e:	461a      	mov	r2, r3
 800e090:	69fb      	ldr	r3, [r7, #28]
 800e092:	61bb      	str	r3, [r7, #24]
 800e094:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e096:	6979      	ldr	r1, [r7, #20]
 800e098:	69ba      	ldr	r2, [r7, #24]
 800e09a:	e841 2300 	strex	r3, r2, [r1]
 800e09e:	613b      	str	r3, [r7, #16]
   return(result);
 800e0a0:	693b      	ldr	r3, [r7, #16]
 800e0a2:	2b00      	cmp	r3, #0
 800e0a4:	d1e6      	bne.n	800e074 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800e0a6:	687b      	ldr	r3, [r7, #4]
 800e0a8:	2220      	movs	r2, #32
 800e0aa:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800e0ac:	687b      	ldr	r3, [r7, #4]
 800e0ae:	2200      	movs	r2, #0
 800e0b0:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800e0b2:	6878      	ldr	r0, [r7, #4]
 800e0b4:	f7fe ff66 	bl	800cf84 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800e0b8:	bf00      	nop
 800e0ba:	3720      	adds	r7, #32
 800e0bc:	46bd      	mov	sp, r7
 800e0be:	bd80      	pop	{r7, pc}

0800e0c0 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800e0c0:	b580      	push	{r7, lr}
 800e0c2:	b09c      	sub	sp, #112	; 0x70
 800e0c4:	af00      	add	r7, sp, #0
 800e0c6:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800e0c8:	687b      	ldr	r3, [r7, #4]
 800e0ca:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e0ce:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e0d2:	687b      	ldr	r3, [r7, #4]
 800e0d4:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e0d8:	2b22      	cmp	r3, #34	; 0x22
 800e0da:	f040 80b9 	bne.w	800e250 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e0de:	687b      	ldr	r3, [r7, #4]
 800e0e0:	681b      	ldr	r3, [r3, #0]
 800e0e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e0e4:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800e0e8:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800e0ec:	b2d9      	uxtb	r1, r3
 800e0ee:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800e0f2:	b2da      	uxtb	r2, r3
 800e0f4:	687b      	ldr	r3, [r7, #4]
 800e0f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e0f8:	400a      	ands	r2, r1
 800e0fa:	b2d2      	uxtb	r2, r2
 800e0fc:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e102:	1c5a      	adds	r2, r3, #1
 800e104:	687b      	ldr	r3, [r7, #4]
 800e106:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800e108:	687b      	ldr	r3, [r7, #4]
 800e10a:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e10e:	b29b      	uxth	r3, r3
 800e110:	3b01      	subs	r3, #1
 800e112:	b29a      	uxth	r2, r3
 800e114:	687b      	ldr	r3, [r7, #4]
 800e116:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800e11a:	687b      	ldr	r3, [r7, #4]
 800e11c:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e120:	b29b      	uxth	r3, r3
 800e122:	2b00      	cmp	r3, #0
 800e124:	f040 809c 	bne.w	800e260 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e128:	687b      	ldr	r3, [r7, #4]
 800e12a:	681b      	ldr	r3, [r3, #0]
 800e12c:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e12e:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e130:	e853 3f00 	ldrex	r3, [r3]
 800e134:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800e136:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e138:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e13c:	66bb      	str	r3, [r7, #104]	; 0x68
 800e13e:	687b      	ldr	r3, [r7, #4]
 800e140:	681b      	ldr	r3, [r3, #0]
 800e142:	461a      	mov	r2, r3
 800e144:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e146:	65bb      	str	r3, [r7, #88]	; 0x58
 800e148:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e14a:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800e14c:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800e14e:	e841 2300 	strex	r3, r2, [r1]
 800e152:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800e154:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800e156:	2b00      	cmp	r3, #0
 800e158:	d1e6      	bne.n	800e128 <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e15a:	687b      	ldr	r3, [r7, #4]
 800e15c:	681b      	ldr	r3, [r3, #0]
 800e15e:	3308      	adds	r3, #8
 800e160:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e162:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e164:	e853 3f00 	ldrex	r3, [r3]
 800e168:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800e16a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e16c:	f023 0301 	bic.w	r3, r3, #1
 800e170:	667b      	str	r3, [r7, #100]	; 0x64
 800e172:	687b      	ldr	r3, [r7, #4]
 800e174:	681b      	ldr	r3, [r3, #0]
 800e176:	3308      	adds	r3, #8
 800e178:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800e17a:	647a      	str	r2, [r7, #68]	; 0x44
 800e17c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e17e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800e180:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e182:	e841 2300 	strex	r3, r2, [r1]
 800e186:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800e188:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800e18a:	2b00      	cmp	r3, #0
 800e18c:	d1e5      	bne.n	800e15a <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e18e:	687b      	ldr	r3, [r7, #4]
 800e190:	2220      	movs	r2, #32
 800e192:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e196:	687b      	ldr	r3, [r7, #4]
 800e198:	2200      	movs	r2, #0
 800e19a:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e19c:	687b      	ldr	r3, [r7, #4]
 800e19e:	2200      	movs	r2, #0
 800e1a0:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e1a2:	687b      	ldr	r3, [r7, #4]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	685b      	ldr	r3, [r3, #4]
 800e1a8:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e1ac:	2b00      	cmp	r3, #0
 800e1ae:	d018      	beq.n	800e1e2 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e1b0:	687b      	ldr	r3, [r7, #4]
 800e1b2:	681b      	ldr	r3, [r3, #0]
 800e1b4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e1b8:	e853 3f00 	ldrex	r3, [r3]
 800e1bc:	623b      	str	r3, [r7, #32]
   return(result);
 800e1be:	6a3b      	ldr	r3, [r7, #32]
 800e1c0:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e1c4:	663b      	str	r3, [r7, #96]	; 0x60
 800e1c6:	687b      	ldr	r3, [r7, #4]
 800e1c8:	681b      	ldr	r3, [r3, #0]
 800e1ca:	461a      	mov	r2, r3
 800e1cc:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800e1ce:	633b      	str	r3, [r7, #48]	; 0x30
 800e1d0:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e1d2:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e1d4:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800e1d6:	e841 2300 	strex	r3, r2, [r1]
 800e1da:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800e1dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d1e6      	bne.n	800e1b0 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e1e2:	687b      	ldr	r3, [r7, #4]
 800e1e4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e1e6:	2b01      	cmp	r3, #1
 800e1e8:	d12e      	bne.n	800e248 <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e1ea:	687b      	ldr	r3, [r7, #4]
 800e1ec:	2200      	movs	r2, #0
 800e1ee:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e1f0:	687b      	ldr	r3, [r7, #4]
 800e1f2:	681b      	ldr	r3, [r3, #0]
 800e1f4:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e1f6:	693b      	ldr	r3, [r7, #16]
 800e1f8:	e853 3f00 	ldrex	r3, [r3]
 800e1fc:	60fb      	str	r3, [r7, #12]
   return(result);
 800e1fe:	68fb      	ldr	r3, [r7, #12]
 800e200:	f023 0310 	bic.w	r3, r3, #16
 800e204:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e206:	687b      	ldr	r3, [r7, #4]
 800e208:	681b      	ldr	r3, [r3, #0]
 800e20a:	461a      	mov	r2, r3
 800e20c:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e20e:	61fb      	str	r3, [r7, #28]
 800e210:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e212:	69b9      	ldr	r1, [r7, #24]
 800e214:	69fa      	ldr	r2, [r7, #28]
 800e216:	e841 2300 	strex	r3, r2, [r1]
 800e21a:	617b      	str	r3, [r7, #20]
   return(result);
 800e21c:	697b      	ldr	r3, [r7, #20]
 800e21e:	2b00      	cmp	r3, #0
 800e220:	d1e6      	bne.n	800e1f0 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e222:	687b      	ldr	r3, [r7, #4]
 800e224:	681b      	ldr	r3, [r3, #0]
 800e226:	69db      	ldr	r3, [r3, #28]
 800e228:	f003 0310 	and.w	r3, r3, #16
 800e22c:	2b10      	cmp	r3, #16
 800e22e:	d103      	bne.n	800e238 <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e230:	687b      	ldr	r3, [r7, #4]
 800e232:	681b      	ldr	r3, [r3, #0]
 800e234:	2210      	movs	r2, #16
 800e236:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e238:	687b      	ldr	r3, [r7, #4]
 800e23a:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e23e:	4619      	mov	r1, r3
 800e240:	6878      	ldr	r0, [r7, #4]
 800e242:	f7fe febd 	bl	800cfc0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e246:	e00b      	b.n	800e260 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800e248:	6878      	ldr	r0, [r7, #4]
 800e24a:	f00f f8f1 	bl	801d430 <HAL_UART_RxCpltCallback>
}
 800e24e:	e007      	b.n	800e260 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e250:	687b      	ldr	r3, [r7, #4]
 800e252:	681b      	ldr	r3, [r3, #0]
 800e254:	699a      	ldr	r2, [r3, #24]
 800e256:	687b      	ldr	r3, [r7, #4]
 800e258:	681b      	ldr	r3, [r3, #0]
 800e25a:	f042 0208 	orr.w	r2, r2, #8
 800e25e:	619a      	str	r2, [r3, #24]
}
 800e260:	bf00      	nop
 800e262:	3770      	adds	r7, #112	; 0x70
 800e264:	46bd      	mov	sp, r7
 800e266:	bd80      	pop	{r7, pc}

0800e268 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800e268:	b580      	push	{r7, lr}
 800e26a:	b09c      	sub	sp, #112	; 0x70
 800e26c:	af00      	add	r7, sp, #0
 800e26e:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800e270:	687b      	ldr	r3, [r7, #4]
 800e272:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800e276:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800e27a:	687b      	ldr	r3, [r7, #4]
 800e27c:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800e280:	2b22      	cmp	r3, #34	; 0x22
 800e282:	f040 80b9 	bne.w	800e3f8 <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800e286:	687b      	ldr	r3, [r7, #4]
 800e288:	681b      	ldr	r3, [r3, #0]
 800e28a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e28c:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800e290:	687b      	ldr	r3, [r7, #4]
 800e292:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e294:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800e296:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800e29a:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800e29e:	4013      	ands	r3, r2
 800e2a0:	b29a      	uxth	r2, r3
 800e2a2:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800e2a4:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800e2a6:	687b      	ldr	r3, [r7, #4]
 800e2a8:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800e2aa:	1c9a      	adds	r2, r3, #2
 800e2ac:	687b      	ldr	r3, [r7, #4]
 800e2ae:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800e2b0:	687b      	ldr	r3, [r7, #4]
 800e2b2:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e2b6:	b29b      	uxth	r3, r3
 800e2b8:	3b01      	subs	r3, #1
 800e2ba:	b29a      	uxth	r2, r3
 800e2bc:	687b      	ldr	r3, [r7, #4]
 800e2be:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800e2c2:	687b      	ldr	r3, [r7, #4]
 800e2c4:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800e2c8:	b29b      	uxth	r3, r3
 800e2ca:	2b00      	cmp	r3, #0
 800e2cc:	f040 809c 	bne.w	800e408 <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800e2d0:	687b      	ldr	r3, [r7, #4]
 800e2d2:	681b      	ldr	r3, [r3, #0]
 800e2d4:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e2d6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800e2d8:	e853 3f00 	ldrex	r3, [r3]
 800e2dc:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800e2de:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2e0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800e2e4:	667b      	str	r3, [r7, #100]	; 0x64
 800e2e6:	687b      	ldr	r3, [r7, #4]
 800e2e8:	681b      	ldr	r3, [r3, #0]
 800e2ea:	461a      	mov	r2, r3
 800e2ec:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800e2ee:	657b      	str	r3, [r7, #84]	; 0x54
 800e2f0:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e2f2:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800e2f4:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800e2f6:	e841 2300 	strex	r3, r2, [r1]
 800e2fa:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800e2fc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d1e6      	bne.n	800e2d0 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800e302:	687b      	ldr	r3, [r7, #4]
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	3308      	adds	r3, #8
 800e308:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e30a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800e30c:	e853 3f00 	ldrex	r3, [r3]
 800e310:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800e312:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800e314:	f023 0301 	bic.w	r3, r3, #1
 800e318:	663b      	str	r3, [r7, #96]	; 0x60
 800e31a:	687b      	ldr	r3, [r7, #4]
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	3308      	adds	r3, #8
 800e320:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800e322:	643a      	str	r2, [r7, #64]	; 0x40
 800e324:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e326:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800e328:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800e32a:	e841 2300 	strex	r3, r2, [r1]
 800e32e:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800e330:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800e332:	2b00      	cmp	r3, #0
 800e334:	d1e5      	bne.n	800e302 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800e336:	687b      	ldr	r3, [r7, #4]
 800e338:	2220      	movs	r2, #32
 800e33a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800e33e:	687b      	ldr	r3, [r7, #4]
 800e340:	2200      	movs	r2, #0
 800e342:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800e344:	687b      	ldr	r3, [r7, #4]
 800e346:	2200      	movs	r2, #0
 800e348:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800e34a:	687b      	ldr	r3, [r7, #4]
 800e34c:	681b      	ldr	r3, [r3, #0]
 800e34e:	685b      	ldr	r3, [r3, #4]
 800e350:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800e354:	2b00      	cmp	r3, #0
 800e356:	d018      	beq.n	800e38a <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800e358:	687b      	ldr	r3, [r7, #4]
 800e35a:	681b      	ldr	r3, [r3, #0]
 800e35c:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e35e:	6a3b      	ldr	r3, [r7, #32]
 800e360:	e853 3f00 	ldrex	r3, [r3]
 800e364:	61fb      	str	r3, [r7, #28]
   return(result);
 800e366:	69fb      	ldr	r3, [r7, #28]
 800e368:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800e36c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800e36e:	687b      	ldr	r3, [r7, #4]
 800e370:	681b      	ldr	r3, [r3, #0]
 800e372:	461a      	mov	r2, r3
 800e374:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800e376:	62fb      	str	r3, [r7, #44]	; 0x2c
 800e378:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e37a:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e37c:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e37e:	e841 2300 	strex	r3, r2, [r1]
 800e382:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800e384:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e386:	2b00      	cmp	r3, #0
 800e388:	d1e6      	bne.n	800e358 <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800e38a:	687b      	ldr	r3, [r7, #4]
 800e38c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800e38e:	2b01      	cmp	r3, #1
 800e390:	d12e      	bne.n	800e3f0 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800e392:	687b      	ldr	r3, [r7, #4]
 800e394:	2200      	movs	r2, #0
 800e396:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800e398:	687b      	ldr	r3, [r7, #4]
 800e39a:	681b      	ldr	r3, [r3, #0]
 800e39c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800e39e:	68fb      	ldr	r3, [r7, #12]
 800e3a0:	e853 3f00 	ldrex	r3, [r3]
 800e3a4:	60bb      	str	r3, [r7, #8]
   return(result);
 800e3a6:	68bb      	ldr	r3, [r7, #8]
 800e3a8:	f023 0310 	bic.w	r3, r3, #16
 800e3ac:	65bb      	str	r3, [r7, #88]	; 0x58
 800e3ae:	687b      	ldr	r3, [r7, #4]
 800e3b0:	681b      	ldr	r3, [r3, #0]
 800e3b2:	461a      	mov	r2, r3
 800e3b4:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800e3b6:	61bb      	str	r3, [r7, #24]
 800e3b8:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800e3ba:	6979      	ldr	r1, [r7, #20]
 800e3bc:	69ba      	ldr	r2, [r7, #24]
 800e3be:	e841 2300 	strex	r3, r2, [r1]
 800e3c2:	613b      	str	r3, [r7, #16]
   return(result);
 800e3c4:	693b      	ldr	r3, [r7, #16]
 800e3c6:	2b00      	cmp	r3, #0
 800e3c8:	d1e6      	bne.n	800e398 <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800e3ca:	687b      	ldr	r3, [r7, #4]
 800e3cc:	681b      	ldr	r3, [r3, #0]
 800e3ce:	69db      	ldr	r3, [r3, #28]
 800e3d0:	f003 0310 	and.w	r3, r3, #16
 800e3d4:	2b10      	cmp	r3, #16
 800e3d6:	d103      	bne.n	800e3e0 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800e3d8:	687b      	ldr	r3, [r7, #4]
 800e3da:	681b      	ldr	r3, [r3, #0]
 800e3dc:	2210      	movs	r2, #16
 800e3de:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800e3e6:	4619      	mov	r1, r3
 800e3e8:	6878      	ldr	r0, [r7, #4]
 800e3ea:	f7fe fde9 	bl	800cfc0 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800e3ee:	e00b      	b.n	800e408 <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800e3f0:	6878      	ldr	r0, [r7, #4]
 800e3f2:	f00f f81d 	bl	801d430 <HAL_UART_RxCpltCallback>
}
 800e3f6:	e007      	b.n	800e408 <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800e3f8:	687b      	ldr	r3, [r7, #4]
 800e3fa:	681b      	ldr	r3, [r3, #0]
 800e3fc:	699a      	ldr	r2, [r3, #24]
 800e3fe:	687b      	ldr	r3, [r7, #4]
 800e400:	681b      	ldr	r3, [r3, #0]
 800e402:	f042 0208 	orr.w	r2, r2, #8
 800e406:	619a      	str	r2, [r3, #24]
}
 800e408:	bf00      	nop
 800e40a:	3770      	adds	r7, #112	; 0x70
 800e40c:	46bd      	mov	sp, r7
 800e40e:	bd80      	pop	{r7, pc}

0800e410 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800e410:	b5b0      	push	{r4, r5, r7, lr}
 800e412:	b08c      	sub	sp, #48	; 0x30
 800e414:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800e416:	4b8f      	ldr	r3, [pc, #572]	; (800e654 <MX_LWIP_Init+0x244>)
 800e418:	22c0      	movs	r2, #192	; 0xc0
 800e41a:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800e41c:	4b8d      	ldr	r3, [pc, #564]	; (800e654 <MX_LWIP_Init+0x244>)
 800e41e:	22a8      	movs	r2, #168	; 0xa8
 800e420:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 8;
 800e422:	4b8c      	ldr	r3, [pc, #560]	; (800e654 <MX_LWIP_Init+0x244>)
 800e424:	2208      	movs	r2, #8
 800e426:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 2;
 800e428:	4b8a      	ldr	r3, [pc, #552]	; (800e654 <MX_LWIP_Init+0x244>)
 800e42a:	2202      	movs	r2, #2
 800e42c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800e42e:	4b8a      	ldr	r3, [pc, #552]	; (800e658 <MX_LWIP_Init+0x248>)
 800e430:	22ff      	movs	r2, #255	; 0xff
 800e432:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800e434:	4b88      	ldr	r3, [pc, #544]	; (800e658 <MX_LWIP_Init+0x248>)
 800e436:	22ff      	movs	r2, #255	; 0xff
 800e438:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800e43a:	4b87      	ldr	r3, [pc, #540]	; (800e658 <MX_LWIP_Init+0x248>)
 800e43c:	22ff      	movs	r2, #255	; 0xff
 800e43e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800e440:	4b85      	ldr	r3, [pc, #532]	; (800e658 <MX_LWIP_Init+0x248>)
 800e442:	2200      	movs	r2, #0
 800e444:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800e446:	4b85      	ldr	r3, [pc, #532]	; (800e65c <MX_LWIP_Init+0x24c>)
 800e448:	22c0      	movs	r2, #192	; 0xc0
 800e44a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800e44c:	4b83      	ldr	r3, [pc, #524]	; (800e65c <MX_LWIP_Init+0x24c>)
 800e44e:	22a8      	movs	r2, #168	; 0xa8
 800e450:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 8;
 800e452:	4b82      	ldr	r3, [pc, #520]	; (800e65c <MX_LWIP_Init+0x24c>)
 800e454:	2208      	movs	r2, #8
 800e456:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800e458:	4b80      	ldr	r3, [pc, #512]	; (800e65c <MX_LWIP_Init+0x24c>)
 800e45a:	2201      	movs	r2, #1
 800e45c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800e45e:	2100      	movs	r1, #0
 800e460:	2000      	movs	r0, #0
 800e462:	f003 ffed 	bl	8012440 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800e466:	4b7b      	ldr	r3, [pc, #492]	; (800e654 <MX_LWIP_Init+0x244>)
 800e468:	781b      	ldrb	r3, [r3, #0]
 800e46a:	061a      	lsls	r2, r3, #24
 800e46c:	4b79      	ldr	r3, [pc, #484]	; (800e654 <MX_LWIP_Init+0x244>)
 800e46e:	785b      	ldrb	r3, [r3, #1]
 800e470:	041b      	lsls	r3, r3, #16
 800e472:	431a      	orrs	r2, r3
 800e474:	4b77      	ldr	r3, [pc, #476]	; (800e654 <MX_LWIP_Init+0x244>)
 800e476:	789b      	ldrb	r3, [r3, #2]
 800e478:	021b      	lsls	r3, r3, #8
 800e47a:	4313      	orrs	r3, r2
 800e47c:	4a75      	ldr	r2, [pc, #468]	; (800e654 <MX_LWIP_Init+0x244>)
 800e47e:	78d2      	ldrb	r2, [r2, #3]
 800e480:	4313      	orrs	r3, r2
 800e482:	061a      	lsls	r2, r3, #24
 800e484:	4b73      	ldr	r3, [pc, #460]	; (800e654 <MX_LWIP_Init+0x244>)
 800e486:	781b      	ldrb	r3, [r3, #0]
 800e488:	0619      	lsls	r1, r3, #24
 800e48a:	4b72      	ldr	r3, [pc, #456]	; (800e654 <MX_LWIP_Init+0x244>)
 800e48c:	785b      	ldrb	r3, [r3, #1]
 800e48e:	041b      	lsls	r3, r3, #16
 800e490:	4319      	orrs	r1, r3
 800e492:	4b70      	ldr	r3, [pc, #448]	; (800e654 <MX_LWIP_Init+0x244>)
 800e494:	789b      	ldrb	r3, [r3, #2]
 800e496:	021b      	lsls	r3, r3, #8
 800e498:	430b      	orrs	r3, r1
 800e49a:	496e      	ldr	r1, [pc, #440]	; (800e654 <MX_LWIP_Init+0x244>)
 800e49c:	78c9      	ldrb	r1, [r1, #3]
 800e49e:	430b      	orrs	r3, r1
 800e4a0:	021b      	lsls	r3, r3, #8
 800e4a2:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e4a6:	431a      	orrs	r2, r3
 800e4a8:	4b6a      	ldr	r3, [pc, #424]	; (800e654 <MX_LWIP_Init+0x244>)
 800e4aa:	781b      	ldrb	r3, [r3, #0]
 800e4ac:	0619      	lsls	r1, r3, #24
 800e4ae:	4b69      	ldr	r3, [pc, #420]	; (800e654 <MX_LWIP_Init+0x244>)
 800e4b0:	785b      	ldrb	r3, [r3, #1]
 800e4b2:	041b      	lsls	r3, r3, #16
 800e4b4:	4319      	orrs	r1, r3
 800e4b6:	4b67      	ldr	r3, [pc, #412]	; (800e654 <MX_LWIP_Init+0x244>)
 800e4b8:	789b      	ldrb	r3, [r3, #2]
 800e4ba:	021b      	lsls	r3, r3, #8
 800e4bc:	430b      	orrs	r3, r1
 800e4be:	4965      	ldr	r1, [pc, #404]	; (800e654 <MX_LWIP_Init+0x244>)
 800e4c0:	78c9      	ldrb	r1, [r1, #3]
 800e4c2:	430b      	orrs	r3, r1
 800e4c4:	0a1b      	lsrs	r3, r3, #8
 800e4c6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e4ca:	431a      	orrs	r2, r3
 800e4cc:	4b61      	ldr	r3, [pc, #388]	; (800e654 <MX_LWIP_Init+0x244>)
 800e4ce:	781b      	ldrb	r3, [r3, #0]
 800e4d0:	0619      	lsls	r1, r3, #24
 800e4d2:	4b60      	ldr	r3, [pc, #384]	; (800e654 <MX_LWIP_Init+0x244>)
 800e4d4:	785b      	ldrb	r3, [r3, #1]
 800e4d6:	041b      	lsls	r3, r3, #16
 800e4d8:	4319      	orrs	r1, r3
 800e4da:	4b5e      	ldr	r3, [pc, #376]	; (800e654 <MX_LWIP_Init+0x244>)
 800e4dc:	789b      	ldrb	r3, [r3, #2]
 800e4de:	021b      	lsls	r3, r3, #8
 800e4e0:	430b      	orrs	r3, r1
 800e4e2:	495c      	ldr	r1, [pc, #368]	; (800e654 <MX_LWIP_Init+0x244>)
 800e4e4:	78c9      	ldrb	r1, [r1, #3]
 800e4e6:	430b      	orrs	r3, r1
 800e4e8:	0e1b      	lsrs	r3, r3, #24
 800e4ea:	4313      	orrs	r3, r2
 800e4ec:	4a5c      	ldr	r2, [pc, #368]	; (800e660 <MX_LWIP_Init+0x250>)
 800e4ee:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800e4f0:	4b59      	ldr	r3, [pc, #356]	; (800e658 <MX_LWIP_Init+0x248>)
 800e4f2:	781b      	ldrb	r3, [r3, #0]
 800e4f4:	061a      	lsls	r2, r3, #24
 800e4f6:	4b58      	ldr	r3, [pc, #352]	; (800e658 <MX_LWIP_Init+0x248>)
 800e4f8:	785b      	ldrb	r3, [r3, #1]
 800e4fa:	041b      	lsls	r3, r3, #16
 800e4fc:	431a      	orrs	r2, r3
 800e4fe:	4b56      	ldr	r3, [pc, #344]	; (800e658 <MX_LWIP_Init+0x248>)
 800e500:	789b      	ldrb	r3, [r3, #2]
 800e502:	021b      	lsls	r3, r3, #8
 800e504:	4313      	orrs	r3, r2
 800e506:	4a54      	ldr	r2, [pc, #336]	; (800e658 <MX_LWIP_Init+0x248>)
 800e508:	78d2      	ldrb	r2, [r2, #3]
 800e50a:	4313      	orrs	r3, r2
 800e50c:	061a      	lsls	r2, r3, #24
 800e50e:	4b52      	ldr	r3, [pc, #328]	; (800e658 <MX_LWIP_Init+0x248>)
 800e510:	781b      	ldrb	r3, [r3, #0]
 800e512:	0619      	lsls	r1, r3, #24
 800e514:	4b50      	ldr	r3, [pc, #320]	; (800e658 <MX_LWIP_Init+0x248>)
 800e516:	785b      	ldrb	r3, [r3, #1]
 800e518:	041b      	lsls	r3, r3, #16
 800e51a:	4319      	orrs	r1, r3
 800e51c:	4b4e      	ldr	r3, [pc, #312]	; (800e658 <MX_LWIP_Init+0x248>)
 800e51e:	789b      	ldrb	r3, [r3, #2]
 800e520:	021b      	lsls	r3, r3, #8
 800e522:	430b      	orrs	r3, r1
 800e524:	494c      	ldr	r1, [pc, #304]	; (800e658 <MX_LWIP_Init+0x248>)
 800e526:	78c9      	ldrb	r1, [r1, #3]
 800e528:	430b      	orrs	r3, r1
 800e52a:	021b      	lsls	r3, r3, #8
 800e52c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e530:	431a      	orrs	r2, r3
 800e532:	4b49      	ldr	r3, [pc, #292]	; (800e658 <MX_LWIP_Init+0x248>)
 800e534:	781b      	ldrb	r3, [r3, #0]
 800e536:	0619      	lsls	r1, r3, #24
 800e538:	4b47      	ldr	r3, [pc, #284]	; (800e658 <MX_LWIP_Init+0x248>)
 800e53a:	785b      	ldrb	r3, [r3, #1]
 800e53c:	041b      	lsls	r3, r3, #16
 800e53e:	4319      	orrs	r1, r3
 800e540:	4b45      	ldr	r3, [pc, #276]	; (800e658 <MX_LWIP_Init+0x248>)
 800e542:	789b      	ldrb	r3, [r3, #2]
 800e544:	021b      	lsls	r3, r3, #8
 800e546:	430b      	orrs	r3, r1
 800e548:	4943      	ldr	r1, [pc, #268]	; (800e658 <MX_LWIP_Init+0x248>)
 800e54a:	78c9      	ldrb	r1, [r1, #3]
 800e54c:	430b      	orrs	r3, r1
 800e54e:	0a1b      	lsrs	r3, r3, #8
 800e550:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e554:	431a      	orrs	r2, r3
 800e556:	4b40      	ldr	r3, [pc, #256]	; (800e658 <MX_LWIP_Init+0x248>)
 800e558:	781b      	ldrb	r3, [r3, #0]
 800e55a:	0619      	lsls	r1, r3, #24
 800e55c:	4b3e      	ldr	r3, [pc, #248]	; (800e658 <MX_LWIP_Init+0x248>)
 800e55e:	785b      	ldrb	r3, [r3, #1]
 800e560:	041b      	lsls	r3, r3, #16
 800e562:	4319      	orrs	r1, r3
 800e564:	4b3c      	ldr	r3, [pc, #240]	; (800e658 <MX_LWIP_Init+0x248>)
 800e566:	789b      	ldrb	r3, [r3, #2]
 800e568:	021b      	lsls	r3, r3, #8
 800e56a:	430b      	orrs	r3, r1
 800e56c:	493a      	ldr	r1, [pc, #232]	; (800e658 <MX_LWIP_Init+0x248>)
 800e56e:	78c9      	ldrb	r1, [r1, #3]
 800e570:	430b      	orrs	r3, r1
 800e572:	0e1b      	lsrs	r3, r3, #24
 800e574:	4313      	orrs	r3, r2
 800e576:	4a3b      	ldr	r2, [pc, #236]	; (800e664 <MX_LWIP_Init+0x254>)
 800e578:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800e57a:	4b38      	ldr	r3, [pc, #224]	; (800e65c <MX_LWIP_Init+0x24c>)
 800e57c:	781b      	ldrb	r3, [r3, #0]
 800e57e:	061a      	lsls	r2, r3, #24
 800e580:	4b36      	ldr	r3, [pc, #216]	; (800e65c <MX_LWIP_Init+0x24c>)
 800e582:	785b      	ldrb	r3, [r3, #1]
 800e584:	041b      	lsls	r3, r3, #16
 800e586:	431a      	orrs	r2, r3
 800e588:	4b34      	ldr	r3, [pc, #208]	; (800e65c <MX_LWIP_Init+0x24c>)
 800e58a:	789b      	ldrb	r3, [r3, #2]
 800e58c:	021b      	lsls	r3, r3, #8
 800e58e:	4313      	orrs	r3, r2
 800e590:	4a32      	ldr	r2, [pc, #200]	; (800e65c <MX_LWIP_Init+0x24c>)
 800e592:	78d2      	ldrb	r2, [r2, #3]
 800e594:	4313      	orrs	r3, r2
 800e596:	061a      	lsls	r2, r3, #24
 800e598:	4b30      	ldr	r3, [pc, #192]	; (800e65c <MX_LWIP_Init+0x24c>)
 800e59a:	781b      	ldrb	r3, [r3, #0]
 800e59c:	0619      	lsls	r1, r3, #24
 800e59e:	4b2f      	ldr	r3, [pc, #188]	; (800e65c <MX_LWIP_Init+0x24c>)
 800e5a0:	785b      	ldrb	r3, [r3, #1]
 800e5a2:	041b      	lsls	r3, r3, #16
 800e5a4:	4319      	orrs	r1, r3
 800e5a6:	4b2d      	ldr	r3, [pc, #180]	; (800e65c <MX_LWIP_Init+0x24c>)
 800e5a8:	789b      	ldrb	r3, [r3, #2]
 800e5aa:	021b      	lsls	r3, r3, #8
 800e5ac:	430b      	orrs	r3, r1
 800e5ae:	492b      	ldr	r1, [pc, #172]	; (800e65c <MX_LWIP_Init+0x24c>)
 800e5b0:	78c9      	ldrb	r1, [r1, #3]
 800e5b2:	430b      	orrs	r3, r1
 800e5b4:	021b      	lsls	r3, r3, #8
 800e5b6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800e5ba:	431a      	orrs	r2, r3
 800e5bc:	4b27      	ldr	r3, [pc, #156]	; (800e65c <MX_LWIP_Init+0x24c>)
 800e5be:	781b      	ldrb	r3, [r3, #0]
 800e5c0:	0619      	lsls	r1, r3, #24
 800e5c2:	4b26      	ldr	r3, [pc, #152]	; (800e65c <MX_LWIP_Init+0x24c>)
 800e5c4:	785b      	ldrb	r3, [r3, #1]
 800e5c6:	041b      	lsls	r3, r3, #16
 800e5c8:	4319      	orrs	r1, r3
 800e5ca:	4b24      	ldr	r3, [pc, #144]	; (800e65c <MX_LWIP_Init+0x24c>)
 800e5cc:	789b      	ldrb	r3, [r3, #2]
 800e5ce:	021b      	lsls	r3, r3, #8
 800e5d0:	430b      	orrs	r3, r1
 800e5d2:	4922      	ldr	r1, [pc, #136]	; (800e65c <MX_LWIP_Init+0x24c>)
 800e5d4:	78c9      	ldrb	r1, [r1, #3]
 800e5d6:	430b      	orrs	r3, r1
 800e5d8:	0a1b      	lsrs	r3, r3, #8
 800e5da:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800e5de:	431a      	orrs	r2, r3
 800e5e0:	4b1e      	ldr	r3, [pc, #120]	; (800e65c <MX_LWIP_Init+0x24c>)
 800e5e2:	781b      	ldrb	r3, [r3, #0]
 800e5e4:	0619      	lsls	r1, r3, #24
 800e5e6:	4b1d      	ldr	r3, [pc, #116]	; (800e65c <MX_LWIP_Init+0x24c>)
 800e5e8:	785b      	ldrb	r3, [r3, #1]
 800e5ea:	041b      	lsls	r3, r3, #16
 800e5ec:	4319      	orrs	r1, r3
 800e5ee:	4b1b      	ldr	r3, [pc, #108]	; (800e65c <MX_LWIP_Init+0x24c>)
 800e5f0:	789b      	ldrb	r3, [r3, #2]
 800e5f2:	021b      	lsls	r3, r3, #8
 800e5f4:	430b      	orrs	r3, r1
 800e5f6:	4919      	ldr	r1, [pc, #100]	; (800e65c <MX_LWIP_Init+0x24c>)
 800e5f8:	78c9      	ldrb	r1, [r1, #3]
 800e5fa:	430b      	orrs	r3, r1
 800e5fc:	0e1b      	lsrs	r3, r3, #24
 800e5fe:	4313      	orrs	r3, r2
 800e600:	4a19      	ldr	r2, [pc, #100]	; (800e668 <MX_LWIP_Init+0x258>)
 800e602:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800e604:	4b19      	ldr	r3, [pc, #100]	; (800e66c <MX_LWIP_Init+0x25c>)
 800e606:	9302      	str	r3, [sp, #8]
 800e608:	4b19      	ldr	r3, [pc, #100]	; (800e670 <MX_LWIP_Init+0x260>)
 800e60a:	9301      	str	r3, [sp, #4]
 800e60c:	2300      	movs	r3, #0
 800e60e:	9300      	str	r3, [sp, #0]
 800e610:	4b15      	ldr	r3, [pc, #84]	; (800e668 <MX_LWIP_Init+0x258>)
 800e612:	4a14      	ldr	r2, [pc, #80]	; (800e664 <MX_LWIP_Init+0x254>)
 800e614:	4912      	ldr	r1, [pc, #72]	; (800e660 <MX_LWIP_Init+0x250>)
 800e616:	4817      	ldr	r0, [pc, #92]	; (800e674 <MX_LWIP_Init+0x264>)
 800e618:	f004 fcec 	bl	8012ff4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800e61c:	4815      	ldr	r0, [pc, #84]	; (800e674 <MX_LWIP_Init+0x264>)
 800e61e:	f004 fe9b 	bl	8013358 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800e622:	4814      	ldr	r0, [pc, #80]	; (800e674 <MX_LWIP_Init+0x264>)
 800e624:	f004 fea8 	bl	8013378 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800e628:	4913      	ldr	r1, [pc, #76]	; (800e678 <MX_LWIP_Init+0x268>)
 800e62a:	4812      	ldr	r0, [pc, #72]	; (800e674 <MX_LWIP_Init+0x264>)
 800e62c:	f004 ffa6 	bl	801357c <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800e630:	4b12      	ldr	r3, [pc, #72]	; (800e67c <MX_LWIP_Init+0x26c>)
 800e632:	1d3c      	adds	r4, r7, #4
 800e634:	461d      	mov	r5, r3
 800e636:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e638:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e63a:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e63e:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800e642:	1d3b      	adds	r3, r7, #4
 800e644:	490b      	ldr	r1, [pc, #44]	; (800e674 <MX_LWIP_Init+0x264>)
 800e646:	4618      	mov	r0, r3
 800e648:	f000 fdb7 	bl	800f1ba <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800e64c:	bf00      	nop
 800e64e:	3720      	adds	r7, #32
 800e650:	46bd      	mov	sp, r7
 800e652:	bdb0      	pop	{r4, r5, r7, pc}
 800e654:	20001518 	.word	0x20001518
 800e658:	2000151c 	.word	0x2000151c
 800e65c:	20001520 	.word	0x20001520
 800e660:	2000150c 	.word	0x2000150c
 800e664:	20001510 	.word	0x20001510
 800e668:	20001514 	.word	0x20001514
 800e66c:	0801237d 	.word	0x0801237d
 800e670:	0800ebe1 	.word	0x0800ebe1
 800e674:	200014d8 	.word	0x200014d8
 800e678:	0800e681 	.word	0x0800e681
 800e67c:	0801ec58 	.word	0x0801ec58

0800e680 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800e680:	b480      	push	{r7}
 800e682:	b083      	sub	sp, #12
 800e684:	af00      	add	r7, sp, #0
 800e686:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800e688:	bf00      	nop
 800e68a:	370c      	adds	r7, #12
 800e68c:	46bd      	mov	sp, r7
 800e68e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e692:	4770      	bx	lr

0800e694 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800e694:	b480      	push	{r7}
 800e696:	b087      	sub	sp, #28
 800e698:	af00      	add	r7, sp, #0
 800e69a:	6078      	str	r0, [r7, #4]
 800e69c:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800e69e:	683b      	ldr	r3, [r7, #0]
 800e6a0:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800e6a2:	687b      	ldr	r3, [r7, #4]
 800e6a4:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800e6a6:	2320      	movs	r3, #32
 800e6a8:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800e6aa:	f3bf 8f4f 	dsb	sy
}
 800e6ae:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 800e6b0:	e00b      	b.n	800e6ca <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800e6b2:	4a0d      	ldr	r2, [pc, #52]	; (800e6e8 <SCB_InvalidateDCache_by_Addr+0x54>)
 800e6b4:	693b      	ldr	r3, [r7, #16]
 800e6b6:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800e6ba:	68fb      	ldr	r3, [r7, #12]
 800e6bc:	693a      	ldr	r2, [r7, #16]
 800e6be:	4413      	add	r3, r2
 800e6c0:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800e6c2:	697a      	ldr	r2, [r7, #20]
 800e6c4:	68fb      	ldr	r3, [r7, #12]
 800e6c6:	1ad3      	subs	r3, r2, r3
 800e6c8:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800e6ca:	697b      	ldr	r3, [r7, #20]
 800e6cc:	2b00      	cmp	r3, #0
 800e6ce:	dcf0      	bgt.n	800e6b2 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800e6d0:	f3bf 8f4f 	dsb	sy
}
 800e6d4:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800e6d6:	f3bf 8f6f 	isb	sy
}
 800e6da:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 800e6dc:	bf00      	nop
 800e6de:	371c      	adds	r7, #28
 800e6e0:	46bd      	mov	sp, r7
 800e6e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e6e6:	4770      	bx	lr
 800e6e8:	e000ed00 	.word	0xe000ed00

0800e6ec <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800e6ec:	b580      	push	{r7, lr}
 800e6ee:	b082      	sub	sp, #8
 800e6f0:	af00      	add	r7, sp, #0
 800e6f2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800e6f4:	4b04      	ldr	r3, [pc, #16]	; (800e708 <HAL_ETH_RxCpltCallback+0x1c>)
 800e6f6:	681b      	ldr	r3, [r3, #0]
 800e6f8:	4618      	mov	r0, r3
 800e6fa:	f000 fee7 	bl	800f4cc <osSemaphoreRelease>
}
 800e6fe:	bf00      	nop
 800e700:	3708      	adds	r7, #8
 800e702:	46bd      	mov	sp, r7
 800e704:	bd80      	pop	{r7, pc}
 800e706:	bf00      	nop
 800e708:	20005eb0 	.word	0x20005eb0

0800e70c <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b082      	sub	sp, #8
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800e714:	4b04      	ldr	r3, [pc, #16]	; (800e728 <HAL_ETH_TxCpltCallback+0x1c>)
 800e716:	681b      	ldr	r3, [r3, #0]
 800e718:	4618      	mov	r0, r3
 800e71a:	f000 fed7 	bl	800f4cc <osSemaphoreRelease>
}
 800e71e:	bf00      	nop
 800e720:	3708      	adds	r7, #8
 800e722:	46bd      	mov	sp, r7
 800e724:	bd80      	pop	{r7, pc}
 800e726:	bf00      	nop
 800e728:	20005eb4 	.word	0x20005eb4

0800e72c <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800e72c:	b580      	push	{r7, lr}
 800e72e:	b082      	sub	sp, #8
 800e730:	af00      	add	r7, sp, #0
 800e732:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800e734:	6878      	ldr	r0, [r7, #4]
 800e736:	f7f7 f9c3 	bl	8005ac0 <HAL_ETH_GetDMAError>
 800e73a:	4603      	mov	r3, r0
 800e73c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800e740:	2b80      	cmp	r3, #128	; 0x80
 800e742:	d104      	bne.n	800e74e <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800e744:	4b04      	ldr	r3, [pc, #16]	; (800e758 <HAL_ETH_ErrorCallback+0x2c>)
 800e746:	681b      	ldr	r3, [r3, #0]
 800e748:	4618      	mov	r0, r3
 800e74a:	f000 febf 	bl	800f4cc <osSemaphoreRelease>
  }
}
 800e74e:	bf00      	nop
 800e750:	3708      	adds	r7, #8
 800e752:	46bd      	mov	sp, r7
 800e754:	bd80      	pop	{r7, pc}
 800e756:	bf00      	nop
 800e758:	20005eb0 	.word	0x20005eb0

0800e75c <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800e75c:	b5b0      	push	{r4, r5, r7, lr}
 800e75e:	b0b4      	sub	sp, #208	; 0xd0
 800e760:	af00      	add	r7, sp, #0
 800e762:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800e764:	2300      	movs	r3, #0
 800e766:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
  uint32_t duplex, speed = 0;
 800e76a:	2300      	movs	r3, #0
 800e76c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  int32_t PHYLinkState = 0;
 800e770:	2300      	movs	r3, #0
 800e772:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  ETH_MACConfigTypeDef MACConf = {0};
 800e776:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e77a:	2264      	movs	r2, #100	; 0x64
 800e77c:	2100      	movs	r1, #0
 800e77e:	4618      	mov	r0, r3
 800e780:	f00f fb43 	bl	801de0a <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800e784:	4b9b      	ldr	r3, [pc, #620]	; (800e9f4 <low_level_init+0x298>)
 800e786:	4a9c      	ldr	r2, [pc, #624]	; (800e9f8 <low_level_init+0x29c>)
 800e788:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800e78a:	2300      	movs	r3, #0
 800e78c:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  MACAddr[1] = 0x80;
 800e790:	2380      	movs	r3, #128	; 0x80
 800e792:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
  MACAddr[2] = 0xE1;
 800e796:	23e1      	movs	r3, #225	; 0xe1
 800e798:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
  MACAddr[3] = 0x00;
 800e79c:	2300      	movs	r3, #0
 800e79e:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  MACAddr[4] = 0x00;
 800e7a2:	2300      	movs	r3, #0
 800e7a4:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
  MACAddr[5] = 0x00;
 800e7a8:	2300      	movs	r3, #0
 800e7aa:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
  heth.Init.MACAddr = &MACAddr[0];
 800e7ae:	4a91      	ldr	r2, [pc, #580]	; (800e9f4 <low_level_init+0x298>)
 800e7b0:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800e7b4:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800e7b6:	4b8f      	ldr	r3, [pc, #572]	; (800e9f4 <low_level_init+0x298>)
 800e7b8:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800e7bc:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800e7be:	4b8d      	ldr	r3, [pc, #564]	; (800e9f4 <low_level_init+0x298>)
 800e7c0:	4a8e      	ldr	r2, [pc, #568]	; (800e9fc <low_level_init+0x2a0>)
 800e7c2:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800e7c4:	4b8b      	ldr	r3, [pc, #556]	; (800e9f4 <low_level_init+0x298>)
 800e7c6:	4a8e      	ldr	r2, [pc, #568]	; (800ea00 <low_level_init+0x2a4>)
 800e7c8:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800e7ca:	4b8a      	ldr	r3, [pc, #552]	; (800e9f4 <low_level_init+0x298>)
 800e7cc:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800e7d0:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800e7d2:	4888      	ldr	r0, [pc, #544]	; (800e9f4 <low_level_init+0x298>)
 800e7d4:	f7f6 fb38 	bl	8004e48 <HAL_ETH_Init>
 800e7d8:	4603      	mov	r3, r0
 800e7da:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800e7de:	2238      	movs	r2, #56	; 0x38
 800e7e0:	2100      	movs	r1, #0
 800e7e2:	4888      	ldr	r0, [pc, #544]	; (800ea04 <low_level_init+0x2a8>)
 800e7e4:	f00f fb11 	bl	801de0a <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800e7e8:	4b86      	ldr	r3, [pc, #536]	; (800ea04 <low_level_init+0x2a8>)
 800e7ea:	2221      	movs	r2, #33	; 0x21
 800e7ec:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800e7ee:	4b85      	ldr	r3, [pc, #532]	; (800ea04 <low_level_init+0x2a8>)
 800e7f0:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800e7f4:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800e7f6:	4b83      	ldr	r3, [pc, #524]	; (800ea04 <low_level_init+0x2a8>)
 800e7f8:	2200      	movs	r2, #0
 800e7fa:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800e7fc:	4882      	ldr	r0, [pc, #520]	; (800ea08 <low_level_init+0x2ac>)
 800e7fe:	f004 fab3 	bl	8012d68 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800e802:	687b      	ldr	r3, [r7, #4]
 800e804:	2206      	movs	r2, #6
 800e806:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800e80a:	4b7a      	ldr	r3, [pc, #488]	; (800e9f4 <low_level_init+0x298>)
 800e80c:	685b      	ldr	r3, [r3, #4]
 800e80e:	781a      	ldrb	r2, [r3, #0]
 800e810:	687b      	ldr	r3, [r7, #4]
 800e812:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800e816:	4b77      	ldr	r3, [pc, #476]	; (800e9f4 <low_level_init+0x298>)
 800e818:	685b      	ldr	r3, [r3, #4]
 800e81a:	785a      	ldrb	r2, [r3, #1]
 800e81c:	687b      	ldr	r3, [r7, #4]
 800e81e:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800e822:	4b74      	ldr	r3, [pc, #464]	; (800e9f4 <low_level_init+0x298>)
 800e824:	685b      	ldr	r3, [r3, #4]
 800e826:	789a      	ldrb	r2, [r3, #2]
 800e828:	687b      	ldr	r3, [r7, #4]
 800e82a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800e82e:	4b71      	ldr	r3, [pc, #452]	; (800e9f4 <low_level_init+0x298>)
 800e830:	685b      	ldr	r3, [r3, #4]
 800e832:	78da      	ldrb	r2, [r3, #3]
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800e83a:	4b6e      	ldr	r3, [pc, #440]	; (800e9f4 <low_level_init+0x298>)
 800e83c:	685b      	ldr	r3, [r3, #4]
 800e83e:	791a      	ldrb	r2, [r3, #4]
 800e840:	687b      	ldr	r3, [r7, #4]
 800e842:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800e846:	4b6b      	ldr	r3, [pc, #428]	; (800e9f4 <low_level_init+0x298>)
 800e848:	685b      	ldr	r3, [r3, #4]
 800e84a:	795a      	ldrb	r2, [r3, #5]
 800e84c:	687b      	ldr	r3, [r7, #4]
 800e84e:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800e858:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800e85a:	687b      	ldr	r3, [r7, #4]
 800e85c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e860:	f043 030a 	orr.w	r3, r3, #10
 800e864:	b2da      	uxtb	r2, r3
 800e866:	687b      	ldr	r3, [r7, #4]
 800e868:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 800e86c:	2300      	movs	r3, #0
 800e86e:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e870:	2300      	movs	r3, #0
 800e872:	653b      	str	r3, [r7, #80]	; 0x50
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 800e874:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e878:	2101      	movs	r1, #1
 800e87a:	4618      	mov	r0, r3
 800e87c:	f000 fda6 	bl	800f3cc <osSemaphoreCreate>
 800e880:	4603      	mov	r3, r0
 800e882:	4a62      	ldr	r2, [pc, #392]	; (800ea0c <low_level_init+0x2b0>)
 800e884:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 800e886:	2300      	movs	r3, #0
 800e888:	647b      	str	r3, [r7, #68]	; 0x44
 800e88a:	2300      	movs	r3, #0
 800e88c:	64bb      	str	r3, [r7, #72]	; 0x48
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 800e88e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e892:	2101      	movs	r1, #1
 800e894:	4618      	mov	r0, r3
 800e896:	f000 fd99 	bl	800f3cc <osSemaphoreCreate>
 800e89a:	4603      	mov	r3, r0
 800e89c:	4a5c      	ldr	r2, [pc, #368]	; (800ea10 <low_level_init+0x2b4>)
 800e89e:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 800e8a0:	4b5a      	ldr	r3, [pc, #360]	; (800ea0c <low_level_init+0x2b0>)
 800e8a2:	681b      	ldr	r3, [r3, #0]
 800e8a4:	2100      	movs	r1, #0
 800e8a6:	4618      	mov	r0, r3
 800e8a8:	f000 fdc2 	bl	800f430 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 800e8ac:	4b58      	ldr	r3, [pc, #352]	; (800ea10 <low_level_init+0x2b4>)
 800e8ae:	681b      	ldr	r3, [r3, #0]
 800e8b0:	2100      	movs	r1, #0
 800e8b2:	4618      	mov	r0, r3
 800e8b4:	f000 fdbc 	bl	800f430 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800e8b8:	4b56      	ldr	r3, [pc, #344]	; (800ea14 <low_level_init+0x2b8>)
 800e8ba:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800e8be:	461d      	mov	r5, r3
 800e8c0:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e8c2:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e8c4:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e8c8:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800e8cc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e8d0:	6879      	ldr	r1, [r7, #4]
 800e8d2:	4618      	mov	r0, r3
 800e8d4:	f000 fc71 	bl	800f1ba <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800e8d8:	494f      	ldr	r1, [pc, #316]	; (800ea18 <low_level_init+0x2bc>)
 800e8da:	4850      	ldr	r0, [pc, #320]	; (800ea1c <low_level_init+0x2c0>)
 800e8dc:	f7f4 fc87 	bl	80031ee <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800e8e0:	484e      	ldr	r0, [pc, #312]	; (800ea1c <low_level_init+0x2c0>)
 800e8e2:	f7f4 fcb6 	bl	8003252 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800e8e6:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 800e8ea:	2b00      	cmp	r3, #0
 800e8ec:	d165      	bne.n	800e9ba <low_level_init+0x25e>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800e8ee:	484b      	ldr	r0, [pc, #300]	; (800ea1c <low_level_init+0x2c0>)
 800e8f0:	f7f4 fcfc 	bl	80032ec <LAN8742_GetLinkState>
 800e8f4:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800e8f8:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e8fc:	2b01      	cmp	r3, #1
 800e8fe:	dc06      	bgt.n	800e90e <low_level_init+0x1b2>
    {
      netif_set_link_down(netif);
 800e900:	6878      	ldr	r0, [r7, #4]
 800e902:	f004 fe0b 	bl	801351c <netif_set_link_down>
      netif_set_down(netif);
 800e906:	6878      	ldr	r0, [r7, #4]
 800e908:	f004 fda2 	bl	8013450 <netif_set_down>
 800e90c:	e057      	b.n	800e9be <low_level_init+0x262>
    }
    else
    {
      switch (PHYLinkState)
 800e90e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e912:	3b02      	subs	r3, #2
 800e914:	2b03      	cmp	r3, #3
 800e916:	d82b      	bhi.n	800e970 <low_level_init+0x214>
 800e918:	a201      	add	r2, pc, #4	; (adr r2, 800e920 <low_level_init+0x1c4>)
 800e91a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e91e:	bf00      	nop
 800e920:	0800e931 	.word	0x0800e931
 800e924:	0800e943 	.word	0x0800e943
 800e928:	0800e953 	.word	0x0800e953
 800e92c:	0800e963 	.word	0x0800e963
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800e930:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e934:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        speed = ETH_SPEED_100M;
 800e938:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e93c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        break;
 800e940:	e01f      	b.n	800e982 <low_level_init+0x226>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800e942:	2300      	movs	r3, #0
 800e944:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        speed = ETH_SPEED_100M;
 800e948:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e94c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        break;
 800e950:	e017      	b.n	800e982 <low_level_init+0x226>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800e952:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e956:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        speed = ETH_SPEED_10M;
 800e95a:	2300      	movs	r3, #0
 800e95c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        break;
 800e960:	e00f      	b.n	800e982 <low_level_init+0x226>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800e962:	2300      	movs	r3, #0
 800e964:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        speed = ETH_SPEED_10M;
 800e968:	2300      	movs	r3, #0
 800e96a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        break;
 800e96e:	e008      	b.n	800e982 <low_level_init+0x226>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 800e970:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e974:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        speed = ETH_SPEED_100M;
 800e978:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e97c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        break;
 800e980:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800e982:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e986:	4619      	mov	r1, r3
 800e988:	481a      	ldr	r0, [pc, #104]	; (800e9f4 <low_level_init+0x298>)
 800e98a:	f7f6 ff45 	bl	8005818 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800e98e:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e992:	677b      	str	r3, [r7, #116]	; 0x74
    MACConf.Speed = speed;
 800e994:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e998:	673b      	str	r3, [r7, #112]	; 0x70
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800e99a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e99e:	4619      	mov	r1, r3
 800e9a0:	4814      	ldr	r0, [pc, #80]	; (800e9f4 <low_level_init+0x298>)
 800e9a2:	f7f7 f830 	bl	8005a06 <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 800e9a6:	4813      	ldr	r0, [pc, #76]	; (800e9f4 <low_level_init+0x298>)
 800e9a8:	f7f6 fae8 	bl	8004f7c <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800e9ac:	6878      	ldr	r0, [r7, #4]
 800e9ae:	f004 fce3 	bl	8013378 <netif_set_up>
    netif_set_link_up(netif);
 800e9b2:	6878      	ldr	r0, [r7, #4]
 800e9b4:	f004 fd7e 	bl	80134b4 <netif_set_link_up>
 800e9b8:	e001      	b.n	800e9be <low_level_init+0x262>
    }

  }
  else
  {
    Error_Handler();
 800e9ba:	f7f2 fe63 	bl	8001684 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

  if(HAL_GetREVID() == 0x1000)
 800e9be:	f7f4 fd6d 	bl	800349c <HAL_GetREVID>
 800e9c2:	4603      	mov	r3, r0
 800e9c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e9c8:	d10f      	bne.n	800e9ea <low_level_init+0x28e>
  {
    /*
      This thread will keep resetting the RMII interface until good frames are received
    */
    osThreadDef(RMII_Watchdog, RMII_Thread, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE);
 800e9ca:	4b15      	ldr	r3, [pc, #84]	; (800ea20 <low_level_init+0x2c4>)
 800e9cc:	f107 040c 	add.w	r4, r7, #12
 800e9d0:	461d      	mov	r5, r3
 800e9d2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e9d4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e9d6:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e9da:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    osThreadCreate (osThread(RMII_Watchdog), NULL);
 800e9de:	f107 030c 	add.w	r3, r7, #12
 800e9e2:	2100      	movs	r1, #0
 800e9e4:	4618      	mov	r0, r3
 800e9e6:	f000 fbe8 	bl	800f1ba <osThreadCreate>
  }
}
 800e9ea:	bf00      	nop
 800e9ec:	37d0      	adds	r7, #208	; 0xd0
 800e9ee:	46bd      	mov	sp, r7
 800e9f0:	bdb0      	pop	{r4, r5, r7, pc}
 800e9f2:	bf00      	nop
 800e9f4:	20005eb8 	.word	0x20005eb8
 800e9f8:	40028000 	.word	0x40028000
 800e9fc:	20000244 	.word	0x20000244
 800ea00:	200001a4 	.word	0x200001a4
 800ea04:	20005f68 	.word	0x20005f68
 800ea08:	080217f4 	.word	0x080217f4
 800ea0c:	20005eb0 	.word	0x20005eb0
 800ea10:	20005eb4 	.word	0x20005eb4
 800ea14:	0801ec7c 	.word	0x0801ec7c
 800ea18:	2000000c 	.word	0x2000000c
 800ea1c:	20005fa0 	.word	0x20005fa0
 800ea20:	0801eca8 	.word	0x0801eca8

0800ea24 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800ea24:	b580      	push	{r7, lr}
 800ea26:	b092      	sub	sp, #72	; 0x48
 800ea28:	af00      	add	r7, sp, #0
 800ea2a:	6078      	str	r0, [r7, #4]
 800ea2c:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800ea2e:	2300      	movs	r3, #0
 800ea30:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800ea32:	2300      	movs	r3, #0
 800ea34:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800ea36:	2300      	movs	r3, #0
 800ea38:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800ea3c:	f107 030c 	add.w	r3, r7, #12
 800ea40:	2230      	movs	r2, #48	; 0x30
 800ea42:	2100      	movs	r1, #0
 800ea44:	4618      	mov	r0, r3
 800ea46:	f00f f9e0 	bl	801de0a <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800ea4a:	f107 030c 	add.w	r3, r7, #12
 800ea4e:	2230      	movs	r2, #48	; 0x30
 800ea50:	2100      	movs	r1, #0
 800ea52:	4618      	mov	r0, r3
 800ea54:	f00f f9d9 	bl	801de0a <memset>

  for(q = p; q != NULL; q = q->next)
 800ea58:	683b      	ldr	r3, [r7, #0]
 800ea5a:	643b      	str	r3, [r7, #64]	; 0x40
 800ea5c:	e045      	b.n	800eaea <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800ea5e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea60:	2b03      	cmp	r3, #3
 800ea62:	d902      	bls.n	800ea6a <low_level_output+0x46>
      return ERR_IF;
 800ea64:	f06f 030b 	mvn.w	r3, #11
 800ea68:	e06c      	b.n	800eb44 <low_level_output+0x120>

    Txbuffer[i].buffer = q->payload;
 800ea6a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea6c:	6859      	ldr	r1, [r3, #4]
 800ea6e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ea70:	4613      	mov	r3, r2
 800ea72:	005b      	lsls	r3, r3, #1
 800ea74:	4413      	add	r3, r2
 800ea76:	009b      	lsls	r3, r3, #2
 800ea78:	3348      	adds	r3, #72	; 0x48
 800ea7a:	443b      	add	r3, r7
 800ea7c:	3b3c      	subs	r3, #60	; 0x3c
 800ea7e:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800ea80:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800ea82:	895b      	ldrh	r3, [r3, #10]
 800ea84:	4619      	mov	r1, r3
 800ea86:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800ea88:	4613      	mov	r3, r2
 800ea8a:	005b      	lsls	r3, r3, #1
 800ea8c:	4413      	add	r3, r2
 800ea8e:	009b      	lsls	r3, r3, #2
 800ea90:	3348      	adds	r3, #72	; 0x48
 800ea92:	443b      	add	r3, r7
 800ea94:	3b38      	subs	r3, #56	; 0x38
 800ea96:	6019      	str	r1, [r3, #0]

    if(i>0)
 800ea98:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800ea9a:	2b00      	cmp	r3, #0
 800ea9c:	d011      	beq.n	800eac2 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800ea9e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eaa0:	1e5a      	subs	r2, r3, #1
 800eaa2:	f107 000c 	add.w	r0, r7, #12
 800eaa6:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800eaa8:	460b      	mov	r3, r1
 800eaaa:	005b      	lsls	r3, r3, #1
 800eaac:	440b      	add	r3, r1
 800eaae:	009b      	lsls	r3, r3, #2
 800eab0:	18c1      	adds	r1, r0, r3
 800eab2:	4613      	mov	r3, r2
 800eab4:	005b      	lsls	r3, r3, #1
 800eab6:	4413      	add	r3, r2
 800eab8:	009b      	lsls	r3, r3, #2
 800eaba:	3348      	adds	r3, #72	; 0x48
 800eabc:	443b      	add	r3, r7
 800eabe:	3b34      	subs	r3, #52	; 0x34
 800eac0:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800eac2:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eac4:	681b      	ldr	r3, [r3, #0]
 800eac6:	2b00      	cmp	r3, #0
 800eac8:	d109      	bne.n	800eade <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800eaca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800eacc:	4613      	mov	r3, r2
 800eace:	005b      	lsls	r3, r3, #1
 800ead0:	4413      	add	r3, r2
 800ead2:	009b      	lsls	r3, r3, #2
 800ead4:	3348      	adds	r3, #72	; 0x48
 800ead6:	443b      	add	r3, r7
 800ead8:	3b34      	subs	r3, #52	; 0x34
 800eada:	2200      	movs	r2, #0
 800eadc:	601a      	str	r2, [r3, #0]
    }

    i++;
 800eade:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800eae0:	3301      	adds	r3, #1
 800eae2:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800eae4:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eae6:	681b      	ldr	r3, [r3, #0]
 800eae8:	643b      	str	r3, [r7, #64]	; 0x40
 800eaea:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	d1b6      	bne.n	800ea5e <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800eaf0:	683b      	ldr	r3, [r7, #0]
 800eaf2:	891b      	ldrh	r3, [r3, #8]
 800eaf4:	461a      	mov	r2, r3
 800eaf6:	4b15      	ldr	r3, [pc, #84]	; (800eb4c <low_level_output+0x128>)
 800eaf8:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800eafa:	4a14      	ldr	r2, [pc, #80]	; (800eb4c <low_level_output+0x128>)
 800eafc:	f107 030c 	add.w	r3, r7, #12
 800eb00:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800eb02:	4a12      	ldr	r2, [pc, #72]	; (800eb4c <low_level_output+0x128>)
 800eb04:	683b      	ldr	r3, [r7, #0]
 800eb06:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 800eb08:	6838      	ldr	r0, [r7, #0]
 800eb0a:	f005 f98b 	bl	8013e24 <pbuf_ref>

  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 800eb0e:	490f      	ldr	r1, [pc, #60]	; (800eb4c <low_level_output+0x128>)
 800eb10:	480f      	ldr	r0, [pc, #60]	; (800eb50 <low_level_output+0x12c>)
 800eb12:	f7f6 fb23 	bl	800515c <HAL_ETH_Transmit_IT>
 800eb16:	4603      	mov	r3, r0
 800eb18:	2b00      	cmp	r3, #0
 800eb1a:	d10e      	bne.n	800eb3a <low_level_output+0x116>
    while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800eb1c:	bf00      	nop
 800eb1e:	4b0d      	ldr	r3, [pc, #52]	; (800eb54 <low_level_output+0x130>)
 800eb20:	681b      	ldr	r3, [r3, #0]
 800eb22:	f04f 31ff 	mov.w	r1, #4294967295
 800eb26:	4618      	mov	r0, r3
 800eb28:	f000 fc82 	bl	800f430 <osSemaphoreWait>
 800eb2c:	4603      	mov	r3, r0
 800eb2e:	2b00      	cmp	r3, #0
 800eb30:	d1f5      	bne.n	800eb1e <low_level_output+0xfa>

    {
    }

    HAL_ETH_ReleaseTxPacket(&heth);
 800eb32:	4807      	ldr	r0, [pc, #28]	; (800eb50 <low_level_output+0x12c>)
 800eb34:	f7f6 fcb2 	bl	800549c <HAL_ETH_ReleaseTxPacket>
 800eb38:	e002      	b.n	800eb40 <low_level_output+0x11c>
  } else {
    pbuf_free(p);
 800eb3a:	6838      	ldr	r0, [r7, #0]
 800eb3c:	f005 f8cc 	bl	8013cd8 <pbuf_free>
  }

  return errval;
 800eb40:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800eb44:	4618      	mov	r0, r3
 800eb46:	3748      	adds	r7, #72	; 0x48
 800eb48:	46bd      	mov	sp, r7
 800eb4a:	bd80      	pop	{r7, pc}
 800eb4c:	20005f68 	.word	0x20005f68
 800eb50:	20005eb8 	.word	0x20005eb8
 800eb54:	20005eb4 	.word	0x20005eb4

0800eb58 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800eb58:	b580      	push	{r7, lr}
 800eb5a:	b084      	sub	sp, #16
 800eb5c:	af00      	add	r7, sp, #0
 800eb5e:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800eb60:	2300      	movs	r3, #0
 800eb62:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800eb64:	4b07      	ldr	r3, [pc, #28]	; (800eb84 <low_level_input+0x2c>)
 800eb66:	781b      	ldrb	r3, [r3, #0]
 800eb68:	2b00      	cmp	r3, #0
 800eb6a:	d105      	bne.n	800eb78 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800eb6c:	f107 030c 	add.w	r3, r7, #12
 800eb70:	4619      	mov	r1, r3
 800eb72:	4805      	ldr	r0, [pc, #20]	; (800eb88 <low_level_input+0x30>)
 800eb74:	f7f6 fb4e 	bl	8005214 <HAL_ETH_ReadData>
  }

  return p;
 800eb78:	68fb      	ldr	r3, [r7, #12]
}
 800eb7a:	4618      	mov	r0, r3
 800eb7c:	3710      	adds	r7, #16
 800eb7e:	46bd      	mov	sp, r7
 800eb80:	bd80      	pop	{r7, pc}
 800eb82:	bf00      	nop
 800eb84:	20005eac 	.word	0x20005eac
 800eb88:	20005eb8 	.word	0x20005eb8

0800eb8c <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 800eb8c:	b580      	push	{r7, lr}
 800eb8e:	b084      	sub	sp, #16
 800eb90:	af00      	add	r7, sp, #0
 800eb92:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800eb94:	2300      	movs	r3, #0
 800eb96:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800eb98:	687b      	ldr	r3, [r7, #4]
 800eb9a:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800eb9c:	4b0f      	ldr	r3, [pc, #60]	; (800ebdc <ethernetif_input+0x50>)
 800eb9e:	681b      	ldr	r3, [r3, #0]
 800eba0:	f04f 31ff 	mov.w	r1, #4294967295
 800eba4:	4618      	mov	r0, r3
 800eba6:	f000 fc43 	bl	800f430 <osSemaphoreWait>
 800ebaa:	4603      	mov	r3, r0
 800ebac:	2b00      	cmp	r3, #0
 800ebae:	d1f5      	bne.n	800eb9c <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800ebb0:	68b8      	ldr	r0, [r7, #8]
 800ebb2:	f7ff ffd1 	bl	800eb58 <low_level_input>
 800ebb6:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800ebb8:	68fb      	ldr	r3, [r7, #12]
 800ebba:	2b00      	cmp	r3, #0
 800ebbc:	d00a      	beq.n	800ebd4 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800ebbe:	68bb      	ldr	r3, [r7, #8]
 800ebc0:	691b      	ldr	r3, [r3, #16]
 800ebc2:	68b9      	ldr	r1, [r7, #8]
 800ebc4:	68f8      	ldr	r0, [r7, #12]
 800ebc6:	4798      	blx	r3
 800ebc8:	4603      	mov	r3, r0
 800ebca:	2b00      	cmp	r3, #0
 800ebcc:	d002      	beq.n	800ebd4 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800ebce:	68f8      	ldr	r0, [r7, #12]
 800ebd0:	f005 f882 	bl	8013cd8 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800ebd4:	68fb      	ldr	r3, [r7, #12]
 800ebd6:	2b00      	cmp	r3, #0
 800ebd8:	d1ea      	bne.n	800ebb0 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800ebda:	e7df      	b.n	800eb9c <ethernetif_input+0x10>
 800ebdc:	20005eb0 	.word	0x20005eb0

0800ebe0 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800ebe0:	b580      	push	{r7, lr}
 800ebe2:	b082      	sub	sp, #8
 800ebe4:	af00      	add	r7, sp, #0
 800ebe6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800ebe8:	687b      	ldr	r3, [r7, #4]
 800ebea:	2b00      	cmp	r3, #0
 800ebec:	d106      	bne.n	800ebfc <ethernetif_init+0x1c>
 800ebee:	4b0e      	ldr	r3, [pc, #56]	; (800ec28 <ethernetif_init+0x48>)
 800ebf0:	f240 2202 	movw	r2, #514	; 0x202
 800ebf4:	490d      	ldr	r1, [pc, #52]	; (800ec2c <ethernetif_init+0x4c>)
 800ebf6:	480e      	ldr	r0, [pc, #56]	; (800ec30 <ethernetif_init+0x50>)
 800ebf8:	f00f f8a2 	bl	801dd40 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800ebfc:	687b      	ldr	r3, [r7, #4]
 800ebfe:	2273      	movs	r2, #115	; 0x73
 800ec00:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800ec04:	687b      	ldr	r3, [r7, #4]
 800ec06:	2274      	movs	r2, #116	; 0x74
 800ec08:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	4a09      	ldr	r2, [pc, #36]	; (800ec34 <ethernetif_init+0x54>)
 800ec10:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800ec12:	687b      	ldr	r3, [r7, #4]
 800ec14:	4a08      	ldr	r2, [pc, #32]	; (800ec38 <ethernetif_init+0x58>)
 800ec16:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800ec18:	6878      	ldr	r0, [r7, #4]
 800ec1a:	f7ff fd9f 	bl	800e75c <low_level_init>

  return ERR_OK;
 800ec1e:	2300      	movs	r3, #0
}
 800ec20:	4618      	mov	r0, r3
 800ec22:	3708      	adds	r7, #8
 800ec24:	46bd      	mov	sp, r7
 800ec26:	bd80      	pop	{r7, pc}
 800ec28:	0801ecc4 	.word	0x0801ecc4
 800ec2c:	0801ece0 	.word	0x0801ece0
 800ec30:	0801ecf0 	.word	0x0801ecf0
 800ec34:	0801a9c5 	.word	0x0801a9c5
 800ec38:	0800ea25 	.word	0x0800ea25

0800ec3c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800ec3c:	b580      	push	{r7, lr}
 800ec3e:	b084      	sub	sp, #16
 800ec40:	af00      	add	r7, sp, #0
 800ec42:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800ec48:	68f9      	ldr	r1, [r7, #12]
 800ec4a:	4809      	ldr	r0, [pc, #36]	; (800ec70 <pbuf_free_custom+0x34>)
 800ec4c:	f004 f97c 	bl	8012f48 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800ec50:	4b08      	ldr	r3, [pc, #32]	; (800ec74 <pbuf_free_custom+0x38>)
 800ec52:	781b      	ldrb	r3, [r3, #0]
 800ec54:	2b01      	cmp	r3, #1
 800ec56:	d107      	bne.n	800ec68 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800ec58:	4b06      	ldr	r3, [pc, #24]	; (800ec74 <pbuf_free_custom+0x38>)
 800ec5a:	2200      	movs	r2, #0
 800ec5c:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800ec5e:	4b06      	ldr	r3, [pc, #24]	; (800ec78 <pbuf_free_custom+0x3c>)
 800ec60:	681b      	ldr	r3, [r3, #0]
 800ec62:	4618      	mov	r0, r3
 800ec64:	f000 fc32 	bl	800f4cc <osSemaphoreRelease>
  }
}
 800ec68:	bf00      	nop
 800ec6a:	3710      	adds	r7, #16
 800ec6c:	46bd      	mov	sp, r7
 800ec6e:	bd80      	pop	{r7, pc}
 800ec70:	080217f4 	.word	0x080217f4
 800ec74:	20005eac 	.word	0x20005eac
 800ec78:	20005eb0 	.word	0x20005eb0

0800ec7c <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800ec7c:	b580      	push	{r7, lr}
 800ec7e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800ec80:	f7f4 fbdc 	bl	800343c <HAL_GetTick>
 800ec84:	4603      	mov	r3, r0
}
 800ec86:	4618      	mov	r0, r3
 800ec88:	bd80      	pop	{r7, pc}
	...

0800ec8c <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800ec8c:	b580      	push	{r7, lr}
 800ec8e:	b08e      	sub	sp, #56	; 0x38
 800ec90:	af00      	add	r7, sp, #0
 800ec92:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800ec94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ec98:	2200      	movs	r2, #0
 800ec9a:	601a      	str	r2, [r3, #0]
 800ec9c:	605a      	str	r2, [r3, #4]
 800ec9e:	609a      	str	r2, [r3, #8]
 800eca0:	60da      	str	r2, [r3, #12]
 800eca2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	681b      	ldr	r3, [r3, #0]
 800eca8:	4a56      	ldr	r2, [pc, #344]	; (800ee04 <HAL_ETH_MspInit+0x178>)
 800ecaa:	4293      	cmp	r3, r2
 800ecac:	f040 80a6 	bne.w	800edfc <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800ecb0:	4b55      	ldr	r3, [pc, #340]	; (800ee08 <HAL_ETH_MspInit+0x17c>)
 800ecb2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecb4:	4a54      	ldr	r2, [pc, #336]	; (800ee08 <HAL_ETH_MspInit+0x17c>)
 800ecb6:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800ecba:	6313      	str	r3, [r2, #48]	; 0x30
 800ecbc:	4b52      	ldr	r3, [pc, #328]	; (800ee08 <HAL_ETH_MspInit+0x17c>)
 800ecbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecc0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800ecc4:	623b      	str	r3, [r7, #32]
 800ecc6:	6a3b      	ldr	r3, [r7, #32]
 800ecc8:	4b4f      	ldr	r3, [pc, #316]	; (800ee08 <HAL_ETH_MspInit+0x17c>)
 800ecca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800eccc:	4a4e      	ldr	r2, [pc, #312]	; (800ee08 <HAL_ETH_MspInit+0x17c>)
 800ecce:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800ecd2:	6313      	str	r3, [r2, #48]	; 0x30
 800ecd4:	4b4c      	ldr	r3, [pc, #304]	; (800ee08 <HAL_ETH_MspInit+0x17c>)
 800ecd6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecd8:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800ecdc:	61fb      	str	r3, [r7, #28]
 800ecde:	69fb      	ldr	r3, [r7, #28]
 800ece0:	4b49      	ldr	r3, [pc, #292]	; (800ee08 <HAL_ETH_MspInit+0x17c>)
 800ece2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ece4:	4a48      	ldr	r2, [pc, #288]	; (800ee08 <HAL_ETH_MspInit+0x17c>)
 800ece6:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800ecea:	6313      	str	r3, [r2, #48]	; 0x30
 800ecec:	4b46      	ldr	r3, [pc, #280]	; (800ee08 <HAL_ETH_MspInit+0x17c>)
 800ecee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecf0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800ecf4:	61bb      	str	r3, [r7, #24]
 800ecf6:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800ecf8:	4b43      	ldr	r3, [pc, #268]	; (800ee08 <HAL_ETH_MspInit+0x17c>)
 800ecfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ecfc:	4a42      	ldr	r2, [pc, #264]	; (800ee08 <HAL_ETH_MspInit+0x17c>)
 800ecfe:	f043 0304 	orr.w	r3, r3, #4
 800ed02:	6313      	str	r3, [r2, #48]	; 0x30
 800ed04:	4b40      	ldr	r3, [pc, #256]	; (800ee08 <HAL_ETH_MspInit+0x17c>)
 800ed06:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed08:	f003 0304 	and.w	r3, r3, #4
 800ed0c:	617b      	str	r3, [r7, #20]
 800ed0e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800ed10:	4b3d      	ldr	r3, [pc, #244]	; (800ee08 <HAL_ETH_MspInit+0x17c>)
 800ed12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed14:	4a3c      	ldr	r2, [pc, #240]	; (800ee08 <HAL_ETH_MspInit+0x17c>)
 800ed16:	f043 0301 	orr.w	r3, r3, #1
 800ed1a:	6313      	str	r3, [r2, #48]	; 0x30
 800ed1c:	4b3a      	ldr	r3, [pc, #232]	; (800ee08 <HAL_ETH_MspInit+0x17c>)
 800ed1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed20:	f003 0301 	and.w	r3, r3, #1
 800ed24:	613b      	str	r3, [r7, #16]
 800ed26:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800ed28:	4b37      	ldr	r3, [pc, #220]	; (800ee08 <HAL_ETH_MspInit+0x17c>)
 800ed2a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed2c:	4a36      	ldr	r2, [pc, #216]	; (800ee08 <HAL_ETH_MspInit+0x17c>)
 800ed2e:	f043 0302 	orr.w	r3, r3, #2
 800ed32:	6313      	str	r3, [r2, #48]	; 0x30
 800ed34:	4b34      	ldr	r3, [pc, #208]	; (800ee08 <HAL_ETH_MspInit+0x17c>)
 800ed36:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed38:	f003 0302 	and.w	r3, r3, #2
 800ed3c:	60fb      	str	r3, [r7, #12]
 800ed3e:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800ed40:	4b31      	ldr	r3, [pc, #196]	; (800ee08 <HAL_ETH_MspInit+0x17c>)
 800ed42:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed44:	4a30      	ldr	r2, [pc, #192]	; (800ee08 <HAL_ETH_MspInit+0x17c>)
 800ed46:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ed4a:	6313      	str	r3, [r2, #48]	; 0x30
 800ed4c:	4b2e      	ldr	r3, [pc, #184]	; (800ee08 <HAL_ETH_MspInit+0x17c>)
 800ed4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800ed50:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800ed54:	60bb      	str	r3, [r7, #8]
 800ed56:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800ed58:	2332      	movs	r3, #50	; 0x32
 800ed5a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed5c:	2302      	movs	r3, #2
 800ed5e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed60:	2300      	movs	r3, #0
 800ed62:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ed64:	2303      	movs	r3, #3
 800ed66:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ed68:	230b      	movs	r3, #11
 800ed6a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800ed6c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ed70:	4619      	mov	r1, r3
 800ed72:	4826      	ldr	r0, [pc, #152]	; (800ee0c <HAL_ETH_MspInit+0x180>)
 800ed74:	f7f7 fdbe 	bl	80068f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800ed78:	2386      	movs	r3, #134	; 0x86
 800ed7a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed7c:	2302      	movs	r3, #2
 800ed7e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800ed80:	2300      	movs	r3, #0
 800ed82:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800ed84:	2303      	movs	r3, #3
 800ed86:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800ed88:	230b      	movs	r3, #11
 800ed8a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800ed8c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800ed90:	4619      	mov	r1, r3
 800ed92:	481f      	ldr	r0, [pc, #124]	; (800ee10 <HAL_ETH_MspInit+0x184>)
 800ed94:	f7f7 fdae 	bl	80068f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800ed98:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800ed9c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800ed9e:	2302      	movs	r3, #2
 800eda0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800eda2:	2300      	movs	r3, #0
 800eda4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800eda6:	2303      	movs	r3, #3
 800eda8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800edaa:	230b      	movs	r3, #11
 800edac:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800edae:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800edb2:	4619      	mov	r1, r3
 800edb4:	4817      	ldr	r0, [pc, #92]	; (800ee14 <HAL_ETH_MspInit+0x188>)
 800edb6:	f7f7 fd9d 	bl	80068f4 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800edba:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800edbe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800edc0:	2302      	movs	r3, #2
 800edc2:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800edc4:	2300      	movs	r3, #0
 800edc6:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800edc8:	2303      	movs	r3, #3
 800edca:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800edcc:	230b      	movs	r3, #11
 800edce:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800edd0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800edd4:	4619      	mov	r1, r3
 800edd6:	4810      	ldr	r0, [pc, #64]	; (800ee18 <HAL_ETH_MspInit+0x18c>)
 800edd8:	f7f7 fd8c 	bl	80068f4 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800eddc:	2200      	movs	r2, #0
 800edde:	2105      	movs	r1, #5
 800ede0:	203d      	movs	r0, #61	; 0x3d
 800ede2:	f7f5 fae7 	bl	80043b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800ede6:	203d      	movs	r0, #61	; 0x3d
 800ede8:	f7f5 fb00 	bl	80043ec <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 800edec:	2200      	movs	r2, #0
 800edee:	2105      	movs	r1, #5
 800edf0:	203e      	movs	r0, #62	; 0x3e
 800edf2:	f7f5 fadf 	bl	80043b4 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800edf6:	203e      	movs	r0, #62	; 0x3e
 800edf8:	f7f5 faf8 	bl	80043ec <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800edfc:	bf00      	nop
 800edfe:	3738      	adds	r7, #56	; 0x38
 800ee00:	46bd      	mov	sp, r7
 800ee02:	bd80      	pop	{r7, pc}
 800ee04:	40028000 	.word	0x40028000
 800ee08:	40023800 	.word	0x40023800
 800ee0c:	40020800 	.word	0x40020800
 800ee10:	40020000 	.word	0x40020000
 800ee14:	40020400 	.word	0x40020400
 800ee18:	40021800 	.word	0x40021800

0800ee1c <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800ee1c:	b580      	push	{r7, lr}
 800ee1e:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800ee20:	4802      	ldr	r0, [pc, #8]	; (800ee2c <ETH_PHY_IO_Init+0x10>)
 800ee22:	f7f6 fe0b 	bl	8005a3c <HAL_ETH_SetMDIOClockRange>

  return 0;
 800ee26:	2300      	movs	r3, #0
}
 800ee28:	4618      	mov	r0, r3
 800ee2a:	bd80      	pop	{r7, pc}
 800ee2c:	20005eb8 	.word	0x20005eb8

0800ee30 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800ee30:	b480      	push	{r7}
 800ee32:	af00      	add	r7, sp, #0
  return 0;
 800ee34:	2300      	movs	r3, #0
}
 800ee36:	4618      	mov	r0, r3
 800ee38:	46bd      	mov	sp, r7
 800ee3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ee3e:	4770      	bx	lr

0800ee40 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800ee40:	b580      	push	{r7, lr}
 800ee42:	b084      	sub	sp, #16
 800ee44:	af00      	add	r7, sp, #0
 800ee46:	60f8      	str	r0, [r7, #12]
 800ee48:	60b9      	str	r1, [r7, #8]
 800ee4a:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800ee4c:	687b      	ldr	r3, [r7, #4]
 800ee4e:	68ba      	ldr	r2, [r7, #8]
 800ee50:	68f9      	ldr	r1, [r7, #12]
 800ee52:	4807      	ldr	r0, [pc, #28]	; (800ee70 <ETH_PHY_IO_ReadReg+0x30>)
 800ee54:	f7f6 fc4c 	bl	80056f0 <HAL_ETH_ReadPHYRegister>
 800ee58:	4603      	mov	r3, r0
 800ee5a:	2b00      	cmp	r3, #0
 800ee5c:	d002      	beq.n	800ee64 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800ee5e:	f04f 33ff 	mov.w	r3, #4294967295
 800ee62:	e000      	b.n	800ee66 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800ee64:	2300      	movs	r3, #0
}
 800ee66:	4618      	mov	r0, r3
 800ee68:	3710      	adds	r7, #16
 800ee6a:	46bd      	mov	sp, r7
 800ee6c:	bd80      	pop	{r7, pc}
 800ee6e:	bf00      	nop
 800ee70:	20005eb8 	.word	0x20005eb8

0800ee74 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800ee74:	b580      	push	{r7, lr}
 800ee76:	b084      	sub	sp, #16
 800ee78:	af00      	add	r7, sp, #0
 800ee7a:	60f8      	str	r0, [r7, #12]
 800ee7c:	60b9      	str	r1, [r7, #8]
 800ee7e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800ee80:	687b      	ldr	r3, [r7, #4]
 800ee82:	68ba      	ldr	r2, [r7, #8]
 800ee84:	68f9      	ldr	r1, [r7, #12]
 800ee86:	4807      	ldr	r0, [pc, #28]	; (800eea4 <ETH_PHY_IO_WriteReg+0x30>)
 800ee88:	f7f6 fc7d 	bl	8005786 <HAL_ETH_WritePHYRegister>
 800ee8c:	4603      	mov	r3, r0
 800ee8e:	2b00      	cmp	r3, #0
 800ee90:	d002      	beq.n	800ee98 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800ee92:	f04f 33ff 	mov.w	r3, #4294967295
 800ee96:	e000      	b.n	800ee9a <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800ee98:	2300      	movs	r3, #0
}
 800ee9a:	4618      	mov	r0, r3
 800ee9c:	3710      	adds	r7, #16
 800ee9e:	46bd      	mov	sp, r7
 800eea0:	bd80      	pop	{r7, pc}
 800eea2:	bf00      	nop
 800eea4:	20005eb8 	.word	0x20005eb8

0800eea8 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800eea8:	b580      	push	{r7, lr}
 800eeaa:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800eeac:	f7f4 fac6 	bl	800343c <HAL_GetTick>
 800eeb0:	4603      	mov	r3, r0
}
 800eeb2:	4618      	mov	r0, r3
 800eeb4:	bd80      	pop	{r7, pc}
	...

0800eeb8 <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800eeb8:	b580      	push	{r7, lr}
 800eeba:	b0a0      	sub	sp, #128	; 0x80
 800eebc:	af00      	add	r7, sp, #0
 800eebe:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800eec0:	f107 0308 	add.w	r3, r7, #8
 800eec4:	2264      	movs	r2, #100	; 0x64
 800eec6:	2100      	movs	r1, #0
 800eec8:	4618      	mov	r0, r3
 800eeca:	f00e ff9e 	bl	801de0a <memset>
  int32_t PHYLinkState = 0;
 800eece:	2300      	movs	r3, #0
 800eed0:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800eed2:	2300      	movs	r3, #0
 800eed4:	67fb      	str	r3, [r7, #124]	; 0x7c
 800eed6:	2300      	movs	r3, #0
 800eed8:	67bb      	str	r3, [r7, #120]	; 0x78
 800eeda:	2300      	movs	r3, #0
 800eedc:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800eede:	687b      	ldr	r3, [r7, #4]
 800eee0:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800eee2:	483a      	ldr	r0, [pc, #232]	; (800efcc <ethernet_link_thread+0x114>)
 800eee4:	f7f4 fa02 	bl	80032ec <LAN8742_GetLinkState>
 800eee8:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800eeea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800eeec:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800eef0:	089b      	lsrs	r3, r3, #2
 800eef2:	f003 0301 	and.w	r3, r3, #1
 800eef6:	b2db      	uxtb	r3, r3
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d00c      	beq.n	800ef16 <ethernet_link_thread+0x5e>
 800eefc:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800eefe:	2b01      	cmp	r3, #1
 800ef00:	dc09      	bgt.n	800ef16 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800ef02:	4833      	ldr	r0, [pc, #204]	; (800efd0 <ethernet_link_thread+0x118>)
 800ef04:	f7f6 f8aa 	bl	800505c <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800ef08:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ef0a:	f004 faa1 	bl	8013450 <netif_set_down>
    netif_set_link_down(netif);
 800ef0e:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800ef10:	f004 fb04 	bl	801351c <netif_set_link_down>
 800ef14:	e055      	b.n	800efc2 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800ef16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800ef18:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ef1c:	f003 0304 	and.w	r3, r3, #4
 800ef20:	2b00      	cmp	r3, #0
 800ef22:	d14e      	bne.n	800efc2 <ethernet_link_thread+0x10a>
 800ef24:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ef26:	2b01      	cmp	r3, #1
 800ef28:	dd4b      	ble.n	800efc2 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800ef2a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800ef2c:	3b02      	subs	r3, #2
 800ef2e:	2b03      	cmp	r3, #3
 800ef30:	d82a      	bhi.n	800ef88 <ethernet_link_thread+0xd0>
 800ef32:	a201      	add	r2, pc, #4	; (adr r2, 800ef38 <ethernet_link_thread+0x80>)
 800ef34:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800ef38:	0800ef49 	.word	0x0800ef49
 800ef3c:	0800ef5b 	.word	0x0800ef5b
 800ef40:	0800ef6b 	.word	0x0800ef6b
 800ef44:	0800ef7b 	.word	0x0800ef7b
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800ef48:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ef4c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800ef4e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ef52:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800ef54:	2301      	movs	r3, #1
 800ef56:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800ef58:	e017      	b.n	800ef8a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800ef5a:	2300      	movs	r3, #0
 800ef5c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800ef5e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800ef62:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800ef64:	2301      	movs	r3, #1
 800ef66:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800ef68:	e00f      	b.n	800ef8a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800ef6a:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800ef6e:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800ef70:	2300      	movs	r3, #0
 800ef72:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800ef74:	2301      	movs	r3, #1
 800ef76:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800ef78:	e007      	b.n	800ef8a <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800ef7a:	2300      	movs	r3, #0
 800ef7c:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800ef7e:	2300      	movs	r3, #0
 800ef80:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800ef82:	2301      	movs	r3, #1
 800ef84:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800ef86:	e000      	b.n	800ef8a <ethernet_link_thread+0xd2>
    default:
      break;
 800ef88:	bf00      	nop
    }

    if(linkchanged)
 800ef8a:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800ef8c:	2b00      	cmp	r3, #0
 800ef8e:	d018      	beq.n	800efc2 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800ef90:	f107 0308 	add.w	r3, r7, #8
 800ef94:	4619      	mov	r1, r3
 800ef96:	480e      	ldr	r0, [pc, #56]	; (800efd0 <ethernet_link_thread+0x118>)
 800ef98:	f7f6 fc3e 	bl	8005818 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800ef9c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800ef9e:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800efa0:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800efa2:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800efa4:	f107 0308 	add.w	r3, r7, #8
 800efa8:	4619      	mov	r1, r3
 800efaa:	4809      	ldr	r0, [pc, #36]	; (800efd0 <ethernet_link_thread+0x118>)
 800efac:	f7f6 fd2b 	bl	8005a06 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800efb0:	4807      	ldr	r0, [pc, #28]	; (800efd0 <ethernet_link_thread+0x118>)
 800efb2:	f7f5 ffe3 	bl	8004f7c <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800efb6:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800efb8:	f004 f9de 	bl	8013378 <netif_set_up>
      netif_set_link_up(netif);
 800efbc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800efbe:	f004 fa79 	bl	80134b4 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800efc2:	2064      	movs	r0, #100	; 0x64
 800efc4:	f000 f951 	bl	800f26a <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800efc8:	e78b      	b.n	800eee2 <ethernet_link_thread+0x2a>
 800efca:	bf00      	nop
 800efcc:	20005fa0 	.word	0x20005fa0
 800efd0:	20005eb8 	.word	0x20005eb8

0800efd4 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800efd4:	b580      	push	{r7, lr}
 800efd6:	b086      	sub	sp, #24
 800efd8:	af02      	add	r7, sp, #8
 800efda:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800efdc:	4812      	ldr	r0, [pc, #72]	; (800f028 <HAL_ETH_RxAllocateCallback+0x54>)
 800efde:	f003 ff3f 	bl	8012e60 <memp_malloc_pool>
 800efe2:	60f8      	str	r0, [r7, #12]
  if (p)
 800efe4:	68fb      	ldr	r3, [r7, #12]
 800efe6:	2b00      	cmp	r3, #0
 800efe8:	d014      	beq.n	800f014 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800efea:	68fb      	ldr	r3, [r7, #12]
 800efec:	f103 0220 	add.w	r2, r3, #32
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800eff4:	68fb      	ldr	r3, [r7, #12]
 800eff6:	4a0d      	ldr	r2, [pc, #52]	; (800f02c <HAL_ETH_RxAllocateCallback+0x58>)
 800eff8:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800effa:	687b      	ldr	r3, [r7, #4]
 800effc:	681b      	ldr	r3, [r3, #0]
 800effe:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800f002:	9201      	str	r2, [sp, #4]
 800f004:	9300      	str	r3, [sp, #0]
 800f006:	68fb      	ldr	r3, [r7, #12]
 800f008:	2241      	movs	r2, #65	; 0x41
 800f00a:	2100      	movs	r1, #0
 800f00c:	2000      	movs	r0, #0
 800f00e:	f004 fca9 	bl	8013964 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800f012:	e005      	b.n	800f020 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800f014:	4b06      	ldr	r3, [pc, #24]	; (800f030 <HAL_ETH_RxAllocateCallback+0x5c>)
 800f016:	2201      	movs	r2, #1
 800f018:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800f01a:	687b      	ldr	r3, [r7, #4]
 800f01c:	2200      	movs	r2, #0
 800f01e:	601a      	str	r2, [r3, #0]
}
 800f020:	bf00      	nop
 800f022:	3710      	adds	r7, #16
 800f024:	46bd      	mov	sp, r7
 800f026:	bd80      	pop	{r7, pc}
 800f028:	080217f4 	.word	0x080217f4
 800f02c:	0800ec3d 	.word	0x0800ec3d
 800f030:	20005eac 	.word	0x20005eac

0800f034 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800f034:	b580      	push	{r7, lr}
 800f036:	b088      	sub	sp, #32
 800f038:	af00      	add	r7, sp, #0
 800f03a:	60f8      	str	r0, [r7, #12]
 800f03c:	60b9      	str	r1, [r7, #8]
 800f03e:	607a      	str	r2, [r7, #4]
 800f040:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800f042:	68fb      	ldr	r3, [r7, #12]
 800f044:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800f046:	68bb      	ldr	r3, [r7, #8]
 800f048:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800f04a:	2300      	movs	r3, #0
 800f04c:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800f04e:	687b      	ldr	r3, [r7, #4]
 800f050:	3b20      	subs	r3, #32
 800f052:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800f054:	69fb      	ldr	r3, [r7, #28]
 800f056:	2200      	movs	r2, #0
 800f058:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800f05a:	69fb      	ldr	r3, [r7, #28]
 800f05c:	2200      	movs	r2, #0
 800f05e:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800f060:	69fb      	ldr	r3, [r7, #28]
 800f062:	887a      	ldrh	r2, [r7, #2]
 800f064:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800f066:	69bb      	ldr	r3, [r7, #24]
 800f068:	681b      	ldr	r3, [r3, #0]
 800f06a:	2b00      	cmp	r3, #0
 800f06c:	d103      	bne.n	800f076 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800f06e:	69bb      	ldr	r3, [r7, #24]
 800f070:	69fa      	ldr	r2, [r7, #28]
 800f072:	601a      	str	r2, [r3, #0]
 800f074:	e003      	b.n	800f07e <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800f076:	697b      	ldr	r3, [r7, #20]
 800f078:	681b      	ldr	r3, [r3, #0]
 800f07a:	69fa      	ldr	r2, [r7, #28]
 800f07c:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800f07e:	697b      	ldr	r3, [r7, #20]
 800f080:	69fa      	ldr	r2, [r7, #28]
 800f082:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800f084:	69bb      	ldr	r3, [r7, #24]
 800f086:	681b      	ldr	r3, [r3, #0]
 800f088:	61fb      	str	r3, [r7, #28]
 800f08a:	e009      	b.n	800f0a0 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800f08c:	69fb      	ldr	r3, [r7, #28]
 800f08e:	891a      	ldrh	r2, [r3, #8]
 800f090:	887b      	ldrh	r3, [r7, #2]
 800f092:	4413      	add	r3, r2
 800f094:	b29a      	uxth	r2, r3
 800f096:	69fb      	ldr	r3, [r7, #28]
 800f098:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800f09a:	69fb      	ldr	r3, [r7, #28]
 800f09c:	681b      	ldr	r3, [r3, #0]
 800f09e:	61fb      	str	r3, [r7, #28]
 800f0a0:	69fb      	ldr	r3, [r7, #28]
 800f0a2:	2b00      	cmp	r3, #0
 800f0a4:	d1f2      	bne.n	800f08c <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800f0a6:	887b      	ldrh	r3, [r7, #2]
 800f0a8:	4619      	mov	r1, r3
 800f0aa:	6878      	ldr	r0, [r7, #4]
 800f0ac:	f7ff faf2 	bl	800e694 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800f0b0:	bf00      	nop
 800f0b2:	3720      	adds	r7, #32
 800f0b4:	46bd      	mov	sp, r7
 800f0b6:	bd80      	pop	{r7, pc}

0800f0b8 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800f0b8:	b580      	push	{r7, lr}
 800f0ba:	b082      	sub	sp, #8
 800f0bc:	af00      	add	r7, sp, #0
 800f0be:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800f0c0:	6878      	ldr	r0, [r7, #4]
 800f0c2:	f004 fe09 	bl	8013cd8 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800f0c6:	bf00      	nop
 800f0c8:	3708      	adds	r7, #8
 800f0ca:	46bd      	mov	sp, r7
 800f0cc:	bd80      	pop	{r7, pc}
	...

0800f0d0 <RMII_Thread>:
/* USER CODE BEGIN 8 */

/* USER CODE END 8 */

void RMII_Thread( void const * argument )
{
 800f0d0:	b580      	push	{r7, lr}
 800f0d2:	b082      	sub	sp, #8
 800f0d4:	af00      	add	r7, sp, #0
 800f0d6:	6078      	str	r0, [r7, #4]
  (void) argument;

  for(;;)
  {
    /* some unicast good packets are received */
    if(heth.Instance->MMCRGUFCR > 0U)
 800f0d8:	4b15      	ldr	r3, [pc, #84]	; (800f130 <RMII_Thread+0x60>)
 800f0da:	681b      	ldr	r3, [r3, #0]
 800f0dc:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800f0e0:	2b00      	cmp	r3, #0
 800f0e2:	d003      	beq.n	800f0ec <RMII_Thread+0x1c>
    {
      /* RMII Init is OK: Delete the Thread */
      osThreadTerminate(NULL);
 800f0e4:	2000      	movs	r0, #0
 800f0e6:	f000 f8b4 	bl	800f252 <osThreadTerminate>
 800f0ea:	e7f5      	b.n	800f0d8 <RMII_Thread+0x8>
    }
    else if(heth.Instance->MMCRFCECR > 10U)
 800f0ec:	4b10      	ldr	r3, [pc, #64]	; (800f130 <RMII_Thread+0x60>)
 800f0ee:	681b      	ldr	r3, [r3, #0]
 800f0f0:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800f0f4:	2b0a      	cmp	r3, #10
 800f0f6:	d916      	bls.n	800f126 <RMII_Thread+0x56>
    {
      /* ETH received too many packets with CRC errors, resetting RMII */
      SYSCFG->PMC &= ~SYSCFG_PMC_MII_RMII_SEL;
 800f0f8:	4b0e      	ldr	r3, [pc, #56]	; (800f134 <RMII_Thread+0x64>)
 800f0fa:	685b      	ldr	r3, [r3, #4]
 800f0fc:	4a0d      	ldr	r2, [pc, #52]	; (800f134 <RMII_Thread+0x64>)
 800f0fe:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800f102:	6053      	str	r3, [r2, #4]
      SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL;
 800f104:	4b0b      	ldr	r3, [pc, #44]	; (800f134 <RMII_Thread+0x64>)
 800f106:	685b      	ldr	r3, [r3, #4]
 800f108:	4a0a      	ldr	r2, [pc, #40]	; (800f134 <RMII_Thread+0x64>)
 800f10a:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800f10e:	6053      	str	r3, [r2, #4]

      heth.Instance->MMCCR |= ETH_MMCCR_CR;
 800f110:	4b07      	ldr	r3, [pc, #28]	; (800f130 <RMII_Thread+0x60>)
 800f112:	681b      	ldr	r3, [r3, #0]
 800f114:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800f118:	4b05      	ldr	r3, [pc, #20]	; (800f130 <RMII_Thread+0x60>)
 800f11a:	681b      	ldr	r3, [r3, #0]
 800f11c:	f042 0201 	orr.w	r2, r2, #1
 800f120:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800f124:	e7d8      	b.n	800f0d8 <RMII_Thread+0x8>
    }
    else
    {
      /* Delay 200 ms */
      osDelay(200);
 800f126:	20c8      	movs	r0, #200	; 0xc8
 800f128:	f000 f89f 	bl	800f26a <osDelay>
    if(heth.Instance->MMCRGUFCR > 0U)
 800f12c:	e7d4      	b.n	800f0d8 <RMII_Thread+0x8>
 800f12e:	bf00      	nop
 800f130:	20005eb8 	.word	0x20005eb8
 800f134:	40013800 	.word	0x40013800

0800f138 <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800f138:	b480      	push	{r7}
 800f13a:	b085      	sub	sp, #20
 800f13c:	af00      	add	r7, sp, #0
 800f13e:	4603      	mov	r3, r0
 800f140:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800f142:	2300      	movs	r3, #0
 800f144:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800f146:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800f14a:	2b84      	cmp	r3, #132	; 0x84
 800f14c:	d005      	beq.n	800f15a <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800f14e:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800f152:	68fb      	ldr	r3, [r7, #12]
 800f154:	4413      	add	r3, r2
 800f156:	3303      	adds	r3, #3
 800f158:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800f15a:	68fb      	ldr	r3, [r7, #12]
}
 800f15c:	4618      	mov	r0, r3
 800f15e:	3714      	adds	r7, #20
 800f160:	46bd      	mov	sp, r7
 800f162:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f166:	4770      	bx	lr

0800f168 <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800f168:	b480      	push	{r7}
 800f16a:	b083      	sub	sp, #12
 800f16c:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800f16e:	f3ef 8305 	mrs	r3, IPSR
 800f172:	607b      	str	r3, [r7, #4]
  return(result);
 800f174:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800f176:	2b00      	cmp	r3, #0
 800f178:	bf14      	ite	ne
 800f17a:	2301      	movne	r3, #1
 800f17c:	2300      	moveq	r3, #0
 800f17e:	b2db      	uxtb	r3, r3
}
 800f180:	4618      	mov	r0, r3
 800f182:	370c      	adds	r7, #12
 800f184:	46bd      	mov	sp, r7
 800f186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f18a:	4770      	bx	lr

0800f18c <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800f18c:	b580      	push	{r7, lr}
 800f18e:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800f190:	f001 fd5a 	bl	8010c48 <vTaskStartScheduler>
  
  return osOK;
 800f194:	2300      	movs	r3, #0
}
 800f196:	4618      	mov	r0, r3
 800f198:	bd80      	pop	{r7, pc}

0800f19a <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800f19a:	b580      	push	{r7, lr}
 800f19c:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800f19e:	f7ff ffe3 	bl	800f168 <inHandlerMode>
 800f1a2:	4603      	mov	r3, r0
 800f1a4:	2b00      	cmp	r3, #0
 800f1a6:	d003      	beq.n	800f1b0 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800f1a8:	f001 fe78 	bl	8010e9c <xTaskGetTickCountFromISR>
 800f1ac:	4603      	mov	r3, r0
 800f1ae:	e002      	b.n	800f1b6 <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800f1b0:	f001 fe64 	bl	8010e7c <xTaskGetTickCount>
 800f1b4:	4603      	mov	r3, r0
  }
}
 800f1b6:	4618      	mov	r0, r3
 800f1b8:	bd80      	pop	{r7, pc}

0800f1ba <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800f1ba:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f1bc:	b089      	sub	sp, #36	; 0x24
 800f1be:	af04      	add	r7, sp, #16
 800f1c0:	6078      	str	r0, [r7, #4]
 800f1c2:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	695b      	ldr	r3, [r3, #20]
 800f1c8:	2b00      	cmp	r3, #0
 800f1ca:	d020      	beq.n	800f20e <osThreadCreate+0x54>
 800f1cc:	687b      	ldr	r3, [r7, #4]
 800f1ce:	699b      	ldr	r3, [r3, #24]
 800f1d0:	2b00      	cmp	r3, #0
 800f1d2:	d01c      	beq.n	800f20e <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f1d4:	687b      	ldr	r3, [r7, #4]
 800f1d6:	685c      	ldr	r4, [r3, #4]
 800f1d8:	687b      	ldr	r3, [r7, #4]
 800f1da:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f1dc:	687b      	ldr	r3, [r7, #4]
 800f1de:	691e      	ldr	r6, [r3, #16]
 800f1e0:	687b      	ldr	r3, [r7, #4]
 800f1e2:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f1e6:	4618      	mov	r0, r3
 800f1e8:	f7ff ffa6 	bl	800f138 <makeFreeRtosPriority>
 800f1ec:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800f1ee:	687b      	ldr	r3, [r7, #4]
 800f1f0:	695b      	ldr	r3, [r3, #20]
 800f1f2:	687a      	ldr	r2, [r7, #4]
 800f1f4:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f1f6:	9202      	str	r2, [sp, #8]
 800f1f8:	9301      	str	r3, [sp, #4]
 800f1fa:	9100      	str	r1, [sp, #0]
 800f1fc:	683b      	ldr	r3, [r7, #0]
 800f1fe:	4632      	mov	r2, r6
 800f200:	4629      	mov	r1, r5
 800f202:	4620      	mov	r0, r4
 800f204:	f001 faa6 	bl	8010754 <xTaskCreateStatic>
 800f208:	4603      	mov	r3, r0
 800f20a:	60fb      	str	r3, [r7, #12]
 800f20c:	e01c      	b.n	800f248 <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	685c      	ldr	r4, [r3, #4]
 800f212:	687b      	ldr	r3, [r7, #4]
 800f214:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f216:	687b      	ldr	r3, [r7, #4]
 800f218:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f21a:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800f21c:	687b      	ldr	r3, [r7, #4]
 800f21e:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800f222:	4618      	mov	r0, r3
 800f224:	f7ff ff88 	bl	800f138 <makeFreeRtosPriority>
 800f228:	4602      	mov	r2, r0
 800f22a:	f107 030c 	add.w	r3, r7, #12
 800f22e:	9301      	str	r3, [sp, #4]
 800f230:	9200      	str	r2, [sp, #0]
 800f232:	683b      	ldr	r3, [r7, #0]
 800f234:	4632      	mov	r2, r6
 800f236:	4629      	mov	r1, r5
 800f238:	4620      	mov	r0, r4
 800f23a:	f001 faee 	bl	801081a <xTaskCreate>
 800f23e:	4603      	mov	r3, r0
 800f240:	2b01      	cmp	r3, #1
 800f242:	d001      	beq.n	800f248 <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800f244:	2300      	movs	r3, #0
 800f246:	e000      	b.n	800f24a <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800f248:	68fb      	ldr	r3, [r7, #12]
}
 800f24a:	4618      	mov	r0, r3
 800f24c:	3714      	adds	r7, #20
 800f24e:	46bd      	mov	sp, r7
 800f250:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800f252 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 800f252:	b580      	push	{r7, lr}
 800f254:	b082      	sub	sp, #8
 800f256:	af00      	add	r7, sp, #0
 800f258:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 800f25a:	6878      	ldr	r0, [r7, #4]
 800f25c:	f001 fc2c 	bl	8010ab8 <vTaskDelete>
  return osOK;
 800f260:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 800f262:	4618      	mov	r0, r3
 800f264:	3708      	adds	r7, #8
 800f266:	46bd      	mov	sp, r7
 800f268:	bd80      	pop	{r7, pc}

0800f26a <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800f26a:	b580      	push	{r7, lr}
 800f26c:	b084      	sub	sp, #16
 800f26e:	af00      	add	r7, sp, #0
 800f270:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800f272:	687b      	ldr	r3, [r7, #4]
 800f274:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800f276:	68fb      	ldr	r3, [r7, #12]
 800f278:	2b00      	cmp	r3, #0
 800f27a:	d001      	beq.n	800f280 <osDelay+0x16>
 800f27c:	68fb      	ldr	r3, [r7, #12]
 800f27e:	e000      	b.n	800f282 <osDelay+0x18>
 800f280:	2301      	movs	r3, #1
 800f282:	4618      	mov	r0, r3
 800f284:	f001 fcaa 	bl	8010bdc <vTaskDelay>
  
  return osOK;
 800f288:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800f28a:	4618      	mov	r0, r3
 800f28c:	3710      	adds	r7, #16
 800f28e:	46bd      	mov	sp, r7
 800f290:	bd80      	pop	{r7, pc}

0800f292 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800f292:	b580      	push	{r7, lr}
 800f294:	b082      	sub	sp, #8
 800f296:	af00      	add	r7, sp, #0
 800f298:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800f29a:	687b      	ldr	r3, [r7, #4]
 800f29c:	685b      	ldr	r3, [r3, #4]
 800f29e:	2b00      	cmp	r3, #0
 800f2a0:	d007      	beq.n	800f2b2 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800f2a2:	687b      	ldr	r3, [r7, #4]
 800f2a4:	685b      	ldr	r3, [r3, #4]
 800f2a6:	4619      	mov	r1, r3
 800f2a8:	2001      	movs	r0, #1
 800f2aa:	f000 fc54 	bl	800fb56 <xQueueCreateMutexStatic>
 800f2ae:	4603      	mov	r3, r0
 800f2b0:	e003      	b.n	800f2ba <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800f2b2:	2001      	movs	r0, #1
 800f2b4:	f000 fc37 	bl	800fb26 <xQueueCreateMutex>
 800f2b8:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800f2ba:	4618      	mov	r0, r3
 800f2bc:	3708      	adds	r7, #8
 800f2be:	46bd      	mov	sp, r7
 800f2c0:	bd80      	pop	{r7, pc}
	...

0800f2c4 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800f2c4:	b580      	push	{r7, lr}
 800f2c6:	b084      	sub	sp, #16
 800f2c8:	af00      	add	r7, sp, #0
 800f2ca:	6078      	str	r0, [r7, #4]
 800f2cc:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800f2ce:	2300      	movs	r3, #0
 800f2d0:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800f2d2:	687b      	ldr	r3, [r7, #4]
 800f2d4:	2b00      	cmp	r3, #0
 800f2d6:	d101      	bne.n	800f2dc <osMutexWait+0x18>
    return osErrorParameter;
 800f2d8:	2380      	movs	r3, #128	; 0x80
 800f2da:	e03a      	b.n	800f352 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800f2dc:	2300      	movs	r3, #0
 800f2de:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800f2e0:	683b      	ldr	r3, [r7, #0]
 800f2e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f2e6:	d103      	bne.n	800f2f0 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800f2e8:	f04f 33ff 	mov.w	r3, #4294967295
 800f2ec:	60fb      	str	r3, [r7, #12]
 800f2ee:	e009      	b.n	800f304 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800f2f0:	683b      	ldr	r3, [r7, #0]
 800f2f2:	2b00      	cmp	r3, #0
 800f2f4:	d006      	beq.n	800f304 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800f2f6:	683b      	ldr	r3, [r7, #0]
 800f2f8:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800f2fa:	68fb      	ldr	r3, [r7, #12]
 800f2fc:	2b00      	cmp	r3, #0
 800f2fe:	d101      	bne.n	800f304 <osMutexWait+0x40>
      ticks = 1;
 800f300:	2301      	movs	r3, #1
 800f302:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800f304:	f7ff ff30 	bl	800f168 <inHandlerMode>
 800f308:	4603      	mov	r3, r0
 800f30a:	2b00      	cmp	r3, #0
 800f30c:	d017      	beq.n	800f33e <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800f30e:	f107 0308 	add.w	r3, r7, #8
 800f312:	461a      	mov	r2, r3
 800f314:	2100      	movs	r1, #0
 800f316:	6878      	ldr	r0, [r7, #4]
 800f318:	f001 f86e 	bl	80103f8 <xQueueReceiveFromISR>
 800f31c:	4603      	mov	r3, r0
 800f31e:	2b01      	cmp	r3, #1
 800f320:	d001      	beq.n	800f326 <osMutexWait+0x62>
      return osErrorOS;
 800f322:	23ff      	movs	r3, #255	; 0xff
 800f324:	e015      	b.n	800f352 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800f326:	68bb      	ldr	r3, [r7, #8]
 800f328:	2b00      	cmp	r3, #0
 800f32a:	d011      	beq.n	800f350 <osMutexWait+0x8c>
 800f32c:	4b0b      	ldr	r3, [pc, #44]	; (800f35c <osMutexWait+0x98>)
 800f32e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f332:	601a      	str	r2, [r3, #0]
 800f334:	f3bf 8f4f 	dsb	sy
 800f338:	f3bf 8f6f 	isb	sy
 800f33c:	e008      	b.n	800f350 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800f33e:	68f9      	ldr	r1, [r7, #12]
 800f340:	6878      	ldr	r0, [r7, #4]
 800f342:	f000 ff45 	bl	80101d0 <xQueueSemaphoreTake>
 800f346:	4603      	mov	r3, r0
 800f348:	2b01      	cmp	r3, #1
 800f34a:	d001      	beq.n	800f350 <osMutexWait+0x8c>
    return osErrorOS;
 800f34c:	23ff      	movs	r3, #255	; 0xff
 800f34e:	e000      	b.n	800f352 <osMutexWait+0x8e>
  }
  
  return osOK;
 800f350:	2300      	movs	r3, #0
}
 800f352:	4618      	mov	r0, r3
 800f354:	3710      	adds	r7, #16
 800f356:	46bd      	mov	sp, r7
 800f358:	bd80      	pop	{r7, pc}
 800f35a:	bf00      	nop
 800f35c:	e000ed04 	.word	0xe000ed04

0800f360 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800f360:	b580      	push	{r7, lr}
 800f362:	b084      	sub	sp, #16
 800f364:	af00      	add	r7, sp, #0
 800f366:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800f368:	2300      	movs	r3, #0
 800f36a:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800f36c:	2300      	movs	r3, #0
 800f36e:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800f370:	f7ff fefa 	bl	800f168 <inHandlerMode>
 800f374:	4603      	mov	r3, r0
 800f376:	2b00      	cmp	r3, #0
 800f378:	d016      	beq.n	800f3a8 <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800f37a:	f107 0308 	add.w	r3, r7, #8
 800f37e:	4619      	mov	r1, r3
 800f380:	6878      	ldr	r0, [r7, #4]
 800f382:	f000 fda9 	bl	800fed8 <xQueueGiveFromISR>
 800f386:	4603      	mov	r3, r0
 800f388:	2b01      	cmp	r3, #1
 800f38a:	d001      	beq.n	800f390 <osMutexRelease+0x30>
      return osErrorOS;
 800f38c:	23ff      	movs	r3, #255	; 0xff
 800f38e:	e017      	b.n	800f3c0 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f390:	68bb      	ldr	r3, [r7, #8]
 800f392:	2b00      	cmp	r3, #0
 800f394:	d013      	beq.n	800f3be <osMutexRelease+0x5e>
 800f396:	4b0c      	ldr	r3, [pc, #48]	; (800f3c8 <osMutexRelease+0x68>)
 800f398:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f39c:	601a      	str	r2, [r3, #0]
 800f39e:	f3bf 8f4f 	dsb	sy
 800f3a2:	f3bf 8f6f 	isb	sy
 800f3a6:	e00a      	b.n	800f3be <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800f3a8:	2300      	movs	r3, #0
 800f3aa:	2200      	movs	r2, #0
 800f3ac:	2100      	movs	r1, #0
 800f3ae:	6878      	ldr	r0, [r7, #4]
 800f3b0:	f000 fbec 	bl	800fb8c <xQueueGenericSend>
 800f3b4:	4603      	mov	r3, r0
 800f3b6:	2b01      	cmp	r3, #1
 800f3b8:	d001      	beq.n	800f3be <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800f3ba:	23ff      	movs	r3, #255	; 0xff
 800f3bc:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800f3be:	68fb      	ldr	r3, [r7, #12]
}
 800f3c0:	4618      	mov	r0, r3
 800f3c2:	3710      	adds	r7, #16
 800f3c4:	46bd      	mov	sp, r7
 800f3c6:	bd80      	pop	{r7, pc}
 800f3c8:	e000ed04 	.word	0xe000ed04

0800f3cc <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800f3cc:	b580      	push	{r7, lr}
 800f3ce:	b086      	sub	sp, #24
 800f3d0:	af02      	add	r7, sp, #8
 800f3d2:	6078      	str	r0, [r7, #4]
 800f3d4:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800f3d6:	687b      	ldr	r3, [r7, #4]
 800f3d8:	685b      	ldr	r3, [r3, #4]
 800f3da:	2b00      	cmp	r3, #0
 800f3dc:	d00f      	beq.n	800f3fe <osSemaphoreCreate+0x32>
    if (count == 1) {
 800f3de:	683b      	ldr	r3, [r7, #0]
 800f3e0:	2b01      	cmp	r3, #1
 800f3e2:	d10a      	bne.n	800f3fa <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800f3e4:	687b      	ldr	r3, [r7, #4]
 800f3e6:	685b      	ldr	r3, [r3, #4]
 800f3e8:	2203      	movs	r2, #3
 800f3ea:	9200      	str	r2, [sp, #0]
 800f3ec:	2200      	movs	r2, #0
 800f3ee:	2100      	movs	r1, #0
 800f3f0:	2001      	movs	r0, #1
 800f3f2:	f000 fa9b 	bl	800f92c <xQueueGenericCreateStatic>
 800f3f6:	4603      	mov	r3, r0
 800f3f8:	e016      	b.n	800f428 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800f3fa:	2300      	movs	r3, #0
 800f3fc:	e014      	b.n	800f428 <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800f3fe:	683b      	ldr	r3, [r7, #0]
 800f400:	2b01      	cmp	r3, #1
 800f402:	d110      	bne.n	800f426 <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800f404:	2203      	movs	r2, #3
 800f406:	2100      	movs	r1, #0
 800f408:	2001      	movs	r0, #1
 800f40a:	f000 fb11 	bl	800fa30 <xQueueGenericCreate>
 800f40e:	60f8      	str	r0, [r7, #12]
 800f410:	68fb      	ldr	r3, [r7, #12]
 800f412:	2b00      	cmp	r3, #0
 800f414:	d005      	beq.n	800f422 <osSemaphoreCreate+0x56>
 800f416:	2300      	movs	r3, #0
 800f418:	2200      	movs	r2, #0
 800f41a:	2100      	movs	r1, #0
 800f41c:	68f8      	ldr	r0, [r7, #12]
 800f41e:	f000 fbb5 	bl	800fb8c <xQueueGenericSend>
      return sema;
 800f422:	68fb      	ldr	r3, [r7, #12]
 800f424:	e000      	b.n	800f428 <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800f426:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800f428:	4618      	mov	r0, r3
 800f42a:	3710      	adds	r7, #16
 800f42c:	46bd      	mov	sp, r7
 800f42e:	bd80      	pop	{r7, pc}

0800f430 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800f430:	b580      	push	{r7, lr}
 800f432:	b084      	sub	sp, #16
 800f434:	af00      	add	r7, sp, #0
 800f436:	6078      	str	r0, [r7, #4]
 800f438:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800f43a:	2300      	movs	r3, #0
 800f43c:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800f43e:	687b      	ldr	r3, [r7, #4]
 800f440:	2b00      	cmp	r3, #0
 800f442:	d101      	bne.n	800f448 <osSemaphoreWait+0x18>
    return osErrorParameter;
 800f444:	2380      	movs	r3, #128	; 0x80
 800f446:	e03a      	b.n	800f4be <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800f448:	2300      	movs	r3, #0
 800f44a:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800f44c:	683b      	ldr	r3, [r7, #0]
 800f44e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f452:	d103      	bne.n	800f45c <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800f454:	f04f 33ff 	mov.w	r3, #4294967295
 800f458:	60fb      	str	r3, [r7, #12]
 800f45a:	e009      	b.n	800f470 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800f45c:	683b      	ldr	r3, [r7, #0]
 800f45e:	2b00      	cmp	r3, #0
 800f460:	d006      	beq.n	800f470 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800f462:	683b      	ldr	r3, [r7, #0]
 800f464:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800f466:	68fb      	ldr	r3, [r7, #12]
 800f468:	2b00      	cmp	r3, #0
 800f46a:	d101      	bne.n	800f470 <osSemaphoreWait+0x40>
      ticks = 1;
 800f46c:	2301      	movs	r3, #1
 800f46e:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800f470:	f7ff fe7a 	bl	800f168 <inHandlerMode>
 800f474:	4603      	mov	r3, r0
 800f476:	2b00      	cmp	r3, #0
 800f478:	d017      	beq.n	800f4aa <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800f47a:	f107 0308 	add.w	r3, r7, #8
 800f47e:	461a      	mov	r2, r3
 800f480:	2100      	movs	r1, #0
 800f482:	6878      	ldr	r0, [r7, #4]
 800f484:	f000 ffb8 	bl	80103f8 <xQueueReceiveFromISR>
 800f488:	4603      	mov	r3, r0
 800f48a:	2b01      	cmp	r3, #1
 800f48c:	d001      	beq.n	800f492 <osSemaphoreWait+0x62>
      return osErrorOS;
 800f48e:	23ff      	movs	r3, #255	; 0xff
 800f490:	e015      	b.n	800f4be <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800f492:	68bb      	ldr	r3, [r7, #8]
 800f494:	2b00      	cmp	r3, #0
 800f496:	d011      	beq.n	800f4bc <osSemaphoreWait+0x8c>
 800f498:	4b0b      	ldr	r3, [pc, #44]	; (800f4c8 <osSemaphoreWait+0x98>)
 800f49a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f49e:	601a      	str	r2, [r3, #0]
 800f4a0:	f3bf 8f4f 	dsb	sy
 800f4a4:	f3bf 8f6f 	isb	sy
 800f4a8:	e008      	b.n	800f4bc <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800f4aa:	68f9      	ldr	r1, [r7, #12]
 800f4ac:	6878      	ldr	r0, [r7, #4]
 800f4ae:	f000 fe8f 	bl	80101d0 <xQueueSemaphoreTake>
 800f4b2:	4603      	mov	r3, r0
 800f4b4:	2b01      	cmp	r3, #1
 800f4b6:	d001      	beq.n	800f4bc <osSemaphoreWait+0x8c>
    return osErrorOS;
 800f4b8:	23ff      	movs	r3, #255	; 0xff
 800f4ba:	e000      	b.n	800f4be <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800f4bc:	2300      	movs	r3, #0
}
 800f4be:	4618      	mov	r0, r3
 800f4c0:	3710      	adds	r7, #16
 800f4c2:	46bd      	mov	sp, r7
 800f4c4:	bd80      	pop	{r7, pc}
 800f4c6:	bf00      	nop
 800f4c8:	e000ed04 	.word	0xe000ed04

0800f4cc <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800f4cc:	b580      	push	{r7, lr}
 800f4ce:	b084      	sub	sp, #16
 800f4d0:	af00      	add	r7, sp, #0
 800f4d2:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800f4d4:	2300      	movs	r3, #0
 800f4d6:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800f4d8:	2300      	movs	r3, #0
 800f4da:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800f4dc:	f7ff fe44 	bl	800f168 <inHandlerMode>
 800f4e0:	4603      	mov	r3, r0
 800f4e2:	2b00      	cmp	r3, #0
 800f4e4:	d016      	beq.n	800f514 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800f4e6:	f107 0308 	add.w	r3, r7, #8
 800f4ea:	4619      	mov	r1, r3
 800f4ec:	6878      	ldr	r0, [r7, #4]
 800f4ee:	f000 fcf3 	bl	800fed8 <xQueueGiveFromISR>
 800f4f2:	4603      	mov	r3, r0
 800f4f4:	2b01      	cmp	r3, #1
 800f4f6:	d001      	beq.n	800f4fc <osSemaphoreRelease+0x30>
      return osErrorOS;
 800f4f8:	23ff      	movs	r3, #255	; 0xff
 800f4fa:	e017      	b.n	800f52c <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f4fc:	68bb      	ldr	r3, [r7, #8]
 800f4fe:	2b00      	cmp	r3, #0
 800f500:	d013      	beq.n	800f52a <osSemaphoreRelease+0x5e>
 800f502:	4b0c      	ldr	r3, [pc, #48]	; (800f534 <osSemaphoreRelease+0x68>)
 800f504:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f508:	601a      	str	r2, [r3, #0]
 800f50a:	f3bf 8f4f 	dsb	sy
 800f50e:	f3bf 8f6f 	isb	sy
 800f512:	e00a      	b.n	800f52a <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800f514:	2300      	movs	r3, #0
 800f516:	2200      	movs	r2, #0
 800f518:	2100      	movs	r1, #0
 800f51a:	6878      	ldr	r0, [r7, #4]
 800f51c:	f000 fb36 	bl	800fb8c <xQueueGenericSend>
 800f520:	4603      	mov	r3, r0
 800f522:	2b01      	cmp	r3, #1
 800f524:	d001      	beq.n	800f52a <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800f526:	23ff      	movs	r3, #255	; 0xff
 800f528:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800f52a:	68fb      	ldr	r3, [r7, #12]
}
 800f52c:	4618      	mov	r0, r3
 800f52e:	3710      	adds	r7, #16
 800f530:	46bd      	mov	sp, r7
 800f532:	bd80      	pop	{r7, pc}
 800f534:	e000ed04 	.word	0xe000ed04

0800f538 <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800f538:	b590      	push	{r4, r7, lr}
 800f53a:	b085      	sub	sp, #20
 800f53c:	af02      	add	r7, sp, #8
 800f53e:	6078      	str	r0, [r7, #4]
 800f540:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800f542:	687b      	ldr	r3, [r7, #4]
 800f544:	689b      	ldr	r3, [r3, #8]
 800f546:	2b00      	cmp	r3, #0
 800f548:	d011      	beq.n	800f56e <osMessageCreate+0x36>
 800f54a:	687b      	ldr	r3, [r7, #4]
 800f54c:	68db      	ldr	r3, [r3, #12]
 800f54e:	2b00      	cmp	r3, #0
 800f550:	d00d      	beq.n	800f56e <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800f552:	687b      	ldr	r3, [r7, #4]
 800f554:	6818      	ldr	r0, [r3, #0]
 800f556:	687b      	ldr	r3, [r7, #4]
 800f558:	6859      	ldr	r1, [r3, #4]
 800f55a:	687b      	ldr	r3, [r7, #4]
 800f55c:	689a      	ldr	r2, [r3, #8]
 800f55e:	687b      	ldr	r3, [r7, #4]
 800f560:	68db      	ldr	r3, [r3, #12]
 800f562:	2400      	movs	r4, #0
 800f564:	9400      	str	r4, [sp, #0]
 800f566:	f000 f9e1 	bl	800f92c <xQueueGenericCreateStatic>
 800f56a:	4603      	mov	r3, r0
 800f56c:	e008      	b.n	800f580 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800f56e:	687b      	ldr	r3, [r7, #4]
 800f570:	6818      	ldr	r0, [r3, #0]
 800f572:	687b      	ldr	r3, [r7, #4]
 800f574:	685b      	ldr	r3, [r3, #4]
 800f576:	2200      	movs	r2, #0
 800f578:	4619      	mov	r1, r3
 800f57a:	f000 fa59 	bl	800fa30 <xQueueGenericCreate>
 800f57e:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800f580:	4618      	mov	r0, r3
 800f582:	370c      	adds	r7, #12
 800f584:	46bd      	mov	sp, r7
 800f586:	bd90      	pop	{r4, r7, pc}

0800f588 <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800f588:	b580      	push	{r7, lr}
 800f58a:	b086      	sub	sp, #24
 800f58c:	af00      	add	r7, sp, #0
 800f58e:	60f8      	str	r0, [r7, #12]
 800f590:	60b9      	str	r1, [r7, #8]
 800f592:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800f594:	2300      	movs	r3, #0
 800f596:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800f598:	687b      	ldr	r3, [r7, #4]
 800f59a:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800f59c:	697b      	ldr	r3, [r7, #20]
 800f59e:	2b00      	cmp	r3, #0
 800f5a0:	d101      	bne.n	800f5a6 <osMessagePut+0x1e>
    ticks = 1;
 800f5a2:	2301      	movs	r3, #1
 800f5a4:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800f5a6:	f7ff fddf 	bl	800f168 <inHandlerMode>
 800f5aa:	4603      	mov	r3, r0
 800f5ac:	2b00      	cmp	r3, #0
 800f5ae:	d018      	beq.n	800f5e2 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800f5b0:	f107 0210 	add.w	r2, r7, #16
 800f5b4:	f107 0108 	add.w	r1, r7, #8
 800f5b8:	2300      	movs	r3, #0
 800f5ba:	68f8      	ldr	r0, [r7, #12]
 800f5bc:	f000 fbec 	bl	800fd98 <xQueueGenericSendFromISR>
 800f5c0:	4603      	mov	r3, r0
 800f5c2:	2b01      	cmp	r3, #1
 800f5c4:	d001      	beq.n	800f5ca <osMessagePut+0x42>
      return osErrorOS;
 800f5c6:	23ff      	movs	r3, #255	; 0xff
 800f5c8:	e018      	b.n	800f5fc <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f5ca:	693b      	ldr	r3, [r7, #16]
 800f5cc:	2b00      	cmp	r3, #0
 800f5ce:	d014      	beq.n	800f5fa <osMessagePut+0x72>
 800f5d0:	4b0c      	ldr	r3, [pc, #48]	; (800f604 <osMessagePut+0x7c>)
 800f5d2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f5d6:	601a      	str	r2, [r3, #0]
 800f5d8:	f3bf 8f4f 	dsb	sy
 800f5dc:	f3bf 8f6f 	isb	sy
 800f5e0:	e00b      	b.n	800f5fa <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800f5e2:	f107 0108 	add.w	r1, r7, #8
 800f5e6:	2300      	movs	r3, #0
 800f5e8:	697a      	ldr	r2, [r7, #20]
 800f5ea:	68f8      	ldr	r0, [r7, #12]
 800f5ec:	f000 face 	bl	800fb8c <xQueueGenericSend>
 800f5f0:	4603      	mov	r3, r0
 800f5f2:	2b01      	cmp	r3, #1
 800f5f4:	d001      	beq.n	800f5fa <osMessagePut+0x72>
      return osErrorOS;
 800f5f6:	23ff      	movs	r3, #255	; 0xff
 800f5f8:	e000      	b.n	800f5fc <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800f5fa:	2300      	movs	r3, #0
}
 800f5fc:	4618      	mov	r0, r3
 800f5fe:	3718      	adds	r7, #24
 800f600:	46bd      	mov	sp, r7
 800f602:	bd80      	pop	{r7, pc}
 800f604:	e000ed04 	.word	0xe000ed04

0800f608 <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800f608:	b590      	push	{r4, r7, lr}
 800f60a:	b08b      	sub	sp, #44	; 0x2c
 800f60c:	af00      	add	r7, sp, #0
 800f60e:	60f8      	str	r0, [r7, #12]
 800f610:	60b9      	str	r1, [r7, #8]
 800f612:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800f614:	68bb      	ldr	r3, [r7, #8]
 800f616:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800f618:	2300      	movs	r3, #0
 800f61a:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800f61c:	68bb      	ldr	r3, [r7, #8]
 800f61e:	2b00      	cmp	r3, #0
 800f620:	d10a      	bne.n	800f638 <osMessageGet+0x30>
    event.status = osErrorParameter;
 800f622:	2380      	movs	r3, #128	; 0x80
 800f624:	617b      	str	r3, [r7, #20]
    return event;
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	461c      	mov	r4, r3
 800f62a:	f107 0314 	add.w	r3, r7, #20
 800f62e:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f632:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800f636:	e054      	b.n	800f6e2 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800f638:	2300      	movs	r3, #0
 800f63a:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800f63c:	2300      	movs	r3, #0
 800f63e:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800f640:	687b      	ldr	r3, [r7, #4]
 800f642:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f646:	d103      	bne.n	800f650 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800f648:	f04f 33ff 	mov.w	r3, #4294967295
 800f64c:	627b      	str	r3, [r7, #36]	; 0x24
 800f64e:	e009      	b.n	800f664 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800f650:	687b      	ldr	r3, [r7, #4]
 800f652:	2b00      	cmp	r3, #0
 800f654:	d006      	beq.n	800f664 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800f65a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f65c:	2b00      	cmp	r3, #0
 800f65e:	d101      	bne.n	800f664 <osMessageGet+0x5c>
      ticks = 1;
 800f660:	2301      	movs	r3, #1
 800f662:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800f664:	f7ff fd80 	bl	800f168 <inHandlerMode>
 800f668:	4603      	mov	r3, r0
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d01c      	beq.n	800f6a8 <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800f66e:	f107 0220 	add.w	r2, r7, #32
 800f672:	f107 0314 	add.w	r3, r7, #20
 800f676:	3304      	adds	r3, #4
 800f678:	4619      	mov	r1, r3
 800f67a:	68b8      	ldr	r0, [r7, #8]
 800f67c:	f000 febc 	bl	80103f8 <xQueueReceiveFromISR>
 800f680:	4603      	mov	r3, r0
 800f682:	2b01      	cmp	r3, #1
 800f684:	d102      	bne.n	800f68c <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800f686:	2310      	movs	r3, #16
 800f688:	617b      	str	r3, [r7, #20]
 800f68a:	e001      	b.n	800f690 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800f68c:	2300      	movs	r3, #0
 800f68e:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800f690:	6a3b      	ldr	r3, [r7, #32]
 800f692:	2b00      	cmp	r3, #0
 800f694:	d01d      	beq.n	800f6d2 <osMessageGet+0xca>
 800f696:	4b15      	ldr	r3, [pc, #84]	; (800f6ec <osMessageGet+0xe4>)
 800f698:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f69c:	601a      	str	r2, [r3, #0]
 800f69e:	f3bf 8f4f 	dsb	sy
 800f6a2:	f3bf 8f6f 	isb	sy
 800f6a6:	e014      	b.n	800f6d2 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800f6a8:	f107 0314 	add.w	r3, r7, #20
 800f6ac:	3304      	adds	r3, #4
 800f6ae:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800f6b0:	4619      	mov	r1, r3
 800f6b2:	68b8      	ldr	r0, [r7, #8]
 800f6b4:	f000 fca6 	bl	8010004 <xQueueReceive>
 800f6b8:	4603      	mov	r3, r0
 800f6ba:	2b01      	cmp	r3, #1
 800f6bc:	d102      	bne.n	800f6c4 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800f6be:	2310      	movs	r3, #16
 800f6c0:	617b      	str	r3, [r7, #20]
 800f6c2:	e006      	b.n	800f6d2 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800f6c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f6c6:	2b00      	cmp	r3, #0
 800f6c8:	d101      	bne.n	800f6ce <osMessageGet+0xc6>
 800f6ca:	2300      	movs	r3, #0
 800f6cc:	e000      	b.n	800f6d0 <osMessageGet+0xc8>
 800f6ce:	2340      	movs	r3, #64	; 0x40
 800f6d0:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800f6d2:	68fb      	ldr	r3, [r7, #12]
 800f6d4:	461c      	mov	r4, r3
 800f6d6:	f107 0314 	add.w	r3, r7, #20
 800f6da:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800f6de:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800f6e2:	68f8      	ldr	r0, [r7, #12]
 800f6e4:	372c      	adds	r7, #44	; 0x2c
 800f6e6:	46bd      	mov	sp, r7
 800f6e8:	bd90      	pop	{r4, r7, pc}
 800f6ea:	bf00      	nop
 800f6ec:	e000ed04 	.word	0xe000ed04

0800f6f0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800f6f0:	b480      	push	{r7}
 800f6f2:	b083      	sub	sp, #12
 800f6f4:	af00      	add	r7, sp, #0
 800f6f6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	f103 0208 	add.w	r2, r3, #8
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800f702:	687b      	ldr	r3, [r7, #4]
 800f704:	f04f 32ff 	mov.w	r2, #4294967295
 800f708:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f70a:	687b      	ldr	r3, [r7, #4]
 800f70c:	f103 0208 	add.w	r2, r3, #8
 800f710:	687b      	ldr	r3, [r7, #4]
 800f712:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800f714:	687b      	ldr	r3, [r7, #4]
 800f716:	f103 0208 	add.w	r2, r3, #8
 800f71a:	687b      	ldr	r3, [r7, #4]
 800f71c:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	2200      	movs	r2, #0
 800f722:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800f724:	bf00      	nop
 800f726:	370c      	adds	r7, #12
 800f728:	46bd      	mov	sp, r7
 800f72a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f72e:	4770      	bx	lr

0800f730 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800f730:	b480      	push	{r7}
 800f732:	b083      	sub	sp, #12
 800f734:	af00      	add	r7, sp, #0
 800f736:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800f738:	687b      	ldr	r3, [r7, #4]
 800f73a:	2200      	movs	r2, #0
 800f73c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800f73e:	bf00      	nop
 800f740:	370c      	adds	r7, #12
 800f742:	46bd      	mov	sp, r7
 800f744:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f748:	4770      	bx	lr

0800f74a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f74a:	b480      	push	{r7}
 800f74c:	b085      	sub	sp, #20
 800f74e:	af00      	add	r7, sp, #0
 800f750:	6078      	str	r0, [r7, #4]
 800f752:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800f754:	687b      	ldr	r3, [r7, #4]
 800f756:	685b      	ldr	r3, [r3, #4]
 800f758:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800f75a:	683b      	ldr	r3, [r7, #0]
 800f75c:	68fa      	ldr	r2, [r7, #12]
 800f75e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800f760:	68fb      	ldr	r3, [r7, #12]
 800f762:	689a      	ldr	r2, [r3, #8]
 800f764:	683b      	ldr	r3, [r7, #0]
 800f766:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800f768:	68fb      	ldr	r3, [r7, #12]
 800f76a:	689b      	ldr	r3, [r3, #8]
 800f76c:	683a      	ldr	r2, [r7, #0]
 800f76e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800f770:	68fb      	ldr	r3, [r7, #12]
 800f772:	683a      	ldr	r2, [r7, #0]
 800f774:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800f776:	683b      	ldr	r3, [r7, #0]
 800f778:	687a      	ldr	r2, [r7, #4]
 800f77a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f77c:	687b      	ldr	r3, [r7, #4]
 800f77e:	681b      	ldr	r3, [r3, #0]
 800f780:	1c5a      	adds	r2, r3, #1
 800f782:	687b      	ldr	r3, [r7, #4]
 800f784:	601a      	str	r2, [r3, #0]
}
 800f786:	bf00      	nop
 800f788:	3714      	adds	r7, #20
 800f78a:	46bd      	mov	sp, r7
 800f78c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f790:	4770      	bx	lr

0800f792 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800f792:	b480      	push	{r7}
 800f794:	b085      	sub	sp, #20
 800f796:	af00      	add	r7, sp, #0
 800f798:	6078      	str	r0, [r7, #4]
 800f79a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800f79c:	683b      	ldr	r3, [r7, #0]
 800f79e:	681b      	ldr	r3, [r3, #0]
 800f7a0:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800f7a2:	68bb      	ldr	r3, [r7, #8]
 800f7a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f7a8:	d103      	bne.n	800f7b2 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	691b      	ldr	r3, [r3, #16]
 800f7ae:	60fb      	str	r3, [r7, #12]
 800f7b0:	e00c      	b.n	800f7cc <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800f7b2:	687b      	ldr	r3, [r7, #4]
 800f7b4:	3308      	adds	r3, #8
 800f7b6:	60fb      	str	r3, [r7, #12]
 800f7b8:	e002      	b.n	800f7c0 <vListInsert+0x2e>
 800f7ba:	68fb      	ldr	r3, [r7, #12]
 800f7bc:	685b      	ldr	r3, [r3, #4]
 800f7be:	60fb      	str	r3, [r7, #12]
 800f7c0:	68fb      	ldr	r3, [r7, #12]
 800f7c2:	685b      	ldr	r3, [r3, #4]
 800f7c4:	681b      	ldr	r3, [r3, #0]
 800f7c6:	68ba      	ldr	r2, [r7, #8]
 800f7c8:	429a      	cmp	r2, r3
 800f7ca:	d2f6      	bcs.n	800f7ba <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800f7cc:	68fb      	ldr	r3, [r7, #12]
 800f7ce:	685a      	ldr	r2, [r3, #4]
 800f7d0:	683b      	ldr	r3, [r7, #0]
 800f7d2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800f7d4:	683b      	ldr	r3, [r7, #0]
 800f7d6:	685b      	ldr	r3, [r3, #4]
 800f7d8:	683a      	ldr	r2, [r7, #0]
 800f7da:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800f7dc:	683b      	ldr	r3, [r7, #0]
 800f7de:	68fa      	ldr	r2, [r7, #12]
 800f7e0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800f7e2:	68fb      	ldr	r3, [r7, #12]
 800f7e4:	683a      	ldr	r2, [r7, #0]
 800f7e6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800f7e8:	683b      	ldr	r3, [r7, #0]
 800f7ea:	687a      	ldr	r2, [r7, #4]
 800f7ec:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800f7ee:	687b      	ldr	r3, [r7, #4]
 800f7f0:	681b      	ldr	r3, [r3, #0]
 800f7f2:	1c5a      	adds	r2, r3, #1
 800f7f4:	687b      	ldr	r3, [r7, #4]
 800f7f6:	601a      	str	r2, [r3, #0]
}
 800f7f8:	bf00      	nop
 800f7fa:	3714      	adds	r7, #20
 800f7fc:	46bd      	mov	sp, r7
 800f7fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f802:	4770      	bx	lr

0800f804 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800f804:	b480      	push	{r7}
 800f806:	b085      	sub	sp, #20
 800f808:	af00      	add	r7, sp, #0
 800f80a:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800f80c:	687b      	ldr	r3, [r7, #4]
 800f80e:	691b      	ldr	r3, [r3, #16]
 800f810:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	685b      	ldr	r3, [r3, #4]
 800f816:	687a      	ldr	r2, [r7, #4]
 800f818:	6892      	ldr	r2, [r2, #8]
 800f81a:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f81c:	687b      	ldr	r3, [r7, #4]
 800f81e:	689b      	ldr	r3, [r3, #8]
 800f820:	687a      	ldr	r2, [r7, #4]
 800f822:	6852      	ldr	r2, [r2, #4]
 800f824:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f826:	68fb      	ldr	r3, [r7, #12]
 800f828:	685b      	ldr	r3, [r3, #4]
 800f82a:	687a      	ldr	r2, [r7, #4]
 800f82c:	429a      	cmp	r2, r3
 800f82e:	d103      	bne.n	800f838 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f830:	687b      	ldr	r3, [r7, #4]
 800f832:	689a      	ldr	r2, [r3, #8]
 800f834:	68fb      	ldr	r3, [r7, #12]
 800f836:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f838:	687b      	ldr	r3, [r7, #4]
 800f83a:	2200      	movs	r2, #0
 800f83c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f83e:	68fb      	ldr	r3, [r7, #12]
 800f840:	681b      	ldr	r3, [r3, #0]
 800f842:	1e5a      	subs	r2, r3, #1
 800f844:	68fb      	ldr	r3, [r7, #12]
 800f846:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f848:	68fb      	ldr	r3, [r7, #12]
 800f84a:	681b      	ldr	r3, [r3, #0]
}
 800f84c:	4618      	mov	r0, r3
 800f84e:	3714      	adds	r7, #20
 800f850:	46bd      	mov	sp, r7
 800f852:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f856:	4770      	bx	lr

0800f858 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f858:	b580      	push	{r7, lr}
 800f85a:	b084      	sub	sp, #16
 800f85c:	af00      	add	r7, sp, #0
 800f85e:	6078      	str	r0, [r7, #4]
 800f860:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f862:	687b      	ldr	r3, [r7, #4]
 800f864:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f866:	68fb      	ldr	r3, [r7, #12]
 800f868:	2b00      	cmp	r3, #0
 800f86a:	d10c      	bne.n	800f886 <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f86c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f870:	b672      	cpsid	i
 800f872:	f383 8811 	msr	BASEPRI, r3
 800f876:	f3bf 8f6f 	isb	sy
 800f87a:	f3bf 8f4f 	dsb	sy
 800f87e:	b662      	cpsie	i
 800f880:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f882:	bf00      	nop
 800f884:	e7fe      	b.n	800f884 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800f886:	f002 f971 	bl	8011b6c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f88a:	68fb      	ldr	r3, [r7, #12]
 800f88c:	681a      	ldr	r2, [r3, #0]
 800f88e:	68fb      	ldr	r3, [r7, #12]
 800f890:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f892:	68f9      	ldr	r1, [r7, #12]
 800f894:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f896:	fb01 f303 	mul.w	r3, r1, r3
 800f89a:	441a      	add	r2, r3
 800f89c:	68fb      	ldr	r3, [r7, #12]
 800f89e:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	2200      	movs	r2, #0
 800f8a4:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f8a6:	68fb      	ldr	r3, [r7, #12]
 800f8a8:	681a      	ldr	r2, [r3, #0]
 800f8aa:	68fb      	ldr	r3, [r7, #12]
 800f8ac:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f8ae:	68fb      	ldr	r3, [r7, #12]
 800f8b0:	681a      	ldr	r2, [r3, #0]
 800f8b2:	68fb      	ldr	r3, [r7, #12]
 800f8b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f8b6:	3b01      	subs	r3, #1
 800f8b8:	68f9      	ldr	r1, [r7, #12]
 800f8ba:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f8bc:	fb01 f303 	mul.w	r3, r1, r3
 800f8c0:	441a      	add	r2, r3
 800f8c2:	68fb      	ldr	r3, [r7, #12]
 800f8c4:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f8c6:	68fb      	ldr	r3, [r7, #12]
 800f8c8:	22ff      	movs	r2, #255	; 0xff
 800f8ca:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f8ce:	68fb      	ldr	r3, [r7, #12]
 800f8d0:	22ff      	movs	r2, #255	; 0xff
 800f8d2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f8d6:	683b      	ldr	r3, [r7, #0]
 800f8d8:	2b00      	cmp	r3, #0
 800f8da:	d114      	bne.n	800f906 <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	691b      	ldr	r3, [r3, #16]
 800f8e0:	2b00      	cmp	r3, #0
 800f8e2:	d01a      	beq.n	800f91a <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f8e4:	68fb      	ldr	r3, [r7, #12]
 800f8e6:	3310      	adds	r3, #16
 800f8e8:	4618      	mov	r0, r3
 800f8ea:	f001 fc2d 	bl	8011148 <xTaskRemoveFromEventList>
 800f8ee:	4603      	mov	r3, r0
 800f8f0:	2b00      	cmp	r3, #0
 800f8f2:	d012      	beq.n	800f91a <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f8f4:	4b0c      	ldr	r3, [pc, #48]	; (800f928 <xQueueGenericReset+0xd0>)
 800f8f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8fa:	601a      	str	r2, [r3, #0]
 800f8fc:	f3bf 8f4f 	dsb	sy
 800f900:	f3bf 8f6f 	isb	sy
 800f904:	e009      	b.n	800f91a <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f906:	68fb      	ldr	r3, [r7, #12]
 800f908:	3310      	adds	r3, #16
 800f90a:	4618      	mov	r0, r3
 800f90c:	f7ff fef0 	bl	800f6f0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f910:	68fb      	ldr	r3, [r7, #12]
 800f912:	3324      	adds	r3, #36	; 0x24
 800f914:	4618      	mov	r0, r3
 800f916:	f7ff feeb 	bl	800f6f0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f91a:	f002 f95b 	bl	8011bd4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f91e:	2301      	movs	r3, #1
}
 800f920:	4618      	mov	r0, r3
 800f922:	3710      	adds	r7, #16
 800f924:	46bd      	mov	sp, r7
 800f926:	bd80      	pop	{r7, pc}
 800f928:	e000ed04 	.word	0xe000ed04

0800f92c <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f92c:	b580      	push	{r7, lr}
 800f92e:	b08e      	sub	sp, #56	; 0x38
 800f930:	af02      	add	r7, sp, #8
 800f932:	60f8      	str	r0, [r7, #12]
 800f934:	60b9      	str	r1, [r7, #8]
 800f936:	607a      	str	r2, [r7, #4]
 800f938:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f93a:	68fb      	ldr	r3, [r7, #12]
 800f93c:	2b00      	cmp	r3, #0
 800f93e:	d10c      	bne.n	800f95a <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800f940:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f944:	b672      	cpsid	i
 800f946:	f383 8811 	msr	BASEPRI, r3
 800f94a:	f3bf 8f6f 	isb	sy
 800f94e:	f3bf 8f4f 	dsb	sy
 800f952:	b662      	cpsie	i
 800f954:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f956:	bf00      	nop
 800f958:	e7fe      	b.n	800f958 <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f95a:	683b      	ldr	r3, [r7, #0]
 800f95c:	2b00      	cmp	r3, #0
 800f95e:	d10c      	bne.n	800f97a <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800f960:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f964:	b672      	cpsid	i
 800f966:	f383 8811 	msr	BASEPRI, r3
 800f96a:	f3bf 8f6f 	isb	sy
 800f96e:	f3bf 8f4f 	dsb	sy
 800f972:	b662      	cpsie	i
 800f974:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f976:	bf00      	nop
 800f978:	e7fe      	b.n	800f978 <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f97a:	687b      	ldr	r3, [r7, #4]
 800f97c:	2b00      	cmp	r3, #0
 800f97e:	d002      	beq.n	800f986 <xQueueGenericCreateStatic+0x5a>
 800f980:	68bb      	ldr	r3, [r7, #8]
 800f982:	2b00      	cmp	r3, #0
 800f984:	d001      	beq.n	800f98a <xQueueGenericCreateStatic+0x5e>
 800f986:	2301      	movs	r3, #1
 800f988:	e000      	b.n	800f98c <xQueueGenericCreateStatic+0x60>
 800f98a:	2300      	movs	r3, #0
 800f98c:	2b00      	cmp	r3, #0
 800f98e:	d10c      	bne.n	800f9aa <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800f990:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f994:	b672      	cpsid	i
 800f996:	f383 8811 	msr	BASEPRI, r3
 800f99a:	f3bf 8f6f 	isb	sy
 800f99e:	f3bf 8f4f 	dsb	sy
 800f9a2:	b662      	cpsie	i
 800f9a4:	623b      	str	r3, [r7, #32]
}
 800f9a6:	bf00      	nop
 800f9a8:	e7fe      	b.n	800f9a8 <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f9aa:	687b      	ldr	r3, [r7, #4]
 800f9ac:	2b00      	cmp	r3, #0
 800f9ae:	d102      	bne.n	800f9b6 <xQueueGenericCreateStatic+0x8a>
 800f9b0:	68bb      	ldr	r3, [r7, #8]
 800f9b2:	2b00      	cmp	r3, #0
 800f9b4:	d101      	bne.n	800f9ba <xQueueGenericCreateStatic+0x8e>
 800f9b6:	2301      	movs	r3, #1
 800f9b8:	e000      	b.n	800f9bc <xQueueGenericCreateStatic+0x90>
 800f9ba:	2300      	movs	r3, #0
 800f9bc:	2b00      	cmp	r3, #0
 800f9be:	d10c      	bne.n	800f9da <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800f9c0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9c4:	b672      	cpsid	i
 800f9c6:	f383 8811 	msr	BASEPRI, r3
 800f9ca:	f3bf 8f6f 	isb	sy
 800f9ce:	f3bf 8f4f 	dsb	sy
 800f9d2:	b662      	cpsie	i
 800f9d4:	61fb      	str	r3, [r7, #28]
}
 800f9d6:	bf00      	nop
 800f9d8:	e7fe      	b.n	800f9d8 <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f9da:	2348      	movs	r3, #72	; 0x48
 800f9dc:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f9de:	697b      	ldr	r3, [r7, #20]
 800f9e0:	2b48      	cmp	r3, #72	; 0x48
 800f9e2:	d00c      	beq.n	800f9fe <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800f9e4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9e8:	b672      	cpsid	i
 800f9ea:	f383 8811 	msr	BASEPRI, r3
 800f9ee:	f3bf 8f6f 	isb	sy
 800f9f2:	f3bf 8f4f 	dsb	sy
 800f9f6:	b662      	cpsie	i
 800f9f8:	61bb      	str	r3, [r7, #24]
}
 800f9fa:	bf00      	nop
 800f9fc:	e7fe      	b.n	800f9fc <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f9fe:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800fa00:	683b      	ldr	r3, [r7, #0]
 800fa02:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800fa04:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa06:	2b00      	cmp	r3, #0
 800fa08:	d00d      	beq.n	800fa26 <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800fa0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa0c:	2201      	movs	r2, #1
 800fa0e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fa12:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800fa16:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa18:	9300      	str	r3, [sp, #0]
 800fa1a:	4613      	mov	r3, r2
 800fa1c:	687a      	ldr	r2, [r7, #4]
 800fa1e:	68b9      	ldr	r1, [r7, #8]
 800fa20:	68f8      	ldr	r0, [r7, #12]
 800fa22:	f000 f847 	bl	800fab4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800fa26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800fa28:	4618      	mov	r0, r3
 800fa2a:	3730      	adds	r7, #48	; 0x30
 800fa2c:	46bd      	mov	sp, r7
 800fa2e:	bd80      	pop	{r7, pc}

0800fa30 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800fa30:	b580      	push	{r7, lr}
 800fa32:	b08a      	sub	sp, #40	; 0x28
 800fa34:	af02      	add	r7, sp, #8
 800fa36:	60f8      	str	r0, [r7, #12]
 800fa38:	60b9      	str	r1, [r7, #8]
 800fa3a:	4613      	mov	r3, r2
 800fa3c:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800fa3e:	68fb      	ldr	r3, [r7, #12]
 800fa40:	2b00      	cmp	r3, #0
 800fa42:	d10c      	bne.n	800fa5e <xQueueGenericCreate+0x2e>
	__asm volatile
 800fa44:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa48:	b672      	cpsid	i
 800fa4a:	f383 8811 	msr	BASEPRI, r3
 800fa4e:	f3bf 8f6f 	isb	sy
 800fa52:	f3bf 8f4f 	dsb	sy
 800fa56:	b662      	cpsie	i
 800fa58:	613b      	str	r3, [r7, #16]
}
 800fa5a:	bf00      	nop
 800fa5c:	e7fe      	b.n	800fa5c <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800fa5e:	68bb      	ldr	r3, [r7, #8]
 800fa60:	2b00      	cmp	r3, #0
 800fa62:	d102      	bne.n	800fa6a <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800fa64:	2300      	movs	r3, #0
 800fa66:	61fb      	str	r3, [r7, #28]
 800fa68:	e004      	b.n	800fa74 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800fa6a:	68fb      	ldr	r3, [r7, #12]
 800fa6c:	68ba      	ldr	r2, [r7, #8]
 800fa6e:	fb02 f303 	mul.w	r3, r2, r3
 800fa72:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800fa74:	69fb      	ldr	r3, [r7, #28]
 800fa76:	3348      	adds	r3, #72	; 0x48
 800fa78:	4618      	mov	r0, r3
 800fa7a:	f002 f9a3 	bl	8011dc4 <pvPortMalloc>
 800fa7e:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800fa80:	69bb      	ldr	r3, [r7, #24]
 800fa82:	2b00      	cmp	r3, #0
 800fa84:	d011      	beq.n	800faaa <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800fa86:	69bb      	ldr	r3, [r7, #24]
 800fa88:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800fa8a:	697b      	ldr	r3, [r7, #20]
 800fa8c:	3348      	adds	r3, #72	; 0x48
 800fa8e:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800fa90:	69bb      	ldr	r3, [r7, #24]
 800fa92:	2200      	movs	r2, #0
 800fa94:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800fa98:	79fa      	ldrb	r2, [r7, #7]
 800fa9a:	69bb      	ldr	r3, [r7, #24]
 800fa9c:	9300      	str	r3, [sp, #0]
 800fa9e:	4613      	mov	r3, r2
 800faa0:	697a      	ldr	r2, [r7, #20]
 800faa2:	68b9      	ldr	r1, [r7, #8]
 800faa4:	68f8      	ldr	r0, [r7, #12]
 800faa6:	f000 f805 	bl	800fab4 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800faaa:	69bb      	ldr	r3, [r7, #24]
	}
 800faac:	4618      	mov	r0, r3
 800faae:	3720      	adds	r7, #32
 800fab0:	46bd      	mov	sp, r7
 800fab2:	bd80      	pop	{r7, pc}

0800fab4 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800fab4:	b580      	push	{r7, lr}
 800fab6:	b084      	sub	sp, #16
 800fab8:	af00      	add	r7, sp, #0
 800faba:	60f8      	str	r0, [r7, #12]
 800fabc:	60b9      	str	r1, [r7, #8]
 800fabe:	607a      	str	r2, [r7, #4]
 800fac0:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800fac2:	68bb      	ldr	r3, [r7, #8]
 800fac4:	2b00      	cmp	r3, #0
 800fac6:	d103      	bne.n	800fad0 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800fac8:	69bb      	ldr	r3, [r7, #24]
 800faca:	69ba      	ldr	r2, [r7, #24]
 800facc:	601a      	str	r2, [r3, #0]
 800face:	e002      	b.n	800fad6 <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800fad0:	69bb      	ldr	r3, [r7, #24]
 800fad2:	687a      	ldr	r2, [r7, #4]
 800fad4:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800fad6:	69bb      	ldr	r3, [r7, #24]
 800fad8:	68fa      	ldr	r2, [r7, #12]
 800fada:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800fadc:	69bb      	ldr	r3, [r7, #24]
 800fade:	68ba      	ldr	r2, [r7, #8]
 800fae0:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800fae2:	2101      	movs	r1, #1
 800fae4:	69b8      	ldr	r0, [r7, #24]
 800fae6:	f7ff feb7 	bl	800f858 <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800faea:	bf00      	nop
 800faec:	3710      	adds	r7, #16
 800faee:	46bd      	mov	sp, r7
 800faf0:	bd80      	pop	{r7, pc}

0800faf2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800faf2:	b580      	push	{r7, lr}
 800faf4:	b082      	sub	sp, #8
 800faf6:	af00      	add	r7, sp, #0
 800faf8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800fafa:	687b      	ldr	r3, [r7, #4]
 800fafc:	2b00      	cmp	r3, #0
 800fafe:	d00e      	beq.n	800fb1e <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800fb00:	687b      	ldr	r3, [r7, #4]
 800fb02:	2200      	movs	r2, #0
 800fb04:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800fb06:	687b      	ldr	r3, [r7, #4]
 800fb08:	2200      	movs	r2, #0
 800fb0a:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800fb0c:	687b      	ldr	r3, [r7, #4]
 800fb0e:	2200      	movs	r2, #0
 800fb10:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800fb12:	2300      	movs	r3, #0
 800fb14:	2200      	movs	r2, #0
 800fb16:	2100      	movs	r1, #0
 800fb18:	6878      	ldr	r0, [r7, #4]
 800fb1a:	f000 f837 	bl	800fb8c <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800fb1e:	bf00      	nop
 800fb20:	3708      	adds	r7, #8
 800fb22:	46bd      	mov	sp, r7
 800fb24:	bd80      	pop	{r7, pc}

0800fb26 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800fb26:	b580      	push	{r7, lr}
 800fb28:	b086      	sub	sp, #24
 800fb2a:	af00      	add	r7, sp, #0
 800fb2c:	4603      	mov	r3, r0
 800fb2e:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800fb30:	2301      	movs	r3, #1
 800fb32:	617b      	str	r3, [r7, #20]
 800fb34:	2300      	movs	r3, #0
 800fb36:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800fb38:	79fb      	ldrb	r3, [r7, #7]
 800fb3a:	461a      	mov	r2, r3
 800fb3c:	6939      	ldr	r1, [r7, #16]
 800fb3e:	6978      	ldr	r0, [r7, #20]
 800fb40:	f7ff ff76 	bl	800fa30 <xQueueGenericCreate>
 800fb44:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800fb46:	68f8      	ldr	r0, [r7, #12]
 800fb48:	f7ff ffd3 	bl	800faf2 <prvInitialiseMutex>

		return xNewQueue;
 800fb4c:	68fb      	ldr	r3, [r7, #12]
	}
 800fb4e:	4618      	mov	r0, r3
 800fb50:	3718      	adds	r7, #24
 800fb52:	46bd      	mov	sp, r7
 800fb54:	bd80      	pop	{r7, pc}

0800fb56 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800fb56:	b580      	push	{r7, lr}
 800fb58:	b088      	sub	sp, #32
 800fb5a:	af02      	add	r7, sp, #8
 800fb5c:	4603      	mov	r3, r0
 800fb5e:	6039      	str	r1, [r7, #0]
 800fb60:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800fb62:	2301      	movs	r3, #1
 800fb64:	617b      	str	r3, [r7, #20]
 800fb66:	2300      	movs	r3, #0
 800fb68:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800fb6a:	79fb      	ldrb	r3, [r7, #7]
 800fb6c:	9300      	str	r3, [sp, #0]
 800fb6e:	683b      	ldr	r3, [r7, #0]
 800fb70:	2200      	movs	r2, #0
 800fb72:	6939      	ldr	r1, [r7, #16]
 800fb74:	6978      	ldr	r0, [r7, #20]
 800fb76:	f7ff fed9 	bl	800f92c <xQueueGenericCreateStatic>
 800fb7a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800fb7c:	68f8      	ldr	r0, [r7, #12]
 800fb7e:	f7ff ffb8 	bl	800faf2 <prvInitialiseMutex>

		return xNewQueue;
 800fb82:	68fb      	ldr	r3, [r7, #12]
	}
 800fb84:	4618      	mov	r0, r3
 800fb86:	3718      	adds	r7, #24
 800fb88:	46bd      	mov	sp, r7
 800fb8a:	bd80      	pop	{r7, pc}

0800fb8c <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800fb8c:	b580      	push	{r7, lr}
 800fb8e:	b08e      	sub	sp, #56	; 0x38
 800fb90:	af00      	add	r7, sp, #0
 800fb92:	60f8      	str	r0, [r7, #12]
 800fb94:	60b9      	str	r1, [r7, #8]
 800fb96:	607a      	str	r2, [r7, #4]
 800fb98:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800fb9a:	2300      	movs	r3, #0
 800fb9c:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800fb9e:	68fb      	ldr	r3, [r7, #12]
 800fba0:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fba2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	d10c      	bne.n	800fbc2 <xQueueGenericSend+0x36>
	__asm volatile
 800fba8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbac:	b672      	cpsid	i
 800fbae:	f383 8811 	msr	BASEPRI, r3
 800fbb2:	f3bf 8f6f 	isb	sy
 800fbb6:	f3bf 8f4f 	dsb	sy
 800fbba:	b662      	cpsie	i
 800fbbc:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800fbbe:	bf00      	nop
 800fbc0:	e7fe      	b.n	800fbc0 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fbc2:	68bb      	ldr	r3, [r7, #8]
 800fbc4:	2b00      	cmp	r3, #0
 800fbc6:	d103      	bne.n	800fbd0 <xQueueGenericSend+0x44>
 800fbc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fbcc:	2b00      	cmp	r3, #0
 800fbce:	d101      	bne.n	800fbd4 <xQueueGenericSend+0x48>
 800fbd0:	2301      	movs	r3, #1
 800fbd2:	e000      	b.n	800fbd6 <xQueueGenericSend+0x4a>
 800fbd4:	2300      	movs	r3, #0
 800fbd6:	2b00      	cmp	r3, #0
 800fbd8:	d10c      	bne.n	800fbf4 <xQueueGenericSend+0x68>
	__asm volatile
 800fbda:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbde:	b672      	cpsid	i
 800fbe0:	f383 8811 	msr	BASEPRI, r3
 800fbe4:	f3bf 8f6f 	isb	sy
 800fbe8:	f3bf 8f4f 	dsb	sy
 800fbec:	b662      	cpsie	i
 800fbee:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fbf0:	bf00      	nop
 800fbf2:	e7fe      	b.n	800fbf2 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fbf4:	683b      	ldr	r3, [r7, #0]
 800fbf6:	2b02      	cmp	r3, #2
 800fbf8:	d103      	bne.n	800fc02 <xQueueGenericSend+0x76>
 800fbfa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbfc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fbfe:	2b01      	cmp	r3, #1
 800fc00:	d101      	bne.n	800fc06 <xQueueGenericSend+0x7a>
 800fc02:	2301      	movs	r3, #1
 800fc04:	e000      	b.n	800fc08 <xQueueGenericSend+0x7c>
 800fc06:	2300      	movs	r3, #0
 800fc08:	2b00      	cmp	r3, #0
 800fc0a:	d10c      	bne.n	800fc26 <xQueueGenericSend+0x9a>
	__asm volatile
 800fc0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc10:	b672      	cpsid	i
 800fc12:	f383 8811 	msr	BASEPRI, r3
 800fc16:	f3bf 8f6f 	isb	sy
 800fc1a:	f3bf 8f4f 	dsb	sy
 800fc1e:	b662      	cpsie	i
 800fc20:	623b      	str	r3, [r7, #32]
}
 800fc22:	bf00      	nop
 800fc24:	e7fe      	b.n	800fc24 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fc26:	f001 fc57 	bl	80114d8 <xTaskGetSchedulerState>
 800fc2a:	4603      	mov	r3, r0
 800fc2c:	2b00      	cmp	r3, #0
 800fc2e:	d102      	bne.n	800fc36 <xQueueGenericSend+0xaa>
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	2b00      	cmp	r3, #0
 800fc34:	d101      	bne.n	800fc3a <xQueueGenericSend+0xae>
 800fc36:	2301      	movs	r3, #1
 800fc38:	e000      	b.n	800fc3c <xQueueGenericSend+0xb0>
 800fc3a:	2300      	movs	r3, #0
 800fc3c:	2b00      	cmp	r3, #0
 800fc3e:	d10c      	bne.n	800fc5a <xQueueGenericSend+0xce>
	__asm volatile
 800fc40:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc44:	b672      	cpsid	i
 800fc46:	f383 8811 	msr	BASEPRI, r3
 800fc4a:	f3bf 8f6f 	isb	sy
 800fc4e:	f3bf 8f4f 	dsb	sy
 800fc52:	b662      	cpsie	i
 800fc54:	61fb      	str	r3, [r7, #28]
}
 800fc56:	bf00      	nop
 800fc58:	e7fe      	b.n	800fc58 <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fc5a:	f001 ff87 	bl	8011b6c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fc5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc60:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fc62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc64:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fc66:	429a      	cmp	r2, r3
 800fc68:	d302      	bcc.n	800fc70 <xQueueGenericSend+0xe4>
 800fc6a:	683b      	ldr	r3, [r7, #0]
 800fc6c:	2b02      	cmp	r3, #2
 800fc6e:	d129      	bne.n	800fcc4 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fc70:	683a      	ldr	r2, [r7, #0]
 800fc72:	68b9      	ldr	r1, [r7, #8]
 800fc74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fc76:	f000 fc5d 	bl	8010534 <prvCopyDataToQueue>
 800fc7a:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fc7c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc7e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fc80:	2b00      	cmp	r3, #0
 800fc82:	d010      	beq.n	800fca6 <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fc84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc86:	3324      	adds	r3, #36	; 0x24
 800fc88:	4618      	mov	r0, r3
 800fc8a:	f001 fa5d 	bl	8011148 <xTaskRemoveFromEventList>
 800fc8e:	4603      	mov	r3, r0
 800fc90:	2b00      	cmp	r3, #0
 800fc92:	d013      	beq.n	800fcbc <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800fc94:	4b3f      	ldr	r3, [pc, #252]	; (800fd94 <xQueueGenericSend+0x208>)
 800fc96:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fc9a:	601a      	str	r2, [r3, #0]
 800fc9c:	f3bf 8f4f 	dsb	sy
 800fca0:	f3bf 8f6f 	isb	sy
 800fca4:	e00a      	b.n	800fcbc <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800fca6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fca8:	2b00      	cmp	r3, #0
 800fcaa:	d007      	beq.n	800fcbc <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800fcac:	4b39      	ldr	r3, [pc, #228]	; (800fd94 <xQueueGenericSend+0x208>)
 800fcae:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fcb2:	601a      	str	r2, [r3, #0]
 800fcb4:	f3bf 8f4f 	dsb	sy
 800fcb8:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800fcbc:	f001 ff8a 	bl	8011bd4 <vPortExitCritical>
				return pdPASS;
 800fcc0:	2301      	movs	r3, #1
 800fcc2:	e063      	b.n	800fd8c <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fcc4:	687b      	ldr	r3, [r7, #4]
 800fcc6:	2b00      	cmp	r3, #0
 800fcc8:	d103      	bne.n	800fcd2 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800fcca:	f001 ff83 	bl	8011bd4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800fcce:	2300      	movs	r3, #0
 800fcd0:	e05c      	b.n	800fd8c <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fcd2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800fcd4:	2b00      	cmp	r3, #0
 800fcd6:	d106      	bne.n	800fce6 <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800fcd8:	f107 0314 	add.w	r3, r7, #20
 800fcdc:	4618      	mov	r0, r3
 800fcde:	f001 fa97 	bl	8011210 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fce2:	2301      	movs	r3, #1
 800fce4:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fce6:	f001 ff75 	bl	8011bd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fcea:	f001 f81b 	bl	8010d24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fcee:	f001 ff3d 	bl	8011b6c <vPortEnterCritical>
 800fcf2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcf4:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fcf8:	b25b      	sxtb	r3, r3
 800fcfa:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fcfe:	d103      	bne.n	800fd08 <xQueueGenericSend+0x17c>
 800fd00:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd02:	2200      	movs	r2, #0
 800fd04:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fd08:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd0a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fd0e:	b25b      	sxtb	r3, r3
 800fd10:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fd14:	d103      	bne.n	800fd1e <xQueueGenericSend+0x192>
 800fd16:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd18:	2200      	movs	r2, #0
 800fd1a:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fd1e:	f001 ff59 	bl	8011bd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fd22:	1d3a      	adds	r2, r7, #4
 800fd24:	f107 0314 	add.w	r3, r7, #20
 800fd28:	4611      	mov	r1, r2
 800fd2a:	4618      	mov	r0, r3
 800fd2c:	f001 fa86 	bl	801123c <xTaskCheckForTimeOut>
 800fd30:	4603      	mov	r3, r0
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d124      	bne.n	800fd80 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800fd36:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fd38:	f000 fcf4 	bl	8010724 <prvIsQueueFull>
 800fd3c:	4603      	mov	r3, r0
 800fd3e:	2b00      	cmp	r3, #0
 800fd40:	d018      	beq.n	800fd74 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800fd42:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fd44:	3310      	adds	r3, #16
 800fd46:	687a      	ldr	r2, [r7, #4]
 800fd48:	4611      	mov	r1, r2
 800fd4a:	4618      	mov	r0, r3
 800fd4c:	f001 f9d6 	bl	80110fc <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800fd50:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fd52:	f000 fc7f 	bl	8010654 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800fd56:	f000 fff3 	bl	8010d40 <xTaskResumeAll>
 800fd5a:	4603      	mov	r3, r0
 800fd5c:	2b00      	cmp	r3, #0
 800fd5e:	f47f af7c 	bne.w	800fc5a <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800fd62:	4b0c      	ldr	r3, [pc, #48]	; (800fd94 <xQueueGenericSend+0x208>)
 800fd64:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fd68:	601a      	str	r2, [r3, #0]
 800fd6a:	f3bf 8f4f 	dsb	sy
 800fd6e:	f3bf 8f6f 	isb	sy
 800fd72:	e772      	b.n	800fc5a <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800fd74:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fd76:	f000 fc6d 	bl	8010654 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fd7a:	f000 ffe1 	bl	8010d40 <xTaskResumeAll>
 800fd7e:	e76c      	b.n	800fc5a <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800fd80:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fd82:	f000 fc67 	bl	8010654 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fd86:	f000 ffdb 	bl	8010d40 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800fd8a:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800fd8c:	4618      	mov	r0, r3
 800fd8e:	3738      	adds	r7, #56	; 0x38
 800fd90:	46bd      	mov	sp, r7
 800fd92:	bd80      	pop	{r7, pc}
 800fd94:	e000ed04 	.word	0xe000ed04

0800fd98 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800fd98:	b580      	push	{r7, lr}
 800fd9a:	b08e      	sub	sp, #56	; 0x38
 800fd9c:	af00      	add	r7, sp, #0
 800fd9e:	60f8      	str	r0, [r7, #12]
 800fda0:	60b9      	str	r1, [r7, #8]
 800fda2:	607a      	str	r2, [r7, #4]
 800fda4:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fda6:	68fb      	ldr	r3, [r7, #12]
 800fda8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fdaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdac:	2b00      	cmp	r3, #0
 800fdae:	d10c      	bne.n	800fdca <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800fdb0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fdb4:	b672      	cpsid	i
 800fdb6:	f383 8811 	msr	BASEPRI, r3
 800fdba:	f3bf 8f6f 	isb	sy
 800fdbe:	f3bf 8f4f 	dsb	sy
 800fdc2:	b662      	cpsie	i
 800fdc4:	627b      	str	r3, [r7, #36]	; 0x24
}
 800fdc6:	bf00      	nop
 800fdc8:	e7fe      	b.n	800fdc8 <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fdca:	68bb      	ldr	r3, [r7, #8]
 800fdcc:	2b00      	cmp	r3, #0
 800fdce:	d103      	bne.n	800fdd8 <xQueueGenericSendFromISR+0x40>
 800fdd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fdd2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdd4:	2b00      	cmp	r3, #0
 800fdd6:	d101      	bne.n	800fddc <xQueueGenericSendFromISR+0x44>
 800fdd8:	2301      	movs	r3, #1
 800fdda:	e000      	b.n	800fdde <xQueueGenericSendFromISR+0x46>
 800fddc:	2300      	movs	r3, #0
 800fdde:	2b00      	cmp	r3, #0
 800fde0:	d10c      	bne.n	800fdfc <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800fde2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fde6:	b672      	cpsid	i
 800fde8:	f383 8811 	msr	BASEPRI, r3
 800fdec:	f3bf 8f6f 	isb	sy
 800fdf0:	f3bf 8f4f 	dsb	sy
 800fdf4:	b662      	cpsie	i
 800fdf6:	623b      	str	r3, [r7, #32]
}
 800fdf8:	bf00      	nop
 800fdfa:	e7fe      	b.n	800fdfa <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800fdfc:	683b      	ldr	r3, [r7, #0]
 800fdfe:	2b02      	cmp	r3, #2
 800fe00:	d103      	bne.n	800fe0a <xQueueGenericSendFromISR+0x72>
 800fe02:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe04:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe06:	2b01      	cmp	r3, #1
 800fe08:	d101      	bne.n	800fe0e <xQueueGenericSendFromISR+0x76>
 800fe0a:	2301      	movs	r3, #1
 800fe0c:	e000      	b.n	800fe10 <xQueueGenericSendFromISR+0x78>
 800fe0e:	2300      	movs	r3, #0
 800fe10:	2b00      	cmp	r3, #0
 800fe12:	d10c      	bne.n	800fe2e <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800fe14:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe18:	b672      	cpsid	i
 800fe1a:	f383 8811 	msr	BASEPRI, r3
 800fe1e:	f3bf 8f6f 	isb	sy
 800fe22:	f3bf 8f4f 	dsb	sy
 800fe26:	b662      	cpsie	i
 800fe28:	61fb      	str	r3, [r7, #28]
}
 800fe2a:	bf00      	nop
 800fe2c:	e7fe      	b.n	800fe2c <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fe2e:	f001 ff85 	bl	8011d3c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800fe32:	f3ef 8211 	mrs	r2, BASEPRI
 800fe36:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fe3a:	b672      	cpsid	i
 800fe3c:	f383 8811 	msr	BASEPRI, r3
 800fe40:	f3bf 8f6f 	isb	sy
 800fe44:	f3bf 8f4f 	dsb	sy
 800fe48:	b662      	cpsie	i
 800fe4a:	61ba      	str	r2, [r7, #24]
 800fe4c:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800fe4e:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fe50:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800fe52:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe54:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800fe56:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe58:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800fe5a:	429a      	cmp	r2, r3
 800fe5c:	d302      	bcc.n	800fe64 <xQueueGenericSendFromISR+0xcc>
 800fe5e:	683b      	ldr	r3, [r7, #0]
 800fe60:	2b02      	cmp	r3, #2
 800fe62:	d12c      	bne.n	800febe <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800fe64:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe66:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fe6a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800fe6e:	683a      	ldr	r2, [r7, #0]
 800fe70:	68b9      	ldr	r1, [r7, #8]
 800fe72:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fe74:	f000 fb5e 	bl	8010534 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800fe78:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800fe7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fe80:	d112      	bne.n	800fea8 <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fe82:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe86:	2b00      	cmp	r3, #0
 800fe88:	d016      	beq.n	800feb8 <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fe8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fe8c:	3324      	adds	r3, #36	; 0x24
 800fe8e:	4618      	mov	r0, r3
 800fe90:	f001 f95a 	bl	8011148 <xTaskRemoveFromEventList>
 800fe94:	4603      	mov	r3, r0
 800fe96:	2b00      	cmp	r3, #0
 800fe98:	d00e      	beq.n	800feb8 <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800fe9a:	687b      	ldr	r3, [r7, #4]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d00b      	beq.n	800feb8 <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	2201      	movs	r2, #1
 800fea4:	601a      	str	r2, [r3, #0]
 800fea6:	e007      	b.n	800feb8 <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800fea8:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800feac:	3301      	adds	r3, #1
 800feae:	b2db      	uxtb	r3, r3
 800feb0:	b25a      	sxtb	r2, r3
 800feb2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800feb4:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800feb8:	2301      	movs	r3, #1
 800feba:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800febc:	e001      	b.n	800fec2 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800febe:	2300      	movs	r3, #0
 800fec0:	637b      	str	r3, [r7, #52]	; 0x34
 800fec2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fec4:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800fec6:	693b      	ldr	r3, [r7, #16]
 800fec8:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800fecc:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fece:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800fed0:	4618      	mov	r0, r3
 800fed2:	3738      	adds	r7, #56	; 0x38
 800fed4:	46bd      	mov	sp, r7
 800fed6:	bd80      	pop	{r7, pc}

0800fed8 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fed8:	b580      	push	{r7, lr}
 800feda:	b08e      	sub	sp, #56	; 0x38
 800fedc:	af00      	add	r7, sp, #0
 800fede:	6078      	str	r0, [r7, #4]
 800fee0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fee2:	687b      	ldr	r3, [r7, #4]
 800fee4:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800fee6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fee8:	2b00      	cmp	r3, #0
 800feea:	d10c      	bne.n	800ff06 <xQueueGiveFromISR+0x2e>
	__asm volatile
 800feec:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fef0:	b672      	cpsid	i
 800fef2:	f383 8811 	msr	BASEPRI, r3
 800fef6:	f3bf 8f6f 	isb	sy
 800fefa:	f3bf 8f4f 	dsb	sy
 800fefe:	b662      	cpsie	i
 800ff00:	623b      	str	r3, [r7, #32]
}
 800ff02:	bf00      	nop
 800ff04:	e7fe      	b.n	800ff04 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800ff06:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ff0a:	2b00      	cmp	r3, #0
 800ff0c:	d00c      	beq.n	800ff28 <xQueueGiveFromISR+0x50>
	__asm volatile
 800ff0e:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff12:	b672      	cpsid	i
 800ff14:	f383 8811 	msr	BASEPRI, r3
 800ff18:	f3bf 8f6f 	isb	sy
 800ff1c:	f3bf 8f4f 	dsb	sy
 800ff20:	b662      	cpsie	i
 800ff22:	61fb      	str	r3, [r7, #28]
}
 800ff24:	bf00      	nop
 800ff26:	e7fe      	b.n	800ff26 <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800ff28:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff2a:	681b      	ldr	r3, [r3, #0]
 800ff2c:	2b00      	cmp	r3, #0
 800ff2e:	d103      	bne.n	800ff38 <xQueueGiveFromISR+0x60>
 800ff30:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff32:	689b      	ldr	r3, [r3, #8]
 800ff34:	2b00      	cmp	r3, #0
 800ff36:	d101      	bne.n	800ff3c <xQueueGiveFromISR+0x64>
 800ff38:	2301      	movs	r3, #1
 800ff3a:	e000      	b.n	800ff3e <xQueueGiveFromISR+0x66>
 800ff3c:	2300      	movs	r3, #0
 800ff3e:	2b00      	cmp	r3, #0
 800ff40:	d10c      	bne.n	800ff5c <xQueueGiveFromISR+0x84>
	__asm volatile
 800ff42:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff46:	b672      	cpsid	i
 800ff48:	f383 8811 	msr	BASEPRI, r3
 800ff4c:	f3bf 8f6f 	isb	sy
 800ff50:	f3bf 8f4f 	dsb	sy
 800ff54:	b662      	cpsie	i
 800ff56:	61bb      	str	r3, [r7, #24]
}
 800ff58:	bf00      	nop
 800ff5a:	e7fe      	b.n	800ff5a <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800ff5c:	f001 feee 	bl	8011d3c <vPortValidateInterruptPriority>
	__asm volatile
 800ff60:	f3ef 8211 	mrs	r2, BASEPRI
 800ff64:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff68:	b672      	cpsid	i
 800ff6a:	f383 8811 	msr	BASEPRI, r3
 800ff6e:	f3bf 8f6f 	isb	sy
 800ff72:	f3bf 8f4f 	dsb	sy
 800ff76:	b662      	cpsie	i
 800ff78:	617a      	str	r2, [r7, #20]
 800ff7a:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800ff7c:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800ff7e:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800ff80:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ff84:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800ff86:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff88:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff8a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800ff8c:	429a      	cmp	r2, r3
 800ff8e:	d22b      	bcs.n	800ffe8 <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800ff90:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ff92:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800ff96:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800ff9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800ff9c:	1c5a      	adds	r2, r3, #1
 800ff9e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffa0:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800ffa2:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800ffa6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ffaa:	d112      	bne.n	800ffd2 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800ffac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffb0:	2b00      	cmp	r3, #0
 800ffb2:	d016      	beq.n	800ffe2 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800ffb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffb6:	3324      	adds	r3, #36	; 0x24
 800ffb8:	4618      	mov	r0, r3
 800ffba:	f001 f8c5 	bl	8011148 <xTaskRemoveFromEventList>
 800ffbe:	4603      	mov	r3, r0
 800ffc0:	2b00      	cmp	r3, #0
 800ffc2:	d00e      	beq.n	800ffe2 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800ffc4:	683b      	ldr	r3, [r7, #0]
 800ffc6:	2b00      	cmp	r3, #0
 800ffc8:	d00b      	beq.n	800ffe2 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800ffca:	683b      	ldr	r3, [r7, #0]
 800ffcc:	2201      	movs	r2, #1
 800ffce:	601a      	str	r2, [r3, #0]
 800ffd0:	e007      	b.n	800ffe2 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800ffd2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800ffd6:	3301      	adds	r3, #1
 800ffd8:	b2db      	uxtb	r3, r3
 800ffda:	b25a      	sxtb	r2, r3
 800ffdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffde:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800ffe2:	2301      	movs	r3, #1
 800ffe4:	637b      	str	r3, [r7, #52]	; 0x34
 800ffe6:	e001      	b.n	800ffec <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800ffe8:	2300      	movs	r3, #0
 800ffea:	637b      	str	r3, [r7, #52]	; 0x34
 800ffec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800ffee:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800fff0:	68fb      	ldr	r3, [r7, #12]
 800fff2:	f383 8811 	msr	BASEPRI, r3
}
 800fff6:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fff8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800fffa:	4618      	mov	r0, r3
 800fffc:	3738      	adds	r7, #56	; 0x38
 800fffe:	46bd      	mov	sp, r7
 8010000:	bd80      	pop	{r7, pc}
	...

08010004 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8010004:	b580      	push	{r7, lr}
 8010006:	b08c      	sub	sp, #48	; 0x30
 8010008:	af00      	add	r7, sp, #0
 801000a:	60f8      	str	r0, [r7, #12]
 801000c:	60b9      	str	r1, [r7, #8]
 801000e:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8010010:	2300      	movs	r3, #0
 8010012:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8010014:	68fb      	ldr	r3, [r7, #12]
 8010016:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8010018:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801001a:	2b00      	cmp	r3, #0
 801001c:	d10c      	bne.n	8010038 <xQueueReceive+0x34>
	__asm volatile
 801001e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010022:	b672      	cpsid	i
 8010024:	f383 8811 	msr	BASEPRI, r3
 8010028:	f3bf 8f6f 	isb	sy
 801002c:	f3bf 8f4f 	dsb	sy
 8010030:	b662      	cpsie	i
 8010032:	623b      	str	r3, [r7, #32]
}
 8010034:	bf00      	nop
 8010036:	e7fe      	b.n	8010036 <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010038:	68bb      	ldr	r3, [r7, #8]
 801003a:	2b00      	cmp	r3, #0
 801003c:	d103      	bne.n	8010046 <xQueueReceive+0x42>
 801003e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010042:	2b00      	cmp	r3, #0
 8010044:	d101      	bne.n	801004a <xQueueReceive+0x46>
 8010046:	2301      	movs	r3, #1
 8010048:	e000      	b.n	801004c <xQueueReceive+0x48>
 801004a:	2300      	movs	r3, #0
 801004c:	2b00      	cmp	r3, #0
 801004e:	d10c      	bne.n	801006a <xQueueReceive+0x66>
	__asm volatile
 8010050:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010054:	b672      	cpsid	i
 8010056:	f383 8811 	msr	BASEPRI, r3
 801005a:	f3bf 8f6f 	isb	sy
 801005e:	f3bf 8f4f 	dsb	sy
 8010062:	b662      	cpsie	i
 8010064:	61fb      	str	r3, [r7, #28]
}
 8010066:	bf00      	nop
 8010068:	e7fe      	b.n	8010068 <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 801006a:	f001 fa35 	bl	80114d8 <xTaskGetSchedulerState>
 801006e:	4603      	mov	r3, r0
 8010070:	2b00      	cmp	r3, #0
 8010072:	d102      	bne.n	801007a <xQueueReceive+0x76>
 8010074:	687b      	ldr	r3, [r7, #4]
 8010076:	2b00      	cmp	r3, #0
 8010078:	d101      	bne.n	801007e <xQueueReceive+0x7a>
 801007a:	2301      	movs	r3, #1
 801007c:	e000      	b.n	8010080 <xQueueReceive+0x7c>
 801007e:	2300      	movs	r3, #0
 8010080:	2b00      	cmp	r3, #0
 8010082:	d10c      	bne.n	801009e <xQueueReceive+0x9a>
	__asm volatile
 8010084:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010088:	b672      	cpsid	i
 801008a:	f383 8811 	msr	BASEPRI, r3
 801008e:	f3bf 8f6f 	isb	sy
 8010092:	f3bf 8f4f 	dsb	sy
 8010096:	b662      	cpsie	i
 8010098:	61bb      	str	r3, [r7, #24]
}
 801009a:	bf00      	nop
 801009c:	e7fe      	b.n	801009c <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801009e:	f001 fd65 	bl	8011b6c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 80100a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80100a6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80100a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100aa:	2b00      	cmp	r3, #0
 80100ac:	d01f      	beq.n	80100ee <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 80100ae:	68b9      	ldr	r1, [r7, #8]
 80100b0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80100b2:	f000 faa9 	bl	8010608 <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80100b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80100b8:	1e5a      	subs	r2, r3, #1
 80100ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100bc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80100be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100c0:	691b      	ldr	r3, [r3, #16]
 80100c2:	2b00      	cmp	r3, #0
 80100c4:	d00f      	beq.n	80100e6 <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80100c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80100c8:	3310      	adds	r3, #16
 80100ca:	4618      	mov	r0, r3
 80100cc:	f001 f83c 	bl	8011148 <xTaskRemoveFromEventList>
 80100d0:	4603      	mov	r3, r0
 80100d2:	2b00      	cmp	r3, #0
 80100d4:	d007      	beq.n	80100e6 <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 80100d6:	4b3d      	ldr	r3, [pc, #244]	; (80101cc <xQueueReceive+0x1c8>)
 80100d8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80100dc:	601a      	str	r2, [r3, #0]
 80100de:	f3bf 8f4f 	dsb	sy
 80100e2:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80100e6:	f001 fd75 	bl	8011bd4 <vPortExitCritical>
				return pdPASS;
 80100ea:	2301      	movs	r3, #1
 80100ec:	e069      	b.n	80101c2 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80100ee:	687b      	ldr	r3, [r7, #4]
 80100f0:	2b00      	cmp	r3, #0
 80100f2:	d103      	bne.n	80100fc <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 80100f4:	f001 fd6e 	bl	8011bd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80100f8:	2300      	movs	r3, #0
 80100fa:	e062      	b.n	80101c2 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 80100fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80100fe:	2b00      	cmp	r3, #0
 8010100:	d106      	bne.n	8010110 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8010102:	f107 0310 	add.w	r3, r7, #16
 8010106:	4618      	mov	r0, r3
 8010108:	f001 f882 	bl	8011210 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 801010c:	2301      	movs	r3, #1
 801010e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8010110:	f001 fd60 	bl	8011bd4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8010114:	f000 fe06 	bl	8010d24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010118:	f001 fd28 	bl	8011b6c <vPortEnterCritical>
 801011c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801011e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010122:	b25b      	sxtb	r3, r3
 8010124:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010128:	d103      	bne.n	8010132 <xQueueReceive+0x12e>
 801012a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801012c:	2200      	movs	r2, #0
 801012e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8010132:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010134:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010138:	b25b      	sxtb	r3, r3
 801013a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801013e:	d103      	bne.n	8010148 <xQueueReceive+0x144>
 8010140:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010142:	2200      	movs	r2, #0
 8010144:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010148:	f001 fd44 	bl	8011bd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 801014c:	1d3a      	adds	r2, r7, #4
 801014e:	f107 0310 	add.w	r3, r7, #16
 8010152:	4611      	mov	r1, r2
 8010154:	4618      	mov	r0, r3
 8010156:	f001 f871 	bl	801123c <xTaskCheckForTimeOut>
 801015a:	4603      	mov	r3, r0
 801015c:	2b00      	cmp	r3, #0
 801015e:	d123      	bne.n	80101a8 <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010160:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8010162:	f000 fac9 	bl	80106f8 <prvIsQueueEmpty>
 8010166:	4603      	mov	r3, r0
 8010168:	2b00      	cmp	r3, #0
 801016a:	d017      	beq.n	801019c <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 801016c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801016e:	3324      	adds	r3, #36	; 0x24
 8010170:	687a      	ldr	r2, [r7, #4]
 8010172:	4611      	mov	r1, r2
 8010174:	4618      	mov	r0, r3
 8010176:	f000 ffc1 	bl	80110fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801017a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801017c:	f000 fa6a 	bl	8010654 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010180:	f000 fdde 	bl	8010d40 <xTaskResumeAll>
 8010184:	4603      	mov	r3, r0
 8010186:	2b00      	cmp	r3, #0
 8010188:	d189      	bne.n	801009e <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 801018a:	4b10      	ldr	r3, [pc, #64]	; (80101cc <xQueueReceive+0x1c8>)
 801018c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010190:	601a      	str	r2, [r3, #0]
 8010192:	f3bf 8f4f 	dsb	sy
 8010196:	f3bf 8f6f 	isb	sy
 801019a:	e780      	b.n	801009e <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 801019c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801019e:	f000 fa59 	bl	8010654 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80101a2:	f000 fdcd 	bl	8010d40 <xTaskResumeAll>
 80101a6:	e77a      	b.n	801009e <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 80101a8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80101aa:	f000 fa53 	bl	8010654 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80101ae:	f000 fdc7 	bl	8010d40 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80101b2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80101b4:	f000 faa0 	bl	80106f8 <prvIsQueueEmpty>
 80101b8:	4603      	mov	r3, r0
 80101ba:	2b00      	cmp	r3, #0
 80101bc:	f43f af6f 	beq.w	801009e <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80101c0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80101c2:	4618      	mov	r0, r3
 80101c4:	3730      	adds	r7, #48	; 0x30
 80101c6:	46bd      	mov	sp, r7
 80101c8:	bd80      	pop	{r7, pc}
 80101ca:	bf00      	nop
 80101cc:	e000ed04 	.word	0xe000ed04

080101d0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 80101d0:	b580      	push	{r7, lr}
 80101d2:	b08e      	sub	sp, #56	; 0x38
 80101d4:	af00      	add	r7, sp, #0
 80101d6:	6078      	str	r0, [r7, #4]
 80101d8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 80101da:	2300      	movs	r3, #0
 80101dc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80101de:	687b      	ldr	r3, [r7, #4]
 80101e0:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 80101e2:	2300      	movs	r3, #0
 80101e4:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 80101e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101e8:	2b00      	cmp	r3, #0
 80101ea:	d10c      	bne.n	8010206 <xQueueSemaphoreTake+0x36>
	__asm volatile
 80101ec:	f04f 0350 	mov.w	r3, #80	; 0x50
 80101f0:	b672      	cpsid	i
 80101f2:	f383 8811 	msr	BASEPRI, r3
 80101f6:	f3bf 8f6f 	isb	sy
 80101fa:	f3bf 8f4f 	dsb	sy
 80101fe:	b662      	cpsie	i
 8010200:	623b      	str	r3, [r7, #32]
}
 8010202:	bf00      	nop
 8010204:	e7fe      	b.n	8010204 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8010206:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010208:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801020a:	2b00      	cmp	r3, #0
 801020c:	d00c      	beq.n	8010228 <xQueueSemaphoreTake+0x58>
	__asm volatile
 801020e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010212:	b672      	cpsid	i
 8010214:	f383 8811 	msr	BASEPRI, r3
 8010218:	f3bf 8f6f 	isb	sy
 801021c:	f3bf 8f4f 	dsb	sy
 8010220:	b662      	cpsie	i
 8010222:	61fb      	str	r3, [r7, #28]
}
 8010224:	bf00      	nop
 8010226:	e7fe      	b.n	8010226 <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8010228:	f001 f956 	bl	80114d8 <xTaskGetSchedulerState>
 801022c:	4603      	mov	r3, r0
 801022e:	2b00      	cmp	r3, #0
 8010230:	d102      	bne.n	8010238 <xQueueSemaphoreTake+0x68>
 8010232:	683b      	ldr	r3, [r7, #0]
 8010234:	2b00      	cmp	r3, #0
 8010236:	d101      	bne.n	801023c <xQueueSemaphoreTake+0x6c>
 8010238:	2301      	movs	r3, #1
 801023a:	e000      	b.n	801023e <xQueueSemaphoreTake+0x6e>
 801023c:	2300      	movs	r3, #0
 801023e:	2b00      	cmp	r3, #0
 8010240:	d10c      	bne.n	801025c <xQueueSemaphoreTake+0x8c>
	__asm volatile
 8010242:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010246:	b672      	cpsid	i
 8010248:	f383 8811 	msr	BASEPRI, r3
 801024c:	f3bf 8f6f 	isb	sy
 8010250:	f3bf 8f4f 	dsb	sy
 8010254:	b662      	cpsie	i
 8010256:	61bb      	str	r3, [r7, #24]
}
 8010258:	bf00      	nop
 801025a:	e7fe      	b.n	801025a <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 801025c:	f001 fc86 	bl	8011b6c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8010260:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010264:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8010266:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010268:	2b00      	cmp	r3, #0
 801026a:	d024      	beq.n	80102b6 <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 801026c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801026e:	1e5a      	subs	r2, r3, #1
 8010270:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010272:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010274:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010276:	681b      	ldr	r3, [r3, #0]
 8010278:	2b00      	cmp	r3, #0
 801027a:	d104      	bne.n	8010286 <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 801027c:	f001 faf2 	bl	8011864 <pvTaskIncrementMutexHeldCount>
 8010280:	4602      	mov	r2, r0
 8010282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010284:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8010286:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010288:	691b      	ldr	r3, [r3, #16]
 801028a:	2b00      	cmp	r3, #0
 801028c:	d00f      	beq.n	80102ae <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 801028e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010290:	3310      	adds	r3, #16
 8010292:	4618      	mov	r0, r3
 8010294:	f000 ff58 	bl	8011148 <xTaskRemoveFromEventList>
 8010298:	4603      	mov	r3, r0
 801029a:	2b00      	cmp	r3, #0
 801029c:	d007      	beq.n	80102ae <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 801029e:	4b55      	ldr	r3, [pc, #340]	; (80103f4 <xQueueSemaphoreTake+0x224>)
 80102a0:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80102a4:	601a      	str	r2, [r3, #0]
 80102a6:	f3bf 8f4f 	dsb	sy
 80102aa:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 80102ae:	f001 fc91 	bl	8011bd4 <vPortExitCritical>
				return pdPASS;
 80102b2:	2301      	movs	r3, #1
 80102b4:	e099      	b.n	80103ea <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 80102b6:	683b      	ldr	r3, [r7, #0]
 80102b8:	2b00      	cmp	r3, #0
 80102ba:	d113      	bne.n	80102e4 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 80102bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80102be:	2b00      	cmp	r3, #0
 80102c0:	d00c      	beq.n	80102dc <xQueueSemaphoreTake+0x10c>
	__asm volatile
 80102c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80102c6:	b672      	cpsid	i
 80102c8:	f383 8811 	msr	BASEPRI, r3
 80102cc:	f3bf 8f6f 	isb	sy
 80102d0:	f3bf 8f4f 	dsb	sy
 80102d4:	b662      	cpsie	i
 80102d6:	617b      	str	r3, [r7, #20]
}
 80102d8:	bf00      	nop
 80102da:	e7fe      	b.n	80102da <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 80102dc:	f001 fc7a 	bl	8011bd4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 80102e0:	2300      	movs	r3, #0
 80102e2:	e082      	b.n	80103ea <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 80102e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80102e6:	2b00      	cmp	r3, #0
 80102e8:	d106      	bne.n	80102f8 <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 80102ea:	f107 030c 	add.w	r3, r7, #12
 80102ee:	4618      	mov	r0, r3
 80102f0:	f000 ff8e 	bl	8011210 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 80102f4:	2301      	movs	r3, #1
 80102f6:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 80102f8:	f001 fc6c 	bl	8011bd4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 80102fc:	f000 fd12 	bl	8010d24 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8010300:	f001 fc34 	bl	8011b6c <vPortEnterCritical>
 8010304:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010306:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 801030a:	b25b      	sxtb	r3, r3
 801030c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010310:	d103      	bne.n	801031a <xQueueSemaphoreTake+0x14a>
 8010312:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010314:	2200      	movs	r2, #0
 8010316:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 801031a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801031c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010320:	b25b      	sxtb	r3, r3
 8010322:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010326:	d103      	bne.n	8010330 <xQueueSemaphoreTake+0x160>
 8010328:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801032a:	2200      	movs	r2, #0
 801032c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8010330:	f001 fc50 	bl	8011bd4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8010334:	463a      	mov	r2, r7
 8010336:	f107 030c 	add.w	r3, r7, #12
 801033a:	4611      	mov	r1, r2
 801033c:	4618      	mov	r0, r3
 801033e:	f000 ff7d 	bl	801123c <xTaskCheckForTimeOut>
 8010342:	4603      	mov	r3, r0
 8010344:	2b00      	cmp	r3, #0
 8010346:	d132      	bne.n	80103ae <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8010348:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801034a:	f000 f9d5 	bl	80106f8 <prvIsQueueEmpty>
 801034e:	4603      	mov	r3, r0
 8010350:	2b00      	cmp	r3, #0
 8010352:	d026      	beq.n	80103a2 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010356:	681b      	ldr	r3, [r3, #0]
 8010358:	2b00      	cmp	r3, #0
 801035a:	d109      	bne.n	8010370 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 801035c:	f001 fc06 	bl	8011b6c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8010360:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010362:	689b      	ldr	r3, [r3, #8]
 8010364:	4618      	mov	r0, r3
 8010366:	f001 f8d5 	bl	8011514 <xTaskPriorityInherit>
 801036a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 801036c:	f001 fc32 	bl	8011bd4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8010370:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010372:	3324      	adds	r3, #36	; 0x24
 8010374:	683a      	ldr	r2, [r7, #0]
 8010376:	4611      	mov	r1, r2
 8010378:	4618      	mov	r0, r3
 801037a:	f000 febf 	bl	80110fc <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 801037e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8010380:	f000 f968 	bl	8010654 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8010384:	f000 fcdc 	bl	8010d40 <xTaskResumeAll>
 8010388:	4603      	mov	r3, r0
 801038a:	2b00      	cmp	r3, #0
 801038c:	f47f af66 	bne.w	801025c <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 8010390:	4b18      	ldr	r3, [pc, #96]	; (80103f4 <xQueueSemaphoreTake+0x224>)
 8010392:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010396:	601a      	str	r2, [r3, #0]
 8010398:	f3bf 8f4f 	dsb	sy
 801039c:	f3bf 8f6f 	isb	sy
 80103a0:	e75c      	b.n	801025c <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80103a2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80103a4:	f000 f956 	bl	8010654 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80103a8:	f000 fcca 	bl	8010d40 <xTaskResumeAll>
 80103ac:	e756      	b.n	801025c <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80103ae:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80103b0:	f000 f950 	bl	8010654 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80103b4:	f000 fcc4 	bl	8010d40 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80103b8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80103ba:	f000 f99d 	bl	80106f8 <prvIsQueueEmpty>
 80103be:	4603      	mov	r3, r0
 80103c0:	2b00      	cmp	r3, #0
 80103c2:	f43f af4b 	beq.w	801025c <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80103c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80103c8:	2b00      	cmp	r3, #0
 80103ca:	d00d      	beq.n	80103e8 <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 80103cc:	f001 fbce 	bl	8011b6c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80103d0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80103d2:	f000 f897 	bl	8010504 <prvGetDisinheritPriorityAfterTimeout>
 80103d6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80103d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80103da:	689b      	ldr	r3, [r3, #8]
 80103dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80103de:	4618      	mov	r0, r3
 80103e0:	f001 f9a2 	bl	8011728 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80103e4:	f001 fbf6 	bl	8011bd4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80103e8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80103ea:	4618      	mov	r0, r3
 80103ec:	3738      	adds	r7, #56	; 0x38
 80103ee:	46bd      	mov	sp, r7
 80103f0:	bd80      	pop	{r7, pc}
 80103f2:	bf00      	nop
 80103f4:	e000ed04 	.word	0xe000ed04

080103f8 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 80103f8:	b580      	push	{r7, lr}
 80103fa:	b08e      	sub	sp, #56	; 0x38
 80103fc:	af00      	add	r7, sp, #0
 80103fe:	60f8      	str	r0, [r7, #12]
 8010400:	60b9      	str	r1, [r7, #8]
 8010402:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8010404:	68fb      	ldr	r3, [r7, #12]
 8010406:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8010408:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801040a:	2b00      	cmp	r3, #0
 801040c:	d10c      	bne.n	8010428 <xQueueReceiveFromISR+0x30>
	__asm volatile
 801040e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010412:	b672      	cpsid	i
 8010414:	f383 8811 	msr	BASEPRI, r3
 8010418:	f3bf 8f6f 	isb	sy
 801041c:	f3bf 8f4f 	dsb	sy
 8010420:	b662      	cpsie	i
 8010422:	623b      	str	r3, [r7, #32]
}
 8010424:	bf00      	nop
 8010426:	e7fe      	b.n	8010426 <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8010428:	68bb      	ldr	r3, [r7, #8]
 801042a:	2b00      	cmp	r3, #0
 801042c:	d103      	bne.n	8010436 <xQueueReceiveFromISR+0x3e>
 801042e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010430:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010432:	2b00      	cmp	r3, #0
 8010434:	d101      	bne.n	801043a <xQueueReceiveFromISR+0x42>
 8010436:	2301      	movs	r3, #1
 8010438:	e000      	b.n	801043c <xQueueReceiveFromISR+0x44>
 801043a:	2300      	movs	r3, #0
 801043c:	2b00      	cmp	r3, #0
 801043e:	d10c      	bne.n	801045a <xQueueReceiveFromISR+0x62>
	__asm volatile
 8010440:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010444:	b672      	cpsid	i
 8010446:	f383 8811 	msr	BASEPRI, r3
 801044a:	f3bf 8f6f 	isb	sy
 801044e:	f3bf 8f4f 	dsb	sy
 8010452:	b662      	cpsie	i
 8010454:	61fb      	str	r3, [r7, #28]
}
 8010456:	bf00      	nop
 8010458:	e7fe      	b.n	8010458 <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 801045a:	f001 fc6f 	bl	8011d3c <vPortValidateInterruptPriority>
	__asm volatile
 801045e:	f3ef 8211 	mrs	r2, BASEPRI
 8010462:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010466:	b672      	cpsid	i
 8010468:	f383 8811 	msr	BASEPRI, r3
 801046c:	f3bf 8f6f 	isb	sy
 8010470:	f3bf 8f4f 	dsb	sy
 8010474:	b662      	cpsie	i
 8010476:	61ba      	str	r2, [r7, #24]
 8010478:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 801047a:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 801047c:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 801047e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010480:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010482:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8010484:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010486:	2b00      	cmp	r3, #0
 8010488:	d02f      	beq.n	80104ea <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 801048a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801048c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8010490:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8010494:	68b9      	ldr	r1, [r7, #8]
 8010496:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8010498:	f000 f8b6 	bl	8010608 <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 801049c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801049e:	1e5a      	subs	r2, r3, #1
 80104a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104a2:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80104a4:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80104a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104ac:	d112      	bne.n	80104d4 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80104ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104b0:	691b      	ldr	r3, [r3, #16]
 80104b2:	2b00      	cmp	r3, #0
 80104b4:	d016      	beq.n	80104e4 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80104b6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104b8:	3310      	adds	r3, #16
 80104ba:	4618      	mov	r0, r3
 80104bc:	f000 fe44 	bl	8011148 <xTaskRemoveFromEventList>
 80104c0:	4603      	mov	r3, r0
 80104c2:	2b00      	cmp	r3, #0
 80104c4:	d00e      	beq.n	80104e4 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80104c6:	687b      	ldr	r3, [r7, #4]
 80104c8:	2b00      	cmp	r3, #0
 80104ca:	d00b      	beq.n	80104e4 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80104cc:	687b      	ldr	r3, [r7, #4]
 80104ce:	2201      	movs	r2, #1
 80104d0:	601a      	str	r2, [r3, #0]
 80104d2:	e007      	b.n	80104e4 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80104d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80104d8:	3301      	adds	r3, #1
 80104da:	b2db      	uxtb	r3, r3
 80104dc:	b25a      	sxtb	r2, r3
 80104de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80104e0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80104e4:	2301      	movs	r3, #1
 80104e6:	637b      	str	r3, [r7, #52]	; 0x34
 80104e8:	e001      	b.n	80104ee <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 80104ea:	2300      	movs	r3, #0
 80104ec:	637b      	str	r3, [r7, #52]	; 0x34
 80104ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80104f0:	613b      	str	r3, [r7, #16]
	__asm volatile
 80104f2:	693b      	ldr	r3, [r7, #16]
 80104f4:	f383 8811 	msr	BASEPRI, r3
}
 80104f8:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80104fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 80104fc:	4618      	mov	r0, r3
 80104fe:	3738      	adds	r7, #56	; 0x38
 8010500:	46bd      	mov	sp, r7
 8010502:	bd80      	pop	{r7, pc}

08010504 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 8010504:	b480      	push	{r7}
 8010506:	b085      	sub	sp, #20
 8010508:	af00      	add	r7, sp, #0
 801050a:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 801050c:	687b      	ldr	r3, [r7, #4]
 801050e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010510:	2b00      	cmp	r3, #0
 8010512:	d006      	beq.n	8010522 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 8010514:	687b      	ldr	r3, [r7, #4]
 8010516:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010518:	681b      	ldr	r3, [r3, #0]
 801051a:	f1c3 0307 	rsb	r3, r3, #7
 801051e:	60fb      	str	r3, [r7, #12]
 8010520:	e001      	b.n	8010526 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 8010522:	2300      	movs	r3, #0
 8010524:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 8010526:	68fb      	ldr	r3, [r7, #12]
	}
 8010528:	4618      	mov	r0, r3
 801052a:	3714      	adds	r7, #20
 801052c:	46bd      	mov	sp, r7
 801052e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010532:	4770      	bx	lr

08010534 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 8010534:	b580      	push	{r7, lr}
 8010536:	b086      	sub	sp, #24
 8010538:	af00      	add	r7, sp, #0
 801053a:	60f8      	str	r0, [r7, #12]
 801053c:	60b9      	str	r1, [r7, #8]
 801053e:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8010540:	2300      	movs	r3, #0
 8010542:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8010544:	68fb      	ldr	r3, [r7, #12]
 8010546:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010548:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 801054a:	68fb      	ldr	r3, [r7, #12]
 801054c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801054e:	2b00      	cmp	r3, #0
 8010550:	d10d      	bne.n	801056e <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8010552:	68fb      	ldr	r3, [r7, #12]
 8010554:	681b      	ldr	r3, [r3, #0]
 8010556:	2b00      	cmp	r3, #0
 8010558:	d14d      	bne.n	80105f6 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 801055a:	68fb      	ldr	r3, [r7, #12]
 801055c:	689b      	ldr	r3, [r3, #8]
 801055e:	4618      	mov	r0, r3
 8010560:	f001 f858 	bl	8011614 <xTaskPriorityDisinherit>
 8010564:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8010566:	68fb      	ldr	r3, [r7, #12]
 8010568:	2200      	movs	r2, #0
 801056a:	609a      	str	r2, [r3, #8]
 801056c:	e043      	b.n	80105f6 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 801056e:	687b      	ldr	r3, [r7, #4]
 8010570:	2b00      	cmp	r3, #0
 8010572:	d119      	bne.n	80105a8 <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8010574:	68fb      	ldr	r3, [r7, #12]
 8010576:	6858      	ldr	r0, [r3, #4]
 8010578:	68fb      	ldr	r3, [r7, #12]
 801057a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801057c:	461a      	mov	r2, r3
 801057e:	68b9      	ldr	r1, [r7, #8]
 8010580:	f00d fd0f 	bl	801dfa2 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8010584:	68fb      	ldr	r3, [r7, #12]
 8010586:	685a      	ldr	r2, [r3, #4]
 8010588:	68fb      	ldr	r3, [r7, #12]
 801058a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 801058c:	441a      	add	r2, r3
 801058e:	68fb      	ldr	r3, [r7, #12]
 8010590:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8010592:	68fb      	ldr	r3, [r7, #12]
 8010594:	685a      	ldr	r2, [r3, #4]
 8010596:	68fb      	ldr	r3, [r7, #12]
 8010598:	689b      	ldr	r3, [r3, #8]
 801059a:	429a      	cmp	r2, r3
 801059c:	d32b      	bcc.n	80105f6 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 801059e:	68fb      	ldr	r3, [r7, #12]
 80105a0:	681a      	ldr	r2, [r3, #0]
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	605a      	str	r2, [r3, #4]
 80105a6:	e026      	b.n	80105f6 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 80105a8:	68fb      	ldr	r3, [r7, #12]
 80105aa:	68d8      	ldr	r0, [r3, #12]
 80105ac:	68fb      	ldr	r3, [r7, #12]
 80105ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105b0:	461a      	mov	r2, r3
 80105b2:	68b9      	ldr	r1, [r7, #8]
 80105b4:	f00d fcf5 	bl	801dfa2 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 80105b8:	68fb      	ldr	r3, [r7, #12]
 80105ba:	68da      	ldr	r2, [r3, #12]
 80105bc:	68fb      	ldr	r3, [r7, #12]
 80105be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105c0:	425b      	negs	r3, r3
 80105c2:	441a      	add	r2, r3
 80105c4:	68fb      	ldr	r3, [r7, #12]
 80105c6:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 80105c8:	68fb      	ldr	r3, [r7, #12]
 80105ca:	68da      	ldr	r2, [r3, #12]
 80105cc:	68fb      	ldr	r3, [r7, #12]
 80105ce:	681b      	ldr	r3, [r3, #0]
 80105d0:	429a      	cmp	r2, r3
 80105d2:	d207      	bcs.n	80105e4 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 80105d4:	68fb      	ldr	r3, [r7, #12]
 80105d6:	689a      	ldr	r2, [r3, #8]
 80105d8:	68fb      	ldr	r3, [r7, #12]
 80105da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80105dc:	425b      	negs	r3, r3
 80105de:	441a      	add	r2, r3
 80105e0:	68fb      	ldr	r3, [r7, #12]
 80105e2:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80105e4:	687b      	ldr	r3, [r7, #4]
 80105e6:	2b02      	cmp	r3, #2
 80105e8:	d105      	bne.n	80105f6 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80105ea:	693b      	ldr	r3, [r7, #16]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d002      	beq.n	80105f6 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80105f0:	693b      	ldr	r3, [r7, #16]
 80105f2:	3b01      	subs	r3, #1
 80105f4:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80105f6:	693b      	ldr	r3, [r7, #16]
 80105f8:	1c5a      	adds	r2, r3, #1
 80105fa:	68fb      	ldr	r3, [r7, #12]
 80105fc:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80105fe:	697b      	ldr	r3, [r7, #20]
}
 8010600:	4618      	mov	r0, r3
 8010602:	3718      	adds	r7, #24
 8010604:	46bd      	mov	sp, r7
 8010606:	bd80      	pop	{r7, pc}

08010608 <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 8010608:	b580      	push	{r7, lr}
 801060a:	b082      	sub	sp, #8
 801060c:	af00      	add	r7, sp, #0
 801060e:	6078      	str	r0, [r7, #4]
 8010610:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 8010612:	687b      	ldr	r3, [r7, #4]
 8010614:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010616:	2b00      	cmp	r3, #0
 8010618:	d018      	beq.n	801064c <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 801061a:	687b      	ldr	r3, [r7, #4]
 801061c:	68da      	ldr	r2, [r3, #12]
 801061e:	687b      	ldr	r3, [r7, #4]
 8010620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010622:	441a      	add	r2, r3
 8010624:	687b      	ldr	r3, [r7, #4]
 8010626:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 8010628:	687b      	ldr	r3, [r7, #4]
 801062a:	68da      	ldr	r2, [r3, #12]
 801062c:	687b      	ldr	r3, [r7, #4]
 801062e:	689b      	ldr	r3, [r3, #8]
 8010630:	429a      	cmp	r2, r3
 8010632:	d303      	bcc.n	801063c <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 8010634:	687b      	ldr	r3, [r7, #4]
 8010636:	681a      	ldr	r2, [r3, #0]
 8010638:	687b      	ldr	r3, [r7, #4]
 801063a:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 801063c:	687b      	ldr	r3, [r7, #4]
 801063e:	68d9      	ldr	r1, [r3, #12]
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8010644:	461a      	mov	r2, r3
 8010646:	6838      	ldr	r0, [r7, #0]
 8010648:	f00d fcab 	bl	801dfa2 <memcpy>
	}
}
 801064c:	bf00      	nop
 801064e:	3708      	adds	r7, #8
 8010650:	46bd      	mov	sp, r7
 8010652:	bd80      	pop	{r7, pc}

08010654 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8010654:	b580      	push	{r7, lr}
 8010656:	b084      	sub	sp, #16
 8010658:	af00      	add	r7, sp, #0
 801065a:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 801065c:	f001 fa86 	bl	8011b6c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8010660:	687b      	ldr	r3, [r7, #4]
 8010662:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8010666:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8010668:	e011      	b.n	801068e <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 801066a:	687b      	ldr	r3, [r7, #4]
 801066c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801066e:	2b00      	cmp	r3, #0
 8010670:	d012      	beq.n	8010698 <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8010672:	687b      	ldr	r3, [r7, #4]
 8010674:	3324      	adds	r3, #36	; 0x24
 8010676:	4618      	mov	r0, r3
 8010678:	f000 fd66 	bl	8011148 <xTaskRemoveFromEventList>
 801067c:	4603      	mov	r3, r0
 801067e:	2b00      	cmp	r3, #0
 8010680:	d001      	beq.n	8010686 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8010682:	f000 fe41 	bl	8011308 <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8010686:	7bfb      	ldrb	r3, [r7, #15]
 8010688:	3b01      	subs	r3, #1
 801068a:	b2db      	uxtb	r3, r3
 801068c:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 801068e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8010692:	2b00      	cmp	r3, #0
 8010694:	dce9      	bgt.n	801066a <prvUnlockQueue+0x16>
 8010696:	e000      	b.n	801069a <prvUnlockQueue+0x46>
					break;
 8010698:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	22ff      	movs	r2, #255	; 0xff
 801069e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 80106a2:	f001 fa97 	bl	8011bd4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 80106a6:	f001 fa61 	bl	8011b6c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80106b0:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 80106b2:	e011      	b.n	80106d8 <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	691b      	ldr	r3, [r3, #16]
 80106b8:	2b00      	cmp	r3, #0
 80106ba:	d012      	beq.n	80106e2 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80106bc:	687b      	ldr	r3, [r7, #4]
 80106be:	3310      	adds	r3, #16
 80106c0:	4618      	mov	r0, r3
 80106c2:	f000 fd41 	bl	8011148 <xTaskRemoveFromEventList>
 80106c6:	4603      	mov	r3, r0
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d001      	beq.n	80106d0 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 80106cc:	f000 fe1c 	bl	8011308 <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 80106d0:	7bbb      	ldrb	r3, [r7, #14]
 80106d2:	3b01      	subs	r3, #1
 80106d4:	b2db      	uxtb	r3, r3
 80106d6:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 80106d8:	f997 300e 	ldrsb.w	r3, [r7, #14]
 80106dc:	2b00      	cmp	r3, #0
 80106de:	dce9      	bgt.n	80106b4 <prvUnlockQueue+0x60>
 80106e0:	e000      	b.n	80106e4 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80106e2:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80106e4:	687b      	ldr	r3, [r7, #4]
 80106e6:	22ff      	movs	r2, #255	; 0xff
 80106e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80106ec:	f001 fa72 	bl	8011bd4 <vPortExitCritical>
}
 80106f0:	bf00      	nop
 80106f2:	3710      	adds	r7, #16
 80106f4:	46bd      	mov	sp, r7
 80106f6:	bd80      	pop	{r7, pc}

080106f8 <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80106f8:	b580      	push	{r7, lr}
 80106fa:	b084      	sub	sp, #16
 80106fc:	af00      	add	r7, sp, #0
 80106fe:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 8010700:	f001 fa34 	bl	8011b6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 8010704:	687b      	ldr	r3, [r7, #4]
 8010706:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8010708:	2b00      	cmp	r3, #0
 801070a:	d102      	bne.n	8010712 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 801070c:	2301      	movs	r3, #1
 801070e:	60fb      	str	r3, [r7, #12]
 8010710:	e001      	b.n	8010716 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 8010712:	2300      	movs	r3, #0
 8010714:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010716:	f001 fa5d 	bl	8011bd4 <vPortExitCritical>

	return xReturn;
 801071a:	68fb      	ldr	r3, [r7, #12]
}
 801071c:	4618      	mov	r0, r3
 801071e:	3710      	adds	r7, #16
 8010720:	46bd      	mov	sp, r7
 8010722:	bd80      	pop	{r7, pc}

08010724 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 8010724:	b580      	push	{r7, lr}
 8010726:	b084      	sub	sp, #16
 8010728:	af00      	add	r7, sp, #0
 801072a:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 801072c:	f001 fa1e 	bl	8011b6c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 8010730:	687b      	ldr	r3, [r7, #4]
 8010732:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010734:	687b      	ldr	r3, [r7, #4]
 8010736:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8010738:	429a      	cmp	r2, r3
 801073a:	d102      	bne.n	8010742 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 801073c:	2301      	movs	r3, #1
 801073e:	60fb      	str	r3, [r7, #12]
 8010740:	e001      	b.n	8010746 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8010742:	2300      	movs	r3, #0
 8010744:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8010746:	f001 fa45 	bl	8011bd4 <vPortExitCritical>

	return xReturn;
 801074a:	68fb      	ldr	r3, [r7, #12]
}
 801074c:	4618      	mov	r0, r3
 801074e:	3710      	adds	r7, #16
 8010750:	46bd      	mov	sp, r7
 8010752:	bd80      	pop	{r7, pc}

08010754 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8010754:	b580      	push	{r7, lr}
 8010756:	b08e      	sub	sp, #56	; 0x38
 8010758:	af04      	add	r7, sp, #16
 801075a:	60f8      	str	r0, [r7, #12]
 801075c:	60b9      	str	r1, [r7, #8]
 801075e:	607a      	str	r2, [r7, #4]
 8010760:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8010762:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8010764:	2b00      	cmp	r3, #0
 8010766:	d10c      	bne.n	8010782 <xTaskCreateStatic+0x2e>
	__asm volatile
 8010768:	f04f 0350 	mov.w	r3, #80	; 0x50
 801076c:	b672      	cpsid	i
 801076e:	f383 8811 	msr	BASEPRI, r3
 8010772:	f3bf 8f6f 	isb	sy
 8010776:	f3bf 8f4f 	dsb	sy
 801077a:	b662      	cpsie	i
 801077c:	623b      	str	r3, [r7, #32]
}
 801077e:	bf00      	nop
 8010780:	e7fe      	b.n	8010780 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 8010782:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8010784:	2b00      	cmp	r3, #0
 8010786:	d10c      	bne.n	80107a2 <xTaskCreateStatic+0x4e>
	__asm volatile
 8010788:	f04f 0350 	mov.w	r3, #80	; 0x50
 801078c:	b672      	cpsid	i
 801078e:	f383 8811 	msr	BASEPRI, r3
 8010792:	f3bf 8f6f 	isb	sy
 8010796:	f3bf 8f4f 	dsb	sy
 801079a:	b662      	cpsie	i
 801079c:	61fb      	str	r3, [r7, #28]
}
 801079e:	bf00      	nop
 80107a0:	e7fe      	b.n	80107a0 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 80107a2:	23a0      	movs	r3, #160	; 0xa0
 80107a4:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 80107a6:	693b      	ldr	r3, [r7, #16]
 80107a8:	2ba0      	cmp	r3, #160	; 0xa0
 80107aa:	d00c      	beq.n	80107c6 <xTaskCreateStatic+0x72>
	__asm volatile
 80107ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80107b0:	b672      	cpsid	i
 80107b2:	f383 8811 	msr	BASEPRI, r3
 80107b6:	f3bf 8f6f 	isb	sy
 80107ba:	f3bf 8f4f 	dsb	sy
 80107be:	b662      	cpsie	i
 80107c0:	61bb      	str	r3, [r7, #24]
}
 80107c2:	bf00      	nop
 80107c4:	e7fe      	b.n	80107c4 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 80107c6:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 80107c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107ca:	2b00      	cmp	r3, #0
 80107cc:	d01e      	beq.n	801080c <xTaskCreateStatic+0xb8>
 80107ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80107d0:	2b00      	cmp	r3, #0
 80107d2:	d01b      	beq.n	801080c <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80107d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80107d6:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80107d8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107da:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80107dc:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80107de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107e0:	2202      	movs	r2, #2
 80107e2:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80107e6:	2300      	movs	r3, #0
 80107e8:	9303      	str	r3, [sp, #12]
 80107ea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80107ec:	9302      	str	r3, [sp, #8]
 80107ee:	f107 0314 	add.w	r3, r7, #20
 80107f2:	9301      	str	r3, [sp, #4]
 80107f4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80107f6:	9300      	str	r3, [sp, #0]
 80107f8:	683b      	ldr	r3, [r7, #0]
 80107fa:	687a      	ldr	r2, [r7, #4]
 80107fc:	68b9      	ldr	r1, [r7, #8]
 80107fe:	68f8      	ldr	r0, [r7, #12]
 8010800:	f000 f850 	bl	80108a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010804:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8010806:	f000 f8ed 	bl	80109e4 <prvAddNewTaskToReadyList>
 801080a:	e001      	b.n	8010810 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 801080c:	2300      	movs	r3, #0
 801080e:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 8010810:	697b      	ldr	r3, [r7, #20]
	}
 8010812:	4618      	mov	r0, r3
 8010814:	3728      	adds	r7, #40	; 0x28
 8010816:	46bd      	mov	sp, r7
 8010818:	bd80      	pop	{r7, pc}

0801081a <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 801081a:	b580      	push	{r7, lr}
 801081c:	b08c      	sub	sp, #48	; 0x30
 801081e:	af04      	add	r7, sp, #16
 8010820:	60f8      	str	r0, [r7, #12]
 8010822:	60b9      	str	r1, [r7, #8]
 8010824:	603b      	str	r3, [r7, #0]
 8010826:	4613      	mov	r3, r2
 8010828:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801082a:	88fb      	ldrh	r3, [r7, #6]
 801082c:	009b      	lsls	r3, r3, #2
 801082e:	4618      	mov	r0, r3
 8010830:	f001 fac8 	bl	8011dc4 <pvPortMalloc>
 8010834:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 8010836:	697b      	ldr	r3, [r7, #20]
 8010838:	2b00      	cmp	r3, #0
 801083a:	d00e      	beq.n	801085a <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 801083c:	20a0      	movs	r0, #160	; 0xa0
 801083e:	f001 fac1 	bl	8011dc4 <pvPortMalloc>
 8010842:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010844:	69fb      	ldr	r3, [r7, #28]
 8010846:	2b00      	cmp	r3, #0
 8010848:	d003      	beq.n	8010852 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801084a:	69fb      	ldr	r3, [r7, #28]
 801084c:	697a      	ldr	r2, [r7, #20]
 801084e:	631a      	str	r2, [r3, #48]	; 0x30
 8010850:	e005      	b.n	801085e <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010852:	6978      	ldr	r0, [r7, #20]
 8010854:	f001 fb80 	bl	8011f58 <vPortFree>
 8010858:	e001      	b.n	801085e <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801085a:	2300      	movs	r3, #0
 801085c:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 801085e:	69fb      	ldr	r3, [r7, #28]
 8010860:	2b00      	cmp	r3, #0
 8010862:	d017      	beq.n	8010894 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010864:	69fb      	ldr	r3, [r7, #28]
 8010866:	2200      	movs	r2, #0
 8010868:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 801086c:	88fa      	ldrh	r2, [r7, #6]
 801086e:	2300      	movs	r3, #0
 8010870:	9303      	str	r3, [sp, #12]
 8010872:	69fb      	ldr	r3, [r7, #28]
 8010874:	9302      	str	r3, [sp, #8]
 8010876:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8010878:	9301      	str	r3, [sp, #4]
 801087a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801087c:	9300      	str	r3, [sp, #0]
 801087e:	683b      	ldr	r3, [r7, #0]
 8010880:	68b9      	ldr	r1, [r7, #8]
 8010882:	68f8      	ldr	r0, [r7, #12]
 8010884:	f000 f80e 	bl	80108a4 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8010888:	69f8      	ldr	r0, [r7, #28]
 801088a:	f000 f8ab 	bl	80109e4 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 801088e:	2301      	movs	r3, #1
 8010890:	61bb      	str	r3, [r7, #24]
 8010892:	e002      	b.n	801089a <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010894:	f04f 33ff 	mov.w	r3, #4294967295
 8010898:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801089a:	69bb      	ldr	r3, [r7, #24]
	}
 801089c:	4618      	mov	r0, r3
 801089e:	3720      	adds	r7, #32
 80108a0:	46bd      	mov	sp, r7
 80108a2:	bd80      	pop	{r7, pc}

080108a4 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 80108a4:	b580      	push	{r7, lr}
 80108a6:	b088      	sub	sp, #32
 80108a8:	af00      	add	r7, sp, #0
 80108aa:	60f8      	str	r0, [r7, #12]
 80108ac:	60b9      	str	r1, [r7, #8]
 80108ae:	607a      	str	r2, [r7, #4]
 80108b0:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 80108b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80108b4:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80108b6:	6879      	ldr	r1, [r7, #4]
 80108b8:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80108bc:	440b      	add	r3, r1
 80108be:	009b      	lsls	r3, r3, #2
 80108c0:	4413      	add	r3, r2
 80108c2:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80108c4:	69bb      	ldr	r3, [r7, #24]
 80108c6:	f023 0307 	bic.w	r3, r3, #7
 80108ca:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80108cc:	69bb      	ldr	r3, [r7, #24]
 80108ce:	f003 0307 	and.w	r3, r3, #7
 80108d2:	2b00      	cmp	r3, #0
 80108d4:	d00c      	beq.n	80108f0 <prvInitialiseNewTask+0x4c>
	__asm volatile
 80108d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108da:	b672      	cpsid	i
 80108dc:	f383 8811 	msr	BASEPRI, r3
 80108e0:	f3bf 8f6f 	isb	sy
 80108e4:	f3bf 8f4f 	dsb	sy
 80108e8:	b662      	cpsie	i
 80108ea:	617b      	str	r3, [r7, #20]
}
 80108ec:	bf00      	nop
 80108ee:	e7fe      	b.n	80108ee <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80108f0:	68bb      	ldr	r3, [r7, #8]
 80108f2:	2b00      	cmp	r3, #0
 80108f4:	d01f      	beq.n	8010936 <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80108f6:	2300      	movs	r3, #0
 80108f8:	61fb      	str	r3, [r7, #28]
 80108fa:	e012      	b.n	8010922 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80108fc:	68ba      	ldr	r2, [r7, #8]
 80108fe:	69fb      	ldr	r3, [r7, #28]
 8010900:	4413      	add	r3, r2
 8010902:	7819      	ldrb	r1, [r3, #0]
 8010904:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010906:	69fb      	ldr	r3, [r7, #28]
 8010908:	4413      	add	r3, r2
 801090a:	3334      	adds	r3, #52	; 0x34
 801090c:	460a      	mov	r2, r1
 801090e:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 8010910:	68ba      	ldr	r2, [r7, #8]
 8010912:	69fb      	ldr	r3, [r7, #28]
 8010914:	4413      	add	r3, r2
 8010916:	781b      	ldrb	r3, [r3, #0]
 8010918:	2b00      	cmp	r3, #0
 801091a:	d006      	beq.n	801092a <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 801091c:	69fb      	ldr	r3, [r7, #28]
 801091e:	3301      	adds	r3, #1
 8010920:	61fb      	str	r3, [r7, #28]
 8010922:	69fb      	ldr	r3, [r7, #28]
 8010924:	2b0f      	cmp	r3, #15
 8010926:	d9e9      	bls.n	80108fc <prvInitialiseNewTask+0x58>
 8010928:	e000      	b.n	801092c <prvInitialiseNewTask+0x88>
			{
				break;
 801092a:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 801092c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801092e:	2200      	movs	r2, #0
 8010930:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010934:	e003      	b.n	801093e <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 8010936:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010938:	2200      	movs	r2, #0
 801093a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 801093e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010940:	2b06      	cmp	r3, #6
 8010942:	d901      	bls.n	8010948 <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010944:	2306      	movs	r3, #6
 8010946:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 8010948:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801094a:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801094c:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 801094e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010950:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010952:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8010954:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010956:	2200      	movs	r2, #0
 8010958:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801095a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801095c:	3304      	adds	r3, #4
 801095e:	4618      	mov	r0, r3
 8010960:	f7fe fee6 	bl	800f730 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010964:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010966:	3318      	adds	r3, #24
 8010968:	4618      	mov	r0, r3
 801096a:	f7fe fee1 	bl	800f730 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 801096e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010970:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010972:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010974:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010976:	f1c3 0207 	rsb	r2, r3, #7
 801097a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801097c:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 801097e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010980:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010982:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010986:	2200      	movs	r2, #0
 8010988:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 801098c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801098e:	2200      	movs	r2, #0
 8010990:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010994:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010996:	334c      	adds	r3, #76	; 0x4c
 8010998:	224c      	movs	r2, #76	; 0x4c
 801099a:	2100      	movs	r1, #0
 801099c:	4618      	mov	r0, r3
 801099e:	f00d fa34 	bl	801de0a <memset>
 80109a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109a4:	4a0c      	ldr	r2, [pc, #48]	; (80109d8 <prvInitialiseNewTask+0x134>)
 80109a6:	651a      	str	r2, [r3, #80]	; 0x50
 80109a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109aa:	4a0c      	ldr	r2, [pc, #48]	; (80109dc <prvInitialiseNewTask+0x138>)
 80109ac:	655a      	str	r2, [r3, #84]	; 0x54
 80109ae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109b0:	4a0b      	ldr	r2, [pc, #44]	; (80109e0 <prvInitialiseNewTask+0x13c>)
 80109b2:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 80109b4:	683a      	ldr	r2, [r7, #0]
 80109b6:	68f9      	ldr	r1, [r7, #12]
 80109b8:	69b8      	ldr	r0, [r7, #24]
 80109ba:	f000 ffcd 	bl	8011958 <pxPortInitialiseStack>
 80109be:	4602      	mov	r2, r0
 80109c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80109c2:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80109c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109c6:	2b00      	cmp	r3, #0
 80109c8:	d002      	beq.n	80109d0 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80109ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80109cc:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80109ce:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80109d0:	bf00      	nop
 80109d2:	3720      	adds	r7, #32
 80109d4:	46bd      	mov	sp, r7
 80109d6:	bd80      	pop	{r7, pc}
 80109d8:	20024224 	.word	0x20024224
 80109dc:	2002428c 	.word	0x2002428c
 80109e0:	200242f4 	.word	0x200242f4

080109e4 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80109e4:	b580      	push	{r7, lr}
 80109e6:	b082      	sub	sp, #8
 80109e8:	af00      	add	r7, sp, #0
 80109ea:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80109ec:	f001 f8be 	bl	8011b6c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80109f0:	4b2a      	ldr	r3, [pc, #168]	; (8010a9c <prvAddNewTaskToReadyList+0xb8>)
 80109f2:	681b      	ldr	r3, [r3, #0]
 80109f4:	3301      	adds	r3, #1
 80109f6:	4a29      	ldr	r2, [pc, #164]	; (8010a9c <prvAddNewTaskToReadyList+0xb8>)
 80109f8:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80109fa:	4b29      	ldr	r3, [pc, #164]	; (8010aa0 <prvAddNewTaskToReadyList+0xbc>)
 80109fc:	681b      	ldr	r3, [r3, #0]
 80109fe:	2b00      	cmp	r3, #0
 8010a00:	d109      	bne.n	8010a16 <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 8010a02:	4a27      	ldr	r2, [pc, #156]	; (8010aa0 <prvAddNewTaskToReadyList+0xbc>)
 8010a04:	687b      	ldr	r3, [r7, #4]
 8010a06:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 8010a08:	4b24      	ldr	r3, [pc, #144]	; (8010a9c <prvAddNewTaskToReadyList+0xb8>)
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	2b01      	cmp	r3, #1
 8010a0e:	d110      	bne.n	8010a32 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 8010a10:	f000 fc9e 	bl	8011350 <prvInitialiseTaskLists>
 8010a14:	e00d      	b.n	8010a32 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 8010a16:	4b23      	ldr	r3, [pc, #140]	; (8010aa4 <prvAddNewTaskToReadyList+0xc0>)
 8010a18:	681b      	ldr	r3, [r3, #0]
 8010a1a:	2b00      	cmp	r3, #0
 8010a1c:	d109      	bne.n	8010a32 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010a1e:	4b20      	ldr	r3, [pc, #128]	; (8010aa0 <prvAddNewTaskToReadyList+0xbc>)
 8010a20:	681b      	ldr	r3, [r3, #0]
 8010a22:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a24:	687b      	ldr	r3, [r7, #4]
 8010a26:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a28:	429a      	cmp	r2, r3
 8010a2a:	d802      	bhi.n	8010a32 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010a2c:	4a1c      	ldr	r2, [pc, #112]	; (8010aa0 <prvAddNewTaskToReadyList+0xbc>)
 8010a2e:	687b      	ldr	r3, [r7, #4]
 8010a30:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010a32:	4b1d      	ldr	r3, [pc, #116]	; (8010aa8 <prvAddNewTaskToReadyList+0xc4>)
 8010a34:	681b      	ldr	r3, [r3, #0]
 8010a36:	3301      	adds	r3, #1
 8010a38:	4a1b      	ldr	r2, [pc, #108]	; (8010aa8 <prvAddNewTaskToReadyList+0xc4>)
 8010a3a:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010a3c:	687b      	ldr	r3, [r7, #4]
 8010a3e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a40:	2201      	movs	r2, #1
 8010a42:	409a      	lsls	r2, r3
 8010a44:	4b19      	ldr	r3, [pc, #100]	; (8010aac <prvAddNewTaskToReadyList+0xc8>)
 8010a46:	681b      	ldr	r3, [r3, #0]
 8010a48:	4313      	orrs	r3, r2
 8010a4a:	4a18      	ldr	r2, [pc, #96]	; (8010aac <prvAddNewTaskToReadyList+0xc8>)
 8010a4c:	6013      	str	r3, [r2, #0]
 8010a4e:	687b      	ldr	r3, [r7, #4]
 8010a50:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a52:	4613      	mov	r3, r2
 8010a54:	009b      	lsls	r3, r3, #2
 8010a56:	4413      	add	r3, r2
 8010a58:	009b      	lsls	r3, r3, #2
 8010a5a:	4a15      	ldr	r2, [pc, #84]	; (8010ab0 <prvAddNewTaskToReadyList+0xcc>)
 8010a5c:	441a      	add	r2, r3
 8010a5e:	687b      	ldr	r3, [r7, #4]
 8010a60:	3304      	adds	r3, #4
 8010a62:	4619      	mov	r1, r3
 8010a64:	4610      	mov	r0, r2
 8010a66:	f7fe fe70 	bl	800f74a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8010a6a:	f001 f8b3 	bl	8011bd4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010a6e:	4b0d      	ldr	r3, [pc, #52]	; (8010aa4 <prvAddNewTaskToReadyList+0xc0>)
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	2b00      	cmp	r3, #0
 8010a74:	d00e      	beq.n	8010a94 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8010a76:	4b0a      	ldr	r3, [pc, #40]	; (8010aa0 <prvAddNewTaskToReadyList+0xbc>)
 8010a78:	681b      	ldr	r3, [r3, #0]
 8010a7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010a7c:	687b      	ldr	r3, [r7, #4]
 8010a7e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010a80:	429a      	cmp	r2, r3
 8010a82:	d207      	bcs.n	8010a94 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010a84:	4b0b      	ldr	r3, [pc, #44]	; (8010ab4 <prvAddNewTaskToReadyList+0xd0>)
 8010a86:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010a8a:	601a      	str	r2, [r3, #0]
 8010a8c:	f3bf 8f4f 	dsb	sy
 8010a90:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010a94:	bf00      	nop
 8010a96:	3708      	adds	r7, #8
 8010a98:	46bd      	mov	sp, r7
 8010a9a:	bd80      	pop	{r7, pc}
 8010a9c:	200060c0 	.word	0x200060c0
 8010aa0:	20005fc0 	.word	0x20005fc0
 8010aa4:	200060cc 	.word	0x200060cc
 8010aa8:	200060dc 	.word	0x200060dc
 8010aac:	200060c8 	.word	0x200060c8
 8010ab0:	20005fc4 	.word	0x20005fc4
 8010ab4:	e000ed04 	.word	0xe000ed04

08010ab8 <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 8010ab8:	b580      	push	{r7, lr}
 8010aba:	b084      	sub	sp, #16
 8010abc:	af00      	add	r7, sp, #0
 8010abe:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 8010ac0:	f001 f854 	bl	8011b6c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 8010ac4:	687b      	ldr	r3, [r7, #4]
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	d102      	bne.n	8010ad0 <vTaskDelete+0x18>
 8010aca:	4b3a      	ldr	r3, [pc, #232]	; (8010bb4 <vTaskDelete+0xfc>)
 8010acc:	681b      	ldr	r3, [r3, #0]
 8010ace:	e000      	b.n	8010ad2 <vTaskDelete+0x1a>
 8010ad0:	687b      	ldr	r3, [r7, #4]
 8010ad2:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010ad4:	68fb      	ldr	r3, [r7, #12]
 8010ad6:	3304      	adds	r3, #4
 8010ad8:	4618      	mov	r0, r3
 8010ada:	f7fe fe93 	bl	800f804 <uxListRemove>
 8010ade:	4603      	mov	r3, r0
 8010ae0:	2b00      	cmp	r3, #0
 8010ae2:	d115      	bne.n	8010b10 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010ae4:	68fb      	ldr	r3, [r7, #12]
 8010ae6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ae8:	4933      	ldr	r1, [pc, #204]	; (8010bb8 <vTaskDelete+0x100>)
 8010aea:	4613      	mov	r3, r2
 8010aec:	009b      	lsls	r3, r3, #2
 8010aee:	4413      	add	r3, r2
 8010af0:	009b      	lsls	r3, r3, #2
 8010af2:	440b      	add	r3, r1
 8010af4:	681b      	ldr	r3, [r3, #0]
 8010af6:	2b00      	cmp	r3, #0
 8010af8:	d10a      	bne.n	8010b10 <vTaskDelete+0x58>
 8010afa:	68fb      	ldr	r3, [r7, #12]
 8010afc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010afe:	2201      	movs	r2, #1
 8010b00:	fa02 f303 	lsl.w	r3, r2, r3
 8010b04:	43da      	mvns	r2, r3
 8010b06:	4b2d      	ldr	r3, [pc, #180]	; (8010bbc <vTaskDelete+0x104>)
 8010b08:	681b      	ldr	r3, [r3, #0]
 8010b0a:	4013      	ands	r3, r2
 8010b0c:	4a2b      	ldr	r2, [pc, #172]	; (8010bbc <vTaskDelete+0x104>)
 8010b0e:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010b10:	68fb      	ldr	r3, [r7, #12]
 8010b12:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010b14:	2b00      	cmp	r3, #0
 8010b16:	d004      	beq.n	8010b22 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010b18:	68fb      	ldr	r3, [r7, #12]
 8010b1a:	3318      	adds	r3, #24
 8010b1c:	4618      	mov	r0, r3
 8010b1e:	f7fe fe71 	bl	800f804 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8010b22:	4b27      	ldr	r3, [pc, #156]	; (8010bc0 <vTaskDelete+0x108>)
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	3301      	adds	r3, #1
 8010b28:	4a25      	ldr	r2, [pc, #148]	; (8010bc0 <vTaskDelete+0x108>)
 8010b2a:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8010b2c:	4b21      	ldr	r3, [pc, #132]	; (8010bb4 <vTaskDelete+0xfc>)
 8010b2e:	681b      	ldr	r3, [r3, #0]
 8010b30:	68fa      	ldr	r2, [r7, #12]
 8010b32:	429a      	cmp	r2, r3
 8010b34:	d10b      	bne.n	8010b4e <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 8010b36:	68fb      	ldr	r3, [r7, #12]
 8010b38:	3304      	adds	r3, #4
 8010b3a:	4619      	mov	r1, r3
 8010b3c:	4821      	ldr	r0, [pc, #132]	; (8010bc4 <vTaskDelete+0x10c>)
 8010b3e:	f7fe fe04 	bl	800f74a <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8010b42:	4b21      	ldr	r3, [pc, #132]	; (8010bc8 <vTaskDelete+0x110>)
 8010b44:	681b      	ldr	r3, [r3, #0]
 8010b46:	3301      	adds	r3, #1
 8010b48:	4a1f      	ldr	r2, [pc, #124]	; (8010bc8 <vTaskDelete+0x110>)
 8010b4a:	6013      	str	r3, [r2, #0]
 8010b4c:	e009      	b.n	8010b62 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8010b4e:	4b1f      	ldr	r3, [pc, #124]	; (8010bcc <vTaskDelete+0x114>)
 8010b50:	681b      	ldr	r3, [r3, #0]
 8010b52:	3b01      	subs	r3, #1
 8010b54:	4a1d      	ldr	r2, [pc, #116]	; (8010bcc <vTaskDelete+0x114>)
 8010b56:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 8010b58:	68f8      	ldr	r0, [r7, #12]
 8010b5a:	f000 fc67 	bl	801142c <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8010b5e:	f000 fc9b 	bl	8011498 <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8010b62:	f001 f837 	bl	8011bd4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 8010b66:	4b1a      	ldr	r3, [pc, #104]	; (8010bd0 <vTaskDelete+0x118>)
 8010b68:	681b      	ldr	r3, [r3, #0]
 8010b6a:	2b00      	cmp	r3, #0
 8010b6c:	d01d      	beq.n	8010baa <vTaskDelete+0xf2>
		{
			if( pxTCB == pxCurrentTCB )
 8010b6e:	4b11      	ldr	r3, [pc, #68]	; (8010bb4 <vTaskDelete+0xfc>)
 8010b70:	681b      	ldr	r3, [r3, #0]
 8010b72:	68fa      	ldr	r2, [r7, #12]
 8010b74:	429a      	cmp	r2, r3
 8010b76:	d118      	bne.n	8010baa <vTaskDelete+0xf2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 8010b78:	4b16      	ldr	r3, [pc, #88]	; (8010bd4 <vTaskDelete+0x11c>)
 8010b7a:	681b      	ldr	r3, [r3, #0]
 8010b7c:	2b00      	cmp	r3, #0
 8010b7e:	d00c      	beq.n	8010b9a <vTaskDelete+0xe2>
	__asm volatile
 8010b80:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010b84:	b672      	cpsid	i
 8010b86:	f383 8811 	msr	BASEPRI, r3
 8010b8a:	f3bf 8f6f 	isb	sy
 8010b8e:	f3bf 8f4f 	dsb	sy
 8010b92:	b662      	cpsie	i
 8010b94:	60bb      	str	r3, [r7, #8]
}
 8010b96:	bf00      	nop
 8010b98:	e7fe      	b.n	8010b98 <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 8010b9a:	4b0f      	ldr	r3, [pc, #60]	; (8010bd8 <vTaskDelete+0x120>)
 8010b9c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010ba0:	601a      	str	r2, [r3, #0]
 8010ba2:	f3bf 8f4f 	dsb	sy
 8010ba6:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8010baa:	bf00      	nop
 8010bac:	3710      	adds	r7, #16
 8010bae:	46bd      	mov	sp, r7
 8010bb0:	bd80      	pop	{r7, pc}
 8010bb2:	bf00      	nop
 8010bb4:	20005fc0 	.word	0x20005fc0
 8010bb8:	20005fc4 	.word	0x20005fc4
 8010bbc:	200060c8 	.word	0x200060c8
 8010bc0:	200060dc 	.word	0x200060dc
 8010bc4:	20006094 	.word	0x20006094
 8010bc8:	200060a8 	.word	0x200060a8
 8010bcc:	200060c0 	.word	0x200060c0
 8010bd0:	200060cc 	.word	0x200060cc
 8010bd4:	200060e8 	.word	0x200060e8
 8010bd8:	e000ed04 	.word	0xe000ed04

08010bdc <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8010bdc:	b580      	push	{r7, lr}
 8010bde:	b084      	sub	sp, #16
 8010be0:	af00      	add	r7, sp, #0
 8010be2:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 8010be4:	2300      	movs	r3, #0
 8010be6:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	2b00      	cmp	r3, #0
 8010bec:	d019      	beq.n	8010c22 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 8010bee:	4b14      	ldr	r3, [pc, #80]	; (8010c40 <vTaskDelay+0x64>)
 8010bf0:	681b      	ldr	r3, [r3, #0]
 8010bf2:	2b00      	cmp	r3, #0
 8010bf4:	d00c      	beq.n	8010c10 <vTaskDelay+0x34>
	__asm volatile
 8010bf6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010bfa:	b672      	cpsid	i
 8010bfc:	f383 8811 	msr	BASEPRI, r3
 8010c00:	f3bf 8f6f 	isb	sy
 8010c04:	f3bf 8f4f 	dsb	sy
 8010c08:	b662      	cpsie	i
 8010c0a:	60bb      	str	r3, [r7, #8]
}
 8010c0c:	bf00      	nop
 8010c0e:	e7fe      	b.n	8010c0e <vTaskDelay+0x32>
			vTaskSuspendAll();
 8010c10:	f000 f888 	bl	8010d24 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 8010c14:	2100      	movs	r1, #0
 8010c16:	6878      	ldr	r0, [r7, #4]
 8010c18:	f000 fe38 	bl	801188c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010c1c:	f000 f890 	bl	8010d40 <xTaskResumeAll>
 8010c20:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010c22:	68fb      	ldr	r3, [r7, #12]
 8010c24:	2b00      	cmp	r3, #0
 8010c26:	d107      	bne.n	8010c38 <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 8010c28:	4b06      	ldr	r3, [pc, #24]	; (8010c44 <vTaskDelay+0x68>)
 8010c2a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010c2e:	601a      	str	r2, [r3, #0]
 8010c30:	f3bf 8f4f 	dsb	sy
 8010c34:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8010c38:	bf00      	nop
 8010c3a:	3710      	adds	r7, #16
 8010c3c:	46bd      	mov	sp, r7
 8010c3e:	bd80      	pop	{r7, pc}
 8010c40:	200060e8 	.word	0x200060e8
 8010c44:	e000ed04 	.word	0xe000ed04

08010c48 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8010c48:	b580      	push	{r7, lr}
 8010c4a:	b08a      	sub	sp, #40	; 0x28
 8010c4c:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010c4e:	2300      	movs	r3, #0
 8010c50:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010c52:	2300      	movs	r3, #0
 8010c54:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8010c56:	463a      	mov	r2, r7
 8010c58:	1d39      	adds	r1, r7, #4
 8010c5a:	f107 0308 	add.w	r3, r7, #8
 8010c5e:	4618      	mov	r0, r3
 8010c60:	f7f0 f864 	bl	8000d2c <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010c64:	6839      	ldr	r1, [r7, #0]
 8010c66:	687b      	ldr	r3, [r7, #4]
 8010c68:	68ba      	ldr	r2, [r7, #8]
 8010c6a:	9202      	str	r2, [sp, #8]
 8010c6c:	9301      	str	r3, [sp, #4]
 8010c6e:	2300      	movs	r3, #0
 8010c70:	9300      	str	r3, [sp, #0]
 8010c72:	2300      	movs	r3, #0
 8010c74:	460a      	mov	r2, r1
 8010c76:	4923      	ldr	r1, [pc, #140]	; (8010d04 <vTaskStartScheduler+0xbc>)
 8010c78:	4823      	ldr	r0, [pc, #140]	; (8010d08 <vTaskStartScheduler+0xc0>)
 8010c7a:	f7ff fd6b 	bl	8010754 <xTaskCreateStatic>
 8010c7e:	4603      	mov	r3, r0
 8010c80:	4a22      	ldr	r2, [pc, #136]	; (8010d0c <vTaskStartScheduler+0xc4>)
 8010c82:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010c84:	4b21      	ldr	r3, [pc, #132]	; (8010d0c <vTaskStartScheduler+0xc4>)
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d002      	beq.n	8010c92 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010c8c:	2301      	movs	r3, #1
 8010c8e:	617b      	str	r3, [r7, #20]
 8010c90:	e001      	b.n	8010c96 <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010c92:	2300      	movs	r3, #0
 8010c94:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8010c96:	697b      	ldr	r3, [r7, #20]
 8010c98:	2b01      	cmp	r3, #1
 8010c9a:	d11d      	bne.n	8010cd8 <vTaskStartScheduler+0x90>
	__asm volatile
 8010c9c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ca0:	b672      	cpsid	i
 8010ca2:	f383 8811 	msr	BASEPRI, r3
 8010ca6:	f3bf 8f6f 	isb	sy
 8010caa:	f3bf 8f4f 	dsb	sy
 8010cae:	b662      	cpsie	i
 8010cb0:	613b      	str	r3, [r7, #16]
}
 8010cb2:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010cb4:	4b16      	ldr	r3, [pc, #88]	; (8010d10 <vTaskStartScheduler+0xc8>)
 8010cb6:	681b      	ldr	r3, [r3, #0]
 8010cb8:	334c      	adds	r3, #76	; 0x4c
 8010cba:	4a16      	ldr	r2, [pc, #88]	; (8010d14 <vTaskStartScheduler+0xcc>)
 8010cbc:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8010cbe:	4b16      	ldr	r3, [pc, #88]	; (8010d18 <vTaskStartScheduler+0xd0>)
 8010cc0:	f04f 32ff 	mov.w	r2, #4294967295
 8010cc4:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8010cc6:	4b15      	ldr	r3, [pc, #84]	; (8010d1c <vTaskStartScheduler+0xd4>)
 8010cc8:	2201      	movs	r2, #1
 8010cca:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8010ccc:	4b14      	ldr	r3, [pc, #80]	; (8010d20 <vTaskStartScheduler+0xd8>)
 8010cce:	2200      	movs	r2, #0
 8010cd0:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8010cd2:	f000 fecd 	bl	8011a70 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8010cd6:	e010      	b.n	8010cfa <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8010cd8:	697b      	ldr	r3, [r7, #20]
 8010cda:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010cde:	d10c      	bne.n	8010cfa <vTaskStartScheduler+0xb2>
	__asm volatile
 8010ce0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ce4:	b672      	cpsid	i
 8010ce6:	f383 8811 	msr	BASEPRI, r3
 8010cea:	f3bf 8f6f 	isb	sy
 8010cee:	f3bf 8f4f 	dsb	sy
 8010cf2:	b662      	cpsie	i
 8010cf4:	60fb      	str	r3, [r7, #12]
}
 8010cf6:	bf00      	nop
 8010cf8:	e7fe      	b.n	8010cf8 <vTaskStartScheduler+0xb0>
}
 8010cfa:	bf00      	nop
 8010cfc:	3718      	adds	r7, #24
 8010cfe:	46bd      	mov	sp, r7
 8010d00:	bd80      	pop	{r7, pc}
 8010d02:	bf00      	nop
 8010d04:	0801ed18 	.word	0x0801ed18
 8010d08:	08011321 	.word	0x08011321
 8010d0c:	200060e4 	.word	0x200060e4
 8010d10:	20005fc0 	.word	0x20005fc0
 8010d14:	200001a0 	.word	0x200001a0
 8010d18:	200060e0 	.word	0x200060e0
 8010d1c:	200060cc 	.word	0x200060cc
 8010d20:	200060c4 	.word	0x200060c4

08010d24 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010d24:	b480      	push	{r7}
 8010d26:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 8010d28:	4b04      	ldr	r3, [pc, #16]	; (8010d3c <vTaskSuspendAll+0x18>)
 8010d2a:	681b      	ldr	r3, [r3, #0]
 8010d2c:	3301      	adds	r3, #1
 8010d2e:	4a03      	ldr	r2, [pc, #12]	; (8010d3c <vTaskSuspendAll+0x18>)
 8010d30:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8010d32:	bf00      	nop
 8010d34:	46bd      	mov	sp, r7
 8010d36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010d3a:	4770      	bx	lr
 8010d3c:	200060e8 	.word	0x200060e8

08010d40 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010d40:	b580      	push	{r7, lr}
 8010d42:	b084      	sub	sp, #16
 8010d44:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8010d46:	2300      	movs	r3, #0
 8010d48:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8010d4a:	2300      	movs	r3, #0
 8010d4c:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010d4e:	4b42      	ldr	r3, [pc, #264]	; (8010e58 <xTaskResumeAll+0x118>)
 8010d50:	681b      	ldr	r3, [r3, #0]
 8010d52:	2b00      	cmp	r3, #0
 8010d54:	d10c      	bne.n	8010d70 <xTaskResumeAll+0x30>
	__asm volatile
 8010d56:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010d5a:	b672      	cpsid	i
 8010d5c:	f383 8811 	msr	BASEPRI, r3
 8010d60:	f3bf 8f6f 	isb	sy
 8010d64:	f3bf 8f4f 	dsb	sy
 8010d68:	b662      	cpsie	i
 8010d6a:	603b      	str	r3, [r7, #0]
}
 8010d6c:	bf00      	nop
 8010d6e:	e7fe      	b.n	8010d6e <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010d70:	f000 fefc 	bl	8011b6c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010d74:	4b38      	ldr	r3, [pc, #224]	; (8010e58 <xTaskResumeAll+0x118>)
 8010d76:	681b      	ldr	r3, [r3, #0]
 8010d78:	3b01      	subs	r3, #1
 8010d7a:	4a37      	ldr	r2, [pc, #220]	; (8010e58 <xTaskResumeAll+0x118>)
 8010d7c:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010d7e:	4b36      	ldr	r3, [pc, #216]	; (8010e58 <xTaskResumeAll+0x118>)
 8010d80:	681b      	ldr	r3, [r3, #0]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d161      	bne.n	8010e4a <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8010d86:	4b35      	ldr	r3, [pc, #212]	; (8010e5c <xTaskResumeAll+0x11c>)
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	2b00      	cmp	r3, #0
 8010d8c:	d05d      	beq.n	8010e4a <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010d8e:	e02e      	b.n	8010dee <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010d90:	4b33      	ldr	r3, [pc, #204]	; (8010e60 <xTaskResumeAll+0x120>)
 8010d92:	68db      	ldr	r3, [r3, #12]
 8010d94:	68db      	ldr	r3, [r3, #12]
 8010d96:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010d98:	68fb      	ldr	r3, [r7, #12]
 8010d9a:	3318      	adds	r3, #24
 8010d9c:	4618      	mov	r0, r3
 8010d9e:	f7fe fd31 	bl	800f804 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010da2:	68fb      	ldr	r3, [r7, #12]
 8010da4:	3304      	adds	r3, #4
 8010da6:	4618      	mov	r0, r3
 8010da8:	f7fe fd2c 	bl	800f804 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010dac:	68fb      	ldr	r3, [r7, #12]
 8010dae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010db0:	2201      	movs	r2, #1
 8010db2:	409a      	lsls	r2, r3
 8010db4:	4b2b      	ldr	r3, [pc, #172]	; (8010e64 <xTaskResumeAll+0x124>)
 8010db6:	681b      	ldr	r3, [r3, #0]
 8010db8:	4313      	orrs	r3, r2
 8010dba:	4a2a      	ldr	r2, [pc, #168]	; (8010e64 <xTaskResumeAll+0x124>)
 8010dbc:	6013      	str	r3, [r2, #0]
 8010dbe:	68fb      	ldr	r3, [r7, #12]
 8010dc0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010dc2:	4613      	mov	r3, r2
 8010dc4:	009b      	lsls	r3, r3, #2
 8010dc6:	4413      	add	r3, r2
 8010dc8:	009b      	lsls	r3, r3, #2
 8010dca:	4a27      	ldr	r2, [pc, #156]	; (8010e68 <xTaskResumeAll+0x128>)
 8010dcc:	441a      	add	r2, r3
 8010dce:	68fb      	ldr	r3, [r7, #12]
 8010dd0:	3304      	adds	r3, #4
 8010dd2:	4619      	mov	r1, r3
 8010dd4:	4610      	mov	r0, r2
 8010dd6:	f7fe fcb8 	bl	800f74a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010dde:	4b23      	ldr	r3, [pc, #140]	; (8010e6c <xTaskResumeAll+0x12c>)
 8010de0:	681b      	ldr	r3, [r3, #0]
 8010de2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010de4:	429a      	cmp	r2, r3
 8010de6:	d302      	bcc.n	8010dee <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 8010de8:	4b21      	ldr	r3, [pc, #132]	; (8010e70 <xTaskResumeAll+0x130>)
 8010dea:	2201      	movs	r2, #1
 8010dec:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010dee:	4b1c      	ldr	r3, [pc, #112]	; (8010e60 <xTaskResumeAll+0x120>)
 8010df0:	681b      	ldr	r3, [r3, #0]
 8010df2:	2b00      	cmp	r3, #0
 8010df4:	d1cc      	bne.n	8010d90 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8010df6:	68fb      	ldr	r3, [r7, #12]
 8010df8:	2b00      	cmp	r3, #0
 8010dfa:	d001      	beq.n	8010e00 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8010dfc:	f000 fb4c 	bl	8011498 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 8010e00:	4b1c      	ldr	r3, [pc, #112]	; (8010e74 <xTaskResumeAll+0x134>)
 8010e02:	681b      	ldr	r3, [r3, #0]
 8010e04:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	2b00      	cmp	r3, #0
 8010e0a:	d010      	beq.n	8010e2e <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8010e0c:	f000 f858 	bl	8010ec0 <xTaskIncrementTick>
 8010e10:	4603      	mov	r3, r0
 8010e12:	2b00      	cmp	r3, #0
 8010e14:	d002      	beq.n	8010e1c <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 8010e16:	4b16      	ldr	r3, [pc, #88]	; (8010e70 <xTaskResumeAll+0x130>)
 8010e18:	2201      	movs	r2, #1
 8010e1a:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8010e1c:	687b      	ldr	r3, [r7, #4]
 8010e1e:	3b01      	subs	r3, #1
 8010e20:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8010e22:	687b      	ldr	r3, [r7, #4]
 8010e24:	2b00      	cmp	r3, #0
 8010e26:	d1f1      	bne.n	8010e0c <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 8010e28:	4b12      	ldr	r3, [pc, #72]	; (8010e74 <xTaskResumeAll+0x134>)
 8010e2a:	2200      	movs	r2, #0
 8010e2c:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010e2e:	4b10      	ldr	r3, [pc, #64]	; (8010e70 <xTaskResumeAll+0x130>)
 8010e30:	681b      	ldr	r3, [r3, #0]
 8010e32:	2b00      	cmp	r3, #0
 8010e34:	d009      	beq.n	8010e4a <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8010e36:	2301      	movs	r3, #1
 8010e38:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8010e3a:	4b0f      	ldr	r3, [pc, #60]	; (8010e78 <xTaskResumeAll+0x138>)
 8010e3c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010e40:	601a      	str	r2, [r3, #0]
 8010e42:	f3bf 8f4f 	dsb	sy
 8010e46:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8010e4a:	f000 fec3 	bl	8011bd4 <vPortExitCritical>

	return xAlreadyYielded;
 8010e4e:	68bb      	ldr	r3, [r7, #8]
}
 8010e50:	4618      	mov	r0, r3
 8010e52:	3710      	adds	r7, #16
 8010e54:	46bd      	mov	sp, r7
 8010e56:	bd80      	pop	{r7, pc}
 8010e58:	200060e8 	.word	0x200060e8
 8010e5c:	200060c0 	.word	0x200060c0
 8010e60:	20006080 	.word	0x20006080
 8010e64:	200060c8 	.word	0x200060c8
 8010e68:	20005fc4 	.word	0x20005fc4
 8010e6c:	20005fc0 	.word	0x20005fc0
 8010e70:	200060d4 	.word	0x200060d4
 8010e74:	200060d0 	.word	0x200060d0
 8010e78:	e000ed04 	.word	0xe000ed04

08010e7c <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010e7c:	b480      	push	{r7}
 8010e7e:	b083      	sub	sp, #12
 8010e80:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010e82:	4b05      	ldr	r3, [pc, #20]	; (8010e98 <xTaskGetTickCount+0x1c>)
 8010e84:	681b      	ldr	r3, [r3, #0]
 8010e86:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8010e88:	687b      	ldr	r3, [r7, #4]
}
 8010e8a:	4618      	mov	r0, r3
 8010e8c:	370c      	adds	r7, #12
 8010e8e:	46bd      	mov	sp, r7
 8010e90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010e94:	4770      	bx	lr
 8010e96:	bf00      	nop
 8010e98:	200060c4 	.word	0x200060c4

08010e9c <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8010e9c:	b580      	push	{r7, lr}
 8010e9e:	b082      	sub	sp, #8
 8010ea0:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010ea2:	f000 ff4b 	bl	8011d3c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8010ea6:	2300      	movs	r3, #0
 8010ea8:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8010eaa:	4b04      	ldr	r3, [pc, #16]	; (8010ebc <xTaskGetTickCountFromISR+0x20>)
 8010eac:	681b      	ldr	r3, [r3, #0]
 8010eae:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010eb0:	683b      	ldr	r3, [r7, #0]
}
 8010eb2:	4618      	mov	r0, r3
 8010eb4:	3708      	adds	r7, #8
 8010eb6:	46bd      	mov	sp, r7
 8010eb8:	bd80      	pop	{r7, pc}
 8010eba:	bf00      	nop
 8010ebc:	200060c4 	.word	0x200060c4

08010ec0 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8010ec0:	b580      	push	{r7, lr}
 8010ec2:	b086      	sub	sp, #24
 8010ec4:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8010ec6:	2300      	movs	r3, #0
 8010ec8:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010eca:	4b4f      	ldr	r3, [pc, #316]	; (8011008 <xTaskIncrementTick+0x148>)
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	2b00      	cmp	r3, #0
 8010ed0:	f040 808a 	bne.w	8010fe8 <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8010ed4:	4b4d      	ldr	r3, [pc, #308]	; (801100c <xTaskIncrementTick+0x14c>)
 8010ed6:	681b      	ldr	r3, [r3, #0]
 8010ed8:	3301      	adds	r3, #1
 8010eda:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8010edc:	4a4b      	ldr	r2, [pc, #300]	; (801100c <xTaskIncrementTick+0x14c>)
 8010ede:	693b      	ldr	r3, [r7, #16]
 8010ee0:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8010ee2:	693b      	ldr	r3, [r7, #16]
 8010ee4:	2b00      	cmp	r3, #0
 8010ee6:	d122      	bne.n	8010f2e <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 8010ee8:	4b49      	ldr	r3, [pc, #292]	; (8011010 <xTaskIncrementTick+0x150>)
 8010eea:	681b      	ldr	r3, [r3, #0]
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	2b00      	cmp	r3, #0
 8010ef0:	d00c      	beq.n	8010f0c <xTaskIncrementTick+0x4c>
	__asm volatile
 8010ef2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010ef6:	b672      	cpsid	i
 8010ef8:	f383 8811 	msr	BASEPRI, r3
 8010efc:	f3bf 8f6f 	isb	sy
 8010f00:	f3bf 8f4f 	dsb	sy
 8010f04:	b662      	cpsie	i
 8010f06:	603b      	str	r3, [r7, #0]
}
 8010f08:	bf00      	nop
 8010f0a:	e7fe      	b.n	8010f0a <xTaskIncrementTick+0x4a>
 8010f0c:	4b40      	ldr	r3, [pc, #256]	; (8011010 <xTaskIncrementTick+0x150>)
 8010f0e:	681b      	ldr	r3, [r3, #0]
 8010f10:	60fb      	str	r3, [r7, #12]
 8010f12:	4b40      	ldr	r3, [pc, #256]	; (8011014 <xTaskIncrementTick+0x154>)
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	4a3e      	ldr	r2, [pc, #248]	; (8011010 <xTaskIncrementTick+0x150>)
 8010f18:	6013      	str	r3, [r2, #0]
 8010f1a:	4a3e      	ldr	r2, [pc, #248]	; (8011014 <xTaskIncrementTick+0x154>)
 8010f1c:	68fb      	ldr	r3, [r7, #12]
 8010f1e:	6013      	str	r3, [r2, #0]
 8010f20:	4b3d      	ldr	r3, [pc, #244]	; (8011018 <xTaskIncrementTick+0x158>)
 8010f22:	681b      	ldr	r3, [r3, #0]
 8010f24:	3301      	adds	r3, #1
 8010f26:	4a3c      	ldr	r2, [pc, #240]	; (8011018 <xTaskIncrementTick+0x158>)
 8010f28:	6013      	str	r3, [r2, #0]
 8010f2a:	f000 fab5 	bl	8011498 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010f2e:	4b3b      	ldr	r3, [pc, #236]	; (801101c <xTaskIncrementTick+0x15c>)
 8010f30:	681b      	ldr	r3, [r3, #0]
 8010f32:	693a      	ldr	r2, [r7, #16]
 8010f34:	429a      	cmp	r2, r3
 8010f36:	d348      	bcc.n	8010fca <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010f38:	4b35      	ldr	r3, [pc, #212]	; (8011010 <xTaskIncrementTick+0x150>)
 8010f3a:	681b      	ldr	r3, [r3, #0]
 8010f3c:	681b      	ldr	r3, [r3, #0]
 8010f3e:	2b00      	cmp	r3, #0
 8010f40:	d104      	bne.n	8010f4c <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010f42:	4b36      	ldr	r3, [pc, #216]	; (801101c <xTaskIncrementTick+0x15c>)
 8010f44:	f04f 32ff 	mov.w	r2, #4294967295
 8010f48:	601a      	str	r2, [r3, #0]
					break;
 8010f4a:	e03e      	b.n	8010fca <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010f4c:	4b30      	ldr	r3, [pc, #192]	; (8011010 <xTaskIncrementTick+0x150>)
 8010f4e:	681b      	ldr	r3, [r3, #0]
 8010f50:	68db      	ldr	r3, [r3, #12]
 8010f52:	68db      	ldr	r3, [r3, #12]
 8010f54:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8010f56:	68bb      	ldr	r3, [r7, #8]
 8010f58:	685b      	ldr	r3, [r3, #4]
 8010f5a:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010f5c:	693a      	ldr	r2, [r7, #16]
 8010f5e:	687b      	ldr	r3, [r7, #4]
 8010f60:	429a      	cmp	r2, r3
 8010f62:	d203      	bcs.n	8010f6c <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010f64:	4a2d      	ldr	r2, [pc, #180]	; (801101c <xTaskIncrementTick+0x15c>)
 8010f66:	687b      	ldr	r3, [r7, #4]
 8010f68:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8010f6a:	e02e      	b.n	8010fca <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010f6c:	68bb      	ldr	r3, [r7, #8]
 8010f6e:	3304      	adds	r3, #4
 8010f70:	4618      	mov	r0, r3
 8010f72:	f7fe fc47 	bl	800f804 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8010f76:	68bb      	ldr	r3, [r7, #8]
 8010f78:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8010f7a:	2b00      	cmp	r3, #0
 8010f7c:	d004      	beq.n	8010f88 <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010f7e:	68bb      	ldr	r3, [r7, #8]
 8010f80:	3318      	adds	r3, #24
 8010f82:	4618      	mov	r0, r3
 8010f84:	f7fe fc3e 	bl	800f804 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8010f88:	68bb      	ldr	r3, [r7, #8]
 8010f8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f8c:	2201      	movs	r2, #1
 8010f8e:	409a      	lsls	r2, r3
 8010f90:	4b23      	ldr	r3, [pc, #140]	; (8011020 <xTaskIncrementTick+0x160>)
 8010f92:	681b      	ldr	r3, [r3, #0]
 8010f94:	4313      	orrs	r3, r2
 8010f96:	4a22      	ldr	r2, [pc, #136]	; (8011020 <xTaskIncrementTick+0x160>)
 8010f98:	6013      	str	r3, [r2, #0]
 8010f9a:	68bb      	ldr	r3, [r7, #8]
 8010f9c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010f9e:	4613      	mov	r3, r2
 8010fa0:	009b      	lsls	r3, r3, #2
 8010fa2:	4413      	add	r3, r2
 8010fa4:	009b      	lsls	r3, r3, #2
 8010fa6:	4a1f      	ldr	r2, [pc, #124]	; (8011024 <xTaskIncrementTick+0x164>)
 8010fa8:	441a      	add	r2, r3
 8010faa:	68bb      	ldr	r3, [r7, #8]
 8010fac:	3304      	adds	r3, #4
 8010fae:	4619      	mov	r1, r3
 8010fb0:	4610      	mov	r0, r2
 8010fb2:	f7fe fbca 	bl	800f74a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8010fb6:	68bb      	ldr	r3, [r7, #8]
 8010fb8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fba:	4b1b      	ldr	r3, [pc, #108]	; (8011028 <xTaskIncrementTick+0x168>)
 8010fbc:	681b      	ldr	r3, [r3, #0]
 8010fbe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010fc0:	429a      	cmp	r2, r3
 8010fc2:	d3b9      	bcc.n	8010f38 <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 8010fc4:	2301      	movs	r3, #1
 8010fc6:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010fc8:	e7b6      	b.n	8010f38 <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8010fca:	4b17      	ldr	r3, [pc, #92]	; (8011028 <xTaskIncrementTick+0x168>)
 8010fcc:	681b      	ldr	r3, [r3, #0]
 8010fce:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fd0:	4914      	ldr	r1, [pc, #80]	; (8011024 <xTaskIncrementTick+0x164>)
 8010fd2:	4613      	mov	r3, r2
 8010fd4:	009b      	lsls	r3, r3, #2
 8010fd6:	4413      	add	r3, r2
 8010fd8:	009b      	lsls	r3, r3, #2
 8010fda:	440b      	add	r3, r1
 8010fdc:	681b      	ldr	r3, [r3, #0]
 8010fde:	2b01      	cmp	r3, #1
 8010fe0:	d907      	bls.n	8010ff2 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 8010fe2:	2301      	movs	r3, #1
 8010fe4:	617b      	str	r3, [r7, #20]
 8010fe6:	e004      	b.n	8010ff2 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 8010fe8:	4b10      	ldr	r3, [pc, #64]	; (801102c <xTaskIncrementTick+0x16c>)
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	3301      	adds	r3, #1
 8010fee:	4a0f      	ldr	r2, [pc, #60]	; (801102c <xTaskIncrementTick+0x16c>)
 8010ff0:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 8010ff2:	4b0f      	ldr	r3, [pc, #60]	; (8011030 <xTaskIncrementTick+0x170>)
 8010ff4:	681b      	ldr	r3, [r3, #0]
 8010ff6:	2b00      	cmp	r3, #0
 8010ff8:	d001      	beq.n	8010ffe <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 8010ffa:	2301      	movs	r3, #1
 8010ffc:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 8010ffe:	697b      	ldr	r3, [r7, #20]
}
 8011000:	4618      	mov	r0, r3
 8011002:	3718      	adds	r7, #24
 8011004:	46bd      	mov	sp, r7
 8011006:	bd80      	pop	{r7, pc}
 8011008:	200060e8 	.word	0x200060e8
 801100c:	200060c4 	.word	0x200060c4
 8011010:	20006078 	.word	0x20006078
 8011014:	2000607c 	.word	0x2000607c
 8011018:	200060d8 	.word	0x200060d8
 801101c:	200060e0 	.word	0x200060e0
 8011020:	200060c8 	.word	0x200060c8
 8011024:	20005fc4 	.word	0x20005fc4
 8011028:	20005fc0 	.word	0x20005fc0
 801102c:	200060d0 	.word	0x200060d0
 8011030:	200060d4 	.word	0x200060d4

08011034 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8011034:	b480      	push	{r7}
 8011036:	b087      	sub	sp, #28
 8011038:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801103a:	4b2a      	ldr	r3, [pc, #168]	; (80110e4 <vTaskSwitchContext+0xb0>)
 801103c:	681b      	ldr	r3, [r3, #0]
 801103e:	2b00      	cmp	r3, #0
 8011040:	d003      	beq.n	801104a <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8011042:	4b29      	ldr	r3, [pc, #164]	; (80110e8 <vTaskSwitchContext+0xb4>)
 8011044:	2201      	movs	r2, #1
 8011046:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8011048:	e046      	b.n	80110d8 <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 801104a:	4b27      	ldr	r3, [pc, #156]	; (80110e8 <vTaskSwitchContext+0xb4>)
 801104c:	2200      	movs	r2, #0
 801104e:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011050:	4b26      	ldr	r3, [pc, #152]	; (80110ec <vTaskSwitchContext+0xb8>)
 8011052:	681b      	ldr	r3, [r3, #0]
 8011054:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 8011056:	68fb      	ldr	r3, [r7, #12]
 8011058:	fab3 f383 	clz	r3, r3
 801105c:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 801105e:	7afb      	ldrb	r3, [r7, #11]
 8011060:	f1c3 031f 	rsb	r3, r3, #31
 8011064:	617b      	str	r3, [r7, #20]
 8011066:	4922      	ldr	r1, [pc, #136]	; (80110f0 <vTaskSwitchContext+0xbc>)
 8011068:	697a      	ldr	r2, [r7, #20]
 801106a:	4613      	mov	r3, r2
 801106c:	009b      	lsls	r3, r3, #2
 801106e:	4413      	add	r3, r2
 8011070:	009b      	lsls	r3, r3, #2
 8011072:	440b      	add	r3, r1
 8011074:	681b      	ldr	r3, [r3, #0]
 8011076:	2b00      	cmp	r3, #0
 8011078:	d10c      	bne.n	8011094 <vTaskSwitchContext+0x60>
	__asm volatile
 801107a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801107e:	b672      	cpsid	i
 8011080:	f383 8811 	msr	BASEPRI, r3
 8011084:	f3bf 8f6f 	isb	sy
 8011088:	f3bf 8f4f 	dsb	sy
 801108c:	b662      	cpsie	i
 801108e:	607b      	str	r3, [r7, #4]
}
 8011090:	bf00      	nop
 8011092:	e7fe      	b.n	8011092 <vTaskSwitchContext+0x5e>
 8011094:	697a      	ldr	r2, [r7, #20]
 8011096:	4613      	mov	r3, r2
 8011098:	009b      	lsls	r3, r3, #2
 801109a:	4413      	add	r3, r2
 801109c:	009b      	lsls	r3, r3, #2
 801109e:	4a14      	ldr	r2, [pc, #80]	; (80110f0 <vTaskSwitchContext+0xbc>)
 80110a0:	4413      	add	r3, r2
 80110a2:	613b      	str	r3, [r7, #16]
 80110a4:	693b      	ldr	r3, [r7, #16]
 80110a6:	685b      	ldr	r3, [r3, #4]
 80110a8:	685a      	ldr	r2, [r3, #4]
 80110aa:	693b      	ldr	r3, [r7, #16]
 80110ac:	605a      	str	r2, [r3, #4]
 80110ae:	693b      	ldr	r3, [r7, #16]
 80110b0:	685a      	ldr	r2, [r3, #4]
 80110b2:	693b      	ldr	r3, [r7, #16]
 80110b4:	3308      	adds	r3, #8
 80110b6:	429a      	cmp	r2, r3
 80110b8:	d104      	bne.n	80110c4 <vTaskSwitchContext+0x90>
 80110ba:	693b      	ldr	r3, [r7, #16]
 80110bc:	685b      	ldr	r3, [r3, #4]
 80110be:	685a      	ldr	r2, [r3, #4]
 80110c0:	693b      	ldr	r3, [r7, #16]
 80110c2:	605a      	str	r2, [r3, #4]
 80110c4:	693b      	ldr	r3, [r7, #16]
 80110c6:	685b      	ldr	r3, [r3, #4]
 80110c8:	68db      	ldr	r3, [r3, #12]
 80110ca:	4a0a      	ldr	r2, [pc, #40]	; (80110f4 <vTaskSwitchContext+0xc0>)
 80110cc:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80110ce:	4b09      	ldr	r3, [pc, #36]	; (80110f4 <vTaskSwitchContext+0xc0>)
 80110d0:	681b      	ldr	r3, [r3, #0]
 80110d2:	334c      	adds	r3, #76	; 0x4c
 80110d4:	4a08      	ldr	r2, [pc, #32]	; (80110f8 <vTaskSwitchContext+0xc4>)
 80110d6:	6013      	str	r3, [r2, #0]
}
 80110d8:	bf00      	nop
 80110da:	371c      	adds	r7, #28
 80110dc:	46bd      	mov	sp, r7
 80110de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80110e2:	4770      	bx	lr
 80110e4:	200060e8 	.word	0x200060e8
 80110e8:	200060d4 	.word	0x200060d4
 80110ec:	200060c8 	.word	0x200060c8
 80110f0:	20005fc4 	.word	0x20005fc4
 80110f4:	20005fc0 	.word	0x20005fc0
 80110f8:	200001a0 	.word	0x200001a0

080110fc <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80110fc:	b580      	push	{r7, lr}
 80110fe:	b084      	sub	sp, #16
 8011100:	af00      	add	r7, sp, #0
 8011102:	6078      	str	r0, [r7, #4]
 8011104:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8011106:	687b      	ldr	r3, [r7, #4]
 8011108:	2b00      	cmp	r3, #0
 801110a:	d10c      	bne.n	8011126 <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 801110c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011110:	b672      	cpsid	i
 8011112:	f383 8811 	msr	BASEPRI, r3
 8011116:	f3bf 8f6f 	isb	sy
 801111a:	f3bf 8f4f 	dsb	sy
 801111e:	b662      	cpsie	i
 8011120:	60fb      	str	r3, [r7, #12]
}
 8011122:	bf00      	nop
 8011124:	e7fe      	b.n	8011124 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8011126:	4b07      	ldr	r3, [pc, #28]	; (8011144 <vTaskPlaceOnEventList+0x48>)
 8011128:	681b      	ldr	r3, [r3, #0]
 801112a:	3318      	adds	r3, #24
 801112c:	4619      	mov	r1, r3
 801112e:	6878      	ldr	r0, [r7, #4]
 8011130:	f7fe fb2f 	bl	800f792 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8011134:	2101      	movs	r1, #1
 8011136:	6838      	ldr	r0, [r7, #0]
 8011138:	f000 fba8 	bl	801188c <prvAddCurrentTaskToDelayedList>
}
 801113c:	bf00      	nop
 801113e:	3710      	adds	r7, #16
 8011140:	46bd      	mov	sp, r7
 8011142:	bd80      	pop	{r7, pc}
 8011144:	20005fc0 	.word	0x20005fc0

08011148 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8011148:	b580      	push	{r7, lr}
 801114a:	b086      	sub	sp, #24
 801114c:	af00      	add	r7, sp, #0
 801114e:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8011150:	687b      	ldr	r3, [r7, #4]
 8011152:	68db      	ldr	r3, [r3, #12]
 8011154:	68db      	ldr	r3, [r3, #12]
 8011156:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8011158:	693b      	ldr	r3, [r7, #16]
 801115a:	2b00      	cmp	r3, #0
 801115c:	d10c      	bne.n	8011178 <xTaskRemoveFromEventList+0x30>
	__asm volatile
 801115e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011162:	b672      	cpsid	i
 8011164:	f383 8811 	msr	BASEPRI, r3
 8011168:	f3bf 8f6f 	isb	sy
 801116c:	f3bf 8f4f 	dsb	sy
 8011170:	b662      	cpsie	i
 8011172:	60fb      	str	r3, [r7, #12]
}
 8011174:	bf00      	nop
 8011176:	e7fe      	b.n	8011176 <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8011178:	693b      	ldr	r3, [r7, #16]
 801117a:	3318      	adds	r3, #24
 801117c:	4618      	mov	r0, r3
 801117e:	f7fe fb41 	bl	800f804 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8011182:	4b1d      	ldr	r3, [pc, #116]	; (80111f8 <xTaskRemoveFromEventList+0xb0>)
 8011184:	681b      	ldr	r3, [r3, #0]
 8011186:	2b00      	cmp	r3, #0
 8011188:	d11c      	bne.n	80111c4 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801118a:	693b      	ldr	r3, [r7, #16]
 801118c:	3304      	adds	r3, #4
 801118e:	4618      	mov	r0, r3
 8011190:	f7fe fb38 	bl	800f804 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8011194:	693b      	ldr	r3, [r7, #16]
 8011196:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011198:	2201      	movs	r2, #1
 801119a:	409a      	lsls	r2, r3
 801119c:	4b17      	ldr	r3, [pc, #92]	; (80111fc <xTaskRemoveFromEventList+0xb4>)
 801119e:	681b      	ldr	r3, [r3, #0]
 80111a0:	4313      	orrs	r3, r2
 80111a2:	4a16      	ldr	r2, [pc, #88]	; (80111fc <xTaskRemoveFromEventList+0xb4>)
 80111a4:	6013      	str	r3, [r2, #0]
 80111a6:	693b      	ldr	r3, [r7, #16]
 80111a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111aa:	4613      	mov	r3, r2
 80111ac:	009b      	lsls	r3, r3, #2
 80111ae:	4413      	add	r3, r2
 80111b0:	009b      	lsls	r3, r3, #2
 80111b2:	4a13      	ldr	r2, [pc, #76]	; (8011200 <xTaskRemoveFromEventList+0xb8>)
 80111b4:	441a      	add	r2, r3
 80111b6:	693b      	ldr	r3, [r7, #16]
 80111b8:	3304      	adds	r3, #4
 80111ba:	4619      	mov	r1, r3
 80111bc:	4610      	mov	r0, r2
 80111be:	f7fe fac4 	bl	800f74a <vListInsertEnd>
 80111c2:	e005      	b.n	80111d0 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80111c4:	693b      	ldr	r3, [r7, #16]
 80111c6:	3318      	adds	r3, #24
 80111c8:	4619      	mov	r1, r3
 80111ca:	480e      	ldr	r0, [pc, #56]	; (8011204 <xTaskRemoveFromEventList+0xbc>)
 80111cc:	f7fe fabd 	bl	800f74a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80111d0:	693b      	ldr	r3, [r7, #16]
 80111d2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80111d4:	4b0c      	ldr	r3, [pc, #48]	; (8011208 <xTaskRemoveFromEventList+0xc0>)
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80111da:	429a      	cmp	r2, r3
 80111dc:	d905      	bls.n	80111ea <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80111de:	2301      	movs	r3, #1
 80111e0:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80111e2:	4b0a      	ldr	r3, [pc, #40]	; (801120c <xTaskRemoveFromEventList+0xc4>)
 80111e4:	2201      	movs	r2, #1
 80111e6:	601a      	str	r2, [r3, #0]
 80111e8:	e001      	b.n	80111ee <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80111ea:	2300      	movs	r3, #0
 80111ec:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80111ee:	697b      	ldr	r3, [r7, #20]
}
 80111f0:	4618      	mov	r0, r3
 80111f2:	3718      	adds	r7, #24
 80111f4:	46bd      	mov	sp, r7
 80111f6:	bd80      	pop	{r7, pc}
 80111f8:	200060e8 	.word	0x200060e8
 80111fc:	200060c8 	.word	0x200060c8
 8011200:	20005fc4 	.word	0x20005fc4
 8011204:	20006080 	.word	0x20006080
 8011208:	20005fc0 	.word	0x20005fc0
 801120c:	200060d4 	.word	0x200060d4

08011210 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 8011210:	b480      	push	{r7}
 8011212:	b083      	sub	sp, #12
 8011214:	af00      	add	r7, sp, #0
 8011216:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8011218:	4b06      	ldr	r3, [pc, #24]	; (8011234 <vTaskInternalSetTimeOutState+0x24>)
 801121a:	681a      	ldr	r2, [r3, #0]
 801121c:	687b      	ldr	r3, [r7, #4]
 801121e:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8011220:	4b05      	ldr	r3, [pc, #20]	; (8011238 <vTaskInternalSetTimeOutState+0x28>)
 8011222:	681a      	ldr	r2, [r3, #0]
 8011224:	687b      	ldr	r3, [r7, #4]
 8011226:	605a      	str	r2, [r3, #4]
}
 8011228:	bf00      	nop
 801122a:	370c      	adds	r7, #12
 801122c:	46bd      	mov	sp, r7
 801122e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011232:	4770      	bx	lr
 8011234:	200060d8 	.word	0x200060d8
 8011238:	200060c4 	.word	0x200060c4

0801123c <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 801123c:	b580      	push	{r7, lr}
 801123e:	b088      	sub	sp, #32
 8011240:	af00      	add	r7, sp, #0
 8011242:	6078      	str	r0, [r7, #4]
 8011244:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8011246:	687b      	ldr	r3, [r7, #4]
 8011248:	2b00      	cmp	r3, #0
 801124a:	d10c      	bne.n	8011266 <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 801124c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011250:	b672      	cpsid	i
 8011252:	f383 8811 	msr	BASEPRI, r3
 8011256:	f3bf 8f6f 	isb	sy
 801125a:	f3bf 8f4f 	dsb	sy
 801125e:	b662      	cpsie	i
 8011260:	613b      	str	r3, [r7, #16]
}
 8011262:	bf00      	nop
 8011264:	e7fe      	b.n	8011264 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8011266:	683b      	ldr	r3, [r7, #0]
 8011268:	2b00      	cmp	r3, #0
 801126a:	d10c      	bne.n	8011286 <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 801126c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011270:	b672      	cpsid	i
 8011272:	f383 8811 	msr	BASEPRI, r3
 8011276:	f3bf 8f6f 	isb	sy
 801127a:	f3bf 8f4f 	dsb	sy
 801127e:	b662      	cpsie	i
 8011280:	60fb      	str	r3, [r7, #12]
}
 8011282:	bf00      	nop
 8011284:	e7fe      	b.n	8011284 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8011286:	f000 fc71 	bl	8011b6c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 801128a:	4b1d      	ldr	r3, [pc, #116]	; (8011300 <xTaskCheckForTimeOut+0xc4>)
 801128c:	681b      	ldr	r3, [r3, #0]
 801128e:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8011290:	687b      	ldr	r3, [r7, #4]
 8011292:	685b      	ldr	r3, [r3, #4]
 8011294:	69ba      	ldr	r2, [r7, #24]
 8011296:	1ad3      	subs	r3, r2, r3
 8011298:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 801129a:	683b      	ldr	r3, [r7, #0]
 801129c:	681b      	ldr	r3, [r3, #0]
 801129e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80112a2:	d102      	bne.n	80112aa <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80112a4:	2300      	movs	r3, #0
 80112a6:	61fb      	str	r3, [r7, #28]
 80112a8:	e023      	b.n	80112f2 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80112aa:	687b      	ldr	r3, [r7, #4]
 80112ac:	681a      	ldr	r2, [r3, #0]
 80112ae:	4b15      	ldr	r3, [pc, #84]	; (8011304 <xTaskCheckForTimeOut+0xc8>)
 80112b0:	681b      	ldr	r3, [r3, #0]
 80112b2:	429a      	cmp	r2, r3
 80112b4:	d007      	beq.n	80112c6 <xTaskCheckForTimeOut+0x8a>
 80112b6:	687b      	ldr	r3, [r7, #4]
 80112b8:	685b      	ldr	r3, [r3, #4]
 80112ba:	69ba      	ldr	r2, [r7, #24]
 80112bc:	429a      	cmp	r2, r3
 80112be:	d302      	bcc.n	80112c6 <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 80112c0:	2301      	movs	r3, #1
 80112c2:	61fb      	str	r3, [r7, #28]
 80112c4:	e015      	b.n	80112f2 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 80112c6:	683b      	ldr	r3, [r7, #0]
 80112c8:	681b      	ldr	r3, [r3, #0]
 80112ca:	697a      	ldr	r2, [r7, #20]
 80112cc:	429a      	cmp	r2, r3
 80112ce:	d20b      	bcs.n	80112e8 <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 80112d0:	683b      	ldr	r3, [r7, #0]
 80112d2:	681a      	ldr	r2, [r3, #0]
 80112d4:	697b      	ldr	r3, [r7, #20]
 80112d6:	1ad2      	subs	r2, r2, r3
 80112d8:	683b      	ldr	r3, [r7, #0]
 80112da:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 80112dc:	6878      	ldr	r0, [r7, #4]
 80112de:	f7ff ff97 	bl	8011210 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 80112e2:	2300      	movs	r3, #0
 80112e4:	61fb      	str	r3, [r7, #28]
 80112e6:	e004      	b.n	80112f2 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 80112e8:	683b      	ldr	r3, [r7, #0]
 80112ea:	2200      	movs	r2, #0
 80112ec:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 80112ee:	2301      	movs	r3, #1
 80112f0:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 80112f2:	f000 fc6f 	bl	8011bd4 <vPortExitCritical>

	return xReturn;
 80112f6:	69fb      	ldr	r3, [r7, #28]
}
 80112f8:	4618      	mov	r0, r3
 80112fa:	3720      	adds	r7, #32
 80112fc:	46bd      	mov	sp, r7
 80112fe:	bd80      	pop	{r7, pc}
 8011300:	200060c4 	.word	0x200060c4
 8011304:	200060d8 	.word	0x200060d8

08011308 <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8011308:	b480      	push	{r7}
 801130a:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 801130c:	4b03      	ldr	r3, [pc, #12]	; (801131c <vTaskMissedYield+0x14>)
 801130e:	2201      	movs	r2, #1
 8011310:	601a      	str	r2, [r3, #0]
}
 8011312:	bf00      	nop
 8011314:	46bd      	mov	sp, r7
 8011316:	f85d 7b04 	ldr.w	r7, [sp], #4
 801131a:	4770      	bx	lr
 801131c:	200060d4 	.word	0x200060d4

08011320 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8011320:	b580      	push	{r7, lr}
 8011322:	b082      	sub	sp, #8
 8011324:	af00      	add	r7, sp, #0
 8011326:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8011328:	f000 f852 	bl	80113d0 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 801132c:	4b06      	ldr	r3, [pc, #24]	; (8011348 <prvIdleTask+0x28>)
 801132e:	681b      	ldr	r3, [r3, #0]
 8011330:	2b01      	cmp	r3, #1
 8011332:	d9f9      	bls.n	8011328 <prvIdleTask+0x8>
			{
				taskYIELD();
 8011334:	4b05      	ldr	r3, [pc, #20]	; (801134c <prvIdleTask+0x2c>)
 8011336:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801133a:	601a      	str	r2, [r3, #0]
 801133c:	f3bf 8f4f 	dsb	sy
 8011340:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8011344:	e7f0      	b.n	8011328 <prvIdleTask+0x8>
 8011346:	bf00      	nop
 8011348:	20005fc4 	.word	0x20005fc4
 801134c:	e000ed04 	.word	0xe000ed04

08011350 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8011350:	b580      	push	{r7, lr}
 8011352:	b082      	sub	sp, #8
 8011354:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011356:	2300      	movs	r3, #0
 8011358:	607b      	str	r3, [r7, #4]
 801135a:	e00c      	b.n	8011376 <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 801135c:	687a      	ldr	r2, [r7, #4]
 801135e:	4613      	mov	r3, r2
 8011360:	009b      	lsls	r3, r3, #2
 8011362:	4413      	add	r3, r2
 8011364:	009b      	lsls	r3, r3, #2
 8011366:	4a12      	ldr	r2, [pc, #72]	; (80113b0 <prvInitialiseTaskLists+0x60>)
 8011368:	4413      	add	r3, r2
 801136a:	4618      	mov	r0, r3
 801136c:	f7fe f9c0 	bl	800f6f0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8011370:	687b      	ldr	r3, [r7, #4]
 8011372:	3301      	adds	r3, #1
 8011374:	607b      	str	r3, [r7, #4]
 8011376:	687b      	ldr	r3, [r7, #4]
 8011378:	2b06      	cmp	r3, #6
 801137a:	d9ef      	bls.n	801135c <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 801137c:	480d      	ldr	r0, [pc, #52]	; (80113b4 <prvInitialiseTaskLists+0x64>)
 801137e:	f7fe f9b7 	bl	800f6f0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8011382:	480d      	ldr	r0, [pc, #52]	; (80113b8 <prvInitialiseTaskLists+0x68>)
 8011384:	f7fe f9b4 	bl	800f6f0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8011388:	480c      	ldr	r0, [pc, #48]	; (80113bc <prvInitialiseTaskLists+0x6c>)
 801138a:	f7fe f9b1 	bl	800f6f0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 801138e:	480c      	ldr	r0, [pc, #48]	; (80113c0 <prvInitialiseTaskLists+0x70>)
 8011390:	f7fe f9ae 	bl	800f6f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8011394:	480b      	ldr	r0, [pc, #44]	; (80113c4 <prvInitialiseTaskLists+0x74>)
 8011396:	f7fe f9ab 	bl	800f6f0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 801139a:	4b0b      	ldr	r3, [pc, #44]	; (80113c8 <prvInitialiseTaskLists+0x78>)
 801139c:	4a05      	ldr	r2, [pc, #20]	; (80113b4 <prvInitialiseTaskLists+0x64>)
 801139e:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80113a0:	4b0a      	ldr	r3, [pc, #40]	; (80113cc <prvInitialiseTaskLists+0x7c>)
 80113a2:	4a05      	ldr	r2, [pc, #20]	; (80113b8 <prvInitialiseTaskLists+0x68>)
 80113a4:	601a      	str	r2, [r3, #0]
}
 80113a6:	bf00      	nop
 80113a8:	3708      	adds	r7, #8
 80113aa:	46bd      	mov	sp, r7
 80113ac:	bd80      	pop	{r7, pc}
 80113ae:	bf00      	nop
 80113b0:	20005fc4 	.word	0x20005fc4
 80113b4:	20006050 	.word	0x20006050
 80113b8:	20006064 	.word	0x20006064
 80113bc:	20006080 	.word	0x20006080
 80113c0:	20006094 	.word	0x20006094
 80113c4:	200060ac 	.word	0x200060ac
 80113c8:	20006078 	.word	0x20006078
 80113cc:	2000607c 	.word	0x2000607c

080113d0 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 80113d0:	b580      	push	{r7, lr}
 80113d2:	b082      	sub	sp, #8
 80113d4:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 80113d6:	e019      	b.n	801140c <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 80113d8:	f000 fbc8 	bl	8011b6c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80113dc:	4b10      	ldr	r3, [pc, #64]	; (8011420 <prvCheckTasksWaitingTermination+0x50>)
 80113de:	68db      	ldr	r3, [r3, #12]
 80113e0:	68db      	ldr	r3, [r3, #12]
 80113e2:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 80113e4:	687b      	ldr	r3, [r7, #4]
 80113e6:	3304      	adds	r3, #4
 80113e8:	4618      	mov	r0, r3
 80113ea:	f7fe fa0b 	bl	800f804 <uxListRemove>
				--uxCurrentNumberOfTasks;
 80113ee:	4b0d      	ldr	r3, [pc, #52]	; (8011424 <prvCheckTasksWaitingTermination+0x54>)
 80113f0:	681b      	ldr	r3, [r3, #0]
 80113f2:	3b01      	subs	r3, #1
 80113f4:	4a0b      	ldr	r2, [pc, #44]	; (8011424 <prvCheckTasksWaitingTermination+0x54>)
 80113f6:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 80113f8:	4b0b      	ldr	r3, [pc, #44]	; (8011428 <prvCheckTasksWaitingTermination+0x58>)
 80113fa:	681b      	ldr	r3, [r3, #0]
 80113fc:	3b01      	subs	r3, #1
 80113fe:	4a0a      	ldr	r2, [pc, #40]	; (8011428 <prvCheckTasksWaitingTermination+0x58>)
 8011400:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8011402:	f000 fbe7 	bl	8011bd4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8011406:	6878      	ldr	r0, [r7, #4]
 8011408:	f000 f810 	bl	801142c <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 801140c:	4b06      	ldr	r3, [pc, #24]	; (8011428 <prvCheckTasksWaitingTermination+0x58>)
 801140e:	681b      	ldr	r3, [r3, #0]
 8011410:	2b00      	cmp	r3, #0
 8011412:	d1e1      	bne.n	80113d8 <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8011414:	bf00      	nop
 8011416:	bf00      	nop
 8011418:	3708      	adds	r7, #8
 801141a:	46bd      	mov	sp, r7
 801141c:	bd80      	pop	{r7, pc}
 801141e:	bf00      	nop
 8011420:	20006094 	.word	0x20006094
 8011424:	200060c0 	.word	0x200060c0
 8011428:	200060a8 	.word	0x200060a8

0801142c <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 801142c:	b580      	push	{r7, lr}
 801142e:	b084      	sub	sp, #16
 8011430:	af00      	add	r7, sp, #0
 8011432:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8011434:	687b      	ldr	r3, [r7, #4]
 8011436:	334c      	adds	r3, #76	; 0x4c
 8011438:	4618      	mov	r0, r3
 801143a:	f00c fcff 	bl	801de3c <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 801143e:	687b      	ldr	r3, [r7, #4]
 8011440:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8011444:	2b00      	cmp	r3, #0
 8011446:	d108      	bne.n	801145a <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8011448:	687b      	ldr	r3, [r7, #4]
 801144a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 801144c:	4618      	mov	r0, r3
 801144e:	f000 fd83 	bl	8011f58 <vPortFree>
				vPortFree( pxTCB );
 8011452:	6878      	ldr	r0, [r7, #4]
 8011454:	f000 fd80 	bl	8011f58 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8011458:	e01a      	b.n	8011490 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 801145a:	687b      	ldr	r3, [r7, #4]
 801145c:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8011460:	2b01      	cmp	r3, #1
 8011462:	d103      	bne.n	801146c <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8011464:	6878      	ldr	r0, [r7, #4]
 8011466:	f000 fd77 	bl	8011f58 <vPortFree>
	}
 801146a:	e011      	b.n	8011490 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 801146c:	687b      	ldr	r3, [r7, #4]
 801146e:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8011472:	2b02      	cmp	r3, #2
 8011474:	d00c      	beq.n	8011490 <prvDeleteTCB+0x64>
	__asm volatile
 8011476:	f04f 0350 	mov.w	r3, #80	; 0x50
 801147a:	b672      	cpsid	i
 801147c:	f383 8811 	msr	BASEPRI, r3
 8011480:	f3bf 8f6f 	isb	sy
 8011484:	f3bf 8f4f 	dsb	sy
 8011488:	b662      	cpsie	i
 801148a:	60fb      	str	r3, [r7, #12]
}
 801148c:	bf00      	nop
 801148e:	e7fe      	b.n	801148e <prvDeleteTCB+0x62>
	}
 8011490:	bf00      	nop
 8011492:	3710      	adds	r7, #16
 8011494:	46bd      	mov	sp, r7
 8011496:	bd80      	pop	{r7, pc}

08011498 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8011498:	b480      	push	{r7}
 801149a:	b083      	sub	sp, #12
 801149c:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801149e:	4b0c      	ldr	r3, [pc, #48]	; (80114d0 <prvResetNextTaskUnblockTime+0x38>)
 80114a0:	681b      	ldr	r3, [r3, #0]
 80114a2:	681b      	ldr	r3, [r3, #0]
 80114a4:	2b00      	cmp	r3, #0
 80114a6:	d104      	bne.n	80114b2 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80114a8:	4b0a      	ldr	r3, [pc, #40]	; (80114d4 <prvResetNextTaskUnblockTime+0x3c>)
 80114aa:	f04f 32ff 	mov.w	r2, #4294967295
 80114ae:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 80114b0:	e008      	b.n	80114c4 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 80114b2:	4b07      	ldr	r3, [pc, #28]	; (80114d0 <prvResetNextTaskUnblockTime+0x38>)
 80114b4:	681b      	ldr	r3, [r3, #0]
 80114b6:	68db      	ldr	r3, [r3, #12]
 80114b8:	68db      	ldr	r3, [r3, #12]
 80114ba:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 80114bc:	687b      	ldr	r3, [r7, #4]
 80114be:	685b      	ldr	r3, [r3, #4]
 80114c0:	4a04      	ldr	r2, [pc, #16]	; (80114d4 <prvResetNextTaskUnblockTime+0x3c>)
 80114c2:	6013      	str	r3, [r2, #0]
}
 80114c4:	bf00      	nop
 80114c6:	370c      	adds	r7, #12
 80114c8:	46bd      	mov	sp, r7
 80114ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80114ce:	4770      	bx	lr
 80114d0:	20006078 	.word	0x20006078
 80114d4:	200060e0 	.word	0x200060e0

080114d8 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 80114d8:	b480      	push	{r7}
 80114da:	b083      	sub	sp, #12
 80114dc:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 80114de:	4b0b      	ldr	r3, [pc, #44]	; (801150c <xTaskGetSchedulerState+0x34>)
 80114e0:	681b      	ldr	r3, [r3, #0]
 80114e2:	2b00      	cmp	r3, #0
 80114e4:	d102      	bne.n	80114ec <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 80114e6:	2301      	movs	r3, #1
 80114e8:	607b      	str	r3, [r7, #4]
 80114ea:	e008      	b.n	80114fe <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80114ec:	4b08      	ldr	r3, [pc, #32]	; (8011510 <xTaskGetSchedulerState+0x38>)
 80114ee:	681b      	ldr	r3, [r3, #0]
 80114f0:	2b00      	cmp	r3, #0
 80114f2:	d102      	bne.n	80114fa <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 80114f4:	2302      	movs	r3, #2
 80114f6:	607b      	str	r3, [r7, #4]
 80114f8:	e001      	b.n	80114fe <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 80114fa:	2300      	movs	r3, #0
 80114fc:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 80114fe:	687b      	ldr	r3, [r7, #4]
	}
 8011500:	4618      	mov	r0, r3
 8011502:	370c      	adds	r7, #12
 8011504:	46bd      	mov	sp, r7
 8011506:	f85d 7b04 	ldr.w	r7, [sp], #4
 801150a:	4770      	bx	lr
 801150c:	200060cc 	.word	0x200060cc
 8011510:	200060e8 	.word	0x200060e8

08011514 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8011514:	b580      	push	{r7, lr}
 8011516:	b084      	sub	sp, #16
 8011518:	af00      	add	r7, sp, #0
 801151a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 801151c:	687b      	ldr	r3, [r7, #4]
 801151e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8011520:	2300      	movs	r3, #0
 8011522:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8011524:	687b      	ldr	r3, [r7, #4]
 8011526:	2b00      	cmp	r3, #0
 8011528:	d069      	beq.n	80115fe <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 801152a:	68bb      	ldr	r3, [r7, #8]
 801152c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801152e:	4b36      	ldr	r3, [pc, #216]	; (8011608 <xTaskPriorityInherit+0xf4>)
 8011530:	681b      	ldr	r3, [r3, #0]
 8011532:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011534:	429a      	cmp	r2, r3
 8011536:	d259      	bcs.n	80115ec <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8011538:	68bb      	ldr	r3, [r7, #8]
 801153a:	699b      	ldr	r3, [r3, #24]
 801153c:	2b00      	cmp	r3, #0
 801153e:	db06      	blt.n	801154e <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8011540:	4b31      	ldr	r3, [pc, #196]	; (8011608 <xTaskPriorityInherit+0xf4>)
 8011542:	681b      	ldr	r3, [r3, #0]
 8011544:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011546:	f1c3 0207 	rsb	r2, r3, #7
 801154a:	68bb      	ldr	r3, [r7, #8]
 801154c:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 801154e:	68bb      	ldr	r3, [r7, #8]
 8011550:	6959      	ldr	r1, [r3, #20]
 8011552:	68bb      	ldr	r3, [r7, #8]
 8011554:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011556:	4613      	mov	r3, r2
 8011558:	009b      	lsls	r3, r3, #2
 801155a:	4413      	add	r3, r2
 801155c:	009b      	lsls	r3, r3, #2
 801155e:	4a2b      	ldr	r2, [pc, #172]	; (801160c <xTaskPriorityInherit+0xf8>)
 8011560:	4413      	add	r3, r2
 8011562:	4299      	cmp	r1, r3
 8011564:	d13a      	bne.n	80115dc <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011566:	68bb      	ldr	r3, [r7, #8]
 8011568:	3304      	adds	r3, #4
 801156a:	4618      	mov	r0, r3
 801156c:	f7fe f94a 	bl	800f804 <uxListRemove>
 8011570:	4603      	mov	r3, r0
 8011572:	2b00      	cmp	r3, #0
 8011574:	d115      	bne.n	80115a2 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8011576:	68bb      	ldr	r3, [r7, #8]
 8011578:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801157a:	4924      	ldr	r1, [pc, #144]	; (801160c <xTaskPriorityInherit+0xf8>)
 801157c:	4613      	mov	r3, r2
 801157e:	009b      	lsls	r3, r3, #2
 8011580:	4413      	add	r3, r2
 8011582:	009b      	lsls	r3, r3, #2
 8011584:	440b      	add	r3, r1
 8011586:	681b      	ldr	r3, [r3, #0]
 8011588:	2b00      	cmp	r3, #0
 801158a:	d10a      	bne.n	80115a2 <xTaskPriorityInherit+0x8e>
 801158c:	68bb      	ldr	r3, [r7, #8]
 801158e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011590:	2201      	movs	r2, #1
 8011592:	fa02 f303 	lsl.w	r3, r2, r3
 8011596:	43da      	mvns	r2, r3
 8011598:	4b1d      	ldr	r3, [pc, #116]	; (8011610 <xTaskPriorityInherit+0xfc>)
 801159a:	681b      	ldr	r3, [r3, #0]
 801159c:	4013      	ands	r3, r2
 801159e:	4a1c      	ldr	r2, [pc, #112]	; (8011610 <xTaskPriorityInherit+0xfc>)
 80115a0:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80115a2:	4b19      	ldr	r3, [pc, #100]	; (8011608 <xTaskPriorityInherit+0xf4>)
 80115a4:	681b      	ldr	r3, [r3, #0]
 80115a6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115a8:	68bb      	ldr	r3, [r7, #8]
 80115aa:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80115ac:	68bb      	ldr	r3, [r7, #8]
 80115ae:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115b0:	2201      	movs	r2, #1
 80115b2:	409a      	lsls	r2, r3
 80115b4:	4b16      	ldr	r3, [pc, #88]	; (8011610 <xTaskPriorityInherit+0xfc>)
 80115b6:	681b      	ldr	r3, [r3, #0]
 80115b8:	4313      	orrs	r3, r2
 80115ba:	4a15      	ldr	r2, [pc, #84]	; (8011610 <xTaskPriorityInherit+0xfc>)
 80115bc:	6013      	str	r3, [r2, #0]
 80115be:	68bb      	ldr	r3, [r7, #8]
 80115c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115c2:	4613      	mov	r3, r2
 80115c4:	009b      	lsls	r3, r3, #2
 80115c6:	4413      	add	r3, r2
 80115c8:	009b      	lsls	r3, r3, #2
 80115ca:	4a10      	ldr	r2, [pc, #64]	; (801160c <xTaskPriorityInherit+0xf8>)
 80115cc:	441a      	add	r2, r3
 80115ce:	68bb      	ldr	r3, [r7, #8]
 80115d0:	3304      	adds	r3, #4
 80115d2:	4619      	mov	r1, r3
 80115d4:	4610      	mov	r0, r2
 80115d6:	f7fe f8b8 	bl	800f74a <vListInsertEnd>
 80115da:	e004      	b.n	80115e6 <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80115dc:	4b0a      	ldr	r3, [pc, #40]	; (8011608 <xTaskPriorityInherit+0xf4>)
 80115de:	681b      	ldr	r3, [r3, #0]
 80115e0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80115e2:	68bb      	ldr	r3, [r7, #8]
 80115e4:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 80115e6:	2301      	movs	r3, #1
 80115e8:	60fb      	str	r3, [r7, #12]
 80115ea:	e008      	b.n	80115fe <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 80115ec:	68bb      	ldr	r3, [r7, #8]
 80115ee:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80115f0:	4b05      	ldr	r3, [pc, #20]	; (8011608 <xTaskPriorityInherit+0xf4>)
 80115f2:	681b      	ldr	r3, [r3, #0]
 80115f4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80115f6:	429a      	cmp	r2, r3
 80115f8:	d201      	bcs.n	80115fe <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 80115fa:	2301      	movs	r3, #1
 80115fc:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 80115fe:	68fb      	ldr	r3, [r7, #12]
	}
 8011600:	4618      	mov	r0, r3
 8011602:	3710      	adds	r7, #16
 8011604:	46bd      	mov	sp, r7
 8011606:	bd80      	pop	{r7, pc}
 8011608:	20005fc0 	.word	0x20005fc0
 801160c:	20005fc4 	.word	0x20005fc4
 8011610:	200060c8 	.word	0x200060c8

08011614 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8011614:	b580      	push	{r7, lr}
 8011616:	b086      	sub	sp, #24
 8011618:	af00      	add	r7, sp, #0
 801161a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 801161c:	687b      	ldr	r3, [r7, #4]
 801161e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8011620:	2300      	movs	r3, #0
 8011622:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d072      	beq.n	8011710 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 801162a:	4b3c      	ldr	r3, [pc, #240]	; (801171c <xTaskPriorityDisinherit+0x108>)
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	693a      	ldr	r2, [r7, #16]
 8011630:	429a      	cmp	r2, r3
 8011632:	d00c      	beq.n	801164e <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8011634:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011638:	b672      	cpsid	i
 801163a:	f383 8811 	msr	BASEPRI, r3
 801163e:	f3bf 8f6f 	isb	sy
 8011642:	f3bf 8f4f 	dsb	sy
 8011646:	b662      	cpsie	i
 8011648:	60fb      	str	r3, [r7, #12]
}
 801164a:	bf00      	nop
 801164c:	e7fe      	b.n	801164c <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 801164e:	693b      	ldr	r3, [r7, #16]
 8011650:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011652:	2b00      	cmp	r3, #0
 8011654:	d10c      	bne.n	8011670 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8011656:	f04f 0350 	mov.w	r3, #80	; 0x50
 801165a:	b672      	cpsid	i
 801165c:	f383 8811 	msr	BASEPRI, r3
 8011660:	f3bf 8f6f 	isb	sy
 8011664:	f3bf 8f4f 	dsb	sy
 8011668:	b662      	cpsie	i
 801166a:	60bb      	str	r3, [r7, #8]
}
 801166c:	bf00      	nop
 801166e:	e7fe      	b.n	801166e <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8011670:	693b      	ldr	r3, [r7, #16]
 8011672:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011674:	1e5a      	subs	r2, r3, #1
 8011676:	693b      	ldr	r3, [r7, #16]
 8011678:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 801167a:	693b      	ldr	r3, [r7, #16]
 801167c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801167e:	693b      	ldr	r3, [r7, #16]
 8011680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011682:	429a      	cmp	r2, r3
 8011684:	d044      	beq.n	8011710 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8011686:	693b      	ldr	r3, [r7, #16]
 8011688:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801168a:	2b00      	cmp	r3, #0
 801168c:	d140      	bne.n	8011710 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801168e:	693b      	ldr	r3, [r7, #16]
 8011690:	3304      	adds	r3, #4
 8011692:	4618      	mov	r0, r3
 8011694:	f7fe f8b6 	bl	800f804 <uxListRemove>
 8011698:	4603      	mov	r3, r0
 801169a:	2b00      	cmp	r3, #0
 801169c:	d115      	bne.n	80116ca <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 801169e:	693b      	ldr	r3, [r7, #16]
 80116a0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116a2:	491f      	ldr	r1, [pc, #124]	; (8011720 <xTaskPriorityDisinherit+0x10c>)
 80116a4:	4613      	mov	r3, r2
 80116a6:	009b      	lsls	r3, r3, #2
 80116a8:	4413      	add	r3, r2
 80116aa:	009b      	lsls	r3, r3, #2
 80116ac:	440b      	add	r3, r1
 80116ae:	681b      	ldr	r3, [r3, #0]
 80116b0:	2b00      	cmp	r3, #0
 80116b2:	d10a      	bne.n	80116ca <xTaskPriorityDisinherit+0xb6>
 80116b4:	693b      	ldr	r3, [r7, #16]
 80116b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116b8:	2201      	movs	r2, #1
 80116ba:	fa02 f303 	lsl.w	r3, r2, r3
 80116be:	43da      	mvns	r2, r3
 80116c0:	4b18      	ldr	r3, [pc, #96]	; (8011724 <xTaskPriorityDisinherit+0x110>)
 80116c2:	681b      	ldr	r3, [r3, #0]
 80116c4:	4013      	ands	r3, r2
 80116c6:	4a17      	ldr	r2, [pc, #92]	; (8011724 <xTaskPriorityDisinherit+0x110>)
 80116c8:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80116ca:	693b      	ldr	r3, [r7, #16]
 80116cc:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80116ce:	693b      	ldr	r3, [r7, #16]
 80116d0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80116d2:	693b      	ldr	r3, [r7, #16]
 80116d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116d6:	f1c3 0207 	rsb	r2, r3, #7
 80116da:	693b      	ldr	r3, [r7, #16]
 80116dc:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80116de:	693b      	ldr	r3, [r7, #16]
 80116e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80116e2:	2201      	movs	r2, #1
 80116e4:	409a      	lsls	r2, r3
 80116e6:	4b0f      	ldr	r3, [pc, #60]	; (8011724 <xTaskPriorityDisinherit+0x110>)
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	4313      	orrs	r3, r2
 80116ec:	4a0d      	ldr	r2, [pc, #52]	; (8011724 <xTaskPriorityDisinherit+0x110>)
 80116ee:	6013      	str	r3, [r2, #0]
 80116f0:	693b      	ldr	r3, [r7, #16]
 80116f2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80116f4:	4613      	mov	r3, r2
 80116f6:	009b      	lsls	r3, r3, #2
 80116f8:	4413      	add	r3, r2
 80116fa:	009b      	lsls	r3, r3, #2
 80116fc:	4a08      	ldr	r2, [pc, #32]	; (8011720 <xTaskPriorityDisinherit+0x10c>)
 80116fe:	441a      	add	r2, r3
 8011700:	693b      	ldr	r3, [r7, #16]
 8011702:	3304      	adds	r3, #4
 8011704:	4619      	mov	r1, r3
 8011706:	4610      	mov	r0, r2
 8011708:	f7fe f81f 	bl	800f74a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 801170c:	2301      	movs	r3, #1
 801170e:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8011710:	697b      	ldr	r3, [r7, #20]
	}
 8011712:	4618      	mov	r0, r3
 8011714:	3718      	adds	r7, #24
 8011716:	46bd      	mov	sp, r7
 8011718:	bd80      	pop	{r7, pc}
 801171a:	bf00      	nop
 801171c:	20005fc0 	.word	0x20005fc0
 8011720:	20005fc4 	.word	0x20005fc4
 8011724:	200060c8 	.word	0x200060c8

08011728 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8011728:	b580      	push	{r7, lr}
 801172a:	b088      	sub	sp, #32
 801172c:	af00      	add	r7, sp, #0
 801172e:	6078      	str	r0, [r7, #4]
 8011730:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8011732:	687b      	ldr	r3, [r7, #4]
 8011734:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8011736:	2301      	movs	r3, #1
 8011738:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 801173a:	687b      	ldr	r3, [r7, #4]
 801173c:	2b00      	cmp	r3, #0
 801173e:	f000 8087 	beq.w	8011850 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8011742:	69bb      	ldr	r3, [r7, #24]
 8011744:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011746:	2b00      	cmp	r3, #0
 8011748:	d10c      	bne.n	8011764 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 801174a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801174e:	b672      	cpsid	i
 8011750:	f383 8811 	msr	BASEPRI, r3
 8011754:	f3bf 8f6f 	isb	sy
 8011758:	f3bf 8f4f 	dsb	sy
 801175c:	b662      	cpsie	i
 801175e:	60fb      	str	r3, [r7, #12]
}
 8011760:	bf00      	nop
 8011762:	e7fe      	b.n	8011762 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8011764:	69bb      	ldr	r3, [r7, #24]
 8011766:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011768:	683a      	ldr	r2, [r7, #0]
 801176a:	429a      	cmp	r2, r3
 801176c:	d902      	bls.n	8011774 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 801176e:	683b      	ldr	r3, [r7, #0]
 8011770:	61fb      	str	r3, [r7, #28]
 8011772:	e002      	b.n	801177a <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8011774:	69bb      	ldr	r3, [r7, #24]
 8011776:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8011778:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 801177a:	69bb      	ldr	r3, [r7, #24]
 801177c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801177e:	69fa      	ldr	r2, [r7, #28]
 8011780:	429a      	cmp	r2, r3
 8011782:	d065      	beq.n	8011850 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8011784:	69bb      	ldr	r3, [r7, #24]
 8011786:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8011788:	697a      	ldr	r2, [r7, #20]
 801178a:	429a      	cmp	r2, r3
 801178c:	d160      	bne.n	8011850 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 801178e:	4b32      	ldr	r3, [pc, #200]	; (8011858 <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8011790:	681b      	ldr	r3, [r3, #0]
 8011792:	69ba      	ldr	r2, [r7, #24]
 8011794:	429a      	cmp	r2, r3
 8011796:	d10c      	bne.n	80117b2 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8011798:	f04f 0350 	mov.w	r3, #80	; 0x50
 801179c:	b672      	cpsid	i
 801179e:	f383 8811 	msr	BASEPRI, r3
 80117a2:	f3bf 8f6f 	isb	sy
 80117a6:	f3bf 8f4f 	dsb	sy
 80117aa:	b662      	cpsie	i
 80117ac:	60bb      	str	r3, [r7, #8]
}
 80117ae:	bf00      	nop
 80117b0:	e7fe      	b.n	80117b0 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80117b2:	69bb      	ldr	r3, [r7, #24]
 80117b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80117b6:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80117b8:	69bb      	ldr	r3, [r7, #24]
 80117ba:	69fa      	ldr	r2, [r7, #28]
 80117bc:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80117be:	69bb      	ldr	r3, [r7, #24]
 80117c0:	699b      	ldr	r3, [r3, #24]
 80117c2:	2b00      	cmp	r3, #0
 80117c4:	db04      	blt.n	80117d0 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80117c6:	69fb      	ldr	r3, [r7, #28]
 80117c8:	f1c3 0207 	rsb	r2, r3, #7
 80117cc:	69bb      	ldr	r3, [r7, #24]
 80117ce:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80117d0:	69bb      	ldr	r3, [r7, #24]
 80117d2:	6959      	ldr	r1, [r3, #20]
 80117d4:	693a      	ldr	r2, [r7, #16]
 80117d6:	4613      	mov	r3, r2
 80117d8:	009b      	lsls	r3, r3, #2
 80117da:	4413      	add	r3, r2
 80117dc:	009b      	lsls	r3, r3, #2
 80117de:	4a1f      	ldr	r2, [pc, #124]	; (801185c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80117e0:	4413      	add	r3, r2
 80117e2:	4299      	cmp	r1, r3
 80117e4:	d134      	bne.n	8011850 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80117e6:	69bb      	ldr	r3, [r7, #24]
 80117e8:	3304      	adds	r3, #4
 80117ea:	4618      	mov	r0, r3
 80117ec:	f7fe f80a 	bl	800f804 <uxListRemove>
 80117f0:	4603      	mov	r3, r0
 80117f2:	2b00      	cmp	r3, #0
 80117f4:	d115      	bne.n	8011822 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80117f6:	69bb      	ldr	r3, [r7, #24]
 80117f8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80117fa:	4918      	ldr	r1, [pc, #96]	; (801185c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 80117fc:	4613      	mov	r3, r2
 80117fe:	009b      	lsls	r3, r3, #2
 8011800:	4413      	add	r3, r2
 8011802:	009b      	lsls	r3, r3, #2
 8011804:	440b      	add	r3, r1
 8011806:	681b      	ldr	r3, [r3, #0]
 8011808:	2b00      	cmp	r3, #0
 801180a:	d10a      	bne.n	8011822 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 801180c:	69bb      	ldr	r3, [r7, #24]
 801180e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011810:	2201      	movs	r2, #1
 8011812:	fa02 f303 	lsl.w	r3, r2, r3
 8011816:	43da      	mvns	r2, r3
 8011818:	4b11      	ldr	r3, [pc, #68]	; (8011860 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801181a:	681b      	ldr	r3, [r3, #0]
 801181c:	4013      	ands	r3, r2
 801181e:	4a10      	ldr	r2, [pc, #64]	; (8011860 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8011820:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011822:	69bb      	ldr	r3, [r7, #24]
 8011824:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011826:	2201      	movs	r2, #1
 8011828:	409a      	lsls	r2, r3
 801182a:	4b0d      	ldr	r3, [pc, #52]	; (8011860 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 801182c:	681b      	ldr	r3, [r3, #0]
 801182e:	4313      	orrs	r3, r2
 8011830:	4a0b      	ldr	r2, [pc, #44]	; (8011860 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8011832:	6013      	str	r3, [r2, #0]
 8011834:	69bb      	ldr	r3, [r7, #24]
 8011836:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8011838:	4613      	mov	r3, r2
 801183a:	009b      	lsls	r3, r3, #2
 801183c:	4413      	add	r3, r2
 801183e:	009b      	lsls	r3, r3, #2
 8011840:	4a06      	ldr	r2, [pc, #24]	; (801185c <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8011842:	441a      	add	r2, r3
 8011844:	69bb      	ldr	r3, [r7, #24]
 8011846:	3304      	adds	r3, #4
 8011848:	4619      	mov	r1, r3
 801184a:	4610      	mov	r0, r2
 801184c:	f7fd ff7d 	bl	800f74a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011850:	bf00      	nop
 8011852:	3720      	adds	r7, #32
 8011854:	46bd      	mov	sp, r7
 8011856:	bd80      	pop	{r7, pc}
 8011858:	20005fc0 	.word	0x20005fc0
 801185c:	20005fc4 	.word	0x20005fc4
 8011860:	200060c8 	.word	0x200060c8

08011864 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011864:	b480      	push	{r7}
 8011866:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8011868:	4b07      	ldr	r3, [pc, #28]	; (8011888 <pvTaskIncrementMutexHeldCount+0x24>)
 801186a:	681b      	ldr	r3, [r3, #0]
 801186c:	2b00      	cmp	r3, #0
 801186e:	d004      	beq.n	801187a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011870:	4b05      	ldr	r3, [pc, #20]	; (8011888 <pvTaskIncrementMutexHeldCount+0x24>)
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 8011876:	3201      	adds	r2, #1
 8011878:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 801187a:	4b03      	ldr	r3, [pc, #12]	; (8011888 <pvTaskIncrementMutexHeldCount+0x24>)
 801187c:	681b      	ldr	r3, [r3, #0]
	}
 801187e:	4618      	mov	r0, r3
 8011880:	46bd      	mov	sp, r7
 8011882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011886:	4770      	bx	lr
 8011888:	20005fc0 	.word	0x20005fc0

0801188c <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 801188c:	b580      	push	{r7, lr}
 801188e:	b084      	sub	sp, #16
 8011890:	af00      	add	r7, sp, #0
 8011892:	6078      	str	r0, [r7, #4]
 8011894:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8011896:	4b29      	ldr	r3, [pc, #164]	; (801193c <prvAddCurrentTaskToDelayedList+0xb0>)
 8011898:	681b      	ldr	r3, [r3, #0]
 801189a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 801189c:	4b28      	ldr	r3, [pc, #160]	; (8011940 <prvAddCurrentTaskToDelayedList+0xb4>)
 801189e:	681b      	ldr	r3, [r3, #0]
 80118a0:	3304      	adds	r3, #4
 80118a2:	4618      	mov	r0, r3
 80118a4:	f7fd ffae 	bl	800f804 <uxListRemove>
 80118a8:	4603      	mov	r3, r0
 80118aa:	2b00      	cmp	r3, #0
 80118ac:	d10b      	bne.n	80118c6 <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 80118ae:	4b24      	ldr	r3, [pc, #144]	; (8011940 <prvAddCurrentTaskToDelayedList+0xb4>)
 80118b0:	681b      	ldr	r3, [r3, #0]
 80118b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80118b4:	2201      	movs	r2, #1
 80118b6:	fa02 f303 	lsl.w	r3, r2, r3
 80118ba:	43da      	mvns	r2, r3
 80118bc:	4b21      	ldr	r3, [pc, #132]	; (8011944 <prvAddCurrentTaskToDelayedList+0xb8>)
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	4013      	ands	r3, r2
 80118c2:	4a20      	ldr	r2, [pc, #128]	; (8011944 <prvAddCurrentTaskToDelayedList+0xb8>)
 80118c4:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80118c6:	687b      	ldr	r3, [r7, #4]
 80118c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80118cc:	d10a      	bne.n	80118e4 <prvAddCurrentTaskToDelayedList+0x58>
 80118ce:	683b      	ldr	r3, [r7, #0]
 80118d0:	2b00      	cmp	r3, #0
 80118d2:	d007      	beq.n	80118e4 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80118d4:	4b1a      	ldr	r3, [pc, #104]	; (8011940 <prvAddCurrentTaskToDelayedList+0xb4>)
 80118d6:	681b      	ldr	r3, [r3, #0]
 80118d8:	3304      	adds	r3, #4
 80118da:	4619      	mov	r1, r3
 80118dc:	481a      	ldr	r0, [pc, #104]	; (8011948 <prvAddCurrentTaskToDelayedList+0xbc>)
 80118de:	f7fd ff34 	bl	800f74a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80118e2:	e026      	b.n	8011932 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80118e4:	68fa      	ldr	r2, [r7, #12]
 80118e6:	687b      	ldr	r3, [r7, #4]
 80118e8:	4413      	add	r3, r2
 80118ea:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80118ec:	4b14      	ldr	r3, [pc, #80]	; (8011940 <prvAddCurrentTaskToDelayedList+0xb4>)
 80118ee:	681b      	ldr	r3, [r3, #0]
 80118f0:	68ba      	ldr	r2, [r7, #8]
 80118f2:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80118f4:	68ba      	ldr	r2, [r7, #8]
 80118f6:	68fb      	ldr	r3, [r7, #12]
 80118f8:	429a      	cmp	r2, r3
 80118fa:	d209      	bcs.n	8011910 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80118fc:	4b13      	ldr	r3, [pc, #76]	; (801194c <prvAddCurrentTaskToDelayedList+0xc0>)
 80118fe:	681a      	ldr	r2, [r3, #0]
 8011900:	4b0f      	ldr	r3, [pc, #60]	; (8011940 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011902:	681b      	ldr	r3, [r3, #0]
 8011904:	3304      	adds	r3, #4
 8011906:	4619      	mov	r1, r3
 8011908:	4610      	mov	r0, r2
 801190a:	f7fd ff42 	bl	800f792 <vListInsert>
}
 801190e:	e010      	b.n	8011932 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8011910:	4b0f      	ldr	r3, [pc, #60]	; (8011950 <prvAddCurrentTaskToDelayedList+0xc4>)
 8011912:	681a      	ldr	r2, [r3, #0]
 8011914:	4b0a      	ldr	r3, [pc, #40]	; (8011940 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011916:	681b      	ldr	r3, [r3, #0]
 8011918:	3304      	adds	r3, #4
 801191a:	4619      	mov	r1, r3
 801191c:	4610      	mov	r0, r2
 801191e:	f7fd ff38 	bl	800f792 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011922:	4b0c      	ldr	r3, [pc, #48]	; (8011954 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011924:	681b      	ldr	r3, [r3, #0]
 8011926:	68ba      	ldr	r2, [r7, #8]
 8011928:	429a      	cmp	r2, r3
 801192a:	d202      	bcs.n	8011932 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 801192c:	4a09      	ldr	r2, [pc, #36]	; (8011954 <prvAddCurrentTaskToDelayedList+0xc8>)
 801192e:	68bb      	ldr	r3, [r7, #8]
 8011930:	6013      	str	r3, [r2, #0]
}
 8011932:	bf00      	nop
 8011934:	3710      	adds	r7, #16
 8011936:	46bd      	mov	sp, r7
 8011938:	bd80      	pop	{r7, pc}
 801193a:	bf00      	nop
 801193c:	200060c4 	.word	0x200060c4
 8011940:	20005fc0 	.word	0x20005fc0
 8011944:	200060c8 	.word	0x200060c8
 8011948:	200060ac 	.word	0x200060ac
 801194c:	2000607c 	.word	0x2000607c
 8011950:	20006078 	.word	0x20006078
 8011954:	200060e0 	.word	0x200060e0

08011958 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8011958:	b480      	push	{r7}
 801195a:	b085      	sub	sp, #20
 801195c:	af00      	add	r7, sp, #0
 801195e:	60f8      	str	r0, [r7, #12]
 8011960:	60b9      	str	r1, [r7, #8]
 8011962:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	3b04      	subs	r3, #4
 8011968:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801196a:	68fb      	ldr	r3, [r7, #12]
 801196c:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011970:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011972:	68fb      	ldr	r3, [r7, #12]
 8011974:	3b04      	subs	r3, #4
 8011976:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8011978:	68bb      	ldr	r3, [r7, #8]
 801197a:	f023 0201 	bic.w	r2, r3, #1
 801197e:	68fb      	ldr	r3, [r7, #12]
 8011980:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011982:	68fb      	ldr	r3, [r7, #12]
 8011984:	3b04      	subs	r3, #4
 8011986:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8011988:	4a0c      	ldr	r2, [pc, #48]	; (80119bc <pxPortInitialiseStack+0x64>)
 801198a:	68fb      	ldr	r3, [r7, #12]
 801198c:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 801198e:	68fb      	ldr	r3, [r7, #12]
 8011990:	3b14      	subs	r3, #20
 8011992:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011994:	687a      	ldr	r2, [r7, #4]
 8011996:	68fb      	ldr	r3, [r7, #12]
 8011998:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801199a:	68fb      	ldr	r3, [r7, #12]
 801199c:	3b04      	subs	r3, #4
 801199e:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 80119a0:	68fb      	ldr	r3, [r7, #12]
 80119a2:	f06f 0202 	mvn.w	r2, #2
 80119a6:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 80119a8:	68fb      	ldr	r3, [r7, #12]
 80119aa:	3b20      	subs	r3, #32
 80119ac:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 80119ae:	68fb      	ldr	r3, [r7, #12]
}
 80119b0:	4618      	mov	r0, r3
 80119b2:	3714      	adds	r7, #20
 80119b4:	46bd      	mov	sp, r7
 80119b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80119ba:	4770      	bx	lr
 80119bc:	080119c1 	.word	0x080119c1

080119c0 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80119c0:	b480      	push	{r7}
 80119c2:	b085      	sub	sp, #20
 80119c4:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80119c6:	2300      	movs	r3, #0
 80119c8:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80119ca:	4b14      	ldr	r3, [pc, #80]	; (8011a1c <prvTaskExitError+0x5c>)
 80119cc:	681b      	ldr	r3, [r3, #0]
 80119ce:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119d2:	d00c      	beq.n	80119ee <prvTaskExitError+0x2e>
	__asm volatile
 80119d4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119d8:	b672      	cpsid	i
 80119da:	f383 8811 	msr	BASEPRI, r3
 80119de:	f3bf 8f6f 	isb	sy
 80119e2:	f3bf 8f4f 	dsb	sy
 80119e6:	b662      	cpsie	i
 80119e8:	60fb      	str	r3, [r7, #12]
}
 80119ea:	bf00      	nop
 80119ec:	e7fe      	b.n	80119ec <prvTaskExitError+0x2c>
	__asm volatile
 80119ee:	f04f 0350 	mov.w	r3, #80	; 0x50
 80119f2:	b672      	cpsid	i
 80119f4:	f383 8811 	msr	BASEPRI, r3
 80119f8:	f3bf 8f6f 	isb	sy
 80119fc:	f3bf 8f4f 	dsb	sy
 8011a00:	b662      	cpsie	i
 8011a02:	60bb      	str	r3, [r7, #8]
}
 8011a04:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8011a06:	bf00      	nop
 8011a08:	687b      	ldr	r3, [r7, #4]
 8011a0a:	2b00      	cmp	r3, #0
 8011a0c:	d0fc      	beq.n	8011a08 <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8011a0e:	bf00      	nop
 8011a10:	bf00      	nop
 8011a12:	3714      	adds	r7, #20
 8011a14:	46bd      	mov	sp, r7
 8011a16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a1a:	4770      	bx	lr
 8011a1c:	20000020 	.word	0x20000020

08011a20 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011a20:	4b07      	ldr	r3, [pc, #28]	; (8011a40 <pxCurrentTCBConst2>)
 8011a22:	6819      	ldr	r1, [r3, #0]
 8011a24:	6808      	ldr	r0, [r1, #0]
 8011a26:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011a2a:	f380 8809 	msr	PSP, r0
 8011a2e:	f3bf 8f6f 	isb	sy
 8011a32:	f04f 0000 	mov.w	r0, #0
 8011a36:	f380 8811 	msr	BASEPRI, r0
 8011a3a:	4770      	bx	lr
 8011a3c:	f3af 8000 	nop.w

08011a40 <pxCurrentTCBConst2>:
 8011a40:	20005fc0 	.word	0x20005fc0
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011a44:	bf00      	nop
 8011a46:	bf00      	nop

08011a48 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011a48:	4808      	ldr	r0, [pc, #32]	; (8011a6c <prvPortStartFirstTask+0x24>)
 8011a4a:	6800      	ldr	r0, [r0, #0]
 8011a4c:	6800      	ldr	r0, [r0, #0]
 8011a4e:	f380 8808 	msr	MSP, r0
 8011a52:	f04f 0000 	mov.w	r0, #0
 8011a56:	f380 8814 	msr	CONTROL, r0
 8011a5a:	b662      	cpsie	i
 8011a5c:	b661      	cpsie	f
 8011a5e:	f3bf 8f4f 	dsb	sy
 8011a62:	f3bf 8f6f 	isb	sy
 8011a66:	df00      	svc	0
 8011a68:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8011a6a:	bf00      	nop
 8011a6c:	e000ed08 	.word	0xe000ed08

08011a70 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011a70:	b580      	push	{r7, lr}
 8011a72:	b084      	sub	sp, #16
 8011a74:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011a76:	4b37      	ldr	r3, [pc, #220]	; (8011b54 <xPortStartScheduler+0xe4>)
 8011a78:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8011a7a:	68fb      	ldr	r3, [r7, #12]
 8011a7c:	781b      	ldrb	r3, [r3, #0]
 8011a7e:	b2db      	uxtb	r3, r3
 8011a80:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011a82:	68fb      	ldr	r3, [r7, #12]
 8011a84:	22ff      	movs	r2, #255	; 0xff
 8011a86:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011a88:	68fb      	ldr	r3, [r7, #12]
 8011a8a:	781b      	ldrb	r3, [r3, #0]
 8011a8c:	b2db      	uxtb	r3, r3
 8011a8e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011a90:	78fb      	ldrb	r3, [r7, #3]
 8011a92:	b2db      	uxtb	r3, r3
 8011a94:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011a98:	b2da      	uxtb	r2, r3
 8011a9a:	4b2f      	ldr	r3, [pc, #188]	; (8011b58 <xPortStartScheduler+0xe8>)
 8011a9c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8011a9e:	4b2f      	ldr	r3, [pc, #188]	; (8011b5c <xPortStartScheduler+0xec>)
 8011aa0:	2207      	movs	r2, #7
 8011aa2:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011aa4:	e009      	b.n	8011aba <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8011aa6:	4b2d      	ldr	r3, [pc, #180]	; (8011b5c <xPortStartScheduler+0xec>)
 8011aa8:	681b      	ldr	r3, [r3, #0]
 8011aaa:	3b01      	subs	r3, #1
 8011aac:	4a2b      	ldr	r2, [pc, #172]	; (8011b5c <xPortStartScheduler+0xec>)
 8011aae:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8011ab0:	78fb      	ldrb	r3, [r7, #3]
 8011ab2:	b2db      	uxtb	r3, r3
 8011ab4:	005b      	lsls	r3, r3, #1
 8011ab6:	b2db      	uxtb	r3, r3
 8011ab8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011aba:	78fb      	ldrb	r3, [r7, #3]
 8011abc:	b2db      	uxtb	r3, r3
 8011abe:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8011ac2:	2b80      	cmp	r3, #128	; 0x80
 8011ac4:	d0ef      	beq.n	8011aa6 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8011ac6:	4b25      	ldr	r3, [pc, #148]	; (8011b5c <xPortStartScheduler+0xec>)
 8011ac8:	681b      	ldr	r3, [r3, #0]
 8011aca:	f1c3 0307 	rsb	r3, r3, #7
 8011ace:	2b04      	cmp	r3, #4
 8011ad0:	d00c      	beq.n	8011aec <xPortStartScheduler+0x7c>
	__asm volatile
 8011ad2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ad6:	b672      	cpsid	i
 8011ad8:	f383 8811 	msr	BASEPRI, r3
 8011adc:	f3bf 8f6f 	isb	sy
 8011ae0:	f3bf 8f4f 	dsb	sy
 8011ae4:	b662      	cpsie	i
 8011ae6:	60bb      	str	r3, [r7, #8]
}
 8011ae8:	bf00      	nop
 8011aea:	e7fe      	b.n	8011aea <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8011aec:	4b1b      	ldr	r3, [pc, #108]	; (8011b5c <xPortStartScheduler+0xec>)
 8011aee:	681b      	ldr	r3, [r3, #0]
 8011af0:	021b      	lsls	r3, r3, #8
 8011af2:	4a1a      	ldr	r2, [pc, #104]	; (8011b5c <xPortStartScheduler+0xec>)
 8011af4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8011af6:	4b19      	ldr	r3, [pc, #100]	; (8011b5c <xPortStartScheduler+0xec>)
 8011af8:	681b      	ldr	r3, [r3, #0]
 8011afa:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8011afe:	4a17      	ldr	r2, [pc, #92]	; (8011b5c <xPortStartScheduler+0xec>)
 8011b00:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8011b02:	687b      	ldr	r3, [r7, #4]
 8011b04:	b2da      	uxtb	r2, r3
 8011b06:	68fb      	ldr	r3, [r7, #12]
 8011b08:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8011b0a:	4b15      	ldr	r3, [pc, #84]	; (8011b60 <xPortStartScheduler+0xf0>)
 8011b0c:	681b      	ldr	r3, [r3, #0]
 8011b0e:	4a14      	ldr	r2, [pc, #80]	; (8011b60 <xPortStartScheduler+0xf0>)
 8011b10:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011b14:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011b16:	4b12      	ldr	r3, [pc, #72]	; (8011b60 <xPortStartScheduler+0xf0>)
 8011b18:	681b      	ldr	r3, [r3, #0]
 8011b1a:	4a11      	ldr	r2, [pc, #68]	; (8011b60 <xPortStartScheduler+0xf0>)
 8011b1c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8011b20:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011b22:	f000 f8dd 	bl	8011ce0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011b26:	4b0f      	ldr	r3, [pc, #60]	; (8011b64 <xPortStartScheduler+0xf4>)
 8011b28:	2200      	movs	r2, #0
 8011b2a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8011b2c:	f000 f8fc 	bl	8011d28 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011b30:	4b0d      	ldr	r3, [pc, #52]	; (8011b68 <xPortStartScheduler+0xf8>)
 8011b32:	681b      	ldr	r3, [r3, #0]
 8011b34:	4a0c      	ldr	r2, [pc, #48]	; (8011b68 <xPortStartScheduler+0xf8>)
 8011b36:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8011b3a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8011b3c:	f7ff ff84 	bl	8011a48 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011b40:	f7ff fa78 	bl	8011034 <vTaskSwitchContext>
	prvTaskExitError();
 8011b44:	f7ff ff3c 	bl	80119c0 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011b48:	2300      	movs	r3, #0
}
 8011b4a:	4618      	mov	r0, r3
 8011b4c:	3710      	adds	r7, #16
 8011b4e:	46bd      	mov	sp, r7
 8011b50:	bd80      	pop	{r7, pc}
 8011b52:	bf00      	nop
 8011b54:	e000e400 	.word	0xe000e400
 8011b58:	200060ec 	.word	0x200060ec
 8011b5c:	200060f0 	.word	0x200060f0
 8011b60:	e000ed20 	.word	0xe000ed20
 8011b64:	20000020 	.word	0x20000020
 8011b68:	e000ef34 	.word	0xe000ef34

08011b6c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8011b6c:	b480      	push	{r7}
 8011b6e:	b083      	sub	sp, #12
 8011b70:	af00      	add	r7, sp, #0
	__asm volatile
 8011b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011b76:	b672      	cpsid	i
 8011b78:	f383 8811 	msr	BASEPRI, r3
 8011b7c:	f3bf 8f6f 	isb	sy
 8011b80:	f3bf 8f4f 	dsb	sy
 8011b84:	b662      	cpsie	i
 8011b86:	607b      	str	r3, [r7, #4]
}
 8011b88:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 8011b8a:	4b10      	ldr	r3, [pc, #64]	; (8011bcc <vPortEnterCritical+0x60>)
 8011b8c:	681b      	ldr	r3, [r3, #0]
 8011b8e:	3301      	adds	r3, #1
 8011b90:	4a0e      	ldr	r2, [pc, #56]	; (8011bcc <vPortEnterCritical+0x60>)
 8011b92:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011b94:	4b0d      	ldr	r3, [pc, #52]	; (8011bcc <vPortEnterCritical+0x60>)
 8011b96:	681b      	ldr	r3, [r3, #0]
 8011b98:	2b01      	cmp	r3, #1
 8011b9a:	d111      	bne.n	8011bc0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8011b9c:	4b0c      	ldr	r3, [pc, #48]	; (8011bd0 <vPortEnterCritical+0x64>)
 8011b9e:	681b      	ldr	r3, [r3, #0]
 8011ba0:	b2db      	uxtb	r3, r3
 8011ba2:	2b00      	cmp	r3, #0
 8011ba4:	d00c      	beq.n	8011bc0 <vPortEnterCritical+0x54>
	__asm volatile
 8011ba6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011baa:	b672      	cpsid	i
 8011bac:	f383 8811 	msr	BASEPRI, r3
 8011bb0:	f3bf 8f6f 	isb	sy
 8011bb4:	f3bf 8f4f 	dsb	sy
 8011bb8:	b662      	cpsie	i
 8011bba:	603b      	str	r3, [r7, #0]
}
 8011bbc:	bf00      	nop
 8011bbe:	e7fe      	b.n	8011bbe <vPortEnterCritical+0x52>
	}
}
 8011bc0:	bf00      	nop
 8011bc2:	370c      	adds	r7, #12
 8011bc4:	46bd      	mov	sp, r7
 8011bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011bca:	4770      	bx	lr
 8011bcc:	20000020 	.word	0x20000020
 8011bd0:	e000ed04 	.word	0xe000ed04

08011bd4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8011bd4:	b480      	push	{r7}
 8011bd6:	b083      	sub	sp, #12
 8011bd8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 8011bda:	4b13      	ldr	r3, [pc, #76]	; (8011c28 <vPortExitCritical+0x54>)
 8011bdc:	681b      	ldr	r3, [r3, #0]
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d10c      	bne.n	8011bfc <vPortExitCritical+0x28>
	__asm volatile
 8011be2:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011be6:	b672      	cpsid	i
 8011be8:	f383 8811 	msr	BASEPRI, r3
 8011bec:	f3bf 8f6f 	isb	sy
 8011bf0:	f3bf 8f4f 	dsb	sy
 8011bf4:	b662      	cpsie	i
 8011bf6:	607b      	str	r3, [r7, #4]
}
 8011bf8:	bf00      	nop
 8011bfa:	e7fe      	b.n	8011bfa <vPortExitCritical+0x26>
	uxCriticalNesting--;
 8011bfc:	4b0a      	ldr	r3, [pc, #40]	; (8011c28 <vPortExitCritical+0x54>)
 8011bfe:	681b      	ldr	r3, [r3, #0]
 8011c00:	3b01      	subs	r3, #1
 8011c02:	4a09      	ldr	r2, [pc, #36]	; (8011c28 <vPortExitCritical+0x54>)
 8011c04:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8011c06:	4b08      	ldr	r3, [pc, #32]	; (8011c28 <vPortExitCritical+0x54>)
 8011c08:	681b      	ldr	r3, [r3, #0]
 8011c0a:	2b00      	cmp	r3, #0
 8011c0c:	d105      	bne.n	8011c1a <vPortExitCritical+0x46>
 8011c0e:	2300      	movs	r3, #0
 8011c10:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011c12:	683b      	ldr	r3, [r7, #0]
 8011c14:	f383 8811 	msr	BASEPRI, r3
}
 8011c18:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8011c1a:	bf00      	nop
 8011c1c:	370c      	adds	r7, #12
 8011c1e:	46bd      	mov	sp, r7
 8011c20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011c24:	4770      	bx	lr
 8011c26:	bf00      	nop
 8011c28:	20000020 	.word	0x20000020
 8011c2c:	00000000 	.word	0x00000000

08011c30 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011c30:	f3ef 8009 	mrs	r0, PSP
 8011c34:	f3bf 8f6f 	isb	sy
 8011c38:	4b15      	ldr	r3, [pc, #84]	; (8011c90 <pxCurrentTCBConst>)
 8011c3a:	681a      	ldr	r2, [r3, #0]
 8011c3c:	f01e 0f10 	tst.w	lr, #16
 8011c40:	bf08      	it	eq
 8011c42:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011c46:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c4a:	6010      	str	r0, [r2, #0]
 8011c4c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011c50:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011c54:	b672      	cpsid	i
 8011c56:	f380 8811 	msr	BASEPRI, r0
 8011c5a:	f3bf 8f4f 	dsb	sy
 8011c5e:	f3bf 8f6f 	isb	sy
 8011c62:	b662      	cpsie	i
 8011c64:	f7ff f9e6 	bl	8011034 <vTaskSwitchContext>
 8011c68:	f04f 0000 	mov.w	r0, #0
 8011c6c:	f380 8811 	msr	BASEPRI, r0
 8011c70:	bc09      	pop	{r0, r3}
 8011c72:	6819      	ldr	r1, [r3, #0]
 8011c74:	6808      	ldr	r0, [r1, #0]
 8011c76:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8011c7a:	f01e 0f10 	tst.w	lr, #16
 8011c7e:	bf08      	it	eq
 8011c80:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011c84:	f380 8809 	msr	PSP, r0
 8011c88:	f3bf 8f6f 	isb	sy
 8011c8c:	4770      	bx	lr
 8011c8e:	bf00      	nop

08011c90 <pxCurrentTCBConst>:
 8011c90:	20005fc0 	.word	0x20005fc0
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011c94:	bf00      	nop
 8011c96:	bf00      	nop

08011c98 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011c98:	b580      	push	{r7, lr}
 8011c9a:	b082      	sub	sp, #8
 8011c9c:	af00      	add	r7, sp, #0
	__asm volatile
 8011c9e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011ca2:	b672      	cpsid	i
 8011ca4:	f383 8811 	msr	BASEPRI, r3
 8011ca8:	f3bf 8f6f 	isb	sy
 8011cac:	f3bf 8f4f 	dsb	sy
 8011cb0:	b662      	cpsie	i
 8011cb2:	607b      	str	r3, [r7, #4]
}
 8011cb4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8011cb6:	f7ff f903 	bl	8010ec0 <xTaskIncrementTick>
 8011cba:	4603      	mov	r3, r0
 8011cbc:	2b00      	cmp	r3, #0
 8011cbe:	d003      	beq.n	8011cc8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 8011cc0:	4b06      	ldr	r3, [pc, #24]	; (8011cdc <SysTick_Handler+0x44>)
 8011cc2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8011cc6:	601a      	str	r2, [r3, #0]
 8011cc8:	2300      	movs	r3, #0
 8011cca:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011ccc:	683b      	ldr	r3, [r7, #0]
 8011cce:	f383 8811 	msr	BASEPRI, r3
}
 8011cd2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8011cd4:	bf00      	nop
 8011cd6:	3708      	adds	r7, #8
 8011cd8:	46bd      	mov	sp, r7
 8011cda:	bd80      	pop	{r7, pc}
 8011cdc:	e000ed04 	.word	0xe000ed04

08011ce0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 8011ce0:	b480      	push	{r7}
 8011ce2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8011ce4:	4b0b      	ldr	r3, [pc, #44]	; (8011d14 <vPortSetupTimerInterrupt+0x34>)
 8011ce6:	2200      	movs	r2, #0
 8011ce8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8011cea:	4b0b      	ldr	r3, [pc, #44]	; (8011d18 <vPortSetupTimerInterrupt+0x38>)
 8011cec:	2200      	movs	r2, #0
 8011cee:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 8011cf0:	4b0a      	ldr	r3, [pc, #40]	; (8011d1c <vPortSetupTimerInterrupt+0x3c>)
 8011cf2:	681b      	ldr	r3, [r3, #0]
 8011cf4:	4a0a      	ldr	r2, [pc, #40]	; (8011d20 <vPortSetupTimerInterrupt+0x40>)
 8011cf6:	fba2 2303 	umull	r2, r3, r2, r3
 8011cfa:	099b      	lsrs	r3, r3, #6
 8011cfc:	4a09      	ldr	r2, [pc, #36]	; (8011d24 <vPortSetupTimerInterrupt+0x44>)
 8011cfe:	3b01      	subs	r3, #1
 8011d00:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 8011d02:	4b04      	ldr	r3, [pc, #16]	; (8011d14 <vPortSetupTimerInterrupt+0x34>)
 8011d04:	2207      	movs	r2, #7
 8011d06:	601a      	str	r2, [r3, #0]
}
 8011d08:	bf00      	nop
 8011d0a:	46bd      	mov	sp, r7
 8011d0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d10:	4770      	bx	lr
 8011d12:	bf00      	nop
 8011d14:	e000e010 	.word	0xe000e010
 8011d18:	e000e018 	.word	0xe000e018
 8011d1c:	20000000 	.word	0x20000000
 8011d20:	10624dd3 	.word	0x10624dd3
 8011d24:	e000e014 	.word	0xe000e014

08011d28 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011d28:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011d38 <vPortEnableVFP+0x10>
 8011d2c:	6801      	ldr	r1, [r0, #0]
 8011d2e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8011d32:	6001      	str	r1, [r0, #0]
 8011d34:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011d36:	bf00      	nop
 8011d38:	e000ed88 	.word	0xe000ed88

08011d3c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 8011d3c:	b480      	push	{r7}
 8011d3e:	b085      	sub	sp, #20
 8011d40:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011d42:	f3ef 8305 	mrs	r3, IPSR
 8011d46:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011d48:	68fb      	ldr	r3, [r7, #12]
 8011d4a:	2b0f      	cmp	r3, #15
 8011d4c:	d916      	bls.n	8011d7c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 8011d4e:	4a19      	ldr	r2, [pc, #100]	; (8011db4 <vPortValidateInterruptPriority+0x78>)
 8011d50:	68fb      	ldr	r3, [r7, #12]
 8011d52:	4413      	add	r3, r2
 8011d54:	781b      	ldrb	r3, [r3, #0]
 8011d56:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011d58:	4b17      	ldr	r3, [pc, #92]	; (8011db8 <vPortValidateInterruptPriority+0x7c>)
 8011d5a:	781b      	ldrb	r3, [r3, #0]
 8011d5c:	7afa      	ldrb	r2, [r7, #11]
 8011d5e:	429a      	cmp	r2, r3
 8011d60:	d20c      	bcs.n	8011d7c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8011d62:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d66:	b672      	cpsid	i
 8011d68:	f383 8811 	msr	BASEPRI, r3
 8011d6c:	f3bf 8f6f 	isb	sy
 8011d70:	f3bf 8f4f 	dsb	sy
 8011d74:	b662      	cpsie	i
 8011d76:	607b      	str	r3, [r7, #4]
}
 8011d78:	bf00      	nop
 8011d7a:	e7fe      	b.n	8011d7a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 8011d7c:	4b0f      	ldr	r3, [pc, #60]	; (8011dbc <vPortValidateInterruptPriority+0x80>)
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011d84:	4b0e      	ldr	r3, [pc, #56]	; (8011dc0 <vPortValidateInterruptPriority+0x84>)
 8011d86:	681b      	ldr	r3, [r3, #0]
 8011d88:	429a      	cmp	r2, r3
 8011d8a:	d90c      	bls.n	8011da6 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 8011d8c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011d90:	b672      	cpsid	i
 8011d92:	f383 8811 	msr	BASEPRI, r3
 8011d96:	f3bf 8f6f 	isb	sy
 8011d9a:	f3bf 8f4f 	dsb	sy
 8011d9e:	b662      	cpsie	i
 8011da0:	603b      	str	r3, [r7, #0]
}
 8011da2:	bf00      	nop
 8011da4:	e7fe      	b.n	8011da4 <vPortValidateInterruptPriority+0x68>
	}
 8011da6:	bf00      	nop
 8011da8:	3714      	adds	r7, #20
 8011daa:	46bd      	mov	sp, r7
 8011dac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011db0:	4770      	bx	lr
 8011db2:	bf00      	nop
 8011db4:	e000e3f0 	.word	0xe000e3f0
 8011db8:	200060ec 	.word	0x200060ec
 8011dbc:	e000ed0c 	.word	0xe000ed0c
 8011dc0:	200060f0 	.word	0x200060f0

08011dc4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8011dc4:	b580      	push	{r7, lr}
 8011dc6:	b08a      	sub	sp, #40	; 0x28
 8011dc8:	af00      	add	r7, sp, #0
 8011dca:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8011dcc:	2300      	movs	r3, #0
 8011dce:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8011dd0:	f7fe ffa8 	bl	8010d24 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8011dd4:	4b5b      	ldr	r3, [pc, #364]	; (8011f44 <pvPortMalloc+0x180>)
 8011dd6:	681b      	ldr	r3, [r3, #0]
 8011dd8:	2b00      	cmp	r3, #0
 8011dda:	d101      	bne.n	8011de0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8011ddc:	f000 f91a 	bl	8012014 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8011de0:	4b59      	ldr	r3, [pc, #356]	; (8011f48 <pvPortMalloc+0x184>)
 8011de2:	681a      	ldr	r2, [r3, #0]
 8011de4:	687b      	ldr	r3, [r7, #4]
 8011de6:	4013      	ands	r3, r2
 8011de8:	2b00      	cmp	r3, #0
 8011dea:	f040 8092 	bne.w	8011f12 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8011dee:	687b      	ldr	r3, [r7, #4]
 8011df0:	2b00      	cmp	r3, #0
 8011df2:	d01f      	beq.n	8011e34 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 8011df4:	2208      	movs	r2, #8
 8011df6:	687b      	ldr	r3, [r7, #4]
 8011df8:	4413      	add	r3, r2
 8011dfa:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8011dfc:	687b      	ldr	r3, [r7, #4]
 8011dfe:	f003 0307 	and.w	r3, r3, #7
 8011e02:	2b00      	cmp	r3, #0
 8011e04:	d016      	beq.n	8011e34 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 8011e06:	687b      	ldr	r3, [r7, #4]
 8011e08:	f023 0307 	bic.w	r3, r3, #7
 8011e0c:	3308      	adds	r3, #8
 8011e0e:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011e10:	687b      	ldr	r3, [r7, #4]
 8011e12:	f003 0307 	and.w	r3, r3, #7
 8011e16:	2b00      	cmp	r3, #0
 8011e18:	d00c      	beq.n	8011e34 <pvPortMalloc+0x70>
	__asm volatile
 8011e1a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011e1e:	b672      	cpsid	i
 8011e20:	f383 8811 	msr	BASEPRI, r3
 8011e24:	f3bf 8f6f 	isb	sy
 8011e28:	f3bf 8f4f 	dsb	sy
 8011e2c:	b662      	cpsie	i
 8011e2e:	617b      	str	r3, [r7, #20]
}
 8011e30:	bf00      	nop
 8011e32:	e7fe      	b.n	8011e32 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011e34:	687b      	ldr	r3, [r7, #4]
 8011e36:	2b00      	cmp	r3, #0
 8011e38:	d06b      	beq.n	8011f12 <pvPortMalloc+0x14e>
 8011e3a:	4b44      	ldr	r3, [pc, #272]	; (8011f4c <pvPortMalloc+0x188>)
 8011e3c:	681b      	ldr	r3, [r3, #0]
 8011e3e:	687a      	ldr	r2, [r7, #4]
 8011e40:	429a      	cmp	r2, r3
 8011e42:	d866      	bhi.n	8011f12 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011e44:	4b42      	ldr	r3, [pc, #264]	; (8011f50 <pvPortMalloc+0x18c>)
 8011e46:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011e48:	4b41      	ldr	r3, [pc, #260]	; (8011f50 <pvPortMalloc+0x18c>)
 8011e4a:	681b      	ldr	r3, [r3, #0]
 8011e4c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011e4e:	e004      	b.n	8011e5a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8011e50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e52:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011e54:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e56:	681b      	ldr	r3, [r3, #0]
 8011e58:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 8011e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e5c:	685b      	ldr	r3, [r3, #4]
 8011e5e:	687a      	ldr	r2, [r7, #4]
 8011e60:	429a      	cmp	r2, r3
 8011e62:	d903      	bls.n	8011e6c <pvPortMalloc+0xa8>
 8011e64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e66:	681b      	ldr	r3, [r3, #0]
 8011e68:	2b00      	cmp	r3, #0
 8011e6a:	d1f1      	bne.n	8011e50 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 8011e6c:	4b35      	ldr	r3, [pc, #212]	; (8011f44 <pvPortMalloc+0x180>)
 8011e6e:	681b      	ldr	r3, [r3, #0]
 8011e70:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e72:	429a      	cmp	r2, r3
 8011e74:	d04d      	beq.n	8011f12 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011e76:	6a3b      	ldr	r3, [r7, #32]
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	2208      	movs	r2, #8
 8011e7c:	4413      	add	r3, r2
 8011e7e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011e80:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e82:	681a      	ldr	r2, [r3, #0]
 8011e84:	6a3b      	ldr	r3, [r7, #32]
 8011e86:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011e88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011e8a:	685a      	ldr	r2, [r3, #4]
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	1ad2      	subs	r2, r2, r3
 8011e90:	2308      	movs	r3, #8
 8011e92:	005b      	lsls	r3, r3, #1
 8011e94:	429a      	cmp	r2, r3
 8011e96:	d921      	bls.n	8011edc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011e98:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	4413      	add	r3, r2
 8011e9e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011ea0:	69bb      	ldr	r3, [r7, #24]
 8011ea2:	f003 0307 	and.w	r3, r3, #7
 8011ea6:	2b00      	cmp	r3, #0
 8011ea8:	d00c      	beq.n	8011ec4 <pvPortMalloc+0x100>
	__asm volatile
 8011eaa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011eae:	b672      	cpsid	i
 8011eb0:	f383 8811 	msr	BASEPRI, r3
 8011eb4:	f3bf 8f6f 	isb	sy
 8011eb8:	f3bf 8f4f 	dsb	sy
 8011ebc:	b662      	cpsie	i
 8011ebe:	613b      	str	r3, [r7, #16]
}
 8011ec0:	bf00      	nop
 8011ec2:	e7fe      	b.n	8011ec2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8011ec4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ec6:	685a      	ldr	r2, [r3, #4]
 8011ec8:	687b      	ldr	r3, [r7, #4]
 8011eca:	1ad2      	subs	r2, r2, r3
 8011ecc:	69bb      	ldr	r3, [r7, #24]
 8011ece:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 8011ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ed2:	687a      	ldr	r2, [r7, #4]
 8011ed4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8011ed6:	69b8      	ldr	r0, [r7, #24]
 8011ed8:	f000 f900 	bl	80120dc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8011edc:	4b1b      	ldr	r3, [pc, #108]	; (8011f4c <pvPortMalloc+0x188>)
 8011ede:	681a      	ldr	r2, [r3, #0]
 8011ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011ee2:	685b      	ldr	r3, [r3, #4]
 8011ee4:	1ad3      	subs	r3, r2, r3
 8011ee6:	4a19      	ldr	r2, [pc, #100]	; (8011f4c <pvPortMalloc+0x188>)
 8011ee8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8011eea:	4b18      	ldr	r3, [pc, #96]	; (8011f4c <pvPortMalloc+0x188>)
 8011eec:	681a      	ldr	r2, [r3, #0]
 8011eee:	4b19      	ldr	r3, [pc, #100]	; (8011f54 <pvPortMalloc+0x190>)
 8011ef0:	681b      	ldr	r3, [r3, #0]
 8011ef2:	429a      	cmp	r2, r3
 8011ef4:	d203      	bcs.n	8011efe <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8011ef6:	4b15      	ldr	r3, [pc, #84]	; (8011f4c <pvPortMalloc+0x188>)
 8011ef8:	681b      	ldr	r3, [r3, #0]
 8011efa:	4a16      	ldr	r2, [pc, #88]	; (8011f54 <pvPortMalloc+0x190>)
 8011efc:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 8011efe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f00:	685a      	ldr	r2, [r3, #4]
 8011f02:	4b11      	ldr	r3, [pc, #68]	; (8011f48 <pvPortMalloc+0x184>)
 8011f04:	681b      	ldr	r3, [r3, #0]
 8011f06:	431a      	orrs	r2, r3
 8011f08:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f0a:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8011f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011f0e:	2200      	movs	r2, #0
 8011f10:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011f12:	f7fe ff15 	bl	8010d40 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011f16:	69fb      	ldr	r3, [r7, #28]
 8011f18:	f003 0307 	and.w	r3, r3, #7
 8011f1c:	2b00      	cmp	r3, #0
 8011f1e:	d00c      	beq.n	8011f3a <pvPortMalloc+0x176>
	__asm volatile
 8011f20:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f24:	b672      	cpsid	i
 8011f26:	f383 8811 	msr	BASEPRI, r3
 8011f2a:	f3bf 8f6f 	isb	sy
 8011f2e:	f3bf 8f4f 	dsb	sy
 8011f32:	b662      	cpsie	i
 8011f34:	60fb      	str	r3, [r7, #12]
}
 8011f36:	bf00      	nop
 8011f38:	e7fe      	b.n	8011f38 <pvPortMalloc+0x174>
	return pvReturn;
 8011f3a:	69fb      	ldr	r3, [r7, #28]
}
 8011f3c:	4618      	mov	r0, r3
 8011f3e:	3728      	adds	r7, #40	; 0x28
 8011f40:	46bd      	mov	sp, r7
 8011f42:	bd80      	pop	{r7, pc}
 8011f44:	2001e79c 	.word	0x2001e79c
 8011f48:	2001e7a8 	.word	0x2001e7a8
 8011f4c:	2001e7a0 	.word	0x2001e7a0
 8011f50:	2001e794 	.word	0x2001e794
 8011f54:	2001e7a4 	.word	0x2001e7a4

08011f58 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011f58:	b580      	push	{r7, lr}
 8011f5a:	b086      	sub	sp, #24
 8011f5c:	af00      	add	r7, sp, #0
 8011f5e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011f60:	687b      	ldr	r3, [r7, #4]
 8011f62:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011f64:	687b      	ldr	r3, [r7, #4]
 8011f66:	2b00      	cmp	r3, #0
 8011f68:	d04c      	beq.n	8012004 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 8011f6a:	2308      	movs	r3, #8
 8011f6c:	425b      	negs	r3, r3
 8011f6e:	697a      	ldr	r2, [r7, #20]
 8011f70:	4413      	add	r3, r2
 8011f72:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011f74:	697b      	ldr	r3, [r7, #20]
 8011f76:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011f78:	693b      	ldr	r3, [r7, #16]
 8011f7a:	685a      	ldr	r2, [r3, #4]
 8011f7c:	4b23      	ldr	r3, [pc, #140]	; (801200c <vPortFree+0xb4>)
 8011f7e:	681b      	ldr	r3, [r3, #0]
 8011f80:	4013      	ands	r3, r2
 8011f82:	2b00      	cmp	r3, #0
 8011f84:	d10c      	bne.n	8011fa0 <vPortFree+0x48>
	__asm volatile
 8011f86:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011f8a:	b672      	cpsid	i
 8011f8c:	f383 8811 	msr	BASEPRI, r3
 8011f90:	f3bf 8f6f 	isb	sy
 8011f94:	f3bf 8f4f 	dsb	sy
 8011f98:	b662      	cpsie	i
 8011f9a:	60fb      	str	r3, [r7, #12]
}
 8011f9c:	bf00      	nop
 8011f9e:	e7fe      	b.n	8011f9e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011fa0:	693b      	ldr	r3, [r7, #16]
 8011fa2:	681b      	ldr	r3, [r3, #0]
 8011fa4:	2b00      	cmp	r3, #0
 8011fa6:	d00c      	beq.n	8011fc2 <vPortFree+0x6a>
	__asm volatile
 8011fa8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011fac:	b672      	cpsid	i
 8011fae:	f383 8811 	msr	BASEPRI, r3
 8011fb2:	f3bf 8f6f 	isb	sy
 8011fb6:	f3bf 8f4f 	dsb	sy
 8011fba:	b662      	cpsie	i
 8011fbc:	60bb      	str	r3, [r7, #8]
}
 8011fbe:	bf00      	nop
 8011fc0:	e7fe      	b.n	8011fc0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8011fc2:	693b      	ldr	r3, [r7, #16]
 8011fc4:	685a      	ldr	r2, [r3, #4]
 8011fc6:	4b11      	ldr	r3, [pc, #68]	; (801200c <vPortFree+0xb4>)
 8011fc8:	681b      	ldr	r3, [r3, #0]
 8011fca:	4013      	ands	r3, r2
 8011fcc:	2b00      	cmp	r3, #0
 8011fce:	d019      	beq.n	8012004 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8011fd0:	693b      	ldr	r3, [r7, #16]
 8011fd2:	681b      	ldr	r3, [r3, #0]
 8011fd4:	2b00      	cmp	r3, #0
 8011fd6:	d115      	bne.n	8012004 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8011fd8:	693b      	ldr	r3, [r7, #16]
 8011fda:	685a      	ldr	r2, [r3, #4]
 8011fdc:	4b0b      	ldr	r3, [pc, #44]	; (801200c <vPortFree+0xb4>)
 8011fde:	681b      	ldr	r3, [r3, #0]
 8011fe0:	43db      	mvns	r3, r3
 8011fe2:	401a      	ands	r2, r3
 8011fe4:	693b      	ldr	r3, [r7, #16]
 8011fe6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8011fe8:	f7fe fe9c 	bl	8010d24 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 8011fec:	693b      	ldr	r3, [r7, #16]
 8011fee:	685a      	ldr	r2, [r3, #4]
 8011ff0:	4b07      	ldr	r3, [pc, #28]	; (8012010 <vPortFree+0xb8>)
 8011ff2:	681b      	ldr	r3, [r3, #0]
 8011ff4:	4413      	add	r3, r2
 8011ff6:	4a06      	ldr	r2, [pc, #24]	; (8012010 <vPortFree+0xb8>)
 8011ff8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 8011ffa:	6938      	ldr	r0, [r7, #16]
 8011ffc:	f000 f86e 	bl	80120dc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 8012000:	f7fe fe9e 	bl	8010d40 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 8012004:	bf00      	nop
 8012006:	3718      	adds	r7, #24
 8012008:	46bd      	mov	sp, r7
 801200a:	bd80      	pop	{r7, pc}
 801200c:	2001e7a8 	.word	0x2001e7a8
 8012010:	2001e7a0 	.word	0x2001e7a0

08012014 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8012014:	b480      	push	{r7}
 8012016:	b085      	sub	sp, #20
 8012018:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801201a:	4b29      	ldr	r3, [pc, #164]	; (80120c0 <prvHeapInit+0xac>)
 801201c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801201e:	4b29      	ldr	r3, [pc, #164]	; (80120c4 <prvHeapInit+0xb0>)
 8012020:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8012022:	68fb      	ldr	r3, [r7, #12]
 8012024:	f003 0307 	and.w	r3, r3, #7
 8012028:	2b00      	cmp	r3, #0
 801202a:	d00c      	beq.n	8012046 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801202c:	68fb      	ldr	r3, [r7, #12]
 801202e:	3307      	adds	r3, #7
 8012030:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012032:	68fb      	ldr	r3, [r7, #12]
 8012034:	f023 0307 	bic.w	r3, r3, #7
 8012038:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801203a:	68ba      	ldr	r2, [r7, #8]
 801203c:	68fb      	ldr	r3, [r7, #12]
 801203e:	1ad3      	subs	r3, r2, r3
 8012040:	4a20      	ldr	r2, [pc, #128]	; (80120c4 <prvHeapInit+0xb0>)
 8012042:	4413      	add	r3, r2
 8012044:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8012046:	68fb      	ldr	r3, [r7, #12]
 8012048:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801204a:	4a1f      	ldr	r2, [pc, #124]	; (80120c8 <prvHeapInit+0xb4>)
 801204c:	687b      	ldr	r3, [r7, #4]
 801204e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8012050:	4b1d      	ldr	r3, [pc, #116]	; (80120c8 <prvHeapInit+0xb4>)
 8012052:	2200      	movs	r2, #0
 8012054:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8012056:	687b      	ldr	r3, [r7, #4]
 8012058:	68ba      	ldr	r2, [r7, #8]
 801205a:	4413      	add	r3, r2
 801205c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801205e:	2208      	movs	r2, #8
 8012060:	68fb      	ldr	r3, [r7, #12]
 8012062:	1a9b      	subs	r3, r3, r2
 8012064:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8012066:	68fb      	ldr	r3, [r7, #12]
 8012068:	f023 0307 	bic.w	r3, r3, #7
 801206c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801206e:	68fb      	ldr	r3, [r7, #12]
 8012070:	4a16      	ldr	r2, [pc, #88]	; (80120cc <prvHeapInit+0xb8>)
 8012072:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8012074:	4b15      	ldr	r3, [pc, #84]	; (80120cc <prvHeapInit+0xb8>)
 8012076:	681b      	ldr	r3, [r3, #0]
 8012078:	2200      	movs	r2, #0
 801207a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801207c:	4b13      	ldr	r3, [pc, #76]	; (80120cc <prvHeapInit+0xb8>)
 801207e:	681b      	ldr	r3, [r3, #0]
 8012080:	2200      	movs	r2, #0
 8012082:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8012084:	687b      	ldr	r3, [r7, #4]
 8012086:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8012088:	683b      	ldr	r3, [r7, #0]
 801208a:	68fa      	ldr	r2, [r7, #12]
 801208c:	1ad2      	subs	r2, r2, r3
 801208e:	683b      	ldr	r3, [r7, #0]
 8012090:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8012092:	4b0e      	ldr	r3, [pc, #56]	; (80120cc <prvHeapInit+0xb8>)
 8012094:	681a      	ldr	r2, [r3, #0]
 8012096:	683b      	ldr	r3, [r7, #0]
 8012098:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801209a:	683b      	ldr	r3, [r7, #0]
 801209c:	685b      	ldr	r3, [r3, #4]
 801209e:	4a0c      	ldr	r2, [pc, #48]	; (80120d0 <prvHeapInit+0xbc>)
 80120a0:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 80120a2:	683b      	ldr	r3, [r7, #0]
 80120a4:	685b      	ldr	r3, [r3, #4]
 80120a6:	4a0b      	ldr	r2, [pc, #44]	; (80120d4 <prvHeapInit+0xc0>)
 80120a8:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 80120aa:	4b0b      	ldr	r3, [pc, #44]	; (80120d8 <prvHeapInit+0xc4>)
 80120ac:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80120b0:	601a      	str	r2, [r3, #0]
}
 80120b2:	bf00      	nop
 80120b4:	3714      	adds	r7, #20
 80120b6:	46bd      	mov	sp, r7
 80120b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80120bc:	4770      	bx	lr
 80120be:	bf00      	nop
 80120c0:	000186a0 	.word	0x000186a0
 80120c4:	200060f4 	.word	0x200060f4
 80120c8:	2001e794 	.word	0x2001e794
 80120cc:	2001e79c 	.word	0x2001e79c
 80120d0:	2001e7a4 	.word	0x2001e7a4
 80120d4:	2001e7a0 	.word	0x2001e7a0
 80120d8:	2001e7a8 	.word	0x2001e7a8

080120dc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80120dc:	b480      	push	{r7}
 80120de:	b085      	sub	sp, #20
 80120e0:	af00      	add	r7, sp, #0
 80120e2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80120e4:	4b28      	ldr	r3, [pc, #160]	; (8012188 <prvInsertBlockIntoFreeList+0xac>)
 80120e6:	60fb      	str	r3, [r7, #12]
 80120e8:	e002      	b.n	80120f0 <prvInsertBlockIntoFreeList+0x14>
 80120ea:	68fb      	ldr	r3, [r7, #12]
 80120ec:	681b      	ldr	r3, [r3, #0]
 80120ee:	60fb      	str	r3, [r7, #12]
 80120f0:	68fb      	ldr	r3, [r7, #12]
 80120f2:	681b      	ldr	r3, [r3, #0]
 80120f4:	687a      	ldr	r2, [r7, #4]
 80120f6:	429a      	cmp	r2, r3
 80120f8:	d8f7      	bhi.n	80120ea <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80120fa:	68fb      	ldr	r3, [r7, #12]
 80120fc:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80120fe:	68fb      	ldr	r3, [r7, #12]
 8012100:	685b      	ldr	r3, [r3, #4]
 8012102:	68ba      	ldr	r2, [r7, #8]
 8012104:	4413      	add	r3, r2
 8012106:	687a      	ldr	r2, [r7, #4]
 8012108:	429a      	cmp	r2, r3
 801210a:	d108      	bne.n	801211e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 801210c:	68fb      	ldr	r3, [r7, #12]
 801210e:	685a      	ldr	r2, [r3, #4]
 8012110:	687b      	ldr	r3, [r7, #4]
 8012112:	685b      	ldr	r3, [r3, #4]
 8012114:	441a      	add	r2, r3
 8012116:	68fb      	ldr	r3, [r7, #12]
 8012118:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801211a:	68fb      	ldr	r3, [r7, #12]
 801211c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801211e:	687b      	ldr	r3, [r7, #4]
 8012120:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8012122:	687b      	ldr	r3, [r7, #4]
 8012124:	685b      	ldr	r3, [r3, #4]
 8012126:	68ba      	ldr	r2, [r7, #8]
 8012128:	441a      	add	r2, r3
 801212a:	68fb      	ldr	r3, [r7, #12]
 801212c:	681b      	ldr	r3, [r3, #0]
 801212e:	429a      	cmp	r2, r3
 8012130:	d118      	bne.n	8012164 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8012132:	68fb      	ldr	r3, [r7, #12]
 8012134:	681a      	ldr	r2, [r3, #0]
 8012136:	4b15      	ldr	r3, [pc, #84]	; (801218c <prvInsertBlockIntoFreeList+0xb0>)
 8012138:	681b      	ldr	r3, [r3, #0]
 801213a:	429a      	cmp	r2, r3
 801213c:	d00d      	beq.n	801215a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801213e:	687b      	ldr	r3, [r7, #4]
 8012140:	685a      	ldr	r2, [r3, #4]
 8012142:	68fb      	ldr	r3, [r7, #12]
 8012144:	681b      	ldr	r3, [r3, #0]
 8012146:	685b      	ldr	r3, [r3, #4]
 8012148:	441a      	add	r2, r3
 801214a:	687b      	ldr	r3, [r7, #4]
 801214c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801214e:	68fb      	ldr	r3, [r7, #12]
 8012150:	681b      	ldr	r3, [r3, #0]
 8012152:	681a      	ldr	r2, [r3, #0]
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	601a      	str	r2, [r3, #0]
 8012158:	e008      	b.n	801216c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801215a:	4b0c      	ldr	r3, [pc, #48]	; (801218c <prvInsertBlockIntoFreeList+0xb0>)
 801215c:	681a      	ldr	r2, [r3, #0]
 801215e:	687b      	ldr	r3, [r7, #4]
 8012160:	601a      	str	r2, [r3, #0]
 8012162:	e003      	b.n	801216c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8012164:	68fb      	ldr	r3, [r7, #12]
 8012166:	681a      	ldr	r2, [r3, #0]
 8012168:	687b      	ldr	r3, [r7, #4]
 801216a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801216c:	68fa      	ldr	r2, [r7, #12]
 801216e:	687b      	ldr	r3, [r7, #4]
 8012170:	429a      	cmp	r2, r3
 8012172:	d002      	beq.n	801217a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8012174:	68fb      	ldr	r3, [r7, #12]
 8012176:	687a      	ldr	r2, [r7, #4]
 8012178:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801217a:	bf00      	nop
 801217c:	3714      	adds	r7, #20
 801217e:	46bd      	mov	sp, r7
 8012180:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012184:	4770      	bx	lr
 8012186:	bf00      	nop
 8012188:	2001e794 	.word	0x2001e794
 801218c:	2001e79c 	.word	0x2001e79c

08012190 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8012190:	b580      	push	{r7, lr}
 8012192:	b084      	sub	sp, #16
 8012194:	af00      	add	r7, sp, #0
 8012196:	6078      	str	r0, [r7, #4]
 8012198:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 801219a:	f007 fae5 	bl	8019768 <sys_timeouts_sleeptime>
 801219e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 80121a0:	68fb      	ldr	r3, [r7, #12]
 80121a2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121a6:	d10b      	bne.n	80121c0 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 80121a8:	4813      	ldr	r0, [pc, #76]	; (80121f8 <tcpip_timeouts_mbox_fetch+0x68>)
 80121aa:	f00a fb4a 	bl	801c842 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 80121ae:	2200      	movs	r2, #0
 80121b0:	6839      	ldr	r1, [r7, #0]
 80121b2:	6878      	ldr	r0, [r7, #4]
 80121b4:	f00a fabc 	bl	801c730 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80121b8:	480f      	ldr	r0, [pc, #60]	; (80121f8 <tcpip_timeouts_mbox_fetch+0x68>)
 80121ba:	f00a fb33 	bl	801c824 <sys_mutex_lock>
    return;
 80121be:	e018      	b.n	80121f2 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80121c0:	68fb      	ldr	r3, [r7, #12]
 80121c2:	2b00      	cmp	r3, #0
 80121c4:	d102      	bne.n	80121cc <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80121c6:	f007 fa95 	bl	80196f4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80121ca:	e7e6      	b.n	801219a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80121cc:	480a      	ldr	r0, [pc, #40]	; (80121f8 <tcpip_timeouts_mbox_fetch+0x68>)
 80121ce:	f00a fb38 	bl	801c842 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80121d2:	68fa      	ldr	r2, [r7, #12]
 80121d4:	6839      	ldr	r1, [r7, #0]
 80121d6:	6878      	ldr	r0, [r7, #4]
 80121d8:	f00a faaa 	bl	801c730 <sys_arch_mbox_fetch>
 80121dc:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80121de:	4806      	ldr	r0, [pc, #24]	; (80121f8 <tcpip_timeouts_mbox_fetch+0x68>)
 80121e0:	f00a fb20 	bl	801c824 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80121e4:	68bb      	ldr	r3, [r7, #8]
 80121e6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80121ea:	d102      	bne.n	80121f2 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80121ec:	f007 fa82 	bl	80196f4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80121f0:	e7d3      	b.n	801219a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80121f2:	3710      	adds	r7, #16
 80121f4:	46bd      	mov	sp, r7
 80121f6:	bd80      	pop	{r7, pc}
 80121f8:	2001e7b8 	.word	0x2001e7b8

080121fc <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80121fc:	b580      	push	{r7, lr}
 80121fe:	b084      	sub	sp, #16
 8012200:	af00      	add	r7, sp, #0
 8012202:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 8012204:	4810      	ldr	r0, [pc, #64]	; (8012248 <tcpip_thread+0x4c>)
 8012206:	f00a fb0d 	bl	801c824 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 801220a:	4b10      	ldr	r3, [pc, #64]	; (801224c <tcpip_thread+0x50>)
 801220c:	681b      	ldr	r3, [r3, #0]
 801220e:	2b00      	cmp	r3, #0
 8012210:	d005      	beq.n	801221e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8012212:	4b0e      	ldr	r3, [pc, #56]	; (801224c <tcpip_thread+0x50>)
 8012214:	681b      	ldr	r3, [r3, #0]
 8012216:	4a0e      	ldr	r2, [pc, #56]	; (8012250 <tcpip_thread+0x54>)
 8012218:	6812      	ldr	r2, [r2, #0]
 801221a:	4610      	mov	r0, r2
 801221c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 801221e:	f107 030c 	add.w	r3, r7, #12
 8012222:	4619      	mov	r1, r3
 8012224:	480b      	ldr	r0, [pc, #44]	; (8012254 <tcpip_thread+0x58>)
 8012226:	f7ff ffb3 	bl	8012190 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 801222a:	68fb      	ldr	r3, [r7, #12]
 801222c:	2b00      	cmp	r3, #0
 801222e:	d106      	bne.n	801223e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8012230:	4b09      	ldr	r3, [pc, #36]	; (8012258 <tcpip_thread+0x5c>)
 8012232:	2291      	movs	r2, #145	; 0x91
 8012234:	4909      	ldr	r1, [pc, #36]	; (801225c <tcpip_thread+0x60>)
 8012236:	480a      	ldr	r0, [pc, #40]	; (8012260 <tcpip_thread+0x64>)
 8012238:	f00b fd82 	bl	801dd40 <iprintf>
      continue;
 801223c:	e003      	b.n	8012246 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 801223e:	68fb      	ldr	r3, [r7, #12]
 8012240:	4618      	mov	r0, r3
 8012242:	f000 f80f 	bl	8012264 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8012246:	e7ea      	b.n	801221e <tcpip_thread+0x22>
 8012248:	2001e7b8 	.word	0x2001e7b8
 801224c:	2001e7ac 	.word	0x2001e7ac
 8012250:	2001e7b0 	.word	0x2001e7b0
 8012254:	2001e7b4 	.word	0x2001e7b4
 8012258:	0801ed20 	.word	0x0801ed20
 801225c:	0801ed50 	.word	0x0801ed50
 8012260:	0801ed70 	.word	0x0801ed70

08012264 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8012264:	b580      	push	{r7, lr}
 8012266:	b082      	sub	sp, #8
 8012268:	af00      	add	r7, sp, #0
 801226a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 801226c:	687b      	ldr	r3, [r7, #4]
 801226e:	781b      	ldrb	r3, [r3, #0]
 8012270:	2b02      	cmp	r3, #2
 8012272:	d026      	beq.n	80122c2 <tcpip_thread_handle_msg+0x5e>
 8012274:	2b02      	cmp	r3, #2
 8012276:	dc2b      	bgt.n	80122d0 <tcpip_thread_handle_msg+0x6c>
 8012278:	2b00      	cmp	r3, #0
 801227a:	d002      	beq.n	8012282 <tcpip_thread_handle_msg+0x1e>
 801227c:	2b01      	cmp	r3, #1
 801227e:	d015      	beq.n	80122ac <tcpip_thread_handle_msg+0x48>
 8012280:	e026      	b.n	80122d0 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8012282:	687b      	ldr	r3, [r7, #4]
 8012284:	68db      	ldr	r3, [r3, #12]
 8012286:	687a      	ldr	r2, [r7, #4]
 8012288:	6850      	ldr	r0, [r2, #4]
 801228a:	687a      	ldr	r2, [r7, #4]
 801228c:	6892      	ldr	r2, [r2, #8]
 801228e:	4611      	mov	r1, r2
 8012290:	4798      	blx	r3
 8012292:	4603      	mov	r3, r0
 8012294:	2b00      	cmp	r3, #0
 8012296:	d004      	beq.n	80122a2 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8012298:	687b      	ldr	r3, [r7, #4]
 801229a:	685b      	ldr	r3, [r3, #4]
 801229c:	4618      	mov	r0, r3
 801229e:	f001 fd1b 	bl	8013cd8 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 80122a2:	6879      	ldr	r1, [r7, #4]
 80122a4:	2009      	movs	r0, #9
 80122a6:	f000 fe73 	bl	8012f90 <memp_free>
      break;
 80122aa:	e018      	b.n	80122de <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80122ac:	687b      	ldr	r3, [r7, #4]
 80122ae:	685b      	ldr	r3, [r3, #4]
 80122b0:	687a      	ldr	r2, [r7, #4]
 80122b2:	6892      	ldr	r2, [r2, #8]
 80122b4:	4610      	mov	r0, r2
 80122b6:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 80122b8:	6879      	ldr	r1, [r7, #4]
 80122ba:	2008      	movs	r0, #8
 80122bc:	f000 fe68 	bl	8012f90 <memp_free>
      break;
 80122c0:	e00d      	b.n	80122de <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 80122c2:	687b      	ldr	r3, [r7, #4]
 80122c4:	685b      	ldr	r3, [r3, #4]
 80122c6:	687a      	ldr	r2, [r7, #4]
 80122c8:	6892      	ldr	r2, [r2, #8]
 80122ca:	4610      	mov	r0, r2
 80122cc:	4798      	blx	r3
      break;
 80122ce:	e006      	b.n	80122de <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 80122d0:	4b05      	ldr	r3, [pc, #20]	; (80122e8 <tcpip_thread_handle_msg+0x84>)
 80122d2:	22cf      	movs	r2, #207	; 0xcf
 80122d4:	4905      	ldr	r1, [pc, #20]	; (80122ec <tcpip_thread_handle_msg+0x88>)
 80122d6:	4806      	ldr	r0, [pc, #24]	; (80122f0 <tcpip_thread_handle_msg+0x8c>)
 80122d8:	f00b fd32 	bl	801dd40 <iprintf>
      break;
 80122dc:	bf00      	nop
  }
}
 80122de:	bf00      	nop
 80122e0:	3708      	adds	r7, #8
 80122e2:	46bd      	mov	sp, r7
 80122e4:	bd80      	pop	{r7, pc}
 80122e6:	bf00      	nop
 80122e8:	0801ed20 	.word	0x0801ed20
 80122ec:	0801ed50 	.word	0x0801ed50
 80122f0:	0801ed70 	.word	0x0801ed70

080122f4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 80122f4:	b580      	push	{r7, lr}
 80122f6:	b086      	sub	sp, #24
 80122f8:	af00      	add	r7, sp, #0
 80122fa:	60f8      	str	r0, [r7, #12]
 80122fc:	60b9      	str	r1, [r7, #8]
 80122fe:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8012300:	481a      	ldr	r0, [pc, #104]	; (801236c <tcpip_inpkt+0x78>)
 8012302:	f00a fa54 	bl	801c7ae <sys_mbox_valid>
 8012306:	4603      	mov	r3, r0
 8012308:	2b00      	cmp	r3, #0
 801230a:	d105      	bne.n	8012318 <tcpip_inpkt+0x24>
 801230c:	4b18      	ldr	r3, [pc, #96]	; (8012370 <tcpip_inpkt+0x7c>)
 801230e:	22fc      	movs	r2, #252	; 0xfc
 8012310:	4918      	ldr	r1, [pc, #96]	; (8012374 <tcpip_inpkt+0x80>)
 8012312:	4819      	ldr	r0, [pc, #100]	; (8012378 <tcpip_inpkt+0x84>)
 8012314:	f00b fd14 	bl	801dd40 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8012318:	2009      	movs	r0, #9
 801231a:	f000 fdc3 	bl	8012ea4 <memp_malloc>
 801231e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8012320:	697b      	ldr	r3, [r7, #20]
 8012322:	2b00      	cmp	r3, #0
 8012324:	d102      	bne.n	801232c <tcpip_inpkt+0x38>
    return ERR_MEM;
 8012326:	f04f 33ff 	mov.w	r3, #4294967295
 801232a:	e01a      	b.n	8012362 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 801232c:	697b      	ldr	r3, [r7, #20]
 801232e:	2200      	movs	r2, #0
 8012330:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8012332:	697b      	ldr	r3, [r7, #20]
 8012334:	68fa      	ldr	r2, [r7, #12]
 8012336:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8012338:	697b      	ldr	r3, [r7, #20]
 801233a:	68ba      	ldr	r2, [r7, #8]
 801233c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 801233e:	697b      	ldr	r3, [r7, #20]
 8012340:	687a      	ldr	r2, [r7, #4]
 8012342:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8012344:	6979      	ldr	r1, [r7, #20]
 8012346:	4809      	ldr	r0, [pc, #36]	; (801236c <tcpip_inpkt+0x78>)
 8012348:	f00a f9d8 	bl	801c6fc <sys_mbox_trypost>
 801234c:	4603      	mov	r3, r0
 801234e:	2b00      	cmp	r3, #0
 8012350:	d006      	beq.n	8012360 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8012352:	6979      	ldr	r1, [r7, #20]
 8012354:	2009      	movs	r0, #9
 8012356:	f000 fe1b 	bl	8012f90 <memp_free>
    return ERR_MEM;
 801235a:	f04f 33ff 	mov.w	r3, #4294967295
 801235e:	e000      	b.n	8012362 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8012360:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8012362:	4618      	mov	r0, r3
 8012364:	3718      	adds	r7, #24
 8012366:	46bd      	mov	sp, r7
 8012368:	bd80      	pop	{r7, pc}
 801236a:	bf00      	nop
 801236c:	2001e7b4 	.word	0x2001e7b4
 8012370:	0801ed20 	.word	0x0801ed20
 8012374:	0801ed98 	.word	0x0801ed98
 8012378:	0801ed70 	.word	0x0801ed70

0801237c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 801237c:	b580      	push	{r7, lr}
 801237e:	b082      	sub	sp, #8
 8012380:	af00      	add	r7, sp, #0
 8012382:	6078      	str	r0, [r7, #4]
 8012384:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8012386:	683b      	ldr	r3, [r7, #0]
 8012388:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801238c:	f003 0318 	and.w	r3, r3, #24
 8012390:	2b00      	cmp	r3, #0
 8012392:	d006      	beq.n	80123a2 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8012394:	4a08      	ldr	r2, [pc, #32]	; (80123b8 <tcpip_input+0x3c>)
 8012396:	6839      	ldr	r1, [r7, #0]
 8012398:	6878      	ldr	r0, [r7, #4]
 801239a:	f7ff ffab 	bl	80122f4 <tcpip_inpkt>
 801239e:	4603      	mov	r3, r0
 80123a0:	e005      	b.n	80123ae <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 80123a2:	4a06      	ldr	r2, [pc, #24]	; (80123bc <tcpip_input+0x40>)
 80123a4:	6839      	ldr	r1, [r7, #0]
 80123a6:	6878      	ldr	r0, [r7, #4]
 80123a8:	f7ff ffa4 	bl	80122f4 <tcpip_inpkt>
 80123ac:	4603      	mov	r3, r0
}
 80123ae:	4618      	mov	r0, r3
 80123b0:	3708      	adds	r7, #8
 80123b2:	46bd      	mov	sp, r7
 80123b4:	bd80      	pop	{r7, pc}
 80123b6:	bf00      	nop
 80123b8:	0801c50d 	.word	0x0801c50d
 80123bc:	0801b415 	.word	0x0801b415

080123c0 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 80123c0:	b580      	push	{r7, lr}
 80123c2:	b084      	sub	sp, #16
 80123c4:	af00      	add	r7, sp, #0
 80123c6:	6078      	str	r0, [r7, #4]
 80123c8:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 80123ca:	4819      	ldr	r0, [pc, #100]	; (8012430 <tcpip_try_callback+0x70>)
 80123cc:	f00a f9ef 	bl	801c7ae <sys_mbox_valid>
 80123d0:	4603      	mov	r3, r0
 80123d2:	2b00      	cmp	r3, #0
 80123d4:	d106      	bne.n	80123e4 <tcpip_try_callback+0x24>
 80123d6:	4b17      	ldr	r3, [pc, #92]	; (8012434 <tcpip_try_callback+0x74>)
 80123d8:	f240 125d 	movw	r2, #349	; 0x15d
 80123dc:	4916      	ldr	r1, [pc, #88]	; (8012438 <tcpip_try_callback+0x78>)
 80123de:	4817      	ldr	r0, [pc, #92]	; (801243c <tcpip_try_callback+0x7c>)
 80123e0:	f00b fcae 	bl	801dd40 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 80123e4:	2008      	movs	r0, #8
 80123e6:	f000 fd5d 	bl	8012ea4 <memp_malloc>
 80123ea:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 80123ec:	68fb      	ldr	r3, [r7, #12]
 80123ee:	2b00      	cmp	r3, #0
 80123f0:	d102      	bne.n	80123f8 <tcpip_try_callback+0x38>
    return ERR_MEM;
 80123f2:	f04f 33ff 	mov.w	r3, #4294967295
 80123f6:	e017      	b.n	8012428 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 80123f8:	68fb      	ldr	r3, [r7, #12]
 80123fa:	2201      	movs	r2, #1
 80123fc:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 80123fe:	68fb      	ldr	r3, [r7, #12]
 8012400:	687a      	ldr	r2, [r7, #4]
 8012402:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8012404:	68fb      	ldr	r3, [r7, #12]
 8012406:	683a      	ldr	r2, [r7, #0]
 8012408:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 801240a:	68f9      	ldr	r1, [r7, #12]
 801240c:	4808      	ldr	r0, [pc, #32]	; (8012430 <tcpip_try_callback+0x70>)
 801240e:	f00a f975 	bl	801c6fc <sys_mbox_trypost>
 8012412:	4603      	mov	r3, r0
 8012414:	2b00      	cmp	r3, #0
 8012416:	d006      	beq.n	8012426 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8012418:	68f9      	ldr	r1, [r7, #12]
 801241a:	2008      	movs	r0, #8
 801241c:	f000 fdb8 	bl	8012f90 <memp_free>
    return ERR_MEM;
 8012420:	f04f 33ff 	mov.w	r3, #4294967295
 8012424:	e000      	b.n	8012428 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8012426:	2300      	movs	r3, #0
}
 8012428:	4618      	mov	r0, r3
 801242a:	3710      	adds	r7, #16
 801242c:	46bd      	mov	sp, r7
 801242e:	bd80      	pop	{r7, pc}
 8012430:	2001e7b4 	.word	0x2001e7b4
 8012434:	0801ed20 	.word	0x0801ed20
 8012438:	0801ed98 	.word	0x0801ed98
 801243c:	0801ed70 	.word	0x0801ed70

08012440 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8012440:	b580      	push	{r7, lr}
 8012442:	b084      	sub	sp, #16
 8012444:	af02      	add	r7, sp, #8
 8012446:	6078      	str	r0, [r7, #4]
 8012448:	6039      	str	r1, [r7, #0]
  lwip_init();
 801244a:	f000 f871 	bl	8012530 <lwip_init>

  tcpip_init_done = initfunc;
 801244e:	4a17      	ldr	r2, [pc, #92]	; (80124ac <tcpip_init+0x6c>)
 8012450:	687b      	ldr	r3, [r7, #4]
 8012452:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8012454:	4a16      	ldr	r2, [pc, #88]	; (80124b0 <tcpip_init+0x70>)
 8012456:	683b      	ldr	r3, [r7, #0]
 8012458:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 801245a:	2106      	movs	r1, #6
 801245c:	4815      	ldr	r0, [pc, #84]	; (80124b4 <tcpip_init+0x74>)
 801245e:	f00a f92b 	bl	801c6b8 <sys_mbox_new>
 8012462:	4603      	mov	r3, r0
 8012464:	2b00      	cmp	r3, #0
 8012466:	d006      	beq.n	8012476 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8012468:	4b13      	ldr	r3, [pc, #76]	; (80124b8 <tcpip_init+0x78>)
 801246a:	f240 2261 	movw	r2, #609	; 0x261
 801246e:	4913      	ldr	r1, [pc, #76]	; (80124bc <tcpip_init+0x7c>)
 8012470:	4813      	ldr	r0, [pc, #76]	; (80124c0 <tcpip_init+0x80>)
 8012472:	f00b fc65 	bl	801dd40 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8012476:	4813      	ldr	r0, [pc, #76]	; (80124c4 <tcpip_init+0x84>)
 8012478:	f00a f9b8 	bl	801c7ec <sys_mutex_new>
 801247c:	4603      	mov	r3, r0
 801247e:	2b00      	cmp	r3, #0
 8012480:	d006      	beq.n	8012490 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8012482:	4b0d      	ldr	r3, [pc, #52]	; (80124b8 <tcpip_init+0x78>)
 8012484:	f240 2265 	movw	r2, #613	; 0x265
 8012488:	490f      	ldr	r1, [pc, #60]	; (80124c8 <tcpip_init+0x88>)
 801248a:	480d      	ldr	r0, [pc, #52]	; (80124c0 <tcpip_init+0x80>)
 801248c:	f00b fc58 	bl	801dd40 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8012490:	2300      	movs	r3, #0
 8012492:	9300      	str	r3, [sp, #0]
 8012494:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8012498:	2200      	movs	r2, #0
 801249a:	490c      	ldr	r1, [pc, #48]	; (80124cc <tcpip_init+0x8c>)
 801249c:	480c      	ldr	r0, [pc, #48]	; (80124d0 <tcpip_init+0x90>)
 801249e:	f00a f9dd 	bl	801c85c <sys_thread_new>
}
 80124a2:	bf00      	nop
 80124a4:	3708      	adds	r7, #8
 80124a6:	46bd      	mov	sp, r7
 80124a8:	bd80      	pop	{r7, pc}
 80124aa:	bf00      	nop
 80124ac:	2001e7ac 	.word	0x2001e7ac
 80124b0:	2001e7b0 	.word	0x2001e7b0
 80124b4:	2001e7b4 	.word	0x2001e7b4
 80124b8:	0801ed20 	.word	0x0801ed20
 80124bc:	0801eda8 	.word	0x0801eda8
 80124c0:	0801ed70 	.word	0x0801ed70
 80124c4:	2001e7b8 	.word	0x2001e7b8
 80124c8:	0801edcc 	.word	0x0801edcc
 80124cc:	080121fd 	.word	0x080121fd
 80124d0:	0801edf0 	.word	0x0801edf0

080124d4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 80124d4:	b480      	push	{r7}
 80124d6:	b083      	sub	sp, #12
 80124d8:	af00      	add	r7, sp, #0
 80124da:	4603      	mov	r3, r0
 80124dc:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 80124de:	88fb      	ldrh	r3, [r7, #6]
 80124e0:	021b      	lsls	r3, r3, #8
 80124e2:	b21a      	sxth	r2, r3
 80124e4:	88fb      	ldrh	r3, [r7, #6]
 80124e6:	0a1b      	lsrs	r3, r3, #8
 80124e8:	b29b      	uxth	r3, r3
 80124ea:	b21b      	sxth	r3, r3
 80124ec:	4313      	orrs	r3, r2
 80124ee:	b21b      	sxth	r3, r3
 80124f0:	b29b      	uxth	r3, r3
}
 80124f2:	4618      	mov	r0, r3
 80124f4:	370c      	adds	r7, #12
 80124f6:	46bd      	mov	sp, r7
 80124f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80124fc:	4770      	bx	lr

080124fe <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 80124fe:	b480      	push	{r7}
 8012500:	b083      	sub	sp, #12
 8012502:	af00      	add	r7, sp, #0
 8012504:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8012506:	687b      	ldr	r3, [r7, #4]
 8012508:	061a      	lsls	r2, r3, #24
 801250a:	687b      	ldr	r3, [r7, #4]
 801250c:	021b      	lsls	r3, r3, #8
 801250e:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8012512:	431a      	orrs	r2, r3
 8012514:	687b      	ldr	r3, [r7, #4]
 8012516:	0a1b      	lsrs	r3, r3, #8
 8012518:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 801251c:	431a      	orrs	r2, r3
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	0e1b      	lsrs	r3, r3, #24
 8012522:	4313      	orrs	r3, r2
}
 8012524:	4618      	mov	r0, r3
 8012526:	370c      	adds	r7, #12
 8012528:	46bd      	mov	sp, r7
 801252a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801252e:	4770      	bx	lr

08012530 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8012530:	b580      	push	{r7, lr}
 8012532:	b082      	sub	sp, #8
 8012534:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8012536:	2300      	movs	r3, #0
 8012538:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 801253a:	f00a f949 	bl	801c7d0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 801253e:	f000 f8d9 	bl	80126f4 <mem_init>
  memp_init();
 8012542:	f000 fc41 	bl	8012dc8 <memp_init>
  pbuf_init();
  netif_init();
 8012546:	f000 fd4d 	bl	8012fe4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 801254a:	f007 f945 	bl	80197d8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 801254e:	f001 fe6d 	bl	801422c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8012552:	f007 f887 	bl	8019664 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8012556:	bf00      	nop
 8012558:	3708      	adds	r7, #8
 801255a:	46bd      	mov	sp, r7
 801255c:	bd80      	pop	{r7, pc}
	...

08012560 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8012560:	b480      	push	{r7}
 8012562:	b083      	sub	sp, #12
 8012564:	af00      	add	r7, sp, #0
 8012566:	4603      	mov	r3, r0
 8012568:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 801256a:	4b05      	ldr	r3, [pc, #20]	; (8012580 <ptr_to_mem+0x20>)
 801256c:	681a      	ldr	r2, [r3, #0]
 801256e:	88fb      	ldrh	r3, [r7, #6]
 8012570:	4413      	add	r3, r2
}
 8012572:	4618      	mov	r0, r3
 8012574:	370c      	adds	r7, #12
 8012576:	46bd      	mov	sp, r7
 8012578:	f85d 7b04 	ldr.w	r7, [sp], #4
 801257c:	4770      	bx	lr
 801257e:	bf00      	nop
 8012580:	20020ef8 	.word	0x20020ef8

08012584 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8012584:	b480      	push	{r7}
 8012586:	b083      	sub	sp, #12
 8012588:	af00      	add	r7, sp, #0
 801258a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 801258c:	4b05      	ldr	r3, [pc, #20]	; (80125a4 <mem_to_ptr+0x20>)
 801258e:	681b      	ldr	r3, [r3, #0]
 8012590:	687a      	ldr	r2, [r7, #4]
 8012592:	1ad3      	subs	r3, r2, r3
 8012594:	b29b      	uxth	r3, r3
}
 8012596:	4618      	mov	r0, r3
 8012598:	370c      	adds	r7, #12
 801259a:	46bd      	mov	sp, r7
 801259c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125a0:	4770      	bx	lr
 80125a2:	bf00      	nop
 80125a4:	20020ef8 	.word	0x20020ef8

080125a8 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 80125a8:	b590      	push	{r4, r7, lr}
 80125aa:	b085      	sub	sp, #20
 80125ac:	af00      	add	r7, sp, #0
 80125ae:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 80125b0:	4b47      	ldr	r3, [pc, #284]	; (80126d0 <plug_holes+0x128>)
 80125b2:	681b      	ldr	r3, [r3, #0]
 80125b4:	687a      	ldr	r2, [r7, #4]
 80125b6:	429a      	cmp	r2, r3
 80125b8:	d206      	bcs.n	80125c8 <plug_holes+0x20>
 80125ba:	4b46      	ldr	r3, [pc, #280]	; (80126d4 <plug_holes+0x12c>)
 80125bc:	f240 12df 	movw	r2, #479	; 0x1df
 80125c0:	4945      	ldr	r1, [pc, #276]	; (80126d8 <plug_holes+0x130>)
 80125c2:	4846      	ldr	r0, [pc, #280]	; (80126dc <plug_holes+0x134>)
 80125c4:	f00b fbbc 	bl	801dd40 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 80125c8:	4b45      	ldr	r3, [pc, #276]	; (80126e0 <plug_holes+0x138>)
 80125ca:	681b      	ldr	r3, [r3, #0]
 80125cc:	687a      	ldr	r2, [r7, #4]
 80125ce:	429a      	cmp	r2, r3
 80125d0:	d306      	bcc.n	80125e0 <plug_holes+0x38>
 80125d2:	4b40      	ldr	r3, [pc, #256]	; (80126d4 <plug_holes+0x12c>)
 80125d4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 80125d8:	4942      	ldr	r1, [pc, #264]	; (80126e4 <plug_holes+0x13c>)
 80125da:	4840      	ldr	r0, [pc, #256]	; (80126dc <plug_holes+0x134>)
 80125dc:	f00b fbb0 	bl	801dd40 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 80125e0:	687b      	ldr	r3, [r7, #4]
 80125e2:	791b      	ldrb	r3, [r3, #4]
 80125e4:	2b00      	cmp	r3, #0
 80125e6:	d006      	beq.n	80125f6 <plug_holes+0x4e>
 80125e8:	4b3a      	ldr	r3, [pc, #232]	; (80126d4 <plug_holes+0x12c>)
 80125ea:	f240 12e1 	movw	r2, #481	; 0x1e1
 80125ee:	493e      	ldr	r1, [pc, #248]	; (80126e8 <plug_holes+0x140>)
 80125f0:	483a      	ldr	r0, [pc, #232]	; (80126dc <plug_holes+0x134>)
 80125f2:	f00b fba5 	bl	801dd40 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 80125f6:	687b      	ldr	r3, [r7, #4]
 80125f8:	881b      	ldrh	r3, [r3, #0]
 80125fa:	f242 7210 	movw	r2, #10000	; 0x2710
 80125fe:	4293      	cmp	r3, r2
 8012600:	d906      	bls.n	8012610 <plug_holes+0x68>
 8012602:	4b34      	ldr	r3, [pc, #208]	; (80126d4 <plug_holes+0x12c>)
 8012604:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8012608:	4938      	ldr	r1, [pc, #224]	; (80126ec <plug_holes+0x144>)
 801260a:	4834      	ldr	r0, [pc, #208]	; (80126dc <plug_holes+0x134>)
 801260c:	f00b fb98 	bl	801dd40 <iprintf>

  nmem = ptr_to_mem(mem->next);
 8012610:	687b      	ldr	r3, [r7, #4]
 8012612:	881b      	ldrh	r3, [r3, #0]
 8012614:	4618      	mov	r0, r3
 8012616:	f7ff ffa3 	bl	8012560 <ptr_to_mem>
 801261a:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 801261c:	687a      	ldr	r2, [r7, #4]
 801261e:	68fb      	ldr	r3, [r7, #12]
 8012620:	429a      	cmp	r2, r3
 8012622:	d025      	beq.n	8012670 <plug_holes+0xc8>
 8012624:	68fb      	ldr	r3, [r7, #12]
 8012626:	791b      	ldrb	r3, [r3, #4]
 8012628:	2b00      	cmp	r3, #0
 801262a:	d121      	bne.n	8012670 <plug_holes+0xc8>
 801262c:	4b2c      	ldr	r3, [pc, #176]	; (80126e0 <plug_holes+0x138>)
 801262e:	681b      	ldr	r3, [r3, #0]
 8012630:	68fa      	ldr	r2, [r7, #12]
 8012632:	429a      	cmp	r2, r3
 8012634:	d01c      	beq.n	8012670 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8012636:	4b2e      	ldr	r3, [pc, #184]	; (80126f0 <plug_holes+0x148>)
 8012638:	681b      	ldr	r3, [r3, #0]
 801263a:	68fa      	ldr	r2, [r7, #12]
 801263c:	429a      	cmp	r2, r3
 801263e:	d102      	bne.n	8012646 <plug_holes+0x9e>
      lfree = mem;
 8012640:	4a2b      	ldr	r2, [pc, #172]	; (80126f0 <plug_holes+0x148>)
 8012642:	687b      	ldr	r3, [r7, #4]
 8012644:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8012646:	68fb      	ldr	r3, [r7, #12]
 8012648:	881a      	ldrh	r2, [r3, #0]
 801264a:	687b      	ldr	r3, [r7, #4]
 801264c:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	881b      	ldrh	r3, [r3, #0]
 8012652:	f242 7210 	movw	r2, #10000	; 0x2710
 8012656:	4293      	cmp	r3, r2
 8012658:	d00a      	beq.n	8012670 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 801265a:	68fb      	ldr	r3, [r7, #12]
 801265c:	881b      	ldrh	r3, [r3, #0]
 801265e:	4618      	mov	r0, r3
 8012660:	f7ff ff7e 	bl	8012560 <ptr_to_mem>
 8012664:	4604      	mov	r4, r0
 8012666:	6878      	ldr	r0, [r7, #4]
 8012668:	f7ff ff8c 	bl	8012584 <mem_to_ptr>
 801266c:	4603      	mov	r3, r0
 801266e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8012670:	687b      	ldr	r3, [r7, #4]
 8012672:	885b      	ldrh	r3, [r3, #2]
 8012674:	4618      	mov	r0, r3
 8012676:	f7ff ff73 	bl	8012560 <ptr_to_mem>
 801267a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 801267c:	68ba      	ldr	r2, [r7, #8]
 801267e:	687b      	ldr	r3, [r7, #4]
 8012680:	429a      	cmp	r2, r3
 8012682:	d020      	beq.n	80126c6 <plug_holes+0x11e>
 8012684:	68bb      	ldr	r3, [r7, #8]
 8012686:	791b      	ldrb	r3, [r3, #4]
 8012688:	2b00      	cmp	r3, #0
 801268a:	d11c      	bne.n	80126c6 <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 801268c:	4b18      	ldr	r3, [pc, #96]	; (80126f0 <plug_holes+0x148>)
 801268e:	681b      	ldr	r3, [r3, #0]
 8012690:	687a      	ldr	r2, [r7, #4]
 8012692:	429a      	cmp	r2, r3
 8012694:	d102      	bne.n	801269c <plug_holes+0xf4>
      lfree = pmem;
 8012696:	4a16      	ldr	r2, [pc, #88]	; (80126f0 <plug_holes+0x148>)
 8012698:	68bb      	ldr	r3, [r7, #8]
 801269a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 801269c:	687b      	ldr	r3, [r7, #4]
 801269e:	881a      	ldrh	r2, [r3, #0]
 80126a0:	68bb      	ldr	r3, [r7, #8]
 80126a2:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 80126a4:	687b      	ldr	r3, [r7, #4]
 80126a6:	881b      	ldrh	r3, [r3, #0]
 80126a8:	f242 7210 	movw	r2, #10000	; 0x2710
 80126ac:	4293      	cmp	r3, r2
 80126ae:	d00a      	beq.n	80126c6 <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 80126b0:	687b      	ldr	r3, [r7, #4]
 80126b2:	881b      	ldrh	r3, [r3, #0]
 80126b4:	4618      	mov	r0, r3
 80126b6:	f7ff ff53 	bl	8012560 <ptr_to_mem>
 80126ba:	4604      	mov	r4, r0
 80126bc:	68b8      	ldr	r0, [r7, #8]
 80126be:	f7ff ff61 	bl	8012584 <mem_to_ptr>
 80126c2:	4603      	mov	r3, r0
 80126c4:	8063      	strh	r3, [r4, #2]
    }
  }
}
 80126c6:	bf00      	nop
 80126c8:	3714      	adds	r7, #20
 80126ca:	46bd      	mov	sp, r7
 80126cc:	bd90      	pop	{r4, r7, pc}
 80126ce:	bf00      	nop
 80126d0:	20020ef8 	.word	0x20020ef8
 80126d4:	0801ee00 	.word	0x0801ee00
 80126d8:	0801ee30 	.word	0x0801ee30
 80126dc:	0801ee48 	.word	0x0801ee48
 80126e0:	20020efc 	.word	0x20020efc
 80126e4:	0801ee70 	.word	0x0801ee70
 80126e8:	0801ee8c 	.word	0x0801ee8c
 80126ec:	0801eea8 	.word	0x0801eea8
 80126f0:	20020f04 	.word	0x20020f04

080126f4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 80126f4:	b580      	push	{r7, lr}
 80126f6:	b082      	sub	sp, #8
 80126f8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 80126fa:	4b1f      	ldr	r3, [pc, #124]	; (8012778 <mem_init+0x84>)
 80126fc:	3303      	adds	r3, #3
 80126fe:	f023 0303 	bic.w	r3, r3, #3
 8012702:	461a      	mov	r2, r3
 8012704:	4b1d      	ldr	r3, [pc, #116]	; (801277c <mem_init+0x88>)
 8012706:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8012708:	4b1c      	ldr	r3, [pc, #112]	; (801277c <mem_init+0x88>)
 801270a:	681b      	ldr	r3, [r3, #0]
 801270c:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 801270e:	687b      	ldr	r3, [r7, #4]
 8012710:	f242 7210 	movw	r2, #10000	; 0x2710
 8012714:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	2200      	movs	r2, #0
 801271a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 801271c:	687b      	ldr	r3, [r7, #4]
 801271e:	2200      	movs	r2, #0
 8012720:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8012722:	f242 7010 	movw	r0, #10000	; 0x2710
 8012726:	f7ff ff1b 	bl	8012560 <ptr_to_mem>
 801272a:	4603      	mov	r3, r0
 801272c:	4a14      	ldr	r2, [pc, #80]	; (8012780 <mem_init+0x8c>)
 801272e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8012730:	4b13      	ldr	r3, [pc, #76]	; (8012780 <mem_init+0x8c>)
 8012732:	681b      	ldr	r3, [r3, #0]
 8012734:	2201      	movs	r2, #1
 8012736:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8012738:	4b11      	ldr	r3, [pc, #68]	; (8012780 <mem_init+0x8c>)
 801273a:	681b      	ldr	r3, [r3, #0]
 801273c:	f242 7210 	movw	r2, #10000	; 0x2710
 8012740:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8012742:	4b0f      	ldr	r3, [pc, #60]	; (8012780 <mem_init+0x8c>)
 8012744:	681b      	ldr	r3, [r3, #0]
 8012746:	f242 7210 	movw	r2, #10000	; 0x2710
 801274a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 801274c:	4b0b      	ldr	r3, [pc, #44]	; (801277c <mem_init+0x88>)
 801274e:	681b      	ldr	r3, [r3, #0]
 8012750:	4a0c      	ldr	r2, [pc, #48]	; (8012784 <mem_init+0x90>)
 8012752:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8012754:	480c      	ldr	r0, [pc, #48]	; (8012788 <mem_init+0x94>)
 8012756:	f00a f849 	bl	801c7ec <sys_mutex_new>
 801275a:	4603      	mov	r3, r0
 801275c:	2b00      	cmp	r3, #0
 801275e:	d006      	beq.n	801276e <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8012760:	4b0a      	ldr	r3, [pc, #40]	; (801278c <mem_init+0x98>)
 8012762:	f240 221f 	movw	r2, #543	; 0x21f
 8012766:	490a      	ldr	r1, [pc, #40]	; (8012790 <mem_init+0x9c>)
 8012768:	480a      	ldr	r0, [pc, #40]	; (8012794 <mem_init+0xa0>)
 801276a:	f00b fae9 	bl	801dd40 <iprintf>
  }
}
 801276e:	bf00      	nop
 8012770:	3708      	adds	r7, #8
 8012772:	46bd      	mov	sp, r7
 8012774:	bd80      	pop	{r7, pc}
 8012776:	bf00      	nop
 8012778:	2001e7d4 	.word	0x2001e7d4
 801277c:	20020ef8 	.word	0x20020ef8
 8012780:	20020efc 	.word	0x20020efc
 8012784:	20020f04 	.word	0x20020f04
 8012788:	20020f00 	.word	0x20020f00
 801278c:	0801ee00 	.word	0x0801ee00
 8012790:	0801eed4 	.word	0x0801eed4
 8012794:	0801ee48 	.word	0x0801ee48

08012798 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8012798:	b580      	push	{r7, lr}
 801279a:	b086      	sub	sp, #24
 801279c:	af00      	add	r7, sp, #0
 801279e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 80127a0:	6878      	ldr	r0, [r7, #4]
 80127a2:	f7ff feef 	bl	8012584 <mem_to_ptr>
 80127a6:	4603      	mov	r3, r0
 80127a8:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 80127aa:	687b      	ldr	r3, [r7, #4]
 80127ac:	881b      	ldrh	r3, [r3, #0]
 80127ae:	4618      	mov	r0, r3
 80127b0:	f7ff fed6 	bl	8012560 <ptr_to_mem>
 80127b4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 80127b6:	687b      	ldr	r3, [r7, #4]
 80127b8:	885b      	ldrh	r3, [r3, #2]
 80127ba:	4618      	mov	r0, r3
 80127bc:	f7ff fed0 	bl	8012560 <ptr_to_mem>
 80127c0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80127c2:	687b      	ldr	r3, [r7, #4]
 80127c4:	881b      	ldrh	r3, [r3, #0]
 80127c6:	f242 7210 	movw	r2, #10000	; 0x2710
 80127ca:	4293      	cmp	r3, r2
 80127cc:	d819      	bhi.n	8012802 <mem_link_valid+0x6a>
 80127ce:	687b      	ldr	r3, [r7, #4]
 80127d0:	885b      	ldrh	r3, [r3, #2]
 80127d2:	f242 7210 	movw	r2, #10000	; 0x2710
 80127d6:	4293      	cmp	r3, r2
 80127d8:	d813      	bhi.n	8012802 <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80127da:	687b      	ldr	r3, [r7, #4]
 80127dc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 80127de:	8afa      	ldrh	r2, [r7, #22]
 80127e0:	429a      	cmp	r2, r3
 80127e2:	d004      	beq.n	80127ee <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80127e4:	68fb      	ldr	r3, [r7, #12]
 80127e6:	881b      	ldrh	r3, [r3, #0]
 80127e8:	8afa      	ldrh	r2, [r7, #22]
 80127ea:	429a      	cmp	r2, r3
 80127ec:	d109      	bne.n	8012802 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80127ee:	4b08      	ldr	r3, [pc, #32]	; (8012810 <mem_link_valid+0x78>)
 80127f0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 80127f2:	693a      	ldr	r2, [r7, #16]
 80127f4:	429a      	cmp	r2, r3
 80127f6:	d006      	beq.n	8012806 <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 80127f8:	693b      	ldr	r3, [r7, #16]
 80127fa:	885b      	ldrh	r3, [r3, #2]
 80127fc:	8afa      	ldrh	r2, [r7, #22]
 80127fe:	429a      	cmp	r2, r3
 8012800:	d001      	beq.n	8012806 <mem_link_valid+0x6e>
    return 0;
 8012802:	2300      	movs	r3, #0
 8012804:	e000      	b.n	8012808 <mem_link_valid+0x70>
  }
  return 1;
 8012806:	2301      	movs	r3, #1
}
 8012808:	4618      	mov	r0, r3
 801280a:	3718      	adds	r7, #24
 801280c:	46bd      	mov	sp, r7
 801280e:	bd80      	pop	{r7, pc}
 8012810:	20020efc 	.word	0x20020efc

08012814 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8012814:	b580      	push	{r7, lr}
 8012816:	b088      	sub	sp, #32
 8012818:	af00      	add	r7, sp, #0
 801281a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 801281c:	687b      	ldr	r3, [r7, #4]
 801281e:	2b00      	cmp	r3, #0
 8012820:	d070      	beq.n	8012904 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8012822:	687b      	ldr	r3, [r7, #4]
 8012824:	f003 0303 	and.w	r3, r3, #3
 8012828:	2b00      	cmp	r3, #0
 801282a:	d00d      	beq.n	8012848 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 801282c:	4b37      	ldr	r3, [pc, #220]	; (801290c <mem_free+0xf8>)
 801282e:	f240 2273 	movw	r2, #627	; 0x273
 8012832:	4937      	ldr	r1, [pc, #220]	; (8012910 <mem_free+0xfc>)
 8012834:	4837      	ldr	r0, [pc, #220]	; (8012914 <mem_free+0x100>)
 8012836:	f00b fa83 	bl	801dd40 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801283a:	f00a f835 	bl	801c8a8 <sys_arch_protect>
 801283e:	60f8      	str	r0, [r7, #12]
 8012840:	68f8      	ldr	r0, [r7, #12]
 8012842:	f00a f83f 	bl	801c8c4 <sys_arch_unprotect>
    return;
 8012846:	e05e      	b.n	8012906 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8012848:	687b      	ldr	r3, [r7, #4]
 801284a:	3b08      	subs	r3, #8
 801284c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801284e:	4b32      	ldr	r3, [pc, #200]	; (8012918 <mem_free+0x104>)
 8012850:	681b      	ldr	r3, [r3, #0]
 8012852:	69fa      	ldr	r2, [r7, #28]
 8012854:	429a      	cmp	r2, r3
 8012856:	d306      	bcc.n	8012866 <mem_free+0x52>
 8012858:	687b      	ldr	r3, [r7, #4]
 801285a:	f103 020c 	add.w	r2, r3, #12
 801285e:	4b2f      	ldr	r3, [pc, #188]	; (801291c <mem_free+0x108>)
 8012860:	681b      	ldr	r3, [r3, #0]
 8012862:	429a      	cmp	r2, r3
 8012864:	d90d      	bls.n	8012882 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8012866:	4b29      	ldr	r3, [pc, #164]	; (801290c <mem_free+0xf8>)
 8012868:	f240 227f 	movw	r2, #639	; 0x27f
 801286c:	492c      	ldr	r1, [pc, #176]	; (8012920 <mem_free+0x10c>)
 801286e:	4829      	ldr	r0, [pc, #164]	; (8012914 <mem_free+0x100>)
 8012870:	f00b fa66 	bl	801dd40 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012874:	f00a f818 	bl	801c8a8 <sys_arch_protect>
 8012878:	6138      	str	r0, [r7, #16]
 801287a:	6938      	ldr	r0, [r7, #16]
 801287c:	f00a f822 	bl	801c8c4 <sys_arch_unprotect>
    return;
 8012880:	e041      	b.n	8012906 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8012882:	4828      	ldr	r0, [pc, #160]	; (8012924 <mem_free+0x110>)
 8012884:	f009 ffce 	bl	801c824 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8012888:	69fb      	ldr	r3, [r7, #28]
 801288a:	791b      	ldrb	r3, [r3, #4]
 801288c:	2b00      	cmp	r3, #0
 801288e:	d110      	bne.n	80128b2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8012890:	4b1e      	ldr	r3, [pc, #120]	; (801290c <mem_free+0xf8>)
 8012892:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8012896:	4924      	ldr	r1, [pc, #144]	; (8012928 <mem_free+0x114>)
 8012898:	481e      	ldr	r0, [pc, #120]	; (8012914 <mem_free+0x100>)
 801289a:	f00b fa51 	bl	801dd40 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801289e:	4821      	ldr	r0, [pc, #132]	; (8012924 <mem_free+0x110>)
 80128a0:	f009 ffcf 	bl	801c842 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80128a4:	f00a f800 	bl	801c8a8 <sys_arch_protect>
 80128a8:	6178      	str	r0, [r7, #20]
 80128aa:	6978      	ldr	r0, [r7, #20]
 80128ac:	f00a f80a 	bl	801c8c4 <sys_arch_unprotect>
    return;
 80128b0:	e029      	b.n	8012906 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80128b2:	69f8      	ldr	r0, [r7, #28]
 80128b4:	f7ff ff70 	bl	8012798 <mem_link_valid>
 80128b8:	4603      	mov	r3, r0
 80128ba:	2b00      	cmp	r3, #0
 80128bc:	d110      	bne.n	80128e0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80128be:	4b13      	ldr	r3, [pc, #76]	; (801290c <mem_free+0xf8>)
 80128c0:	f240 2295 	movw	r2, #661	; 0x295
 80128c4:	4919      	ldr	r1, [pc, #100]	; (801292c <mem_free+0x118>)
 80128c6:	4813      	ldr	r0, [pc, #76]	; (8012914 <mem_free+0x100>)
 80128c8:	f00b fa3a 	bl	801dd40 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80128cc:	4815      	ldr	r0, [pc, #84]	; (8012924 <mem_free+0x110>)
 80128ce:	f009 ffb8 	bl	801c842 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80128d2:	f009 ffe9 	bl	801c8a8 <sys_arch_protect>
 80128d6:	61b8      	str	r0, [r7, #24]
 80128d8:	69b8      	ldr	r0, [r7, #24]
 80128da:	f009 fff3 	bl	801c8c4 <sys_arch_unprotect>
    return;
 80128de:	e012      	b.n	8012906 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 80128e0:	69fb      	ldr	r3, [r7, #28]
 80128e2:	2200      	movs	r2, #0
 80128e4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80128e6:	4b12      	ldr	r3, [pc, #72]	; (8012930 <mem_free+0x11c>)
 80128e8:	681b      	ldr	r3, [r3, #0]
 80128ea:	69fa      	ldr	r2, [r7, #28]
 80128ec:	429a      	cmp	r2, r3
 80128ee:	d202      	bcs.n	80128f6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80128f0:	4a0f      	ldr	r2, [pc, #60]	; (8012930 <mem_free+0x11c>)
 80128f2:	69fb      	ldr	r3, [r7, #28]
 80128f4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80128f6:	69f8      	ldr	r0, [r7, #28]
 80128f8:	f7ff fe56 	bl	80125a8 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80128fc:	4809      	ldr	r0, [pc, #36]	; (8012924 <mem_free+0x110>)
 80128fe:	f009 ffa0 	bl	801c842 <sys_mutex_unlock>
 8012902:	e000      	b.n	8012906 <mem_free+0xf2>
    return;
 8012904:	bf00      	nop
}
 8012906:	3720      	adds	r7, #32
 8012908:	46bd      	mov	sp, r7
 801290a:	bd80      	pop	{r7, pc}
 801290c:	0801ee00 	.word	0x0801ee00
 8012910:	0801eef0 	.word	0x0801eef0
 8012914:	0801ee48 	.word	0x0801ee48
 8012918:	20020ef8 	.word	0x20020ef8
 801291c:	20020efc 	.word	0x20020efc
 8012920:	0801ef14 	.word	0x0801ef14
 8012924:	20020f00 	.word	0x20020f00
 8012928:	0801ef30 	.word	0x0801ef30
 801292c:	0801ef58 	.word	0x0801ef58
 8012930:	20020f04 	.word	0x20020f04

08012934 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8012934:	b580      	push	{r7, lr}
 8012936:	b088      	sub	sp, #32
 8012938:	af00      	add	r7, sp, #0
 801293a:	6078      	str	r0, [r7, #4]
 801293c:	460b      	mov	r3, r1
 801293e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8012940:	887b      	ldrh	r3, [r7, #2]
 8012942:	3303      	adds	r3, #3
 8012944:	b29b      	uxth	r3, r3
 8012946:	f023 0303 	bic.w	r3, r3, #3
 801294a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 801294c:	8bfb      	ldrh	r3, [r7, #30]
 801294e:	2b0b      	cmp	r3, #11
 8012950:	d801      	bhi.n	8012956 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8012952:	230c      	movs	r3, #12
 8012954:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8012956:	8bfb      	ldrh	r3, [r7, #30]
 8012958:	f242 7210 	movw	r2, #10000	; 0x2710
 801295c:	4293      	cmp	r3, r2
 801295e:	d803      	bhi.n	8012968 <mem_trim+0x34>
 8012960:	8bfa      	ldrh	r2, [r7, #30]
 8012962:	887b      	ldrh	r3, [r7, #2]
 8012964:	429a      	cmp	r2, r3
 8012966:	d201      	bcs.n	801296c <mem_trim+0x38>
    return NULL;
 8012968:	2300      	movs	r3, #0
 801296a:	e0dc      	b.n	8012b26 <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801296c:	4b70      	ldr	r3, [pc, #448]	; (8012b30 <mem_trim+0x1fc>)
 801296e:	681b      	ldr	r3, [r3, #0]
 8012970:	687a      	ldr	r2, [r7, #4]
 8012972:	429a      	cmp	r2, r3
 8012974:	d304      	bcc.n	8012980 <mem_trim+0x4c>
 8012976:	4b6f      	ldr	r3, [pc, #444]	; (8012b34 <mem_trim+0x200>)
 8012978:	681b      	ldr	r3, [r3, #0]
 801297a:	687a      	ldr	r2, [r7, #4]
 801297c:	429a      	cmp	r2, r3
 801297e:	d306      	bcc.n	801298e <mem_trim+0x5a>
 8012980:	4b6d      	ldr	r3, [pc, #436]	; (8012b38 <mem_trim+0x204>)
 8012982:	f240 22d1 	movw	r2, #721	; 0x2d1
 8012986:	496d      	ldr	r1, [pc, #436]	; (8012b3c <mem_trim+0x208>)
 8012988:	486d      	ldr	r0, [pc, #436]	; (8012b40 <mem_trim+0x20c>)
 801298a:	f00b f9d9 	bl	801dd40 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801298e:	4b68      	ldr	r3, [pc, #416]	; (8012b30 <mem_trim+0x1fc>)
 8012990:	681b      	ldr	r3, [r3, #0]
 8012992:	687a      	ldr	r2, [r7, #4]
 8012994:	429a      	cmp	r2, r3
 8012996:	d304      	bcc.n	80129a2 <mem_trim+0x6e>
 8012998:	4b66      	ldr	r3, [pc, #408]	; (8012b34 <mem_trim+0x200>)
 801299a:	681b      	ldr	r3, [r3, #0]
 801299c:	687a      	ldr	r2, [r7, #4]
 801299e:	429a      	cmp	r2, r3
 80129a0:	d307      	bcc.n	80129b2 <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80129a2:	f009 ff81 	bl	801c8a8 <sys_arch_protect>
 80129a6:	60b8      	str	r0, [r7, #8]
 80129a8:	68b8      	ldr	r0, [r7, #8]
 80129aa:	f009 ff8b 	bl	801c8c4 <sys_arch_unprotect>
    return rmem;
 80129ae:	687b      	ldr	r3, [r7, #4]
 80129b0:	e0b9      	b.n	8012b26 <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80129b2:	687b      	ldr	r3, [r7, #4]
 80129b4:	3b08      	subs	r3, #8
 80129b6:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80129b8:	69b8      	ldr	r0, [r7, #24]
 80129ba:	f7ff fde3 	bl	8012584 <mem_to_ptr>
 80129be:	4603      	mov	r3, r0
 80129c0:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80129c2:	69bb      	ldr	r3, [r7, #24]
 80129c4:	881a      	ldrh	r2, [r3, #0]
 80129c6:	8afb      	ldrh	r3, [r7, #22]
 80129c8:	1ad3      	subs	r3, r2, r3
 80129ca:	b29b      	uxth	r3, r3
 80129cc:	3b08      	subs	r3, #8
 80129ce:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80129d0:	8bfa      	ldrh	r2, [r7, #30]
 80129d2:	8abb      	ldrh	r3, [r7, #20]
 80129d4:	429a      	cmp	r2, r3
 80129d6:	d906      	bls.n	80129e6 <mem_trim+0xb2>
 80129d8:	4b57      	ldr	r3, [pc, #348]	; (8012b38 <mem_trim+0x204>)
 80129da:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80129de:	4959      	ldr	r1, [pc, #356]	; (8012b44 <mem_trim+0x210>)
 80129e0:	4857      	ldr	r0, [pc, #348]	; (8012b40 <mem_trim+0x20c>)
 80129e2:	f00b f9ad 	bl	801dd40 <iprintf>
  if (newsize > size) {
 80129e6:	8bfa      	ldrh	r2, [r7, #30]
 80129e8:	8abb      	ldrh	r3, [r7, #20]
 80129ea:	429a      	cmp	r2, r3
 80129ec:	d901      	bls.n	80129f2 <mem_trim+0xbe>
    /* not supported */
    return NULL;
 80129ee:	2300      	movs	r3, #0
 80129f0:	e099      	b.n	8012b26 <mem_trim+0x1f2>
  }
  if (newsize == size) {
 80129f2:	8bfa      	ldrh	r2, [r7, #30]
 80129f4:	8abb      	ldrh	r3, [r7, #20]
 80129f6:	429a      	cmp	r2, r3
 80129f8:	d101      	bne.n	80129fe <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 80129fa:	687b      	ldr	r3, [r7, #4]
 80129fc:	e093      	b.n	8012b26 <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80129fe:	4852      	ldr	r0, [pc, #328]	; (8012b48 <mem_trim+0x214>)
 8012a00:	f009 ff10 	bl	801c824 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 8012a04:	69bb      	ldr	r3, [r7, #24]
 8012a06:	881b      	ldrh	r3, [r3, #0]
 8012a08:	4618      	mov	r0, r3
 8012a0a:	f7ff fda9 	bl	8012560 <ptr_to_mem>
 8012a0e:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8012a10:	693b      	ldr	r3, [r7, #16]
 8012a12:	791b      	ldrb	r3, [r3, #4]
 8012a14:	2b00      	cmp	r3, #0
 8012a16:	d141      	bne.n	8012a9c <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8012a18:	69bb      	ldr	r3, [r7, #24]
 8012a1a:	881b      	ldrh	r3, [r3, #0]
 8012a1c:	f242 7210 	movw	r2, #10000	; 0x2710
 8012a20:	4293      	cmp	r3, r2
 8012a22:	d106      	bne.n	8012a32 <mem_trim+0xfe>
 8012a24:	4b44      	ldr	r3, [pc, #272]	; (8012b38 <mem_trim+0x204>)
 8012a26:	f240 22f5 	movw	r2, #757	; 0x2f5
 8012a2a:	4948      	ldr	r1, [pc, #288]	; (8012b4c <mem_trim+0x218>)
 8012a2c:	4844      	ldr	r0, [pc, #272]	; (8012b40 <mem_trim+0x20c>)
 8012a2e:	f00b f987 	bl	801dd40 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8012a32:	693b      	ldr	r3, [r7, #16]
 8012a34:	881b      	ldrh	r3, [r3, #0]
 8012a36:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8012a38:	8afa      	ldrh	r2, [r7, #22]
 8012a3a:	8bfb      	ldrh	r3, [r7, #30]
 8012a3c:	4413      	add	r3, r2
 8012a3e:	b29b      	uxth	r3, r3
 8012a40:	3308      	adds	r3, #8
 8012a42:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8012a44:	4b42      	ldr	r3, [pc, #264]	; (8012b50 <mem_trim+0x21c>)
 8012a46:	681b      	ldr	r3, [r3, #0]
 8012a48:	693a      	ldr	r2, [r7, #16]
 8012a4a:	429a      	cmp	r2, r3
 8012a4c:	d106      	bne.n	8012a5c <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 8012a4e:	89fb      	ldrh	r3, [r7, #14]
 8012a50:	4618      	mov	r0, r3
 8012a52:	f7ff fd85 	bl	8012560 <ptr_to_mem>
 8012a56:	4603      	mov	r3, r0
 8012a58:	4a3d      	ldr	r2, [pc, #244]	; (8012b50 <mem_trim+0x21c>)
 8012a5a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 8012a5c:	89fb      	ldrh	r3, [r7, #14]
 8012a5e:	4618      	mov	r0, r3
 8012a60:	f7ff fd7e 	bl	8012560 <ptr_to_mem>
 8012a64:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8012a66:	693b      	ldr	r3, [r7, #16]
 8012a68:	2200      	movs	r2, #0
 8012a6a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 8012a6c:	693b      	ldr	r3, [r7, #16]
 8012a6e:	89ba      	ldrh	r2, [r7, #12]
 8012a70:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8012a72:	693b      	ldr	r3, [r7, #16]
 8012a74:	8afa      	ldrh	r2, [r7, #22]
 8012a76:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8012a78:	69bb      	ldr	r3, [r7, #24]
 8012a7a:	89fa      	ldrh	r2, [r7, #14]
 8012a7c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8012a7e:	693b      	ldr	r3, [r7, #16]
 8012a80:	881b      	ldrh	r3, [r3, #0]
 8012a82:	f242 7210 	movw	r2, #10000	; 0x2710
 8012a86:	4293      	cmp	r3, r2
 8012a88:	d049      	beq.n	8012b1e <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8012a8a:	693b      	ldr	r3, [r7, #16]
 8012a8c:	881b      	ldrh	r3, [r3, #0]
 8012a8e:	4618      	mov	r0, r3
 8012a90:	f7ff fd66 	bl	8012560 <ptr_to_mem>
 8012a94:	4602      	mov	r2, r0
 8012a96:	89fb      	ldrh	r3, [r7, #14]
 8012a98:	8053      	strh	r3, [r2, #2]
 8012a9a:	e040      	b.n	8012b1e <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 8012a9c:	8bfb      	ldrh	r3, [r7, #30]
 8012a9e:	f103 0214 	add.w	r2, r3, #20
 8012aa2:	8abb      	ldrh	r3, [r7, #20]
 8012aa4:	429a      	cmp	r2, r3
 8012aa6:	d83a      	bhi.n	8012b1e <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8012aa8:	8afa      	ldrh	r2, [r7, #22]
 8012aaa:	8bfb      	ldrh	r3, [r7, #30]
 8012aac:	4413      	add	r3, r2
 8012aae:	b29b      	uxth	r3, r3
 8012ab0:	3308      	adds	r3, #8
 8012ab2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8012ab4:	69bb      	ldr	r3, [r7, #24]
 8012ab6:	881b      	ldrh	r3, [r3, #0]
 8012ab8:	f242 7210 	movw	r2, #10000	; 0x2710
 8012abc:	4293      	cmp	r3, r2
 8012abe:	d106      	bne.n	8012ace <mem_trim+0x19a>
 8012ac0:	4b1d      	ldr	r3, [pc, #116]	; (8012b38 <mem_trim+0x204>)
 8012ac2:	f240 3216 	movw	r2, #790	; 0x316
 8012ac6:	4921      	ldr	r1, [pc, #132]	; (8012b4c <mem_trim+0x218>)
 8012ac8:	481d      	ldr	r0, [pc, #116]	; (8012b40 <mem_trim+0x20c>)
 8012aca:	f00b f939 	bl	801dd40 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 8012ace:	89fb      	ldrh	r3, [r7, #14]
 8012ad0:	4618      	mov	r0, r3
 8012ad2:	f7ff fd45 	bl	8012560 <ptr_to_mem>
 8012ad6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 8012ad8:	4b1d      	ldr	r3, [pc, #116]	; (8012b50 <mem_trim+0x21c>)
 8012ada:	681b      	ldr	r3, [r3, #0]
 8012adc:	693a      	ldr	r2, [r7, #16]
 8012ade:	429a      	cmp	r2, r3
 8012ae0:	d202      	bcs.n	8012ae8 <mem_trim+0x1b4>
      lfree = mem2;
 8012ae2:	4a1b      	ldr	r2, [pc, #108]	; (8012b50 <mem_trim+0x21c>)
 8012ae4:	693b      	ldr	r3, [r7, #16]
 8012ae6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 8012ae8:	693b      	ldr	r3, [r7, #16]
 8012aea:	2200      	movs	r2, #0
 8012aec:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 8012aee:	69bb      	ldr	r3, [r7, #24]
 8012af0:	881a      	ldrh	r2, [r3, #0]
 8012af2:	693b      	ldr	r3, [r7, #16]
 8012af4:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 8012af6:	693b      	ldr	r3, [r7, #16]
 8012af8:	8afa      	ldrh	r2, [r7, #22]
 8012afa:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 8012afc:	69bb      	ldr	r3, [r7, #24]
 8012afe:	89fa      	ldrh	r2, [r7, #14]
 8012b00:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 8012b02:	693b      	ldr	r3, [r7, #16]
 8012b04:	881b      	ldrh	r3, [r3, #0]
 8012b06:	f242 7210 	movw	r2, #10000	; 0x2710
 8012b0a:	4293      	cmp	r3, r2
 8012b0c:	d007      	beq.n	8012b1e <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 8012b0e:	693b      	ldr	r3, [r7, #16]
 8012b10:	881b      	ldrh	r3, [r3, #0]
 8012b12:	4618      	mov	r0, r3
 8012b14:	f7ff fd24 	bl	8012560 <ptr_to_mem>
 8012b18:	4602      	mov	r2, r0
 8012b1a:	89fb      	ldrh	r3, [r7, #14]
 8012b1c:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 8012b1e:	480a      	ldr	r0, [pc, #40]	; (8012b48 <mem_trim+0x214>)
 8012b20:	f009 fe8f 	bl	801c842 <sys_mutex_unlock>
  return rmem;
 8012b24:	687b      	ldr	r3, [r7, #4]
}
 8012b26:	4618      	mov	r0, r3
 8012b28:	3720      	adds	r7, #32
 8012b2a:	46bd      	mov	sp, r7
 8012b2c:	bd80      	pop	{r7, pc}
 8012b2e:	bf00      	nop
 8012b30:	20020ef8 	.word	0x20020ef8
 8012b34:	20020efc 	.word	0x20020efc
 8012b38:	0801ee00 	.word	0x0801ee00
 8012b3c:	0801ef8c 	.word	0x0801ef8c
 8012b40:	0801ee48 	.word	0x0801ee48
 8012b44:	0801efa4 	.word	0x0801efa4
 8012b48:	20020f00 	.word	0x20020f00
 8012b4c:	0801efc4 	.word	0x0801efc4
 8012b50:	20020f04 	.word	0x20020f04

08012b54 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8012b54:	b580      	push	{r7, lr}
 8012b56:	b088      	sub	sp, #32
 8012b58:	af00      	add	r7, sp, #0
 8012b5a:	4603      	mov	r3, r0
 8012b5c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 8012b5e:	88fb      	ldrh	r3, [r7, #6]
 8012b60:	2b00      	cmp	r3, #0
 8012b62:	d101      	bne.n	8012b68 <mem_malloc+0x14>
    return NULL;
 8012b64:	2300      	movs	r3, #0
 8012b66:	e0e6      	b.n	8012d36 <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8012b68:	88fb      	ldrh	r3, [r7, #6]
 8012b6a:	3303      	adds	r3, #3
 8012b6c:	b29b      	uxth	r3, r3
 8012b6e:	f023 0303 	bic.w	r3, r3, #3
 8012b72:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8012b74:	8bbb      	ldrh	r3, [r7, #28]
 8012b76:	2b0b      	cmp	r3, #11
 8012b78:	d801      	bhi.n	8012b7e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 8012b7a:	230c      	movs	r3, #12
 8012b7c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 8012b7e:	8bbb      	ldrh	r3, [r7, #28]
 8012b80:	f242 7210 	movw	r2, #10000	; 0x2710
 8012b84:	4293      	cmp	r3, r2
 8012b86:	d803      	bhi.n	8012b90 <mem_malloc+0x3c>
 8012b88:	8bba      	ldrh	r2, [r7, #28]
 8012b8a:	88fb      	ldrh	r3, [r7, #6]
 8012b8c:	429a      	cmp	r2, r3
 8012b8e:	d201      	bcs.n	8012b94 <mem_malloc+0x40>
    return NULL;
 8012b90:	2300      	movs	r3, #0
 8012b92:	e0d0      	b.n	8012d36 <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8012b94:	486a      	ldr	r0, [pc, #424]	; (8012d40 <mem_malloc+0x1ec>)
 8012b96:	f009 fe45 	bl	801c824 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8012b9a:	4b6a      	ldr	r3, [pc, #424]	; (8012d44 <mem_malloc+0x1f0>)
 8012b9c:	681b      	ldr	r3, [r3, #0]
 8012b9e:	4618      	mov	r0, r3
 8012ba0:	f7ff fcf0 	bl	8012584 <mem_to_ptr>
 8012ba4:	4603      	mov	r3, r0
 8012ba6:	83fb      	strh	r3, [r7, #30]
 8012ba8:	e0b9      	b.n	8012d1e <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 8012baa:	8bfb      	ldrh	r3, [r7, #30]
 8012bac:	4618      	mov	r0, r3
 8012bae:	f7ff fcd7 	bl	8012560 <ptr_to_mem>
 8012bb2:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 8012bb4:	697b      	ldr	r3, [r7, #20]
 8012bb6:	791b      	ldrb	r3, [r3, #4]
 8012bb8:	2b00      	cmp	r3, #0
 8012bba:	f040 80a9 	bne.w	8012d10 <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 8012bbe:	697b      	ldr	r3, [r7, #20]
 8012bc0:	881b      	ldrh	r3, [r3, #0]
 8012bc2:	461a      	mov	r2, r3
 8012bc4:	8bfb      	ldrh	r3, [r7, #30]
 8012bc6:	1ad3      	subs	r3, r2, r3
 8012bc8:	f1a3 0208 	sub.w	r2, r3, #8
 8012bcc:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 8012bce:	429a      	cmp	r2, r3
 8012bd0:	f0c0 809e 	bcc.w	8012d10 <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 8012bd4:	697b      	ldr	r3, [r7, #20]
 8012bd6:	881b      	ldrh	r3, [r3, #0]
 8012bd8:	461a      	mov	r2, r3
 8012bda:	8bfb      	ldrh	r3, [r7, #30]
 8012bdc:	1ad3      	subs	r3, r2, r3
 8012bde:	f1a3 0208 	sub.w	r2, r3, #8
 8012be2:	8bbb      	ldrh	r3, [r7, #28]
 8012be4:	3314      	adds	r3, #20
 8012be6:	429a      	cmp	r2, r3
 8012be8:	d335      	bcc.n	8012c56 <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 8012bea:	8bfa      	ldrh	r2, [r7, #30]
 8012bec:	8bbb      	ldrh	r3, [r7, #28]
 8012bee:	4413      	add	r3, r2
 8012bf0:	b29b      	uxth	r3, r3
 8012bf2:	3308      	adds	r3, #8
 8012bf4:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 8012bf6:	8a7b      	ldrh	r3, [r7, #18]
 8012bf8:	f242 7210 	movw	r2, #10000	; 0x2710
 8012bfc:	4293      	cmp	r3, r2
 8012bfe:	d106      	bne.n	8012c0e <mem_malloc+0xba>
 8012c00:	4b51      	ldr	r3, [pc, #324]	; (8012d48 <mem_malloc+0x1f4>)
 8012c02:	f240 3287 	movw	r2, #903	; 0x387
 8012c06:	4951      	ldr	r1, [pc, #324]	; (8012d4c <mem_malloc+0x1f8>)
 8012c08:	4851      	ldr	r0, [pc, #324]	; (8012d50 <mem_malloc+0x1fc>)
 8012c0a:	f00b f899 	bl	801dd40 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 8012c0e:	8a7b      	ldrh	r3, [r7, #18]
 8012c10:	4618      	mov	r0, r3
 8012c12:	f7ff fca5 	bl	8012560 <ptr_to_mem>
 8012c16:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8012c18:	68fb      	ldr	r3, [r7, #12]
 8012c1a:	2200      	movs	r2, #0
 8012c1c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 8012c1e:	697b      	ldr	r3, [r7, #20]
 8012c20:	881a      	ldrh	r2, [r3, #0]
 8012c22:	68fb      	ldr	r3, [r7, #12]
 8012c24:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8012c26:	68fb      	ldr	r3, [r7, #12]
 8012c28:	8bfa      	ldrh	r2, [r7, #30]
 8012c2a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 8012c2c:	697b      	ldr	r3, [r7, #20]
 8012c2e:	8a7a      	ldrh	r2, [r7, #18]
 8012c30:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8012c32:	697b      	ldr	r3, [r7, #20]
 8012c34:	2201      	movs	r2, #1
 8012c36:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	881b      	ldrh	r3, [r3, #0]
 8012c3c:	f242 7210 	movw	r2, #10000	; 0x2710
 8012c40:	4293      	cmp	r3, r2
 8012c42:	d00b      	beq.n	8012c5c <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	881b      	ldrh	r3, [r3, #0]
 8012c48:	4618      	mov	r0, r3
 8012c4a:	f7ff fc89 	bl	8012560 <ptr_to_mem>
 8012c4e:	4602      	mov	r2, r0
 8012c50:	8a7b      	ldrh	r3, [r7, #18]
 8012c52:	8053      	strh	r3, [r2, #2]
 8012c54:	e002      	b.n	8012c5c <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8012c56:	697b      	ldr	r3, [r7, #20]
 8012c58:	2201      	movs	r2, #1
 8012c5a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 8012c5c:	4b39      	ldr	r3, [pc, #228]	; (8012d44 <mem_malloc+0x1f0>)
 8012c5e:	681b      	ldr	r3, [r3, #0]
 8012c60:	697a      	ldr	r2, [r7, #20]
 8012c62:	429a      	cmp	r2, r3
 8012c64:	d127      	bne.n	8012cb6 <mem_malloc+0x162>
          struct mem *cur = lfree;
 8012c66:	4b37      	ldr	r3, [pc, #220]	; (8012d44 <mem_malloc+0x1f0>)
 8012c68:	681b      	ldr	r3, [r3, #0]
 8012c6a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 8012c6c:	e005      	b.n	8012c7a <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 8012c6e:	69bb      	ldr	r3, [r7, #24]
 8012c70:	881b      	ldrh	r3, [r3, #0]
 8012c72:	4618      	mov	r0, r3
 8012c74:	f7ff fc74 	bl	8012560 <ptr_to_mem>
 8012c78:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 8012c7a:	69bb      	ldr	r3, [r7, #24]
 8012c7c:	791b      	ldrb	r3, [r3, #4]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d004      	beq.n	8012c8c <mem_malloc+0x138>
 8012c82:	4b34      	ldr	r3, [pc, #208]	; (8012d54 <mem_malloc+0x200>)
 8012c84:	681b      	ldr	r3, [r3, #0]
 8012c86:	69ba      	ldr	r2, [r7, #24]
 8012c88:	429a      	cmp	r2, r3
 8012c8a:	d1f0      	bne.n	8012c6e <mem_malloc+0x11a>
          }
          lfree = cur;
 8012c8c:	4a2d      	ldr	r2, [pc, #180]	; (8012d44 <mem_malloc+0x1f0>)
 8012c8e:	69bb      	ldr	r3, [r7, #24]
 8012c90:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8012c92:	4b2c      	ldr	r3, [pc, #176]	; (8012d44 <mem_malloc+0x1f0>)
 8012c94:	681a      	ldr	r2, [r3, #0]
 8012c96:	4b2f      	ldr	r3, [pc, #188]	; (8012d54 <mem_malloc+0x200>)
 8012c98:	681b      	ldr	r3, [r3, #0]
 8012c9a:	429a      	cmp	r2, r3
 8012c9c:	d00b      	beq.n	8012cb6 <mem_malloc+0x162>
 8012c9e:	4b29      	ldr	r3, [pc, #164]	; (8012d44 <mem_malloc+0x1f0>)
 8012ca0:	681b      	ldr	r3, [r3, #0]
 8012ca2:	791b      	ldrb	r3, [r3, #4]
 8012ca4:	2b00      	cmp	r3, #0
 8012ca6:	d006      	beq.n	8012cb6 <mem_malloc+0x162>
 8012ca8:	4b27      	ldr	r3, [pc, #156]	; (8012d48 <mem_malloc+0x1f4>)
 8012caa:	f240 32b5 	movw	r2, #949	; 0x3b5
 8012cae:	492a      	ldr	r1, [pc, #168]	; (8012d58 <mem_malloc+0x204>)
 8012cb0:	4827      	ldr	r0, [pc, #156]	; (8012d50 <mem_malloc+0x1fc>)
 8012cb2:	f00b f845 	bl	801dd40 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 8012cb6:	4822      	ldr	r0, [pc, #136]	; (8012d40 <mem_malloc+0x1ec>)
 8012cb8:	f009 fdc3 	bl	801c842 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 8012cbc:	8bba      	ldrh	r2, [r7, #28]
 8012cbe:	697b      	ldr	r3, [r7, #20]
 8012cc0:	4413      	add	r3, r2
 8012cc2:	3308      	adds	r3, #8
 8012cc4:	4a23      	ldr	r2, [pc, #140]	; (8012d54 <mem_malloc+0x200>)
 8012cc6:	6812      	ldr	r2, [r2, #0]
 8012cc8:	4293      	cmp	r3, r2
 8012cca:	d906      	bls.n	8012cda <mem_malloc+0x186>
 8012ccc:	4b1e      	ldr	r3, [pc, #120]	; (8012d48 <mem_malloc+0x1f4>)
 8012cce:	f240 32b9 	movw	r2, #953	; 0x3b9
 8012cd2:	4922      	ldr	r1, [pc, #136]	; (8012d5c <mem_malloc+0x208>)
 8012cd4:	481e      	ldr	r0, [pc, #120]	; (8012d50 <mem_malloc+0x1fc>)
 8012cd6:	f00b f833 	bl	801dd40 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 8012cda:	697b      	ldr	r3, [r7, #20]
 8012cdc:	f003 0303 	and.w	r3, r3, #3
 8012ce0:	2b00      	cmp	r3, #0
 8012ce2:	d006      	beq.n	8012cf2 <mem_malloc+0x19e>
 8012ce4:	4b18      	ldr	r3, [pc, #96]	; (8012d48 <mem_malloc+0x1f4>)
 8012ce6:	f240 32bb 	movw	r2, #955	; 0x3bb
 8012cea:	491d      	ldr	r1, [pc, #116]	; (8012d60 <mem_malloc+0x20c>)
 8012cec:	4818      	ldr	r0, [pc, #96]	; (8012d50 <mem_malloc+0x1fc>)
 8012cee:	f00b f827 	bl	801dd40 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 8012cf2:	697b      	ldr	r3, [r7, #20]
 8012cf4:	f003 0303 	and.w	r3, r3, #3
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d006      	beq.n	8012d0a <mem_malloc+0x1b6>
 8012cfc:	4b12      	ldr	r3, [pc, #72]	; (8012d48 <mem_malloc+0x1f4>)
 8012cfe:	f240 32bd 	movw	r2, #957	; 0x3bd
 8012d02:	4918      	ldr	r1, [pc, #96]	; (8012d64 <mem_malloc+0x210>)
 8012d04:	4812      	ldr	r0, [pc, #72]	; (8012d50 <mem_malloc+0x1fc>)
 8012d06:	f00b f81b 	bl	801dd40 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 8012d0a:	697b      	ldr	r3, [r7, #20]
 8012d0c:	3308      	adds	r3, #8
 8012d0e:	e012      	b.n	8012d36 <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 8012d10:	8bfb      	ldrh	r3, [r7, #30]
 8012d12:	4618      	mov	r0, r3
 8012d14:	f7ff fc24 	bl	8012560 <ptr_to_mem>
 8012d18:	4603      	mov	r3, r0
 8012d1a:	881b      	ldrh	r3, [r3, #0]
 8012d1c:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 8012d1e:	8bfa      	ldrh	r2, [r7, #30]
 8012d20:	8bb9      	ldrh	r1, [r7, #28]
 8012d22:	f242 7310 	movw	r3, #10000	; 0x2710
 8012d26:	1a5b      	subs	r3, r3, r1
 8012d28:	429a      	cmp	r2, r3
 8012d2a:	f4ff af3e 	bcc.w	8012baa <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 8012d2e:	4804      	ldr	r0, [pc, #16]	; (8012d40 <mem_malloc+0x1ec>)
 8012d30:	f009 fd87 	bl	801c842 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8012d34:	2300      	movs	r3, #0
}
 8012d36:	4618      	mov	r0, r3
 8012d38:	3720      	adds	r7, #32
 8012d3a:	46bd      	mov	sp, r7
 8012d3c:	bd80      	pop	{r7, pc}
 8012d3e:	bf00      	nop
 8012d40:	20020f00 	.word	0x20020f00
 8012d44:	20020f04 	.word	0x20020f04
 8012d48:	0801ee00 	.word	0x0801ee00
 8012d4c:	0801efc4 	.word	0x0801efc4
 8012d50:	0801ee48 	.word	0x0801ee48
 8012d54:	20020efc 	.word	0x20020efc
 8012d58:	0801efd8 	.word	0x0801efd8
 8012d5c:	0801eff4 	.word	0x0801eff4
 8012d60:	0801f024 	.word	0x0801f024
 8012d64:	0801f054 	.word	0x0801f054

08012d68 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8012d68:	b480      	push	{r7}
 8012d6a:	b085      	sub	sp, #20
 8012d6c:	af00      	add	r7, sp, #0
 8012d6e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8012d70:	687b      	ldr	r3, [r7, #4]
 8012d72:	689b      	ldr	r3, [r3, #8]
 8012d74:	2200      	movs	r2, #0
 8012d76:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8012d78:	687b      	ldr	r3, [r7, #4]
 8012d7a:	685b      	ldr	r3, [r3, #4]
 8012d7c:	3303      	adds	r3, #3
 8012d7e:	f023 0303 	bic.w	r3, r3, #3
 8012d82:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8012d84:	2300      	movs	r3, #0
 8012d86:	60fb      	str	r3, [r7, #12]
 8012d88:	e011      	b.n	8012dae <memp_init_pool+0x46>
    memp->next = *desc->tab;
 8012d8a:	687b      	ldr	r3, [r7, #4]
 8012d8c:	689b      	ldr	r3, [r3, #8]
 8012d8e:	681a      	ldr	r2, [r3, #0]
 8012d90:	68bb      	ldr	r3, [r7, #8]
 8012d92:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8012d94:	687b      	ldr	r3, [r7, #4]
 8012d96:	689b      	ldr	r3, [r3, #8]
 8012d98:	68ba      	ldr	r2, [r7, #8]
 8012d9a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 8012d9c:	687b      	ldr	r3, [r7, #4]
 8012d9e:	881b      	ldrh	r3, [r3, #0]
 8012da0:	461a      	mov	r2, r3
 8012da2:	68bb      	ldr	r3, [r7, #8]
 8012da4:	4413      	add	r3, r2
 8012da6:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8012da8:	68fb      	ldr	r3, [r7, #12]
 8012daa:	3301      	adds	r3, #1
 8012dac:	60fb      	str	r3, [r7, #12]
 8012dae:	687b      	ldr	r3, [r7, #4]
 8012db0:	885b      	ldrh	r3, [r3, #2]
 8012db2:	461a      	mov	r2, r3
 8012db4:	68fb      	ldr	r3, [r7, #12]
 8012db6:	4293      	cmp	r3, r2
 8012db8:	dbe7      	blt.n	8012d8a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 8012dba:	bf00      	nop
 8012dbc:	bf00      	nop
 8012dbe:	3714      	adds	r7, #20
 8012dc0:	46bd      	mov	sp, r7
 8012dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012dc6:	4770      	bx	lr

08012dc8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 8012dc8:	b580      	push	{r7, lr}
 8012dca:	b082      	sub	sp, #8
 8012dcc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8012dce:	2300      	movs	r3, #0
 8012dd0:	80fb      	strh	r3, [r7, #6]
 8012dd2:	e009      	b.n	8012de8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 8012dd4:	88fb      	ldrh	r3, [r7, #6]
 8012dd6:	4a08      	ldr	r2, [pc, #32]	; (8012df8 <memp_init+0x30>)
 8012dd8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012ddc:	4618      	mov	r0, r3
 8012dde:	f7ff ffc3 	bl	8012d68 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 8012de2:	88fb      	ldrh	r3, [r7, #6]
 8012de4:	3301      	adds	r3, #1
 8012de6:	80fb      	strh	r3, [r7, #6]
 8012de8:	88fb      	ldrh	r3, [r7, #6]
 8012dea:	2b0c      	cmp	r3, #12
 8012dec:	d9f2      	bls.n	8012dd4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 8012dee:	bf00      	nop
 8012df0:	bf00      	nop
 8012df2:	3708      	adds	r7, #8
 8012df4:	46bd      	mov	sp, r7
 8012df6:	bd80      	pop	{r7, pc}
 8012df8:	0802189c 	.word	0x0802189c

08012dfc <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8012dfc:	b580      	push	{r7, lr}
 8012dfe:	b084      	sub	sp, #16
 8012e00:	af00      	add	r7, sp, #0
 8012e02:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 8012e04:	f009 fd50 	bl	801c8a8 <sys_arch_protect>
 8012e08:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 8012e0a:	687b      	ldr	r3, [r7, #4]
 8012e0c:	689b      	ldr	r3, [r3, #8]
 8012e0e:	681b      	ldr	r3, [r3, #0]
 8012e10:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8012e12:	68bb      	ldr	r3, [r7, #8]
 8012e14:	2b00      	cmp	r3, #0
 8012e16:	d015      	beq.n	8012e44 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	689b      	ldr	r3, [r3, #8]
 8012e1c:	68ba      	ldr	r2, [r7, #8]
 8012e1e:	6812      	ldr	r2, [r2, #0]
 8012e20:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8012e22:	68bb      	ldr	r3, [r7, #8]
 8012e24:	f003 0303 	and.w	r3, r3, #3
 8012e28:	2b00      	cmp	r3, #0
 8012e2a:	d006      	beq.n	8012e3a <do_memp_malloc_pool+0x3e>
 8012e2c:	4b09      	ldr	r3, [pc, #36]	; (8012e54 <do_memp_malloc_pool+0x58>)
 8012e2e:	f44f 728c 	mov.w	r2, #280	; 0x118
 8012e32:	4909      	ldr	r1, [pc, #36]	; (8012e58 <do_memp_malloc_pool+0x5c>)
 8012e34:	4809      	ldr	r0, [pc, #36]	; (8012e5c <do_memp_malloc_pool+0x60>)
 8012e36:	f00a ff83 	bl	801dd40 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8012e3a:	68f8      	ldr	r0, [r7, #12]
 8012e3c:	f009 fd42 	bl	801c8c4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8012e40:	68bb      	ldr	r3, [r7, #8]
 8012e42:	e003      	b.n	8012e4c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8012e44:	68f8      	ldr	r0, [r7, #12]
 8012e46:	f009 fd3d 	bl	801c8c4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 8012e4a:	2300      	movs	r3, #0
}
 8012e4c:	4618      	mov	r0, r3
 8012e4e:	3710      	adds	r7, #16
 8012e50:	46bd      	mov	sp, r7
 8012e52:	bd80      	pop	{r7, pc}
 8012e54:	0801f078 	.word	0x0801f078
 8012e58:	0801f0a8 	.word	0x0801f0a8
 8012e5c:	0801f0cc 	.word	0x0801f0cc

08012e60 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8012e60:	b580      	push	{r7, lr}
 8012e62:	b082      	sub	sp, #8
 8012e64:	af00      	add	r7, sp, #0
 8012e66:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d106      	bne.n	8012e7c <memp_malloc_pool+0x1c>
 8012e6e:	4b0a      	ldr	r3, [pc, #40]	; (8012e98 <memp_malloc_pool+0x38>)
 8012e70:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8012e74:	4909      	ldr	r1, [pc, #36]	; (8012e9c <memp_malloc_pool+0x3c>)
 8012e76:	480a      	ldr	r0, [pc, #40]	; (8012ea0 <memp_malloc_pool+0x40>)
 8012e78:	f00a ff62 	bl	801dd40 <iprintf>
  if (desc == NULL) {
 8012e7c:	687b      	ldr	r3, [r7, #4]
 8012e7e:	2b00      	cmp	r3, #0
 8012e80:	d101      	bne.n	8012e86 <memp_malloc_pool+0x26>
    return NULL;
 8012e82:	2300      	movs	r3, #0
 8012e84:	e003      	b.n	8012e8e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8012e86:	6878      	ldr	r0, [r7, #4]
 8012e88:	f7ff ffb8 	bl	8012dfc <do_memp_malloc_pool>
 8012e8c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 8012e8e:	4618      	mov	r0, r3
 8012e90:	3708      	adds	r7, #8
 8012e92:	46bd      	mov	sp, r7
 8012e94:	bd80      	pop	{r7, pc}
 8012e96:	bf00      	nop
 8012e98:	0801f078 	.word	0x0801f078
 8012e9c:	0801f0f4 	.word	0x0801f0f4
 8012ea0:	0801f0cc 	.word	0x0801f0cc

08012ea4 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8012ea4:	b580      	push	{r7, lr}
 8012ea6:	b084      	sub	sp, #16
 8012ea8:	af00      	add	r7, sp, #0
 8012eaa:	4603      	mov	r3, r0
 8012eac:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 8012eae:	79fb      	ldrb	r3, [r7, #7]
 8012eb0:	2b0c      	cmp	r3, #12
 8012eb2:	d908      	bls.n	8012ec6 <memp_malloc+0x22>
 8012eb4:	4b0a      	ldr	r3, [pc, #40]	; (8012ee0 <memp_malloc+0x3c>)
 8012eb6:	f240 1257 	movw	r2, #343	; 0x157
 8012eba:	490a      	ldr	r1, [pc, #40]	; (8012ee4 <memp_malloc+0x40>)
 8012ebc:	480a      	ldr	r0, [pc, #40]	; (8012ee8 <memp_malloc+0x44>)
 8012ebe:	f00a ff3f 	bl	801dd40 <iprintf>
 8012ec2:	2300      	movs	r3, #0
 8012ec4:	e008      	b.n	8012ed8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 8012ec6:	79fb      	ldrb	r3, [r7, #7]
 8012ec8:	4a08      	ldr	r2, [pc, #32]	; (8012eec <memp_malloc+0x48>)
 8012eca:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012ece:	4618      	mov	r0, r3
 8012ed0:	f7ff ff94 	bl	8012dfc <do_memp_malloc_pool>
 8012ed4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 8012ed6:	68fb      	ldr	r3, [r7, #12]
}
 8012ed8:	4618      	mov	r0, r3
 8012eda:	3710      	adds	r7, #16
 8012edc:	46bd      	mov	sp, r7
 8012ede:	bd80      	pop	{r7, pc}
 8012ee0:	0801f078 	.word	0x0801f078
 8012ee4:	0801f108 	.word	0x0801f108
 8012ee8:	0801f0cc 	.word	0x0801f0cc
 8012eec:	0802189c 	.word	0x0802189c

08012ef0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8012ef0:	b580      	push	{r7, lr}
 8012ef2:	b084      	sub	sp, #16
 8012ef4:	af00      	add	r7, sp, #0
 8012ef6:	6078      	str	r0, [r7, #4]
 8012ef8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 8012efa:	683b      	ldr	r3, [r7, #0]
 8012efc:	f003 0303 	and.w	r3, r3, #3
 8012f00:	2b00      	cmp	r3, #0
 8012f02:	d006      	beq.n	8012f12 <do_memp_free_pool+0x22>
 8012f04:	4b0d      	ldr	r3, [pc, #52]	; (8012f3c <do_memp_free_pool+0x4c>)
 8012f06:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 8012f0a:	490d      	ldr	r1, [pc, #52]	; (8012f40 <do_memp_free_pool+0x50>)
 8012f0c:	480d      	ldr	r0, [pc, #52]	; (8012f44 <do_memp_free_pool+0x54>)
 8012f0e:	f00a ff17 	bl	801dd40 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8012f12:	683b      	ldr	r3, [r7, #0]
 8012f14:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8012f16:	f009 fcc7 	bl	801c8a8 <sys_arch_protect>
 8012f1a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 8012f1c:	687b      	ldr	r3, [r7, #4]
 8012f1e:	689b      	ldr	r3, [r3, #8]
 8012f20:	681a      	ldr	r2, [r3, #0]
 8012f22:	68fb      	ldr	r3, [r7, #12]
 8012f24:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8012f26:	687b      	ldr	r3, [r7, #4]
 8012f28:	689b      	ldr	r3, [r3, #8]
 8012f2a:	68fa      	ldr	r2, [r7, #12]
 8012f2c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 8012f2e:	68b8      	ldr	r0, [r7, #8]
 8012f30:	f009 fcc8 	bl	801c8c4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8012f34:	bf00      	nop
 8012f36:	3710      	adds	r7, #16
 8012f38:	46bd      	mov	sp, r7
 8012f3a:	bd80      	pop	{r7, pc}
 8012f3c:	0801f078 	.word	0x0801f078
 8012f40:	0801f128 	.word	0x0801f128
 8012f44:	0801f0cc 	.word	0x0801f0cc

08012f48 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8012f48:	b580      	push	{r7, lr}
 8012f4a:	b082      	sub	sp, #8
 8012f4c:	af00      	add	r7, sp, #0
 8012f4e:	6078      	str	r0, [r7, #4]
 8012f50:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8012f52:	687b      	ldr	r3, [r7, #4]
 8012f54:	2b00      	cmp	r3, #0
 8012f56:	d106      	bne.n	8012f66 <memp_free_pool+0x1e>
 8012f58:	4b0a      	ldr	r3, [pc, #40]	; (8012f84 <memp_free_pool+0x3c>)
 8012f5a:	f240 1295 	movw	r2, #405	; 0x195
 8012f5e:	490a      	ldr	r1, [pc, #40]	; (8012f88 <memp_free_pool+0x40>)
 8012f60:	480a      	ldr	r0, [pc, #40]	; (8012f8c <memp_free_pool+0x44>)
 8012f62:	f00a feed 	bl	801dd40 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8012f66:	687b      	ldr	r3, [r7, #4]
 8012f68:	2b00      	cmp	r3, #0
 8012f6a:	d007      	beq.n	8012f7c <memp_free_pool+0x34>
 8012f6c:	683b      	ldr	r3, [r7, #0]
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d004      	beq.n	8012f7c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8012f72:	6839      	ldr	r1, [r7, #0]
 8012f74:	6878      	ldr	r0, [r7, #4]
 8012f76:	f7ff ffbb 	bl	8012ef0 <do_memp_free_pool>
 8012f7a:	e000      	b.n	8012f7e <memp_free_pool+0x36>
    return;
 8012f7c:	bf00      	nop
}
 8012f7e:	3708      	adds	r7, #8
 8012f80:	46bd      	mov	sp, r7
 8012f82:	bd80      	pop	{r7, pc}
 8012f84:	0801f078 	.word	0x0801f078
 8012f88:	0801f0f4 	.word	0x0801f0f4
 8012f8c:	0801f0cc 	.word	0x0801f0cc

08012f90 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8012f90:	b580      	push	{r7, lr}
 8012f92:	b082      	sub	sp, #8
 8012f94:	af00      	add	r7, sp, #0
 8012f96:	4603      	mov	r3, r0
 8012f98:	6039      	str	r1, [r7, #0]
 8012f9a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 8012f9c:	79fb      	ldrb	r3, [r7, #7]
 8012f9e:	2b0c      	cmp	r3, #12
 8012fa0:	d907      	bls.n	8012fb2 <memp_free+0x22>
 8012fa2:	4b0c      	ldr	r3, [pc, #48]	; (8012fd4 <memp_free+0x44>)
 8012fa4:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8012fa8:	490b      	ldr	r1, [pc, #44]	; (8012fd8 <memp_free+0x48>)
 8012faa:	480c      	ldr	r0, [pc, #48]	; (8012fdc <memp_free+0x4c>)
 8012fac:	f00a fec8 	bl	801dd40 <iprintf>
 8012fb0:	e00c      	b.n	8012fcc <memp_free+0x3c>

  if (mem == NULL) {
 8012fb2:	683b      	ldr	r3, [r7, #0]
 8012fb4:	2b00      	cmp	r3, #0
 8012fb6:	d008      	beq.n	8012fca <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 8012fb8:	79fb      	ldrb	r3, [r7, #7]
 8012fba:	4a09      	ldr	r2, [pc, #36]	; (8012fe0 <memp_free+0x50>)
 8012fbc:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8012fc0:	6839      	ldr	r1, [r7, #0]
 8012fc2:	4618      	mov	r0, r3
 8012fc4:	f7ff ff94 	bl	8012ef0 <do_memp_free_pool>
 8012fc8:	e000      	b.n	8012fcc <memp_free+0x3c>
    return;
 8012fca:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 8012fcc:	3708      	adds	r7, #8
 8012fce:	46bd      	mov	sp, r7
 8012fd0:	bd80      	pop	{r7, pc}
 8012fd2:	bf00      	nop
 8012fd4:	0801f078 	.word	0x0801f078
 8012fd8:	0801f148 	.word	0x0801f148
 8012fdc:	0801f0cc 	.word	0x0801f0cc
 8012fe0:	0802189c 	.word	0x0802189c

08012fe4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 8012fe4:	b480      	push	{r7}
 8012fe6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 8012fe8:	bf00      	nop
 8012fea:	46bd      	mov	sp, r7
 8012fec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ff0:	4770      	bx	lr
	...

08012ff4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 8012ff4:	b580      	push	{r7, lr}
 8012ff6:	b086      	sub	sp, #24
 8012ff8:	af00      	add	r7, sp, #0
 8012ffa:	60f8      	str	r0, [r7, #12]
 8012ffc:	60b9      	str	r1, [r7, #8]
 8012ffe:	607a      	str	r2, [r7, #4]
 8013000:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 8013002:	68fb      	ldr	r3, [r7, #12]
 8013004:	2b00      	cmp	r3, #0
 8013006:	d108      	bne.n	801301a <netif_add+0x26>
 8013008:	4b57      	ldr	r3, [pc, #348]	; (8013168 <netif_add+0x174>)
 801300a:	f240 1227 	movw	r2, #295	; 0x127
 801300e:	4957      	ldr	r1, [pc, #348]	; (801316c <netif_add+0x178>)
 8013010:	4857      	ldr	r0, [pc, #348]	; (8013170 <netif_add+0x17c>)
 8013012:	f00a fe95 	bl	801dd40 <iprintf>
 8013016:	2300      	movs	r3, #0
 8013018:	e0a2      	b.n	8013160 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801301a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801301c:	2b00      	cmp	r3, #0
 801301e:	d108      	bne.n	8013032 <netif_add+0x3e>
 8013020:	4b51      	ldr	r3, [pc, #324]	; (8013168 <netif_add+0x174>)
 8013022:	f44f 7294 	mov.w	r2, #296	; 0x128
 8013026:	4953      	ldr	r1, [pc, #332]	; (8013174 <netif_add+0x180>)
 8013028:	4851      	ldr	r0, [pc, #324]	; (8013170 <netif_add+0x17c>)
 801302a:	f00a fe89 	bl	801dd40 <iprintf>
 801302e:	2300      	movs	r3, #0
 8013030:	e096      	b.n	8013160 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8013032:	68bb      	ldr	r3, [r7, #8]
 8013034:	2b00      	cmp	r3, #0
 8013036:	d101      	bne.n	801303c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8013038:	4b4f      	ldr	r3, [pc, #316]	; (8013178 <netif_add+0x184>)
 801303a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801303c:	687b      	ldr	r3, [r7, #4]
 801303e:	2b00      	cmp	r3, #0
 8013040:	d101      	bne.n	8013046 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8013042:	4b4d      	ldr	r3, [pc, #308]	; (8013178 <netif_add+0x184>)
 8013044:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8013046:	683b      	ldr	r3, [r7, #0]
 8013048:	2b00      	cmp	r3, #0
 801304a:	d101      	bne.n	8013050 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 801304c:	4b4a      	ldr	r3, [pc, #296]	; (8013178 <netif_add+0x184>)
 801304e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8013050:	68fb      	ldr	r3, [r7, #12]
 8013052:	2200      	movs	r2, #0
 8013054:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8013056:	68fb      	ldr	r3, [r7, #12]
 8013058:	2200      	movs	r2, #0
 801305a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 801305c:	68fb      	ldr	r3, [r7, #12]
 801305e:	2200      	movs	r2, #0
 8013060:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8013062:	68fb      	ldr	r3, [r7, #12]
 8013064:	4a45      	ldr	r2, [pc, #276]	; (801317c <netif_add+0x188>)
 8013066:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	2200      	movs	r2, #0
 801306c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	2200      	movs	r2, #0
 8013072:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8013076:	68fb      	ldr	r3, [r7, #12]
 8013078:	2200      	movs	r2, #0
 801307a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 801307c:	68fb      	ldr	r3, [r7, #12]
 801307e:	6a3a      	ldr	r2, [r7, #32]
 8013080:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8013082:	4b3f      	ldr	r3, [pc, #252]	; (8013180 <netif_add+0x18c>)
 8013084:	781a      	ldrb	r2, [r3, #0]
 8013086:	68fb      	ldr	r3, [r7, #12]
 8013088:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8013090:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8013092:	683b      	ldr	r3, [r7, #0]
 8013094:	687a      	ldr	r2, [r7, #4]
 8013096:	68b9      	ldr	r1, [r7, #8]
 8013098:	68f8      	ldr	r0, [r7, #12]
 801309a:	f000 f913 	bl	80132c4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801309e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80130a0:	68f8      	ldr	r0, [r7, #12]
 80130a2:	4798      	blx	r3
 80130a4:	4603      	mov	r3, r0
 80130a6:	2b00      	cmp	r3, #0
 80130a8:	d001      	beq.n	80130ae <netif_add+0xba>
    return NULL;
 80130aa:	2300      	movs	r3, #0
 80130ac:	e058      	b.n	8013160 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 80130ae:	68fb      	ldr	r3, [r7, #12]
 80130b0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80130b4:	2bff      	cmp	r3, #255	; 0xff
 80130b6:	d103      	bne.n	80130c0 <netif_add+0xcc>
        netif->num = 0;
 80130b8:	68fb      	ldr	r3, [r7, #12]
 80130ba:	2200      	movs	r2, #0
 80130bc:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80130c0:	2300      	movs	r3, #0
 80130c2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80130c4:	4b2f      	ldr	r3, [pc, #188]	; (8013184 <netif_add+0x190>)
 80130c6:	681b      	ldr	r3, [r3, #0]
 80130c8:	617b      	str	r3, [r7, #20]
 80130ca:	e02b      	b.n	8013124 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80130cc:	697a      	ldr	r2, [r7, #20]
 80130ce:	68fb      	ldr	r3, [r7, #12]
 80130d0:	429a      	cmp	r2, r3
 80130d2:	d106      	bne.n	80130e2 <netif_add+0xee>
 80130d4:	4b24      	ldr	r3, [pc, #144]	; (8013168 <netif_add+0x174>)
 80130d6:	f240 128b 	movw	r2, #395	; 0x18b
 80130da:	492b      	ldr	r1, [pc, #172]	; (8013188 <netif_add+0x194>)
 80130dc:	4824      	ldr	r0, [pc, #144]	; (8013170 <netif_add+0x17c>)
 80130de:	f00a fe2f 	bl	801dd40 <iprintf>
        num_netifs++;
 80130e2:	693b      	ldr	r3, [r7, #16]
 80130e4:	3301      	adds	r3, #1
 80130e6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80130e8:	693b      	ldr	r3, [r7, #16]
 80130ea:	2bff      	cmp	r3, #255	; 0xff
 80130ec:	dd06      	ble.n	80130fc <netif_add+0x108>
 80130ee:	4b1e      	ldr	r3, [pc, #120]	; (8013168 <netif_add+0x174>)
 80130f0:	f240 128d 	movw	r2, #397	; 0x18d
 80130f4:	4925      	ldr	r1, [pc, #148]	; (801318c <netif_add+0x198>)
 80130f6:	481e      	ldr	r0, [pc, #120]	; (8013170 <netif_add+0x17c>)
 80130f8:	f00a fe22 	bl	801dd40 <iprintf>
        if (netif2->num == netif->num) {
 80130fc:	697b      	ldr	r3, [r7, #20]
 80130fe:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 8013102:	68fb      	ldr	r3, [r7, #12]
 8013104:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013108:	429a      	cmp	r2, r3
 801310a:	d108      	bne.n	801311e <netif_add+0x12a>
          netif->num++;
 801310c:	68fb      	ldr	r3, [r7, #12]
 801310e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013112:	3301      	adds	r3, #1
 8013114:	b2da      	uxtb	r2, r3
 8013116:	68fb      	ldr	r3, [r7, #12]
 8013118:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 801311c:	e005      	b.n	801312a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801311e:	697b      	ldr	r3, [r7, #20]
 8013120:	681b      	ldr	r3, [r3, #0]
 8013122:	617b      	str	r3, [r7, #20]
 8013124:	697b      	ldr	r3, [r7, #20]
 8013126:	2b00      	cmp	r3, #0
 8013128:	d1d0      	bne.n	80130cc <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 801312a:	697b      	ldr	r3, [r7, #20]
 801312c:	2b00      	cmp	r3, #0
 801312e:	d1be      	bne.n	80130ae <netif_add+0xba>
  }
  if (netif->num == 254) {
 8013130:	68fb      	ldr	r3, [r7, #12]
 8013132:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013136:	2bfe      	cmp	r3, #254	; 0xfe
 8013138:	d103      	bne.n	8013142 <netif_add+0x14e>
    netif_num = 0;
 801313a:	4b11      	ldr	r3, [pc, #68]	; (8013180 <netif_add+0x18c>)
 801313c:	2200      	movs	r2, #0
 801313e:	701a      	strb	r2, [r3, #0]
 8013140:	e006      	b.n	8013150 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8013142:	68fb      	ldr	r3, [r7, #12]
 8013144:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013148:	3301      	adds	r3, #1
 801314a:	b2da      	uxtb	r2, r3
 801314c:	4b0c      	ldr	r3, [pc, #48]	; (8013180 <netif_add+0x18c>)
 801314e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8013150:	4b0c      	ldr	r3, [pc, #48]	; (8013184 <netif_add+0x190>)
 8013152:	681a      	ldr	r2, [r3, #0]
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8013158:	4a0a      	ldr	r2, [pc, #40]	; (8013184 <netif_add+0x190>)
 801315a:	68fb      	ldr	r3, [r7, #12]
 801315c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801315e:	68fb      	ldr	r3, [r7, #12]
}
 8013160:	4618      	mov	r0, r3
 8013162:	3718      	adds	r7, #24
 8013164:	46bd      	mov	sp, r7
 8013166:	bd80      	pop	{r7, pc}
 8013168:	0801f164 	.word	0x0801f164
 801316c:	0801f1f8 	.word	0x0801f1f8
 8013170:	0801f1b4 	.word	0x0801f1b4
 8013174:	0801f214 	.word	0x0801f214
 8013178:	08021910 	.word	0x08021910
 801317c:	0801359f 	.word	0x0801359f
 8013180:	2002409c 	.word	0x2002409c
 8013184:	20024094 	.word	0x20024094
 8013188:	0801f238 	.word	0x0801f238
 801318c:	0801f24c 	.word	0x0801f24c

08013190 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8013190:	b580      	push	{r7, lr}
 8013192:	b082      	sub	sp, #8
 8013194:	af00      	add	r7, sp, #0
 8013196:	6078      	str	r0, [r7, #4]
 8013198:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801319a:	6839      	ldr	r1, [r7, #0]
 801319c:	6878      	ldr	r0, [r7, #4]
 801319e:	f002 fb8d 	bl	80158bc <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 80131a2:	6839      	ldr	r1, [r7, #0]
 80131a4:	6878      	ldr	r0, [r7, #4]
 80131a6:	f006 ff91 	bl	801a0cc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 80131aa:	bf00      	nop
 80131ac:	3708      	adds	r7, #8
 80131ae:	46bd      	mov	sp, r7
 80131b0:	bd80      	pop	{r7, pc}
	...

080131b4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80131b4:	b580      	push	{r7, lr}
 80131b6:	b086      	sub	sp, #24
 80131b8:	af00      	add	r7, sp, #0
 80131ba:	60f8      	str	r0, [r7, #12]
 80131bc:	60b9      	str	r1, [r7, #8]
 80131be:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80131c0:	68bb      	ldr	r3, [r7, #8]
 80131c2:	2b00      	cmp	r3, #0
 80131c4:	d106      	bne.n	80131d4 <netif_do_set_ipaddr+0x20>
 80131c6:	4b1d      	ldr	r3, [pc, #116]	; (801323c <netif_do_set_ipaddr+0x88>)
 80131c8:	f240 12cb 	movw	r2, #459	; 0x1cb
 80131cc:	491c      	ldr	r1, [pc, #112]	; (8013240 <netif_do_set_ipaddr+0x8c>)
 80131ce:	481d      	ldr	r0, [pc, #116]	; (8013244 <netif_do_set_ipaddr+0x90>)
 80131d0:	f00a fdb6 	bl	801dd40 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80131d4:	687b      	ldr	r3, [r7, #4]
 80131d6:	2b00      	cmp	r3, #0
 80131d8:	d106      	bne.n	80131e8 <netif_do_set_ipaddr+0x34>
 80131da:	4b18      	ldr	r3, [pc, #96]	; (801323c <netif_do_set_ipaddr+0x88>)
 80131dc:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80131e0:	4917      	ldr	r1, [pc, #92]	; (8013240 <netif_do_set_ipaddr+0x8c>)
 80131e2:	4818      	ldr	r0, [pc, #96]	; (8013244 <netif_do_set_ipaddr+0x90>)
 80131e4:	f00a fdac 	bl	801dd40 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80131e8:	68bb      	ldr	r3, [r7, #8]
 80131ea:	681a      	ldr	r2, [r3, #0]
 80131ec:	68fb      	ldr	r3, [r7, #12]
 80131ee:	3304      	adds	r3, #4
 80131f0:	681b      	ldr	r3, [r3, #0]
 80131f2:	429a      	cmp	r2, r3
 80131f4:	d01c      	beq.n	8013230 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80131f6:	68bb      	ldr	r3, [r7, #8]
 80131f8:	681b      	ldr	r3, [r3, #0]
 80131fa:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80131fc:	68fb      	ldr	r3, [r7, #12]
 80131fe:	3304      	adds	r3, #4
 8013200:	681a      	ldr	r2, [r3, #0]
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 8013206:	f107 0314 	add.w	r3, r7, #20
 801320a:	4619      	mov	r1, r3
 801320c:	6878      	ldr	r0, [r7, #4]
 801320e:	f7ff ffbf 	bl	8013190 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8013212:	68bb      	ldr	r3, [r7, #8]
 8013214:	2b00      	cmp	r3, #0
 8013216:	d002      	beq.n	801321e <netif_do_set_ipaddr+0x6a>
 8013218:	68bb      	ldr	r3, [r7, #8]
 801321a:	681b      	ldr	r3, [r3, #0]
 801321c:	e000      	b.n	8013220 <netif_do_set_ipaddr+0x6c>
 801321e:	2300      	movs	r3, #0
 8013220:	68fa      	ldr	r2, [r7, #12]
 8013222:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8013224:	2101      	movs	r1, #1
 8013226:	68f8      	ldr	r0, [r7, #12]
 8013228:	f000 f8d2 	bl	80133d0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 801322c:	2301      	movs	r3, #1
 801322e:	e000      	b.n	8013232 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8013230:	2300      	movs	r3, #0
}
 8013232:	4618      	mov	r0, r3
 8013234:	3718      	adds	r7, #24
 8013236:	46bd      	mov	sp, r7
 8013238:	bd80      	pop	{r7, pc}
 801323a:	bf00      	nop
 801323c:	0801f164 	.word	0x0801f164
 8013240:	0801f27c 	.word	0x0801f27c
 8013244:	0801f1b4 	.word	0x0801f1b4

08013248 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8013248:	b480      	push	{r7}
 801324a:	b085      	sub	sp, #20
 801324c:	af00      	add	r7, sp, #0
 801324e:	60f8      	str	r0, [r7, #12]
 8013250:	60b9      	str	r1, [r7, #8]
 8013252:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8013254:	68bb      	ldr	r3, [r7, #8]
 8013256:	681a      	ldr	r2, [r3, #0]
 8013258:	68fb      	ldr	r3, [r7, #12]
 801325a:	3308      	adds	r3, #8
 801325c:	681b      	ldr	r3, [r3, #0]
 801325e:	429a      	cmp	r2, r3
 8013260:	d00a      	beq.n	8013278 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8013262:	68bb      	ldr	r3, [r7, #8]
 8013264:	2b00      	cmp	r3, #0
 8013266:	d002      	beq.n	801326e <netif_do_set_netmask+0x26>
 8013268:	68bb      	ldr	r3, [r7, #8]
 801326a:	681b      	ldr	r3, [r3, #0]
 801326c:	e000      	b.n	8013270 <netif_do_set_netmask+0x28>
 801326e:	2300      	movs	r3, #0
 8013270:	68fa      	ldr	r2, [r7, #12]
 8013272:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8013274:	2301      	movs	r3, #1
 8013276:	e000      	b.n	801327a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8013278:	2300      	movs	r3, #0
}
 801327a:	4618      	mov	r0, r3
 801327c:	3714      	adds	r7, #20
 801327e:	46bd      	mov	sp, r7
 8013280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013284:	4770      	bx	lr

08013286 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8013286:	b480      	push	{r7}
 8013288:	b085      	sub	sp, #20
 801328a:	af00      	add	r7, sp, #0
 801328c:	60f8      	str	r0, [r7, #12]
 801328e:	60b9      	str	r1, [r7, #8]
 8013290:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8013292:	68bb      	ldr	r3, [r7, #8]
 8013294:	681a      	ldr	r2, [r3, #0]
 8013296:	68fb      	ldr	r3, [r7, #12]
 8013298:	330c      	adds	r3, #12
 801329a:	681b      	ldr	r3, [r3, #0]
 801329c:	429a      	cmp	r2, r3
 801329e:	d00a      	beq.n	80132b6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 80132a0:	68bb      	ldr	r3, [r7, #8]
 80132a2:	2b00      	cmp	r3, #0
 80132a4:	d002      	beq.n	80132ac <netif_do_set_gw+0x26>
 80132a6:	68bb      	ldr	r3, [r7, #8]
 80132a8:	681b      	ldr	r3, [r3, #0]
 80132aa:	e000      	b.n	80132ae <netif_do_set_gw+0x28>
 80132ac:	2300      	movs	r3, #0
 80132ae:	68fa      	ldr	r2, [r7, #12]
 80132b0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 80132b2:	2301      	movs	r3, #1
 80132b4:	e000      	b.n	80132b8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 80132b6:	2300      	movs	r3, #0
}
 80132b8:	4618      	mov	r0, r3
 80132ba:	3714      	adds	r7, #20
 80132bc:	46bd      	mov	sp, r7
 80132be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80132c2:	4770      	bx	lr

080132c4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 80132c4:	b580      	push	{r7, lr}
 80132c6:	b088      	sub	sp, #32
 80132c8:	af00      	add	r7, sp, #0
 80132ca:	60f8      	str	r0, [r7, #12]
 80132cc:	60b9      	str	r1, [r7, #8]
 80132ce:	607a      	str	r2, [r7, #4]
 80132d0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 80132d2:	2300      	movs	r3, #0
 80132d4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 80132d6:	2300      	movs	r3, #0
 80132d8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80132da:	68bb      	ldr	r3, [r7, #8]
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d101      	bne.n	80132e4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 80132e0:	4b1c      	ldr	r3, [pc, #112]	; (8013354 <netif_set_addr+0x90>)
 80132e2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 80132e4:	687b      	ldr	r3, [r7, #4]
 80132e6:	2b00      	cmp	r3, #0
 80132e8:	d101      	bne.n	80132ee <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 80132ea:	4b1a      	ldr	r3, [pc, #104]	; (8013354 <netif_set_addr+0x90>)
 80132ec:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 80132ee:	683b      	ldr	r3, [r7, #0]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d101      	bne.n	80132f8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 80132f4:	4b17      	ldr	r3, [pc, #92]	; (8013354 <netif_set_addr+0x90>)
 80132f6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 80132f8:	68bb      	ldr	r3, [r7, #8]
 80132fa:	2b00      	cmp	r3, #0
 80132fc:	d003      	beq.n	8013306 <netif_set_addr+0x42>
 80132fe:	68bb      	ldr	r3, [r7, #8]
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	2b00      	cmp	r3, #0
 8013304:	d101      	bne.n	801330a <netif_set_addr+0x46>
 8013306:	2301      	movs	r3, #1
 8013308:	e000      	b.n	801330c <netif_set_addr+0x48>
 801330a:	2300      	movs	r3, #0
 801330c:	617b      	str	r3, [r7, #20]
  if (remove) {
 801330e:	697b      	ldr	r3, [r7, #20]
 8013310:	2b00      	cmp	r3, #0
 8013312:	d006      	beq.n	8013322 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8013314:	f107 0310 	add.w	r3, r7, #16
 8013318:	461a      	mov	r2, r3
 801331a:	68b9      	ldr	r1, [r7, #8]
 801331c:	68f8      	ldr	r0, [r7, #12]
 801331e:	f7ff ff49 	bl	80131b4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8013322:	69fa      	ldr	r2, [r7, #28]
 8013324:	6879      	ldr	r1, [r7, #4]
 8013326:	68f8      	ldr	r0, [r7, #12]
 8013328:	f7ff ff8e 	bl	8013248 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 801332c:	69ba      	ldr	r2, [r7, #24]
 801332e:	6839      	ldr	r1, [r7, #0]
 8013330:	68f8      	ldr	r0, [r7, #12]
 8013332:	f7ff ffa8 	bl	8013286 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8013336:	697b      	ldr	r3, [r7, #20]
 8013338:	2b00      	cmp	r3, #0
 801333a:	d106      	bne.n	801334a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 801333c:	f107 0310 	add.w	r3, r7, #16
 8013340:	461a      	mov	r2, r3
 8013342:	68b9      	ldr	r1, [r7, #8]
 8013344:	68f8      	ldr	r0, [r7, #12]
 8013346:	f7ff ff35 	bl	80131b4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 801334a:	bf00      	nop
 801334c:	3720      	adds	r7, #32
 801334e:	46bd      	mov	sp, r7
 8013350:	bd80      	pop	{r7, pc}
 8013352:	bf00      	nop
 8013354:	08021910 	.word	0x08021910

08013358 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8013358:	b480      	push	{r7}
 801335a:	b083      	sub	sp, #12
 801335c:	af00      	add	r7, sp, #0
 801335e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8013360:	4a04      	ldr	r2, [pc, #16]	; (8013374 <netif_set_default+0x1c>)
 8013362:	687b      	ldr	r3, [r7, #4]
 8013364:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8013366:	bf00      	nop
 8013368:	370c      	adds	r7, #12
 801336a:	46bd      	mov	sp, r7
 801336c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013370:	4770      	bx	lr
 8013372:	bf00      	nop
 8013374:	20024098 	.word	0x20024098

08013378 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8013378:	b580      	push	{r7, lr}
 801337a:	b082      	sub	sp, #8
 801337c:	af00      	add	r7, sp, #0
 801337e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8013380:	687b      	ldr	r3, [r7, #4]
 8013382:	2b00      	cmp	r3, #0
 8013384:	d107      	bne.n	8013396 <netif_set_up+0x1e>
 8013386:	4b0f      	ldr	r3, [pc, #60]	; (80133c4 <netif_set_up+0x4c>)
 8013388:	f44f 7254 	mov.w	r2, #848	; 0x350
 801338c:	490e      	ldr	r1, [pc, #56]	; (80133c8 <netif_set_up+0x50>)
 801338e:	480f      	ldr	r0, [pc, #60]	; (80133cc <netif_set_up+0x54>)
 8013390:	f00a fcd6 	bl	801dd40 <iprintf>
 8013394:	e013      	b.n	80133be <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8013396:	687b      	ldr	r3, [r7, #4]
 8013398:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801339c:	f003 0301 	and.w	r3, r3, #1
 80133a0:	2b00      	cmp	r3, #0
 80133a2:	d10c      	bne.n	80133be <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80133aa:	f043 0301 	orr.w	r3, r3, #1
 80133ae:	b2da      	uxtb	r2, r3
 80133b0:	687b      	ldr	r3, [r7, #4]
 80133b2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80133b6:	2103      	movs	r1, #3
 80133b8:	6878      	ldr	r0, [r7, #4]
 80133ba:	f000 f809 	bl	80133d0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 80133be:	3708      	adds	r7, #8
 80133c0:	46bd      	mov	sp, r7
 80133c2:	bd80      	pop	{r7, pc}
 80133c4:	0801f164 	.word	0x0801f164
 80133c8:	0801f2ec 	.word	0x0801f2ec
 80133cc:	0801f1b4 	.word	0x0801f1b4

080133d0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 80133d0:	b580      	push	{r7, lr}
 80133d2:	b082      	sub	sp, #8
 80133d4:	af00      	add	r7, sp, #0
 80133d6:	6078      	str	r0, [r7, #4]
 80133d8:	460b      	mov	r3, r1
 80133da:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 80133dc:	687b      	ldr	r3, [r7, #4]
 80133de:	2b00      	cmp	r3, #0
 80133e0:	d106      	bne.n	80133f0 <netif_issue_reports+0x20>
 80133e2:	4b18      	ldr	r3, [pc, #96]	; (8013444 <netif_issue_reports+0x74>)
 80133e4:	f240 326d 	movw	r2, #877	; 0x36d
 80133e8:	4917      	ldr	r1, [pc, #92]	; (8013448 <netif_issue_reports+0x78>)
 80133ea:	4818      	ldr	r0, [pc, #96]	; (801344c <netif_issue_reports+0x7c>)
 80133ec:	f00a fca8 	bl	801dd40 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 80133f0:	687b      	ldr	r3, [r7, #4]
 80133f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80133f6:	f003 0304 	and.w	r3, r3, #4
 80133fa:	2b00      	cmp	r3, #0
 80133fc:	d01e      	beq.n	801343c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 80133fe:	687b      	ldr	r3, [r7, #4]
 8013400:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013404:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8013408:	2b00      	cmp	r3, #0
 801340a:	d017      	beq.n	801343c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801340c:	78fb      	ldrb	r3, [r7, #3]
 801340e:	f003 0301 	and.w	r3, r3, #1
 8013412:	2b00      	cmp	r3, #0
 8013414:	d013      	beq.n	801343e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	3304      	adds	r3, #4
 801341a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 801341c:	2b00      	cmp	r3, #0
 801341e:	d00e      	beq.n	801343e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013426:	f003 0308 	and.w	r3, r3, #8
 801342a:	2b00      	cmp	r3, #0
 801342c:	d007      	beq.n	801343e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 801342e:	687b      	ldr	r3, [r7, #4]
 8013430:	3304      	adds	r3, #4
 8013432:	4619      	mov	r1, r3
 8013434:	6878      	ldr	r0, [r7, #4]
 8013436:	f007 fdb3 	bl	801afa0 <etharp_request>
 801343a:	e000      	b.n	801343e <netif_issue_reports+0x6e>
    return;
 801343c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 801343e:	3708      	adds	r7, #8
 8013440:	46bd      	mov	sp, r7
 8013442:	bd80      	pop	{r7, pc}
 8013444:	0801f164 	.word	0x0801f164
 8013448:	0801f308 	.word	0x0801f308
 801344c:	0801f1b4 	.word	0x0801f1b4

08013450 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8013450:	b580      	push	{r7, lr}
 8013452:	b082      	sub	sp, #8
 8013454:	af00      	add	r7, sp, #0
 8013456:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8013458:	687b      	ldr	r3, [r7, #4]
 801345a:	2b00      	cmp	r3, #0
 801345c:	d107      	bne.n	801346e <netif_set_down+0x1e>
 801345e:	4b12      	ldr	r3, [pc, #72]	; (80134a8 <netif_set_down+0x58>)
 8013460:	f240 329b 	movw	r2, #923	; 0x39b
 8013464:	4911      	ldr	r1, [pc, #68]	; (80134ac <netif_set_down+0x5c>)
 8013466:	4812      	ldr	r0, [pc, #72]	; (80134b0 <netif_set_down+0x60>)
 8013468:	f00a fc6a 	bl	801dd40 <iprintf>
 801346c:	e019      	b.n	80134a2 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 801346e:	687b      	ldr	r3, [r7, #4]
 8013470:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013474:	f003 0301 	and.w	r3, r3, #1
 8013478:	2b00      	cmp	r3, #0
 801347a:	d012      	beq.n	80134a2 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 801347c:	687b      	ldr	r3, [r7, #4]
 801347e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013482:	f023 0301 	bic.w	r3, r3, #1
 8013486:	b2da      	uxtb	r2, r3
 8013488:	687b      	ldr	r3, [r7, #4]
 801348a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 801348e:	687b      	ldr	r3, [r7, #4]
 8013490:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013494:	f003 0308 	and.w	r3, r3, #8
 8013498:	2b00      	cmp	r3, #0
 801349a:	d002      	beq.n	80134a2 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 801349c:	6878      	ldr	r0, [r7, #4]
 801349e:	f007 f93d 	bl	801a71c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 80134a2:	3708      	adds	r7, #8
 80134a4:	46bd      	mov	sp, r7
 80134a6:	bd80      	pop	{r7, pc}
 80134a8:	0801f164 	.word	0x0801f164
 80134ac:	0801f32c 	.word	0x0801f32c
 80134b0:	0801f1b4 	.word	0x0801f1b4

080134b4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 80134b4:	b580      	push	{r7, lr}
 80134b6:	b082      	sub	sp, #8
 80134b8:	af00      	add	r7, sp, #0
 80134ba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	2b00      	cmp	r3, #0
 80134c0:	d107      	bne.n	80134d2 <netif_set_link_up+0x1e>
 80134c2:	4b13      	ldr	r3, [pc, #76]	; (8013510 <netif_set_link_up+0x5c>)
 80134c4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 80134c8:	4912      	ldr	r1, [pc, #72]	; (8013514 <netif_set_link_up+0x60>)
 80134ca:	4813      	ldr	r0, [pc, #76]	; (8013518 <netif_set_link_up+0x64>)
 80134cc:	f00a fc38 	bl	801dd40 <iprintf>
 80134d0:	e01b      	b.n	801350a <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 80134d2:	687b      	ldr	r3, [r7, #4]
 80134d4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80134d8:	f003 0304 	and.w	r3, r3, #4
 80134dc:	2b00      	cmp	r3, #0
 80134de:	d114      	bne.n	801350a <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 80134e0:	687b      	ldr	r3, [r7, #4]
 80134e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80134e6:	f043 0304 	orr.w	r3, r3, #4
 80134ea:	b2da      	uxtb	r2, r3
 80134ec:	687b      	ldr	r3, [r7, #4]
 80134ee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 80134f2:	2103      	movs	r1, #3
 80134f4:	6878      	ldr	r0, [r7, #4]
 80134f6:	f7ff ff6b 	bl	80133d0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	69db      	ldr	r3, [r3, #28]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d003      	beq.n	801350a <netif_set_link_up+0x56>
 8013502:	687b      	ldr	r3, [r7, #4]
 8013504:	69db      	ldr	r3, [r3, #28]
 8013506:	6878      	ldr	r0, [r7, #4]
 8013508:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801350a:	3708      	adds	r7, #8
 801350c:	46bd      	mov	sp, r7
 801350e:	bd80      	pop	{r7, pc}
 8013510:	0801f164 	.word	0x0801f164
 8013514:	0801f34c 	.word	0x0801f34c
 8013518:	0801f1b4 	.word	0x0801f1b4

0801351c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 801351c:	b580      	push	{r7, lr}
 801351e:	b082      	sub	sp, #8
 8013520:	af00      	add	r7, sp, #0
 8013522:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8013524:	687b      	ldr	r3, [r7, #4]
 8013526:	2b00      	cmp	r3, #0
 8013528:	d107      	bne.n	801353a <netif_set_link_down+0x1e>
 801352a:	4b11      	ldr	r3, [pc, #68]	; (8013570 <netif_set_link_down+0x54>)
 801352c:	f240 4206 	movw	r2, #1030	; 0x406
 8013530:	4910      	ldr	r1, [pc, #64]	; (8013574 <netif_set_link_down+0x58>)
 8013532:	4811      	ldr	r0, [pc, #68]	; (8013578 <netif_set_link_down+0x5c>)
 8013534:	f00a fc04 	bl	801dd40 <iprintf>
 8013538:	e017      	b.n	801356a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8013540:	f003 0304 	and.w	r3, r3, #4
 8013544:	2b00      	cmp	r3, #0
 8013546:	d010      	beq.n	801356a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8013548:	687b      	ldr	r3, [r7, #4]
 801354a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801354e:	f023 0304 	bic.w	r3, r3, #4
 8013552:	b2da      	uxtb	r2, r3
 8013554:	687b      	ldr	r3, [r7, #4]
 8013556:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 801355a:	687b      	ldr	r3, [r7, #4]
 801355c:	69db      	ldr	r3, [r3, #28]
 801355e:	2b00      	cmp	r3, #0
 8013560:	d003      	beq.n	801356a <netif_set_link_down+0x4e>
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	69db      	ldr	r3, [r3, #28]
 8013566:	6878      	ldr	r0, [r7, #4]
 8013568:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 801356a:	3708      	adds	r7, #8
 801356c:	46bd      	mov	sp, r7
 801356e:	bd80      	pop	{r7, pc}
 8013570:	0801f164 	.word	0x0801f164
 8013574:	0801f370 	.word	0x0801f370
 8013578:	0801f1b4 	.word	0x0801f1b4

0801357c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 801357c:	b480      	push	{r7}
 801357e:	b083      	sub	sp, #12
 8013580:	af00      	add	r7, sp, #0
 8013582:	6078      	str	r0, [r7, #4]
 8013584:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8013586:	687b      	ldr	r3, [r7, #4]
 8013588:	2b00      	cmp	r3, #0
 801358a:	d002      	beq.n	8013592 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 801358c:	687b      	ldr	r3, [r7, #4]
 801358e:	683a      	ldr	r2, [r7, #0]
 8013590:	61da      	str	r2, [r3, #28]
  }
}
 8013592:	bf00      	nop
 8013594:	370c      	adds	r7, #12
 8013596:	46bd      	mov	sp, r7
 8013598:	f85d 7b04 	ldr.w	r7, [sp], #4
 801359c:	4770      	bx	lr

0801359e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 801359e:	b480      	push	{r7}
 80135a0:	b085      	sub	sp, #20
 80135a2:	af00      	add	r7, sp, #0
 80135a4:	60f8      	str	r0, [r7, #12]
 80135a6:	60b9      	str	r1, [r7, #8]
 80135a8:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 80135aa:	f06f 030b 	mvn.w	r3, #11
}
 80135ae:	4618      	mov	r0, r3
 80135b0:	3714      	adds	r7, #20
 80135b2:	46bd      	mov	sp, r7
 80135b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80135b8:	4770      	bx	lr
	...

080135bc <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 80135bc:	b480      	push	{r7}
 80135be:	b085      	sub	sp, #20
 80135c0:	af00      	add	r7, sp, #0
 80135c2:	4603      	mov	r3, r0
 80135c4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 80135c6:	79fb      	ldrb	r3, [r7, #7]
 80135c8:	2b00      	cmp	r3, #0
 80135ca:	d013      	beq.n	80135f4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 80135cc:	4b0d      	ldr	r3, [pc, #52]	; (8013604 <netif_get_by_index+0x48>)
 80135ce:	681b      	ldr	r3, [r3, #0]
 80135d0:	60fb      	str	r3, [r7, #12]
 80135d2:	e00c      	b.n	80135ee <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 80135d4:	68fb      	ldr	r3, [r7, #12]
 80135d6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80135da:	3301      	adds	r3, #1
 80135dc:	b2db      	uxtb	r3, r3
 80135de:	79fa      	ldrb	r2, [r7, #7]
 80135e0:	429a      	cmp	r2, r3
 80135e2:	d101      	bne.n	80135e8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 80135e4:	68fb      	ldr	r3, [r7, #12]
 80135e6:	e006      	b.n	80135f6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 80135e8:	68fb      	ldr	r3, [r7, #12]
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	60fb      	str	r3, [r7, #12]
 80135ee:	68fb      	ldr	r3, [r7, #12]
 80135f0:	2b00      	cmp	r3, #0
 80135f2:	d1ef      	bne.n	80135d4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 80135f4:	2300      	movs	r3, #0
}
 80135f6:	4618      	mov	r0, r3
 80135f8:	3714      	adds	r7, #20
 80135fa:	46bd      	mov	sp, r7
 80135fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013600:	4770      	bx	lr
 8013602:	bf00      	nop
 8013604:	20024094 	.word	0x20024094

08013608 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8013608:	b580      	push	{r7, lr}
 801360a:	b082      	sub	sp, #8
 801360c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 801360e:	f009 f94b 	bl	801c8a8 <sys_arch_protect>
 8013612:	6038      	str	r0, [r7, #0]
 8013614:	4b0d      	ldr	r3, [pc, #52]	; (801364c <pbuf_free_ooseq+0x44>)
 8013616:	2200      	movs	r2, #0
 8013618:	701a      	strb	r2, [r3, #0]
 801361a:	6838      	ldr	r0, [r7, #0]
 801361c:	f009 f952 	bl	801c8c4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8013620:	4b0b      	ldr	r3, [pc, #44]	; (8013650 <pbuf_free_ooseq+0x48>)
 8013622:	681b      	ldr	r3, [r3, #0]
 8013624:	607b      	str	r3, [r7, #4]
 8013626:	e00a      	b.n	801363e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801362c:	2b00      	cmp	r3, #0
 801362e:	d003      	beq.n	8013638 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8013630:	6878      	ldr	r0, [r7, #4]
 8013632:	f002 f981 	bl	8015938 <tcp_free_ooseq>
      return;
 8013636:	e005      	b.n	8013644 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8013638:	687b      	ldr	r3, [r7, #4]
 801363a:	68db      	ldr	r3, [r3, #12]
 801363c:	607b      	str	r3, [r7, #4]
 801363e:	687b      	ldr	r3, [r7, #4]
 8013640:	2b00      	cmp	r3, #0
 8013642:	d1f1      	bne.n	8013628 <pbuf_free_ooseq+0x20>
    }
  }
}
 8013644:	3708      	adds	r7, #8
 8013646:	46bd      	mov	sp, r7
 8013648:	bd80      	pop	{r7, pc}
 801364a:	bf00      	nop
 801364c:	2002409d 	.word	0x2002409d
 8013650:	200240ac 	.word	0x200240ac

08013654 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8013654:	b580      	push	{r7, lr}
 8013656:	b082      	sub	sp, #8
 8013658:	af00      	add	r7, sp, #0
 801365a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 801365c:	f7ff ffd4 	bl	8013608 <pbuf_free_ooseq>
}
 8013660:	bf00      	nop
 8013662:	3708      	adds	r7, #8
 8013664:	46bd      	mov	sp, r7
 8013666:	bd80      	pop	{r7, pc}

08013668 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8013668:	b580      	push	{r7, lr}
 801366a:	b082      	sub	sp, #8
 801366c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 801366e:	f009 f91b 	bl	801c8a8 <sys_arch_protect>
 8013672:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8013674:	4b0f      	ldr	r3, [pc, #60]	; (80136b4 <pbuf_pool_is_empty+0x4c>)
 8013676:	781b      	ldrb	r3, [r3, #0]
 8013678:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 801367a:	4b0e      	ldr	r3, [pc, #56]	; (80136b4 <pbuf_pool_is_empty+0x4c>)
 801367c:	2201      	movs	r2, #1
 801367e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8013680:	6878      	ldr	r0, [r7, #4]
 8013682:	f009 f91f 	bl	801c8c4 <sys_arch_unprotect>

  if (!queued) {
 8013686:	78fb      	ldrb	r3, [r7, #3]
 8013688:	2b00      	cmp	r3, #0
 801368a:	d10f      	bne.n	80136ac <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 801368c:	2100      	movs	r1, #0
 801368e:	480a      	ldr	r0, [pc, #40]	; (80136b8 <pbuf_pool_is_empty+0x50>)
 8013690:	f7fe fe96 	bl	80123c0 <tcpip_try_callback>
 8013694:	4603      	mov	r3, r0
 8013696:	2b00      	cmp	r3, #0
 8013698:	d008      	beq.n	80136ac <pbuf_pool_is_empty+0x44>
 801369a:	f009 f905 	bl	801c8a8 <sys_arch_protect>
 801369e:	6078      	str	r0, [r7, #4]
 80136a0:	4b04      	ldr	r3, [pc, #16]	; (80136b4 <pbuf_pool_is_empty+0x4c>)
 80136a2:	2200      	movs	r2, #0
 80136a4:	701a      	strb	r2, [r3, #0]
 80136a6:	6878      	ldr	r0, [r7, #4]
 80136a8:	f009 f90c 	bl	801c8c4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 80136ac:	bf00      	nop
 80136ae:	3708      	adds	r7, #8
 80136b0:	46bd      	mov	sp, r7
 80136b2:	bd80      	pop	{r7, pc}
 80136b4:	2002409d 	.word	0x2002409d
 80136b8:	08013655 	.word	0x08013655

080136bc <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 80136bc:	b480      	push	{r7}
 80136be:	b085      	sub	sp, #20
 80136c0:	af00      	add	r7, sp, #0
 80136c2:	60f8      	str	r0, [r7, #12]
 80136c4:	60b9      	str	r1, [r7, #8]
 80136c6:	4611      	mov	r1, r2
 80136c8:	461a      	mov	r2, r3
 80136ca:	460b      	mov	r3, r1
 80136cc:	80fb      	strh	r3, [r7, #6]
 80136ce:	4613      	mov	r3, r2
 80136d0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 80136d2:	68fb      	ldr	r3, [r7, #12]
 80136d4:	2200      	movs	r2, #0
 80136d6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 80136d8:	68fb      	ldr	r3, [r7, #12]
 80136da:	68ba      	ldr	r2, [r7, #8]
 80136dc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	88fa      	ldrh	r2, [r7, #6]
 80136e2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 80136e4:	68fb      	ldr	r3, [r7, #12]
 80136e6:	88ba      	ldrh	r2, [r7, #4]
 80136e8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 80136ea:	8b3b      	ldrh	r3, [r7, #24]
 80136ec:	b2da      	uxtb	r2, r3
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 80136f2:	68fb      	ldr	r3, [r7, #12]
 80136f4:	7f3a      	ldrb	r2, [r7, #28]
 80136f6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 80136f8:	68fb      	ldr	r3, [r7, #12]
 80136fa:	2201      	movs	r2, #1
 80136fc:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 80136fe:	68fb      	ldr	r3, [r7, #12]
 8013700:	2200      	movs	r2, #0
 8013702:	73da      	strb	r2, [r3, #15]
}
 8013704:	bf00      	nop
 8013706:	3714      	adds	r7, #20
 8013708:	46bd      	mov	sp, r7
 801370a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801370e:	4770      	bx	lr

08013710 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8013710:	b580      	push	{r7, lr}
 8013712:	b08c      	sub	sp, #48	; 0x30
 8013714:	af02      	add	r7, sp, #8
 8013716:	4603      	mov	r3, r0
 8013718:	71fb      	strb	r3, [r7, #7]
 801371a:	460b      	mov	r3, r1
 801371c:	80bb      	strh	r3, [r7, #4]
 801371e:	4613      	mov	r3, r2
 8013720:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8013722:	79fb      	ldrb	r3, [r7, #7]
 8013724:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8013726:	887b      	ldrh	r3, [r7, #2]
 8013728:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 801372c:	d07f      	beq.n	801382e <pbuf_alloc+0x11e>
 801372e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8013732:	f300 80c8 	bgt.w	80138c6 <pbuf_alloc+0x1b6>
 8013736:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 801373a:	d010      	beq.n	801375e <pbuf_alloc+0x4e>
 801373c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8013740:	f300 80c1 	bgt.w	80138c6 <pbuf_alloc+0x1b6>
 8013744:	2b01      	cmp	r3, #1
 8013746:	d002      	beq.n	801374e <pbuf_alloc+0x3e>
 8013748:	2b41      	cmp	r3, #65	; 0x41
 801374a:	f040 80bc 	bne.w	80138c6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 801374e:	887a      	ldrh	r2, [r7, #2]
 8013750:	88bb      	ldrh	r3, [r7, #4]
 8013752:	4619      	mov	r1, r3
 8013754:	2000      	movs	r0, #0
 8013756:	f000 f8d1 	bl	80138fc <pbuf_alloc_reference>
 801375a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 801375c:	e0bd      	b.n	80138da <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 801375e:	2300      	movs	r3, #0
 8013760:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8013762:	2300      	movs	r3, #0
 8013764:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8013766:	88bb      	ldrh	r3, [r7, #4]
 8013768:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 801376a:	200c      	movs	r0, #12
 801376c:	f7ff fb9a 	bl	8012ea4 <memp_malloc>
 8013770:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8013772:	693b      	ldr	r3, [r7, #16]
 8013774:	2b00      	cmp	r3, #0
 8013776:	d109      	bne.n	801378c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8013778:	f7ff ff76 	bl	8013668 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 801377c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801377e:	2b00      	cmp	r3, #0
 8013780:	d002      	beq.n	8013788 <pbuf_alloc+0x78>
            pbuf_free(p);
 8013782:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013784:	f000 faa8 	bl	8013cd8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8013788:	2300      	movs	r3, #0
 801378a:	e0a7      	b.n	80138dc <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 801378c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801378e:	3303      	adds	r3, #3
 8013790:	b29b      	uxth	r3, r3
 8013792:	f023 0303 	bic.w	r3, r3, #3
 8013796:	b29b      	uxth	r3, r3
 8013798:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 801379c:	b29b      	uxth	r3, r3
 801379e:	8b7a      	ldrh	r2, [r7, #26]
 80137a0:	4293      	cmp	r3, r2
 80137a2:	bf28      	it	cs
 80137a4:	4613      	movcs	r3, r2
 80137a6:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 80137a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80137aa:	3310      	adds	r3, #16
 80137ac:	693a      	ldr	r2, [r7, #16]
 80137ae:	4413      	add	r3, r2
 80137b0:	3303      	adds	r3, #3
 80137b2:	f023 0303 	bic.w	r3, r3, #3
 80137b6:	4618      	mov	r0, r3
 80137b8:	89f9      	ldrh	r1, [r7, #14]
 80137ba:	8b7a      	ldrh	r2, [r7, #26]
 80137bc:	2300      	movs	r3, #0
 80137be:	9301      	str	r3, [sp, #4]
 80137c0:	887b      	ldrh	r3, [r7, #2]
 80137c2:	9300      	str	r3, [sp, #0]
 80137c4:	460b      	mov	r3, r1
 80137c6:	4601      	mov	r1, r0
 80137c8:	6938      	ldr	r0, [r7, #16]
 80137ca:	f7ff ff77 	bl	80136bc <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 80137ce:	693b      	ldr	r3, [r7, #16]
 80137d0:	685b      	ldr	r3, [r3, #4]
 80137d2:	f003 0303 	and.w	r3, r3, #3
 80137d6:	2b00      	cmp	r3, #0
 80137d8:	d006      	beq.n	80137e8 <pbuf_alloc+0xd8>
 80137da:	4b42      	ldr	r3, [pc, #264]	; (80138e4 <pbuf_alloc+0x1d4>)
 80137dc:	f44f 7280 	mov.w	r2, #256	; 0x100
 80137e0:	4941      	ldr	r1, [pc, #260]	; (80138e8 <pbuf_alloc+0x1d8>)
 80137e2:	4842      	ldr	r0, [pc, #264]	; (80138ec <pbuf_alloc+0x1dc>)
 80137e4:	f00a faac 	bl	801dd40 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 80137e8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80137ea:	3303      	adds	r3, #3
 80137ec:	f023 0303 	bic.w	r3, r3, #3
 80137f0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 80137f4:	d106      	bne.n	8013804 <pbuf_alloc+0xf4>
 80137f6:	4b3b      	ldr	r3, [pc, #236]	; (80138e4 <pbuf_alloc+0x1d4>)
 80137f8:	f44f 7281 	mov.w	r2, #258	; 0x102
 80137fc:	493c      	ldr	r1, [pc, #240]	; (80138f0 <pbuf_alloc+0x1e0>)
 80137fe:	483b      	ldr	r0, [pc, #236]	; (80138ec <pbuf_alloc+0x1dc>)
 8013800:	f00a fa9e 	bl	801dd40 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8013804:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013806:	2b00      	cmp	r3, #0
 8013808:	d102      	bne.n	8013810 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 801380a:	693b      	ldr	r3, [r7, #16]
 801380c:	627b      	str	r3, [r7, #36]	; 0x24
 801380e:	e002      	b.n	8013816 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8013810:	69fb      	ldr	r3, [r7, #28]
 8013812:	693a      	ldr	r2, [r7, #16]
 8013814:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8013816:	693b      	ldr	r3, [r7, #16]
 8013818:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801381a:	8b7a      	ldrh	r2, [r7, #26]
 801381c:	89fb      	ldrh	r3, [r7, #14]
 801381e:	1ad3      	subs	r3, r2, r3
 8013820:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8013822:	2300      	movs	r3, #0
 8013824:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8013826:	8b7b      	ldrh	r3, [r7, #26]
 8013828:	2b00      	cmp	r3, #0
 801382a:	d19e      	bne.n	801376a <pbuf_alloc+0x5a>
      break;
 801382c:	e055      	b.n	80138da <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801382e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013830:	3303      	adds	r3, #3
 8013832:	b29b      	uxth	r3, r3
 8013834:	f023 0303 	bic.w	r3, r3, #3
 8013838:	b29a      	uxth	r2, r3
 801383a:	88bb      	ldrh	r3, [r7, #4]
 801383c:	3303      	adds	r3, #3
 801383e:	b29b      	uxth	r3, r3
 8013840:	f023 0303 	bic.w	r3, r3, #3
 8013844:	b29b      	uxth	r3, r3
 8013846:	4413      	add	r3, r2
 8013848:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801384a:	8b3b      	ldrh	r3, [r7, #24]
 801384c:	3310      	adds	r3, #16
 801384e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8013850:	8b3a      	ldrh	r2, [r7, #24]
 8013852:	88bb      	ldrh	r3, [r7, #4]
 8013854:	3303      	adds	r3, #3
 8013856:	f023 0303 	bic.w	r3, r3, #3
 801385a:	429a      	cmp	r2, r3
 801385c:	d306      	bcc.n	801386c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801385e:	8afa      	ldrh	r2, [r7, #22]
 8013860:	88bb      	ldrh	r3, [r7, #4]
 8013862:	3303      	adds	r3, #3
 8013864:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8013868:	429a      	cmp	r2, r3
 801386a:	d201      	bcs.n	8013870 <pbuf_alloc+0x160>
        return NULL;
 801386c:	2300      	movs	r3, #0
 801386e:	e035      	b.n	80138dc <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8013870:	8afb      	ldrh	r3, [r7, #22]
 8013872:	4618      	mov	r0, r3
 8013874:	f7ff f96e 	bl	8012b54 <mem_malloc>
 8013878:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801387a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801387c:	2b00      	cmp	r3, #0
 801387e:	d101      	bne.n	8013884 <pbuf_alloc+0x174>
        return NULL;
 8013880:	2300      	movs	r3, #0
 8013882:	e02b      	b.n	80138dc <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8013884:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013886:	3310      	adds	r3, #16
 8013888:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801388a:	4413      	add	r3, r2
 801388c:	3303      	adds	r3, #3
 801388e:	f023 0303 	bic.w	r3, r3, #3
 8013892:	4618      	mov	r0, r3
 8013894:	88b9      	ldrh	r1, [r7, #4]
 8013896:	88ba      	ldrh	r2, [r7, #4]
 8013898:	2300      	movs	r3, #0
 801389a:	9301      	str	r3, [sp, #4]
 801389c:	887b      	ldrh	r3, [r7, #2]
 801389e:	9300      	str	r3, [sp, #0]
 80138a0:	460b      	mov	r3, r1
 80138a2:	4601      	mov	r1, r0
 80138a4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80138a6:	f7ff ff09 	bl	80136bc <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 80138aa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80138ac:	685b      	ldr	r3, [r3, #4]
 80138ae:	f003 0303 	and.w	r3, r3, #3
 80138b2:	2b00      	cmp	r3, #0
 80138b4:	d010      	beq.n	80138d8 <pbuf_alloc+0x1c8>
 80138b6:	4b0b      	ldr	r3, [pc, #44]	; (80138e4 <pbuf_alloc+0x1d4>)
 80138b8:	f44f 7291 	mov.w	r2, #290	; 0x122
 80138bc:	490d      	ldr	r1, [pc, #52]	; (80138f4 <pbuf_alloc+0x1e4>)
 80138be:	480b      	ldr	r0, [pc, #44]	; (80138ec <pbuf_alloc+0x1dc>)
 80138c0:	f00a fa3e 	bl	801dd40 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80138c4:	e008      	b.n	80138d8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80138c6:	4b07      	ldr	r3, [pc, #28]	; (80138e4 <pbuf_alloc+0x1d4>)
 80138c8:	f240 1227 	movw	r2, #295	; 0x127
 80138cc:	490a      	ldr	r1, [pc, #40]	; (80138f8 <pbuf_alloc+0x1e8>)
 80138ce:	4807      	ldr	r0, [pc, #28]	; (80138ec <pbuf_alloc+0x1dc>)
 80138d0:	f00a fa36 	bl	801dd40 <iprintf>
      return NULL;
 80138d4:	2300      	movs	r3, #0
 80138d6:	e001      	b.n	80138dc <pbuf_alloc+0x1cc>
      break;
 80138d8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80138da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80138dc:	4618      	mov	r0, r3
 80138de:	3728      	adds	r7, #40	; 0x28
 80138e0:	46bd      	mov	sp, r7
 80138e2:	bd80      	pop	{r7, pc}
 80138e4:	0801f394 	.word	0x0801f394
 80138e8:	0801f3c4 	.word	0x0801f3c4
 80138ec:	0801f3f4 	.word	0x0801f3f4
 80138f0:	0801f41c 	.word	0x0801f41c
 80138f4:	0801f450 	.word	0x0801f450
 80138f8:	0801f47c 	.word	0x0801f47c

080138fc <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80138fc:	b580      	push	{r7, lr}
 80138fe:	b086      	sub	sp, #24
 8013900:	af02      	add	r7, sp, #8
 8013902:	6078      	str	r0, [r7, #4]
 8013904:	460b      	mov	r3, r1
 8013906:	807b      	strh	r3, [r7, #2]
 8013908:	4613      	mov	r3, r2
 801390a:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 801390c:	883b      	ldrh	r3, [r7, #0]
 801390e:	2b41      	cmp	r3, #65	; 0x41
 8013910:	d009      	beq.n	8013926 <pbuf_alloc_reference+0x2a>
 8013912:	883b      	ldrh	r3, [r7, #0]
 8013914:	2b01      	cmp	r3, #1
 8013916:	d006      	beq.n	8013926 <pbuf_alloc_reference+0x2a>
 8013918:	4b0f      	ldr	r3, [pc, #60]	; (8013958 <pbuf_alloc_reference+0x5c>)
 801391a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801391e:	490f      	ldr	r1, [pc, #60]	; (801395c <pbuf_alloc_reference+0x60>)
 8013920:	480f      	ldr	r0, [pc, #60]	; (8013960 <pbuf_alloc_reference+0x64>)
 8013922:	f00a fa0d 	bl	801dd40 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8013926:	200b      	movs	r0, #11
 8013928:	f7ff fabc 	bl	8012ea4 <memp_malloc>
 801392c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801392e:	68fb      	ldr	r3, [r7, #12]
 8013930:	2b00      	cmp	r3, #0
 8013932:	d101      	bne.n	8013938 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8013934:	2300      	movs	r3, #0
 8013936:	e00b      	b.n	8013950 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8013938:	8879      	ldrh	r1, [r7, #2]
 801393a:	887a      	ldrh	r2, [r7, #2]
 801393c:	2300      	movs	r3, #0
 801393e:	9301      	str	r3, [sp, #4]
 8013940:	883b      	ldrh	r3, [r7, #0]
 8013942:	9300      	str	r3, [sp, #0]
 8013944:	460b      	mov	r3, r1
 8013946:	6879      	ldr	r1, [r7, #4]
 8013948:	68f8      	ldr	r0, [r7, #12]
 801394a:	f7ff feb7 	bl	80136bc <pbuf_init_alloced_pbuf>
  return p;
 801394e:	68fb      	ldr	r3, [r7, #12]
}
 8013950:	4618      	mov	r0, r3
 8013952:	3710      	adds	r7, #16
 8013954:	46bd      	mov	sp, r7
 8013956:	bd80      	pop	{r7, pc}
 8013958:	0801f394 	.word	0x0801f394
 801395c:	0801f498 	.word	0x0801f498
 8013960:	0801f3f4 	.word	0x0801f3f4

08013964 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8013964:	b580      	push	{r7, lr}
 8013966:	b088      	sub	sp, #32
 8013968:	af02      	add	r7, sp, #8
 801396a:	607b      	str	r3, [r7, #4]
 801396c:	4603      	mov	r3, r0
 801396e:	73fb      	strb	r3, [r7, #15]
 8013970:	460b      	mov	r3, r1
 8013972:	81bb      	strh	r3, [r7, #12]
 8013974:	4613      	mov	r3, r2
 8013976:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8013978:	7bfb      	ldrb	r3, [r7, #15]
 801397a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801397c:	8a7b      	ldrh	r3, [r7, #18]
 801397e:	3303      	adds	r3, #3
 8013980:	f023 0203 	bic.w	r2, r3, #3
 8013984:	89bb      	ldrh	r3, [r7, #12]
 8013986:	441a      	add	r2, r3
 8013988:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801398a:	429a      	cmp	r2, r3
 801398c:	d901      	bls.n	8013992 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801398e:	2300      	movs	r3, #0
 8013990:	e018      	b.n	80139c4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8013992:	6a3b      	ldr	r3, [r7, #32]
 8013994:	2b00      	cmp	r3, #0
 8013996:	d007      	beq.n	80139a8 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8013998:	8a7b      	ldrh	r3, [r7, #18]
 801399a:	3303      	adds	r3, #3
 801399c:	f023 0303 	bic.w	r3, r3, #3
 80139a0:	6a3a      	ldr	r2, [r7, #32]
 80139a2:	4413      	add	r3, r2
 80139a4:	617b      	str	r3, [r7, #20]
 80139a6:	e001      	b.n	80139ac <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 80139a8:	2300      	movs	r3, #0
 80139aa:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 80139ac:	6878      	ldr	r0, [r7, #4]
 80139ae:	89b9      	ldrh	r1, [r7, #12]
 80139b0:	89ba      	ldrh	r2, [r7, #12]
 80139b2:	2302      	movs	r3, #2
 80139b4:	9301      	str	r3, [sp, #4]
 80139b6:	897b      	ldrh	r3, [r7, #10]
 80139b8:	9300      	str	r3, [sp, #0]
 80139ba:	460b      	mov	r3, r1
 80139bc:	6979      	ldr	r1, [r7, #20]
 80139be:	f7ff fe7d 	bl	80136bc <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80139c2:	687b      	ldr	r3, [r7, #4]
}
 80139c4:	4618      	mov	r0, r3
 80139c6:	3718      	adds	r7, #24
 80139c8:	46bd      	mov	sp, r7
 80139ca:	bd80      	pop	{r7, pc}

080139cc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80139cc:	b580      	push	{r7, lr}
 80139ce:	b084      	sub	sp, #16
 80139d0:	af00      	add	r7, sp, #0
 80139d2:	6078      	str	r0, [r7, #4]
 80139d4:	460b      	mov	r3, r1
 80139d6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80139d8:	687b      	ldr	r3, [r7, #4]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d106      	bne.n	80139ec <pbuf_realloc+0x20>
 80139de:	4b3a      	ldr	r3, [pc, #232]	; (8013ac8 <pbuf_realloc+0xfc>)
 80139e0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80139e4:	4939      	ldr	r1, [pc, #228]	; (8013acc <pbuf_realloc+0x100>)
 80139e6:	483a      	ldr	r0, [pc, #232]	; (8013ad0 <pbuf_realloc+0x104>)
 80139e8:	f00a f9aa 	bl	801dd40 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80139ec:	687b      	ldr	r3, [r7, #4]
 80139ee:	891b      	ldrh	r3, [r3, #8]
 80139f0:	887a      	ldrh	r2, [r7, #2]
 80139f2:	429a      	cmp	r2, r3
 80139f4:	d263      	bcs.n	8013abe <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80139f6:	687b      	ldr	r3, [r7, #4]
 80139f8:	891a      	ldrh	r2, [r3, #8]
 80139fa:	887b      	ldrh	r3, [r7, #2]
 80139fc:	1ad3      	subs	r3, r2, r3
 80139fe:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 8013a00:	887b      	ldrh	r3, [r7, #2]
 8013a02:	817b      	strh	r3, [r7, #10]
  q = p;
 8013a04:	687b      	ldr	r3, [r7, #4]
 8013a06:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 8013a08:	e018      	b.n	8013a3c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 8013a0a:	68fb      	ldr	r3, [r7, #12]
 8013a0c:	895b      	ldrh	r3, [r3, #10]
 8013a0e:	897a      	ldrh	r2, [r7, #10]
 8013a10:	1ad3      	subs	r3, r2, r3
 8013a12:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8013a14:	68fb      	ldr	r3, [r7, #12]
 8013a16:	891a      	ldrh	r2, [r3, #8]
 8013a18:	893b      	ldrh	r3, [r7, #8]
 8013a1a:	1ad3      	subs	r3, r2, r3
 8013a1c:	b29a      	uxth	r2, r3
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8013a22:	68fb      	ldr	r3, [r7, #12]
 8013a24:	681b      	ldr	r3, [r3, #0]
 8013a26:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8013a28:	68fb      	ldr	r3, [r7, #12]
 8013a2a:	2b00      	cmp	r3, #0
 8013a2c:	d106      	bne.n	8013a3c <pbuf_realloc+0x70>
 8013a2e:	4b26      	ldr	r3, [pc, #152]	; (8013ac8 <pbuf_realloc+0xfc>)
 8013a30:	f240 12af 	movw	r2, #431	; 0x1af
 8013a34:	4927      	ldr	r1, [pc, #156]	; (8013ad4 <pbuf_realloc+0x108>)
 8013a36:	4826      	ldr	r0, [pc, #152]	; (8013ad0 <pbuf_realloc+0x104>)
 8013a38:	f00a f982 	bl	801dd40 <iprintf>
  while (rem_len > q->len) {
 8013a3c:	68fb      	ldr	r3, [r7, #12]
 8013a3e:	895b      	ldrh	r3, [r3, #10]
 8013a40:	897a      	ldrh	r2, [r7, #10]
 8013a42:	429a      	cmp	r2, r3
 8013a44:	d8e1      	bhi.n	8013a0a <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8013a46:	68fb      	ldr	r3, [r7, #12]
 8013a48:	7b1b      	ldrb	r3, [r3, #12]
 8013a4a:	f003 030f 	and.w	r3, r3, #15
 8013a4e:	2b00      	cmp	r3, #0
 8013a50:	d121      	bne.n	8013a96 <pbuf_realloc+0xca>
 8013a52:	68fb      	ldr	r3, [r7, #12]
 8013a54:	895b      	ldrh	r3, [r3, #10]
 8013a56:	897a      	ldrh	r2, [r7, #10]
 8013a58:	429a      	cmp	r2, r3
 8013a5a:	d01c      	beq.n	8013a96 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 8013a5c:	68fb      	ldr	r3, [r7, #12]
 8013a5e:	7b5b      	ldrb	r3, [r3, #13]
 8013a60:	f003 0302 	and.w	r3, r3, #2
 8013a64:	2b00      	cmp	r3, #0
 8013a66:	d116      	bne.n	8013a96 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8013a68:	68fb      	ldr	r3, [r7, #12]
 8013a6a:	685a      	ldr	r2, [r3, #4]
 8013a6c:	68fb      	ldr	r3, [r7, #12]
 8013a6e:	1ad3      	subs	r3, r2, r3
 8013a70:	b29a      	uxth	r2, r3
 8013a72:	897b      	ldrh	r3, [r7, #10]
 8013a74:	4413      	add	r3, r2
 8013a76:	b29b      	uxth	r3, r3
 8013a78:	4619      	mov	r1, r3
 8013a7a:	68f8      	ldr	r0, [r7, #12]
 8013a7c:	f7fe ff5a 	bl	8012934 <mem_trim>
 8013a80:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8013a82:	68fb      	ldr	r3, [r7, #12]
 8013a84:	2b00      	cmp	r3, #0
 8013a86:	d106      	bne.n	8013a96 <pbuf_realloc+0xca>
 8013a88:	4b0f      	ldr	r3, [pc, #60]	; (8013ac8 <pbuf_realloc+0xfc>)
 8013a8a:	f240 12bd 	movw	r2, #445	; 0x1bd
 8013a8e:	4912      	ldr	r1, [pc, #72]	; (8013ad8 <pbuf_realloc+0x10c>)
 8013a90:	480f      	ldr	r0, [pc, #60]	; (8013ad0 <pbuf_realloc+0x104>)
 8013a92:	f00a f955 	bl	801dd40 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8013a96:	68fb      	ldr	r3, [r7, #12]
 8013a98:	897a      	ldrh	r2, [r7, #10]
 8013a9a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 8013a9c:	68fb      	ldr	r3, [r7, #12]
 8013a9e:	895a      	ldrh	r2, [r3, #10]
 8013aa0:	68fb      	ldr	r3, [r7, #12]
 8013aa2:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8013aa4:	68fb      	ldr	r3, [r7, #12]
 8013aa6:	681b      	ldr	r3, [r3, #0]
 8013aa8:	2b00      	cmp	r3, #0
 8013aaa:	d004      	beq.n	8013ab6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 8013aac:	68fb      	ldr	r3, [r7, #12]
 8013aae:	681b      	ldr	r3, [r3, #0]
 8013ab0:	4618      	mov	r0, r3
 8013ab2:	f000 f911 	bl	8013cd8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 8013ab6:	68fb      	ldr	r3, [r7, #12]
 8013ab8:	2200      	movs	r2, #0
 8013aba:	601a      	str	r2, [r3, #0]
 8013abc:	e000      	b.n	8013ac0 <pbuf_realloc+0xf4>
    return;
 8013abe:	bf00      	nop

}
 8013ac0:	3710      	adds	r7, #16
 8013ac2:	46bd      	mov	sp, r7
 8013ac4:	bd80      	pop	{r7, pc}
 8013ac6:	bf00      	nop
 8013ac8:	0801f394 	.word	0x0801f394
 8013acc:	0801f4ac 	.word	0x0801f4ac
 8013ad0:	0801f3f4 	.word	0x0801f3f4
 8013ad4:	0801f4c4 	.word	0x0801f4c4
 8013ad8:	0801f4dc 	.word	0x0801f4dc

08013adc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 8013adc:	b580      	push	{r7, lr}
 8013ade:	b086      	sub	sp, #24
 8013ae0:	af00      	add	r7, sp, #0
 8013ae2:	60f8      	str	r0, [r7, #12]
 8013ae4:	60b9      	str	r1, [r7, #8]
 8013ae6:	4613      	mov	r3, r2
 8013ae8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8013aea:	68fb      	ldr	r3, [r7, #12]
 8013aec:	2b00      	cmp	r3, #0
 8013aee:	d106      	bne.n	8013afe <pbuf_add_header_impl+0x22>
 8013af0:	4b2b      	ldr	r3, [pc, #172]	; (8013ba0 <pbuf_add_header_impl+0xc4>)
 8013af2:	f240 12df 	movw	r2, #479	; 0x1df
 8013af6:	492b      	ldr	r1, [pc, #172]	; (8013ba4 <pbuf_add_header_impl+0xc8>)
 8013af8:	482b      	ldr	r0, [pc, #172]	; (8013ba8 <pbuf_add_header_impl+0xcc>)
 8013afa:	f00a f921 	bl	801dd40 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	2b00      	cmp	r3, #0
 8013b02:	d003      	beq.n	8013b0c <pbuf_add_header_impl+0x30>
 8013b04:	68bb      	ldr	r3, [r7, #8]
 8013b06:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013b0a:	d301      	bcc.n	8013b10 <pbuf_add_header_impl+0x34>
    return 1;
 8013b0c:	2301      	movs	r3, #1
 8013b0e:	e043      	b.n	8013b98 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8013b10:	68bb      	ldr	r3, [r7, #8]
 8013b12:	2b00      	cmp	r3, #0
 8013b14:	d101      	bne.n	8013b1a <pbuf_add_header_impl+0x3e>
    return 0;
 8013b16:	2300      	movs	r3, #0
 8013b18:	e03e      	b.n	8013b98 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 8013b1a:	68bb      	ldr	r3, [r7, #8]
 8013b1c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 8013b1e:	68fb      	ldr	r3, [r7, #12]
 8013b20:	891a      	ldrh	r2, [r3, #8]
 8013b22:	8a7b      	ldrh	r3, [r7, #18]
 8013b24:	4413      	add	r3, r2
 8013b26:	b29b      	uxth	r3, r3
 8013b28:	8a7a      	ldrh	r2, [r7, #18]
 8013b2a:	429a      	cmp	r2, r3
 8013b2c:	d901      	bls.n	8013b32 <pbuf_add_header_impl+0x56>
    return 1;
 8013b2e:	2301      	movs	r3, #1
 8013b30:	e032      	b.n	8013b98 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8013b32:	68fb      	ldr	r3, [r7, #12]
 8013b34:	7b1b      	ldrb	r3, [r3, #12]
 8013b36:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8013b38:	8a3b      	ldrh	r3, [r7, #16]
 8013b3a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8013b3e:	2b00      	cmp	r3, #0
 8013b40:	d00c      	beq.n	8013b5c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8013b42:	68fb      	ldr	r3, [r7, #12]
 8013b44:	685a      	ldr	r2, [r3, #4]
 8013b46:	68bb      	ldr	r3, [r7, #8]
 8013b48:	425b      	negs	r3, r3
 8013b4a:	4413      	add	r3, r2
 8013b4c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 8013b4e:	68fb      	ldr	r3, [r7, #12]
 8013b50:	3310      	adds	r3, #16
 8013b52:	697a      	ldr	r2, [r7, #20]
 8013b54:	429a      	cmp	r2, r3
 8013b56:	d20d      	bcs.n	8013b74 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8013b58:	2301      	movs	r3, #1
 8013b5a:	e01d      	b.n	8013b98 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 8013b5c:	79fb      	ldrb	r3, [r7, #7]
 8013b5e:	2b00      	cmp	r3, #0
 8013b60:	d006      	beq.n	8013b70 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8013b62:	68fb      	ldr	r3, [r7, #12]
 8013b64:	685a      	ldr	r2, [r3, #4]
 8013b66:	68bb      	ldr	r3, [r7, #8]
 8013b68:	425b      	negs	r3, r3
 8013b6a:	4413      	add	r3, r2
 8013b6c:	617b      	str	r3, [r7, #20]
 8013b6e:	e001      	b.n	8013b74 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8013b70:	2301      	movs	r3, #1
 8013b72:	e011      	b.n	8013b98 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8013b74:	68fb      	ldr	r3, [r7, #12]
 8013b76:	697a      	ldr	r2, [r7, #20]
 8013b78:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 8013b7a:	68fb      	ldr	r3, [r7, #12]
 8013b7c:	895a      	ldrh	r2, [r3, #10]
 8013b7e:	8a7b      	ldrh	r3, [r7, #18]
 8013b80:	4413      	add	r3, r2
 8013b82:	b29a      	uxth	r2, r3
 8013b84:	68fb      	ldr	r3, [r7, #12]
 8013b86:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8013b88:	68fb      	ldr	r3, [r7, #12]
 8013b8a:	891a      	ldrh	r2, [r3, #8]
 8013b8c:	8a7b      	ldrh	r3, [r7, #18]
 8013b8e:	4413      	add	r3, r2
 8013b90:	b29a      	uxth	r2, r3
 8013b92:	68fb      	ldr	r3, [r7, #12]
 8013b94:	811a      	strh	r2, [r3, #8]


  return 0;
 8013b96:	2300      	movs	r3, #0
}
 8013b98:	4618      	mov	r0, r3
 8013b9a:	3718      	adds	r7, #24
 8013b9c:	46bd      	mov	sp, r7
 8013b9e:	bd80      	pop	{r7, pc}
 8013ba0:	0801f394 	.word	0x0801f394
 8013ba4:	0801f4f8 	.word	0x0801f4f8
 8013ba8:	0801f3f4 	.word	0x0801f3f4

08013bac <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 8013bac:	b580      	push	{r7, lr}
 8013bae:	b082      	sub	sp, #8
 8013bb0:	af00      	add	r7, sp, #0
 8013bb2:	6078      	str	r0, [r7, #4]
 8013bb4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 8013bb6:	2200      	movs	r2, #0
 8013bb8:	6839      	ldr	r1, [r7, #0]
 8013bba:	6878      	ldr	r0, [r7, #4]
 8013bbc:	f7ff ff8e 	bl	8013adc <pbuf_add_header_impl>
 8013bc0:	4603      	mov	r3, r0
}
 8013bc2:	4618      	mov	r0, r3
 8013bc4:	3708      	adds	r7, #8
 8013bc6:	46bd      	mov	sp, r7
 8013bc8:	bd80      	pop	{r7, pc}
	...

08013bcc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 8013bcc:	b580      	push	{r7, lr}
 8013bce:	b084      	sub	sp, #16
 8013bd0:	af00      	add	r7, sp, #0
 8013bd2:	6078      	str	r0, [r7, #4]
 8013bd4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 8013bd6:	687b      	ldr	r3, [r7, #4]
 8013bd8:	2b00      	cmp	r3, #0
 8013bda:	d106      	bne.n	8013bea <pbuf_remove_header+0x1e>
 8013bdc:	4b20      	ldr	r3, [pc, #128]	; (8013c60 <pbuf_remove_header+0x94>)
 8013bde:	f240 224b 	movw	r2, #587	; 0x24b
 8013be2:	4920      	ldr	r1, [pc, #128]	; (8013c64 <pbuf_remove_header+0x98>)
 8013be4:	4820      	ldr	r0, [pc, #128]	; (8013c68 <pbuf_remove_header+0x9c>)
 8013be6:	f00a f8ab 	bl	801dd40 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 8013bea:	687b      	ldr	r3, [r7, #4]
 8013bec:	2b00      	cmp	r3, #0
 8013bee:	d003      	beq.n	8013bf8 <pbuf_remove_header+0x2c>
 8013bf0:	683b      	ldr	r3, [r7, #0]
 8013bf2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8013bf6:	d301      	bcc.n	8013bfc <pbuf_remove_header+0x30>
    return 1;
 8013bf8:	2301      	movs	r3, #1
 8013bfa:	e02c      	b.n	8013c56 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 8013bfc:	683b      	ldr	r3, [r7, #0]
 8013bfe:	2b00      	cmp	r3, #0
 8013c00:	d101      	bne.n	8013c06 <pbuf_remove_header+0x3a>
    return 0;
 8013c02:	2300      	movs	r3, #0
 8013c04:	e027      	b.n	8013c56 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 8013c06:	683b      	ldr	r3, [r7, #0]
 8013c08:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	895b      	ldrh	r3, [r3, #10]
 8013c0e:	89fa      	ldrh	r2, [r7, #14]
 8013c10:	429a      	cmp	r2, r3
 8013c12:	d908      	bls.n	8013c26 <pbuf_remove_header+0x5a>
 8013c14:	4b12      	ldr	r3, [pc, #72]	; (8013c60 <pbuf_remove_header+0x94>)
 8013c16:	f240 2255 	movw	r2, #597	; 0x255
 8013c1a:	4914      	ldr	r1, [pc, #80]	; (8013c6c <pbuf_remove_header+0xa0>)
 8013c1c:	4812      	ldr	r0, [pc, #72]	; (8013c68 <pbuf_remove_header+0x9c>)
 8013c1e:	f00a f88f 	bl	801dd40 <iprintf>
 8013c22:	2301      	movs	r3, #1
 8013c24:	e017      	b.n	8013c56 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8013c26:	687b      	ldr	r3, [r7, #4]
 8013c28:	685b      	ldr	r3, [r3, #4]
 8013c2a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 8013c2c:	687b      	ldr	r3, [r7, #4]
 8013c2e:	685a      	ldr	r2, [r3, #4]
 8013c30:	683b      	ldr	r3, [r7, #0]
 8013c32:	441a      	add	r2, r3
 8013c34:	687b      	ldr	r3, [r7, #4]
 8013c36:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8013c38:	687b      	ldr	r3, [r7, #4]
 8013c3a:	895a      	ldrh	r2, [r3, #10]
 8013c3c:	89fb      	ldrh	r3, [r7, #14]
 8013c3e:	1ad3      	subs	r3, r2, r3
 8013c40:	b29a      	uxth	r2, r3
 8013c42:	687b      	ldr	r3, [r7, #4]
 8013c44:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8013c46:	687b      	ldr	r3, [r7, #4]
 8013c48:	891a      	ldrh	r2, [r3, #8]
 8013c4a:	89fb      	ldrh	r3, [r7, #14]
 8013c4c:	1ad3      	subs	r3, r2, r3
 8013c4e:	b29a      	uxth	r2, r3
 8013c50:	687b      	ldr	r3, [r7, #4]
 8013c52:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8013c54:	2300      	movs	r3, #0
}
 8013c56:	4618      	mov	r0, r3
 8013c58:	3710      	adds	r7, #16
 8013c5a:	46bd      	mov	sp, r7
 8013c5c:	bd80      	pop	{r7, pc}
 8013c5e:	bf00      	nop
 8013c60:	0801f394 	.word	0x0801f394
 8013c64:	0801f4f8 	.word	0x0801f4f8
 8013c68:	0801f3f4 	.word	0x0801f3f4
 8013c6c:	0801f504 	.word	0x0801f504

08013c70 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8013c70:	b580      	push	{r7, lr}
 8013c72:	b082      	sub	sp, #8
 8013c74:	af00      	add	r7, sp, #0
 8013c76:	6078      	str	r0, [r7, #4]
 8013c78:	460b      	mov	r3, r1
 8013c7a:	807b      	strh	r3, [r7, #2]
 8013c7c:	4613      	mov	r3, r2
 8013c7e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8013c80:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013c84:	2b00      	cmp	r3, #0
 8013c86:	da08      	bge.n	8013c9a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8013c88:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013c8c:	425b      	negs	r3, r3
 8013c8e:	4619      	mov	r1, r3
 8013c90:	6878      	ldr	r0, [r7, #4]
 8013c92:	f7ff ff9b 	bl	8013bcc <pbuf_remove_header>
 8013c96:	4603      	mov	r3, r0
 8013c98:	e007      	b.n	8013caa <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 8013c9a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013c9e:	787a      	ldrb	r2, [r7, #1]
 8013ca0:	4619      	mov	r1, r3
 8013ca2:	6878      	ldr	r0, [r7, #4]
 8013ca4:	f7ff ff1a 	bl	8013adc <pbuf_add_header_impl>
 8013ca8:	4603      	mov	r3, r0
  }
}
 8013caa:	4618      	mov	r0, r3
 8013cac:	3708      	adds	r7, #8
 8013cae:	46bd      	mov	sp, r7
 8013cb0:	bd80      	pop	{r7, pc}

08013cb2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 8013cb2:	b580      	push	{r7, lr}
 8013cb4:	b082      	sub	sp, #8
 8013cb6:	af00      	add	r7, sp, #0
 8013cb8:	6078      	str	r0, [r7, #4]
 8013cba:	460b      	mov	r3, r1
 8013cbc:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 8013cbe:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013cc2:	2201      	movs	r2, #1
 8013cc4:	4619      	mov	r1, r3
 8013cc6:	6878      	ldr	r0, [r7, #4]
 8013cc8:	f7ff ffd2 	bl	8013c70 <pbuf_header_impl>
 8013ccc:	4603      	mov	r3, r0
}
 8013cce:	4618      	mov	r0, r3
 8013cd0:	3708      	adds	r7, #8
 8013cd2:	46bd      	mov	sp, r7
 8013cd4:	bd80      	pop	{r7, pc}
	...

08013cd8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 8013cd8:	b580      	push	{r7, lr}
 8013cda:	b088      	sub	sp, #32
 8013cdc:	af00      	add	r7, sp, #0
 8013cde:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 8013ce0:	687b      	ldr	r3, [r7, #4]
 8013ce2:	2b00      	cmp	r3, #0
 8013ce4:	d10b      	bne.n	8013cfe <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 8013ce6:	687b      	ldr	r3, [r7, #4]
 8013ce8:	2b00      	cmp	r3, #0
 8013cea:	d106      	bne.n	8013cfa <pbuf_free+0x22>
 8013cec:	4b3b      	ldr	r3, [pc, #236]	; (8013ddc <pbuf_free+0x104>)
 8013cee:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 8013cf2:	493b      	ldr	r1, [pc, #236]	; (8013de0 <pbuf_free+0x108>)
 8013cf4:	483b      	ldr	r0, [pc, #236]	; (8013de4 <pbuf_free+0x10c>)
 8013cf6:	f00a f823 	bl	801dd40 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 8013cfa:	2300      	movs	r3, #0
 8013cfc:	e069      	b.n	8013dd2 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 8013cfe:	2300      	movs	r3, #0
 8013d00:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 8013d02:	e062      	b.n	8013dca <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 8013d04:	f008 fdd0 	bl	801c8a8 <sys_arch_protect>
 8013d08:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 8013d0a:	687b      	ldr	r3, [r7, #4]
 8013d0c:	7b9b      	ldrb	r3, [r3, #14]
 8013d0e:	2b00      	cmp	r3, #0
 8013d10:	d106      	bne.n	8013d20 <pbuf_free+0x48>
 8013d12:	4b32      	ldr	r3, [pc, #200]	; (8013ddc <pbuf_free+0x104>)
 8013d14:	f240 22f1 	movw	r2, #753	; 0x2f1
 8013d18:	4933      	ldr	r1, [pc, #204]	; (8013de8 <pbuf_free+0x110>)
 8013d1a:	4832      	ldr	r0, [pc, #200]	; (8013de4 <pbuf_free+0x10c>)
 8013d1c:	f00a f810 	bl	801dd40 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8013d20:	687b      	ldr	r3, [r7, #4]
 8013d22:	7b9b      	ldrb	r3, [r3, #14]
 8013d24:	3b01      	subs	r3, #1
 8013d26:	b2da      	uxtb	r2, r3
 8013d28:	687b      	ldr	r3, [r7, #4]
 8013d2a:	739a      	strb	r2, [r3, #14]
 8013d2c:	687b      	ldr	r3, [r7, #4]
 8013d2e:	7b9b      	ldrb	r3, [r3, #14]
 8013d30:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8013d32:	69b8      	ldr	r0, [r7, #24]
 8013d34:	f008 fdc6 	bl	801c8c4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8013d38:	7dfb      	ldrb	r3, [r7, #23]
 8013d3a:	2b00      	cmp	r3, #0
 8013d3c:	d143      	bne.n	8013dc6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	681b      	ldr	r3, [r3, #0]
 8013d42:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8013d44:	687b      	ldr	r3, [r7, #4]
 8013d46:	7b1b      	ldrb	r3, [r3, #12]
 8013d48:	f003 030f 	and.w	r3, r3, #15
 8013d4c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	7b5b      	ldrb	r3, [r3, #13]
 8013d52:	f003 0302 	and.w	r3, r3, #2
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d011      	beq.n	8013d7e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 8013d5a:	687b      	ldr	r3, [r7, #4]
 8013d5c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 8013d5e:	68bb      	ldr	r3, [r7, #8]
 8013d60:	691b      	ldr	r3, [r3, #16]
 8013d62:	2b00      	cmp	r3, #0
 8013d64:	d106      	bne.n	8013d74 <pbuf_free+0x9c>
 8013d66:	4b1d      	ldr	r3, [pc, #116]	; (8013ddc <pbuf_free+0x104>)
 8013d68:	f240 22ff 	movw	r2, #767	; 0x2ff
 8013d6c:	491f      	ldr	r1, [pc, #124]	; (8013dec <pbuf_free+0x114>)
 8013d6e:	481d      	ldr	r0, [pc, #116]	; (8013de4 <pbuf_free+0x10c>)
 8013d70:	f009 ffe6 	bl	801dd40 <iprintf>
        pc->custom_free_function(p);
 8013d74:	68bb      	ldr	r3, [r7, #8]
 8013d76:	691b      	ldr	r3, [r3, #16]
 8013d78:	6878      	ldr	r0, [r7, #4]
 8013d7a:	4798      	blx	r3
 8013d7c:	e01d      	b.n	8013dba <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 8013d7e:	7bfb      	ldrb	r3, [r7, #15]
 8013d80:	2b02      	cmp	r3, #2
 8013d82:	d104      	bne.n	8013d8e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8013d84:	6879      	ldr	r1, [r7, #4]
 8013d86:	200c      	movs	r0, #12
 8013d88:	f7ff f902 	bl	8012f90 <memp_free>
 8013d8c:	e015      	b.n	8013dba <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 8013d8e:	7bfb      	ldrb	r3, [r7, #15]
 8013d90:	2b01      	cmp	r3, #1
 8013d92:	d104      	bne.n	8013d9e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8013d94:	6879      	ldr	r1, [r7, #4]
 8013d96:	200b      	movs	r0, #11
 8013d98:	f7ff f8fa 	bl	8012f90 <memp_free>
 8013d9c:	e00d      	b.n	8013dba <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 8013d9e:	7bfb      	ldrb	r3, [r7, #15]
 8013da0:	2b00      	cmp	r3, #0
 8013da2:	d103      	bne.n	8013dac <pbuf_free+0xd4>
          mem_free(p);
 8013da4:	6878      	ldr	r0, [r7, #4]
 8013da6:	f7fe fd35 	bl	8012814 <mem_free>
 8013daa:	e006      	b.n	8013dba <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 8013dac:	4b0b      	ldr	r3, [pc, #44]	; (8013ddc <pbuf_free+0x104>)
 8013dae:	f240 320f 	movw	r2, #783	; 0x30f
 8013db2:	490f      	ldr	r1, [pc, #60]	; (8013df0 <pbuf_free+0x118>)
 8013db4:	480b      	ldr	r0, [pc, #44]	; (8013de4 <pbuf_free+0x10c>)
 8013db6:	f009 ffc3 	bl	801dd40 <iprintf>
        }
      }
      count++;
 8013dba:	7ffb      	ldrb	r3, [r7, #31]
 8013dbc:	3301      	adds	r3, #1
 8013dbe:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 8013dc0:	693b      	ldr	r3, [r7, #16]
 8013dc2:	607b      	str	r3, [r7, #4]
 8013dc4:	e001      	b.n	8013dca <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 8013dc6:	2300      	movs	r3, #0
 8013dc8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8013dca:	687b      	ldr	r3, [r7, #4]
 8013dcc:	2b00      	cmp	r3, #0
 8013dce:	d199      	bne.n	8013d04 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 8013dd0:	7ffb      	ldrb	r3, [r7, #31]
}
 8013dd2:	4618      	mov	r0, r3
 8013dd4:	3720      	adds	r7, #32
 8013dd6:	46bd      	mov	sp, r7
 8013dd8:	bd80      	pop	{r7, pc}
 8013dda:	bf00      	nop
 8013ddc:	0801f394 	.word	0x0801f394
 8013de0:	0801f4f8 	.word	0x0801f4f8
 8013de4:	0801f3f4 	.word	0x0801f3f4
 8013de8:	0801f524 	.word	0x0801f524
 8013dec:	0801f53c 	.word	0x0801f53c
 8013df0:	0801f560 	.word	0x0801f560

08013df4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 8013df4:	b480      	push	{r7}
 8013df6:	b085      	sub	sp, #20
 8013df8:	af00      	add	r7, sp, #0
 8013dfa:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 8013dfc:	2300      	movs	r3, #0
 8013dfe:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 8013e00:	e005      	b.n	8013e0e <pbuf_clen+0x1a>
    ++len;
 8013e02:	89fb      	ldrh	r3, [r7, #14]
 8013e04:	3301      	adds	r3, #1
 8013e06:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 8013e08:	687b      	ldr	r3, [r7, #4]
 8013e0a:	681b      	ldr	r3, [r3, #0]
 8013e0c:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 8013e0e:	687b      	ldr	r3, [r7, #4]
 8013e10:	2b00      	cmp	r3, #0
 8013e12:	d1f6      	bne.n	8013e02 <pbuf_clen+0xe>
  }
  return len;
 8013e14:	89fb      	ldrh	r3, [r7, #14]
}
 8013e16:	4618      	mov	r0, r3
 8013e18:	3714      	adds	r7, #20
 8013e1a:	46bd      	mov	sp, r7
 8013e1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013e20:	4770      	bx	lr
	...

08013e24 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8013e24:	b580      	push	{r7, lr}
 8013e26:	b084      	sub	sp, #16
 8013e28:	af00      	add	r7, sp, #0
 8013e2a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 8013e2c:	687b      	ldr	r3, [r7, #4]
 8013e2e:	2b00      	cmp	r3, #0
 8013e30:	d016      	beq.n	8013e60 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8013e32:	f008 fd39 	bl	801c8a8 <sys_arch_protect>
 8013e36:	60f8      	str	r0, [r7, #12]
 8013e38:	687b      	ldr	r3, [r7, #4]
 8013e3a:	7b9b      	ldrb	r3, [r3, #14]
 8013e3c:	3301      	adds	r3, #1
 8013e3e:	b2da      	uxtb	r2, r3
 8013e40:	687b      	ldr	r3, [r7, #4]
 8013e42:	739a      	strb	r2, [r3, #14]
 8013e44:	68f8      	ldr	r0, [r7, #12]
 8013e46:	f008 fd3d 	bl	801c8c4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 8013e4a:	687b      	ldr	r3, [r7, #4]
 8013e4c:	7b9b      	ldrb	r3, [r3, #14]
 8013e4e:	2b00      	cmp	r3, #0
 8013e50:	d106      	bne.n	8013e60 <pbuf_ref+0x3c>
 8013e52:	4b05      	ldr	r3, [pc, #20]	; (8013e68 <pbuf_ref+0x44>)
 8013e54:	f240 3242 	movw	r2, #834	; 0x342
 8013e58:	4904      	ldr	r1, [pc, #16]	; (8013e6c <pbuf_ref+0x48>)
 8013e5a:	4805      	ldr	r0, [pc, #20]	; (8013e70 <pbuf_ref+0x4c>)
 8013e5c:	f009 ff70 	bl	801dd40 <iprintf>
  }
}
 8013e60:	bf00      	nop
 8013e62:	3710      	adds	r7, #16
 8013e64:	46bd      	mov	sp, r7
 8013e66:	bd80      	pop	{r7, pc}
 8013e68:	0801f394 	.word	0x0801f394
 8013e6c:	0801f574 	.word	0x0801f574
 8013e70:	0801f3f4 	.word	0x0801f3f4

08013e74 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8013e74:	b580      	push	{r7, lr}
 8013e76:	b084      	sub	sp, #16
 8013e78:	af00      	add	r7, sp, #0
 8013e7a:	6078      	str	r0, [r7, #4]
 8013e7c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 8013e7e:	687b      	ldr	r3, [r7, #4]
 8013e80:	2b00      	cmp	r3, #0
 8013e82:	d002      	beq.n	8013e8a <pbuf_cat+0x16>
 8013e84:	683b      	ldr	r3, [r7, #0]
 8013e86:	2b00      	cmp	r3, #0
 8013e88:	d107      	bne.n	8013e9a <pbuf_cat+0x26>
 8013e8a:	4b20      	ldr	r3, [pc, #128]	; (8013f0c <pbuf_cat+0x98>)
 8013e8c:	f240 3259 	movw	r2, #857	; 0x359
 8013e90:	491f      	ldr	r1, [pc, #124]	; (8013f10 <pbuf_cat+0x9c>)
 8013e92:	4820      	ldr	r0, [pc, #128]	; (8013f14 <pbuf_cat+0xa0>)
 8013e94:	f009 ff54 	bl	801dd40 <iprintf>
 8013e98:	e034      	b.n	8013f04 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 8013e9a:	687b      	ldr	r3, [r7, #4]
 8013e9c:	60fb      	str	r3, [r7, #12]
 8013e9e:	e00a      	b.n	8013eb6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8013ea0:	68fb      	ldr	r3, [r7, #12]
 8013ea2:	891a      	ldrh	r2, [r3, #8]
 8013ea4:	683b      	ldr	r3, [r7, #0]
 8013ea6:	891b      	ldrh	r3, [r3, #8]
 8013ea8:	4413      	add	r3, r2
 8013eaa:	b29a      	uxth	r2, r3
 8013eac:	68fb      	ldr	r3, [r7, #12]
 8013eae:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 8013eb0:	68fb      	ldr	r3, [r7, #12]
 8013eb2:	681b      	ldr	r3, [r3, #0]
 8013eb4:	60fb      	str	r3, [r7, #12]
 8013eb6:	68fb      	ldr	r3, [r7, #12]
 8013eb8:	681b      	ldr	r3, [r3, #0]
 8013eba:	2b00      	cmp	r3, #0
 8013ebc:	d1f0      	bne.n	8013ea0 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 8013ebe:	68fb      	ldr	r3, [r7, #12]
 8013ec0:	891a      	ldrh	r2, [r3, #8]
 8013ec2:	68fb      	ldr	r3, [r7, #12]
 8013ec4:	895b      	ldrh	r3, [r3, #10]
 8013ec6:	429a      	cmp	r2, r3
 8013ec8:	d006      	beq.n	8013ed8 <pbuf_cat+0x64>
 8013eca:	4b10      	ldr	r3, [pc, #64]	; (8013f0c <pbuf_cat+0x98>)
 8013ecc:	f240 3262 	movw	r2, #866	; 0x362
 8013ed0:	4911      	ldr	r1, [pc, #68]	; (8013f18 <pbuf_cat+0xa4>)
 8013ed2:	4810      	ldr	r0, [pc, #64]	; (8013f14 <pbuf_cat+0xa0>)
 8013ed4:	f009 ff34 	bl	801dd40 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 8013ed8:	68fb      	ldr	r3, [r7, #12]
 8013eda:	681b      	ldr	r3, [r3, #0]
 8013edc:	2b00      	cmp	r3, #0
 8013ede:	d006      	beq.n	8013eee <pbuf_cat+0x7a>
 8013ee0:	4b0a      	ldr	r3, [pc, #40]	; (8013f0c <pbuf_cat+0x98>)
 8013ee2:	f240 3263 	movw	r2, #867	; 0x363
 8013ee6:	490d      	ldr	r1, [pc, #52]	; (8013f1c <pbuf_cat+0xa8>)
 8013ee8:	480a      	ldr	r0, [pc, #40]	; (8013f14 <pbuf_cat+0xa0>)
 8013eea:	f009 ff29 	bl	801dd40 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8013eee:	68fb      	ldr	r3, [r7, #12]
 8013ef0:	891a      	ldrh	r2, [r3, #8]
 8013ef2:	683b      	ldr	r3, [r7, #0]
 8013ef4:	891b      	ldrh	r3, [r3, #8]
 8013ef6:	4413      	add	r3, r2
 8013ef8:	b29a      	uxth	r2, r3
 8013efa:	68fb      	ldr	r3, [r7, #12]
 8013efc:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 8013efe:	68fb      	ldr	r3, [r7, #12]
 8013f00:	683a      	ldr	r2, [r7, #0]
 8013f02:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 8013f04:	3710      	adds	r7, #16
 8013f06:	46bd      	mov	sp, r7
 8013f08:	bd80      	pop	{r7, pc}
 8013f0a:	bf00      	nop
 8013f0c:	0801f394 	.word	0x0801f394
 8013f10:	0801f588 	.word	0x0801f588
 8013f14:	0801f3f4 	.word	0x0801f3f4
 8013f18:	0801f5c0 	.word	0x0801f5c0
 8013f1c:	0801f5f0 	.word	0x0801f5f0

08013f20 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8013f20:	b580      	push	{r7, lr}
 8013f22:	b082      	sub	sp, #8
 8013f24:	af00      	add	r7, sp, #0
 8013f26:	6078      	str	r0, [r7, #4]
 8013f28:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 8013f2a:	6839      	ldr	r1, [r7, #0]
 8013f2c:	6878      	ldr	r0, [r7, #4]
 8013f2e:	f7ff ffa1 	bl	8013e74 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8013f32:	6838      	ldr	r0, [r7, #0]
 8013f34:	f7ff ff76 	bl	8013e24 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8013f38:	bf00      	nop
 8013f3a:	3708      	adds	r7, #8
 8013f3c:	46bd      	mov	sp, r7
 8013f3e:	bd80      	pop	{r7, pc}

08013f40 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8013f40:	b580      	push	{r7, lr}
 8013f42:	b086      	sub	sp, #24
 8013f44:	af00      	add	r7, sp, #0
 8013f46:	6078      	str	r0, [r7, #4]
 8013f48:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 8013f4a:	2300      	movs	r3, #0
 8013f4c:	617b      	str	r3, [r7, #20]
 8013f4e:	2300      	movs	r3, #0
 8013f50:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	2b00      	cmp	r3, #0
 8013f56:	d008      	beq.n	8013f6a <pbuf_copy+0x2a>
 8013f58:	683b      	ldr	r3, [r7, #0]
 8013f5a:	2b00      	cmp	r3, #0
 8013f5c:	d005      	beq.n	8013f6a <pbuf_copy+0x2a>
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	891a      	ldrh	r2, [r3, #8]
 8013f62:	683b      	ldr	r3, [r7, #0]
 8013f64:	891b      	ldrh	r3, [r3, #8]
 8013f66:	429a      	cmp	r2, r3
 8013f68:	d209      	bcs.n	8013f7e <pbuf_copy+0x3e>
 8013f6a:	4b57      	ldr	r3, [pc, #348]	; (80140c8 <pbuf_copy+0x188>)
 8013f6c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8013f70:	4956      	ldr	r1, [pc, #344]	; (80140cc <pbuf_copy+0x18c>)
 8013f72:	4857      	ldr	r0, [pc, #348]	; (80140d0 <pbuf_copy+0x190>)
 8013f74:	f009 fee4 	bl	801dd40 <iprintf>
 8013f78:	f06f 030f 	mvn.w	r3, #15
 8013f7c:	e09f      	b.n	80140be <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 8013f7e:	687b      	ldr	r3, [r7, #4]
 8013f80:	895b      	ldrh	r3, [r3, #10]
 8013f82:	461a      	mov	r2, r3
 8013f84:	697b      	ldr	r3, [r7, #20]
 8013f86:	1ad2      	subs	r2, r2, r3
 8013f88:	683b      	ldr	r3, [r7, #0]
 8013f8a:	895b      	ldrh	r3, [r3, #10]
 8013f8c:	4619      	mov	r1, r3
 8013f8e:	693b      	ldr	r3, [r7, #16]
 8013f90:	1acb      	subs	r3, r1, r3
 8013f92:	429a      	cmp	r2, r3
 8013f94:	d306      	bcc.n	8013fa4 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8013f96:	683b      	ldr	r3, [r7, #0]
 8013f98:	895b      	ldrh	r3, [r3, #10]
 8013f9a:	461a      	mov	r2, r3
 8013f9c:	693b      	ldr	r3, [r7, #16]
 8013f9e:	1ad3      	subs	r3, r2, r3
 8013fa0:	60fb      	str	r3, [r7, #12]
 8013fa2:	e005      	b.n	8013fb0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8013fa4:	687b      	ldr	r3, [r7, #4]
 8013fa6:	895b      	ldrh	r3, [r3, #10]
 8013fa8:	461a      	mov	r2, r3
 8013faa:	697b      	ldr	r3, [r7, #20]
 8013fac:	1ad3      	subs	r3, r2, r3
 8013fae:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	685a      	ldr	r2, [r3, #4]
 8013fb4:	697b      	ldr	r3, [r7, #20]
 8013fb6:	18d0      	adds	r0, r2, r3
 8013fb8:	683b      	ldr	r3, [r7, #0]
 8013fba:	685a      	ldr	r2, [r3, #4]
 8013fbc:	693b      	ldr	r3, [r7, #16]
 8013fbe:	4413      	add	r3, r2
 8013fc0:	68fa      	ldr	r2, [r7, #12]
 8013fc2:	4619      	mov	r1, r3
 8013fc4:	f009 ffed 	bl	801dfa2 <memcpy>
    offset_to += len;
 8013fc8:	697a      	ldr	r2, [r7, #20]
 8013fca:	68fb      	ldr	r3, [r7, #12]
 8013fcc:	4413      	add	r3, r2
 8013fce:	617b      	str	r3, [r7, #20]
    offset_from += len;
 8013fd0:	693a      	ldr	r2, [r7, #16]
 8013fd2:	68fb      	ldr	r3, [r7, #12]
 8013fd4:	4413      	add	r3, r2
 8013fd6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 8013fd8:	687b      	ldr	r3, [r7, #4]
 8013fda:	895b      	ldrh	r3, [r3, #10]
 8013fdc:	461a      	mov	r2, r3
 8013fde:	697b      	ldr	r3, [r7, #20]
 8013fe0:	4293      	cmp	r3, r2
 8013fe2:	d906      	bls.n	8013ff2 <pbuf_copy+0xb2>
 8013fe4:	4b38      	ldr	r3, [pc, #224]	; (80140c8 <pbuf_copy+0x188>)
 8013fe6:	f240 32d9 	movw	r2, #985	; 0x3d9
 8013fea:	493a      	ldr	r1, [pc, #232]	; (80140d4 <pbuf_copy+0x194>)
 8013fec:	4838      	ldr	r0, [pc, #224]	; (80140d0 <pbuf_copy+0x190>)
 8013fee:	f009 fea7 	bl	801dd40 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 8013ff2:	683b      	ldr	r3, [r7, #0]
 8013ff4:	895b      	ldrh	r3, [r3, #10]
 8013ff6:	461a      	mov	r2, r3
 8013ff8:	693b      	ldr	r3, [r7, #16]
 8013ffa:	4293      	cmp	r3, r2
 8013ffc:	d906      	bls.n	801400c <pbuf_copy+0xcc>
 8013ffe:	4b32      	ldr	r3, [pc, #200]	; (80140c8 <pbuf_copy+0x188>)
 8014000:	f240 32da 	movw	r2, #986	; 0x3da
 8014004:	4934      	ldr	r1, [pc, #208]	; (80140d8 <pbuf_copy+0x198>)
 8014006:	4832      	ldr	r0, [pc, #200]	; (80140d0 <pbuf_copy+0x190>)
 8014008:	f009 fe9a 	bl	801dd40 <iprintf>
    if (offset_from >= p_from->len) {
 801400c:	683b      	ldr	r3, [r7, #0]
 801400e:	895b      	ldrh	r3, [r3, #10]
 8014010:	461a      	mov	r2, r3
 8014012:	693b      	ldr	r3, [r7, #16]
 8014014:	4293      	cmp	r3, r2
 8014016:	d304      	bcc.n	8014022 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8014018:	2300      	movs	r3, #0
 801401a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 801401c:	683b      	ldr	r3, [r7, #0]
 801401e:	681b      	ldr	r3, [r3, #0]
 8014020:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8014022:	687b      	ldr	r3, [r7, #4]
 8014024:	895b      	ldrh	r3, [r3, #10]
 8014026:	461a      	mov	r2, r3
 8014028:	697b      	ldr	r3, [r7, #20]
 801402a:	4293      	cmp	r3, r2
 801402c:	d114      	bne.n	8014058 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801402e:	2300      	movs	r3, #0
 8014030:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8014032:	687b      	ldr	r3, [r7, #4]
 8014034:	681b      	ldr	r3, [r3, #0]
 8014036:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8014038:	687b      	ldr	r3, [r7, #4]
 801403a:	2b00      	cmp	r3, #0
 801403c:	d10c      	bne.n	8014058 <pbuf_copy+0x118>
 801403e:	683b      	ldr	r3, [r7, #0]
 8014040:	2b00      	cmp	r3, #0
 8014042:	d009      	beq.n	8014058 <pbuf_copy+0x118>
 8014044:	4b20      	ldr	r3, [pc, #128]	; (80140c8 <pbuf_copy+0x188>)
 8014046:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801404a:	4924      	ldr	r1, [pc, #144]	; (80140dc <pbuf_copy+0x19c>)
 801404c:	4820      	ldr	r0, [pc, #128]	; (80140d0 <pbuf_copy+0x190>)
 801404e:	f009 fe77 	bl	801dd40 <iprintf>
 8014052:	f06f 030f 	mvn.w	r3, #15
 8014056:	e032      	b.n	80140be <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8014058:	683b      	ldr	r3, [r7, #0]
 801405a:	2b00      	cmp	r3, #0
 801405c:	d013      	beq.n	8014086 <pbuf_copy+0x146>
 801405e:	683b      	ldr	r3, [r7, #0]
 8014060:	895a      	ldrh	r2, [r3, #10]
 8014062:	683b      	ldr	r3, [r7, #0]
 8014064:	891b      	ldrh	r3, [r3, #8]
 8014066:	429a      	cmp	r2, r3
 8014068:	d10d      	bne.n	8014086 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801406a:	683b      	ldr	r3, [r7, #0]
 801406c:	681b      	ldr	r3, [r3, #0]
 801406e:	2b00      	cmp	r3, #0
 8014070:	d009      	beq.n	8014086 <pbuf_copy+0x146>
 8014072:	4b15      	ldr	r3, [pc, #84]	; (80140c8 <pbuf_copy+0x188>)
 8014074:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8014078:	4919      	ldr	r1, [pc, #100]	; (80140e0 <pbuf_copy+0x1a0>)
 801407a:	4815      	ldr	r0, [pc, #84]	; (80140d0 <pbuf_copy+0x190>)
 801407c:	f009 fe60 	bl	801dd40 <iprintf>
 8014080:	f06f 0305 	mvn.w	r3, #5
 8014084:	e01b      	b.n	80140be <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8014086:	687b      	ldr	r3, [r7, #4]
 8014088:	2b00      	cmp	r3, #0
 801408a:	d013      	beq.n	80140b4 <pbuf_copy+0x174>
 801408c:	687b      	ldr	r3, [r7, #4]
 801408e:	895a      	ldrh	r2, [r3, #10]
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	891b      	ldrh	r3, [r3, #8]
 8014094:	429a      	cmp	r2, r3
 8014096:	d10d      	bne.n	80140b4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	681b      	ldr	r3, [r3, #0]
 801409c:	2b00      	cmp	r3, #0
 801409e:	d009      	beq.n	80140b4 <pbuf_copy+0x174>
 80140a0:	4b09      	ldr	r3, [pc, #36]	; (80140c8 <pbuf_copy+0x188>)
 80140a2:	f240 32ee 	movw	r2, #1006	; 0x3ee
 80140a6:	490e      	ldr	r1, [pc, #56]	; (80140e0 <pbuf_copy+0x1a0>)
 80140a8:	4809      	ldr	r0, [pc, #36]	; (80140d0 <pbuf_copy+0x190>)
 80140aa:	f009 fe49 	bl	801dd40 <iprintf>
 80140ae:	f06f 0305 	mvn.w	r3, #5
 80140b2:	e004      	b.n	80140be <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80140b4:	683b      	ldr	r3, [r7, #0]
 80140b6:	2b00      	cmp	r3, #0
 80140b8:	f47f af61 	bne.w	8013f7e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80140bc:	2300      	movs	r3, #0
}
 80140be:	4618      	mov	r0, r3
 80140c0:	3718      	adds	r7, #24
 80140c2:	46bd      	mov	sp, r7
 80140c4:	bd80      	pop	{r7, pc}
 80140c6:	bf00      	nop
 80140c8:	0801f394 	.word	0x0801f394
 80140cc:	0801f63c 	.word	0x0801f63c
 80140d0:	0801f3f4 	.word	0x0801f3f4
 80140d4:	0801f66c 	.word	0x0801f66c
 80140d8:	0801f684 	.word	0x0801f684
 80140dc:	0801f6a0 	.word	0x0801f6a0
 80140e0:	0801f6b0 	.word	0x0801f6b0

080140e4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80140e4:	b580      	push	{r7, lr}
 80140e6:	b088      	sub	sp, #32
 80140e8:	af00      	add	r7, sp, #0
 80140ea:	60f8      	str	r0, [r7, #12]
 80140ec:	60b9      	str	r1, [r7, #8]
 80140ee:	4611      	mov	r1, r2
 80140f0:	461a      	mov	r2, r3
 80140f2:	460b      	mov	r3, r1
 80140f4:	80fb      	strh	r3, [r7, #6]
 80140f6:	4613      	mov	r3, r2
 80140f8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80140fa:	2300      	movs	r3, #0
 80140fc:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80140fe:	2300      	movs	r3, #0
 8014100:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 8014102:	68fb      	ldr	r3, [r7, #12]
 8014104:	2b00      	cmp	r3, #0
 8014106:	d108      	bne.n	801411a <pbuf_copy_partial+0x36>
 8014108:	4b2b      	ldr	r3, [pc, #172]	; (80141b8 <pbuf_copy_partial+0xd4>)
 801410a:	f240 420a 	movw	r2, #1034	; 0x40a
 801410e:	492b      	ldr	r1, [pc, #172]	; (80141bc <pbuf_copy_partial+0xd8>)
 8014110:	482b      	ldr	r0, [pc, #172]	; (80141c0 <pbuf_copy_partial+0xdc>)
 8014112:	f009 fe15 	bl	801dd40 <iprintf>
 8014116:	2300      	movs	r3, #0
 8014118:	e04a      	b.n	80141b0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801411a:	68bb      	ldr	r3, [r7, #8]
 801411c:	2b00      	cmp	r3, #0
 801411e:	d108      	bne.n	8014132 <pbuf_copy_partial+0x4e>
 8014120:	4b25      	ldr	r3, [pc, #148]	; (80141b8 <pbuf_copy_partial+0xd4>)
 8014122:	f240 420b 	movw	r2, #1035	; 0x40b
 8014126:	4927      	ldr	r1, [pc, #156]	; (80141c4 <pbuf_copy_partial+0xe0>)
 8014128:	4825      	ldr	r0, [pc, #148]	; (80141c0 <pbuf_copy_partial+0xdc>)
 801412a:	f009 fe09 	bl	801dd40 <iprintf>
 801412e:	2300      	movs	r3, #0
 8014130:	e03e      	b.n	80141b0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8014132:	68fb      	ldr	r3, [r7, #12]
 8014134:	61fb      	str	r3, [r7, #28]
 8014136:	e034      	b.n	80141a2 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8014138:	88bb      	ldrh	r3, [r7, #4]
 801413a:	2b00      	cmp	r3, #0
 801413c:	d00a      	beq.n	8014154 <pbuf_copy_partial+0x70>
 801413e:	69fb      	ldr	r3, [r7, #28]
 8014140:	895b      	ldrh	r3, [r3, #10]
 8014142:	88ba      	ldrh	r2, [r7, #4]
 8014144:	429a      	cmp	r2, r3
 8014146:	d305      	bcc.n	8014154 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8014148:	69fb      	ldr	r3, [r7, #28]
 801414a:	895b      	ldrh	r3, [r3, #10]
 801414c:	88ba      	ldrh	r2, [r7, #4]
 801414e:	1ad3      	subs	r3, r2, r3
 8014150:	80bb      	strh	r3, [r7, #4]
 8014152:	e023      	b.n	801419c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8014154:	69fb      	ldr	r3, [r7, #28]
 8014156:	895a      	ldrh	r2, [r3, #10]
 8014158:	88bb      	ldrh	r3, [r7, #4]
 801415a:	1ad3      	subs	r3, r2, r3
 801415c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801415e:	8b3a      	ldrh	r2, [r7, #24]
 8014160:	88fb      	ldrh	r3, [r7, #6]
 8014162:	429a      	cmp	r2, r3
 8014164:	d901      	bls.n	801416a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8014166:	88fb      	ldrh	r3, [r7, #6]
 8014168:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801416a:	8b7b      	ldrh	r3, [r7, #26]
 801416c:	68ba      	ldr	r2, [r7, #8]
 801416e:	18d0      	adds	r0, r2, r3
 8014170:	69fb      	ldr	r3, [r7, #28]
 8014172:	685a      	ldr	r2, [r3, #4]
 8014174:	88bb      	ldrh	r3, [r7, #4]
 8014176:	4413      	add	r3, r2
 8014178:	8b3a      	ldrh	r2, [r7, #24]
 801417a:	4619      	mov	r1, r3
 801417c:	f009 ff11 	bl	801dfa2 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8014180:	8afa      	ldrh	r2, [r7, #22]
 8014182:	8b3b      	ldrh	r3, [r7, #24]
 8014184:	4413      	add	r3, r2
 8014186:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8014188:	8b7a      	ldrh	r2, [r7, #26]
 801418a:	8b3b      	ldrh	r3, [r7, #24]
 801418c:	4413      	add	r3, r2
 801418e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8014190:	88fa      	ldrh	r2, [r7, #6]
 8014192:	8b3b      	ldrh	r3, [r7, #24]
 8014194:	1ad3      	subs	r3, r2, r3
 8014196:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8014198:	2300      	movs	r3, #0
 801419a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801419c:	69fb      	ldr	r3, [r7, #28]
 801419e:	681b      	ldr	r3, [r3, #0]
 80141a0:	61fb      	str	r3, [r7, #28]
 80141a2:	88fb      	ldrh	r3, [r7, #6]
 80141a4:	2b00      	cmp	r3, #0
 80141a6:	d002      	beq.n	80141ae <pbuf_copy_partial+0xca>
 80141a8:	69fb      	ldr	r3, [r7, #28]
 80141aa:	2b00      	cmp	r3, #0
 80141ac:	d1c4      	bne.n	8014138 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 80141ae:	8afb      	ldrh	r3, [r7, #22]
}
 80141b0:	4618      	mov	r0, r3
 80141b2:	3720      	adds	r7, #32
 80141b4:	46bd      	mov	sp, r7
 80141b6:	bd80      	pop	{r7, pc}
 80141b8:	0801f394 	.word	0x0801f394
 80141bc:	0801f6dc 	.word	0x0801f6dc
 80141c0:	0801f3f4 	.word	0x0801f3f4
 80141c4:	0801f6fc 	.word	0x0801f6fc

080141c8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80141c8:	b580      	push	{r7, lr}
 80141ca:	b084      	sub	sp, #16
 80141cc:	af00      	add	r7, sp, #0
 80141ce:	4603      	mov	r3, r0
 80141d0:	603a      	str	r2, [r7, #0]
 80141d2:	71fb      	strb	r3, [r7, #7]
 80141d4:	460b      	mov	r3, r1
 80141d6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80141d8:	683b      	ldr	r3, [r7, #0]
 80141da:	8919      	ldrh	r1, [r3, #8]
 80141dc:	88ba      	ldrh	r2, [r7, #4]
 80141de:	79fb      	ldrb	r3, [r7, #7]
 80141e0:	4618      	mov	r0, r3
 80141e2:	f7ff fa95 	bl	8013710 <pbuf_alloc>
 80141e6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80141e8:	68fb      	ldr	r3, [r7, #12]
 80141ea:	2b00      	cmp	r3, #0
 80141ec:	d101      	bne.n	80141f2 <pbuf_clone+0x2a>
    return NULL;
 80141ee:	2300      	movs	r3, #0
 80141f0:	e011      	b.n	8014216 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80141f2:	6839      	ldr	r1, [r7, #0]
 80141f4:	68f8      	ldr	r0, [r7, #12]
 80141f6:	f7ff fea3 	bl	8013f40 <pbuf_copy>
 80141fa:	4603      	mov	r3, r0
 80141fc:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80141fe:	f997 300b 	ldrsb.w	r3, [r7, #11]
 8014202:	2b00      	cmp	r3, #0
 8014204:	d006      	beq.n	8014214 <pbuf_clone+0x4c>
 8014206:	4b06      	ldr	r3, [pc, #24]	; (8014220 <pbuf_clone+0x58>)
 8014208:	f240 5224 	movw	r2, #1316	; 0x524
 801420c:	4905      	ldr	r1, [pc, #20]	; (8014224 <pbuf_clone+0x5c>)
 801420e:	4806      	ldr	r0, [pc, #24]	; (8014228 <pbuf_clone+0x60>)
 8014210:	f009 fd96 	bl	801dd40 <iprintf>
  return q;
 8014214:	68fb      	ldr	r3, [r7, #12]
}
 8014216:	4618      	mov	r0, r3
 8014218:	3710      	adds	r7, #16
 801421a:	46bd      	mov	sp, r7
 801421c:	bd80      	pop	{r7, pc}
 801421e:	bf00      	nop
 8014220:	0801f394 	.word	0x0801f394
 8014224:	0801f808 	.word	0x0801f808
 8014228:	0801f3f4 	.word	0x0801f3f4

0801422c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 801422c:	b580      	push	{r7, lr}
 801422e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8014230:	f009 fc86 	bl	801db40 <rand>
 8014234:	4603      	mov	r3, r0
 8014236:	b29b      	uxth	r3, r3
 8014238:	f3c3 030d 	ubfx	r3, r3, #0, #14
 801423c:	b29b      	uxth	r3, r3
 801423e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8014242:	b29a      	uxth	r2, r3
 8014244:	4b01      	ldr	r3, [pc, #4]	; (801424c <tcp_init+0x20>)
 8014246:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8014248:	bf00      	nop
 801424a:	bd80      	pop	{r7, pc}
 801424c:	20000024 	.word	0x20000024

08014250 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8014250:	b580      	push	{r7, lr}
 8014252:	b082      	sub	sp, #8
 8014254:	af00      	add	r7, sp, #0
 8014256:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8014258:	687b      	ldr	r3, [r7, #4]
 801425a:	7d1b      	ldrb	r3, [r3, #20]
 801425c:	2b01      	cmp	r3, #1
 801425e:	d105      	bne.n	801426c <tcp_free+0x1c>
 8014260:	4b06      	ldr	r3, [pc, #24]	; (801427c <tcp_free+0x2c>)
 8014262:	22d4      	movs	r2, #212	; 0xd4
 8014264:	4906      	ldr	r1, [pc, #24]	; (8014280 <tcp_free+0x30>)
 8014266:	4807      	ldr	r0, [pc, #28]	; (8014284 <tcp_free+0x34>)
 8014268:	f009 fd6a 	bl	801dd40 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 801426c:	6879      	ldr	r1, [r7, #4]
 801426e:	2001      	movs	r0, #1
 8014270:	f7fe fe8e 	bl	8012f90 <memp_free>
}
 8014274:	bf00      	nop
 8014276:	3708      	adds	r7, #8
 8014278:	46bd      	mov	sp, r7
 801427a:	bd80      	pop	{r7, pc}
 801427c:	0801f894 	.word	0x0801f894
 8014280:	0801f8c4 	.word	0x0801f8c4
 8014284:	0801f8d8 	.word	0x0801f8d8

08014288 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8014288:	b580      	push	{r7, lr}
 801428a:	b082      	sub	sp, #8
 801428c:	af00      	add	r7, sp, #0
 801428e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8014290:	687b      	ldr	r3, [r7, #4]
 8014292:	7d1b      	ldrb	r3, [r3, #20]
 8014294:	2b01      	cmp	r3, #1
 8014296:	d105      	bne.n	80142a4 <tcp_free_listen+0x1c>
 8014298:	4b06      	ldr	r3, [pc, #24]	; (80142b4 <tcp_free_listen+0x2c>)
 801429a:	22df      	movs	r2, #223	; 0xdf
 801429c:	4906      	ldr	r1, [pc, #24]	; (80142b8 <tcp_free_listen+0x30>)
 801429e:	4807      	ldr	r0, [pc, #28]	; (80142bc <tcp_free_listen+0x34>)
 80142a0:	f009 fd4e 	bl	801dd40 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 80142a4:	6879      	ldr	r1, [r7, #4]
 80142a6:	2002      	movs	r0, #2
 80142a8:	f7fe fe72 	bl	8012f90 <memp_free>
}
 80142ac:	bf00      	nop
 80142ae:	3708      	adds	r7, #8
 80142b0:	46bd      	mov	sp, r7
 80142b2:	bd80      	pop	{r7, pc}
 80142b4:	0801f894 	.word	0x0801f894
 80142b8:	0801f900 	.word	0x0801f900
 80142bc:	0801f8d8 	.word	0x0801f8d8

080142c0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 80142c0:	b580      	push	{r7, lr}
 80142c2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 80142c4:	f000 fea2 	bl	801500c <tcp_fasttmr>

  if (++tcp_timer & 1) {
 80142c8:	4b07      	ldr	r3, [pc, #28]	; (80142e8 <tcp_tmr+0x28>)
 80142ca:	781b      	ldrb	r3, [r3, #0]
 80142cc:	3301      	adds	r3, #1
 80142ce:	b2da      	uxtb	r2, r3
 80142d0:	4b05      	ldr	r3, [pc, #20]	; (80142e8 <tcp_tmr+0x28>)
 80142d2:	701a      	strb	r2, [r3, #0]
 80142d4:	4b04      	ldr	r3, [pc, #16]	; (80142e8 <tcp_tmr+0x28>)
 80142d6:	781b      	ldrb	r3, [r3, #0]
 80142d8:	f003 0301 	and.w	r3, r3, #1
 80142dc:	2b00      	cmp	r3, #0
 80142de:	d001      	beq.n	80142e4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 80142e0:	f000 fb54 	bl	801498c <tcp_slowtmr>
  }
}
 80142e4:	bf00      	nop
 80142e6:	bd80      	pop	{r7, pc}
 80142e8:	200240b5 	.word	0x200240b5

080142ec <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 80142ec:	b580      	push	{r7, lr}
 80142ee:	b084      	sub	sp, #16
 80142f0:	af00      	add	r7, sp, #0
 80142f2:	6078      	str	r0, [r7, #4]
 80142f4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 80142f6:	683b      	ldr	r3, [r7, #0]
 80142f8:	2b00      	cmp	r3, #0
 80142fa:	d105      	bne.n	8014308 <tcp_remove_listener+0x1c>
 80142fc:	4b0d      	ldr	r3, [pc, #52]	; (8014334 <tcp_remove_listener+0x48>)
 80142fe:	22ff      	movs	r2, #255	; 0xff
 8014300:	490d      	ldr	r1, [pc, #52]	; (8014338 <tcp_remove_listener+0x4c>)
 8014302:	480e      	ldr	r0, [pc, #56]	; (801433c <tcp_remove_listener+0x50>)
 8014304:	f009 fd1c 	bl	801dd40 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8014308:	687b      	ldr	r3, [r7, #4]
 801430a:	60fb      	str	r3, [r7, #12]
 801430c:	e00a      	b.n	8014324 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 801430e:	68fb      	ldr	r3, [r7, #12]
 8014310:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8014312:	683a      	ldr	r2, [r7, #0]
 8014314:	429a      	cmp	r2, r3
 8014316:	d102      	bne.n	801431e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8014318:	68fb      	ldr	r3, [r7, #12]
 801431a:	2200      	movs	r2, #0
 801431c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 801431e:	68fb      	ldr	r3, [r7, #12]
 8014320:	68db      	ldr	r3, [r3, #12]
 8014322:	60fb      	str	r3, [r7, #12]
 8014324:	68fb      	ldr	r3, [r7, #12]
 8014326:	2b00      	cmp	r3, #0
 8014328:	d1f1      	bne.n	801430e <tcp_remove_listener+0x22>
    }
  }
}
 801432a:	bf00      	nop
 801432c:	bf00      	nop
 801432e:	3710      	adds	r7, #16
 8014330:	46bd      	mov	sp, r7
 8014332:	bd80      	pop	{r7, pc}
 8014334:	0801f894 	.word	0x0801f894
 8014338:	0801f91c 	.word	0x0801f91c
 801433c:	0801f8d8 	.word	0x0801f8d8

08014340 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8014340:	b580      	push	{r7, lr}
 8014342:	b084      	sub	sp, #16
 8014344:	af00      	add	r7, sp, #0
 8014346:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8014348:	687b      	ldr	r3, [r7, #4]
 801434a:	2b00      	cmp	r3, #0
 801434c:	d106      	bne.n	801435c <tcp_listen_closed+0x1c>
 801434e:	4b14      	ldr	r3, [pc, #80]	; (80143a0 <tcp_listen_closed+0x60>)
 8014350:	f240 1211 	movw	r2, #273	; 0x111
 8014354:	4913      	ldr	r1, [pc, #76]	; (80143a4 <tcp_listen_closed+0x64>)
 8014356:	4814      	ldr	r0, [pc, #80]	; (80143a8 <tcp_listen_closed+0x68>)
 8014358:	f009 fcf2 	bl	801dd40 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 801435c:	687b      	ldr	r3, [r7, #4]
 801435e:	7d1b      	ldrb	r3, [r3, #20]
 8014360:	2b01      	cmp	r3, #1
 8014362:	d006      	beq.n	8014372 <tcp_listen_closed+0x32>
 8014364:	4b0e      	ldr	r3, [pc, #56]	; (80143a0 <tcp_listen_closed+0x60>)
 8014366:	f44f 7289 	mov.w	r2, #274	; 0x112
 801436a:	4910      	ldr	r1, [pc, #64]	; (80143ac <tcp_listen_closed+0x6c>)
 801436c:	480e      	ldr	r0, [pc, #56]	; (80143a8 <tcp_listen_closed+0x68>)
 801436e:	f009 fce7 	bl	801dd40 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8014372:	2301      	movs	r3, #1
 8014374:	60fb      	str	r3, [r7, #12]
 8014376:	e00b      	b.n	8014390 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8014378:	4a0d      	ldr	r2, [pc, #52]	; (80143b0 <tcp_listen_closed+0x70>)
 801437a:	68fb      	ldr	r3, [r7, #12]
 801437c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8014380:	681b      	ldr	r3, [r3, #0]
 8014382:	6879      	ldr	r1, [r7, #4]
 8014384:	4618      	mov	r0, r3
 8014386:	f7ff ffb1 	bl	80142ec <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 801438a:	68fb      	ldr	r3, [r7, #12]
 801438c:	3301      	adds	r3, #1
 801438e:	60fb      	str	r3, [r7, #12]
 8014390:	68fb      	ldr	r3, [r7, #12]
 8014392:	2b03      	cmp	r3, #3
 8014394:	d9f0      	bls.n	8014378 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8014396:	bf00      	nop
 8014398:	bf00      	nop
 801439a:	3710      	adds	r7, #16
 801439c:	46bd      	mov	sp, r7
 801439e:	bd80      	pop	{r7, pc}
 80143a0:	0801f894 	.word	0x0801f894
 80143a4:	0801f944 	.word	0x0801f944
 80143a8:	0801f8d8 	.word	0x0801f8d8
 80143ac:	0801f950 	.word	0x0801f950
 80143b0:	080218e8 	.word	0x080218e8

080143b4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 80143b4:	b5b0      	push	{r4, r5, r7, lr}
 80143b6:	b088      	sub	sp, #32
 80143b8:	af04      	add	r7, sp, #16
 80143ba:	6078      	str	r0, [r7, #4]
 80143bc:	460b      	mov	r3, r1
 80143be:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 80143c0:	687b      	ldr	r3, [r7, #4]
 80143c2:	2b00      	cmp	r3, #0
 80143c4:	d106      	bne.n	80143d4 <tcp_close_shutdown+0x20>
 80143c6:	4b63      	ldr	r3, [pc, #396]	; (8014554 <tcp_close_shutdown+0x1a0>)
 80143c8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 80143cc:	4962      	ldr	r1, [pc, #392]	; (8014558 <tcp_close_shutdown+0x1a4>)
 80143ce:	4863      	ldr	r0, [pc, #396]	; (801455c <tcp_close_shutdown+0x1a8>)
 80143d0:	f009 fcb6 	bl	801dd40 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 80143d4:	78fb      	ldrb	r3, [r7, #3]
 80143d6:	2b00      	cmp	r3, #0
 80143d8:	d066      	beq.n	80144a8 <tcp_close_shutdown+0xf4>
 80143da:	687b      	ldr	r3, [r7, #4]
 80143dc:	7d1b      	ldrb	r3, [r3, #20]
 80143de:	2b04      	cmp	r3, #4
 80143e0:	d003      	beq.n	80143ea <tcp_close_shutdown+0x36>
 80143e2:	687b      	ldr	r3, [r7, #4]
 80143e4:	7d1b      	ldrb	r3, [r3, #20]
 80143e6:	2b07      	cmp	r3, #7
 80143e8:	d15e      	bne.n	80144a8 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 80143ea:	687b      	ldr	r3, [r7, #4]
 80143ec:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80143ee:	2b00      	cmp	r3, #0
 80143f0:	d104      	bne.n	80143fc <tcp_close_shutdown+0x48>
 80143f2:	687b      	ldr	r3, [r7, #4]
 80143f4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80143f6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 80143fa:	d055      	beq.n	80144a8 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 80143fc:	687b      	ldr	r3, [r7, #4]
 80143fe:	8b5b      	ldrh	r3, [r3, #26]
 8014400:	f003 0310 	and.w	r3, r3, #16
 8014404:	2b00      	cmp	r3, #0
 8014406:	d106      	bne.n	8014416 <tcp_close_shutdown+0x62>
 8014408:	4b52      	ldr	r3, [pc, #328]	; (8014554 <tcp_close_shutdown+0x1a0>)
 801440a:	f44f 72b2 	mov.w	r2, #356	; 0x164
 801440e:	4954      	ldr	r1, [pc, #336]	; (8014560 <tcp_close_shutdown+0x1ac>)
 8014410:	4852      	ldr	r0, [pc, #328]	; (801455c <tcp_close_shutdown+0x1a8>)
 8014412:	f009 fc95 	bl	801dd40 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	6d18      	ldr	r0, [r3, #80]	; 0x50
 801441a:	687b      	ldr	r3, [r7, #4]
 801441c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801441e:	687d      	ldr	r5, [r7, #4]
 8014420:	687b      	ldr	r3, [r7, #4]
 8014422:	3304      	adds	r3, #4
 8014424:	687a      	ldr	r2, [r7, #4]
 8014426:	8ad2      	ldrh	r2, [r2, #22]
 8014428:	6879      	ldr	r1, [r7, #4]
 801442a:	8b09      	ldrh	r1, [r1, #24]
 801442c:	9102      	str	r1, [sp, #8]
 801442e:	9201      	str	r2, [sp, #4]
 8014430:	9300      	str	r3, [sp, #0]
 8014432:	462b      	mov	r3, r5
 8014434:	4622      	mov	r2, r4
 8014436:	4601      	mov	r1, r0
 8014438:	6878      	ldr	r0, [r7, #4]
 801443a:	f004 fe91 	bl	8019160 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 801443e:	6878      	ldr	r0, [r7, #4]
 8014440:	f001 f8c6 	bl	80155d0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8014444:	4b47      	ldr	r3, [pc, #284]	; (8014564 <tcp_close_shutdown+0x1b0>)
 8014446:	681b      	ldr	r3, [r3, #0]
 8014448:	687a      	ldr	r2, [r7, #4]
 801444a:	429a      	cmp	r2, r3
 801444c:	d105      	bne.n	801445a <tcp_close_shutdown+0xa6>
 801444e:	4b45      	ldr	r3, [pc, #276]	; (8014564 <tcp_close_shutdown+0x1b0>)
 8014450:	681b      	ldr	r3, [r3, #0]
 8014452:	68db      	ldr	r3, [r3, #12]
 8014454:	4a43      	ldr	r2, [pc, #268]	; (8014564 <tcp_close_shutdown+0x1b0>)
 8014456:	6013      	str	r3, [r2, #0]
 8014458:	e013      	b.n	8014482 <tcp_close_shutdown+0xce>
 801445a:	4b42      	ldr	r3, [pc, #264]	; (8014564 <tcp_close_shutdown+0x1b0>)
 801445c:	681b      	ldr	r3, [r3, #0]
 801445e:	60fb      	str	r3, [r7, #12]
 8014460:	e00c      	b.n	801447c <tcp_close_shutdown+0xc8>
 8014462:	68fb      	ldr	r3, [r7, #12]
 8014464:	68db      	ldr	r3, [r3, #12]
 8014466:	687a      	ldr	r2, [r7, #4]
 8014468:	429a      	cmp	r2, r3
 801446a:	d104      	bne.n	8014476 <tcp_close_shutdown+0xc2>
 801446c:	687b      	ldr	r3, [r7, #4]
 801446e:	68da      	ldr	r2, [r3, #12]
 8014470:	68fb      	ldr	r3, [r7, #12]
 8014472:	60da      	str	r2, [r3, #12]
 8014474:	e005      	b.n	8014482 <tcp_close_shutdown+0xce>
 8014476:	68fb      	ldr	r3, [r7, #12]
 8014478:	68db      	ldr	r3, [r3, #12]
 801447a:	60fb      	str	r3, [r7, #12]
 801447c:	68fb      	ldr	r3, [r7, #12]
 801447e:	2b00      	cmp	r3, #0
 8014480:	d1ef      	bne.n	8014462 <tcp_close_shutdown+0xae>
 8014482:	687b      	ldr	r3, [r7, #4]
 8014484:	2200      	movs	r2, #0
 8014486:	60da      	str	r2, [r3, #12]
 8014488:	4b37      	ldr	r3, [pc, #220]	; (8014568 <tcp_close_shutdown+0x1b4>)
 801448a:	2201      	movs	r2, #1
 801448c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 801448e:	4b37      	ldr	r3, [pc, #220]	; (801456c <tcp_close_shutdown+0x1b8>)
 8014490:	681b      	ldr	r3, [r3, #0]
 8014492:	687a      	ldr	r2, [r7, #4]
 8014494:	429a      	cmp	r2, r3
 8014496:	d102      	bne.n	801449e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8014498:	f003 fd5e 	bl	8017f58 <tcp_trigger_input_pcb_close>
 801449c:	e002      	b.n	80144a4 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 801449e:	6878      	ldr	r0, [r7, #4]
 80144a0:	f7ff fed6 	bl	8014250 <tcp_free>
      }
      return ERR_OK;
 80144a4:	2300      	movs	r3, #0
 80144a6:	e050      	b.n	801454a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 80144a8:	687b      	ldr	r3, [r7, #4]
 80144aa:	7d1b      	ldrb	r3, [r3, #20]
 80144ac:	2b02      	cmp	r3, #2
 80144ae:	d03b      	beq.n	8014528 <tcp_close_shutdown+0x174>
 80144b0:	2b02      	cmp	r3, #2
 80144b2:	dc44      	bgt.n	801453e <tcp_close_shutdown+0x18a>
 80144b4:	2b00      	cmp	r3, #0
 80144b6:	d002      	beq.n	80144be <tcp_close_shutdown+0x10a>
 80144b8:	2b01      	cmp	r3, #1
 80144ba:	d02a      	beq.n	8014512 <tcp_close_shutdown+0x15e>
 80144bc:	e03f      	b.n	801453e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 80144be:	687b      	ldr	r3, [r7, #4]
 80144c0:	8adb      	ldrh	r3, [r3, #22]
 80144c2:	2b00      	cmp	r3, #0
 80144c4:	d021      	beq.n	801450a <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 80144c6:	4b2a      	ldr	r3, [pc, #168]	; (8014570 <tcp_close_shutdown+0x1bc>)
 80144c8:	681b      	ldr	r3, [r3, #0]
 80144ca:	687a      	ldr	r2, [r7, #4]
 80144cc:	429a      	cmp	r2, r3
 80144ce:	d105      	bne.n	80144dc <tcp_close_shutdown+0x128>
 80144d0:	4b27      	ldr	r3, [pc, #156]	; (8014570 <tcp_close_shutdown+0x1bc>)
 80144d2:	681b      	ldr	r3, [r3, #0]
 80144d4:	68db      	ldr	r3, [r3, #12]
 80144d6:	4a26      	ldr	r2, [pc, #152]	; (8014570 <tcp_close_shutdown+0x1bc>)
 80144d8:	6013      	str	r3, [r2, #0]
 80144da:	e013      	b.n	8014504 <tcp_close_shutdown+0x150>
 80144dc:	4b24      	ldr	r3, [pc, #144]	; (8014570 <tcp_close_shutdown+0x1bc>)
 80144de:	681b      	ldr	r3, [r3, #0]
 80144e0:	60bb      	str	r3, [r7, #8]
 80144e2:	e00c      	b.n	80144fe <tcp_close_shutdown+0x14a>
 80144e4:	68bb      	ldr	r3, [r7, #8]
 80144e6:	68db      	ldr	r3, [r3, #12]
 80144e8:	687a      	ldr	r2, [r7, #4]
 80144ea:	429a      	cmp	r2, r3
 80144ec:	d104      	bne.n	80144f8 <tcp_close_shutdown+0x144>
 80144ee:	687b      	ldr	r3, [r7, #4]
 80144f0:	68da      	ldr	r2, [r3, #12]
 80144f2:	68bb      	ldr	r3, [r7, #8]
 80144f4:	60da      	str	r2, [r3, #12]
 80144f6:	e005      	b.n	8014504 <tcp_close_shutdown+0x150>
 80144f8:	68bb      	ldr	r3, [r7, #8]
 80144fa:	68db      	ldr	r3, [r3, #12]
 80144fc:	60bb      	str	r3, [r7, #8]
 80144fe:	68bb      	ldr	r3, [r7, #8]
 8014500:	2b00      	cmp	r3, #0
 8014502:	d1ef      	bne.n	80144e4 <tcp_close_shutdown+0x130>
 8014504:	687b      	ldr	r3, [r7, #4]
 8014506:	2200      	movs	r2, #0
 8014508:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 801450a:	6878      	ldr	r0, [r7, #4]
 801450c:	f7ff fea0 	bl	8014250 <tcp_free>
      break;
 8014510:	e01a      	b.n	8014548 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8014512:	6878      	ldr	r0, [r7, #4]
 8014514:	f7ff ff14 	bl	8014340 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8014518:	6879      	ldr	r1, [r7, #4]
 801451a:	4816      	ldr	r0, [pc, #88]	; (8014574 <tcp_close_shutdown+0x1c0>)
 801451c:	f001 f8a8 	bl	8015670 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8014520:	6878      	ldr	r0, [r7, #4]
 8014522:	f7ff feb1 	bl	8014288 <tcp_free_listen>
      break;
 8014526:	e00f      	b.n	8014548 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8014528:	6879      	ldr	r1, [r7, #4]
 801452a:	480e      	ldr	r0, [pc, #56]	; (8014564 <tcp_close_shutdown+0x1b0>)
 801452c:	f001 f8a0 	bl	8015670 <tcp_pcb_remove>
 8014530:	4b0d      	ldr	r3, [pc, #52]	; (8014568 <tcp_close_shutdown+0x1b4>)
 8014532:	2201      	movs	r2, #1
 8014534:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8014536:	6878      	ldr	r0, [r7, #4]
 8014538:	f7ff fe8a 	bl	8014250 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 801453c:	e004      	b.n	8014548 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 801453e:	6878      	ldr	r0, [r7, #4]
 8014540:	f000 f81a 	bl	8014578 <tcp_close_shutdown_fin>
 8014544:	4603      	mov	r3, r0
 8014546:	e000      	b.n	801454a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8014548:	2300      	movs	r3, #0
}
 801454a:	4618      	mov	r0, r3
 801454c:	3710      	adds	r7, #16
 801454e:	46bd      	mov	sp, r7
 8014550:	bdb0      	pop	{r4, r5, r7, pc}
 8014552:	bf00      	nop
 8014554:	0801f894 	.word	0x0801f894
 8014558:	0801f968 	.word	0x0801f968
 801455c:	0801f8d8 	.word	0x0801f8d8
 8014560:	0801f988 	.word	0x0801f988
 8014564:	200240ac 	.word	0x200240ac
 8014568:	200240b4 	.word	0x200240b4
 801456c:	200240ec 	.word	0x200240ec
 8014570:	200240a4 	.word	0x200240a4
 8014574:	200240a8 	.word	0x200240a8

08014578 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8014578:	b580      	push	{r7, lr}
 801457a:	b084      	sub	sp, #16
 801457c:	af00      	add	r7, sp, #0
 801457e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8014580:	687b      	ldr	r3, [r7, #4]
 8014582:	2b00      	cmp	r3, #0
 8014584:	d106      	bne.n	8014594 <tcp_close_shutdown_fin+0x1c>
 8014586:	4b2e      	ldr	r3, [pc, #184]	; (8014640 <tcp_close_shutdown_fin+0xc8>)
 8014588:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 801458c:	492d      	ldr	r1, [pc, #180]	; (8014644 <tcp_close_shutdown_fin+0xcc>)
 801458e:	482e      	ldr	r0, [pc, #184]	; (8014648 <tcp_close_shutdown_fin+0xd0>)
 8014590:	f009 fbd6 	bl	801dd40 <iprintf>

  switch (pcb->state) {
 8014594:	687b      	ldr	r3, [r7, #4]
 8014596:	7d1b      	ldrb	r3, [r3, #20]
 8014598:	2b07      	cmp	r3, #7
 801459a:	d020      	beq.n	80145de <tcp_close_shutdown_fin+0x66>
 801459c:	2b07      	cmp	r3, #7
 801459e:	dc2b      	bgt.n	80145f8 <tcp_close_shutdown_fin+0x80>
 80145a0:	2b03      	cmp	r3, #3
 80145a2:	d002      	beq.n	80145aa <tcp_close_shutdown_fin+0x32>
 80145a4:	2b04      	cmp	r3, #4
 80145a6:	d00d      	beq.n	80145c4 <tcp_close_shutdown_fin+0x4c>
 80145a8:	e026      	b.n	80145f8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 80145aa:	6878      	ldr	r0, [r7, #4]
 80145ac:	f003 fee6 	bl	801837c <tcp_send_fin>
 80145b0:	4603      	mov	r3, r0
 80145b2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80145b4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80145b8:	2b00      	cmp	r3, #0
 80145ba:	d11f      	bne.n	80145fc <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 80145bc:	687b      	ldr	r3, [r7, #4]
 80145be:	2205      	movs	r2, #5
 80145c0:	751a      	strb	r2, [r3, #20]
      }
      break;
 80145c2:	e01b      	b.n	80145fc <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 80145c4:	6878      	ldr	r0, [r7, #4]
 80145c6:	f003 fed9 	bl	801837c <tcp_send_fin>
 80145ca:	4603      	mov	r3, r0
 80145cc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80145ce:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80145d2:	2b00      	cmp	r3, #0
 80145d4:	d114      	bne.n	8014600 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 80145d6:	687b      	ldr	r3, [r7, #4]
 80145d8:	2205      	movs	r2, #5
 80145da:	751a      	strb	r2, [r3, #20]
      }
      break;
 80145dc:	e010      	b.n	8014600 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 80145de:	6878      	ldr	r0, [r7, #4]
 80145e0:	f003 fecc 	bl	801837c <tcp_send_fin>
 80145e4:	4603      	mov	r3, r0
 80145e6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 80145e8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80145ec:	2b00      	cmp	r3, #0
 80145ee:	d109      	bne.n	8014604 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 80145f0:	687b      	ldr	r3, [r7, #4]
 80145f2:	2209      	movs	r2, #9
 80145f4:	751a      	strb	r2, [r3, #20]
      }
      break;
 80145f6:	e005      	b.n	8014604 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 80145f8:	2300      	movs	r3, #0
 80145fa:	e01c      	b.n	8014636 <tcp_close_shutdown_fin+0xbe>
      break;
 80145fc:	bf00      	nop
 80145fe:	e002      	b.n	8014606 <tcp_close_shutdown_fin+0x8e>
      break;
 8014600:	bf00      	nop
 8014602:	e000      	b.n	8014606 <tcp_close_shutdown_fin+0x8e>
      break;
 8014604:	bf00      	nop
  }

  if (err == ERR_OK) {
 8014606:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801460a:	2b00      	cmp	r3, #0
 801460c:	d103      	bne.n	8014616 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 801460e:	6878      	ldr	r0, [r7, #4]
 8014610:	f003 fff2 	bl	80185f8 <tcp_output>
 8014614:	e00d      	b.n	8014632 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8014616:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801461a:	f1b3 3fff 	cmp.w	r3, #4294967295
 801461e:	d108      	bne.n	8014632 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8014620:	687b      	ldr	r3, [r7, #4]
 8014622:	8b5b      	ldrh	r3, [r3, #26]
 8014624:	f043 0308 	orr.w	r3, r3, #8
 8014628:	b29a      	uxth	r2, r3
 801462a:	687b      	ldr	r3, [r7, #4]
 801462c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 801462e:	2300      	movs	r3, #0
 8014630:	e001      	b.n	8014636 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8014632:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8014636:	4618      	mov	r0, r3
 8014638:	3710      	adds	r7, #16
 801463a:	46bd      	mov	sp, r7
 801463c:	bd80      	pop	{r7, pc}
 801463e:	bf00      	nop
 8014640:	0801f894 	.word	0x0801f894
 8014644:	0801f944 	.word	0x0801f944
 8014648:	0801f8d8 	.word	0x0801f8d8

0801464c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 801464c:	b580      	push	{r7, lr}
 801464e:	b082      	sub	sp, #8
 8014650:	af00      	add	r7, sp, #0
 8014652:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	2b00      	cmp	r3, #0
 8014658:	d109      	bne.n	801466e <tcp_close+0x22>
 801465a:	4b0f      	ldr	r3, [pc, #60]	; (8014698 <tcp_close+0x4c>)
 801465c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8014660:	490e      	ldr	r1, [pc, #56]	; (801469c <tcp_close+0x50>)
 8014662:	480f      	ldr	r0, [pc, #60]	; (80146a0 <tcp_close+0x54>)
 8014664:	f009 fb6c 	bl	801dd40 <iprintf>
 8014668:	f06f 030f 	mvn.w	r3, #15
 801466c:	e00f      	b.n	801468e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	7d1b      	ldrb	r3, [r3, #20]
 8014672:	2b01      	cmp	r3, #1
 8014674:	d006      	beq.n	8014684 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	8b5b      	ldrh	r3, [r3, #26]
 801467a:	f043 0310 	orr.w	r3, r3, #16
 801467e:	b29a      	uxth	r2, r3
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8014684:	2101      	movs	r1, #1
 8014686:	6878      	ldr	r0, [r7, #4]
 8014688:	f7ff fe94 	bl	80143b4 <tcp_close_shutdown>
 801468c:	4603      	mov	r3, r0
}
 801468e:	4618      	mov	r0, r3
 8014690:	3708      	adds	r7, #8
 8014692:	46bd      	mov	sp, r7
 8014694:	bd80      	pop	{r7, pc}
 8014696:	bf00      	nop
 8014698:	0801f894 	.word	0x0801f894
 801469c:	0801f9a4 	.word	0x0801f9a4
 80146a0:	0801f8d8 	.word	0x0801f8d8

080146a4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 80146a4:	b580      	push	{r7, lr}
 80146a6:	b08e      	sub	sp, #56	; 0x38
 80146a8:	af04      	add	r7, sp, #16
 80146aa:	6078      	str	r0, [r7, #4]
 80146ac:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	2b00      	cmp	r3, #0
 80146b2:	d107      	bne.n	80146c4 <tcp_abandon+0x20>
 80146b4:	4b52      	ldr	r3, [pc, #328]	; (8014800 <tcp_abandon+0x15c>)
 80146b6:	f240 223d 	movw	r2, #573	; 0x23d
 80146ba:	4952      	ldr	r1, [pc, #328]	; (8014804 <tcp_abandon+0x160>)
 80146bc:	4852      	ldr	r0, [pc, #328]	; (8014808 <tcp_abandon+0x164>)
 80146be:	f009 fb3f 	bl	801dd40 <iprintf>
 80146c2:	e099      	b.n	80147f8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	7d1b      	ldrb	r3, [r3, #20]
 80146c8:	2b01      	cmp	r3, #1
 80146ca:	d106      	bne.n	80146da <tcp_abandon+0x36>
 80146cc:	4b4c      	ldr	r3, [pc, #304]	; (8014800 <tcp_abandon+0x15c>)
 80146ce:	f44f 7210 	mov.w	r2, #576	; 0x240
 80146d2:	494e      	ldr	r1, [pc, #312]	; (801480c <tcp_abandon+0x168>)
 80146d4:	484c      	ldr	r0, [pc, #304]	; (8014808 <tcp_abandon+0x164>)
 80146d6:	f009 fb33 	bl	801dd40 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 80146da:	687b      	ldr	r3, [r7, #4]
 80146dc:	7d1b      	ldrb	r3, [r3, #20]
 80146de:	2b0a      	cmp	r3, #10
 80146e0:	d107      	bne.n	80146f2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 80146e2:	6879      	ldr	r1, [r7, #4]
 80146e4:	484a      	ldr	r0, [pc, #296]	; (8014810 <tcp_abandon+0x16c>)
 80146e6:	f000 ffc3 	bl	8015670 <tcp_pcb_remove>
    tcp_free(pcb);
 80146ea:	6878      	ldr	r0, [r7, #4]
 80146ec:	f7ff fdb0 	bl	8014250 <tcp_free>
 80146f0:	e082      	b.n	80147f8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 80146f2:	2300      	movs	r3, #0
 80146f4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 80146f6:	2300      	movs	r3, #0
 80146f8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 80146fa:	687b      	ldr	r3, [r7, #4]
 80146fc:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80146fe:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8014700:	687b      	ldr	r3, [r7, #4]
 8014702:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014704:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8014706:	687b      	ldr	r3, [r7, #4]
 8014708:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801470c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 801470e:	687b      	ldr	r3, [r7, #4]
 8014710:	691b      	ldr	r3, [r3, #16]
 8014712:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	7d1b      	ldrb	r3, [r3, #20]
 8014718:	2b00      	cmp	r3, #0
 801471a:	d126      	bne.n	801476a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 801471c:	687b      	ldr	r3, [r7, #4]
 801471e:	8adb      	ldrh	r3, [r3, #22]
 8014720:	2b00      	cmp	r3, #0
 8014722:	d02e      	beq.n	8014782 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8014724:	4b3b      	ldr	r3, [pc, #236]	; (8014814 <tcp_abandon+0x170>)
 8014726:	681b      	ldr	r3, [r3, #0]
 8014728:	687a      	ldr	r2, [r7, #4]
 801472a:	429a      	cmp	r2, r3
 801472c:	d105      	bne.n	801473a <tcp_abandon+0x96>
 801472e:	4b39      	ldr	r3, [pc, #228]	; (8014814 <tcp_abandon+0x170>)
 8014730:	681b      	ldr	r3, [r3, #0]
 8014732:	68db      	ldr	r3, [r3, #12]
 8014734:	4a37      	ldr	r2, [pc, #220]	; (8014814 <tcp_abandon+0x170>)
 8014736:	6013      	str	r3, [r2, #0]
 8014738:	e013      	b.n	8014762 <tcp_abandon+0xbe>
 801473a:	4b36      	ldr	r3, [pc, #216]	; (8014814 <tcp_abandon+0x170>)
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	61fb      	str	r3, [r7, #28]
 8014740:	e00c      	b.n	801475c <tcp_abandon+0xb8>
 8014742:	69fb      	ldr	r3, [r7, #28]
 8014744:	68db      	ldr	r3, [r3, #12]
 8014746:	687a      	ldr	r2, [r7, #4]
 8014748:	429a      	cmp	r2, r3
 801474a:	d104      	bne.n	8014756 <tcp_abandon+0xb2>
 801474c:	687b      	ldr	r3, [r7, #4]
 801474e:	68da      	ldr	r2, [r3, #12]
 8014750:	69fb      	ldr	r3, [r7, #28]
 8014752:	60da      	str	r2, [r3, #12]
 8014754:	e005      	b.n	8014762 <tcp_abandon+0xbe>
 8014756:	69fb      	ldr	r3, [r7, #28]
 8014758:	68db      	ldr	r3, [r3, #12]
 801475a:	61fb      	str	r3, [r7, #28]
 801475c:	69fb      	ldr	r3, [r7, #28]
 801475e:	2b00      	cmp	r3, #0
 8014760:	d1ef      	bne.n	8014742 <tcp_abandon+0x9e>
 8014762:	687b      	ldr	r3, [r7, #4]
 8014764:	2200      	movs	r2, #0
 8014766:	60da      	str	r2, [r3, #12]
 8014768:	e00b      	b.n	8014782 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 801476a:	683b      	ldr	r3, [r7, #0]
 801476c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 801476e:	687b      	ldr	r3, [r7, #4]
 8014770:	8adb      	ldrh	r3, [r3, #22]
 8014772:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8014774:	6879      	ldr	r1, [r7, #4]
 8014776:	4828      	ldr	r0, [pc, #160]	; (8014818 <tcp_abandon+0x174>)
 8014778:	f000 ff7a 	bl	8015670 <tcp_pcb_remove>
 801477c:	4b27      	ldr	r3, [pc, #156]	; (801481c <tcp_abandon+0x178>)
 801477e:	2201      	movs	r2, #1
 8014780:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8014782:	687b      	ldr	r3, [r7, #4]
 8014784:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014786:	2b00      	cmp	r3, #0
 8014788:	d004      	beq.n	8014794 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 801478a:	687b      	ldr	r3, [r7, #4]
 801478c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801478e:	4618      	mov	r0, r3
 8014790:	f000 fd1c 	bl	80151cc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8014794:	687b      	ldr	r3, [r7, #4]
 8014796:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014798:	2b00      	cmp	r3, #0
 801479a:	d004      	beq.n	80147a6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 801479c:	687b      	ldr	r3, [r7, #4]
 801479e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80147a0:	4618      	mov	r0, r3
 80147a2:	f000 fd13 	bl	80151cc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 80147a6:	687b      	ldr	r3, [r7, #4]
 80147a8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80147aa:	2b00      	cmp	r3, #0
 80147ac:	d004      	beq.n	80147b8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 80147ae:	687b      	ldr	r3, [r7, #4]
 80147b0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80147b2:	4618      	mov	r0, r3
 80147b4:	f000 fd0a 	bl	80151cc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 80147b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80147ba:	2b00      	cmp	r3, #0
 80147bc:	d00e      	beq.n	80147dc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 80147be:	6879      	ldr	r1, [r7, #4]
 80147c0:	687b      	ldr	r3, [r7, #4]
 80147c2:	3304      	adds	r3, #4
 80147c4:	687a      	ldr	r2, [r7, #4]
 80147c6:	8b12      	ldrh	r2, [r2, #24]
 80147c8:	9202      	str	r2, [sp, #8]
 80147ca:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80147cc:	9201      	str	r2, [sp, #4]
 80147ce:	9300      	str	r3, [sp, #0]
 80147d0:	460b      	mov	r3, r1
 80147d2:	697a      	ldr	r2, [r7, #20]
 80147d4:	69b9      	ldr	r1, [r7, #24]
 80147d6:	6878      	ldr	r0, [r7, #4]
 80147d8:	f004 fcc2 	bl	8019160 <tcp_rst>
    }
    last_state = pcb->state;
 80147dc:	687b      	ldr	r3, [r7, #4]
 80147de:	7d1b      	ldrb	r3, [r3, #20]
 80147e0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 80147e2:	6878      	ldr	r0, [r7, #4]
 80147e4:	f7ff fd34 	bl	8014250 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 80147e8:	693b      	ldr	r3, [r7, #16]
 80147ea:	2b00      	cmp	r3, #0
 80147ec:	d004      	beq.n	80147f8 <tcp_abandon+0x154>
 80147ee:	693b      	ldr	r3, [r7, #16]
 80147f0:	f06f 010c 	mvn.w	r1, #12
 80147f4:	68f8      	ldr	r0, [r7, #12]
 80147f6:	4798      	blx	r3
  }
}
 80147f8:	3728      	adds	r7, #40	; 0x28
 80147fa:	46bd      	mov	sp, r7
 80147fc:	bd80      	pop	{r7, pc}
 80147fe:	bf00      	nop
 8014800:	0801f894 	.word	0x0801f894
 8014804:	0801f9d8 	.word	0x0801f9d8
 8014808:	0801f8d8 	.word	0x0801f8d8
 801480c:	0801f9f4 	.word	0x0801f9f4
 8014810:	200240b0 	.word	0x200240b0
 8014814:	200240a4 	.word	0x200240a4
 8014818:	200240ac 	.word	0x200240ac
 801481c:	200240b4 	.word	0x200240b4

08014820 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8014820:	b580      	push	{r7, lr}
 8014822:	b082      	sub	sp, #8
 8014824:	af00      	add	r7, sp, #0
 8014826:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8014828:	2101      	movs	r1, #1
 801482a:	6878      	ldr	r0, [r7, #4]
 801482c:	f7ff ff3a 	bl	80146a4 <tcp_abandon>
}
 8014830:	bf00      	nop
 8014832:	3708      	adds	r7, #8
 8014834:	46bd      	mov	sp, r7
 8014836:	bd80      	pop	{r7, pc}

08014838 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8014838:	b580      	push	{r7, lr}
 801483a:	b084      	sub	sp, #16
 801483c:	af00      	add	r7, sp, #0
 801483e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	2b00      	cmp	r3, #0
 8014844:	d106      	bne.n	8014854 <tcp_update_rcv_ann_wnd+0x1c>
 8014846:	4b25      	ldr	r3, [pc, #148]	; (80148dc <tcp_update_rcv_ann_wnd+0xa4>)
 8014848:	f240 32a6 	movw	r2, #934	; 0x3a6
 801484c:	4924      	ldr	r1, [pc, #144]	; (80148e0 <tcp_update_rcv_ann_wnd+0xa8>)
 801484e:	4825      	ldr	r0, [pc, #148]	; (80148e4 <tcp_update_rcv_ann_wnd+0xac>)
 8014850:	f009 fa76 	bl	801dd40 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014858:	687a      	ldr	r2, [r7, #4]
 801485a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 801485c:	4413      	add	r3, r2
 801485e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8014860:	687b      	ldr	r3, [r7, #4]
 8014862:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014864:	687a      	ldr	r2, [r7, #4]
 8014866:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8014868:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 801486c:	bf28      	it	cs
 801486e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8014872:	b292      	uxth	r2, r2
 8014874:	4413      	add	r3, r2
 8014876:	68fa      	ldr	r2, [r7, #12]
 8014878:	1ad3      	subs	r3, r2, r3
 801487a:	2b00      	cmp	r3, #0
 801487c:	db08      	blt.n	8014890 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014882:	687b      	ldr	r3, [r7, #4]
 8014884:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8014886:	687b      	ldr	r3, [r7, #4]
 8014888:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801488a:	68fa      	ldr	r2, [r7, #12]
 801488c:	1ad3      	subs	r3, r2, r3
 801488e:	e020      	b.n	80148d2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8014890:	687b      	ldr	r3, [r7, #4]
 8014892:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014894:	687b      	ldr	r3, [r7, #4]
 8014896:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014898:	1ad3      	subs	r3, r2, r3
 801489a:	2b00      	cmp	r3, #0
 801489c:	dd03      	ble.n	80148a6 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801489e:	687b      	ldr	r3, [r7, #4]
 80148a0:	2200      	movs	r2, #0
 80148a2:	855a      	strh	r2, [r3, #42]	; 0x2a
 80148a4:	e014      	b.n	80148d0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80148aa:	687b      	ldr	r3, [r7, #4]
 80148ac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80148ae:	1ad3      	subs	r3, r2, r3
 80148b0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80148b2:	68bb      	ldr	r3, [r7, #8]
 80148b4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80148b8:	d306      	bcc.n	80148c8 <tcp_update_rcv_ann_wnd+0x90>
 80148ba:	4b08      	ldr	r3, [pc, #32]	; (80148dc <tcp_update_rcv_ann_wnd+0xa4>)
 80148bc:	f240 32b6 	movw	r2, #950	; 0x3b6
 80148c0:	4909      	ldr	r1, [pc, #36]	; (80148e8 <tcp_update_rcv_ann_wnd+0xb0>)
 80148c2:	4808      	ldr	r0, [pc, #32]	; (80148e4 <tcp_update_rcv_ann_wnd+0xac>)
 80148c4:	f009 fa3c 	bl	801dd40 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80148c8:	68bb      	ldr	r3, [r7, #8]
 80148ca:	b29a      	uxth	r2, r3
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80148d0:	2300      	movs	r3, #0
  }
}
 80148d2:	4618      	mov	r0, r3
 80148d4:	3710      	adds	r7, #16
 80148d6:	46bd      	mov	sp, r7
 80148d8:	bd80      	pop	{r7, pc}
 80148da:	bf00      	nop
 80148dc:	0801f894 	.word	0x0801f894
 80148e0:	0801faf0 	.word	0x0801faf0
 80148e4:	0801f8d8 	.word	0x0801f8d8
 80148e8:	0801fb14 	.word	0x0801fb14

080148ec <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80148ec:	b580      	push	{r7, lr}
 80148ee:	b084      	sub	sp, #16
 80148f0:	af00      	add	r7, sp, #0
 80148f2:	6078      	str	r0, [r7, #4]
 80148f4:	460b      	mov	r3, r1
 80148f6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80148f8:	687b      	ldr	r3, [r7, #4]
 80148fa:	2b00      	cmp	r3, #0
 80148fc:	d107      	bne.n	801490e <tcp_recved+0x22>
 80148fe:	4b1f      	ldr	r3, [pc, #124]	; (801497c <tcp_recved+0x90>)
 8014900:	f240 32cf 	movw	r2, #975	; 0x3cf
 8014904:	491e      	ldr	r1, [pc, #120]	; (8014980 <tcp_recved+0x94>)
 8014906:	481f      	ldr	r0, [pc, #124]	; (8014984 <tcp_recved+0x98>)
 8014908:	f009 fa1a 	bl	801dd40 <iprintf>
 801490c:	e032      	b.n	8014974 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 801490e:	687b      	ldr	r3, [r7, #4]
 8014910:	7d1b      	ldrb	r3, [r3, #20]
 8014912:	2b01      	cmp	r3, #1
 8014914:	d106      	bne.n	8014924 <tcp_recved+0x38>
 8014916:	4b19      	ldr	r3, [pc, #100]	; (801497c <tcp_recved+0x90>)
 8014918:	f240 32d2 	movw	r2, #978	; 0x3d2
 801491c:	491a      	ldr	r1, [pc, #104]	; (8014988 <tcp_recved+0x9c>)
 801491e:	4819      	ldr	r0, [pc, #100]	; (8014984 <tcp_recved+0x98>)
 8014920:	f009 fa0e 	bl	801dd40 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8014924:	687b      	ldr	r3, [r7, #4]
 8014926:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014928:	887b      	ldrh	r3, [r7, #2]
 801492a:	4413      	add	r3, r2
 801492c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801492e:	89fb      	ldrh	r3, [r7, #14]
 8014930:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8014934:	d804      	bhi.n	8014940 <tcp_recved+0x54>
 8014936:	687b      	ldr	r3, [r7, #4]
 8014938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801493a:	89fa      	ldrh	r2, [r7, #14]
 801493c:	429a      	cmp	r2, r3
 801493e:	d204      	bcs.n	801494a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8014940:	687b      	ldr	r3, [r7, #4]
 8014942:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8014946:	851a      	strh	r2, [r3, #40]	; 0x28
 8014948:	e002      	b.n	8014950 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801494a:	687b      	ldr	r3, [r7, #4]
 801494c:	89fa      	ldrh	r2, [r7, #14]
 801494e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8014950:	6878      	ldr	r0, [r7, #4]
 8014952:	f7ff ff71 	bl	8014838 <tcp_update_rcv_ann_wnd>
 8014956:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8014958:	68bb      	ldr	r3, [r7, #8]
 801495a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801495e:	d309      	bcc.n	8014974 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8014960:	687b      	ldr	r3, [r7, #4]
 8014962:	8b5b      	ldrh	r3, [r3, #26]
 8014964:	f043 0302 	orr.w	r3, r3, #2
 8014968:	b29a      	uxth	r2, r3
 801496a:	687b      	ldr	r3, [r7, #4]
 801496c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801496e:	6878      	ldr	r0, [r7, #4]
 8014970:	f003 fe42 	bl	80185f8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8014974:	3710      	adds	r7, #16
 8014976:	46bd      	mov	sp, r7
 8014978:	bd80      	pop	{r7, pc}
 801497a:	bf00      	nop
 801497c:	0801f894 	.word	0x0801f894
 8014980:	0801fb30 	.word	0x0801fb30
 8014984:	0801f8d8 	.word	0x0801f8d8
 8014988:	0801fb48 	.word	0x0801fb48

0801498c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801498c:	b5b0      	push	{r4, r5, r7, lr}
 801498e:	b090      	sub	sp, #64	; 0x40
 8014990:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8014992:	2300      	movs	r3, #0
 8014994:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8014998:	4b94      	ldr	r3, [pc, #592]	; (8014bec <tcp_slowtmr+0x260>)
 801499a:	681b      	ldr	r3, [r3, #0]
 801499c:	3301      	adds	r3, #1
 801499e:	4a93      	ldr	r2, [pc, #588]	; (8014bec <tcp_slowtmr+0x260>)
 80149a0:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 80149a2:	4b93      	ldr	r3, [pc, #588]	; (8014bf0 <tcp_slowtmr+0x264>)
 80149a4:	781b      	ldrb	r3, [r3, #0]
 80149a6:	3301      	adds	r3, #1
 80149a8:	b2da      	uxtb	r2, r3
 80149aa:	4b91      	ldr	r3, [pc, #580]	; (8014bf0 <tcp_slowtmr+0x264>)
 80149ac:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 80149ae:	2300      	movs	r3, #0
 80149b0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80149b2:	4b90      	ldr	r3, [pc, #576]	; (8014bf4 <tcp_slowtmr+0x268>)
 80149b4:	681b      	ldr	r3, [r3, #0]
 80149b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80149b8:	e29d      	b.n	8014ef6 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80149ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149bc:	7d1b      	ldrb	r3, [r3, #20]
 80149be:	2b00      	cmp	r3, #0
 80149c0:	d106      	bne.n	80149d0 <tcp_slowtmr+0x44>
 80149c2:	4b8d      	ldr	r3, [pc, #564]	; (8014bf8 <tcp_slowtmr+0x26c>)
 80149c4:	f240 42be 	movw	r2, #1214	; 0x4be
 80149c8:	498c      	ldr	r1, [pc, #560]	; (8014bfc <tcp_slowtmr+0x270>)
 80149ca:	488d      	ldr	r0, [pc, #564]	; (8014c00 <tcp_slowtmr+0x274>)
 80149cc:	f009 f9b8 	bl	801dd40 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80149d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149d2:	7d1b      	ldrb	r3, [r3, #20]
 80149d4:	2b01      	cmp	r3, #1
 80149d6:	d106      	bne.n	80149e6 <tcp_slowtmr+0x5a>
 80149d8:	4b87      	ldr	r3, [pc, #540]	; (8014bf8 <tcp_slowtmr+0x26c>)
 80149da:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80149de:	4989      	ldr	r1, [pc, #548]	; (8014c04 <tcp_slowtmr+0x278>)
 80149e0:	4887      	ldr	r0, [pc, #540]	; (8014c00 <tcp_slowtmr+0x274>)
 80149e2:	f009 f9ad 	bl	801dd40 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80149e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149e8:	7d1b      	ldrb	r3, [r3, #20]
 80149ea:	2b0a      	cmp	r3, #10
 80149ec:	d106      	bne.n	80149fc <tcp_slowtmr+0x70>
 80149ee:	4b82      	ldr	r3, [pc, #520]	; (8014bf8 <tcp_slowtmr+0x26c>)
 80149f0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80149f4:	4984      	ldr	r1, [pc, #528]	; (8014c08 <tcp_slowtmr+0x27c>)
 80149f6:	4882      	ldr	r0, [pc, #520]	; (8014c00 <tcp_slowtmr+0x274>)
 80149f8:	f009 f9a2 	bl	801dd40 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80149fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80149fe:	7f9a      	ldrb	r2, [r3, #30]
 8014a00:	4b7b      	ldr	r3, [pc, #492]	; (8014bf0 <tcp_slowtmr+0x264>)
 8014a02:	781b      	ldrb	r3, [r3, #0]
 8014a04:	429a      	cmp	r2, r3
 8014a06:	d105      	bne.n	8014a14 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 8014a08:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a0a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8014a0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a0e:	68db      	ldr	r3, [r3, #12]
 8014a10:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8014a12:	e270      	b.n	8014ef6 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8014a14:	4b76      	ldr	r3, [pc, #472]	; (8014bf0 <tcp_slowtmr+0x264>)
 8014a16:	781a      	ldrb	r2, [r3, #0]
 8014a18:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a1a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 8014a1c:	2300      	movs	r3, #0
 8014a1e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8014a22:	2300      	movs	r3, #0
 8014a24:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8014a28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a2a:	7d1b      	ldrb	r3, [r3, #20]
 8014a2c:	2b02      	cmp	r3, #2
 8014a2e:	d10a      	bne.n	8014a46 <tcp_slowtmr+0xba>
 8014a30:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a32:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014a36:	2b05      	cmp	r3, #5
 8014a38:	d905      	bls.n	8014a46 <tcp_slowtmr+0xba>
      ++pcb_remove;
 8014a3a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014a3e:	3301      	adds	r3, #1
 8014a40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014a44:	e11e      	b.n	8014c84 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8014a46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a48:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014a4c:	2b0b      	cmp	r3, #11
 8014a4e:	d905      	bls.n	8014a5c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8014a50:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014a54:	3301      	adds	r3, #1
 8014a56:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014a5a:	e113      	b.n	8014c84 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 8014a5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a5e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d075      	beq.n	8014b52 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8014a66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014a6a:	2b00      	cmp	r3, #0
 8014a6c:	d006      	beq.n	8014a7c <tcp_slowtmr+0xf0>
 8014a6e:	4b62      	ldr	r3, [pc, #392]	; (8014bf8 <tcp_slowtmr+0x26c>)
 8014a70:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8014a74:	4965      	ldr	r1, [pc, #404]	; (8014c0c <tcp_slowtmr+0x280>)
 8014a76:	4862      	ldr	r0, [pc, #392]	; (8014c00 <tcp_slowtmr+0x274>)
 8014a78:	f009 f962 	bl	801dd40 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 8014a7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a7e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d106      	bne.n	8014a92 <tcp_slowtmr+0x106>
 8014a84:	4b5c      	ldr	r3, [pc, #368]	; (8014bf8 <tcp_slowtmr+0x26c>)
 8014a86:	f240 42d5 	movw	r2, #1237	; 0x4d5
 8014a8a:	4961      	ldr	r1, [pc, #388]	; (8014c10 <tcp_slowtmr+0x284>)
 8014a8c:	485c      	ldr	r0, [pc, #368]	; (8014c00 <tcp_slowtmr+0x274>)
 8014a8e:	f009 f957 	bl	801dd40 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8014a92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014a94:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014a98:	2b0b      	cmp	r3, #11
 8014a9a:	d905      	bls.n	8014aa8 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 8014a9c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014aa0:	3301      	adds	r3, #1
 8014aa2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014aa6:	e0ed      	b.n	8014c84 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8014aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014aaa:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014aae:	3b01      	subs	r3, #1
 8014ab0:	4a58      	ldr	r2, [pc, #352]	; (8014c14 <tcp_slowtmr+0x288>)
 8014ab2:	5cd3      	ldrb	r3, [r2, r3]
 8014ab4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 8014ab6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ab8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8014abc:	7c7a      	ldrb	r2, [r7, #17]
 8014abe:	429a      	cmp	r2, r3
 8014ac0:	d907      	bls.n	8014ad2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 8014ac2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ac4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8014ac8:	3301      	adds	r3, #1
 8014aca:	b2da      	uxtb	r2, r3
 8014acc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ace:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 8014ad2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ad4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 8014ad8:	7c7a      	ldrb	r2, [r7, #17]
 8014ada:	429a      	cmp	r2, r3
 8014adc:	f200 80d2 	bhi.w	8014c84 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 8014ae0:	2301      	movs	r3, #1
 8014ae2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 8014ae4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ae6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d108      	bne.n	8014b00 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 8014aee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014af0:	f004 fc2a 	bl	8019348 <tcp_zero_window_probe>
 8014af4:	4603      	mov	r3, r0
 8014af6:	2b00      	cmp	r3, #0
 8014af8:	d014      	beq.n	8014b24 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 8014afa:	2300      	movs	r3, #0
 8014afc:	623b      	str	r3, [r7, #32]
 8014afe:	e011      	b.n	8014b24 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 8014b00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b02:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8014b06:	4619      	mov	r1, r3
 8014b08:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014b0a:	f003 faef 	bl	80180ec <tcp_split_unsent_seg>
 8014b0e:	4603      	mov	r3, r0
 8014b10:	2b00      	cmp	r3, #0
 8014b12:	d107      	bne.n	8014b24 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8014b14:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014b16:	f003 fd6f 	bl	80185f8 <tcp_output>
 8014b1a:	4603      	mov	r3, r0
 8014b1c:	2b00      	cmp	r3, #0
 8014b1e:	d101      	bne.n	8014b24 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8014b20:	2300      	movs	r3, #0
 8014b22:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8014b24:	6a3b      	ldr	r3, [r7, #32]
 8014b26:	2b00      	cmp	r3, #0
 8014b28:	f000 80ac 	beq.w	8014c84 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 8014b2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b2e:	2200      	movs	r2, #0
 8014b30:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8014b34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b36:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014b3a:	2b06      	cmp	r3, #6
 8014b3c:	f200 80a2 	bhi.w	8014c84 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8014b40:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b42:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014b46:	3301      	adds	r3, #1
 8014b48:	b2da      	uxtb	r2, r3
 8014b4a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b4c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8014b50:	e098      	b.n	8014c84 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8014b52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b54:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	db0f      	blt.n	8014b7c <tcp_slowtmr+0x1f0>
 8014b5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b5e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014b62:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8014b66:	4293      	cmp	r3, r2
 8014b68:	d008      	beq.n	8014b7c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 8014b6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b6c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014b70:	b29b      	uxth	r3, r3
 8014b72:	3301      	adds	r3, #1
 8014b74:	b29b      	uxth	r3, r3
 8014b76:	b21a      	sxth	r2, r3
 8014b78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b7a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 8014b7c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b7e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8014b82:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b84:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8014b88:	429a      	cmp	r2, r3
 8014b8a:	db7b      	blt.n	8014c84 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 8014b8c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014b8e:	f004 f827 	bl	8018be0 <tcp_rexmit_rto_prepare>
 8014b92:	4603      	mov	r3, r0
 8014b94:	2b00      	cmp	r3, #0
 8014b96:	d007      	beq.n	8014ba8 <tcp_slowtmr+0x21c>
 8014b98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014b9a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014b9c:	2b00      	cmp	r3, #0
 8014b9e:	d171      	bne.n	8014c84 <tcp_slowtmr+0x2f8>
 8014ba0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ba2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014ba4:	2b00      	cmp	r3, #0
 8014ba6:	d06d      	beq.n	8014c84 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8014ba8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014baa:	7d1b      	ldrb	r3, [r3, #20]
 8014bac:	2b02      	cmp	r3, #2
 8014bae:	d03a      	beq.n	8014c26 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 8014bb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bb2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014bb6:	2b0c      	cmp	r3, #12
 8014bb8:	bf28      	it	cs
 8014bba:	230c      	movcs	r3, #12
 8014bbc:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 8014bbe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bc0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8014bc4:	10db      	asrs	r3, r3, #3
 8014bc6:	b21b      	sxth	r3, r3
 8014bc8:	461a      	mov	r2, r3
 8014bca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014bcc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8014bd0:	4413      	add	r3, r2
 8014bd2:	7efa      	ldrb	r2, [r7, #27]
 8014bd4:	4910      	ldr	r1, [pc, #64]	; (8014c18 <tcp_slowtmr+0x28c>)
 8014bd6:	5c8a      	ldrb	r2, [r1, r2]
 8014bd8:	4093      	lsls	r3, r2
 8014bda:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 8014bdc:	697b      	ldr	r3, [r7, #20]
 8014bde:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 8014be2:	4293      	cmp	r3, r2
 8014be4:	dc1a      	bgt.n	8014c1c <tcp_slowtmr+0x290>
 8014be6:	697b      	ldr	r3, [r7, #20]
 8014be8:	b21a      	sxth	r2, r3
 8014bea:	e019      	b.n	8014c20 <tcp_slowtmr+0x294>
 8014bec:	200240a0 	.word	0x200240a0
 8014bf0:	200240b6 	.word	0x200240b6
 8014bf4:	200240ac 	.word	0x200240ac
 8014bf8:	0801f894 	.word	0x0801f894
 8014bfc:	0801fbd8 	.word	0x0801fbd8
 8014c00:	0801f8d8 	.word	0x0801f8d8
 8014c04:	0801fc04 	.word	0x0801fc04
 8014c08:	0801fc30 	.word	0x0801fc30
 8014c0c:	0801fc60 	.word	0x0801fc60
 8014c10:	0801fc94 	.word	0x0801fc94
 8014c14:	080218e0 	.word	0x080218e0
 8014c18:	080218d0 	.word	0x080218d0
 8014c1c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8014c20:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c22:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8014c26:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c28:	2200      	movs	r2, #0
 8014c2a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 8014c2c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c2e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c34:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014c38:	4293      	cmp	r3, r2
 8014c3a:	bf28      	it	cs
 8014c3c:	4613      	movcs	r3, r2
 8014c3e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8014c40:	8a7b      	ldrh	r3, [r7, #18]
 8014c42:	085b      	lsrs	r3, r3, #1
 8014c44:	b29a      	uxth	r2, r3
 8014c46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c48:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 8014c4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c4e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014c52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c54:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014c56:	005b      	lsls	r3, r3, #1
 8014c58:	b29b      	uxth	r3, r3
 8014c5a:	429a      	cmp	r2, r3
 8014c5c:	d206      	bcs.n	8014c6c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 8014c5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c60:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014c62:	005b      	lsls	r3, r3, #1
 8014c64:	b29a      	uxth	r2, r3
 8014c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c68:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 8014c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c6e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8014c70:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c72:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8014c76:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c78:	2200      	movs	r2, #0
 8014c7a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 8014c7e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014c80:	f004 f81e 	bl	8018cc0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8014c84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c86:	7d1b      	ldrb	r3, [r3, #20]
 8014c88:	2b06      	cmp	r3, #6
 8014c8a:	d111      	bne.n	8014cb0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 8014c8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c8e:	8b5b      	ldrh	r3, [r3, #26]
 8014c90:	f003 0310 	and.w	r3, r3, #16
 8014c94:	2b00      	cmp	r3, #0
 8014c96:	d00b      	beq.n	8014cb0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014c98:	4b9c      	ldr	r3, [pc, #624]	; (8014f0c <tcp_slowtmr+0x580>)
 8014c9a:	681a      	ldr	r2, [r3, #0]
 8014c9c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014c9e:	6a1b      	ldr	r3, [r3, #32]
 8014ca0:	1ad3      	subs	r3, r2, r3
 8014ca2:	2b28      	cmp	r3, #40	; 0x28
 8014ca4:	d904      	bls.n	8014cb0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8014ca6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014caa:	3301      	adds	r3, #1
 8014cac:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8014cb0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cb2:	7a5b      	ldrb	r3, [r3, #9]
 8014cb4:	f003 0308 	and.w	r3, r3, #8
 8014cb8:	2b00      	cmp	r3, #0
 8014cba:	d04a      	beq.n	8014d52 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 8014cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cbe:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 8014cc0:	2b04      	cmp	r3, #4
 8014cc2:	d003      	beq.n	8014ccc <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 8014cc4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cc6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 8014cc8:	2b07      	cmp	r3, #7
 8014cca:	d142      	bne.n	8014d52 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014ccc:	4b8f      	ldr	r3, [pc, #572]	; (8014f0c <tcp_slowtmr+0x580>)
 8014cce:	681a      	ldr	r2, [r3, #0]
 8014cd0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cd2:	6a1b      	ldr	r3, [r3, #32]
 8014cd4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 8014cd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014cd8:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8014cdc:	4b8c      	ldr	r3, [pc, #560]	; (8014f10 <tcp_slowtmr+0x584>)
 8014cde:	440b      	add	r3, r1
 8014ce0:	498c      	ldr	r1, [pc, #560]	; (8014f14 <tcp_slowtmr+0x588>)
 8014ce2:	fba1 1303 	umull	r1, r3, r1, r3
 8014ce6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014ce8:	429a      	cmp	r2, r3
 8014cea:	d90a      	bls.n	8014d02 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 8014cec:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014cf0:	3301      	adds	r3, #1
 8014cf2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 8014cf6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014cfa:	3301      	adds	r3, #1
 8014cfc:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 8014d00:	e027      	b.n	8014d52 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014d02:	4b82      	ldr	r3, [pc, #520]	; (8014f0c <tcp_slowtmr+0x580>)
 8014d04:	681a      	ldr	r2, [r3, #0]
 8014d06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d08:	6a1b      	ldr	r3, [r3, #32]
 8014d0a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 8014d0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d0e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8014d12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d14:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8014d18:	4618      	mov	r0, r3
 8014d1a:	4b7f      	ldr	r3, [pc, #508]	; (8014f18 <tcp_slowtmr+0x58c>)
 8014d1c:	fb00 f303 	mul.w	r3, r0, r3
 8014d20:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8014d22:	497c      	ldr	r1, [pc, #496]	; (8014f14 <tcp_slowtmr+0x588>)
 8014d24:	fba1 1303 	umull	r1, r3, r1, r3
 8014d28:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014d2a:	429a      	cmp	r2, r3
 8014d2c:	d911      	bls.n	8014d52 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 8014d2e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014d30:	f004 faca 	bl	80192c8 <tcp_keepalive>
 8014d34:	4603      	mov	r3, r0
 8014d36:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 8014d3a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8014d3e:	2b00      	cmp	r3, #0
 8014d40:	d107      	bne.n	8014d52 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8014d42:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d44:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8014d48:	3301      	adds	r3, #1
 8014d4a:	b2da      	uxtb	r2, r3
 8014d4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d4e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8014d52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014d56:	2b00      	cmp	r3, #0
 8014d58:	d011      	beq.n	8014d7e <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 8014d5a:	4b6c      	ldr	r3, [pc, #432]	; (8014f0c <tcp_slowtmr+0x580>)
 8014d5c:	681a      	ldr	r2, [r3, #0]
 8014d5e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d60:	6a1b      	ldr	r3, [r3, #32]
 8014d62:	1ad2      	subs	r2, r2, r3
 8014d64:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d66:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8014d6a:	4619      	mov	r1, r3
 8014d6c:	460b      	mov	r3, r1
 8014d6e:	005b      	lsls	r3, r3, #1
 8014d70:	440b      	add	r3, r1
 8014d72:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8014d74:	429a      	cmp	r2, r3
 8014d76:	d302      	bcc.n	8014d7e <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8014d78:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014d7a:	f000 fddd 	bl	8015938 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 8014d7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d80:	7d1b      	ldrb	r3, [r3, #20]
 8014d82:	2b03      	cmp	r3, #3
 8014d84:	d10b      	bne.n	8014d9e <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014d86:	4b61      	ldr	r3, [pc, #388]	; (8014f0c <tcp_slowtmr+0x580>)
 8014d88:	681a      	ldr	r2, [r3, #0]
 8014d8a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014d8c:	6a1b      	ldr	r3, [r3, #32]
 8014d8e:	1ad3      	subs	r3, r2, r3
 8014d90:	2b28      	cmp	r3, #40	; 0x28
 8014d92:	d904      	bls.n	8014d9e <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8014d94:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014d98:	3301      	adds	r3, #1
 8014d9a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 8014d9e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014da0:	7d1b      	ldrb	r3, [r3, #20]
 8014da2:	2b09      	cmp	r3, #9
 8014da4:	d10b      	bne.n	8014dbe <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8014da6:	4b59      	ldr	r3, [pc, #356]	; (8014f0c <tcp_slowtmr+0x580>)
 8014da8:	681a      	ldr	r2, [r3, #0]
 8014daa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014dac:	6a1b      	ldr	r3, [r3, #32]
 8014dae:	1ad3      	subs	r3, r2, r3
 8014db0:	2bf0      	cmp	r3, #240	; 0xf0
 8014db2:	d904      	bls.n	8014dbe <tcp_slowtmr+0x432>
        ++pcb_remove;
 8014db4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014db8:	3301      	adds	r3, #1
 8014dba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8014dbe:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014dc2:	2b00      	cmp	r3, #0
 8014dc4:	d060      	beq.n	8014e88 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 8014dc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014dc8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8014dcc:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 8014dce:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014dd0:	f000 fbfe 	bl	80155d0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 8014dd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014dd6:	2b00      	cmp	r3, #0
 8014dd8:	d010      	beq.n	8014dfc <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 8014dda:	4b50      	ldr	r3, [pc, #320]	; (8014f1c <tcp_slowtmr+0x590>)
 8014ddc:	681b      	ldr	r3, [r3, #0]
 8014dde:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014de0:	429a      	cmp	r2, r3
 8014de2:	d106      	bne.n	8014df2 <tcp_slowtmr+0x466>
 8014de4:	4b4e      	ldr	r3, [pc, #312]	; (8014f20 <tcp_slowtmr+0x594>)
 8014de6:	f240 526d 	movw	r2, #1389	; 0x56d
 8014dea:	494e      	ldr	r1, [pc, #312]	; (8014f24 <tcp_slowtmr+0x598>)
 8014dec:	484e      	ldr	r0, [pc, #312]	; (8014f28 <tcp_slowtmr+0x59c>)
 8014dee:	f008 ffa7 	bl	801dd40 <iprintf>
        prev->next = pcb->next;
 8014df2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014df4:	68da      	ldr	r2, [r3, #12]
 8014df6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014df8:	60da      	str	r2, [r3, #12]
 8014dfa:	e00f      	b.n	8014e1c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 8014dfc:	4b47      	ldr	r3, [pc, #284]	; (8014f1c <tcp_slowtmr+0x590>)
 8014dfe:	681b      	ldr	r3, [r3, #0]
 8014e00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014e02:	429a      	cmp	r2, r3
 8014e04:	d006      	beq.n	8014e14 <tcp_slowtmr+0x488>
 8014e06:	4b46      	ldr	r3, [pc, #280]	; (8014f20 <tcp_slowtmr+0x594>)
 8014e08:	f240 5271 	movw	r2, #1393	; 0x571
 8014e0c:	4947      	ldr	r1, [pc, #284]	; (8014f2c <tcp_slowtmr+0x5a0>)
 8014e0e:	4846      	ldr	r0, [pc, #280]	; (8014f28 <tcp_slowtmr+0x59c>)
 8014e10:	f008 ff96 	bl	801dd40 <iprintf>
        tcp_active_pcbs = pcb->next;
 8014e14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e16:	68db      	ldr	r3, [r3, #12]
 8014e18:	4a40      	ldr	r2, [pc, #256]	; (8014f1c <tcp_slowtmr+0x590>)
 8014e1a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 8014e1c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014e20:	2b00      	cmp	r3, #0
 8014e22:	d013      	beq.n	8014e4c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8014e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e26:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8014e28:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e2a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8014e2c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 8014e2e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e30:	3304      	adds	r3, #4
 8014e32:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014e34:	8ad2      	ldrh	r2, [r2, #22]
 8014e36:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014e38:	8b09      	ldrh	r1, [r1, #24]
 8014e3a:	9102      	str	r1, [sp, #8]
 8014e3c:	9201      	str	r2, [sp, #4]
 8014e3e:	9300      	str	r3, [sp, #0]
 8014e40:	462b      	mov	r3, r5
 8014e42:	4622      	mov	r2, r4
 8014e44:	4601      	mov	r1, r0
 8014e46:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014e48:	f004 f98a 	bl	8019160 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 8014e4c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e4e:	691b      	ldr	r3, [r3, #16]
 8014e50:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8014e52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e54:	7d1b      	ldrb	r3, [r3, #20]
 8014e56:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8014e58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e5a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 8014e5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e5e:	68db      	ldr	r3, [r3, #12]
 8014e60:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8014e62:	6838      	ldr	r0, [r7, #0]
 8014e64:	f7ff f9f4 	bl	8014250 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8014e68:	4b31      	ldr	r3, [pc, #196]	; (8014f30 <tcp_slowtmr+0x5a4>)
 8014e6a:	2200      	movs	r2, #0
 8014e6c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 8014e6e:	68fb      	ldr	r3, [r7, #12]
 8014e70:	2b00      	cmp	r3, #0
 8014e72:	d004      	beq.n	8014e7e <tcp_slowtmr+0x4f2>
 8014e74:	68fb      	ldr	r3, [r7, #12]
 8014e76:	f06f 010c 	mvn.w	r1, #12
 8014e7a:	68b8      	ldr	r0, [r7, #8]
 8014e7c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 8014e7e:	4b2c      	ldr	r3, [pc, #176]	; (8014f30 <tcp_slowtmr+0x5a4>)
 8014e80:	781b      	ldrb	r3, [r3, #0]
 8014e82:	2b00      	cmp	r3, #0
 8014e84:	d037      	beq.n	8014ef6 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8014e86:	e592      	b.n	80149ae <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8014e88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e8a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8014e8c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014e8e:	68db      	ldr	r3, [r3, #12]
 8014e90:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8014e92:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e94:	7f1b      	ldrb	r3, [r3, #28]
 8014e96:	3301      	adds	r3, #1
 8014e98:	b2da      	uxtb	r2, r3
 8014e9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014e9c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 8014e9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ea0:	7f1a      	ldrb	r2, [r3, #28]
 8014ea2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ea4:	7f5b      	ldrb	r3, [r3, #29]
 8014ea6:	429a      	cmp	r2, r3
 8014ea8:	d325      	bcc.n	8014ef6 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 8014eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014eac:	2200      	movs	r2, #0
 8014eae:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 8014eb0:	4b1f      	ldr	r3, [pc, #124]	; (8014f30 <tcp_slowtmr+0x5a4>)
 8014eb2:	2200      	movs	r2, #0
 8014eb4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 8014eb6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014eb8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014ebc:	2b00      	cmp	r3, #0
 8014ebe:	d00b      	beq.n	8014ed8 <tcp_slowtmr+0x54c>
 8014ec0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014ec2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8014ec6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8014ec8:	6912      	ldr	r2, [r2, #16]
 8014eca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8014ecc:	4610      	mov	r0, r2
 8014ece:	4798      	blx	r3
 8014ed0:	4603      	mov	r3, r0
 8014ed2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 8014ed6:	e002      	b.n	8014ede <tcp_slowtmr+0x552>
 8014ed8:	2300      	movs	r3, #0
 8014eda:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 8014ede:	4b14      	ldr	r3, [pc, #80]	; (8014f30 <tcp_slowtmr+0x5a4>)
 8014ee0:	781b      	ldrb	r3, [r3, #0]
 8014ee2:	2b00      	cmp	r3, #0
 8014ee4:	d000      	beq.n	8014ee8 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 8014ee6:	e562      	b.n	80149ae <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 8014ee8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 8014eec:	2b00      	cmp	r3, #0
 8014eee:	d102      	bne.n	8014ef6 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 8014ef0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8014ef2:	f003 fb81 	bl	80185f8 <tcp_output>
  while (pcb != NULL) {
 8014ef6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014ef8:	2b00      	cmp	r3, #0
 8014efa:	f47f ad5e 	bne.w	80149ba <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 8014efe:	2300      	movs	r3, #0
 8014f00:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 8014f02:	4b0c      	ldr	r3, [pc, #48]	; (8014f34 <tcp_slowtmr+0x5a8>)
 8014f04:	681b      	ldr	r3, [r3, #0]
 8014f06:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8014f08:	e069      	b.n	8014fde <tcp_slowtmr+0x652>
 8014f0a:	bf00      	nop
 8014f0c:	200240a0 	.word	0x200240a0
 8014f10:	000a4cb8 	.word	0x000a4cb8
 8014f14:	10624dd3 	.word	0x10624dd3
 8014f18:	000124f8 	.word	0x000124f8
 8014f1c:	200240ac 	.word	0x200240ac
 8014f20:	0801f894 	.word	0x0801f894
 8014f24:	0801fccc 	.word	0x0801fccc
 8014f28:	0801f8d8 	.word	0x0801f8d8
 8014f2c:	0801fcf8 	.word	0x0801fcf8
 8014f30:	200240b4 	.word	0x200240b4
 8014f34:	200240b0 	.word	0x200240b0
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8014f38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f3a:	7d1b      	ldrb	r3, [r3, #20]
 8014f3c:	2b0a      	cmp	r3, #10
 8014f3e:	d006      	beq.n	8014f4e <tcp_slowtmr+0x5c2>
 8014f40:	4b2b      	ldr	r3, [pc, #172]	; (8014ff0 <tcp_slowtmr+0x664>)
 8014f42:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8014f46:	492b      	ldr	r1, [pc, #172]	; (8014ff4 <tcp_slowtmr+0x668>)
 8014f48:	482b      	ldr	r0, [pc, #172]	; (8014ff8 <tcp_slowtmr+0x66c>)
 8014f4a:	f008 fef9 	bl	801dd40 <iprintf>
    pcb_remove = 0;
 8014f4e:	2300      	movs	r3, #0
 8014f50:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8014f54:	4b29      	ldr	r3, [pc, #164]	; (8014ffc <tcp_slowtmr+0x670>)
 8014f56:	681a      	ldr	r2, [r3, #0]
 8014f58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f5a:	6a1b      	ldr	r3, [r3, #32]
 8014f5c:	1ad3      	subs	r3, r2, r3
 8014f5e:	2bf0      	cmp	r3, #240	; 0xf0
 8014f60:	d904      	bls.n	8014f6c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8014f62:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014f66:	3301      	adds	r3, #1
 8014f68:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 8014f6c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014f70:	2b00      	cmp	r3, #0
 8014f72:	d02f      	beq.n	8014fd4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8014f74:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014f76:	f000 fb2b 	bl	80155d0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 8014f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f7c:	2b00      	cmp	r3, #0
 8014f7e:	d010      	beq.n	8014fa2 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8014f80:	4b1f      	ldr	r3, [pc, #124]	; (8015000 <tcp_slowtmr+0x674>)
 8014f82:	681b      	ldr	r3, [r3, #0]
 8014f84:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014f86:	429a      	cmp	r2, r3
 8014f88:	d106      	bne.n	8014f98 <tcp_slowtmr+0x60c>
 8014f8a:	4b19      	ldr	r3, [pc, #100]	; (8014ff0 <tcp_slowtmr+0x664>)
 8014f8c:	f240 52af 	movw	r2, #1455	; 0x5af
 8014f90:	491c      	ldr	r1, [pc, #112]	; (8015004 <tcp_slowtmr+0x678>)
 8014f92:	4819      	ldr	r0, [pc, #100]	; (8014ff8 <tcp_slowtmr+0x66c>)
 8014f94:	f008 fed4 	bl	801dd40 <iprintf>
        prev->next = pcb->next;
 8014f98:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014f9a:	68da      	ldr	r2, [r3, #12]
 8014f9c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014f9e:	60da      	str	r2, [r3, #12]
 8014fa0:	e00f      	b.n	8014fc2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8014fa2:	4b17      	ldr	r3, [pc, #92]	; (8015000 <tcp_slowtmr+0x674>)
 8014fa4:	681b      	ldr	r3, [r3, #0]
 8014fa6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014fa8:	429a      	cmp	r2, r3
 8014faa:	d006      	beq.n	8014fba <tcp_slowtmr+0x62e>
 8014fac:	4b10      	ldr	r3, [pc, #64]	; (8014ff0 <tcp_slowtmr+0x664>)
 8014fae:	f240 52b3 	movw	r2, #1459	; 0x5b3
 8014fb2:	4915      	ldr	r1, [pc, #84]	; (8015008 <tcp_slowtmr+0x67c>)
 8014fb4:	4810      	ldr	r0, [pc, #64]	; (8014ff8 <tcp_slowtmr+0x66c>)
 8014fb6:	f008 fec3 	bl	801dd40 <iprintf>
        tcp_tw_pcbs = pcb->next;
 8014fba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fbc:	68db      	ldr	r3, [r3, #12]
 8014fbe:	4a10      	ldr	r2, [pc, #64]	; (8015000 <tcp_slowtmr+0x674>)
 8014fc0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 8014fc2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fc4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 8014fc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fc8:	68db      	ldr	r3, [r3, #12]
 8014fca:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8014fcc:	69f8      	ldr	r0, [r7, #28]
 8014fce:	f7ff f93f 	bl	8014250 <tcp_free>
 8014fd2:	e004      	b.n	8014fde <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 8014fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fd6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 8014fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fda:	68db      	ldr	r3, [r3, #12]
 8014fdc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 8014fde:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014fe0:	2b00      	cmp	r3, #0
 8014fe2:	d1a9      	bne.n	8014f38 <tcp_slowtmr+0x5ac>
    }
  }
}
 8014fe4:	bf00      	nop
 8014fe6:	bf00      	nop
 8014fe8:	3730      	adds	r7, #48	; 0x30
 8014fea:	46bd      	mov	sp, r7
 8014fec:	bdb0      	pop	{r4, r5, r7, pc}
 8014fee:	bf00      	nop
 8014ff0:	0801f894 	.word	0x0801f894
 8014ff4:	0801fd24 	.word	0x0801fd24
 8014ff8:	0801f8d8 	.word	0x0801f8d8
 8014ffc:	200240a0 	.word	0x200240a0
 8015000:	200240b0 	.word	0x200240b0
 8015004:	0801fd54 	.word	0x0801fd54
 8015008:	0801fd7c 	.word	0x0801fd7c

0801500c <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 801500c:	b580      	push	{r7, lr}
 801500e:	b082      	sub	sp, #8
 8015010:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8015012:	4b2d      	ldr	r3, [pc, #180]	; (80150c8 <tcp_fasttmr+0xbc>)
 8015014:	781b      	ldrb	r3, [r3, #0]
 8015016:	3301      	adds	r3, #1
 8015018:	b2da      	uxtb	r2, r3
 801501a:	4b2b      	ldr	r3, [pc, #172]	; (80150c8 <tcp_fasttmr+0xbc>)
 801501c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801501e:	4b2b      	ldr	r3, [pc, #172]	; (80150cc <tcp_fasttmr+0xc0>)
 8015020:	681b      	ldr	r3, [r3, #0]
 8015022:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8015024:	e048      	b.n	80150b8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8015026:	687b      	ldr	r3, [r7, #4]
 8015028:	7f9a      	ldrb	r2, [r3, #30]
 801502a:	4b27      	ldr	r3, [pc, #156]	; (80150c8 <tcp_fasttmr+0xbc>)
 801502c:	781b      	ldrb	r3, [r3, #0]
 801502e:	429a      	cmp	r2, r3
 8015030:	d03f      	beq.n	80150b2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8015032:	4b25      	ldr	r3, [pc, #148]	; (80150c8 <tcp_fasttmr+0xbc>)
 8015034:	781a      	ldrb	r2, [r3, #0]
 8015036:	687b      	ldr	r3, [r7, #4]
 8015038:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801503a:	687b      	ldr	r3, [r7, #4]
 801503c:	8b5b      	ldrh	r3, [r3, #26]
 801503e:	f003 0301 	and.w	r3, r3, #1
 8015042:	2b00      	cmp	r3, #0
 8015044:	d010      	beq.n	8015068 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8015046:	687b      	ldr	r3, [r7, #4]
 8015048:	8b5b      	ldrh	r3, [r3, #26]
 801504a:	f043 0302 	orr.w	r3, r3, #2
 801504e:	b29a      	uxth	r2, r3
 8015050:	687b      	ldr	r3, [r7, #4]
 8015052:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8015054:	6878      	ldr	r0, [r7, #4]
 8015056:	f003 facf 	bl	80185f8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801505a:	687b      	ldr	r3, [r7, #4]
 801505c:	8b5b      	ldrh	r3, [r3, #26]
 801505e:	f023 0303 	bic.w	r3, r3, #3
 8015062:	b29a      	uxth	r2, r3
 8015064:	687b      	ldr	r3, [r7, #4]
 8015066:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8015068:	687b      	ldr	r3, [r7, #4]
 801506a:	8b5b      	ldrh	r3, [r3, #26]
 801506c:	f003 0308 	and.w	r3, r3, #8
 8015070:	2b00      	cmp	r3, #0
 8015072:	d009      	beq.n	8015088 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8015074:	687b      	ldr	r3, [r7, #4]
 8015076:	8b5b      	ldrh	r3, [r3, #26]
 8015078:	f023 0308 	bic.w	r3, r3, #8
 801507c:	b29a      	uxth	r2, r3
 801507e:	687b      	ldr	r3, [r7, #4]
 8015080:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8015082:	6878      	ldr	r0, [r7, #4]
 8015084:	f7ff fa78 	bl	8014578 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	68db      	ldr	r3, [r3, #12]
 801508c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801508e:	687b      	ldr	r3, [r7, #4]
 8015090:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015092:	2b00      	cmp	r3, #0
 8015094:	d00a      	beq.n	80150ac <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8015096:	4b0e      	ldr	r3, [pc, #56]	; (80150d0 <tcp_fasttmr+0xc4>)
 8015098:	2200      	movs	r2, #0
 801509a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801509c:	6878      	ldr	r0, [r7, #4]
 801509e:	f000 f819 	bl	80150d4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 80150a2:	4b0b      	ldr	r3, [pc, #44]	; (80150d0 <tcp_fasttmr+0xc4>)
 80150a4:	781b      	ldrb	r3, [r3, #0]
 80150a6:	2b00      	cmp	r3, #0
 80150a8:	d000      	beq.n	80150ac <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 80150aa:	e7b8      	b.n	801501e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 80150ac:	683b      	ldr	r3, [r7, #0]
 80150ae:	607b      	str	r3, [r7, #4]
 80150b0:	e002      	b.n	80150b8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80150b2:	687b      	ldr	r3, [r7, #4]
 80150b4:	68db      	ldr	r3, [r3, #12]
 80150b6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80150b8:	687b      	ldr	r3, [r7, #4]
 80150ba:	2b00      	cmp	r3, #0
 80150bc:	d1b3      	bne.n	8015026 <tcp_fasttmr+0x1a>
    }
  }
}
 80150be:	bf00      	nop
 80150c0:	bf00      	nop
 80150c2:	3708      	adds	r7, #8
 80150c4:	46bd      	mov	sp, r7
 80150c6:	bd80      	pop	{r7, pc}
 80150c8:	200240b6 	.word	0x200240b6
 80150cc:	200240ac 	.word	0x200240ac
 80150d0:	200240b4 	.word	0x200240b4

080150d4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80150d4:	b590      	push	{r4, r7, lr}
 80150d6:	b085      	sub	sp, #20
 80150d8:	af00      	add	r7, sp, #0
 80150da:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80150dc:	687b      	ldr	r3, [r7, #4]
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d109      	bne.n	80150f6 <tcp_process_refused_data+0x22>
 80150e2:	4b37      	ldr	r3, [pc, #220]	; (80151c0 <tcp_process_refused_data+0xec>)
 80150e4:	f240 6209 	movw	r2, #1545	; 0x609
 80150e8:	4936      	ldr	r1, [pc, #216]	; (80151c4 <tcp_process_refused_data+0xf0>)
 80150ea:	4837      	ldr	r0, [pc, #220]	; (80151c8 <tcp_process_refused_data+0xf4>)
 80150ec:	f008 fe28 	bl	801dd40 <iprintf>
 80150f0:	f06f 030f 	mvn.w	r3, #15
 80150f4:	e060      	b.n	80151b8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80150fa:	7b5b      	ldrb	r3, [r3, #13]
 80150fc:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80150fe:	687b      	ldr	r3, [r7, #4]
 8015100:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015102:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 8015104:	687b      	ldr	r3, [r7, #4]
 8015106:	2200      	movs	r2, #0
 8015108:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 801510a:	687b      	ldr	r3, [r7, #4]
 801510c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015110:	2b00      	cmp	r3, #0
 8015112:	d00b      	beq.n	801512c <tcp_process_refused_data+0x58>
 8015114:	687b      	ldr	r3, [r7, #4]
 8015116:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801511a:	687b      	ldr	r3, [r7, #4]
 801511c:	6918      	ldr	r0, [r3, #16]
 801511e:	2300      	movs	r3, #0
 8015120:	68ba      	ldr	r2, [r7, #8]
 8015122:	6879      	ldr	r1, [r7, #4]
 8015124:	47a0      	blx	r4
 8015126:	4603      	mov	r3, r0
 8015128:	73fb      	strb	r3, [r7, #15]
 801512a:	e007      	b.n	801513c <tcp_process_refused_data+0x68>
 801512c:	2300      	movs	r3, #0
 801512e:	68ba      	ldr	r2, [r7, #8]
 8015130:	6879      	ldr	r1, [r7, #4]
 8015132:	2000      	movs	r0, #0
 8015134:	f000 f8a4 	bl	8015280 <tcp_recv_null>
 8015138:	4603      	mov	r3, r0
 801513a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801513c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015140:	2b00      	cmp	r3, #0
 8015142:	d12a      	bne.n	801519a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8015144:	7bbb      	ldrb	r3, [r7, #14]
 8015146:	f003 0320 	and.w	r3, r3, #32
 801514a:	2b00      	cmp	r3, #0
 801514c:	d033      	beq.n	80151b6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015152:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8015156:	d005      	beq.n	8015164 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801515c:	3301      	adds	r3, #1
 801515e:	b29a      	uxth	r2, r3
 8015160:	687b      	ldr	r3, [r7, #4]
 8015162:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801516a:	2b00      	cmp	r3, #0
 801516c:	d00b      	beq.n	8015186 <tcp_process_refused_data+0xb2>
 801516e:	687b      	ldr	r3, [r7, #4]
 8015170:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	6918      	ldr	r0, [r3, #16]
 8015178:	2300      	movs	r3, #0
 801517a:	2200      	movs	r2, #0
 801517c:	6879      	ldr	r1, [r7, #4]
 801517e:	47a0      	blx	r4
 8015180:	4603      	mov	r3, r0
 8015182:	73fb      	strb	r3, [r7, #15]
 8015184:	e001      	b.n	801518a <tcp_process_refused_data+0xb6>
 8015186:	2300      	movs	r3, #0
 8015188:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801518a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801518e:	f113 0f0d 	cmn.w	r3, #13
 8015192:	d110      	bne.n	80151b6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8015194:	f06f 030c 	mvn.w	r3, #12
 8015198:	e00e      	b.n	80151b8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801519a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801519e:	f113 0f0d 	cmn.w	r3, #13
 80151a2:	d102      	bne.n	80151aa <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 80151a4:	f06f 030c 	mvn.w	r3, #12
 80151a8:	e006      	b.n	80151b8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 80151aa:	687b      	ldr	r3, [r7, #4]
 80151ac:	68ba      	ldr	r2, [r7, #8]
 80151ae:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80151b0:	f06f 0304 	mvn.w	r3, #4
 80151b4:	e000      	b.n	80151b8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80151b6:	2300      	movs	r3, #0
}
 80151b8:	4618      	mov	r0, r3
 80151ba:	3714      	adds	r7, #20
 80151bc:	46bd      	mov	sp, r7
 80151be:	bd90      	pop	{r4, r7, pc}
 80151c0:	0801f894 	.word	0x0801f894
 80151c4:	0801fda4 	.word	0x0801fda4
 80151c8:	0801f8d8 	.word	0x0801f8d8

080151cc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80151cc:	b580      	push	{r7, lr}
 80151ce:	b084      	sub	sp, #16
 80151d0:	af00      	add	r7, sp, #0
 80151d2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80151d4:	e007      	b.n	80151e6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80151d6:	687b      	ldr	r3, [r7, #4]
 80151d8:	681b      	ldr	r3, [r3, #0]
 80151da:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80151dc:	6878      	ldr	r0, [r7, #4]
 80151de:	f000 f80a 	bl	80151f6 <tcp_seg_free>
    seg = next;
 80151e2:	68fb      	ldr	r3, [r7, #12]
 80151e4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	2b00      	cmp	r3, #0
 80151ea:	d1f4      	bne.n	80151d6 <tcp_segs_free+0xa>
  }
}
 80151ec:	bf00      	nop
 80151ee:	bf00      	nop
 80151f0:	3710      	adds	r7, #16
 80151f2:	46bd      	mov	sp, r7
 80151f4:	bd80      	pop	{r7, pc}

080151f6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80151f6:	b580      	push	{r7, lr}
 80151f8:	b082      	sub	sp, #8
 80151fa:	af00      	add	r7, sp, #0
 80151fc:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80151fe:	687b      	ldr	r3, [r7, #4]
 8015200:	2b00      	cmp	r3, #0
 8015202:	d00c      	beq.n	801521e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 8015204:	687b      	ldr	r3, [r7, #4]
 8015206:	685b      	ldr	r3, [r3, #4]
 8015208:	2b00      	cmp	r3, #0
 801520a:	d004      	beq.n	8015216 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 801520c:	687b      	ldr	r3, [r7, #4]
 801520e:	685b      	ldr	r3, [r3, #4]
 8015210:	4618      	mov	r0, r3
 8015212:	f7fe fd61 	bl	8013cd8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8015216:	6879      	ldr	r1, [r7, #4]
 8015218:	2003      	movs	r0, #3
 801521a:	f7fd feb9 	bl	8012f90 <memp_free>
  }
}
 801521e:	bf00      	nop
 8015220:	3708      	adds	r7, #8
 8015222:	46bd      	mov	sp, r7
 8015224:	bd80      	pop	{r7, pc}
	...

08015228 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8015228:	b580      	push	{r7, lr}
 801522a:	b084      	sub	sp, #16
 801522c:	af00      	add	r7, sp, #0
 801522e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8015230:	687b      	ldr	r3, [r7, #4]
 8015232:	2b00      	cmp	r3, #0
 8015234:	d106      	bne.n	8015244 <tcp_seg_copy+0x1c>
 8015236:	4b0f      	ldr	r3, [pc, #60]	; (8015274 <tcp_seg_copy+0x4c>)
 8015238:	f240 6282 	movw	r2, #1666	; 0x682
 801523c:	490e      	ldr	r1, [pc, #56]	; (8015278 <tcp_seg_copy+0x50>)
 801523e:	480f      	ldr	r0, [pc, #60]	; (801527c <tcp_seg_copy+0x54>)
 8015240:	f008 fd7e 	bl	801dd40 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8015244:	2003      	movs	r0, #3
 8015246:	f7fd fe2d 	bl	8012ea4 <memp_malloc>
 801524a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 801524c:	68fb      	ldr	r3, [r7, #12]
 801524e:	2b00      	cmp	r3, #0
 8015250:	d101      	bne.n	8015256 <tcp_seg_copy+0x2e>
    return NULL;
 8015252:	2300      	movs	r3, #0
 8015254:	e00a      	b.n	801526c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8015256:	2210      	movs	r2, #16
 8015258:	6879      	ldr	r1, [r7, #4]
 801525a:	68f8      	ldr	r0, [r7, #12]
 801525c:	f008 fea1 	bl	801dfa2 <memcpy>
  pbuf_ref(cseg->p);
 8015260:	68fb      	ldr	r3, [r7, #12]
 8015262:	685b      	ldr	r3, [r3, #4]
 8015264:	4618      	mov	r0, r3
 8015266:	f7fe fddd 	bl	8013e24 <pbuf_ref>
  return cseg;
 801526a:	68fb      	ldr	r3, [r7, #12]
}
 801526c:	4618      	mov	r0, r3
 801526e:	3710      	adds	r7, #16
 8015270:	46bd      	mov	sp, r7
 8015272:	bd80      	pop	{r7, pc}
 8015274:	0801f894 	.word	0x0801f894
 8015278:	0801fde8 	.word	0x0801fde8
 801527c:	0801f8d8 	.word	0x0801f8d8

08015280 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8015280:	b580      	push	{r7, lr}
 8015282:	b084      	sub	sp, #16
 8015284:	af00      	add	r7, sp, #0
 8015286:	60f8      	str	r0, [r7, #12]
 8015288:	60b9      	str	r1, [r7, #8]
 801528a:	607a      	str	r2, [r7, #4]
 801528c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 801528e:	68bb      	ldr	r3, [r7, #8]
 8015290:	2b00      	cmp	r3, #0
 8015292:	d109      	bne.n	80152a8 <tcp_recv_null+0x28>
 8015294:	4b12      	ldr	r3, [pc, #72]	; (80152e0 <tcp_recv_null+0x60>)
 8015296:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801529a:	4912      	ldr	r1, [pc, #72]	; (80152e4 <tcp_recv_null+0x64>)
 801529c:	4812      	ldr	r0, [pc, #72]	; (80152e8 <tcp_recv_null+0x68>)
 801529e:	f008 fd4f 	bl	801dd40 <iprintf>
 80152a2:	f06f 030f 	mvn.w	r3, #15
 80152a6:	e016      	b.n	80152d6 <tcp_recv_null+0x56>

  if (p != NULL) {
 80152a8:	687b      	ldr	r3, [r7, #4]
 80152aa:	2b00      	cmp	r3, #0
 80152ac:	d009      	beq.n	80152c2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 80152ae:	687b      	ldr	r3, [r7, #4]
 80152b0:	891b      	ldrh	r3, [r3, #8]
 80152b2:	4619      	mov	r1, r3
 80152b4:	68b8      	ldr	r0, [r7, #8]
 80152b6:	f7ff fb19 	bl	80148ec <tcp_recved>
    pbuf_free(p);
 80152ba:	6878      	ldr	r0, [r7, #4]
 80152bc:	f7fe fd0c 	bl	8013cd8 <pbuf_free>
 80152c0:	e008      	b.n	80152d4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 80152c2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d104      	bne.n	80152d4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 80152ca:	68b8      	ldr	r0, [r7, #8]
 80152cc:	f7ff f9be 	bl	801464c <tcp_close>
 80152d0:	4603      	mov	r3, r0
 80152d2:	e000      	b.n	80152d6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 80152d4:	2300      	movs	r3, #0
}
 80152d6:	4618      	mov	r0, r3
 80152d8:	3710      	adds	r7, #16
 80152da:	46bd      	mov	sp, r7
 80152dc:	bd80      	pop	{r7, pc}
 80152de:	bf00      	nop
 80152e0:	0801f894 	.word	0x0801f894
 80152e4:	0801fe04 	.word	0x0801fe04
 80152e8:	0801f8d8 	.word	0x0801f8d8

080152ec <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 80152ec:	b580      	push	{r7, lr}
 80152ee:	b086      	sub	sp, #24
 80152f0:	af00      	add	r7, sp, #0
 80152f2:	4603      	mov	r3, r0
 80152f4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 80152f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80152fa:	2b00      	cmp	r3, #0
 80152fc:	db01      	blt.n	8015302 <tcp_kill_prio+0x16>
 80152fe:	79fb      	ldrb	r3, [r7, #7]
 8015300:	e000      	b.n	8015304 <tcp_kill_prio+0x18>
 8015302:	237f      	movs	r3, #127	; 0x7f
 8015304:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8015306:	7afb      	ldrb	r3, [r7, #11]
 8015308:	2b00      	cmp	r3, #0
 801530a:	d034      	beq.n	8015376 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 801530c:	7afb      	ldrb	r3, [r7, #11]
 801530e:	3b01      	subs	r3, #1
 8015310:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8015312:	2300      	movs	r3, #0
 8015314:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8015316:	2300      	movs	r3, #0
 8015318:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801531a:	4b19      	ldr	r3, [pc, #100]	; (8015380 <tcp_kill_prio+0x94>)
 801531c:	681b      	ldr	r3, [r3, #0]
 801531e:	617b      	str	r3, [r7, #20]
 8015320:	e01f      	b.n	8015362 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8015322:	697b      	ldr	r3, [r7, #20]
 8015324:	7d5b      	ldrb	r3, [r3, #21]
 8015326:	7afa      	ldrb	r2, [r7, #11]
 8015328:	429a      	cmp	r2, r3
 801532a:	d80c      	bhi.n	8015346 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 801532c:	697b      	ldr	r3, [r7, #20]
 801532e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8015330:	7afa      	ldrb	r2, [r7, #11]
 8015332:	429a      	cmp	r2, r3
 8015334:	d112      	bne.n	801535c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8015336:	4b13      	ldr	r3, [pc, #76]	; (8015384 <tcp_kill_prio+0x98>)
 8015338:	681a      	ldr	r2, [r3, #0]
 801533a:	697b      	ldr	r3, [r7, #20]
 801533c:	6a1b      	ldr	r3, [r3, #32]
 801533e:	1ad3      	subs	r3, r2, r3
 8015340:	68fa      	ldr	r2, [r7, #12]
 8015342:	429a      	cmp	r2, r3
 8015344:	d80a      	bhi.n	801535c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8015346:	4b0f      	ldr	r3, [pc, #60]	; (8015384 <tcp_kill_prio+0x98>)
 8015348:	681a      	ldr	r2, [r3, #0]
 801534a:	697b      	ldr	r3, [r7, #20]
 801534c:	6a1b      	ldr	r3, [r3, #32]
 801534e:	1ad3      	subs	r3, r2, r3
 8015350:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8015352:	697b      	ldr	r3, [r7, #20]
 8015354:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8015356:	697b      	ldr	r3, [r7, #20]
 8015358:	7d5b      	ldrb	r3, [r3, #21]
 801535a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 801535c:	697b      	ldr	r3, [r7, #20]
 801535e:	68db      	ldr	r3, [r3, #12]
 8015360:	617b      	str	r3, [r7, #20]
 8015362:	697b      	ldr	r3, [r7, #20]
 8015364:	2b00      	cmp	r3, #0
 8015366:	d1dc      	bne.n	8015322 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8015368:	693b      	ldr	r3, [r7, #16]
 801536a:	2b00      	cmp	r3, #0
 801536c:	d004      	beq.n	8015378 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 801536e:	6938      	ldr	r0, [r7, #16]
 8015370:	f7ff fa56 	bl	8014820 <tcp_abort>
 8015374:	e000      	b.n	8015378 <tcp_kill_prio+0x8c>
    return;
 8015376:	bf00      	nop
  }
}
 8015378:	3718      	adds	r7, #24
 801537a:	46bd      	mov	sp, r7
 801537c:	bd80      	pop	{r7, pc}
 801537e:	bf00      	nop
 8015380:	200240ac 	.word	0x200240ac
 8015384:	200240a0 	.word	0x200240a0

08015388 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8015388:	b580      	push	{r7, lr}
 801538a:	b086      	sub	sp, #24
 801538c:	af00      	add	r7, sp, #0
 801538e:	4603      	mov	r3, r0
 8015390:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8015392:	79fb      	ldrb	r3, [r7, #7]
 8015394:	2b08      	cmp	r3, #8
 8015396:	d009      	beq.n	80153ac <tcp_kill_state+0x24>
 8015398:	79fb      	ldrb	r3, [r7, #7]
 801539a:	2b09      	cmp	r3, #9
 801539c:	d006      	beq.n	80153ac <tcp_kill_state+0x24>
 801539e:	4b1a      	ldr	r3, [pc, #104]	; (8015408 <tcp_kill_state+0x80>)
 80153a0:	f240 62dd 	movw	r2, #1757	; 0x6dd
 80153a4:	4919      	ldr	r1, [pc, #100]	; (801540c <tcp_kill_state+0x84>)
 80153a6:	481a      	ldr	r0, [pc, #104]	; (8015410 <tcp_kill_state+0x88>)
 80153a8:	f008 fcca 	bl	801dd40 <iprintf>

  inactivity = 0;
 80153ac:	2300      	movs	r3, #0
 80153ae:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 80153b0:	2300      	movs	r3, #0
 80153b2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80153b4:	4b17      	ldr	r3, [pc, #92]	; (8015414 <tcp_kill_state+0x8c>)
 80153b6:	681b      	ldr	r3, [r3, #0]
 80153b8:	617b      	str	r3, [r7, #20]
 80153ba:	e017      	b.n	80153ec <tcp_kill_state+0x64>
    if (pcb->state == state) {
 80153bc:	697b      	ldr	r3, [r7, #20]
 80153be:	7d1b      	ldrb	r3, [r3, #20]
 80153c0:	79fa      	ldrb	r2, [r7, #7]
 80153c2:	429a      	cmp	r2, r3
 80153c4:	d10f      	bne.n	80153e6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 80153c6:	4b14      	ldr	r3, [pc, #80]	; (8015418 <tcp_kill_state+0x90>)
 80153c8:	681a      	ldr	r2, [r3, #0]
 80153ca:	697b      	ldr	r3, [r7, #20]
 80153cc:	6a1b      	ldr	r3, [r3, #32]
 80153ce:	1ad3      	subs	r3, r2, r3
 80153d0:	68fa      	ldr	r2, [r7, #12]
 80153d2:	429a      	cmp	r2, r3
 80153d4:	d807      	bhi.n	80153e6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 80153d6:	4b10      	ldr	r3, [pc, #64]	; (8015418 <tcp_kill_state+0x90>)
 80153d8:	681a      	ldr	r2, [r3, #0]
 80153da:	697b      	ldr	r3, [r7, #20]
 80153dc:	6a1b      	ldr	r3, [r3, #32]
 80153de:	1ad3      	subs	r3, r2, r3
 80153e0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 80153e2:	697b      	ldr	r3, [r7, #20]
 80153e4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80153e6:	697b      	ldr	r3, [r7, #20]
 80153e8:	68db      	ldr	r3, [r3, #12]
 80153ea:	617b      	str	r3, [r7, #20]
 80153ec:	697b      	ldr	r3, [r7, #20]
 80153ee:	2b00      	cmp	r3, #0
 80153f0:	d1e4      	bne.n	80153bc <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 80153f2:	693b      	ldr	r3, [r7, #16]
 80153f4:	2b00      	cmp	r3, #0
 80153f6:	d003      	beq.n	8015400 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 80153f8:	2100      	movs	r1, #0
 80153fa:	6938      	ldr	r0, [r7, #16]
 80153fc:	f7ff f952 	bl	80146a4 <tcp_abandon>
  }
}
 8015400:	bf00      	nop
 8015402:	3718      	adds	r7, #24
 8015404:	46bd      	mov	sp, r7
 8015406:	bd80      	pop	{r7, pc}
 8015408:	0801f894 	.word	0x0801f894
 801540c:	0801fe20 	.word	0x0801fe20
 8015410:	0801f8d8 	.word	0x0801f8d8
 8015414:	200240ac 	.word	0x200240ac
 8015418:	200240a0 	.word	0x200240a0

0801541c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 801541c:	b580      	push	{r7, lr}
 801541e:	b084      	sub	sp, #16
 8015420:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8015422:	2300      	movs	r3, #0
 8015424:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8015426:	2300      	movs	r3, #0
 8015428:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 801542a:	4b12      	ldr	r3, [pc, #72]	; (8015474 <tcp_kill_timewait+0x58>)
 801542c:	681b      	ldr	r3, [r3, #0]
 801542e:	60fb      	str	r3, [r7, #12]
 8015430:	e012      	b.n	8015458 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8015432:	4b11      	ldr	r3, [pc, #68]	; (8015478 <tcp_kill_timewait+0x5c>)
 8015434:	681a      	ldr	r2, [r3, #0]
 8015436:	68fb      	ldr	r3, [r7, #12]
 8015438:	6a1b      	ldr	r3, [r3, #32]
 801543a:	1ad3      	subs	r3, r2, r3
 801543c:	687a      	ldr	r2, [r7, #4]
 801543e:	429a      	cmp	r2, r3
 8015440:	d807      	bhi.n	8015452 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8015442:	4b0d      	ldr	r3, [pc, #52]	; (8015478 <tcp_kill_timewait+0x5c>)
 8015444:	681a      	ldr	r2, [r3, #0]
 8015446:	68fb      	ldr	r3, [r7, #12]
 8015448:	6a1b      	ldr	r3, [r3, #32]
 801544a:	1ad3      	subs	r3, r2, r3
 801544c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 801544e:	68fb      	ldr	r3, [r7, #12]
 8015450:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015452:	68fb      	ldr	r3, [r7, #12]
 8015454:	68db      	ldr	r3, [r3, #12]
 8015456:	60fb      	str	r3, [r7, #12]
 8015458:	68fb      	ldr	r3, [r7, #12]
 801545a:	2b00      	cmp	r3, #0
 801545c:	d1e9      	bne.n	8015432 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 801545e:	68bb      	ldr	r3, [r7, #8]
 8015460:	2b00      	cmp	r3, #0
 8015462:	d002      	beq.n	801546a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8015464:	68b8      	ldr	r0, [r7, #8]
 8015466:	f7ff f9db 	bl	8014820 <tcp_abort>
  }
}
 801546a:	bf00      	nop
 801546c:	3710      	adds	r7, #16
 801546e:	46bd      	mov	sp, r7
 8015470:	bd80      	pop	{r7, pc}
 8015472:	bf00      	nop
 8015474:	200240b0 	.word	0x200240b0
 8015478:	200240a0 	.word	0x200240a0

0801547c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 801547c:	b580      	push	{r7, lr}
 801547e:	b082      	sub	sp, #8
 8015480:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8015482:	4b10      	ldr	r3, [pc, #64]	; (80154c4 <tcp_handle_closepend+0x48>)
 8015484:	681b      	ldr	r3, [r3, #0]
 8015486:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8015488:	e014      	b.n	80154b4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 801548a:	687b      	ldr	r3, [r7, #4]
 801548c:	68db      	ldr	r3, [r3, #12]
 801548e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8015490:	687b      	ldr	r3, [r7, #4]
 8015492:	8b5b      	ldrh	r3, [r3, #26]
 8015494:	f003 0308 	and.w	r3, r3, #8
 8015498:	2b00      	cmp	r3, #0
 801549a:	d009      	beq.n	80154b0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 801549c:	687b      	ldr	r3, [r7, #4]
 801549e:	8b5b      	ldrh	r3, [r3, #26]
 80154a0:	f023 0308 	bic.w	r3, r3, #8
 80154a4:	b29a      	uxth	r2, r3
 80154a6:	687b      	ldr	r3, [r7, #4]
 80154a8:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 80154aa:	6878      	ldr	r0, [r7, #4]
 80154ac:	f7ff f864 	bl	8014578 <tcp_close_shutdown_fin>
    }
    pcb = next;
 80154b0:	683b      	ldr	r3, [r7, #0]
 80154b2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80154b4:	687b      	ldr	r3, [r7, #4]
 80154b6:	2b00      	cmp	r3, #0
 80154b8:	d1e7      	bne.n	801548a <tcp_handle_closepend+0xe>
  }
}
 80154ba:	bf00      	nop
 80154bc:	bf00      	nop
 80154be:	3708      	adds	r7, #8
 80154c0:	46bd      	mov	sp, r7
 80154c2:	bd80      	pop	{r7, pc}
 80154c4:	200240ac 	.word	0x200240ac

080154c8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 80154c8:	b580      	push	{r7, lr}
 80154ca:	b084      	sub	sp, #16
 80154cc:	af00      	add	r7, sp, #0
 80154ce:	4603      	mov	r3, r0
 80154d0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80154d2:	2001      	movs	r0, #1
 80154d4:	f7fd fce6 	bl	8012ea4 <memp_malloc>
 80154d8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 80154da:	68fb      	ldr	r3, [r7, #12]
 80154dc:	2b00      	cmp	r3, #0
 80154de:	d126      	bne.n	801552e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 80154e0:	f7ff ffcc 	bl	801547c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 80154e4:	f7ff ff9a 	bl	801541c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80154e8:	2001      	movs	r0, #1
 80154ea:	f7fd fcdb 	bl	8012ea4 <memp_malloc>
 80154ee:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 80154f0:	68fb      	ldr	r3, [r7, #12]
 80154f2:	2b00      	cmp	r3, #0
 80154f4:	d11b      	bne.n	801552e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 80154f6:	2009      	movs	r0, #9
 80154f8:	f7ff ff46 	bl	8015388 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 80154fc:	2001      	movs	r0, #1
 80154fe:	f7fd fcd1 	bl	8012ea4 <memp_malloc>
 8015502:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8015504:	68fb      	ldr	r3, [r7, #12]
 8015506:	2b00      	cmp	r3, #0
 8015508:	d111      	bne.n	801552e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 801550a:	2008      	movs	r0, #8
 801550c:	f7ff ff3c 	bl	8015388 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015510:	2001      	movs	r0, #1
 8015512:	f7fd fcc7 	bl	8012ea4 <memp_malloc>
 8015516:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	2b00      	cmp	r3, #0
 801551c:	d107      	bne.n	801552e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 801551e:	79fb      	ldrb	r3, [r7, #7]
 8015520:	4618      	mov	r0, r3
 8015522:	f7ff fee3 	bl	80152ec <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8015526:	2001      	movs	r0, #1
 8015528:	f7fd fcbc 	bl	8012ea4 <memp_malloc>
 801552c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 801552e:	68fb      	ldr	r3, [r7, #12]
 8015530:	2b00      	cmp	r3, #0
 8015532:	d03f      	beq.n	80155b4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8015534:	229c      	movs	r2, #156	; 0x9c
 8015536:	2100      	movs	r1, #0
 8015538:	68f8      	ldr	r0, [r7, #12]
 801553a:	f008 fc66 	bl	801de0a <memset>
    pcb->prio = prio;
 801553e:	68fb      	ldr	r3, [r7, #12]
 8015540:	79fa      	ldrb	r2, [r7, #7]
 8015542:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8015544:	68fb      	ldr	r3, [r7, #12]
 8015546:	f44f 6286 	mov.w	r2, #1072	; 0x430
 801554a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 801554e:	68fb      	ldr	r3, [r7, #12]
 8015550:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8015554:	855a      	strh	r2, [r3, #42]	; 0x2a
 8015556:	68fb      	ldr	r3, [r7, #12]
 8015558:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801555a:	68fb      	ldr	r3, [r7, #12]
 801555c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 801555e:	68fb      	ldr	r3, [r7, #12]
 8015560:	22ff      	movs	r2, #255	; 0xff
 8015562:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8015564:	68fb      	ldr	r3, [r7, #12]
 8015566:	f44f 7206 	mov.w	r2, #536	; 0x218
 801556a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 801556c:	68fb      	ldr	r3, [r7, #12]
 801556e:	2206      	movs	r2, #6
 8015570:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8015574:	68fb      	ldr	r3, [r7, #12]
 8015576:	2206      	movs	r2, #6
 8015578:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 801557a:	68fb      	ldr	r3, [r7, #12]
 801557c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015580:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8015582:	68fb      	ldr	r3, [r7, #12]
 8015584:	2201      	movs	r2, #1
 8015586:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 801558a:	4b0d      	ldr	r3, [pc, #52]	; (80155c0 <tcp_alloc+0xf8>)
 801558c:	681a      	ldr	r2, [r3, #0]
 801558e:	68fb      	ldr	r3, [r7, #12]
 8015590:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8015592:	4b0c      	ldr	r3, [pc, #48]	; (80155c4 <tcp_alloc+0xfc>)
 8015594:	781a      	ldrb	r2, [r3, #0]
 8015596:	68fb      	ldr	r3, [r7, #12]
 8015598:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 801559a:	68fb      	ldr	r3, [r7, #12]
 801559c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 80155a0:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 80155a4:	68fb      	ldr	r3, [r7, #12]
 80155a6:	4a08      	ldr	r2, [pc, #32]	; (80155c8 <tcp_alloc+0x100>)
 80155a8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 80155ac:	68fb      	ldr	r3, [r7, #12]
 80155ae:	4a07      	ldr	r2, [pc, #28]	; (80155cc <tcp_alloc+0x104>)
 80155b0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 80155b4:	68fb      	ldr	r3, [r7, #12]
}
 80155b6:	4618      	mov	r0, r3
 80155b8:	3710      	adds	r7, #16
 80155ba:	46bd      	mov	sp, r7
 80155bc:	bd80      	pop	{r7, pc}
 80155be:	bf00      	nop
 80155c0:	200240a0 	.word	0x200240a0
 80155c4:	200240b6 	.word	0x200240b6
 80155c8:	08015281 	.word	0x08015281
 80155cc:	006ddd00 	.word	0x006ddd00

080155d0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 80155d0:	b580      	push	{r7, lr}
 80155d2:	b082      	sub	sp, #8
 80155d4:	af00      	add	r7, sp, #0
 80155d6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 80155d8:	687b      	ldr	r3, [r7, #4]
 80155da:	2b00      	cmp	r3, #0
 80155dc:	d107      	bne.n	80155ee <tcp_pcb_purge+0x1e>
 80155de:	4b21      	ldr	r3, [pc, #132]	; (8015664 <tcp_pcb_purge+0x94>)
 80155e0:	f640 0251 	movw	r2, #2129	; 0x851
 80155e4:	4920      	ldr	r1, [pc, #128]	; (8015668 <tcp_pcb_purge+0x98>)
 80155e6:	4821      	ldr	r0, [pc, #132]	; (801566c <tcp_pcb_purge+0x9c>)
 80155e8:	f008 fbaa 	bl	801dd40 <iprintf>
 80155ec:	e037      	b.n	801565e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 80155ee:	687b      	ldr	r3, [r7, #4]
 80155f0:	7d1b      	ldrb	r3, [r3, #20]
 80155f2:	2b00      	cmp	r3, #0
 80155f4:	d033      	beq.n	801565e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 80155f6:	687b      	ldr	r3, [r7, #4]
 80155f8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 80155fa:	2b0a      	cmp	r3, #10
 80155fc:	d02f      	beq.n	801565e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 80155fe:	687b      	ldr	r3, [r7, #4]
 8015600:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8015602:	2b01      	cmp	r3, #1
 8015604:	d02b      	beq.n	801565e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8015606:	687b      	ldr	r3, [r7, #4]
 8015608:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 801560a:	2b00      	cmp	r3, #0
 801560c:	d007      	beq.n	801561e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015612:	4618      	mov	r0, r3
 8015614:	f7fe fb60 	bl	8013cd8 <pbuf_free>
      pcb->refused_data = NULL;
 8015618:	687b      	ldr	r3, [r7, #4]
 801561a:	2200      	movs	r2, #0
 801561c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 801561e:	687b      	ldr	r3, [r7, #4]
 8015620:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015622:	2b00      	cmp	r3, #0
 8015624:	d002      	beq.n	801562c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8015626:	6878      	ldr	r0, [r7, #4]
 8015628:	f000 f986 	bl	8015938 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015632:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8015634:	687b      	ldr	r3, [r7, #4]
 8015636:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015638:	4618      	mov	r0, r3
 801563a:	f7ff fdc7 	bl	80151cc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 801563e:	687b      	ldr	r3, [r7, #4]
 8015640:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015642:	4618      	mov	r0, r3
 8015644:	f7ff fdc2 	bl	80151cc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8015648:	687b      	ldr	r3, [r7, #4]
 801564a:	2200      	movs	r2, #0
 801564c:	66da      	str	r2, [r3, #108]	; 0x6c
 801564e:	687b      	ldr	r3, [r7, #4]
 8015650:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8015652:	687b      	ldr	r3, [r7, #4]
 8015654:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	2200      	movs	r2, #0
 801565a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 801565e:	3708      	adds	r7, #8
 8015660:	46bd      	mov	sp, r7
 8015662:	bd80      	pop	{r7, pc}
 8015664:	0801f894 	.word	0x0801f894
 8015668:	0801fee0 	.word	0x0801fee0
 801566c:	0801f8d8 	.word	0x0801f8d8

08015670 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8015670:	b580      	push	{r7, lr}
 8015672:	b084      	sub	sp, #16
 8015674:	af00      	add	r7, sp, #0
 8015676:	6078      	str	r0, [r7, #4]
 8015678:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 801567a:	683b      	ldr	r3, [r7, #0]
 801567c:	2b00      	cmp	r3, #0
 801567e:	d106      	bne.n	801568e <tcp_pcb_remove+0x1e>
 8015680:	4b3e      	ldr	r3, [pc, #248]	; (801577c <tcp_pcb_remove+0x10c>)
 8015682:	f640 0283 	movw	r2, #2179	; 0x883
 8015686:	493e      	ldr	r1, [pc, #248]	; (8015780 <tcp_pcb_remove+0x110>)
 8015688:	483e      	ldr	r0, [pc, #248]	; (8015784 <tcp_pcb_remove+0x114>)
 801568a:	f008 fb59 	bl	801dd40 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 801568e:	687b      	ldr	r3, [r7, #4]
 8015690:	2b00      	cmp	r3, #0
 8015692:	d106      	bne.n	80156a2 <tcp_pcb_remove+0x32>
 8015694:	4b39      	ldr	r3, [pc, #228]	; (801577c <tcp_pcb_remove+0x10c>)
 8015696:	f640 0284 	movw	r2, #2180	; 0x884
 801569a:	493b      	ldr	r1, [pc, #236]	; (8015788 <tcp_pcb_remove+0x118>)
 801569c:	4839      	ldr	r0, [pc, #228]	; (8015784 <tcp_pcb_remove+0x114>)
 801569e:	f008 fb4f 	bl	801dd40 <iprintf>

  TCP_RMV(pcblist, pcb);
 80156a2:	687b      	ldr	r3, [r7, #4]
 80156a4:	681b      	ldr	r3, [r3, #0]
 80156a6:	683a      	ldr	r2, [r7, #0]
 80156a8:	429a      	cmp	r2, r3
 80156aa:	d105      	bne.n	80156b8 <tcp_pcb_remove+0x48>
 80156ac:	687b      	ldr	r3, [r7, #4]
 80156ae:	681b      	ldr	r3, [r3, #0]
 80156b0:	68da      	ldr	r2, [r3, #12]
 80156b2:	687b      	ldr	r3, [r7, #4]
 80156b4:	601a      	str	r2, [r3, #0]
 80156b6:	e013      	b.n	80156e0 <tcp_pcb_remove+0x70>
 80156b8:	687b      	ldr	r3, [r7, #4]
 80156ba:	681b      	ldr	r3, [r3, #0]
 80156bc:	60fb      	str	r3, [r7, #12]
 80156be:	e00c      	b.n	80156da <tcp_pcb_remove+0x6a>
 80156c0:	68fb      	ldr	r3, [r7, #12]
 80156c2:	68db      	ldr	r3, [r3, #12]
 80156c4:	683a      	ldr	r2, [r7, #0]
 80156c6:	429a      	cmp	r2, r3
 80156c8:	d104      	bne.n	80156d4 <tcp_pcb_remove+0x64>
 80156ca:	683b      	ldr	r3, [r7, #0]
 80156cc:	68da      	ldr	r2, [r3, #12]
 80156ce:	68fb      	ldr	r3, [r7, #12]
 80156d0:	60da      	str	r2, [r3, #12]
 80156d2:	e005      	b.n	80156e0 <tcp_pcb_remove+0x70>
 80156d4:	68fb      	ldr	r3, [r7, #12]
 80156d6:	68db      	ldr	r3, [r3, #12]
 80156d8:	60fb      	str	r3, [r7, #12]
 80156da:	68fb      	ldr	r3, [r7, #12]
 80156dc:	2b00      	cmp	r3, #0
 80156de:	d1ef      	bne.n	80156c0 <tcp_pcb_remove+0x50>
 80156e0:	683b      	ldr	r3, [r7, #0]
 80156e2:	2200      	movs	r2, #0
 80156e4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 80156e6:	6838      	ldr	r0, [r7, #0]
 80156e8:	f7ff ff72 	bl	80155d0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 80156ec:	683b      	ldr	r3, [r7, #0]
 80156ee:	7d1b      	ldrb	r3, [r3, #20]
 80156f0:	2b0a      	cmp	r3, #10
 80156f2:	d013      	beq.n	801571c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 80156f4:	683b      	ldr	r3, [r7, #0]
 80156f6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 80156f8:	2b01      	cmp	r3, #1
 80156fa:	d00f      	beq.n	801571c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 80156fc:	683b      	ldr	r3, [r7, #0]
 80156fe:	8b5b      	ldrh	r3, [r3, #26]
 8015700:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8015704:	2b00      	cmp	r3, #0
 8015706:	d009      	beq.n	801571c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8015708:	683b      	ldr	r3, [r7, #0]
 801570a:	8b5b      	ldrh	r3, [r3, #26]
 801570c:	f043 0302 	orr.w	r3, r3, #2
 8015710:	b29a      	uxth	r2, r3
 8015712:	683b      	ldr	r3, [r7, #0]
 8015714:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015716:	6838      	ldr	r0, [r7, #0]
 8015718:	f002 ff6e 	bl	80185f8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 801571c:	683b      	ldr	r3, [r7, #0]
 801571e:	7d1b      	ldrb	r3, [r3, #20]
 8015720:	2b01      	cmp	r3, #1
 8015722:	d020      	beq.n	8015766 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8015724:	683b      	ldr	r3, [r7, #0]
 8015726:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015728:	2b00      	cmp	r3, #0
 801572a:	d006      	beq.n	801573a <tcp_pcb_remove+0xca>
 801572c:	4b13      	ldr	r3, [pc, #76]	; (801577c <tcp_pcb_remove+0x10c>)
 801572e:	f640 0293 	movw	r2, #2195	; 0x893
 8015732:	4916      	ldr	r1, [pc, #88]	; (801578c <tcp_pcb_remove+0x11c>)
 8015734:	4813      	ldr	r0, [pc, #76]	; (8015784 <tcp_pcb_remove+0x114>)
 8015736:	f008 fb03 	bl	801dd40 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 801573a:	683b      	ldr	r3, [r7, #0]
 801573c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801573e:	2b00      	cmp	r3, #0
 8015740:	d006      	beq.n	8015750 <tcp_pcb_remove+0xe0>
 8015742:	4b0e      	ldr	r3, [pc, #56]	; (801577c <tcp_pcb_remove+0x10c>)
 8015744:	f640 0294 	movw	r2, #2196	; 0x894
 8015748:	4911      	ldr	r1, [pc, #68]	; (8015790 <tcp_pcb_remove+0x120>)
 801574a:	480e      	ldr	r0, [pc, #56]	; (8015784 <tcp_pcb_remove+0x114>)
 801574c:	f008 faf8 	bl	801dd40 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8015750:	683b      	ldr	r3, [r7, #0]
 8015752:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015754:	2b00      	cmp	r3, #0
 8015756:	d006      	beq.n	8015766 <tcp_pcb_remove+0xf6>
 8015758:	4b08      	ldr	r3, [pc, #32]	; (801577c <tcp_pcb_remove+0x10c>)
 801575a:	f640 0296 	movw	r2, #2198	; 0x896
 801575e:	490d      	ldr	r1, [pc, #52]	; (8015794 <tcp_pcb_remove+0x124>)
 8015760:	4808      	ldr	r0, [pc, #32]	; (8015784 <tcp_pcb_remove+0x114>)
 8015762:	f008 faed 	bl	801dd40 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8015766:	683b      	ldr	r3, [r7, #0]
 8015768:	2200      	movs	r2, #0
 801576a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 801576c:	683b      	ldr	r3, [r7, #0]
 801576e:	2200      	movs	r2, #0
 8015770:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8015772:	bf00      	nop
 8015774:	3710      	adds	r7, #16
 8015776:	46bd      	mov	sp, r7
 8015778:	bd80      	pop	{r7, pc}
 801577a:	bf00      	nop
 801577c:	0801f894 	.word	0x0801f894
 8015780:	0801fefc 	.word	0x0801fefc
 8015784:	0801f8d8 	.word	0x0801f8d8
 8015788:	0801ff18 	.word	0x0801ff18
 801578c:	0801ff38 	.word	0x0801ff38
 8015790:	0801ff50 	.word	0x0801ff50
 8015794:	0801ff6c 	.word	0x0801ff6c

08015798 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8015798:	b580      	push	{r7, lr}
 801579a:	b082      	sub	sp, #8
 801579c:	af00      	add	r7, sp, #0
 801579e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 80157a0:	687b      	ldr	r3, [r7, #4]
 80157a2:	2b00      	cmp	r3, #0
 80157a4:	d106      	bne.n	80157b4 <tcp_next_iss+0x1c>
 80157a6:	4b0a      	ldr	r3, [pc, #40]	; (80157d0 <tcp_next_iss+0x38>)
 80157a8:	f640 02af 	movw	r2, #2223	; 0x8af
 80157ac:	4909      	ldr	r1, [pc, #36]	; (80157d4 <tcp_next_iss+0x3c>)
 80157ae:	480a      	ldr	r0, [pc, #40]	; (80157d8 <tcp_next_iss+0x40>)
 80157b0:	f008 fac6 	bl	801dd40 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 80157b4:	4b09      	ldr	r3, [pc, #36]	; (80157dc <tcp_next_iss+0x44>)
 80157b6:	681a      	ldr	r2, [r3, #0]
 80157b8:	4b09      	ldr	r3, [pc, #36]	; (80157e0 <tcp_next_iss+0x48>)
 80157ba:	681b      	ldr	r3, [r3, #0]
 80157bc:	4413      	add	r3, r2
 80157be:	4a07      	ldr	r2, [pc, #28]	; (80157dc <tcp_next_iss+0x44>)
 80157c0:	6013      	str	r3, [r2, #0]
  return iss;
 80157c2:	4b06      	ldr	r3, [pc, #24]	; (80157dc <tcp_next_iss+0x44>)
 80157c4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 80157c6:	4618      	mov	r0, r3
 80157c8:	3708      	adds	r7, #8
 80157ca:	46bd      	mov	sp, r7
 80157cc:	bd80      	pop	{r7, pc}
 80157ce:	bf00      	nop
 80157d0:	0801f894 	.word	0x0801f894
 80157d4:	0801ff84 	.word	0x0801ff84
 80157d8:	0801f8d8 	.word	0x0801f8d8
 80157dc:	20000028 	.word	0x20000028
 80157e0:	200240a0 	.word	0x200240a0

080157e4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 80157e4:	b580      	push	{r7, lr}
 80157e6:	b086      	sub	sp, #24
 80157e8:	af00      	add	r7, sp, #0
 80157ea:	4603      	mov	r3, r0
 80157ec:	60b9      	str	r1, [r7, #8]
 80157ee:	607a      	str	r2, [r7, #4]
 80157f0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 80157f2:	687b      	ldr	r3, [r7, #4]
 80157f4:	2b00      	cmp	r3, #0
 80157f6:	d106      	bne.n	8015806 <tcp_eff_send_mss_netif+0x22>
 80157f8:	4b14      	ldr	r3, [pc, #80]	; (801584c <tcp_eff_send_mss_netif+0x68>)
 80157fa:	f640 02c5 	movw	r2, #2245	; 0x8c5
 80157fe:	4914      	ldr	r1, [pc, #80]	; (8015850 <tcp_eff_send_mss_netif+0x6c>)
 8015800:	4814      	ldr	r0, [pc, #80]	; (8015854 <tcp_eff_send_mss_netif+0x70>)
 8015802:	f008 fa9d 	bl	801dd40 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8015806:	68bb      	ldr	r3, [r7, #8]
 8015808:	2b00      	cmp	r3, #0
 801580a:	d101      	bne.n	8015810 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 801580c:	89fb      	ldrh	r3, [r7, #14]
 801580e:	e019      	b.n	8015844 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8015810:	68bb      	ldr	r3, [r7, #8]
 8015812:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015814:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8015816:	8afb      	ldrh	r3, [r7, #22]
 8015818:	2b00      	cmp	r3, #0
 801581a:	d012      	beq.n	8015842 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801581c:	2328      	movs	r3, #40	; 0x28
 801581e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8015820:	8afa      	ldrh	r2, [r7, #22]
 8015822:	8abb      	ldrh	r3, [r7, #20]
 8015824:	429a      	cmp	r2, r3
 8015826:	d904      	bls.n	8015832 <tcp_eff_send_mss_netif+0x4e>
 8015828:	8afa      	ldrh	r2, [r7, #22]
 801582a:	8abb      	ldrh	r3, [r7, #20]
 801582c:	1ad3      	subs	r3, r2, r3
 801582e:	b29b      	uxth	r3, r3
 8015830:	e000      	b.n	8015834 <tcp_eff_send_mss_netif+0x50>
 8015832:	2300      	movs	r3, #0
 8015834:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8015836:	8a7a      	ldrh	r2, [r7, #18]
 8015838:	89fb      	ldrh	r3, [r7, #14]
 801583a:	4293      	cmp	r3, r2
 801583c:	bf28      	it	cs
 801583e:	4613      	movcs	r3, r2
 8015840:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8015842:	89fb      	ldrh	r3, [r7, #14]
}
 8015844:	4618      	mov	r0, r3
 8015846:	3718      	adds	r7, #24
 8015848:	46bd      	mov	sp, r7
 801584a:	bd80      	pop	{r7, pc}
 801584c:	0801f894 	.word	0x0801f894
 8015850:	0801ffa0 	.word	0x0801ffa0
 8015854:	0801f8d8 	.word	0x0801f8d8

08015858 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8015858:	b580      	push	{r7, lr}
 801585a:	b084      	sub	sp, #16
 801585c:	af00      	add	r7, sp, #0
 801585e:	6078      	str	r0, [r7, #4]
 8015860:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8015862:	683b      	ldr	r3, [r7, #0]
 8015864:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8015866:	687b      	ldr	r3, [r7, #4]
 8015868:	2b00      	cmp	r3, #0
 801586a:	d119      	bne.n	80158a0 <tcp_netif_ip_addr_changed_pcblist+0x48>
 801586c:	4b10      	ldr	r3, [pc, #64]	; (80158b0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801586e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8015872:	4910      	ldr	r1, [pc, #64]	; (80158b4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8015874:	4810      	ldr	r0, [pc, #64]	; (80158b8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8015876:	f008 fa63 	bl	801dd40 <iprintf>

  while (pcb != NULL) {
 801587a:	e011      	b.n	80158a0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801587c:	68fb      	ldr	r3, [r7, #12]
 801587e:	681a      	ldr	r2, [r3, #0]
 8015880:	687b      	ldr	r3, [r7, #4]
 8015882:	681b      	ldr	r3, [r3, #0]
 8015884:	429a      	cmp	r2, r3
 8015886:	d108      	bne.n	801589a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8015888:	68fb      	ldr	r3, [r7, #12]
 801588a:	68db      	ldr	r3, [r3, #12]
 801588c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801588e:	68f8      	ldr	r0, [r7, #12]
 8015890:	f7fe ffc6 	bl	8014820 <tcp_abort>
      pcb = next;
 8015894:	68bb      	ldr	r3, [r7, #8]
 8015896:	60fb      	str	r3, [r7, #12]
 8015898:	e002      	b.n	80158a0 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801589a:	68fb      	ldr	r3, [r7, #12]
 801589c:	68db      	ldr	r3, [r3, #12]
 801589e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 80158a0:	68fb      	ldr	r3, [r7, #12]
 80158a2:	2b00      	cmp	r3, #0
 80158a4:	d1ea      	bne.n	801587c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 80158a6:	bf00      	nop
 80158a8:	bf00      	nop
 80158aa:	3710      	adds	r7, #16
 80158ac:	46bd      	mov	sp, r7
 80158ae:	bd80      	pop	{r7, pc}
 80158b0:	0801f894 	.word	0x0801f894
 80158b4:	0801ffc8 	.word	0x0801ffc8
 80158b8:	0801f8d8 	.word	0x0801f8d8

080158bc <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80158bc:	b580      	push	{r7, lr}
 80158be:	b084      	sub	sp, #16
 80158c0:	af00      	add	r7, sp, #0
 80158c2:	6078      	str	r0, [r7, #4]
 80158c4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80158c6:	687b      	ldr	r3, [r7, #4]
 80158c8:	2b00      	cmp	r3, #0
 80158ca:	d02a      	beq.n	8015922 <tcp_netif_ip_addr_changed+0x66>
 80158cc:	687b      	ldr	r3, [r7, #4]
 80158ce:	681b      	ldr	r3, [r3, #0]
 80158d0:	2b00      	cmp	r3, #0
 80158d2:	d026      	beq.n	8015922 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80158d4:	4b15      	ldr	r3, [pc, #84]	; (801592c <tcp_netif_ip_addr_changed+0x70>)
 80158d6:	681b      	ldr	r3, [r3, #0]
 80158d8:	4619      	mov	r1, r3
 80158da:	6878      	ldr	r0, [r7, #4]
 80158dc:	f7ff ffbc 	bl	8015858 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80158e0:	4b13      	ldr	r3, [pc, #76]	; (8015930 <tcp_netif_ip_addr_changed+0x74>)
 80158e2:	681b      	ldr	r3, [r3, #0]
 80158e4:	4619      	mov	r1, r3
 80158e6:	6878      	ldr	r0, [r7, #4]
 80158e8:	f7ff ffb6 	bl	8015858 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80158ec:	683b      	ldr	r3, [r7, #0]
 80158ee:	2b00      	cmp	r3, #0
 80158f0:	d017      	beq.n	8015922 <tcp_netif_ip_addr_changed+0x66>
 80158f2:	683b      	ldr	r3, [r7, #0]
 80158f4:	681b      	ldr	r3, [r3, #0]
 80158f6:	2b00      	cmp	r3, #0
 80158f8:	d013      	beq.n	8015922 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80158fa:	4b0e      	ldr	r3, [pc, #56]	; (8015934 <tcp_netif_ip_addr_changed+0x78>)
 80158fc:	681b      	ldr	r3, [r3, #0]
 80158fe:	60fb      	str	r3, [r7, #12]
 8015900:	e00c      	b.n	801591c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 8015902:	68fb      	ldr	r3, [r7, #12]
 8015904:	681a      	ldr	r2, [r3, #0]
 8015906:	687b      	ldr	r3, [r7, #4]
 8015908:	681b      	ldr	r3, [r3, #0]
 801590a:	429a      	cmp	r2, r3
 801590c:	d103      	bne.n	8015916 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 801590e:	683b      	ldr	r3, [r7, #0]
 8015910:	681a      	ldr	r2, [r3, #0]
 8015912:	68fb      	ldr	r3, [r7, #12]
 8015914:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8015916:	68fb      	ldr	r3, [r7, #12]
 8015918:	68db      	ldr	r3, [r3, #12]
 801591a:	60fb      	str	r3, [r7, #12]
 801591c:	68fb      	ldr	r3, [r7, #12]
 801591e:	2b00      	cmp	r3, #0
 8015920:	d1ef      	bne.n	8015902 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8015922:	bf00      	nop
 8015924:	3710      	adds	r7, #16
 8015926:	46bd      	mov	sp, r7
 8015928:	bd80      	pop	{r7, pc}
 801592a:	bf00      	nop
 801592c:	200240ac 	.word	0x200240ac
 8015930:	200240a4 	.word	0x200240a4
 8015934:	200240a8 	.word	0x200240a8

08015938 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8015938:	b580      	push	{r7, lr}
 801593a:	b082      	sub	sp, #8
 801593c:	af00      	add	r7, sp, #0
 801593e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8015940:	687b      	ldr	r3, [r7, #4]
 8015942:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015944:	2b00      	cmp	r3, #0
 8015946:	d007      	beq.n	8015958 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8015948:	687b      	ldr	r3, [r7, #4]
 801594a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801594c:	4618      	mov	r0, r3
 801594e:	f7ff fc3d 	bl	80151cc <tcp_segs_free>
    pcb->ooseq = NULL;
 8015952:	687b      	ldr	r3, [r7, #4]
 8015954:	2200      	movs	r2, #0
 8015956:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8015958:	bf00      	nop
 801595a:	3708      	adds	r7, #8
 801595c:	46bd      	mov	sp, r7
 801595e:	bd80      	pop	{r7, pc}

08015960 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8015960:	b590      	push	{r4, r7, lr}
 8015962:	b08d      	sub	sp, #52	; 0x34
 8015964:	af04      	add	r7, sp, #16
 8015966:	6078      	str	r0, [r7, #4]
 8015968:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801596a:	687b      	ldr	r3, [r7, #4]
 801596c:	2b00      	cmp	r3, #0
 801596e:	d105      	bne.n	801597c <tcp_input+0x1c>
 8015970:	4b9b      	ldr	r3, [pc, #620]	; (8015be0 <tcp_input+0x280>)
 8015972:	2283      	movs	r2, #131	; 0x83
 8015974:	499b      	ldr	r1, [pc, #620]	; (8015be4 <tcp_input+0x284>)
 8015976:	489c      	ldr	r0, [pc, #624]	; (8015be8 <tcp_input+0x288>)
 8015978:	f008 f9e2 	bl	801dd40 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801597c:	687b      	ldr	r3, [r7, #4]
 801597e:	685b      	ldr	r3, [r3, #4]
 8015980:	4a9a      	ldr	r2, [pc, #616]	; (8015bec <tcp_input+0x28c>)
 8015982:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8015984:	687b      	ldr	r3, [r7, #4]
 8015986:	895b      	ldrh	r3, [r3, #10]
 8015988:	2b13      	cmp	r3, #19
 801598a:	f240 83d1 	bls.w	8016130 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801598e:	4b98      	ldr	r3, [pc, #608]	; (8015bf0 <tcp_input+0x290>)
 8015990:	695b      	ldr	r3, [r3, #20]
 8015992:	4a97      	ldr	r2, [pc, #604]	; (8015bf0 <tcp_input+0x290>)
 8015994:	6812      	ldr	r2, [r2, #0]
 8015996:	4611      	mov	r1, r2
 8015998:	4618      	mov	r0, r3
 801599a:	f005 ff37 	bl	801b80c <ip4_addr_isbroadcast_u32>
 801599e:	4603      	mov	r3, r0
 80159a0:	2b00      	cmp	r3, #0
 80159a2:	f040 83c7 	bne.w	8016134 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 80159a6:	4b92      	ldr	r3, [pc, #584]	; (8015bf0 <tcp_input+0x290>)
 80159a8:	695b      	ldr	r3, [r3, #20]
 80159aa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 80159ae:	2be0      	cmp	r3, #224	; 0xe0
 80159b0:	f000 83c0 	beq.w	8016134 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80159b4:	4b8d      	ldr	r3, [pc, #564]	; (8015bec <tcp_input+0x28c>)
 80159b6:	681b      	ldr	r3, [r3, #0]
 80159b8:	899b      	ldrh	r3, [r3, #12]
 80159ba:	b29b      	uxth	r3, r3
 80159bc:	4618      	mov	r0, r3
 80159be:	f7fc fd89 	bl	80124d4 <lwip_htons>
 80159c2:	4603      	mov	r3, r0
 80159c4:	0b1b      	lsrs	r3, r3, #12
 80159c6:	b29b      	uxth	r3, r3
 80159c8:	b2db      	uxtb	r3, r3
 80159ca:	009b      	lsls	r3, r3, #2
 80159cc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80159ce:	7cbb      	ldrb	r3, [r7, #18]
 80159d0:	2b13      	cmp	r3, #19
 80159d2:	f240 83b1 	bls.w	8016138 <tcp_input+0x7d8>
 80159d6:	7cbb      	ldrb	r3, [r7, #18]
 80159d8:	b29a      	uxth	r2, r3
 80159da:	687b      	ldr	r3, [r7, #4]
 80159dc:	891b      	ldrh	r3, [r3, #8]
 80159de:	429a      	cmp	r2, r3
 80159e0:	f200 83aa 	bhi.w	8016138 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80159e4:	7cbb      	ldrb	r3, [r7, #18]
 80159e6:	b29b      	uxth	r3, r3
 80159e8:	3b14      	subs	r3, #20
 80159ea:	b29a      	uxth	r2, r3
 80159ec:	4b81      	ldr	r3, [pc, #516]	; (8015bf4 <tcp_input+0x294>)
 80159ee:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80159f0:	4b81      	ldr	r3, [pc, #516]	; (8015bf8 <tcp_input+0x298>)
 80159f2:	2200      	movs	r2, #0
 80159f4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80159f6:	687b      	ldr	r3, [r7, #4]
 80159f8:	895a      	ldrh	r2, [r3, #10]
 80159fa:	7cbb      	ldrb	r3, [r7, #18]
 80159fc:	b29b      	uxth	r3, r3
 80159fe:	429a      	cmp	r2, r3
 8015a00:	d309      	bcc.n	8015a16 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 8015a02:	4b7c      	ldr	r3, [pc, #496]	; (8015bf4 <tcp_input+0x294>)
 8015a04:	881a      	ldrh	r2, [r3, #0]
 8015a06:	4b7d      	ldr	r3, [pc, #500]	; (8015bfc <tcp_input+0x29c>)
 8015a08:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 8015a0a:	7cbb      	ldrb	r3, [r7, #18]
 8015a0c:	4619      	mov	r1, r3
 8015a0e:	6878      	ldr	r0, [r7, #4]
 8015a10:	f7fe f8dc 	bl	8013bcc <pbuf_remove_header>
 8015a14:	e04e      	b.n	8015ab4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8015a16:	687b      	ldr	r3, [r7, #4]
 8015a18:	681b      	ldr	r3, [r3, #0]
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d105      	bne.n	8015a2a <tcp_input+0xca>
 8015a1e:	4b70      	ldr	r3, [pc, #448]	; (8015be0 <tcp_input+0x280>)
 8015a20:	22c2      	movs	r2, #194	; 0xc2
 8015a22:	4977      	ldr	r1, [pc, #476]	; (8015c00 <tcp_input+0x2a0>)
 8015a24:	4870      	ldr	r0, [pc, #448]	; (8015be8 <tcp_input+0x288>)
 8015a26:	f008 f98b 	bl	801dd40 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 8015a2a:	2114      	movs	r1, #20
 8015a2c:	6878      	ldr	r0, [r7, #4]
 8015a2e:	f7fe f8cd 	bl	8013bcc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8015a32:	687b      	ldr	r3, [r7, #4]
 8015a34:	895a      	ldrh	r2, [r3, #10]
 8015a36:	4b71      	ldr	r3, [pc, #452]	; (8015bfc <tcp_input+0x29c>)
 8015a38:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 8015a3a:	4b6e      	ldr	r3, [pc, #440]	; (8015bf4 <tcp_input+0x294>)
 8015a3c:	881a      	ldrh	r2, [r3, #0]
 8015a3e:	4b6f      	ldr	r3, [pc, #444]	; (8015bfc <tcp_input+0x29c>)
 8015a40:	881b      	ldrh	r3, [r3, #0]
 8015a42:	1ad3      	subs	r3, r2, r3
 8015a44:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8015a46:	4b6d      	ldr	r3, [pc, #436]	; (8015bfc <tcp_input+0x29c>)
 8015a48:	881b      	ldrh	r3, [r3, #0]
 8015a4a:	4619      	mov	r1, r3
 8015a4c:	6878      	ldr	r0, [r7, #4]
 8015a4e:	f7fe f8bd 	bl	8013bcc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8015a52:	687b      	ldr	r3, [r7, #4]
 8015a54:	681b      	ldr	r3, [r3, #0]
 8015a56:	895b      	ldrh	r3, [r3, #10]
 8015a58:	8a3a      	ldrh	r2, [r7, #16]
 8015a5a:	429a      	cmp	r2, r3
 8015a5c:	f200 836e 	bhi.w	801613c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	681b      	ldr	r3, [r3, #0]
 8015a64:	685b      	ldr	r3, [r3, #4]
 8015a66:	4a64      	ldr	r2, [pc, #400]	; (8015bf8 <tcp_input+0x298>)
 8015a68:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 8015a6a:	687b      	ldr	r3, [r7, #4]
 8015a6c:	681b      	ldr	r3, [r3, #0]
 8015a6e:	8a3a      	ldrh	r2, [r7, #16]
 8015a70:	4611      	mov	r1, r2
 8015a72:	4618      	mov	r0, r3
 8015a74:	f7fe f8aa 	bl	8013bcc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8015a78:	687b      	ldr	r3, [r7, #4]
 8015a7a:	891a      	ldrh	r2, [r3, #8]
 8015a7c:	8a3b      	ldrh	r3, [r7, #16]
 8015a7e:	1ad3      	subs	r3, r2, r3
 8015a80:	b29a      	uxth	r2, r3
 8015a82:	687b      	ldr	r3, [r7, #4]
 8015a84:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8015a86:	687b      	ldr	r3, [r7, #4]
 8015a88:	895b      	ldrh	r3, [r3, #10]
 8015a8a:	2b00      	cmp	r3, #0
 8015a8c:	d005      	beq.n	8015a9a <tcp_input+0x13a>
 8015a8e:	4b54      	ldr	r3, [pc, #336]	; (8015be0 <tcp_input+0x280>)
 8015a90:	22df      	movs	r2, #223	; 0xdf
 8015a92:	495c      	ldr	r1, [pc, #368]	; (8015c04 <tcp_input+0x2a4>)
 8015a94:	4854      	ldr	r0, [pc, #336]	; (8015be8 <tcp_input+0x288>)
 8015a96:	f008 f953 	bl	801dd40 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 8015a9a:	687b      	ldr	r3, [r7, #4]
 8015a9c:	891a      	ldrh	r2, [r3, #8]
 8015a9e:	687b      	ldr	r3, [r7, #4]
 8015aa0:	681b      	ldr	r3, [r3, #0]
 8015aa2:	891b      	ldrh	r3, [r3, #8]
 8015aa4:	429a      	cmp	r2, r3
 8015aa6:	d005      	beq.n	8015ab4 <tcp_input+0x154>
 8015aa8:	4b4d      	ldr	r3, [pc, #308]	; (8015be0 <tcp_input+0x280>)
 8015aaa:	22e0      	movs	r2, #224	; 0xe0
 8015aac:	4956      	ldr	r1, [pc, #344]	; (8015c08 <tcp_input+0x2a8>)
 8015aae:	484e      	ldr	r0, [pc, #312]	; (8015be8 <tcp_input+0x288>)
 8015ab0:	f008 f946 	bl	801dd40 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 8015ab4:	4b4d      	ldr	r3, [pc, #308]	; (8015bec <tcp_input+0x28c>)
 8015ab6:	681b      	ldr	r3, [r3, #0]
 8015ab8:	881b      	ldrh	r3, [r3, #0]
 8015aba:	b29b      	uxth	r3, r3
 8015abc:	4a4b      	ldr	r2, [pc, #300]	; (8015bec <tcp_input+0x28c>)
 8015abe:	6814      	ldr	r4, [r2, #0]
 8015ac0:	4618      	mov	r0, r3
 8015ac2:	f7fc fd07 	bl	80124d4 <lwip_htons>
 8015ac6:	4603      	mov	r3, r0
 8015ac8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 8015aca:	4b48      	ldr	r3, [pc, #288]	; (8015bec <tcp_input+0x28c>)
 8015acc:	681b      	ldr	r3, [r3, #0]
 8015ace:	885b      	ldrh	r3, [r3, #2]
 8015ad0:	b29b      	uxth	r3, r3
 8015ad2:	4a46      	ldr	r2, [pc, #280]	; (8015bec <tcp_input+0x28c>)
 8015ad4:	6814      	ldr	r4, [r2, #0]
 8015ad6:	4618      	mov	r0, r3
 8015ad8:	f7fc fcfc 	bl	80124d4 <lwip_htons>
 8015adc:	4603      	mov	r3, r0
 8015ade:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 8015ae0:	4b42      	ldr	r3, [pc, #264]	; (8015bec <tcp_input+0x28c>)
 8015ae2:	681b      	ldr	r3, [r3, #0]
 8015ae4:	685b      	ldr	r3, [r3, #4]
 8015ae6:	4a41      	ldr	r2, [pc, #260]	; (8015bec <tcp_input+0x28c>)
 8015ae8:	6814      	ldr	r4, [r2, #0]
 8015aea:	4618      	mov	r0, r3
 8015aec:	f7fc fd07 	bl	80124fe <lwip_htonl>
 8015af0:	4603      	mov	r3, r0
 8015af2:	6063      	str	r3, [r4, #4]
 8015af4:	6863      	ldr	r3, [r4, #4]
 8015af6:	4a45      	ldr	r2, [pc, #276]	; (8015c0c <tcp_input+0x2ac>)
 8015af8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 8015afa:	4b3c      	ldr	r3, [pc, #240]	; (8015bec <tcp_input+0x28c>)
 8015afc:	681b      	ldr	r3, [r3, #0]
 8015afe:	689b      	ldr	r3, [r3, #8]
 8015b00:	4a3a      	ldr	r2, [pc, #232]	; (8015bec <tcp_input+0x28c>)
 8015b02:	6814      	ldr	r4, [r2, #0]
 8015b04:	4618      	mov	r0, r3
 8015b06:	f7fc fcfa 	bl	80124fe <lwip_htonl>
 8015b0a:	4603      	mov	r3, r0
 8015b0c:	60a3      	str	r3, [r4, #8]
 8015b0e:	68a3      	ldr	r3, [r4, #8]
 8015b10:	4a3f      	ldr	r2, [pc, #252]	; (8015c10 <tcp_input+0x2b0>)
 8015b12:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8015b14:	4b35      	ldr	r3, [pc, #212]	; (8015bec <tcp_input+0x28c>)
 8015b16:	681b      	ldr	r3, [r3, #0]
 8015b18:	89db      	ldrh	r3, [r3, #14]
 8015b1a:	b29b      	uxth	r3, r3
 8015b1c:	4a33      	ldr	r2, [pc, #204]	; (8015bec <tcp_input+0x28c>)
 8015b1e:	6814      	ldr	r4, [r2, #0]
 8015b20:	4618      	mov	r0, r3
 8015b22:	f7fc fcd7 	bl	80124d4 <lwip_htons>
 8015b26:	4603      	mov	r3, r0
 8015b28:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 8015b2a:	4b30      	ldr	r3, [pc, #192]	; (8015bec <tcp_input+0x28c>)
 8015b2c:	681b      	ldr	r3, [r3, #0]
 8015b2e:	899b      	ldrh	r3, [r3, #12]
 8015b30:	b29b      	uxth	r3, r3
 8015b32:	4618      	mov	r0, r3
 8015b34:	f7fc fcce 	bl	80124d4 <lwip_htons>
 8015b38:	4603      	mov	r3, r0
 8015b3a:	b2db      	uxtb	r3, r3
 8015b3c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015b40:	b2da      	uxtb	r2, r3
 8015b42:	4b34      	ldr	r3, [pc, #208]	; (8015c14 <tcp_input+0x2b4>)
 8015b44:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8015b46:	687b      	ldr	r3, [r7, #4]
 8015b48:	891a      	ldrh	r2, [r3, #8]
 8015b4a:	4b33      	ldr	r3, [pc, #204]	; (8015c18 <tcp_input+0x2b8>)
 8015b4c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 8015b4e:	4b31      	ldr	r3, [pc, #196]	; (8015c14 <tcp_input+0x2b4>)
 8015b50:	781b      	ldrb	r3, [r3, #0]
 8015b52:	f003 0303 	and.w	r3, r3, #3
 8015b56:	2b00      	cmp	r3, #0
 8015b58:	d00c      	beq.n	8015b74 <tcp_input+0x214>
    tcplen++;
 8015b5a:	4b2f      	ldr	r3, [pc, #188]	; (8015c18 <tcp_input+0x2b8>)
 8015b5c:	881b      	ldrh	r3, [r3, #0]
 8015b5e:	3301      	adds	r3, #1
 8015b60:	b29a      	uxth	r2, r3
 8015b62:	4b2d      	ldr	r3, [pc, #180]	; (8015c18 <tcp_input+0x2b8>)
 8015b64:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8015b66:	687b      	ldr	r3, [r7, #4]
 8015b68:	891a      	ldrh	r2, [r3, #8]
 8015b6a:	4b2b      	ldr	r3, [pc, #172]	; (8015c18 <tcp_input+0x2b8>)
 8015b6c:	881b      	ldrh	r3, [r3, #0]
 8015b6e:	429a      	cmp	r2, r3
 8015b70:	f200 82e6 	bhi.w	8016140 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8015b74:	2300      	movs	r3, #0
 8015b76:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015b78:	4b28      	ldr	r3, [pc, #160]	; (8015c1c <tcp_input+0x2bc>)
 8015b7a:	681b      	ldr	r3, [r3, #0]
 8015b7c:	61fb      	str	r3, [r7, #28]
 8015b7e:	e09d      	b.n	8015cbc <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8015b80:	69fb      	ldr	r3, [r7, #28]
 8015b82:	7d1b      	ldrb	r3, [r3, #20]
 8015b84:	2b00      	cmp	r3, #0
 8015b86:	d105      	bne.n	8015b94 <tcp_input+0x234>
 8015b88:	4b15      	ldr	r3, [pc, #84]	; (8015be0 <tcp_input+0x280>)
 8015b8a:	22fb      	movs	r2, #251	; 0xfb
 8015b8c:	4924      	ldr	r1, [pc, #144]	; (8015c20 <tcp_input+0x2c0>)
 8015b8e:	4816      	ldr	r0, [pc, #88]	; (8015be8 <tcp_input+0x288>)
 8015b90:	f008 f8d6 	bl	801dd40 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8015b94:	69fb      	ldr	r3, [r7, #28]
 8015b96:	7d1b      	ldrb	r3, [r3, #20]
 8015b98:	2b0a      	cmp	r3, #10
 8015b9a:	d105      	bne.n	8015ba8 <tcp_input+0x248>
 8015b9c:	4b10      	ldr	r3, [pc, #64]	; (8015be0 <tcp_input+0x280>)
 8015b9e:	22fc      	movs	r2, #252	; 0xfc
 8015ba0:	4920      	ldr	r1, [pc, #128]	; (8015c24 <tcp_input+0x2c4>)
 8015ba2:	4811      	ldr	r0, [pc, #68]	; (8015be8 <tcp_input+0x288>)
 8015ba4:	f008 f8cc 	bl	801dd40 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8015ba8:	69fb      	ldr	r3, [r7, #28]
 8015baa:	7d1b      	ldrb	r3, [r3, #20]
 8015bac:	2b01      	cmp	r3, #1
 8015bae:	d105      	bne.n	8015bbc <tcp_input+0x25c>
 8015bb0:	4b0b      	ldr	r3, [pc, #44]	; (8015be0 <tcp_input+0x280>)
 8015bb2:	22fd      	movs	r2, #253	; 0xfd
 8015bb4:	491c      	ldr	r1, [pc, #112]	; (8015c28 <tcp_input+0x2c8>)
 8015bb6:	480c      	ldr	r0, [pc, #48]	; (8015be8 <tcp_input+0x288>)
 8015bb8:	f008 f8c2 	bl	801dd40 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015bbc:	69fb      	ldr	r3, [r7, #28]
 8015bbe:	7a1b      	ldrb	r3, [r3, #8]
 8015bc0:	2b00      	cmp	r3, #0
 8015bc2:	d033      	beq.n	8015c2c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015bc4:	69fb      	ldr	r3, [r7, #28]
 8015bc6:	7a1a      	ldrb	r2, [r3, #8]
 8015bc8:	4b09      	ldr	r3, [pc, #36]	; (8015bf0 <tcp_input+0x290>)
 8015bca:	685b      	ldr	r3, [r3, #4]
 8015bcc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015bd0:	3301      	adds	r3, #1
 8015bd2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015bd4:	429a      	cmp	r2, r3
 8015bd6:	d029      	beq.n	8015c2c <tcp_input+0x2cc>
      prev = pcb;
 8015bd8:	69fb      	ldr	r3, [r7, #28]
 8015bda:	61bb      	str	r3, [r7, #24]
      continue;
 8015bdc:	e06b      	b.n	8015cb6 <tcp_input+0x356>
 8015bde:	bf00      	nop
 8015be0:	0801fffc 	.word	0x0801fffc
 8015be4:	08020030 	.word	0x08020030
 8015be8:	08020048 	.word	0x08020048
 8015bec:	200240c8 	.word	0x200240c8
 8015bf0:	2001e7bc 	.word	0x2001e7bc
 8015bf4:	200240cc 	.word	0x200240cc
 8015bf8:	200240d0 	.word	0x200240d0
 8015bfc:	200240ce 	.word	0x200240ce
 8015c00:	08020070 	.word	0x08020070
 8015c04:	08020080 	.word	0x08020080
 8015c08:	0802008c 	.word	0x0802008c
 8015c0c:	200240d8 	.word	0x200240d8
 8015c10:	200240dc 	.word	0x200240dc
 8015c14:	200240e4 	.word	0x200240e4
 8015c18:	200240e2 	.word	0x200240e2
 8015c1c:	200240ac 	.word	0x200240ac
 8015c20:	080200ac 	.word	0x080200ac
 8015c24:	080200d4 	.word	0x080200d4
 8015c28:	08020100 	.word	0x08020100
    }

    if (pcb->remote_port == tcphdr->src &&
 8015c2c:	69fb      	ldr	r3, [r7, #28]
 8015c2e:	8b1a      	ldrh	r2, [r3, #24]
 8015c30:	4b72      	ldr	r3, [pc, #456]	; (8015dfc <tcp_input+0x49c>)
 8015c32:	681b      	ldr	r3, [r3, #0]
 8015c34:	881b      	ldrh	r3, [r3, #0]
 8015c36:	b29b      	uxth	r3, r3
 8015c38:	429a      	cmp	r2, r3
 8015c3a:	d13a      	bne.n	8015cb2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 8015c3c:	69fb      	ldr	r3, [r7, #28]
 8015c3e:	8ada      	ldrh	r2, [r3, #22]
 8015c40:	4b6e      	ldr	r3, [pc, #440]	; (8015dfc <tcp_input+0x49c>)
 8015c42:	681b      	ldr	r3, [r3, #0]
 8015c44:	885b      	ldrh	r3, [r3, #2]
 8015c46:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8015c48:	429a      	cmp	r2, r3
 8015c4a:	d132      	bne.n	8015cb2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015c4c:	69fb      	ldr	r3, [r7, #28]
 8015c4e:	685a      	ldr	r2, [r3, #4]
 8015c50:	4b6b      	ldr	r3, [pc, #428]	; (8015e00 <tcp_input+0x4a0>)
 8015c52:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8015c54:	429a      	cmp	r2, r3
 8015c56:	d12c      	bne.n	8015cb2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015c58:	69fb      	ldr	r3, [r7, #28]
 8015c5a:	681a      	ldr	r2, [r3, #0]
 8015c5c:	4b68      	ldr	r3, [pc, #416]	; (8015e00 <tcp_input+0x4a0>)
 8015c5e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015c60:	429a      	cmp	r2, r3
 8015c62:	d126      	bne.n	8015cb2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8015c64:	69fb      	ldr	r3, [r7, #28]
 8015c66:	68db      	ldr	r3, [r3, #12]
 8015c68:	69fa      	ldr	r2, [r7, #28]
 8015c6a:	429a      	cmp	r2, r3
 8015c6c:	d106      	bne.n	8015c7c <tcp_input+0x31c>
 8015c6e:	4b65      	ldr	r3, [pc, #404]	; (8015e04 <tcp_input+0x4a4>)
 8015c70:	f240 120d 	movw	r2, #269	; 0x10d
 8015c74:	4964      	ldr	r1, [pc, #400]	; (8015e08 <tcp_input+0x4a8>)
 8015c76:	4865      	ldr	r0, [pc, #404]	; (8015e0c <tcp_input+0x4ac>)
 8015c78:	f008 f862 	bl	801dd40 <iprintf>
      if (prev != NULL) {
 8015c7c:	69bb      	ldr	r3, [r7, #24]
 8015c7e:	2b00      	cmp	r3, #0
 8015c80:	d00a      	beq.n	8015c98 <tcp_input+0x338>
        prev->next = pcb->next;
 8015c82:	69fb      	ldr	r3, [r7, #28]
 8015c84:	68da      	ldr	r2, [r3, #12]
 8015c86:	69bb      	ldr	r3, [r7, #24]
 8015c88:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 8015c8a:	4b61      	ldr	r3, [pc, #388]	; (8015e10 <tcp_input+0x4b0>)
 8015c8c:	681a      	ldr	r2, [r3, #0]
 8015c8e:	69fb      	ldr	r3, [r7, #28]
 8015c90:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8015c92:	4a5f      	ldr	r2, [pc, #380]	; (8015e10 <tcp_input+0x4b0>)
 8015c94:	69fb      	ldr	r3, [r7, #28]
 8015c96:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8015c98:	69fb      	ldr	r3, [r7, #28]
 8015c9a:	68db      	ldr	r3, [r3, #12]
 8015c9c:	69fa      	ldr	r2, [r7, #28]
 8015c9e:	429a      	cmp	r2, r3
 8015ca0:	d111      	bne.n	8015cc6 <tcp_input+0x366>
 8015ca2:	4b58      	ldr	r3, [pc, #352]	; (8015e04 <tcp_input+0x4a4>)
 8015ca4:	f240 1215 	movw	r2, #277	; 0x115
 8015ca8:	495a      	ldr	r1, [pc, #360]	; (8015e14 <tcp_input+0x4b4>)
 8015caa:	4858      	ldr	r0, [pc, #352]	; (8015e0c <tcp_input+0x4ac>)
 8015cac:	f008 f848 	bl	801dd40 <iprintf>
      break;
 8015cb0:	e009      	b.n	8015cc6 <tcp_input+0x366>
    }
    prev = pcb;
 8015cb2:	69fb      	ldr	r3, [r7, #28]
 8015cb4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015cb6:	69fb      	ldr	r3, [r7, #28]
 8015cb8:	68db      	ldr	r3, [r3, #12]
 8015cba:	61fb      	str	r3, [r7, #28]
 8015cbc:	69fb      	ldr	r3, [r7, #28]
 8015cbe:	2b00      	cmp	r3, #0
 8015cc0:	f47f af5e 	bne.w	8015b80 <tcp_input+0x220>
 8015cc4:	e000      	b.n	8015cc8 <tcp_input+0x368>
      break;
 8015cc6:	bf00      	nop
  }

  if (pcb == NULL) {
 8015cc8:	69fb      	ldr	r3, [r7, #28]
 8015cca:	2b00      	cmp	r3, #0
 8015ccc:	f040 80aa 	bne.w	8015e24 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015cd0:	4b51      	ldr	r3, [pc, #324]	; (8015e18 <tcp_input+0x4b8>)
 8015cd2:	681b      	ldr	r3, [r3, #0]
 8015cd4:	61fb      	str	r3, [r7, #28]
 8015cd6:	e03f      	b.n	8015d58 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8015cd8:	69fb      	ldr	r3, [r7, #28]
 8015cda:	7d1b      	ldrb	r3, [r3, #20]
 8015cdc:	2b0a      	cmp	r3, #10
 8015cde:	d006      	beq.n	8015cee <tcp_input+0x38e>
 8015ce0:	4b48      	ldr	r3, [pc, #288]	; (8015e04 <tcp_input+0x4a4>)
 8015ce2:	f240 121f 	movw	r2, #287	; 0x11f
 8015ce6:	494d      	ldr	r1, [pc, #308]	; (8015e1c <tcp_input+0x4bc>)
 8015ce8:	4848      	ldr	r0, [pc, #288]	; (8015e0c <tcp_input+0x4ac>)
 8015cea:	f008 f829 	bl	801dd40 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015cee:	69fb      	ldr	r3, [r7, #28]
 8015cf0:	7a1b      	ldrb	r3, [r3, #8]
 8015cf2:	2b00      	cmp	r3, #0
 8015cf4:	d009      	beq.n	8015d0a <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015cf6:	69fb      	ldr	r3, [r7, #28]
 8015cf8:	7a1a      	ldrb	r2, [r3, #8]
 8015cfa:	4b41      	ldr	r3, [pc, #260]	; (8015e00 <tcp_input+0x4a0>)
 8015cfc:	685b      	ldr	r3, [r3, #4]
 8015cfe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015d02:	3301      	adds	r3, #1
 8015d04:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8015d06:	429a      	cmp	r2, r3
 8015d08:	d122      	bne.n	8015d50 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 8015d0a:	69fb      	ldr	r3, [r7, #28]
 8015d0c:	8b1a      	ldrh	r2, [r3, #24]
 8015d0e:	4b3b      	ldr	r3, [pc, #236]	; (8015dfc <tcp_input+0x49c>)
 8015d10:	681b      	ldr	r3, [r3, #0]
 8015d12:	881b      	ldrh	r3, [r3, #0]
 8015d14:	b29b      	uxth	r3, r3
 8015d16:	429a      	cmp	r2, r3
 8015d18:	d11b      	bne.n	8015d52 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 8015d1a:	69fb      	ldr	r3, [r7, #28]
 8015d1c:	8ada      	ldrh	r2, [r3, #22]
 8015d1e:	4b37      	ldr	r3, [pc, #220]	; (8015dfc <tcp_input+0x49c>)
 8015d20:	681b      	ldr	r3, [r3, #0]
 8015d22:	885b      	ldrh	r3, [r3, #2]
 8015d24:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8015d26:	429a      	cmp	r2, r3
 8015d28:	d113      	bne.n	8015d52 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015d2a:	69fb      	ldr	r3, [r7, #28]
 8015d2c:	685a      	ldr	r2, [r3, #4]
 8015d2e:	4b34      	ldr	r3, [pc, #208]	; (8015e00 <tcp_input+0x4a0>)
 8015d30:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8015d32:	429a      	cmp	r2, r3
 8015d34:	d10d      	bne.n	8015d52 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015d36:	69fb      	ldr	r3, [r7, #28]
 8015d38:	681a      	ldr	r2, [r3, #0]
 8015d3a:	4b31      	ldr	r3, [pc, #196]	; (8015e00 <tcp_input+0x4a0>)
 8015d3c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015d3e:	429a      	cmp	r2, r3
 8015d40:	d107      	bne.n	8015d52 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8015d42:	69f8      	ldr	r0, [r7, #28]
 8015d44:	f000 fb56 	bl	80163f4 <tcp_timewait_input>
        }
        pbuf_free(p);
 8015d48:	6878      	ldr	r0, [r7, #4]
 8015d4a:	f7fd ffc5 	bl	8013cd8 <pbuf_free>
        return;
 8015d4e:	e1fd      	b.n	801614c <tcp_input+0x7ec>
        continue;
 8015d50:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015d52:	69fb      	ldr	r3, [r7, #28]
 8015d54:	68db      	ldr	r3, [r3, #12]
 8015d56:	61fb      	str	r3, [r7, #28]
 8015d58:	69fb      	ldr	r3, [r7, #28]
 8015d5a:	2b00      	cmp	r3, #0
 8015d5c:	d1bc      	bne.n	8015cd8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 8015d5e:	2300      	movs	r3, #0
 8015d60:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8015d62:	4b2f      	ldr	r3, [pc, #188]	; (8015e20 <tcp_input+0x4c0>)
 8015d64:	681b      	ldr	r3, [r3, #0]
 8015d66:	617b      	str	r3, [r7, #20]
 8015d68:	e02a      	b.n	8015dc0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8015d6a:	697b      	ldr	r3, [r7, #20]
 8015d6c:	7a1b      	ldrb	r3, [r3, #8]
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	d00c      	beq.n	8015d8c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015d72:	697b      	ldr	r3, [r7, #20]
 8015d74:	7a1a      	ldrb	r2, [r3, #8]
 8015d76:	4b22      	ldr	r3, [pc, #136]	; (8015e00 <tcp_input+0x4a0>)
 8015d78:	685b      	ldr	r3, [r3, #4]
 8015d7a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8015d7e:	3301      	adds	r3, #1
 8015d80:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8015d82:	429a      	cmp	r2, r3
 8015d84:	d002      	beq.n	8015d8c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8015d86:	697b      	ldr	r3, [r7, #20]
 8015d88:	61bb      	str	r3, [r7, #24]
        continue;
 8015d8a:	e016      	b.n	8015dba <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 8015d8c:	697b      	ldr	r3, [r7, #20]
 8015d8e:	8ada      	ldrh	r2, [r3, #22]
 8015d90:	4b1a      	ldr	r3, [pc, #104]	; (8015dfc <tcp_input+0x49c>)
 8015d92:	681b      	ldr	r3, [r3, #0]
 8015d94:	885b      	ldrh	r3, [r3, #2]
 8015d96:	b29b      	uxth	r3, r3
 8015d98:	429a      	cmp	r2, r3
 8015d9a:	d10c      	bne.n	8015db6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 8015d9c:	697b      	ldr	r3, [r7, #20]
 8015d9e:	681a      	ldr	r2, [r3, #0]
 8015da0:	4b17      	ldr	r3, [pc, #92]	; (8015e00 <tcp_input+0x4a0>)
 8015da2:	695b      	ldr	r3, [r3, #20]
 8015da4:	429a      	cmp	r2, r3
 8015da6:	d00f      	beq.n	8015dc8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8015da8:	697b      	ldr	r3, [r7, #20]
 8015daa:	2b00      	cmp	r3, #0
 8015dac:	d00d      	beq.n	8015dca <tcp_input+0x46a>
 8015dae:	697b      	ldr	r3, [r7, #20]
 8015db0:	681b      	ldr	r3, [r3, #0]
 8015db2:	2b00      	cmp	r3, #0
 8015db4:	d009      	beq.n	8015dca <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 8015db6:	697b      	ldr	r3, [r7, #20]
 8015db8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8015dba:	697b      	ldr	r3, [r7, #20]
 8015dbc:	68db      	ldr	r3, [r3, #12]
 8015dbe:	617b      	str	r3, [r7, #20]
 8015dc0:	697b      	ldr	r3, [r7, #20]
 8015dc2:	2b00      	cmp	r3, #0
 8015dc4:	d1d1      	bne.n	8015d6a <tcp_input+0x40a>
 8015dc6:	e000      	b.n	8015dca <tcp_input+0x46a>
            break;
 8015dc8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 8015dca:	697b      	ldr	r3, [r7, #20]
 8015dcc:	2b00      	cmp	r3, #0
 8015dce:	d029      	beq.n	8015e24 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 8015dd0:	69bb      	ldr	r3, [r7, #24]
 8015dd2:	2b00      	cmp	r3, #0
 8015dd4:	d00a      	beq.n	8015dec <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 8015dd6:	697b      	ldr	r3, [r7, #20]
 8015dd8:	68da      	ldr	r2, [r3, #12]
 8015dda:	69bb      	ldr	r3, [r7, #24]
 8015ddc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 8015dde:	4b10      	ldr	r3, [pc, #64]	; (8015e20 <tcp_input+0x4c0>)
 8015de0:	681a      	ldr	r2, [r3, #0]
 8015de2:	697b      	ldr	r3, [r7, #20]
 8015de4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 8015de6:	4a0e      	ldr	r2, [pc, #56]	; (8015e20 <tcp_input+0x4c0>)
 8015de8:	697b      	ldr	r3, [r7, #20]
 8015dea:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 8015dec:	6978      	ldr	r0, [r7, #20]
 8015dee:	f000 fa03 	bl	80161f8 <tcp_listen_input>
      }
      pbuf_free(p);
 8015df2:	6878      	ldr	r0, [r7, #4]
 8015df4:	f7fd ff70 	bl	8013cd8 <pbuf_free>
      return;
 8015df8:	e1a8      	b.n	801614c <tcp_input+0x7ec>
 8015dfa:	bf00      	nop
 8015dfc:	200240c8 	.word	0x200240c8
 8015e00:	2001e7bc 	.word	0x2001e7bc
 8015e04:	0801fffc 	.word	0x0801fffc
 8015e08:	08020128 	.word	0x08020128
 8015e0c:	08020048 	.word	0x08020048
 8015e10:	200240ac 	.word	0x200240ac
 8015e14:	08020154 	.word	0x08020154
 8015e18:	200240b0 	.word	0x200240b0
 8015e1c:	08020180 	.word	0x08020180
 8015e20:	200240a8 	.word	0x200240a8
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8015e24:	69fb      	ldr	r3, [r7, #28]
 8015e26:	2b00      	cmp	r3, #0
 8015e28:	f000 8158 	beq.w	80160dc <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 8015e2c:	4b95      	ldr	r3, [pc, #596]	; (8016084 <tcp_input+0x724>)
 8015e2e:	2200      	movs	r2, #0
 8015e30:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8015e32:	687b      	ldr	r3, [r7, #4]
 8015e34:	891a      	ldrh	r2, [r3, #8]
 8015e36:	4b93      	ldr	r3, [pc, #588]	; (8016084 <tcp_input+0x724>)
 8015e38:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 8015e3a:	4a92      	ldr	r2, [pc, #584]	; (8016084 <tcp_input+0x724>)
 8015e3c:	687b      	ldr	r3, [r7, #4]
 8015e3e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8015e40:	4b91      	ldr	r3, [pc, #580]	; (8016088 <tcp_input+0x728>)
 8015e42:	681b      	ldr	r3, [r3, #0]
 8015e44:	4a8f      	ldr	r2, [pc, #572]	; (8016084 <tcp_input+0x724>)
 8015e46:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8015e48:	4b90      	ldr	r3, [pc, #576]	; (801608c <tcp_input+0x72c>)
 8015e4a:	2200      	movs	r2, #0
 8015e4c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 8015e4e:	4b90      	ldr	r3, [pc, #576]	; (8016090 <tcp_input+0x730>)
 8015e50:	2200      	movs	r2, #0
 8015e52:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8015e54:	4b8f      	ldr	r3, [pc, #572]	; (8016094 <tcp_input+0x734>)
 8015e56:	2200      	movs	r2, #0
 8015e58:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 8015e5a:	4b8f      	ldr	r3, [pc, #572]	; (8016098 <tcp_input+0x738>)
 8015e5c:	781b      	ldrb	r3, [r3, #0]
 8015e5e:	f003 0308 	and.w	r3, r3, #8
 8015e62:	2b00      	cmp	r3, #0
 8015e64:	d006      	beq.n	8015e74 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	7b5b      	ldrb	r3, [r3, #13]
 8015e6a:	f043 0301 	orr.w	r3, r3, #1
 8015e6e:	b2da      	uxtb	r2, r3
 8015e70:	687b      	ldr	r3, [r7, #4]
 8015e72:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8015e74:	69fb      	ldr	r3, [r7, #28]
 8015e76:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015e78:	2b00      	cmp	r3, #0
 8015e7a:	d017      	beq.n	8015eac <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8015e7c:	69f8      	ldr	r0, [r7, #28]
 8015e7e:	f7ff f929 	bl	80150d4 <tcp_process_refused_data>
 8015e82:	4603      	mov	r3, r0
 8015e84:	f113 0f0d 	cmn.w	r3, #13
 8015e88:	d007      	beq.n	8015e9a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8015e8a:	69fb      	ldr	r3, [r7, #28]
 8015e8c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 8015e8e:	2b00      	cmp	r3, #0
 8015e90:	d00c      	beq.n	8015eac <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8015e92:	4b82      	ldr	r3, [pc, #520]	; (801609c <tcp_input+0x73c>)
 8015e94:	881b      	ldrh	r3, [r3, #0]
 8015e96:	2b00      	cmp	r3, #0
 8015e98:	d008      	beq.n	8015eac <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 8015e9a:	69fb      	ldr	r3, [r7, #28]
 8015e9c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8015e9e:	2b00      	cmp	r3, #0
 8015ea0:	f040 80e3 	bne.w	801606a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8015ea4:	69f8      	ldr	r0, [r7, #28]
 8015ea6:	f003 f9ad 	bl	8019204 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 8015eaa:	e0de      	b.n	801606a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 8015eac:	4a7c      	ldr	r2, [pc, #496]	; (80160a0 <tcp_input+0x740>)
 8015eae:	69fb      	ldr	r3, [r7, #28]
 8015eb0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 8015eb2:	69f8      	ldr	r0, [r7, #28]
 8015eb4:	f000 fb18 	bl	80164e8 <tcp_process>
 8015eb8:	4603      	mov	r3, r0
 8015eba:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 8015ebc:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015ec0:	f113 0f0d 	cmn.w	r3, #13
 8015ec4:	f000 80d3 	beq.w	801606e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 8015ec8:	4b71      	ldr	r3, [pc, #452]	; (8016090 <tcp_input+0x730>)
 8015eca:	781b      	ldrb	r3, [r3, #0]
 8015ecc:	f003 0308 	and.w	r3, r3, #8
 8015ed0:	2b00      	cmp	r3, #0
 8015ed2:	d015      	beq.n	8015f00 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 8015ed4:	69fb      	ldr	r3, [r7, #28]
 8015ed6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015eda:	2b00      	cmp	r3, #0
 8015edc:	d008      	beq.n	8015ef0 <tcp_input+0x590>
 8015ede:	69fb      	ldr	r3, [r7, #28]
 8015ee0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8015ee4:	69fa      	ldr	r2, [r7, #28]
 8015ee6:	6912      	ldr	r2, [r2, #16]
 8015ee8:	f06f 010d 	mvn.w	r1, #13
 8015eec:	4610      	mov	r0, r2
 8015eee:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 8015ef0:	69f9      	ldr	r1, [r7, #28]
 8015ef2:	486c      	ldr	r0, [pc, #432]	; (80160a4 <tcp_input+0x744>)
 8015ef4:	f7ff fbbc 	bl	8015670 <tcp_pcb_remove>
        tcp_free(pcb);
 8015ef8:	69f8      	ldr	r0, [r7, #28]
 8015efa:	f7fe f9a9 	bl	8014250 <tcp_free>
 8015efe:	e0da      	b.n	80160b6 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 8015f00:	2300      	movs	r3, #0
 8015f02:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 8015f04:	4b63      	ldr	r3, [pc, #396]	; (8016094 <tcp_input+0x734>)
 8015f06:	881b      	ldrh	r3, [r3, #0]
 8015f08:	2b00      	cmp	r3, #0
 8015f0a:	d01d      	beq.n	8015f48 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 8015f0c:	4b61      	ldr	r3, [pc, #388]	; (8016094 <tcp_input+0x734>)
 8015f0e:	881b      	ldrh	r3, [r3, #0]
 8015f10:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8015f12:	69fb      	ldr	r3, [r7, #28]
 8015f14:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015f18:	2b00      	cmp	r3, #0
 8015f1a:	d00a      	beq.n	8015f32 <tcp_input+0x5d2>
 8015f1c:	69fb      	ldr	r3, [r7, #28]
 8015f1e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015f22:	69fa      	ldr	r2, [r7, #28]
 8015f24:	6910      	ldr	r0, [r2, #16]
 8015f26:	89fa      	ldrh	r2, [r7, #14]
 8015f28:	69f9      	ldr	r1, [r7, #28]
 8015f2a:	4798      	blx	r3
 8015f2c:	4603      	mov	r3, r0
 8015f2e:	74fb      	strb	r3, [r7, #19]
 8015f30:	e001      	b.n	8015f36 <tcp_input+0x5d6>
 8015f32:	2300      	movs	r3, #0
 8015f34:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8015f36:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015f3a:	f113 0f0d 	cmn.w	r3, #13
 8015f3e:	f000 8098 	beq.w	8016072 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8015f42:	4b54      	ldr	r3, [pc, #336]	; (8016094 <tcp_input+0x734>)
 8015f44:	2200      	movs	r2, #0
 8015f46:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8015f48:	69f8      	ldr	r0, [r7, #28]
 8015f4a:	f000 f915 	bl	8016178 <tcp_input_delayed_close>
 8015f4e:	4603      	mov	r3, r0
 8015f50:	2b00      	cmp	r3, #0
 8015f52:	f040 8090 	bne.w	8016076 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8015f56:	4b4d      	ldr	r3, [pc, #308]	; (801608c <tcp_input+0x72c>)
 8015f58:	681b      	ldr	r3, [r3, #0]
 8015f5a:	2b00      	cmp	r3, #0
 8015f5c:	d041      	beq.n	8015fe2 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 8015f5e:	69fb      	ldr	r3, [r7, #28]
 8015f60:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015f62:	2b00      	cmp	r3, #0
 8015f64:	d006      	beq.n	8015f74 <tcp_input+0x614>
 8015f66:	4b50      	ldr	r3, [pc, #320]	; (80160a8 <tcp_input+0x748>)
 8015f68:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8015f6c:	494f      	ldr	r1, [pc, #316]	; (80160ac <tcp_input+0x74c>)
 8015f6e:	4850      	ldr	r0, [pc, #320]	; (80160b0 <tcp_input+0x750>)
 8015f70:	f007 fee6 	bl	801dd40 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8015f74:	69fb      	ldr	r3, [r7, #28]
 8015f76:	8b5b      	ldrh	r3, [r3, #26]
 8015f78:	f003 0310 	and.w	r3, r3, #16
 8015f7c:	2b00      	cmp	r3, #0
 8015f7e:	d008      	beq.n	8015f92 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8015f80:	4b42      	ldr	r3, [pc, #264]	; (801608c <tcp_input+0x72c>)
 8015f82:	681b      	ldr	r3, [r3, #0]
 8015f84:	4618      	mov	r0, r3
 8015f86:	f7fd fea7 	bl	8013cd8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 8015f8a:	69f8      	ldr	r0, [r7, #28]
 8015f8c:	f7fe fc48 	bl	8014820 <tcp_abort>
            goto aborted;
 8015f90:	e091      	b.n	80160b6 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8015f92:	69fb      	ldr	r3, [r7, #28]
 8015f94:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015f98:	2b00      	cmp	r3, #0
 8015f9a:	d00c      	beq.n	8015fb6 <tcp_input+0x656>
 8015f9c:	69fb      	ldr	r3, [r7, #28]
 8015f9e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8015fa2:	69fb      	ldr	r3, [r7, #28]
 8015fa4:	6918      	ldr	r0, [r3, #16]
 8015fa6:	4b39      	ldr	r3, [pc, #228]	; (801608c <tcp_input+0x72c>)
 8015fa8:	681a      	ldr	r2, [r3, #0]
 8015faa:	2300      	movs	r3, #0
 8015fac:	69f9      	ldr	r1, [r7, #28]
 8015fae:	47a0      	blx	r4
 8015fb0:	4603      	mov	r3, r0
 8015fb2:	74fb      	strb	r3, [r7, #19]
 8015fb4:	e008      	b.n	8015fc8 <tcp_input+0x668>
 8015fb6:	4b35      	ldr	r3, [pc, #212]	; (801608c <tcp_input+0x72c>)
 8015fb8:	681a      	ldr	r2, [r3, #0]
 8015fba:	2300      	movs	r3, #0
 8015fbc:	69f9      	ldr	r1, [r7, #28]
 8015fbe:	2000      	movs	r0, #0
 8015fc0:	f7ff f95e 	bl	8015280 <tcp_recv_null>
 8015fc4:	4603      	mov	r3, r0
 8015fc6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 8015fc8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015fcc:	f113 0f0d 	cmn.w	r3, #13
 8015fd0:	d053      	beq.n	801607a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 8015fd2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8015fd6:	2b00      	cmp	r3, #0
 8015fd8:	d003      	beq.n	8015fe2 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 8015fda:	4b2c      	ldr	r3, [pc, #176]	; (801608c <tcp_input+0x72c>)
 8015fdc:	681a      	ldr	r2, [r3, #0]
 8015fde:	69fb      	ldr	r3, [r7, #28]
 8015fe0:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 8015fe2:	4b2b      	ldr	r3, [pc, #172]	; (8016090 <tcp_input+0x730>)
 8015fe4:	781b      	ldrb	r3, [r3, #0]
 8015fe6:	f003 0320 	and.w	r3, r3, #32
 8015fea:	2b00      	cmp	r3, #0
 8015fec:	d030      	beq.n	8016050 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 8015fee:	69fb      	ldr	r3, [r7, #28]
 8015ff0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015ff2:	2b00      	cmp	r3, #0
 8015ff4:	d009      	beq.n	801600a <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 8015ff6:	69fb      	ldr	r3, [r7, #28]
 8015ff8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015ffa:	7b5a      	ldrb	r2, [r3, #13]
 8015ffc:	69fb      	ldr	r3, [r7, #28]
 8015ffe:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8016000:	f042 0220 	orr.w	r2, r2, #32
 8016004:	b2d2      	uxtb	r2, r2
 8016006:	735a      	strb	r2, [r3, #13]
 8016008:	e022      	b.n	8016050 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801600a:	69fb      	ldr	r3, [r7, #28]
 801600c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801600e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8016012:	d005      	beq.n	8016020 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8016014:	69fb      	ldr	r3, [r7, #28]
 8016016:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8016018:	3301      	adds	r3, #1
 801601a:	b29a      	uxth	r2, r3
 801601c:	69fb      	ldr	r3, [r7, #28]
 801601e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8016020:	69fb      	ldr	r3, [r7, #28]
 8016022:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8016026:	2b00      	cmp	r3, #0
 8016028:	d00b      	beq.n	8016042 <tcp_input+0x6e2>
 801602a:	69fb      	ldr	r3, [r7, #28]
 801602c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8016030:	69fb      	ldr	r3, [r7, #28]
 8016032:	6918      	ldr	r0, [r3, #16]
 8016034:	2300      	movs	r3, #0
 8016036:	2200      	movs	r2, #0
 8016038:	69f9      	ldr	r1, [r7, #28]
 801603a:	47a0      	blx	r4
 801603c:	4603      	mov	r3, r0
 801603e:	74fb      	strb	r3, [r7, #19]
 8016040:	e001      	b.n	8016046 <tcp_input+0x6e6>
 8016042:	2300      	movs	r3, #0
 8016044:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8016046:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801604a:	f113 0f0d 	cmn.w	r3, #13
 801604e:	d016      	beq.n	801607e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8016050:	4b13      	ldr	r3, [pc, #76]	; (80160a0 <tcp_input+0x740>)
 8016052:	2200      	movs	r2, #0
 8016054:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8016056:	69f8      	ldr	r0, [r7, #28]
 8016058:	f000 f88e 	bl	8016178 <tcp_input_delayed_close>
 801605c:	4603      	mov	r3, r0
 801605e:	2b00      	cmp	r3, #0
 8016060:	d128      	bne.n	80160b4 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8016062:	69f8      	ldr	r0, [r7, #28]
 8016064:	f002 fac8 	bl	80185f8 <tcp_output>
 8016068:	e025      	b.n	80160b6 <tcp_input+0x756>
        goto aborted;
 801606a:	bf00      	nop
 801606c:	e023      	b.n	80160b6 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801606e:	bf00      	nop
 8016070:	e021      	b.n	80160b6 <tcp_input+0x756>
              goto aborted;
 8016072:	bf00      	nop
 8016074:	e01f      	b.n	80160b6 <tcp_input+0x756>
          goto aborted;
 8016076:	bf00      	nop
 8016078:	e01d      	b.n	80160b6 <tcp_input+0x756>
            goto aborted;
 801607a:	bf00      	nop
 801607c:	e01b      	b.n	80160b6 <tcp_input+0x756>
              goto aborted;
 801607e:	bf00      	nop
 8016080:	e019      	b.n	80160b6 <tcp_input+0x756>
 8016082:	bf00      	nop
 8016084:	200240b8 	.word	0x200240b8
 8016088:	200240c8 	.word	0x200240c8
 801608c:	200240e8 	.word	0x200240e8
 8016090:	200240e5 	.word	0x200240e5
 8016094:	200240e0 	.word	0x200240e0
 8016098:	200240e4 	.word	0x200240e4
 801609c:	200240e2 	.word	0x200240e2
 80160a0:	200240ec 	.word	0x200240ec
 80160a4:	200240ac 	.word	0x200240ac
 80160a8:	0801fffc 	.word	0x0801fffc
 80160ac:	080201b0 	.word	0x080201b0
 80160b0:	08020048 	.word	0x08020048
          goto aborted;
 80160b4:	bf00      	nop
    tcp_input_pcb = NULL;
 80160b6:	4b27      	ldr	r3, [pc, #156]	; (8016154 <tcp_input+0x7f4>)
 80160b8:	2200      	movs	r2, #0
 80160ba:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80160bc:	4b26      	ldr	r3, [pc, #152]	; (8016158 <tcp_input+0x7f8>)
 80160be:	2200      	movs	r2, #0
 80160c0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80160c2:	4b26      	ldr	r3, [pc, #152]	; (801615c <tcp_input+0x7fc>)
 80160c4:	685b      	ldr	r3, [r3, #4]
 80160c6:	2b00      	cmp	r3, #0
 80160c8:	d03f      	beq.n	801614a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80160ca:	4b24      	ldr	r3, [pc, #144]	; (801615c <tcp_input+0x7fc>)
 80160cc:	685b      	ldr	r3, [r3, #4]
 80160ce:	4618      	mov	r0, r3
 80160d0:	f7fd fe02 	bl	8013cd8 <pbuf_free>
      inseg.p = NULL;
 80160d4:	4b21      	ldr	r3, [pc, #132]	; (801615c <tcp_input+0x7fc>)
 80160d6:	2200      	movs	r2, #0
 80160d8:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80160da:	e036      	b.n	801614a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80160dc:	4b20      	ldr	r3, [pc, #128]	; (8016160 <tcp_input+0x800>)
 80160de:	681b      	ldr	r3, [r3, #0]
 80160e0:	899b      	ldrh	r3, [r3, #12]
 80160e2:	b29b      	uxth	r3, r3
 80160e4:	4618      	mov	r0, r3
 80160e6:	f7fc f9f5 	bl	80124d4 <lwip_htons>
 80160ea:	4603      	mov	r3, r0
 80160ec:	b2db      	uxtb	r3, r3
 80160ee:	f003 0304 	and.w	r3, r3, #4
 80160f2:	2b00      	cmp	r3, #0
 80160f4:	d118      	bne.n	8016128 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80160f6:	4b1b      	ldr	r3, [pc, #108]	; (8016164 <tcp_input+0x804>)
 80160f8:	6819      	ldr	r1, [r3, #0]
 80160fa:	4b1b      	ldr	r3, [pc, #108]	; (8016168 <tcp_input+0x808>)
 80160fc:	881b      	ldrh	r3, [r3, #0]
 80160fe:	461a      	mov	r2, r3
 8016100:	4b1a      	ldr	r3, [pc, #104]	; (801616c <tcp_input+0x80c>)
 8016102:	681b      	ldr	r3, [r3, #0]
 8016104:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016106:	4b16      	ldr	r3, [pc, #88]	; (8016160 <tcp_input+0x800>)
 8016108:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 801610a:	885b      	ldrh	r3, [r3, #2]
 801610c:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801610e:	4a14      	ldr	r2, [pc, #80]	; (8016160 <tcp_input+0x800>)
 8016110:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016112:	8812      	ldrh	r2, [r2, #0]
 8016114:	b292      	uxth	r2, r2
 8016116:	9202      	str	r2, [sp, #8]
 8016118:	9301      	str	r3, [sp, #4]
 801611a:	4b15      	ldr	r3, [pc, #84]	; (8016170 <tcp_input+0x810>)
 801611c:	9300      	str	r3, [sp, #0]
 801611e:	4b15      	ldr	r3, [pc, #84]	; (8016174 <tcp_input+0x814>)
 8016120:	4602      	mov	r2, r0
 8016122:	2000      	movs	r0, #0
 8016124:	f003 f81c 	bl	8019160 <tcp_rst>
    pbuf_free(p);
 8016128:	6878      	ldr	r0, [r7, #4]
 801612a:	f7fd fdd5 	bl	8013cd8 <pbuf_free>
  return;
 801612e:	e00c      	b.n	801614a <tcp_input+0x7ea>
    goto dropped;
 8016130:	bf00      	nop
 8016132:	e006      	b.n	8016142 <tcp_input+0x7e2>
    goto dropped;
 8016134:	bf00      	nop
 8016136:	e004      	b.n	8016142 <tcp_input+0x7e2>
    goto dropped;
 8016138:	bf00      	nop
 801613a:	e002      	b.n	8016142 <tcp_input+0x7e2>
      goto dropped;
 801613c:	bf00      	nop
 801613e:	e000      	b.n	8016142 <tcp_input+0x7e2>
      goto dropped;
 8016140:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8016142:	6878      	ldr	r0, [r7, #4]
 8016144:	f7fd fdc8 	bl	8013cd8 <pbuf_free>
 8016148:	e000      	b.n	801614c <tcp_input+0x7ec>
  return;
 801614a:	bf00      	nop
}
 801614c:	3724      	adds	r7, #36	; 0x24
 801614e:	46bd      	mov	sp, r7
 8016150:	bd90      	pop	{r4, r7, pc}
 8016152:	bf00      	nop
 8016154:	200240ec 	.word	0x200240ec
 8016158:	200240e8 	.word	0x200240e8
 801615c:	200240b8 	.word	0x200240b8
 8016160:	200240c8 	.word	0x200240c8
 8016164:	200240dc 	.word	0x200240dc
 8016168:	200240e2 	.word	0x200240e2
 801616c:	200240d8 	.word	0x200240d8
 8016170:	2001e7cc 	.word	0x2001e7cc
 8016174:	2001e7d0 	.word	0x2001e7d0

08016178 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8016178:	b580      	push	{r7, lr}
 801617a:	b082      	sub	sp, #8
 801617c:	af00      	add	r7, sp, #0
 801617e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8016180:	687b      	ldr	r3, [r7, #4]
 8016182:	2b00      	cmp	r3, #0
 8016184:	d106      	bne.n	8016194 <tcp_input_delayed_close+0x1c>
 8016186:	4b17      	ldr	r3, [pc, #92]	; (80161e4 <tcp_input_delayed_close+0x6c>)
 8016188:	f240 225a 	movw	r2, #602	; 0x25a
 801618c:	4916      	ldr	r1, [pc, #88]	; (80161e8 <tcp_input_delayed_close+0x70>)
 801618e:	4817      	ldr	r0, [pc, #92]	; (80161ec <tcp_input_delayed_close+0x74>)
 8016190:	f007 fdd6 	bl	801dd40 <iprintf>

  if (recv_flags & TF_CLOSED) {
 8016194:	4b16      	ldr	r3, [pc, #88]	; (80161f0 <tcp_input_delayed_close+0x78>)
 8016196:	781b      	ldrb	r3, [r3, #0]
 8016198:	f003 0310 	and.w	r3, r3, #16
 801619c:	2b00      	cmp	r3, #0
 801619e:	d01c      	beq.n	80161da <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 80161a0:	687b      	ldr	r3, [r7, #4]
 80161a2:	8b5b      	ldrh	r3, [r3, #26]
 80161a4:	f003 0310 	and.w	r3, r3, #16
 80161a8:	2b00      	cmp	r3, #0
 80161aa:	d10d      	bne.n	80161c8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 80161ac:	687b      	ldr	r3, [r7, #4]
 80161ae:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80161b2:	2b00      	cmp	r3, #0
 80161b4:	d008      	beq.n	80161c8 <tcp_input_delayed_close+0x50>
 80161b6:	687b      	ldr	r3, [r7, #4]
 80161b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80161bc:	687a      	ldr	r2, [r7, #4]
 80161be:	6912      	ldr	r2, [r2, #16]
 80161c0:	f06f 010e 	mvn.w	r1, #14
 80161c4:	4610      	mov	r0, r2
 80161c6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80161c8:	6879      	ldr	r1, [r7, #4]
 80161ca:	480a      	ldr	r0, [pc, #40]	; (80161f4 <tcp_input_delayed_close+0x7c>)
 80161cc:	f7ff fa50 	bl	8015670 <tcp_pcb_remove>
    tcp_free(pcb);
 80161d0:	6878      	ldr	r0, [r7, #4]
 80161d2:	f7fe f83d 	bl	8014250 <tcp_free>
    return 1;
 80161d6:	2301      	movs	r3, #1
 80161d8:	e000      	b.n	80161dc <tcp_input_delayed_close+0x64>
  }
  return 0;
 80161da:	2300      	movs	r3, #0
}
 80161dc:	4618      	mov	r0, r3
 80161de:	3708      	adds	r7, #8
 80161e0:	46bd      	mov	sp, r7
 80161e2:	bd80      	pop	{r7, pc}
 80161e4:	0801fffc 	.word	0x0801fffc
 80161e8:	080201cc 	.word	0x080201cc
 80161ec:	08020048 	.word	0x08020048
 80161f0:	200240e5 	.word	0x200240e5
 80161f4:	200240ac 	.word	0x200240ac

080161f8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80161f8:	b590      	push	{r4, r7, lr}
 80161fa:	b08b      	sub	sp, #44	; 0x2c
 80161fc:	af04      	add	r7, sp, #16
 80161fe:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 8016200:	4b6f      	ldr	r3, [pc, #444]	; (80163c0 <tcp_listen_input+0x1c8>)
 8016202:	781b      	ldrb	r3, [r3, #0]
 8016204:	f003 0304 	and.w	r3, r3, #4
 8016208:	2b00      	cmp	r3, #0
 801620a:	f040 80d2 	bne.w	80163b2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 801620e:	687b      	ldr	r3, [r7, #4]
 8016210:	2b00      	cmp	r3, #0
 8016212:	d106      	bne.n	8016222 <tcp_listen_input+0x2a>
 8016214:	4b6b      	ldr	r3, [pc, #428]	; (80163c4 <tcp_listen_input+0x1cc>)
 8016216:	f240 2281 	movw	r2, #641	; 0x281
 801621a:	496b      	ldr	r1, [pc, #428]	; (80163c8 <tcp_listen_input+0x1d0>)
 801621c:	486b      	ldr	r0, [pc, #428]	; (80163cc <tcp_listen_input+0x1d4>)
 801621e:	f007 fd8f 	bl	801dd40 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8016222:	4b67      	ldr	r3, [pc, #412]	; (80163c0 <tcp_listen_input+0x1c8>)
 8016224:	781b      	ldrb	r3, [r3, #0]
 8016226:	f003 0310 	and.w	r3, r3, #16
 801622a:	2b00      	cmp	r3, #0
 801622c:	d019      	beq.n	8016262 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801622e:	4b68      	ldr	r3, [pc, #416]	; (80163d0 <tcp_listen_input+0x1d8>)
 8016230:	6819      	ldr	r1, [r3, #0]
 8016232:	4b68      	ldr	r3, [pc, #416]	; (80163d4 <tcp_listen_input+0x1dc>)
 8016234:	881b      	ldrh	r3, [r3, #0]
 8016236:	461a      	mov	r2, r3
 8016238:	4b67      	ldr	r3, [pc, #412]	; (80163d8 <tcp_listen_input+0x1e0>)
 801623a:	681b      	ldr	r3, [r3, #0]
 801623c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801623e:	4b67      	ldr	r3, [pc, #412]	; (80163dc <tcp_listen_input+0x1e4>)
 8016240:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016242:	885b      	ldrh	r3, [r3, #2]
 8016244:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016246:	4a65      	ldr	r2, [pc, #404]	; (80163dc <tcp_listen_input+0x1e4>)
 8016248:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801624a:	8812      	ldrh	r2, [r2, #0]
 801624c:	b292      	uxth	r2, r2
 801624e:	9202      	str	r2, [sp, #8]
 8016250:	9301      	str	r3, [sp, #4]
 8016252:	4b63      	ldr	r3, [pc, #396]	; (80163e0 <tcp_listen_input+0x1e8>)
 8016254:	9300      	str	r3, [sp, #0]
 8016256:	4b63      	ldr	r3, [pc, #396]	; (80163e4 <tcp_listen_input+0x1ec>)
 8016258:	4602      	mov	r2, r0
 801625a:	6878      	ldr	r0, [r7, #4]
 801625c:	f002 ff80 	bl	8019160 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8016260:	e0a9      	b.n	80163b6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8016262:	4b57      	ldr	r3, [pc, #348]	; (80163c0 <tcp_listen_input+0x1c8>)
 8016264:	781b      	ldrb	r3, [r3, #0]
 8016266:	f003 0302 	and.w	r3, r3, #2
 801626a:	2b00      	cmp	r3, #0
 801626c:	f000 80a3 	beq.w	80163b6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8016270:	687b      	ldr	r3, [r7, #4]
 8016272:	7d5b      	ldrb	r3, [r3, #21]
 8016274:	4618      	mov	r0, r3
 8016276:	f7ff f927 	bl	80154c8 <tcp_alloc>
 801627a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 801627c:	697b      	ldr	r3, [r7, #20]
 801627e:	2b00      	cmp	r3, #0
 8016280:	d111      	bne.n	80162a6 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8016282:	687b      	ldr	r3, [r7, #4]
 8016284:	699b      	ldr	r3, [r3, #24]
 8016286:	2b00      	cmp	r3, #0
 8016288:	d00a      	beq.n	80162a0 <tcp_listen_input+0xa8>
 801628a:	687b      	ldr	r3, [r7, #4]
 801628c:	699b      	ldr	r3, [r3, #24]
 801628e:	687a      	ldr	r2, [r7, #4]
 8016290:	6910      	ldr	r0, [r2, #16]
 8016292:	f04f 32ff 	mov.w	r2, #4294967295
 8016296:	2100      	movs	r1, #0
 8016298:	4798      	blx	r3
 801629a:	4603      	mov	r3, r0
 801629c:	73bb      	strb	r3, [r7, #14]
      return;
 801629e:	e08b      	b.n	80163b8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 80162a0:	23f0      	movs	r3, #240	; 0xf0
 80162a2:	73bb      	strb	r3, [r7, #14]
      return;
 80162a4:	e088      	b.n	80163b8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 80162a6:	4b50      	ldr	r3, [pc, #320]	; (80163e8 <tcp_listen_input+0x1f0>)
 80162a8:	695a      	ldr	r2, [r3, #20]
 80162aa:	697b      	ldr	r3, [r7, #20]
 80162ac:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 80162ae:	4b4e      	ldr	r3, [pc, #312]	; (80163e8 <tcp_listen_input+0x1f0>)
 80162b0:	691a      	ldr	r2, [r3, #16]
 80162b2:	697b      	ldr	r3, [r7, #20]
 80162b4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 80162b6:	687b      	ldr	r3, [r7, #4]
 80162b8:	8ada      	ldrh	r2, [r3, #22]
 80162ba:	697b      	ldr	r3, [r7, #20]
 80162bc:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 80162be:	4b47      	ldr	r3, [pc, #284]	; (80163dc <tcp_listen_input+0x1e4>)
 80162c0:	681b      	ldr	r3, [r3, #0]
 80162c2:	881b      	ldrh	r3, [r3, #0]
 80162c4:	b29a      	uxth	r2, r3
 80162c6:	697b      	ldr	r3, [r7, #20]
 80162c8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 80162ca:	697b      	ldr	r3, [r7, #20]
 80162cc:	2203      	movs	r2, #3
 80162ce:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 80162d0:	4b41      	ldr	r3, [pc, #260]	; (80163d8 <tcp_listen_input+0x1e0>)
 80162d2:	681b      	ldr	r3, [r3, #0]
 80162d4:	1c5a      	adds	r2, r3, #1
 80162d6:	697b      	ldr	r3, [r7, #20]
 80162d8:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 80162da:	697b      	ldr	r3, [r7, #20]
 80162dc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80162de:	697b      	ldr	r3, [r7, #20]
 80162e0:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 80162e2:	6978      	ldr	r0, [r7, #20]
 80162e4:	f7ff fa58 	bl	8015798 <tcp_next_iss>
 80162e8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 80162ea:	697b      	ldr	r3, [r7, #20]
 80162ec:	693a      	ldr	r2, [r7, #16]
 80162ee:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 80162f0:	697b      	ldr	r3, [r7, #20]
 80162f2:	693a      	ldr	r2, [r7, #16]
 80162f4:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 80162f6:	697b      	ldr	r3, [r7, #20]
 80162f8:	693a      	ldr	r2, [r7, #16]
 80162fa:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 80162fc:	697b      	ldr	r3, [r7, #20]
 80162fe:	693a      	ldr	r2, [r7, #16]
 8016300:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8016302:	4b35      	ldr	r3, [pc, #212]	; (80163d8 <tcp_listen_input+0x1e0>)
 8016304:	681b      	ldr	r3, [r3, #0]
 8016306:	1e5a      	subs	r2, r3, #1
 8016308:	697b      	ldr	r3, [r7, #20]
 801630a:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 801630c:	687b      	ldr	r3, [r7, #4]
 801630e:	691a      	ldr	r2, [r3, #16]
 8016310:	697b      	ldr	r3, [r7, #20]
 8016312:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8016314:	697b      	ldr	r3, [r7, #20]
 8016316:	687a      	ldr	r2, [r7, #4]
 8016318:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 801631a:	687b      	ldr	r3, [r7, #4]
 801631c:	7a5b      	ldrb	r3, [r3, #9]
 801631e:	f003 030c 	and.w	r3, r3, #12
 8016322:	b2da      	uxtb	r2, r3
 8016324:	697b      	ldr	r3, [r7, #20]
 8016326:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8016328:	687b      	ldr	r3, [r7, #4]
 801632a:	7a1a      	ldrb	r2, [r3, #8]
 801632c:	697b      	ldr	r3, [r7, #20]
 801632e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8016330:	4b2e      	ldr	r3, [pc, #184]	; (80163ec <tcp_listen_input+0x1f4>)
 8016332:	681a      	ldr	r2, [r3, #0]
 8016334:	697b      	ldr	r3, [r7, #20]
 8016336:	60da      	str	r2, [r3, #12]
 8016338:	4a2c      	ldr	r2, [pc, #176]	; (80163ec <tcp_listen_input+0x1f4>)
 801633a:	697b      	ldr	r3, [r7, #20]
 801633c:	6013      	str	r3, [r2, #0]
 801633e:	f003 f8d1 	bl	80194e4 <tcp_timer_needed>
 8016342:	4b2b      	ldr	r3, [pc, #172]	; (80163f0 <tcp_listen_input+0x1f8>)
 8016344:	2201      	movs	r2, #1
 8016346:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8016348:	6978      	ldr	r0, [r7, #20]
 801634a:	f001 fd8f 	bl	8017e6c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 801634e:	4b23      	ldr	r3, [pc, #140]	; (80163dc <tcp_listen_input+0x1e4>)
 8016350:	681b      	ldr	r3, [r3, #0]
 8016352:	89db      	ldrh	r3, [r3, #14]
 8016354:	b29a      	uxth	r2, r3
 8016356:	697b      	ldr	r3, [r7, #20]
 8016358:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 801635c:	697b      	ldr	r3, [r7, #20]
 801635e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8016362:	697b      	ldr	r3, [r7, #20]
 8016364:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8016368:	697b      	ldr	r3, [r7, #20]
 801636a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801636c:	697b      	ldr	r3, [r7, #20]
 801636e:	3304      	adds	r3, #4
 8016370:	4618      	mov	r0, r3
 8016372:	f004 ffb5 	bl	801b2e0 <ip4_route>
 8016376:	4601      	mov	r1, r0
 8016378:	697b      	ldr	r3, [r7, #20]
 801637a:	3304      	adds	r3, #4
 801637c:	461a      	mov	r2, r3
 801637e:	4620      	mov	r0, r4
 8016380:	f7ff fa30 	bl	80157e4 <tcp_eff_send_mss_netif>
 8016384:	4603      	mov	r3, r0
 8016386:	461a      	mov	r2, r3
 8016388:	697b      	ldr	r3, [r7, #20]
 801638a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 801638c:	2112      	movs	r1, #18
 801638e:	6978      	ldr	r0, [r7, #20]
 8016390:	f002 f844 	bl	801841c <tcp_enqueue_flags>
 8016394:	4603      	mov	r3, r0
 8016396:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8016398:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801639c:	2b00      	cmp	r3, #0
 801639e:	d004      	beq.n	80163aa <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 80163a0:	2100      	movs	r1, #0
 80163a2:	6978      	ldr	r0, [r7, #20]
 80163a4:	f7fe f97e 	bl	80146a4 <tcp_abandon>
      return;
 80163a8:	e006      	b.n	80163b8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 80163aa:	6978      	ldr	r0, [r7, #20]
 80163ac:	f002 f924 	bl	80185f8 <tcp_output>
  return;
 80163b0:	e001      	b.n	80163b6 <tcp_listen_input+0x1be>
    return;
 80163b2:	bf00      	nop
 80163b4:	e000      	b.n	80163b8 <tcp_listen_input+0x1c0>
  return;
 80163b6:	bf00      	nop
}
 80163b8:	371c      	adds	r7, #28
 80163ba:	46bd      	mov	sp, r7
 80163bc:	bd90      	pop	{r4, r7, pc}
 80163be:	bf00      	nop
 80163c0:	200240e4 	.word	0x200240e4
 80163c4:	0801fffc 	.word	0x0801fffc
 80163c8:	080201f4 	.word	0x080201f4
 80163cc:	08020048 	.word	0x08020048
 80163d0:	200240dc 	.word	0x200240dc
 80163d4:	200240e2 	.word	0x200240e2
 80163d8:	200240d8 	.word	0x200240d8
 80163dc:	200240c8 	.word	0x200240c8
 80163e0:	2001e7cc 	.word	0x2001e7cc
 80163e4:	2001e7d0 	.word	0x2001e7d0
 80163e8:	2001e7bc 	.word	0x2001e7bc
 80163ec:	200240ac 	.word	0x200240ac
 80163f0:	200240b4 	.word	0x200240b4

080163f4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 80163f4:	b580      	push	{r7, lr}
 80163f6:	b086      	sub	sp, #24
 80163f8:	af04      	add	r7, sp, #16
 80163fa:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 80163fc:	4b2f      	ldr	r3, [pc, #188]	; (80164bc <tcp_timewait_input+0xc8>)
 80163fe:	781b      	ldrb	r3, [r3, #0]
 8016400:	f003 0304 	and.w	r3, r3, #4
 8016404:	2b00      	cmp	r3, #0
 8016406:	d153      	bne.n	80164b0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8016408:	687b      	ldr	r3, [r7, #4]
 801640a:	2b00      	cmp	r3, #0
 801640c:	d106      	bne.n	801641c <tcp_timewait_input+0x28>
 801640e:	4b2c      	ldr	r3, [pc, #176]	; (80164c0 <tcp_timewait_input+0xcc>)
 8016410:	f240 22ee 	movw	r2, #750	; 0x2ee
 8016414:	492b      	ldr	r1, [pc, #172]	; (80164c4 <tcp_timewait_input+0xd0>)
 8016416:	482c      	ldr	r0, [pc, #176]	; (80164c8 <tcp_timewait_input+0xd4>)
 8016418:	f007 fc92 	bl	801dd40 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 801641c:	4b27      	ldr	r3, [pc, #156]	; (80164bc <tcp_timewait_input+0xc8>)
 801641e:	781b      	ldrb	r3, [r3, #0]
 8016420:	f003 0302 	and.w	r3, r3, #2
 8016424:	2b00      	cmp	r3, #0
 8016426:	d02a      	beq.n	801647e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8016428:	4b28      	ldr	r3, [pc, #160]	; (80164cc <tcp_timewait_input+0xd8>)
 801642a:	681a      	ldr	r2, [r3, #0]
 801642c:	687b      	ldr	r3, [r7, #4]
 801642e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016430:	1ad3      	subs	r3, r2, r3
 8016432:	2b00      	cmp	r3, #0
 8016434:	db2d      	blt.n	8016492 <tcp_timewait_input+0x9e>
 8016436:	4b25      	ldr	r3, [pc, #148]	; (80164cc <tcp_timewait_input+0xd8>)
 8016438:	681a      	ldr	r2, [r3, #0]
 801643a:	687b      	ldr	r3, [r7, #4]
 801643c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801643e:	6879      	ldr	r1, [r7, #4]
 8016440:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016442:	440b      	add	r3, r1
 8016444:	1ad3      	subs	r3, r2, r3
 8016446:	2b00      	cmp	r3, #0
 8016448:	dc23      	bgt.n	8016492 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801644a:	4b21      	ldr	r3, [pc, #132]	; (80164d0 <tcp_timewait_input+0xdc>)
 801644c:	6819      	ldr	r1, [r3, #0]
 801644e:	4b21      	ldr	r3, [pc, #132]	; (80164d4 <tcp_timewait_input+0xe0>)
 8016450:	881b      	ldrh	r3, [r3, #0]
 8016452:	461a      	mov	r2, r3
 8016454:	4b1d      	ldr	r3, [pc, #116]	; (80164cc <tcp_timewait_input+0xd8>)
 8016456:	681b      	ldr	r3, [r3, #0]
 8016458:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801645a:	4b1f      	ldr	r3, [pc, #124]	; (80164d8 <tcp_timewait_input+0xe4>)
 801645c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801645e:	885b      	ldrh	r3, [r3, #2]
 8016460:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016462:	4a1d      	ldr	r2, [pc, #116]	; (80164d8 <tcp_timewait_input+0xe4>)
 8016464:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016466:	8812      	ldrh	r2, [r2, #0]
 8016468:	b292      	uxth	r2, r2
 801646a:	9202      	str	r2, [sp, #8]
 801646c:	9301      	str	r3, [sp, #4]
 801646e:	4b1b      	ldr	r3, [pc, #108]	; (80164dc <tcp_timewait_input+0xe8>)
 8016470:	9300      	str	r3, [sp, #0]
 8016472:	4b1b      	ldr	r3, [pc, #108]	; (80164e0 <tcp_timewait_input+0xec>)
 8016474:	4602      	mov	r2, r0
 8016476:	6878      	ldr	r0, [r7, #4]
 8016478:	f002 fe72 	bl	8019160 <tcp_rst>
      return;
 801647c:	e01b      	b.n	80164b6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 801647e:	4b0f      	ldr	r3, [pc, #60]	; (80164bc <tcp_timewait_input+0xc8>)
 8016480:	781b      	ldrb	r3, [r3, #0]
 8016482:	f003 0301 	and.w	r3, r3, #1
 8016486:	2b00      	cmp	r3, #0
 8016488:	d003      	beq.n	8016492 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 801648a:	4b16      	ldr	r3, [pc, #88]	; (80164e4 <tcp_timewait_input+0xf0>)
 801648c:	681a      	ldr	r2, [r3, #0]
 801648e:	687b      	ldr	r3, [r7, #4]
 8016490:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8016492:	4b10      	ldr	r3, [pc, #64]	; (80164d4 <tcp_timewait_input+0xe0>)
 8016494:	881b      	ldrh	r3, [r3, #0]
 8016496:	2b00      	cmp	r3, #0
 8016498:	d00c      	beq.n	80164b4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 801649a:	687b      	ldr	r3, [r7, #4]
 801649c:	8b5b      	ldrh	r3, [r3, #26]
 801649e:	f043 0302 	orr.w	r3, r3, #2
 80164a2:	b29a      	uxth	r2, r3
 80164a4:	687b      	ldr	r3, [r7, #4]
 80164a6:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 80164a8:	6878      	ldr	r0, [r7, #4]
 80164aa:	f002 f8a5 	bl	80185f8 <tcp_output>
  }
  return;
 80164ae:	e001      	b.n	80164b4 <tcp_timewait_input+0xc0>
    return;
 80164b0:	bf00      	nop
 80164b2:	e000      	b.n	80164b6 <tcp_timewait_input+0xc2>
  return;
 80164b4:	bf00      	nop
}
 80164b6:	3708      	adds	r7, #8
 80164b8:	46bd      	mov	sp, r7
 80164ba:	bd80      	pop	{r7, pc}
 80164bc:	200240e4 	.word	0x200240e4
 80164c0:	0801fffc 	.word	0x0801fffc
 80164c4:	08020214 	.word	0x08020214
 80164c8:	08020048 	.word	0x08020048
 80164cc:	200240d8 	.word	0x200240d8
 80164d0:	200240dc 	.word	0x200240dc
 80164d4:	200240e2 	.word	0x200240e2
 80164d8:	200240c8 	.word	0x200240c8
 80164dc:	2001e7cc 	.word	0x2001e7cc
 80164e0:	2001e7d0 	.word	0x2001e7d0
 80164e4:	200240a0 	.word	0x200240a0

080164e8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80164e8:	b590      	push	{r4, r7, lr}
 80164ea:	b08d      	sub	sp, #52	; 0x34
 80164ec:	af04      	add	r7, sp, #16
 80164ee:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80164f0:	2300      	movs	r3, #0
 80164f2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80164f4:	2300      	movs	r3, #0
 80164f6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80164f8:	687b      	ldr	r3, [r7, #4]
 80164fa:	2b00      	cmp	r3, #0
 80164fc:	d106      	bne.n	801650c <tcp_process+0x24>
 80164fe:	4b9d      	ldr	r3, [pc, #628]	; (8016774 <tcp_process+0x28c>)
 8016500:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8016504:	499c      	ldr	r1, [pc, #624]	; (8016778 <tcp_process+0x290>)
 8016506:	489d      	ldr	r0, [pc, #628]	; (801677c <tcp_process+0x294>)
 8016508:	f007 fc1a 	bl	801dd40 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 801650c:	4b9c      	ldr	r3, [pc, #624]	; (8016780 <tcp_process+0x298>)
 801650e:	781b      	ldrb	r3, [r3, #0]
 8016510:	f003 0304 	and.w	r3, r3, #4
 8016514:	2b00      	cmp	r3, #0
 8016516:	d04e      	beq.n	80165b6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8016518:	687b      	ldr	r3, [r7, #4]
 801651a:	7d1b      	ldrb	r3, [r3, #20]
 801651c:	2b02      	cmp	r3, #2
 801651e:	d108      	bne.n	8016532 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8016520:	687b      	ldr	r3, [r7, #4]
 8016522:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016524:	4b97      	ldr	r3, [pc, #604]	; (8016784 <tcp_process+0x29c>)
 8016526:	681b      	ldr	r3, [r3, #0]
 8016528:	429a      	cmp	r2, r3
 801652a:	d123      	bne.n	8016574 <tcp_process+0x8c>
        acceptable = 1;
 801652c:	2301      	movs	r3, #1
 801652e:	76fb      	strb	r3, [r7, #27]
 8016530:	e020      	b.n	8016574 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8016532:	687b      	ldr	r3, [r7, #4]
 8016534:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016536:	4b94      	ldr	r3, [pc, #592]	; (8016788 <tcp_process+0x2a0>)
 8016538:	681b      	ldr	r3, [r3, #0]
 801653a:	429a      	cmp	r2, r3
 801653c:	d102      	bne.n	8016544 <tcp_process+0x5c>
        acceptable = 1;
 801653e:	2301      	movs	r3, #1
 8016540:	76fb      	strb	r3, [r7, #27]
 8016542:	e017      	b.n	8016574 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016544:	4b90      	ldr	r3, [pc, #576]	; (8016788 <tcp_process+0x2a0>)
 8016546:	681a      	ldr	r2, [r3, #0]
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801654c:	1ad3      	subs	r3, r2, r3
 801654e:	2b00      	cmp	r3, #0
 8016550:	db10      	blt.n	8016574 <tcp_process+0x8c>
 8016552:	4b8d      	ldr	r3, [pc, #564]	; (8016788 <tcp_process+0x2a0>)
 8016554:	681a      	ldr	r2, [r3, #0]
 8016556:	687b      	ldr	r3, [r7, #4]
 8016558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801655a:	6879      	ldr	r1, [r7, #4]
 801655c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801655e:	440b      	add	r3, r1
 8016560:	1ad3      	subs	r3, r2, r3
 8016562:	2b00      	cmp	r3, #0
 8016564:	dc06      	bgt.n	8016574 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8016566:	687b      	ldr	r3, [r7, #4]
 8016568:	8b5b      	ldrh	r3, [r3, #26]
 801656a:	f043 0302 	orr.w	r3, r3, #2
 801656e:	b29a      	uxth	r2, r3
 8016570:	687b      	ldr	r3, [r7, #4]
 8016572:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8016574:	7efb      	ldrb	r3, [r7, #27]
 8016576:	2b00      	cmp	r3, #0
 8016578:	d01b      	beq.n	80165b2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 801657a:	687b      	ldr	r3, [r7, #4]
 801657c:	7d1b      	ldrb	r3, [r3, #20]
 801657e:	2b00      	cmp	r3, #0
 8016580:	d106      	bne.n	8016590 <tcp_process+0xa8>
 8016582:	4b7c      	ldr	r3, [pc, #496]	; (8016774 <tcp_process+0x28c>)
 8016584:	f44f 724e 	mov.w	r2, #824	; 0x338
 8016588:	4980      	ldr	r1, [pc, #512]	; (801678c <tcp_process+0x2a4>)
 801658a:	487c      	ldr	r0, [pc, #496]	; (801677c <tcp_process+0x294>)
 801658c:	f007 fbd8 	bl	801dd40 <iprintf>
      recv_flags |= TF_RESET;
 8016590:	4b7f      	ldr	r3, [pc, #508]	; (8016790 <tcp_process+0x2a8>)
 8016592:	781b      	ldrb	r3, [r3, #0]
 8016594:	f043 0308 	orr.w	r3, r3, #8
 8016598:	b2da      	uxtb	r2, r3
 801659a:	4b7d      	ldr	r3, [pc, #500]	; (8016790 <tcp_process+0x2a8>)
 801659c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	8b5b      	ldrh	r3, [r3, #26]
 80165a2:	f023 0301 	bic.w	r3, r3, #1
 80165a6:	b29a      	uxth	r2, r3
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 80165ac:	f06f 030d 	mvn.w	r3, #13
 80165b0:	e37a      	b.n	8016ca8 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 80165b2:	2300      	movs	r3, #0
 80165b4:	e378      	b.n	8016ca8 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 80165b6:	4b72      	ldr	r3, [pc, #456]	; (8016780 <tcp_process+0x298>)
 80165b8:	781b      	ldrb	r3, [r3, #0]
 80165ba:	f003 0302 	and.w	r3, r3, #2
 80165be:	2b00      	cmp	r3, #0
 80165c0:	d010      	beq.n	80165e4 <tcp_process+0xfc>
 80165c2:	687b      	ldr	r3, [r7, #4]
 80165c4:	7d1b      	ldrb	r3, [r3, #20]
 80165c6:	2b02      	cmp	r3, #2
 80165c8:	d00c      	beq.n	80165e4 <tcp_process+0xfc>
 80165ca:	687b      	ldr	r3, [r7, #4]
 80165cc:	7d1b      	ldrb	r3, [r3, #20]
 80165ce:	2b03      	cmp	r3, #3
 80165d0:	d008      	beq.n	80165e4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 80165d2:	687b      	ldr	r3, [r7, #4]
 80165d4:	8b5b      	ldrh	r3, [r3, #26]
 80165d6:	f043 0302 	orr.w	r3, r3, #2
 80165da:	b29a      	uxth	r2, r3
 80165dc:	687b      	ldr	r3, [r7, #4]
 80165de:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 80165e0:	2300      	movs	r3, #0
 80165e2:	e361      	b.n	8016ca8 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 80165e4:	687b      	ldr	r3, [r7, #4]
 80165e6:	8b5b      	ldrh	r3, [r3, #26]
 80165e8:	f003 0310 	and.w	r3, r3, #16
 80165ec:	2b00      	cmp	r3, #0
 80165ee:	d103      	bne.n	80165f8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80165f0:	4b68      	ldr	r3, [pc, #416]	; (8016794 <tcp_process+0x2ac>)
 80165f2:	681a      	ldr	r2, [r3, #0]
 80165f4:	687b      	ldr	r3, [r7, #4]
 80165f6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80165f8:	687b      	ldr	r3, [r7, #4]
 80165fa:	2200      	movs	r2, #0
 80165fc:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8016600:	687b      	ldr	r3, [r7, #4]
 8016602:	2200      	movs	r2, #0
 8016604:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8016608:	6878      	ldr	r0, [r7, #4]
 801660a:	f001 fc2f 	bl	8017e6c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 801660e:	687b      	ldr	r3, [r7, #4]
 8016610:	7d1b      	ldrb	r3, [r3, #20]
 8016612:	3b02      	subs	r3, #2
 8016614:	2b07      	cmp	r3, #7
 8016616:	f200 8337 	bhi.w	8016c88 <tcp_process+0x7a0>
 801661a:	a201      	add	r2, pc, #4	; (adr r2, 8016620 <tcp_process+0x138>)
 801661c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8016620:	08016641 	.word	0x08016641
 8016624:	08016871 	.word	0x08016871
 8016628:	080169e9 	.word	0x080169e9
 801662c:	08016a13 	.word	0x08016a13
 8016630:	08016b37 	.word	0x08016b37
 8016634:	080169e9 	.word	0x080169e9
 8016638:	08016bc3 	.word	0x08016bc3
 801663c:	08016c53 	.word	0x08016c53
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8016640:	4b4f      	ldr	r3, [pc, #316]	; (8016780 <tcp_process+0x298>)
 8016642:	781b      	ldrb	r3, [r3, #0]
 8016644:	f003 0310 	and.w	r3, r3, #16
 8016648:	2b00      	cmp	r3, #0
 801664a:	f000 80e4 	beq.w	8016816 <tcp_process+0x32e>
 801664e:	4b4c      	ldr	r3, [pc, #304]	; (8016780 <tcp_process+0x298>)
 8016650:	781b      	ldrb	r3, [r3, #0]
 8016652:	f003 0302 	and.w	r3, r3, #2
 8016656:	2b00      	cmp	r3, #0
 8016658:	f000 80dd 	beq.w	8016816 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 801665c:	687b      	ldr	r3, [r7, #4]
 801665e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016660:	1c5a      	adds	r2, r3, #1
 8016662:	4b48      	ldr	r3, [pc, #288]	; (8016784 <tcp_process+0x29c>)
 8016664:	681b      	ldr	r3, [r3, #0]
 8016666:	429a      	cmp	r2, r3
 8016668:	f040 80d5 	bne.w	8016816 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 801666c:	4b46      	ldr	r3, [pc, #280]	; (8016788 <tcp_process+0x2a0>)
 801666e:	681b      	ldr	r3, [r3, #0]
 8016670:	1c5a      	adds	r2, r3, #1
 8016672:	687b      	ldr	r3, [r7, #4]
 8016674:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8016676:	687b      	ldr	r3, [r7, #4]
 8016678:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801667a:	687b      	ldr	r3, [r7, #4]
 801667c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 801667e:	4b41      	ldr	r3, [pc, #260]	; (8016784 <tcp_process+0x29c>)
 8016680:	681a      	ldr	r2, [r3, #0]
 8016682:	687b      	ldr	r3, [r7, #4]
 8016684:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8016686:	4b44      	ldr	r3, [pc, #272]	; (8016798 <tcp_process+0x2b0>)
 8016688:	681b      	ldr	r3, [r3, #0]
 801668a:	89db      	ldrh	r3, [r3, #14]
 801668c:	b29a      	uxth	r2, r3
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8016694:	687b      	ldr	r3, [r7, #4]
 8016696:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801669a:	687b      	ldr	r3, [r7, #4]
 801669c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 80166a0:	4b39      	ldr	r3, [pc, #228]	; (8016788 <tcp_process+0x2a0>)
 80166a2:	681b      	ldr	r3, [r3, #0]
 80166a4:	1e5a      	subs	r2, r3, #1
 80166a6:	687b      	ldr	r3, [r7, #4]
 80166a8:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 80166aa:	687b      	ldr	r3, [r7, #4]
 80166ac:	2204      	movs	r2, #4
 80166ae:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 80166b0:	687b      	ldr	r3, [r7, #4]
 80166b2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 80166b4:	687b      	ldr	r3, [r7, #4]
 80166b6:	3304      	adds	r3, #4
 80166b8:	4618      	mov	r0, r3
 80166ba:	f004 fe11 	bl	801b2e0 <ip4_route>
 80166be:	4601      	mov	r1, r0
 80166c0:	687b      	ldr	r3, [r7, #4]
 80166c2:	3304      	adds	r3, #4
 80166c4:	461a      	mov	r2, r3
 80166c6:	4620      	mov	r0, r4
 80166c8:	f7ff f88c 	bl	80157e4 <tcp_eff_send_mss_netif>
 80166cc:	4603      	mov	r3, r0
 80166ce:	461a      	mov	r2, r3
 80166d0:	687b      	ldr	r3, [r7, #4]
 80166d2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80166d4:	687b      	ldr	r3, [r7, #4]
 80166d6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80166d8:	009a      	lsls	r2, r3, #2
 80166da:	687b      	ldr	r3, [r7, #4]
 80166dc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80166de:	005b      	lsls	r3, r3, #1
 80166e0:	f241 111c 	movw	r1, #4380	; 0x111c
 80166e4:	428b      	cmp	r3, r1
 80166e6:	bf38      	it	cc
 80166e8:	460b      	movcc	r3, r1
 80166ea:	429a      	cmp	r2, r3
 80166ec:	d204      	bcs.n	80166f8 <tcp_process+0x210>
 80166ee:	687b      	ldr	r3, [r7, #4]
 80166f0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80166f2:	009b      	lsls	r3, r3, #2
 80166f4:	b29b      	uxth	r3, r3
 80166f6:	e00d      	b.n	8016714 <tcp_process+0x22c>
 80166f8:	687b      	ldr	r3, [r7, #4]
 80166fa:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80166fc:	005b      	lsls	r3, r3, #1
 80166fe:	f241 121c 	movw	r2, #4380	; 0x111c
 8016702:	4293      	cmp	r3, r2
 8016704:	d904      	bls.n	8016710 <tcp_process+0x228>
 8016706:	687b      	ldr	r3, [r7, #4]
 8016708:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801670a:	005b      	lsls	r3, r3, #1
 801670c:	b29b      	uxth	r3, r3
 801670e:	e001      	b.n	8016714 <tcp_process+0x22c>
 8016710:	f241 131c 	movw	r3, #4380	; 0x111c
 8016714:	687a      	ldr	r2, [r7, #4]
 8016716:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 801671a:	687b      	ldr	r3, [r7, #4]
 801671c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016720:	2b00      	cmp	r3, #0
 8016722:	d106      	bne.n	8016732 <tcp_process+0x24a>
 8016724:	4b13      	ldr	r3, [pc, #76]	; (8016774 <tcp_process+0x28c>)
 8016726:	f44f 725b 	mov.w	r2, #876	; 0x36c
 801672a:	491c      	ldr	r1, [pc, #112]	; (801679c <tcp_process+0x2b4>)
 801672c:	4813      	ldr	r0, [pc, #76]	; (801677c <tcp_process+0x294>)
 801672e:	f007 fb07 	bl	801dd40 <iprintf>
        --pcb->snd_queuelen;
 8016732:	687b      	ldr	r3, [r7, #4]
 8016734:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016738:	3b01      	subs	r3, #1
 801673a:	b29a      	uxth	r2, r3
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8016742:	687b      	ldr	r3, [r7, #4]
 8016744:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016746:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8016748:	69fb      	ldr	r3, [r7, #28]
 801674a:	2b00      	cmp	r3, #0
 801674c:	d12a      	bne.n	80167a4 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 801674e:	687b      	ldr	r3, [r7, #4]
 8016750:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016752:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8016754:	69fb      	ldr	r3, [r7, #28]
 8016756:	2b00      	cmp	r3, #0
 8016758:	d106      	bne.n	8016768 <tcp_process+0x280>
 801675a:	4b06      	ldr	r3, [pc, #24]	; (8016774 <tcp_process+0x28c>)
 801675c:	f44f 725d 	mov.w	r2, #884	; 0x374
 8016760:	490f      	ldr	r1, [pc, #60]	; (80167a0 <tcp_process+0x2b8>)
 8016762:	4806      	ldr	r0, [pc, #24]	; (801677c <tcp_process+0x294>)
 8016764:	f007 faec 	bl	801dd40 <iprintf>
          pcb->unsent = rseg->next;
 8016768:	69fb      	ldr	r3, [r7, #28]
 801676a:	681a      	ldr	r2, [r3, #0]
 801676c:	687b      	ldr	r3, [r7, #4]
 801676e:	66da      	str	r2, [r3, #108]	; 0x6c
 8016770:	e01c      	b.n	80167ac <tcp_process+0x2c4>
 8016772:	bf00      	nop
 8016774:	0801fffc 	.word	0x0801fffc
 8016778:	08020234 	.word	0x08020234
 801677c:	08020048 	.word	0x08020048
 8016780:	200240e4 	.word	0x200240e4
 8016784:	200240dc 	.word	0x200240dc
 8016788:	200240d8 	.word	0x200240d8
 801678c:	08020250 	.word	0x08020250
 8016790:	200240e5 	.word	0x200240e5
 8016794:	200240a0 	.word	0x200240a0
 8016798:	200240c8 	.word	0x200240c8
 801679c:	08020270 	.word	0x08020270
 80167a0:	08020288 	.word	0x08020288
        } else {
          pcb->unacked = rseg->next;
 80167a4:	69fb      	ldr	r3, [r7, #28]
 80167a6:	681a      	ldr	r2, [r3, #0]
 80167a8:	687b      	ldr	r3, [r7, #4]
 80167aa:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 80167ac:	69f8      	ldr	r0, [r7, #28]
 80167ae:	f7fe fd22 	bl	80151f6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 80167b2:	687b      	ldr	r3, [r7, #4]
 80167b4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d104      	bne.n	80167c4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80167c0:	861a      	strh	r2, [r3, #48]	; 0x30
 80167c2:	e006      	b.n	80167d2 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 80167c4:	687b      	ldr	r3, [r7, #4]
 80167c6:	2200      	movs	r2, #0
 80167c8:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 80167ca:	687b      	ldr	r3, [r7, #4]
 80167cc:	2200      	movs	r2, #0
 80167ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 80167d2:	687b      	ldr	r3, [r7, #4]
 80167d4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80167d8:	2b00      	cmp	r3, #0
 80167da:	d00a      	beq.n	80167f2 <tcp_process+0x30a>
 80167dc:	687b      	ldr	r3, [r7, #4]
 80167de:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80167e2:	687a      	ldr	r2, [r7, #4]
 80167e4:	6910      	ldr	r0, [r2, #16]
 80167e6:	2200      	movs	r2, #0
 80167e8:	6879      	ldr	r1, [r7, #4]
 80167ea:	4798      	blx	r3
 80167ec:	4603      	mov	r3, r0
 80167ee:	76bb      	strb	r3, [r7, #26]
 80167f0:	e001      	b.n	80167f6 <tcp_process+0x30e>
 80167f2:	2300      	movs	r3, #0
 80167f4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80167f6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80167fa:	f113 0f0d 	cmn.w	r3, #13
 80167fe:	d102      	bne.n	8016806 <tcp_process+0x31e>
          return ERR_ABRT;
 8016800:	f06f 030c 	mvn.w	r3, #12
 8016804:	e250      	b.n	8016ca8 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8016806:	687b      	ldr	r3, [r7, #4]
 8016808:	8b5b      	ldrh	r3, [r3, #26]
 801680a:	f043 0302 	orr.w	r3, r3, #2
 801680e:	b29a      	uxth	r2, r3
 8016810:	687b      	ldr	r3, [r7, #4]
 8016812:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8016814:	e23a      	b.n	8016c8c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8016816:	4b98      	ldr	r3, [pc, #608]	; (8016a78 <tcp_process+0x590>)
 8016818:	781b      	ldrb	r3, [r3, #0]
 801681a:	f003 0310 	and.w	r3, r3, #16
 801681e:	2b00      	cmp	r3, #0
 8016820:	f000 8234 	beq.w	8016c8c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016824:	4b95      	ldr	r3, [pc, #596]	; (8016a7c <tcp_process+0x594>)
 8016826:	6819      	ldr	r1, [r3, #0]
 8016828:	4b95      	ldr	r3, [pc, #596]	; (8016a80 <tcp_process+0x598>)
 801682a:	881b      	ldrh	r3, [r3, #0]
 801682c:	461a      	mov	r2, r3
 801682e:	4b95      	ldr	r3, [pc, #596]	; (8016a84 <tcp_process+0x59c>)
 8016830:	681b      	ldr	r3, [r3, #0]
 8016832:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016834:	4b94      	ldr	r3, [pc, #592]	; (8016a88 <tcp_process+0x5a0>)
 8016836:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016838:	885b      	ldrh	r3, [r3, #2]
 801683a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801683c:	4a92      	ldr	r2, [pc, #584]	; (8016a88 <tcp_process+0x5a0>)
 801683e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016840:	8812      	ldrh	r2, [r2, #0]
 8016842:	b292      	uxth	r2, r2
 8016844:	9202      	str	r2, [sp, #8]
 8016846:	9301      	str	r3, [sp, #4]
 8016848:	4b90      	ldr	r3, [pc, #576]	; (8016a8c <tcp_process+0x5a4>)
 801684a:	9300      	str	r3, [sp, #0]
 801684c:	4b90      	ldr	r3, [pc, #576]	; (8016a90 <tcp_process+0x5a8>)
 801684e:	4602      	mov	r2, r0
 8016850:	6878      	ldr	r0, [r7, #4]
 8016852:	f002 fc85 	bl	8019160 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8016856:	687b      	ldr	r3, [r7, #4]
 8016858:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801685c:	2b05      	cmp	r3, #5
 801685e:	f200 8215 	bhi.w	8016c8c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8016862:	687b      	ldr	r3, [r7, #4]
 8016864:	2200      	movs	r2, #0
 8016866:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8016868:	6878      	ldr	r0, [r7, #4]
 801686a:	f002 fa51 	bl	8018d10 <tcp_rexmit_rto>
      break;
 801686e:	e20d      	b.n	8016c8c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8016870:	4b81      	ldr	r3, [pc, #516]	; (8016a78 <tcp_process+0x590>)
 8016872:	781b      	ldrb	r3, [r3, #0]
 8016874:	f003 0310 	and.w	r3, r3, #16
 8016878:	2b00      	cmp	r3, #0
 801687a:	f000 80a1 	beq.w	80169c0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801687e:	4b7f      	ldr	r3, [pc, #508]	; (8016a7c <tcp_process+0x594>)
 8016880:	681a      	ldr	r2, [r3, #0]
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016886:	1ad3      	subs	r3, r2, r3
 8016888:	3b01      	subs	r3, #1
 801688a:	2b00      	cmp	r3, #0
 801688c:	db7e      	blt.n	801698c <tcp_process+0x4a4>
 801688e:	4b7b      	ldr	r3, [pc, #492]	; (8016a7c <tcp_process+0x594>)
 8016890:	681a      	ldr	r2, [r3, #0]
 8016892:	687b      	ldr	r3, [r7, #4]
 8016894:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016896:	1ad3      	subs	r3, r2, r3
 8016898:	2b00      	cmp	r3, #0
 801689a:	dc77      	bgt.n	801698c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	2204      	movs	r2, #4
 80168a0:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 80168a2:	687b      	ldr	r3, [r7, #4]
 80168a4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80168a6:	2b00      	cmp	r3, #0
 80168a8:	d102      	bne.n	80168b0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 80168aa:	23fa      	movs	r3, #250	; 0xfa
 80168ac:	76bb      	strb	r3, [r7, #26]
 80168ae:	e01d      	b.n	80168ec <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80168b0:	687b      	ldr	r3, [r7, #4]
 80168b2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80168b4:	699b      	ldr	r3, [r3, #24]
 80168b6:	2b00      	cmp	r3, #0
 80168b8:	d106      	bne.n	80168c8 <tcp_process+0x3e0>
 80168ba:	4b76      	ldr	r3, [pc, #472]	; (8016a94 <tcp_process+0x5ac>)
 80168bc:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80168c0:	4975      	ldr	r1, [pc, #468]	; (8016a98 <tcp_process+0x5b0>)
 80168c2:	4876      	ldr	r0, [pc, #472]	; (8016a9c <tcp_process+0x5b4>)
 80168c4:	f007 fa3c 	bl	801dd40 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80168c8:	687b      	ldr	r3, [r7, #4]
 80168ca:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80168cc:	699b      	ldr	r3, [r3, #24]
 80168ce:	2b00      	cmp	r3, #0
 80168d0:	d00a      	beq.n	80168e8 <tcp_process+0x400>
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80168d6:	699b      	ldr	r3, [r3, #24]
 80168d8:	687a      	ldr	r2, [r7, #4]
 80168da:	6910      	ldr	r0, [r2, #16]
 80168dc:	2200      	movs	r2, #0
 80168de:	6879      	ldr	r1, [r7, #4]
 80168e0:	4798      	blx	r3
 80168e2:	4603      	mov	r3, r0
 80168e4:	76bb      	strb	r3, [r7, #26]
 80168e6:	e001      	b.n	80168ec <tcp_process+0x404>
 80168e8:	23f0      	movs	r3, #240	; 0xf0
 80168ea:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80168ec:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80168f0:	2b00      	cmp	r3, #0
 80168f2:	d00a      	beq.n	801690a <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80168f4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80168f8:	f113 0f0d 	cmn.w	r3, #13
 80168fc:	d002      	beq.n	8016904 <tcp_process+0x41c>
              tcp_abort(pcb);
 80168fe:	6878      	ldr	r0, [r7, #4]
 8016900:	f7fd ff8e 	bl	8014820 <tcp_abort>
            }
            return ERR_ABRT;
 8016904:	f06f 030c 	mvn.w	r3, #12
 8016908:	e1ce      	b.n	8016ca8 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 801690a:	6878      	ldr	r0, [r7, #4]
 801690c:	f000 fae0 	bl	8016ed0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8016910:	4b63      	ldr	r3, [pc, #396]	; (8016aa0 <tcp_process+0x5b8>)
 8016912:	881b      	ldrh	r3, [r3, #0]
 8016914:	2b00      	cmp	r3, #0
 8016916:	d005      	beq.n	8016924 <tcp_process+0x43c>
            recv_acked--;
 8016918:	4b61      	ldr	r3, [pc, #388]	; (8016aa0 <tcp_process+0x5b8>)
 801691a:	881b      	ldrh	r3, [r3, #0]
 801691c:	3b01      	subs	r3, #1
 801691e:	b29a      	uxth	r2, r3
 8016920:	4b5f      	ldr	r3, [pc, #380]	; (8016aa0 <tcp_process+0x5b8>)
 8016922:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8016924:	687b      	ldr	r3, [r7, #4]
 8016926:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016928:	009a      	lsls	r2, r3, #2
 801692a:	687b      	ldr	r3, [r7, #4]
 801692c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801692e:	005b      	lsls	r3, r3, #1
 8016930:	f241 111c 	movw	r1, #4380	; 0x111c
 8016934:	428b      	cmp	r3, r1
 8016936:	bf38      	it	cc
 8016938:	460b      	movcc	r3, r1
 801693a:	429a      	cmp	r2, r3
 801693c:	d204      	bcs.n	8016948 <tcp_process+0x460>
 801693e:	687b      	ldr	r3, [r7, #4]
 8016940:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016942:	009b      	lsls	r3, r3, #2
 8016944:	b29b      	uxth	r3, r3
 8016946:	e00d      	b.n	8016964 <tcp_process+0x47c>
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801694c:	005b      	lsls	r3, r3, #1
 801694e:	f241 121c 	movw	r2, #4380	; 0x111c
 8016952:	4293      	cmp	r3, r2
 8016954:	d904      	bls.n	8016960 <tcp_process+0x478>
 8016956:	687b      	ldr	r3, [r7, #4]
 8016958:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801695a:	005b      	lsls	r3, r3, #1
 801695c:	b29b      	uxth	r3, r3
 801695e:	e001      	b.n	8016964 <tcp_process+0x47c>
 8016960:	f241 131c 	movw	r3, #4380	; 0x111c
 8016964:	687a      	ldr	r2, [r7, #4]
 8016966:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801696a:	4b4e      	ldr	r3, [pc, #312]	; (8016aa4 <tcp_process+0x5bc>)
 801696c:	781b      	ldrb	r3, [r3, #0]
 801696e:	f003 0320 	and.w	r3, r3, #32
 8016972:	2b00      	cmp	r3, #0
 8016974:	d037      	beq.n	80169e6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8016976:	687b      	ldr	r3, [r7, #4]
 8016978:	8b5b      	ldrh	r3, [r3, #26]
 801697a:	f043 0302 	orr.w	r3, r3, #2
 801697e:	b29a      	uxth	r2, r3
 8016980:	687b      	ldr	r3, [r7, #4]
 8016982:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8016984:	687b      	ldr	r3, [r7, #4]
 8016986:	2207      	movs	r2, #7
 8016988:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801698a:	e02c      	b.n	80169e6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801698c:	4b3b      	ldr	r3, [pc, #236]	; (8016a7c <tcp_process+0x594>)
 801698e:	6819      	ldr	r1, [r3, #0]
 8016990:	4b3b      	ldr	r3, [pc, #236]	; (8016a80 <tcp_process+0x598>)
 8016992:	881b      	ldrh	r3, [r3, #0]
 8016994:	461a      	mov	r2, r3
 8016996:	4b3b      	ldr	r3, [pc, #236]	; (8016a84 <tcp_process+0x59c>)
 8016998:	681b      	ldr	r3, [r3, #0]
 801699a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801699c:	4b3a      	ldr	r3, [pc, #232]	; (8016a88 <tcp_process+0x5a0>)
 801699e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80169a0:	885b      	ldrh	r3, [r3, #2]
 80169a2:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80169a4:	4a38      	ldr	r2, [pc, #224]	; (8016a88 <tcp_process+0x5a0>)
 80169a6:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80169a8:	8812      	ldrh	r2, [r2, #0]
 80169aa:	b292      	uxth	r2, r2
 80169ac:	9202      	str	r2, [sp, #8]
 80169ae:	9301      	str	r3, [sp, #4]
 80169b0:	4b36      	ldr	r3, [pc, #216]	; (8016a8c <tcp_process+0x5a4>)
 80169b2:	9300      	str	r3, [sp, #0]
 80169b4:	4b36      	ldr	r3, [pc, #216]	; (8016a90 <tcp_process+0x5a8>)
 80169b6:	4602      	mov	r2, r0
 80169b8:	6878      	ldr	r0, [r7, #4]
 80169ba:	f002 fbd1 	bl	8019160 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80169be:	e167      	b.n	8016c90 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80169c0:	4b2d      	ldr	r3, [pc, #180]	; (8016a78 <tcp_process+0x590>)
 80169c2:	781b      	ldrb	r3, [r3, #0]
 80169c4:	f003 0302 	and.w	r3, r3, #2
 80169c8:	2b00      	cmp	r3, #0
 80169ca:	f000 8161 	beq.w	8016c90 <tcp_process+0x7a8>
 80169ce:	687b      	ldr	r3, [r7, #4]
 80169d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80169d2:	1e5a      	subs	r2, r3, #1
 80169d4:	4b2b      	ldr	r3, [pc, #172]	; (8016a84 <tcp_process+0x59c>)
 80169d6:	681b      	ldr	r3, [r3, #0]
 80169d8:	429a      	cmp	r2, r3
 80169da:	f040 8159 	bne.w	8016c90 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80169de:	6878      	ldr	r0, [r7, #4]
 80169e0:	f002 f9b8 	bl	8018d54 <tcp_rexmit>
      break;
 80169e4:	e154      	b.n	8016c90 <tcp_process+0x7a8>
 80169e6:	e153      	b.n	8016c90 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80169e8:	6878      	ldr	r0, [r7, #4]
 80169ea:	f000 fa71 	bl	8016ed0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80169ee:	4b2d      	ldr	r3, [pc, #180]	; (8016aa4 <tcp_process+0x5bc>)
 80169f0:	781b      	ldrb	r3, [r3, #0]
 80169f2:	f003 0320 	and.w	r3, r3, #32
 80169f6:	2b00      	cmp	r3, #0
 80169f8:	f000 814c 	beq.w	8016c94 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80169fc:	687b      	ldr	r3, [r7, #4]
 80169fe:	8b5b      	ldrh	r3, [r3, #26]
 8016a00:	f043 0302 	orr.w	r3, r3, #2
 8016a04:	b29a      	uxth	r2, r3
 8016a06:	687b      	ldr	r3, [r7, #4]
 8016a08:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	2207      	movs	r2, #7
 8016a0e:	751a      	strb	r2, [r3, #20]
      }
      break;
 8016a10:	e140      	b.n	8016c94 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8016a12:	6878      	ldr	r0, [r7, #4]
 8016a14:	f000 fa5c 	bl	8016ed0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8016a18:	4b22      	ldr	r3, [pc, #136]	; (8016aa4 <tcp_process+0x5bc>)
 8016a1a:	781b      	ldrb	r3, [r3, #0]
 8016a1c:	f003 0320 	and.w	r3, r3, #32
 8016a20:	2b00      	cmp	r3, #0
 8016a22:	d071      	beq.n	8016b08 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016a24:	4b14      	ldr	r3, [pc, #80]	; (8016a78 <tcp_process+0x590>)
 8016a26:	781b      	ldrb	r3, [r3, #0]
 8016a28:	f003 0310 	and.w	r3, r3, #16
 8016a2c:	2b00      	cmp	r3, #0
 8016a2e:	d060      	beq.n	8016af2 <tcp_process+0x60a>
 8016a30:	687b      	ldr	r3, [r7, #4]
 8016a32:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016a34:	4b11      	ldr	r3, [pc, #68]	; (8016a7c <tcp_process+0x594>)
 8016a36:	681b      	ldr	r3, [r3, #0]
 8016a38:	429a      	cmp	r2, r3
 8016a3a:	d15a      	bne.n	8016af2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 8016a3c:	687b      	ldr	r3, [r7, #4]
 8016a3e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016a40:	2b00      	cmp	r3, #0
 8016a42:	d156      	bne.n	8016af2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8016a44:	687b      	ldr	r3, [r7, #4]
 8016a46:	8b5b      	ldrh	r3, [r3, #26]
 8016a48:	f043 0302 	orr.w	r3, r3, #2
 8016a4c:	b29a      	uxth	r2, r3
 8016a4e:	687b      	ldr	r3, [r7, #4]
 8016a50:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8016a52:	6878      	ldr	r0, [r7, #4]
 8016a54:	f7fe fdbc 	bl	80155d0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8016a58:	4b13      	ldr	r3, [pc, #76]	; (8016aa8 <tcp_process+0x5c0>)
 8016a5a:	681b      	ldr	r3, [r3, #0]
 8016a5c:	687a      	ldr	r2, [r7, #4]
 8016a5e:	429a      	cmp	r2, r3
 8016a60:	d105      	bne.n	8016a6e <tcp_process+0x586>
 8016a62:	4b11      	ldr	r3, [pc, #68]	; (8016aa8 <tcp_process+0x5c0>)
 8016a64:	681b      	ldr	r3, [r3, #0]
 8016a66:	68db      	ldr	r3, [r3, #12]
 8016a68:	4a0f      	ldr	r2, [pc, #60]	; (8016aa8 <tcp_process+0x5c0>)
 8016a6a:	6013      	str	r3, [r2, #0]
 8016a6c:	e02e      	b.n	8016acc <tcp_process+0x5e4>
 8016a6e:	4b0e      	ldr	r3, [pc, #56]	; (8016aa8 <tcp_process+0x5c0>)
 8016a70:	681b      	ldr	r3, [r3, #0]
 8016a72:	617b      	str	r3, [r7, #20]
 8016a74:	e027      	b.n	8016ac6 <tcp_process+0x5de>
 8016a76:	bf00      	nop
 8016a78:	200240e4 	.word	0x200240e4
 8016a7c:	200240dc 	.word	0x200240dc
 8016a80:	200240e2 	.word	0x200240e2
 8016a84:	200240d8 	.word	0x200240d8
 8016a88:	200240c8 	.word	0x200240c8
 8016a8c:	2001e7cc 	.word	0x2001e7cc
 8016a90:	2001e7d0 	.word	0x2001e7d0
 8016a94:	0801fffc 	.word	0x0801fffc
 8016a98:	0802029c 	.word	0x0802029c
 8016a9c:	08020048 	.word	0x08020048
 8016aa0:	200240e0 	.word	0x200240e0
 8016aa4:	200240e5 	.word	0x200240e5
 8016aa8:	200240ac 	.word	0x200240ac
 8016aac:	697b      	ldr	r3, [r7, #20]
 8016aae:	68db      	ldr	r3, [r3, #12]
 8016ab0:	687a      	ldr	r2, [r7, #4]
 8016ab2:	429a      	cmp	r2, r3
 8016ab4:	d104      	bne.n	8016ac0 <tcp_process+0x5d8>
 8016ab6:	687b      	ldr	r3, [r7, #4]
 8016ab8:	68da      	ldr	r2, [r3, #12]
 8016aba:	697b      	ldr	r3, [r7, #20]
 8016abc:	60da      	str	r2, [r3, #12]
 8016abe:	e005      	b.n	8016acc <tcp_process+0x5e4>
 8016ac0:	697b      	ldr	r3, [r7, #20]
 8016ac2:	68db      	ldr	r3, [r3, #12]
 8016ac4:	617b      	str	r3, [r7, #20]
 8016ac6:	697b      	ldr	r3, [r7, #20]
 8016ac8:	2b00      	cmp	r3, #0
 8016aca:	d1ef      	bne.n	8016aac <tcp_process+0x5c4>
 8016acc:	687b      	ldr	r3, [r7, #4]
 8016ace:	2200      	movs	r2, #0
 8016ad0:	60da      	str	r2, [r3, #12]
 8016ad2:	4b77      	ldr	r3, [pc, #476]	; (8016cb0 <tcp_process+0x7c8>)
 8016ad4:	2201      	movs	r2, #1
 8016ad6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	220a      	movs	r2, #10
 8016adc:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8016ade:	4b75      	ldr	r3, [pc, #468]	; (8016cb4 <tcp_process+0x7cc>)
 8016ae0:	681a      	ldr	r2, [r3, #0]
 8016ae2:	687b      	ldr	r3, [r7, #4]
 8016ae4:	60da      	str	r2, [r3, #12]
 8016ae6:	4a73      	ldr	r2, [pc, #460]	; (8016cb4 <tcp_process+0x7cc>)
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	6013      	str	r3, [r2, #0]
 8016aec:	f002 fcfa 	bl	80194e4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 8016af0:	e0d2      	b.n	8016c98 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	8b5b      	ldrh	r3, [r3, #26]
 8016af6:	f043 0302 	orr.w	r3, r3, #2
 8016afa:	b29a      	uxth	r2, r3
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 8016b00:	687b      	ldr	r3, [r7, #4]
 8016b02:	2208      	movs	r2, #8
 8016b04:	751a      	strb	r2, [r3, #20]
      break;
 8016b06:	e0c7      	b.n	8016c98 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016b08:	4b6b      	ldr	r3, [pc, #428]	; (8016cb8 <tcp_process+0x7d0>)
 8016b0a:	781b      	ldrb	r3, [r3, #0]
 8016b0c:	f003 0310 	and.w	r3, r3, #16
 8016b10:	2b00      	cmp	r3, #0
 8016b12:	f000 80c1 	beq.w	8016c98 <tcp_process+0x7b0>
 8016b16:	687b      	ldr	r3, [r7, #4]
 8016b18:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016b1a:	4b68      	ldr	r3, [pc, #416]	; (8016cbc <tcp_process+0x7d4>)
 8016b1c:	681b      	ldr	r3, [r3, #0]
 8016b1e:	429a      	cmp	r2, r3
 8016b20:	f040 80ba 	bne.w	8016c98 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8016b24:	687b      	ldr	r3, [r7, #4]
 8016b26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016b28:	2b00      	cmp	r3, #0
 8016b2a:	f040 80b5 	bne.w	8016c98 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 8016b2e:	687b      	ldr	r3, [r7, #4]
 8016b30:	2206      	movs	r2, #6
 8016b32:	751a      	strb	r2, [r3, #20]
      break;
 8016b34:	e0b0      	b.n	8016c98 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8016b36:	6878      	ldr	r0, [r7, #4]
 8016b38:	f000 f9ca 	bl	8016ed0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8016b3c:	4b60      	ldr	r3, [pc, #384]	; (8016cc0 <tcp_process+0x7d8>)
 8016b3e:	781b      	ldrb	r3, [r3, #0]
 8016b40:	f003 0320 	and.w	r3, r3, #32
 8016b44:	2b00      	cmp	r3, #0
 8016b46:	f000 80a9 	beq.w	8016c9c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8016b4a:	687b      	ldr	r3, [r7, #4]
 8016b4c:	8b5b      	ldrh	r3, [r3, #26]
 8016b4e:	f043 0302 	orr.w	r3, r3, #2
 8016b52:	b29a      	uxth	r2, r3
 8016b54:	687b      	ldr	r3, [r7, #4]
 8016b56:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8016b58:	6878      	ldr	r0, [r7, #4]
 8016b5a:	f7fe fd39 	bl	80155d0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8016b5e:	4b59      	ldr	r3, [pc, #356]	; (8016cc4 <tcp_process+0x7dc>)
 8016b60:	681b      	ldr	r3, [r3, #0]
 8016b62:	687a      	ldr	r2, [r7, #4]
 8016b64:	429a      	cmp	r2, r3
 8016b66:	d105      	bne.n	8016b74 <tcp_process+0x68c>
 8016b68:	4b56      	ldr	r3, [pc, #344]	; (8016cc4 <tcp_process+0x7dc>)
 8016b6a:	681b      	ldr	r3, [r3, #0]
 8016b6c:	68db      	ldr	r3, [r3, #12]
 8016b6e:	4a55      	ldr	r2, [pc, #340]	; (8016cc4 <tcp_process+0x7dc>)
 8016b70:	6013      	str	r3, [r2, #0]
 8016b72:	e013      	b.n	8016b9c <tcp_process+0x6b4>
 8016b74:	4b53      	ldr	r3, [pc, #332]	; (8016cc4 <tcp_process+0x7dc>)
 8016b76:	681b      	ldr	r3, [r3, #0]
 8016b78:	613b      	str	r3, [r7, #16]
 8016b7a:	e00c      	b.n	8016b96 <tcp_process+0x6ae>
 8016b7c:	693b      	ldr	r3, [r7, #16]
 8016b7e:	68db      	ldr	r3, [r3, #12]
 8016b80:	687a      	ldr	r2, [r7, #4]
 8016b82:	429a      	cmp	r2, r3
 8016b84:	d104      	bne.n	8016b90 <tcp_process+0x6a8>
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	68da      	ldr	r2, [r3, #12]
 8016b8a:	693b      	ldr	r3, [r7, #16]
 8016b8c:	60da      	str	r2, [r3, #12]
 8016b8e:	e005      	b.n	8016b9c <tcp_process+0x6b4>
 8016b90:	693b      	ldr	r3, [r7, #16]
 8016b92:	68db      	ldr	r3, [r3, #12]
 8016b94:	613b      	str	r3, [r7, #16]
 8016b96:	693b      	ldr	r3, [r7, #16]
 8016b98:	2b00      	cmp	r3, #0
 8016b9a:	d1ef      	bne.n	8016b7c <tcp_process+0x694>
 8016b9c:	687b      	ldr	r3, [r7, #4]
 8016b9e:	2200      	movs	r2, #0
 8016ba0:	60da      	str	r2, [r3, #12]
 8016ba2:	4b43      	ldr	r3, [pc, #268]	; (8016cb0 <tcp_process+0x7c8>)
 8016ba4:	2201      	movs	r2, #1
 8016ba6:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8016ba8:	687b      	ldr	r3, [r7, #4]
 8016baa:	220a      	movs	r2, #10
 8016bac:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8016bae:	4b41      	ldr	r3, [pc, #260]	; (8016cb4 <tcp_process+0x7cc>)
 8016bb0:	681a      	ldr	r2, [r3, #0]
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	60da      	str	r2, [r3, #12]
 8016bb6:	4a3f      	ldr	r2, [pc, #252]	; (8016cb4 <tcp_process+0x7cc>)
 8016bb8:	687b      	ldr	r3, [r7, #4]
 8016bba:	6013      	str	r3, [r2, #0]
 8016bbc:	f002 fc92 	bl	80194e4 <tcp_timer_needed>
      }
      break;
 8016bc0:	e06c      	b.n	8016c9c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 8016bc2:	6878      	ldr	r0, [r7, #4]
 8016bc4:	f000 f984 	bl	8016ed0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8016bc8:	4b3b      	ldr	r3, [pc, #236]	; (8016cb8 <tcp_process+0x7d0>)
 8016bca:	781b      	ldrb	r3, [r3, #0]
 8016bcc:	f003 0310 	and.w	r3, r3, #16
 8016bd0:	2b00      	cmp	r3, #0
 8016bd2:	d065      	beq.n	8016ca0 <tcp_process+0x7b8>
 8016bd4:	687b      	ldr	r3, [r7, #4]
 8016bd6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016bd8:	4b38      	ldr	r3, [pc, #224]	; (8016cbc <tcp_process+0x7d4>)
 8016bda:	681b      	ldr	r3, [r3, #0]
 8016bdc:	429a      	cmp	r2, r3
 8016bde:	d15f      	bne.n	8016ca0 <tcp_process+0x7b8>
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016be4:	2b00      	cmp	r3, #0
 8016be6:	d15b      	bne.n	8016ca0 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 8016be8:	6878      	ldr	r0, [r7, #4]
 8016bea:	f7fe fcf1 	bl	80155d0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8016bee:	4b35      	ldr	r3, [pc, #212]	; (8016cc4 <tcp_process+0x7dc>)
 8016bf0:	681b      	ldr	r3, [r3, #0]
 8016bf2:	687a      	ldr	r2, [r7, #4]
 8016bf4:	429a      	cmp	r2, r3
 8016bf6:	d105      	bne.n	8016c04 <tcp_process+0x71c>
 8016bf8:	4b32      	ldr	r3, [pc, #200]	; (8016cc4 <tcp_process+0x7dc>)
 8016bfa:	681b      	ldr	r3, [r3, #0]
 8016bfc:	68db      	ldr	r3, [r3, #12]
 8016bfe:	4a31      	ldr	r2, [pc, #196]	; (8016cc4 <tcp_process+0x7dc>)
 8016c00:	6013      	str	r3, [r2, #0]
 8016c02:	e013      	b.n	8016c2c <tcp_process+0x744>
 8016c04:	4b2f      	ldr	r3, [pc, #188]	; (8016cc4 <tcp_process+0x7dc>)
 8016c06:	681b      	ldr	r3, [r3, #0]
 8016c08:	60fb      	str	r3, [r7, #12]
 8016c0a:	e00c      	b.n	8016c26 <tcp_process+0x73e>
 8016c0c:	68fb      	ldr	r3, [r7, #12]
 8016c0e:	68db      	ldr	r3, [r3, #12]
 8016c10:	687a      	ldr	r2, [r7, #4]
 8016c12:	429a      	cmp	r2, r3
 8016c14:	d104      	bne.n	8016c20 <tcp_process+0x738>
 8016c16:	687b      	ldr	r3, [r7, #4]
 8016c18:	68da      	ldr	r2, [r3, #12]
 8016c1a:	68fb      	ldr	r3, [r7, #12]
 8016c1c:	60da      	str	r2, [r3, #12]
 8016c1e:	e005      	b.n	8016c2c <tcp_process+0x744>
 8016c20:	68fb      	ldr	r3, [r7, #12]
 8016c22:	68db      	ldr	r3, [r3, #12]
 8016c24:	60fb      	str	r3, [r7, #12]
 8016c26:	68fb      	ldr	r3, [r7, #12]
 8016c28:	2b00      	cmp	r3, #0
 8016c2a:	d1ef      	bne.n	8016c0c <tcp_process+0x724>
 8016c2c:	687b      	ldr	r3, [r7, #4]
 8016c2e:	2200      	movs	r2, #0
 8016c30:	60da      	str	r2, [r3, #12]
 8016c32:	4b1f      	ldr	r3, [pc, #124]	; (8016cb0 <tcp_process+0x7c8>)
 8016c34:	2201      	movs	r2, #1
 8016c36:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8016c38:	687b      	ldr	r3, [r7, #4]
 8016c3a:	220a      	movs	r2, #10
 8016c3c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8016c3e:	4b1d      	ldr	r3, [pc, #116]	; (8016cb4 <tcp_process+0x7cc>)
 8016c40:	681a      	ldr	r2, [r3, #0]
 8016c42:	687b      	ldr	r3, [r7, #4]
 8016c44:	60da      	str	r2, [r3, #12]
 8016c46:	4a1b      	ldr	r2, [pc, #108]	; (8016cb4 <tcp_process+0x7cc>)
 8016c48:	687b      	ldr	r3, [r7, #4]
 8016c4a:	6013      	str	r3, [r2, #0]
 8016c4c:	f002 fc4a 	bl	80194e4 <tcp_timer_needed>
      }
      break;
 8016c50:	e026      	b.n	8016ca0 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8016c52:	6878      	ldr	r0, [r7, #4]
 8016c54:	f000 f93c 	bl	8016ed0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8016c58:	4b17      	ldr	r3, [pc, #92]	; (8016cb8 <tcp_process+0x7d0>)
 8016c5a:	781b      	ldrb	r3, [r3, #0]
 8016c5c:	f003 0310 	and.w	r3, r3, #16
 8016c60:	2b00      	cmp	r3, #0
 8016c62:	d01f      	beq.n	8016ca4 <tcp_process+0x7bc>
 8016c64:	687b      	ldr	r3, [r7, #4]
 8016c66:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016c68:	4b14      	ldr	r3, [pc, #80]	; (8016cbc <tcp_process+0x7d4>)
 8016c6a:	681b      	ldr	r3, [r3, #0]
 8016c6c:	429a      	cmp	r2, r3
 8016c6e:	d119      	bne.n	8016ca4 <tcp_process+0x7bc>
 8016c70:	687b      	ldr	r3, [r7, #4]
 8016c72:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016c74:	2b00      	cmp	r3, #0
 8016c76:	d115      	bne.n	8016ca4 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8016c78:	4b11      	ldr	r3, [pc, #68]	; (8016cc0 <tcp_process+0x7d8>)
 8016c7a:	781b      	ldrb	r3, [r3, #0]
 8016c7c:	f043 0310 	orr.w	r3, r3, #16
 8016c80:	b2da      	uxtb	r2, r3
 8016c82:	4b0f      	ldr	r3, [pc, #60]	; (8016cc0 <tcp_process+0x7d8>)
 8016c84:	701a      	strb	r2, [r3, #0]
      }
      break;
 8016c86:	e00d      	b.n	8016ca4 <tcp_process+0x7bc>
    default:
      break;
 8016c88:	bf00      	nop
 8016c8a:	e00c      	b.n	8016ca6 <tcp_process+0x7be>
      break;
 8016c8c:	bf00      	nop
 8016c8e:	e00a      	b.n	8016ca6 <tcp_process+0x7be>
      break;
 8016c90:	bf00      	nop
 8016c92:	e008      	b.n	8016ca6 <tcp_process+0x7be>
      break;
 8016c94:	bf00      	nop
 8016c96:	e006      	b.n	8016ca6 <tcp_process+0x7be>
      break;
 8016c98:	bf00      	nop
 8016c9a:	e004      	b.n	8016ca6 <tcp_process+0x7be>
      break;
 8016c9c:	bf00      	nop
 8016c9e:	e002      	b.n	8016ca6 <tcp_process+0x7be>
      break;
 8016ca0:	bf00      	nop
 8016ca2:	e000      	b.n	8016ca6 <tcp_process+0x7be>
      break;
 8016ca4:	bf00      	nop
  }
  return ERR_OK;
 8016ca6:	2300      	movs	r3, #0
}
 8016ca8:	4618      	mov	r0, r3
 8016caa:	3724      	adds	r7, #36	; 0x24
 8016cac:	46bd      	mov	sp, r7
 8016cae:	bd90      	pop	{r4, r7, pc}
 8016cb0:	200240b4 	.word	0x200240b4
 8016cb4:	200240b0 	.word	0x200240b0
 8016cb8:	200240e4 	.word	0x200240e4
 8016cbc:	200240dc 	.word	0x200240dc
 8016cc0:	200240e5 	.word	0x200240e5
 8016cc4:	200240ac 	.word	0x200240ac

08016cc8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8016cc8:	b590      	push	{r4, r7, lr}
 8016cca:	b085      	sub	sp, #20
 8016ccc:	af00      	add	r7, sp, #0
 8016cce:	6078      	str	r0, [r7, #4]
 8016cd0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 8016cd2:	687b      	ldr	r3, [r7, #4]
 8016cd4:	2b00      	cmp	r3, #0
 8016cd6:	d106      	bne.n	8016ce6 <tcp_oos_insert_segment+0x1e>
 8016cd8:	4b3b      	ldr	r3, [pc, #236]	; (8016dc8 <tcp_oos_insert_segment+0x100>)
 8016cda:	f240 421f 	movw	r2, #1055	; 0x41f
 8016cde:	493b      	ldr	r1, [pc, #236]	; (8016dcc <tcp_oos_insert_segment+0x104>)
 8016ce0:	483b      	ldr	r0, [pc, #236]	; (8016dd0 <tcp_oos_insert_segment+0x108>)
 8016ce2:	f007 f82d 	bl	801dd40 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8016ce6:	687b      	ldr	r3, [r7, #4]
 8016ce8:	68db      	ldr	r3, [r3, #12]
 8016cea:	899b      	ldrh	r3, [r3, #12]
 8016cec:	b29b      	uxth	r3, r3
 8016cee:	4618      	mov	r0, r3
 8016cf0:	f7fb fbf0 	bl	80124d4 <lwip_htons>
 8016cf4:	4603      	mov	r3, r0
 8016cf6:	b2db      	uxtb	r3, r3
 8016cf8:	f003 0301 	and.w	r3, r3, #1
 8016cfc:	2b00      	cmp	r3, #0
 8016cfe:	d028      	beq.n	8016d52 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 8016d00:	6838      	ldr	r0, [r7, #0]
 8016d02:	f7fe fa63 	bl	80151cc <tcp_segs_free>
    next = NULL;
 8016d06:	2300      	movs	r3, #0
 8016d08:	603b      	str	r3, [r7, #0]
 8016d0a:	e056      	b.n	8016dba <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8016d0c:	683b      	ldr	r3, [r7, #0]
 8016d0e:	68db      	ldr	r3, [r3, #12]
 8016d10:	899b      	ldrh	r3, [r3, #12]
 8016d12:	b29b      	uxth	r3, r3
 8016d14:	4618      	mov	r0, r3
 8016d16:	f7fb fbdd 	bl	80124d4 <lwip_htons>
 8016d1a:	4603      	mov	r3, r0
 8016d1c:	b2db      	uxtb	r3, r3
 8016d1e:	f003 0301 	and.w	r3, r3, #1
 8016d22:	2b00      	cmp	r3, #0
 8016d24:	d00d      	beq.n	8016d42 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8016d26:	687b      	ldr	r3, [r7, #4]
 8016d28:	68db      	ldr	r3, [r3, #12]
 8016d2a:	899b      	ldrh	r3, [r3, #12]
 8016d2c:	b29c      	uxth	r4, r3
 8016d2e:	2001      	movs	r0, #1
 8016d30:	f7fb fbd0 	bl	80124d4 <lwip_htons>
 8016d34:	4603      	mov	r3, r0
 8016d36:	461a      	mov	r2, r3
 8016d38:	687b      	ldr	r3, [r7, #4]
 8016d3a:	68db      	ldr	r3, [r3, #12]
 8016d3c:	4322      	orrs	r2, r4
 8016d3e:	b292      	uxth	r2, r2
 8016d40:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8016d42:	683b      	ldr	r3, [r7, #0]
 8016d44:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8016d46:	683b      	ldr	r3, [r7, #0]
 8016d48:	681b      	ldr	r3, [r3, #0]
 8016d4a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8016d4c:	68f8      	ldr	r0, [r7, #12]
 8016d4e:	f7fe fa52 	bl	80151f6 <tcp_seg_free>
    while (next &&
 8016d52:	683b      	ldr	r3, [r7, #0]
 8016d54:	2b00      	cmp	r3, #0
 8016d56:	d00e      	beq.n	8016d76 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8016d58:	687b      	ldr	r3, [r7, #4]
 8016d5a:	891b      	ldrh	r3, [r3, #8]
 8016d5c:	461a      	mov	r2, r3
 8016d5e:	4b1d      	ldr	r3, [pc, #116]	; (8016dd4 <tcp_oos_insert_segment+0x10c>)
 8016d60:	681b      	ldr	r3, [r3, #0]
 8016d62:	441a      	add	r2, r3
 8016d64:	683b      	ldr	r3, [r7, #0]
 8016d66:	68db      	ldr	r3, [r3, #12]
 8016d68:	685b      	ldr	r3, [r3, #4]
 8016d6a:	6839      	ldr	r1, [r7, #0]
 8016d6c:	8909      	ldrh	r1, [r1, #8]
 8016d6e:	440b      	add	r3, r1
 8016d70:	1ad3      	subs	r3, r2, r3
    while (next &&
 8016d72:	2b00      	cmp	r3, #0
 8016d74:	daca      	bge.n	8016d0c <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8016d76:	683b      	ldr	r3, [r7, #0]
 8016d78:	2b00      	cmp	r3, #0
 8016d7a:	d01e      	beq.n	8016dba <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8016d7c:	687b      	ldr	r3, [r7, #4]
 8016d7e:	891b      	ldrh	r3, [r3, #8]
 8016d80:	461a      	mov	r2, r3
 8016d82:	4b14      	ldr	r3, [pc, #80]	; (8016dd4 <tcp_oos_insert_segment+0x10c>)
 8016d84:	681b      	ldr	r3, [r3, #0]
 8016d86:	441a      	add	r2, r3
 8016d88:	683b      	ldr	r3, [r7, #0]
 8016d8a:	68db      	ldr	r3, [r3, #12]
 8016d8c:	685b      	ldr	r3, [r3, #4]
 8016d8e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8016d90:	2b00      	cmp	r3, #0
 8016d92:	dd12      	ble.n	8016dba <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8016d94:	683b      	ldr	r3, [r7, #0]
 8016d96:	68db      	ldr	r3, [r3, #12]
 8016d98:	685b      	ldr	r3, [r3, #4]
 8016d9a:	b29a      	uxth	r2, r3
 8016d9c:	4b0d      	ldr	r3, [pc, #52]	; (8016dd4 <tcp_oos_insert_segment+0x10c>)
 8016d9e:	681b      	ldr	r3, [r3, #0]
 8016da0:	b29b      	uxth	r3, r3
 8016da2:	1ad3      	subs	r3, r2, r3
 8016da4:	b29a      	uxth	r2, r3
 8016da6:	687b      	ldr	r3, [r7, #4]
 8016da8:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8016daa:	687b      	ldr	r3, [r7, #4]
 8016dac:	685a      	ldr	r2, [r3, #4]
 8016dae:	687b      	ldr	r3, [r7, #4]
 8016db0:	891b      	ldrh	r3, [r3, #8]
 8016db2:	4619      	mov	r1, r3
 8016db4:	4610      	mov	r0, r2
 8016db6:	f7fc fe09 	bl	80139cc <pbuf_realloc>
    }
  }
  cseg->next = next;
 8016dba:	687b      	ldr	r3, [r7, #4]
 8016dbc:	683a      	ldr	r2, [r7, #0]
 8016dbe:	601a      	str	r2, [r3, #0]
}
 8016dc0:	bf00      	nop
 8016dc2:	3714      	adds	r7, #20
 8016dc4:	46bd      	mov	sp, r7
 8016dc6:	bd90      	pop	{r4, r7, pc}
 8016dc8:	0801fffc 	.word	0x0801fffc
 8016dcc:	080202bc 	.word	0x080202bc
 8016dd0:	08020048 	.word	0x08020048
 8016dd4:	200240d8 	.word	0x200240d8

08016dd8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8016dd8:	b5b0      	push	{r4, r5, r7, lr}
 8016dda:	b086      	sub	sp, #24
 8016ddc:	af00      	add	r7, sp, #0
 8016dde:	60f8      	str	r0, [r7, #12]
 8016de0:	60b9      	str	r1, [r7, #8]
 8016de2:	607a      	str	r2, [r7, #4]
 8016de4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 8016de6:	e03e      	b.n	8016e66 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 8016de8:	68bb      	ldr	r3, [r7, #8]
 8016dea:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 8016dec:	68bb      	ldr	r3, [r7, #8]
 8016dee:	681b      	ldr	r3, [r3, #0]
 8016df0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 8016df2:	697b      	ldr	r3, [r7, #20]
 8016df4:	685b      	ldr	r3, [r3, #4]
 8016df6:	4618      	mov	r0, r3
 8016df8:	f7fc fffc 	bl	8013df4 <pbuf_clen>
 8016dfc:	4603      	mov	r3, r0
 8016dfe:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 8016e00:	68fb      	ldr	r3, [r7, #12]
 8016e02:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016e06:	8a7a      	ldrh	r2, [r7, #18]
 8016e08:	429a      	cmp	r2, r3
 8016e0a:	d906      	bls.n	8016e1a <tcp_free_acked_segments+0x42>
 8016e0c:	4b2a      	ldr	r3, [pc, #168]	; (8016eb8 <tcp_free_acked_segments+0xe0>)
 8016e0e:	f240 4257 	movw	r2, #1111	; 0x457
 8016e12:	492a      	ldr	r1, [pc, #168]	; (8016ebc <tcp_free_acked_segments+0xe4>)
 8016e14:	482a      	ldr	r0, [pc, #168]	; (8016ec0 <tcp_free_acked_segments+0xe8>)
 8016e16:	f006 ff93 	bl	801dd40 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 8016e1a:	68fb      	ldr	r3, [r7, #12]
 8016e1c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8016e20:	8a7b      	ldrh	r3, [r7, #18]
 8016e22:	1ad3      	subs	r3, r2, r3
 8016e24:	b29a      	uxth	r2, r3
 8016e26:	68fb      	ldr	r3, [r7, #12]
 8016e28:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 8016e2c:	697b      	ldr	r3, [r7, #20]
 8016e2e:	891a      	ldrh	r2, [r3, #8]
 8016e30:	4b24      	ldr	r3, [pc, #144]	; (8016ec4 <tcp_free_acked_segments+0xec>)
 8016e32:	881b      	ldrh	r3, [r3, #0]
 8016e34:	4413      	add	r3, r2
 8016e36:	b29a      	uxth	r2, r3
 8016e38:	4b22      	ldr	r3, [pc, #136]	; (8016ec4 <tcp_free_acked_segments+0xec>)
 8016e3a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 8016e3c:	6978      	ldr	r0, [r7, #20]
 8016e3e:	f7fe f9da 	bl	80151f6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8016e42:	68fb      	ldr	r3, [r7, #12]
 8016e44:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016e48:	2b00      	cmp	r3, #0
 8016e4a:	d00c      	beq.n	8016e66 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8016e4c:	68bb      	ldr	r3, [r7, #8]
 8016e4e:	2b00      	cmp	r3, #0
 8016e50:	d109      	bne.n	8016e66 <tcp_free_acked_segments+0x8e>
 8016e52:	683b      	ldr	r3, [r7, #0]
 8016e54:	2b00      	cmp	r3, #0
 8016e56:	d106      	bne.n	8016e66 <tcp_free_acked_segments+0x8e>
 8016e58:	4b17      	ldr	r3, [pc, #92]	; (8016eb8 <tcp_free_acked_segments+0xe0>)
 8016e5a:	f240 4261 	movw	r2, #1121	; 0x461
 8016e5e:	491a      	ldr	r1, [pc, #104]	; (8016ec8 <tcp_free_acked_segments+0xf0>)
 8016e60:	4817      	ldr	r0, [pc, #92]	; (8016ec0 <tcp_free_acked_segments+0xe8>)
 8016e62:	f006 ff6d 	bl	801dd40 <iprintf>
  while (seg_list != NULL &&
 8016e66:	68bb      	ldr	r3, [r7, #8]
 8016e68:	2b00      	cmp	r3, #0
 8016e6a:	d020      	beq.n	8016eae <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8016e6c:	68bb      	ldr	r3, [r7, #8]
 8016e6e:	68db      	ldr	r3, [r3, #12]
 8016e70:	685b      	ldr	r3, [r3, #4]
 8016e72:	4618      	mov	r0, r3
 8016e74:	f7fb fb43 	bl	80124fe <lwip_htonl>
 8016e78:	4604      	mov	r4, r0
 8016e7a:	68bb      	ldr	r3, [r7, #8]
 8016e7c:	891b      	ldrh	r3, [r3, #8]
 8016e7e:	461d      	mov	r5, r3
 8016e80:	68bb      	ldr	r3, [r7, #8]
 8016e82:	68db      	ldr	r3, [r3, #12]
 8016e84:	899b      	ldrh	r3, [r3, #12]
 8016e86:	b29b      	uxth	r3, r3
 8016e88:	4618      	mov	r0, r3
 8016e8a:	f7fb fb23 	bl	80124d4 <lwip_htons>
 8016e8e:	4603      	mov	r3, r0
 8016e90:	b2db      	uxtb	r3, r3
 8016e92:	f003 0303 	and.w	r3, r3, #3
 8016e96:	2b00      	cmp	r3, #0
 8016e98:	d001      	beq.n	8016e9e <tcp_free_acked_segments+0xc6>
 8016e9a:	2301      	movs	r3, #1
 8016e9c:	e000      	b.n	8016ea0 <tcp_free_acked_segments+0xc8>
 8016e9e:	2300      	movs	r3, #0
 8016ea0:	442b      	add	r3, r5
 8016ea2:	18e2      	adds	r2, r4, r3
 8016ea4:	4b09      	ldr	r3, [pc, #36]	; (8016ecc <tcp_free_acked_segments+0xf4>)
 8016ea6:	681b      	ldr	r3, [r3, #0]
 8016ea8:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	dd9c      	ble.n	8016de8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8016eae:	68bb      	ldr	r3, [r7, #8]
}
 8016eb0:	4618      	mov	r0, r3
 8016eb2:	3718      	adds	r7, #24
 8016eb4:	46bd      	mov	sp, r7
 8016eb6:	bdb0      	pop	{r4, r5, r7, pc}
 8016eb8:	0801fffc 	.word	0x0801fffc
 8016ebc:	080202e4 	.word	0x080202e4
 8016ec0:	08020048 	.word	0x08020048
 8016ec4:	200240e0 	.word	0x200240e0
 8016ec8:	0802030c 	.word	0x0802030c
 8016ecc:	200240dc 	.word	0x200240dc

08016ed0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8016ed0:	b5b0      	push	{r4, r5, r7, lr}
 8016ed2:	b094      	sub	sp, #80	; 0x50
 8016ed4:	af00      	add	r7, sp, #0
 8016ed6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8016ed8:	2300      	movs	r3, #0
 8016eda:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8016edc:	687b      	ldr	r3, [r7, #4]
 8016ede:	2b00      	cmp	r3, #0
 8016ee0:	d106      	bne.n	8016ef0 <tcp_receive+0x20>
 8016ee2:	4b91      	ldr	r3, [pc, #580]	; (8017128 <tcp_receive+0x258>)
 8016ee4:	f240 427b 	movw	r2, #1147	; 0x47b
 8016ee8:	4990      	ldr	r1, [pc, #576]	; (801712c <tcp_receive+0x25c>)
 8016eea:	4891      	ldr	r0, [pc, #580]	; (8017130 <tcp_receive+0x260>)
 8016eec:	f006 ff28 	bl	801dd40 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8016ef0:	687b      	ldr	r3, [r7, #4]
 8016ef2:	7d1b      	ldrb	r3, [r3, #20]
 8016ef4:	2b03      	cmp	r3, #3
 8016ef6:	d806      	bhi.n	8016f06 <tcp_receive+0x36>
 8016ef8:	4b8b      	ldr	r3, [pc, #556]	; (8017128 <tcp_receive+0x258>)
 8016efa:	f240 427c 	movw	r2, #1148	; 0x47c
 8016efe:	498d      	ldr	r1, [pc, #564]	; (8017134 <tcp_receive+0x264>)
 8016f00:	488b      	ldr	r0, [pc, #556]	; (8017130 <tcp_receive+0x260>)
 8016f02:	f006 ff1d 	bl	801dd40 <iprintf>

  if (flags & TCP_ACK) {
 8016f06:	4b8c      	ldr	r3, [pc, #560]	; (8017138 <tcp_receive+0x268>)
 8016f08:	781b      	ldrb	r3, [r3, #0]
 8016f0a:	f003 0310 	and.w	r3, r3, #16
 8016f0e:	2b00      	cmp	r3, #0
 8016f10:	f000 8264 	beq.w	80173dc <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8016f14:	687b      	ldr	r3, [r7, #4]
 8016f16:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016f1a:	461a      	mov	r2, r3
 8016f1c:	687b      	ldr	r3, [r7, #4]
 8016f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016f20:	4413      	add	r3, r2
 8016f22:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8016f24:	687b      	ldr	r3, [r7, #4]
 8016f26:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8016f28:	4b84      	ldr	r3, [pc, #528]	; (801713c <tcp_receive+0x26c>)
 8016f2a:	681b      	ldr	r3, [r3, #0]
 8016f2c:	1ad3      	subs	r3, r2, r3
 8016f2e:	2b00      	cmp	r3, #0
 8016f30:	db1b      	blt.n	8016f6a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8016f32:	687b      	ldr	r3, [r7, #4]
 8016f34:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8016f36:	4b81      	ldr	r3, [pc, #516]	; (801713c <tcp_receive+0x26c>)
 8016f38:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8016f3a:	429a      	cmp	r2, r3
 8016f3c:	d106      	bne.n	8016f4c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8016f3e:	687b      	ldr	r3, [r7, #4]
 8016f40:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8016f42:	4b7f      	ldr	r3, [pc, #508]	; (8017140 <tcp_receive+0x270>)
 8016f44:	681b      	ldr	r3, [r3, #0]
 8016f46:	1ad3      	subs	r3, r2, r3
 8016f48:	2b00      	cmp	r3, #0
 8016f4a:	db0e      	blt.n	8016f6a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8016f4c:	687b      	ldr	r3, [r7, #4]
 8016f4e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8016f50:	4b7b      	ldr	r3, [pc, #492]	; (8017140 <tcp_receive+0x270>)
 8016f52:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8016f54:	429a      	cmp	r2, r3
 8016f56:	d125      	bne.n	8016fa4 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8016f58:	4b7a      	ldr	r3, [pc, #488]	; (8017144 <tcp_receive+0x274>)
 8016f5a:	681b      	ldr	r3, [r3, #0]
 8016f5c:	89db      	ldrh	r3, [r3, #14]
 8016f5e:	b29a      	uxth	r2, r3
 8016f60:	687b      	ldr	r3, [r7, #4]
 8016f62:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016f66:	429a      	cmp	r2, r3
 8016f68:	d91c      	bls.n	8016fa4 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8016f6a:	4b76      	ldr	r3, [pc, #472]	; (8017144 <tcp_receive+0x274>)
 8016f6c:	681b      	ldr	r3, [r3, #0]
 8016f6e:	89db      	ldrh	r3, [r3, #14]
 8016f70:	b29a      	uxth	r2, r3
 8016f72:	687b      	ldr	r3, [r7, #4]
 8016f74:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8016f7e:	687b      	ldr	r3, [r7, #4]
 8016f80:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016f84:	429a      	cmp	r2, r3
 8016f86:	d205      	bcs.n	8016f94 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8016f88:	687b      	ldr	r3, [r7, #4]
 8016f8a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8016f8e:	687b      	ldr	r3, [r7, #4]
 8016f90:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8016f94:	4b69      	ldr	r3, [pc, #420]	; (801713c <tcp_receive+0x26c>)
 8016f96:	681a      	ldr	r2, [r3, #0]
 8016f98:	687b      	ldr	r3, [r7, #4]
 8016f9a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8016f9c:	4b68      	ldr	r3, [pc, #416]	; (8017140 <tcp_receive+0x270>)
 8016f9e:	681a      	ldr	r2, [r3, #0]
 8016fa0:	687b      	ldr	r3, [r7, #4]
 8016fa2:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8016fa4:	4b66      	ldr	r3, [pc, #408]	; (8017140 <tcp_receive+0x270>)
 8016fa6:	681a      	ldr	r2, [r3, #0]
 8016fa8:	687b      	ldr	r3, [r7, #4]
 8016faa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016fac:	1ad3      	subs	r3, r2, r3
 8016fae:	2b00      	cmp	r3, #0
 8016fb0:	dc58      	bgt.n	8017064 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8016fb2:	4b65      	ldr	r3, [pc, #404]	; (8017148 <tcp_receive+0x278>)
 8016fb4:	881b      	ldrh	r3, [r3, #0]
 8016fb6:	2b00      	cmp	r3, #0
 8016fb8:	d14b      	bne.n	8017052 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8016fba:	687b      	ldr	r3, [r7, #4]
 8016fbc:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016fbe:	687a      	ldr	r2, [r7, #4]
 8016fc0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8016fc4:	4413      	add	r3, r2
 8016fc6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016fc8:	429a      	cmp	r2, r3
 8016fca:	d142      	bne.n	8017052 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8016fcc:	687b      	ldr	r3, [r7, #4]
 8016fce:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8016fd2:	2b00      	cmp	r3, #0
 8016fd4:	db3d      	blt.n	8017052 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8016fd6:	687b      	ldr	r3, [r7, #4]
 8016fd8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8016fda:	4b59      	ldr	r3, [pc, #356]	; (8017140 <tcp_receive+0x270>)
 8016fdc:	681b      	ldr	r3, [r3, #0]
 8016fde:	429a      	cmp	r2, r3
 8016fe0:	d137      	bne.n	8017052 <tcp_receive+0x182>
              found_dupack = 1;
 8016fe2:	2301      	movs	r3, #1
 8016fe4:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8016fe6:	687b      	ldr	r3, [r7, #4]
 8016fe8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8016fec:	2bff      	cmp	r3, #255	; 0xff
 8016fee:	d007      	beq.n	8017000 <tcp_receive+0x130>
                ++pcb->dupacks;
 8016ff0:	687b      	ldr	r3, [r7, #4]
 8016ff2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8016ff6:	3301      	adds	r3, #1
 8016ff8:	b2da      	uxtb	r2, r3
 8016ffa:	687b      	ldr	r3, [r7, #4]
 8016ffc:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8017000:	687b      	ldr	r3, [r7, #4]
 8017002:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8017006:	2b03      	cmp	r3, #3
 8017008:	d91b      	bls.n	8017042 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 801700a:	687b      	ldr	r3, [r7, #4]
 801700c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017010:	687b      	ldr	r3, [r7, #4]
 8017012:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017014:	4413      	add	r3, r2
 8017016:	b29a      	uxth	r2, r3
 8017018:	687b      	ldr	r3, [r7, #4]
 801701a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801701e:	429a      	cmp	r2, r3
 8017020:	d30a      	bcc.n	8017038 <tcp_receive+0x168>
 8017022:	687b      	ldr	r3, [r7, #4]
 8017024:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017028:	687b      	ldr	r3, [r7, #4]
 801702a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801702c:	4413      	add	r3, r2
 801702e:	b29a      	uxth	r2, r3
 8017030:	687b      	ldr	r3, [r7, #4]
 8017032:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8017036:	e004      	b.n	8017042 <tcp_receive+0x172>
 8017038:	687b      	ldr	r3, [r7, #4]
 801703a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801703e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8017042:	687b      	ldr	r3, [r7, #4]
 8017044:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8017048:	2b02      	cmp	r3, #2
 801704a:	d902      	bls.n	8017052 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801704c:	6878      	ldr	r0, [r7, #4]
 801704e:	f001 feed 	bl	8018e2c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8017052:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8017054:	2b00      	cmp	r3, #0
 8017056:	f040 8161 	bne.w	801731c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801705a:	687b      	ldr	r3, [r7, #4]
 801705c:	2200      	movs	r2, #0
 801705e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8017062:	e15b      	b.n	801731c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017064:	4b36      	ldr	r3, [pc, #216]	; (8017140 <tcp_receive+0x270>)
 8017066:	681a      	ldr	r2, [r3, #0]
 8017068:	687b      	ldr	r3, [r7, #4]
 801706a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801706c:	1ad3      	subs	r3, r2, r3
 801706e:	3b01      	subs	r3, #1
 8017070:	2b00      	cmp	r3, #0
 8017072:	f2c0 814e 	blt.w	8017312 <tcp_receive+0x442>
 8017076:	4b32      	ldr	r3, [pc, #200]	; (8017140 <tcp_receive+0x270>)
 8017078:	681a      	ldr	r2, [r3, #0]
 801707a:	687b      	ldr	r3, [r7, #4]
 801707c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801707e:	1ad3      	subs	r3, r2, r3
 8017080:	2b00      	cmp	r3, #0
 8017082:	f300 8146 	bgt.w	8017312 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	8b5b      	ldrh	r3, [r3, #26]
 801708a:	f003 0304 	and.w	r3, r3, #4
 801708e:	2b00      	cmp	r3, #0
 8017090:	d010      	beq.n	80170b4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8017092:	687b      	ldr	r3, [r7, #4]
 8017094:	8b5b      	ldrh	r3, [r3, #26]
 8017096:	f023 0304 	bic.w	r3, r3, #4
 801709a:	b29a      	uxth	r2, r3
 801709c:	687b      	ldr	r3, [r7, #4]
 801709e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 80170a0:	687b      	ldr	r3, [r7, #4]
 80170a2:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80170a6:	687b      	ldr	r3, [r7, #4]
 80170a8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 80170ac:	687b      	ldr	r3, [r7, #4]
 80170ae:	2200      	movs	r2, #0
 80170b0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80170b4:	687b      	ldr	r3, [r7, #4]
 80170b6:	2200      	movs	r2, #0
 80170b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80170bc:	687b      	ldr	r3, [r7, #4]
 80170be:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80170c2:	10db      	asrs	r3, r3, #3
 80170c4:	b21b      	sxth	r3, r3
 80170c6:	b29a      	uxth	r2, r3
 80170c8:	687b      	ldr	r3, [r7, #4]
 80170ca:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80170ce:	b29b      	uxth	r3, r3
 80170d0:	4413      	add	r3, r2
 80170d2:	b29b      	uxth	r3, r3
 80170d4:	b21a      	sxth	r2, r3
 80170d6:	687b      	ldr	r3, [r7, #4]
 80170d8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80170dc:	4b18      	ldr	r3, [pc, #96]	; (8017140 <tcp_receive+0x270>)
 80170de:	681b      	ldr	r3, [r3, #0]
 80170e0:	b29a      	uxth	r2, r3
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80170e6:	b29b      	uxth	r3, r3
 80170e8:	1ad3      	subs	r3, r2, r3
 80170ea:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80170ec:	687b      	ldr	r3, [r7, #4]
 80170ee:	2200      	movs	r2, #0
 80170f0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80170f4:	4b12      	ldr	r3, [pc, #72]	; (8017140 <tcp_receive+0x270>)
 80170f6:	681a      	ldr	r2, [r3, #0]
 80170f8:	687b      	ldr	r3, [r7, #4]
 80170fa:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80170fc:	687b      	ldr	r3, [r7, #4]
 80170fe:	7d1b      	ldrb	r3, [r3, #20]
 8017100:	2b03      	cmp	r3, #3
 8017102:	f240 8097 	bls.w	8017234 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8017106:	687b      	ldr	r3, [r7, #4]
 8017108:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801710c:	687b      	ldr	r3, [r7, #4]
 801710e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8017112:	429a      	cmp	r2, r3
 8017114:	d245      	bcs.n	80171a2 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8017116:	687b      	ldr	r3, [r7, #4]
 8017118:	8b5b      	ldrh	r3, [r3, #26]
 801711a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801711e:	2b00      	cmp	r3, #0
 8017120:	d014      	beq.n	801714c <tcp_receive+0x27c>
 8017122:	2301      	movs	r3, #1
 8017124:	e013      	b.n	801714e <tcp_receive+0x27e>
 8017126:	bf00      	nop
 8017128:	0801fffc 	.word	0x0801fffc
 801712c:	0802032c 	.word	0x0802032c
 8017130:	08020048 	.word	0x08020048
 8017134:	08020348 	.word	0x08020348
 8017138:	200240e4 	.word	0x200240e4
 801713c:	200240d8 	.word	0x200240d8
 8017140:	200240dc 	.word	0x200240dc
 8017144:	200240c8 	.word	0x200240c8
 8017148:	200240e2 	.word	0x200240e2
 801714c:	2302      	movs	r3, #2
 801714e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8017152:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8017156:	b29a      	uxth	r2, r3
 8017158:	687b      	ldr	r3, [r7, #4]
 801715a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801715c:	fb12 f303 	smulbb	r3, r2, r3
 8017160:	b29b      	uxth	r3, r3
 8017162:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8017164:	4293      	cmp	r3, r2
 8017166:	bf28      	it	cs
 8017168:	4613      	movcs	r3, r2
 801716a:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801716c:	687b      	ldr	r3, [r7, #4]
 801716e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017172:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8017174:	4413      	add	r3, r2
 8017176:	b29a      	uxth	r2, r3
 8017178:	687b      	ldr	r3, [r7, #4]
 801717a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801717e:	429a      	cmp	r2, r3
 8017180:	d309      	bcc.n	8017196 <tcp_receive+0x2c6>
 8017182:	687b      	ldr	r3, [r7, #4]
 8017184:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017188:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801718a:	4413      	add	r3, r2
 801718c:	b29a      	uxth	r2, r3
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8017194:	e04e      	b.n	8017234 <tcp_receive+0x364>
 8017196:	687b      	ldr	r3, [r7, #4]
 8017198:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801719c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 80171a0:	e048      	b.n	8017234 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 80171a2:	687b      	ldr	r3, [r7, #4]
 80171a4:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80171a8:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80171aa:	4413      	add	r3, r2
 80171ac:	b29a      	uxth	r2, r3
 80171ae:	687b      	ldr	r3, [r7, #4]
 80171b0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80171b4:	429a      	cmp	r2, r3
 80171b6:	d309      	bcc.n	80171cc <tcp_receive+0x2fc>
 80171b8:	687b      	ldr	r3, [r7, #4]
 80171ba:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80171be:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80171c0:	4413      	add	r3, r2
 80171c2:	b29a      	uxth	r2, r3
 80171c4:	687b      	ldr	r3, [r7, #4]
 80171c6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80171ca:	e004      	b.n	80171d6 <tcp_receive+0x306>
 80171cc:	687b      	ldr	r3, [r7, #4]
 80171ce:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80171d2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80171d6:	687b      	ldr	r3, [r7, #4]
 80171d8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80171dc:	687b      	ldr	r3, [r7, #4]
 80171de:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80171e2:	429a      	cmp	r2, r3
 80171e4:	d326      	bcc.n	8017234 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80171e6:	687b      	ldr	r3, [r7, #4]
 80171e8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80171ec:	687b      	ldr	r3, [r7, #4]
 80171ee:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80171f2:	1ad3      	subs	r3, r2, r3
 80171f4:	b29a      	uxth	r2, r3
 80171f6:	687b      	ldr	r3, [r7, #4]
 80171f8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80171fc:	687b      	ldr	r3, [r7, #4]
 80171fe:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017202:	687b      	ldr	r3, [r7, #4]
 8017204:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017206:	4413      	add	r3, r2
 8017208:	b29a      	uxth	r2, r3
 801720a:	687b      	ldr	r3, [r7, #4]
 801720c:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8017210:	429a      	cmp	r2, r3
 8017212:	d30a      	bcc.n	801722a <tcp_receive+0x35a>
 8017214:	687b      	ldr	r3, [r7, #4]
 8017216:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801721a:	687b      	ldr	r3, [r7, #4]
 801721c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801721e:	4413      	add	r3, r2
 8017220:	b29a      	uxth	r2, r3
 8017222:	687b      	ldr	r3, [r7, #4]
 8017224:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8017228:	e004      	b.n	8017234 <tcp_receive+0x364>
 801722a:	687b      	ldr	r3, [r7, #4]
 801722c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8017230:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8017234:	687b      	ldr	r3, [r7, #4]
 8017236:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801723c:	4a98      	ldr	r2, [pc, #608]	; (80174a0 <tcp_receive+0x5d0>)
 801723e:	6878      	ldr	r0, [r7, #4]
 8017240:	f7ff fdca 	bl	8016dd8 <tcp_free_acked_segments>
 8017244:	4602      	mov	r2, r0
 8017246:	687b      	ldr	r3, [r7, #4]
 8017248:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 801724e:	687b      	ldr	r3, [r7, #4]
 8017250:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017252:	4a94      	ldr	r2, [pc, #592]	; (80174a4 <tcp_receive+0x5d4>)
 8017254:	6878      	ldr	r0, [r7, #4]
 8017256:	f7ff fdbf 	bl	8016dd8 <tcp_free_acked_segments>
 801725a:	4602      	mov	r2, r0
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8017260:	687b      	ldr	r3, [r7, #4]
 8017262:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017264:	2b00      	cmp	r3, #0
 8017266:	d104      	bne.n	8017272 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801726e:	861a      	strh	r2, [r3, #48]	; 0x30
 8017270:	e002      	b.n	8017278 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8017272:	687b      	ldr	r3, [r7, #4]
 8017274:	2200      	movs	r2, #0
 8017276:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8017278:	687b      	ldr	r3, [r7, #4]
 801727a:	2200      	movs	r2, #0
 801727c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 801727e:	687b      	ldr	r3, [r7, #4]
 8017280:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017282:	2b00      	cmp	r3, #0
 8017284:	d103      	bne.n	801728e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8017286:	687b      	ldr	r3, [r7, #4]
 8017288:	2200      	movs	r2, #0
 801728a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 801728e:	687b      	ldr	r3, [r7, #4]
 8017290:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8017294:	4b84      	ldr	r3, [pc, #528]	; (80174a8 <tcp_receive+0x5d8>)
 8017296:	881b      	ldrh	r3, [r3, #0]
 8017298:	4413      	add	r3, r2
 801729a:	b29a      	uxth	r2, r3
 801729c:	687b      	ldr	r3, [r7, #4]
 801729e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 80172a2:	687b      	ldr	r3, [r7, #4]
 80172a4:	8b5b      	ldrh	r3, [r3, #26]
 80172a6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80172aa:	2b00      	cmp	r3, #0
 80172ac:	d035      	beq.n	801731a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 80172ae:	687b      	ldr	r3, [r7, #4]
 80172b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80172b2:	2b00      	cmp	r3, #0
 80172b4:	d118      	bne.n	80172e8 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 80172b6:	687b      	ldr	r3, [r7, #4]
 80172b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80172ba:	2b00      	cmp	r3, #0
 80172bc:	d00c      	beq.n	80172d8 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 80172be:	687b      	ldr	r3, [r7, #4]
 80172c0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80172c2:	687b      	ldr	r3, [r7, #4]
 80172c4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80172c6:	68db      	ldr	r3, [r3, #12]
 80172c8:	685b      	ldr	r3, [r3, #4]
 80172ca:	4618      	mov	r0, r3
 80172cc:	f7fb f917 	bl	80124fe <lwip_htonl>
 80172d0:	4603      	mov	r3, r0
 80172d2:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 80172d4:	2b00      	cmp	r3, #0
 80172d6:	dc20      	bgt.n	801731a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 80172d8:	687b      	ldr	r3, [r7, #4]
 80172da:	8b5b      	ldrh	r3, [r3, #26]
 80172dc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80172e0:	b29a      	uxth	r2, r3
 80172e2:	687b      	ldr	r3, [r7, #4]
 80172e4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 80172e6:	e018      	b.n	801731a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 80172e8:	687b      	ldr	r3, [r7, #4]
 80172ea:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 80172ec:	687b      	ldr	r3, [r7, #4]
 80172ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80172f0:	68db      	ldr	r3, [r3, #12]
 80172f2:	685b      	ldr	r3, [r3, #4]
 80172f4:	4618      	mov	r0, r3
 80172f6:	f7fb f902 	bl	80124fe <lwip_htonl>
 80172fa:	4603      	mov	r3, r0
 80172fc:	1ae3      	subs	r3, r4, r3
 80172fe:	2b00      	cmp	r3, #0
 8017300:	dc0b      	bgt.n	801731a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8017302:	687b      	ldr	r3, [r7, #4]
 8017304:	8b5b      	ldrh	r3, [r3, #26]
 8017306:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 801730a:	b29a      	uxth	r2, r3
 801730c:	687b      	ldr	r3, [r7, #4]
 801730e:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8017310:	e003      	b.n	801731a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8017312:	6878      	ldr	r0, [r7, #4]
 8017314:	f001 ff76 	bl	8019204 <tcp_send_empty_ack>
 8017318:	e000      	b.n	801731c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801731a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 801731c:	687b      	ldr	r3, [r7, #4]
 801731e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8017320:	2b00      	cmp	r3, #0
 8017322:	d05b      	beq.n	80173dc <tcp_receive+0x50c>
 8017324:	687b      	ldr	r3, [r7, #4]
 8017326:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8017328:	4b60      	ldr	r3, [pc, #384]	; (80174ac <tcp_receive+0x5dc>)
 801732a:	681b      	ldr	r3, [r3, #0]
 801732c:	1ad3      	subs	r3, r2, r3
 801732e:	2b00      	cmp	r3, #0
 8017330:	da54      	bge.n	80173dc <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8017332:	4b5f      	ldr	r3, [pc, #380]	; (80174b0 <tcp_receive+0x5e0>)
 8017334:	681b      	ldr	r3, [r3, #0]
 8017336:	b29a      	uxth	r2, r3
 8017338:	687b      	ldr	r3, [r7, #4]
 801733a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 801733c:	b29b      	uxth	r3, r3
 801733e:	1ad3      	subs	r3, r2, r3
 8017340:	b29b      	uxth	r3, r3
 8017342:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8017346:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801734a:	687b      	ldr	r3, [r7, #4]
 801734c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8017350:	10db      	asrs	r3, r3, #3
 8017352:	b21b      	sxth	r3, r3
 8017354:	b29b      	uxth	r3, r3
 8017356:	1ad3      	subs	r3, r2, r3
 8017358:	b29b      	uxth	r3, r3
 801735a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 801735e:	687b      	ldr	r3, [r7, #4]
 8017360:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8017364:	b29a      	uxth	r2, r3
 8017366:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 801736a:	4413      	add	r3, r2
 801736c:	b29b      	uxth	r3, r3
 801736e:	b21a      	sxth	r2, r3
 8017370:	687b      	ldr	r3, [r7, #4]
 8017372:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8017374:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8017378:	2b00      	cmp	r3, #0
 801737a:	da05      	bge.n	8017388 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 801737c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8017380:	425b      	negs	r3, r3
 8017382:	b29b      	uxth	r3, r3
 8017384:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8017388:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 801738c:	687b      	ldr	r3, [r7, #4]
 801738e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8017392:	109b      	asrs	r3, r3, #2
 8017394:	b21b      	sxth	r3, r3
 8017396:	b29b      	uxth	r3, r3
 8017398:	1ad3      	subs	r3, r2, r3
 801739a:	b29b      	uxth	r3, r3
 801739c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 80173a0:	687b      	ldr	r3, [r7, #4]
 80173a2:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80173a6:	b29a      	uxth	r2, r3
 80173a8:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 80173ac:	4413      	add	r3, r2
 80173ae:	b29b      	uxth	r3, r3
 80173b0:	b21a      	sxth	r2, r3
 80173b2:	687b      	ldr	r3, [r7, #4]
 80173b4:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80173b6:	687b      	ldr	r3, [r7, #4]
 80173b8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80173bc:	10db      	asrs	r3, r3, #3
 80173be:	b21b      	sxth	r3, r3
 80173c0:	b29a      	uxth	r2, r3
 80173c2:	687b      	ldr	r3, [r7, #4]
 80173c4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80173c8:	b29b      	uxth	r3, r3
 80173ca:	4413      	add	r3, r2
 80173cc:	b29b      	uxth	r3, r3
 80173ce:	b21a      	sxth	r2, r3
 80173d0:	687b      	ldr	r3, [r7, #4]
 80173d2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 80173d6:	687b      	ldr	r3, [r7, #4]
 80173d8:	2200      	movs	r2, #0
 80173da:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 80173dc:	4b35      	ldr	r3, [pc, #212]	; (80174b4 <tcp_receive+0x5e4>)
 80173de:	881b      	ldrh	r3, [r3, #0]
 80173e0:	2b00      	cmp	r3, #0
 80173e2:	f000 84e2 	beq.w	8017daa <tcp_receive+0xeda>
 80173e6:	687b      	ldr	r3, [r7, #4]
 80173e8:	7d1b      	ldrb	r3, [r3, #20]
 80173ea:	2b06      	cmp	r3, #6
 80173ec:	f200 84dd 	bhi.w	8017daa <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80173f0:	687b      	ldr	r3, [r7, #4]
 80173f2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80173f4:	4b30      	ldr	r3, [pc, #192]	; (80174b8 <tcp_receive+0x5e8>)
 80173f6:	681b      	ldr	r3, [r3, #0]
 80173f8:	1ad3      	subs	r3, r2, r3
 80173fa:	3b01      	subs	r3, #1
 80173fc:	2b00      	cmp	r3, #0
 80173fe:	f2c0 808f 	blt.w	8017520 <tcp_receive+0x650>
 8017402:	687b      	ldr	r3, [r7, #4]
 8017404:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017406:	4b2b      	ldr	r3, [pc, #172]	; (80174b4 <tcp_receive+0x5e4>)
 8017408:	881b      	ldrh	r3, [r3, #0]
 801740a:	4619      	mov	r1, r3
 801740c:	4b2a      	ldr	r3, [pc, #168]	; (80174b8 <tcp_receive+0x5e8>)
 801740e:	681b      	ldr	r3, [r3, #0]
 8017410:	440b      	add	r3, r1
 8017412:	1ad3      	subs	r3, r2, r3
 8017414:	3301      	adds	r3, #1
 8017416:	2b00      	cmp	r3, #0
 8017418:	f300 8082 	bgt.w	8017520 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 801741c:	4b27      	ldr	r3, [pc, #156]	; (80174bc <tcp_receive+0x5ec>)
 801741e:	685b      	ldr	r3, [r3, #4]
 8017420:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8017422:	687b      	ldr	r3, [r7, #4]
 8017424:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017426:	4b24      	ldr	r3, [pc, #144]	; (80174b8 <tcp_receive+0x5e8>)
 8017428:	681b      	ldr	r3, [r3, #0]
 801742a:	1ad3      	subs	r3, r2, r3
 801742c:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 801742e:	4b23      	ldr	r3, [pc, #140]	; (80174bc <tcp_receive+0x5ec>)
 8017430:	685b      	ldr	r3, [r3, #4]
 8017432:	2b00      	cmp	r3, #0
 8017434:	d106      	bne.n	8017444 <tcp_receive+0x574>
 8017436:	4b22      	ldr	r3, [pc, #136]	; (80174c0 <tcp_receive+0x5f0>)
 8017438:	f240 5294 	movw	r2, #1428	; 0x594
 801743c:	4921      	ldr	r1, [pc, #132]	; (80174c4 <tcp_receive+0x5f4>)
 801743e:	4822      	ldr	r0, [pc, #136]	; (80174c8 <tcp_receive+0x5f8>)
 8017440:	f006 fc7e 	bl	801dd40 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8017444:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017446:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 801744a:	4293      	cmp	r3, r2
 801744c:	d906      	bls.n	801745c <tcp_receive+0x58c>
 801744e:	4b1c      	ldr	r3, [pc, #112]	; (80174c0 <tcp_receive+0x5f0>)
 8017450:	f240 5295 	movw	r2, #1429	; 0x595
 8017454:	491d      	ldr	r1, [pc, #116]	; (80174cc <tcp_receive+0x5fc>)
 8017456:	481c      	ldr	r0, [pc, #112]	; (80174c8 <tcp_receive+0x5f8>)
 8017458:	f006 fc72 	bl	801dd40 <iprintf>
      off = (u16_t)off32;
 801745c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801745e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8017462:	4b16      	ldr	r3, [pc, #88]	; (80174bc <tcp_receive+0x5ec>)
 8017464:	685b      	ldr	r3, [r3, #4]
 8017466:	891b      	ldrh	r3, [r3, #8]
 8017468:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801746c:	429a      	cmp	r2, r3
 801746e:	d906      	bls.n	801747e <tcp_receive+0x5ae>
 8017470:	4b13      	ldr	r3, [pc, #76]	; (80174c0 <tcp_receive+0x5f0>)
 8017472:	f240 5297 	movw	r2, #1431	; 0x597
 8017476:	4916      	ldr	r1, [pc, #88]	; (80174d0 <tcp_receive+0x600>)
 8017478:	4813      	ldr	r0, [pc, #76]	; (80174c8 <tcp_receive+0x5f8>)
 801747a:	f006 fc61 	bl	801dd40 <iprintf>
      inseg.len -= off;
 801747e:	4b0f      	ldr	r3, [pc, #60]	; (80174bc <tcp_receive+0x5ec>)
 8017480:	891a      	ldrh	r2, [r3, #8]
 8017482:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017486:	1ad3      	subs	r3, r2, r3
 8017488:	b29a      	uxth	r2, r3
 801748a:	4b0c      	ldr	r3, [pc, #48]	; (80174bc <tcp_receive+0x5ec>)
 801748c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 801748e:	4b0b      	ldr	r3, [pc, #44]	; (80174bc <tcp_receive+0x5ec>)
 8017490:	685b      	ldr	r3, [r3, #4]
 8017492:	891a      	ldrh	r2, [r3, #8]
 8017494:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017498:	1ad3      	subs	r3, r2, r3
 801749a:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 801749c:	e02a      	b.n	80174f4 <tcp_receive+0x624>
 801749e:	bf00      	nop
 80174a0:	08020364 	.word	0x08020364
 80174a4:	0802036c 	.word	0x0802036c
 80174a8:	200240e0 	.word	0x200240e0
 80174ac:	200240dc 	.word	0x200240dc
 80174b0:	200240a0 	.word	0x200240a0
 80174b4:	200240e2 	.word	0x200240e2
 80174b8:	200240d8 	.word	0x200240d8
 80174bc:	200240b8 	.word	0x200240b8
 80174c0:	0801fffc 	.word	0x0801fffc
 80174c4:	08020374 	.word	0x08020374
 80174c8:	08020048 	.word	0x08020048
 80174cc:	08020384 	.word	0x08020384
 80174d0:	08020394 	.word	0x08020394
        off -= p->len;
 80174d4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80174d6:	895b      	ldrh	r3, [r3, #10]
 80174d8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80174dc:	1ad3      	subs	r3, r2, r3
 80174de:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 80174e2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80174e4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 80174e6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80174e8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80174ea:	2200      	movs	r2, #0
 80174ec:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80174ee:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80174f0:	681b      	ldr	r3, [r3, #0]
 80174f2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80174f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80174f6:	895b      	ldrh	r3, [r3, #10]
 80174f8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80174fc:	429a      	cmp	r2, r3
 80174fe:	d8e9      	bhi.n	80174d4 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8017500:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8017504:	4619      	mov	r1, r3
 8017506:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8017508:	f7fc fb60 	bl	8013bcc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 801750c:	687b      	ldr	r3, [r7, #4]
 801750e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017510:	4a91      	ldr	r2, [pc, #580]	; (8017758 <tcp_receive+0x888>)
 8017512:	6013      	str	r3, [r2, #0]
 8017514:	4b91      	ldr	r3, [pc, #580]	; (801775c <tcp_receive+0x88c>)
 8017516:	68db      	ldr	r3, [r3, #12]
 8017518:	4a8f      	ldr	r2, [pc, #572]	; (8017758 <tcp_receive+0x888>)
 801751a:	6812      	ldr	r2, [r2, #0]
 801751c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 801751e:	e00d      	b.n	801753c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8017520:	4b8d      	ldr	r3, [pc, #564]	; (8017758 <tcp_receive+0x888>)
 8017522:	681a      	ldr	r2, [r3, #0]
 8017524:	687b      	ldr	r3, [r7, #4]
 8017526:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017528:	1ad3      	subs	r3, r2, r3
 801752a:	2b00      	cmp	r3, #0
 801752c:	da06      	bge.n	801753c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 801752e:	687b      	ldr	r3, [r7, #4]
 8017530:	8b5b      	ldrh	r3, [r3, #26]
 8017532:	f043 0302 	orr.w	r3, r3, #2
 8017536:	b29a      	uxth	r2, r3
 8017538:	687b      	ldr	r3, [r7, #4]
 801753a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801753c:	4b86      	ldr	r3, [pc, #536]	; (8017758 <tcp_receive+0x888>)
 801753e:	681a      	ldr	r2, [r3, #0]
 8017540:	687b      	ldr	r3, [r7, #4]
 8017542:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017544:	1ad3      	subs	r3, r2, r3
 8017546:	2b00      	cmp	r3, #0
 8017548:	f2c0 842a 	blt.w	8017da0 <tcp_receive+0xed0>
 801754c:	4b82      	ldr	r3, [pc, #520]	; (8017758 <tcp_receive+0x888>)
 801754e:	681a      	ldr	r2, [r3, #0]
 8017550:	687b      	ldr	r3, [r7, #4]
 8017552:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017554:	6879      	ldr	r1, [r7, #4]
 8017556:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017558:	440b      	add	r3, r1
 801755a:	1ad3      	subs	r3, r2, r3
 801755c:	3301      	adds	r3, #1
 801755e:	2b00      	cmp	r3, #0
 8017560:	f300 841e 	bgt.w	8017da0 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8017564:	687b      	ldr	r3, [r7, #4]
 8017566:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8017568:	4b7b      	ldr	r3, [pc, #492]	; (8017758 <tcp_receive+0x888>)
 801756a:	681b      	ldr	r3, [r3, #0]
 801756c:	429a      	cmp	r2, r3
 801756e:	f040 829a 	bne.w	8017aa6 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8017572:	4b7a      	ldr	r3, [pc, #488]	; (801775c <tcp_receive+0x88c>)
 8017574:	891c      	ldrh	r4, [r3, #8]
 8017576:	4b79      	ldr	r3, [pc, #484]	; (801775c <tcp_receive+0x88c>)
 8017578:	68db      	ldr	r3, [r3, #12]
 801757a:	899b      	ldrh	r3, [r3, #12]
 801757c:	b29b      	uxth	r3, r3
 801757e:	4618      	mov	r0, r3
 8017580:	f7fa ffa8 	bl	80124d4 <lwip_htons>
 8017584:	4603      	mov	r3, r0
 8017586:	b2db      	uxtb	r3, r3
 8017588:	f003 0303 	and.w	r3, r3, #3
 801758c:	2b00      	cmp	r3, #0
 801758e:	d001      	beq.n	8017594 <tcp_receive+0x6c4>
 8017590:	2301      	movs	r3, #1
 8017592:	e000      	b.n	8017596 <tcp_receive+0x6c6>
 8017594:	2300      	movs	r3, #0
 8017596:	4423      	add	r3, r4
 8017598:	b29a      	uxth	r2, r3
 801759a:	4b71      	ldr	r3, [pc, #452]	; (8017760 <tcp_receive+0x890>)
 801759c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80175a2:	4b6f      	ldr	r3, [pc, #444]	; (8017760 <tcp_receive+0x890>)
 80175a4:	881b      	ldrh	r3, [r3, #0]
 80175a6:	429a      	cmp	r2, r3
 80175a8:	d275      	bcs.n	8017696 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80175aa:	4b6c      	ldr	r3, [pc, #432]	; (801775c <tcp_receive+0x88c>)
 80175ac:	68db      	ldr	r3, [r3, #12]
 80175ae:	899b      	ldrh	r3, [r3, #12]
 80175b0:	b29b      	uxth	r3, r3
 80175b2:	4618      	mov	r0, r3
 80175b4:	f7fa ff8e 	bl	80124d4 <lwip_htons>
 80175b8:	4603      	mov	r3, r0
 80175ba:	b2db      	uxtb	r3, r3
 80175bc:	f003 0301 	and.w	r3, r3, #1
 80175c0:	2b00      	cmp	r3, #0
 80175c2:	d01f      	beq.n	8017604 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 80175c4:	4b65      	ldr	r3, [pc, #404]	; (801775c <tcp_receive+0x88c>)
 80175c6:	68db      	ldr	r3, [r3, #12]
 80175c8:	899b      	ldrh	r3, [r3, #12]
 80175ca:	b29b      	uxth	r3, r3
 80175cc:	b21b      	sxth	r3, r3
 80175ce:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80175d2:	b21c      	sxth	r4, r3
 80175d4:	4b61      	ldr	r3, [pc, #388]	; (801775c <tcp_receive+0x88c>)
 80175d6:	68db      	ldr	r3, [r3, #12]
 80175d8:	899b      	ldrh	r3, [r3, #12]
 80175da:	b29b      	uxth	r3, r3
 80175dc:	4618      	mov	r0, r3
 80175de:	f7fa ff79 	bl	80124d4 <lwip_htons>
 80175e2:	4603      	mov	r3, r0
 80175e4:	b2db      	uxtb	r3, r3
 80175e6:	b29b      	uxth	r3, r3
 80175e8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80175ec:	b29b      	uxth	r3, r3
 80175ee:	4618      	mov	r0, r3
 80175f0:	f7fa ff70 	bl	80124d4 <lwip_htons>
 80175f4:	4603      	mov	r3, r0
 80175f6:	b21b      	sxth	r3, r3
 80175f8:	4323      	orrs	r3, r4
 80175fa:	b21a      	sxth	r2, r3
 80175fc:	4b57      	ldr	r3, [pc, #348]	; (801775c <tcp_receive+0x88c>)
 80175fe:	68db      	ldr	r3, [r3, #12]
 8017600:	b292      	uxth	r2, r2
 8017602:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8017604:	687b      	ldr	r3, [r7, #4]
 8017606:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8017608:	4b54      	ldr	r3, [pc, #336]	; (801775c <tcp_receive+0x88c>)
 801760a:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801760c:	4b53      	ldr	r3, [pc, #332]	; (801775c <tcp_receive+0x88c>)
 801760e:	68db      	ldr	r3, [r3, #12]
 8017610:	899b      	ldrh	r3, [r3, #12]
 8017612:	b29b      	uxth	r3, r3
 8017614:	4618      	mov	r0, r3
 8017616:	f7fa ff5d 	bl	80124d4 <lwip_htons>
 801761a:	4603      	mov	r3, r0
 801761c:	b2db      	uxtb	r3, r3
 801761e:	f003 0302 	and.w	r3, r3, #2
 8017622:	2b00      	cmp	r3, #0
 8017624:	d005      	beq.n	8017632 <tcp_receive+0x762>
            inseg.len -= 1;
 8017626:	4b4d      	ldr	r3, [pc, #308]	; (801775c <tcp_receive+0x88c>)
 8017628:	891b      	ldrh	r3, [r3, #8]
 801762a:	3b01      	subs	r3, #1
 801762c:	b29a      	uxth	r2, r3
 801762e:	4b4b      	ldr	r3, [pc, #300]	; (801775c <tcp_receive+0x88c>)
 8017630:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8017632:	4b4a      	ldr	r3, [pc, #296]	; (801775c <tcp_receive+0x88c>)
 8017634:	685b      	ldr	r3, [r3, #4]
 8017636:	4a49      	ldr	r2, [pc, #292]	; (801775c <tcp_receive+0x88c>)
 8017638:	8912      	ldrh	r2, [r2, #8]
 801763a:	4611      	mov	r1, r2
 801763c:	4618      	mov	r0, r3
 801763e:	f7fc f9c5 	bl	80139cc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8017642:	4b46      	ldr	r3, [pc, #280]	; (801775c <tcp_receive+0x88c>)
 8017644:	891c      	ldrh	r4, [r3, #8]
 8017646:	4b45      	ldr	r3, [pc, #276]	; (801775c <tcp_receive+0x88c>)
 8017648:	68db      	ldr	r3, [r3, #12]
 801764a:	899b      	ldrh	r3, [r3, #12]
 801764c:	b29b      	uxth	r3, r3
 801764e:	4618      	mov	r0, r3
 8017650:	f7fa ff40 	bl	80124d4 <lwip_htons>
 8017654:	4603      	mov	r3, r0
 8017656:	b2db      	uxtb	r3, r3
 8017658:	f003 0303 	and.w	r3, r3, #3
 801765c:	2b00      	cmp	r3, #0
 801765e:	d001      	beq.n	8017664 <tcp_receive+0x794>
 8017660:	2301      	movs	r3, #1
 8017662:	e000      	b.n	8017666 <tcp_receive+0x796>
 8017664:	2300      	movs	r3, #0
 8017666:	4423      	add	r3, r4
 8017668:	b29a      	uxth	r2, r3
 801766a:	4b3d      	ldr	r3, [pc, #244]	; (8017760 <tcp_receive+0x890>)
 801766c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 801766e:	4b3c      	ldr	r3, [pc, #240]	; (8017760 <tcp_receive+0x890>)
 8017670:	881b      	ldrh	r3, [r3, #0]
 8017672:	461a      	mov	r2, r3
 8017674:	4b38      	ldr	r3, [pc, #224]	; (8017758 <tcp_receive+0x888>)
 8017676:	681b      	ldr	r3, [r3, #0]
 8017678:	441a      	add	r2, r3
 801767a:	687b      	ldr	r3, [r7, #4]
 801767c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801767e:	6879      	ldr	r1, [r7, #4]
 8017680:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017682:	440b      	add	r3, r1
 8017684:	429a      	cmp	r2, r3
 8017686:	d006      	beq.n	8017696 <tcp_receive+0x7c6>
 8017688:	4b36      	ldr	r3, [pc, #216]	; (8017764 <tcp_receive+0x894>)
 801768a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 801768e:	4936      	ldr	r1, [pc, #216]	; (8017768 <tcp_receive+0x898>)
 8017690:	4836      	ldr	r0, [pc, #216]	; (801776c <tcp_receive+0x89c>)
 8017692:	f006 fb55 	bl	801dd40 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8017696:	687b      	ldr	r3, [r7, #4]
 8017698:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801769a:	2b00      	cmp	r3, #0
 801769c:	f000 80e7 	beq.w	801786e <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80176a0:	4b2e      	ldr	r3, [pc, #184]	; (801775c <tcp_receive+0x88c>)
 80176a2:	68db      	ldr	r3, [r3, #12]
 80176a4:	899b      	ldrh	r3, [r3, #12]
 80176a6:	b29b      	uxth	r3, r3
 80176a8:	4618      	mov	r0, r3
 80176aa:	f7fa ff13 	bl	80124d4 <lwip_htons>
 80176ae:	4603      	mov	r3, r0
 80176b0:	b2db      	uxtb	r3, r3
 80176b2:	f003 0301 	and.w	r3, r3, #1
 80176b6:	2b00      	cmp	r3, #0
 80176b8:	d010      	beq.n	80176dc <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 80176ba:	e00a      	b.n	80176d2 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80176c0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 80176c2:	687b      	ldr	r3, [r7, #4]
 80176c4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80176c6:	681a      	ldr	r2, [r3, #0]
 80176c8:	687b      	ldr	r3, [r7, #4]
 80176ca:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 80176cc:	68f8      	ldr	r0, [r7, #12]
 80176ce:	f7fd fd92 	bl	80151f6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 80176d2:	687b      	ldr	r3, [r7, #4]
 80176d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80176d6:	2b00      	cmp	r3, #0
 80176d8:	d1f0      	bne.n	80176bc <tcp_receive+0x7ec>
 80176da:	e0c8      	b.n	801786e <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 80176dc:	687b      	ldr	r3, [r7, #4]
 80176de:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80176e0:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 80176e2:	e052      	b.n	801778a <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80176e4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80176e6:	68db      	ldr	r3, [r3, #12]
 80176e8:	899b      	ldrh	r3, [r3, #12]
 80176ea:	b29b      	uxth	r3, r3
 80176ec:	4618      	mov	r0, r3
 80176ee:	f7fa fef1 	bl	80124d4 <lwip_htons>
 80176f2:	4603      	mov	r3, r0
 80176f4:	b2db      	uxtb	r3, r3
 80176f6:	f003 0301 	and.w	r3, r3, #1
 80176fa:	2b00      	cmp	r3, #0
 80176fc:	d03d      	beq.n	801777a <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80176fe:	4b17      	ldr	r3, [pc, #92]	; (801775c <tcp_receive+0x88c>)
 8017700:	68db      	ldr	r3, [r3, #12]
 8017702:	899b      	ldrh	r3, [r3, #12]
 8017704:	b29b      	uxth	r3, r3
 8017706:	4618      	mov	r0, r3
 8017708:	f7fa fee4 	bl	80124d4 <lwip_htons>
 801770c:	4603      	mov	r3, r0
 801770e:	b2db      	uxtb	r3, r3
 8017710:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8017714:	2b00      	cmp	r3, #0
 8017716:	d130      	bne.n	801777a <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8017718:	4b10      	ldr	r3, [pc, #64]	; (801775c <tcp_receive+0x88c>)
 801771a:	68db      	ldr	r3, [r3, #12]
 801771c:	899b      	ldrh	r3, [r3, #12]
 801771e:	b29c      	uxth	r4, r3
 8017720:	2001      	movs	r0, #1
 8017722:	f7fa fed7 	bl	80124d4 <lwip_htons>
 8017726:	4603      	mov	r3, r0
 8017728:	461a      	mov	r2, r3
 801772a:	4b0c      	ldr	r3, [pc, #48]	; (801775c <tcp_receive+0x88c>)
 801772c:	68db      	ldr	r3, [r3, #12]
 801772e:	4322      	orrs	r2, r4
 8017730:	b292      	uxth	r2, r2
 8017732:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8017734:	4b09      	ldr	r3, [pc, #36]	; (801775c <tcp_receive+0x88c>)
 8017736:	891c      	ldrh	r4, [r3, #8]
 8017738:	4b08      	ldr	r3, [pc, #32]	; (801775c <tcp_receive+0x88c>)
 801773a:	68db      	ldr	r3, [r3, #12]
 801773c:	899b      	ldrh	r3, [r3, #12]
 801773e:	b29b      	uxth	r3, r3
 8017740:	4618      	mov	r0, r3
 8017742:	f7fa fec7 	bl	80124d4 <lwip_htons>
 8017746:	4603      	mov	r3, r0
 8017748:	b2db      	uxtb	r3, r3
 801774a:	f003 0303 	and.w	r3, r3, #3
 801774e:	2b00      	cmp	r3, #0
 8017750:	d00e      	beq.n	8017770 <tcp_receive+0x8a0>
 8017752:	2301      	movs	r3, #1
 8017754:	e00d      	b.n	8017772 <tcp_receive+0x8a2>
 8017756:	bf00      	nop
 8017758:	200240d8 	.word	0x200240d8
 801775c:	200240b8 	.word	0x200240b8
 8017760:	200240e2 	.word	0x200240e2
 8017764:	0801fffc 	.word	0x0801fffc
 8017768:	080203a4 	.word	0x080203a4
 801776c:	08020048 	.word	0x08020048
 8017770:	2300      	movs	r3, #0
 8017772:	4423      	add	r3, r4
 8017774:	b29a      	uxth	r2, r3
 8017776:	4b98      	ldr	r3, [pc, #608]	; (80179d8 <tcp_receive+0xb08>)
 8017778:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 801777a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801777c:	613b      	str	r3, [r7, #16]
              next = next->next;
 801777e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017780:	681b      	ldr	r3, [r3, #0]
 8017782:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8017784:	6938      	ldr	r0, [r7, #16]
 8017786:	f7fd fd36 	bl	80151f6 <tcp_seg_free>
            while (next &&
 801778a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801778c:	2b00      	cmp	r3, #0
 801778e:	d00e      	beq.n	80177ae <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8017790:	4b91      	ldr	r3, [pc, #580]	; (80179d8 <tcp_receive+0xb08>)
 8017792:	881b      	ldrh	r3, [r3, #0]
 8017794:	461a      	mov	r2, r3
 8017796:	4b91      	ldr	r3, [pc, #580]	; (80179dc <tcp_receive+0xb0c>)
 8017798:	681b      	ldr	r3, [r3, #0]
 801779a:	441a      	add	r2, r3
 801779c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801779e:	68db      	ldr	r3, [r3, #12]
 80177a0:	685b      	ldr	r3, [r3, #4]
 80177a2:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 80177a4:	8909      	ldrh	r1, [r1, #8]
 80177a6:	440b      	add	r3, r1
 80177a8:	1ad3      	subs	r3, r2, r3
            while (next &&
 80177aa:	2b00      	cmp	r3, #0
 80177ac:	da9a      	bge.n	80176e4 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 80177ae:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80177b0:	2b00      	cmp	r3, #0
 80177b2:	d059      	beq.n	8017868 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 80177b4:	4b88      	ldr	r3, [pc, #544]	; (80179d8 <tcp_receive+0xb08>)
 80177b6:	881b      	ldrh	r3, [r3, #0]
 80177b8:	461a      	mov	r2, r3
 80177ba:	4b88      	ldr	r3, [pc, #544]	; (80179dc <tcp_receive+0xb0c>)
 80177bc:	681b      	ldr	r3, [r3, #0]
 80177be:	441a      	add	r2, r3
 80177c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80177c2:	68db      	ldr	r3, [r3, #12]
 80177c4:	685b      	ldr	r3, [r3, #4]
 80177c6:	1ad3      	subs	r3, r2, r3
            if (next &&
 80177c8:	2b00      	cmp	r3, #0
 80177ca:	dd4d      	ble.n	8017868 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 80177cc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80177ce:	68db      	ldr	r3, [r3, #12]
 80177d0:	685b      	ldr	r3, [r3, #4]
 80177d2:	b29a      	uxth	r2, r3
 80177d4:	4b81      	ldr	r3, [pc, #516]	; (80179dc <tcp_receive+0xb0c>)
 80177d6:	681b      	ldr	r3, [r3, #0]
 80177d8:	b29b      	uxth	r3, r3
 80177da:	1ad3      	subs	r3, r2, r3
 80177dc:	b29a      	uxth	r2, r3
 80177de:	4b80      	ldr	r3, [pc, #512]	; (80179e0 <tcp_receive+0xb10>)
 80177e0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80177e2:	4b7f      	ldr	r3, [pc, #508]	; (80179e0 <tcp_receive+0xb10>)
 80177e4:	68db      	ldr	r3, [r3, #12]
 80177e6:	899b      	ldrh	r3, [r3, #12]
 80177e8:	b29b      	uxth	r3, r3
 80177ea:	4618      	mov	r0, r3
 80177ec:	f7fa fe72 	bl	80124d4 <lwip_htons>
 80177f0:	4603      	mov	r3, r0
 80177f2:	b2db      	uxtb	r3, r3
 80177f4:	f003 0302 	and.w	r3, r3, #2
 80177f8:	2b00      	cmp	r3, #0
 80177fa:	d005      	beq.n	8017808 <tcp_receive+0x938>
                inseg.len -= 1;
 80177fc:	4b78      	ldr	r3, [pc, #480]	; (80179e0 <tcp_receive+0xb10>)
 80177fe:	891b      	ldrh	r3, [r3, #8]
 8017800:	3b01      	subs	r3, #1
 8017802:	b29a      	uxth	r2, r3
 8017804:	4b76      	ldr	r3, [pc, #472]	; (80179e0 <tcp_receive+0xb10>)
 8017806:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8017808:	4b75      	ldr	r3, [pc, #468]	; (80179e0 <tcp_receive+0xb10>)
 801780a:	685b      	ldr	r3, [r3, #4]
 801780c:	4a74      	ldr	r2, [pc, #464]	; (80179e0 <tcp_receive+0xb10>)
 801780e:	8912      	ldrh	r2, [r2, #8]
 8017810:	4611      	mov	r1, r2
 8017812:	4618      	mov	r0, r3
 8017814:	f7fc f8da 	bl	80139cc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8017818:	4b71      	ldr	r3, [pc, #452]	; (80179e0 <tcp_receive+0xb10>)
 801781a:	891c      	ldrh	r4, [r3, #8]
 801781c:	4b70      	ldr	r3, [pc, #448]	; (80179e0 <tcp_receive+0xb10>)
 801781e:	68db      	ldr	r3, [r3, #12]
 8017820:	899b      	ldrh	r3, [r3, #12]
 8017822:	b29b      	uxth	r3, r3
 8017824:	4618      	mov	r0, r3
 8017826:	f7fa fe55 	bl	80124d4 <lwip_htons>
 801782a:	4603      	mov	r3, r0
 801782c:	b2db      	uxtb	r3, r3
 801782e:	f003 0303 	and.w	r3, r3, #3
 8017832:	2b00      	cmp	r3, #0
 8017834:	d001      	beq.n	801783a <tcp_receive+0x96a>
 8017836:	2301      	movs	r3, #1
 8017838:	e000      	b.n	801783c <tcp_receive+0x96c>
 801783a:	2300      	movs	r3, #0
 801783c:	4423      	add	r3, r4
 801783e:	b29a      	uxth	r2, r3
 8017840:	4b65      	ldr	r3, [pc, #404]	; (80179d8 <tcp_receive+0xb08>)
 8017842:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8017844:	4b64      	ldr	r3, [pc, #400]	; (80179d8 <tcp_receive+0xb08>)
 8017846:	881b      	ldrh	r3, [r3, #0]
 8017848:	461a      	mov	r2, r3
 801784a:	4b64      	ldr	r3, [pc, #400]	; (80179dc <tcp_receive+0xb0c>)
 801784c:	681b      	ldr	r3, [r3, #0]
 801784e:	441a      	add	r2, r3
 8017850:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017852:	68db      	ldr	r3, [r3, #12]
 8017854:	685b      	ldr	r3, [r3, #4]
 8017856:	429a      	cmp	r2, r3
 8017858:	d006      	beq.n	8017868 <tcp_receive+0x998>
 801785a:	4b62      	ldr	r3, [pc, #392]	; (80179e4 <tcp_receive+0xb14>)
 801785c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8017860:	4961      	ldr	r1, [pc, #388]	; (80179e8 <tcp_receive+0xb18>)
 8017862:	4862      	ldr	r0, [pc, #392]	; (80179ec <tcp_receive+0xb1c>)
 8017864:	f006 fa6c 	bl	801dd40 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8017868:	687b      	ldr	r3, [r7, #4]
 801786a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801786c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801786e:	4b5a      	ldr	r3, [pc, #360]	; (80179d8 <tcp_receive+0xb08>)
 8017870:	881b      	ldrh	r3, [r3, #0]
 8017872:	461a      	mov	r2, r3
 8017874:	4b59      	ldr	r3, [pc, #356]	; (80179dc <tcp_receive+0xb0c>)
 8017876:	681b      	ldr	r3, [r3, #0]
 8017878:	441a      	add	r2, r3
 801787a:	687b      	ldr	r3, [r7, #4]
 801787c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801787e:	687b      	ldr	r3, [r7, #4]
 8017880:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8017882:	4b55      	ldr	r3, [pc, #340]	; (80179d8 <tcp_receive+0xb08>)
 8017884:	881b      	ldrh	r3, [r3, #0]
 8017886:	429a      	cmp	r2, r3
 8017888:	d206      	bcs.n	8017898 <tcp_receive+0x9c8>
 801788a:	4b56      	ldr	r3, [pc, #344]	; (80179e4 <tcp_receive+0xb14>)
 801788c:	f240 6207 	movw	r2, #1543	; 0x607
 8017890:	4957      	ldr	r1, [pc, #348]	; (80179f0 <tcp_receive+0xb20>)
 8017892:	4856      	ldr	r0, [pc, #344]	; (80179ec <tcp_receive+0xb1c>)
 8017894:	f006 fa54 	bl	801dd40 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8017898:	687b      	ldr	r3, [r7, #4]
 801789a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801789c:	4b4e      	ldr	r3, [pc, #312]	; (80179d8 <tcp_receive+0xb08>)
 801789e:	881b      	ldrh	r3, [r3, #0]
 80178a0:	1ad3      	subs	r3, r2, r3
 80178a2:	b29a      	uxth	r2, r3
 80178a4:	687b      	ldr	r3, [r7, #4]
 80178a6:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 80178a8:	6878      	ldr	r0, [r7, #4]
 80178aa:	f7fc ffc5 	bl	8014838 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 80178ae:	4b4c      	ldr	r3, [pc, #304]	; (80179e0 <tcp_receive+0xb10>)
 80178b0:	685b      	ldr	r3, [r3, #4]
 80178b2:	891b      	ldrh	r3, [r3, #8]
 80178b4:	2b00      	cmp	r3, #0
 80178b6:	d006      	beq.n	80178c6 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 80178b8:	4b49      	ldr	r3, [pc, #292]	; (80179e0 <tcp_receive+0xb10>)
 80178ba:	685b      	ldr	r3, [r3, #4]
 80178bc:	4a4d      	ldr	r2, [pc, #308]	; (80179f4 <tcp_receive+0xb24>)
 80178be:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80178c0:	4b47      	ldr	r3, [pc, #284]	; (80179e0 <tcp_receive+0xb10>)
 80178c2:	2200      	movs	r2, #0
 80178c4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80178c6:	4b46      	ldr	r3, [pc, #280]	; (80179e0 <tcp_receive+0xb10>)
 80178c8:	68db      	ldr	r3, [r3, #12]
 80178ca:	899b      	ldrh	r3, [r3, #12]
 80178cc:	b29b      	uxth	r3, r3
 80178ce:	4618      	mov	r0, r3
 80178d0:	f7fa fe00 	bl	80124d4 <lwip_htons>
 80178d4:	4603      	mov	r3, r0
 80178d6:	b2db      	uxtb	r3, r3
 80178d8:	f003 0301 	and.w	r3, r3, #1
 80178dc:	2b00      	cmp	r3, #0
 80178de:	f000 80b8 	beq.w	8017a52 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80178e2:	4b45      	ldr	r3, [pc, #276]	; (80179f8 <tcp_receive+0xb28>)
 80178e4:	781b      	ldrb	r3, [r3, #0]
 80178e6:	f043 0320 	orr.w	r3, r3, #32
 80178ea:	b2da      	uxtb	r2, r3
 80178ec:	4b42      	ldr	r3, [pc, #264]	; (80179f8 <tcp_receive+0xb28>)
 80178ee:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80178f0:	e0af      	b.n	8017a52 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80178f2:	687b      	ldr	r3, [r7, #4]
 80178f4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80178f6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80178f8:	687b      	ldr	r3, [r7, #4]
 80178fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80178fc:	68db      	ldr	r3, [r3, #12]
 80178fe:	685b      	ldr	r3, [r3, #4]
 8017900:	4a36      	ldr	r2, [pc, #216]	; (80179dc <tcp_receive+0xb0c>)
 8017902:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 8017904:	68bb      	ldr	r3, [r7, #8]
 8017906:	891b      	ldrh	r3, [r3, #8]
 8017908:	461c      	mov	r4, r3
 801790a:	68bb      	ldr	r3, [r7, #8]
 801790c:	68db      	ldr	r3, [r3, #12]
 801790e:	899b      	ldrh	r3, [r3, #12]
 8017910:	b29b      	uxth	r3, r3
 8017912:	4618      	mov	r0, r3
 8017914:	f7fa fdde 	bl	80124d4 <lwip_htons>
 8017918:	4603      	mov	r3, r0
 801791a:	b2db      	uxtb	r3, r3
 801791c:	f003 0303 	and.w	r3, r3, #3
 8017920:	2b00      	cmp	r3, #0
 8017922:	d001      	beq.n	8017928 <tcp_receive+0xa58>
 8017924:	2301      	movs	r3, #1
 8017926:	e000      	b.n	801792a <tcp_receive+0xa5a>
 8017928:	2300      	movs	r3, #0
 801792a:	191a      	adds	r2, r3, r4
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017930:	441a      	add	r2, r3
 8017932:	687b      	ldr	r3, [r7, #4]
 8017934:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8017936:	687b      	ldr	r3, [r7, #4]
 8017938:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801793a:	461c      	mov	r4, r3
 801793c:	68bb      	ldr	r3, [r7, #8]
 801793e:	891b      	ldrh	r3, [r3, #8]
 8017940:	461d      	mov	r5, r3
 8017942:	68bb      	ldr	r3, [r7, #8]
 8017944:	68db      	ldr	r3, [r3, #12]
 8017946:	899b      	ldrh	r3, [r3, #12]
 8017948:	b29b      	uxth	r3, r3
 801794a:	4618      	mov	r0, r3
 801794c:	f7fa fdc2 	bl	80124d4 <lwip_htons>
 8017950:	4603      	mov	r3, r0
 8017952:	b2db      	uxtb	r3, r3
 8017954:	f003 0303 	and.w	r3, r3, #3
 8017958:	2b00      	cmp	r3, #0
 801795a:	d001      	beq.n	8017960 <tcp_receive+0xa90>
 801795c:	2301      	movs	r3, #1
 801795e:	e000      	b.n	8017962 <tcp_receive+0xa92>
 8017960:	2300      	movs	r3, #0
 8017962:	442b      	add	r3, r5
 8017964:	429c      	cmp	r4, r3
 8017966:	d206      	bcs.n	8017976 <tcp_receive+0xaa6>
 8017968:	4b1e      	ldr	r3, [pc, #120]	; (80179e4 <tcp_receive+0xb14>)
 801796a:	f240 622b 	movw	r2, #1579	; 0x62b
 801796e:	4923      	ldr	r1, [pc, #140]	; (80179fc <tcp_receive+0xb2c>)
 8017970:	481e      	ldr	r0, [pc, #120]	; (80179ec <tcp_receive+0xb1c>)
 8017972:	f006 f9e5 	bl	801dd40 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8017976:	68bb      	ldr	r3, [r7, #8]
 8017978:	891b      	ldrh	r3, [r3, #8]
 801797a:	461c      	mov	r4, r3
 801797c:	68bb      	ldr	r3, [r7, #8]
 801797e:	68db      	ldr	r3, [r3, #12]
 8017980:	899b      	ldrh	r3, [r3, #12]
 8017982:	b29b      	uxth	r3, r3
 8017984:	4618      	mov	r0, r3
 8017986:	f7fa fda5 	bl	80124d4 <lwip_htons>
 801798a:	4603      	mov	r3, r0
 801798c:	b2db      	uxtb	r3, r3
 801798e:	f003 0303 	and.w	r3, r3, #3
 8017992:	2b00      	cmp	r3, #0
 8017994:	d001      	beq.n	801799a <tcp_receive+0xaca>
 8017996:	2301      	movs	r3, #1
 8017998:	e000      	b.n	801799c <tcp_receive+0xacc>
 801799a:	2300      	movs	r3, #0
 801799c:	1919      	adds	r1, r3, r4
 801799e:	687b      	ldr	r3, [r7, #4]
 80179a0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80179a2:	b28b      	uxth	r3, r1
 80179a4:	1ad3      	subs	r3, r2, r3
 80179a6:	b29a      	uxth	r2, r3
 80179a8:	687b      	ldr	r3, [r7, #4]
 80179aa:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 80179ac:	6878      	ldr	r0, [r7, #4]
 80179ae:	f7fc ff43 	bl	8014838 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80179b2:	68bb      	ldr	r3, [r7, #8]
 80179b4:	685b      	ldr	r3, [r3, #4]
 80179b6:	891b      	ldrh	r3, [r3, #8]
 80179b8:	2b00      	cmp	r3, #0
 80179ba:	d028      	beq.n	8017a0e <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80179bc:	4b0d      	ldr	r3, [pc, #52]	; (80179f4 <tcp_receive+0xb24>)
 80179be:	681b      	ldr	r3, [r3, #0]
 80179c0:	2b00      	cmp	r3, #0
 80179c2:	d01d      	beq.n	8017a00 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 80179c4:	4b0b      	ldr	r3, [pc, #44]	; (80179f4 <tcp_receive+0xb24>)
 80179c6:	681a      	ldr	r2, [r3, #0]
 80179c8:	68bb      	ldr	r3, [r7, #8]
 80179ca:	685b      	ldr	r3, [r3, #4]
 80179cc:	4619      	mov	r1, r3
 80179ce:	4610      	mov	r0, r2
 80179d0:	f7fc fa50 	bl	8013e74 <pbuf_cat>
 80179d4:	e018      	b.n	8017a08 <tcp_receive+0xb38>
 80179d6:	bf00      	nop
 80179d8:	200240e2 	.word	0x200240e2
 80179dc:	200240d8 	.word	0x200240d8
 80179e0:	200240b8 	.word	0x200240b8
 80179e4:	0801fffc 	.word	0x0801fffc
 80179e8:	080203dc 	.word	0x080203dc
 80179ec:	08020048 	.word	0x08020048
 80179f0:	08020418 	.word	0x08020418
 80179f4:	200240e8 	.word	0x200240e8
 80179f8:	200240e5 	.word	0x200240e5
 80179fc:	08020438 	.word	0x08020438
            } else {
              recv_data = cseg->p;
 8017a00:	68bb      	ldr	r3, [r7, #8]
 8017a02:	685b      	ldr	r3, [r3, #4]
 8017a04:	4a70      	ldr	r2, [pc, #448]	; (8017bc8 <tcp_receive+0xcf8>)
 8017a06:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 8017a08:	68bb      	ldr	r3, [r7, #8]
 8017a0a:	2200      	movs	r2, #0
 8017a0c:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 8017a0e:	68bb      	ldr	r3, [r7, #8]
 8017a10:	68db      	ldr	r3, [r3, #12]
 8017a12:	899b      	ldrh	r3, [r3, #12]
 8017a14:	b29b      	uxth	r3, r3
 8017a16:	4618      	mov	r0, r3
 8017a18:	f7fa fd5c 	bl	80124d4 <lwip_htons>
 8017a1c:	4603      	mov	r3, r0
 8017a1e:	b2db      	uxtb	r3, r3
 8017a20:	f003 0301 	and.w	r3, r3, #1
 8017a24:	2b00      	cmp	r3, #0
 8017a26:	d00d      	beq.n	8017a44 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8017a28:	4b68      	ldr	r3, [pc, #416]	; (8017bcc <tcp_receive+0xcfc>)
 8017a2a:	781b      	ldrb	r3, [r3, #0]
 8017a2c:	f043 0320 	orr.w	r3, r3, #32
 8017a30:	b2da      	uxtb	r2, r3
 8017a32:	4b66      	ldr	r3, [pc, #408]	; (8017bcc <tcp_receive+0xcfc>)
 8017a34:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8017a36:	687b      	ldr	r3, [r7, #4]
 8017a38:	7d1b      	ldrb	r3, [r3, #20]
 8017a3a:	2b04      	cmp	r3, #4
 8017a3c:	d102      	bne.n	8017a44 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	2207      	movs	r2, #7
 8017a42:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8017a44:	68bb      	ldr	r3, [r7, #8]
 8017a46:	681a      	ldr	r2, [r3, #0]
 8017a48:	687b      	ldr	r3, [r7, #4]
 8017a4a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8017a4c:	68b8      	ldr	r0, [r7, #8]
 8017a4e:	f7fd fbd2 	bl	80151f6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8017a52:	687b      	ldr	r3, [r7, #4]
 8017a54:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	d008      	beq.n	8017a6c <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8017a5a:	687b      	ldr	r3, [r7, #4]
 8017a5c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017a5e:	68db      	ldr	r3, [r3, #12]
 8017a60:	685a      	ldr	r2, [r3, #4]
 8017a62:	687b      	ldr	r3, [r7, #4]
 8017a64:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8017a66:	429a      	cmp	r2, r3
 8017a68:	f43f af43 	beq.w	80178f2 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8017a6c:	687b      	ldr	r3, [r7, #4]
 8017a6e:	8b5b      	ldrh	r3, [r3, #26]
 8017a70:	f003 0301 	and.w	r3, r3, #1
 8017a74:	2b00      	cmp	r3, #0
 8017a76:	d00e      	beq.n	8017a96 <tcp_receive+0xbc6>
 8017a78:	687b      	ldr	r3, [r7, #4]
 8017a7a:	8b5b      	ldrh	r3, [r3, #26]
 8017a7c:	f023 0301 	bic.w	r3, r3, #1
 8017a80:	b29a      	uxth	r2, r3
 8017a82:	687b      	ldr	r3, [r7, #4]
 8017a84:	835a      	strh	r2, [r3, #26]
 8017a86:	687b      	ldr	r3, [r7, #4]
 8017a88:	8b5b      	ldrh	r3, [r3, #26]
 8017a8a:	f043 0302 	orr.w	r3, r3, #2
 8017a8e:	b29a      	uxth	r2, r3
 8017a90:	687b      	ldr	r3, [r7, #4]
 8017a92:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8017a94:	e188      	b.n	8017da8 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8017a96:	687b      	ldr	r3, [r7, #4]
 8017a98:	8b5b      	ldrh	r3, [r3, #26]
 8017a9a:	f043 0301 	orr.w	r3, r3, #1
 8017a9e:	b29a      	uxth	r2, r3
 8017aa0:	687b      	ldr	r3, [r7, #4]
 8017aa2:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8017aa4:	e180      	b.n	8017da8 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8017aa6:	687b      	ldr	r3, [r7, #4]
 8017aa8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017aaa:	2b00      	cmp	r3, #0
 8017aac:	d106      	bne.n	8017abc <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8017aae:	4848      	ldr	r0, [pc, #288]	; (8017bd0 <tcp_receive+0xd00>)
 8017ab0:	f7fd fbba 	bl	8015228 <tcp_seg_copy>
 8017ab4:	4602      	mov	r2, r0
 8017ab6:	687b      	ldr	r3, [r7, #4]
 8017ab8:	675a      	str	r2, [r3, #116]	; 0x74
 8017aba:	e16d      	b.n	8017d98 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8017abc:	2300      	movs	r3, #0
 8017abe:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8017ac0:	687b      	ldr	r3, [r7, #4]
 8017ac2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017ac4:	63bb      	str	r3, [r7, #56]	; 0x38
 8017ac6:	e157      	b.n	8017d78 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8017ac8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017aca:	68db      	ldr	r3, [r3, #12]
 8017acc:	685a      	ldr	r2, [r3, #4]
 8017ace:	4b41      	ldr	r3, [pc, #260]	; (8017bd4 <tcp_receive+0xd04>)
 8017ad0:	681b      	ldr	r3, [r3, #0]
 8017ad2:	429a      	cmp	r2, r3
 8017ad4:	d11d      	bne.n	8017b12 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 8017ad6:	4b3e      	ldr	r3, [pc, #248]	; (8017bd0 <tcp_receive+0xd00>)
 8017ad8:	891a      	ldrh	r2, [r3, #8]
 8017ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017adc:	891b      	ldrh	r3, [r3, #8]
 8017ade:	429a      	cmp	r2, r3
 8017ae0:	f240 814f 	bls.w	8017d82 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8017ae4:	483a      	ldr	r0, [pc, #232]	; (8017bd0 <tcp_receive+0xd00>)
 8017ae6:	f7fd fb9f 	bl	8015228 <tcp_seg_copy>
 8017aea:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 8017aec:	697b      	ldr	r3, [r7, #20]
 8017aee:	2b00      	cmp	r3, #0
 8017af0:	f000 8149 	beq.w	8017d86 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 8017af4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017af6:	2b00      	cmp	r3, #0
 8017af8:	d003      	beq.n	8017b02 <tcp_receive+0xc32>
                    prev->next = cseg;
 8017afa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017afc:	697a      	ldr	r2, [r7, #20]
 8017afe:	601a      	str	r2, [r3, #0]
 8017b00:	e002      	b.n	8017b08 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 8017b02:	687b      	ldr	r3, [r7, #4]
 8017b04:	697a      	ldr	r2, [r7, #20]
 8017b06:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 8017b08:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8017b0a:	6978      	ldr	r0, [r7, #20]
 8017b0c:	f7ff f8dc 	bl	8016cc8 <tcp_oos_insert_segment>
                }
                break;
 8017b10:	e139      	b.n	8017d86 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8017b12:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b14:	2b00      	cmp	r3, #0
 8017b16:	d117      	bne.n	8017b48 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8017b18:	4b2e      	ldr	r3, [pc, #184]	; (8017bd4 <tcp_receive+0xd04>)
 8017b1a:	681a      	ldr	r2, [r3, #0]
 8017b1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b1e:	68db      	ldr	r3, [r3, #12]
 8017b20:	685b      	ldr	r3, [r3, #4]
 8017b22:	1ad3      	subs	r3, r2, r3
 8017b24:	2b00      	cmp	r3, #0
 8017b26:	da57      	bge.n	8017bd8 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8017b28:	4829      	ldr	r0, [pc, #164]	; (8017bd0 <tcp_receive+0xd00>)
 8017b2a:	f7fd fb7d 	bl	8015228 <tcp_seg_copy>
 8017b2e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8017b30:	69bb      	ldr	r3, [r7, #24]
 8017b32:	2b00      	cmp	r3, #0
 8017b34:	f000 8129 	beq.w	8017d8a <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8017b38:	687b      	ldr	r3, [r7, #4]
 8017b3a:	69ba      	ldr	r2, [r7, #24]
 8017b3c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 8017b3e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8017b40:	69b8      	ldr	r0, [r7, #24]
 8017b42:	f7ff f8c1 	bl	8016cc8 <tcp_oos_insert_segment>
                  }
                  break;
 8017b46:	e120      	b.n	8017d8a <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8017b48:	4b22      	ldr	r3, [pc, #136]	; (8017bd4 <tcp_receive+0xd04>)
 8017b4a:	681a      	ldr	r2, [r3, #0]
 8017b4c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b4e:	68db      	ldr	r3, [r3, #12]
 8017b50:	685b      	ldr	r3, [r3, #4]
 8017b52:	1ad3      	subs	r3, r2, r3
 8017b54:	3b01      	subs	r3, #1
 8017b56:	2b00      	cmp	r3, #0
 8017b58:	db3e      	blt.n	8017bd8 <tcp_receive+0xd08>
 8017b5a:	4b1e      	ldr	r3, [pc, #120]	; (8017bd4 <tcp_receive+0xd04>)
 8017b5c:	681a      	ldr	r2, [r3, #0]
 8017b5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017b60:	68db      	ldr	r3, [r3, #12]
 8017b62:	685b      	ldr	r3, [r3, #4]
 8017b64:	1ad3      	subs	r3, r2, r3
 8017b66:	3301      	adds	r3, #1
 8017b68:	2b00      	cmp	r3, #0
 8017b6a:	dc35      	bgt.n	8017bd8 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8017b6c:	4818      	ldr	r0, [pc, #96]	; (8017bd0 <tcp_receive+0xd00>)
 8017b6e:	f7fd fb5b 	bl	8015228 <tcp_seg_copy>
 8017b72:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8017b74:	69fb      	ldr	r3, [r7, #28]
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	f000 8109 	beq.w	8017d8e <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8017b7c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b7e:	68db      	ldr	r3, [r3, #12]
 8017b80:	685b      	ldr	r3, [r3, #4]
 8017b82:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017b84:	8912      	ldrh	r2, [r2, #8]
 8017b86:	441a      	add	r2, r3
 8017b88:	4b12      	ldr	r3, [pc, #72]	; (8017bd4 <tcp_receive+0xd04>)
 8017b8a:	681b      	ldr	r3, [r3, #0]
 8017b8c:	1ad3      	subs	r3, r2, r3
 8017b8e:	2b00      	cmp	r3, #0
 8017b90:	dd12      	ble.n	8017bb8 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8017b92:	4b10      	ldr	r3, [pc, #64]	; (8017bd4 <tcp_receive+0xd04>)
 8017b94:	681b      	ldr	r3, [r3, #0]
 8017b96:	b29a      	uxth	r2, r3
 8017b98:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017b9a:	68db      	ldr	r3, [r3, #12]
 8017b9c:	685b      	ldr	r3, [r3, #4]
 8017b9e:	b29b      	uxth	r3, r3
 8017ba0:	1ad3      	subs	r3, r2, r3
 8017ba2:	b29a      	uxth	r2, r3
 8017ba4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017ba6:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8017ba8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017baa:	685a      	ldr	r2, [r3, #4]
 8017bac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017bae:	891b      	ldrh	r3, [r3, #8]
 8017bb0:	4619      	mov	r1, r3
 8017bb2:	4610      	mov	r0, r2
 8017bb4:	f7fb ff0a 	bl	80139cc <pbuf_realloc>
                    }
                    prev->next = cseg;
 8017bb8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017bba:	69fa      	ldr	r2, [r7, #28]
 8017bbc:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8017bbe:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8017bc0:	69f8      	ldr	r0, [r7, #28]
 8017bc2:	f7ff f881 	bl	8016cc8 <tcp_oos_insert_segment>
                  }
                  break;
 8017bc6:	e0e2      	b.n	8017d8e <tcp_receive+0xebe>
 8017bc8:	200240e8 	.word	0x200240e8
 8017bcc:	200240e5 	.word	0x200240e5
 8017bd0:	200240b8 	.word	0x200240b8
 8017bd4:	200240d8 	.word	0x200240d8
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8017bd8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bda:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8017bdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bde:	681b      	ldr	r3, [r3, #0]
 8017be0:	2b00      	cmp	r3, #0
 8017be2:	f040 80c6 	bne.w	8017d72 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 8017be6:	4b80      	ldr	r3, [pc, #512]	; (8017de8 <tcp_receive+0xf18>)
 8017be8:	681a      	ldr	r2, [r3, #0]
 8017bea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bec:	68db      	ldr	r3, [r3, #12]
 8017bee:	685b      	ldr	r3, [r3, #4]
 8017bf0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 8017bf2:	2b00      	cmp	r3, #0
 8017bf4:	f340 80bd 	ble.w	8017d72 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 8017bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017bfa:	68db      	ldr	r3, [r3, #12]
 8017bfc:	899b      	ldrh	r3, [r3, #12]
 8017bfe:	b29b      	uxth	r3, r3
 8017c00:	4618      	mov	r0, r3
 8017c02:	f7fa fc67 	bl	80124d4 <lwip_htons>
 8017c06:	4603      	mov	r3, r0
 8017c08:	b2db      	uxtb	r3, r3
 8017c0a:	f003 0301 	and.w	r3, r3, #1
 8017c0e:	2b00      	cmp	r3, #0
 8017c10:	f040 80bf 	bne.w	8017d92 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8017c14:	4875      	ldr	r0, [pc, #468]	; (8017dec <tcp_receive+0xf1c>)
 8017c16:	f7fd fb07 	bl	8015228 <tcp_seg_copy>
 8017c1a:	4602      	mov	r2, r0
 8017c1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c1e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8017c20:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c22:	681b      	ldr	r3, [r3, #0]
 8017c24:	2b00      	cmp	r3, #0
 8017c26:	f000 80b6 	beq.w	8017d96 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 8017c2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c2c:	68db      	ldr	r3, [r3, #12]
 8017c2e:	685b      	ldr	r3, [r3, #4]
 8017c30:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017c32:	8912      	ldrh	r2, [r2, #8]
 8017c34:	441a      	add	r2, r3
 8017c36:	4b6c      	ldr	r3, [pc, #432]	; (8017de8 <tcp_receive+0xf18>)
 8017c38:	681b      	ldr	r3, [r3, #0]
 8017c3a:	1ad3      	subs	r3, r2, r3
 8017c3c:	2b00      	cmp	r3, #0
 8017c3e:	dd12      	ble.n	8017c66 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8017c40:	4b69      	ldr	r3, [pc, #420]	; (8017de8 <tcp_receive+0xf18>)
 8017c42:	681b      	ldr	r3, [r3, #0]
 8017c44:	b29a      	uxth	r2, r3
 8017c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c48:	68db      	ldr	r3, [r3, #12]
 8017c4a:	685b      	ldr	r3, [r3, #4]
 8017c4c:	b29b      	uxth	r3, r3
 8017c4e:	1ad3      	subs	r3, r2, r3
 8017c50:	b29a      	uxth	r2, r3
 8017c52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c54:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8017c56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c58:	685a      	ldr	r2, [r3, #4]
 8017c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c5c:	891b      	ldrh	r3, [r3, #8]
 8017c5e:	4619      	mov	r1, r3
 8017c60:	4610      	mov	r0, r2
 8017c62:	f7fb feb3 	bl	80139cc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8017c66:	4b62      	ldr	r3, [pc, #392]	; (8017df0 <tcp_receive+0xf20>)
 8017c68:	881b      	ldrh	r3, [r3, #0]
 8017c6a:	461a      	mov	r2, r3
 8017c6c:	4b5e      	ldr	r3, [pc, #376]	; (8017de8 <tcp_receive+0xf18>)
 8017c6e:	681b      	ldr	r3, [r3, #0]
 8017c70:	441a      	add	r2, r3
 8017c72:	687b      	ldr	r3, [r7, #4]
 8017c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017c76:	6879      	ldr	r1, [r7, #4]
 8017c78:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017c7a:	440b      	add	r3, r1
 8017c7c:	1ad3      	subs	r3, r2, r3
 8017c7e:	2b00      	cmp	r3, #0
 8017c80:	f340 8089 	ble.w	8017d96 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8017c84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017c86:	681b      	ldr	r3, [r3, #0]
 8017c88:	68db      	ldr	r3, [r3, #12]
 8017c8a:	899b      	ldrh	r3, [r3, #12]
 8017c8c:	b29b      	uxth	r3, r3
 8017c8e:	4618      	mov	r0, r3
 8017c90:	f7fa fc20 	bl	80124d4 <lwip_htons>
 8017c94:	4603      	mov	r3, r0
 8017c96:	b2db      	uxtb	r3, r3
 8017c98:	f003 0301 	and.w	r3, r3, #1
 8017c9c:	2b00      	cmp	r3, #0
 8017c9e:	d022      	beq.n	8017ce6 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8017ca0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017ca2:	681b      	ldr	r3, [r3, #0]
 8017ca4:	68db      	ldr	r3, [r3, #12]
 8017ca6:	899b      	ldrh	r3, [r3, #12]
 8017ca8:	b29b      	uxth	r3, r3
 8017caa:	b21b      	sxth	r3, r3
 8017cac:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8017cb0:	b21c      	sxth	r4, r3
 8017cb2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cb4:	681b      	ldr	r3, [r3, #0]
 8017cb6:	68db      	ldr	r3, [r3, #12]
 8017cb8:	899b      	ldrh	r3, [r3, #12]
 8017cba:	b29b      	uxth	r3, r3
 8017cbc:	4618      	mov	r0, r3
 8017cbe:	f7fa fc09 	bl	80124d4 <lwip_htons>
 8017cc2:	4603      	mov	r3, r0
 8017cc4:	b2db      	uxtb	r3, r3
 8017cc6:	b29b      	uxth	r3, r3
 8017cc8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8017ccc:	b29b      	uxth	r3, r3
 8017cce:	4618      	mov	r0, r3
 8017cd0:	f7fa fc00 	bl	80124d4 <lwip_htons>
 8017cd4:	4603      	mov	r3, r0
 8017cd6:	b21b      	sxth	r3, r3
 8017cd8:	4323      	orrs	r3, r4
 8017cda:	b21a      	sxth	r2, r3
 8017cdc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cde:	681b      	ldr	r3, [r3, #0]
 8017ce0:	68db      	ldr	r3, [r3, #12]
 8017ce2:	b292      	uxth	r2, r2
 8017ce4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 8017ce6:	687b      	ldr	r3, [r7, #4]
 8017ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017cea:	b29a      	uxth	r2, r3
 8017cec:	687b      	ldr	r3, [r7, #4]
 8017cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8017cf0:	4413      	add	r3, r2
 8017cf2:	b299      	uxth	r1, r3
 8017cf4:	4b3c      	ldr	r3, [pc, #240]	; (8017de8 <tcp_receive+0xf18>)
 8017cf6:	681b      	ldr	r3, [r3, #0]
 8017cf8:	b29a      	uxth	r2, r3
 8017cfa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017cfc:	681b      	ldr	r3, [r3, #0]
 8017cfe:	1a8a      	subs	r2, r1, r2
 8017d00:	b292      	uxth	r2, r2
 8017d02:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 8017d04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d06:	681b      	ldr	r3, [r3, #0]
 8017d08:	685a      	ldr	r2, [r3, #4]
 8017d0a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d0c:	681b      	ldr	r3, [r3, #0]
 8017d0e:	891b      	ldrh	r3, [r3, #8]
 8017d10:	4619      	mov	r1, r3
 8017d12:	4610      	mov	r0, r2
 8017d14:	f7fb fe5a 	bl	80139cc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8017d18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d1a:	681b      	ldr	r3, [r3, #0]
 8017d1c:	891c      	ldrh	r4, [r3, #8]
 8017d1e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d20:	681b      	ldr	r3, [r3, #0]
 8017d22:	68db      	ldr	r3, [r3, #12]
 8017d24:	899b      	ldrh	r3, [r3, #12]
 8017d26:	b29b      	uxth	r3, r3
 8017d28:	4618      	mov	r0, r3
 8017d2a:	f7fa fbd3 	bl	80124d4 <lwip_htons>
 8017d2e:	4603      	mov	r3, r0
 8017d30:	b2db      	uxtb	r3, r3
 8017d32:	f003 0303 	and.w	r3, r3, #3
 8017d36:	2b00      	cmp	r3, #0
 8017d38:	d001      	beq.n	8017d3e <tcp_receive+0xe6e>
 8017d3a:	2301      	movs	r3, #1
 8017d3c:	e000      	b.n	8017d40 <tcp_receive+0xe70>
 8017d3e:	2300      	movs	r3, #0
 8017d40:	4423      	add	r3, r4
 8017d42:	b29a      	uxth	r2, r3
 8017d44:	4b2a      	ldr	r3, [pc, #168]	; (8017df0 <tcp_receive+0xf20>)
 8017d46:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8017d48:	4b29      	ldr	r3, [pc, #164]	; (8017df0 <tcp_receive+0xf20>)
 8017d4a:	881b      	ldrh	r3, [r3, #0]
 8017d4c:	461a      	mov	r2, r3
 8017d4e:	4b26      	ldr	r3, [pc, #152]	; (8017de8 <tcp_receive+0xf18>)
 8017d50:	681b      	ldr	r3, [r3, #0]
 8017d52:	441a      	add	r2, r3
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017d58:	6879      	ldr	r1, [r7, #4]
 8017d5a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017d5c:	440b      	add	r3, r1
 8017d5e:	429a      	cmp	r2, r3
 8017d60:	d019      	beq.n	8017d96 <tcp_receive+0xec6>
 8017d62:	4b24      	ldr	r3, [pc, #144]	; (8017df4 <tcp_receive+0xf24>)
 8017d64:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8017d68:	4923      	ldr	r1, [pc, #140]	; (8017df8 <tcp_receive+0xf28>)
 8017d6a:	4824      	ldr	r0, [pc, #144]	; (8017dfc <tcp_receive+0xf2c>)
 8017d6c:	f005 ffe8 	bl	801dd40 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8017d70:	e011      	b.n	8017d96 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8017d72:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d74:	681b      	ldr	r3, [r3, #0]
 8017d76:	63bb      	str	r3, [r7, #56]	; 0x38
 8017d78:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017d7a:	2b00      	cmp	r3, #0
 8017d7c:	f47f aea4 	bne.w	8017ac8 <tcp_receive+0xbf8>
 8017d80:	e00a      	b.n	8017d98 <tcp_receive+0xec8>
                break;
 8017d82:	bf00      	nop
 8017d84:	e008      	b.n	8017d98 <tcp_receive+0xec8>
                break;
 8017d86:	bf00      	nop
 8017d88:	e006      	b.n	8017d98 <tcp_receive+0xec8>
                  break;
 8017d8a:	bf00      	nop
 8017d8c:	e004      	b.n	8017d98 <tcp_receive+0xec8>
                  break;
 8017d8e:	bf00      	nop
 8017d90:	e002      	b.n	8017d98 <tcp_receive+0xec8>
                  break;
 8017d92:	bf00      	nop
 8017d94:	e000      	b.n	8017d98 <tcp_receive+0xec8>
                break;
 8017d96:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8017d98:	6878      	ldr	r0, [r7, #4]
 8017d9a:	f001 fa33 	bl	8019204 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8017d9e:	e003      	b.n	8017da8 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8017da0:	6878      	ldr	r0, [r7, #4]
 8017da2:	f001 fa2f 	bl	8019204 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8017da6:	e01a      	b.n	8017dde <tcp_receive+0xf0e>
 8017da8:	e019      	b.n	8017dde <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8017daa:	4b0f      	ldr	r3, [pc, #60]	; (8017de8 <tcp_receive+0xf18>)
 8017dac:	681a      	ldr	r2, [r3, #0]
 8017dae:	687b      	ldr	r3, [r7, #4]
 8017db0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017db2:	1ad3      	subs	r3, r2, r3
 8017db4:	2b00      	cmp	r3, #0
 8017db6:	db0a      	blt.n	8017dce <tcp_receive+0xefe>
 8017db8:	4b0b      	ldr	r3, [pc, #44]	; (8017de8 <tcp_receive+0xf18>)
 8017dba:	681a      	ldr	r2, [r3, #0]
 8017dbc:	687b      	ldr	r3, [r7, #4]
 8017dbe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017dc0:	6879      	ldr	r1, [r7, #4]
 8017dc2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8017dc4:	440b      	add	r3, r1
 8017dc6:	1ad3      	subs	r3, r2, r3
 8017dc8:	3301      	adds	r3, #1
 8017dca:	2b00      	cmp	r3, #0
 8017dcc:	dd07      	ble.n	8017dde <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8017dce:	687b      	ldr	r3, [r7, #4]
 8017dd0:	8b5b      	ldrh	r3, [r3, #26]
 8017dd2:	f043 0302 	orr.w	r3, r3, #2
 8017dd6:	b29a      	uxth	r2, r3
 8017dd8:	687b      	ldr	r3, [r7, #4]
 8017dda:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8017ddc:	e7ff      	b.n	8017dde <tcp_receive+0xf0e>
 8017dde:	bf00      	nop
 8017de0:	3750      	adds	r7, #80	; 0x50
 8017de2:	46bd      	mov	sp, r7
 8017de4:	bdb0      	pop	{r4, r5, r7, pc}
 8017de6:	bf00      	nop
 8017de8:	200240d8 	.word	0x200240d8
 8017dec:	200240b8 	.word	0x200240b8
 8017df0:	200240e2 	.word	0x200240e2
 8017df4:	0801fffc 	.word	0x0801fffc
 8017df8:	080203a4 	.word	0x080203a4
 8017dfc:	08020048 	.word	0x08020048

08017e00 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 8017e00:	b480      	push	{r7}
 8017e02:	b083      	sub	sp, #12
 8017e04:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 8017e06:	4b15      	ldr	r3, [pc, #84]	; (8017e5c <tcp_get_next_optbyte+0x5c>)
 8017e08:	881b      	ldrh	r3, [r3, #0]
 8017e0a:	1c5a      	adds	r2, r3, #1
 8017e0c:	b291      	uxth	r1, r2
 8017e0e:	4a13      	ldr	r2, [pc, #76]	; (8017e5c <tcp_get_next_optbyte+0x5c>)
 8017e10:	8011      	strh	r1, [r2, #0]
 8017e12:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8017e14:	4b12      	ldr	r3, [pc, #72]	; (8017e60 <tcp_get_next_optbyte+0x60>)
 8017e16:	681b      	ldr	r3, [r3, #0]
 8017e18:	2b00      	cmp	r3, #0
 8017e1a:	d004      	beq.n	8017e26 <tcp_get_next_optbyte+0x26>
 8017e1c:	4b11      	ldr	r3, [pc, #68]	; (8017e64 <tcp_get_next_optbyte+0x64>)
 8017e1e:	881b      	ldrh	r3, [r3, #0]
 8017e20:	88fa      	ldrh	r2, [r7, #6]
 8017e22:	429a      	cmp	r2, r3
 8017e24:	d208      	bcs.n	8017e38 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8017e26:	4b10      	ldr	r3, [pc, #64]	; (8017e68 <tcp_get_next_optbyte+0x68>)
 8017e28:	681b      	ldr	r3, [r3, #0]
 8017e2a:	3314      	adds	r3, #20
 8017e2c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 8017e2e:	88fb      	ldrh	r3, [r7, #6]
 8017e30:	683a      	ldr	r2, [r7, #0]
 8017e32:	4413      	add	r3, r2
 8017e34:	781b      	ldrb	r3, [r3, #0]
 8017e36:	e00b      	b.n	8017e50 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8017e38:	88fb      	ldrh	r3, [r7, #6]
 8017e3a:	b2da      	uxtb	r2, r3
 8017e3c:	4b09      	ldr	r3, [pc, #36]	; (8017e64 <tcp_get_next_optbyte+0x64>)
 8017e3e:	881b      	ldrh	r3, [r3, #0]
 8017e40:	b2db      	uxtb	r3, r3
 8017e42:	1ad3      	subs	r3, r2, r3
 8017e44:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8017e46:	4b06      	ldr	r3, [pc, #24]	; (8017e60 <tcp_get_next_optbyte+0x60>)
 8017e48:	681a      	ldr	r2, [r3, #0]
 8017e4a:	797b      	ldrb	r3, [r7, #5]
 8017e4c:	4413      	add	r3, r2
 8017e4e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017e50:	4618      	mov	r0, r3
 8017e52:	370c      	adds	r7, #12
 8017e54:	46bd      	mov	sp, r7
 8017e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017e5a:	4770      	bx	lr
 8017e5c:	200240d4 	.word	0x200240d4
 8017e60:	200240d0 	.word	0x200240d0
 8017e64:	200240ce 	.word	0x200240ce
 8017e68:	200240c8 	.word	0x200240c8

08017e6c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8017e6c:	b580      	push	{r7, lr}
 8017e6e:	b084      	sub	sp, #16
 8017e70:	af00      	add	r7, sp, #0
 8017e72:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8017e74:	687b      	ldr	r3, [r7, #4]
 8017e76:	2b00      	cmp	r3, #0
 8017e78:	d106      	bne.n	8017e88 <tcp_parseopt+0x1c>
 8017e7a:	4b32      	ldr	r3, [pc, #200]	; (8017f44 <tcp_parseopt+0xd8>)
 8017e7c:	f240 727d 	movw	r2, #1917	; 0x77d
 8017e80:	4931      	ldr	r1, [pc, #196]	; (8017f48 <tcp_parseopt+0xdc>)
 8017e82:	4832      	ldr	r0, [pc, #200]	; (8017f4c <tcp_parseopt+0xe0>)
 8017e84:	f005 ff5c 	bl	801dd40 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8017e88:	4b31      	ldr	r3, [pc, #196]	; (8017f50 <tcp_parseopt+0xe4>)
 8017e8a:	881b      	ldrh	r3, [r3, #0]
 8017e8c:	2b00      	cmp	r3, #0
 8017e8e:	d055      	beq.n	8017f3c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8017e90:	4b30      	ldr	r3, [pc, #192]	; (8017f54 <tcp_parseopt+0xe8>)
 8017e92:	2200      	movs	r2, #0
 8017e94:	801a      	strh	r2, [r3, #0]
 8017e96:	e045      	b.n	8017f24 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8017e98:	f7ff ffb2 	bl	8017e00 <tcp_get_next_optbyte>
 8017e9c:	4603      	mov	r3, r0
 8017e9e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8017ea0:	7bfb      	ldrb	r3, [r7, #15]
 8017ea2:	2b02      	cmp	r3, #2
 8017ea4:	d006      	beq.n	8017eb4 <tcp_parseopt+0x48>
 8017ea6:	2b02      	cmp	r3, #2
 8017ea8:	dc2b      	bgt.n	8017f02 <tcp_parseopt+0x96>
 8017eaa:	2b00      	cmp	r3, #0
 8017eac:	d041      	beq.n	8017f32 <tcp_parseopt+0xc6>
 8017eae:	2b01      	cmp	r3, #1
 8017eb0:	d127      	bne.n	8017f02 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8017eb2:	e037      	b.n	8017f24 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8017eb4:	f7ff ffa4 	bl	8017e00 <tcp_get_next_optbyte>
 8017eb8:	4603      	mov	r3, r0
 8017eba:	2b04      	cmp	r3, #4
 8017ebc:	d13b      	bne.n	8017f36 <tcp_parseopt+0xca>
 8017ebe:	4b25      	ldr	r3, [pc, #148]	; (8017f54 <tcp_parseopt+0xe8>)
 8017ec0:	881b      	ldrh	r3, [r3, #0]
 8017ec2:	3301      	adds	r3, #1
 8017ec4:	4a22      	ldr	r2, [pc, #136]	; (8017f50 <tcp_parseopt+0xe4>)
 8017ec6:	8812      	ldrh	r2, [r2, #0]
 8017ec8:	4293      	cmp	r3, r2
 8017eca:	da34      	bge.n	8017f36 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8017ecc:	f7ff ff98 	bl	8017e00 <tcp_get_next_optbyte>
 8017ed0:	4603      	mov	r3, r0
 8017ed2:	b29b      	uxth	r3, r3
 8017ed4:	021b      	lsls	r3, r3, #8
 8017ed6:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8017ed8:	f7ff ff92 	bl	8017e00 <tcp_get_next_optbyte>
 8017edc:	4603      	mov	r3, r0
 8017ede:	b29a      	uxth	r2, r3
 8017ee0:	89bb      	ldrh	r3, [r7, #12]
 8017ee2:	4313      	orrs	r3, r2
 8017ee4:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8017ee6:	89bb      	ldrh	r3, [r7, #12]
 8017ee8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8017eec:	d804      	bhi.n	8017ef8 <tcp_parseopt+0x8c>
 8017eee:	89bb      	ldrh	r3, [r7, #12]
 8017ef0:	2b00      	cmp	r3, #0
 8017ef2:	d001      	beq.n	8017ef8 <tcp_parseopt+0x8c>
 8017ef4:	89ba      	ldrh	r2, [r7, #12]
 8017ef6:	e001      	b.n	8017efc <tcp_parseopt+0x90>
 8017ef8:	f44f 7206 	mov.w	r2, #536	; 0x218
 8017efc:	687b      	ldr	r3, [r7, #4]
 8017efe:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8017f00:	e010      	b.n	8017f24 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8017f02:	f7ff ff7d 	bl	8017e00 <tcp_get_next_optbyte>
 8017f06:	4603      	mov	r3, r0
 8017f08:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8017f0a:	7afb      	ldrb	r3, [r7, #11]
 8017f0c:	2b01      	cmp	r3, #1
 8017f0e:	d914      	bls.n	8017f3a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8017f10:	7afb      	ldrb	r3, [r7, #11]
 8017f12:	b29a      	uxth	r2, r3
 8017f14:	4b0f      	ldr	r3, [pc, #60]	; (8017f54 <tcp_parseopt+0xe8>)
 8017f16:	881b      	ldrh	r3, [r3, #0]
 8017f18:	4413      	add	r3, r2
 8017f1a:	b29b      	uxth	r3, r3
 8017f1c:	3b02      	subs	r3, #2
 8017f1e:	b29a      	uxth	r2, r3
 8017f20:	4b0c      	ldr	r3, [pc, #48]	; (8017f54 <tcp_parseopt+0xe8>)
 8017f22:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8017f24:	4b0b      	ldr	r3, [pc, #44]	; (8017f54 <tcp_parseopt+0xe8>)
 8017f26:	881a      	ldrh	r2, [r3, #0]
 8017f28:	4b09      	ldr	r3, [pc, #36]	; (8017f50 <tcp_parseopt+0xe4>)
 8017f2a:	881b      	ldrh	r3, [r3, #0]
 8017f2c:	429a      	cmp	r2, r3
 8017f2e:	d3b3      	bcc.n	8017e98 <tcp_parseopt+0x2c>
 8017f30:	e004      	b.n	8017f3c <tcp_parseopt+0xd0>
          return;
 8017f32:	bf00      	nop
 8017f34:	e002      	b.n	8017f3c <tcp_parseopt+0xd0>
            return;
 8017f36:	bf00      	nop
 8017f38:	e000      	b.n	8017f3c <tcp_parseopt+0xd0>
            return;
 8017f3a:	bf00      	nop
      }
    }
  }
}
 8017f3c:	3710      	adds	r7, #16
 8017f3e:	46bd      	mov	sp, r7
 8017f40:	bd80      	pop	{r7, pc}
 8017f42:	bf00      	nop
 8017f44:	0801fffc 	.word	0x0801fffc
 8017f48:	08020460 	.word	0x08020460
 8017f4c:	08020048 	.word	0x08020048
 8017f50:	200240cc 	.word	0x200240cc
 8017f54:	200240d4 	.word	0x200240d4

08017f58 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8017f58:	b480      	push	{r7}
 8017f5a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8017f5c:	4b05      	ldr	r3, [pc, #20]	; (8017f74 <tcp_trigger_input_pcb_close+0x1c>)
 8017f5e:	781b      	ldrb	r3, [r3, #0]
 8017f60:	f043 0310 	orr.w	r3, r3, #16
 8017f64:	b2da      	uxtb	r2, r3
 8017f66:	4b03      	ldr	r3, [pc, #12]	; (8017f74 <tcp_trigger_input_pcb_close+0x1c>)
 8017f68:	701a      	strb	r2, [r3, #0]
}
 8017f6a:	bf00      	nop
 8017f6c:	46bd      	mov	sp, r7
 8017f6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017f72:	4770      	bx	lr
 8017f74:	200240e5 	.word	0x200240e5

08017f78 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8017f78:	b580      	push	{r7, lr}
 8017f7a:	b084      	sub	sp, #16
 8017f7c:	af00      	add	r7, sp, #0
 8017f7e:	60f8      	str	r0, [r7, #12]
 8017f80:	60b9      	str	r1, [r7, #8]
 8017f82:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8017f84:	68fb      	ldr	r3, [r7, #12]
 8017f86:	2b00      	cmp	r3, #0
 8017f88:	d00a      	beq.n	8017fa0 <tcp_route+0x28>
 8017f8a:	68fb      	ldr	r3, [r7, #12]
 8017f8c:	7a1b      	ldrb	r3, [r3, #8]
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	d006      	beq.n	8017fa0 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8017f92:	68fb      	ldr	r3, [r7, #12]
 8017f94:	7a1b      	ldrb	r3, [r3, #8]
 8017f96:	4618      	mov	r0, r3
 8017f98:	f7fb fb10 	bl	80135bc <netif_get_by_index>
 8017f9c:	4603      	mov	r3, r0
 8017f9e:	e003      	b.n	8017fa8 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8017fa0:	6878      	ldr	r0, [r7, #4]
 8017fa2:	f003 f99d 	bl	801b2e0 <ip4_route>
 8017fa6:	4603      	mov	r3, r0
  }
}
 8017fa8:	4618      	mov	r0, r3
 8017faa:	3710      	adds	r7, #16
 8017fac:	46bd      	mov	sp, r7
 8017fae:	bd80      	pop	{r7, pc}

08017fb0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8017fb0:	b590      	push	{r4, r7, lr}
 8017fb2:	b087      	sub	sp, #28
 8017fb4:	af00      	add	r7, sp, #0
 8017fb6:	60f8      	str	r0, [r7, #12]
 8017fb8:	60b9      	str	r1, [r7, #8]
 8017fba:	603b      	str	r3, [r7, #0]
 8017fbc:	4613      	mov	r3, r2
 8017fbe:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8017fc0:	68fb      	ldr	r3, [r7, #12]
 8017fc2:	2b00      	cmp	r3, #0
 8017fc4:	d105      	bne.n	8017fd2 <tcp_create_segment+0x22>
 8017fc6:	4b44      	ldr	r3, [pc, #272]	; (80180d8 <tcp_create_segment+0x128>)
 8017fc8:	22a3      	movs	r2, #163	; 0xa3
 8017fca:	4944      	ldr	r1, [pc, #272]	; (80180dc <tcp_create_segment+0x12c>)
 8017fcc:	4844      	ldr	r0, [pc, #272]	; (80180e0 <tcp_create_segment+0x130>)
 8017fce:	f005 feb7 	bl	801dd40 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8017fd2:	68bb      	ldr	r3, [r7, #8]
 8017fd4:	2b00      	cmp	r3, #0
 8017fd6:	d105      	bne.n	8017fe4 <tcp_create_segment+0x34>
 8017fd8:	4b3f      	ldr	r3, [pc, #252]	; (80180d8 <tcp_create_segment+0x128>)
 8017fda:	22a4      	movs	r2, #164	; 0xa4
 8017fdc:	4941      	ldr	r1, [pc, #260]	; (80180e4 <tcp_create_segment+0x134>)
 8017fde:	4840      	ldr	r0, [pc, #256]	; (80180e0 <tcp_create_segment+0x130>)
 8017fe0:	f005 feae 	bl	801dd40 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8017fe4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8017fe8:	009b      	lsls	r3, r3, #2
 8017fea:	b2db      	uxtb	r3, r3
 8017fec:	f003 0304 	and.w	r3, r3, #4
 8017ff0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8017ff2:	2003      	movs	r0, #3
 8017ff4:	f7fa ff56 	bl	8012ea4 <memp_malloc>
 8017ff8:	6138      	str	r0, [r7, #16]
 8017ffa:	693b      	ldr	r3, [r7, #16]
 8017ffc:	2b00      	cmp	r3, #0
 8017ffe:	d104      	bne.n	801800a <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8018000:	68b8      	ldr	r0, [r7, #8]
 8018002:	f7fb fe69 	bl	8013cd8 <pbuf_free>
    return NULL;
 8018006:	2300      	movs	r3, #0
 8018008:	e061      	b.n	80180ce <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 801800a:	693b      	ldr	r3, [r7, #16]
 801800c:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8018010:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8018012:	693b      	ldr	r3, [r7, #16]
 8018014:	2200      	movs	r2, #0
 8018016:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8018018:	693b      	ldr	r3, [r7, #16]
 801801a:	68ba      	ldr	r2, [r7, #8]
 801801c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801801e:	68bb      	ldr	r3, [r7, #8]
 8018020:	891a      	ldrh	r2, [r3, #8]
 8018022:	7dfb      	ldrb	r3, [r7, #23]
 8018024:	b29b      	uxth	r3, r3
 8018026:	429a      	cmp	r2, r3
 8018028:	d205      	bcs.n	8018036 <tcp_create_segment+0x86>
 801802a:	4b2b      	ldr	r3, [pc, #172]	; (80180d8 <tcp_create_segment+0x128>)
 801802c:	22b0      	movs	r2, #176	; 0xb0
 801802e:	492e      	ldr	r1, [pc, #184]	; (80180e8 <tcp_create_segment+0x138>)
 8018030:	482b      	ldr	r0, [pc, #172]	; (80180e0 <tcp_create_segment+0x130>)
 8018032:	f005 fe85 	bl	801dd40 <iprintf>
  seg->len = p->tot_len - optlen;
 8018036:	68bb      	ldr	r3, [r7, #8]
 8018038:	891a      	ldrh	r2, [r3, #8]
 801803a:	7dfb      	ldrb	r3, [r7, #23]
 801803c:	b29b      	uxth	r3, r3
 801803e:	1ad3      	subs	r3, r2, r3
 8018040:	b29a      	uxth	r2, r3
 8018042:	693b      	ldr	r3, [r7, #16]
 8018044:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8018046:	2114      	movs	r1, #20
 8018048:	68b8      	ldr	r0, [r7, #8]
 801804a:	f7fb fdaf 	bl	8013bac <pbuf_add_header>
 801804e:	4603      	mov	r3, r0
 8018050:	2b00      	cmp	r3, #0
 8018052:	d004      	beq.n	801805e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8018054:	6938      	ldr	r0, [r7, #16]
 8018056:	f7fd f8ce 	bl	80151f6 <tcp_seg_free>
    return NULL;
 801805a:	2300      	movs	r3, #0
 801805c:	e037      	b.n	80180ce <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801805e:	693b      	ldr	r3, [r7, #16]
 8018060:	685b      	ldr	r3, [r3, #4]
 8018062:	685a      	ldr	r2, [r3, #4]
 8018064:	693b      	ldr	r3, [r7, #16]
 8018066:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8018068:	68fb      	ldr	r3, [r7, #12]
 801806a:	8ada      	ldrh	r2, [r3, #22]
 801806c:	693b      	ldr	r3, [r7, #16]
 801806e:	68dc      	ldr	r4, [r3, #12]
 8018070:	4610      	mov	r0, r2
 8018072:	f7fa fa2f 	bl	80124d4 <lwip_htons>
 8018076:	4603      	mov	r3, r0
 8018078:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801807a:	68fb      	ldr	r3, [r7, #12]
 801807c:	8b1a      	ldrh	r2, [r3, #24]
 801807e:	693b      	ldr	r3, [r7, #16]
 8018080:	68dc      	ldr	r4, [r3, #12]
 8018082:	4610      	mov	r0, r2
 8018084:	f7fa fa26 	bl	80124d4 <lwip_htons>
 8018088:	4603      	mov	r3, r0
 801808a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801808c:	693b      	ldr	r3, [r7, #16]
 801808e:	68dc      	ldr	r4, [r3, #12]
 8018090:	6838      	ldr	r0, [r7, #0]
 8018092:	f7fa fa34 	bl	80124fe <lwip_htonl>
 8018096:	4603      	mov	r3, r0
 8018098:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801809a:	7dfb      	ldrb	r3, [r7, #23]
 801809c:	089b      	lsrs	r3, r3, #2
 801809e:	b2db      	uxtb	r3, r3
 80180a0:	b29b      	uxth	r3, r3
 80180a2:	3305      	adds	r3, #5
 80180a4:	b29b      	uxth	r3, r3
 80180a6:	031b      	lsls	r3, r3, #12
 80180a8:	b29a      	uxth	r2, r3
 80180aa:	79fb      	ldrb	r3, [r7, #7]
 80180ac:	b29b      	uxth	r3, r3
 80180ae:	4313      	orrs	r3, r2
 80180b0:	b29a      	uxth	r2, r3
 80180b2:	693b      	ldr	r3, [r7, #16]
 80180b4:	68dc      	ldr	r4, [r3, #12]
 80180b6:	4610      	mov	r0, r2
 80180b8:	f7fa fa0c 	bl	80124d4 <lwip_htons>
 80180bc:	4603      	mov	r3, r0
 80180be:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80180c0:	693b      	ldr	r3, [r7, #16]
 80180c2:	68db      	ldr	r3, [r3, #12]
 80180c4:	2200      	movs	r2, #0
 80180c6:	749a      	strb	r2, [r3, #18]
 80180c8:	2200      	movs	r2, #0
 80180ca:	74da      	strb	r2, [r3, #19]
  return seg;
 80180cc:	693b      	ldr	r3, [r7, #16]
}
 80180ce:	4618      	mov	r0, r3
 80180d0:	371c      	adds	r7, #28
 80180d2:	46bd      	mov	sp, r7
 80180d4:	bd90      	pop	{r4, r7, pc}
 80180d6:	bf00      	nop
 80180d8:	0802047c 	.word	0x0802047c
 80180dc:	080204b0 	.word	0x080204b0
 80180e0:	080204d0 	.word	0x080204d0
 80180e4:	080204f8 	.word	0x080204f8
 80180e8:	0802051c 	.word	0x0802051c

080180ec <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80180ec:	b590      	push	{r4, r7, lr}
 80180ee:	b08b      	sub	sp, #44	; 0x2c
 80180f0:	af02      	add	r7, sp, #8
 80180f2:	6078      	str	r0, [r7, #4]
 80180f4:	460b      	mov	r3, r1
 80180f6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80180f8:	2300      	movs	r3, #0
 80180fa:	61fb      	str	r3, [r7, #28]
 80180fc:	2300      	movs	r3, #0
 80180fe:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8018100:	2300      	movs	r3, #0
 8018102:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 8018104:	687b      	ldr	r3, [r7, #4]
 8018106:	2b00      	cmp	r3, #0
 8018108:	d106      	bne.n	8018118 <tcp_split_unsent_seg+0x2c>
 801810a:	4b95      	ldr	r3, [pc, #596]	; (8018360 <tcp_split_unsent_seg+0x274>)
 801810c:	f240 324b 	movw	r2, #843	; 0x34b
 8018110:	4994      	ldr	r1, [pc, #592]	; (8018364 <tcp_split_unsent_seg+0x278>)
 8018112:	4895      	ldr	r0, [pc, #596]	; (8018368 <tcp_split_unsent_seg+0x27c>)
 8018114:	f005 fe14 	bl	801dd40 <iprintf>

  useg = pcb->unsent;
 8018118:	687b      	ldr	r3, [r7, #4]
 801811a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801811c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801811e:	697b      	ldr	r3, [r7, #20]
 8018120:	2b00      	cmp	r3, #0
 8018122:	d102      	bne.n	801812a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8018124:	f04f 33ff 	mov.w	r3, #4294967295
 8018128:	e116      	b.n	8018358 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801812a:	887b      	ldrh	r3, [r7, #2]
 801812c:	2b00      	cmp	r3, #0
 801812e:	d109      	bne.n	8018144 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8018130:	4b8b      	ldr	r3, [pc, #556]	; (8018360 <tcp_split_unsent_seg+0x274>)
 8018132:	f240 3253 	movw	r2, #851	; 0x353
 8018136:	498d      	ldr	r1, [pc, #564]	; (801836c <tcp_split_unsent_seg+0x280>)
 8018138:	488b      	ldr	r0, [pc, #556]	; (8018368 <tcp_split_unsent_seg+0x27c>)
 801813a:	f005 fe01 	bl	801dd40 <iprintf>
    return ERR_VAL;
 801813e:	f06f 0305 	mvn.w	r3, #5
 8018142:	e109      	b.n	8018358 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8018144:	697b      	ldr	r3, [r7, #20]
 8018146:	891b      	ldrh	r3, [r3, #8]
 8018148:	887a      	ldrh	r2, [r7, #2]
 801814a:	429a      	cmp	r2, r3
 801814c:	d301      	bcc.n	8018152 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801814e:	2300      	movs	r3, #0
 8018150:	e102      	b.n	8018358 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8018152:	687b      	ldr	r3, [r7, #4]
 8018154:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018156:	887a      	ldrh	r2, [r7, #2]
 8018158:	429a      	cmp	r2, r3
 801815a:	d906      	bls.n	801816a <tcp_split_unsent_seg+0x7e>
 801815c:	4b80      	ldr	r3, [pc, #512]	; (8018360 <tcp_split_unsent_seg+0x274>)
 801815e:	f240 325b 	movw	r2, #859	; 0x35b
 8018162:	4983      	ldr	r1, [pc, #524]	; (8018370 <tcp_split_unsent_seg+0x284>)
 8018164:	4880      	ldr	r0, [pc, #512]	; (8018368 <tcp_split_unsent_seg+0x27c>)
 8018166:	f005 fdeb 	bl	801dd40 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801816a:	697b      	ldr	r3, [r7, #20]
 801816c:	891b      	ldrh	r3, [r3, #8]
 801816e:	2b00      	cmp	r3, #0
 8018170:	d106      	bne.n	8018180 <tcp_split_unsent_seg+0x94>
 8018172:	4b7b      	ldr	r3, [pc, #492]	; (8018360 <tcp_split_unsent_seg+0x274>)
 8018174:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8018178:	497e      	ldr	r1, [pc, #504]	; (8018374 <tcp_split_unsent_seg+0x288>)
 801817a:	487b      	ldr	r0, [pc, #492]	; (8018368 <tcp_split_unsent_seg+0x27c>)
 801817c:	f005 fde0 	bl	801dd40 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8018180:	697b      	ldr	r3, [r7, #20]
 8018182:	7a9b      	ldrb	r3, [r3, #10]
 8018184:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8018186:	7bfb      	ldrb	r3, [r7, #15]
 8018188:	009b      	lsls	r3, r3, #2
 801818a:	b2db      	uxtb	r3, r3
 801818c:	f003 0304 	and.w	r3, r3, #4
 8018190:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8018192:	697b      	ldr	r3, [r7, #20]
 8018194:	891a      	ldrh	r2, [r3, #8]
 8018196:	887b      	ldrh	r3, [r7, #2]
 8018198:	1ad3      	subs	r3, r2, r3
 801819a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801819c:	7bbb      	ldrb	r3, [r7, #14]
 801819e:	b29a      	uxth	r2, r3
 80181a0:	89bb      	ldrh	r3, [r7, #12]
 80181a2:	4413      	add	r3, r2
 80181a4:	b29b      	uxth	r3, r3
 80181a6:	f44f 7220 	mov.w	r2, #640	; 0x280
 80181aa:	4619      	mov	r1, r3
 80181ac:	2036      	movs	r0, #54	; 0x36
 80181ae:	f7fb faaf 	bl	8013710 <pbuf_alloc>
 80181b2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80181b4:	693b      	ldr	r3, [r7, #16]
 80181b6:	2b00      	cmp	r3, #0
 80181b8:	f000 80b7 	beq.w	801832a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80181bc:	697b      	ldr	r3, [r7, #20]
 80181be:	685b      	ldr	r3, [r3, #4]
 80181c0:	891a      	ldrh	r2, [r3, #8]
 80181c2:	697b      	ldr	r3, [r7, #20]
 80181c4:	891b      	ldrh	r3, [r3, #8]
 80181c6:	1ad3      	subs	r3, r2, r3
 80181c8:	b29a      	uxth	r2, r3
 80181ca:	887b      	ldrh	r3, [r7, #2]
 80181cc:	4413      	add	r3, r2
 80181ce:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80181d0:	697b      	ldr	r3, [r7, #20]
 80181d2:	6858      	ldr	r0, [r3, #4]
 80181d4:	693b      	ldr	r3, [r7, #16]
 80181d6:	685a      	ldr	r2, [r3, #4]
 80181d8:	7bbb      	ldrb	r3, [r7, #14]
 80181da:	18d1      	adds	r1, r2, r3
 80181dc:	897b      	ldrh	r3, [r7, #10]
 80181de:	89ba      	ldrh	r2, [r7, #12]
 80181e0:	f7fb ff80 	bl	80140e4 <pbuf_copy_partial>
 80181e4:	4603      	mov	r3, r0
 80181e6:	461a      	mov	r2, r3
 80181e8:	89bb      	ldrh	r3, [r7, #12]
 80181ea:	4293      	cmp	r3, r2
 80181ec:	f040 809f 	bne.w	801832e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80181f0:	697b      	ldr	r3, [r7, #20]
 80181f2:	68db      	ldr	r3, [r3, #12]
 80181f4:	899b      	ldrh	r3, [r3, #12]
 80181f6:	b29b      	uxth	r3, r3
 80181f8:	4618      	mov	r0, r3
 80181fa:	f7fa f96b 	bl	80124d4 <lwip_htons>
 80181fe:	4603      	mov	r3, r0
 8018200:	b2db      	uxtb	r3, r3
 8018202:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8018206:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8018208:	2300      	movs	r3, #0
 801820a:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 801820c:	7efb      	ldrb	r3, [r7, #27]
 801820e:	f003 0308 	and.w	r3, r3, #8
 8018212:	2b00      	cmp	r3, #0
 8018214:	d007      	beq.n	8018226 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8018216:	7efb      	ldrb	r3, [r7, #27]
 8018218:	f023 0308 	bic.w	r3, r3, #8
 801821c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 801821e:	7ebb      	ldrb	r3, [r7, #26]
 8018220:	f043 0308 	orr.w	r3, r3, #8
 8018224:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8018226:	7efb      	ldrb	r3, [r7, #27]
 8018228:	f003 0301 	and.w	r3, r3, #1
 801822c:	2b00      	cmp	r3, #0
 801822e:	d007      	beq.n	8018240 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8018230:	7efb      	ldrb	r3, [r7, #27]
 8018232:	f023 0301 	bic.w	r3, r3, #1
 8018236:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8018238:	7ebb      	ldrb	r3, [r7, #26]
 801823a:	f043 0301 	orr.w	r3, r3, #1
 801823e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8018240:	697b      	ldr	r3, [r7, #20]
 8018242:	68db      	ldr	r3, [r3, #12]
 8018244:	685b      	ldr	r3, [r3, #4]
 8018246:	4618      	mov	r0, r3
 8018248:	f7fa f959 	bl	80124fe <lwip_htonl>
 801824c:	4602      	mov	r2, r0
 801824e:	887b      	ldrh	r3, [r7, #2]
 8018250:	18d1      	adds	r1, r2, r3
 8018252:	7eba      	ldrb	r2, [r7, #26]
 8018254:	7bfb      	ldrb	r3, [r7, #15]
 8018256:	9300      	str	r3, [sp, #0]
 8018258:	460b      	mov	r3, r1
 801825a:	6939      	ldr	r1, [r7, #16]
 801825c:	6878      	ldr	r0, [r7, #4]
 801825e:	f7ff fea7 	bl	8017fb0 <tcp_create_segment>
 8018262:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8018264:	69fb      	ldr	r3, [r7, #28]
 8018266:	2b00      	cmp	r3, #0
 8018268:	d063      	beq.n	8018332 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 801826a:	697b      	ldr	r3, [r7, #20]
 801826c:	685b      	ldr	r3, [r3, #4]
 801826e:	4618      	mov	r0, r3
 8018270:	f7fb fdc0 	bl	8013df4 <pbuf_clen>
 8018274:	4603      	mov	r3, r0
 8018276:	461a      	mov	r2, r3
 8018278:	687b      	ldr	r3, [r7, #4]
 801827a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801827e:	1a9b      	subs	r3, r3, r2
 8018280:	b29a      	uxth	r2, r3
 8018282:	687b      	ldr	r3, [r7, #4]
 8018284:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8018288:	697b      	ldr	r3, [r7, #20]
 801828a:	6858      	ldr	r0, [r3, #4]
 801828c:	697b      	ldr	r3, [r7, #20]
 801828e:	685b      	ldr	r3, [r3, #4]
 8018290:	891a      	ldrh	r2, [r3, #8]
 8018292:	89bb      	ldrh	r3, [r7, #12]
 8018294:	1ad3      	subs	r3, r2, r3
 8018296:	b29b      	uxth	r3, r3
 8018298:	4619      	mov	r1, r3
 801829a:	f7fb fb97 	bl	80139cc <pbuf_realloc>
  useg->len -= remainder;
 801829e:	697b      	ldr	r3, [r7, #20]
 80182a0:	891a      	ldrh	r2, [r3, #8]
 80182a2:	89bb      	ldrh	r3, [r7, #12]
 80182a4:	1ad3      	subs	r3, r2, r3
 80182a6:	b29a      	uxth	r2, r3
 80182a8:	697b      	ldr	r3, [r7, #20]
 80182aa:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 80182ac:	697b      	ldr	r3, [r7, #20]
 80182ae:	68db      	ldr	r3, [r3, #12]
 80182b0:	899b      	ldrh	r3, [r3, #12]
 80182b2:	b29c      	uxth	r4, r3
 80182b4:	7efb      	ldrb	r3, [r7, #27]
 80182b6:	b29b      	uxth	r3, r3
 80182b8:	4618      	mov	r0, r3
 80182ba:	f7fa f90b 	bl	80124d4 <lwip_htons>
 80182be:	4603      	mov	r3, r0
 80182c0:	461a      	mov	r2, r3
 80182c2:	697b      	ldr	r3, [r7, #20]
 80182c4:	68db      	ldr	r3, [r3, #12]
 80182c6:	4322      	orrs	r2, r4
 80182c8:	b292      	uxth	r2, r2
 80182ca:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 80182cc:	697b      	ldr	r3, [r7, #20]
 80182ce:	685b      	ldr	r3, [r3, #4]
 80182d0:	4618      	mov	r0, r3
 80182d2:	f7fb fd8f 	bl	8013df4 <pbuf_clen>
 80182d6:	4603      	mov	r3, r0
 80182d8:	461a      	mov	r2, r3
 80182da:	687b      	ldr	r3, [r7, #4]
 80182dc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80182e0:	4413      	add	r3, r2
 80182e2:	b29a      	uxth	r2, r3
 80182e4:	687b      	ldr	r3, [r7, #4]
 80182e6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80182ea:	69fb      	ldr	r3, [r7, #28]
 80182ec:	685b      	ldr	r3, [r3, #4]
 80182ee:	4618      	mov	r0, r3
 80182f0:	f7fb fd80 	bl	8013df4 <pbuf_clen>
 80182f4:	4603      	mov	r3, r0
 80182f6:	461a      	mov	r2, r3
 80182f8:	687b      	ldr	r3, [r7, #4]
 80182fa:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80182fe:	4413      	add	r3, r2
 8018300:	b29a      	uxth	r2, r3
 8018302:	687b      	ldr	r3, [r7, #4]
 8018304:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8018308:	697b      	ldr	r3, [r7, #20]
 801830a:	681a      	ldr	r2, [r3, #0]
 801830c:	69fb      	ldr	r3, [r7, #28]
 801830e:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8018310:	697b      	ldr	r3, [r7, #20]
 8018312:	69fa      	ldr	r2, [r7, #28]
 8018314:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8018316:	69fb      	ldr	r3, [r7, #28]
 8018318:	681b      	ldr	r3, [r3, #0]
 801831a:	2b00      	cmp	r3, #0
 801831c:	d103      	bne.n	8018326 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 801831e:	687b      	ldr	r3, [r7, #4]
 8018320:	2200      	movs	r2, #0
 8018322:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8018326:	2300      	movs	r3, #0
 8018328:	e016      	b.n	8018358 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 801832a:	bf00      	nop
 801832c:	e002      	b.n	8018334 <tcp_split_unsent_seg+0x248>
    goto memerr;
 801832e:	bf00      	nop
 8018330:	e000      	b.n	8018334 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8018332:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8018334:	69fb      	ldr	r3, [r7, #28]
 8018336:	2b00      	cmp	r3, #0
 8018338:	d006      	beq.n	8018348 <tcp_split_unsent_seg+0x25c>
 801833a:	4b09      	ldr	r3, [pc, #36]	; (8018360 <tcp_split_unsent_seg+0x274>)
 801833c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8018340:	490d      	ldr	r1, [pc, #52]	; (8018378 <tcp_split_unsent_seg+0x28c>)
 8018342:	4809      	ldr	r0, [pc, #36]	; (8018368 <tcp_split_unsent_seg+0x27c>)
 8018344:	f005 fcfc 	bl	801dd40 <iprintf>
  if (p != NULL) {
 8018348:	693b      	ldr	r3, [r7, #16]
 801834a:	2b00      	cmp	r3, #0
 801834c:	d002      	beq.n	8018354 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 801834e:	6938      	ldr	r0, [r7, #16]
 8018350:	f7fb fcc2 	bl	8013cd8 <pbuf_free>
  }

  return ERR_MEM;
 8018354:	f04f 33ff 	mov.w	r3, #4294967295
}
 8018358:	4618      	mov	r0, r3
 801835a:	3724      	adds	r7, #36	; 0x24
 801835c:	46bd      	mov	sp, r7
 801835e:	bd90      	pop	{r4, r7, pc}
 8018360:	0802047c 	.word	0x0802047c
 8018364:	08020810 	.word	0x08020810
 8018368:	080204d0 	.word	0x080204d0
 801836c:	08020834 	.word	0x08020834
 8018370:	08020858 	.word	0x08020858
 8018374:	08020868 	.word	0x08020868
 8018378:	08020878 	.word	0x08020878

0801837c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 801837c:	b590      	push	{r4, r7, lr}
 801837e:	b085      	sub	sp, #20
 8018380:	af00      	add	r7, sp, #0
 8018382:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8018384:	687b      	ldr	r3, [r7, #4]
 8018386:	2b00      	cmp	r3, #0
 8018388:	d106      	bne.n	8018398 <tcp_send_fin+0x1c>
 801838a:	4b21      	ldr	r3, [pc, #132]	; (8018410 <tcp_send_fin+0x94>)
 801838c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8018390:	4920      	ldr	r1, [pc, #128]	; (8018414 <tcp_send_fin+0x98>)
 8018392:	4821      	ldr	r0, [pc, #132]	; (8018418 <tcp_send_fin+0x9c>)
 8018394:	f005 fcd4 	bl	801dd40 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8018398:	687b      	ldr	r3, [r7, #4]
 801839a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801839c:	2b00      	cmp	r3, #0
 801839e:	d02e      	beq.n	80183fe <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80183a0:	687b      	ldr	r3, [r7, #4]
 80183a2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80183a4:	60fb      	str	r3, [r7, #12]
 80183a6:	e002      	b.n	80183ae <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 80183a8:	68fb      	ldr	r3, [r7, #12]
 80183aa:	681b      	ldr	r3, [r3, #0]
 80183ac:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 80183ae:	68fb      	ldr	r3, [r7, #12]
 80183b0:	681b      	ldr	r3, [r3, #0]
 80183b2:	2b00      	cmp	r3, #0
 80183b4:	d1f8      	bne.n	80183a8 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 80183b6:	68fb      	ldr	r3, [r7, #12]
 80183b8:	68db      	ldr	r3, [r3, #12]
 80183ba:	899b      	ldrh	r3, [r3, #12]
 80183bc:	b29b      	uxth	r3, r3
 80183be:	4618      	mov	r0, r3
 80183c0:	f7fa f888 	bl	80124d4 <lwip_htons>
 80183c4:	4603      	mov	r3, r0
 80183c6:	b2db      	uxtb	r3, r3
 80183c8:	f003 0307 	and.w	r3, r3, #7
 80183cc:	2b00      	cmp	r3, #0
 80183ce:	d116      	bne.n	80183fe <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 80183d0:	68fb      	ldr	r3, [r7, #12]
 80183d2:	68db      	ldr	r3, [r3, #12]
 80183d4:	899b      	ldrh	r3, [r3, #12]
 80183d6:	b29c      	uxth	r4, r3
 80183d8:	2001      	movs	r0, #1
 80183da:	f7fa f87b 	bl	80124d4 <lwip_htons>
 80183de:	4603      	mov	r3, r0
 80183e0:	461a      	mov	r2, r3
 80183e2:	68fb      	ldr	r3, [r7, #12]
 80183e4:	68db      	ldr	r3, [r3, #12]
 80183e6:	4322      	orrs	r2, r4
 80183e8:	b292      	uxth	r2, r2
 80183ea:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 80183ec:	687b      	ldr	r3, [r7, #4]
 80183ee:	8b5b      	ldrh	r3, [r3, #26]
 80183f0:	f043 0320 	orr.w	r3, r3, #32
 80183f4:	b29a      	uxth	r2, r3
 80183f6:	687b      	ldr	r3, [r7, #4]
 80183f8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 80183fa:	2300      	movs	r3, #0
 80183fc:	e004      	b.n	8018408 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 80183fe:	2101      	movs	r1, #1
 8018400:	6878      	ldr	r0, [r7, #4]
 8018402:	f000 f80b 	bl	801841c <tcp_enqueue_flags>
 8018406:	4603      	mov	r3, r0
}
 8018408:	4618      	mov	r0, r3
 801840a:	3714      	adds	r7, #20
 801840c:	46bd      	mov	sp, r7
 801840e:	bd90      	pop	{r4, r7, pc}
 8018410:	0802047c 	.word	0x0802047c
 8018414:	08020884 	.word	0x08020884
 8018418:	080204d0 	.word	0x080204d0

0801841c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 801841c:	b580      	push	{r7, lr}
 801841e:	b08a      	sub	sp, #40	; 0x28
 8018420:	af02      	add	r7, sp, #8
 8018422:	6078      	str	r0, [r7, #4]
 8018424:	460b      	mov	r3, r1
 8018426:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8018428:	2300      	movs	r3, #0
 801842a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 801842c:	2300      	movs	r3, #0
 801842e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8018430:	78fb      	ldrb	r3, [r7, #3]
 8018432:	f003 0303 	and.w	r3, r3, #3
 8018436:	2b00      	cmp	r3, #0
 8018438:	d106      	bne.n	8018448 <tcp_enqueue_flags+0x2c>
 801843a:	4b67      	ldr	r3, [pc, #412]	; (80185d8 <tcp_enqueue_flags+0x1bc>)
 801843c:	f240 4211 	movw	r2, #1041	; 0x411
 8018440:	4966      	ldr	r1, [pc, #408]	; (80185dc <tcp_enqueue_flags+0x1c0>)
 8018442:	4867      	ldr	r0, [pc, #412]	; (80185e0 <tcp_enqueue_flags+0x1c4>)
 8018444:	f005 fc7c 	bl	801dd40 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8018448:	687b      	ldr	r3, [r7, #4]
 801844a:	2b00      	cmp	r3, #0
 801844c:	d106      	bne.n	801845c <tcp_enqueue_flags+0x40>
 801844e:	4b62      	ldr	r3, [pc, #392]	; (80185d8 <tcp_enqueue_flags+0x1bc>)
 8018450:	f240 4213 	movw	r2, #1043	; 0x413
 8018454:	4963      	ldr	r1, [pc, #396]	; (80185e4 <tcp_enqueue_flags+0x1c8>)
 8018456:	4862      	ldr	r0, [pc, #392]	; (80185e0 <tcp_enqueue_flags+0x1c4>)
 8018458:	f005 fc72 	bl	801dd40 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 801845c:	78fb      	ldrb	r3, [r7, #3]
 801845e:	f003 0302 	and.w	r3, r3, #2
 8018462:	2b00      	cmp	r3, #0
 8018464:	d001      	beq.n	801846a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8018466:	2301      	movs	r3, #1
 8018468:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 801846a:	7ffb      	ldrb	r3, [r7, #31]
 801846c:	009b      	lsls	r3, r3, #2
 801846e:	b2db      	uxtb	r3, r3
 8018470:	f003 0304 	and.w	r3, r3, #4
 8018474:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8018476:	7dfb      	ldrb	r3, [r7, #23]
 8018478:	b29b      	uxth	r3, r3
 801847a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801847e:	4619      	mov	r1, r3
 8018480:	2036      	movs	r0, #54	; 0x36
 8018482:	f7fb f945 	bl	8013710 <pbuf_alloc>
 8018486:	6138      	str	r0, [r7, #16]
 8018488:	693b      	ldr	r3, [r7, #16]
 801848a:	2b00      	cmp	r3, #0
 801848c:	d109      	bne.n	80184a2 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801848e:	687b      	ldr	r3, [r7, #4]
 8018490:	8b5b      	ldrh	r3, [r3, #26]
 8018492:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018496:	b29a      	uxth	r2, r3
 8018498:	687b      	ldr	r3, [r7, #4]
 801849a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801849c:	f04f 33ff 	mov.w	r3, #4294967295
 80184a0:	e095      	b.n	80185ce <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 80184a2:	693b      	ldr	r3, [r7, #16]
 80184a4:	895a      	ldrh	r2, [r3, #10]
 80184a6:	7dfb      	ldrb	r3, [r7, #23]
 80184a8:	b29b      	uxth	r3, r3
 80184aa:	429a      	cmp	r2, r3
 80184ac:	d206      	bcs.n	80184bc <tcp_enqueue_flags+0xa0>
 80184ae:	4b4a      	ldr	r3, [pc, #296]	; (80185d8 <tcp_enqueue_flags+0x1bc>)
 80184b0:	f240 4239 	movw	r2, #1081	; 0x439
 80184b4:	494c      	ldr	r1, [pc, #304]	; (80185e8 <tcp_enqueue_flags+0x1cc>)
 80184b6:	484a      	ldr	r0, [pc, #296]	; (80185e0 <tcp_enqueue_flags+0x1c4>)
 80184b8:	f005 fc42 	bl	801dd40 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 80184bc:	687b      	ldr	r3, [r7, #4]
 80184be:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 80184c0:	78fa      	ldrb	r2, [r7, #3]
 80184c2:	7ffb      	ldrb	r3, [r7, #31]
 80184c4:	9300      	str	r3, [sp, #0]
 80184c6:	460b      	mov	r3, r1
 80184c8:	6939      	ldr	r1, [r7, #16]
 80184ca:	6878      	ldr	r0, [r7, #4]
 80184cc:	f7ff fd70 	bl	8017fb0 <tcp_create_segment>
 80184d0:	60f8      	str	r0, [r7, #12]
 80184d2:	68fb      	ldr	r3, [r7, #12]
 80184d4:	2b00      	cmp	r3, #0
 80184d6:	d109      	bne.n	80184ec <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80184d8:	687b      	ldr	r3, [r7, #4]
 80184da:	8b5b      	ldrh	r3, [r3, #26]
 80184dc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80184e0:	b29a      	uxth	r2, r3
 80184e2:	687b      	ldr	r3, [r7, #4]
 80184e4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 80184e6:	f04f 33ff 	mov.w	r3, #4294967295
 80184ea:	e070      	b.n	80185ce <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 80184ec:	68fb      	ldr	r3, [r7, #12]
 80184ee:	68db      	ldr	r3, [r3, #12]
 80184f0:	f003 0303 	and.w	r3, r3, #3
 80184f4:	2b00      	cmp	r3, #0
 80184f6:	d006      	beq.n	8018506 <tcp_enqueue_flags+0xea>
 80184f8:	4b37      	ldr	r3, [pc, #220]	; (80185d8 <tcp_enqueue_flags+0x1bc>)
 80184fa:	f240 4242 	movw	r2, #1090	; 0x442
 80184fe:	493b      	ldr	r1, [pc, #236]	; (80185ec <tcp_enqueue_flags+0x1d0>)
 8018500:	4837      	ldr	r0, [pc, #220]	; (80185e0 <tcp_enqueue_flags+0x1c4>)
 8018502:	f005 fc1d 	bl	801dd40 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8018506:	68fb      	ldr	r3, [r7, #12]
 8018508:	891b      	ldrh	r3, [r3, #8]
 801850a:	2b00      	cmp	r3, #0
 801850c:	d006      	beq.n	801851c <tcp_enqueue_flags+0x100>
 801850e:	4b32      	ldr	r3, [pc, #200]	; (80185d8 <tcp_enqueue_flags+0x1bc>)
 8018510:	f240 4243 	movw	r2, #1091	; 0x443
 8018514:	4936      	ldr	r1, [pc, #216]	; (80185f0 <tcp_enqueue_flags+0x1d4>)
 8018516:	4832      	ldr	r0, [pc, #200]	; (80185e0 <tcp_enqueue_flags+0x1c4>)
 8018518:	f005 fc12 	bl	801dd40 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 801851c:	687b      	ldr	r3, [r7, #4]
 801851e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018520:	2b00      	cmp	r3, #0
 8018522:	d103      	bne.n	801852c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8018524:	687b      	ldr	r3, [r7, #4]
 8018526:	68fa      	ldr	r2, [r7, #12]
 8018528:	66da      	str	r2, [r3, #108]	; 0x6c
 801852a:	e00d      	b.n	8018548 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 801852c:	687b      	ldr	r3, [r7, #4]
 801852e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018530:	61bb      	str	r3, [r7, #24]
 8018532:	e002      	b.n	801853a <tcp_enqueue_flags+0x11e>
 8018534:	69bb      	ldr	r3, [r7, #24]
 8018536:	681b      	ldr	r3, [r3, #0]
 8018538:	61bb      	str	r3, [r7, #24]
 801853a:	69bb      	ldr	r3, [r7, #24]
 801853c:	681b      	ldr	r3, [r3, #0]
 801853e:	2b00      	cmp	r3, #0
 8018540:	d1f8      	bne.n	8018534 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8018542:	69bb      	ldr	r3, [r7, #24]
 8018544:	68fa      	ldr	r2, [r7, #12]
 8018546:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8018548:	687b      	ldr	r3, [r7, #4]
 801854a:	2200      	movs	r2, #0
 801854c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8018550:	78fb      	ldrb	r3, [r7, #3]
 8018552:	f003 0302 	and.w	r3, r3, #2
 8018556:	2b00      	cmp	r3, #0
 8018558:	d104      	bne.n	8018564 <tcp_enqueue_flags+0x148>
 801855a:	78fb      	ldrb	r3, [r7, #3]
 801855c:	f003 0301 	and.w	r3, r3, #1
 8018560:	2b00      	cmp	r3, #0
 8018562:	d004      	beq.n	801856e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8018564:	687b      	ldr	r3, [r7, #4]
 8018566:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8018568:	1c5a      	adds	r2, r3, #1
 801856a:	687b      	ldr	r3, [r7, #4]
 801856c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 801856e:	78fb      	ldrb	r3, [r7, #3]
 8018570:	f003 0301 	and.w	r3, r3, #1
 8018574:	2b00      	cmp	r3, #0
 8018576:	d006      	beq.n	8018586 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8018578:	687b      	ldr	r3, [r7, #4]
 801857a:	8b5b      	ldrh	r3, [r3, #26]
 801857c:	f043 0320 	orr.w	r3, r3, #32
 8018580:	b29a      	uxth	r2, r3
 8018582:	687b      	ldr	r3, [r7, #4]
 8018584:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8018586:	68fb      	ldr	r3, [r7, #12]
 8018588:	685b      	ldr	r3, [r3, #4]
 801858a:	4618      	mov	r0, r3
 801858c:	f7fb fc32 	bl	8013df4 <pbuf_clen>
 8018590:	4603      	mov	r3, r0
 8018592:	461a      	mov	r2, r3
 8018594:	687b      	ldr	r3, [r7, #4]
 8018596:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 801859a:	4413      	add	r3, r2
 801859c:	b29a      	uxth	r2, r3
 801859e:	687b      	ldr	r3, [r7, #4]
 80185a0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 80185a4:	687b      	ldr	r3, [r7, #4]
 80185a6:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80185aa:	2b00      	cmp	r3, #0
 80185ac:	d00e      	beq.n	80185cc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 80185ae:	687b      	ldr	r3, [r7, #4]
 80185b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80185b2:	2b00      	cmp	r3, #0
 80185b4:	d10a      	bne.n	80185cc <tcp_enqueue_flags+0x1b0>
 80185b6:	687b      	ldr	r3, [r7, #4]
 80185b8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80185ba:	2b00      	cmp	r3, #0
 80185bc:	d106      	bne.n	80185cc <tcp_enqueue_flags+0x1b0>
 80185be:	4b06      	ldr	r3, [pc, #24]	; (80185d8 <tcp_enqueue_flags+0x1bc>)
 80185c0:	f240 4265 	movw	r2, #1125	; 0x465
 80185c4:	490b      	ldr	r1, [pc, #44]	; (80185f4 <tcp_enqueue_flags+0x1d8>)
 80185c6:	4806      	ldr	r0, [pc, #24]	; (80185e0 <tcp_enqueue_flags+0x1c4>)
 80185c8:	f005 fbba 	bl	801dd40 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 80185cc:	2300      	movs	r3, #0
}
 80185ce:	4618      	mov	r0, r3
 80185d0:	3720      	adds	r7, #32
 80185d2:	46bd      	mov	sp, r7
 80185d4:	bd80      	pop	{r7, pc}
 80185d6:	bf00      	nop
 80185d8:	0802047c 	.word	0x0802047c
 80185dc:	080208a0 	.word	0x080208a0
 80185e0:	080204d0 	.word	0x080204d0
 80185e4:	080208f8 	.word	0x080208f8
 80185e8:	08020918 	.word	0x08020918
 80185ec:	08020954 	.word	0x08020954
 80185f0:	0802096c 	.word	0x0802096c
 80185f4:	08020998 	.word	0x08020998

080185f8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 80185f8:	b5b0      	push	{r4, r5, r7, lr}
 80185fa:	b08a      	sub	sp, #40	; 0x28
 80185fc:	af00      	add	r7, sp, #0
 80185fe:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8018600:	687b      	ldr	r3, [r7, #4]
 8018602:	2b00      	cmp	r3, #0
 8018604:	d106      	bne.n	8018614 <tcp_output+0x1c>
 8018606:	4b8a      	ldr	r3, [pc, #552]	; (8018830 <tcp_output+0x238>)
 8018608:	f240 42e1 	movw	r2, #1249	; 0x4e1
 801860c:	4989      	ldr	r1, [pc, #548]	; (8018834 <tcp_output+0x23c>)
 801860e:	488a      	ldr	r0, [pc, #552]	; (8018838 <tcp_output+0x240>)
 8018610:	f005 fb96 	bl	801dd40 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8018614:	687b      	ldr	r3, [r7, #4]
 8018616:	7d1b      	ldrb	r3, [r3, #20]
 8018618:	2b01      	cmp	r3, #1
 801861a:	d106      	bne.n	801862a <tcp_output+0x32>
 801861c:	4b84      	ldr	r3, [pc, #528]	; (8018830 <tcp_output+0x238>)
 801861e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8018622:	4986      	ldr	r1, [pc, #536]	; (801883c <tcp_output+0x244>)
 8018624:	4884      	ldr	r0, [pc, #528]	; (8018838 <tcp_output+0x240>)
 8018626:	f005 fb8b 	bl	801dd40 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 801862a:	4b85      	ldr	r3, [pc, #532]	; (8018840 <tcp_output+0x248>)
 801862c:	681b      	ldr	r3, [r3, #0]
 801862e:	687a      	ldr	r2, [r7, #4]
 8018630:	429a      	cmp	r2, r3
 8018632:	d101      	bne.n	8018638 <tcp_output+0x40>
    return ERR_OK;
 8018634:	2300      	movs	r3, #0
 8018636:	e1ce      	b.n	80189d6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8018638:	687b      	ldr	r3, [r7, #4]
 801863a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 801863e:	687b      	ldr	r3, [r7, #4]
 8018640:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8018644:	4293      	cmp	r3, r2
 8018646:	bf28      	it	cs
 8018648:	4613      	movcs	r3, r2
 801864a:	b29b      	uxth	r3, r3
 801864c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 801864e:	687b      	ldr	r3, [r7, #4]
 8018650:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018652:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8018654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018656:	2b00      	cmp	r3, #0
 8018658:	d10b      	bne.n	8018672 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 801865a:	687b      	ldr	r3, [r7, #4]
 801865c:	8b5b      	ldrh	r3, [r3, #26]
 801865e:	f003 0302 	and.w	r3, r3, #2
 8018662:	2b00      	cmp	r3, #0
 8018664:	f000 81aa 	beq.w	80189bc <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8018668:	6878      	ldr	r0, [r7, #4]
 801866a:	f000 fdcb 	bl	8019204 <tcp_send_empty_ack>
 801866e:	4603      	mov	r3, r0
 8018670:	e1b1      	b.n	80189d6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8018672:	6879      	ldr	r1, [r7, #4]
 8018674:	687b      	ldr	r3, [r7, #4]
 8018676:	3304      	adds	r3, #4
 8018678:	461a      	mov	r2, r3
 801867a:	6878      	ldr	r0, [r7, #4]
 801867c:	f7ff fc7c 	bl	8017f78 <tcp_route>
 8018680:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8018682:	697b      	ldr	r3, [r7, #20]
 8018684:	2b00      	cmp	r3, #0
 8018686:	d102      	bne.n	801868e <tcp_output+0x96>
    return ERR_RTE;
 8018688:	f06f 0303 	mvn.w	r3, #3
 801868c:	e1a3      	b.n	80189d6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 801868e:	687b      	ldr	r3, [r7, #4]
 8018690:	2b00      	cmp	r3, #0
 8018692:	d003      	beq.n	801869c <tcp_output+0xa4>
 8018694:	687b      	ldr	r3, [r7, #4]
 8018696:	681b      	ldr	r3, [r3, #0]
 8018698:	2b00      	cmp	r3, #0
 801869a:	d111      	bne.n	80186c0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 801869c:	697b      	ldr	r3, [r7, #20]
 801869e:	2b00      	cmp	r3, #0
 80186a0:	d002      	beq.n	80186a8 <tcp_output+0xb0>
 80186a2:	697b      	ldr	r3, [r7, #20]
 80186a4:	3304      	adds	r3, #4
 80186a6:	e000      	b.n	80186aa <tcp_output+0xb2>
 80186a8:	2300      	movs	r3, #0
 80186aa:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 80186ac:	693b      	ldr	r3, [r7, #16]
 80186ae:	2b00      	cmp	r3, #0
 80186b0:	d102      	bne.n	80186b8 <tcp_output+0xc0>
      return ERR_RTE;
 80186b2:	f06f 0303 	mvn.w	r3, #3
 80186b6:	e18e      	b.n	80189d6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 80186b8:	693b      	ldr	r3, [r7, #16]
 80186ba:	681a      	ldr	r2, [r3, #0]
 80186bc:	687b      	ldr	r3, [r7, #4]
 80186be:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 80186c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80186c2:	68db      	ldr	r3, [r3, #12]
 80186c4:	685b      	ldr	r3, [r3, #4]
 80186c6:	4618      	mov	r0, r3
 80186c8:	f7f9 ff19 	bl	80124fe <lwip_htonl>
 80186cc:	4602      	mov	r2, r0
 80186ce:	687b      	ldr	r3, [r7, #4]
 80186d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80186d2:	1ad3      	subs	r3, r2, r3
 80186d4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80186d6:	8912      	ldrh	r2, [r2, #8]
 80186d8:	4413      	add	r3, r2
 80186da:	69ba      	ldr	r2, [r7, #24]
 80186dc:	429a      	cmp	r2, r3
 80186de:	d227      	bcs.n	8018730 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 80186e0:	687b      	ldr	r3, [r7, #4]
 80186e2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80186e6:	461a      	mov	r2, r3
 80186e8:	69bb      	ldr	r3, [r7, #24]
 80186ea:	4293      	cmp	r3, r2
 80186ec:	d114      	bne.n	8018718 <tcp_output+0x120>
 80186ee:	687b      	ldr	r3, [r7, #4]
 80186f0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80186f2:	2b00      	cmp	r3, #0
 80186f4:	d110      	bne.n	8018718 <tcp_output+0x120>
 80186f6:	687b      	ldr	r3, [r7, #4]
 80186f8:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 80186fc:	2b00      	cmp	r3, #0
 80186fe:	d10b      	bne.n	8018718 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8018700:	687b      	ldr	r3, [r7, #4]
 8018702:	2200      	movs	r2, #0
 8018704:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8018708:	687b      	ldr	r3, [r7, #4]
 801870a:	2201      	movs	r2, #1
 801870c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8018710:	687b      	ldr	r3, [r7, #4]
 8018712:	2200      	movs	r2, #0
 8018714:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8018718:	687b      	ldr	r3, [r7, #4]
 801871a:	8b5b      	ldrh	r3, [r3, #26]
 801871c:	f003 0302 	and.w	r3, r3, #2
 8018720:	2b00      	cmp	r3, #0
 8018722:	f000 814d 	beq.w	80189c0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8018726:	6878      	ldr	r0, [r7, #4]
 8018728:	f000 fd6c 	bl	8019204 <tcp_send_empty_ack>
 801872c:	4603      	mov	r3, r0
 801872e:	e152      	b.n	80189d6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8018730:	687b      	ldr	r3, [r7, #4]
 8018732:	2200      	movs	r2, #0
 8018734:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8018738:	687b      	ldr	r3, [r7, #4]
 801873a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801873c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 801873e:	6a3b      	ldr	r3, [r7, #32]
 8018740:	2b00      	cmp	r3, #0
 8018742:	f000 811c 	beq.w	801897e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8018746:	e002      	b.n	801874e <tcp_output+0x156>
 8018748:	6a3b      	ldr	r3, [r7, #32]
 801874a:	681b      	ldr	r3, [r3, #0]
 801874c:	623b      	str	r3, [r7, #32]
 801874e:	6a3b      	ldr	r3, [r7, #32]
 8018750:	681b      	ldr	r3, [r3, #0]
 8018752:	2b00      	cmp	r3, #0
 8018754:	d1f8      	bne.n	8018748 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8018756:	e112      	b.n	801897e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8018758:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801875a:	68db      	ldr	r3, [r3, #12]
 801875c:	899b      	ldrh	r3, [r3, #12]
 801875e:	b29b      	uxth	r3, r3
 8018760:	4618      	mov	r0, r3
 8018762:	f7f9 feb7 	bl	80124d4 <lwip_htons>
 8018766:	4603      	mov	r3, r0
 8018768:	b2db      	uxtb	r3, r3
 801876a:	f003 0304 	and.w	r3, r3, #4
 801876e:	2b00      	cmp	r3, #0
 8018770:	d006      	beq.n	8018780 <tcp_output+0x188>
 8018772:	4b2f      	ldr	r3, [pc, #188]	; (8018830 <tcp_output+0x238>)
 8018774:	f240 5236 	movw	r2, #1334	; 0x536
 8018778:	4932      	ldr	r1, [pc, #200]	; (8018844 <tcp_output+0x24c>)
 801877a:	482f      	ldr	r0, [pc, #188]	; (8018838 <tcp_output+0x240>)
 801877c:	f005 fae0 	bl	801dd40 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8018780:	687b      	ldr	r3, [r7, #4]
 8018782:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018784:	2b00      	cmp	r3, #0
 8018786:	d01f      	beq.n	80187c8 <tcp_output+0x1d0>
 8018788:	687b      	ldr	r3, [r7, #4]
 801878a:	8b5b      	ldrh	r3, [r3, #26]
 801878c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8018790:	2b00      	cmp	r3, #0
 8018792:	d119      	bne.n	80187c8 <tcp_output+0x1d0>
 8018794:	687b      	ldr	r3, [r7, #4]
 8018796:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018798:	2b00      	cmp	r3, #0
 801879a:	d00b      	beq.n	80187b4 <tcp_output+0x1bc>
 801879c:	687b      	ldr	r3, [r7, #4]
 801879e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80187a0:	681b      	ldr	r3, [r3, #0]
 80187a2:	2b00      	cmp	r3, #0
 80187a4:	d110      	bne.n	80187c8 <tcp_output+0x1d0>
 80187a6:	687b      	ldr	r3, [r7, #4]
 80187a8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80187aa:	891a      	ldrh	r2, [r3, #8]
 80187ac:	687b      	ldr	r3, [r7, #4]
 80187ae:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80187b0:	429a      	cmp	r2, r3
 80187b2:	d209      	bcs.n	80187c8 <tcp_output+0x1d0>
 80187b4:	687b      	ldr	r3, [r7, #4]
 80187b6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 80187ba:	2b00      	cmp	r3, #0
 80187bc:	d004      	beq.n	80187c8 <tcp_output+0x1d0>
 80187be:	687b      	ldr	r3, [r7, #4]
 80187c0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80187c4:	2b08      	cmp	r3, #8
 80187c6:	d901      	bls.n	80187cc <tcp_output+0x1d4>
 80187c8:	2301      	movs	r3, #1
 80187ca:	e000      	b.n	80187ce <tcp_output+0x1d6>
 80187cc:	2300      	movs	r3, #0
 80187ce:	2b00      	cmp	r3, #0
 80187d0:	d106      	bne.n	80187e0 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 80187d2:	687b      	ldr	r3, [r7, #4]
 80187d4:	8b5b      	ldrh	r3, [r3, #26]
 80187d6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 80187da:	2b00      	cmp	r3, #0
 80187dc:	f000 80e4 	beq.w	80189a8 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 80187e0:	687b      	ldr	r3, [r7, #4]
 80187e2:	7d1b      	ldrb	r3, [r3, #20]
 80187e4:	2b02      	cmp	r3, #2
 80187e6:	d00d      	beq.n	8018804 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 80187e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187ea:	68db      	ldr	r3, [r3, #12]
 80187ec:	899b      	ldrh	r3, [r3, #12]
 80187ee:	b29c      	uxth	r4, r3
 80187f0:	2010      	movs	r0, #16
 80187f2:	f7f9 fe6f 	bl	80124d4 <lwip_htons>
 80187f6:	4603      	mov	r3, r0
 80187f8:	461a      	mov	r2, r3
 80187fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80187fc:	68db      	ldr	r3, [r3, #12]
 80187fe:	4322      	orrs	r2, r4
 8018800:	b292      	uxth	r2, r2
 8018802:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8018804:	697a      	ldr	r2, [r7, #20]
 8018806:	6879      	ldr	r1, [r7, #4]
 8018808:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801880a:	f000 f909 	bl	8018a20 <tcp_output_segment>
 801880e:	4603      	mov	r3, r0
 8018810:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8018812:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018816:	2b00      	cmp	r3, #0
 8018818:	d016      	beq.n	8018848 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801881a:	687b      	ldr	r3, [r7, #4]
 801881c:	8b5b      	ldrh	r3, [r3, #26]
 801881e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018822:	b29a      	uxth	r2, r3
 8018824:	687b      	ldr	r3, [r7, #4]
 8018826:	835a      	strh	r2, [r3, #26]
      return err;
 8018828:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801882c:	e0d3      	b.n	80189d6 <tcp_output+0x3de>
 801882e:	bf00      	nop
 8018830:	0802047c 	.word	0x0802047c
 8018834:	080209c0 	.word	0x080209c0
 8018838:	080204d0 	.word	0x080204d0
 801883c:	080209d8 	.word	0x080209d8
 8018840:	200240ec 	.word	0x200240ec
 8018844:	08020a00 	.word	0x08020a00
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8018848:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801884a:	681a      	ldr	r2, [r3, #0]
 801884c:	687b      	ldr	r3, [r7, #4]
 801884e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8018850:	687b      	ldr	r3, [r7, #4]
 8018852:	7d1b      	ldrb	r3, [r3, #20]
 8018854:	2b02      	cmp	r3, #2
 8018856:	d006      	beq.n	8018866 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018858:	687b      	ldr	r3, [r7, #4]
 801885a:	8b5b      	ldrh	r3, [r3, #26]
 801885c:	f023 0303 	bic.w	r3, r3, #3
 8018860:	b29a      	uxth	r2, r3
 8018862:	687b      	ldr	r3, [r7, #4]
 8018864:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018866:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018868:	68db      	ldr	r3, [r3, #12]
 801886a:	685b      	ldr	r3, [r3, #4]
 801886c:	4618      	mov	r0, r3
 801886e:	f7f9 fe46 	bl	80124fe <lwip_htonl>
 8018872:	4604      	mov	r4, r0
 8018874:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018876:	891b      	ldrh	r3, [r3, #8]
 8018878:	461d      	mov	r5, r3
 801887a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801887c:	68db      	ldr	r3, [r3, #12]
 801887e:	899b      	ldrh	r3, [r3, #12]
 8018880:	b29b      	uxth	r3, r3
 8018882:	4618      	mov	r0, r3
 8018884:	f7f9 fe26 	bl	80124d4 <lwip_htons>
 8018888:	4603      	mov	r3, r0
 801888a:	b2db      	uxtb	r3, r3
 801888c:	f003 0303 	and.w	r3, r3, #3
 8018890:	2b00      	cmp	r3, #0
 8018892:	d001      	beq.n	8018898 <tcp_output+0x2a0>
 8018894:	2301      	movs	r3, #1
 8018896:	e000      	b.n	801889a <tcp_output+0x2a2>
 8018898:	2300      	movs	r3, #0
 801889a:	442b      	add	r3, r5
 801889c:	4423      	add	r3, r4
 801889e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80188a0:	687b      	ldr	r3, [r7, #4]
 80188a2:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80188a4:	68bb      	ldr	r3, [r7, #8]
 80188a6:	1ad3      	subs	r3, r2, r3
 80188a8:	2b00      	cmp	r3, #0
 80188aa:	da02      	bge.n	80188b2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 80188ac:	687b      	ldr	r3, [r7, #4]
 80188ae:	68ba      	ldr	r2, [r7, #8]
 80188b0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80188b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188b4:	891b      	ldrh	r3, [r3, #8]
 80188b6:	461c      	mov	r4, r3
 80188b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188ba:	68db      	ldr	r3, [r3, #12]
 80188bc:	899b      	ldrh	r3, [r3, #12]
 80188be:	b29b      	uxth	r3, r3
 80188c0:	4618      	mov	r0, r3
 80188c2:	f7f9 fe07 	bl	80124d4 <lwip_htons>
 80188c6:	4603      	mov	r3, r0
 80188c8:	b2db      	uxtb	r3, r3
 80188ca:	f003 0303 	and.w	r3, r3, #3
 80188ce:	2b00      	cmp	r3, #0
 80188d0:	d001      	beq.n	80188d6 <tcp_output+0x2de>
 80188d2:	2301      	movs	r3, #1
 80188d4:	e000      	b.n	80188d8 <tcp_output+0x2e0>
 80188d6:	2300      	movs	r3, #0
 80188d8:	4423      	add	r3, r4
 80188da:	2b00      	cmp	r3, #0
 80188dc:	d049      	beq.n	8018972 <tcp_output+0x37a>
      seg->next = NULL;
 80188de:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188e0:	2200      	movs	r2, #0
 80188e2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80188e4:	687b      	ldr	r3, [r7, #4]
 80188e6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80188e8:	2b00      	cmp	r3, #0
 80188ea:	d105      	bne.n	80188f8 <tcp_output+0x300>
        pcb->unacked = seg;
 80188ec:	687b      	ldr	r3, [r7, #4]
 80188ee:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80188f0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80188f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188f4:	623b      	str	r3, [r7, #32]
 80188f6:	e03f      	b.n	8018978 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80188f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80188fa:	68db      	ldr	r3, [r3, #12]
 80188fc:	685b      	ldr	r3, [r3, #4]
 80188fe:	4618      	mov	r0, r3
 8018900:	f7f9 fdfd 	bl	80124fe <lwip_htonl>
 8018904:	4604      	mov	r4, r0
 8018906:	6a3b      	ldr	r3, [r7, #32]
 8018908:	68db      	ldr	r3, [r3, #12]
 801890a:	685b      	ldr	r3, [r3, #4]
 801890c:	4618      	mov	r0, r3
 801890e:	f7f9 fdf6 	bl	80124fe <lwip_htonl>
 8018912:	4603      	mov	r3, r0
 8018914:	1ae3      	subs	r3, r4, r3
 8018916:	2b00      	cmp	r3, #0
 8018918:	da24      	bge.n	8018964 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801891a:	687b      	ldr	r3, [r7, #4]
 801891c:	3370      	adds	r3, #112	; 0x70
 801891e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8018920:	e002      	b.n	8018928 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8018922:	69fb      	ldr	r3, [r7, #28]
 8018924:	681b      	ldr	r3, [r3, #0]
 8018926:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8018928:	69fb      	ldr	r3, [r7, #28]
 801892a:	681b      	ldr	r3, [r3, #0]
 801892c:	2b00      	cmp	r3, #0
 801892e:	d011      	beq.n	8018954 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8018930:	69fb      	ldr	r3, [r7, #28]
 8018932:	681b      	ldr	r3, [r3, #0]
 8018934:	68db      	ldr	r3, [r3, #12]
 8018936:	685b      	ldr	r3, [r3, #4]
 8018938:	4618      	mov	r0, r3
 801893a:	f7f9 fde0 	bl	80124fe <lwip_htonl>
 801893e:	4604      	mov	r4, r0
 8018940:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018942:	68db      	ldr	r3, [r3, #12]
 8018944:	685b      	ldr	r3, [r3, #4]
 8018946:	4618      	mov	r0, r3
 8018948:	f7f9 fdd9 	bl	80124fe <lwip_htonl>
 801894c:	4603      	mov	r3, r0
 801894e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8018950:	2b00      	cmp	r3, #0
 8018952:	dbe6      	blt.n	8018922 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8018954:	69fb      	ldr	r3, [r7, #28]
 8018956:	681a      	ldr	r2, [r3, #0]
 8018958:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801895a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801895c:	69fb      	ldr	r3, [r7, #28]
 801895e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018960:	601a      	str	r2, [r3, #0]
 8018962:	e009      	b.n	8018978 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8018964:	6a3b      	ldr	r3, [r7, #32]
 8018966:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018968:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801896a:	6a3b      	ldr	r3, [r7, #32]
 801896c:	681b      	ldr	r3, [r3, #0]
 801896e:	623b      	str	r3, [r7, #32]
 8018970:	e002      	b.n	8018978 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8018972:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018974:	f7fc fc3f 	bl	80151f6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8018978:	687b      	ldr	r3, [r7, #4]
 801897a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801897c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801897e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018980:	2b00      	cmp	r3, #0
 8018982:	d012      	beq.n	80189aa <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8018984:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018986:	68db      	ldr	r3, [r3, #12]
 8018988:	685b      	ldr	r3, [r3, #4]
 801898a:	4618      	mov	r0, r3
 801898c:	f7f9 fdb7 	bl	80124fe <lwip_htonl>
 8018990:	4602      	mov	r2, r0
 8018992:	687b      	ldr	r3, [r7, #4]
 8018994:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018996:	1ad3      	subs	r3, r2, r3
 8018998:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801899a:	8912      	ldrh	r2, [r2, #8]
 801899c:	4413      	add	r3, r2
  while (seg != NULL &&
 801899e:	69ba      	ldr	r2, [r7, #24]
 80189a0:	429a      	cmp	r2, r3
 80189a2:	f4bf aed9 	bcs.w	8018758 <tcp_output+0x160>
 80189a6:	e000      	b.n	80189aa <tcp_output+0x3b2>
      break;
 80189a8:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 80189aa:	687b      	ldr	r3, [r7, #4]
 80189ac:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80189ae:	2b00      	cmp	r3, #0
 80189b0:	d108      	bne.n	80189c4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80189b2:	687b      	ldr	r3, [r7, #4]
 80189b4:	2200      	movs	r2, #0
 80189b6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80189ba:	e004      	b.n	80189c6 <tcp_output+0x3ce>
    goto output_done;
 80189bc:	bf00      	nop
 80189be:	e002      	b.n	80189c6 <tcp_output+0x3ce>
    goto output_done;
 80189c0:	bf00      	nop
 80189c2:	e000      	b.n	80189c6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80189c4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80189c6:	687b      	ldr	r3, [r7, #4]
 80189c8:	8b5b      	ldrh	r3, [r3, #26]
 80189ca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80189ce:	b29a      	uxth	r2, r3
 80189d0:	687b      	ldr	r3, [r7, #4]
 80189d2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80189d4:	2300      	movs	r3, #0
}
 80189d6:	4618      	mov	r0, r3
 80189d8:	3728      	adds	r7, #40	; 0x28
 80189da:	46bd      	mov	sp, r7
 80189dc:	bdb0      	pop	{r4, r5, r7, pc}
 80189de:	bf00      	nop

080189e0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80189e0:	b580      	push	{r7, lr}
 80189e2:	b082      	sub	sp, #8
 80189e4:	af00      	add	r7, sp, #0
 80189e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80189e8:	687b      	ldr	r3, [r7, #4]
 80189ea:	2b00      	cmp	r3, #0
 80189ec:	d106      	bne.n	80189fc <tcp_output_segment_busy+0x1c>
 80189ee:	4b09      	ldr	r3, [pc, #36]	; (8018a14 <tcp_output_segment_busy+0x34>)
 80189f0:	f240 529a 	movw	r2, #1434	; 0x59a
 80189f4:	4908      	ldr	r1, [pc, #32]	; (8018a18 <tcp_output_segment_busy+0x38>)
 80189f6:	4809      	ldr	r0, [pc, #36]	; (8018a1c <tcp_output_segment_busy+0x3c>)
 80189f8:	f005 f9a2 	bl	801dd40 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80189fc:	687b      	ldr	r3, [r7, #4]
 80189fe:	685b      	ldr	r3, [r3, #4]
 8018a00:	7b9b      	ldrb	r3, [r3, #14]
 8018a02:	2b01      	cmp	r3, #1
 8018a04:	d001      	beq.n	8018a0a <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8018a06:	2301      	movs	r3, #1
 8018a08:	e000      	b.n	8018a0c <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8018a0a:	2300      	movs	r3, #0
}
 8018a0c:	4618      	mov	r0, r3
 8018a0e:	3708      	adds	r7, #8
 8018a10:	46bd      	mov	sp, r7
 8018a12:	bd80      	pop	{r7, pc}
 8018a14:	0802047c 	.word	0x0802047c
 8018a18:	08020a18 	.word	0x08020a18
 8018a1c:	080204d0 	.word	0x080204d0

08018a20 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8018a20:	b5b0      	push	{r4, r5, r7, lr}
 8018a22:	b08c      	sub	sp, #48	; 0x30
 8018a24:	af04      	add	r7, sp, #16
 8018a26:	60f8      	str	r0, [r7, #12]
 8018a28:	60b9      	str	r1, [r7, #8]
 8018a2a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8018a2c:	68fb      	ldr	r3, [r7, #12]
 8018a2e:	2b00      	cmp	r3, #0
 8018a30:	d106      	bne.n	8018a40 <tcp_output_segment+0x20>
 8018a32:	4b64      	ldr	r3, [pc, #400]	; (8018bc4 <tcp_output_segment+0x1a4>)
 8018a34:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8018a38:	4963      	ldr	r1, [pc, #396]	; (8018bc8 <tcp_output_segment+0x1a8>)
 8018a3a:	4864      	ldr	r0, [pc, #400]	; (8018bcc <tcp_output_segment+0x1ac>)
 8018a3c:	f005 f980 	bl	801dd40 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8018a40:	68bb      	ldr	r3, [r7, #8]
 8018a42:	2b00      	cmp	r3, #0
 8018a44:	d106      	bne.n	8018a54 <tcp_output_segment+0x34>
 8018a46:	4b5f      	ldr	r3, [pc, #380]	; (8018bc4 <tcp_output_segment+0x1a4>)
 8018a48:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8018a4c:	4960      	ldr	r1, [pc, #384]	; (8018bd0 <tcp_output_segment+0x1b0>)
 8018a4e:	485f      	ldr	r0, [pc, #380]	; (8018bcc <tcp_output_segment+0x1ac>)
 8018a50:	f005 f976 	bl	801dd40 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8018a54:	687b      	ldr	r3, [r7, #4]
 8018a56:	2b00      	cmp	r3, #0
 8018a58:	d106      	bne.n	8018a68 <tcp_output_segment+0x48>
 8018a5a:	4b5a      	ldr	r3, [pc, #360]	; (8018bc4 <tcp_output_segment+0x1a4>)
 8018a5c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8018a60:	495c      	ldr	r1, [pc, #368]	; (8018bd4 <tcp_output_segment+0x1b4>)
 8018a62:	485a      	ldr	r0, [pc, #360]	; (8018bcc <tcp_output_segment+0x1ac>)
 8018a64:	f005 f96c 	bl	801dd40 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8018a68:	68f8      	ldr	r0, [r7, #12]
 8018a6a:	f7ff ffb9 	bl	80189e0 <tcp_output_segment_busy>
 8018a6e:	4603      	mov	r3, r0
 8018a70:	2b00      	cmp	r3, #0
 8018a72:	d001      	beq.n	8018a78 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8018a74:	2300      	movs	r3, #0
 8018a76:	e0a1      	b.n	8018bbc <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8018a78:	68bb      	ldr	r3, [r7, #8]
 8018a7a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8018a7c:	68fb      	ldr	r3, [r7, #12]
 8018a7e:	68dc      	ldr	r4, [r3, #12]
 8018a80:	4610      	mov	r0, r2
 8018a82:	f7f9 fd3c 	bl	80124fe <lwip_htonl>
 8018a86:	4603      	mov	r3, r0
 8018a88:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8018a8a:	68bb      	ldr	r3, [r7, #8]
 8018a8c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8018a8e:	68fb      	ldr	r3, [r7, #12]
 8018a90:	68dc      	ldr	r4, [r3, #12]
 8018a92:	4610      	mov	r0, r2
 8018a94:	f7f9 fd1e 	bl	80124d4 <lwip_htons>
 8018a98:	4603      	mov	r3, r0
 8018a9a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8018a9c:	68bb      	ldr	r3, [r7, #8]
 8018a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018aa0:	68ba      	ldr	r2, [r7, #8]
 8018aa2:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8018aa4:	441a      	add	r2, r3
 8018aa6:	68bb      	ldr	r3, [r7, #8]
 8018aa8:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8018aaa:	68fb      	ldr	r3, [r7, #12]
 8018aac:	68db      	ldr	r3, [r3, #12]
 8018aae:	3314      	adds	r3, #20
 8018ab0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8018ab2:	68fb      	ldr	r3, [r7, #12]
 8018ab4:	7a9b      	ldrb	r3, [r3, #10]
 8018ab6:	f003 0301 	and.w	r3, r3, #1
 8018aba:	2b00      	cmp	r3, #0
 8018abc:	d015      	beq.n	8018aea <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8018abe:	68bb      	ldr	r3, [r7, #8]
 8018ac0:	3304      	adds	r3, #4
 8018ac2:	461a      	mov	r2, r3
 8018ac4:	6879      	ldr	r1, [r7, #4]
 8018ac6:	f44f 7006 	mov.w	r0, #536	; 0x218
 8018aca:	f7fc fe8b 	bl	80157e4 <tcp_eff_send_mss_netif>
 8018ace:	4603      	mov	r3, r0
 8018ad0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8018ad2:	8b7b      	ldrh	r3, [r7, #26]
 8018ad4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8018ad8:	4618      	mov	r0, r3
 8018ada:	f7f9 fd10 	bl	80124fe <lwip_htonl>
 8018ade:	4602      	mov	r2, r0
 8018ae0:	69fb      	ldr	r3, [r7, #28]
 8018ae2:	601a      	str	r2, [r3, #0]
    opts += 1;
 8018ae4:	69fb      	ldr	r3, [r7, #28]
 8018ae6:	3304      	adds	r3, #4
 8018ae8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8018aea:	68bb      	ldr	r3, [r7, #8]
 8018aec:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8018af0:	2b00      	cmp	r3, #0
 8018af2:	da02      	bge.n	8018afa <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8018af4:	68bb      	ldr	r3, [r7, #8]
 8018af6:	2200      	movs	r2, #0
 8018af8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8018afa:	68bb      	ldr	r3, [r7, #8]
 8018afc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8018afe:	2b00      	cmp	r3, #0
 8018b00:	d10c      	bne.n	8018b1c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8018b02:	4b35      	ldr	r3, [pc, #212]	; (8018bd8 <tcp_output_segment+0x1b8>)
 8018b04:	681a      	ldr	r2, [r3, #0]
 8018b06:	68bb      	ldr	r3, [r7, #8]
 8018b08:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8018b0a:	68fb      	ldr	r3, [r7, #12]
 8018b0c:	68db      	ldr	r3, [r3, #12]
 8018b0e:	685b      	ldr	r3, [r3, #4]
 8018b10:	4618      	mov	r0, r3
 8018b12:	f7f9 fcf4 	bl	80124fe <lwip_htonl>
 8018b16:	4602      	mov	r2, r0
 8018b18:	68bb      	ldr	r3, [r7, #8]
 8018b1a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8018b1c:	68fb      	ldr	r3, [r7, #12]
 8018b1e:	68da      	ldr	r2, [r3, #12]
 8018b20:	68fb      	ldr	r3, [r7, #12]
 8018b22:	685b      	ldr	r3, [r3, #4]
 8018b24:	685b      	ldr	r3, [r3, #4]
 8018b26:	1ad3      	subs	r3, r2, r3
 8018b28:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8018b2a:	68fb      	ldr	r3, [r7, #12]
 8018b2c:	685b      	ldr	r3, [r3, #4]
 8018b2e:	8959      	ldrh	r1, [r3, #10]
 8018b30:	68fb      	ldr	r3, [r7, #12]
 8018b32:	685b      	ldr	r3, [r3, #4]
 8018b34:	8b3a      	ldrh	r2, [r7, #24]
 8018b36:	1a8a      	subs	r2, r1, r2
 8018b38:	b292      	uxth	r2, r2
 8018b3a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8018b3c:	68fb      	ldr	r3, [r7, #12]
 8018b3e:	685b      	ldr	r3, [r3, #4]
 8018b40:	8919      	ldrh	r1, [r3, #8]
 8018b42:	68fb      	ldr	r3, [r7, #12]
 8018b44:	685b      	ldr	r3, [r3, #4]
 8018b46:	8b3a      	ldrh	r2, [r7, #24]
 8018b48:	1a8a      	subs	r2, r1, r2
 8018b4a:	b292      	uxth	r2, r2
 8018b4c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8018b4e:	68fb      	ldr	r3, [r7, #12]
 8018b50:	685b      	ldr	r3, [r3, #4]
 8018b52:	68fa      	ldr	r2, [r7, #12]
 8018b54:	68d2      	ldr	r2, [r2, #12]
 8018b56:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8018b58:	68fb      	ldr	r3, [r7, #12]
 8018b5a:	68db      	ldr	r3, [r3, #12]
 8018b5c:	2200      	movs	r2, #0
 8018b5e:	741a      	strb	r2, [r3, #16]
 8018b60:	2200      	movs	r2, #0
 8018b62:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8018b64:	68fb      	ldr	r3, [r7, #12]
 8018b66:	68da      	ldr	r2, [r3, #12]
 8018b68:	68fb      	ldr	r3, [r7, #12]
 8018b6a:	7a9b      	ldrb	r3, [r3, #10]
 8018b6c:	f003 0301 	and.w	r3, r3, #1
 8018b70:	2b00      	cmp	r3, #0
 8018b72:	d001      	beq.n	8018b78 <tcp_output_segment+0x158>
 8018b74:	2318      	movs	r3, #24
 8018b76:	e000      	b.n	8018b7a <tcp_output_segment+0x15a>
 8018b78:	2314      	movs	r3, #20
 8018b7a:	4413      	add	r3, r2
 8018b7c:	69fa      	ldr	r2, [r7, #28]
 8018b7e:	429a      	cmp	r2, r3
 8018b80:	d006      	beq.n	8018b90 <tcp_output_segment+0x170>
 8018b82:	4b10      	ldr	r3, [pc, #64]	; (8018bc4 <tcp_output_segment+0x1a4>)
 8018b84:	f240 621c 	movw	r2, #1564	; 0x61c
 8018b88:	4914      	ldr	r1, [pc, #80]	; (8018bdc <tcp_output_segment+0x1bc>)
 8018b8a:	4810      	ldr	r0, [pc, #64]	; (8018bcc <tcp_output_segment+0x1ac>)
 8018b8c:	f005 f8d8 	bl	801dd40 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8018b90:	68fb      	ldr	r3, [r7, #12]
 8018b92:	6858      	ldr	r0, [r3, #4]
 8018b94:	68b9      	ldr	r1, [r7, #8]
 8018b96:	68bb      	ldr	r3, [r7, #8]
 8018b98:	1d1c      	adds	r4, r3, #4
 8018b9a:	68bb      	ldr	r3, [r7, #8]
 8018b9c:	7add      	ldrb	r5, [r3, #11]
 8018b9e:	68bb      	ldr	r3, [r7, #8]
 8018ba0:	7a9b      	ldrb	r3, [r3, #10]
 8018ba2:	687a      	ldr	r2, [r7, #4]
 8018ba4:	9202      	str	r2, [sp, #8]
 8018ba6:	2206      	movs	r2, #6
 8018ba8:	9201      	str	r2, [sp, #4]
 8018baa:	9300      	str	r3, [sp, #0]
 8018bac:	462b      	mov	r3, r5
 8018bae:	4622      	mov	r2, r4
 8018bb0:	f002 fd54 	bl	801b65c <ip4_output_if>
 8018bb4:	4603      	mov	r3, r0
 8018bb6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8018bb8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8018bbc:	4618      	mov	r0, r3
 8018bbe:	3720      	adds	r7, #32
 8018bc0:	46bd      	mov	sp, r7
 8018bc2:	bdb0      	pop	{r4, r5, r7, pc}
 8018bc4:	0802047c 	.word	0x0802047c
 8018bc8:	08020a40 	.word	0x08020a40
 8018bcc:	080204d0 	.word	0x080204d0
 8018bd0:	08020a60 	.word	0x08020a60
 8018bd4:	08020a80 	.word	0x08020a80
 8018bd8:	200240a0 	.word	0x200240a0
 8018bdc:	08020aa4 	.word	0x08020aa4

08018be0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8018be0:	b5b0      	push	{r4, r5, r7, lr}
 8018be2:	b084      	sub	sp, #16
 8018be4:	af00      	add	r7, sp, #0
 8018be6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8018be8:	687b      	ldr	r3, [r7, #4]
 8018bea:	2b00      	cmp	r3, #0
 8018bec:	d106      	bne.n	8018bfc <tcp_rexmit_rto_prepare+0x1c>
 8018bee:	4b31      	ldr	r3, [pc, #196]	; (8018cb4 <tcp_rexmit_rto_prepare+0xd4>)
 8018bf0:	f240 6263 	movw	r2, #1635	; 0x663
 8018bf4:	4930      	ldr	r1, [pc, #192]	; (8018cb8 <tcp_rexmit_rto_prepare+0xd8>)
 8018bf6:	4831      	ldr	r0, [pc, #196]	; (8018cbc <tcp_rexmit_rto_prepare+0xdc>)
 8018bf8:	f005 f8a2 	bl	801dd40 <iprintf>

  if (pcb->unacked == NULL) {
 8018bfc:	687b      	ldr	r3, [r7, #4]
 8018bfe:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018c00:	2b00      	cmp	r3, #0
 8018c02:	d102      	bne.n	8018c0a <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 8018c04:	f06f 0305 	mvn.w	r3, #5
 8018c08:	e050      	b.n	8018cac <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8018c0a:	687b      	ldr	r3, [r7, #4]
 8018c0c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018c0e:	60fb      	str	r3, [r7, #12]
 8018c10:	e00b      	b.n	8018c2a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8018c12:	68f8      	ldr	r0, [r7, #12]
 8018c14:	f7ff fee4 	bl	80189e0 <tcp_output_segment_busy>
 8018c18:	4603      	mov	r3, r0
 8018c1a:	2b00      	cmp	r3, #0
 8018c1c:	d002      	beq.n	8018c24 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8018c1e:	f06f 0305 	mvn.w	r3, #5
 8018c22:	e043      	b.n	8018cac <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8018c24:	68fb      	ldr	r3, [r7, #12]
 8018c26:	681b      	ldr	r3, [r3, #0]
 8018c28:	60fb      	str	r3, [r7, #12]
 8018c2a:	68fb      	ldr	r3, [r7, #12]
 8018c2c:	681b      	ldr	r3, [r3, #0]
 8018c2e:	2b00      	cmp	r3, #0
 8018c30:	d1ef      	bne.n	8018c12 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8018c32:	68f8      	ldr	r0, [r7, #12]
 8018c34:	f7ff fed4 	bl	80189e0 <tcp_output_segment_busy>
 8018c38:	4603      	mov	r3, r0
 8018c3a:	2b00      	cmp	r3, #0
 8018c3c:	d002      	beq.n	8018c44 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 8018c3e:	f06f 0305 	mvn.w	r3, #5
 8018c42:	e033      	b.n	8018cac <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8018c44:	687b      	ldr	r3, [r7, #4]
 8018c46:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8018c48:	68fb      	ldr	r3, [r7, #12]
 8018c4a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 8018c4c:	687b      	ldr	r3, [r7, #4]
 8018c4e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8018c50:	687b      	ldr	r3, [r7, #4]
 8018c52:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8018c54:	687b      	ldr	r3, [r7, #4]
 8018c56:	2200      	movs	r2, #0
 8018c58:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 8018c5a:	687b      	ldr	r3, [r7, #4]
 8018c5c:	8b5b      	ldrh	r3, [r3, #26]
 8018c5e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8018c62:	b29a      	uxth	r2, r3
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018c68:	68fb      	ldr	r3, [r7, #12]
 8018c6a:	68db      	ldr	r3, [r3, #12]
 8018c6c:	685b      	ldr	r3, [r3, #4]
 8018c6e:	4618      	mov	r0, r3
 8018c70:	f7f9 fc45 	bl	80124fe <lwip_htonl>
 8018c74:	4604      	mov	r4, r0
 8018c76:	68fb      	ldr	r3, [r7, #12]
 8018c78:	891b      	ldrh	r3, [r3, #8]
 8018c7a:	461d      	mov	r5, r3
 8018c7c:	68fb      	ldr	r3, [r7, #12]
 8018c7e:	68db      	ldr	r3, [r3, #12]
 8018c80:	899b      	ldrh	r3, [r3, #12]
 8018c82:	b29b      	uxth	r3, r3
 8018c84:	4618      	mov	r0, r3
 8018c86:	f7f9 fc25 	bl	80124d4 <lwip_htons>
 8018c8a:	4603      	mov	r3, r0
 8018c8c:	b2db      	uxtb	r3, r3
 8018c8e:	f003 0303 	and.w	r3, r3, #3
 8018c92:	2b00      	cmp	r3, #0
 8018c94:	d001      	beq.n	8018c9a <tcp_rexmit_rto_prepare+0xba>
 8018c96:	2301      	movs	r3, #1
 8018c98:	e000      	b.n	8018c9c <tcp_rexmit_rto_prepare+0xbc>
 8018c9a:	2300      	movs	r3, #0
 8018c9c:	442b      	add	r3, r5
 8018c9e:	18e2      	adds	r2, r4, r3
 8018ca0:	687b      	ldr	r3, [r7, #4]
 8018ca2:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	2200      	movs	r2, #0
 8018ca8:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8018caa:	2300      	movs	r3, #0
}
 8018cac:	4618      	mov	r0, r3
 8018cae:	3710      	adds	r7, #16
 8018cb0:	46bd      	mov	sp, r7
 8018cb2:	bdb0      	pop	{r4, r5, r7, pc}
 8018cb4:	0802047c 	.word	0x0802047c
 8018cb8:	08020ab8 	.word	0x08020ab8
 8018cbc:	080204d0 	.word	0x080204d0

08018cc0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8018cc0:	b580      	push	{r7, lr}
 8018cc2:	b082      	sub	sp, #8
 8018cc4:	af00      	add	r7, sp, #0
 8018cc6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8018cc8:	687b      	ldr	r3, [r7, #4]
 8018cca:	2b00      	cmp	r3, #0
 8018ccc:	d106      	bne.n	8018cdc <tcp_rexmit_rto_commit+0x1c>
 8018cce:	4b0d      	ldr	r3, [pc, #52]	; (8018d04 <tcp_rexmit_rto_commit+0x44>)
 8018cd0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8018cd4:	490c      	ldr	r1, [pc, #48]	; (8018d08 <tcp_rexmit_rto_commit+0x48>)
 8018cd6:	480d      	ldr	r0, [pc, #52]	; (8018d0c <tcp_rexmit_rto_commit+0x4c>)
 8018cd8:	f005 f832 	bl	801dd40 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8018cdc:	687b      	ldr	r3, [r7, #4]
 8018cde:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018ce2:	2bff      	cmp	r3, #255	; 0xff
 8018ce4:	d007      	beq.n	8018cf6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 8018ce6:	687b      	ldr	r3, [r7, #4]
 8018ce8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018cec:	3301      	adds	r3, #1
 8018cee:	b2da      	uxtb	r2, r3
 8018cf0:	687b      	ldr	r3, [r7, #4]
 8018cf2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 8018cf6:	6878      	ldr	r0, [r7, #4]
 8018cf8:	f7ff fc7e 	bl	80185f8 <tcp_output>
}
 8018cfc:	bf00      	nop
 8018cfe:	3708      	adds	r7, #8
 8018d00:	46bd      	mov	sp, r7
 8018d02:	bd80      	pop	{r7, pc}
 8018d04:	0802047c 	.word	0x0802047c
 8018d08:	08020adc 	.word	0x08020adc
 8018d0c:	080204d0 	.word	0x080204d0

08018d10 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8018d10:	b580      	push	{r7, lr}
 8018d12:	b082      	sub	sp, #8
 8018d14:	af00      	add	r7, sp, #0
 8018d16:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8018d18:	687b      	ldr	r3, [r7, #4]
 8018d1a:	2b00      	cmp	r3, #0
 8018d1c:	d106      	bne.n	8018d2c <tcp_rexmit_rto+0x1c>
 8018d1e:	4b0a      	ldr	r3, [pc, #40]	; (8018d48 <tcp_rexmit_rto+0x38>)
 8018d20:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8018d24:	4909      	ldr	r1, [pc, #36]	; (8018d4c <tcp_rexmit_rto+0x3c>)
 8018d26:	480a      	ldr	r0, [pc, #40]	; (8018d50 <tcp_rexmit_rto+0x40>)
 8018d28:	f005 f80a 	bl	801dd40 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8018d2c:	6878      	ldr	r0, [r7, #4]
 8018d2e:	f7ff ff57 	bl	8018be0 <tcp_rexmit_rto_prepare>
 8018d32:	4603      	mov	r3, r0
 8018d34:	2b00      	cmp	r3, #0
 8018d36:	d102      	bne.n	8018d3e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8018d38:	6878      	ldr	r0, [r7, #4]
 8018d3a:	f7ff ffc1 	bl	8018cc0 <tcp_rexmit_rto_commit>
  }
}
 8018d3e:	bf00      	nop
 8018d40:	3708      	adds	r7, #8
 8018d42:	46bd      	mov	sp, r7
 8018d44:	bd80      	pop	{r7, pc}
 8018d46:	bf00      	nop
 8018d48:	0802047c 	.word	0x0802047c
 8018d4c:	08020b00 	.word	0x08020b00
 8018d50:	080204d0 	.word	0x080204d0

08018d54 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8018d54:	b590      	push	{r4, r7, lr}
 8018d56:	b085      	sub	sp, #20
 8018d58:	af00      	add	r7, sp, #0
 8018d5a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 8018d5c:	687b      	ldr	r3, [r7, #4]
 8018d5e:	2b00      	cmp	r3, #0
 8018d60:	d106      	bne.n	8018d70 <tcp_rexmit+0x1c>
 8018d62:	4b2f      	ldr	r3, [pc, #188]	; (8018e20 <tcp_rexmit+0xcc>)
 8018d64:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8018d68:	492e      	ldr	r1, [pc, #184]	; (8018e24 <tcp_rexmit+0xd0>)
 8018d6a:	482f      	ldr	r0, [pc, #188]	; (8018e28 <tcp_rexmit+0xd4>)
 8018d6c:	f004 ffe8 	bl	801dd40 <iprintf>

  if (pcb->unacked == NULL) {
 8018d70:	687b      	ldr	r3, [r7, #4]
 8018d72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018d74:	2b00      	cmp	r3, #0
 8018d76:	d102      	bne.n	8018d7e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8018d78:	f06f 0305 	mvn.w	r3, #5
 8018d7c:	e04c      	b.n	8018e18 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 8018d7e:	687b      	ldr	r3, [r7, #4]
 8018d80:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018d82:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8018d84:	68b8      	ldr	r0, [r7, #8]
 8018d86:	f7ff fe2b 	bl	80189e0 <tcp_output_segment_busy>
 8018d8a:	4603      	mov	r3, r0
 8018d8c:	2b00      	cmp	r3, #0
 8018d8e:	d002      	beq.n	8018d96 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8018d90:	f06f 0305 	mvn.w	r3, #5
 8018d94:	e040      	b.n	8018e18 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8018d96:	68bb      	ldr	r3, [r7, #8]
 8018d98:	681a      	ldr	r2, [r3, #0]
 8018d9a:	687b      	ldr	r3, [r7, #4]
 8018d9c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8018d9e:	687b      	ldr	r3, [r7, #4]
 8018da0:	336c      	adds	r3, #108	; 0x6c
 8018da2:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8018da4:	e002      	b.n	8018dac <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8018da6:	68fb      	ldr	r3, [r7, #12]
 8018da8:	681b      	ldr	r3, [r3, #0]
 8018daa:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8018dac:	68fb      	ldr	r3, [r7, #12]
 8018dae:	681b      	ldr	r3, [r3, #0]
 8018db0:	2b00      	cmp	r3, #0
 8018db2:	d011      	beq.n	8018dd8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8018db4:	68fb      	ldr	r3, [r7, #12]
 8018db6:	681b      	ldr	r3, [r3, #0]
 8018db8:	68db      	ldr	r3, [r3, #12]
 8018dba:	685b      	ldr	r3, [r3, #4]
 8018dbc:	4618      	mov	r0, r3
 8018dbe:	f7f9 fb9e 	bl	80124fe <lwip_htonl>
 8018dc2:	4604      	mov	r4, r0
 8018dc4:	68bb      	ldr	r3, [r7, #8]
 8018dc6:	68db      	ldr	r3, [r3, #12]
 8018dc8:	685b      	ldr	r3, [r3, #4]
 8018dca:	4618      	mov	r0, r3
 8018dcc:	f7f9 fb97 	bl	80124fe <lwip_htonl>
 8018dd0:	4603      	mov	r3, r0
 8018dd2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 8018dd4:	2b00      	cmp	r3, #0
 8018dd6:	dbe6      	blt.n	8018da6 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8018dd8:	68fb      	ldr	r3, [r7, #12]
 8018dda:	681a      	ldr	r2, [r3, #0]
 8018ddc:	68bb      	ldr	r3, [r7, #8]
 8018dde:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8018de0:	68fb      	ldr	r3, [r7, #12]
 8018de2:	68ba      	ldr	r2, [r7, #8]
 8018de4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 8018de6:	68bb      	ldr	r3, [r7, #8]
 8018de8:	681b      	ldr	r3, [r3, #0]
 8018dea:	2b00      	cmp	r3, #0
 8018dec:	d103      	bne.n	8018df6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8018dee:	687b      	ldr	r3, [r7, #4]
 8018df0:	2200      	movs	r2, #0
 8018df2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 8018df6:	687b      	ldr	r3, [r7, #4]
 8018df8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018dfc:	2bff      	cmp	r3, #255	; 0xff
 8018dfe:	d007      	beq.n	8018e10 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8018e00:	687b      	ldr	r3, [r7, #4]
 8018e02:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8018e06:	3301      	adds	r3, #1
 8018e08:	b2da      	uxtb	r2, r3
 8018e0a:	687b      	ldr	r3, [r7, #4]
 8018e0c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8018e10:	687b      	ldr	r3, [r7, #4]
 8018e12:	2200      	movs	r2, #0
 8018e14:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8018e16:	2300      	movs	r3, #0
}
 8018e18:	4618      	mov	r0, r3
 8018e1a:	3714      	adds	r7, #20
 8018e1c:	46bd      	mov	sp, r7
 8018e1e:	bd90      	pop	{r4, r7, pc}
 8018e20:	0802047c 	.word	0x0802047c
 8018e24:	08020b1c 	.word	0x08020b1c
 8018e28:	080204d0 	.word	0x080204d0

08018e2c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8018e2c:	b580      	push	{r7, lr}
 8018e2e:	b082      	sub	sp, #8
 8018e30:	af00      	add	r7, sp, #0
 8018e32:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8018e34:	687b      	ldr	r3, [r7, #4]
 8018e36:	2b00      	cmp	r3, #0
 8018e38:	d106      	bne.n	8018e48 <tcp_rexmit_fast+0x1c>
 8018e3a:	4b2a      	ldr	r3, [pc, #168]	; (8018ee4 <tcp_rexmit_fast+0xb8>)
 8018e3c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8018e40:	4929      	ldr	r1, [pc, #164]	; (8018ee8 <tcp_rexmit_fast+0xbc>)
 8018e42:	482a      	ldr	r0, [pc, #168]	; (8018eec <tcp_rexmit_fast+0xc0>)
 8018e44:	f004 ff7c 	bl	801dd40 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8018e48:	687b      	ldr	r3, [r7, #4]
 8018e4a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018e4c:	2b00      	cmp	r3, #0
 8018e4e:	d045      	beq.n	8018edc <tcp_rexmit_fast+0xb0>
 8018e50:	687b      	ldr	r3, [r7, #4]
 8018e52:	8b5b      	ldrh	r3, [r3, #26]
 8018e54:	f003 0304 	and.w	r3, r3, #4
 8018e58:	2b00      	cmp	r3, #0
 8018e5a:	d13f      	bne.n	8018edc <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 8018e5c:	6878      	ldr	r0, [r7, #4]
 8018e5e:	f7ff ff79 	bl	8018d54 <tcp_rexmit>
 8018e62:	4603      	mov	r3, r0
 8018e64:	2b00      	cmp	r3, #0
 8018e66:	d139      	bne.n	8018edc <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8018e68:	687b      	ldr	r3, [r7, #4]
 8018e6a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8018e6e:	687b      	ldr	r3, [r7, #4]
 8018e70:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018e74:	4293      	cmp	r3, r2
 8018e76:	bf28      	it	cs
 8018e78:	4613      	movcs	r3, r2
 8018e7a:	b29b      	uxth	r3, r3
 8018e7c:	2b00      	cmp	r3, #0
 8018e7e:	da00      	bge.n	8018e82 <tcp_rexmit_fast+0x56>
 8018e80:	3301      	adds	r3, #1
 8018e82:	105b      	asrs	r3, r3, #1
 8018e84:	b29a      	uxth	r2, r3
 8018e86:	687b      	ldr	r3, [r7, #4]
 8018e88:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 8018e8c:	687b      	ldr	r3, [r7, #4]
 8018e8e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8018e92:	461a      	mov	r2, r3
 8018e94:	687b      	ldr	r3, [r7, #4]
 8018e96:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018e98:	005b      	lsls	r3, r3, #1
 8018e9a:	429a      	cmp	r2, r3
 8018e9c:	d206      	bcs.n	8018eac <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8018e9e:	687b      	ldr	r3, [r7, #4]
 8018ea0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018ea2:	005b      	lsls	r3, r3, #1
 8018ea4:	b29a      	uxth	r2, r3
 8018ea6:	687b      	ldr	r3, [r7, #4]
 8018ea8:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8018eac:	687b      	ldr	r3, [r7, #4]
 8018eae:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8018eb2:	687b      	ldr	r3, [r7, #4]
 8018eb4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018eb6:	4619      	mov	r1, r3
 8018eb8:	0049      	lsls	r1, r1, #1
 8018eba:	440b      	add	r3, r1
 8018ebc:	b29b      	uxth	r3, r3
 8018ebe:	4413      	add	r3, r2
 8018ec0:	b29a      	uxth	r2, r3
 8018ec2:	687b      	ldr	r3, [r7, #4]
 8018ec4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 8018ec8:	687b      	ldr	r3, [r7, #4]
 8018eca:	8b5b      	ldrh	r3, [r3, #26]
 8018ecc:	f043 0304 	orr.w	r3, r3, #4
 8018ed0:	b29a      	uxth	r2, r3
 8018ed2:	687b      	ldr	r3, [r7, #4]
 8018ed4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 8018ed6:	687b      	ldr	r3, [r7, #4]
 8018ed8:	2200      	movs	r2, #0
 8018eda:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8018edc:	bf00      	nop
 8018ede:	3708      	adds	r7, #8
 8018ee0:	46bd      	mov	sp, r7
 8018ee2:	bd80      	pop	{r7, pc}
 8018ee4:	0802047c 	.word	0x0802047c
 8018ee8:	08020b34 	.word	0x08020b34
 8018eec:	080204d0 	.word	0x080204d0

08018ef0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8018ef0:	b580      	push	{r7, lr}
 8018ef2:	b086      	sub	sp, #24
 8018ef4:	af00      	add	r7, sp, #0
 8018ef6:	60f8      	str	r0, [r7, #12]
 8018ef8:	607b      	str	r3, [r7, #4]
 8018efa:	460b      	mov	r3, r1
 8018efc:	817b      	strh	r3, [r7, #10]
 8018efe:	4613      	mov	r3, r2
 8018f00:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 8018f02:	897a      	ldrh	r2, [r7, #10]
 8018f04:	893b      	ldrh	r3, [r7, #8]
 8018f06:	4413      	add	r3, r2
 8018f08:	b29b      	uxth	r3, r3
 8018f0a:	3314      	adds	r3, #20
 8018f0c:	b29b      	uxth	r3, r3
 8018f0e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018f12:	4619      	mov	r1, r3
 8018f14:	2022      	movs	r0, #34	; 0x22
 8018f16:	f7fa fbfb 	bl	8013710 <pbuf_alloc>
 8018f1a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8018f1c:	697b      	ldr	r3, [r7, #20]
 8018f1e:	2b00      	cmp	r3, #0
 8018f20:	d04d      	beq.n	8018fbe <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8018f22:	897b      	ldrh	r3, [r7, #10]
 8018f24:	3313      	adds	r3, #19
 8018f26:	697a      	ldr	r2, [r7, #20]
 8018f28:	8952      	ldrh	r2, [r2, #10]
 8018f2a:	4293      	cmp	r3, r2
 8018f2c:	db06      	blt.n	8018f3c <tcp_output_alloc_header_common+0x4c>
 8018f2e:	4b26      	ldr	r3, [pc, #152]	; (8018fc8 <tcp_output_alloc_header_common+0xd8>)
 8018f30:	f240 7223 	movw	r2, #1827	; 0x723
 8018f34:	4925      	ldr	r1, [pc, #148]	; (8018fcc <tcp_output_alloc_header_common+0xdc>)
 8018f36:	4826      	ldr	r0, [pc, #152]	; (8018fd0 <tcp_output_alloc_header_common+0xe0>)
 8018f38:	f004 ff02 	bl	801dd40 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 8018f3c:	697b      	ldr	r3, [r7, #20]
 8018f3e:	685b      	ldr	r3, [r3, #4]
 8018f40:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8018f42:	8c3b      	ldrh	r3, [r7, #32]
 8018f44:	4618      	mov	r0, r3
 8018f46:	f7f9 fac5 	bl	80124d4 <lwip_htons>
 8018f4a:	4603      	mov	r3, r0
 8018f4c:	461a      	mov	r2, r3
 8018f4e:	693b      	ldr	r3, [r7, #16]
 8018f50:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8018f52:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018f54:	4618      	mov	r0, r3
 8018f56:	f7f9 fabd 	bl	80124d4 <lwip_htons>
 8018f5a:	4603      	mov	r3, r0
 8018f5c:	461a      	mov	r2, r3
 8018f5e:	693b      	ldr	r3, [r7, #16]
 8018f60:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8018f62:	693b      	ldr	r3, [r7, #16]
 8018f64:	687a      	ldr	r2, [r7, #4]
 8018f66:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8018f68:	68f8      	ldr	r0, [r7, #12]
 8018f6a:	f7f9 fac8 	bl	80124fe <lwip_htonl>
 8018f6e:	4602      	mov	r2, r0
 8018f70:	693b      	ldr	r3, [r7, #16]
 8018f72:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8018f74:	897b      	ldrh	r3, [r7, #10]
 8018f76:	089b      	lsrs	r3, r3, #2
 8018f78:	b29b      	uxth	r3, r3
 8018f7a:	3305      	adds	r3, #5
 8018f7c:	b29b      	uxth	r3, r3
 8018f7e:	031b      	lsls	r3, r3, #12
 8018f80:	b29a      	uxth	r2, r3
 8018f82:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018f86:	b29b      	uxth	r3, r3
 8018f88:	4313      	orrs	r3, r2
 8018f8a:	b29b      	uxth	r3, r3
 8018f8c:	4618      	mov	r0, r3
 8018f8e:	f7f9 faa1 	bl	80124d4 <lwip_htons>
 8018f92:	4603      	mov	r3, r0
 8018f94:	461a      	mov	r2, r3
 8018f96:	693b      	ldr	r3, [r7, #16]
 8018f98:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8018f9a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8018f9c:	4618      	mov	r0, r3
 8018f9e:	f7f9 fa99 	bl	80124d4 <lwip_htons>
 8018fa2:	4603      	mov	r3, r0
 8018fa4:	461a      	mov	r2, r3
 8018fa6:	693b      	ldr	r3, [r7, #16]
 8018fa8:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8018faa:	693b      	ldr	r3, [r7, #16]
 8018fac:	2200      	movs	r2, #0
 8018fae:	741a      	strb	r2, [r3, #16]
 8018fb0:	2200      	movs	r2, #0
 8018fb2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 8018fb4:	693b      	ldr	r3, [r7, #16]
 8018fb6:	2200      	movs	r2, #0
 8018fb8:	749a      	strb	r2, [r3, #18]
 8018fba:	2200      	movs	r2, #0
 8018fbc:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8018fbe:	697b      	ldr	r3, [r7, #20]
}
 8018fc0:	4618      	mov	r0, r3
 8018fc2:	3718      	adds	r7, #24
 8018fc4:	46bd      	mov	sp, r7
 8018fc6:	bd80      	pop	{r7, pc}
 8018fc8:	0802047c 	.word	0x0802047c
 8018fcc:	08020b54 	.word	0x08020b54
 8018fd0:	080204d0 	.word	0x080204d0

08018fd4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 8018fd4:	b5b0      	push	{r4, r5, r7, lr}
 8018fd6:	b08a      	sub	sp, #40	; 0x28
 8018fd8:	af04      	add	r7, sp, #16
 8018fda:	60f8      	str	r0, [r7, #12]
 8018fdc:	607b      	str	r3, [r7, #4]
 8018fde:	460b      	mov	r3, r1
 8018fe0:	817b      	strh	r3, [r7, #10]
 8018fe2:	4613      	mov	r3, r2
 8018fe4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 8018fe6:	68fb      	ldr	r3, [r7, #12]
 8018fe8:	2b00      	cmp	r3, #0
 8018fea:	d106      	bne.n	8018ffa <tcp_output_alloc_header+0x26>
 8018fec:	4b15      	ldr	r3, [pc, #84]	; (8019044 <tcp_output_alloc_header+0x70>)
 8018fee:	f240 7242 	movw	r2, #1858	; 0x742
 8018ff2:	4915      	ldr	r1, [pc, #84]	; (8019048 <tcp_output_alloc_header+0x74>)
 8018ff4:	4815      	ldr	r0, [pc, #84]	; (801904c <tcp_output_alloc_header+0x78>)
 8018ff6:	f004 fea3 	bl	801dd40 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8018ffa:	68fb      	ldr	r3, [r7, #12]
 8018ffc:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8018ffe:	68fb      	ldr	r3, [r7, #12]
 8019000:	8adb      	ldrh	r3, [r3, #22]
 8019002:	68fa      	ldr	r2, [r7, #12]
 8019004:	8b12      	ldrh	r2, [r2, #24]
 8019006:	68f9      	ldr	r1, [r7, #12]
 8019008:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 801900a:	893d      	ldrh	r5, [r7, #8]
 801900c:	897c      	ldrh	r4, [r7, #10]
 801900e:	9103      	str	r1, [sp, #12]
 8019010:	2110      	movs	r1, #16
 8019012:	9102      	str	r1, [sp, #8]
 8019014:	9201      	str	r2, [sp, #4]
 8019016:	9300      	str	r3, [sp, #0]
 8019018:	687b      	ldr	r3, [r7, #4]
 801901a:	462a      	mov	r2, r5
 801901c:	4621      	mov	r1, r4
 801901e:	f7ff ff67 	bl	8018ef0 <tcp_output_alloc_header_common>
 8019022:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8019024:	697b      	ldr	r3, [r7, #20]
 8019026:	2b00      	cmp	r3, #0
 8019028:	d006      	beq.n	8019038 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801902a:	68fb      	ldr	r3, [r7, #12]
 801902c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801902e:	68fa      	ldr	r2, [r7, #12]
 8019030:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8019032:	441a      	add	r2, r3
 8019034:	68fb      	ldr	r3, [r7, #12]
 8019036:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8019038:	697b      	ldr	r3, [r7, #20]
}
 801903a:	4618      	mov	r0, r3
 801903c:	3718      	adds	r7, #24
 801903e:	46bd      	mov	sp, r7
 8019040:	bdb0      	pop	{r4, r5, r7, pc}
 8019042:	bf00      	nop
 8019044:	0802047c 	.word	0x0802047c
 8019048:	08020b84 	.word	0x08020b84
 801904c:	080204d0 	.word	0x080204d0

08019050 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8019050:	b580      	push	{r7, lr}
 8019052:	b088      	sub	sp, #32
 8019054:	af00      	add	r7, sp, #0
 8019056:	60f8      	str	r0, [r7, #12]
 8019058:	60b9      	str	r1, [r7, #8]
 801905a:	4611      	mov	r1, r2
 801905c:	461a      	mov	r2, r3
 801905e:	460b      	mov	r3, r1
 8019060:	71fb      	strb	r3, [r7, #7]
 8019062:	4613      	mov	r3, r2
 8019064:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8019066:	2300      	movs	r3, #0
 8019068:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801906a:	68bb      	ldr	r3, [r7, #8]
 801906c:	2b00      	cmp	r3, #0
 801906e:	d106      	bne.n	801907e <tcp_output_fill_options+0x2e>
 8019070:	4b12      	ldr	r3, [pc, #72]	; (80190bc <tcp_output_fill_options+0x6c>)
 8019072:	f240 7256 	movw	r2, #1878	; 0x756
 8019076:	4912      	ldr	r1, [pc, #72]	; (80190c0 <tcp_output_fill_options+0x70>)
 8019078:	4812      	ldr	r0, [pc, #72]	; (80190c4 <tcp_output_fill_options+0x74>)
 801907a:	f004 fe61 	bl	801dd40 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801907e:	68bb      	ldr	r3, [r7, #8]
 8019080:	685b      	ldr	r3, [r3, #4]
 8019082:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8019084:	69bb      	ldr	r3, [r7, #24]
 8019086:	3314      	adds	r3, #20
 8019088:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801908a:	8bfb      	ldrh	r3, [r7, #30]
 801908c:	009b      	lsls	r3, r3, #2
 801908e:	461a      	mov	r2, r3
 8019090:	79fb      	ldrb	r3, [r7, #7]
 8019092:	009b      	lsls	r3, r3, #2
 8019094:	f003 0304 	and.w	r3, r3, #4
 8019098:	4413      	add	r3, r2
 801909a:	3314      	adds	r3, #20
 801909c:	69ba      	ldr	r2, [r7, #24]
 801909e:	4413      	add	r3, r2
 80190a0:	697a      	ldr	r2, [r7, #20]
 80190a2:	429a      	cmp	r2, r3
 80190a4:	d006      	beq.n	80190b4 <tcp_output_fill_options+0x64>
 80190a6:	4b05      	ldr	r3, [pc, #20]	; (80190bc <tcp_output_fill_options+0x6c>)
 80190a8:	f240 7275 	movw	r2, #1909	; 0x775
 80190ac:	4906      	ldr	r1, [pc, #24]	; (80190c8 <tcp_output_fill_options+0x78>)
 80190ae:	4805      	ldr	r0, [pc, #20]	; (80190c4 <tcp_output_fill_options+0x74>)
 80190b0:	f004 fe46 	bl	801dd40 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80190b4:	bf00      	nop
 80190b6:	3720      	adds	r7, #32
 80190b8:	46bd      	mov	sp, r7
 80190ba:	bd80      	pop	{r7, pc}
 80190bc:	0802047c 	.word	0x0802047c
 80190c0:	08020bac 	.word	0x08020bac
 80190c4:	080204d0 	.word	0x080204d0
 80190c8:	08020aa4 	.word	0x08020aa4

080190cc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80190cc:	b580      	push	{r7, lr}
 80190ce:	b08a      	sub	sp, #40	; 0x28
 80190d0:	af04      	add	r7, sp, #16
 80190d2:	60f8      	str	r0, [r7, #12]
 80190d4:	60b9      	str	r1, [r7, #8]
 80190d6:	607a      	str	r2, [r7, #4]
 80190d8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80190da:	68bb      	ldr	r3, [r7, #8]
 80190dc:	2b00      	cmp	r3, #0
 80190de:	d106      	bne.n	80190ee <tcp_output_control_segment+0x22>
 80190e0:	4b1c      	ldr	r3, [pc, #112]	; (8019154 <tcp_output_control_segment+0x88>)
 80190e2:	f240 7287 	movw	r2, #1927	; 0x787
 80190e6:	491c      	ldr	r1, [pc, #112]	; (8019158 <tcp_output_control_segment+0x8c>)
 80190e8:	481c      	ldr	r0, [pc, #112]	; (801915c <tcp_output_control_segment+0x90>)
 80190ea:	f004 fe29 	bl	801dd40 <iprintf>

  netif = tcp_route(pcb, src, dst);
 80190ee:	683a      	ldr	r2, [r7, #0]
 80190f0:	6879      	ldr	r1, [r7, #4]
 80190f2:	68f8      	ldr	r0, [r7, #12]
 80190f4:	f7fe ff40 	bl	8017f78 <tcp_route>
 80190f8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80190fa:	693b      	ldr	r3, [r7, #16]
 80190fc:	2b00      	cmp	r3, #0
 80190fe:	d102      	bne.n	8019106 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8019100:	23fc      	movs	r3, #252	; 0xfc
 8019102:	75fb      	strb	r3, [r7, #23]
 8019104:	e01c      	b.n	8019140 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 8019106:	68fb      	ldr	r3, [r7, #12]
 8019108:	2b00      	cmp	r3, #0
 801910a:	d006      	beq.n	801911a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 801910c:	68fb      	ldr	r3, [r7, #12]
 801910e:	7adb      	ldrb	r3, [r3, #11]
 8019110:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8019112:	68fb      	ldr	r3, [r7, #12]
 8019114:	7a9b      	ldrb	r3, [r3, #10]
 8019116:	757b      	strb	r3, [r7, #21]
 8019118:	e003      	b.n	8019122 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801911a:	23ff      	movs	r3, #255	; 0xff
 801911c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801911e:	2300      	movs	r3, #0
 8019120:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8019122:	7dba      	ldrb	r2, [r7, #22]
 8019124:	693b      	ldr	r3, [r7, #16]
 8019126:	9302      	str	r3, [sp, #8]
 8019128:	2306      	movs	r3, #6
 801912a:	9301      	str	r3, [sp, #4]
 801912c:	7d7b      	ldrb	r3, [r7, #21]
 801912e:	9300      	str	r3, [sp, #0]
 8019130:	4613      	mov	r3, r2
 8019132:	683a      	ldr	r2, [r7, #0]
 8019134:	6879      	ldr	r1, [r7, #4]
 8019136:	68b8      	ldr	r0, [r7, #8]
 8019138:	f002 fa90 	bl	801b65c <ip4_output_if>
 801913c:	4603      	mov	r3, r0
 801913e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8019140:	68b8      	ldr	r0, [r7, #8]
 8019142:	f7fa fdc9 	bl	8013cd8 <pbuf_free>
  return err;
 8019146:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801914a:	4618      	mov	r0, r3
 801914c:	3718      	adds	r7, #24
 801914e:	46bd      	mov	sp, r7
 8019150:	bd80      	pop	{r7, pc}
 8019152:	bf00      	nop
 8019154:	0802047c 	.word	0x0802047c
 8019158:	08020bd4 	.word	0x08020bd4
 801915c:	080204d0 	.word	0x080204d0

08019160 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8019160:	b590      	push	{r4, r7, lr}
 8019162:	b08b      	sub	sp, #44	; 0x2c
 8019164:	af04      	add	r7, sp, #16
 8019166:	60f8      	str	r0, [r7, #12]
 8019168:	60b9      	str	r1, [r7, #8]
 801916a:	607a      	str	r2, [r7, #4]
 801916c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801916e:	683b      	ldr	r3, [r7, #0]
 8019170:	2b00      	cmp	r3, #0
 8019172:	d106      	bne.n	8019182 <tcp_rst+0x22>
 8019174:	4b1f      	ldr	r3, [pc, #124]	; (80191f4 <tcp_rst+0x94>)
 8019176:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801917a:	491f      	ldr	r1, [pc, #124]	; (80191f8 <tcp_rst+0x98>)
 801917c:	481f      	ldr	r0, [pc, #124]	; (80191fc <tcp_rst+0x9c>)
 801917e:	f004 fddf 	bl	801dd40 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8019182:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019184:	2b00      	cmp	r3, #0
 8019186:	d106      	bne.n	8019196 <tcp_rst+0x36>
 8019188:	4b1a      	ldr	r3, [pc, #104]	; (80191f4 <tcp_rst+0x94>)
 801918a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801918e:	491c      	ldr	r1, [pc, #112]	; (8019200 <tcp_rst+0xa0>)
 8019190:	481a      	ldr	r0, [pc, #104]	; (80191fc <tcp_rst+0x9c>)
 8019192:	f004 fdd5 	bl	801dd40 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019196:	2300      	movs	r3, #0
 8019198:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801919a:	f246 0308 	movw	r3, #24584	; 0x6008
 801919e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 80191a0:	7dfb      	ldrb	r3, [r7, #23]
 80191a2:	b29c      	uxth	r4, r3
 80191a4:	68b8      	ldr	r0, [r7, #8]
 80191a6:	f7f9 f9aa 	bl	80124fe <lwip_htonl>
 80191aa:	4602      	mov	r2, r0
 80191ac:	8abb      	ldrh	r3, [r7, #20]
 80191ae:	9303      	str	r3, [sp, #12]
 80191b0:	2314      	movs	r3, #20
 80191b2:	9302      	str	r3, [sp, #8]
 80191b4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80191b6:	9301      	str	r3, [sp, #4]
 80191b8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80191ba:	9300      	str	r3, [sp, #0]
 80191bc:	4613      	mov	r3, r2
 80191be:	2200      	movs	r2, #0
 80191c0:	4621      	mov	r1, r4
 80191c2:	6878      	ldr	r0, [r7, #4]
 80191c4:	f7ff fe94 	bl	8018ef0 <tcp_output_alloc_header_common>
 80191c8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80191ca:	693b      	ldr	r3, [r7, #16]
 80191cc:	2b00      	cmp	r3, #0
 80191ce:	d00c      	beq.n	80191ea <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80191d0:	7dfb      	ldrb	r3, [r7, #23]
 80191d2:	2200      	movs	r2, #0
 80191d4:	6939      	ldr	r1, [r7, #16]
 80191d6:	68f8      	ldr	r0, [r7, #12]
 80191d8:	f7ff ff3a 	bl	8019050 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80191dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80191de:	683a      	ldr	r2, [r7, #0]
 80191e0:	6939      	ldr	r1, [r7, #16]
 80191e2:	68f8      	ldr	r0, [r7, #12]
 80191e4:	f7ff ff72 	bl	80190cc <tcp_output_control_segment>
 80191e8:	e000      	b.n	80191ec <tcp_rst+0x8c>
    return;
 80191ea:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80191ec:	371c      	adds	r7, #28
 80191ee:	46bd      	mov	sp, r7
 80191f0:	bd90      	pop	{r4, r7, pc}
 80191f2:	bf00      	nop
 80191f4:	0802047c 	.word	0x0802047c
 80191f8:	08020c00 	.word	0x08020c00
 80191fc:	080204d0 	.word	0x080204d0
 8019200:	08020c1c 	.word	0x08020c1c

08019204 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 8019204:	b590      	push	{r4, r7, lr}
 8019206:	b087      	sub	sp, #28
 8019208:	af00      	add	r7, sp, #0
 801920a:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 801920c:	2300      	movs	r3, #0
 801920e:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8019210:	2300      	movs	r3, #0
 8019212:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8019214:	687b      	ldr	r3, [r7, #4]
 8019216:	2b00      	cmp	r3, #0
 8019218:	d106      	bne.n	8019228 <tcp_send_empty_ack+0x24>
 801921a:	4b28      	ldr	r3, [pc, #160]	; (80192bc <tcp_send_empty_ack+0xb8>)
 801921c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8019220:	4927      	ldr	r1, [pc, #156]	; (80192c0 <tcp_send_empty_ack+0xbc>)
 8019222:	4828      	ldr	r0, [pc, #160]	; (80192c4 <tcp_send_empty_ack+0xc0>)
 8019224:	f004 fd8c 	bl	801dd40 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8019228:	7dfb      	ldrb	r3, [r7, #23]
 801922a:	009b      	lsls	r3, r3, #2
 801922c:	b2db      	uxtb	r3, r3
 801922e:	f003 0304 	and.w	r3, r3, #4
 8019232:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8019234:	7d7b      	ldrb	r3, [r7, #21]
 8019236:	b29c      	uxth	r4, r3
 8019238:	687b      	ldr	r3, [r7, #4]
 801923a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801923c:	4618      	mov	r0, r3
 801923e:	f7f9 f95e 	bl	80124fe <lwip_htonl>
 8019242:	4603      	mov	r3, r0
 8019244:	2200      	movs	r2, #0
 8019246:	4621      	mov	r1, r4
 8019248:	6878      	ldr	r0, [r7, #4]
 801924a:	f7ff fec3 	bl	8018fd4 <tcp_output_alloc_header>
 801924e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019250:	693b      	ldr	r3, [r7, #16]
 8019252:	2b00      	cmp	r3, #0
 8019254:	d109      	bne.n	801926a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019256:	687b      	ldr	r3, [r7, #4]
 8019258:	8b5b      	ldrh	r3, [r3, #26]
 801925a:	f043 0303 	orr.w	r3, r3, #3
 801925e:	b29a      	uxth	r2, r3
 8019260:	687b      	ldr	r3, [r7, #4]
 8019262:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8019264:	f06f 0301 	mvn.w	r3, #1
 8019268:	e023      	b.n	80192b2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 801926a:	7dbb      	ldrb	r3, [r7, #22]
 801926c:	7dfa      	ldrb	r2, [r7, #23]
 801926e:	6939      	ldr	r1, [r7, #16]
 8019270:	6878      	ldr	r0, [r7, #4]
 8019272:	f7ff feed 	bl	8019050 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8019276:	687a      	ldr	r2, [r7, #4]
 8019278:	687b      	ldr	r3, [r7, #4]
 801927a:	3304      	adds	r3, #4
 801927c:	6939      	ldr	r1, [r7, #16]
 801927e:	6878      	ldr	r0, [r7, #4]
 8019280:	f7ff ff24 	bl	80190cc <tcp_output_control_segment>
 8019284:	4603      	mov	r3, r0
 8019286:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8019288:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801928c:	2b00      	cmp	r3, #0
 801928e:	d007      	beq.n	80192a0 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8019290:	687b      	ldr	r3, [r7, #4]
 8019292:	8b5b      	ldrh	r3, [r3, #26]
 8019294:	f043 0303 	orr.w	r3, r3, #3
 8019298:	b29a      	uxth	r2, r3
 801929a:	687b      	ldr	r3, [r7, #4]
 801929c:	835a      	strh	r2, [r3, #26]
 801929e:	e006      	b.n	80192ae <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80192a0:	687b      	ldr	r3, [r7, #4]
 80192a2:	8b5b      	ldrh	r3, [r3, #26]
 80192a4:	f023 0303 	bic.w	r3, r3, #3
 80192a8:	b29a      	uxth	r2, r3
 80192aa:	687b      	ldr	r3, [r7, #4]
 80192ac:	835a      	strh	r2, [r3, #26]
  }

  return err;
 80192ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80192b2:	4618      	mov	r0, r3
 80192b4:	371c      	adds	r7, #28
 80192b6:	46bd      	mov	sp, r7
 80192b8:	bd90      	pop	{r4, r7, pc}
 80192ba:	bf00      	nop
 80192bc:	0802047c 	.word	0x0802047c
 80192c0:	08020c38 	.word	0x08020c38
 80192c4:	080204d0 	.word	0x080204d0

080192c8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 80192c8:	b590      	push	{r4, r7, lr}
 80192ca:	b087      	sub	sp, #28
 80192cc:	af00      	add	r7, sp, #0
 80192ce:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80192d0:	2300      	movs	r3, #0
 80192d2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 80192d4:	687b      	ldr	r3, [r7, #4]
 80192d6:	2b00      	cmp	r3, #0
 80192d8:	d106      	bne.n	80192e8 <tcp_keepalive+0x20>
 80192da:	4b18      	ldr	r3, [pc, #96]	; (801933c <tcp_keepalive+0x74>)
 80192dc:	f640 0224 	movw	r2, #2084	; 0x824
 80192e0:	4917      	ldr	r1, [pc, #92]	; (8019340 <tcp_keepalive+0x78>)
 80192e2:	4818      	ldr	r0, [pc, #96]	; (8019344 <tcp_keepalive+0x7c>)
 80192e4:	f004 fd2c 	bl	801dd40 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 80192e8:	7dfb      	ldrb	r3, [r7, #23]
 80192ea:	b29c      	uxth	r4, r3
 80192ec:	687b      	ldr	r3, [r7, #4]
 80192ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80192f0:	3b01      	subs	r3, #1
 80192f2:	4618      	mov	r0, r3
 80192f4:	f7f9 f903 	bl	80124fe <lwip_htonl>
 80192f8:	4603      	mov	r3, r0
 80192fa:	2200      	movs	r2, #0
 80192fc:	4621      	mov	r1, r4
 80192fe:	6878      	ldr	r0, [r7, #4]
 8019300:	f7ff fe68 	bl	8018fd4 <tcp_output_alloc_header>
 8019304:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8019306:	693b      	ldr	r3, [r7, #16]
 8019308:	2b00      	cmp	r3, #0
 801930a:	d102      	bne.n	8019312 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 801930c:	f04f 33ff 	mov.w	r3, #4294967295
 8019310:	e010      	b.n	8019334 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8019312:	7dfb      	ldrb	r3, [r7, #23]
 8019314:	2200      	movs	r2, #0
 8019316:	6939      	ldr	r1, [r7, #16]
 8019318:	6878      	ldr	r0, [r7, #4]
 801931a:	f7ff fe99 	bl	8019050 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 801931e:	687a      	ldr	r2, [r7, #4]
 8019320:	687b      	ldr	r3, [r7, #4]
 8019322:	3304      	adds	r3, #4
 8019324:	6939      	ldr	r1, [r7, #16]
 8019326:	6878      	ldr	r0, [r7, #4]
 8019328:	f7ff fed0 	bl	80190cc <tcp_output_control_segment>
 801932c:	4603      	mov	r3, r0
 801932e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8019330:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8019334:	4618      	mov	r0, r3
 8019336:	371c      	adds	r7, #28
 8019338:	46bd      	mov	sp, r7
 801933a:	bd90      	pop	{r4, r7, pc}
 801933c:	0802047c 	.word	0x0802047c
 8019340:	08020c58 	.word	0x08020c58
 8019344:	080204d0 	.word	0x080204d0

08019348 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8019348:	b590      	push	{r4, r7, lr}
 801934a:	b08b      	sub	sp, #44	; 0x2c
 801934c:	af00      	add	r7, sp, #0
 801934e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8019350:	2300      	movs	r3, #0
 8019352:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8019356:	687b      	ldr	r3, [r7, #4]
 8019358:	2b00      	cmp	r3, #0
 801935a:	d106      	bne.n	801936a <tcp_zero_window_probe+0x22>
 801935c:	4b4c      	ldr	r3, [pc, #304]	; (8019490 <tcp_zero_window_probe+0x148>)
 801935e:	f640 024f 	movw	r2, #2127	; 0x84f
 8019362:	494c      	ldr	r1, [pc, #304]	; (8019494 <tcp_zero_window_probe+0x14c>)
 8019364:	484c      	ldr	r0, [pc, #304]	; (8019498 <tcp_zero_window_probe+0x150>)
 8019366:	f004 fceb 	bl	801dd40 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 801936a:	687b      	ldr	r3, [r7, #4]
 801936c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801936e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8019370:	6a3b      	ldr	r3, [r7, #32]
 8019372:	2b00      	cmp	r3, #0
 8019374:	d101      	bne.n	801937a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8019376:	2300      	movs	r3, #0
 8019378:	e086      	b.n	8019488 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 801937a:	687b      	ldr	r3, [r7, #4]
 801937c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8019380:	2bff      	cmp	r3, #255	; 0xff
 8019382:	d007      	beq.n	8019394 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8019384:	687b      	ldr	r3, [r7, #4]
 8019386:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 801938a:	3301      	adds	r3, #1
 801938c:	b2da      	uxtb	r2, r3
 801938e:	687b      	ldr	r3, [r7, #4]
 8019390:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8019394:	6a3b      	ldr	r3, [r7, #32]
 8019396:	68db      	ldr	r3, [r3, #12]
 8019398:	899b      	ldrh	r3, [r3, #12]
 801939a:	b29b      	uxth	r3, r3
 801939c:	4618      	mov	r0, r3
 801939e:	f7f9 f899 	bl	80124d4 <lwip_htons>
 80193a2:	4603      	mov	r3, r0
 80193a4:	b2db      	uxtb	r3, r3
 80193a6:	f003 0301 	and.w	r3, r3, #1
 80193aa:	2b00      	cmp	r3, #0
 80193ac:	d005      	beq.n	80193ba <tcp_zero_window_probe+0x72>
 80193ae:	6a3b      	ldr	r3, [r7, #32]
 80193b0:	891b      	ldrh	r3, [r3, #8]
 80193b2:	2b00      	cmp	r3, #0
 80193b4:	d101      	bne.n	80193ba <tcp_zero_window_probe+0x72>
 80193b6:	2301      	movs	r3, #1
 80193b8:	e000      	b.n	80193bc <tcp_zero_window_probe+0x74>
 80193ba:	2300      	movs	r3, #0
 80193bc:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 80193be:	7ffb      	ldrb	r3, [r7, #31]
 80193c0:	2b00      	cmp	r3, #0
 80193c2:	bf0c      	ite	eq
 80193c4:	2301      	moveq	r3, #1
 80193c6:	2300      	movne	r3, #0
 80193c8:	b2db      	uxtb	r3, r3
 80193ca:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 80193cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80193d0:	b299      	uxth	r1, r3
 80193d2:	6a3b      	ldr	r3, [r7, #32]
 80193d4:	68db      	ldr	r3, [r3, #12]
 80193d6:	685b      	ldr	r3, [r3, #4]
 80193d8:	8bba      	ldrh	r2, [r7, #28]
 80193da:	6878      	ldr	r0, [r7, #4]
 80193dc:	f7ff fdfa 	bl	8018fd4 <tcp_output_alloc_header>
 80193e0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 80193e2:	69bb      	ldr	r3, [r7, #24]
 80193e4:	2b00      	cmp	r3, #0
 80193e6:	d102      	bne.n	80193ee <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 80193e8:	f04f 33ff 	mov.w	r3, #4294967295
 80193ec:	e04c      	b.n	8019488 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 80193ee:	69bb      	ldr	r3, [r7, #24]
 80193f0:	685b      	ldr	r3, [r3, #4]
 80193f2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 80193f4:	7ffb      	ldrb	r3, [r7, #31]
 80193f6:	2b00      	cmp	r3, #0
 80193f8:	d011      	beq.n	801941e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 80193fa:	697b      	ldr	r3, [r7, #20]
 80193fc:	899b      	ldrh	r3, [r3, #12]
 80193fe:	b29b      	uxth	r3, r3
 8019400:	b21b      	sxth	r3, r3
 8019402:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8019406:	b21c      	sxth	r4, r3
 8019408:	2011      	movs	r0, #17
 801940a:	f7f9 f863 	bl	80124d4 <lwip_htons>
 801940e:	4603      	mov	r3, r0
 8019410:	b21b      	sxth	r3, r3
 8019412:	4323      	orrs	r3, r4
 8019414:	b21b      	sxth	r3, r3
 8019416:	b29a      	uxth	r2, r3
 8019418:	697b      	ldr	r3, [r7, #20]
 801941a:	819a      	strh	r2, [r3, #12]
 801941c:	e010      	b.n	8019440 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 801941e:	69bb      	ldr	r3, [r7, #24]
 8019420:	685b      	ldr	r3, [r3, #4]
 8019422:	3314      	adds	r3, #20
 8019424:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8019426:	6a3b      	ldr	r3, [r7, #32]
 8019428:	6858      	ldr	r0, [r3, #4]
 801942a:	6a3b      	ldr	r3, [r7, #32]
 801942c:	685b      	ldr	r3, [r3, #4]
 801942e:	891a      	ldrh	r2, [r3, #8]
 8019430:	6a3b      	ldr	r3, [r7, #32]
 8019432:	891b      	ldrh	r3, [r3, #8]
 8019434:	1ad3      	subs	r3, r2, r3
 8019436:	b29b      	uxth	r3, r3
 8019438:	2201      	movs	r2, #1
 801943a:	6939      	ldr	r1, [r7, #16]
 801943c:	f7fa fe52 	bl	80140e4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8019440:	6a3b      	ldr	r3, [r7, #32]
 8019442:	68db      	ldr	r3, [r3, #12]
 8019444:	685b      	ldr	r3, [r3, #4]
 8019446:	4618      	mov	r0, r3
 8019448:	f7f9 f859 	bl	80124fe <lwip_htonl>
 801944c:	4603      	mov	r3, r0
 801944e:	3301      	adds	r3, #1
 8019450:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8019452:	687b      	ldr	r3, [r7, #4]
 8019454:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8019456:	68fb      	ldr	r3, [r7, #12]
 8019458:	1ad3      	subs	r3, r2, r3
 801945a:	2b00      	cmp	r3, #0
 801945c:	da02      	bge.n	8019464 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 801945e:	687b      	ldr	r3, [r7, #4]
 8019460:	68fa      	ldr	r2, [r7, #12]
 8019462:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8019464:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8019468:	2200      	movs	r2, #0
 801946a:	69b9      	ldr	r1, [r7, #24]
 801946c:	6878      	ldr	r0, [r7, #4]
 801946e:	f7ff fdef 	bl	8019050 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8019472:	687a      	ldr	r2, [r7, #4]
 8019474:	687b      	ldr	r3, [r7, #4]
 8019476:	3304      	adds	r3, #4
 8019478:	69b9      	ldr	r1, [r7, #24]
 801947a:	6878      	ldr	r0, [r7, #4]
 801947c:	f7ff fe26 	bl	80190cc <tcp_output_control_segment>
 8019480:	4603      	mov	r3, r0
 8019482:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8019484:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8019488:	4618      	mov	r0, r3
 801948a:	372c      	adds	r7, #44	; 0x2c
 801948c:	46bd      	mov	sp, r7
 801948e:	bd90      	pop	{r4, r7, pc}
 8019490:	0802047c 	.word	0x0802047c
 8019494:	08020c74 	.word	0x08020c74
 8019498:	080204d0 	.word	0x080204d0

0801949c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 801949c:	b580      	push	{r7, lr}
 801949e:	b082      	sub	sp, #8
 80194a0:	af00      	add	r7, sp, #0
 80194a2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 80194a4:	f7fa ff0c 	bl	80142c0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 80194a8:	4b0a      	ldr	r3, [pc, #40]	; (80194d4 <tcpip_tcp_timer+0x38>)
 80194aa:	681b      	ldr	r3, [r3, #0]
 80194ac:	2b00      	cmp	r3, #0
 80194ae:	d103      	bne.n	80194b8 <tcpip_tcp_timer+0x1c>
 80194b0:	4b09      	ldr	r3, [pc, #36]	; (80194d8 <tcpip_tcp_timer+0x3c>)
 80194b2:	681b      	ldr	r3, [r3, #0]
 80194b4:	2b00      	cmp	r3, #0
 80194b6:	d005      	beq.n	80194c4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 80194b8:	2200      	movs	r2, #0
 80194ba:	4908      	ldr	r1, [pc, #32]	; (80194dc <tcpip_tcp_timer+0x40>)
 80194bc:	20fa      	movs	r0, #250	; 0xfa
 80194be:	f000 f8f3 	bl	80196a8 <sys_timeout>
 80194c2:	e003      	b.n	80194cc <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 80194c4:	4b06      	ldr	r3, [pc, #24]	; (80194e0 <tcpip_tcp_timer+0x44>)
 80194c6:	2200      	movs	r2, #0
 80194c8:	601a      	str	r2, [r3, #0]
  }
}
 80194ca:	bf00      	nop
 80194cc:	bf00      	nop
 80194ce:	3708      	adds	r7, #8
 80194d0:	46bd      	mov	sp, r7
 80194d2:	bd80      	pop	{r7, pc}
 80194d4:	200240ac 	.word	0x200240ac
 80194d8:	200240b0 	.word	0x200240b0
 80194dc:	0801949d 	.word	0x0801949d
 80194e0:	200240f8 	.word	0x200240f8

080194e4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 80194e4:	b580      	push	{r7, lr}
 80194e6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 80194e8:	4b0a      	ldr	r3, [pc, #40]	; (8019514 <tcp_timer_needed+0x30>)
 80194ea:	681b      	ldr	r3, [r3, #0]
 80194ec:	2b00      	cmp	r3, #0
 80194ee:	d10f      	bne.n	8019510 <tcp_timer_needed+0x2c>
 80194f0:	4b09      	ldr	r3, [pc, #36]	; (8019518 <tcp_timer_needed+0x34>)
 80194f2:	681b      	ldr	r3, [r3, #0]
 80194f4:	2b00      	cmp	r3, #0
 80194f6:	d103      	bne.n	8019500 <tcp_timer_needed+0x1c>
 80194f8:	4b08      	ldr	r3, [pc, #32]	; (801951c <tcp_timer_needed+0x38>)
 80194fa:	681b      	ldr	r3, [r3, #0]
 80194fc:	2b00      	cmp	r3, #0
 80194fe:	d007      	beq.n	8019510 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8019500:	4b04      	ldr	r3, [pc, #16]	; (8019514 <tcp_timer_needed+0x30>)
 8019502:	2201      	movs	r2, #1
 8019504:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8019506:	2200      	movs	r2, #0
 8019508:	4905      	ldr	r1, [pc, #20]	; (8019520 <tcp_timer_needed+0x3c>)
 801950a:	20fa      	movs	r0, #250	; 0xfa
 801950c:	f000 f8cc 	bl	80196a8 <sys_timeout>
  }
}
 8019510:	bf00      	nop
 8019512:	bd80      	pop	{r7, pc}
 8019514:	200240f8 	.word	0x200240f8
 8019518:	200240ac 	.word	0x200240ac
 801951c:	200240b0 	.word	0x200240b0
 8019520:	0801949d 	.word	0x0801949d

08019524 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8019524:	b580      	push	{r7, lr}
 8019526:	b086      	sub	sp, #24
 8019528:	af00      	add	r7, sp, #0
 801952a:	60f8      	str	r0, [r7, #12]
 801952c:	60b9      	str	r1, [r7, #8]
 801952e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8019530:	200a      	movs	r0, #10
 8019532:	f7f9 fcb7 	bl	8012ea4 <memp_malloc>
 8019536:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8019538:	693b      	ldr	r3, [r7, #16]
 801953a:	2b00      	cmp	r3, #0
 801953c:	d109      	bne.n	8019552 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 801953e:	693b      	ldr	r3, [r7, #16]
 8019540:	2b00      	cmp	r3, #0
 8019542:	d151      	bne.n	80195e8 <sys_timeout_abs+0xc4>
 8019544:	4b2a      	ldr	r3, [pc, #168]	; (80195f0 <sys_timeout_abs+0xcc>)
 8019546:	22be      	movs	r2, #190	; 0xbe
 8019548:	492a      	ldr	r1, [pc, #168]	; (80195f4 <sys_timeout_abs+0xd0>)
 801954a:	482b      	ldr	r0, [pc, #172]	; (80195f8 <sys_timeout_abs+0xd4>)
 801954c:	f004 fbf8 	bl	801dd40 <iprintf>
    return;
 8019550:	e04a      	b.n	80195e8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8019552:	693b      	ldr	r3, [r7, #16]
 8019554:	2200      	movs	r2, #0
 8019556:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8019558:	693b      	ldr	r3, [r7, #16]
 801955a:	68ba      	ldr	r2, [r7, #8]
 801955c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 801955e:	693b      	ldr	r3, [r7, #16]
 8019560:	687a      	ldr	r2, [r7, #4]
 8019562:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8019564:	693b      	ldr	r3, [r7, #16]
 8019566:	68fa      	ldr	r2, [r7, #12]
 8019568:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 801956a:	4b24      	ldr	r3, [pc, #144]	; (80195fc <sys_timeout_abs+0xd8>)
 801956c:	681b      	ldr	r3, [r3, #0]
 801956e:	2b00      	cmp	r3, #0
 8019570:	d103      	bne.n	801957a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8019572:	4a22      	ldr	r2, [pc, #136]	; (80195fc <sys_timeout_abs+0xd8>)
 8019574:	693b      	ldr	r3, [r7, #16]
 8019576:	6013      	str	r3, [r2, #0]
    return;
 8019578:	e037      	b.n	80195ea <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 801957a:	693b      	ldr	r3, [r7, #16]
 801957c:	685a      	ldr	r2, [r3, #4]
 801957e:	4b1f      	ldr	r3, [pc, #124]	; (80195fc <sys_timeout_abs+0xd8>)
 8019580:	681b      	ldr	r3, [r3, #0]
 8019582:	685b      	ldr	r3, [r3, #4]
 8019584:	1ad3      	subs	r3, r2, r3
 8019586:	0fdb      	lsrs	r3, r3, #31
 8019588:	f003 0301 	and.w	r3, r3, #1
 801958c:	b2db      	uxtb	r3, r3
 801958e:	2b00      	cmp	r3, #0
 8019590:	d007      	beq.n	80195a2 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8019592:	4b1a      	ldr	r3, [pc, #104]	; (80195fc <sys_timeout_abs+0xd8>)
 8019594:	681a      	ldr	r2, [r3, #0]
 8019596:	693b      	ldr	r3, [r7, #16]
 8019598:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 801959a:	4a18      	ldr	r2, [pc, #96]	; (80195fc <sys_timeout_abs+0xd8>)
 801959c:	693b      	ldr	r3, [r7, #16]
 801959e:	6013      	str	r3, [r2, #0]
 80195a0:	e023      	b.n	80195ea <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 80195a2:	4b16      	ldr	r3, [pc, #88]	; (80195fc <sys_timeout_abs+0xd8>)
 80195a4:	681b      	ldr	r3, [r3, #0]
 80195a6:	617b      	str	r3, [r7, #20]
 80195a8:	e01a      	b.n	80195e0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 80195aa:	697b      	ldr	r3, [r7, #20]
 80195ac:	681b      	ldr	r3, [r3, #0]
 80195ae:	2b00      	cmp	r3, #0
 80195b0:	d00b      	beq.n	80195ca <sys_timeout_abs+0xa6>
 80195b2:	693b      	ldr	r3, [r7, #16]
 80195b4:	685a      	ldr	r2, [r3, #4]
 80195b6:	697b      	ldr	r3, [r7, #20]
 80195b8:	681b      	ldr	r3, [r3, #0]
 80195ba:	685b      	ldr	r3, [r3, #4]
 80195bc:	1ad3      	subs	r3, r2, r3
 80195be:	0fdb      	lsrs	r3, r3, #31
 80195c0:	f003 0301 	and.w	r3, r3, #1
 80195c4:	b2db      	uxtb	r3, r3
 80195c6:	2b00      	cmp	r3, #0
 80195c8:	d007      	beq.n	80195da <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 80195ca:	697b      	ldr	r3, [r7, #20]
 80195cc:	681a      	ldr	r2, [r3, #0]
 80195ce:	693b      	ldr	r3, [r7, #16]
 80195d0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 80195d2:	697b      	ldr	r3, [r7, #20]
 80195d4:	693a      	ldr	r2, [r7, #16]
 80195d6:	601a      	str	r2, [r3, #0]
        break;
 80195d8:	e007      	b.n	80195ea <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 80195da:	697b      	ldr	r3, [r7, #20]
 80195dc:	681b      	ldr	r3, [r3, #0]
 80195de:	617b      	str	r3, [r7, #20]
 80195e0:	697b      	ldr	r3, [r7, #20]
 80195e2:	2b00      	cmp	r3, #0
 80195e4:	d1e1      	bne.n	80195aa <sys_timeout_abs+0x86>
 80195e6:	e000      	b.n	80195ea <sys_timeout_abs+0xc6>
    return;
 80195e8:	bf00      	nop
      }
    }
  }
}
 80195ea:	3718      	adds	r7, #24
 80195ec:	46bd      	mov	sp, r7
 80195ee:	bd80      	pop	{r7, pc}
 80195f0:	08020c98 	.word	0x08020c98
 80195f4:	08020ccc 	.word	0x08020ccc
 80195f8:	08020d0c 	.word	0x08020d0c
 80195fc:	200240f0 	.word	0x200240f0

08019600 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8019600:	b580      	push	{r7, lr}
 8019602:	b086      	sub	sp, #24
 8019604:	af00      	add	r7, sp, #0
 8019606:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8019608:	687b      	ldr	r3, [r7, #4]
 801960a:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 801960c:	697b      	ldr	r3, [r7, #20]
 801960e:	685b      	ldr	r3, [r3, #4]
 8019610:	4798      	blx	r3

  now = sys_now();
 8019612:	f7f5 fb33 	bl	800ec7c <sys_now>
 8019616:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8019618:	697b      	ldr	r3, [r7, #20]
 801961a:	681a      	ldr	r2, [r3, #0]
 801961c:	4b0f      	ldr	r3, [pc, #60]	; (801965c <lwip_cyclic_timer+0x5c>)
 801961e:	681b      	ldr	r3, [r3, #0]
 8019620:	4413      	add	r3, r2
 8019622:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8019624:	68fa      	ldr	r2, [r7, #12]
 8019626:	693b      	ldr	r3, [r7, #16]
 8019628:	1ad3      	subs	r3, r2, r3
 801962a:	0fdb      	lsrs	r3, r3, #31
 801962c:	f003 0301 	and.w	r3, r3, #1
 8019630:	b2db      	uxtb	r3, r3
 8019632:	2b00      	cmp	r3, #0
 8019634:	d009      	beq.n	801964a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8019636:	697b      	ldr	r3, [r7, #20]
 8019638:	681a      	ldr	r2, [r3, #0]
 801963a:	693b      	ldr	r3, [r7, #16]
 801963c:	4413      	add	r3, r2
 801963e:	687a      	ldr	r2, [r7, #4]
 8019640:	4907      	ldr	r1, [pc, #28]	; (8019660 <lwip_cyclic_timer+0x60>)
 8019642:	4618      	mov	r0, r3
 8019644:	f7ff ff6e 	bl	8019524 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8019648:	e004      	b.n	8019654 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 801964a:	687a      	ldr	r2, [r7, #4]
 801964c:	4904      	ldr	r1, [pc, #16]	; (8019660 <lwip_cyclic_timer+0x60>)
 801964e:	68f8      	ldr	r0, [r7, #12]
 8019650:	f7ff ff68 	bl	8019524 <sys_timeout_abs>
}
 8019654:	bf00      	nop
 8019656:	3718      	adds	r7, #24
 8019658:	46bd      	mov	sp, r7
 801965a:	bd80      	pop	{r7, pc}
 801965c:	200240f4 	.word	0x200240f4
 8019660:	08019601 	.word	0x08019601

08019664 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8019664:	b580      	push	{r7, lr}
 8019666:	b082      	sub	sp, #8
 8019668:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 801966a:	2301      	movs	r3, #1
 801966c:	607b      	str	r3, [r7, #4]
 801966e:	e00e      	b.n	801968e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8019670:	4a0b      	ldr	r2, [pc, #44]	; (80196a0 <sys_timeouts_init+0x3c>)
 8019672:	687b      	ldr	r3, [r7, #4]
 8019674:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8019678:	687b      	ldr	r3, [r7, #4]
 801967a:	00db      	lsls	r3, r3, #3
 801967c:	4a08      	ldr	r2, [pc, #32]	; (80196a0 <sys_timeouts_init+0x3c>)
 801967e:	4413      	add	r3, r2
 8019680:	461a      	mov	r2, r3
 8019682:	4908      	ldr	r1, [pc, #32]	; (80196a4 <sys_timeouts_init+0x40>)
 8019684:	f000 f810 	bl	80196a8 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8019688:	687b      	ldr	r3, [r7, #4]
 801968a:	3301      	adds	r3, #1
 801968c:	607b      	str	r3, [r7, #4]
 801968e:	687b      	ldr	r3, [r7, #4]
 8019690:	2b02      	cmp	r3, #2
 8019692:	d9ed      	bls.n	8019670 <sys_timeouts_init+0xc>
  }
}
 8019694:	bf00      	nop
 8019696:	bf00      	nop
 8019698:	3708      	adds	r7, #8
 801969a:	46bd      	mov	sp, r7
 801969c:	bd80      	pop	{r7, pc}
 801969e:	bf00      	nop
 80196a0:	080218f8 	.word	0x080218f8
 80196a4:	08019601 	.word	0x08019601

080196a8 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 80196a8:	b580      	push	{r7, lr}
 80196aa:	b086      	sub	sp, #24
 80196ac:	af00      	add	r7, sp, #0
 80196ae:	60f8      	str	r0, [r7, #12]
 80196b0:	60b9      	str	r1, [r7, #8]
 80196b2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 80196b4:	68fb      	ldr	r3, [r7, #12]
 80196b6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80196ba:	d306      	bcc.n	80196ca <sys_timeout+0x22>
 80196bc:	4b0a      	ldr	r3, [pc, #40]	; (80196e8 <sys_timeout+0x40>)
 80196be:	f240 1229 	movw	r2, #297	; 0x129
 80196c2:	490a      	ldr	r1, [pc, #40]	; (80196ec <sys_timeout+0x44>)
 80196c4:	480a      	ldr	r0, [pc, #40]	; (80196f0 <sys_timeout+0x48>)
 80196c6:	f004 fb3b 	bl	801dd40 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 80196ca:	f7f5 fad7 	bl	800ec7c <sys_now>
 80196ce:	4602      	mov	r2, r0
 80196d0:	68fb      	ldr	r3, [r7, #12]
 80196d2:	4413      	add	r3, r2
 80196d4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 80196d6:	687a      	ldr	r2, [r7, #4]
 80196d8:	68b9      	ldr	r1, [r7, #8]
 80196da:	6978      	ldr	r0, [r7, #20]
 80196dc:	f7ff ff22 	bl	8019524 <sys_timeout_abs>
#endif
}
 80196e0:	bf00      	nop
 80196e2:	3718      	adds	r7, #24
 80196e4:	46bd      	mov	sp, r7
 80196e6:	bd80      	pop	{r7, pc}
 80196e8:	08020c98 	.word	0x08020c98
 80196ec:	08020d34 	.word	0x08020d34
 80196f0:	08020d0c 	.word	0x08020d0c

080196f4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 80196f4:	b580      	push	{r7, lr}
 80196f6:	b084      	sub	sp, #16
 80196f8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 80196fa:	f7f5 fabf 	bl	800ec7c <sys_now>
 80196fe:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8019700:	4b17      	ldr	r3, [pc, #92]	; (8019760 <sys_check_timeouts+0x6c>)
 8019702:	681b      	ldr	r3, [r3, #0]
 8019704:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8019706:	68bb      	ldr	r3, [r7, #8]
 8019708:	2b00      	cmp	r3, #0
 801970a:	d022      	beq.n	8019752 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 801970c:	68bb      	ldr	r3, [r7, #8]
 801970e:	685b      	ldr	r3, [r3, #4]
 8019710:	68fa      	ldr	r2, [r7, #12]
 8019712:	1ad3      	subs	r3, r2, r3
 8019714:	0fdb      	lsrs	r3, r3, #31
 8019716:	f003 0301 	and.w	r3, r3, #1
 801971a:	b2db      	uxtb	r3, r3
 801971c:	2b00      	cmp	r3, #0
 801971e:	d11a      	bne.n	8019756 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8019720:	68bb      	ldr	r3, [r7, #8]
 8019722:	681b      	ldr	r3, [r3, #0]
 8019724:	4a0e      	ldr	r2, [pc, #56]	; (8019760 <sys_check_timeouts+0x6c>)
 8019726:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8019728:	68bb      	ldr	r3, [r7, #8]
 801972a:	689b      	ldr	r3, [r3, #8]
 801972c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 801972e:	68bb      	ldr	r3, [r7, #8]
 8019730:	68db      	ldr	r3, [r3, #12]
 8019732:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8019734:	68bb      	ldr	r3, [r7, #8]
 8019736:	685b      	ldr	r3, [r3, #4]
 8019738:	4a0a      	ldr	r2, [pc, #40]	; (8019764 <sys_check_timeouts+0x70>)
 801973a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 801973c:	68b9      	ldr	r1, [r7, #8]
 801973e:	200a      	movs	r0, #10
 8019740:	f7f9 fc26 	bl	8012f90 <memp_free>
    if (handler != NULL) {
 8019744:	687b      	ldr	r3, [r7, #4]
 8019746:	2b00      	cmp	r3, #0
 8019748:	d0da      	beq.n	8019700 <sys_check_timeouts+0xc>
      handler(arg);
 801974a:	687b      	ldr	r3, [r7, #4]
 801974c:	6838      	ldr	r0, [r7, #0]
 801974e:	4798      	blx	r3
  do {
 8019750:	e7d6      	b.n	8019700 <sys_check_timeouts+0xc>
      return;
 8019752:	bf00      	nop
 8019754:	e000      	b.n	8019758 <sys_check_timeouts+0x64>
      return;
 8019756:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8019758:	3710      	adds	r7, #16
 801975a:	46bd      	mov	sp, r7
 801975c:	bd80      	pop	{r7, pc}
 801975e:	bf00      	nop
 8019760:	200240f0 	.word	0x200240f0
 8019764:	200240f4 	.word	0x200240f4

08019768 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8019768:	b580      	push	{r7, lr}
 801976a:	b082      	sub	sp, #8
 801976c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 801976e:	4b16      	ldr	r3, [pc, #88]	; (80197c8 <sys_timeouts_sleeptime+0x60>)
 8019770:	681b      	ldr	r3, [r3, #0]
 8019772:	2b00      	cmp	r3, #0
 8019774:	d102      	bne.n	801977c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8019776:	f04f 33ff 	mov.w	r3, #4294967295
 801977a:	e020      	b.n	80197be <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 801977c:	f7f5 fa7e 	bl	800ec7c <sys_now>
 8019780:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8019782:	4b11      	ldr	r3, [pc, #68]	; (80197c8 <sys_timeouts_sleeptime+0x60>)
 8019784:	681b      	ldr	r3, [r3, #0]
 8019786:	685a      	ldr	r2, [r3, #4]
 8019788:	687b      	ldr	r3, [r7, #4]
 801978a:	1ad3      	subs	r3, r2, r3
 801978c:	0fdb      	lsrs	r3, r3, #31
 801978e:	f003 0301 	and.w	r3, r3, #1
 8019792:	b2db      	uxtb	r3, r3
 8019794:	2b00      	cmp	r3, #0
 8019796:	d001      	beq.n	801979c <sys_timeouts_sleeptime+0x34>
    return 0;
 8019798:	2300      	movs	r3, #0
 801979a:	e010      	b.n	80197be <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 801979c:	4b0a      	ldr	r3, [pc, #40]	; (80197c8 <sys_timeouts_sleeptime+0x60>)
 801979e:	681b      	ldr	r3, [r3, #0]
 80197a0:	685a      	ldr	r2, [r3, #4]
 80197a2:	687b      	ldr	r3, [r7, #4]
 80197a4:	1ad3      	subs	r3, r2, r3
 80197a6:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 80197a8:	683b      	ldr	r3, [r7, #0]
 80197aa:	2b00      	cmp	r3, #0
 80197ac:	da06      	bge.n	80197bc <sys_timeouts_sleeptime+0x54>
 80197ae:	4b07      	ldr	r3, [pc, #28]	; (80197cc <sys_timeouts_sleeptime+0x64>)
 80197b0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 80197b4:	4906      	ldr	r1, [pc, #24]	; (80197d0 <sys_timeouts_sleeptime+0x68>)
 80197b6:	4807      	ldr	r0, [pc, #28]	; (80197d4 <sys_timeouts_sleeptime+0x6c>)
 80197b8:	f004 fac2 	bl	801dd40 <iprintf>
    return ret;
 80197bc:	683b      	ldr	r3, [r7, #0]
  }
}
 80197be:	4618      	mov	r0, r3
 80197c0:	3708      	adds	r7, #8
 80197c2:	46bd      	mov	sp, r7
 80197c4:	bd80      	pop	{r7, pc}
 80197c6:	bf00      	nop
 80197c8:	200240f0 	.word	0x200240f0
 80197cc:	08020c98 	.word	0x08020c98
 80197d0:	08020d6c 	.word	0x08020d6c
 80197d4:	08020d0c 	.word	0x08020d0c

080197d8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 80197d8:	b580      	push	{r7, lr}
 80197da:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 80197dc:	f004 f9b0 	bl	801db40 <rand>
 80197e0:	4603      	mov	r3, r0
 80197e2:	b29b      	uxth	r3, r3
 80197e4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80197e8:	b29b      	uxth	r3, r3
 80197ea:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 80197ee:	b29a      	uxth	r2, r3
 80197f0:	4b01      	ldr	r3, [pc, #4]	; (80197f8 <udp_init+0x20>)
 80197f2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 80197f4:	bf00      	nop
 80197f6:	bd80      	pop	{r7, pc}
 80197f8:	2000002c 	.word	0x2000002c

080197fc <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 80197fc:	b480      	push	{r7}
 80197fe:	b083      	sub	sp, #12
 8019800:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8019802:	2300      	movs	r3, #0
 8019804:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8019806:	4b17      	ldr	r3, [pc, #92]	; (8019864 <udp_new_port+0x68>)
 8019808:	881b      	ldrh	r3, [r3, #0]
 801980a:	1c5a      	adds	r2, r3, #1
 801980c:	b291      	uxth	r1, r2
 801980e:	4a15      	ldr	r2, [pc, #84]	; (8019864 <udp_new_port+0x68>)
 8019810:	8011      	strh	r1, [r2, #0]
 8019812:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019816:	4293      	cmp	r3, r2
 8019818:	d103      	bne.n	8019822 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801981a:	4b12      	ldr	r3, [pc, #72]	; (8019864 <udp_new_port+0x68>)
 801981c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8019820:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019822:	4b11      	ldr	r3, [pc, #68]	; (8019868 <udp_new_port+0x6c>)
 8019824:	681b      	ldr	r3, [r3, #0]
 8019826:	603b      	str	r3, [r7, #0]
 8019828:	e011      	b.n	801984e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801982a:	683b      	ldr	r3, [r7, #0]
 801982c:	8a5a      	ldrh	r2, [r3, #18]
 801982e:	4b0d      	ldr	r3, [pc, #52]	; (8019864 <udp_new_port+0x68>)
 8019830:	881b      	ldrh	r3, [r3, #0]
 8019832:	429a      	cmp	r2, r3
 8019834:	d108      	bne.n	8019848 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8019836:	88fb      	ldrh	r3, [r7, #6]
 8019838:	3301      	adds	r3, #1
 801983a:	80fb      	strh	r3, [r7, #6]
 801983c:	88fb      	ldrh	r3, [r7, #6]
 801983e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8019842:	d3e0      	bcc.n	8019806 <udp_new_port+0xa>
        return 0;
 8019844:	2300      	movs	r3, #0
 8019846:	e007      	b.n	8019858 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019848:	683b      	ldr	r3, [r7, #0]
 801984a:	68db      	ldr	r3, [r3, #12]
 801984c:	603b      	str	r3, [r7, #0]
 801984e:	683b      	ldr	r3, [r7, #0]
 8019850:	2b00      	cmp	r3, #0
 8019852:	d1ea      	bne.n	801982a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8019854:	4b03      	ldr	r3, [pc, #12]	; (8019864 <udp_new_port+0x68>)
 8019856:	881b      	ldrh	r3, [r3, #0]
}
 8019858:	4618      	mov	r0, r3
 801985a:	370c      	adds	r7, #12
 801985c:	46bd      	mov	sp, r7
 801985e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019862:	4770      	bx	lr
 8019864:	2000002c 	.word	0x2000002c
 8019868:	200240fc 	.word	0x200240fc

0801986c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801986c:	b580      	push	{r7, lr}
 801986e:	b084      	sub	sp, #16
 8019870:	af00      	add	r7, sp, #0
 8019872:	60f8      	str	r0, [r7, #12]
 8019874:	60b9      	str	r1, [r7, #8]
 8019876:	4613      	mov	r3, r2
 8019878:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801987a:	68fb      	ldr	r3, [r7, #12]
 801987c:	2b00      	cmp	r3, #0
 801987e:	d105      	bne.n	801988c <udp_input_local_match+0x20>
 8019880:	4b27      	ldr	r3, [pc, #156]	; (8019920 <udp_input_local_match+0xb4>)
 8019882:	2287      	movs	r2, #135	; 0x87
 8019884:	4927      	ldr	r1, [pc, #156]	; (8019924 <udp_input_local_match+0xb8>)
 8019886:	4828      	ldr	r0, [pc, #160]	; (8019928 <udp_input_local_match+0xbc>)
 8019888:	f004 fa5a 	bl	801dd40 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801988c:	68bb      	ldr	r3, [r7, #8]
 801988e:	2b00      	cmp	r3, #0
 8019890:	d105      	bne.n	801989e <udp_input_local_match+0x32>
 8019892:	4b23      	ldr	r3, [pc, #140]	; (8019920 <udp_input_local_match+0xb4>)
 8019894:	2288      	movs	r2, #136	; 0x88
 8019896:	4925      	ldr	r1, [pc, #148]	; (801992c <udp_input_local_match+0xc0>)
 8019898:	4823      	ldr	r0, [pc, #140]	; (8019928 <udp_input_local_match+0xbc>)
 801989a:	f004 fa51 	bl	801dd40 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801989e:	68fb      	ldr	r3, [r7, #12]
 80198a0:	7a1b      	ldrb	r3, [r3, #8]
 80198a2:	2b00      	cmp	r3, #0
 80198a4:	d00b      	beq.n	80198be <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80198a6:	68fb      	ldr	r3, [r7, #12]
 80198a8:	7a1a      	ldrb	r2, [r3, #8]
 80198aa:	4b21      	ldr	r3, [pc, #132]	; (8019930 <udp_input_local_match+0xc4>)
 80198ac:	685b      	ldr	r3, [r3, #4]
 80198ae:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80198b2:	3301      	adds	r3, #1
 80198b4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80198b6:	429a      	cmp	r2, r3
 80198b8:	d001      	beq.n	80198be <udp_input_local_match+0x52>
    return 0;
 80198ba:	2300      	movs	r3, #0
 80198bc:	e02b      	b.n	8019916 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80198be:	79fb      	ldrb	r3, [r7, #7]
 80198c0:	2b00      	cmp	r3, #0
 80198c2:	d018      	beq.n	80198f6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80198c4:	68fb      	ldr	r3, [r7, #12]
 80198c6:	2b00      	cmp	r3, #0
 80198c8:	d013      	beq.n	80198f2 <udp_input_local_match+0x86>
 80198ca:	68fb      	ldr	r3, [r7, #12]
 80198cc:	681b      	ldr	r3, [r3, #0]
 80198ce:	2b00      	cmp	r3, #0
 80198d0:	d00f      	beq.n	80198f2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80198d2:	4b17      	ldr	r3, [pc, #92]	; (8019930 <udp_input_local_match+0xc4>)
 80198d4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80198d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80198da:	d00a      	beq.n	80198f2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80198dc:	68fb      	ldr	r3, [r7, #12]
 80198de:	681a      	ldr	r2, [r3, #0]
 80198e0:	4b13      	ldr	r3, [pc, #76]	; (8019930 <udp_input_local_match+0xc4>)
 80198e2:	695b      	ldr	r3, [r3, #20]
 80198e4:	405a      	eors	r2, r3
 80198e6:	68bb      	ldr	r3, [r7, #8]
 80198e8:	3308      	adds	r3, #8
 80198ea:	681b      	ldr	r3, [r3, #0]
 80198ec:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80198ee:	2b00      	cmp	r3, #0
 80198f0:	d110      	bne.n	8019914 <udp_input_local_match+0xa8>
          return 1;
 80198f2:	2301      	movs	r3, #1
 80198f4:	e00f      	b.n	8019916 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80198f6:	68fb      	ldr	r3, [r7, #12]
 80198f8:	2b00      	cmp	r3, #0
 80198fa:	d009      	beq.n	8019910 <udp_input_local_match+0xa4>
 80198fc:	68fb      	ldr	r3, [r7, #12]
 80198fe:	681b      	ldr	r3, [r3, #0]
 8019900:	2b00      	cmp	r3, #0
 8019902:	d005      	beq.n	8019910 <udp_input_local_match+0xa4>
 8019904:	68fb      	ldr	r3, [r7, #12]
 8019906:	681a      	ldr	r2, [r3, #0]
 8019908:	4b09      	ldr	r3, [pc, #36]	; (8019930 <udp_input_local_match+0xc4>)
 801990a:	695b      	ldr	r3, [r3, #20]
 801990c:	429a      	cmp	r2, r3
 801990e:	d101      	bne.n	8019914 <udp_input_local_match+0xa8>
        return 1;
 8019910:	2301      	movs	r3, #1
 8019912:	e000      	b.n	8019916 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8019914:	2300      	movs	r3, #0
}
 8019916:	4618      	mov	r0, r3
 8019918:	3710      	adds	r7, #16
 801991a:	46bd      	mov	sp, r7
 801991c:	bd80      	pop	{r7, pc}
 801991e:	bf00      	nop
 8019920:	08020d80 	.word	0x08020d80
 8019924:	08020db0 	.word	0x08020db0
 8019928:	08020dd4 	.word	0x08020dd4
 801992c:	08020dfc 	.word	0x08020dfc
 8019930:	2001e7bc 	.word	0x2001e7bc

08019934 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8019934:	b590      	push	{r4, r7, lr}
 8019936:	b08d      	sub	sp, #52	; 0x34
 8019938:	af02      	add	r7, sp, #8
 801993a:	6078      	str	r0, [r7, #4]
 801993c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801993e:	2300      	movs	r3, #0
 8019940:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8019942:	687b      	ldr	r3, [r7, #4]
 8019944:	2b00      	cmp	r3, #0
 8019946:	d105      	bne.n	8019954 <udp_input+0x20>
 8019948:	4b7c      	ldr	r3, [pc, #496]	; (8019b3c <udp_input+0x208>)
 801994a:	22cf      	movs	r2, #207	; 0xcf
 801994c:	497c      	ldr	r1, [pc, #496]	; (8019b40 <udp_input+0x20c>)
 801994e:	487d      	ldr	r0, [pc, #500]	; (8019b44 <udp_input+0x210>)
 8019950:	f004 f9f6 	bl	801dd40 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8019954:	683b      	ldr	r3, [r7, #0]
 8019956:	2b00      	cmp	r3, #0
 8019958:	d105      	bne.n	8019966 <udp_input+0x32>
 801995a:	4b78      	ldr	r3, [pc, #480]	; (8019b3c <udp_input+0x208>)
 801995c:	22d0      	movs	r2, #208	; 0xd0
 801995e:	497a      	ldr	r1, [pc, #488]	; (8019b48 <udp_input+0x214>)
 8019960:	4878      	ldr	r0, [pc, #480]	; (8019b44 <udp_input+0x210>)
 8019962:	f004 f9ed 	bl	801dd40 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8019966:	687b      	ldr	r3, [r7, #4]
 8019968:	895b      	ldrh	r3, [r3, #10]
 801996a:	2b07      	cmp	r3, #7
 801996c:	d803      	bhi.n	8019976 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801996e:	6878      	ldr	r0, [r7, #4]
 8019970:	f7fa f9b2 	bl	8013cd8 <pbuf_free>
    goto end;
 8019974:	e0de      	b.n	8019b34 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8019976:	687b      	ldr	r3, [r7, #4]
 8019978:	685b      	ldr	r3, [r3, #4]
 801997a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801997c:	4b73      	ldr	r3, [pc, #460]	; (8019b4c <udp_input+0x218>)
 801997e:	695b      	ldr	r3, [r3, #20]
 8019980:	4a72      	ldr	r2, [pc, #456]	; (8019b4c <udp_input+0x218>)
 8019982:	6812      	ldr	r2, [r2, #0]
 8019984:	4611      	mov	r1, r2
 8019986:	4618      	mov	r0, r3
 8019988:	f001 ff40 	bl	801b80c <ip4_addr_isbroadcast_u32>
 801998c:	4603      	mov	r3, r0
 801998e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8019990:	697b      	ldr	r3, [r7, #20]
 8019992:	881b      	ldrh	r3, [r3, #0]
 8019994:	b29b      	uxth	r3, r3
 8019996:	4618      	mov	r0, r3
 8019998:	f7f8 fd9c 	bl	80124d4 <lwip_htons>
 801999c:	4603      	mov	r3, r0
 801999e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 80199a0:	697b      	ldr	r3, [r7, #20]
 80199a2:	885b      	ldrh	r3, [r3, #2]
 80199a4:	b29b      	uxth	r3, r3
 80199a6:	4618      	mov	r0, r3
 80199a8:	f7f8 fd94 	bl	80124d4 <lwip_htons>
 80199ac:	4603      	mov	r3, r0
 80199ae:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80199b0:	2300      	movs	r3, #0
 80199b2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80199b4:	2300      	movs	r3, #0
 80199b6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80199b8:	2300      	movs	r3, #0
 80199ba:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80199bc:	4b64      	ldr	r3, [pc, #400]	; (8019b50 <udp_input+0x21c>)
 80199be:	681b      	ldr	r3, [r3, #0]
 80199c0:	627b      	str	r3, [r7, #36]	; 0x24
 80199c2:	e054      	b.n	8019a6e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80199c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199c6:	8a5b      	ldrh	r3, [r3, #18]
 80199c8:	89fa      	ldrh	r2, [r7, #14]
 80199ca:	429a      	cmp	r2, r3
 80199cc:	d14a      	bne.n	8019a64 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80199ce:	7cfb      	ldrb	r3, [r7, #19]
 80199d0:	461a      	mov	r2, r3
 80199d2:	6839      	ldr	r1, [r7, #0]
 80199d4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80199d6:	f7ff ff49 	bl	801986c <udp_input_local_match>
 80199da:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80199dc:	2b00      	cmp	r3, #0
 80199de:	d041      	beq.n	8019a64 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80199e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199e2:	7c1b      	ldrb	r3, [r3, #16]
 80199e4:	f003 0304 	and.w	r3, r3, #4
 80199e8:	2b00      	cmp	r3, #0
 80199ea:	d11d      	bne.n	8019a28 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80199ec:	69fb      	ldr	r3, [r7, #28]
 80199ee:	2b00      	cmp	r3, #0
 80199f0:	d102      	bne.n	80199f8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80199f2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80199f4:	61fb      	str	r3, [r7, #28]
 80199f6:	e017      	b.n	8019a28 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80199f8:	7cfb      	ldrb	r3, [r7, #19]
 80199fa:	2b00      	cmp	r3, #0
 80199fc:	d014      	beq.n	8019a28 <udp_input+0xf4>
 80199fe:	4b53      	ldr	r3, [pc, #332]	; (8019b4c <udp_input+0x218>)
 8019a00:	695b      	ldr	r3, [r3, #20]
 8019a02:	f1b3 3fff 	cmp.w	r3, #4294967295
 8019a06:	d10f      	bne.n	8019a28 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8019a08:	69fb      	ldr	r3, [r7, #28]
 8019a0a:	681a      	ldr	r2, [r3, #0]
 8019a0c:	683b      	ldr	r3, [r7, #0]
 8019a0e:	3304      	adds	r3, #4
 8019a10:	681b      	ldr	r3, [r3, #0]
 8019a12:	429a      	cmp	r2, r3
 8019a14:	d008      	beq.n	8019a28 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8019a16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a18:	681a      	ldr	r2, [r3, #0]
 8019a1a:	683b      	ldr	r3, [r7, #0]
 8019a1c:	3304      	adds	r3, #4
 8019a1e:	681b      	ldr	r3, [r3, #0]
 8019a20:	429a      	cmp	r2, r3
 8019a22:	d101      	bne.n	8019a28 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8019a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a26:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8019a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a2a:	8a9b      	ldrh	r3, [r3, #20]
 8019a2c:	8a3a      	ldrh	r2, [r7, #16]
 8019a2e:	429a      	cmp	r2, r3
 8019a30:	d118      	bne.n	8019a64 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8019a32:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a34:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8019a36:	2b00      	cmp	r3, #0
 8019a38:	d005      	beq.n	8019a46 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8019a3a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a3c:	685a      	ldr	r2, [r3, #4]
 8019a3e:	4b43      	ldr	r3, [pc, #268]	; (8019b4c <udp_input+0x218>)
 8019a40:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8019a42:	429a      	cmp	r2, r3
 8019a44:	d10e      	bne.n	8019a64 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8019a46:	6a3b      	ldr	r3, [r7, #32]
 8019a48:	2b00      	cmp	r3, #0
 8019a4a:	d014      	beq.n	8019a76 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8019a4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a4e:	68da      	ldr	r2, [r3, #12]
 8019a50:	6a3b      	ldr	r3, [r7, #32]
 8019a52:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8019a54:	4b3e      	ldr	r3, [pc, #248]	; (8019b50 <udp_input+0x21c>)
 8019a56:	681a      	ldr	r2, [r3, #0]
 8019a58:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a5a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8019a5c:	4a3c      	ldr	r2, [pc, #240]	; (8019b50 <udp_input+0x21c>)
 8019a5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a60:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8019a62:	e008      	b.n	8019a76 <udp_input+0x142>
      }
    }

    prev = pcb;
 8019a64:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a66:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019a68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a6a:	68db      	ldr	r3, [r3, #12]
 8019a6c:	627b      	str	r3, [r7, #36]	; 0x24
 8019a6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a70:	2b00      	cmp	r3, #0
 8019a72:	d1a7      	bne.n	80199c4 <udp_input+0x90>
 8019a74:	e000      	b.n	8019a78 <udp_input+0x144>
        break;
 8019a76:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8019a78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a7a:	2b00      	cmp	r3, #0
 8019a7c:	d101      	bne.n	8019a82 <udp_input+0x14e>
    pcb = uncon_pcb;
 8019a7e:	69fb      	ldr	r3, [r7, #28]
 8019a80:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8019a82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019a84:	2b00      	cmp	r3, #0
 8019a86:	d002      	beq.n	8019a8e <udp_input+0x15a>
    for_us = 1;
 8019a88:	2301      	movs	r3, #1
 8019a8a:	76fb      	strb	r3, [r7, #27]
 8019a8c:	e00a      	b.n	8019aa4 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8019a8e:	683b      	ldr	r3, [r7, #0]
 8019a90:	3304      	adds	r3, #4
 8019a92:	681a      	ldr	r2, [r3, #0]
 8019a94:	4b2d      	ldr	r3, [pc, #180]	; (8019b4c <udp_input+0x218>)
 8019a96:	695b      	ldr	r3, [r3, #20]
 8019a98:	429a      	cmp	r2, r3
 8019a9a:	bf0c      	ite	eq
 8019a9c:	2301      	moveq	r3, #1
 8019a9e:	2300      	movne	r3, #0
 8019aa0:	b2db      	uxtb	r3, r3
 8019aa2:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8019aa4:	7efb      	ldrb	r3, [r7, #27]
 8019aa6:	2b00      	cmp	r3, #0
 8019aa8:	d041      	beq.n	8019b2e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8019aaa:	2108      	movs	r1, #8
 8019aac:	6878      	ldr	r0, [r7, #4]
 8019aae:	f7fa f88d 	bl	8013bcc <pbuf_remove_header>
 8019ab2:	4603      	mov	r3, r0
 8019ab4:	2b00      	cmp	r3, #0
 8019ab6:	d00a      	beq.n	8019ace <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8019ab8:	4b20      	ldr	r3, [pc, #128]	; (8019b3c <udp_input+0x208>)
 8019aba:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8019abe:	4925      	ldr	r1, [pc, #148]	; (8019b54 <udp_input+0x220>)
 8019ac0:	4820      	ldr	r0, [pc, #128]	; (8019b44 <udp_input+0x210>)
 8019ac2:	f004 f93d 	bl	801dd40 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8019ac6:	6878      	ldr	r0, [r7, #4]
 8019ac8:	f7fa f906 	bl	8013cd8 <pbuf_free>
      goto end;
 8019acc:	e032      	b.n	8019b34 <udp_input+0x200>
    }

    if (pcb != NULL) {
 8019ace:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ad0:	2b00      	cmp	r3, #0
 8019ad2:	d012      	beq.n	8019afa <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8019ad4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ad6:	699b      	ldr	r3, [r3, #24]
 8019ad8:	2b00      	cmp	r3, #0
 8019ada:	d00a      	beq.n	8019af2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8019adc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ade:	699c      	ldr	r4, [r3, #24]
 8019ae0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019ae2:	69d8      	ldr	r0, [r3, #28]
 8019ae4:	8a3b      	ldrh	r3, [r7, #16]
 8019ae6:	9300      	str	r3, [sp, #0]
 8019ae8:	4b1b      	ldr	r3, [pc, #108]	; (8019b58 <udp_input+0x224>)
 8019aea:	687a      	ldr	r2, [r7, #4]
 8019aec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8019aee:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8019af0:	e021      	b.n	8019b36 <udp_input+0x202>
        pbuf_free(p);
 8019af2:	6878      	ldr	r0, [r7, #4]
 8019af4:	f7fa f8f0 	bl	8013cd8 <pbuf_free>
        goto end;
 8019af8:	e01c      	b.n	8019b34 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8019afa:	7cfb      	ldrb	r3, [r7, #19]
 8019afc:	2b00      	cmp	r3, #0
 8019afe:	d112      	bne.n	8019b26 <udp_input+0x1f2>
 8019b00:	4b12      	ldr	r3, [pc, #72]	; (8019b4c <udp_input+0x218>)
 8019b02:	695b      	ldr	r3, [r3, #20]
 8019b04:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8019b08:	2be0      	cmp	r3, #224	; 0xe0
 8019b0a:	d00c      	beq.n	8019b26 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8019b0c:	4b0f      	ldr	r3, [pc, #60]	; (8019b4c <udp_input+0x218>)
 8019b0e:	899b      	ldrh	r3, [r3, #12]
 8019b10:	3308      	adds	r3, #8
 8019b12:	b29b      	uxth	r3, r3
 8019b14:	b21b      	sxth	r3, r3
 8019b16:	4619      	mov	r1, r3
 8019b18:	6878      	ldr	r0, [r7, #4]
 8019b1a:	f7fa f8ca 	bl	8013cb2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8019b1e:	2103      	movs	r1, #3
 8019b20:	6878      	ldr	r0, [r7, #4]
 8019b22:	f001 fb53 	bl	801b1cc <icmp_dest_unreach>
      pbuf_free(p);
 8019b26:	6878      	ldr	r0, [r7, #4]
 8019b28:	f7fa f8d6 	bl	8013cd8 <pbuf_free>
  return;
 8019b2c:	e003      	b.n	8019b36 <udp_input+0x202>
    pbuf_free(p);
 8019b2e:	6878      	ldr	r0, [r7, #4]
 8019b30:	f7fa f8d2 	bl	8013cd8 <pbuf_free>
  return;
 8019b34:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8019b36:	372c      	adds	r7, #44	; 0x2c
 8019b38:	46bd      	mov	sp, r7
 8019b3a:	bd90      	pop	{r4, r7, pc}
 8019b3c:	08020d80 	.word	0x08020d80
 8019b40:	08020e24 	.word	0x08020e24
 8019b44:	08020dd4 	.word	0x08020dd4
 8019b48:	08020e3c 	.word	0x08020e3c
 8019b4c:	2001e7bc 	.word	0x2001e7bc
 8019b50:	200240fc 	.word	0x200240fc
 8019b54:	08020e58 	.word	0x08020e58
 8019b58:	2001e7cc 	.word	0x2001e7cc

08019b5c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 8019b5c:	b580      	push	{r7, lr}
 8019b5e:	b088      	sub	sp, #32
 8019b60:	af02      	add	r7, sp, #8
 8019b62:	60f8      	str	r0, [r7, #12]
 8019b64:	60b9      	str	r1, [r7, #8]
 8019b66:	607a      	str	r2, [r7, #4]
 8019b68:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 8019b6a:	68fb      	ldr	r3, [r7, #12]
 8019b6c:	2b00      	cmp	r3, #0
 8019b6e:	d109      	bne.n	8019b84 <udp_sendto+0x28>
 8019b70:	4b23      	ldr	r3, [pc, #140]	; (8019c00 <udp_sendto+0xa4>)
 8019b72:	f44f 7206 	mov.w	r2, #536	; 0x218
 8019b76:	4923      	ldr	r1, [pc, #140]	; (8019c04 <udp_sendto+0xa8>)
 8019b78:	4823      	ldr	r0, [pc, #140]	; (8019c08 <udp_sendto+0xac>)
 8019b7a:	f004 f8e1 	bl	801dd40 <iprintf>
 8019b7e:	f06f 030f 	mvn.w	r3, #15
 8019b82:	e038      	b.n	8019bf6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8019b84:	68bb      	ldr	r3, [r7, #8]
 8019b86:	2b00      	cmp	r3, #0
 8019b88:	d109      	bne.n	8019b9e <udp_sendto+0x42>
 8019b8a:	4b1d      	ldr	r3, [pc, #116]	; (8019c00 <udp_sendto+0xa4>)
 8019b8c:	f240 2219 	movw	r2, #537	; 0x219
 8019b90:	491e      	ldr	r1, [pc, #120]	; (8019c0c <udp_sendto+0xb0>)
 8019b92:	481d      	ldr	r0, [pc, #116]	; (8019c08 <udp_sendto+0xac>)
 8019b94:	f004 f8d4 	bl	801dd40 <iprintf>
 8019b98:	f06f 030f 	mvn.w	r3, #15
 8019b9c:	e02b      	b.n	8019bf6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8019b9e:	687b      	ldr	r3, [r7, #4]
 8019ba0:	2b00      	cmp	r3, #0
 8019ba2:	d109      	bne.n	8019bb8 <udp_sendto+0x5c>
 8019ba4:	4b16      	ldr	r3, [pc, #88]	; (8019c00 <udp_sendto+0xa4>)
 8019ba6:	f240 221a 	movw	r2, #538	; 0x21a
 8019baa:	4919      	ldr	r1, [pc, #100]	; (8019c10 <udp_sendto+0xb4>)
 8019bac:	4816      	ldr	r0, [pc, #88]	; (8019c08 <udp_sendto+0xac>)
 8019bae:	f004 f8c7 	bl	801dd40 <iprintf>
 8019bb2:	f06f 030f 	mvn.w	r3, #15
 8019bb6:	e01e      	b.n	8019bf6 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 8019bb8:	68fb      	ldr	r3, [r7, #12]
 8019bba:	7a1b      	ldrb	r3, [r3, #8]
 8019bbc:	2b00      	cmp	r3, #0
 8019bbe:	d006      	beq.n	8019bce <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 8019bc0:	68fb      	ldr	r3, [r7, #12]
 8019bc2:	7a1b      	ldrb	r3, [r3, #8]
 8019bc4:	4618      	mov	r0, r3
 8019bc6:	f7f9 fcf9 	bl	80135bc <netif_get_by_index>
 8019bca:	6178      	str	r0, [r7, #20]
 8019bcc:	e003      	b.n	8019bd6 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 8019bce:	6878      	ldr	r0, [r7, #4]
 8019bd0:	f001 fb86 	bl	801b2e0 <ip4_route>
 8019bd4:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 8019bd6:	697b      	ldr	r3, [r7, #20]
 8019bd8:	2b00      	cmp	r3, #0
 8019bda:	d102      	bne.n	8019be2 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 8019bdc:	f06f 0303 	mvn.w	r3, #3
 8019be0:	e009      	b.n	8019bf6 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 8019be2:	887a      	ldrh	r2, [r7, #2]
 8019be4:	697b      	ldr	r3, [r7, #20]
 8019be6:	9300      	str	r3, [sp, #0]
 8019be8:	4613      	mov	r3, r2
 8019bea:	687a      	ldr	r2, [r7, #4]
 8019bec:	68b9      	ldr	r1, [r7, #8]
 8019bee:	68f8      	ldr	r0, [r7, #12]
 8019bf0:	f000 f810 	bl	8019c14 <udp_sendto_if>
 8019bf4:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8019bf6:	4618      	mov	r0, r3
 8019bf8:	3718      	adds	r7, #24
 8019bfa:	46bd      	mov	sp, r7
 8019bfc:	bd80      	pop	{r7, pc}
 8019bfe:	bf00      	nop
 8019c00:	08020d80 	.word	0x08020d80
 8019c04:	08020ea4 	.word	0x08020ea4
 8019c08:	08020dd4 	.word	0x08020dd4
 8019c0c:	08020ebc 	.word	0x08020ebc
 8019c10:	08020ed8 	.word	0x08020ed8

08019c14 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8019c14:	b580      	push	{r7, lr}
 8019c16:	b088      	sub	sp, #32
 8019c18:	af02      	add	r7, sp, #8
 8019c1a:	60f8      	str	r0, [r7, #12]
 8019c1c:	60b9      	str	r1, [r7, #8]
 8019c1e:	607a      	str	r2, [r7, #4]
 8019c20:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8019c22:	68fb      	ldr	r3, [r7, #12]
 8019c24:	2b00      	cmp	r3, #0
 8019c26:	d109      	bne.n	8019c3c <udp_sendto_if+0x28>
 8019c28:	4b2e      	ldr	r3, [pc, #184]	; (8019ce4 <udp_sendto_if+0xd0>)
 8019c2a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019c2e:	492e      	ldr	r1, [pc, #184]	; (8019ce8 <udp_sendto_if+0xd4>)
 8019c30:	482e      	ldr	r0, [pc, #184]	; (8019cec <udp_sendto_if+0xd8>)
 8019c32:	f004 f885 	bl	801dd40 <iprintf>
 8019c36:	f06f 030f 	mvn.w	r3, #15
 8019c3a:	e04f      	b.n	8019cdc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 8019c3c:	68bb      	ldr	r3, [r7, #8]
 8019c3e:	2b00      	cmp	r3, #0
 8019c40:	d109      	bne.n	8019c56 <udp_sendto_if+0x42>
 8019c42:	4b28      	ldr	r3, [pc, #160]	; (8019ce4 <udp_sendto_if+0xd0>)
 8019c44:	f240 2281 	movw	r2, #641	; 0x281
 8019c48:	4929      	ldr	r1, [pc, #164]	; (8019cf0 <udp_sendto_if+0xdc>)
 8019c4a:	4828      	ldr	r0, [pc, #160]	; (8019cec <udp_sendto_if+0xd8>)
 8019c4c:	f004 f878 	bl	801dd40 <iprintf>
 8019c50:	f06f 030f 	mvn.w	r3, #15
 8019c54:	e042      	b.n	8019cdc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8019c56:	687b      	ldr	r3, [r7, #4]
 8019c58:	2b00      	cmp	r3, #0
 8019c5a:	d109      	bne.n	8019c70 <udp_sendto_if+0x5c>
 8019c5c:	4b21      	ldr	r3, [pc, #132]	; (8019ce4 <udp_sendto_if+0xd0>)
 8019c5e:	f240 2282 	movw	r2, #642	; 0x282
 8019c62:	4924      	ldr	r1, [pc, #144]	; (8019cf4 <udp_sendto_if+0xe0>)
 8019c64:	4821      	ldr	r0, [pc, #132]	; (8019cec <udp_sendto_if+0xd8>)
 8019c66:	f004 f86b 	bl	801dd40 <iprintf>
 8019c6a:	f06f 030f 	mvn.w	r3, #15
 8019c6e:	e035      	b.n	8019cdc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8019c70:	6a3b      	ldr	r3, [r7, #32]
 8019c72:	2b00      	cmp	r3, #0
 8019c74:	d109      	bne.n	8019c8a <udp_sendto_if+0x76>
 8019c76:	4b1b      	ldr	r3, [pc, #108]	; (8019ce4 <udp_sendto_if+0xd0>)
 8019c78:	f240 2283 	movw	r2, #643	; 0x283
 8019c7c:	491e      	ldr	r1, [pc, #120]	; (8019cf8 <udp_sendto_if+0xe4>)
 8019c7e:	481b      	ldr	r0, [pc, #108]	; (8019cec <udp_sendto_if+0xd8>)
 8019c80:	f004 f85e 	bl	801dd40 <iprintf>
 8019c84:	f06f 030f 	mvn.w	r3, #15
 8019c88:	e028      	b.n	8019cdc <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019c8a:	68fb      	ldr	r3, [r7, #12]
 8019c8c:	2b00      	cmp	r3, #0
 8019c8e:	d009      	beq.n	8019ca4 <udp_sendto_if+0x90>
 8019c90:	68fb      	ldr	r3, [r7, #12]
 8019c92:	681b      	ldr	r3, [r3, #0]
 8019c94:	2b00      	cmp	r3, #0
 8019c96:	d005      	beq.n	8019ca4 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8019c98:	68fb      	ldr	r3, [r7, #12]
 8019c9a:	681b      	ldr	r3, [r3, #0]
 8019c9c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019ca0:	2be0      	cmp	r3, #224	; 0xe0
 8019ca2:	d103      	bne.n	8019cac <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8019ca4:	6a3b      	ldr	r3, [r7, #32]
 8019ca6:	3304      	adds	r3, #4
 8019ca8:	617b      	str	r3, [r7, #20]
 8019caa:	e00b      	b.n	8019cc4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 8019cac:	68fb      	ldr	r3, [r7, #12]
 8019cae:	681a      	ldr	r2, [r3, #0]
 8019cb0:	6a3b      	ldr	r3, [r7, #32]
 8019cb2:	3304      	adds	r3, #4
 8019cb4:	681b      	ldr	r3, [r3, #0]
 8019cb6:	429a      	cmp	r2, r3
 8019cb8:	d002      	beq.n	8019cc0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 8019cba:	f06f 0303 	mvn.w	r3, #3
 8019cbe:	e00d      	b.n	8019cdc <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 8019cc0:	68fb      	ldr	r3, [r7, #12]
 8019cc2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 8019cc4:	887a      	ldrh	r2, [r7, #2]
 8019cc6:	697b      	ldr	r3, [r7, #20]
 8019cc8:	9301      	str	r3, [sp, #4]
 8019cca:	6a3b      	ldr	r3, [r7, #32]
 8019ccc:	9300      	str	r3, [sp, #0]
 8019cce:	4613      	mov	r3, r2
 8019cd0:	687a      	ldr	r2, [r7, #4]
 8019cd2:	68b9      	ldr	r1, [r7, #8]
 8019cd4:	68f8      	ldr	r0, [r7, #12]
 8019cd6:	f000 f811 	bl	8019cfc <udp_sendto_if_src>
 8019cda:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 8019cdc:	4618      	mov	r0, r3
 8019cde:	3718      	adds	r7, #24
 8019ce0:	46bd      	mov	sp, r7
 8019ce2:	bd80      	pop	{r7, pc}
 8019ce4:	08020d80 	.word	0x08020d80
 8019ce8:	08020ef4 	.word	0x08020ef4
 8019cec:	08020dd4 	.word	0x08020dd4
 8019cf0:	08020f10 	.word	0x08020f10
 8019cf4:	08020f2c 	.word	0x08020f2c
 8019cf8:	08020f4c 	.word	0x08020f4c

08019cfc <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 8019cfc:	b580      	push	{r7, lr}
 8019cfe:	b08c      	sub	sp, #48	; 0x30
 8019d00:	af04      	add	r7, sp, #16
 8019d02:	60f8      	str	r0, [r7, #12]
 8019d04:	60b9      	str	r1, [r7, #8]
 8019d06:	607a      	str	r2, [r7, #4]
 8019d08:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 8019d0a:	68fb      	ldr	r3, [r7, #12]
 8019d0c:	2b00      	cmp	r3, #0
 8019d0e:	d109      	bne.n	8019d24 <udp_sendto_if_src+0x28>
 8019d10:	4b65      	ldr	r3, [pc, #404]	; (8019ea8 <udp_sendto_if_src+0x1ac>)
 8019d12:	f240 22d1 	movw	r2, #721	; 0x2d1
 8019d16:	4965      	ldr	r1, [pc, #404]	; (8019eac <udp_sendto_if_src+0x1b0>)
 8019d18:	4865      	ldr	r0, [pc, #404]	; (8019eb0 <udp_sendto_if_src+0x1b4>)
 8019d1a:	f004 f811 	bl	801dd40 <iprintf>
 8019d1e:	f06f 030f 	mvn.w	r3, #15
 8019d22:	e0bc      	b.n	8019e9e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8019d24:	68bb      	ldr	r3, [r7, #8]
 8019d26:	2b00      	cmp	r3, #0
 8019d28:	d109      	bne.n	8019d3e <udp_sendto_if_src+0x42>
 8019d2a:	4b5f      	ldr	r3, [pc, #380]	; (8019ea8 <udp_sendto_if_src+0x1ac>)
 8019d2c:	f240 22d2 	movw	r2, #722	; 0x2d2
 8019d30:	4960      	ldr	r1, [pc, #384]	; (8019eb4 <udp_sendto_if_src+0x1b8>)
 8019d32:	485f      	ldr	r0, [pc, #380]	; (8019eb0 <udp_sendto_if_src+0x1b4>)
 8019d34:	f004 f804 	bl	801dd40 <iprintf>
 8019d38:	f06f 030f 	mvn.w	r3, #15
 8019d3c:	e0af      	b.n	8019e9e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8019d3e:	687b      	ldr	r3, [r7, #4]
 8019d40:	2b00      	cmp	r3, #0
 8019d42:	d109      	bne.n	8019d58 <udp_sendto_if_src+0x5c>
 8019d44:	4b58      	ldr	r3, [pc, #352]	; (8019ea8 <udp_sendto_if_src+0x1ac>)
 8019d46:	f240 22d3 	movw	r2, #723	; 0x2d3
 8019d4a:	495b      	ldr	r1, [pc, #364]	; (8019eb8 <udp_sendto_if_src+0x1bc>)
 8019d4c:	4858      	ldr	r0, [pc, #352]	; (8019eb0 <udp_sendto_if_src+0x1b4>)
 8019d4e:	f003 fff7 	bl	801dd40 <iprintf>
 8019d52:	f06f 030f 	mvn.w	r3, #15
 8019d56:	e0a2      	b.n	8019e9e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8019d58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8019d5a:	2b00      	cmp	r3, #0
 8019d5c:	d109      	bne.n	8019d72 <udp_sendto_if_src+0x76>
 8019d5e:	4b52      	ldr	r3, [pc, #328]	; (8019ea8 <udp_sendto_if_src+0x1ac>)
 8019d60:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8019d64:	4955      	ldr	r1, [pc, #340]	; (8019ebc <udp_sendto_if_src+0x1c0>)
 8019d66:	4852      	ldr	r0, [pc, #328]	; (8019eb0 <udp_sendto_if_src+0x1b4>)
 8019d68:	f003 ffea 	bl	801dd40 <iprintf>
 8019d6c:	f06f 030f 	mvn.w	r3, #15
 8019d70:	e095      	b.n	8019e9e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8019d72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019d74:	2b00      	cmp	r3, #0
 8019d76:	d109      	bne.n	8019d8c <udp_sendto_if_src+0x90>
 8019d78:	4b4b      	ldr	r3, [pc, #300]	; (8019ea8 <udp_sendto_if_src+0x1ac>)
 8019d7a:	f240 22d5 	movw	r2, #725	; 0x2d5
 8019d7e:	4950      	ldr	r1, [pc, #320]	; (8019ec0 <udp_sendto_if_src+0x1c4>)
 8019d80:	484b      	ldr	r0, [pc, #300]	; (8019eb0 <udp_sendto_if_src+0x1b4>)
 8019d82:	f003 ffdd 	bl	801dd40 <iprintf>
 8019d86:	f06f 030f 	mvn.w	r3, #15
 8019d8a:	e088      	b.n	8019e9e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 8019d8c:	68fb      	ldr	r3, [r7, #12]
 8019d8e:	8a5b      	ldrh	r3, [r3, #18]
 8019d90:	2b00      	cmp	r3, #0
 8019d92:	d10f      	bne.n	8019db4 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8019d94:	68f9      	ldr	r1, [r7, #12]
 8019d96:	68fb      	ldr	r3, [r7, #12]
 8019d98:	8a5b      	ldrh	r3, [r3, #18]
 8019d9a:	461a      	mov	r2, r3
 8019d9c:	68f8      	ldr	r0, [r7, #12]
 8019d9e:	f000 f893 	bl	8019ec8 <udp_bind>
 8019da2:	4603      	mov	r3, r0
 8019da4:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8019da6:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8019daa:	2b00      	cmp	r3, #0
 8019dac:	d002      	beq.n	8019db4 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 8019dae:	f997 301b 	ldrsb.w	r3, [r7, #27]
 8019db2:	e074      	b.n	8019e9e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 8019db4:	68bb      	ldr	r3, [r7, #8]
 8019db6:	891b      	ldrh	r3, [r3, #8]
 8019db8:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 8019dbc:	4293      	cmp	r3, r2
 8019dbe:	d902      	bls.n	8019dc6 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 8019dc0:	f04f 33ff 	mov.w	r3, #4294967295
 8019dc4:	e06b      	b.n	8019e9e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 8019dc6:	2108      	movs	r1, #8
 8019dc8:	68b8      	ldr	r0, [r7, #8]
 8019dca:	f7f9 feef 	bl	8013bac <pbuf_add_header>
 8019dce:	4603      	mov	r3, r0
 8019dd0:	2b00      	cmp	r3, #0
 8019dd2:	d015      	beq.n	8019e00 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 8019dd4:	f44f 7220 	mov.w	r2, #640	; 0x280
 8019dd8:	2108      	movs	r1, #8
 8019dda:	2022      	movs	r0, #34	; 0x22
 8019ddc:	f7f9 fc98 	bl	8013710 <pbuf_alloc>
 8019de0:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 8019de2:	69fb      	ldr	r3, [r7, #28]
 8019de4:	2b00      	cmp	r3, #0
 8019de6:	d102      	bne.n	8019dee <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 8019de8:	f04f 33ff 	mov.w	r3, #4294967295
 8019dec:	e057      	b.n	8019e9e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 8019dee:	68bb      	ldr	r3, [r7, #8]
 8019df0:	891b      	ldrh	r3, [r3, #8]
 8019df2:	2b00      	cmp	r3, #0
 8019df4:	d006      	beq.n	8019e04 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 8019df6:	68b9      	ldr	r1, [r7, #8]
 8019df8:	69f8      	ldr	r0, [r7, #28]
 8019dfa:	f7fa f891 	bl	8013f20 <pbuf_chain>
 8019dfe:	e001      	b.n	8019e04 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 8019e00:	68bb      	ldr	r3, [r7, #8]
 8019e02:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 8019e04:	69fb      	ldr	r3, [r7, #28]
 8019e06:	895b      	ldrh	r3, [r3, #10]
 8019e08:	2b07      	cmp	r3, #7
 8019e0a:	d806      	bhi.n	8019e1a <udp_sendto_if_src+0x11e>
 8019e0c:	4b26      	ldr	r3, [pc, #152]	; (8019ea8 <udp_sendto_if_src+0x1ac>)
 8019e0e:	f240 320d 	movw	r2, #781	; 0x30d
 8019e12:	492c      	ldr	r1, [pc, #176]	; (8019ec4 <udp_sendto_if_src+0x1c8>)
 8019e14:	4826      	ldr	r0, [pc, #152]	; (8019eb0 <udp_sendto_if_src+0x1b4>)
 8019e16:	f003 ff93 	bl	801dd40 <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 8019e1a:	69fb      	ldr	r3, [r7, #28]
 8019e1c:	685b      	ldr	r3, [r3, #4]
 8019e1e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8019e20:	68fb      	ldr	r3, [r7, #12]
 8019e22:	8a5b      	ldrh	r3, [r3, #18]
 8019e24:	4618      	mov	r0, r3
 8019e26:	f7f8 fb55 	bl	80124d4 <lwip_htons>
 8019e2a:	4603      	mov	r3, r0
 8019e2c:	461a      	mov	r2, r3
 8019e2e:	697b      	ldr	r3, [r7, #20]
 8019e30:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8019e32:	887b      	ldrh	r3, [r7, #2]
 8019e34:	4618      	mov	r0, r3
 8019e36:	f7f8 fb4d 	bl	80124d4 <lwip_htons>
 8019e3a:	4603      	mov	r3, r0
 8019e3c:	461a      	mov	r2, r3
 8019e3e:	697b      	ldr	r3, [r7, #20]
 8019e40:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8019e42:	697b      	ldr	r3, [r7, #20]
 8019e44:	2200      	movs	r2, #0
 8019e46:	719a      	strb	r2, [r3, #6]
 8019e48:	2200      	movs	r2, #0
 8019e4a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 8019e4c:	69fb      	ldr	r3, [r7, #28]
 8019e4e:	891b      	ldrh	r3, [r3, #8]
 8019e50:	4618      	mov	r0, r3
 8019e52:	f7f8 fb3f 	bl	80124d4 <lwip_htons>
 8019e56:	4603      	mov	r3, r0
 8019e58:	461a      	mov	r2, r3
 8019e5a:	697b      	ldr	r3, [r7, #20]
 8019e5c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 8019e5e:	2311      	movs	r3, #17
 8019e60:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8019e62:	68fb      	ldr	r3, [r7, #12]
 8019e64:	7adb      	ldrb	r3, [r3, #11]
 8019e66:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8019e68:	68fb      	ldr	r3, [r7, #12]
 8019e6a:	7a9b      	ldrb	r3, [r3, #10]
 8019e6c:	7cb9      	ldrb	r1, [r7, #18]
 8019e6e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019e70:	9202      	str	r2, [sp, #8]
 8019e72:	7cfa      	ldrb	r2, [r7, #19]
 8019e74:	9201      	str	r2, [sp, #4]
 8019e76:	9300      	str	r3, [sp, #0]
 8019e78:	460b      	mov	r3, r1
 8019e7a:	687a      	ldr	r2, [r7, #4]
 8019e7c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8019e7e:	69f8      	ldr	r0, [r7, #28]
 8019e80:	f001 fc16 	bl	801b6b0 <ip4_output_if_src>
 8019e84:	4603      	mov	r3, r0
 8019e86:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8019e88:	69fa      	ldr	r2, [r7, #28]
 8019e8a:	68bb      	ldr	r3, [r7, #8]
 8019e8c:	429a      	cmp	r2, r3
 8019e8e:	d004      	beq.n	8019e9a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8019e90:	69f8      	ldr	r0, [r7, #28]
 8019e92:	f7f9 ff21 	bl	8013cd8 <pbuf_free>
    q = NULL;
 8019e96:	2300      	movs	r3, #0
 8019e98:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 8019e9a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 8019e9e:	4618      	mov	r0, r3
 8019ea0:	3720      	adds	r7, #32
 8019ea2:	46bd      	mov	sp, r7
 8019ea4:	bd80      	pop	{r7, pc}
 8019ea6:	bf00      	nop
 8019ea8:	08020d80 	.word	0x08020d80
 8019eac:	08020f6c 	.word	0x08020f6c
 8019eb0:	08020dd4 	.word	0x08020dd4
 8019eb4:	08020f8c 	.word	0x08020f8c
 8019eb8:	08020fac 	.word	0x08020fac
 8019ebc:	08020fd0 	.word	0x08020fd0
 8019ec0:	08020ff4 	.word	0x08020ff4
 8019ec4:	08021018 	.word	0x08021018

08019ec8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8019ec8:	b580      	push	{r7, lr}
 8019eca:	b086      	sub	sp, #24
 8019ecc:	af00      	add	r7, sp, #0
 8019ece:	60f8      	str	r0, [r7, #12]
 8019ed0:	60b9      	str	r1, [r7, #8]
 8019ed2:	4613      	mov	r3, r2
 8019ed4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8019ed6:	68bb      	ldr	r3, [r7, #8]
 8019ed8:	2b00      	cmp	r3, #0
 8019eda:	d101      	bne.n	8019ee0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8019edc:	4b39      	ldr	r3, [pc, #228]	; (8019fc4 <udp_bind+0xfc>)
 8019ede:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8019ee0:	68fb      	ldr	r3, [r7, #12]
 8019ee2:	2b00      	cmp	r3, #0
 8019ee4:	d109      	bne.n	8019efa <udp_bind+0x32>
 8019ee6:	4b38      	ldr	r3, [pc, #224]	; (8019fc8 <udp_bind+0x100>)
 8019ee8:	f240 32b7 	movw	r2, #951	; 0x3b7
 8019eec:	4937      	ldr	r1, [pc, #220]	; (8019fcc <udp_bind+0x104>)
 8019eee:	4838      	ldr	r0, [pc, #224]	; (8019fd0 <udp_bind+0x108>)
 8019ef0:	f003 ff26 	bl	801dd40 <iprintf>
 8019ef4:	f06f 030f 	mvn.w	r3, #15
 8019ef8:	e060      	b.n	8019fbc <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8019efa:	2300      	movs	r3, #0
 8019efc:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019efe:	4b35      	ldr	r3, [pc, #212]	; (8019fd4 <udp_bind+0x10c>)
 8019f00:	681b      	ldr	r3, [r3, #0]
 8019f02:	617b      	str	r3, [r7, #20]
 8019f04:	e009      	b.n	8019f1a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8019f06:	68fa      	ldr	r2, [r7, #12]
 8019f08:	697b      	ldr	r3, [r7, #20]
 8019f0a:	429a      	cmp	r2, r3
 8019f0c:	d102      	bne.n	8019f14 <udp_bind+0x4c>
      rebind = 1;
 8019f0e:	2301      	movs	r3, #1
 8019f10:	74fb      	strb	r3, [r7, #19]
      break;
 8019f12:	e005      	b.n	8019f20 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019f14:	697b      	ldr	r3, [r7, #20]
 8019f16:	68db      	ldr	r3, [r3, #12]
 8019f18:	617b      	str	r3, [r7, #20]
 8019f1a:	697b      	ldr	r3, [r7, #20]
 8019f1c:	2b00      	cmp	r3, #0
 8019f1e:	d1f2      	bne.n	8019f06 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8019f20:	88fb      	ldrh	r3, [r7, #6]
 8019f22:	2b00      	cmp	r3, #0
 8019f24:	d109      	bne.n	8019f3a <udp_bind+0x72>
    port = udp_new_port();
 8019f26:	f7ff fc69 	bl	80197fc <udp_new_port>
 8019f2a:	4603      	mov	r3, r0
 8019f2c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 8019f2e:	88fb      	ldrh	r3, [r7, #6]
 8019f30:	2b00      	cmp	r3, #0
 8019f32:	d12c      	bne.n	8019f8e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8019f34:	f06f 0307 	mvn.w	r3, #7
 8019f38:	e040      	b.n	8019fbc <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019f3a:	4b26      	ldr	r3, [pc, #152]	; (8019fd4 <udp_bind+0x10c>)
 8019f3c:	681b      	ldr	r3, [r3, #0]
 8019f3e:	617b      	str	r3, [r7, #20]
 8019f40:	e022      	b.n	8019f88 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8019f42:	68fa      	ldr	r2, [r7, #12]
 8019f44:	697b      	ldr	r3, [r7, #20]
 8019f46:	429a      	cmp	r2, r3
 8019f48:	d01b      	beq.n	8019f82 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8019f4a:	697b      	ldr	r3, [r7, #20]
 8019f4c:	8a5b      	ldrh	r3, [r3, #18]
 8019f4e:	88fa      	ldrh	r2, [r7, #6]
 8019f50:	429a      	cmp	r2, r3
 8019f52:	d116      	bne.n	8019f82 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019f54:	697b      	ldr	r3, [r7, #20]
 8019f56:	681a      	ldr	r2, [r3, #0]
 8019f58:	68bb      	ldr	r3, [r7, #8]
 8019f5a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8019f5c:	429a      	cmp	r2, r3
 8019f5e:	d00d      	beq.n	8019f7c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019f60:	68bb      	ldr	r3, [r7, #8]
 8019f62:	2b00      	cmp	r3, #0
 8019f64:	d00a      	beq.n	8019f7c <udp_bind+0xb4>
 8019f66:	68bb      	ldr	r3, [r7, #8]
 8019f68:	681b      	ldr	r3, [r3, #0]
 8019f6a:	2b00      	cmp	r3, #0
 8019f6c:	d006      	beq.n	8019f7c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8019f6e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019f70:	2b00      	cmp	r3, #0
 8019f72:	d003      	beq.n	8019f7c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8019f74:	697b      	ldr	r3, [r7, #20]
 8019f76:	681b      	ldr	r3, [r3, #0]
 8019f78:	2b00      	cmp	r3, #0
 8019f7a:	d102      	bne.n	8019f82 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8019f7c:	f06f 0307 	mvn.w	r3, #7
 8019f80:	e01c      	b.n	8019fbc <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019f82:	697b      	ldr	r3, [r7, #20]
 8019f84:	68db      	ldr	r3, [r3, #12]
 8019f86:	617b      	str	r3, [r7, #20]
 8019f88:	697b      	ldr	r3, [r7, #20]
 8019f8a:	2b00      	cmp	r3, #0
 8019f8c:	d1d9      	bne.n	8019f42 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 8019f8e:	68bb      	ldr	r3, [r7, #8]
 8019f90:	2b00      	cmp	r3, #0
 8019f92:	d002      	beq.n	8019f9a <udp_bind+0xd2>
 8019f94:	68bb      	ldr	r3, [r7, #8]
 8019f96:	681b      	ldr	r3, [r3, #0]
 8019f98:	e000      	b.n	8019f9c <udp_bind+0xd4>
 8019f9a:	2300      	movs	r3, #0
 8019f9c:	68fa      	ldr	r2, [r7, #12]
 8019f9e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8019fa0:	68fb      	ldr	r3, [r7, #12]
 8019fa2:	88fa      	ldrh	r2, [r7, #6]
 8019fa4:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8019fa6:	7cfb      	ldrb	r3, [r7, #19]
 8019fa8:	2b00      	cmp	r3, #0
 8019faa:	d106      	bne.n	8019fba <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 8019fac:	4b09      	ldr	r3, [pc, #36]	; (8019fd4 <udp_bind+0x10c>)
 8019fae:	681a      	ldr	r2, [r3, #0]
 8019fb0:	68fb      	ldr	r3, [r7, #12]
 8019fb2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 8019fb4:	4a07      	ldr	r2, [pc, #28]	; (8019fd4 <udp_bind+0x10c>)
 8019fb6:	68fb      	ldr	r3, [r7, #12]
 8019fb8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 8019fba:	2300      	movs	r3, #0
}
 8019fbc:	4618      	mov	r0, r3
 8019fbe:	3718      	adds	r7, #24
 8019fc0:	46bd      	mov	sp, r7
 8019fc2:	bd80      	pop	{r7, pc}
 8019fc4:	08021910 	.word	0x08021910
 8019fc8:	08020d80 	.word	0x08020d80
 8019fcc:	08021048 	.word	0x08021048
 8019fd0:	08020dd4 	.word	0x08020dd4
 8019fd4:	200240fc 	.word	0x200240fc

08019fd8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 8019fd8:	b580      	push	{r7, lr}
 8019fda:	b084      	sub	sp, #16
 8019fdc:	af00      	add	r7, sp, #0
 8019fde:	60f8      	str	r0, [r7, #12]
 8019fe0:	60b9      	str	r1, [r7, #8]
 8019fe2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 8019fe4:	68fb      	ldr	r3, [r7, #12]
 8019fe6:	2b00      	cmp	r3, #0
 8019fe8:	d107      	bne.n	8019ffa <udp_recv+0x22>
 8019fea:	4b08      	ldr	r3, [pc, #32]	; (801a00c <udp_recv+0x34>)
 8019fec:	f240 428a 	movw	r2, #1162	; 0x48a
 8019ff0:	4907      	ldr	r1, [pc, #28]	; (801a010 <udp_recv+0x38>)
 8019ff2:	4808      	ldr	r0, [pc, #32]	; (801a014 <udp_recv+0x3c>)
 8019ff4:	f003 fea4 	bl	801dd40 <iprintf>
 8019ff8:	e005      	b.n	801a006 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 8019ffa:	68fb      	ldr	r3, [r7, #12]
 8019ffc:	68ba      	ldr	r2, [r7, #8]
 8019ffe:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 801a000:	68fb      	ldr	r3, [r7, #12]
 801a002:	687a      	ldr	r2, [r7, #4]
 801a004:	61da      	str	r2, [r3, #28]
}
 801a006:	3710      	adds	r7, #16
 801a008:	46bd      	mov	sp, r7
 801a00a:	bd80      	pop	{r7, pc}
 801a00c:	08020d80 	.word	0x08020d80
 801a010:	080210b4 	.word	0x080210b4
 801a014:	08020dd4 	.word	0x08020dd4

0801a018 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 801a018:	b580      	push	{r7, lr}
 801a01a:	b084      	sub	sp, #16
 801a01c:	af00      	add	r7, sp, #0
 801a01e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 801a020:	687b      	ldr	r3, [r7, #4]
 801a022:	2b00      	cmp	r3, #0
 801a024:	d107      	bne.n	801a036 <udp_remove+0x1e>
 801a026:	4b19      	ldr	r3, [pc, #100]	; (801a08c <udp_remove+0x74>)
 801a028:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801a02c:	4918      	ldr	r1, [pc, #96]	; (801a090 <udp_remove+0x78>)
 801a02e:	4819      	ldr	r0, [pc, #100]	; (801a094 <udp_remove+0x7c>)
 801a030:	f003 fe86 	bl	801dd40 <iprintf>
 801a034:	e026      	b.n	801a084 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801a036:	4b18      	ldr	r3, [pc, #96]	; (801a098 <udp_remove+0x80>)
 801a038:	681b      	ldr	r3, [r3, #0]
 801a03a:	687a      	ldr	r2, [r7, #4]
 801a03c:	429a      	cmp	r2, r3
 801a03e:	d105      	bne.n	801a04c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 801a040:	4b15      	ldr	r3, [pc, #84]	; (801a098 <udp_remove+0x80>)
 801a042:	681b      	ldr	r3, [r3, #0]
 801a044:	68db      	ldr	r3, [r3, #12]
 801a046:	4a14      	ldr	r2, [pc, #80]	; (801a098 <udp_remove+0x80>)
 801a048:	6013      	str	r3, [r2, #0]
 801a04a:	e017      	b.n	801a07c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801a04c:	4b12      	ldr	r3, [pc, #72]	; (801a098 <udp_remove+0x80>)
 801a04e:	681b      	ldr	r3, [r3, #0]
 801a050:	60fb      	str	r3, [r7, #12]
 801a052:	e010      	b.n	801a076 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801a054:	68fb      	ldr	r3, [r7, #12]
 801a056:	68db      	ldr	r3, [r3, #12]
 801a058:	2b00      	cmp	r3, #0
 801a05a:	d009      	beq.n	801a070 <udp_remove+0x58>
 801a05c:	68fb      	ldr	r3, [r7, #12]
 801a05e:	68db      	ldr	r3, [r3, #12]
 801a060:	687a      	ldr	r2, [r7, #4]
 801a062:	429a      	cmp	r2, r3
 801a064:	d104      	bne.n	801a070 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801a066:	687b      	ldr	r3, [r7, #4]
 801a068:	68da      	ldr	r2, [r3, #12]
 801a06a:	68fb      	ldr	r3, [r7, #12]
 801a06c:	60da      	str	r2, [r3, #12]
        break;
 801a06e:	e005      	b.n	801a07c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801a070:	68fb      	ldr	r3, [r7, #12]
 801a072:	68db      	ldr	r3, [r3, #12]
 801a074:	60fb      	str	r3, [r7, #12]
 801a076:	68fb      	ldr	r3, [r7, #12]
 801a078:	2b00      	cmp	r3, #0
 801a07a:	d1eb      	bne.n	801a054 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801a07c:	6879      	ldr	r1, [r7, #4]
 801a07e:	2000      	movs	r0, #0
 801a080:	f7f8 ff86 	bl	8012f90 <memp_free>
}
 801a084:	3710      	adds	r7, #16
 801a086:	46bd      	mov	sp, r7
 801a088:	bd80      	pop	{r7, pc}
 801a08a:	bf00      	nop
 801a08c:	08020d80 	.word	0x08020d80
 801a090:	080210cc 	.word	0x080210cc
 801a094:	08020dd4 	.word	0x08020dd4
 801a098:	200240fc 	.word	0x200240fc

0801a09c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801a09c:	b580      	push	{r7, lr}
 801a09e:	b082      	sub	sp, #8
 801a0a0:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801a0a2:	2000      	movs	r0, #0
 801a0a4:	f7f8 fefe 	bl	8012ea4 <memp_malloc>
 801a0a8:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801a0aa:	687b      	ldr	r3, [r7, #4]
 801a0ac:	2b00      	cmp	r3, #0
 801a0ae:	d007      	beq.n	801a0c0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 801a0b0:	2220      	movs	r2, #32
 801a0b2:	2100      	movs	r1, #0
 801a0b4:	6878      	ldr	r0, [r7, #4]
 801a0b6:	f003 fea8 	bl	801de0a <memset>
    pcb->ttl = UDP_TTL;
 801a0ba:	687b      	ldr	r3, [r7, #4]
 801a0bc:	22ff      	movs	r2, #255	; 0xff
 801a0be:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 801a0c0:	687b      	ldr	r3, [r7, #4]
}
 801a0c2:	4618      	mov	r0, r3
 801a0c4:	3708      	adds	r7, #8
 801a0c6:	46bd      	mov	sp, r7
 801a0c8:	bd80      	pop	{r7, pc}
	...

0801a0cc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 801a0cc:	b480      	push	{r7}
 801a0ce:	b085      	sub	sp, #20
 801a0d0:	af00      	add	r7, sp, #0
 801a0d2:	6078      	str	r0, [r7, #4]
 801a0d4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 801a0d6:	687b      	ldr	r3, [r7, #4]
 801a0d8:	2b00      	cmp	r3, #0
 801a0da:	d01e      	beq.n	801a11a <udp_netif_ip_addr_changed+0x4e>
 801a0dc:	687b      	ldr	r3, [r7, #4]
 801a0de:	681b      	ldr	r3, [r3, #0]
 801a0e0:	2b00      	cmp	r3, #0
 801a0e2:	d01a      	beq.n	801a11a <udp_netif_ip_addr_changed+0x4e>
 801a0e4:	683b      	ldr	r3, [r7, #0]
 801a0e6:	2b00      	cmp	r3, #0
 801a0e8:	d017      	beq.n	801a11a <udp_netif_ip_addr_changed+0x4e>
 801a0ea:	683b      	ldr	r3, [r7, #0]
 801a0ec:	681b      	ldr	r3, [r3, #0]
 801a0ee:	2b00      	cmp	r3, #0
 801a0f0:	d013      	beq.n	801a11a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801a0f2:	4b0d      	ldr	r3, [pc, #52]	; (801a128 <udp_netif_ip_addr_changed+0x5c>)
 801a0f4:	681b      	ldr	r3, [r3, #0]
 801a0f6:	60fb      	str	r3, [r7, #12]
 801a0f8:	e00c      	b.n	801a114 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 801a0fa:	68fb      	ldr	r3, [r7, #12]
 801a0fc:	681a      	ldr	r2, [r3, #0]
 801a0fe:	687b      	ldr	r3, [r7, #4]
 801a100:	681b      	ldr	r3, [r3, #0]
 801a102:	429a      	cmp	r2, r3
 801a104:	d103      	bne.n	801a10e <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 801a106:	683b      	ldr	r3, [r7, #0]
 801a108:	681a      	ldr	r2, [r3, #0]
 801a10a:	68fb      	ldr	r3, [r7, #12]
 801a10c:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 801a10e:	68fb      	ldr	r3, [r7, #12]
 801a110:	68db      	ldr	r3, [r3, #12]
 801a112:	60fb      	str	r3, [r7, #12]
 801a114:	68fb      	ldr	r3, [r7, #12]
 801a116:	2b00      	cmp	r3, #0
 801a118:	d1ef      	bne.n	801a0fa <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801a11a:	bf00      	nop
 801a11c:	3714      	adds	r7, #20
 801a11e:	46bd      	mov	sp, r7
 801a120:	f85d 7b04 	ldr.w	r7, [sp], #4
 801a124:	4770      	bx	lr
 801a126:	bf00      	nop
 801a128:	200240fc 	.word	0x200240fc

0801a12c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801a12c:	b580      	push	{r7, lr}
 801a12e:	b082      	sub	sp, #8
 801a130:	af00      	add	r7, sp, #0
 801a132:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 801a134:	4915      	ldr	r1, [pc, #84]	; (801a18c <etharp_free_entry+0x60>)
 801a136:	687a      	ldr	r2, [r7, #4]
 801a138:	4613      	mov	r3, r2
 801a13a:	005b      	lsls	r3, r3, #1
 801a13c:	4413      	add	r3, r2
 801a13e:	00db      	lsls	r3, r3, #3
 801a140:	440b      	add	r3, r1
 801a142:	681b      	ldr	r3, [r3, #0]
 801a144:	2b00      	cmp	r3, #0
 801a146:	d013      	beq.n	801a170 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 801a148:	4910      	ldr	r1, [pc, #64]	; (801a18c <etharp_free_entry+0x60>)
 801a14a:	687a      	ldr	r2, [r7, #4]
 801a14c:	4613      	mov	r3, r2
 801a14e:	005b      	lsls	r3, r3, #1
 801a150:	4413      	add	r3, r2
 801a152:	00db      	lsls	r3, r3, #3
 801a154:	440b      	add	r3, r1
 801a156:	681b      	ldr	r3, [r3, #0]
 801a158:	4618      	mov	r0, r3
 801a15a:	f7f9 fdbd 	bl	8013cd8 <pbuf_free>
    arp_table[i].q = NULL;
 801a15e:	490b      	ldr	r1, [pc, #44]	; (801a18c <etharp_free_entry+0x60>)
 801a160:	687a      	ldr	r2, [r7, #4]
 801a162:	4613      	mov	r3, r2
 801a164:	005b      	lsls	r3, r3, #1
 801a166:	4413      	add	r3, r2
 801a168:	00db      	lsls	r3, r3, #3
 801a16a:	440b      	add	r3, r1
 801a16c:	2200      	movs	r2, #0
 801a16e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 801a170:	4906      	ldr	r1, [pc, #24]	; (801a18c <etharp_free_entry+0x60>)
 801a172:	687a      	ldr	r2, [r7, #4]
 801a174:	4613      	mov	r3, r2
 801a176:	005b      	lsls	r3, r3, #1
 801a178:	4413      	add	r3, r2
 801a17a:	00db      	lsls	r3, r3, #3
 801a17c:	440b      	add	r3, r1
 801a17e:	3314      	adds	r3, #20
 801a180:	2200      	movs	r2, #0
 801a182:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 801a184:	bf00      	nop
 801a186:	3708      	adds	r7, #8
 801a188:	46bd      	mov	sp, r7
 801a18a:	bd80      	pop	{r7, pc}
 801a18c:	20024100 	.word	0x20024100

0801a190 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 801a190:	b580      	push	{r7, lr}
 801a192:	b082      	sub	sp, #8
 801a194:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a196:	2300      	movs	r3, #0
 801a198:	607b      	str	r3, [r7, #4]
 801a19a:	e096      	b.n	801a2ca <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801a19c:	494f      	ldr	r1, [pc, #316]	; (801a2dc <etharp_tmr+0x14c>)
 801a19e:	687a      	ldr	r2, [r7, #4]
 801a1a0:	4613      	mov	r3, r2
 801a1a2:	005b      	lsls	r3, r3, #1
 801a1a4:	4413      	add	r3, r2
 801a1a6:	00db      	lsls	r3, r3, #3
 801a1a8:	440b      	add	r3, r1
 801a1aa:	3314      	adds	r3, #20
 801a1ac:	781b      	ldrb	r3, [r3, #0]
 801a1ae:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 801a1b0:	78fb      	ldrb	r3, [r7, #3]
 801a1b2:	2b00      	cmp	r3, #0
 801a1b4:	f000 8086 	beq.w	801a2c4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 801a1b8:	4948      	ldr	r1, [pc, #288]	; (801a2dc <etharp_tmr+0x14c>)
 801a1ba:	687a      	ldr	r2, [r7, #4]
 801a1bc:	4613      	mov	r3, r2
 801a1be:	005b      	lsls	r3, r3, #1
 801a1c0:	4413      	add	r3, r2
 801a1c2:	00db      	lsls	r3, r3, #3
 801a1c4:	440b      	add	r3, r1
 801a1c6:	3312      	adds	r3, #18
 801a1c8:	881b      	ldrh	r3, [r3, #0]
 801a1ca:	3301      	adds	r3, #1
 801a1cc:	b298      	uxth	r0, r3
 801a1ce:	4943      	ldr	r1, [pc, #268]	; (801a2dc <etharp_tmr+0x14c>)
 801a1d0:	687a      	ldr	r2, [r7, #4]
 801a1d2:	4613      	mov	r3, r2
 801a1d4:	005b      	lsls	r3, r3, #1
 801a1d6:	4413      	add	r3, r2
 801a1d8:	00db      	lsls	r3, r3, #3
 801a1da:	440b      	add	r3, r1
 801a1dc:	3312      	adds	r3, #18
 801a1de:	4602      	mov	r2, r0
 801a1e0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801a1e2:	493e      	ldr	r1, [pc, #248]	; (801a2dc <etharp_tmr+0x14c>)
 801a1e4:	687a      	ldr	r2, [r7, #4]
 801a1e6:	4613      	mov	r3, r2
 801a1e8:	005b      	lsls	r3, r3, #1
 801a1ea:	4413      	add	r3, r2
 801a1ec:	00db      	lsls	r3, r3, #3
 801a1ee:	440b      	add	r3, r1
 801a1f0:	3312      	adds	r3, #18
 801a1f2:	881b      	ldrh	r3, [r3, #0]
 801a1f4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 801a1f8:	d215      	bcs.n	801a226 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801a1fa:	4938      	ldr	r1, [pc, #224]	; (801a2dc <etharp_tmr+0x14c>)
 801a1fc:	687a      	ldr	r2, [r7, #4]
 801a1fe:	4613      	mov	r3, r2
 801a200:	005b      	lsls	r3, r3, #1
 801a202:	4413      	add	r3, r2
 801a204:	00db      	lsls	r3, r3, #3
 801a206:	440b      	add	r3, r1
 801a208:	3314      	adds	r3, #20
 801a20a:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 801a20c:	2b01      	cmp	r3, #1
 801a20e:	d10e      	bne.n	801a22e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 801a210:	4932      	ldr	r1, [pc, #200]	; (801a2dc <etharp_tmr+0x14c>)
 801a212:	687a      	ldr	r2, [r7, #4]
 801a214:	4613      	mov	r3, r2
 801a216:	005b      	lsls	r3, r3, #1
 801a218:	4413      	add	r3, r2
 801a21a:	00db      	lsls	r3, r3, #3
 801a21c:	440b      	add	r3, r1
 801a21e:	3312      	adds	r3, #18
 801a220:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 801a222:	2b04      	cmp	r3, #4
 801a224:	d903      	bls.n	801a22e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 801a226:	6878      	ldr	r0, [r7, #4]
 801a228:	f7ff ff80 	bl	801a12c <etharp_free_entry>
 801a22c:	e04a      	b.n	801a2c4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801a22e:	492b      	ldr	r1, [pc, #172]	; (801a2dc <etharp_tmr+0x14c>)
 801a230:	687a      	ldr	r2, [r7, #4]
 801a232:	4613      	mov	r3, r2
 801a234:	005b      	lsls	r3, r3, #1
 801a236:	4413      	add	r3, r2
 801a238:	00db      	lsls	r3, r3, #3
 801a23a:	440b      	add	r3, r1
 801a23c:	3314      	adds	r3, #20
 801a23e:	781b      	ldrb	r3, [r3, #0]
 801a240:	2b03      	cmp	r3, #3
 801a242:	d10a      	bne.n	801a25a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 801a244:	4925      	ldr	r1, [pc, #148]	; (801a2dc <etharp_tmr+0x14c>)
 801a246:	687a      	ldr	r2, [r7, #4]
 801a248:	4613      	mov	r3, r2
 801a24a:	005b      	lsls	r3, r3, #1
 801a24c:	4413      	add	r3, r2
 801a24e:	00db      	lsls	r3, r3, #3
 801a250:	440b      	add	r3, r1
 801a252:	3314      	adds	r3, #20
 801a254:	2204      	movs	r2, #4
 801a256:	701a      	strb	r2, [r3, #0]
 801a258:	e034      	b.n	801a2c4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801a25a:	4920      	ldr	r1, [pc, #128]	; (801a2dc <etharp_tmr+0x14c>)
 801a25c:	687a      	ldr	r2, [r7, #4]
 801a25e:	4613      	mov	r3, r2
 801a260:	005b      	lsls	r3, r3, #1
 801a262:	4413      	add	r3, r2
 801a264:	00db      	lsls	r3, r3, #3
 801a266:	440b      	add	r3, r1
 801a268:	3314      	adds	r3, #20
 801a26a:	781b      	ldrb	r3, [r3, #0]
 801a26c:	2b04      	cmp	r3, #4
 801a26e:	d10a      	bne.n	801a286 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 801a270:	491a      	ldr	r1, [pc, #104]	; (801a2dc <etharp_tmr+0x14c>)
 801a272:	687a      	ldr	r2, [r7, #4]
 801a274:	4613      	mov	r3, r2
 801a276:	005b      	lsls	r3, r3, #1
 801a278:	4413      	add	r3, r2
 801a27a:	00db      	lsls	r3, r3, #3
 801a27c:	440b      	add	r3, r1
 801a27e:	3314      	adds	r3, #20
 801a280:	2202      	movs	r2, #2
 801a282:	701a      	strb	r2, [r3, #0]
 801a284:	e01e      	b.n	801a2c4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801a286:	4915      	ldr	r1, [pc, #84]	; (801a2dc <etharp_tmr+0x14c>)
 801a288:	687a      	ldr	r2, [r7, #4]
 801a28a:	4613      	mov	r3, r2
 801a28c:	005b      	lsls	r3, r3, #1
 801a28e:	4413      	add	r3, r2
 801a290:	00db      	lsls	r3, r3, #3
 801a292:	440b      	add	r3, r1
 801a294:	3314      	adds	r3, #20
 801a296:	781b      	ldrb	r3, [r3, #0]
 801a298:	2b01      	cmp	r3, #1
 801a29a:	d113      	bne.n	801a2c4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801a29c:	490f      	ldr	r1, [pc, #60]	; (801a2dc <etharp_tmr+0x14c>)
 801a29e:	687a      	ldr	r2, [r7, #4]
 801a2a0:	4613      	mov	r3, r2
 801a2a2:	005b      	lsls	r3, r3, #1
 801a2a4:	4413      	add	r3, r2
 801a2a6:	00db      	lsls	r3, r3, #3
 801a2a8:	440b      	add	r3, r1
 801a2aa:	3308      	adds	r3, #8
 801a2ac:	6818      	ldr	r0, [r3, #0]
 801a2ae:	687a      	ldr	r2, [r7, #4]
 801a2b0:	4613      	mov	r3, r2
 801a2b2:	005b      	lsls	r3, r3, #1
 801a2b4:	4413      	add	r3, r2
 801a2b6:	00db      	lsls	r3, r3, #3
 801a2b8:	4a08      	ldr	r2, [pc, #32]	; (801a2dc <etharp_tmr+0x14c>)
 801a2ba:	4413      	add	r3, r2
 801a2bc:	3304      	adds	r3, #4
 801a2be:	4619      	mov	r1, r3
 801a2c0:	f000 fe6e 	bl	801afa0 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a2c4:	687b      	ldr	r3, [r7, #4]
 801a2c6:	3301      	adds	r3, #1
 801a2c8:	607b      	str	r3, [r7, #4]
 801a2ca:	687b      	ldr	r3, [r7, #4]
 801a2cc:	2b09      	cmp	r3, #9
 801a2ce:	f77f af65 	ble.w	801a19c <etharp_tmr+0xc>
      }
    }
  }
}
 801a2d2:	bf00      	nop
 801a2d4:	bf00      	nop
 801a2d6:	3708      	adds	r7, #8
 801a2d8:	46bd      	mov	sp, r7
 801a2da:	bd80      	pop	{r7, pc}
 801a2dc:	20024100 	.word	0x20024100

0801a2e0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 801a2e0:	b580      	push	{r7, lr}
 801a2e2:	b08a      	sub	sp, #40	; 0x28
 801a2e4:	af00      	add	r7, sp, #0
 801a2e6:	60f8      	str	r0, [r7, #12]
 801a2e8:	460b      	mov	r3, r1
 801a2ea:	607a      	str	r2, [r7, #4]
 801a2ec:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 801a2ee:	230a      	movs	r3, #10
 801a2f0:	84fb      	strh	r3, [r7, #38]	; 0x26
 801a2f2:	230a      	movs	r3, #10
 801a2f4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 801a2f6:	230a      	movs	r3, #10
 801a2f8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 801a2fa:	2300      	movs	r3, #0
 801a2fc:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 801a2fe:	230a      	movs	r3, #10
 801a300:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 801a302:	2300      	movs	r3, #0
 801a304:	83bb      	strh	r3, [r7, #28]
 801a306:	2300      	movs	r3, #0
 801a308:	837b      	strh	r3, [r7, #26]
 801a30a:	2300      	movs	r3, #0
 801a30c:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a30e:	2300      	movs	r3, #0
 801a310:	843b      	strh	r3, [r7, #32]
 801a312:	e0ae      	b.n	801a472 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 801a314:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a318:	49a6      	ldr	r1, [pc, #664]	; (801a5b4 <etharp_find_entry+0x2d4>)
 801a31a:	4613      	mov	r3, r2
 801a31c:	005b      	lsls	r3, r3, #1
 801a31e:	4413      	add	r3, r2
 801a320:	00db      	lsls	r3, r3, #3
 801a322:	440b      	add	r3, r1
 801a324:	3314      	adds	r3, #20
 801a326:	781b      	ldrb	r3, [r3, #0]
 801a328:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801a32a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801a32e:	2b0a      	cmp	r3, #10
 801a330:	d105      	bne.n	801a33e <etharp_find_entry+0x5e>
 801a332:	7dfb      	ldrb	r3, [r7, #23]
 801a334:	2b00      	cmp	r3, #0
 801a336:	d102      	bne.n	801a33e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 801a338:	8c3b      	ldrh	r3, [r7, #32]
 801a33a:	847b      	strh	r3, [r7, #34]	; 0x22
 801a33c:	e095      	b.n	801a46a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801a33e:	7dfb      	ldrb	r3, [r7, #23]
 801a340:	2b00      	cmp	r3, #0
 801a342:	f000 8092 	beq.w	801a46a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 801a346:	7dfb      	ldrb	r3, [r7, #23]
 801a348:	2b01      	cmp	r3, #1
 801a34a:	d009      	beq.n	801a360 <etharp_find_entry+0x80>
 801a34c:	7dfb      	ldrb	r3, [r7, #23]
 801a34e:	2b01      	cmp	r3, #1
 801a350:	d806      	bhi.n	801a360 <etharp_find_entry+0x80>
 801a352:	4b99      	ldr	r3, [pc, #612]	; (801a5b8 <etharp_find_entry+0x2d8>)
 801a354:	f240 1223 	movw	r2, #291	; 0x123
 801a358:	4998      	ldr	r1, [pc, #608]	; (801a5bc <etharp_find_entry+0x2dc>)
 801a35a:	4899      	ldr	r0, [pc, #612]	; (801a5c0 <etharp_find_entry+0x2e0>)
 801a35c:	f003 fcf0 	bl	801dd40 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 801a360:	68fb      	ldr	r3, [r7, #12]
 801a362:	2b00      	cmp	r3, #0
 801a364:	d020      	beq.n	801a3a8 <etharp_find_entry+0xc8>
 801a366:	68fb      	ldr	r3, [r7, #12]
 801a368:	6819      	ldr	r1, [r3, #0]
 801a36a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a36e:	4891      	ldr	r0, [pc, #580]	; (801a5b4 <etharp_find_entry+0x2d4>)
 801a370:	4613      	mov	r3, r2
 801a372:	005b      	lsls	r3, r3, #1
 801a374:	4413      	add	r3, r2
 801a376:	00db      	lsls	r3, r3, #3
 801a378:	4403      	add	r3, r0
 801a37a:	3304      	adds	r3, #4
 801a37c:	681b      	ldr	r3, [r3, #0]
 801a37e:	4299      	cmp	r1, r3
 801a380:	d112      	bne.n	801a3a8 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 801a382:	687b      	ldr	r3, [r7, #4]
 801a384:	2b00      	cmp	r3, #0
 801a386:	d00c      	beq.n	801a3a2 <etharp_find_entry+0xc2>
 801a388:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a38c:	4989      	ldr	r1, [pc, #548]	; (801a5b4 <etharp_find_entry+0x2d4>)
 801a38e:	4613      	mov	r3, r2
 801a390:	005b      	lsls	r3, r3, #1
 801a392:	4413      	add	r3, r2
 801a394:	00db      	lsls	r3, r3, #3
 801a396:	440b      	add	r3, r1
 801a398:	3308      	adds	r3, #8
 801a39a:	681b      	ldr	r3, [r3, #0]
 801a39c:	687a      	ldr	r2, [r7, #4]
 801a39e:	429a      	cmp	r2, r3
 801a3a0:	d102      	bne.n	801a3a8 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 801a3a2:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a3a6:	e100      	b.n	801a5aa <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 801a3a8:	7dfb      	ldrb	r3, [r7, #23]
 801a3aa:	2b01      	cmp	r3, #1
 801a3ac:	d140      	bne.n	801a430 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801a3ae:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a3b2:	4980      	ldr	r1, [pc, #512]	; (801a5b4 <etharp_find_entry+0x2d4>)
 801a3b4:	4613      	mov	r3, r2
 801a3b6:	005b      	lsls	r3, r3, #1
 801a3b8:	4413      	add	r3, r2
 801a3ba:	00db      	lsls	r3, r3, #3
 801a3bc:	440b      	add	r3, r1
 801a3be:	681b      	ldr	r3, [r3, #0]
 801a3c0:	2b00      	cmp	r3, #0
 801a3c2:	d01a      	beq.n	801a3fa <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 801a3c4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a3c8:	497a      	ldr	r1, [pc, #488]	; (801a5b4 <etharp_find_entry+0x2d4>)
 801a3ca:	4613      	mov	r3, r2
 801a3cc:	005b      	lsls	r3, r3, #1
 801a3ce:	4413      	add	r3, r2
 801a3d0:	00db      	lsls	r3, r3, #3
 801a3d2:	440b      	add	r3, r1
 801a3d4:	3312      	adds	r3, #18
 801a3d6:	881b      	ldrh	r3, [r3, #0]
 801a3d8:	8bba      	ldrh	r2, [r7, #28]
 801a3da:	429a      	cmp	r2, r3
 801a3dc:	d845      	bhi.n	801a46a <etharp_find_entry+0x18a>
            old_queue = i;
 801a3de:	8c3b      	ldrh	r3, [r7, #32]
 801a3e0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 801a3e2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a3e6:	4973      	ldr	r1, [pc, #460]	; (801a5b4 <etharp_find_entry+0x2d4>)
 801a3e8:	4613      	mov	r3, r2
 801a3ea:	005b      	lsls	r3, r3, #1
 801a3ec:	4413      	add	r3, r2
 801a3ee:	00db      	lsls	r3, r3, #3
 801a3f0:	440b      	add	r3, r1
 801a3f2:	3312      	adds	r3, #18
 801a3f4:	881b      	ldrh	r3, [r3, #0]
 801a3f6:	83bb      	strh	r3, [r7, #28]
 801a3f8:	e037      	b.n	801a46a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 801a3fa:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a3fe:	496d      	ldr	r1, [pc, #436]	; (801a5b4 <etharp_find_entry+0x2d4>)
 801a400:	4613      	mov	r3, r2
 801a402:	005b      	lsls	r3, r3, #1
 801a404:	4413      	add	r3, r2
 801a406:	00db      	lsls	r3, r3, #3
 801a408:	440b      	add	r3, r1
 801a40a:	3312      	adds	r3, #18
 801a40c:	881b      	ldrh	r3, [r3, #0]
 801a40e:	8b7a      	ldrh	r2, [r7, #26]
 801a410:	429a      	cmp	r2, r3
 801a412:	d82a      	bhi.n	801a46a <etharp_find_entry+0x18a>
            old_pending = i;
 801a414:	8c3b      	ldrh	r3, [r7, #32]
 801a416:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 801a418:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a41c:	4965      	ldr	r1, [pc, #404]	; (801a5b4 <etharp_find_entry+0x2d4>)
 801a41e:	4613      	mov	r3, r2
 801a420:	005b      	lsls	r3, r3, #1
 801a422:	4413      	add	r3, r2
 801a424:	00db      	lsls	r3, r3, #3
 801a426:	440b      	add	r3, r1
 801a428:	3312      	adds	r3, #18
 801a42a:	881b      	ldrh	r3, [r3, #0]
 801a42c:	837b      	strh	r3, [r7, #26]
 801a42e:	e01c      	b.n	801a46a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 801a430:	7dfb      	ldrb	r3, [r7, #23]
 801a432:	2b01      	cmp	r3, #1
 801a434:	d919      	bls.n	801a46a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 801a436:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a43a:	495e      	ldr	r1, [pc, #376]	; (801a5b4 <etharp_find_entry+0x2d4>)
 801a43c:	4613      	mov	r3, r2
 801a43e:	005b      	lsls	r3, r3, #1
 801a440:	4413      	add	r3, r2
 801a442:	00db      	lsls	r3, r3, #3
 801a444:	440b      	add	r3, r1
 801a446:	3312      	adds	r3, #18
 801a448:	881b      	ldrh	r3, [r3, #0]
 801a44a:	8b3a      	ldrh	r2, [r7, #24]
 801a44c:	429a      	cmp	r2, r3
 801a44e:	d80c      	bhi.n	801a46a <etharp_find_entry+0x18a>
            old_stable = i;
 801a450:	8c3b      	ldrh	r3, [r7, #32]
 801a452:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 801a454:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a458:	4956      	ldr	r1, [pc, #344]	; (801a5b4 <etharp_find_entry+0x2d4>)
 801a45a:	4613      	mov	r3, r2
 801a45c:	005b      	lsls	r3, r3, #1
 801a45e:	4413      	add	r3, r2
 801a460:	00db      	lsls	r3, r3, #3
 801a462:	440b      	add	r3, r1
 801a464:	3312      	adds	r3, #18
 801a466:	881b      	ldrh	r3, [r3, #0]
 801a468:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a46a:	8c3b      	ldrh	r3, [r7, #32]
 801a46c:	3301      	adds	r3, #1
 801a46e:	b29b      	uxth	r3, r3
 801a470:	843b      	strh	r3, [r7, #32]
 801a472:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a476:	2b09      	cmp	r3, #9
 801a478:	f77f af4c 	ble.w	801a314 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801a47c:	7afb      	ldrb	r3, [r7, #11]
 801a47e:	f003 0302 	and.w	r3, r3, #2
 801a482:	2b00      	cmp	r3, #0
 801a484:	d108      	bne.n	801a498 <etharp_find_entry+0x1b8>
 801a486:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801a48a:	2b0a      	cmp	r3, #10
 801a48c:	d107      	bne.n	801a49e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801a48e:	7afb      	ldrb	r3, [r7, #11]
 801a490:	f003 0301 	and.w	r3, r3, #1
 801a494:	2b00      	cmp	r3, #0
 801a496:	d102      	bne.n	801a49e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 801a498:	f04f 33ff 	mov.w	r3, #4294967295
 801a49c:	e085      	b.n	801a5aa <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801a49e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801a4a2:	2b09      	cmp	r3, #9
 801a4a4:	dc02      	bgt.n	801a4ac <etharp_find_entry+0x1cc>
    i = empty;
 801a4a6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a4a8:	843b      	strh	r3, [r7, #32]
 801a4aa:	e039      	b.n	801a520 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801a4ac:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 801a4b0:	2b09      	cmp	r3, #9
 801a4b2:	dc14      	bgt.n	801a4de <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 801a4b4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801a4b6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 801a4b8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a4bc:	493d      	ldr	r1, [pc, #244]	; (801a5b4 <etharp_find_entry+0x2d4>)
 801a4be:	4613      	mov	r3, r2
 801a4c0:	005b      	lsls	r3, r3, #1
 801a4c2:	4413      	add	r3, r2
 801a4c4:	00db      	lsls	r3, r3, #3
 801a4c6:	440b      	add	r3, r1
 801a4c8:	681b      	ldr	r3, [r3, #0]
 801a4ca:	2b00      	cmp	r3, #0
 801a4cc:	d018      	beq.n	801a500 <etharp_find_entry+0x220>
 801a4ce:	4b3a      	ldr	r3, [pc, #232]	; (801a5b8 <etharp_find_entry+0x2d8>)
 801a4d0:	f240 126d 	movw	r2, #365	; 0x16d
 801a4d4:	493b      	ldr	r1, [pc, #236]	; (801a5c4 <etharp_find_entry+0x2e4>)
 801a4d6:	483a      	ldr	r0, [pc, #232]	; (801a5c0 <etharp_find_entry+0x2e0>)
 801a4d8:	f003 fc32 	bl	801dd40 <iprintf>
 801a4dc:	e010      	b.n	801a500 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 801a4de:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 801a4e2:	2b09      	cmp	r3, #9
 801a4e4:	dc02      	bgt.n	801a4ec <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 801a4e6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801a4e8:	843b      	strh	r3, [r7, #32]
 801a4ea:	e009      	b.n	801a500 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 801a4ec:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 801a4f0:	2b09      	cmp	r3, #9
 801a4f2:	dc02      	bgt.n	801a4fa <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 801a4f4:	8bfb      	ldrh	r3, [r7, #30]
 801a4f6:	843b      	strh	r3, [r7, #32]
 801a4f8:	e002      	b.n	801a500 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 801a4fa:	f04f 33ff 	mov.w	r3, #4294967295
 801a4fe:	e054      	b.n	801a5aa <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801a500:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a504:	2b09      	cmp	r3, #9
 801a506:	dd06      	ble.n	801a516 <etharp_find_entry+0x236>
 801a508:	4b2b      	ldr	r3, [pc, #172]	; (801a5b8 <etharp_find_entry+0x2d8>)
 801a50a:	f240 127f 	movw	r2, #383	; 0x17f
 801a50e:	492e      	ldr	r1, [pc, #184]	; (801a5c8 <etharp_find_entry+0x2e8>)
 801a510:	482b      	ldr	r0, [pc, #172]	; (801a5c0 <etharp_find_entry+0x2e0>)
 801a512:	f003 fc15 	bl	801dd40 <iprintf>
    etharp_free_entry(i);
 801a516:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a51a:	4618      	mov	r0, r3
 801a51c:	f7ff fe06 	bl	801a12c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 801a520:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801a524:	2b09      	cmp	r3, #9
 801a526:	dd06      	ble.n	801a536 <etharp_find_entry+0x256>
 801a528:	4b23      	ldr	r3, [pc, #140]	; (801a5b8 <etharp_find_entry+0x2d8>)
 801a52a:	f240 1283 	movw	r2, #387	; 0x183
 801a52e:	4926      	ldr	r1, [pc, #152]	; (801a5c8 <etharp_find_entry+0x2e8>)
 801a530:	4823      	ldr	r0, [pc, #140]	; (801a5c0 <etharp_find_entry+0x2e0>)
 801a532:	f003 fc05 	bl	801dd40 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 801a536:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a53a:	491e      	ldr	r1, [pc, #120]	; (801a5b4 <etharp_find_entry+0x2d4>)
 801a53c:	4613      	mov	r3, r2
 801a53e:	005b      	lsls	r3, r3, #1
 801a540:	4413      	add	r3, r2
 801a542:	00db      	lsls	r3, r3, #3
 801a544:	440b      	add	r3, r1
 801a546:	3314      	adds	r3, #20
 801a548:	781b      	ldrb	r3, [r3, #0]
 801a54a:	2b00      	cmp	r3, #0
 801a54c:	d006      	beq.n	801a55c <etharp_find_entry+0x27c>
 801a54e:	4b1a      	ldr	r3, [pc, #104]	; (801a5b8 <etharp_find_entry+0x2d8>)
 801a550:	f44f 72c2 	mov.w	r2, #388	; 0x184
 801a554:	491d      	ldr	r1, [pc, #116]	; (801a5cc <etharp_find_entry+0x2ec>)
 801a556:	481a      	ldr	r0, [pc, #104]	; (801a5c0 <etharp_find_entry+0x2e0>)
 801a558:	f003 fbf2 	bl	801dd40 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801a55c:	68fb      	ldr	r3, [r7, #12]
 801a55e:	2b00      	cmp	r3, #0
 801a560:	d00b      	beq.n	801a57a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 801a562:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a566:	68fb      	ldr	r3, [r7, #12]
 801a568:	6819      	ldr	r1, [r3, #0]
 801a56a:	4812      	ldr	r0, [pc, #72]	; (801a5b4 <etharp_find_entry+0x2d4>)
 801a56c:	4613      	mov	r3, r2
 801a56e:	005b      	lsls	r3, r3, #1
 801a570:	4413      	add	r3, r2
 801a572:	00db      	lsls	r3, r3, #3
 801a574:	4403      	add	r3, r0
 801a576:	3304      	adds	r3, #4
 801a578:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801a57a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a57e:	490d      	ldr	r1, [pc, #52]	; (801a5b4 <etharp_find_entry+0x2d4>)
 801a580:	4613      	mov	r3, r2
 801a582:	005b      	lsls	r3, r3, #1
 801a584:	4413      	add	r3, r2
 801a586:	00db      	lsls	r3, r3, #3
 801a588:	440b      	add	r3, r1
 801a58a:	3312      	adds	r3, #18
 801a58c:	2200      	movs	r2, #0
 801a58e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 801a590:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801a594:	4907      	ldr	r1, [pc, #28]	; (801a5b4 <etharp_find_entry+0x2d4>)
 801a596:	4613      	mov	r3, r2
 801a598:	005b      	lsls	r3, r3, #1
 801a59a:	4413      	add	r3, r2
 801a59c:	00db      	lsls	r3, r3, #3
 801a59e:	440b      	add	r3, r1
 801a5a0:	3308      	adds	r3, #8
 801a5a2:	687a      	ldr	r2, [r7, #4]
 801a5a4:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 801a5a6:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801a5aa:	4618      	mov	r0, r3
 801a5ac:	3728      	adds	r7, #40	; 0x28
 801a5ae:	46bd      	mov	sp, r7
 801a5b0:	bd80      	pop	{r7, pc}
 801a5b2:	bf00      	nop
 801a5b4:	20024100 	.word	0x20024100
 801a5b8:	080210e4 	.word	0x080210e4
 801a5bc:	0802111c 	.word	0x0802111c
 801a5c0:	0802115c 	.word	0x0802115c
 801a5c4:	08021184 	.word	0x08021184
 801a5c8:	0802119c 	.word	0x0802119c
 801a5cc:	080211b0 	.word	0x080211b0

0801a5d0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 801a5d0:	b580      	push	{r7, lr}
 801a5d2:	b088      	sub	sp, #32
 801a5d4:	af02      	add	r7, sp, #8
 801a5d6:	60f8      	str	r0, [r7, #12]
 801a5d8:	60b9      	str	r1, [r7, #8]
 801a5da:	607a      	str	r2, [r7, #4]
 801a5dc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 801a5de:	68fb      	ldr	r3, [r7, #12]
 801a5e0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801a5e4:	2b06      	cmp	r3, #6
 801a5e6:	d006      	beq.n	801a5f6 <etharp_update_arp_entry+0x26>
 801a5e8:	4b48      	ldr	r3, [pc, #288]	; (801a70c <etharp_update_arp_entry+0x13c>)
 801a5ea:	f240 12a9 	movw	r2, #425	; 0x1a9
 801a5ee:	4948      	ldr	r1, [pc, #288]	; (801a710 <etharp_update_arp_entry+0x140>)
 801a5f0:	4848      	ldr	r0, [pc, #288]	; (801a714 <etharp_update_arp_entry+0x144>)
 801a5f2:	f003 fba5 	bl	801dd40 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 801a5f6:	68bb      	ldr	r3, [r7, #8]
 801a5f8:	2b00      	cmp	r3, #0
 801a5fa:	d012      	beq.n	801a622 <etharp_update_arp_entry+0x52>
 801a5fc:	68bb      	ldr	r3, [r7, #8]
 801a5fe:	681b      	ldr	r3, [r3, #0]
 801a600:	2b00      	cmp	r3, #0
 801a602:	d00e      	beq.n	801a622 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801a604:	68bb      	ldr	r3, [r7, #8]
 801a606:	681b      	ldr	r3, [r3, #0]
 801a608:	68f9      	ldr	r1, [r7, #12]
 801a60a:	4618      	mov	r0, r3
 801a60c:	f001 f8fe 	bl	801b80c <ip4_addr_isbroadcast_u32>
 801a610:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 801a612:	2b00      	cmp	r3, #0
 801a614:	d105      	bne.n	801a622 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 801a616:	68bb      	ldr	r3, [r7, #8]
 801a618:	681b      	ldr	r3, [r3, #0]
 801a61a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801a61e:	2be0      	cmp	r3, #224	; 0xe0
 801a620:	d102      	bne.n	801a628 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801a622:	f06f 030f 	mvn.w	r3, #15
 801a626:	e06c      	b.n	801a702 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 801a628:	78fb      	ldrb	r3, [r7, #3]
 801a62a:	68fa      	ldr	r2, [r7, #12]
 801a62c:	4619      	mov	r1, r3
 801a62e:	68b8      	ldr	r0, [r7, #8]
 801a630:	f7ff fe56 	bl	801a2e0 <etharp_find_entry>
 801a634:	4603      	mov	r3, r0
 801a636:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 801a638:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801a63c:	2b00      	cmp	r3, #0
 801a63e:	da02      	bge.n	801a646 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 801a640:	8afb      	ldrh	r3, [r7, #22]
 801a642:	b25b      	sxtb	r3, r3
 801a644:	e05d      	b.n	801a702 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 801a646:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a64a:	4933      	ldr	r1, [pc, #204]	; (801a718 <etharp_update_arp_entry+0x148>)
 801a64c:	4613      	mov	r3, r2
 801a64e:	005b      	lsls	r3, r3, #1
 801a650:	4413      	add	r3, r2
 801a652:	00db      	lsls	r3, r3, #3
 801a654:	440b      	add	r3, r1
 801a656:	3314      	adds	r3, #20
 801a658:	2202      	movs	r2, #2
 801a65a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801a65c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a660:	492d      	ldr	r1, [pc, #180]	; (801a718 <etharp_update_arp_entry+0x148>)
 801a662:	4613      	mov	r3, r2
 801a664:	005b      	lsls	r3, r3, #1
 801a666:	4413      	add	r3, r2
 801a668:	00db      	lsls	r3, r3, #3
 801a66a:	440b      	add	r3, r1
 801a66c:	3308      	adds	r3, #8
 801a66e:	68fa      	ldr	r2, [r7, #12]
 801a670:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 801a672:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a676:	4613      	mov	r3, r2
 801a678:	005b      	lsls	r3, r3, #1
 801a67a:	4413      	add	r3, r2
 801a67c:	00db      	lsls	r3, r3, #3
 801a67e:	3308      	adds	r3, #8
 801a680:	4a25      	ldr	r2, [pc, #148]	; (801a718 <etharp_update_arp_entry+0x148>)
 801a682:	4413      	add	r3, r2
 801a684:	3304      	adds	r3, #4
 801a686:	2206      	movs	r2, #6
 801a688:	6879      	ldr	r1, [r7, #4]
 801a68a:	4618      	mov	r0, r3
 801a68c:	f003 fc89 	bl	801dfa2 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 801a690:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a694:	4920      	ldr	r1, [pc, #128]	; (801a718 <etharp_update_arp_entry+0x148>)
 801a696:	4613      	mov	r3, r2
 801a698:	005b      	lsls	r3, r3, #1
 801a69a:	4413      	add	r3, r2
 801a69c:	00db      	lsls	r3, r3, #3
 801a69e:	440b      	add	r3, r1
 801a6a0:	3312      	adds	r3, #18
 801a6a2:	2200      	movs	r2, #0
 801a6a4:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 801a6a6:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a6aa:	491b      	ldr	r1, [pc, #108]	; (801a718 <etharp_update_arp_entry+0x148>)
 801a6ac:	4613      	mov	r3, r2
 801a6ae:	005b      	lsls	r3, r3, #1
 801a6b0:	4413      	add	r3, r2
 801a6b2:	00db      	lsls	r3, r3, #3
 801a6b4:	440b      	add	r3, r1
 801a6b6:	681b      	ldr	r3, [r3, #0]
 801a6b8:	2b00      	cmp	r3, #0
 801a6ba:	d021      	beq.n	801a700 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 801a6bc:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a6c0:	4915      	ldr	r1, [pc, #84]	; (801a718 <etharp_update_arp_entry+0x148>)
 801a6c2:	4613      	mov	r3, r2
 801a6c4:	005b      	lsls	r3, r3, #1
 801a6c6:	4413      	add	r3, r2
 801a6c8:	00db      	lsls	r3, r3, #3
 801a6ca:	440b      	add	r3, r1
 801a6cc:	681b      	ldr	r3, [r3, #0]
 801a6ce:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 801a6d0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801a6d4:	4910      	ldr	r1, [pc, #64]	; (801a718 <etharp_update_arp_entry+0x148>)
 801a6d6:	4613      	mov	r3, r2
 801a6d8:	005b      	lsls	r3, r3, #1
 801a6da:	4413      	add	r3, r2
 801a6dc:	00db      	lsls	r3, r3, #3
 801a6de:	440b      	add	r3, r1
 801a6e0:	2200      	movs	r2, #0
 801a6e2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 801a6e4:	68fb      	ldr	r3, [r7, #12]
 801a6e6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801a6ea:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a6ee:	9300      	str	r3, [sp, #0]
 801a6f0:	687b      	ldr	r3, [r7, #4]
 801a6f2:	6939      	ldr	r1, [r7, #16]
 801a6f4:	68f8      	ldr	r0, [r7, #12]
 801a6f6:	f001 ff97 	bl	801c628 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 801a6fa:	6938      	ldr	r0, [r7, #16]
 801a6fc:	f7f9 faec 	bl	8013cd8 <pbuf_free>
  }
  return ERR_OK;
 801a700:	2300      	movs	r3, #0
}
 801a702:	4618      	mov	r0, r3
 801a704:	3718      	adds	r7, #24
 801a706:	46bd      	mov	sp, r7
 801a708:	bd80      	pop	{r7, pc}
 801a70a:	bf00      	nop
 801a70c:	080210e4 	.word	0x080210e4
 801a710:	080211dc 	.word	0x080211dc
 801a714:	0802115c 	.word	0x0802115c
 801a718:	20024100 	.word	0x20024100

0801a71c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801a71c:	b580      	push	{r7, lr}
 801a71e:	b084      	sub	sp, #16
 801a720:	af00      	add	r7, sp, #0
 801a722:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a724:	2300      	movs	r3, #0
 801a726:	60fb      	str	r3, [r7, #12]
 801a728:	e01e      	b.n	801a768 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801a72a:	4913      	ldr	r1, [pc, #76]	; (801a778 <etharp_cleanup_netif+0x5c>)
 801a72c:	68fa      	ldr	r2, [r7, #12]
 801a72e:	4613      	mov	r3, r2
 801a730:	005b      	lsls	r3, r3, #1
 801a732:	4413      	add	r3, r2
 801a734:	00db      	lsls	r3, r3, #3
 801a736:	440b      	add	r3, r1
 801a738:	3314      	adds	r3, #20
 801a73a:	781b      	ldrb	r3, [r3, #0]
 801a73c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801a73e:	7afb      	ldrb	r3, [r7, #11]
 801a740:	2b00      	cmp	r3, #0
 801a742:	d00e      	beq.n	801a762 <etharp_cleanup_netif+0x46>
 801a744:	490c      	ldr	r1, [pc, #48]	; (801a778 <etharp_cleanup_netif+0x5c>)
 801a746:	68fa      	ldr	r2, [r7, #12]
 801a748:	4613      	mov	r3, r2
 801a74a:	005b      	lsls	r3, r3, #1
 801a74c:	4413      	add	r3, r2
 801a74e:	00db      	lsls	r3, r3, #3
 801a750:	440b      	add	r3, r1
 801a752:	3308      	adds	r3, #8
 801a754:	681b      	ldr	r3, [r3, #0]
 801a756:	687a      	ldr	r2, [r7, #4]
 801a758:	429a      	cmp	r2, r3
 801a75a:	d102      	bne.n	801a762 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801a75c:	68f8      	ldr	r0, [r7, #12]
 801a75e:	f7ff fce5 	bl	801a12c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801a762:	68fb      	ldr	r3, [r7, #12]
 801a764:	3301      	adds	r3, #1
 801a766:	60fb      	str	r3, [r7, #12]
 801a768:	68fb      	ldr	r3, [r7, #12]
 801a76a:	2b09      	cmp	r3, #9
 801a76c:	dddd      	ble.n	801a72a <etharp_cleanup_netif+0xe>
    }
  }
}
 801a76e:	bf00      	nop
 801a770:	bf00      	nop
 801a772:	3710      	adds	r7, #16
 801a774:	46bd      	mov	sp, r7
 801a776:	bd80      	pop	{r7, pc}
 801a778:	20024100 	.word	0x20024100

0801a77c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801a77c:	b5b0      	push	{r4, r5, r7, lr}
 801a77e:	b08a      	sub	sp, #40	; 0x28
 801a780:	af04      	add	r7, sp, #16
 801a782:	6078      	str	r0, [r7, #4]
 801a784:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 801a786:	683b      	ldr	r3, [r7, #0]
 801a788:	2b00      	cmp	r3, #0
 801a78a:	d107      	bne.n	801a79c <etharp_input+0x20>
 801a78c:	4b3d      	ldr	r3, [pc, #244]	; (801a884 <etharp_input+0x108>)
 801a78e:	f240 228a 	movw	r2, #650	; 0x28a
 801a792:	493d      	ldr	r1, [pc, #244]	; (801a888 <etharp_input+0x10c>)
 801a794:	483d      	ldr	r0, [pc, #244]	; (801a88c <etharp_input+0x110>)
 801a796:	f003 fad3 	bl	801dd40 <iprintf>
 801a79a:	e06f      	b.n	801a87c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801a79c:	687b      	ldr	r3, [r7, #4]
 801a79e:	685b      	ldr	r3, [r3, #4]
 801a7a0:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801a7a2:	693b      	ldr	r3, [r7, #16]
 801a7a4:	881b      	ldrh	r3, [r3, #0]
 801a7a6:	b29b      	uxth	r3, r3
 801a7a8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a7ac:	d10c      	bne.n	801a7c8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801a7ae:	693b      	ldr	r3, [r7, #16]
 801a7b0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 801a7b2:	2b06      	cmp	r3, #6
 801a7b4:	d108      	bne.n	801a7c8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801a7b6:	693b      	ldr	r3, [r7, #16]
 801a7b8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801a7ba:	2b04      	cmp	r3, #4
 801a7bc:	d104      	bne.n	801a7c8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 801a7be:	693b      	ldr	r3, [r7, #16]
 801a7c0:	885b      	ldrh	r3, [r3, #2]
 801a7c2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 801a7c4:	2b08      	cmp	r3, #8
 801a7c6:	d003      	beq.n	801a7d0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 801a7c8:	6878      	ldr	r0, [r7, #4]
 801a7ca:	f7f9 fa85 	bl	8013cd8 <pbuf_free>
    return;
 801a7ce:	e055      	b.n	801a87c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 801a7d0:	693b      	ldr	r3, [r7, #16]
 801a7d2:	330e      	adds	r3, #14
 801a7d4:	681b      	ldr	r3, [r3, #0]
 801a7d6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 801a7d8:	693b      	ldr	r3, [r7, #16]
 801a7da:	3318      	adds	r3, #24
 801a7dc:	681b      	ldr	r3, [r3, #0]
 801a7de:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801a7e0:	683b      	ldr	r3, [r7, #0]
 801a7e2:	3304      	adds	r3, #4
 801a7e4:	681b      	ldr	r3, [r3, #0]
 801a7e6:	2b00      	cmp	r3, #0
 801a7e8:	d102      	bne.n	801a7f0 <etharp_input+0x74>
    for_us = 0;
 801a7ea:	2300      	movs	r3, #0
 801a7ec:	75fb      	strb	r3, [r7, #23]
 801a7ee:	e009      	b.n	801a804 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 801a7f0:	68ba      	ldr	r2, [r7, #8]
 801a7f2:	683b      	ldr	r3, [r7, #0]
 801a7f4:	3304      	adds	r3, #4
 801a7f6:	681b      	ldr	r3, [r3, #0]
 801a7f8:	429a      	cmp	r2, r3
 801a7fa:	bf0c      	ite	eq
 801a7fc:	2301      	moveq	r3, #1
 801a7fe:	2300      	movne	r3, #0
 801a800:	b2db      	uxtb	r3, r3
 801a802:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 801a804:	693b      	ldr	r3, [r7, #16]
 801a806:	f103 0208 	add.w	r2, r3, #8
 801a80a:	7dfb      	ldrb	r3, [r7, #23]
 801a80c:	2b00      	cmp	r3, #0
 801a80e:	d001      	beq.n	801a814 <etharp_input+0x98>
 801a810:	2301      	movs	r3, #1
 801a812:	e000      	b.n	801a816 <etharp_input+0x9a>
 801a814:	2302      	movs	r3, #2
 801a816:	f107 010c 	add.w	r1, r7, #12
 801a81a:	6838      	ldr	r0, [r7, #0]
 801a81c:	f7ff fed8 	bl	801a5d0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801a820:	693b      	ldr	r3, [r7, #16]
 801a822:	88db      	ldrh	r3, [r3, #6]
 801a824:	b29b      	uxth	r3, r3
 801a826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a82a:	d003      	beq.n	801a834 <etharp_input+0xb8>
 801a82c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a830:	d01e      	beq.n	801a870 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801a832:	e020      	b.n	801a876 <etharp_input+0xfa>
      if (for_us) {
 801a834:	7dfb      	ldrb	r3, [r7, #23]
 801a836:	2b00      	cmp	r3, #0
 801a838:	d01c      	beq.n	801a874 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801a83a:	683b      	ldr	r3, [r7, #0]
 801a83c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801a840:	693b      	ldr	r3, [r7, #16]
 801a842:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801a846:	683b      	ldr	r3, [r7, #0]
 801a848:	f103 0526 	add.w	r5, r3, #38	; 0x26
 801a84c:	683b      	ldr	r3, [r7, #0]
 801a84e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801a850:	693a      	ldr	r2, [r7, #16]
 801a852:	3208      	adds	r2, #8
        etharp_raw(netif,
 801a854:	2102      	movs	r1, #2
 801a856:	9103      	str	r1, [sp, #12]
 801a858:	f107 010c 	add.w	r1, r7, #12
 801a85c:	9102      	str	r1, [sp, #8]
 801a85e:	9201      	str	r2, [sp, #4]
 801a860:	9300      	str	r3, [sp, #0]
 801a862:	462b      	mov	r3, r5
 801a864:	4622      	mov	r2, r4
 801a866:	4601      	mov	r1, r0
 801a868:	6838      	ldr	r0, [r7, #0]
 801a86a:	f000 faeb 	bl	801ae44 <etharp_raw>
      break;
 801a86e:	e001      	b.n	801a874 <etharp_input+0xf8>
      break;
 801a870:	bf00      	nop
 801a872:	e000      	b.n	801a876 <etharp_input+0xfa>
      break;
 801a874:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801a876:	6878      	ldr	r0, [r7, #4]
 801a878:	f7f9 fa2e 	bl	8013cd8 <pbuf_free>
}
 801a87c:	3718      	adds	r7, #24
 801a87e:	46bd      	mov	sp, r7
 801a880:	bdb0      	pop	{r4, r5, r7, pc}
 801a882:	bf00      	nop
 801a884:	080210e4 	.word	0x080210e4
 801a888:	08021234 	.word	0x08021234
 801a88c:	0802115c 	.word	0x0802115c

0801a890 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801a890:	b580      	push	{r7, lr}
 801a892:	b086      	sub	sp, #24
 801a894:	af02      	add	r7, sp, #8
 801a896:	60f8      	str	r0, [r7, #12]
 801a898:	60b9      	str	r1, [r7, #8]
 801a89a:	4613      	mov	r3, r2
 801a89c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801a89e:	79fa      	ldrb	r2, [r7, #7]
 801a8a0:	4944      	ldr	r1, [pc, #272]	; (801a9b4 <etharp_output_to_arp_index+0x124>)
 801a8a2:	4613      	mov	r3, r2
 801a8a4:	005b      	lsls	r3, r3, #1
 801a8a6:	4413      	add	r3, r2
 801a8a8:	00db      	lsls	r3, r3, #3
 801a8aa:	440b      	add	r3, r1
 801a8ac:	3314      	adds	r3, #20
 801a8ae:	781b      	ldrb	r3, [r3, #0]
 801a8b0:	2b01      	cmp	r3, #1
 801a8b2:	d806      	bhi.n	801a8c2 <etharp_output_to_arp_index+0x32>
 801a8b4:	4b40      	ldr	r3, [pc, #256]	; (801a9b8 <etharp_output_to_arp_index+0x128>)
 801a8b6:	f240 22ee 	movw	r2, #750	; 0x2ee
 801a8ba:	4940      	ldr	r1, [pc, #256]	; (801a9bc <etharp_output_to_arp_index+0x12c>)
 801a8bc:	4840      	ldr	r0, [pc, #256]	; (801a9c0 <etharp_output_to_arp_index+0x130>)
 801a8be:	f003 fa3f 	bl	801dd40 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801a8c2:	79fa      	ldrb	r2, [r7, #7]
 801a8c4:	493b      	ldr	r1, [pc, #236]	; (801a9b4 <etharp_output_to_arp_index+0x124>)
 801a8c6:	4613      	mov	r3, r2
 801a8c8:	005b      	lsls	r3, r3, #1
 801a8ca:	4413      	add	r3, r2
 801a8cc:	00db      	lsls	r3, r3, #3
 801a8ce:	440b      	add	r3, r1
 801a8d0:	3314      	adds	r3, #20
 801a8d2:	781b      	ldrb	r3, [r3, #0]
 801a8d4:	2b02      	cmp	r3, #2
 801a8d6:	d153      	bne.n	801a980 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801a8d8:	79fa      	ldrb	r2, [r7, #7]
 801a8da:	4936      	ldr	r1, [pc, #216]	; (801a9b4 <etharp_output_to_arp_index+0x124>)
 801a8dc:	4613      	mov	r3, r2
 801a8de:	005b      	lsls	r3, r3, #1
 801a8e0:	4413      	add	r3, r2
 801a8e2:	00db      	lsls	r3, r3, #3
 801a8e4:	440b      	add	r3, r1
 801a8e6:	3312      	adds	r3, #18
 801a8e8:	881b      	ldrh	r3, [r3, #0]
 801a8ea:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801a8ee:	d919      	bls.n	801a924 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801a8f0:	79fa      	ldrb	r2, [r7, #7]
 801a8f2:	4613      	mov	r3, r2
 801a8f4:	005b      	lsls	r3, r3, #1
 801a8f6:	4413      	add	r3, r2
 801a8f8:	00db      	lsls	r3, r3, #3
 801a8fa:	4a2e      	ldr	r2, [pc, #184]	; (801a9b4 <etharp_output_to_arp_index+0x124>)
 801a8fc:	4413      	add	r3, r2
 801a8fe:	3304      	adds	r3, #4
 801a900:	4619      	mov	r1, r3
 801a902:	68f8      	ldr	r0, [r7, #12]
 801a904:	f000 fb4c 	bl	801afa0 <etharp_request>
 801a908:	4603      	mov	r3, r0
 801a90a:	2b00      	cmp	r3, #0
 801a90c:	d138      	bne.n	801a980 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801a90e:	79fa      	ldrb	r2, [r7, #7]
 801a910:	4928      	ldr	r1, [pc, #160]	; (801a9b4 <etharp_output_to_arp_index+0x124>)
 801a912:	4613      	mov	r3, r2
 801a914:	005b      	lsls	r3, r3, #1
 801a916:	4413      	add	r3, r2
 801a918:	00db      	lsls	r3, r3, #3
 801a91a:	440b      	add	r3, r1
 801a91c:	3314      	adds	r3, #20
 801a91e:	2203      	movs	r2, #3
 801a920:	701a      	strb	r2, [r3, #0]
 801a922:	e02d      	b.n	801a980 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801a924:	79fa      	ldrb	r2, [r7, #7]
 801a926:	4923      	ldr	r1, [pc, #140]	; (801a9b4 <etharp_output_to_arp_index+0x124>)
 801a928:	4613      	mov	r3, r2
 801a92a:	005b      	lsls	r3, r3, #1
 801a92c:	4413      	add	r3, r2
 801a92e:	00db      	lsls	r3, r3, #3
 801a930:	440b      	add	r3, r1
 801a932:	3312      	adds	r3, #18
 801a934:	881b      	ldrh	r3, [r3, #0]
 801a936:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801a93a:	d321      	bcc.n	801a980 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801a93c:	79fa      	ldrb	r2, [r7, #7]
 801a93e:	4613      	mov	r3, r2
 801a940:	005b      	lsls	r3, r3, #1
 801a942:	4413      	add	r3, r2
 801a944:	00db      	lsls	r3, r3, #3
 801a946:	4a1b      	ldr	r2, [pc, #108]	; (801a9b4 <etharp_output_to_arp_index+0x124>)
 801a948:	4413      	add	r3, r2
 801a94a:	1d19      	adds	r1, r3, #4
 801a94c:	79fa      	ldrb	r2, [r7, #7]
 801a94e:	4613      	mov	r3, r2
 801a950:	005b      	lsls	r3, r3, #1
 801a952:	4413      	add	r3, r2
 801a954:	00db      	lsls	r3, r3, #3
 801a956:	3308      	adds	r3, #8
 801a958:	4a16      	ldr	r2, [pc, #88]	; (801a9b4 <etharp_output_to_arp_index+0x124>)
 801a95a:	4413      	add	r3, r2
 801a95c:	3304      	adds	r3, #4
 801a95e:	461a      	mov	r2, r3
 801a960:	68f8      	ldr	r0, [r7, #12]
 801a962:	f000 fafb 	bl	801af5c <etharp_request_dst>
 801a966:	4603      	mov	r3, r0
 801a968:	2b00      	cmp	r3, #0
 801a96a:	d109      	bne.n	801a980 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801a96c:	79fa      	ldrb	r2, [r7, #7]
 801a96e:	4911      	ldr	r1, [pc, #68]	; (801a9b4 <etharp_output_to_arp_index+0x124>)
 801a970:	4613      	mov	r3, r2
 801a972:	005b      	lsls	r3, r3, #1
 801a974:	4413      	add	r3, r2
 801a976:	00db      	lsls	r3, r3, #3
 801a978:	440b      	add	r3, r1
 801a97a:	3314      	adds	r3, #20
 801a97c:	2203      	movs	r2, #3
 801a97e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801a980:	68fb      	ldr	r3, [r7, #12]
 801a982:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801a986:	79fa      	ldrb	r2, [r7, #7]
 801a988:	4613      	mov	r3, r2
 801a98a:	005b      	lsls	r3, r3, #1
 801a98c:	4413      	add	r3, r2
 801a98e:	00db      	lsls	r3, r3, #3
 801a990:	3308      	adds	r3, #8
 801a992:	4a08      	ldr	r2, [pc, #32]	; (801a9b4 <etharp_output_to_arp_index+0x124>)
 801a994:	4413      	add	r3, r2
 801a996:	3304      	adds	r3, #4
 801a998:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801a99c:	9200      	str	r2, [sp, #0]
 801a99e:	460a      	mov	r2, r1
 801a9a0:	68b9      	ldr	r1, [r7, #8]
 801a9a2:	68f8      	ldr	r0, [r7, #12]
 801a9a4:	f001 fe40 	bl	801c628 <ethernet_output>
 801a9a8:	4603      	mov	r3, r0
}
 801a9aa:	4618      	mov	r0, r3
 801a9ac:	3710      	adds	r7, #16
 801a9ae:	46bd      	mov	sp, r7
 801a9b0:	bd80      	pop	{r7, pc}
 801a9b2:	bf00      	nop
 801a9b4:	20024100 	.word	0x20024100
 801a9b8:	080210e4 	.word	0x080210e4
 801a9bc:	08021254 	.word	0x08021254
 801a9c0:	0802115c 	.word	0x0802115c

0801a9c4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801a9c4:	b580      	push	{r7, lr}
 801a9c6:	b08a      	sub	sp, #40	; 0x28
 801a9c8:	af02      	add	r7, sp, #8
 801a9ca:	60f8      	str	r0, [r7, #12]
 801a9cc:	60b9      	str	r1, [r7, #8]
 801a9ce:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801a9d0:	687b      	ldr	r3, [r7, #4]
 801a9d2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801a9d4:	68fb      	ldr	r3, [r7, #12]
 801a9d6:	2b00      	cmp	r3, #0
 801a9d8:	d106      	bne.n	801a9e8 <etharp_output+0x24>
 801a9da:	4b73      	ldr	r3, [pc, #460]	; (801aba8 <etharp_output+0x1e4>)
 801a9dc:	f240 321e 	movw	r2, #798	; 0x31e
 801a9e0:	4972      	ldr	r1, [pc, #456]	; (801abac <etharp_output+0x1e8>)
 801a9e2:	4873      	ldr	r0, [pc, #460]	; (801abb0 <etharp_output+0x1ec>)
 801a9e4:	f003 f9ac 	bl	801dd40 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801a9e8:	68bb      	ldr	r3, [r7, #8]
 801a9ea:	2b00      	cmp	r3, #0
 801a9ec:	d106      	bne.n	801a9fc <etharp_output+0x38>
 801a9ee:	4b6e      	ldr	r3, [pc, #440]	; (801aba8 <etharp_output+0x1e4>)
 801a9f0:	f240 321f 	movw	r2, #799	; 0x31f
 801a9f4:	496f      	ldr	r1, [pc, #444]	; (801abb4 <etharp_output+0x1f0>)
 801a9f6:	486e      	ldr	r0, [pc, #440]	; (801abb0 <etharp_output+0x1ec>)
 801a9f8:	f003 f9a2 	bl	801dd40 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801a9fc:	687b      	ldr	r3, [r7, #4]
 801a9fe:	2b00      	cmp	r3, #0
 801aa00:	d106      	bne.n	801aa10 <etharp_output+0x4c>
 801aa02:	4b69      	ldr	r3, [pc, #420]	; (801aba8 <etharp_output+0x1e4>)
 801aa04:	f44f 7248 	mov.w	r2, #800	; 0x320
 801aa08:	496b      	ldr	r1, [pc, #428]	; (801abb8 <etharp_output+0x1f4>)
 801aa0a:	4869      	ldr	r0, [pc, #420]	; (801abb0 <etharp_output+0x1ec>)
 801aa0c:	f003 f998 	bl	801dd40 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801aa10:	687b      	ldr	r3, [r7, #4]
 801aa12:	681b      	ldr	r3, [r3, #0]
 801aa14:	68f9      	ldr	r1, [r7, #12]
 801aa16:	4618      	mov	r0, r3
 801aa18:	f000 fef8 	bl	801b80c <ip4_addr_isbroadcast_u32>
 801aa1c:	4603      	mov	r3, r0
 801aa1e:	2b00      	cmp	r3, #0
 801aa20:	d002      	beq.n	801aa28 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801aa22:	4b66      	ldr	r3, [pc, #408]	; (801abbc <etharp_output+0x1f8>)
 801aa24:	61fb      	str	r3, [r7, #28]
 801aa26:	e0af      	b.n	801ab88 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801aa28:	687b      	ldr	r3, [r7, #4]
 801aa2a:	681b      	ldr	r3, [r3, #0]
 801aa2c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801aa30:	2be0      	cmp	r3, #224	; 0xe0
 801aa32:	d118      	bne.n	801aa66 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801aa34:	2301      	movs	r3, #1
 801aa36:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801aa38:	2300      	movs	r3, #0
 801aa3a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801aa3c:	235e      	movs	r3, #94	; 0x5e
 801aa3e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801aa40:	687b      	ldr	r3, [r7, #4]
 801aa42:	3301      	adds	r3, #1
 801aa44:	781b      	ldrb	r3, [r3, #0]
 801aa46:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801aa4a:	b2db      	uxtb	r3, r3
 801aa4c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801aa4e:	687b      	ldr	r3, [r7, #4]
 801aa50:	3302      	adds	r3, #2
 801aa52:	781b      	ldrb	r3, [r3, #0]
 801aa54:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801aa56:	687b      	ldr	r3, [r7, #4]
 801aa58:	3303      	adds	r3, #3
 801aa5a:	781b      	ldrb	r3, [r3, #0]
 801aa5c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801aa5e:	f107 0310 	add.w	r3, r7, #16
 801aa62:	61fb      	str	r3, [r7, #28]
 801aa64:	e090      	b.n	801ab88 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801aa66:	687b      	ldr	r3, [r7, #4]
 801aa68:	681a      	ldr	r2, [r3, #0]
 801aa6a:	68fb      	ldr	r3, [r7, #12]
 801aa6c:	3304      	adds	r3, #4
 801aa6e:	681b      	ldr	r3, [r3, #0]
 801aa70:	405a      	eors	r2, r3
 801aa72:	68fb      	ldr	r3, [r7, #12]
 801aa74:	3308      	adds	r3, #8
 801aa76:	681b      	ldr	r3, [r3, #0]
 801aa78:	4013      	ands	r3, r2
 801aa7a:	2b00      	cmp	r3, #0
 801aa7c:	d012      	beq.n	801aaa4 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801aa7e:	687b      	ldr	r3, [r7, #4]
 801aa80:	681b      	ldr	r3, [r3, #0]
 801aa82:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801aa84:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801aa88:	4293      	cmp	r3, r2
 801aa8a:	d00b      	beq.n	801aaa4 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801aa8c:	68fb      	ldr	r3, [r7, #12]
 801aa8e:	330c      	adds	r3, #12
 801aa90:	681b      	ldr	r3, [r3, #0]
 801aa92:	2b00      	cmp	r3, #0
 801aa94:	d003      	beq.n	801aa9e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801aa96:	68fb      	ldr	r3, [r7, #12]
 801aa98:	330c      	adds	r3, #12
 801aa9a:	61bb      	str	r3, [r7, #24]
 801aa9c:	e002      	b.n	801aaa4 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801aa9e:	f06f 0303 	mvn.w	r3, #3
 801aaa2:	e07d      	b.n	801aba0 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801aaa4:	4b46      	ldr	r3, [pc, #280]	; (801abc0 <etharp_output+0x1fc>)
 801aaa6:	781b      	ldrb	r3, [r3, #0]
 801aaa8:	4619      	mov	r1, r3
 801aaaa:	4a46      	ldr	r2, [pc, #280]	; (801abc4 <etharp_output+0x200>)
 801aaac:	460b      	mov	r3, r1
 801aaae:	005b      	lsls	r3, r3, #1
 801aab0:	440b      	add	r3, r1
 801aab2:	00db      	lsls	r3, r3, #3
 801aab4:	4413      	add	r3, r2
 801aab6:	3314      	adds	r3, #20
 801aab8:	781b      	ldrb	r3, [r3, #0]
 801aaba:	2b01      	cmp	r3, #1
 801aabc:	d925      	bls.n	801ab0a <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801aabe:	4b40      	ldr	r3, [pc, #256]	; (801abc0 <etharp_output+0x1fc>)
 801aac0:	781b      	ldrb	r3, [r3, #0]
 801aac2:	4619      	mov	r1, r3
 801aac4:	4a3f      	ldr	r2, [pc, #252]	; (801abc4 <etharp_output+0x200>)
 801aac6:	460b      	mov	r3, r1
 801aac8:	005b      	lsls	r3, r3, #1
 801aaca:	440b      	add	r3, r1
 801aacc:	00db      	lsls	r3, r3, #3
 801aace:	4413      	add	r3, r2
 801aad0:	3308      	adds	r3, #8
 801aad2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801aad4:	68fa      	ldr	r2, [r7, #12]
 801aad6:	429a      	cmp	r2, r3
 801aad8:	d117      	bne.n	801ab0a <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801aada:	69bb      	ldr	r3, [r7, #24]
 801aadc:	681a      	ldr	r2, [r3, #0]
 801aade:	4b38      	ldr	r3, [pc, #224]	; (801abc0 <etharp_output+0x1fc>)
 801aae0:	781b      	ldrb	r3, [r3, #0]
 801aae2:	4618      	mov	r0, r3
 801aae4:	4937      	ldr	r1, [pc, #220]	; (801abc4 <etharp_output+0x200>)
 801aae6:	4603      	mov	r3, r0
 801aae8:	005b      	lsls	r3, r3, #1
 801aaea:	4403      	add	r3, r0
 801aaec:	00db      	lsls	r3, r3, #3
 801aaee:	440b      	add	r3, r1
 801aaf0:	3304      	adds	r3, #4
 801aaf2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801aaf4:	429a      	cmp	r2, r3
 801aaf6:	d108      	bne.n	801ab0a <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801aaf8:	4b31      	ldr	r3, [pc, #196]	; (801abc0 <etharp_output+0x1fc>)
 801aafa:	781b      	ldrb	r3, [r3, #0]
 801aafc:	461a      	mov	r2, r3
 801aafe:	68b9      	ldr	r1, [r7, #8]
 801ab00:	68f8      	ldr	r0, [r7, #12]
 801ab02:	f7ff fec5 	bl	801a890 <etharp_output_to_arp_index>
 801ab06:	4603      	mov	r3, r0
 801ab08:	e04a      	b.n	801aba0 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801ab0a:	2300      	movs	r3, #0
 801ab0c:	75fb      	strb	r3, [r7, #23]
 801ab0e:	e031      	b.n	801ab74 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801ab10:	7dfa      	ldrb	r2, [r7, #23]
 801ab12:	492c      	ldr	r1, [pc, #176]	; (801abc4 <etharp_output+0x200>)
 801ab14:	4613      	mov	r3, r2
 801ab16:	005b      	lsls	r3, r3, #1
 801ab18:	4413      	add	r3, r2
 801ab1a:	00db      	lsls	r3, r3, #3
 801ab1c:	440b      	add	r3, r1
 801ab1e:	3314      	adds	r3, #20
 801ab20:	781b      	ldrb	r3, [r3, #0]
 801ab22:	2b01      	cmp	r3, #1
 801ab24:	d923      	bls.n	801ab6e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801ab26:	7dfa      	ldrb	r2, [r7, #23]
 801ab28:	4926      	ldr	r1, [pc, #152]	; (801abc4 <etharp_output+0x200>)
 801ab2a:	4613      	mov	r3, r2
 801ab2c:	005b      	lsls	r3, r3, #1
 801ab2e:	4413      	add	r3, r2
 801ab30:	00db      	lsls	r3, r3, #3
 801ab32:	440b      	add	r3, r1
 801ab34:	3308      	adds	r3, #8
 801ab36:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801ab38:	68fa      	ldr	r2, [r7, #12]
 801ab3a:	429a      	cmp	r2, r3
 801ab3c:	d117      	bne.n	801ab6e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801ab3e:	69bb      	ldr	r3, [r7, #24]
 801ab40:	6819      	ldr	r1, [r3, #0]
 801ab42:	7dfa      	ldrb	r2, [r7, #23]
 801ab44:	481f      	ldr	r0, [pc, #124]	; (801abc4 <etharp_output+0x200>)
 801ab46:	4613      	mov	r3, r2
 801ab48:	005b      	lsls	r3, r3, #1
 801ab4a:	4413      	add	r3, r2
 801ab4c:	00db      	lsls	r3, r3, #3
 801ab4e:	4403      	add	r3, r0
 801ab50:	3304      	adds	r3, #4
 801ab52:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801ab54:	4299      	cmp	r1, r3
 801ab56:	d10a      	bne.n	801ab6e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801ab58:	4a19      	ldr	r2, [pc, #100]	; (801abc0 <etharp_output+0x1fc>)
 801ab5a:	7dfb      	ldrb	r3, [r7, #23]
 801ab5c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801ab5e:	7dfb      	ldrb	r3, [r7, #23]
 801ab60:	461a      	mov	r2, r3
 801ab62:	68b9      	ldr	r1, [r7, #8]
 801ab64:	68f8      	ldr	r0, [r7, #12]
 801ab66:	f7ff fe93 	bl	801a890 <etharp_output_to_arp_index>
 801ab6a:	4603      	mov	r3, r0
 801ab6c:	e018      	b.n	801aba0 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801ab6e:	7dfb      	ldrb	r3, [r7, #23]
 801ab70:	3301      	adds	r3, #1
 801ab72:	75fb      	strb	r3, [r7, #23]
 801ab74:	7dfb      	ldrb	r3, [r7, #23]
 801ab76:	2b09      	cmp	r3, #9
 801ab78:	d9ca      	bls.n	801ab10 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801ab7a:	68ba      	ldr	r2, [r7, #8]
 801ab7c:	69b9      	ldr	r1, [r7, #24]
 801ab7e:	68f8      	ldr	r0, [r7, #12]
 801ab80:	f000 f822 	bl	801abc8 <etharp_query>
 801ab84:	4603      	mov	r3, r0
 801ab86:	e00b      	b.n	801aba0 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801ab88:	68fb      	ldr	r3, [r7, #12]
 801ab8a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801ab8e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801ab92:	9300      	str	r3, [sp, #0]
 801ab94:	69fb      	ldr	r3, [r7, #28]
 801ab96:	68b9      	ldr	r1, [r7, #8]
 801ab98:	68f8      	ldr	r0, [r7, #12]
 801ab9a:	f001 fd45 	bl	801c628 <ethernet_output>
 801ab9e:	4603      	mov	r3, r0
}
 801aba0:	4618      	mov	r0, r3
 801aba2:	3720      	adds	r7, #32
 801aba4:	46bd      	mov	sp, r7
 801aba6:	bd80      	pop	{r7, pc}
 801aba8:	080210e4 	.word	0x080210e4
 801abac:	08021234 	.word	0x08021234
 801abb0:	0802115c 	.word	0x0802115c
 801abb4:	08021284 	.word	0x08021284
 801abb8:	08021224 	.word	0x08021224
 801abbc:	08021914 	.word	0x08021914
 801abc0:	200241f0 	.word	0x200241f0
 801abc4:	20024100 	.word	0x20024100

0801abc8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801abc8:	b580      	push	{r7, lr}
 801abca:	b08c      	sub	sp, #48	; 0x30
 801abcc:	af02      	add	r7, sp, #8
 801abce:	60f8      	str	r0, [r7, #12]
 801abd0:	60b9      	str	r1, [r7, #8]
 801abd2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801abd4:	68fb      	ldr	r3, [r7, #12]
 801abd6:	3326      	adds	r3, #38	; 0x26
 801abd8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801abda:	23ff      	movs	r3, #255	; 0xff
 801abdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801abe0:	2300      	movs	r3, #0
 801abe2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801abe4:	68bb      	ldr	r3, [r7, #8]
 801abe6:	681b      	ldr	r3, [r3, #0]
 801abe8:	68f9      	ldr	r1, [r7, #12]
 801abea:	4618      	mov	r0, r3
 801abec:	f000 fe0e 	bl	801b80c <ip4_addr_isbroadcast_u32>
 801abf0:	4603      	mov	r3, r0
 801abf2:	2b00      	cmp	r3, #0
 801abf4:	d10c      	bne.n	801ac10 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801abf6:	68bb      	ldr	r3, [r7, #8]
 801abf8:	681b      	ldr	r3, [r3, #0]
 801abfa:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801abfe:	2be0      	cmp	r3, #224	; 0xe0
 801ac00:	d006      	beq.n	801ac10 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801ac02:	68bb      	ldr	r3, [r7, #8]
 801ac04:	2b00      	cmp	r3, #0
 801ac06:	d003      	beq.n	801ac10 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801ac08:	68bb      	ldr	r3, [r7, #8]
 801ac0a:	681b      	ldr	r3, [r3, #0]
 801ac0c:	2b00      	cmp	r3, #0
 801ac0e:	d102      	bne.n	801ac16 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801ac10:	f06f 030f 	mvn.w	r3, #15
 801ac14:	e101      	b.n	801ae1a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801ac16:	68fa      	ldr	r2, [r7, #12]
 801ac18:	2101      	movs	r1, #1
 801ac1a:	68b8      	ldr	r0, [r7, #8]
 801ac1c:	f7ff fb60 	bl	801a2e0 <etharp_find_entry>
 801ac20:	4603      	mov	r3, r0
 801ac22:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801ac24:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801ac28:	2b00      	cmp	r3, #0
 801ac2a:	da02      	bge.n	801ac32 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801ac2c:	8a7b      	ldrh	r3, [r7, #18]
 801ac2e:	b25b      	sxtb	r3, r3
 801ac30:	e0f3      	b.n	801ae1a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801ac32:	8a7b      	ldrh	r3, [r7, #18]
 801ac34:	2b7e      	cmp	r3, #126	; 0x7e
 801ac36:	d906      	bls.n	801ac46 <etharp_query+0x7e>
 801ac38:	4b7a      	ldr	r3, [pc, #488]	; (801ae24 <etharp_query+0x25c>)
 801ac3a:	f240 32c1 	movw	r2, #961	; 0x3c1
 801ac3e:	497a      	ldr	r1, [pc, #488]	; (801ae28 <etharp_query+0x260>)
 801ac40:	487a      	ldr	r0, [pc, #488]	; (801ae2c <etharp_query+0x264>)
 801ac42:	f003 f87d 	bl	801dd40 <iprintf>
  i = (netif_addr_idx_t)i_err;
 801ac46:	8a7b      	ldrh	r3, [r7, #18]
 801ac48:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801ac4a:	7c7a      	ldrb	r2, [r7, #17]
 801ac4c:	4978      	ldr	r1, [pc, #480]	; (801ae30 <etharp_query+0x268>)
 801ac4e:	4613      	mov	r3, r2
 801ac50:	005b      	lsls	r3, r3, #1
 801ac52:	4413      	add	r3, r2
 801ac54:	00db      	lsls	r3, r3, #3
 801ac56:	440b      	add	r3, r1
 801ac58:	3314      	adds	r3, #20
 801ac5a:	781b      	ldrb	r3, [r3, #0]
 801ac5c:	2b00      	cmp	r3, #0
 801ac5e:	d115      	bne.n	801ac8c <etharp_query+0xc4>
    is_new_entry = 1;
 801ac60:	2301      	movs	r3, #1
 801ac62:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801ac64:	7c7a      	ldrb	r2, [r7, #17]
 801ac66:	4972      	ldr	r1, [pc, #456]	; (801ae30 <etharp_query+0x268>)
 801ac68:	4613      	mov	r3, r2
 801ac6a:	005b      	lsls	r3, r3, #1
 801ac6c:	4413      	add	r3, r2
 801ac6e:	00db      	lsls	r3, r3, #3
 801ac70:	440b      	add	r3, r1
 801ac72:	3314      	adds	r3, #20
 801ac74:	2201      	movs	r2, #1
 801ac76:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801ac78:	7c7a      	ldrb	r2, [r7, #17]
 801ac7a:	496d      	ldr	r1, [pc, #436]	; (801ae30 <etharp_query+0x268>)
 801ac7c:	4613      	mov	r3, r2
 801ac7e:	005b      	lsls	r3, r3, #1
 801ac80:	4413      	add	r3, r2
 801ac82:	00db      	lsls	r3, r3, #3
 801ac84:	440b      	add	r3, r1
 801ac86:	3308      	adds	r3, #8
 801ac88:	68fa      	ldr	r2, [r7, #12]
 801ac8a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801ac8c:	7c7a      	ldrb	r2, [r7, #17]
 801ac8e:	4968      	ldr	r1, [pc, #416]	; (801ae30 <etharp_query+0x268>)
 801ac90:	4613      	mov	r3, r2
 801ac92:	005b      	lsls	r3, r3, #1
 801ac94:	4413      	add	r3, r2
 801ac96:	00db      	lsls	r3, r3, #3
 801ac98:	440b      	add	r3, r1
 801ac9a:	3314      	adds	r3, #20
 801ac9c:	781b      	ldrb	r3, [r3, #0]
 801ac9e:	2b01      	cmp	r3, #1
 801aca0:	d011      	beq.n	801acc6 <etharp_query+0xfe>
 801aca2:	7c7a      	ldrb	r2, [r7, #17]
 801aca4:	4962      	ldr	r1, [pc, #392]	; (801ae30 <etharp_query+0x268>)
 801aca6:	4613      	mov	r3, r2
 801aca8:	005b      	lsls	r3, r3, #1
 801acaa:	4413      	add	r3, r2
 801acac:	00db      	lsls	r3, r3, #3
 801acae:	440b      	add	r3, r1
 801acb0:	3314      	adds	r3, #20
 801acb2:	781b      	ldrb	r3, [r3, #0]
 801acb4:	2b01      	cmp	r3, #1
 801acb6:	d806      	bhi.n	801acc6 <etharp_query+0xfe>
 801acb8:	4b5a      	ldr	r3, [pc, #360]	; (801ae24 <etharp_query+0x25c>)
 801acba:	f240 32cd 	movw	r2, #973	; 0x3cd
 801acbe:	495d      	ldr	r1, [pc, #372]	; (801ae34 <etharp_query+0x26c>)
 801acc0:	485a      	ldr	r0, [pc, #360]	; (801ae2c <etharp_query+0x264>)
 801acc2:	f003 f83d 	bl	801dd40 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801acc6:	6a3b      	ldr	r3, [r7, #32]
 801acc8:	2b00      	cmp	r3, #0
 801acca:	d102      	bne.n	801acd2 <etharp_query+0x10a>
 801accc:	687b      	ldr	r3, [r7, #4]
 801acce:	2b00      	cmp	r3, #0
 801acd0:	d10c      	bne.n	801acec <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801acd2:	68b9      	ldr	r1, [r7, #8]
 801acd4:	68f8      	ldr	r0, [r7, #12]
 801acd6:	f000 f963 	bl	801afa0 <etharp_request>
 801acda:	4603      	mov	r3, r0
 801acdc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801ace0:	687b      	ldr	r3, [r7, #4]
 801ace2:	2b00      	cmp	r3, #0
 801ace4:	d102      	bne.n	801acec <etharp_query+0x124>
      return result;
 801ace6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801acea:	e096      	b.n	801ae1a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801acec:	687b      	ldr	r3, [r7, #4]
 801acee:	2b00      	cmp	r3, #0
 801acf0:	d106      	bne.n	801ad00 <etharp_query+0x138>
 801acf2:	4b4c      	ldr	r3, [pc, #304]	; (801ae24 <etharp_query+0x25c>)
 801acf4:	f240 32e1 	movw	r2, #993	; 0x3e1
 801acf8:	494f      	ldr	r1, [pc, #316]	; (801ae38 <etharp_query+0x270>)
 801acfa:	484c      	ldr	r0, [pc, #304]	; (801ae2c <etharp_query+0x264>)
 801acfc:	f003 f820 	bl	801dd40 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801ad00:	7c7a      	ldrb	r2, [r7, #17]
 801ad02:	494b      	ldr	r1, [pc, #300]	; (801ae30 <etharp_query+0x268>)
 801ad04:	4613      	mov	r3, r2
 801ad06:	005b      	lsls	r3, r3, #1
 801ad08:	4413      	add	r3, r2
 801ad0a:	00db      	lsls	r3, r3, #3
 801ad0c:	440b      	add	r3, r1
 801ad0e:	3314      	adds	r3, #20
 801ad10:	781b      	ldrb	r3, [r3, #0]
 801ad12:	2b01      	cmp	r3, #1
 801ad14:	d917      	bls.n	801ad46 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801ad16:	4a49      	ldr	r2, [pc, #292]	; (801ae3c <etharp_query+0x274>)
 801ad18:	7c7b      	ldrb	r3, [r7, #17]
 801ad1a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801ad1c:	7c7a      	ldrb	r2, [r7, #17]
 801ad1e:	4613      	mov	r3, r2
 801ad20:	005b      	lsls	r3, r3, #1
 801ad22:	4413      	add	r3, r2
 801ad24:	00db      	lsls	r3, r3, #3
 801ad26:	3308      	adds	r3, #8
 801ad28:	4a41      	ldr	r2, [pc, #260]	; (801ae30 <etharp_query+0x268>)
 801ad2a:	4413      	add	r3, r2
 801ad2c:	3304      	adds	r3, #4
 801ad2e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801ad32:	9200      	str	r2, [sp, #0]
 801ad34:	697a      	ldr	r2, [r7, #20]
 801ad36:	6879      	ldr	r1, [r7, #4]
 801ad38:	68f8      	ldr	r0, [r7, #12]
 801ad3a:	f001 fc75 	bl	801c628 <ethernet_output>
 801ad3e:	4603      	mov	r3, r0
 801ad40:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801ad44:	e067      	b.n	801ae16 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801ad46:	7c7a      	ldrb	r2, [r7, #17]
 801ad48:	4939      	ldr	r1, [pc, #228]	; (801ae30 <etharp_query+0x268>)
 801ad4a:	4613      	mov	r3, r2
 801ad4c:	005b      	lsls	r3, r3, #1
 801ad4e:	4413      	add	r3, r2
 801ad50:	00db      	lsls	r3, r3, #3
 801ad52:	440b      	add	r3, r1
 801ad54:	3314      	adds	r3, #20
 801ad56:	781b      	ldrb	r3, [r3, #0]
 801ad58:	2b01      	cmp	r3, #1
 801ad5a:	d15c      	bne.n	801ae16 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801ad5c:	2300      	movs	r3, #0
 801ad5e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801ad60:	687b      	ldr	r3, [r7, #4]
 801ad62:	61fb      	str	r3, [r7, #28]
    while (p) {
 801ad64:	e01c      	b.n	801ada0 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801ad66:	69fb      	ldr	r3, [r7, #28]
 801ad68:	895a      	ldrh	r2, [r3, #10]
 801ad6a:	69fb      	ldr	r3, [r7, #28]
 801ad6c:	891b      	ldrh	r3, [r3, #8]
 801ad6e:	429a      	cmp	r2, r3
 801ad70:	d10a      	bne.n	801ad88 <etharp_query+0x1c0>
 801ad72:	69fb      	ldr	r3, [r7, #28]
 801ad74:	681b      	ldr	r3, [r3, #0]
 801ad76:	2b00      	cmp	r3, #0
 801ad78:	d006      	beq.n	801ad88 <etharp_query+0x1c0>
 801ad7a:	4b2a      	ldr	r3, [pc, #168]	; (801ae24 <etharp_query+0x25c>)
 801ad7c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801ad80:	492f      	ldr	r1, [pc, #188]	; (801ae40 <etharp_query+0x278>)
 801ad82:	482a      	ldr	r0, [pc, #168]	; (801ae2c <etharp_query+0x264>)
 801ad84:	f002 ffdc 	bl	801dd40 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801ad88:	69fb      	ldr	r3, [r7, #28]
 801ad8a:	7b1b      	ldrb	r3, [r3, #12]
 801ad8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801ad90:	2b00      	cmp	r3, #0
 801ad92:	d002      	beq.n	801ad9a <etharp_query+0x1d2>
        copy_needed = 1;
 801ad94:	2301      	movs	r3, #1
 801ad96:	61bb      	str	r3, [r7, #24]
        break;
 801ad98:	e005      	b.n	801ada6 <etharp_query+0x1de>
      }
      p = p->next;
 801ad9a:	69fb      	ldr	r3, [r7, #28]
 801ad9c:	681b      	ldr	r3, [r3, #0]
 801ad9e:	61fb      	str	r3, [r7, #28]
    while (p) {
 801ada0:	69fb      	ldr	r3, [r7, #28]
 801ada2:	2b00      	cmp	r3, #0
 801ada4:	d1df      	bne.n	801ad66 <etharp_query+0x19e>
    }
    if (copy_needed) {
 801ada6:	69bb      	ldr	r3, [r7, #24]
 801ada8:	2b00      	cmp	r3, #0
 801adaa:	d007      	beq.n	801adbc <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801adac:	687a      	ldr	r2, [r7, #4]
 801adae:	f44f 7120 	mov.w	r1, #640	; 0x280
 801adb2:	200e      	movs	r0, #14
 801adb4:	f7f9 fa08 	bl	80141c8 <pbuf_clone>
 801adb8:	61f8      	str	r0, [r7, #28]
 801adba:	e004      	b.n	801adc6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801adbc:	687b      	ldr	r3, [r7, #4]
 801adbe:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801adc0:	69f8      	ldr	r0, [r7, #28]
 801adc2:	f7f9 f82f 	bl	8013e24 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801adc6:	69fb      	ldr	r3, [r7, #28]
 801adc8:	2b00      	cmp	r3, #0
 801adca:	d021      	beq.n	801ae10 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801adcc:	7c7a      	ldrb	r2, [r7, #17]
 801adce:	4918      	ldr	r1, [pc, #96]	; (801ae30 <etharp_query+0x268>)
 801add0:	4613      	mov	r3, r2
 801add2:	005b      	lsls	r3, r3, #1
 801add4:	4413      	add	r3, r2
 801add6:	00db      	lsls	r3, r3, #3
 801add8:	440b      	add	r3, r1
 801adda:	681b      	ldr	r3, [r3, #0]
 801addc:	2b00      	cmp	r3, #0
 801adde:	d00a      	beq.n	801adf6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801ade0:	7c7a      	ldrb	r2, [r7, #17]
 801ade2:	4913      	ldr	r1, [pc, #76]	; (801ae30 <etharp_query+0x268>)
 801ade4:	4613      	mov	r3, r2
 801ade6:	005b      	lsls	r3, r3, #1
 801ade8:	4413      	add	r3, r2
 801adea:	00db      	lsls	r3, r3, #3
 801adec:	440b      	add	r3, r1
 801adee:	681b      	ldr	r3, [r3, #0]
 801adf0:	4618      	mov	r0, r3
 801adf2:	f7f8 ff71 	bl	8013cd8 <pbuf_free>
      }
      arp_table[i].q = p;
 801adf6:	7c7a      	ldrb	r2, [r7, #17]
 801adf8:	490d      	ldr	r1, [pc, #52]	; (801ae30 <etharp_query+0x268>)
 801adfa:	4613      	mov	r3, r2
 801adfc:	005b      	lsls	r3, r3, #1
 801adfe:	4413      	add	r3, r2
 801ae00:	00db      	lsls	r3, r3, #3
 801ae02:	440b      	add	r3, r1
 801ae04:	69fa      	ldr	r2, [r7, #28]
 801ae06:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801ae08:	2300      	movs	r3, #0
 801ae0a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801ae0e:	e002      	b.n	801ae16 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801ae10:	23ff      	movs	r3, #255	; 0xff
 801ae12:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801ae16:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801ae1a:	4618      	mov	r0, r3
 801ae1c:	3728      	adds	r7, #40	; 0x28
 801ae1e:	46bd      	mov	sp, r7
 801ae20:	bd80      	pop	{r7, pc}
 801ae22:	bf00      	nop
 801ae24:	080210e4 	.word	0x080210e4
 801ae28:	08021290 	.word	0x08021290
 801ae2c:	0802115c 	.word	0x0802115c
 801ae30:	20024100 	.word	0x20024100
 801ae34:	080212a0 	.word	0x080212a0
 801ae38:	08021284 	.word	0x08021284
 801ae3c:	200241f0 	.word	0x200241f0
 801ae40:	080212c8 	.word	0x080212c8

0801ae44 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801ae44:	b580      	push	{r7, lr}
 801ae46:	b08a      	sub	sp, #40	; 0x28
 801ae48:	af02      	add	r7, sp, #8
 801ae4a:	60f8      	str	r0, [r7, #12]
 801ae4c:	60b9      	str	r1, [r7, #8]
 801ae4e:	607a      	str	r2, [r7, #4]
 801ae50:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801ae52:	2300      	movs	r3, #0
 801ae54:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801ae56:	68fb      	ldr	r3, [r7, #12]
 801ae58:	2b00      	cmp	r3, #0
 801ae5a:	d106      	bne.n	801ae6a <etharp_raw+0x26>
 801ae5c:	4b3a      	ldr	r3, [pc, #232]	; (801af48 <etharp_raw+0x104>)
 801ae5e:	f240 4257 	movw	r2, #1111	; 0x457
 801ae62:	493a      	ldr	r1, [pc, #232]	; (801af4c <etharp_raw+0x108>)
 801ae64:	483a      	ldr	r0, [pc, #232]	; (801af50 <etharp_raw+0x10c>)
 801ae66:	f002 ff6b 	bl	801dd40 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801ae6a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801ae6e:	211c      	movs	r1, #28
 801ae70:	200e      	movs	r0, #14
 801ae72:	f7f8 fc4d 	bl	8013710 <pbuf_alloc>
 801ae76:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801ae78:	69bb      	ldr	r3, [r7, #24]
 801ae7a:	2b00      	cmp	r3, #0
 801ae7c:	d102      	bne.n	801ae84 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801ae7e:	f04f 33ff 	mov.w	r3, #4294967295
 801ae82:	e05d      	b.n	801af40 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801ae84:	69bb      	ldr	r3, [r7, #24]
 801ae86:	895b      	ldrh	r3, [r3, #10]
 801ae88:	2b1b      	cmp	r3, #27
 801ae8a:	d806      	bhi.n	801ae9a <etharp_raw+0x56>
 801ae8c:	4b2e      	ldr	r3, [pc, #184]	; (801af48 <etharp_raw+0x104>)
 801ae8e:	f240 4262 	movw	r2, #1122	; 0x462
 801ae92:	4930      	ldr	r1, [pc, #192]	; (801af54 <etharp_raw+0x110>)
 801ae94:	482e      	ldr	r0, [pc, #184]	; (801af50 <etharp_raw+0x10c>)
 801ae96:	f002 ff53 	bl	801dd40 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801ae9a:	69bb      	ldr	r3, [r7, #24]
 801ae9c:	685b      	ldr	r3, [r3, #4]
 801ae9e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801aea0:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801aea2:	4618      	mov	r0, r3
 801aea4:	f7f7 fb16 	bl	80124d4 <lwip_htons>
 801aea8:	4603      	mov	r3, r0
 801aeaa:	461a      	mov	r2, r3
 801aeac:	697b      	ldr	r3, [r7, #20]
 801aeae:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801aeb0:	68fb      	ldr	r3, [r7, #12]
 801aeb2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801aeb6:	2b06      	cmp	r3, #6
 801aeb8:	d006      	beq.n	801aec8 <etharp_raw+0x84>
 801aeba:	4b23      	ldr	r3, [pc, #140]	; (801af48 <etharp_raw+0x104>)
 801aebc:	f240 4269 	movw	r2, #1129	; 0x469
 801aec0:	4925      	ldr	r1, [pc, #148]	; (801af58 <etharp_raw+0x114>)
 801aec2:	4823      	ldr	r0, [pc, #140]	; (801af50 <etharp_raw+0x10c>)
 801aec4:	f002 ff3c 	bl	801dd40 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801aec8:	697b      	ldr	r3, [r7, #20]
 801aeca:	3308      	adds	r3, #8
 801aecc:	2206      	movs	r2, #6
 801aece:	6839      	ldr	r1, [r7, #0]
 801aed0:	4618      	mov	r0, r3
 801aed2:	f003 f866 	bl	801dfa2 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801aed6:	697b      	ldr	r3, [r7, #20]
 801aed8:	3312      	adds	r3, #18
 801aeda:	2206      	movs	r2, #6
 801aedc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801aede:	4618      	mov	r0, r3
 801aee0:	f003 f85f 	bl	801dfa2 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801aee4:	697b      	ldr	r3, [r7, #20]
 801aee6:	330e      	adds	r3, #14
 801aee8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801aeea:	6812      	ldr	r2, [r2, #0]
 801aeec:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801aeee:	697b      	ldr	r3, [r7, #20]
 801aef0:	3318      	adds	r3, #24
 801aef2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801aef4:	6812      	ldr	r2, [r2, #0]
 801aef6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801aef8:	697b      	ldr	r3, [r7, #20]
 801aefa:	2200      	movs	r2, #0
 801aefc:	701a      	strb	r2, [r3, #0]
 801aefe:	2200      	movs	r2, #0
 801af00:	f042 0201 	orr.w	r2, r2, #1
 801af04:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801af06:	697b      	ldr	r3, [r7, #20]
 801af08:	2200      	movs	r2, #0
 801af0a:	f042 0208 	orr.w	r2, r2, #8
 801af0e:	709a      	strb	r2, [r3, #2]
 801af10:	2200      	movs	r2, #0
 801af12:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801af14:	697b      	ldr	r3, [r7, #20]
 801af16:	2206      	movs	r2, #6
 801af18:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801af1a:	697b      	ldr	r3, [r7, #20]
 801af1c:	2204      	movs	r2, #4
 801af1e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801af20:	f640 0306 	movw	r3, #2054	; 0x806
 801af24:	9300      	str	r3, [sp, #0]
 801af26:	687b      	ldr	r3, [r7, #4]
 801af28:	68ba      	ldr	r2, [r7, #8]
 801af2a:	69b9      	ldr	r1, [r7, #24]
 801af2c:	68f8      	ldr	r0, [r7, #12]
 801af2e:	f001 fb7b 	bl	801c628 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801af32:	69b8      	ldr	r0, [r7, #24]
 801af34:	f7f8 fed0 	bl	8013cd8 <pbuf_free>
  p = NULL;
 801af38:	2300      	movs	r3, #0
 801af3a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801af3c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801af40:	4618      	mov	r0, r3
 801af42:	3720      	adds	r7, #32
 801af44:	46bd      	mov	sp, r7
 801af46:	bd80      	pop	{r7, pc}
 801af48:	080210e4 	.word	0x080210e4
 801af4c:	08021234 	.word	0x08021234
 801af50:	0802115c 	.word	0x0802115c
 801af54:	080212e4 	.word	0x080212e4
 801af58:	08021318 	.word	0x08021318

0801af5c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801af5c:	b580      	push	{r7, lr}
 801af5e:	b088      	sub	sp, #32
 801af60:	af04      	add	r7, sp, #16
 801af62:	60f8      	str	r0, [r7, #12]
 801af64:	60b9      	str	r1, [r7, #8]
 801af66:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801af68:	68fb      	ldr	r3, [r7, #12]
 801af6a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801af6e:	68fb      	ldr	r3, [r7, #12]
 801af70:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801af74:	68fb      	ldr	r3, [r7, #12]
 801af76:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801af78:	2201      	movs	r2, #1
 801af7a:	9203      	str	r2, [sp, #12]
 801af7c:	68ba      	ldr	r2, [r7, #8]
 801af7e:	9202      	str	r2, [sp, #8]
 801af80:	4a06      	ldr	r2, [pc, #24]	; (801af9c <etharp_request_dst+0x40>)
 801af82:	9201      	str	r2, [sp, #4]
 801af84:	9300      	str	r3, [sp, #0]
 801af86:	4603      	mov	r3, r0
 801af88:	687a      	ldr	r2, [r7, #4]
 801af8a:	68f8      	ldr	r0, [r7, #12]
 801af8c:	f7ff ff5a 	bl	801ae44 <etharp_raw>
 801af90:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801af92:	4618      	mov	r0, r3
 801af94:	3710      	adds	r7, #16
 801af96:	46bd      	mov	sp, r7
 801af98:	bd80      	pop	{r7, pc}
 801af9a:	bf00      	nop
 801af9c:	0802191c 	.word	0x0802191c

0801afa0 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801afa0:	b580      	push	{r7, lr}
 801afa2:	b082      	sub	sp, #8
 801afa4:	af00      	add	r7, sp, #0
 801afa6:	6078      	str	r0, [r7, #4]
 801afa8:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801afaa:	4a05      	ldr	r2, [pc, #20]	; (801afc0 <etharp_request+0x20>)
 801afac:	6839      	ldr	r1, [r7, #0]
 801afae:	6878      	ldr	r0, [r7, #4]
 801afb0:	f7ff ffd4 	bl	801af5c <etharp_request_dst>
 801afb4:	4603      	mov	r3, r0
}
 801afb6:	4618      	mov	r0, r3
 801afb8:	3708      	adds	r7, #8
 801afba:	46bd      	mov	sp, r7
 801afbc:	bd80      	pop	{r7, pc}
 801afbe:	bf00      	nop
 801afc0:	08021914 	.word	0x08021914

0801afc4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801afc4:	b580      	push	{r7, lr}
 801afc6:	b08e      	sub	sp, #56	; 0x38
 801afc8:	af04      	add	r7, sp, #16
 801afca:	6078      	str	r0, [r7, #4]
 801afcc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801afce:	4b79      	ldr	r3, [pc, #484]	; (801b1b4 <icmp_input+0x1f0>)
 801afd0:	689b      	ldr	r3, [r3, #8]
 801afd2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801afd4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801afd6:	781b      	ldrb	r3, [r3, #0]
 801afd8:	f003 030f 	and.w	r3, r3, #15
 801afdc:	b2db      	uxtb	r3, r3
 801afde:	009b      	lsls	r3, r3, #2
 801afe0:	b2db      	uxtb	r3, r3
 801afe2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801afe4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801afe6:	2b13      	cmp	r3, #19
 801afe8:	f240 80cd 	bls.w	801b186 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801afec:	687b      	ldr	r3, [r7, #4]
 801afee:	895b      	ldrh	r3, [r3, #10]
 801aff0:	2b03      	cmp	r3, #3
 801aff2:	f240 80ca 	bls.w	801b18a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801aff6:	687b      	ldr	r3, [r7, #4]
 801aff8:	685b      	ldr	r3, [r3, #4]
 801affa:	781b      	ldrb	r3, [r3, #0]
 801affc:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801b000:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801b004:	2b00      	cmp	r3, #0
 801b006:	f000 80b7 	beq.w	801b178 <icmp_input+0x1b4>
 801b00a:	2b08      	cmp	r3, #8
 801b00c:	f040 80b7 	bne.w	801b17e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801b010:	4b69      	ldr	r3, [pc, #420]	; (801b1b8 <icmp_input+0x1f4>)
 801b012:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b014:	4b67      	ldr	r3, [pc, #412]	; (801b1b4 <icmp_input+0x1f0>)
 801b016:	695b      	ldr	r3, [r3, #20]
 801b018:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801b01c:	2be0      	cmp	r3, #224	; 0xe0
 801b01e:	f000 80bb 	beq.w	801b198 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801b022:	4b64      	ldr	r3, [pc, #400]	; (801b1b4 <icmp_input+0x1f0>)
 801b024:	695b      	ldr	r3, [r3, #20]
 801b026:	4a63      	ldr	r2, [pc, #396]	; (801b1b4 <icmp_input+0x1f0>)
 801b028:	6812      	ldr	r2, [r2, #0]
 801b02a:	4611      	mov	r1, r2
 801b02c:	4618      	mov	r0, r3
 801b02e:	f000 fbed 	bl	801b80c <ip4_addr_isbroadcast_u32>
 801b032:	4603      	mov	r3, r0
 801b034:	2b00      	cmp	r3, #0
 801b036:	f040 80b1 	bne.w	801b19c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801b03a:	687b      	ldr	r3, [r7, #4]
 801b03c:	891b      	ldrh	r3, [r3, #8]
 801b03e:	2b07      	cmp	r3, #7
 801b040:	f240 80a5 	bls.w	801b18e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801b044:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b046:	330e      	adds	r3, #14
 801b048:	4619      	mov	r1, r3
 801b04a:	6878      	ldr	r0, [r7, #4]
 801b04c:	f7f8 fdae 	bl	8013bac <pbuf_add_header>
 801b050:	4603      	mov	r3, r0
 801b052:	2b00      	cmp	r3, #0
 801b054:	d04b      	beq.n	801b0ee <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801b056:	687b      	ldr	r3, [r7, #4]
 801b058:	891a      	ldrh	r2, [r3, #8]
 801b05a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b05c:	4413      	add	r3, r2
 801b05e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801b060:	687b      	ldr	r3, [r7, #4]
 801b062:	891b      	ldrh	r3, [r3, #8]
 801b064:	8b7a      	ldrh	r2, [r7, #26]
 801b066:	429a      	cmp	r2, r3
 801b068:	f0c0 809a 	bcc.w	801b1a0 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801b06c:	8b7b      	ldrh	r3, [r7, #26]
 801b06e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b072:	4619      	mov	r1, r3
 801b074:	200e      	movs	r0, #14
 801b076:	f7f8 fb4b 	bl	8013710 <pbuf_alloc>
 801b07a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801b07c:	697b      	ldr	r3, [r7, #20]
 801b07e:	2b00      	cmp	r3, #0
 801b080:	f000 8090 	beq.w	801b1a4 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801b084:	697b      	ldr	r3, [r7, #20]
 801b086:	895b      	ldrh	r3, [r3, #10]
 801b088:	461a      	mov	r2, r3
 801b08a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b08c:	3308      	adds	r3, #8
 801b08e:	429a      	cmp	r2, r3
 801b090:	d203      	bcs.n	801b09a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801b092:	6978      	ldr	r0, [r7, #20]
 801b094:	f7f8 fe20 	bl	8013cd8 <pbuf_free>
          goto icmperr;
 801b098:	e085      	b.n	801b1a6 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801b09a:	697b      	ldr	r3, [r7, #20]
 801b09c:	685b      	ldr	r3, [r3, #4]
 801b09e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801b0a0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801b0a2:	4618      	mov	r0, r3
 801b0a4:	f002 ff7d 	bl	801dfa2 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801b0a8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b0aa:	4619      	mov	r1, r3
 801b0ac:	6978      	ldr	r0, [r7, #20]
 801b0ae:	f7f8 fd8d 	bl	8013bcc <pbuf_remove_header>
 801b0b2:	4603      	mov	r3, r0
 801b0b4:	2b00      	cmp	r3, #0
 801b0b6:	d009      	beq.n	801b0cc <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801b0b8:	4b40      	ldr	r3, [pc, #256]	; (801b1bc <icmp_input+0x1f8>)
 801b0ba:	22b6      	movs	r2, #182	; 0xb6
 801b0bc:	4940      	ldr	r1, [pc, #256]	; (801b1c0 <icmp_input+0x1fc>)
 801b0be:	4841      	ldr	r0, [pc, #260]	; (801b1c4 <icmp_input+0x200>)
 801b0c0:	f002 fe3e 	bl	801dd40 <iprintf>
          pbuf_free(r);
 801b0c4:	6978      	ldr	r0, [r7, #20]
 801b0c6:	f7f8 fe07 	bl	8013cd8 <pbuf_free>
          goto icmperr;
 801b0ca:	e06c      	b.n	801b1a6 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801b0cc:	6879      	ldr	r1, [r7, #4]
 801b0ce:	6978      	ldr	r0, [r7, #20]
 801b0d0:	f7f8 ff36 	bl	8013f40 <pbuf_copy>
 801b0d4:	4603      	mov	r3, r0
 801b0d6:	2b00      	cmp	r3, #0
 801b0d8:	d003      	beq.n	801b0e2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801b0da:	6978      	ldr	r0, [r7, #20]
 801b0dc:	f7f8 fdfc 	bl	8013cd8 <pbuf_free>
          goto icmperr;
 801b0e0:	e061      	b.n	801b1a6 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801b0e2:	6878      	ldr	r0, [r7, #4]
 801b0e4:	f7f8 fdf8 	bl	8013cd8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801b0e8:	697b      	ldr	r3, [r7, #20]
 801b0ea:	607b      	str	r3, [r7, #4]
 801b0ec:	e00f      	b.n	801b10e <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801b0ee:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b0f0:	330e      	adds	r3, #14
 801b0f2:	4619      	mov	r1, r3
 801b0f4:	6878      	ldr	r0, [r7, #4]
 801b0f6:	f7f8 fd69 	bl	8013bcc <pbuf_remove_header>
 801b0fa:	4603      	mov	r3, r0
 801b0fc:	2b00      	cmp	r3, #0
 801b0fe:	d006      	beq.n	801b10e <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801b100:	4b2e      	ldr	r3, [pc, #184]	; (801b1bc <icmp_input+0x1f8>)
 801b102:	22c7      	movs	r2, #199	; 0xc7
 801b104:	4930      	ldr	r1, [pc, #192]	; (801b1c8 <icmp_input+0x204>)
 801b106:	482f      	ldr	r0, [pc, #188]	; (801b1c4 <icmp_input+0x200>)
 801b108:	f002 fe1a 	bl	801dd40 <iprintf>
          goto icmperr;
 801b10c:	e04b      	b.n	801b1a6 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801b10e:	687b      	ldr	r3, [r7, #4]
 801b110:	685b      	ldr	r3, [r3, #4]
 801b112:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801b114:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801b116:	4619      	mov	r1, r3
 801b118:	6878      	ldr	r0, [r7, #4]
 801b11a:	f7f8 fd47 	bl	8013bac <pbuf_add_header>
 801b11e:	4603      	mov	r3, r0
 801b120:	2b00      	cmp	r3, #0
 801b122:	d12b      	bne.n	801b17c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801b124:	687b      	ldr	r3, [r7, #4]
 801b126:	685b      	ldr	r3, [r3, #4]
 801b128:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801b12a:	69fb      	ldr	r3, [r7, #28]
 801b12c:	681a      	ldr	r2, [r3, #0]
 801b12e:	68fb      	ldr	r3, [r7, #12]
 801b130:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801b132:	4b20      	ldr	r3, [pc, #128]	; (801b1b4 <icmp_input+0x1f0>)
 801b134:	691a      	ldr	r2, [r3, #16]
 801b136:	68fb      	ldr	r3, [r7, #12]
 801b138:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801b13a:	693b      	ldr	r3, [r7, #16]
 801b13c:	2200      	movs	r2, #0
 801b13e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801b140:	693b      	ldr	r3, [r7, #16]
 801b142:	2200      	movs	r2, #0
 801b144:	709a      	strb	r2, [r3, #2]
 801b146:	2200      	movs	r2, #0
 801b148:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801b14a:	68fb      	ldr	r3, [r7, #12]
 801b14c:	22ff      	movs	r2, #255	; 0xff
 801b14e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801b150:	68fb      	ldr	r3, [r7, #12]
 801b152:	2200      	movs	r2, #0
 801b154:	729a      	strb	r2, [r3, #10]
 801b156:	2200      	movs	r2, #0
 801b158:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801b15a:	683b      	ldr	r3, [r7, #0]
 801b15c:	9302      	str	r3, [sp, #8]
 801b15e:	2301      	movs	r3, #1
 801b160:	9301      	str	r3, [sp, #4]
 801b162:	2300      	movs	r3, #0
 801b164:	9300      	str	r3, [sp, #0]
 801b166:	23ff      	movs	r3, #255	; 0xff
 801b168:	2200      	movs	r2, #0
 801b16a:	69f9      	ldr	r1, [r7, #28]
 801b16c:	6878      	ldr	r0, [r7, #4]
 801b16e:	f000 fa75 	bl	801b65c <ip4_output_if>
 801b172:	4603      	mov	r3, r0
 801b174:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801b176:	e001      	b.n	801b17c <icmp_input+0x1b8>
      break;
 801b178:	bf00      	nop
 801b17a:	e000      	b.n	801b17e <icmp_input+0x1ba>
      break;
 801b17c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801b17e:	6878      	ldr	r0, [r7, #4]
 801b180:	f7f8 fdaa 	bl	8013cd8 <pbuf_free>
  return;
 801b184:	e013      	b.n	801b1ae <icmp_input+0x1ea>
    goto lenerr;
 801b186:	bf00      	nop
 801b188:	e002      	b.n	801b190 <icmp_input+0x1cc>
    goto lenerr;
 801b18a:	bf00      	nop
 801b18c:	e000      	b.n	801b190 <icmp_input+0x1cc>
        goto lenerr;
 801b18e:	bf00      	nop
lenerr:
  pbuf_free(p);
 801b190:	6878      	ldr	r0, [r7, #4]
 801b192:	f7f8 fda1 	bl	8013cd8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801b196:	e00a      	b.n	801b1ae <icmp_input+0x1ea>
        goto icmperr;
 801b198:	bf00      	nop
 801b19a:	e004      	b.n	801b1a6 <icmp_input+0x1e2>
        goto icmperr;
 801b19c:	bf00      	nop
 801b19e:	e002      	b.n	801b1a6 <icmp_input+0x1e2>
          goto icmperr;
 801b1a0:	bf00      	nop
 801b1a2:	e000      	b.n	801b1a6 <icmp_input+0x1e2>
          goto icmperr;
 801b1a4:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801b1a6:	6878      	ldr	r0, [r7, #4]
 801b1a8:	f7f8 fd96 	bl	8013cd8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801b1ac:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801b1ae:	3728      	adds	r7, #40	; 0x28
 801b1b0:	46bd      	mov	sp, r7
 801b1b2:	bd80      	pop	{r7, pc}
 801b1b4:	2001e7bc 	.word	0x2001e7bc
 801b1b8:	2001e7d0 	.word	0x2001e7d0
 801b1bc:	0802135c 	.word	0x0802135c
 801b1c0:	08021394 	.word	0x08021394
 801b1c4:	080213cc 	.word	0x080213cc
 801b1c8:	080213f4 	.word	0x080213f4

0801b1cc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801b1cc:	b580      	push	{r7, lr}
 801b1ce:	b082      	sub	sp, #8
 801b1d0:	af00      	add	r7, sp, #0
 801b1d2:	6078      	str	r0, [r7, #4]
 801b1d4:	460b      	mov	r3, r1
 801b1d6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801b1d8:	78fb      	ldrb	r3, [r7, #3]
 801b1da:	461a      	mov	r2, r3
 801b1dc:	2103      	movs	r1, #3
 801b1de:	6878      	ldr	r0, [r7, #4]
 801b1e0:	f000 f814 	bl	801b20c <icmp_send_response>
}
 801b1e4:	bf00      	nop
 801b1e6:	3708      	adds	r7, #8
 801b1e8:	46bd      	mov	sp, r7
 801b1ea:	bd80      	pop	{r7, pc}

0801b1ec <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801b1ec:	b580      	push	{r7, lr}
 801b1ee:	b082      	sub	sp, #8
 801b1f0:	af00      	add	r7, sp, #0
 801b1f2:	6078      	str	r0, [r7, #4]
 801b1f4:	460b      	mov	r3, r1
 801b1f6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801b1f8:	78fb      	ldrb	r3, [r7, #3]
 801b1fa:	461a      	mov	r2, r3
 801b1fc:	210b      	movs	r1, #11
 801b1fe:	6878      	ldr	r0, [r7, #4]
 801b200:	f000 f804 	bl	801b20c <icmp_send_response>
}
 801b204:	bf00      	nop
 801b206:	3708      	adds	r7, #8
 801b208:	46bd      	mov	sp, r7
 801b20a:	bd80      	pop	{r7, pc}

0801b20c <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801b20c:	b580      	push	{r7, lr}
 801b20e:	b08c      	sub	sp, #48	; 0x30
 801b210:	af04      	add	r7, sp, #16
 801b212:	6078      	str	r0, [r7, #4]
 801b214:	460b      	mov	r3, r1
 801b216:	70fb      	strb	r3, [r7, #3]
 801b218:	4613      	mov	r3, r2
 801b21a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801b21c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801b220:	2124      	movs	r1, #36	; 0x24
 801b222:	2022      	movs	r0, #34	; 0x22
 801b224:	f7f8 fa74 	bl	8013710 <pbuf_alloc>
 801b228:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801b22a:	69fb      	ldr	r3, [r7, #28]
 801b22c:	2b00      	cmp	r3, #0
 801b22e:	d04c      	beq.n	801b2ca <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801b230:	69fb      	ldr	r3, [r7, #28]
 801b232:	895b      	ldrh	r3, [r3, #10]
 801b234:	2b23      	cmp	r3, #35	; 0x23
 801b236:	d806      	bhi.n	801b246 <icmp_send_response+0x3a>
 801b238:	4b26      	ldr	r3, [pc, #152]	; (801b2d4 <icmp_send_response+0xc8>)
 801b23a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801b23e:	4926      	ldr	r1, [pc, #152]	; (801b2d8 <icmp_send_response+0xcc>)
 801b240:	4826      	ldr	r0, [pc, #152]	; (801b2dc <icmp_send_response+0xd0>)
 801b242:	f002 fd7d 	bl	801dd40 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801b246:	687b      	ldr	r3, [r7, #4]
 801b248:	685b      	ldr	r3, [r3, #4]
 801b24a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801b24c:	69fb      	ldr	r3, [r7, #28]
 801b24e:	685b      	ldr	r3, [r3, #4]
 801b250:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801b252:	697b      	ldr	r3, [r7, #20]
 801b254:	78fa      	ldrb	r2, [r7, #3]
 801b256:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801b258:	697b      	ldr	r3, [r7, #20]
 801b25a:	78ba      	ldrb	r2, [r7, #2]
 801b25c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801b25e:	697b      	ldr	r3, [r7, #20]
 801b260:	2200      	movs	r2, #0
 801b262:	711a      	strb	r2, [r3, #4]
 801b264:	2200      	movs	r2, #0
 801b266:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801b268:	697b      	ldr	r3, [r7, #20]
 801b26a:	2200      	movs	r2, #0
 801b26c:	719a      	strb	r2, [r3, #6]
 801b26e:	2200      	movs	r2, #0
 801b270:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801b272:	69fb      	ldr	r3, [r7, #28]
 801b274:	685b      	ldr	r3, [r3, #4]
 801b276:	f103 0008 	add.w	r0, r3, #8
 801b27a:	687b      	ldr	r3, [r7, #4]
 801b27c:	685b      	ldr	r3, [r3, #4]
 801b27e:	221c      	movs	r2, #28
 801b280:	4619      	mov	r1, r3
 801b282:	f002 fe8e 	bl	801dfa2 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801b286:	69bb      	ldr	r3, [r7, #24]
 801b288:	68db      	ldr	r3, [r3, #12]
 801b28a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801b28c:	f107 030c 	add.w	r3, r7, #12
 801b290:	4618      	mov	r0, r3
 801b292:	f000 f825 	bl	801b2e0 <ip4_route>
 801b296:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801b298:	693b      	ldr	r3, [r7, #16]
 801b29a:	2b00      	cmp	r3, #0
 801b29c:	d011      	beq.n	801b2c2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801b29e:	697b      	ldr	r3, [r7, #20]
 801b2a0:	2200      	movs	r2, #0
 801b2a2:	709a      	strb	r2, [r3, #2]
 801b2a4:	2200      	movs	r2, #0
 801b2a6:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801b2a8:	f107 020c 	add.w	r2, r7, #12
 801b2ac:	693b      	ldr	r3, [r7, #16]
 801b2ae:	9302      	str	r3, [sp, #8]
 801b2b0:	2301      	movs	r3, #1
 801b2b2:	9301      	str	r3, [sp, #4]
 801b2b4:	2300      	movs	r3, #0
 801b2b6:	9300      	str	r3, [sp, #0]
 801b2b8:	23ff      	movs	r3, #255	; 0xff
 801b2ba:	2100      	movs	r1, #0
 801b2bc:	69f8      	ldr	r0, [r7, #28]
 801b2be:	f000 f9cd 	bl	801b65c <ip4_output_if>
  }
  pbuf_free(q);
 801b2c2:	69f8      	ldr	r0, [r7, #28]
 801b2c4:	f7f8 fd08 	bl	8013cd8 <pbuf_free>
 801b2c8:	e000      	b.n	801b2cc <icmp_send_response+0xc0>
    return;
 801b2ca:	bf00      	nop
}
 801b2cc:	3720      	adds	r7, #32
 801b2ce:	46bd      	mov	sp, r7
 801b2d0:	bd80      	pop	{r7, pc}
 801b2d2:	bf00      	nop
 801b2d4:	0802135c 	.word	0x0802135c
 801b2d8:	08021428 	.word	0x08021428
 801b2dc:	080213cc 	.word	0x080213cc

0801b2e0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801b2e0:	b480      	push	{r7}
 801b2e2:	b085      	sub	sp, #20
 801b2e4:	af00      	add	r7, sp, #0
 801b2e6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801b2e8:	4b33      	ldr	r3, [pc, #204]	; (801b3b8 <ip4_route+0xd8>)
 801b2ea:	681b      	ldr	r3, [r3, #0]
 801b2ec:	60fb      	str	r3, [r7, #12]
 801b2ee:	e036      	b.n	801b35e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801b2f0:	68fb      	ldr	r3, [r7, #12]
 801b2f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b2f6:	f003 0301 	and.w	r3, r3, #1
 801b2fa:	b2db      	uxtb	r3, r3
 801b2fc:	2b00      	cmp	r3, #0
 801b2fe:	d02b      	beq.n	801b358 <ip4_route+0x78>
 801b300:	68fb      	ldr	r3, [r7, #12]
 801b302:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b306:	089b      	lsrs	r3, r3, #2
 801b308:	f003 0301 	and.w	r3, r3, #1
 801b30c:	b2db      	uxtb	r3, r3
 801b30e:	2b00      	cmp	r3, #0
 801b310:	d022      	beq.n	801b358 <ip4_route+0x78>
 801b312:	68fb      	ldr	r3, [r7, #12]
 801b314:	3304      	adds	r3, #4
 801b316:	681b      	ldr	r3, [r3, #0]
 801b318:	2b00      	cmp	r3, #0
 801b31a:	d01d      	beq.n	801b358 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801b31c:	687b      	ldr	r3, [r7, #4]
 801b31e:	681a      	ldr	r2, [r3, #0]
 801b320:	68fb      	ldr	r3, [r7, #12]
 801b322:	3304      	adds	r3, #4
 801b324:	681b      	ldr	r3, [r3, #0]
 801b326:	405a      	eors	r2, r3
 801b328:	68fb      	ldr	r3, [r7, #12]
 801b32a:	3308      	adds	r3, #8
 801b32c:	681b      	ldr	r3, [r3, #0]
 801b32e:	4013      	ands	r3, r2
 801b330:	2b00      	cmp	r3, #0
 801b332:	d101      	bne.n	801b338 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801b334:	68fb      	ldr	r3, [r7, #12]
 801b336:	e038      	b.n	801b3aa <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801b338:	68fb      	ldr	r3, [r7, #12]
 801b33a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b33e:	f003 0302 	and.w	r3, r3, #2
 801b342:	2b00      	cmp	r3, #0
 801b344:	d108      	bne.n	801b358 <ip4_route+0x78>
 801b346:	687b      	ldr	r3, [r7, #4]
 801b348:	681a      	ldr	r2, [r3, #0]
 801b34a:	68fb      	ldr	r3, [r7, #12]
 801b34c:	330c      	adds	r3, #12
 801b34e:	681b      	ldr	r3, [r3, #0]
 801b350:	429a      	cmp	r2, r3
 801b352:	d101      	bne.n	801b358 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801b354:	68fb      	ldr	r3, [r7, #12]
 801b356:	e028      	b.n	801b3aa <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801b358:	68fb      	ldr	r3, [r7, #12]
 801b35a:	681b      	ldr	r3, [r3, #0]
 801b35c:	60fb      	str	r3, [r7, #12]
 801b35e:	68fb      	ldr	r3, [r7, #12]
 801b360:	2b00      	cmp	r3, #0
 801b362:	d1c5      	bne.n	801b2f0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801b364:	4b15      	ldr	r3, [pc, #84]	; (801b3bc <ip4_route+0xdc>)
 801b366:	681b      	ldr	r3, [r3, #0]
 801b368:	2b00      	cmp	r3, #0
 801b36a:	d01a      	beq.n	801b3a2 <ip4_route+0xc2>
 801b36c:	4b13      	ldr	r3, [pc, #76]	; (801b3bc <ip4_route+0xdc>)
 801b36e:	681b      	ldr	r3, [r3, #0]
 801b370:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b374:	f003 0301 	and.w	r3, r3, #1
 801b378:	2b00      	cmp	r3, #0
 801b37a:	d012      	beq.n	801b3a2 <ip4_route+0xc2>
 801b37c:	4b0f      	ldr	r3, [pc, #60]	; (801b3bc <ip4_route+0xdc>)
 801b37e:	681b      	ldr	r3, [r3, #0]
 801b380:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b384:	f003 0304 	and.w	r3, r3, #4
 801b388:	2b00      	cmp	r3, #0
 801b38a:	d00a      	beq.n	801b3a2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801b38c:	4b0b      	ldr	r3, [pc, #44]	; (801b3bc <ip4_route+0xdc>)
 801b38e:	681b      	ldr	r3, [r3, #0]
 801b390:	3304      	adds	r3, #4
 801b392:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801b394:	2b00      	cmp	r3, #0
 801b396:	d004      	beq.n	801b3a2 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801b398:	687b      	ldr	r3, [r7, #4]
 801b39a:	681b      	ldr	r3, [r3, #0]
 801b39c:	b2db      	uxtb	r3, r3
 801b39e:	2b7f      	cmp	r3, #127	; 0x7f
 801b3a0:	d101      	bne.n	801b3a6 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801b3a2:	2300      	movs	r3, #0
 801b3a4:	e001      	b.n	801b3aa <ip4_route+0xca>
  }

  return netif_default;
 801b3a6:	4b05      	ldr	r3, [pc, #20]	; (801b3bc <ip4_route+0xdc>)
 801b3a8:	681b      	ldr	r3, [r3, #0]
}
 801b3aa:	4618      	mov	r0, r3
 801b3ac:	3714      	adds	r7, #20
 801b3ae:	46bd      	mov	sp, r7
 801b3b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b3b4:	4770      	bx	lr
 801b3b6:	bf00      	nop
 801b3b8:	20024094 	.word	0x20024094
 801b3bc:	20024098 	.word	0x20024098

0801b3c0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801b3c0:	b580      	push	{r7, lr}
 801b3c2:	b082      	sub	sp, #8
 801b3c4:	af00      	add	r7, sp, #0
 801b3c6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801b3c8:	687b      	ldr	r3, [r7, #4]
 801b3ca:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b3ce:	f003 0301 	and.w	r3, r3, #1
 801b3d2:	b2db      	uxtb	r3, r3
 801b3d4:	2b00      	cmp	r3, #0
 801b3d6:	d016      	beq.n	801b406 <ip4_input_accept+0x46>
 801b3d8:	687b      	ldr	r3, [r7, #4]
 801b3da:	3304      	adds	r3, #4
 801b3dc:	681b      	ldr	r3, [r3, #0]
 801b3de:	2b00      	cmp	r3, #0
 801b3e0:	d011      	beq.n	801b406 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801b3e2:	4b0b      	ldr	r3, [pc, #44]	; (801b410 <ip4_input_accept+0x50>)
 801b3e4:	695a      	ldr	r2, [r3, #20]
 801b3e6:	687b      	ldr	r3, [r7, #4]
 801b3e8:	3304      	adds	r3, #4
 801b3ea:	681b      	ldr	r3, [r3, #0]
 801b3ec:	429a      	cmp	r2, r3
 801b3ee:	d008      	beq.n	801b402 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801b3f0:	4b07      	ldr	r3, [pc, #28]	; (801b410 <ip4_input_accept+0x50>)
 801b3f2:	695b      	ldr	r3, [r3, #20]
 801b3f4:	6879      	ldr	r1, [r7, #4]
 801b3f6:	4618      	mov	r0, r3
 801b3f8:	f000 fa08 	bl	801b80c <ip4_addr_isbroadcast_u32>
 801b3fc:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801b3fe:	2b00      	cmp	r3, #0
 801b400:	d001      	beq.n	801b406 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801b402:	2301      	movs	r3, #1
 801b404:	e000      	b.n	801b408 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801b406:	2300      	movs	r3, #0
}
 801b408:	4618      	mov	r0, r3
 801b40a:	3708      	adds	r7, #8
 801b40c:	46bd      	mov	sp, r7
 801b40e:	bd80      	pop	{r7, pc}
 801b410:	2001e7bc 	.word	0x2001e7bc

0801b414 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801b414:	b580      	push	{r7, lr}
 801b416:	b086      	sub	sp, #24
 801b418:	af00      	add	r7, sp, #0
 801b41a:	6078      	str	r0, [r7, #4]
 801b41c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801b41e:	687b      	ldr	r3, [r7, #4]
 801b420:	685b      	ldr	r3, [r3, #4]
 801b422:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801b424:	697b      	ldr	r3, [r7, #20]
 801b426:	781b      	ldrb	r3, [r3, #0]
 801b428:	091b      	lsrs	r3, r3, #4
 801b42a:	b2db      	uxtb	r3, r3
 801b42c:	2b04      	cmp	r3, #4
 801b42e:	d004      	beq.n	801b43a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801b430:	6878      	ldr	r0, [r7, #4]
 801b432:	f7f8 fc51 	bl	8013cd8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801b436:	2300      	movs	r3, #0
 801b438:	e107      	b.n	801b64a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801b43a:	697b      	ldr	r3, [r7, #20]
 801b43c:	781b      	ldrb	r3, [r3, #0]
 801b43e:	f003 030f 	and.w	r3, r3, #15
 801b442:	b2db      	uxtb	r3, r3
 801b444:	009b      	lsls	r3, r3, #2
 801b446:	b2db      	uxtb	r3, r3
 801b448:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801b44a:	697b      	ldr	r3, [r7, #20]
 801b44c:	885b      	ldrh	r3, [r3, #2]
 801b44e:	b29b      	uxth	r3, r3
 801b450:	4618      	mov	r0, r3
 801b452:	f7f7 f83f 	bl	80124d4 <lwip_htons>
 801b456:	4603      	mov	r3, r0
 801b458:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801b45a:	687b      	ldr	r3, [r7, #4]
 801b45c:	891b      	ldrh	r3, [r3, #8]
 801b45e:	89ba      	ldrh	r2, [r7, #12]
 801b460:	429a      	cmp	r2, r3
 801b462:	d204      	bcs.n	801b46e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801b464:	89bb      	ldrh	r3, [r7, #12]
 801b466:	4619      	mov	r1, r3
 801b468:	6878      	ldr	r0, [r7, #4]
 801b46a:	f7f8 faaf 	bl	80139cc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801b46e:	687b      	ldr	r3, [r7, #4]
 801b470:	895b      	ldrh	r3, [r3, #10]
 801b472:	89fa      	ldrh	r2, [r7, #14]
 801b474:	429a      	cmp	r2, r3
 801b476:	d807      	bhi.n	801b488 <ip4_input+0x74>
 801b478:	687b      	ldr	r3, [r7, #4]
 801b47a:	891b      	ldrh	r3, [r3, #8]
 801b47c:	89ba      	ldrh	r2, [r7, #12]
 801b47e:	429a      	cmp	r2, r3
 801b480:	d802      	bhi.n	801b488 <ip4_input+0x74>
 801b482:	89fb      	ldrh	r3, [r7, #14]
 801b484:	2b13      	cmp	r3, #19
 801b486:	d804      	bhi.n	801b492 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801b488:	6878      	ldr	r0, [r7, #4]
 801b48a:	f7f8 fc25 	bl	8013cd8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801b48e:	2300      	movs	r3, #0
 801b490:	e0db      	b.n	801b64a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801b492:	697b      	ldr	r3, [r7, #20]
 801b494:	691b      	ldr	r3, [r3, #16]
 801b496:	4a6f      	ldr	r2, [pc, #444]	; (801b654 <ip4_input+0x240>)
 801b498:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801b49a:	697b      	ldr	r3, [r7, #20]
 801b49c:	68db      	ldr	r3, [r3, #12]
 801b49e:	4a6d      	ldr	r2, [pc, #436]	; (801b654 <ip4_input+0x240>)
 801b4a0:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b4a2:	4b6c      	ldr	r3, [pc, #432]	; (801b654 <ip4_input+0x240>)
 801b4a4:	695b      	ldr	r3, [r3, #20]
 801b4a6:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801b4aa:	2be0      	cmp	r3, #224	; 0xe0
 801b4ac:	d112      	bne.n	801b4d4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801b4ae:	683b      	ldr	r3, [r7, #0]
 801b4b0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b4b4:	f003 0301 	and.w	r3, r3, #1
 801b4b8:	b2db      	uxtb	r3, r3
 801b4ba:	2b00      	cmp	r3, #0
 801b4bc:	d007      	beq.n	801b4ce <ip4_input+0xba>
 801b4be:	683b      	ldr	r3, [r7, #0]
 801b4c0:	3304      	adds	r3, #4
 801b4c2:	681b      	ldr	r3, [r3, #0]
 801b4c4:	2b00      	cmp	r3, #0
 801b4c6:	d002      	beq.n	801b4ce <ip4_input+0xba>
      netif = inp;
 801b4c8:	683b      	ldr	r3, [r7, #0]
 801b4ca:	613b      	str	r3, [r7, #16]
 801b4cc:	e02a      	b.n	801b524 <ip4_input+0x110>
    } else {
      netif = NULL;
 801b4ce:	2300      	movs	r3, #0
 801b4d0:	613b      	str	r3, [r7, #16]
 801b4d2:	e027      	b.n	801b524 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801b4d4:	6838      	ldr	r0, [r7, #0]
 801b4d6:	f7ff ff73 	bl	801b3c0 <ip4_input_accept>
 801b4da:	4603      	mov	r3, r0
 801b4dc:	2b00      	cmp	r3, #0
 801b4de:	d002      	beq.n	801b4e6 <ip4_input+0xd2>
      netif = inp;
 801b4e0:	683b      	ldr	r3, [r7, #0]
 801b4e2:	613b      	str	r3, [r7, #16]
 801b4e4:	e01e      	b.n	801b524 <ip4_input+0x110>
    } else {
      netif = NULL;
 801b4e6:	2300      	movs	r3, #0
 801b4e8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801b4ea:	4b5a      	ldr	r3, [pc, #360]	; (801b654 <ip4_input+0x240>)
 801b4ec:	695b      	ldr	r3, [r3, #20]
 801b4ee:	b2db      	uxtb	r3, r3
 801b4f0:	2b7f      	cmp	r3, #127	; 0x7f
 801b4f2:	d017      	beq.n	801b524 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801b4f4:	4b58      	ldr	r3, [pc, #352]	; (801b658 <ip4_input+0x244>)
 801b4f6:	681b      	ldr	r3, [r3, #0]
 801b4f8:	613b      	str	r3, [r7, #16]
 801b4fa:	e00e      	b.n	801b51a <ip4_input+0x106>
          if (netif == inp) {
 801b4fc:	693a      	ldr	r2, [r7, #16]
 801b4fe:	683b      	ldr	r3, [r7, #0]
 801b500:	429a      	cmp	r2, r3
 801b502:	d006      	beq.n	801b512 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801b504:	6938      	ldr	r0, [r7, #16]
 801b506:	f7ff ff5b 	bl	801b3c0 <ip4_input_accept>
 801b50a:	4603      	mov	r3, r0
 801b50c:	2b00      	cmp	r3, #0
 801b50e:	d108      	bne.n	801b522 <ip4_input+0x10e>
 801b510:	e000      	b.n	801b514 <ip4_input+0x100>
            continue;
 801b512:	bf00      	nop
        NETIF_FOREACH(netif) {
 801b514:	693b      	ldr	r3, [r7, #16]
 801b516:	681b      	ldr	r3, [r3, #0]
 801b518:	613b      	str	r3, [r7, #16]
 801b51a:	693b      	ldr	r3, [r7, #16]
 801b51c:	2b00      	cmp	r3, #0
 801b51e:	d1ed      	bne.n	801b4fc <ip4_input+0xe8>
 801b520:	e000      	b.n	801b524 <ip4_input+0x110>
            break;
 801b522:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801b524:	4b4b      	ldr	r3, [pc, #300]	; (801b654 <ip4_input+0x240>)
 801b526:	691b      	ldr	r3, [r3, #16]
 801b528:	6839      	ldr	r1, [r7, #0]
 801b52a:	4618      	mov	r0, r3
 801b52c:	f000 f96e 	bl	801b80c <ip4_addr_isbroadcast_u32>
 801b530:	4603      	mov	r3, r0
 801b532:	2b00      	cmp	r3, #0
 801b534:	d105      	bne.n	801b542 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801b536:	4b47      	ldr	r3, [pc, #284]	; (801b654 <ip4_input+0x240>)
 801b538:	691b      	ldr	r3, [r3, #16]
 801b53a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801b53e:	2be0      	cmp	r3, #224	; 0xe0
 801b540:	d104      	bne.n	801b54c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801b542:	6878      	ldr	r0, [r7, #4]
 801b544:	f7f8 fbc8 	bl	8013cd8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801b548:	2300      	movs	r3, #0
 801b54a:	e07e      	b.n	801b64a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801b54c:	693b      	ldr	r3, [r7, #16]
 801b54e:	2b00      	cmp	r3, #0
 801b550:	d104      	bne.n	801b55c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801b552:	6878      	ldr	r0, [r7, #4]
 801b554:	f7f8 fbc0 	bl	8013cd8 <pbuf_free>
    return ERR_OK;
 801b558:	2300      	movs	r3, #0
 801b55a:	e076      	b.n	801b64a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801b55c:	697b      	ldr	r3, [r7, #20]
 801b55e:	88db      	ldrh	r3, [r3, #6]
 801b560:	b29b      	uxth	r3, r3
 801b562:	461a      	mov	r2, r3
 801b564:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801b568:	4013      	ands	r3, r2
 801b56a:	2b00      	cmp	r3, #0
 801b56c:	d00b      	beq.n	801b586 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801b56e:	6878      	ldr	r0, [r7, #4]
 801b570:	f000 fc92 	bl	801be98 <ip4_reass>
 801b574:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801b576:	687b      	ldr	r3, [r7, #4]
 801b578:	2b00      	cmp	r3, #0
 801b57a:	d101      	bne.n	801b580 <ip4_input+0x16c>
      return ERR_OK;
 801b57c:	2300      	movs	r3, #0
 801b57e:	e064      	b.n	801b64a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801b580:	687b      	ldr	r3, [r7, #4]
 801b582:	685b      	ldr	r3, [r3, #4]
 801b584:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801b586:	4a33      	ldr	r2, [pc, #204]	; (801b654 <ip4_input+0x240>)
 801b588:	693b      	ldr	r3, [r7, #16]
 801b58a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801b58c:	4a31      	ldr	r2, [pc, #196]	; (801b654 <ip4_input+0x240>)
 801b58e:	683b      	ldr	r3, [r7, #0]
 801b590:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801b592:	4a30      	ldr	r2, [pc, #192]	; (801b654 <ip4_input+0x240>)
 801b594:	697b      	ldr	r3, [r7, #20]
 801b596:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801b598:	697b      	ldr	r3, [r7, #20]
 801b59a:	781b      	ldrb	r3, [r3, #0]
 801b59c:	f003 030f 	and.w	r3, r3, #15
 801b5a0:	b2db      	uxtb	r3, r3
 801b5a2:	009b      	lsls	r3, r3, #2
 801b5a4:	b2db      	uxtb	r3, r3
 801b5a6:	b29a      	uxth	r2, r3
 801b5a8:	4b2a      	ldr	r3, [pc, #168]	; (801b654 <ip4_input+0x240>)
 801b5aa:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801b5ac:	89fb      	ldrh	r3, [r7, #14]
 801b5ae:	4619      	mov	r1, r3
 801b5b0:	6878      	ldr	r0, [r7, #4]
 801b5b2:	f7f8 fb0b 	bl	8013bcc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801b5b6:	697b      	ldr	r3, [r7, #20]
 801b5b8:	7a5b      	ldrb	r3, [r3, #9]
 801b5ba:	2b11      	cmp	r3, #17
 801b5bc:	d006      	beq.n	801b5cc <ip4_input+0x1b8>
 801b5be:	2b11      	cmp	r3, #17
 801b5c0:	dc13      	bgt.n	801b5ea <ip4_input+0x1d6>
 801b5c2:	2b01      	cmp	r3, #1
 801b5c4:	d00c      	beq.n	801b5e0 <ip4_input+0x1cc>
 801b5c6:	2b06      	cmp	r3, #6
 801b5c8:	d005      	beq.n	801b5d6 <ip4_input+0x1c2>
 801b5ca:	e00e      	b.n	801b5ea <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801b5cc:	6839      	ldr	r1, [r7, #0]
 801b5ce:	6878      	ldr	r0, [r7, #4]
 801b5d0:	f7fe f9b0 	bl	8019934 <udp_input>
        break;
 801b5d4:	e026      	b.n	801b624 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801b5d6:	6839      	ldr	r1, [r7, #0]
 801b5d8:	6878      	ldr	r0, [r7, #4]
 801b5da:	f7fa f9c1 	bl	8015960 <tcp_input>
        break;
 801b5de:	e021      	b.n	801b624 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801b5e0:	6839      	ldr	r1, [r7, #0]
 801b5e2:	6878      	ldr	r0, [r7, #4]
 801b5e4:	f7ff fcee 	bl	801afc4 <icmp_input>
        break;
 801b5e8:	e01c      	b.n	801b624 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801b5ea:	4b1a      	ldr	r3, [pc, #104]	; (801b654 <ip4_input+0x240>)
 801b5ec:	695b      	ldr	r3, [r3, #20]
 801b5ee:	6939      	ldr	r1, [r7, #16]
 801b5f0:	4618      	mov	r0, r3
 801b5f2:	f000 f90b 	bl	801b80c <ip4_addr_isbroadcast_u32>
 801b5f6:	4603      	mov	r3, r0
 801b5f8:	2b00      	cmp	r3, #0
 801b5fa:	d10f      	bne.n	801b61c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801b5fc:	4b15      	ldr	r3, [pc, #84]	; (801b654 <ip4_input+0x240>)
 801b5fe:	695b      	ldr	r3, [r3, #20]
 801b600:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801b604:	2be0      	cmp	r3, #224	; 0xe0
 801b606:	d009      	beq.n	801b61c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801b608:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801b60c:	4619      	mov	r1, r3
 801b60e:	6878      	ldr	r0, [r7, #4]
 801b610:	f7f8 fb4f 	bl	8013cb2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801b614:	2102      	movs	r1, #2
 801b616:	6878      	ldr	r0, [r7, #4]
 801b618:	f7ff fdd8 	bl	801b1cc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801b61c:	6878      	ldr	r0, [r7, #4]
 801b61e:	f7f8 fb5b 	bl	8013cd8 <pbuf_free>
        break;
 801b622:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801b624:	4b0b      	ldr	r3, [pc, #44]	; (801b654 <ip4_input+0x240>)
 801b626:	2200      	movs	r2, #0
 801b628:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801b62a:	4b0a      	ldr	r3, [pc, #40]	; (801b654 <ip4_input+0x240>)
 801b62c:	2200      	movs	r2, #0
 801b62e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801b630:	4b08      	ldr	r3, [pc, #32]	; (801b654 <ip4_input+0x240>)
 801b632:	2200      	movs	r2, #0
 801b634:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801b636:	4b07      	ldr	r3, [pc, #28]	; (801b654 <ip4_input+0x240>)
 801b638:	2200      	movs	r2, #0
 801b63a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801b63c:	4b05      	ldr	r3, [pc, #20]	; (801b654 <ip4_input+0x240>)
 801b63e:	2200      	movs	r2, #0
 801b640:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801b642:	4b04      	ldr	r3, [pc, #16]	; (801b654 <ip4_input+0x240>)
 801b644:	2200      	movs	r2, #0
 801b646:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801b648:	2300      	movs	r3, #0
}
 801b64a:	4618      	mov	r0, r3
 801b64c:	3718      	adds	r7, #24
 801b64e:	46bd      	mov	sp, r7
 801b650:	bd80      	pop	{r7, pc}
 801b652:	bf00      	nop
 801b654:	2001e7bc 	.word	0x2001e7bc
 801b658:	20024094 	.word	0x20024094

0801b65c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801b65c:	b580      	push	{r7, lr}
 801b65e:	b08a      	sub	sp, #40	; 0x28
 801b660:	af04      	add	r7, sp, #16
 801b662:	60f8      	str	r0, [r7, #12]
 801b664:	60b9      	str	r1, [r7, #8]
 801b666:	607a      	str	r2, [r7, #4]
 801b668:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801b66a:	68bb      	ldr	r3, [r7, #8]
 801b66c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801b66e:	687b      	ldr	r3, [r7, #4]
 801b670:	2b00      	cmp	r3, #0
 801b672:	d009      	beq.n	801b688 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801b674:	68bb      	ldr	r3, [r7, #8]
 801b676:	2b00      	cmp	r3, #0
 801b678:	d003      	beq.n	801b682 <ip4_output_if+0x26>
 801b67a:	68bb      	ldr	r3, [r7, #8]
 801b67c:	681b      	ldr	r3, [r3, #0]
 801b67e:	2b00      	cmp	r3, #0
 801b680:	d102      	bne.n	801b688 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801b682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b684:	3304      	adds	r3, #4
 801b686:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801b688:	78fa      	ldrb	r2, [r7, #3]
 801b68a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b68c:	9302      	str	r3, [sp, #8]
 801b68e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801b692:	9301      	str	r3, [sp, #4]
 801b694:	f897 3020 	ldrb.w	r3, [r7, #32]
 801b698:	9300      	str	r3, [sp, #0]
 801b69a:	4613      	mov	r3, r2
 801b69c:	687a      	ldr	r2, [r7, #4]
 801b69e:	6979      	ldr	r1, [r7, #20]
 801b6a0:	68f8      	ldr	r0, [r7, #12]
 801b6a2:	f000 f805 	bl	801b6b0 <ip4_output_if_src>
 801b6a6:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801b6a8:	4618      	mov	r0, r3
 801b6aa:	3718      	adds	r7, #24
 801b6ac:	46bd      	mov	sp, r7
 801b6ae:	bd80      	pop	{r7, pc}

0801b6b0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801b6b0:	b580      	push	{r7, lr}
 801b6b2:	b088      	sub	sp, #32
 801b6b4:	af00      	add	r7, sp, #0
 801b6b6:	60f8      	str	r0, [r7, #12]
 801b6b8:	60b9      	str	r1, [r7, #8]
 801b6ba:	607a      	str	r2, [r7, #4]
 801b6bc:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801b6be:	68fb      	ldr	r3, [r7, #12]
 801b6c0:	7b9b      	ldrb	r3, [r3, #14]
 801b6c2:	2b01      	cmp	r3, #1
 801b6c4:	d006      	beq.n	801b6d4 <ip4_output_if_src+0x24>
 801b6c6:	4b4b      	ldr	r3, [pc, #300]	; (801b7f4 <ip4_output_if_src+0x144>)
 801b6c8:	f44f 7255 	mov.w	r2, #852	; 0x354
 801b6cc:	494a      	ldr	r1, [pc, #296]	; (801b7f8 <ip4_output_if_src+0x148>)
 801b6ce:	484b      	ldr	r0, [pc, #300]	; (801b7fc <ip4_output_if_src+0x14c>)
 801b6d0:	f002 fb36 	bl	801dd40 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801b6d4:	687b      	ldr	r3, [r7, #4]
 801b6d6:	2b00      	cmp	r3, #0
 801b6d8:	d060      	beq.n	801b79c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801b6da:	2314      	movs	r3, #20
 801b6dc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801b6de:	2114      	movs	r1, #20
 801b6e0:	68f8      	ldr	r0, [r7, #12]
 801b6e2:	f7f8 fa63 	bl	8013bac <pbuf_add_header>
 801b6e6:	4603      	mov	r3, r0
 801b6e8:	2b00      	cmp	r3, #0
 801b6ea:	d002      	beq.n	801b6f2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801b6ec:	f06f 0301 	mvn.w	r3, #1
 801b6f0:	e07c      	b.n	801b7ec <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801b6f2:	68fb      	ldr	r3, [r7, #12]
 801b6f4:	685b      	ldr	r3, [r3, #4]
 801b6f6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801b6f8:	68fb      	ldr	r3, [r7, #12]
 801b6fa:	895b      	ldrh	r3, [r3, #10]
 801b6fc:	2b13      	cmp	r3, #19
 801b6fe:	d806      	bhi.n	801b70e <ip4_output_if_src+0x5e>
 801b700:	4b3c      	ldr	r3, [pc, #240]	; (801b7f4 <ip4_output_if_src+0x144>)
 801b702:	f44f 7262 	mov.w	r2, #904	; 0x388
 801b706:	493e      	ldr	r1, [pc, #248]	; (801b800 <ip4_output_if_src+0x150>)
 801b708:	483c      	ldr	r0, [pc, #240]	; (801b7fc <ip4_output_if_src+0x14c>)
 801b70a:	f002 fb19 	bl	801dd40 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801b70e:	69fb      	ldr	r3, [r7, #28]
 801b710:	78fa      	ldrb	r2, [r7, #3]
 801b712:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801b714:	69fb      	ldr	r3, [r7, #28]
 801b716:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801b71a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801b71c:	687b      	ldr	r3, [r7, #4]
 801b71e:	681a      	ldr	r2, [r3, #0]
 801b720:	69fb      	ldr	r3, [r7, #28]
 801b722:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801b724:	8b7b      	ldrh	r3, [r7, #26]
 801b726:	089b      	lsrs	r3, r3, #2
 801b728:	b29b      	uxth	r3, r3
 801b72a:	b2db      	uxtb	r3, r3
 801b72c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801b730:	b2da      	uxtb	r2, r3
 801b732:	69fb      	ldr	r3, [r7, #28]
 801b734:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801b736:	69fb      	ldr	r3, [r7, #28]
 801b738:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801b73c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801b73e:	68fb      	ldr	r3, [r7, #12]
 801b740:	891b      	ldrh	r3, [r3, #8]
 801b742:	4618      	mov	r0, r3
 801b744:	f7f6 fec6 	bl	80124d4 <lwip_htons>
 801b748:	4603      	mov	r3, r0
 801b74a:	461a      	mov	r2, r3
 801b74c:	69fb      	ldr	r3, [r7, #28]
 801b74e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801b750:	69fb      	ldr	r3, [r7, #28]
 801b752:	2200      	movs	r2, #0
 801b754:	719a      	strb	r2, [r3, #6]
 801b756:	2200      	movs	r2, #0
 801b758:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801b75a:	4b2a      	ldr	r3, [pc, #168]	; (801b804 <ip4_output_if_src+0x154>)
 801b75c:	881b      	ldrh	r3, [r3, #0]
 801b75e:	4618      	mov	r0, r3
 801b760:	f7f6 feb8 	bl	80124d4 <lwip_htons>
 801b764:	4603      	mov	r3, r0
 801b766:	461a      	mov	r2, r3
 801b768:	69fb      	ldr	r3, [r7, #28]
 801b76a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801b76c:	4b25      	ldr	r3, [pc, #148]	; (801b804 <ip4_output_if_src+0x154>)
 801b76e:	881b      	ldrh	r3, [r3, #0]
 801b770:	3301      	adds	r3, #1
 801b772:	b29a      	uxth	r2, r3
 801b774:	4b23      	ldr	r3, [pc, #140]	; (801b804 <ip4_output_if_src+0x154>)
 801b776:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801b778:	68bb      	ldr	r3, [r7, #8]
 801b77a:	2b00      	cmp	r3, #0
 801b77c:	d104      	bne.n	801b788 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801b77e:	4b22      	ldr	r3, [pc, #136]	; (801b808 <ip4_output_if_src+0x158>)
 801b780:	681a      	ldr	r2, [r3, #0]
 801b782:	69fb      	ldr	r3, [r7, #28]
 801b784:	60da      	str	r2, [r3, #12]
 801b786:	e003      	b.n	801b790 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801b788:	68bb      	ldr	r3, [r7, #8]
 801b78a:	681a      	ldr	r2, [r3, #0]
 801b78c:	69fb      	ldr	r3, [r7, #28]
 801b78e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801b790:	69fb      	ldr	r3, [r7, #28]
 801b792:	2200      	movs	r2, #0
 801b794:	729a      	strb	r2, [r3, #10]
 801b796:	2200      	movs	r2, #0
 801b798:	72da      	strb	r2, [r3, #11]
 801b79a:	e00f      	b.n	801b7bc <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801b79c:	68fb      	ldr	r3, [r7, #12]
 801b79e:	895b      	ldrh	r3, [r3, #10]
 801b7a0:	2b13      	cmp	r3, #19
 801b7a2:	d802      	bhi.n	801b7aa <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801b7a4:	f06f 0301 	mvn.w	r3, #1
 801b7a8:	e020      	b.n	801b7ec <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801b7aa:	68fb      	ldr	r3, [r7, #12]
 801b7ac:	685b      	ldr	r3, [r3, #4]
 801b7ae:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801b7b0:	69fb      	ldr	r3, [r7, #28]
 801b7b2:	691b      	ldr	r3, [r3, #16]
 801b7b4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801b7b6:	f107 0314 	add.w	r3, r7, #20
 801b7ba:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801b7bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b7be:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801b7c0:	2b00      	cmp	r3, #0
 801b7c2:	d00c      	beq.n	801b7de <ip4_output_if_src+0x12e>
 801b7c4:	68fb      	ldr	r3, [r7, #12]
 801b7c6:	891a      	ldrh	r2, [r3, #8]
 801b7c8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b7ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801b7cc:	429a      	cmp	r2, r3
 801b7ce:	d906      	bls.n	801b7de <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801b7d0:	687a      	ldr	r2, [r7, #4]
 801b7d2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801b7d4:	68f8      	ldr	r0, [r7, #12]
 801b7d6:	f000 fd53 	bl	801c280 <ip4_frag>
 801b7da:	4603      	mov	r3, r0
 801b7dc:	e006      	b.n	801b7ec <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801b7de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b7e0:	695b      	ldr	r3, [r3, #20]
 801b7e2:	687a      	ldr	r2, [r7, #4]
 801b7e4:	68f9      	ldr	r1, [r7, #12]
 801b7e6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b7e8:	4798      	blx	r3
 801b7ea:	4603      	mov	r3, r0
}
 801b7ec:	4618      	mov	r0, r3
 801b7ee:	3720      	adds	r7, #32
 801b7f0:	46bd      	mov	sp, r7
 801b7f2:	bd80      	pop	{r7, pc}
 801b7f4:	08021454 	.word	0x08021454
 801b7f8:	08021488 	.word	0x08021488
 801b7fc:	08021494 	.word	0x08021494
 801b800:	080214bc 	.word	0x080214bc
 801b804:	200241f2 	.word	0x200241f2
 801b808:	08021910 	.word	0x08021910

0801b80c <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801b80c:	b480      	push	{r7}
 801b80e:	b085      	sub	sp, #20
 801b810:	af00      	add	r7, sp, #0
 801b812:	6078      	str	r0, [r7, #4]
 801b814:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801b816:	687b      	ldr	r3, [r7, #4]
 801b818:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801b81a:	687b      	ldr	r3, [r7, #4]
 801b81c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b820:	d002      	beq.n	801b828 <ip4_addr_isbroadcast_u32+0x1c>
 801b822:	687b      	ldr	r3, [r7, #4]
 801b824:	2b00      	cmp	r3, #0
 801b826:	d101      	bne.n	801b82c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801b828:	2301      	movs	r3, #1
 801b82a:	e02a      	b.n	801b882 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801b82c:	683b      	ldr	r3, [r7, #0]
 801b82e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b832:	f003 0302 	and.w	r3, r3, #2
 801b836:	2b00      	cmp	r3, #0
 801b838:	d101      	bne.n	801b83e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801b83a:	2300      	movs	r3, #0
 801b83c:	e021      	b.n	801b882 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801b83e:	683b      	ldr	r3, [r7, #0]
 801b840:	3304      	adds	r3, #4
 801b842:	681b      	ldr	r3, [r3, #0]
 801b844:	687a      	ldr	r2, [r7, #4]
 801b846:	429a      	cmp	r2, r3
 801b848:	d101      	bne.n	801b84e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801b84a:	2300      	movs	r3, #0
 801b84c:	e019      	b.n	801b882 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801b84e:	68fa      	ldr	r2, [r7, #12]
 801b850:	683b      	ldr	r3, [r7, #0]
 801b852:	3304      	adds	r3, #4
 801b854:	681b      	ldr	r3, [r3, #0]
 801b856:	405a      	eors	r2, r3
 801b858:	683b      	ldr	r3, [r7, #0]
 801b85a:	3308      	adds	r3, #8
 801b85c:	681b      	ldr	r3, [r3, #0]
 801b85e:	4013      	ands	r3, r2
 801b860:	2b00      	cmp	r3, #0
 801b862:	d10d      	bne.n	801b880 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801b864:	683b      	ldr	r3, [r7, #0]
 801b866:	3308      	adds	r3, #8
 801b868:	681b      	ldr	r3, [r3, #0]
 801b86a:	43da      	mvns	r2, r3
 801b86c:	687b      	ldr	r3, [r7, #4]
 801b86e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801b870:	683b      	ldr	r3, [r7, #0]
 801b872:	3308      	adds	r3, #8
 801b874:	681b      	ldr	r3, [r3, #0]
 801b876:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801b878:	429a      	cmp	r2, r3
 801b87a:	d101      	bne.n	801b880 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801b87c:	2301      	movs	r3, #1
 801b87e:	e000      	b.n	801b882 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801b880:	2300      	movs	r3, #0
  }
}
 801b882:	4618      	mov	r0, r3
 801b884:	3714      	adds	r7, #20
 801b886:	46bd      	mov	sp, r7
 801b888:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b88c:	4770      	bx	lr
	...

0801b890 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801b890:	b580      	push	{r7, lr}
 801b892:	b084      	sub	sp, #16
 801b894:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801b896:	2300      	movs	r3, #0
 801b898:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801b89a:	4b12      	ldr	r3, [pc, #72]	; (801b8e4 <ip_reass_tmr+0x54>)
 801b89c:	681b      	ldr	r3, [r3, #0]
 801b89e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801b8a0:	e018      	b.n	801b8d4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801b8a2:	68fb      	ldr	r3, [r7, #12]
 801b8a4:	7fdb      	ldrb	r3, [r3, #31]
 801b8a6:	2b00      	cmp	r3, #0
 801b8a8:	d00b      	beq.n	801b8c2 <ip_reass_tmr+0x32>
      r->timer--;
 801b8aa:	68fb      	ldr	r3, [r7, #12]
 801b8ac:	7fdb      	ldrb	r3, [r3, #31]
 801b8ae:	3b01      	subs	r3, #1
 801b8b0:	b2da      	uxtb	r2, r3
 801b8b2:	68fb      	ldr	r3, [r7, #12]
 801b8b4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801b8b6:	68fb      	ldr	r3, [r7, #12]
 801b8b8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801b8ba:	68fb      	ldr	r3, [r7, #12]
 801b8bc:	681b      	ldr	r3, [r3, #0]
 801b8be:	60fb      	str	r3, [r7, #12]
 801b8c0:	e008      	b.n	801b8d4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801b8c2:	68fb      	ldr	r3, [r7, #12]
 801b8c4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801b8c6:	68fb      	ldr	r3, [r7, #12]
 801b8c8:	681b      	ldr	r3, [r3, #0]
 801b8ca:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801b8cc:	68b9      	ldr	r1, [r7, #8]
 801b8ce:	6878      	ldr	r0, [r7, #4]
 801b8d0:	f000 f80a 	bl	801b8e8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801b8d4:	68fb      	ldr	r3, [r7, #12]
 801b8d6:	2b00      	cmp	r3, #0
 801b8d8:	d1e3      	bne.n	801b8a2 <ip_reass_tmr+0x12>
    }
  }
}
 801b8da:	bf00      	nop
 801b8dc:	bf00      	nop
 801b8de:	3710      	adds	r7, #16
 801b8e0:	46bd      	mov	sp, r7
 801b8e2:	bd80      	pop	{r7, pc}
 801b8e4:	200241f4 	.word	0x200241f4

0801b8e8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801b8e8:	b580      	push	{r7, lr}
 801b8ea:	b088      	sub	sp, #32
 801b8ec:	af00      	add	r7, sp, #0
 801b8ee:	6078      	str	r0, [r7, #4]
 801b8f0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801b8f2:	2300      	movs	r3, #0
 801b8f4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801b8f6:	683a      	ldr	r2, [r7, #0]
 801b8f8:	687b      	ldr	r3, [r7, #4]
 801b8fa:	429a      	cmp	r2, r3
 801b8fc:	d105      	bne.n	801b90a <ip_reass_free_complete_datagram+0x22>
 801b8fe:	4b45      	ldr	r3, [pc, #276]	; (801ba14 <ip_reass_free_complete_datagram+0x12c>)
 801b900:	22ab      	movs	r2, #171	; 0xab
 801b902:	4945      	ldr	r1, [pc, #276]	; (801ba18 <ip_reass_free_complete_datagram+0x130>)
 801b904:	4845      	ldr	r0, [pc, #276]	; (801ba1c <ip_reass_free_complete_datagram+0x134>)
 801b906:	f002 fa1b 	bl	801dd40 <iprintf>
  if (prev != NULL) {
 801b90a:	683b      	ldr	r3, [r7, #0]
 801b90c:	2b00      	cmp	r3, #0
 801b90e:	d00a      	beq.n	801b926 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801b910:	683b      	ldr	r3, [r7, #0]
 801b912:	681b      	ldr	r3, [r3, #0]
 801b914:	687a      	ldr	r2, [r7, #4]
 801b916:	429a      	cmp	r2, r3
 801b918:	d005      	beq.n	801b926 <ip_reass_free_complete_datagram+0x3e>
 801b91a:	4b3e      	ldr	r3, [pc, #248]	; (801ba14 <ip_reass_free_complete_datagram+0x12c>)
 801b91c:	22ad      	movs	r2, #173	; 0xad
 801b91e:	4940      	ldr	r1, [pc, #256]	; (801ba20 <ip_reass_free_complete_datagram+0x138>)
 801b920:	483e      	ldr	r0, [pc, #248]	; (801ba1c <ip_reass_free_complete_datagram+0x134>)
 801b922:	f002 fa0d 	bl	801dd40 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801b926:	687b      	ldr	r3, [r7, #4]
 801b928:	685b      	ldr	r3, [r3, #4]
 801b92a:	685b      	ldr	r3, [r3, #4]
 801b92c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801b92e:	697b      	ldr	r3, [r7, #20]
 801b930:	889b      	ldrh	r3, [r3, #4]
 801b932:	b29b      	uxth	r3, r3
 801b934:	2b00      	cmp	r3, #0
 801b936:	d12a      	bne.n	801b98e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801b938:	687b      	ldr	r3, [r7, #4]
 801b93a:	685b      	ldr	r3, [r3, #4]
 801b93c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801b93e:	697b      	ldr	r3, [r7, #20]
 801b940:	681a      	ldr	r2, [r3, #0]
 801b942:	687b      	ldr	r3, [r7, #4]
 801b944:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801b946:	69bb      	ldr	r3, [r7, #24]
 801b948:	6858      	ldr	r0, [r3, #4]
 801b94a:	687b      	ldr	r3, [r7, #4]
 801b94c:	3308      	adds	r3, #8
 801b94e:	2214      	movs	r2, #20
 801b950:	4619      	mov	r1, r3
 801b952:	f002 fb26 	bl	801dfa2 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801b956:	2101      	movs	r1, #1
 801b958:	69b8      	ldr	r0, [r7, #24]
 801b95a:	f7ff fc47 	bl	801b1ec <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801b95e:	69b8      	ldr	r0, [r7, #24]
 801b960:	f7f8 fa48 	bl	8013df4 <pbuf_clen>
 801b964:	4603      	mov	r3, r0
 801b966:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801b968:	8bfa      	ldrh	r2, [r7, #30]
 801b96a:	8a7b      	ldrh	r3, [r7, #18]
 801b96c:	4413      	add	r3, r2
 801b96e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b972:	db05      	blt.n	801b980 <ip_reass_free_complete_datagram+0x98>
 801b974:	4b27      	ldr	r3, [pc, #156]	; (801ba14 <ip_reass_free_complete_datagram+0x12c>)
 801b976:	22bc      	movs	r2, #188	; 0xbc
 801b978:	492a      	ldr	r1, [pc, #168]	; (801ba24 <ip_reass_free_complete_datagram+0x13c>)
 801b97a:	4828      	ldr	r0, [pc, #160]	; (801ba1c <ip_reass_free_complete_datagram+0x134>)
 801b97c:	f002 f9e0 	bl	801dd40 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801b980:	8bfa      	ldrh	r2, [r7, #30]
 801b982:	8a7b      	ldrh	r3, [r7, #18]
 801b984:	4413      	add	r3, r2
 801b986:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801b988:	69b8      	ldr	r0, [r7, #24]
 801b98a:	f7f8 f9a5 	bl	8013cd8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801b98e:	687b      	ldr	r3, [r7, #4]
 801b990:	685b      	ldr	r3, [r3, #4]
 801b992:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801b994:	e01f      	b.n	801b9d6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801b996:	69bb      	ldr	r3, [r7, #24]
 801b998:	685b      	ldr	r3, [r3, #4]
 801b99a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801b99c:	69bb      	ldr	r3, [r7, #24]
 801b99e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801b9a0:	697b      	ldr	r3, [r7, #20]
 801b9a2:	681b      	ldr	r3, [r3, #0]
 801b9a4:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801b9a6:	68f8      	ldr	r0, [r7, #12]
 801b9a8:	f7f8 fa24 	bl	8013df4 <pbuf_clen>
 801b9ac:	4603      	mov	r3, r0
 801b9ae:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801b9b0:	8bfa      	ldrh	r2, [r7, #30]
 801b9b2:	8a7b      	ldrh	r3, [r7, #18]
 801b9b4:	4413      	add	r3, r2
 801b9b6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b9ba:	db05      	blt.n	801b9c8 <ip_reass_free_complete_datagram+0xe0>
 801b9bc:	4b15      	ldr	r3, [pc, #84]	; (801ba14 <ip_reass_free_complete_datagram+0x12c>)
 801b9be:	22cc      	movs	r2, #204	; 0xcc
 801b9c0:	4918      	ldr	r1, [pc, #96]	; (801ba24 <ip_reass_free_complete_datagram+0x13c>)
 801b9c2:	4816      	ldr	r0, [pc, #88]	; (801ba1c <ip_reass_free_complete_datagram+0x134>)
 801b9c4:	f002 f9bc 	bl	801dd40 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801b9c8:	8bfa      	ldrh	r2, [r7, #30]
 801b9ca:	8a7b      	ldrh	r3, [r7, #18]
 801b9cc:	4413      	add	r3, r2
 801b9ce:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801b9d0:	68f8      	ldr	r0, [r7, #12]
 801b9d2:	f7f8 f981 	bl	8013cd8 <pbuf_free>
  while (p != NULL) {
 801b9d6:	69bb      	ldr	r3, [r7, #24]
 801b9d8:	2b00      	cmp	r3, #0
 801b9da:	d1dc      	bne.n	801b996 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801b9dc:	6839      	ldr	r1, [r7, #0]
 801b9de:	6878      	ldr	r0, [r7, #4]
 801b9e0:	f000 f8c2 	bl	801bb68 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801b9e4:	4b10      	ldr	r3, [pc, #64]	; (801ba28 <ip_reass_free_complete_datagram+0x140>)
 801b9e6:	881b      	ldrh	r3, [r3, #0]
 801b9e8:	8bfa      	ldrh	r2, [r7, #30]
 801b9ea:	429a      	cmp	r2, r3
 801b9ec:	d905      	bls.n	801b9fa <ip_reass_free_complete_datagram+0x112>
 801b9ee:	4b09      	ldr	r3, [pc, #36]	; (801ba14 <ip_reass_free_complete_datagram+0x12c>)
 801b9f0:	22d2      	movs	r2, #210	; 0xd2
 801b9f2:	490e      	ldr	r1, [pc, #56]	; (801ba2c <ip_reass_free_complete_datagram+0x144>)
 801b9f4:	4809      	ldr	r0, [pc, #36]	; (801ba1c <ip_reass_free_complete_datagram+0x134>)
 801b9f6:	f002 f9a3 	bl	801dd40 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801b9fa:	4b0b      	ldr	r3, [pc, #44]	; (801ba28 <ip_reass_free_complete_datagram+0x140>)
 801b9fc:	881a      	ldrh	r2, [r3, #0]
 801b9fe:	8bfb      	ldrh	r3, [r7, #30]
 801ba00:	1ad3      	subs	r3, r2, r3
 801ba02:	b29a      	uxth	r2, r3
 801ba04:	4b08      	ldr	r3, [pc, #32]	; (801ba28 <ip_reass_free_complete_datagram+0x140>)
 801ba06:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801ba08:	8bfb      	ldrh	r3, [r7, #30]
}
 801ba0a:	4618      	mov	r0, r3
 801ba0c:	3720      	adds	r7, #32
 801ba0e:	46bd      	mov	sp, r7
 801ba10:	bd80      	pop	{r7, pc}
 801ba12:	bf00      	nop
 801ba14:	080214ec 	.word	0x080214ec
 801ba18:	08021528 	.word	0x08021528
 801ba1c:	08021534 	.word	0x08021534
 801ba20:	0802155c 	.word	0x0802155c
 801ba24:	08021570 	.word	0x08021570
 801ba28:	200241f8 	.word	0x200241f8
 801ba2c:	08021590 	.word	0x08021590

0801ba30 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801ba30:	b580      	push	{r7, lr}
 801ba32:	b08a      	sub	sp, #40	; 0x28
 801ba34:	af00      	add	r7, sp, #0
 801ba36:	6078      	str	r0, [r7, #4]
 801ba38:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801ba3a:	2300      	movs	r3, #0
 801ba3c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801ba3e:	2300      	movs	r3, #0
 801ba40:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801ba42:	2300      	movs	r3, #0
 801ba44:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801ba46:	2300      	movs	r3, #0
 801ba48:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801ba4a:	2300      	movs	r3, #0
 801ba4c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801ba4e:	4b28      	ldr	r3, [pc, #160]	; (801baf0 <ip_reass_remove_oldest_datagram+0xc0>)
 801ba50:	681b      	ldr	r3, [r3, #0]
 801ba52:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801ba54:	e030      	b.n	801bab8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801ba56:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba58:	695a      	ldr	r2, [r3, #20]
 801ba5a:	687b      	ldr	r3, [r7, #4]
 801ba5c:	68db      	ldr	r3, [r3, #12]
 801ba5e:	429a      	cmp	r2, r3
 801ba60:	d10c      	bne.n	801ba7c <ip_reass_remove_oldest_datagram+0x4c>
 801ba62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba64:	699a      	ldr	r2, [r3, #24]
 801ba66:	687b      	ldr	r3, [r7, #4]
 801ba68:	691b      	ldr	r3, [r3, #16]
 801ba6a:	429a      	cmp	r2, r3
 801ba6c:	d106      	bne.n	801ba7c <ip_reass_remove_oldest_datagram+0x4c>
 801ba6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba70:	899a      	ldrh	r2, [r3, #12]
 801ba72:	687b      	ldr	r3, [r7, #4]
 801ba74:	889b      	ldrh	r3, [r3, #4]
 801ba76:	b29b      	uxth	r3, r3
 801ba78:	429a      	cmp	r2, r3
 801ba7a:	d014      	beq.n	801baa6 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801ba7c:	693b      	ldr	r3, [r7, #16]
 801ba7e:	3301      	adds	r3, #1
 801ba80:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801ba82:	6a3b      	ldr	r3, [r7, #32]
 801ba84:	2b00      	cmp	r3, #0
 801ba86:	d104      	bne.n	801ba92 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801ba88:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba8a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801ba8c:	69fb      	ldr	r3, [r7, #28]
 801ba8e:	61bb      	str	r3, [r7, #24]
 801ba90:	e009      	b.n	801baa6 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801ba92:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801ba94:	7fda      	ldrb	r2, [r3, #31]
 801ba96:	6a3b      	ldr	r3, [r7, #32]
 801ba98:	7fdb      	ldrb	r3, [r3, #31]
 801ba9a:	429a      	cmp	r2, r3
 801ba9c:	d803      	bhi.n	801baa6 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801ba9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801baa0:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801baa2:	69fb      	ldr	r3, [r7, #28]
 801baa4:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801baa6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801baa8:	681b      	ldr	r3, [r3, #0]
 801baaa:	2b00      	cmp	r3, #0
 801baac:	d001      	beq.n	801bab2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801baae:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bab0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801bab2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bab4:	681b      	ldr	r3, [r3, #0]
 801bab6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801bab8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801baba:	2b00      	cmp	r3, #0
 801babc:	d1cb      	bne.n	801ba56 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801babe:	6a3b      	ldr	r3, [r7, #32]
 801bac0:	2b00      	cmp	r3, #0
 801bac2:	d008      	beq.n	801bad6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801bac4:	69b9      	ldr	r1, [r7, #24]
 801bac6:	6a38      	ldr	r0, [r7, #32]
 801bac8:	f7ff ff0e 	bl	801b8e8 <ip_reass_free_complete_datagram>
 801bacc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801bace:	697a      	ldr	r2, [r7, #20]
 801bad0:	68fb      	ldr	r3, [r7, #12]
 801bad2:	4413      	add	r3, r2
 801bad4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801bad6:	697a      	ldr	r2, [r7, #20]
 801bad8:	683b      	ldr	r3, [r7, #0]
 801bada:	429a      	cmp	r2, r3
 801badc:	da02      	bge.n	801bae4 <ip_reass_remove_oldest_datagram+0xb4>
 801bade:	693b      	ldr	r3, [r7, #16]
 801bae0:	2b01      	cmp	r3, #1
 801bae2:	dcac      	bgt.n	801ba3e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801bae4:	697b      	ldr	r3, [r7, #20]
}
 801bae6:	4618      	mov	r0, r3
 801bae8:	3728      	adds	r7, #40	; 0x28
 801baea:	46bd      	mov	sp, r7
 801baec:	bd80      	pop	{r7, pc}
 801baee:	bf00      	nop
 801baf0:	200241f4 	.word	0x200241f4

0801baf4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801baf4:	b580      	push	{r7, lr}
 801baf6:	b084      	sub	sp, #16
 801baf8:	af00      	add	r7, sp, #0
 801bafa:	6078      	str	r0, [r7, #4]
 801bafc:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801bafe:	2004      	movs	r0, #4
 801bb00:	f7f7 f9d0 	bl	8012ea4 <memp_malloc>
 801bb04:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801bb06:	68fb      	ldr	r3, [r7, #12]
 801bb08:	2b00      	cmp	r3, #0
 801bb0a:	d110      	bne.n	801bb2e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801bb0c:	6839      	ldr	r1, [r7, #0]
 801bb0e:	6878      	ldr	r0, [r7, #4]
 801bb10:	f7ff ff8e 	bl	801ba30 <ip_reass_remove_oldest_datagram>
 801bb14:	4602      	mov	r2, r0
 801bb16:	683b      	ldr	r3, [r7, #0]
 801bb18:	4293      	cmp	r3, r2
 801bb1a:	dc03      	bgt.n	801bb24 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801bb1c:	2004      	movs	r0, #4
 801bb1e:	f7f7 f9c1 	bl	8012ea4 <memp_malloc>
 801bb22:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801bb24:	68fb      	ldr	r3, [r7, #12]
 801bb26:	2b00      	cmp	r3, #0
 801bb28:	d101      	bne.n	801bb2e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801bb2a:	2300      	movs	r3, #0
 801bb2c:	e016      	b.n	801bb5c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801bb2e:	2220      	movs	r2, #32
 801bb30:	2100      	movs	r1, #0
 801bb32:	68f8      	ldr	r0, [r7, #12]
 801bb34:	f002 f969 	bl	801de0a <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801bb38:	68fb      	ldr	r3, [r7, #12]
 801bb3a:	220f      	movs	r2, #15
 801bb3c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801bb3e:	4b09      	ldr	r3, [pc, #36]	; (801bb64 <ip_reass_enqueue_new_datagram+0x70>)
 801bb40:	681a      	ldr	r2, [r3, #0]
 801bb42:	68fb      	ldr	r3, [r7, #12]
 801bb44:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801bb46:	4a07      	ldr	r2, [pc, #28]	; (801bb64 <ip_reass_enqueue_new_datagram+0x70>)
 801bb48:	68fb      	ldr	r3, [r7, #12]
 801bb4a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801bb4c:	68fb      	ldr	r3, [r7, #12]
 801bb4e:	3308      	adds	r3, #8
 801bb50:	2214      	movs	r2, #20
 801bb52:	6879      	ldr	r1, [r7, #4]
 801bb54:	4618      	mov	r0, r3
 801bb56:	f002 fa24 	bl	801dfa2 <memcpy>
  return ipr;
 801bb5a:	68fb      	ldr	r3, [r7, #12]
}
 801bb5c:	4618      	mov	r0, r3
 801bb5e:	3710      	adds	r7, #16
 801bb60:	46bd      	mov	sp, r7
 801bb62:	bd80      	pop	{r7, pc}
 801bb64:	200241f4 	.word	0x200241f4

0801bb68 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801bb68:	b580      	push	{r7, lr}
 801bb6a:	b082      	sub	sp, #8
 801bb6c:	af00      	add	r7, sp, #0
 801bb6e:	6078      	str	r0, [r7, #4]
 801bb70:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801bb72:	4b10      	ldr	r3, [pc, #64]	; (801bbb4 <ip_reass_dequeue_datagram+0x4c>)
 801bb74:	681b      	ldr	r3, [r3, #0]
 801bb76:	687a      	ldr	r2, [r7, #4]
 801bb78:	429a      	cmp	r2, r3
 801bb7a:	d104      	bne.n	801bb86 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801bb7c:	687b      	ldr	r3, [r7, #4]
 801bb7e:	681b      	ldr	r3, [r3, #0]
 801bb80:	4a0c      	ldr	r2, [pc, #48]	; (801bbb4 <ip_reass_dequeue_datagram+0x4c>)
 801bb82:	6013      	str	r3, [r2, #0]
 801bb84:	e00d      	b.n	801bba2 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801bb86:	683b      	ldr	r3, [r7, #0]
 801bb88:	2b00      	cmp	r3, #0
 801bb8a:	d106      	bne.n	801bb9a <ip_reass_dequeue_datagram+0x32>
 801bb8c:	4b0a      	ldr	r3, [pc, #40]	; (801bbb8 <ip_reass_dequeue_datagram+0x50>)
 801bb8e:	f240 1245 	movw	r2, #325	; 0x145
 801bb92:	490a      	ldr	r1, [pc, #40]	; (801bbbc <ip_reass_dequeue_datagram+0x54>)
 801bb94:	480a      	ldr	r0, [pc, #40]	; (801bbc0 <ip_reass_dequeue_datagram+0x58>)
 801bb96:	f002 f8d3 	bl	801dd40 <iprintf>
    prev->next = ipr->next;
 801bb9a:	687b      	ldr	r3, [r7, #4]
 801bb9c:	681a      	ldr	r2, [r3, #0]
 801bb9e:	683b      	ldr	r3, [r7, #0]
 801bba0:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801bba2:	6879      	ldr	r1, [r7, #4]
 801bba4:	2004      	movs	r0, #4
 801bba6:	f7f7 f9f3 	bl	8012f90 <memp_free>
}
 801bbaa:	bf00      	nop
 801bbac:	3708      	adds	r7, #8
 801bbae:	46bd      	mov	sp, r7
 801bbb0:	bd80      	pop	{r7, pc}
 801bbb2:	bf00      	nop
 801bbb4:	200241f4 	.word	0x200241f4
 801bbb8:	080214ec 	.word	0x080214ec
 801bbbc:	080215b4 	.word	0x080215b4
 801bbc0:	08021534 	.word	0x08021534

0801bbc4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801bbc4:	b580      	push	{r7, lr}
 801bbc6:	b08c      	sub	sp, #48	; 0x30
 801bbc8:	af00      	add	r7, sp, #0
 801bbca:	60f8      	str	r0, [r7, #12]
 801bbcc:	60b9      	str	r1, [r7, #8]
 801bbce:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801bbd0:	2300      	movs	r3, #0
 801bbd2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801bbd4:	2301      	movs	r3, #1
 801bbd6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801bbd8:	68bb      	ldr	r3, [r7, #8]
 801bbda:	685b      	ldr	r3, [r3, #4]
 801bbdc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801bbde:	69fb      	ldr	r3, [r7, #28]
 801bbe0:	885b      	ldrh	r3, [r3, #2]
 801bbe2:	b29b      	uxth	r3, r3
 801bbe4:	4618      	mov	r0, r3
 801bbe6:	f7f6 fc75 	bl	80124d4 <lwip_htons>
 801bbea:	4603      	mov	r3, r0
 801bbec:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801bbee:	69fb      	ldr	r3, [r7, #28]
 801bbf0:	781b      	ldrb	r3, [r3, #0]
 801bbf2:	f003 030f 	and.w	r3, r3, #15
 801bbf6:	b2db      	uxtb	r3, r3
 801bbf8:	009b      	lsls	r3, r3, #2
 801bbfa:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801bbfc:	7e7b      	ldrb	r3, [r7, #25]
 801bbfe:	b29b      	uxth	r3, r3
 801bc00:	8b7a      	ldrh	r2, [r7, #26]
 801bc02:	429a      	cmp	r2, r3
 801bc04:	d202      	bcs.n	801bc0c <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bc06:	f04f 33ff 	mov.w	r3, #4294967295
 801bc0a:	e135      	b.n	801be78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801bc0c:	7e7b      	ldrb	r3, [r7, #25]
 801bc0e:	b29b      	uxth	r3, r3
 801bc10:	8b7a      	ldrh	r2, [r7, #26]
 801bc12:	1ad3      	subs	r3, r2, r3
 801bc14:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801bc16:	69fb      	ldr	r3, [r7, #28]
 801bc18:	88db      	ldrh	r3, [r3, #6]
 801bc1a:	b29b      	uxth	r3, r3
 801bc1c:	4618      	mov	r0, r3
 801bc1e:	f7f6 fc59 	bl	80124d4 <lwip_htons>
 801bc22:	4603      	mov	r3, r0
 801bc24:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bc28:	b29b      	uxth	r3, r3
 801bc2a:	00db      	lsls	r3, r3, #3
 801bc2c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801bc2e:	68bb      	ldr	r3, [r7, #8]
 801bc30:	685b      	ldr	r3, [r3, #4]
 801bc32:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801bc34:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bc36:	2200      	movs	r2, #0
 801bc38:	701a      	strb	r2, [r3, #0]
 801bc3a:	2200      	movs	r2, #0
 801bc3c:	705a      	strb	r2, [r3, #1]
 801bc3e:	2200      	movs	r2, #0
 801bc40:	709a      	strb	r2, [r3, #2]
 801bc42:	2200      	movs	r2, #0
 801bc44:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801bc46:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bc48:	8afa      	ldrh	r2, [r7, #22]
 801bc4a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801bc4c:	8afa      	ldrh	r2, [r7, #22]
 801bc4e:	8b7b      	ldrh	r3, [r7, #26]
 801bc50:	4413      	add	r3, r2
 801bc52:	b29a      	uxth	r2, r3
 801bc54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bc56:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801bc58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bc5a:	88db      	ldrh	r3, [r3, #6]
 801bc5c:	b29b      	uxth	r3, r3
 801bc5e:	8afa      	ldrh	r2, [r7, #22]
 801bc60:	429a      	cmp	r2, r3
 801bc62:	d902      	bls.n	801bc6a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bc64:	f04f 33ff 	mov.w	r3, #4294967295
 801bc68:	e106      	b.n	801be78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801bc6a:	68fb      	ldr	r3, [r7, #12]
 801bc6c:	685b      	ldr	r3, [r3, #4]
 801bc6e:	627b      	str	r3, [r7, #36]	; 0x24
 801bc70:	e068      	b.n	801bd44 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801bc72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bc74:	685b      	ldr	r3, [r3, #4]
 801bc76:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801bc78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bc7a:	889b      	ldrh	r3, [r3, #4]
 801bc7c:	b29a      	uxth	r2, r3
 801bc7e:	693b      	ldr	r3, [r7, #16]
 801bc80:	889b      	ldrh	r3, [r3, #4]
 801bc82:	b29b      	uxth	r3, r3
 801bc84:	429a      	cmp	r2, r3
 801bc86:	d235      	bcs.n	801bcf4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801bc88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bc8a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801bc8c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801bc8e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bc90:	2b00      	cmp	r3, #0
 801bc92:	d020      	beq.n	801bcd6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801bc94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bc96:	889b      	ldrh	r3, [r3, #4]
 801bc98:	b29a      	uxth	r2, r3
 801bc9a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bc9c:	88db      	ldrh	r3, [r3, #6]
 801bc9e:	b29b      	uxth	r3, r3
 801bca0:	429a      	cmp	r2, r3
 801bca2:	d307      	bcc.n	801bcb4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801bca4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bca6:	88db      	ldrh	r3, [r3, #6]
 801bca8:	b29a      	uxth	r2, r3
 801bcaa:	693b      	ldr	r3, [r7, #16]
 801bcac:	889b      	ldrh	r3, [r3, #4]
 801bcae:	b29b      	uxth	r3, r3
 801bcb0:	429a      	cmp	r2, r3
 801bcb2:	d902      	bls.n	801bcba <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bcb4:	f04f 33ff 	mov.w	r3, #4294967295
 801bcb8:	e0de      	b.n	801be78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801bcba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bcbc:	68ba      	ldr	r2, [r7, #8]
 801bcbe:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801bcc0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bcc2:	88db      	ldrh	r3, [r3, #6]
 801bcc4:	b29a      	uxth	r2, r3
 801bcc6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bcc8:	889b      	ldrh	r3, [r3, #4]
 801bcca:	b29b      	uxth	r3, r3
 801bccc:	429a      	cmp	r2, r3
 801bcce:	d03d      	beq.n	801bd4c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801bcd0:	2300      	movs	r3, #0
 801bcd2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801bcd4:	e03a      	b.n	801bd4c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801bcd6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bcd8:	88db      	ldrh	r3, [r3, #6]
 801bcda:	b29a      	uxth	r2, r3
 801bcdc:	693b      	ldr	r3, [r7, #16]
 801bcde:	889b      	ldrh	r3, [r3, #4]
 801bce0:	b29b      	uxth	r3, r3
 801bce2:	429a      	cmp	r2, r3
 801bce4:	d902      	bls.n	801bcec <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bce6:	f04f 33ff 	mov.w	r3, #4294967295
 801bcea:	e0c5      	b.n	801be78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801bcec:	68fb      	ldr	r3, [r7, #12]
 801bcee:	68ba      	ldr	r2, [r7, #8]
 801bcf0:	605a      	str	r2, [r3, #4]
      break;
 801bcf2:	e02b      	b.n	801bd4c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801bcf4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bcf6:	889b      	ldrh	r3, [r3, #4]
 801bcf8:	b29a      	uxth	r2, r3
 801bcfa:	693b      	ldr	r3, [r7, #16]
 801bcfc:	889b      	ldrh	r3, [r3, #4]
 801bcfe:	b29b      	uxth	r3, r3
 801bd00:	429a      	cmp	r2, r3
 801bd02:	d102      	bne.n	801bd0a <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bd04:	f04f 33ff 	mov.w	r3, #4294967295
 801bd08:	e0b6      	b.n	801be78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801bd0a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bd0c:	889b      	ldrh	r3, [r3, #4]
 801bd0e:	b29a      	uxth	r2, r3
 801bd10:	693b      	ldr	r3, [r7, #16]
 801bd12:	88db      	ldrh	r3, [r3, #6]
 801bd14:	b29b      	uxth	r3, r3
 801bd16:	429a      	cmp	r2, r3
 801bd18:	d202      	bcs.n	801bd20 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801bd1a:	f04f 33ff 	mov.w	r3, #4294967295
 801bd1e:	e0ab      	b.n	801be78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801bd20:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bd22:	2b00      	cmp	r3, #0
 801bd24:	d009      	beq.n	801bd3a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801bd26:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bd28:	88db      	ldrh	r3, [r3, #6]
 801bd2a:	b29a      	uxth	r2, r3
 801bd2c:	693b      	ldr	r3, [r7, #16]
 801bd2e:	889b      	ldrh	r3, [r3, #4]
 801bd30:	b29b      	uxth	r3, r3
 801bd32:	429a      	cmp	r2, r3
 801bd34:	d001      	beq.n	801bd3a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801bd36:	2300      	movs	r3, #0
 801bd38:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801bd3a:	693b      	ldr	r3, [r7, #16]
 801bd3c:	681b      	ldr	r3, [r3, #0]
 801bd3e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801bd40:	693b      	ldr	r3, [r7, #16]
 801bd42:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801bd44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bd46:	2b00      	cmp	r3, #0
 801bd48:	d193      	bne.n	801bc72 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801bd4a:	e000      	b.n	801bd4e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801bd4c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801bd4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bd50:	2b00      	cmp	r3, #0
 801bd52:	d12d      	bne.n	801bdb0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801bd54:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bd56:	2b00      	cmp	r3, #0
 801bd58:	d01c      	beq.n	801bd94 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801bd5a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bd5c:	88db      	ldrh	r3, [r3, #6]
 801bd5e:	b29a      	uxth	r2, r3
 801bd60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bd62:	889b      	ldrh	r3, [r3, #4]
 801bd64:	b29b      	uxth	r3, r3
 801bd66:	429a      	cmp	r2, r3
 801bd68:	d906      	bls.n	801bd78 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801bd6a:	4b45      	ldr	r3, [pc, #276]	; (801be80 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bd6c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801bd70:	4944      	ldr	r1, [pc, #272]	; (801be84 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801bd72:	4845      	ldr	r0, [pc, #276]	; (801be88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bd74:	f001 ffe4 	bl	801dd40 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801bd78:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bd7a:	68ba      	ldr	r2, [r7, #8]
 801bd7c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801bd7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bd80:	88db      	ldrh	r3, [r3, #6]
 801bd82:	b29a      	uxth	r2, r3
 801bd84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bd86:	889b      	ldrh	r3, [r3, #4]
 801bd88:	b29b      	uxth	r3, r3
 801bd8a:	429a      	cmp	r2, r3
 801bd8c:	d010      	beq.n	801bdb0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801bd8e:	2300      	movs	r3, #0
 801bd90:	623b      	str	r3, [r7, #32]
 801bd92:	e00d      	b.n	801bdb0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801bd94:	68fb      	ldr	r3, [r7, #12]
 801bd96:	685b      	ldr	r3, [r3, #4]
 801bd98:	2b00      	cmp	r3, #0
 801bd9a:	d006      	beq.n	801bdaa <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801bd9c:	4b38      	ldr	r3, [pc, #224]	; (801be80 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801bd9e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801bda2:	493a      	ldr	r1, [pc, #232]	; (801be8c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801bda4:	4838      	ldr	r0, [pc, #224]	; (801be88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801bda6:	f001 ffcb 	bl	801dd40 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801bdaa:	68fb      	ldr	r3, [r7, #12]
 801bdac:	68ba      	ldr	r2, [r7, #8]
 801bdae:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801bdb0:	687b      	ldr	r3, [r7, #4]
 801bdb2:	2b00      	cmp	r3, #0
 801bdb4:	d105      	bne.n	801bdc2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801bdb6:	68fb      	ldr	r3, [r7, #12]
 801bdb8:	7f9b      	ldrb	r3, [r3, #30]
 801bdba:	f003 0301 	and.w	r3, r3, #1
 801bdbe:	2b00      	cmp	r3, #0
 801bdc0:	d059      	beq.n	801be76 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801bdc2:	6a3b      	ldr	r3, [r7, #32]
 801bdc4:	2b00      	cmp	r3, #0
 801bdc6:	d04f      	beq.n	801be68 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801bdc8:	68fb      	ldr	r3, [r7, #12]
 801bdca:	685b      	ldr	r3, [r3, #4]
 801bdcc:	2b00      	cmp	r3, #0
 801bdce:	d006      	beq.n	801bdde <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801bdd0:	68fb      	ldr	r3, [r7, #12]
 801bdd2:	685b      	ldr	r3, [r3, #4]
 801bdd4:	685b      	ldr	r3, [r3, #4]
 801bdd6:	889b      	ldrh	r3, [r3, #4]
 801bdd8:	b29b      	uxth	r3, r3
 801bdda:	2b00      	cmp	r3, #0
 801bddc:	d002      	beq.n	801bde4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801bdde:	2300      	movs	r3, #0
 801bde0:	623b      	str	r3, [r7, #32]
 801bde2:	e041      	b.n	801be68 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801bde4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bde6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801bde8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bdea:	681b      	ldr	r3, [r3, #0]
 801bdec:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801bdee:	e012      	b.n	801be16 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801bdf0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bdf2:	685b      	ldr	r3, [r3, #4]
 801bdf4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801bdf6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bdf8:	88db      	ldrh	r3, [r3, #6]
 801bdfa:	b29a      	uxth	r2, r3
 801bdfc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bdfe:	889b      	ldrh	r3, [r3, #4]
 801be00:	b29b      	uxth	r3, r3
 801be02:	429a      	cmp	r2, r3
 801be04:	d002      	beq.n	801be0c <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801be06:	2300      	movs	r3, #0
 801be08:	623b      	str	r3, [r7, #32]
            break;
 801be0a:	e007      	b.n	801be1c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801be0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801be0e:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801be10:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801be12:	681b      	ldr	r3, [r3, #0]
 801be14:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801be16:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801be18:	2b00      	cmp	r3, #0
 801be1a:	d1e9      	bne.n	801bdf0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801be1c:	6a3b      	ldr	r3, [r7, #32]
 801be1e:	2b00      	cmp	r3, #0
 801be20:	d022      	beq.n	801be68 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801be22:	68fb      	ldr	r3, [r7, #12]
 801be24:	685b      	ldr	r3, [r3, #4]
 801be26:	2b00      	cmp	r3, #0
 801be28:	d106      	bne.n	801be38 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801be2a:	4b15      	ldr	r3, [pc, #84]	; (801be80 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801be2c:	f240 12df 	movw	r2, #479	; 0x1df
 801be30:	4917      	ldr	r1, [pc, #92]	; (801be90 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801be32:	4815      	ldr	r0, [pc, #84]	; (801be88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801be34:	f001 ff84 	bl	801dd40 <iprintf>
          LWIP_ASSERT("sanity check",
 801be38:	68fb      	ldr	r3, [r7, #12]
 801be3a:	685b      	ldr	r3, [r3, #4]
 801be3c:	685b      	ldr	r3, [r3, #4]
 801be3e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801be40:	429a      	cmp	r2, r3
 801be42:	d106      	bne.n	801be52 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801be44:	4b0e      	ldr	r3, [pc, #56]	; (801be80 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801be46:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801be4a:	4911      	ldr	r1, [pc, #68]	; (801be90 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801be4c:	480e      	ldr	r0, [pc, #56]	; (801be88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801be4e:	f001 ff77 	bl	801dd40 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801be52:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801be54:	681b      	ldr	r3, [r3, #0]
 801be56:	2b00      	cmp	r3, #0
 801be58:	d006      	beq.n	801be68 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801be5a:	4b09      	ldr	r3, [pc, #36]	; (801be80 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801be5c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801be60:	490c      	ldr	r1, [pc, #48]	; (801be94 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801be62:	4809      	ldr	r0, [pc, #36]	; (801be88 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801be64:	f001 ff6c 	bl	801dd40 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801be68:	6a3b      	ldr	r3, [r7, #32]
 801be6a:	2b00      	cmp	r3, #0
 801be6c:	bf14      	ite	ne
 801be6e:	2301      	movne	r3, #1
 801be70:	2300      	moveq	r3, #0
 801be72:	b2db      	uxtb	r3, r3
 801be74:	e000      	b.n	801be78 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801be76:	2300      	movs	r3, #0
}
 801be78:	4618      	mov	r0, r3
 801be7a:	3730      	adds	r7, #48	; 0x30
 801be7c:	46bd      	mov	sp, r7
 801be7e:	bd80      	pop	{r7, pc}
 801be80:	080214ec 	.word	0x080214ec
 801be84:	080215d0 	.word	0x080215d0
 801be88:	08021534 	.word	0x08021534
 801be8c:	080215f0 	.word	0x080215f0
 801be90:	08021628 	.word	0x08021628
 801be94:	08021638 	.word	0x08021638

0801be98 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801be98:	b580      	push	{r7, lr}
 801be9a:	b08e      	sub	sp, #56	; 0x38
 801be9c:	af00      	add	r7, sp, #0
 801be9e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801bea0:	687b      	ldr	r3, [r7, #4]
 801bea2:	685b      	ldr	r3, [r3, #4]
 801bea4:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801bea6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bea8:	781b      	ldrb	r3, [r3, #0]
 801beaa:	f003 030f 	and.w	r3, r3, #15
 801beae:	b2db      	uxtb	r3, r3
 801beb0:	009b      	lsls	r3, r3, #2
 801beb2:	b2db      	uxtb	r3, r3
 801beb4:	2b14      	cmp	r3, #20
 801beb6:	f040 8171 	bne.w	801c19c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801beba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bebc:	88db      	ldrh	r3, [r3, #6]
 801bebe:	b29b      	uxth	r3, r3
 801bec0:	4618      	mov	r0, r3
 801bec2:	f7f6 fb07 	bl	80124d4 <lwip_htons>
 801bec6:	4603      	mov	r3, r0
 801bec8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801becc:	b29b      	uxth	r3, r3
 801bece:	00db      	lsls	r3, r3, #3
 801bed0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801bed2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bed4:	885b      	ldrh	r3, [r3, #2]
 801bed6:	b29b      	uxth	r3, r3
 801bed8:	4618      	mov	r0, r3
 801beda:	f7f6 fafb 	bl	80124d4 <lwip_htons>
 801bede:	4603      	mov	r3, r0
 801bee0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801bee2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bee4:	781b      	ldrb	r3, [r3, #0]
 801bee6:	f003 030f 	and.w	r3, r3, #15
 801beea:	b2db      	uxtb	r3, r3
 801beec:	009b      	lsls	r3, r3, #2
 801beee:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801bef2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801bef6:	b29b      	uxth	r3, r3
 801bef8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801befa:	429a      	cmp	r2, r3
 801befc:	f0c0 8150 	bcc.w	801c1a0 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801bf00:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801bf04:	b29b      	uxth	r3, r3
 801bf06:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801bf08:	1ad3      	subs	r3, r2, r3
 801bf0a:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801bf0c:	6878      	ldr	r0, [r7, #4]
 801bf0e:	f7f7 ff71 	bl	8013df4 <pbuf_clen>
 801bf12:	4603      	mov	r3, r0
 801bf14:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801bf16:	4b8c      	ldr	r3, [pc, #560]	; (801c148 <ip4_reass+0x2b0>)
 801bf18:	881b      	ldrh	r3, [r3, #0]
 801bf1a:	461a      	mov	r2, r3
 801bf1c:	8c3b      	ldrh	r3, [r7, #32]
 801bf1e:	4413      	add	r3, r2
 801bf20:	2b0a      	cmp	r3, #10
 801bf22:	dd10      	ble.n	801bf46 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801bf24:	8c3b      	ldrh	r3, [r7, #32]
 801bf26:	4619      	mov	r1, r3
 801bf28:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801bf2a:	f7ff fd81 	bl	801ba30 <ip_reass_remove_oldest_datagram>
 801bf2e:	4603      	mov	r3, r0
 801bf30:	2b00      	cmp	r3, #0
 801bf32:	f000 8137 	beq.w	801c1a4 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801bf36:	4b84      	ldr	r3, [pc, #528]	; (801c148 <ip4_reass+0x2b0>)
 801bf38:	881b      	ldrh	r3, [r3, #0]
 801bf3a:	461a      	mov	r2, r3
 801bf3c:	8c3b      	ldrh	r3, [r7, #32]
 801bf3e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801bf40:	2b0a      	cmp	r3, #10
 801bf42:	f300 812f 	bgt.w	801c1a4 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801bf46:	4b81      	ldr	r3, [pc, #516]	; (801c14c <ip4_reass+0x2b4>)
 801bf48:	681b      	ldr	r3, [r3, #0]
 801bf4a:	633b      	str	r3, [r7, #48]	; 0x30
 801bf4c:	e015      	b.n	801bf7a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801bf4e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf50:	695a      	ldr	r2, [r3, #20]
 801bf52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bf54:	68db      	ldr	r3, [r3, #12]
 801bf56:	429a      	cmp	r2, r3
 801bf58:	d10c      	bne.n	801bf74 <ip4_reass+0xdc>
 801bf5a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf5c:	699a      	ldr	r2, [r3, #24]
 801bf5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bf60:	691b      	ldr	r3, [r3, #16]
 801bf62:	429a      	cmp	r2, r3
 801bf64:	d106      	bne.n	801bf74 <ip4_reass+0xdc>
 801bf66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf68:	899a      	ldrh	r2, [r3, #12]
 801bf6a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bf6c:	889b      	ldrh	r3, [r3, #4]
 801bf6e:	b29b      	uxth	r3, r3
 801bf70:	429a      	cmp	r2, r3
 801bf72:	d006      	beq.n	801bf82 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801bf74:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf76:	681b      	ldr	r3, [r3, #0]
 801bf78:	633b      	str	r3, [r7, #48]	; 0x30
 801bf7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf7c:	2b00      	cmp	r3, #0
 801bf7e:	d1e6      	bne.n	801bf4e <ip4_reass+0xb6>
 801bf80:	e000      	b.n	801bf84 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801bf82:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801bf84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf86:	2b00      	cmp	r3, #0
 801bf88:	d109      	bne.n	801bf9e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801bf8a:	8c3b      	ldrh	r3, [r7, #32]
 801bf8c:	4619      	mov	r1, r3
 801bf8e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801bf90:	f7ff fdb0 	bl	801baf4 <ip_reass_enqueue_new_datagram>
 801bf94:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801bf96:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bf98:	2b00      	cmp	r3, #0
 801bf9a:	d11c      	bne.n	801bfd6 <ip4_reass+0x13e>
      goto nullreturn;
 801bf9c:	e105      	b.n	801c1aa <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801bf9e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bfa0:	88db      	ldrh	r3, [r3, #6]
 801bfa2:	b29b      	uxth	r3, r3
 801bfa4:	4618      	mov	r0, r3
 801bfa6:	f7f6 fa95 	bl	80124d4 <lwip_htons>
 801bfaa:	4603      	mov	r3, r0
 801bfac:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bfb0:	2b00      	cmp	r3, #0
 801bfb2:	d110      	bne.n	801bfd6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801bfb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bfb6:	89db      	ldrh	r3, [r3, #14]
 801bfb8:	4618      	mov	r0, r3
 801bfba:	f7f6 fa8b 	bl	80124d4 <lwip_htons>
 801bfbe:	4603      	mov	r3, r0
 801bfc0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801bfc4:	2b00      	cmp	r3, #0
 801bfc6:	d006      	beq.n	801bfd6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801bfc8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bfca:	3308      	adds	r3, #8
 801bfcc:	2214      	movs	r2, #20
 801bfce:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801bfd0:	4618      	mov	r0, r3
 801bfd2:	f001 ffe6 	bl	801dfa2 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801bfd6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801bfd8:	88db      	ldrh	r3, [r3, #6]
 801bfda:	b29b      	uxth	r3, r3
 801bfdc:	f003 0320 	and.w	r3, r3, #32
 801bfe0:	2b00      	cmp	r3, #0
 801bfe2:	bf0c      	ite	eq
 801bfe4:	2301      	moveq	r3, #1
 801bfe6:	2300      	movne	r3, #0
 801bfe8:	b2db      	uxtb	r3, r3
 801bfea:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801bfec:	69fb      	ldr	r3, [r7, #28]
 801bfee:	2b00      	cmp	r3, #0
 801bff0:	d00e      	beq.n	801c010 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801bff2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801bff4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801bff6:	4413      	add	r3, r2
 801bff8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801bffa:	8b7a      	ldrh	r2, [r7, #26]
 801bffc:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801bffe:	429a      	cmp	r2, r3
 801c000:	f0c0 80a0 	bcc.w	801c144 <ip4_reass+0x2ac>
 801c004:	8b7b      	ldrh	r3, [r7, #26]
 801c006:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801c00a:	4293      	cmp	r3, r2
 801c00c:	f200 809a 	bhi.w	801c144 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801c010:	69fa      	ldr	r2, [r7, #28]
 801c012:	6879      	ldr	r1, [r7, #4]
 801c014:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801c016:	f7ff fdd5 	bl	801bbc4 <ip_reass_chain_frag_into_datagram_and_validate>
 801c01a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801c01c:	697b      	ldr	r3, [r7, #20]
 801c01e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801c022:	f000 809b 	beq.w	801c15c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801c026:	4b48      	ldr	r3, [pc, #288]	; (801c148 <ip4_reass+0x2b0>)
 801c028:	881a      	ldrh	r2, [r3, #0]
 801c02a:	8c3b      	ldrh	r3, [r7, #32]
 801c02c:	4413      	add	r3, r2
 801c02e:	b29a      	uxth	r2, r3
 801c030:	4b45      	ldr	r3, [pc, #276]	; (801c148 <ip4_reass+0x2b0>)
 801c032:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801c034:	69fb      	ldr	r3, [r7, #28]
 801c036:	2b00      	cmp	r3, #0
 801c038:	d00d      	beq.n	801c056 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801c03a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801c03c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801c03e:	4413      	add	r3, r2
 801c040:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801c042:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c044:	8a7a      	ldrh	r2, [r7, #18]
 801c046:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801c048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c04a:	7f9b      	ldrb	r3, [r3, #30]
 801c04c:	f043 0301 	orr.w	r3, r3, #1
 801c050:	b2da      	uxtb	r2, r3
 801c052:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c054:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801c056:	697b      	ldr	r3, [r7, #20]
 801c058:	2b01      	cmp	r3, #1
 801c05a:	d171      	bne.n	801c140 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801c05c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c05e:	8b9b      	ldrh	r3, [r3, #28]
 801c060:	3314      	adds	r3, #20
 801c062:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801c064:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c066:	685b      	ldr	r3, [r3, #4]
 801c068:	685b      	ldr	r3, [r3, #4]
 801c06a:	681b      	ldr	r3, [r3, #0]
 801c06c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801c06e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c070:	685b      	ldr	r3, [r3, #4]
 801c072:	685b      	ldr	r3, [r3, #4]
 801c074:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801c076:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c078:	3308      	adds	r3, #8
 801c07a:	2214      	movs	r2, #20
 801c07c:	4619      	mov	r1, r3
 801c07e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801c080:	f001 ff8f 	bl	801dfa2 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801c084:	8a3b      	ldrh	r3, [r7, #16]
 801c086:	4618      	mov	r0, r3
 801c088:	f7f6 fa24 	bl	80124d4 <lwip_htons>
 801c08c:	4603      	mov	r3, r0
 801c08e:	461a      	mov	r2, r3
 801c090:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c092:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801c094:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c096:	2200      	movs	r2, #0
 801c098:	719a      	strb	r2, [r3, #6]
 801c09a:	2200      	movs	r2, #0
 801c09c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801c09e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801c0a0:	2200      	movs	r2, #0
 801c0a2:	729a      	strb	r2, [r3, #10]
 801c0a4:	2200      	movs	r2, #0
 801c0a6:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801c0a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c0aa:	685b      	ldr	r3, [r3, #4]
 801c0ac:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801c0ae:	e00d      	b.n	801c0cc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801c0b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c0b2:	685b      	ldr	r3, [r3, #4]
 801c0b4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801c0b6:	2114      	movs	r1, #20
 801c0b8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801c0ba:	f7f7 fd87 	bl	8013bcc <pbuf_remove_header>
      pbuf_cat(p, r);
 801c0be:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801c0c0:	6878      	ldr	r0, [r7, #4]
 801c0c2:	f7f7 fed7 	bl	8013e74 <pbuf_cat>
      r = iprh->next_pbuf;
 801c0c6:	68fb      	ldr	r3, [r7, #12]
 801c0c8:	681b      	ldr	r3, [r3, #0]
 801c0ca:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801c0cc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c0ce:	2b00      	cmp	r3, #0
 801c0d0:	d1ee      	bne.n	801c0b0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801c0d2:	4b1e      	ldr	r3, [pc, #120]	; (801c14c <ip4_reass+0x2b4>)
 801c0d4:	681b      	ldr	r3, [r3, #0]
 801c0d6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c0d8:	429a      	cmp	r2, r3
 801c0da:	d102      	bne.n	801c0e2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801c0dc:	2300      	movs	r3, #0
 801c0de:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c0e0:	e010      	b.n	801c104 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801c0e2:	4b1a      	ldr	r3, [pc, #104]	; (801c14c <ip4_reass+0x2b4>)
 801c0e4:	681b      	ldr	r3, [r3, #0]
 801c0e6:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c0e8:	e007      	b.n	801c0fa <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801c0ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c0ec:	681b      	ldr	r3, [r3, #0]
 801c0ee:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c0f0:	429a      	cmp	r2, r3
 801c0f2:	d006      	beq.n	801c102 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801c0f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c0f6:	681b      	ldr	r3, [r3, #0]
 801c0f8:	62fb      	str	r3, [r7, #44]	; 0x2c
 801c0fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c0fc:	2b00      	cmp	r3, #0
 801c0fe:	d1f4      	bne.n	801c0ea <ip4_reass+0x252>
 801c100:	e000      	b.n	801c104 <ip4_reass+0x26c>
          break;
 801c102:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801c104:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801c106:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801c108:	f7ff fd2e 	bl	801bb68 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801c10c:	6878      	ldr	r0, [r7, #4]
 801c10e:	f7f7 fe71 	bl	8013df4 <pbuf_clen>
 801c112:	4603      	mov	r3, r0
 801c114:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801c116:	4b0c      	ldr	r3, [pc, #48]	; (801c148 <ip4_reass+0x2b0>)
 801c118:	881b      	ldrh	r3, [r3, #0]
 801c11a:	8c3a      	ldrh	r2, [r7, #32]
 801c11c:	429a      	cmp	r2, r3
 801c11e:	d906      	bls.n	801c12e <ip4_reass+0x296>
 801c120:	4b0b      	ldr	r3, [pc, #44]	; (801c150 <ip4_reass+0x2b8>)
 801c122:	f240 229b 	movw	r2, #667	; 0x29b
 801c126:	490b      	ldr	r1, [pc, #44]	; (801c154 <ip4_reass+0x2bc>)
 801c128:	480b      	ldr	r0, [pc, #44]	; (801c158 <ip4_reass+0x2c0>)
 801c12a:	f001 fe09 	bl	801dd40 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801c12e:	4b06      	ldr	r3, [pc, #24]	; (801c148 <ip4_reass+0x2b0>)
 801c130:	881a      	ldrh	r2, [r3, #0]
 801c132:	8c3b      	ldrh	r3, [r7, #32]
 801c134:	1ad3      	subs	r3, r2, r3
 801c136:	b29a      	uxth	r2, r3
 801c138:	4b03      	ldr	r3, [pc, #12]	; (801c148 <ip4_reass+0x2b0>)
 801c13a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801c13c:	687b      	ldr	r3, [r7, #4]
 801c13e:	e038      	b.n	801c1b2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801c140:	2300      	movs	r3, #0
 801c142:	e036      	b.n	801c1b2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801c144:	bf00      	nop
 801c146:	e00a      	b.n	801c15e <ip4_reass+0x2c6>
 801c148:	200241f8 	.word	0x200241f8
 801c14c:	200241f4 	.word	0x200241f4
 801c150:	080214ec 	.word	0x080214ec
 801c154:	0802165c 	.word	0x0802165c
 801c158:	08021534 	.word	0x08021534
    goto nullreturn_ipr;
 801c15c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801c15e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c160:	2b00      	cmp	r3, #0
 801c162:	d106      	bne.n	801c172 <ip4_reass+0x2da>
 801c164:	4b15      	ldr	r3, [pc, #84]	; (801c1bc <ip4_reass+0x324>)
 801c166:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801c16a:	4915      	ldr	r1, [pc, #84]	; (801c1c0 <ip4_reass+0x328>)
 801c16c:	4815      	ldr	r0, [pc, #84]	; (801c1c4 <ip4_reass+0x32c>)
 801c16e:	f001 fde7 	bl	801dd40 <iprintf>
  if (ipr->p == NULL) {
 801c172:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c174:	685b      	ldr	r3, [r3, #4]
 801c176:	2b00      	cmp	r3, #0
 801c178:	d116      	bne.n	801c1a8 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801c17a:	4b13      	ldr	r3, [pc, #76]	; (801c1c8 <ip4_reass+0x330>)
 801c17c:	681b      	ldr	r3, [r3, #0]
 801c17e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801c180:	429a      	cmp	r2, r3
 801c182:	d006      	beq.n	801c192 <ip4_reass+0x2fa>
 801c184:	4b0d      	ldr	r3, [pc, #52]	; (801c1bc <ip4_reass+0x324>)
 801c186:	f240 22ab 	movw	r2, #683	; 0x2ab
 801c18a:	4910      	ldr	r1, [pc, #64]	; (801c1cc <ip4_reass+0x334>)
 801c18c:	480d      	ldr	r0, [pc, #52]	; (801c1c4 <ip4_reass+0x32c>)
 801c18e:	f001 fdd7 	bl	801dd40 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801c192:	2100      	movs	r1, #0
 801c194:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801c196:	f7ff fce7 	bl	801bb68 <ip_reass_dequeue_datagram>
 801c19a:	e006      	b.n	801c1aa <ip4_reass+0x312>
    goto nullreturn;
 801c19c:	bf00      	nop
 801c19e:	e004      	b.n	801c1aa <ip4_reass+0x312>
    goto nullreturn;
 801c1a0:	bf00      	nop
 801c1a2:	e002      	b.n	801c1aa <ip4_reass+0x312>
      goto nullreturn;
 801c1a4:	bf00      	nop
 801c1a6:	e000      	b.n	801c1aa <ip4_reass+0x312>
  }

nullreturn:
 801c1a8:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801c1aa:	6878      	ldr	r0, [r7, #4]
 801c1ac:	f7f7 fd94 	bl	8013cd8 <pbuf_free>
  return NULL;
 801c1b0:	2300      	movs	r3, #0
}
 801c1b2:	4618      	mov	r0, r3
 801c1b4:	3738      	adds	r7, #56	; 0x38
 801c1b6:	46bd      	mov	sp, r7
 801c1b8:	bd80      	pop	{r7, pc}
 801c1ba:	bf00      	nop
 801c1bc:	080214ec 	.word	0x080214ec
 801c1c0:	08021678 	.word	0x08021678
 801c1c4:	08021534 	.word	0x08021534
 801c1c8:	200241f4 	.word	0x200241f4
 801c1cc:	08021684 	.word	0x08021684

0801c1d0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801c1d0:	b580      	push	{r7, lr}
 801c1d2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801c1d4:	2005      	movs	r0, #5
 801c1d6:	f7f6 fe65 	bl	8012ea4 <memp_malloc>
 801c1da:	4603      	mov	r3, r0
}
 801c1dc:	4618      	mov	r0, r3
 801c1de:	bd80      	pop	{r7, pc}

0801c1e0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801c1e0:	b580      	push	{r7, lr}
 801c1e2:	b082      	sub	sp, #8
 801c1e4:	af00      	add	r7, sp, #0
 801c1e6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801c1e8:	687b      	ldr	r3, [r7, #4]
 801c1ea:	2b00      	cmp	r3, #0
 801c1ec:	d106      	bne.n	801c1fc <ip_frag_free_pbuf_custom_ref+0x1c>
 801c1ee:	4b07      	ldr	r3, [pc, #28]	; (801c20c <ip_frag_free_pbuf_custom_ref+0x2c>)
 801c1f0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801c1f4:	4906      	ldr	r1, [pc, #24]	; (801c210 <ip_frag_free_pbuf_custom_ref+0x30>)
 801c1f6:	4807      	ldr	r0, [pc, #28]	; (801c214 <ip_frag_free_pbuf_custom_ref+0x34>)
 801c1f8:	f001 fda2 	bl	801dd40 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801c1fc:	6879      	ldr	r1, [r7, #4]
 801c1fe:	2005      	movs	r0, #5
 801c200:	f7f6 fec6 	bl	8012f90 <memp_free>
}
 801c204:	bf00      	nop
 801c206:	3708      	adds	r7, #8
 801c208:	46bd      	mov	sp, r7
 801c20a:	bd80      	pop	{r7, pc}
 801c20c:	080214ec 	.word	0x080214ec
 801c210:	080216a4 	.word	0x080216a4
 801c214:	08021534 	.word	0x08021534

0801c218 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801c218:	b580      	push	{r7, lr}
 801c21a:	b084      	sub	sp, #16
 801c21c:	af00      	add	r7, sp, #0
 801c21e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801c220:	687b      	ldr	r3, [r7, #4]
 801c222:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801c224:	68fb      	ldr	r3, [r7, #12]
 801c226:	2b00      	cmp	r3, #0
 801c228:	d106      	bne.n	801c238 <ipfrag_free_pbuf_custom+0x20>
 801c22a:	4b11      	ldr	r3, [pc, #68]	; (801c270 <ipfrag_free_pbuf_custom+0x58>)
 801c22c:	f240 22ce 	movw	r2, #718	; 0x2ce
 801c230:	4910      	ldr	r1, [pc, #64]	; (801c274 <ipfrag_free_pbuf_custom+0x5c>)
 801c232:	4811      	ldr	r0, [pc, #68]	; (801c278 <ipfrag_free_pbuf_custom+0x60>)
 801c234:	f001 fd84 	bl	801dd40 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801c238:	68fa      	ldr	r2, [r7, #12]
 801c23a:	687b      	ldr	r3, [r7, #4]
 801c23c:	429a      	cmp	r2, r3
 801c23e:	d006      	beq.n	801c24e <ipfrag_free_pbuf_custom+0x36>
 801c240:	4b0b      	ldr	r3, [pc, #44]	; (801c270 <ipfrag_free_pbuf_custom+0x58>)
 801c242:	f240 22cf 	movw	r2, #719	; 0x2cf
 801c246:	490d      	ldr	r1, [pc, #52]	; (801c27c <ipfrag_free_pbuf_custom+0x64>)
 801c248:	480b      	ldr	r0, [pc, #44]	; (801c278 <ipfrag_free_pbuf_custom+0x60>)
 801c24a:	f001 fd79 	bl	801dd40 <iprintf>
  if (pcr->original != NULL) {
 801c24e:	68fb      	ldr	r3, [r7, #12]
 801c250:	695b      	ldr	r3, [r3, #20]
 801c252:	2b00      	cmp	r3, #0
 801c254:	d004      	beq.n	801c260 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801c256:	68fb      	ldr	r3, [r7, #12]
 801c258:	695b      	ldr	r3, [r3, #20]
 801c25a:	4618      	mov	r0, r3
 801c25c:	f7f7 fd3c 	bl	8013cd8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801c260:	68f8      	ldr	r0, [r7, #12]
 801c262:	f7ff ffbd 	bl	801c1e0 <ip_frag_free_pbuf_custom_ref>
}
 801c266:	bf00      	nop
 801c268:	3710      	adds	r7, #16
 801c26a:	46bd      	mov	sp, r7
 801c26c:	bd80      	pop	{r7, pc}
 801c26e:	bf00      	nop
 801c270:	080214ec 	.word	0x080214ec
 801c274:	080216b0 	.word	0x080216b0
 801c278:	08021534 	.word	0x08021534
 801c27c:	080216bc 	.word	0x080216bc

0801c280 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801c280:	b580      	push	{r7, lr}
 801c282:	b094      	sub	sp, #80	; 0x50
 801c284:	af02      	add	r7, sp, #8
 801c286:	60f8      	str	r0, [r7, #12]
 801c288:	60b9      	str	r1, [r7, #8]
 801c28a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801c28c:	2300      	movs	r3, #0
 801c28e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801c292:	68bb      	ldr	r3, [r7, #8]
 801c294:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801c296:	3b14      	subs	r3, #20
 801c298:	2b00      	cmp	r3, #0
 801c29a:	da00      	bge.n	801c29e <ip4_frag+0x1e>
 801c29c:	3307      	adds	r3, #7
 801c29e:	10db      	asrs	r3, r3, #3
 801c2a0:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801c2a2:	2314      	movs	r3, #20
 801c2a4:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801c2a6:	68fb      	ldr	r3, [r7, #12]
 801c2a8:	685b      	ldr	r3, [r3, #4]
 801c2aa:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801c2ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801c2ae:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801c2b0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c2b2:	781b      	ldrb	r3, [r3, #0]
 801c2b4:	f003 030f 	and.w	r3, r3, #15
 801c2b8:	b2db      	uxtb	r3, r3
 801c2ba:	009b      	lsls	r3, r3, #2
 801c2bc:	b2db      	uxtb	r3, r3
 801c2be:	2b14      	cmp	r3, #20
 801c2c0:	d002      	beq.n	801c2c8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801c2c2:	f06f 0305 	mvn.w	r3, #5
 801c2c6:	e110      	b.n	801c4ea <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801c2c8:	68fb      	ldr	r3, [r7, #12]
 801c2ca:	895b      	ldrh	r3, [r3, #10]
 801c2cc:	2b13      	cmp	r3, #19
 801c2ce:	d809      	bhi.n	801c2e4 <ip4_frag+0x64>
 801c2d0:	4b88      	ldr	r3, [pc, #544]	; (801c4f4 <ip4_frag+0x274>)
 801c2d2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801c2d6:	4988      	ldr	r1, [pc, #544]	; (801c4f8 <ip4_frag+0x278>)
 801c2d8:	4888      	ldr	r0, [pc, #544]	; (801c4fc <ip4_frag+0x27c>)
 801c2da:	f001 fd31 	bl	801dd40 <iprintf>
 801c2de:	f06f 0305 	mvn.w	r3, #5
 801c2e2:	e102      	b.n	801c4ea <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801c2e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c2e6:	88db      	ldrh	r3, [r3, #6]
 801c2e8:	b29b      	uxth	r3, r3
 801c2ea:	4618      	mov	r0, r3
 801c2ec:	f7f6 f8f2 	bl	80124d4 <lwip_htons>
 801c2f0:	4603      	mov	r3, r0
 801c2f2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801c2f4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801c2f6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c2fa:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801c2fe:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801c300:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801c304:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801c306:	68fb      	ldr	r3, [r7, #12]
 801c308:	891b      	ldrh	r3, [r3, #8]
 801c30a:	3b14      	subs	r3, #20
 801c30c:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801c310:	e0e1      	b.n	801c4d6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801c312:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801c314:	00db      	lsls	r3, r3, #3
 801c316:	b29b      	uxth	r3, r3
 801c318:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c31c:	4293      	cmp	r3, r2
 801c31e:	bf28      	it	cs
 801c320:	4613      	movcs	r3, r2
 801c322:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801c324:	f44f 7220 	mov.w	r2, #640	; 0x280
 801c328:	2114      	movs	r1, #20
 801c32a:	200e      	movs	r0, #14
 801c32c:	f7f7 f9f0 	bl	8013710 <pbuf_alloc>
 801c330:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801c332:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c334:	2b00      	cmp	r3, #0
 801c336:	f000 80d5 	beq.w	801c4e4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801c33a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c33c:	895b      	ldrh	r3, [r3, #10]
 801c33e:	2b13      	cmp	r3, #19
 801c340:	d806      	bhi.n	801c350 <ip4_frag+0xd0>
 801c342:	4b6c      	ldr	r3, [pc, #432]	; (801c4f4 <ip4_frag+0x274>)
 801c344:	f44f 7249 	mov.w	r2, #804	; 0x324
 801c348:	496d      	ldr	r1, [pc, #436]	; (801c500 <ip4_frag+0x280>)
 801c34a:	486c      	ldr	r0, [pc, #432]	; (801c4fc <ip4_frag+0x27c>)
 801c34c:	f001 fcf8 	bl	801dd40 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801c350:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c352:	685b      	ldr	r3, [r3, #4]
 801c354:	2214      	movs	r2, #20
 801c356:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801c358:	4618      	mov	r0, r3
 801c35a:	f001 fe22 	bl	801dfa2 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801c35e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c360:	685b      	ldr	r3, [r3, #4]
 801c362:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801c364:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801c366:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801c36a:	e064      	b.n	801c436 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801c36c:	68fb      	ldr	r3, [r7, #12]
 801c36e:	895a      	ldrh	r2, [r3, #10]
 801c370:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801c372:	1ad3      	subs	r3, r2, r3
 801c374:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801c376:	68fb      	ldr	r3, [r7, #12]
 801c378:	895b      	ldrh	r3, [r3, #10]
 801c37a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801c37c:	429a      	cmp	r2, r3
 801c37e:	d906      	bls.n	801c38e <ip4_frag+0x10e>
 801c380:	4b5c      	ldr	r3, [pc, #368]	; (801c4f4 <ip4_frag+0x274>)
 801c382:	f240 322d 	movw	r2, #813	; 0x32d
 801c386:	495f      	ldr	r1, [pc, #380]	; (801c504 <ip4_frag+0x284>)
 801c388:	485c      	ldr	r0, [pc, #368]	; (801c4fc <ip4_frag+0x27c>)
 801c38a:	f001 fcd9 	bl	801dd40 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801c38e:	8bfa      	ldrh	r2, [r7, #30]
 801c390:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801c394:	4293      	cmp	r3, r2
 801c396:	bf28      	it	cs
 801c398:	4613      	movcs	r3, r2
 801c39a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801c39e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801c3a2:	2b00      	cmp	r3, #0
 801c3a4:	d105      	bne.n	801c3b2 <ip4_frag+0x132>
        poff = 0;
 801c3a6:	2300      	movs	r3, #0
 801c3a8:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801c3aa:	68fb      	ldr	r3, [r7, #12]
 801c3ac:	681b      	ldr	r3, [r3, #0]
 801c3ae:	60fb      	str	r3, [r7, #12]
        continue;
 801c3b0:	e041      	b.n	801c436 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801c3b2:	f7ff ff0d 	bl	801c1d0 <ip_frag_alloc_pbuf_custom_ref>
 801c3b6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801c3b8:	69bb      	ldr	r3, [r7, #24]
 801c3ba:	2b00      	cmp	r3, #0
 801c3bc:	d103      	bne.n	801c3c6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801c3be:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c3c0:	f7f7 fc8a 	bl	8013cd8 <pbuf_free>
        goto memerr;
 801c3c4:	e08f      	b.n	801c4e6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801c3c6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801c3c8:	68fb      	ldr	r3, [r7, #12]
 801c3ca:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801c3cc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801c3ce:	4413      	add	r3, r2
 801c3d0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801c3d4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801c3d8:	9201      	str	r2, [sp, #4]
 801c3da:	9300      	str	r3, [sp, #0]
 801c3dc:	4603      	mov	r3, r0
 801c3de:	2241      	movs	r2, #65	; 0x41
 801c3e0:	2000      	movs	r0, #0
 801c3e2:	f7f7 fabf 	bl	8013964 <pbuf_alloced_custom>
 801c3e6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801c3e8:	697b      	ldr	r3, [r7, #20]
 801c3ea:	2b00      	cmp	r3, #0
 801c3ec:	d106      	bne.n	801c3fc <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801c3ee:	69b8      	ldr	r0, [r7, #24]
 801c3f0:	f7ff fef6 	bl	801c1e0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801c3f4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c3f6:	f7f7 fc6f 	bl	8013cd8 <pbuf_free>
        goto memerr;
 801c3fa:	e074      	b.n	801c4e6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801c3fc:	68f8      	ldr	r0, [r7, #12]
 801c3fe:	f7f7 fd11 	bl	8013e24 <pbuf_ref>
      pcr->original = p;
 801c402:	69bb      	ldr	r3, [r7, #24]
 801c404:	68fa      	ldr	r2, [r7, #12]
 801c406:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801c408:	69bb      	ldr	r3, [r7, #24]
 801c40a:	4a3f      	ldr	r2, [pc, #252]	; (801c508 <ip4_frag+0x288>)
 801c40c:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801c40e:	6979      	ldr	r1, [r7, #20]
 801c410:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c412:	f7f7 fd2f 	bl	8013e74 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801c416:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801c41a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801c41e:	1ad3      	subs	r3, r2, r3
 801c420:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801c424:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801c428:	2b00      	cmp	r3, #0
 801c42a:	d004      	beq.n	801c436 <ip4_frag+0x1b6>
        poff = 0;
 801c42c:	2300      	movs	r3, #0
 801c42e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801c430:	68fb      	ldr	r3, [r7, #12]
 801c432:	681b      	ldr	r3, [r3, #0]
 801c434:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801c436:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801c43a:	2b00      	cmp	r3, #0
 801c43c:	d196      	bne.n	801c36c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801c43e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801c440:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801c444:	4413      	add	r3, r2
 801c446:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801c448:	68bb      	ldr	r3, [r7, #8]
 801c44a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801c44c:	f1a3 0213 	sub.w	r2, r3, #19
 801c450:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c454:	429a      	cmp	r2, r3
 801c456:	bfcc      	ite	gt
 801c458:	2301      	movgt	r3, #1
 801c45a:	2300      	movle	r3, #0
 801c45c:	b2db      	uxtb	r3, r3
 801c45e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801c460:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801c464:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801c468:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801c46a:	6a3b      	ldr	r3, [r7, #32]
 801c46c:	2b00      	cmp	r3, #0
 801c46e:	d002      	beq.n	801c476 <ip4_frag+0x1f6>
 801c470:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c472:	2b00      	cmp	r3, #0
 801c474:	d003      	beq.n	801c47e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801c476:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801c478:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801c47c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801c47e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801c480:	4618      	mov	r0, r3
 801c482:	f7f6 f827 	bl	80124d4 <lwip_htons>
 801c486:	4603      	mov	r3, r0
 801c488:	461a      	mov	r2, r3
 801c48a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c48c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801c48e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801c490:	3314      	adds	r3, #20
 801c492:	b29b      	uxth	r3, r3
 801c494:	4618      	mov	r0, r3
 801c496:	f7f6 f81d 	bl	80124d4 <lwip_htons>
 801c49a:	4603      	mov	r3, r0
 801c49c:	461a      	mov	r2, r3
 801c49e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c4a0:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801c4a2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801c4a4:	2200      	movs	r2, #0
 801c4a6:	729a      	strb	r2, [r3, #10]
 801c4a8:	2200      	movs	r2, #0
 801c4aa:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801c4ac:	68bb      	ldr	r3, [r7, #8]
 801c4ae:	695b      	ldr	r3, [r3, #20]
 801c4b0:	687a      	ldr	r2, [r7, #4]
 801c4b2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801c4b4:	68b8      	ldr	r0, [r7, #8]
 801c4b6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801c4b8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801c4ba:	f7f7 fc0d 	bl	8013cd8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801c4be:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801c4c2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801c4c4:	1ad3      	subs	r3, r2, r3
 801c4c6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801c4ca:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801c4ce:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801c4d0:	4413      	add	r3, r2
 801c4d2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801c4d6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801c4da:	2b00      	cmp	r3, #0
 801c4dc:	f47f af19 	bne.w	801c312 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801c4e0:	2300      	movs	r3, #0
 801c4e2:	e002      	b.n	801c4ea <ip4_frag+0x26a>
      goto memerr;
 801c4e4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801c4e6:	f04f 33ff 	mov.w	r3, #4294967295
}
 801c4ea:	4618      	mov	r0, r3
 801c4ec:	3748      	adds	r7, #72	; 0x48
 801c4ee:	46bd      	mov	sp, r7
 801c4f0:	bd80      	pop	{r7, pc}
 801c4f2:	bf00      	nop
 801c4f4:	080214ec 	.word	0x080214ec
 801c4f8:	080216c8 	.word	0x080216c8
 801c4fc:	08021534 	.word	0x08021534
 801c500:	080216e4 	.word	0x080216e4
 801c504:	08021704 	.word	0x08021704
 801c508:	0801c219 	.word	0x0801c219

0801c50c <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801c50c:	b580      	push	{r7, lr}
 801c50e:	b086      	sub	sp, #24
 801c510:	af00      	add	r7, sp, #0
 801c512:	6078      	str	r0, [r7, #4]
 801c514:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801c516:	230e      	movs	r3, #14
 801c518:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801c51a:	687b      	ldr	r3, [r7, #4]
 801c51c:	895b      	ldrh	r3, [r3, #10]
 801c51e:	2b0e      	cmp	r3, #14
 801c520:	d96e      	bls.n	801c600 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801c522:	687b      	ldr	r3, [r7, #4]
 801c524:	7bdb      	ldrb	r3, [r3, #15]
 801c526:	2b00      	cmp	r3, #0
 801c528:	d106      	bne.n	801c538 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801c52a:	683b      	ldr	r3, [r7, #0]
 801c52c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801c530:	3301      	adds	r3, #1
 801c532:	b2da      	uxtb	r2, r3
 801c534:	687b      	ldr	r3, [r7, #4]
 801c536:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801c538:	687b      	ldr	r3, [r7, #4]
 801c53a:	685b      	ldr	r3, [r3, #4]
 801c53c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801c53e:	693b      	ldr	r3, [r7, #16]
 801c540:	7b1a      	ldrb	r2, [r3, #12]
 801c542:	7b5b      	ldrb	r3, [r3, #13]
 801c544:	021b      	lsls	r3, r3, #8
 801c546:	4313      	orrs	r3, r2
 801c548:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801c54a:	693b      	ldr	r3, [r7, #16]
 801c54c:	781b      	ldrb	r3, [r3, #0]
 801c54e:	f003 0301 	and.w	r3, r3, #1
 801c552:	2b00      	cmp	r3, #0
 801c554:	d023      	beq.n	801c59e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801c556:	693b      	ldr	r3, [r7, #16]
 801c558:	781b      	ldrb	r3, [r3, #0]
 801c55a:	2b01      	cmp	r3, #1
 801c55c:	d10f      	bne.n	801c57e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801c55e:	693b      	ldr	r3, [r7, #16]
 801c560:	785b      	ldrb	r3, [r3, #1]
 801c562:	2b00      	cmp	r3, #0
 801c564:	d11b      	bne.n	801c59e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801c566:	693b      	ldr	r3, [r7, #16]
 801c568:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801c56a:	2b5e      	cmp	r3, #94	; 0x5e
 801c56c:	d117      	bne.n	801c59e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801c56e:	687b      	ldr	r3, [r7, #4]
 801c570:	7b5b      	ldrb	r3, [r3, #13]
 801c572:	f043 0310 	orr.w	r3, r3, #16
 801c576:	b2da      	uxtb	r2, r3
 801c578:	687b      	ldr	r3, [r7, #4]
 801c57a:	735a      	strb	r2, [r3, #13]
 801c57c:	e00f      	b.n	801c59e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801c57e:	693b      	ldr	r3, [r7, #16]
 801c580:	2206      	movs	r2, #6
 801c582:	4928      	ldr	r1, [pc, #160]	; (801c624 <ethernet_input+0x118>)
 801c584:	4618      	mov	r0, r3
 801c586:	f001 fc30 	bl	801ddea <memcmp>
 801c58a:	4603      	mov	r3, r0
 801c58c:	2b00      	cmp	r3, #0
 801c58e:	d106      	bne.n	801c59e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801c590:	687b      	ldr	r3, [r7, #4]
 801c592:	7b5b      	ldrb	r3, [r3, #13]
 801c594:	f043 0308 	orr.w	r3, r3, #8
 801c598:	b2da      	uxtb	r2, r3
 801c59a:	687b      	ldr	r3, [r7, #4]
 801c59c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801c59e:	89fb      	ldrh	r3, [r7, #14]
 801c5a0:	2b08      	cmp	r3, #8
 801c5a2:	d003      	beq.n	801c5ac <ethernet_input+0xa0>
 801c5a4:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801c5a8:	d014      	beq.n	801c5d4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801c5aa:	e032      	b.n	801c612 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801c5ac:	683b      	ldr	r3, [r7, #0]
 801c5ae:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801c5b2:	f003 0308 	and.w	r3, r3, #8
 801c5b6:	2b00      	cmp	r3, #0
 801c5b8:	d024      	beq.n	801c604 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801c5ba:	8afb      	ldrh	r3, [r7, #22]
 801c5bc:	4619      	mov	r1, r3
 801c5be:	6878      	ldr	r0, [r7, #4]
 801c5c0:	f7f7 fb04 	bl	8013bcc <pbuf_remove_header>
 801c5c4:	4603      	mov	r3, r0
 801c5c6:	2b00      	cmp	r3, #0
 801c5c8:	d11e      	bne.n	801c608 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801c5ca:	6839      	ldr	r1, [r7, #0]
 801c5cc:	6878      	ldr	r0, [r7, #4]
 801c5ce:	f7fe ff21 	bl	801b414 <ip4_input>
      break;
 801c5d2:	e013      	b.n	801c5fc <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801c5d4:	683b      	ldr	r3, [r7, #0]
 801c5d6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801c5da:	f003 0308 	and.w	r3, r3, #8
 801c5de:	2b00      	cmp	r3, #0
 801c5e0:	d014      	beq.n	801c60c <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801c5e2:	8afb      	ldrh	r3, [r7, #22]
 801c5e4:	4619      	mov	r1, r3
 801c5e6:	6878      	ldr	r0, [r7, #4]
 801c5e8:	f7f7 faf0 	bl	8013bcc <pbuf_remove_header>
 801c5ec:	4603      	mov	r3, r0
 801c5ee:	2b00      	cmp	r3, #0
 801c5f0:	d10e      	bne.n	801c610 <ethernet_input+0x104>
        etharp_input(p, netif);
 801c5f2:	6839      	ldr	r1, [r7, #0]
 801c5f4:	6878      	ldr	r0, [r7, #4]
 801c5f6:	f7fe f8c1 	bl	801a77c <etharp_input>
      break;
 801c5fa:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801c5fc:	2300      	movs	r3, #0
 801c5fe:	e00c      	b.n	801c61a <ethernet_input+0x10e>
    goto free_and_return;
 801c600:	bf00      	nop
 801c602:	e006      	b.n	801c612 <ethernet_input+0x106>
        goto free_and_return;
 801c604:	bf00      	nop
 801c606:	e004      	b.n	801c612 <ethernet_input+0x106>
        goto free_and_return;
 801c608:	bf00      	nop
 801c60a:	e002      	b.n	801c612 <ethernet_input+0x106>
        goto free_and_return;
 801c60c:	bf00      	nop
 801c60e:	e000      	b.n	801c612 <ethernet_input+0x106>
        goto free_and_return;
 801c610:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801c612:	6878      	ldr	r0, [r7, #4]
 801c614:	f7f7 fb60 	bl	8013cd8 <pbuf_free>
  return ERR_OK;
 801c618:	2300      	movs	r3, #0
}
 801c61a:	4618      	mov	r0, r3
 801c61c:	3718      	adds	r7, #24
 801c61e:	46bd      	mov	sp, r7
 801c620:	bd80      	pop	{r7, pc}
 801c622:	bf00      	nop
 801c624:	08021914 	.word	0x08021914

0801c628 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801c628:	b580      	push	{r7, lr}
 801c62a:	b086      	sub	sp, #24
 801c62c:	af00      	add	r7, sp, #0
 801c62e:	60f8      	str	r0, [r7, #12]
 801c630:	60b9      	str	r1, [r7, #8]
 801c632:	607a      	str	r2, [r7, #4]
 801c634:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801c636:	8c3b      	ldrh	r3, [r7, #32]
 801c638:	4618      	mov	r0, r3
 801c63a:	f7f5 ff4b 	bl	80124d4 <lwip_htons>
 801c63e:	4603      	mov	r3, r0
 801c640:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801c642:	210e      	movs	r1, #14
 801c644:	68b8      	ldr	r0, [r7, #8]
 801c646:	f7f7 fab1 	bl	8013bac <pbuf_add_header>
 801c64a:	4603      	mov	r3, r0
 801c64c:	2b00      	cmp	r3, #0
 801c64e:	d125      	bne.n	801c69c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801c650:	68bb      	ldr	r3, [r7, #8]
 801c652:	685b      	ldr	r3, [r3, #4]
 801c654:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801c656:	693b      	ldr	r3, [r7, #16]
 801c658:	8afa      	ldrh	r2, [r7, #22]
 801c65a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801c65c:	693b      	ldr	r3, [r7, #16]
 801c65e:	2206      	movs	r2, #6
 801c660:	6839      	ldr	r1, [r7, #0]
 801c662:	4618      	mov	r0, r3
 801c664:	f001 fc9d 	bl	801dfa2 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801c668:	693b      	ldr	r3, [r7, #16]
 801c66a:	3306      	adds	r3, #6
 801c66c:	2206      	movs	r2, #6
 801c66e:	6879      	ldr	r1, [r7, #4]
 801c670:	4618      	mov	r0, r3
 801c672:	f001 fc96 	bl	801dfa2 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801c676:	68fb      	ldr	r3, [r7, #12]
 801c678:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801c67c:	2b06      	cmp	r3, #6
 801c67e:	d006      	beq.n	801c68e <ethernet_output+0x66>
 801c680:	4b0a      	ldr	r3, [pc, #40]	; (801c6ac <ethernet_output+0x84>)
 801c682:	f44f 7299 	mov.w	r2, #306	; 0x132
 801c686:	490a      	ldr	r1, [pc, #40]	; (801c6b0 <ethernet_output+0x88>)
 801c688:	480a      	ldr	r0, [pc, #40]	; (801c6b4 <ethernet_output+0x8c>)
 801c68a:	f001 fb59 	bl	801dd40 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801c68e:	68fb      	ldr	r3, [r7, #12]
 801c690:	699b      	ldr	r3, [r3, #24]
 801c692:	68b9      	ldr	r1, [r7, #8]
 801c694:	68f8      	ldr	r0, [r7, #12]
 801c696:	4798      	blx	r3
 801c698:	4603      	mov	r3, r0
 801c69a:	e002      	b.n	801c6a2 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801c69c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801c69e:	f06f 0301 	mvn.w	r3, #1
}
 801c6a2:	4618      	mov	r0, r3
 801c6a4:	3718      	adds	r7, #24
 801c6a6:	46bd      	mov	sp, r7
 801c6a8:	bd80      	pop	{r7, pc}
 801c6aa:	bf00      	nop
 801c6ac:	08021714 	.word	0x08021714
 801c6b0:	0802174c 	.word	0x0802174c
 801c6b4:	08021780 	.word	0x08021780

0801c6b8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801c6b8:	b580      	push	{r7, lr}
 801c6ba:	b086      	sub	sp, #24
 801c6bc:	af00      	add	r7, sp, #0
 801c6be:	6078      	str	r0, [r7, #4]
 801c6c0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801c6c2:	683b      	ldr	r3, [r7, #0]
 801c6c4:	60bb      	str	r3, [r7, #8]
 801c6c6:	2304      	movs	r3, #4
 801c6c8:	60fb      	str	r3, [r7, #12]
 801c6ca:	2300      	movs	r3, #0
 801c6cc:	613b      	str	r3, [r7, #16]
 801c6ce:	2300      	movs	r3, #0
 801c6d0:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801c6d2:	f107 0308 	add.w	r3, r7, #8
 801c6d6:	2100      	movs	r1, #0
 801c6d8:	4618      	mov	r0, r3
 801c6da:	f7f2 ff2d 	bl	800f538 <osMessageCreate>
 801c6de:	4602      	mov	r2, r0
 801c6e0:	687b      	ldr	r3, [r7, #4]
 801c6e2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801c6e4:	687b      	ldr	r3, [r7, #4]
 801c6e6:	681b      	ldr	r3, [r3, #0]
 801c6e8:	2b00      	cmp	r3, #0
 801c6ea:	d102      	bne.n	801c6f2 <sys_mbox_new+0x3a>
    return ERR_MEM;
 801c6ec:	f04f 33ff 	mov.w	r3, #4294967295
 801c6f0:	e000      	b.n	801c6f4 <sys_mbox_new+0x3c>

  return ERR_OK;
 801c6f2:	2300      	movs	r3, #0
}
 801c6f4:	4618      	mov	r0, r3
 801c6f6:	3718      	adds	r7, #24
 801c6f8:	46bd      	mov	sp, r7
 801c6fa:	bd80      	pop	{r7, pc}

0801c6fc <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801c6fc:	b580      	push	{r7, lr}
 801c6fe:	b084      	sub	sp, #16
 801c700:	af00      	add	r7, sp, #0
 801c702:	6078      	str	r0, [r7, #4]
 801c704:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801c706:	687b      	ldr	r3, [r7, #4]
 801c708:	681b      	ldr	r3, [r3, #0]
 801c70a:	6839      	ldr	r1, [r7, #0]
 801c70c:	2200      	movs	r2, #0
 801c70e:	4618      	mov	r0, r3
 801c710:	f7f2 ff3a 	bl	800f588 <osMessagePut>
 801c714:	4603      	mov	r3, r0
 801c716:	2b00      	cmp	r3, #0
 801c718:	d102      	bne.n	801c720 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801c71a:	2300      	movs	r3, #0
 801c71c:	73fb      	strb	r3, [r7, #15]
 801c71e:	e001      	b.n	801c724 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801c720:	23ff      	movs	r3, #255	; 0xff
 801c722:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801c724:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801c728:	4618      	mov	r0, r3
 801c72a:	3710      	adds	r7, #16
 801c72c:	46bd      	mov	sp, r7
 801c72e:	bd80      	pop	{r7, pc}

0801c730 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801c730:	b580      	push	{r7, lr}
 801c732:	b08c      	sub	sp, #48	; 0x30
 801c734:	af00      	add	r7, sp, #0
 801c736:	61f8      	str	r0, [r7, #28]
 801c738:	61b9      	str	r1, [r7, #24]
 801c73a:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801c73c:	f7f2 fd2d 	bl	800f19a <osKernelSysTick>
 801c740:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801c742:	697b      	ldr	r3, [r7, #20]
 801c744:	2b00      	cmp	r3, #0
 801c746:	d017      	beq.n	801c778 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801c748:	69fb      	ldr	r3, [r7, #28]
 801c74a:	6819      	ldr	r1, [r3, #0]
 801c74c:	f107 0320 	add.w	r3, r7, #32
 801c750:	697a      	ldr	r2, [r7, #20]
 801c752:	4618      	mov	r0, r3
 801c754:	f7f2 ff58 	bl	800f608 <osMessageGet>

    if(event.status == osEventMessage)
 801c758:	6a3b      	ldr	r3, [r7, #32]
 801c75a:	2b10      	cmp	r3, #16
 801c75c:	d109      	bne.n	801c772 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801c75e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c760:	461a      	mov	r2, r3
 801c762:	69bb      	ldr	r3, [r7, #24]
 801c764:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801c766:	f7f2 fd18 	bl	800f19a <osKernelSysTick>
 801c76a:	4602      	mov	r2, r0
 801c76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c76e:	1ad3      	subs	r3, r2, r3
 801c770:	e019      	b.n	801c7a6 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801c772:	f04f 33ff 	mov.w	r3, #4294967295
 801c776:	e016      	b.n	801c7a6 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801c778:	69fb      	ldr	r3, [r7, #28]
 801c77a:	6819      	ldr	r1, [r3, #0]
 801c77c:	463b      	mov	r3, r7
 801c77e:	f04f 32ff 	mov.w	r2, #4294967295
 801c782:	4618      	mov	r0, r3
 801c784:	f7f2 ff40 	bl	800f608 <osMessageGet>
 801c788:	f107 0320 	add.w	r3, r7, #32
 801c78c:	463a      	mov	r2, r7
 801c78e:	ca07      	ldmia	r2, {r0, r1, r2}
 801c790:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801c794:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801c796:	461a      	mov	r2, r3
 801c798:	69bb      	ldr	r3, [r7, #24]
 801c79a:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801c79c:	f7f2 fcfd 	bl	800f19a <osKernelSysTick>
 801c7a0:	4602      	mov	r2, r0
 801c7a2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801c7a4:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801c7a6:	4618      	mov	r0, r3
 801c7a8:	3730      	adds	r7, #48	; 0x30
 801c7aa:	46bd      	mov	sp, r7
 801c7ac:	bd80      	pop	{r7, pc}

0801c7ae <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801c7ae:	b480      	push	{r7}
 801c7b0:	b083      	sub	sp, #12
 801c7b2:	af00      	add	r7, sp, #0
 801c7b4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801c7b6:	687b      	ldr	r3, [r7, #4]
 801c7b8:	681b      	ldr	r3, [r3, #0]
 801c7ba:	2b00      	cmp	r3, #0
 801c7bc:	d101      	bne.n	801c7c2 <sys_mbox_valid+0x14>
    return 0;
 801c7be:	2300      	movs	r3, #0
 801c7c0:	e000      	b.n	801c7c4 <sys_mbox_valid+0x16>
  else
    return 1;
 801c7c2:	2301      	movs	r3, #1
}
 801c7c4:	4618      	mov	r0, r3
 801c7c6:	370c      	adds	r7, #12
 801c7c8:	46bd      	mov	sp, r7
 801c7ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 801c7ce:	4770      	bx	lr

0801c7d0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801c7d0:	b580      	push	{r7, lr}
 801c7d2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801c7d4:	4803      	ldr	r0, [pc, #12]	; (801c7e4 <sys_init+0x14>)
 801c7d6:	f7f2 fd5c 	bl	800f292 <osMutexCreate>
 801c7da:	4603      	mov	r3, r0
 801c7dc:	4a02      	ldr	r2, [pc, #8]	; (801c7e8 <sys_init+0x18>)
 801c7de:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801c7e0:	bf00      	nop
 801c7e2:	bd80      	pop	{r7, pc}
 801c7e4:	08021924 	.word	0x08021924
 801c7e8:	200241fc 	.word	0x200241fc

0801c7ec <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801c7ec:	b580      	push	{r7, lr}
 801c7ee:	b084      	sub	sp, #16
 801c7f0:	af00      	add	r7, sp, #0
 801c7f2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801c7f4:	2300      	movs	r3, #0
 801c7f6:	60bb      	str	r3, [r7, #8]
 801c7f8:	2300      	movs	r3, #0
 801c7fa:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801c7fc:	f107 0308 	add.w	r3, r7, #8
 801c800:	4618      	mov	r0, r3
 801c802:	f7f2 fd46 	bl	800f292 <osMutexCreate>
 801c806:	4602      	mov	r2, r0
 801c808:	687b      	ldr	r3, [r7, #4]
 801c80a:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801c80c:	687b      	ldr	r3, [r7, #4]
 801c80e:	681b      	ldr	r3, [r3, #0]
 801c810:	2b00      	cmp	r3, #0
 801c812:	d102      	bne.n	801c81a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801c814:	f04f 33ff 	mov.w	r3, #4294967295
 801c818:	e000      	b.n	801c81c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801c81a:	2300      	movs	r3, #0
}
 801c81c:	4618      	mov	r0, r3
 801c81e:	3710      	adds	r7, #16
 801c820:	46bd      	mov	sp, r7
 801c822:	bd80      	pop	{r7, pc}

0801c824 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801c824:	b580      	push	{r7, lr}
 801c826:	b082      	sub	sp, #8
 801c828:	af00      	add	r7, sp, #0
 801c82a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801c82c:	687b      	ldr	r3, [r7, #4]
 801c82e:	681b      	ldr	r3, [r3, #0]
 801c830:	f04f 31ff 	mov.w	r1, #4294967295
 801c834:	4618      	mov	r0, r3
 801c836:	f7f2 fd45 	bl	800f2c4 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801c83a:	bf00      	nop
 801c83c:	3708      	adds	r7, #8
 801c83e:	46bd      	mov	sp, r7
 801c840:	bd80      	pop	{r7, pc}

0801c842 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801c842:	b580      	push	{r7, lr}
 801c844:	b082      	sub	sp, #8
 801c846:	af00      	add	r7, sp, #0
 801c848:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801c84a:	687b      	ldr	r3, [r7, #4]
 801c84c:	681b      	ldr	r3, [r3, #0]
 801c84e:	4618      	mov	r0, r3
 801c850:	f7f2 fd86 	bl	800f360 <osMutexRelease>
}
 801c854:	bf00      	nop
 801c856:	3708      	adds	r7, #8
 801c858:	46bd      	mov	sp, r7
 801c85a:	bd80      	pop	{r7, pc}

0801c85c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801c85c:	b580      	push	{r7, lr}
 801c85e:	b08c      	sub	sp, #48	; 0x30
 801c860:	af00      	add	r7, sp, #0
 801c862:	60f8      	str	r0, [r7, #12]
 801c864:	60b9      	str	r1, [r7, #8]
 801c866:	607a      	str	r2, [r7, #4]
 801c868:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801c86a:	f107 0314 	add.w	r3, r7, #20
 801c86e:	2200      	movs	r2, #0
 801c870:	601a      	str	r2, [r3, #0]
 801c872:	605a      	str	r2, [r3, #4]
 801c874:	609a      	str	r2, [r3, #8]
 801c876:	60da      	str	r2, [r3, #12]
 801c878:	611a      	str	r2, [r3, #16]
 801c87a:	615a      	str	r2, [r3, #20]
 801c87c:	619a      	str	r2, [r3, #24]
 801c87e:	68fb      	ldr	r3, [r7, #12]
 801c880:	617b      	str	r3, [r7, #20]
 801c882:	68bb      	ldr	r3, [r7, #8]
 801c884:	61bb      	str	r3, [r7, #24]
 801c886:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c888:	b21b      	sxth	r3, r3
 801c88a:	83bb      	strh	r3, [r7, #28]
 801c88c:	683b      	ldr	r3, [r7, #0]
 801c88e:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801c890:	f107 0314 	add.w	r3, r7, #20
 801c894:	6879      	ldr	r1, [r7, #4]
 801c896:	4618      	mov	r0, r3
 801c898:	f7f2 fc8f 	bl	800f1ba <osThreadCreate>
 801c89c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801c89e:	4618      	mov	r0, r3
 801c8a0:	3730      	adds	r7, #48	; 0x30
 801c8a2:	46bd      	mov	sp, r7
 801c8a4:	bd80      	pop	{r7, pc}
	...

0801c8a8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801c8a8:	b580      	push	{r7, lr}
 801c8aa:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801c8ac:	4b04      	ldr	r3, [pc, #16]	; (801c8c0 <sys_arch_protect+0x18>)
 801c8ae:	681b      	ldr	r3, [r3, #0]
 801c8b0:	f04f 31ff 	mov.w	r1, #4294967295
 801c8b4:	4618      	mov	r0, r3
 801c8b6:	f7f2 fd05 	bl	800f2c4 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801c8ba:	2301      	movs	r3, #1
}
 801c8bc:	4618      	mov	r0, r3
 801c8be:	bd80      	pop	{r7, pc}
 801c8c0:	200241fc 	.word	0x200241fc

0801c8c4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801c8c4:	b580      	push	{r7, lr}
 801c8c6:	b082      	sub	sp, #8
 801c8c8:	af00      	add	r7, sp, #0
 801c8ca:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801c8cc:	4b04      	ldr	r3, [pc, #16]	; (801c8e0 <sys_arch_unprotect+0x1c>)
 801c8ce:	681b      	ldr	r3, [r3, #0]
 801c8d0:	4618      	mov	r0, r3
 801c8d2:	f7f2 fd45 	bl	800f360 <osMutexRelease>
}
 801c8d6:	bf00      	nop
 801c8d8:	3708      	adds	r7, #8
 801c8da:	46bd      	mov	sp, r7
 801c8dc:	bd80      	pop	{r7, pc}
 801c8de:	bf00      	nop
 801c8e0:	200241fc 	.word	0x200241fc

0801c8e4 <adc_1_2_3_dac1_task>:
 * \param[in]       test_select: select what test in the function to run
 * \param[in]       error_report: report to pc about test error
 */
void
adc_1_2_3_dac1_task(uint8_t* data, uint16_t sizeof_data, SemaphoreHandle_t* interrupt_sem, uint8_t test_select,
                    uint8_t* error_report) {
 801c8e4:	b580      	push	{r7, lr}
 801c8e6:	b086      	sub	sp, #24
 801c8e8:	af00      	add	r7, sp, #0
 801c8ea:	60f8      	str	r0, [r7, #12]
 801c8ec:	607a      	str	r2, [r7, #4]
 801c8ee:	461a      	mov	r2, r3
 801c8f0:	460b      	mov	r3, r1
 801c8f2:	817b      	strh	r3, [r7, #10]
 801c8f4:	4613      	mov	r3, r2
 801c8f6:	727b      	strb	r3, [r7, #9]

    HAL_StatusTypeDef status; /* error return check */
    *error_report = NO_ERROR; /* initalized to  NO_ERROR if an error is accruing it will change it */
 801c8f8:	6a3b      	ldr	r3, [r7, #32]
 801c8fa:	2200      	movs	r2, #0
 801c8fc:	701a      	strb	r2, [r3, #0]
    /* run task test requested by pc */
    switch (test_select) {
 801c8fe:	7a7b      	ldrb	r3, [r7, #9]
 801c900:	2b02      	cmp	r3, #2
 801c902:	d044      	beq.n	801c98e <adc_1_2_3_dac1_task+0xaa>
 801c904:	2b02      	cmp	r3, #2
 801c906:	dc61      	bgt.n	801c9cc <adc_1_2_3_dac1_task+0xe8>
 801c908:	2b00      	cmp	r3, #0
 801c90a:	d002      	beq.n	801c912 <adc_1_2_3_dac1_task+0x2e>
 801c90c:	2b01      	cmp	r3, #1
 801c90e:	d01f      	beq.n	801c950 <adc_1_2_3_dac1_task+0x6c>
            HAL_ADC_Start(&hadc3);
            data[0] = HAL_ADC_GetValue(&hadc3);

            break;

        default: break;
 801c910:	e05c      	b.n	801c9cc <adc_1_2_3_dac1_task+0xe8>
            HAL_DAC_Start(&hdac, DAC1_CHANNEL_1);
 801c912:	2100      	movs	r1, #0
 801c914:	482f      	ldr	r0, [pc, #188]	; (801c9d4 <adc_1_2_3_dac1_task+0xf0>)
 801c916:	f7e7 fd99 	bl	800444c <HAL_DAC_Start>
            status = HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, data[0]);
 801c91a:	68fb      	ldr	r3, [r7, #12]
 801c91c:	781b      	ldrb	r3, [r3, #0]
 801c91e:	2200      	movs	r2, #0
 801c920:	2100      	movs	r1, #0
 801c922:	482c      	ldr	r0, [pc, #176]	; (801c9d4 <adc_1_2_3_dac1_task+0xf0>)
 801c924:	f7e7 fde9 	bl	80044fa <HAL_DAC_SetValue>
 801c928:	4603      	mov	r3, r0
 801c92a:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801c92c:	7dfb      	ldrb	r3, [r7, #23]
 801c92e:	2b00      	cmp	r3, #0
 801c930:	d003      	beq.n	801c93a <adc_1_2_3_dac1_task+0x56>
                *error_report = HAL_RETURN_ERROR;
 801c932:	6a3b      	ldr	r3, [r7, #32]
 801c934:	2201      	movs	r2, #1
 801c936:	701a      	strb	r2, [r3, #0]
                return;
 801c938:	e049      	b.n	801c9ce <adc_1_2_3_dac1_task+0xea>
            HAL_ADC_Start(&hadc1);
 801c93a:	4827      	ldr	r0, [pc, #156]	; (801c9d8 <adc_1_2_3_dac1_task+0xf4>)
 801c93c:	f7e6 fe22 	bl	8003584 <HAL_ADC_Start>
            data[0] = HAL_ADC_GetValue(&hadc1);
 801c940:	4825      	ldr	r0, [pc, #148]	; (801c9d8 <adc_1_2_3_dac1_task+0xf4>)
 801c942:	f7e6 feed 	bl	8003720 <HAL_ADC_GetValue>
 801c946:	4603      	mov	r3, r0
 801c948:	b2da      	uxtb	r2, r3
 801c94a:	68fb      	ldr	r3, [r7, #12]
 801c94c:	701a      	strb	r2, [r3, #0]
            break;
 801c94e:	e03e      	b.n	801c9ce <adc_1_2_3_dac1_task+0xea>
            HAL_DAC_Start(&hdac, DAC1_CHANNEL_1);
 801c950:	2100      	movs	r1, #0
 801c952:	4820      	ldr	r0, [pc, #128]	; (801c9d4 <adc_1_2_3_dac1_task+0xf0>)
 801c954:	f7e7 fd7a 	bl	800444c <HAL_DAC_Start>
            status = HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, data[0]);
 801c958:	68fb      	ldr	r3, [r7, #12]
 801c95a:	781b      	ldrb	r3, [r3, #0]
 801c95c:	2200      	movs	r2, #0
 801c95e:	2100      	movs	r1, #0
 801c960:	481c      	ldr	r0, [pc, #112]	; (801c9d4 <adc_1_2_3_dac1_task+0xf0>)
 801c962:	f7e7 fdca 	bl	80044fa <HAL_DAC_SetValue>
 801c966:	4603      	mov	r3, r0
 801c968:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801c96a:	7dfb      	ldrb	r3, [r7, #23]
 801c96c:	2b00      	cmp	r3, #0
 801c96e:	d003      	beq.n	801c978 <adc_1_2_3_dac1_task+0x94>
                *error_report = HAL_RETURN_ERROR;
 801c970:	6a3b      	ldr	r3, [r7, #32]
 801c972:	2201      	movs	r2, #1
 801c974:	701a      	strb	r2, [r3, #0]
                return;
 801c976:	e02a      	b.n	801c9ce <adc_1_2_3_dac1_task+0xea>
            HAL_ADC_Start(&hadc2);
 801c978:	4818      	ldr	r0, [pc, #96]	; (801c9dc <adc_1_2_3_dac1_task+0xf8>)
 801c97a:	f7e6 fe03 	bl	8003584 <HAL_ADC_Start>
            data[0] = HAL_ADC_GetValue(&hadc2);
 801c97e:	4817      	ldr	r0, [pc, #92]	; (801c9dc <adc_1_2_3_dac1_task+0xf8>)
 801c980:	f7e6 fece 	bl	8003720 <HAL_ADC_GetValue>
 801c984:	4603      	mov	r3, r0
 801c986:	b2da      	uxtb	r2, r3
 801c988:	68fb      	ldr	r3, [r7, #12]
 801c98a:	701a      	strb	r2, [r3, #0]
            break;
 801c98c:	e01f      	b.n	801c9ce <adc_1_2_3_dac1_task+0xea>
            HAL_DAC_Start(&hdac, DAC1_CHANNEL_1);
 801c98e:	2100      	movs	r1, #0
 801c990:	4810      	ldr	r0, [pc, #64]	; (801c9d4 <adc_1_2_3_dac1_task+0xf0>)
 801c992:	f7e7 fd5b 	bl	800444c <HAL_DAC_Start>
            status = HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, data[0]);
 801c996:	68fb      	ldr	r3, [r7, #12]
 801c998:	781b      	ldrb	r3, [r3, #0]
 801c99a:	2200      	movs	r2, #0
 801c99c:	2100      	movs	r1, #0
 801c99e:	480d      	ldr	r0, [pc, #52]	; (801c9d4 <adc_1_2_3_dac1_task+0xf0>)
 801c9a0:	f7e7 fdab 	bl	80044fa <HAL_DAC_SetValue>
 801c9a4:	4603      	mov	r3, r0
 801c9a6:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801c9a8:	7dfb      	ldrb	r3, [r7, #23]
 801c9aa:	2b00      	cmp	r3, #0
 801c9ac:	d003      	beq.n	801c9b6 <adc_1_2_3_dac1_task+0xd2>
                *error_report = HAL_RETURN_ERROR;
 801c9ae:	6a3b      	ldr	r3, [r7, #32]
 801c9b0:	2201      	movs	r2, #1
 801c9b2:	701a      	strb	r2, [r3, #0]
                return;
 801c9b4:	e00b      	b.n	801c9ce <adc_1_2_3_dac1_task+0xea>
            HAL_ADC_Start(&hadc3);
 801c9b6:	480a      	ldr	r0, [pc, #40]	; (801c9e0 <adc_1_2_3_dac1_task+0xfc>)
 801c9b8:	f7e6 fde4 	bl	8003584 <HAL_ADC_Start>
            data[0] = HAL_ADC_GetValue(&hadc3);
 801c9bc:	4808      	ldr	r0, [pc, #32]	; (801c9e0 <adc_1_2_3_dac1_task+0xfc>)
 801c9be:	f7e6 feaf 	bl	8003720 <HAL_ADC_GetValue>
 801c9c2:	4603      	mov	r3, r0
 801c9c4:	b2da      	uxtb	r2, r3
 801c9c6:	68fb      	ldr	r3, [r7, #12]
 801c9c8:	701a      	strb	r2, [r3, #0]
            break;
 801c9ca:	e000      	b.n	801c9ce <adc_1_2_3_dac1_task+0xea>
        default: break;
 801c9cc:	bf00      	nop
    }
}
 801c9ce:	3718      	adds	r7, #24
 801c9d0:	46bd      	mov	sp, r7
 801c9d2:	bd80      	pop	{r7, pc}
 801c9d4:	2000042c 	.word	0x2000042c
 801c9d8:	20000300 	.word	0x20000300
 801c9dc:	20000348 	.word	0x20000348
 801c9e0:	20000390 	.word	0x20000390

0801c9e4 <flash_task>:
 * \param[in]       test_select: select what test in the function to run
 * \param[in]       error_report: report to pc about test error
 */
void
flash_task(uint8_t* data, uint16_t sizeof_data, SemaphoreHandle_t* interrupt_sem, uint8_t test_select,
           uint8_t* error_report) {
 801c9e4:	b5b0      	push	{r4, r5, r7, lr}
 801c9e6:	b08a      	sub	sp, #40	; 0x28
 801c9e8:	af00      	add	r7, sp, #0
 801c9ea:	60f8      	str	r0, [r7, #12]
 801c9ec:	607a      	str	r2, [r7, #4]
 801c9ee:	461a      	mov	r2, r3
 801c9f0:	460b      	mov	r3, r1
 801c9f2:	817b      	strh	r3, [r7, #10]
 801c9f4:	4613      	mov	r3, r2
 801c9f6:	727b      	strb	r3, [r7, #9]

    HAL_StatusTypeDef status; /* error return check */
    *error_report = NO_ERROR; /* initalized to  NO_ERROR if an error is accruing it will change it */
 801c9f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c9fa:	2200      	movs	r2, #0
 801c9fc:	701a      	strb	r2, [r3, #0]
    FLASH_EraseInitTypeDef erase_init;
    switch (test_select) {
 801c9fe:	7a7b      	ldrb	r3, [r7, #9]
 801ca00:	2b00      	cmp	r3, #0
 801ca02:	f040 808f 	bne.w	801cb24 <flash_task+0x140>
        case 0: /* flash test */



            /* erase flash */
            erase_init.TypeErase = FLASH_TYPEERASE_SECTORS;
 801ca06:	2300      	movs	r3, #0
 801ca08:	617b      	str	r3, [r7, #20]
            erase_init.Sector = FLASH_SECTOR_6;
 801ca0a:	2306      	movs	r3, #6
 801ca0c:	61bb      	str	r3, [r7, #24]
            erase_init.NbSectors = 1;
 801ca0e:	2301      	movs	r3, #1
 801ca10:	61fb      	str	r3, [r7, #28]
            erase_init.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 801ca12:	2302      	movs	r3, #2
 801ca14:	623b      	str	r3, [r7, #32]

            HAL_FLASH_Unlock();
 801ca16:	f7e9 fd8b 	bl	8006530 <HAL_FLASH_Unlock>
            __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR
 801ca1a:	4b45      	ldr	r3, [pc, #276]	; (801cb30 <flash_task+0x14c>)
 801ca1c:	2273      	movs	r2, #115	; 0x73
 801ca1e:	60da      	str	r2, [r3, #12]
                                   | FLASH_FLAG_PGPERR);

            status = HAL_FLASHEx_Erase_IT(&erase_init);
 801ca20:	f107 0314 	add.w	r3, r7, #20
 801ca24:	4618      	mov	r0, r3
 801ca26:	f7e9 fea5 	bl	8006774 <HAL_FLASHEx_Erase_IT>
 801ca2a:	4603      	mov	r3, r0
 801ca2c:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            if (status != HAL_OK) {
 801ca30:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801ca34:	2b00      	cmp	r3, #0
 801ca36:	d005      	beq.n	801ca44 <flash_task+0x60>
                *error_report = HAL_RETURN_ERROR;
 801ca38:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ca3a:	2201      	movs	r2, #1
 801ca3c:	701a      	strb	r2, [r3, #0]
                HAL_FLASH_Lock();
 801ca3e:	f7e9 fd99 	bl	8006574 <HAL_FLASH_Lock>

                return;
 801ca42:	e072      	b.n	801cb2a <flash_task+0x146>
            }
            /* waite for rx interrupt to release the semaphore, if to match time has passed report over time error  */
            if (xSemaphoreTake(*interrupt_sem, TIME_ELAPSED_ERROR) == pdFALSE && *error_report == NO_ERROR) {
 801ca44:	687b      	ldr	r3, [r7, #4]
 801ca46:	681b      	ldr	r3, [r3, #0]
 801ca48:	2164      	movs	r1, #100	; 0x64
 801ca4a:	4618      	mov	r0, r3
 801ca4c:	f7f3 fbc0 	bl	80101d0 <xQueueSemaphoreTake>
 801ca50:	4603      	mov	r3, r0
 801ca52:	2b00      	cmp	r3, #0
 801ca54:	d106      	bne.n	801ca64 <flash_task+0x80>
 801ca56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ca58:	781b      	ldrb	r3, [r3, #0]
 801ca5a:	2b00      	cmp	r3, #0
 801ca5c:	d102      	bne.n	801ca64 <flash_task+0x80>

                *error_report = OVER_TIME;
 801ca5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801ca60:	2203      	movs	r2, #3
 801ca62:	701a      	strb	r2, [r3, #0]

            }

            /* write to flash */
            for (uint8_t j = 0; j < sizeof_data / sizeof(uint32_t); j++) {
 801ca64:	2300      	movs	r3, #0
 801ca66:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801ca6a:	e034      	b.n	801cad6 <flash_task+0xf2>

                status = HAL_FLASH_Program_IT(FLASH_TYPEPROGRAM_WORD, FLASH_ADDR + j * sizeof(uint32_t),
 801ca6c:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801ca70:	4b30      	ldr	r3, [pc, #192]	; (801cb34 <flash_task+0x150>)
 801ca72:	4413      	add	r3, r2
 801ca74:	0099      	lsls	r1, r3, #2
                                           *(uint32_t*)(data + j * sizeof(uint32_t)));
 801ca76:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801ca7a:	009b      	lsls	r3, r3, #2
 801ca7c:	68fa      	ldr	r2, [r7, #12]
 801ca7e:	4413      	add	r3, r2
 801ca80:	681b      	ldr	r3, [r3, #0]
                status = HAL_FLASH_Program_IT(FLASH_TYPEPROGRAM_WORD, FLASH_ADDR + j * sizeof(uint32_t),
 801ca82:	2200      	movs	r2, #0
 801ca84:	461c      	mov	r4, r3
 801ca86:	4615      	mov	r5, r2
 801ca88:	4622      	mov	r2, r4
 801ca8a:	462b      	mov	r3, r5
 801ca8c:	2002      	movs	r0, #2
 801ca8e:	f7e9 fc43 	bl	8006318 <HAL_FLASH_Program_IT>
 801ca92:	4603      	mov	r3, r0
 801ca94:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                if (status != HAL_OK) {
 801ca98:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801ca9c:	2b00      	cmp	r3, #0
 801ca9e:	d005      	beq.n	801caac <flash_task+0xc8>
                    *error_report = HAL_RETURN_ERROR;
 801caa0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801caa2:	2201      	movs	r2, #1
 801caa4:	701a      	strb	r2, [r3, #0]
                    HAL_FLASH_Lock();
 801caa6:	f7e9 fd65 	bl	8006574 <HAL_FLASH_Lock>

                    return;
 801caaa:	e03e      	b.n	801cb2a <flash_task+0x146>
                }
                /* waite for rx interrupt to release the semaphore, if to match time has passed report over time error  */
                if (xSemaphoreTake(*interrupt_sem, TIME_ELAPSED_ERROR) == pdFALSE && *error_report == NO_ERROR) {
 801caac:	687b      	ldr	r3, [r7, #4]
 801caae:	681b      	ldr	r3, [r3, #0]
 801cab0:	2164      	movs	r1, #100	; 0x64
 801cab2:	4618      	mov	r0, r3
 801cab4:	f7f3 fb8c 	bl	80101d0 <xQueueSemaphoreTake>
 801cab8:	4603      	mov	r3, r0
 801caba:	2b00      	cmp	r3, #0
 801cabc:	d106      	bne.n	801cacc <flash_task+0xe8>
 801cabe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cac0:	781b      	ldrb	r3, [r3, #0]
 801cac2:	2b00      	cmp	r3, #0
 801cac4:	d102      	bne.n	801cacc <flash_task+0xe8>

                    *error_report = OVER_TIME;
 801cac6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801cac8:	2203      	movs	r2, #3
 801caca:	701a      	strb	r2, [r3, #0]
            for (uint8_t j = 0; j < sizeof_data / sizeof(uint32_t); j++) {
 801cacc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cad0:	3301      	adds	r3, #1
 801cad2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801cad6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801cada:	b29a      	uxth	r2, r3
 801cadc:	897b      	ldrh	r3, [r7, #10]
 801cade:	089b      	lsrs	r3, r3, #2
 801cae0:	b29b      	uxth	r3, r3
 801cae2:	429a      	cmp	r2, r3
 801cae4:	d3c2      	bcc.n	801ca6c <flash_task+0x88>

                }
            }

            /* read from flash */
            for (uint8_t j = 0; j < sizeof_data / sizeof(uint32_t); j++) {
 801cae6:	2300      	movs	r3, #0
 801cae8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801caec:	e011      	b.n	801cb12 <flash_task+0x12e>

                *((uint32_t*)(data + j * sizeof(uint32_t))) = *((uint32_t*)(FLASH_ADDR + j * sizeof(uint32_t)));
 801caee:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801caf2:	4b10      	ldr	r3, [pc, #64]	; (801cb34 <flash_task+0x150>)
 801caf4:	4413      	add	r3, r2
 801caf6:	009b      	lsls	r3, r3, #2
 801caf8:	4619      	mov	r1, r3
 801cafa:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801cafe:	009b      	lsls	r3, r3, #2
 801cb00:	68fa      	ldr	r2, [r7, #12]
 801cb02:	4413      	add	r3, r2
 801cb04:	680a      	ldr	r2, [r1, #0]
 801cb06:	601a      	str	r2, [r3, #0]
            for (uint8_t j = 0; j < sizeof_data / sizeof(uint32_t); j++) {
 801cb08:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801cb0c:	3301      	adds	r3, #1
 801cb0e:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801cb12:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801cb16:	b29a      	uxth	r2, r3
 801cb18:	897b      	ldrh	r3, [r7, #10]
 801cb1a:	089b      	lsrs	r3, r3, #2
 801cb1c:	b29b      	uxth	r3, r3
 801cb1e:	429a      	cmp	r2, r3
 801cb20:	d3e5      	bcc.n	801caee <flash_task+0x10a>
            }

            break;
 801cb22:	e000      	b.n	801cb26 <flash_task+0x142>

        default: break;
 801cb24:	bf00      	nop
    }
    HAL_FLASH_Lock();
 801cb26:	f7e9 fd25 	bl	8006574 <HAL_FLASH_Lock>
}
 801cb2a:	3728      	adds	r7, #40	; 0x28
 801cb2c:	46bd      	mov	sp, r7
 801cb2e:	bdb0      	pop	{r4, r5, r7, pc}
 801cb30:	40023c00 	.word	0x40023c00
 801cb34:	02020000 	.word	0x02020000

0801cb38 <HAL_FLASH_EndOfOperationCallback>:
  *                 - Program      : Address which was selected for data program
  *                 - Mass Erase   : No return value expected
  * @retval None
  */
void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 801cb38:	b580      	push	{r7, lr}
 801cb3a:	b082      	sub	sp, #8
 801cb3c:	af00      	add	r7, sp, #0
 801cb3e:	6078      	str	r0, [r7, #4]

    xSemaphoreGiveFromISR(stm_test_list_array[FLASH_TEST].q, NULL);
 801cb40:	4b05      	ldr	r3, [pc, #20]	; (801cb58 <HAL_FLASH_EndOfOperationCallback+0x20>)
 801cb42:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cb46:	2100      	movs	r1, #0
 801cb48:	4618      	mov	r0, r3
 801cb4a:	f7f3 f9c5 	bl	800fed8 <xQueueGiveFromISR>


}
 801cb4e:	bf00      	nop
 801cb50:	3708      	adds	r7, #8
 801cb52:	46bd      	mov	sp, r7
 801cb54:	bd80      	pop	{r7, pc}
 801cb56:	bf00      	nop
 801cb58:	200000a0 	.word	0x200000a0

0801cb5c <HAL_FLASH_OperationErrorCallback>:
  *                 - Program      : Address which was selected for data program
  *                 - Mass Erase   : No return value expected
  * @retval None
  */
void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 801cb5c:	b580      	push	{r7, lr}
 801cb5e:	b084      	sub	sp, #16
 801cb60:	af00      	add	r7, sp, #0
 801cb62:	6078      	str	r0, [r7, #4]


    unit_tasting_package_t* cast;

        cast = stm_test_list_array[FLASH_TEST].taskX_pack.p->payload;
 801cb64:	4b09      	ldr	r3, [pc, #36]	; (801cb8c <HAL_FLASH_OperationErrorCallback+0x30>)
 801cb66:	f8d3 309c 	ldr.w	r3, [r3, #156]	; 0x9c
 801cb6a:	685b      	ldr	r3, [r3, #4]
 801cb6c:	60fb      	str	r3, [r7, #12]

        cast->error_report = ERROR_IT;
 801cb6e:	68fb      	ldr	r3, [r7, #12]
 801cb70:	2202      	movs	r2, #2
 801cb72:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

        xSemaphoreGiveFromISR(stm_test_list_array[FLASH_TEST].q, NULL);
 801cb76:	4b05      	ldr	r3, [pc, #20]	; (801cb8c <HAL_FLASH_OperationErrorCallback+0x30>)
 801cb78:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 801cb7c:	2100      	movs	r1, #0
 801cb7e:	4618      	mov	r0, r3
 801cb80:	f7f3 f9aa 	bl	800fed8 <xQueueGiveFromISR>


}
 801cb84:	bf00      	nop
 801cb86:	3710      	adds	r7, #16
 801cb88:	46bd      	mov	sp, r7
 801cb8a:	bd80      	pop	{r7, pc}
 801cb8c:	200000a0 	.word	0x200000a0

0801cb90 <I2C_1_2_task>:
 * \param[in]       test_select: select what test in the function to run
 * \param[in]       error_report: report to pc about test error
 */
void
I2C_1_2_task(uint8_t* data, uint16_t sizeof_data, SemaphoreHandle_t* interrupt_sem, uint8_t test_select,
             uint8_t* error_report) {
 801cb90:	b580      	push	{r7, lr}
 801cb92:	b086      	sub	sp, #24
 801cb94:	af00      	add	r7, sp, #0
 801cb96:	60f8      	str	r0, [r7, #12]
 801cb98:	607a      	str	r2, [r7, #4]
 801cb9a:	461a      	mov	r2, r3
 801cb9c:	460b      	mov	r3, r1
 801cb9e:	817b      	strh	r3, [r7, #10]
 801cba0:	4613      	mov	r3, r2
 801cba2:	727b      	strb	r3, [r7, #9]

    HAL_StatusTypeDef status; /* error return check */
    *error_report = NO_ERROR; /* initalized to  NO_ERROR if an error is accruing it will change it */
 801cba4:	6a3b      	ldr	r3, [r7, #32]
 801cba6:	2200      	movs	r2, #0
 801cba8:	701a      	strb	r2, [r3, #0]

    /* run task test requested by pc */
    switch (test_select) {
 801cbaa:	7a7b      	ldrb	r3, [r7, #9]
 801cbac:	2b02      	cmp	r3, #2
 801cbae:	d04a      	beq.n	801cc46 <I2C_1_2_task+0xb6>
 801cbb0:	2b02      	cmp	r3, #2
 801cbb2:	dc69      	bgt.n	801cc88 <I2C_1_2_task+0xf8>
 801cbb4:	2b00      	cmp	r3, #0
 801cbb6:	d002      	beq.n	801cbbe <I2C_1_2_task+0x2e>
 801cbb8:	2b01      	cmp	r3, #1
 801cbba:	d022      	beq.n	801cc02 <I2C_1_2_task+0x72>
                *error_report = HAL_RETURN_ERROR;
            }

            break;

        default: break;
 801cbbc:	e064      	b.n	801cc88 <I2C_1_2_task+0xf8>
            status = HAL_I2C_Master_Receive_IT(&hi2c1, 0, data, sizeof_data);
 801cbbe:	897b      	ldrh	r3, [r7, #10]
 801cbc0:	68fa      	ldr	r2, [r7, #12]
 801cbc2:	2100      	movs	r1, #0
 801cbc4:	4854      	ldr	r0, [pc, #336]	; (801cd18 <I2C_1_2_task+0x188>)
 801cbc6:	f7ea f8f7 	bl	8006db8 <HAL_I2C_Master_Receive_IT>
 801cbca:	4603      	mov	r3, r0
 801cbcc:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801cbce:	7dfb      	ldrb	r3, [r7, #23]
 801cbd0:	2b00      	cmp	r3, #0
 801cbd2:	d003      	beq.n	801cbdc <I2C_1_2_task+0x4c>
                *error_report = HAL_RETURN_ERROR;
 801cbd4:	6a3b      	ldr	r3, [r7, #32]
 801cbd6:	2201      	movs	r2, #1
 801cbd8:	701a      	strb	r2, [r3, #0]
                return;
 801cbda:	e099      	b.n	801cd10 <I2C_1_2_task+0x180>
            status = HAL_I2C_Slave_Transmit_IT(&hi2c2, data, sizeof_data);
 801cbdc:	897b      	ldrh	r3, [r7, #10]
 801cbde:	461a      	mov	r2, r3
 801cbe0:	68f9      	ldr	r1, [r7, #12]
 801cbe2:	484e      	ldr	r0, [pc, #312]	; (801cd1c <I2C_1_2_task+0x18c>)
 801cbe4:	f7ea f958 	bl	8006e98 <HAL_I2C_Slave_Transmit_IT>
 801cbe8:	4603      	mov	r3, r0
 801cbea:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801cbec:	7dfb      	ldrb	r3, [r7, #23]
 801cbee:	2b00      	cmp	r3, #0
 801cbf0:	d04c      	beq.n	801cc8c <I2C_1_2_task+0xfc>
                HAL_I2C_Master_Abort_IT(&hi2c1, 0);
 801cbf2:	2100      	movs	r1, #0
 801cbf4:	4848      	ldr	r0, [pc, #288]	; (801cd18 <I2C_1_2_task+0x188>)
 801cbf6:	f7ea faad 	bl	8007154 <HAL_I2C_Master_Abort_IT>
                *error_report = HAL_RETURN_ERROR;
 801cbfa:	6a3b      	ldr	r3, [r7, #32]
 801cbfc:	2201      	movs	r2, #1
 801cbfe:	701a      	strb	r2, [r3, #0]
            break;
 801cc00:	e044      	b.n	801cc8c <I2C_1_2_task+0xfc>
            status = HAL_I2C_Master_Receive_IT(&hi2c2, 0, data, sizeof_data);
 801cc02:	897b      	ldrh	r3, [r7, #10]
 801cc04:	68fa      	ldr	r2, [r7, #12]
 801cc06:	2100      	movs	r1, #0
 801cc08:	4844      	ldr	r0, [pc, #272]	; (801cd1c <I2C_1_2_task+0x18c>)
 801cc0a:	f7ea f8d5 	bl	8006db8 <HAL_I2C_Master_Receive_IT>
 801cc0e:	4603      	mov	r3, r0
 801cc10:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801cc12:	7dfb      	ldrb	r3, [r7, #23]
 801cc14:	2b00      	cmp	r3, #0
 801cc16:	d003      	beq.n	801cc20 <I2C_1_2_task+0x90>
                *error_report = HAL_RETURN_ERROR;
 801cc18:	6a3b      	ldr	r3, [r7, #32]
 801cc1a:	2201      	movs	r2, #1
 801cc1c:	701a      	strb	r2, [r3, #0]
                return;
 801cc1e:	e077      	b.n	801cd10 <I2C_1_2_task+0x180>
            status = HAL_I2C_Slave_Transmit_IT(&hi2c1, data, sizeof_data);
 801cc20:	897b      	ldrh	r3, [r7, #10]
 801cc22:	461a      	mov	r2, r3
 801cc24:	68f9      	ldr	r1, [r7, #12]
 801cc26:	483c      	ldr	r0, [pc, #240]	; (801cd18 <I2C_1_2_task+0x188>)
 801cc28:	f7ea f936 	bl	8006e98 <HAL_I2C_Slave_Transmit_IT>
 801cc2c:	4603      	mov	r3, r0
 801cc2e:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801cc30:	7dfb      	ldrb	r3, [r7, #23]
 801cc32:	2b00      	cmp	r3, #0
 801cc34:	d02c      	beq.n	801cc90 <I2C_1_2_task+0x100>
                HAL_I2C_Master_Abort_IT(&hi2c2, 0);
 801cc36:	2100      	movs	r1, #0
 801cc38:	4838      	ldr	r0, [pc, #224]	; (801cd1c <I2C_1_2_task+0x18c>)
 801cc3a:	f7ea fa8b 	bl	8007154 <HAL_I2C_Master_Abort_IT>
                *error_report = HAL_RETURN_ERROR;
 801cc3e:	6a3b      	ldr	r3, [r7, #32]
 801cc40:	2201      	movs	r2, #1
 801cc42:	701a      	strb	r2, [r3, #0]
            break;
 801cc44:	e024      	b.n	801cc90 <I2C_1_2_task+0x100>
            status = HAL_I2C_Master_Receive_DMA(&hi2c1, 0, data, sizeof_data);
 801cc46:	897b      	ldrh	r3, [r7, #10]
 801cc48:	68fa      	ldr	r2, [r7, #12]
 801cc4a:	2100      	movs	r1, #0
 801cc4c:	4832      	ldr	r0, [pc, #200]	; (801cd18 <I2C_1_2_task+0x188>)
 801cc4e:	f7ea f991 	bl	8006f74 <HAL_I2C_Master_Receive_DMA>
 801cc52:	4603      	mov	r3, r0
 801cc54:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801cc56:	7dfb      	ldrb	r3, [r7, #23]
 801cc58:	2b00      	cmp	r3, #0
 801cc5a:	d002      	beq.n	801cc62 <I2C_1_2_task+0xd2>
                *error_report = HAL_RETURN_ERROR;
 801cc5c:	6a3b      	ldr	r3, [r7, #32]
 801cc5e:	2201      	movs	r2, #1
 801cc60:	701a      	strb	r2, [r3, #0]
            status = HAL_I2C_Slave_Transmit_IT(&hi2c2, data, sizeof_data);
 801cc62:	897b      	ldrh	r3, [r7, #10]
 801cc64:	461a      	mov	r2, r3
 801cc66:	68f9      	ldr	r1, [r7, #12]
 801cc68:	482c      	ldr	r0, [pc, #176]	; (801cd1c <I2C_1_2_task+0x18c>)
 801cc6a:	f7ea f915 	bl	8006e98 <HAL_I2C_Slave_Transmit_IT>
 801cc6e:	4603      	mov	r3, r0
 801cc70:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801cc72:	7dfb      	ldrb	r3, [r7, #23]
 801cc74:	2b00      	cmp	r3, #0
 801cc76:	d00d      	beq.n	801cc94 <I2C_1_2_task+0x104>
                HAL_I2C_Master_Abort_IT(&hi2c1, 0);
 801cc78:	2100      	movs	r1, #0
 801cc7a:	4827      	ldr	r0, [pc, #156]	; (801cd18 <I2C_1_2_task+0x188>)
 801cc7c:	f7ea fa6a 	bl	8007154 <HAL_I2C_Master_Abort_IT>
                *error_report = HAL_RETURN_ERROR;
 801cc80:	6a3b      	ldr	r3, [r7, #32]
 801cc82:	2201      	movs	r2, #1
 801cc84:	701a      	strb	r2, [r3, #0]
            break;
 801cc86:	e005      	b.n	801cc94 <I2C_1_2_task+0x104>
        default: break;
 801cc88:	bf00      	nop
 801cc8a:	e004      	b.n	801cc96 <I2C_1_2_task+0x106>
            break;
 801cc8c:	bf00      	nop
 801cc8e:	e002      	b.n	801cc96 <I2C_1_2_task+0x106>
            break;
 801cc90:	bf00      	nop
 801cc92:	e000      	b.n	801cc96 <I2C_1_2_task+0x106>
            break;
 801cc94:	bf00      	nop
    }
    /* waite for rx interrupt to release the semaphore, if to match time has passed report over time error  */
    if (xSemaphoreTake(*interrupt_sem, TIME_ELAPSED_ERROR) == pdFALSE && *error_report == NO_ERROR) {
 801cc96:	687b      	ldr	r3, [r7, #4]
 801cc98:	681b      	ldr	r3, [r3, #0]
 801cc9a:	2164      	movs	r1, #100	; 0x64
 801cc9c:	4618      	mov	r0, r3
 801cc9e:	f7f3 fa97 	bl	80101d0 <xQueueSemaphoreTake>
 801cca2:	4603      	mov	r3, r0
 801cca4:	2b00      	cmp	r3, #0
 801cca6:	d11b      	bne.n	801cce0 <I2C_1_2_task+0x150>
 801cca8:	6a3b      	ldr	r3, [r7, #32]
 801ccaa:	781b      	ldrb	r3, [r3, #0]
 801ccac:	2b00      	cmp	r3, #0
 801ccae:	d117      	bne.n	801cce0 <I2C_1_2_task+0x150>

        /* abort transmission in case HAL returns error so callback isr function wont release semaphore */
        HAL_I2C_Master_Abort_IT(&hi2c1, 0);
 801ccb0:	2100      	movs	r1, #0
 801ccb2:	4819      	ldr	r0, [pc, #100]	; (801cd18 <I2C_1_2_task+0x188>)
 801ccb4:	f7ea fa4e 	bl	8007154 <HAL_I2C_Master_Abort_IT>
        xSemaphoreTake(*interrupt_sem, TIME_ELAPSED_ERROR);
 801ccb8:	687b      	ldr	r3, [r7, #4]
 801ccba:	681b      	ldr	r3, [r3, #0]
 801ccbc:	2164      	movs	r1, #100	; 0x64
 801ccbe:	4618      	mov	r0, r3
 801ccc0:	f7f3 fa86 	bl	80101d0 <xQueueSemaphoreTake>
        HAL_I2C_Master_Abort_IT(&hi2c2, 0);
 801ccc4:	2100      	movs	r1, #0
 801ccc6:	4815      	ldr	r0, [pc, #84]	; (801cd1c <I2C_1_2_task+0x18c>)
 801ccc8:	f7ea fa44 	bl	8007154 <HAL_I2C_Master_Abort_IT>
        xSemaphoreTake(*interrupt_sem, TIME_ELAPSED_ERROR);
 801cccc:	687b      	ldr	r3, [r7, #4]
 801ccce:	681b      	ldr	r3, [r3, #0]
 801ccd0:	2164      	movs	r1, #100	; 0x64
 801ccd2:	4618      	mov	r0, r3
 801ccd4:	f7f3 fa7c 	bl	80101d0 <xQueueSemaphoreTake>

        *error_report = OVER_TIME;
 801ccd8:	6a3b      	ldr	r3, [r7, #32]
 801ccda:	2203      	movs	r2, #3
 801ccdc:	701a      	strb	r2, [r3, #0]
 801ccde:	e017      	b.n	801cd10 <I2C_1_2_task+0x180>

    } else if (*error_report == ERROR_IT) {
 801cce0:	6a3b      	ldr	r3, [r7, #32]
 801cce2:	781b      	ldrb	r3, [r3, #0]
 801cce4:	2b02      	cmp	r3, #2
 801cce6:	d113      	bne.n	801cd10 <I2C_1_2_task+0x180>

        /* abort transmission in case HAL returns error so callback isr function wont release semaphore */
        HAL_I2C_Master_Abort_IT(&hi2c1, 0);
 801cce8:	2100      	movs	r1, #0
 801ccea:	480b      	ldr	r0, [pc, #44]	; (801cd18 <I2C_1_2_task+0x188>)
 801ccec:	f7ea fa32 	bl	8007154 <HAL_I2C_Master_Abort_IT>
        xSemaphoreTake(*interrupt_sem, TIME_ELAPSED_ERROR);
 801ccf0:	687b      	ldr	r3, [r7, #4]
 801ccf2:	681b      	ldr	r3, [r3, #0]
 801ccf4:	2164      	movs	r1, #100	; 0x64
 801ccf6:	4618      	mov	r0, r3
 801ccf8:	f7f3 fa6a 	bl	80101d0 <xQueueSemaphoreTake>
        HAL_I2C_Master_Abort_IT(&hi2c2, 0);
 801ccfc:	2100      	movs	r1, #0
 801ccfe:	4807      	ldr	r0, [pc, #28]	; (801cd1c <I2C_1_2_task+0x18c>)
 801cd00:	f7ea fa28 	bl	8007154 <HAL_I2C_Master_Abort_IT>
        xSemaphoreTake(*interrupt_sem, TIME_ELAPSED_ERROR);
 801cd04:	687b      	ldr	r3, [r7, #4]
 801cd06:	681b      	ldr	r3, [r3, #0]
 801cd08:	2164      	movs	r1, #100	; 0x64
 801cd0a:	4618      	mov	r0, r3
 801cd0c:	f7f3 fa60 	bl	80101d0 <xQueueSemaphoreTake>
    }
}
 801cd10:	3718      	adds	r7, #24
 801cd12:	46bd      	mov	sp, r7
 801cd14:	bd80      	pop	{r7, pc}
 801cd16:	bf00      	nop
 801cd18:	200006e4 	.word	0x200006e4
 801cd1c:	20000738 	.word	0x20000738

0801cd20 <HAL_I2C_MasterRxCpltCallback>:

void
HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef* hi2c) {
 801cd20:	b580      	push	{r7, lr}
 801cd22:	b082      	sub	sp, #8
 801cd24:	af00      	add	r7, sp, #0
 801cd26:	6078      	str	r0, [r7, #4]

    if (hi2c == &hi2c1 || hi2c == &hi2c2) {
 801cd28:	687b      	ldr	r3, [r7, #4]
 801cd2a:	4a08      	ldr	r2, [pc, #32]	; (801cd4c <HAL_I2C_MasterRxCpltCallback+0x2c>)
 801cd2c:	4293      	cmp	r3, r2
 801cd2e:	d003      	beq.n	801cd38 <HAL_I2C_MasterRxCpltCallback+0x18>
 801cd30:	687b      	ldr	r3, [r7, #4]
 801cd32:	4a07      	ldr	r2, [pc, #28]	; (801cd50 <HAL_I2C_MasterRxCpltCallback+0x30>)
 801cd34:	4293      	cmp	r3, r2
 801cd36:	d105      	bne.n	801cd44 <HAL_I2C_MasterRxCpltCallback+0x24>

        xSemaphoreGiveFromISR(stm_test_list_array[I2C_1_2].q, NULL);
 801cd38:	4b06      	ldr	r3, [pc, #24]	; (801cd54 <HAL_I2C_MasterRxCpltCallback+0x34>)
 801cd3a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cd3c:	2100      	movs	r1, #0
 801cd3e:	4618      	mov	r0, r3
 801cd40:	f7f3 f8ca 	bl	800fed8 <xQueueGiveFromISR>
    }
}
 801cd44:	bf00      	nop
 801cd46:	3708      	adds	r7, #8
 801cd48:	46bd      	mov	sp, r7
 801cd4a:	bd80      	pop	{r7, pc}
 801cd4c:	200006e4 	.word	0x200006e4
 801cd50:	20000738 	.word	0x20000738
 801cd54:	200000a0 	.word	0x200000a0

0801cd58 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void
HAL_I2C_ErrorCallback(I2C_HandleTypeDef* hi2c) {
 801cd58:	b580      	push	{r7, lr}
 801cd5a:	b084      	sub	sp, #16
 801cd5c:	af00      	add	r7, sp, #0
 801cd5e:	6078      	str	r0, [r7, #4]

    unit_tasting_package_t* cast;

    if (hi2c == &hi2c1 || hi2c == &hi2c2) {
 801cd60:	687b      	ldr	r3, [r7, #4]
 801cd62:	4a0c      	ldr	r2, [pc, #48]	; (801cd94 <HAL_I2C_ErrorCallback+0x3c>)
 801cd64:	4293      	cmp	r3, r2
 801cd66:	d003      	beq.n	801cd70 <HAL_I2C_ErrorCallback+0x18>
 801cd68:	687b      	ldr	r3, [r7, #4]
 801cd6a:	4a0b      	ldr	r2, [pc, #44]	; (801cd98 <HAL_I2C_ErrorCallback+0x40>)
 801cd6c:	4293      	cmp	r3, r2
 801cd6e:	d10d      	bne.n	801cd8c <HAL_I2C_ErrorCallback+0x34>

        cast = stm_test_list_array[I2C_1_2].taskX_pack.p->payload;
 801cd70:	4b0a      	ldr	r3, [pc, #40]	; (801cd9c <HAL_I2C_ErrorCallback+0x44>)
 801cd72:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801cd74:	685b      	ldr	r3, [r3, #4]
 801cd76:	60fb      	str	r3, [r7, #12]

        cast->error_report = ERROR_IT;
 801cd78:	68fb      	ldr	r3, [r7, #12]
 801cd7a:	2202      	movs	r2, #2
 801cd7c:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

        xSemaphoreGiveFromISR(stm_test_list_array[I2C_1_2].q, NULL);
 801cd80:	4b06      	ldr	r3, [pc, #24]	; (801cd9c <HAL_I2C_ErrorCallback+0x44>)
 801cd82:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cd84:	2100      	movs	r1, #0
 801cd86:	4618      	mov	r0, r3
 801cd88:	f7f3 f8a6 	bl	800fed8 <xQueueGiveFromISR>
    }
}
 801cd8c:	bf00      	nop
 801cd8e:	3710      	adds	r7, #16
 801cd90:	46bd      	mov	sp, r7
 801cd92:	bd80      	pop	{r7, pc}
 801cd94:	200006e4 	.word	0x200006e4
 801cd98:	20000738 	.word	0x20000738
 801cd9c:	200000a0 	.word	0x200000a0

0801cda0 <HAL_I2C_AbortCpltCallback>:

void
HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef* hi2c) {
 801cda0:	b580      	push	{r7, lr}
 801cda2:	b082      	sub	sp, #8
 801cda4:	af00      	add	r7, sp, #0
 801cda6:	6078      	str	r0, [r7, #4]
    if (hi2c == &hi2c1 || hi2c == &hi2c2) {
 801cda8:	687b      	ldr	r3, [r7, #4]
 801cdaa:	4a08      	ldr	r2, [pc, #32]	; (801cdcc <HAL_I2C_AbortCpltCallback+0x2c>)
 801cdac:	4293      	cmp	r3, r2
 801cdae:	d003      	beq.n	801cdb8 <HAL_I2C_AbortCpltCallback+0x18>
 801cdb0:	687b      	ldr	r3, [r7, #4]
 801cdb2:	4a07      	ldr	r2, [pc, #28]	; (801cdd0 <HAL_I2C_AbortCpltCallback+0x30>)
 801cdb4:	4293      	cmp	r3, r2
 801cdb6:	d105      	bne.n	801cdc4 <HAL_I2C_AbortCpltCallback+0x24>

        xSemaphoreGiveFromISR(stm_test_list_array[I2C_1_2].q, NULL);
 801cdb8:	4b06      	ldr	r3, [pc, #24]	; (801cdd4 <HAL_I2C_AbortCpltCallback+0x34>)
 801cdba:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801cdbc:	2100      	movs	r1, #0
 801cdbe:	4618      	mov	r0, r3
 801cdc0:	f7f3 f88a 	bl	800fed8 <xQueueGiveFromISR>
    }
}
 801cdc4:	bf00      	nop
 801cdc6:	3708      	adds	r7, #8
 801cdc8:	46bd      	mov	sp, r7
 801cdca:	bd80      	pop	{r7, pc}
 801cdcc:	200006e4 	.word	0x200006e4
 801cdd0:	20000738 	.word	0x20000738
 801cdd4:	200000a0 	.word	0x200000a0

0801cdd8 <spi_1_2_task>:
 * \param[in]       test_select: select what test in the function to run
 * \param[in]       error_report: report to pc about test error
 */
void
spi_1_2_task(uint8_t* data, uint16_t sizeof_data, SemaphoreHandle_t* interrupt_sem, uint8_t test_select,
             uint8_t* error_report) {
 801cdd8:	b580      	push	{r7, lr}
 801cdda:	b086      	sub	sp, #24
 801cddc:	af00      	add	r7, sp, #0
 801cdde:	60f8      	str	r0, [r7, #12]
 801cde0:	607a      	str	r2, [r7, #4]
 801cde2:	461a      	mov	r2, r3
 801cde4:	460b      	mov	r3, r1
 801cde6:	817b      	strh	r3, [r7, #10]
 801cde8:	4613      	mov	r3, r2
 801cdea:	727b      	strb	r3, [r7, #9]

    HAL_StatusTypeDef status; /* error return check */
    *error_report = NO_ERROR; /* initalized to  NO_ERROR if an error is accruing it will change it */
 801cdec:	6a3b      	ldr	r3, [r7, #32]
 801cdee:	2200      	movs	r2, #0
 801cdf0:	701a      	strb	r2, [r3, #0]

    /* run task test requested by pc */
    switch (test_select) {
 801cdf2:	7a7b      	ldrb	r3, [r7, #9]
 801cdf4:	2b04      	cmp	r3, #4
 801cdf6:	f200 80dd 	bhi.w	801cfb4 <spi_1_2_task+0x1dc>
 801cdfa:	a201      	add	r2, pc, #4	; (adr r2, 801ce00 <spi_1_2_task+0x28>)
 801cdfc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801ce00:	0801ce15 	.word	0x0801ce15
 801ce04:	0801ce59 	.word	0x0801ce59
 801ce08:	0801ceb5 	.word	0x0801ceb5
 801ce0c:	0801cef7 	.word	0x0801cef7
 801ce10:	0801cf51 	.word	0x0801cf51

        case 0: /* spi1 TI rx spi2 TI tx */

            /* peripheral receive testing data  */
            status = HAL_SPI_Receive_IT(&hspi1, data, sizeof_data);
 801ce14:	897b      	ldrh	r3, [r7, #10]
 801ce16:	461a      	mov	r2, r3
 801ce18:	68f9      	ldr	r1, [r7, #12]
 801ce1a:	488a      	ldr	r0, [pc, #552]	; (801d044 <spi_1_2_task+0x26c>)
 801ce1c:	f7ed f9a8 	bl	800a170 <HAL_SPI_Receive_IT>
 801ce20:	4603      	mov	r3, r0
 801ce22:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801ce24:	7dfb      	ldrb	r3, [r7, #23]
 801ce26:	2b00      	cmp	r3, #0
 801ce28:	d003      	beq.n	801ce32 <spi_1_2_task+0x5a>

                *error_report = HAL_RETURN_ERROR;
 801ce2a:	6a3b      	ldr	r3, [r7, #32]
 801ce2c:	2201      	movs	r2, #1
 801ce2e:	701a      	strb	r2, [r3, #0]
                return;
 801ce30:	e104      	b.n	801d03c <spi_1_2_task+0x264>
            }

            /* peripheral transmit testing data  */
            status = HAL_SPI_Transmit_IT(&hspi2, data, sizeof_data);
 801ce32:	897b      	ldrh	r3, [r7, #10]
 801ce34:	461a      	mov	r2, r3
 801ce36:	68f9      	ldr	r1, [r7, #12]
 801ce38:	4883      	ldr	r0, [pc, #524]	; (801d048 <spi_1_2_task+0x270>)
 801ce3a:	f7ed f90d 	bl	800a058 <HAL_SPI_Transmit_IT>
 801ce3e:	4603      	mov	r3, r0
 801ce40:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801ce42:	7dfb      	ldrb	r3, [r7, #23]
 801ce44:	2b00      	cmp	r3, #0
 801ce46:	f000 80b7 	beq.w	801cfb8 <spi_1_2_task+0x1e0>
                /* abort transmission in case HAL returns error so callback isr function wont release semaphore */
                HAL_SPI_Abort_IT(&hspi1);
 801ce4a:	487e      	ldr	r0, [pc, #504]	; (801d044 <spi_1_2_task+0x26c>)
 801ce4c:	f7ed fe80 	bl	800ab50 <HAL_SPI_Abort_IT>
                *error_report = HAL_RETURN_ERROR;
 801ce50:	6a3b      	ldr	r3, [r7, #32]
 801ce52:	2201      	movs	r2, #1
 801ce54:	701a      	strb	r2, [r3, #0]
            }

            break;
 801ce56:	e0af      	b.n	801cfb8 <spi_1_2_task+0x1e0>

        case 1: /* spi2 TI rx spi1 TI tx */

            /* peripheral receive testing data  */
            status = HAL_SPI_Receive_IT(&hspi2, data, sizeof_data);
 801ce58:	897b      	ldrh	r3, [r7, #10]
 801ce5a:	461a      	mov	r2, r3
 801ce5c:	68f9      	ldr	r1, [r7, #12]
 801ce5e:	487a      	ldr	r0, [pc, #488]	; (801d048 <spi_1_2_task+0x270>)
 801ce60:	f7ed f986 	bl	800a170 <HAL_SPI_Receive_IT>
 801ce64:	4603      	mov	r3, r0
 801ce66:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801ce68:	7dfb      	ldrb	r3, [r7, #23]
 801ce6a:	2b00      	cmp	r3, #0
 801ce6c:	d006      	beq.n	801ce7c <spi_1_2_task+0xa4>
                HAL_SPI_Abort_IT(&hspi2);
 801ce6e:	4876      	ldr	r0, [pc, #472]	; (801d048 <spi_1_2_task+0x270>)
 801ce70:	f7ed fe6e 	bl	800ab50 <HAL_SPI_Abort_IT>
                *error_report = HAL_RETURN_ERROR;
 801ce74:	6a3b      	ldr	r3, [r7, #32]
 801ce76:	2201      	movs	r2, #1
 801ce78:	701a      	strb	r2, [r3, #0]
                break;
 801ce7a:	e0a6      	b.n	801cfca <spi_1_2_task+0x1f2>
            }

            /* peripheral transmit testing data  */
            status = HAL_SPI_Transmit_IT(&hspi1, data, sizeof_data);
 801ce7c:	897b      	ldrh	r3, [r7, #10]
 801ce7e:	461a      	mov	r2, r3
 801ce80:	68f9      	ldr	r1, [r7, #12]
 801ce82:	4870      	ldr	r0, [pc, #448]	; (801d044 <spi_1_2_task+0x26c>)
 801ce84:	f7ed f8e8 	bl	800a058 <HAL_SPI_Transmit_IT>
 801ce88:	4603      	mov	r3, r0
 801ce8a:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801ce8c:	7dfb      	ldrb	r3, [r7, #23]
 801ce8e:	2b00      	cmp	r3, #0
 801ce90:	f000 8094 	beq.w	801cfbc <spi_1_2_task+0x1e4>
                /* abort transmission in case HAL returns error so callback isr function wont release semaphore */
                HAL_SPI_Abort_IT(&hspi1);
 801ce94:	486b      	ldr	r0, [pc, #428]	; (801d044 <spi_1_2_task+0x26c>)
 801ce96:	f7ed fe5b 	bl	800ab50 <HAL_SPI_Abort_IT>
                xSemaphoreTake(*interrupt_sem, TIME_ELAPSED_ERROR);
 801ce9a:	687b      	ldr	r3, [r7, #4]
 801ce9c:	681b      	ldr	r3, [r3, #0]
 801ce9e:	2164      	movs	r1, #100	; 0x64
 801cea0:	4618      	mov	r0, r3
 801cea2:	f7f3 f995 	bl	80101d0 <xQueueSemaphoreTake>

                HAL_SPI_Abort_IT(&hspi2);
 801cea6:	4868      	ldr	r0, [pc, #416]	; (801d048 <spi_1_2_task+0x270>)
 801cea8:	f7ed fe52 	bl	800ab50 <HAL_SPI_Abort_IT>
                *error_report = HAL_RETURN_ERROR;
 801ceac:	6a3b      	ldr	r3, [r7, #32]
 801ceae:	2201      	movs	r2, #1
 801ceb0:	701a      	strb	r2, [r3, #0]
            }

            break;
 801ceb2:	e083      	b.n	801cfbc <spi_1_2_task+0x1e4>

        case 2: /* spi1 DMA rx spi2 TI tx */

            /* peripheral receive testing data  */
            status = HAL_SPI_Receive_DMA(&hspi1, data, sizeof_data);
 801ceb4:	897b      	ldrh	r3, [r7, #10]
 801ceb6:	461a      	mov	r2, r3
 801ceb8:	68f9      	ldr	r1, [r7, #12]
 801ceba:	4862      	ldr	r0, [pc, #392]	; (801d044 <spi_1_2_task+0x26c>)
 801cebc:	f7ed fba4 	bl	800a608 <HAL_SPI_Receive_DMA>
 801cec0:	4603      	mov	r3, r0
 801cec2:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801cec4:	7dfb      	ldrb	r3, [r7, #23]
 801cec6:	2b00      	cmp	r3, #0
 801cec8:	d003      	beq.n	801ced2 <spi_1_2_task+0xfa>

                *error_report = HAL_RETURN_ERROR;
 801ceca:	6a3b      	ldr	r3, [r7, #32]
 801cecc:	2201      	movs	r2, #1
 801cece:	701a      	strb	r2, [r3, #0]
                return;
 801ced0:	e0b4      	b.n	801d03c <spi_1_2_task+0x264>
            }
            /* peripheral transmit testing data  */
            status = HAL_SPI_Transmit_IT(&hspi2, data, sizeof_data);
 801ced2:	897b      	ldrh	r3, [r7, #10]
 801ced4:	461a      	mov	r2, r3
 801ced6:	68f9      	ldr	r1, [r7, #12]
 801ced8:	485b      	ldr	r0, [pc, #364]	; (801d048 <spi_1_2_task+0x270>)
 801ceda:	f7ed f8bd 	bl	800a058 <HAL_SPI_Transmit_IT>
 801cede:	4603      	mov	r3, r0
 801cee0:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801cee2:	7dfb      	ldrb	r3, [r7, #23]
 801cee4:	2b00      	cmp	r3, #0
 801cee6:	d06b      	beq.n	801cfc0 <spi_1_2_task+0x1e8>
                /* abort transmission in case HAL returns error so callback isr function wont release semaphore */
                HAL_SPI_Abort_IT(&hspi1);
 801cee8:	4856      	ldr	r0, [pc, #344]	; (801d044 <spi_1_2_task+0x26c>)
 801ceea:	f7ed fe31 	bl	800ab50 <HAL_SPI_Abort_IT>
                *error_report = HAL_RETURN_ERROR;
 801ceee:	6a3b      	ldr	r3, [r7, #32]
 801cef0:	2201      	movs	r2, #1
 801cef2:	701a      	strb	r2, [r3, #0]
            }

            break;
 801cef4:	e064      	b.n	801cfc0 <spi_1_2_task+0x1e8>

        case 3: /* spi2 DMA rx spi1 DMA tx */

            status = HAL_SPI_Receive_DMA(&hspi2, data, sizeof_data);
 801cef6:	897b      	ldrh	r3, [r7, #10]
 801cef8:	461a      	mov	r2, r3
 801cefa:	68f9      	ldr	r1, [r7, #12]
 801cefc:	4852      	ldr	r0, [pc, #328]	; (801d048 <spi_1_2_task+0x270>)
 801cefe:	f7ed fb83 	bl	800a608 <HAL_SPI_Receive_DMA>
 801cf02:	4603      	mov	r3, r0
 801cf04:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801cf06:	7dfb      	ldrb	r3, [r7, #23]
 801cf08:	2b00      	cmp	r3, #0
 801cf0a:	d006      	beq.n	801cf1a <spi_1_2_task+0x142>
                HAL_SPI_Abort_IT(&hspi2);
 801cf0c:	484e      	ldr	r0, [pc, #312]	; (801d048 <spi_1_2_task+0x270>)
 801cf0e:	f7ed fe1f 	bl	800ab50 <HAL_SPI_Abort_IT>

                *error_report = HAL_RETURN_ERROR;
 801cf12:	6a3b      	ldr	r3, [r7, #32]
 801cf14:	2201      	movs	r2, #1
 801cf16:	701a      	strb	r2, [r3, #0]
                break;
 801cf18:	e057      	b.n	801cfca <spi_1_2_task+0x1f2>
            }
            /* peripheral transmit testing data  */
            status = HAL_SPI_Transmit_DMA(&hspi1, data, sizeof_data);
 801cf1a:	897b      	ldrh	r3, [r7, #10]
 801cf1c:	461a      	mov	r2, r3
 801cf1e:	68f9      	ldr	r1, [r7, #12]
 801cf20:	4848      	ldr	r0, [pc, #288]	; (801d044 <spi_1_2_task+0x26c>)
 801cf22:	f7ed fa81 	bl	800a428 <HAL_SPI_Transmit_DMA>
 801cf26:	4603      	mov	r3, r0
 801cf28:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801cf2a:	7dfb      	ldrb	r3, [r7, #23]
 801cf2c:	2b00      	cmp	r3, #0
 801cf2e:	d049      	beq.n	801cfc4 <spi_1_2_task+0x1ec>
                /* abort transmission in case HAL returns error so callback isr function wont release semaphore */
                HAL_SPI_Abort_IT(&hspi1);
 801cf30:	4844      	ldr	r0, [pc, #272]	; (801d044 <spi_1_2_task+0x26c>)
 801cf32:	f7ed fe0d 	bl	800ab50 <HAL_SPI_Abort_IT>
                xSemaphoreTake(*interrupt_sem, TIME_ELAPSED_ERROR);
 801cf36:	687b      	ldr	r3, [r7, #4]
 801cf38:	681b      	ldr	r3, [r3, #0]
 801cf3a:	2164      	movs	r1, #100	; 0x64
 801cf3c:	4618      	mov	r0, r3
 801cf3e:	f7f3 f947 	bl	80101d0 <xQueueSemaphoreTake>

                HAL_SPI_Abort_IT(&hspi2);
 801cf42:	4841      	ldr	r0, [pc, #260]	; (801d048 <spi_1_2_task+0x270>)
 801cf44:	f7ed fe04 	bl	800ab50 <HAL_SPI_Abort_IT>
                *error_report = HAL_RETURN_ERROR;
 801cf48:	6a3b      	ldr	r3, [r7, #32]
 801cf4a:	2201      	movs	r2, #1
 801cf4c:	701a      	strb	r2, [r3, #0]
            }

            break;
 801cf4e:	e039      	b.n	801cfc4 <spi_1_2_task+0x1ec>

        case 4: /* spi2 IT rx/tx spi1 it rx/tx */

            spi_tx_rx = NO_PERIPHERAL_FINISH;
 801cf50:	4b3e      	ldr	r3, [pc, #248]	; (801d04c <spi_1_2_task+0x274>)
 801cf52:	2200      	movs	r2, #0
 801cf54:	701a      	strb	r2, [r3, #0]

            /* peripheral tx/rx testing data  */
            status = HAL_SPI_TransmitReceive_IT(&hspi1, data, data + sizeof_data / 2, sizeof_data / 2);
 801cf56:	897b      	ldrh	r3, [r7, #10]
 801cf58:	085b      	lsrs	r3, r3, #1
 801cf5a:	b29b      	uxth	r3, r3
 801cf5c:	461a      	mov	r2, r3
 801cf5e:	68fb      	ldr	r3, [r7, #12]
 801cf60:	441a      	add	r2, r3
 801cf62:	897b      	ldrh	r3, [r7, #10]
 801cf64:	085b      	lsrs	r3, r3, #1
 801cf66:	b29b      	uxth	r3, r3
 801cf68:	68f9      	ldr	r1, [r7, #12]
 801cf6a:	4836      	ldr	r0, [pc, #216]	; (801d044 <spi_1_2_task+0x26c>)
 801cf6c:	f7ed f9ae 	bl	800a2cc <HAL_SPI_TransmitReceive_IT>
 801cf70:	4603      	mov	r3, r0
 801cf72:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801cf74:	7dfb      	ldrb	r3, [r7, #23]
 801cf76:	2b00      	cmp	r3, #0
 801cf78:	d003      	beq.n	801cf82 <spi_1_2_task+0x1aa>

                *error_report = HAL_RETURN_ERROR;
 801cf7a:	6a3b      	ldr	r3, [r7, #32]
 801cf7c:	2201      	movs	r2, #1
 801cf7e:	701a      	strb	r2, [r3, #0]
                return;
 801cf80:	e05c      	b.n	801d03c <spi_1_2_task+0x264>
            }
            /* peripheral tx/rx testing data  */
            status = HAL_SPI_TransmitReceive_IT(&hspi2, data + sizeof_data / 2, data, sizeof_data / 2);
 801cf82:	897b      	ldrh	r3, [r7, #10]
 801cf84:	085b      	lsrs	r3, r3, #1
 801cf86:	b29b      	uxth	r3, r3
 801cf88:	461a      	mov	r2, r3
 801cf8a:	68fb      	ldr	r3, [r7, #12]
 801cf8c:	1899      	adds	r1, r3, r2
 801cf8e:	897b      	ldrh	r3, [r7, #10]
 801cf90:	085b      	lsrs	r3, r3, #1
 801cf92:	b29b      	uxth	r3, r3
 801cf94:	68fa      	ldr	r2, [r7, #12]
 801cf96:	482c      	ldr	r0, [pc, #176]	; (801d048 <spi_1_2_task+0x270>)
 801cf98:	f7ed f998 	bl	800a2cc <HAL_SPI_TransmitReceive_IT>
 801cf9c:	4603      	mov	r3, r0
 801cf9e:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801cfa0:	7dfb      	ldrb	r3, [r7, #23]
 801cfa2:	2b00      	cmp	r3, #0
 801cfa4:	d010      	beq.n	801cfc8 <spi_1_2_task+0x1f0>
                /* abort transmission in case HAL returns error so callback isr function wont release semaphore */
                HAL_SPI_Abort_IT(&hspi1);
 801cfa6:	4827      	ldr	r0, [pc, #156]	; (801d044 <spi_1_2_task+0x26c>)
 801cfa8:	f7ed fdd2 	bl	800ab50 <HAL_SPI_Abort_IT>
                *error_report = HAL_RETURN_ERROR;
 801cfac:	6a3b      	ldr	r3, [r7, #32]
 801cfae:	2201      	movs	r2, #1
 801cfb0:	701a      	strb	r2, [r3, #0]
            }

            break;
 801cfb2:	e009      	b.n	801cfc8 <spi_1_2_task+0x1f0>

        default: break;
 801cfb4:	bf00      	nop
 801cfb6:	e008      	b.n	801cfca <spi_1_2_task+0x1f2>
            break;
 801cfb8:	bf00      	nop
 801cfba:	e006      	b.n	801cfca <spi_1_2_task+0x1f2>
            break;
 801cfbc:	bf00      	nop
 801cfbe:	e004      	b.n	801cfca <spi_1_2_task+0x1f2>
            break;
 801cfc0:	bf00      	nop
 801cfc2:	e002      	b.n	801cfca <spi_1_2_task+0x1f2>
            break;
 801cfc4:	bf00      	nop
 801cfc6:	e000      	b.n	801cfca <spi_1_2_task+0x1f2>
            break;
 801cfc8:	bf00      	nop
    }
    /* waite for rx interrupt to release the semaphore, if to match time has passed report over time error  */
    if (xSemaphoreTake(*interrupt_sem, TIME_ELAPSED_ERROR) == pdFALSE && *error_report == NO_ERROR) {
 801cfca:	687b      	ldr	r3, [r7, #4]
 801cfcc:	681b      	ldr	r3, [r3, #0]
 801cfce:	2164      	movs	r1, #100	; 0x64
 801cfd0:	4618      	mov	r0, r3
 801cfd2:	f7f3 f8fd 	bl	80101d0 <xQueueSemaphoreTake>
 801cfd6:	4603      	mov	r3, r0
 801cfd8:	2b00      	cmp	r3, #0
 801cfda:	d119      	bne.n	801d010 <spi_1_2_task+0x238>
 801cfdc:	6a3b      	ldr	r3, [r7, #32]
 801cfde:	781b      	ldrb	r3, [r3, #0]
 801cfe0:	2b00      	cmp	r3, #0
 801cfe2:	d115      	bne.n	801d010 <spi_1_2_task+0x238>

        /* abort transmission in case HAL returns error so callback isr function wont release semaphore */
        HAL_SPI_Abort_IT(&hspi2);
 801cfe4:	4818      	ldr	r0, [pc, #96]	; (801d048 <spi_1_2_task+0x270>)
 801cfe6:	f7ed fdb3 	bl	800ab50 <HAL_SPI_Abort_IT>
        xSemaphoreTake(*interrupt_sem, TIME_ELAPSED_ERROR);
 801cfea:	687b      	ldr	r3, [r7, #4]
 801cfec:	681b      	ldr	r3, [r3, #0]
 801cfee:	2164      	movs	r1, #100	; 0x64
 801cff0:	4618      	mov	r0, r3
 801cff2:	f7f3 f8ed 	bl	80101d0 <xQueueSemaphoreTake>

        HAL_SPI_Abort_IT(&hspi1);
 801cff6:	4813      	ldr	r0, [pc, #76]	; (801d044 <spi_1_2_task+0x26c>)
 801cff8:	f7ed fdaa 	bl	800ab50 <HAL_SPI_Abort_IT>
        xSemaphoreTake(*interrupt_sem, TIME_ELAPSED_ERROR);
 801cffc:	687b      	ldr	r3, [r7, #4]
 801cffe:	681b      	ldr	r3, [r3, #0]
 801d000:	2164      	movs	r1, #100	; 0x64
 801d002:	4618      	mov	r0, r3
 801d004:	f7f3 f8e4 	bl	80101d0 <xQueueSemaphoreTake>

        *error_report = OVER_TIME;
 801d008:	6a3b      	ldr	r3, [r7, #32]
 801d00a:	2203      	movs	r2, #3
 801d00c:	701a      	strb	r2, [r3, #0]
 801d00e:	e015      	b.n	801d03c <spi_1_2_task+0x264>

    } else if (*error_report == ERROR_IT) {
 801d010:	6a3b      	ldr	r3, [r7, #32]
 801d012:	781b      	ldrb	r3, [r3, #0]
 801d014:	2b02      	cmp	r3, #2
 801d016:	d111      	bne.n	801d03c <spi_1_2_task+0x264>

        /* abort transmission in case HAL returns error so callback isr function wont release semaphore */
        HAL_SPI_Abort_IT(&hspi2);
 801d018:	480b      	ldr	r0, [pc, #44]	; (801d048 <spi_1_2_task+0x270>)
 801d01a:	f7ed fd99 	bl	800ab50 <HAL_SPI_Abort_IT>
        xSemaphoreTake(*interrupt_sem, TIME_ELAPSED_ERROR);
 801d01e:	687b      	ldr	r3, [r7, #4]
 801d020:	681b      	ldr	r3, [r3, #0]
 801d022:	2164      	movs	r1, #100	; 0x64
 801d024:	4618      	mov	r0, r3
 801d026:	f7f3 f8d3 	bl	80101d0 <xQueueSemaphoreTake>

        HAL_SPI_Abort_IT(&hspi1);
 801d02a:	4806      	ldr	r0, [pc, #24]	; (801d044 <spi_1_2_task+0x26c>)
 801d02c:	f7ed fd90 	bl	800ab50 <HAL_SPI_Abort_IT>
        xSemaphoreTake(*interrupt_sem, TIME_ELAPSED_ERROR);
 801d030:	687b      	ldr	r3, [r7, #4]
 801d032:	681b      	ldr	r3, [r3, #0]
 801d034:	2164      	movs	r1, #100	; 0x64
 801d036:	4618      	mov	r0, r3
 801d038:	f7f3 f8ca 	bl	80101d0 <xQueueSemaphoreTake>
    }
}
 801d03c:	3718      	adds	r7, #24
 801d03e:	46bd      	mov	sp, r7
 801d040:	bd80      	pop	{r7, pc}
 801d042:	bf00      	nop
 801d044:	200008f4 	.word	0x200008f4
 801d048:	20000958 	.word	0x20000958
 801d04c:	20024200 	.word	0x20024200

0801d050 <HAL_SPI_RxCpltCallback>:

/* peripheral isr callback function`s begin */

void
HAL_SPI_RxCpltCallback(SPI_HandleTypeDef* hspi) {
 801d050:	b580      	push	{r7, lr}
 801d052:	b082      	sub	sp, #8
 801d054:	af00      	add	r7, sp, #0
 801d056:	6078      	str	r0, [r7, #4]

    if (hspi == &hspi1 || hspi == &hspi2) {
 801d058:	687b      	ldr	r3, [r7, #4]
 801d05a:	4a08      	ldr	r2, [pc, #32]	; (801d07c <HAL_SPI_RxCpltCallback+0x2c>)
 801d05c:	4293      	cmp	r3, r2
 801d05e:	d003      	beq.n	801d068 <HAL_SPI_RxCpltCallback+0x18>
 801d060:	687b      	ldr	r3, [r7, #4]
 801d062:	4a07      	ldr	r2, [pc, #28]	; (801d080 <HAL_SPI_RxCpltCallback+0x30>)
 801d064:	4293      	cmp	r3, r2
 801d066:	d105      	bne.n	801d074 <HAL_SPI_RxCpltCallback+0x24>

        xSemaphoreGiveFromISR(stm_test_list_array[SPI_1_2].q, NULL);
 801d068:	4b06      	ldr	r3, [pc, #24]	; (801d084 <HAL_SPI_RxCpltCallback+0x34>)
 801d06a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d06c:	2100      	movs	r1, #0
 801d06e:	4618      	mov	r0, r3
 801d070:	f7f2 ff32 	bl	800fed8 <xQueueGiveFromISR>
    }
}
 801d074:	bf00      	nop
 801d076:	3708      	adds	r7, #8
 801d078:	46bd      	mov	sp, r7
 801d07a:	bd80      	pop	{r7, pc}
 801d07c:	200008f4 	.word	0x200008f4
 801d080:	20000958 	.word	0x20000958
 801d084:	200000a0 	.word	0x200000a0

0801d088 <HAL_SPI_TxRxCpltCallback>:

void
HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef* hspi) {
 801d088:	b580      	push	{r7, lr}
 801d08a:	b082      	sub	sp, #8
 801d08c:	af00      	add	r7, sp, #0
 801d08e:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument(s) compilation warning */

    if ((hspi == &hspi1 || hspi == &hspi2) && spi_tx_rx == ONE_PERIPHERAL_FINISH) {
 801d090:	687b      	ldr	r3, [r7, #4]
 801d092:	4a0d      	ldr	r2, [pc, #52]	; (801d0c8 <HAL_SPI_TxRxCpltCallback+0x40>)
 801d094:	4293      	cmp	r3, r2
 801d096:	d003      	beq.n	801d0a0 <HAL_SPI_TxRxCpltCallback+0x18>
 801d098:	687b      	ldr	r3, [r7, #4]
 801d09a:	4a0c      	ldr	r2, [pc, #48]	; (801d0cc <HAL_SPI_TxRxCpltCallback+0x44>)
 801d09c:	4293      	cmp	r3, r2
 801d09e:	d10a      	bne.n	801d0b6 <HAL_SPI_TxRxCpltCallback+0x2e>
 801d0a0:	4b0b      	ldr	r3, [pc, #44]	; (801d0d0 <HAL_SPI_TxRxCpltCallback+0x48>)
 801d0a2:	781b      	ldrb	r3, [r3, #0]
 801d0a4:	2b01      	cmp	r3, #1
 801d0a6:	d106      	bne.n	801d0b6 <HAL_SPI_TxRxCpltCallback+0x2e>

        xSemaphoreGiveFromISR(stm_test_list_array[SPI_1_2].q, NULL);
 801d0a8:	4b0a      	ldr	r3, [pc, #40]	; (801d0d4 <HAL_SPI_TxRxCpltCallback+0x4c>)
 801d0aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d0ac:	2100      	movs	r1, #0
 801d0ae:	4618      	mov	r0, r3
 801d0b0:	f7f2 ff12 	bl	800fed8 <xQueueGiveFromISR>
 801d0b4:	e003      	b.n	801d0be <HAL_SPI_TxRxCpltCallback+0x36>
    } else {

        spi_tx_rx = ONE_PERIPHERAL_FINISH;
 801d0b6:	4b06      	ldr	r3, [pc, #24]	; (801d0d0 <HAL_SPI_TxRxCpltCallback+0x48>)
 801d0b8:	2201      	movs	r2, #1
 801d0ba:	701a      	strb	r2, [r3, #0]
    }
    /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 801d0bc:	bf00      	nop
 801d0be:	bf00      	nop
 801d0c0:	3708      	adds	r7, #8
 801d0c2:	46bd      	mov	sp, r7
 801d0c4:	bd80      	pop	{r7, pc}
 801d0c6:	bf00      	nop
 801d0c8:	200008f4 	.word	0x200008f4
 801d0cc:	20000958 	.word	0x20000958
 801d0d0:	20024200 	.word	0x20024200
 801d0d4:	200000a0 	.word	0x200000a0

0801d0d8 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
void
HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef* hspi) {
 801d0d8:	b580      	push	{r7, lr}
 801d0da:	b082      	sub	sp, #8
 801d0dc:	af00      	add	r7, sp, #0
 801d0de:	6078      	str	r0, [r7, #4]
    /* releases semaphore and report errors*/
    if (hspi == &hspi1 || hspi == &hspi2) {
 801d0e0:	687b      	ldr	r3, [r7, #4]
 801d0e2:	4a08      	ldr	r2, [pc, #32]	; (801d104 <HAL_SPI_AbortCpltCallback+0x2c>)
 801d0e4:	4293      	cmp	r3, r2
 801d0e6:	d003      	beq.n	801d0f0 <HAL_SPI_AbortCpltCallback+0x18>
 801d0e8:	687b      	ldr	r3, [r7, #4]
 801d0ea:	4a07      	ldr	r2, [pc, #28]	; (801d108 <HAL_SPI_AbortCpltCallback+0x30>)
 801d0ec:	4293      	cmp	r3, r2
 801d0ee:	d105      	bne.n	801d0fc <HAL_SPI_AbortCpltCallback+0x24>

        xSemaphoreGiveFromISR(stm_test_list_array[SPI_1_2].q, NULL);
 801d0f0:	4b06      	ldr	r3, [pc, #24]	; (801d10c <HAL_SPI_AbortCpltCallback+0x34>)
 801d0f2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d0f4:	2100      	movs	r1, #0
 801d0f6:	4618      	mov	r0, r3
 801d0f8:	f7f2 feee 	bl	800fed8 <xQueueGiveFromISR>
    }
}
 801d0fc:	bf00      	nop
 801d0fe:	3708      	adds	r7, #8
 801d100:	46bd      	mov	sp, r7
 801d102:	bd80      	pop	{r7, pc}
 801d104:	200008f4 	.word	0x200008f4
 801d108:	20000958 	.word	0x20000958
 801d10c:	200000a0 	.word	0x200000a0

0801d110 <HAL_SPI_ErrorCallback>:
   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
   *               the configuration information for SPI module.
   * @retval None
   */
void
HAL_SPI_ErrorCallback(SPI_HandleTypeDef* hspi) {
 801d110:	b580      	push	{r7, lr}
 801d112:	b084      	sub	sp, #16
 801d114:	af00      	add	r7, sp, #0
 801d116:	6078      	str	r0, [r7, #4]

    unit_tasting_package_t* cast; /* for casting  */

    /* releases semaphore and report errors */
    if (hspi == &hspi1 || hspi == &hspi2) {
 801d118:	687b      	ldr	r3, [r7, #4]
 801d11a:	4a0c      	ldr	r2, [pc, #48]	; (801d14c <HAL_SPI_ErrorCallback+0x3c>)
 801d11c:	4293      	cmp	r3, r2
 801d11e:	d003      	beq.n	801d128 <HAL_SPI_ErrorCallback+0x18>
 801d120:	687b      	ldr	r3, [r7, #4]
 801d122:	4a0b      	ldr	r2, [pc, #44]	; (801d150 <HAL_SPI_ErrorCallback+0x40>)
 801d124:	4293      	cmp	r3, r2
 801d126:	d10d      	bne.n	801d144 <HAL_SPI_ErrorCallback+0x34>

        cast = stm_test_list_array[SPI_1_2].taskX_pack.p->payload;
 801d128:	4b0a      	ldr	r3, [pc, #40]	; (801d154 <HAL_SPI_ErrorCallback+0x44>)
 801d12a:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801d12c:	685b      	ldr	r3, [r3, #4]
 801d12e:	60fb      	str	r3, [r7, #12]
        cast->error_report = ERROR_IT;
 801d130:	68fb      	ldr	r3, [r7, #12]
 801d132:	2202      	movs	r2, #2
 801d134:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        xSemaphoreGiveFromISR(stm_test_list_array[SPI_1_2].q, NULL);
 801d138:	4b06      	ldr	r3, [pc, #24]	; (801d154 <HAL_SPI_ErrorCallback+0x44>)
 801d13a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801d13c:	2100      	movs	r1, #0
 801d13e:	4618      	mov	r0, r3
 801d140:	f7f2 feca 	bl	800fed8 <xQueueGiveFromISR>
    }
}
 801d144:	bf00      	nop
 801d146:	3710      	adds	r7, #16
 801d148:	46bd      	mov	sp, r7
 801d14a:	bd80      	pop	{r7, pc}
 801d14c:	200008f4 	.word	0x200008f4
 801d150:	20000958 	.word	0x20000958
 801d154:	200000a0 	.word	0x200000a0

0801d158 <UART_1_2_task>:
 * \param[in]       error_report: report to pc about test error
 */

void
UART_1_2_task(uint8_t* data, uint16_t sizeof_data, SemaphoreHandle_t* interrupt_sem, uint8_t test_select,
              uint8_t* error_report) {
 801d158:	b580      	push	{r7, lr}
 801d15a:	b086      	sub	sp, #24
 801d15c:	af00      	add	r7, sp, #0
 801d15e:	60f8      	str	r0, [r7, #12]
 801d160:	607a      	str	r2, [r7, #4]
 801d162:	461a      	mov	r2, r3
 801d164:	460b      	mov	r3, r1
 801d166:	817b      	strh	r3, [r7, #10]
 801d168:	4613      	mov	r3, r2
 801d16a:	727b      	strb	r3, [r7, #9]

    HAL_StatusTypeDef status; /* error return check */
    *error_report = NO_ERROR; /* initalized to  NO_ERROR if an error is accruing it will change it */
 801d16c:	6a3b      	ldr	r3, [r7, #32]
 801d16e:	2200      	movs	r2, #0
 801d170:	701a      	strb	r2, [r3, #0]

    /* run task test requested by pc */
    switch (test_select) {
 801d172:	7a7b      	ldrb	r3, [r7, #9]
 801d174:	2b00      	cmp	r3, #0
 801d176:	d002      	beq.n	801d17e <UART_1_2_task+0x26>
 801d178:	2b01      	cmp	r3, #1
 801d17a:	d021      	beq.n	801d1c0 <UART_1_2_task+0x68>
                *error_report = HAL_RETURN_ERROR;
            }

            break;

        default: break;
 801d17c:	e044      	b.n	801d208 <UART_1_2_task+0xb0>
            status = HAL_UART_Receive_IT(&huart1, data, sizeof_data);
 801d17e:	897b      	ldrh	r3, [r7, #10]
 801d180:	461a      	mov	r2, r3
 801d182:	68f9      	ldr	r1, [r7, #12]
 801d184:	4833      	ldr	r0, [pc, #204]	; (801d254 <UART_1_2_task+0xfc>)
 801d186:	f7ef fa01 	bl	800c58c <HAL_UART_Receive_IT>
 801d18a:	4603      	mov	r3, r0
 801d18c:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801d18e:	7dfb      	ldrb	r3, [r7, #23]
 801d190:	2b00      	cmp	r3, #0
 801d192:	d003      	beq.n	801d19c <UART_1_2_task+0x44>
                *error_report = HAL_RETURN_ERROR;
 801d194:	6a3b      	ldr	r3, [r7, #32]
 801d196:	2201      	movs	r2, #1
 801d198:	701a      	strb	r2, [r3, #0]
                return;
 801d19a:	e057      	b.n	801d24c <UART_1_2_task+0xf4>
            status = HAL_UART_Transmit_IT(&huart2, data, sizeof_data);
 801d19c:	897b      	ldrh	r3, [r7, #10]
 801d19e:	461a      	mov	r2, r3
 801d1a0:	68f9      	ldr	r1, [r7, #12]
 801d1a2:	482d      	ldr	r0, [pc, #180]	; (801d258 <UART_1_2_task+0x100>)
 801d1a4:	f7ef f994 	bl	800c4d0 <HAL_UART_Transmit_IT>
 801d1a8:	4603      	mov	r3, r0
 801d1aa:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801d1ac:	7dfb      	ldrb	r3, [r7, #23]
 801d1ae:	2b00      	cmp	r3, #0
 801d1b0:	d027      	beq.n	801d202 <UART_1_2_task+0xaa>
                HAL_UART_Abort_IT(&huart1);
 801d1b2:	4828      	ldr	r0, [pc, #160]	; (801d254 <UART_1_2_task+0xfc>)
 801d1b4:	f7ef faee 	bl	800c794 <HAL_UART_Abort_IT>
                *error_report = HAL_RETURN_ERROR;
 801d1b8:	6a3b      	ldr	r3, [r7, #32]
 801d1ba:	2201      	movs	r2, #1
 801d1bc:	701a      	strb	r2, [r3, #0]
            break;
 801d1be:	e020      	b.n	801d202 <UART_1_2_task+0xaa>
            status = HAL_UART_Receive_IT(&huart2, data, sizeof_data);
 801d1c0:	897b      	ldrh	r3, [r7, #10]
 801d1c2:	461a      	mov	r2, r3
 801d1c4:	68f9      	ldr	r1, [r7, #12]
 801d1c6:	4824      	ldr	r0, [pc, #144]	; (801d258 <UART_1_2_task+0x100>)
 801d1c8:	f7ef f9e0 	bl	800c58c <HAL_UART_Receive_IT>
 801d1cc:	4603      	mov	r3, r0
 801d1ce:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801d1d0:	7dfb      	ldrb	r3, [r7, #23]
 801d1d2:	2b00      	cmp	r3, #0
 801d1d4:	d003      	beq.n	801d1de <UART_1_2_task+0x86>
                *error_report = HAL_RETURN_ERROR;
 801d1d6:	6a3b      	ldr	r3, [r7, #32]
 801d1d8:	2201      	movs	r2, #1
 801d1da:	701a      	strb	r2, [r3, #0]
                return;
 801d1dc:	e036      	b.n	801d24c <UART_1_2_task+0xf4>
            status = HAL_UART_Transmit_IT(&huart1, data, sizeof_data);
 801d1de:	897b      	ldrh	r3, [r7, #10]
 801d1e0:	461a      	mov	r2, r3
 801d1e2:	68f9      	ldr	r1, [r7, #12]
 801d1e4:	481b      	ldr	r0, [pc, #108]	; (801d254 <UART_1_2_task+0xfc>)
 801d1e6:	f7ef f973 	bl	800c4d0 <HAL_UART_Transmit_IT>
 801d1ea:	4603      	mov	r3, r0
 801d1ec:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801d1ee:	7dfb      	ldrb	r3, [r7, #23]
 801d1f0:	2b00      	cmp	r3, #0
 801d1f2:	d008      	beq.n	801d206 <UART_1_2_task+0xae>
                HAL_UART_Abort_IT(&huart2);
 801d1f4:	4818      	ldr	r0, [pc, #96]	; (801d258 <UART_1_2_task+0x100>)
 801d1f6:	f7ef facd 	bl	800c794 <HAL_UART_Abort_IT>
                *error_report = HAL_RETURN_ERROR;
 801d1fa:	6a3b      	ldr	r3, [r7, #32]
 801d1fc:	2201      	movs	r2, #1
 801d1fe:	701a      	strb	r2, [r3, #0]
            break;
 801d200:	e001      	b.n	801d206 <UART_1_2_task+0xae>
            break;
 801d202:	bf00      	nop
 801d204:	e000      	b.n	801d208 <UART_1_2_task+0xb0>
            break;
 801d206:	bf00      	nop
    }

    /* waite for rx interrupt to release the semaphore, if to match time has passed report over time error  */
    if (xSemaphoreTake(*interrupt_sem, TIME_ELAPSED_ERROR) == pdFALSE && *error_report == NO_ERROR) {
 801d208:	687b      	ldr	r3, [r7, #4]
 801d20a:	681b      	ldr	r3, [r3, #0]
 801d20c:	2164      	movs	r1, #100	; 0x64
 801d20e:	4618      	mov	r0, r3
 801d210:	f7f2 ffde 	bl	80101d0 <xQueueSemaphoreTake>
 801d214:	4603      	mov	r3, r0
 801d216:	2b00      	cmp	r3, #0
 801d218:	d118      	bne.n	801d24c <UART_1_2_task+0xf4>
 801d21a:	6a3b      	ldr	r3, [r7, #32]
 801d21c:	781b      	ldrb	r3, [r3, #0]
 801d21e:	2b00      	cmp	r3, #0
 801d220:	d114      	bne.n	801d24c <UART_1_2_task+0xf4>

        /* abort transmission in case HAL returns error so callback isr function wont release semaphore */
        HAL_UART_Abort_IT(&huart1);
 801d222:	480c      	ldr	r0, [pc, #48]	; (801d254 <UART_1_2_task+0xfc>)
 801d224:	f7ef fab6 	bl	800c794 <HAL_UART_Abort_IT>
        xSemaphoreTake(*interrupt_sem, TIME_ELAPSED_ERROR);
 801d228:	687b      	ldr	r3, [r7, #4]
 801d22a:	681b      	ldr	r3, [r3, #0]
 801d22c:	2164      	movs	r1, #100	; 0x64
 801d22e:	4618      	mov	r0, r3
 801d230:	f7f2 ffce 	bl	80101d0 <xQueueSemaphoreTake>

        HAL_UART_Abort_IT(&huart2);
 801d234:	4808      	ldr	r0, [pc, #32]	; (801d258 <UART_1_2_task+0x100>)
 801d236:	f7ef faad 	bl	800c794 <HAL_UART_Abort_IT>
        xSemaphoreTake(*interrupt_sem, TIME_ELAPSED_ERROR);
 801d23a:	687b      	ldr	r3, [r7, #4]
 801d23c:	681b      	ldr	r3, [r3, #0]
 801d23e:	2164      	movs	r1, #100	; 0x64
 801d240:	4618      	mov	r0, r3
 801d242:	f7f2 ffc5 	bl	80101d0 <xQueueSemaphoreTake>

        *error_report = OVER_TIME;
 801d246:	6a3b      	ldr	r3, [r7, #32]
 801d248:	2203      	movs	r2, #3
 801d24a:	701a      	strb	r2, [r3, #0]
    }
}
 801d24c:	3718      	adds	r7, #24
 801d24e:	46bd      	mov	sp, r7
 801d250:	bd80      	pop	{r7, pc}
 801d252:	bf00      	nop
 801d254:	20000f38 	.word	0x20000f38
 801d258:	20000fc0 	.word	0x20000fc0

0801d25c <UART_4_5_task>:
 * \param[in]       test_select: select what test in the function to run
 * \param[in]       error_report: report to pc about test error
 */
void
UART_4_5_task(uint8_t* data, uint16_t sizeof_data, SemaphoreHandle_t* interrupt_sem, uint8_t test_select,
              uint8_t* error_report) {
 801d25c:	b580      	push	{r7, lr}
 801d25e:	b086      	sub	sp, #24
 801d260:	af00      	add	r7, sp, #0
 801d262:	60f8      	str	r0, [r7, #12]
 801d264:	607a      	str	r2, [r7, #4]
 801d266:	461a      	mov	r2, r3
 801d268:	460b      	mov	r3, r1
 801d26a:	817b      	strh	r3, [r7, #10]
 801d26c:	4613      	mov	r3, r2
 801d26e:	727b      	strb	r3, [r7, #9]

    HAL_StatusTypeDef status; /* error return check */
    *error_report = NO_ERROR; /* initalized to  NO_ERROR if an error is accruing it will change it */
 801d270:	6a3b      	ldr	r3, [r7, #32]
 801d272:	2200      	movs	r2, #0
 801d274:	701a      	strb	r2, [r3, #0]

    /* run task test requested by pc */
    switch (test_select) {
 801d276:	7a7b      	ldrb	r3, [r7, #9]
 801d278:	2b03      	cmp	r3, #3
 801d27a:	f200 808f 	bhi.w	801d39c <UART_4_5_task+0x140>
 801d27e:	a201      	add	r2, pc, #4	; (adr r2, 801d284 <UART_4_5_task+0x28>)
 801d280:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801d284:	0801d295 	.word	0x0801d295
 801d288:	0801d2d7 	.word	0x0801d2d7
 801d28c:	0801d319 	.word	0x0801d319
 801d290:	0801d35b 	.word	0x0801d35b

        case 0: /* uart4 TI rx uart5 TI tx */

            /* peripheral receive testing data  */
            status = HAL_UART_Receive_IT(&huart4, data, sizeof_data);
 801d294:	897b      	ldrh	r3, [r7, #10]
 801d296:	461a      	mov	r2, r3
 801d298:	68f9      	ldr	r1, [r7, #12]
 801d29a:	4863      	ldr	r0, [pc, #396]	; (801d428 <UART_4_5_task+0x1cc>)
 801d29c:	f7ef f976 	bl	800c58c <HAL_UART_Receive_IT>
 801d2a0:	4603      	mov	r3, r0
 801d2a2:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801d2a4:	7dfb      	ldrb	r3, [r7, #23]
 801d2a6:	2b00      	cmp	r3, #0
 801d2a8:	d003      	beq.n	801d2b2 <UART_4_5_task+0x56>

                *error_report = HAL_RETURN_ERROR;
 801d2aa:	6a3b      	ldr	r3, [r7, #32]
 801d2ac:	2201      	movs	r2, #1
 801d2ae:	701a      	strb	r2, [r3, #0]

                return;
 801d2b0:	e0b6      	b.n	801d420 <UART_4_5_task+0x1c4>
            }

            /* peripheral transmit testing data  */
            status = HAL_UART_Transmit_IT(&huart5, data, sizeof_data);
 801d2b2:	897b      	ldrh	r3, [r7, #10]
 801d2b4:	461a      	mov	r2, r3
 801d2b6:	68f9      	ldr	r1, [r7, #12]
 801d2b8:	485c      	ldr	r0, [pc, #368]	; (801d42c <UART_4_5_task+0x1d0>)
 801d2ba:	f7ef f909 	bl	800c4d0 <HAL_UART_Transmit_IT>
 801d2be:	4603      	mov	r3, r0
 801d2c0:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801d2c2:	7dfb      	ldrb	r3, [r7, #23]
 801d2c4:	2b00      	cmp	r3, #0
 801d2c6:	d06b      	beq.n	801d3a0 <UART_4_5_task+0x144>
                /* abort transmission in case HAL returns error so callback isr function wont release semaphore */
                HAL_UART_Abort_IT(&huart4);
 801d2c8:	4857      	ldr	r0, [pc, #348]	; (801d428 <UART_4_5_task+0x1cc>)
 801d2ca:	f7ef fa63 	bl	800c794 <HAL_UART_Abort_IT>
                *error_report = HAL_RETURN_ERROR;
 801d2ce:	6a3b      	ldr	r3, [r7, #32]
 801d2d0:	2201      	movs	r2, #1
 801d2d2:	701a      	strb	r2, [r3, #0]
            }
            break;
 801d2d4:	e064      	b.n	801d3a0 <UART_4_5_task+0x144>

        case 1: /* uart5 TI rx uart4 TI tx */

            /* peripheral receive testing data  */
            status = HAL_UART_Receive_IT(&huart5, data, sizeof_data);
 801d2d6:	897b      	ldrh	r3, [r7, #10]
 801d2d8:	461a      	mov	r2, r3
 801d2da:	68f9      	ldr	r1, [r7, #12]
 801d2dc:	4853      	ldr	r0, [pc, #332]	; (801d42c <UART_4_5_task+0x1d0>)
 801d2de:	f7ef f955 	bl	800c58c <HAL_UART_Receive_IT>
 801d2e2:	4603      	mov	r3, r0
 801d2e4:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801d2e6:	7dfb      	ldrb	r3, [r7, #23]
 801d2e8:	2b00      	cmp	r3, #0
 801d2ea:	d003      	beq.n	801d2f4 <UART_4_5_task+0x98>

                *error_report = HAL_RETURN_ERROR;
 801d2ec:	6a3b      	ldr	r3, [r7, #32]
 801d2ee:	2201      	movs	r2, #1
 801d2f0:	701a      	strb	r2, [r3, #0]
                return;
 801d2f2:	e095      	b.n	801d420 <UART_4_5_task+0x1c4>
            }
            /* peripheral transmit testing data  */
            status = HAL_UART_Transmit_IT(&huart4, data, sizeof_data);
 801d2f4:	897b      	ldrh	r3, [r7, #10]
 801d2f6:	461a      	mov	r2, r3
 801d2f8:	68f9      	ldr	r1, [r7, #12]
 801d2fa:	484b      	ldr	r0, [pc, #300]	; (801d428 <UART_4_5_task+0x1cc>)
 801d2fc:	f7ef f8e8 	bl	800c4d0 <HAL_UART_Transmit_IT>
 801d300:	4603      	mov	r3, r0
 801d302:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801d304:	7dfb      	ldrb	r3, [r7, #23]
 801d306:	2b00      	cmp	r3, #0
 801d308:	d04c      	beq.n	801d3a4 <UART_4_5_task+0x148>
                /* abort transmission in case HAL returns error so callback isr function wont release semaphore */
                HAL_UART_Abort_IT(&huart5);
 801d30a:	4848      	ldr	r0, [pc, #288]	; (801d42c <UART_4_5_task+0x1d0>)
 801d30c:	f7ef fa42 	bl	800c794 <HAL_UART_Abort_IT>
                *error_report = HAL_RETURN_ERROR;
 801d310:	6a3b      	ldr	r3, [r7, #32]
 801d312:	2201      	movs	r2, #1
 801d314:	701a      	strb	r2, [r3, #0]
            }

            break;
 801d316:	e045      	b.n	801d3a4 <UART_4_5_task+0x148>

        case 2: /* uart4 DMA rx uart5 DMA tx */

            /* peripheral receive testing data  */
            status = HAL_UART_Receive_DMA(&huart4, data, sizeof_data);
 801d318:	897b      	ldrh	r3, [r7, #10]
 801d31a:	461a      	mov	r2, r3
 801d31c:	68f9      	ldr	r1, [r7, #12]
 801d31e:	4842      	ldr	r0, [pc, #264]	; (801d428 <UART_4_5_task+0x1cc>)
 801d320:	f7ef f9f4 	bl	800c70c <HAL_UART_Receive_DMA>
 801d324:	4603      	mov	r3, r0
 801d326:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801d328:	7dfb      	ldrb	r3, [r7, #23]
 801d32a:	2b00      	cmp	r3, #0
 801d32c:	d003      	beq.n	801d336 <UART_4_5_task+0xda>

                *error_report = HAL_RETURN_ERROR;
 801d32e:	6a3b      	ldr	r3, [r7, #32]
 801d330:	2201      	movs	r2, #1
 801d332:	701a      	strb	r2, [r3, #0]
                return;
 801d334:	e074      	b.n	801d420 <UART_4_5_task+0x1c4>
            }

            /* peripheral transmit testing data  */
            status = HAL_UART_Transmit_DMA(&huart5, data, sizeof_data);
 801d336:	897b      	ldrh	r3, [r7, #10]
 801d338:	461a      	mov	r2, r3
 801d33a:	68f9      	ldr	r1, [r7, #12]
 801d33c:	483b      	ldr	r0, [pc, #236]	; (801d42c <UART_4_5_task+0x1d0>)
 801d33e:	f7ef f969 	bl	800c614 <HAL_UART_Transmit_DMA>
 801d342:	4603      	mov	r3, r0
 801d344:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801d346:	7dfb      	ldrb	r3, [r7, #23]
 801d348:	2b00      	cmp	r3, #0
 801d34a:	d02d      	beq.n	801d3a8 <UART_4_5_task+0x14c>
                /* abort transmission in case HAL returns error so callback isr function wont release semaphore */
                HAL_UART_Abort_IT(&huart4);
 801d34c:	4836      	ldr	r0, [pc, #216]	; (801d428 <UART_4_5_task+0x1cc>)
 801d34e:	f7ef fa21 	bl	800c794 <HAL_UART_Abort_IT>
                *error_report = HAL_RETURN_ERROR;
 801d352:	6a3b      	ldr	r3, [r7, #32]
 801d354:	2201      	movs	r2, #1
 801d356:	701a      	strb	r2, [r3, #0]
            }

            break;
 801d358:	e026      	b.n	801d3a8 <UART_4_5_task+0x14c>

        case 3: /* uart5 DMA rx uart4 DMA tx */

            /* peripheral receive testing data  */
            status = HAL_UART_Receive_DMA(&huart5, data, sizeof_data);
 801d35a:	897b      	ldrh	r3, [r7, #10]
 801d35c:	461a      	mov	r2, r3
 801d35e:	68f9      	ldr	r1, [r7, #12]
 801d360:	4832      	ldr	r0, [pc, #200]	; (801d42c <UART_4_5_task+0x1d0>)
 801d362:	f7ef f9d3 	bl	800c70c <HAL_UART_Receive_DMA>
 801d366:	4603      	mov	r3, r0
 801d368:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801d36a:	7dfb      	ldrb	r3, [r7, #23]
 801d36c:	2b00      	cmp	r3, #0
 801d36e:	d003      	beq.n	801d378 <UART_4_5_task+0x11c>

                *error_report = HAL_RETURN_ERROR;
 801d370:	6a3b      	ldr	r3, [r7, #32]
 801d372:	2201      	movs	r2, #1
 801d374:	701a      	strb	r2, [r3, #0]
                return;
 801d376:	e053      	b.n	801d420 <UART_4_5_task+0x1c4>
            }

            /* peripheral transmit testing data  */
            status = HAL_UART_Transmit_DMA(&huart4, data, sizeof_data);
 801d378:	897b      	ldrh	r3, [r7, #10]
 801d37a:	461a      	mov	r2, r3
 801d37c:	68f9      	ldr	r1, [r7, #12]
 801d37e:	482a      	ldr	r0, [pc, #168]	; (801d428 <UART_4_5_task+0x1cc>)
 801d380:	f7ef f948 	bl	800c614 <HAL_UART_Transmit_DMA>
 801d384:	4603      	mov	r3, r0
 801d386:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801d388:	7dfb      	ldrb	r3, [r7, #23]
 801d38a:	2b00      	cmp	r3, #0
 801d38c:	d00e      	beq.n	801d3ac <UART_4_5_task+0x150>
                /* abort transmission in case HAL returns error so callback isr function wont release semaphore */
                HAL_UART_Abort_IT(&huart5);
 801d38e:	4827      	ldr	r0, [pc, #156]	; (801d42c <UART_4_5_task+0x1d0>)
 801d390:	f7ef fa00 	bl	800c794 <HAL_UART_Abort_IT>
                *error_report = HAL_RETURN_ERROR;
 801d394:	6a3b      	ldr	r3, [r7, #32]
 801d396:	2201      	movs	r2, #1
 801d398:	701a      	strb	r2, [r3, #0]
            }
            break;
 801d39a:	e007      	b.n	801d3ac <UART_4_5_task+0x150>

        default: break;
 801d39c:	bf00      	nop
 801d39e:	e006      	b.n	801d3ae <UART_4_5_task+0x152>
            break;
 801d3a0:	bf00      	nop
 801d3a2:	e004      	b.n	801d3ae <UART_4_5_task+0x152>
            break;
 801d3a4:	bf00      	nop
 801d3a6:	e002      	b.n	801d3ae <UART_4_5_task+0x152>
            break;
 801d3a8:	bf00      	nop
 801d3aa:	e000      	b.n	801d3ae <UART_4_5_task+0x152>
            break;
 801d3ac:	bf00      	nop
    }

    /* waite for rx interrupt to release the semaphore, if to match time has passed report over time error  */
    if (xSemaphoreTake(*interrupt_sem, TIME_ELAPSED_ERROR) == pdFALSE && *error_report == NO_ERROR) {
 801d3ae:	687b      	ldr	r3, [r7, #4]
 801d3b0:	681b      	ldr	r3, [r3, #0]
 801d3b2:	2164      	movs	r1, #100	; 0x64
 801d3b4:	4618      	mov	r0, r3
 801d3b6:	f7f2 ff0b 	bl	80101d0 <xQueueSemaphoreTake>
 801d3ba:	4603      	mov	r3, r0
 801d3bc:	2b00      	cmp	r3, #0
 801d3be:	d119      	bne.n	801d3f4 <UART_4_5_task+0x198>
 801d3c0:	6a3b      	ldr	r3, [r7, #32]
 801d3c2:	781b      	ldrb	r3, [r3, #0]
 801d3c4:	2b00      	cmp	r3, #0
 801d3c6:	d115      	bne.n	801d3f4 <UART_4_5_task+0x198>

        /* abort transmission in case HAL returns error so callback isr function wont release semaphore */
        HAL_UART_Abort_IT(&huart4);
 801d3c8:	4817      	ldr	r0, [pc, #92]	; (801d428 <UART_4_5_task+0x1cc>)
 801d3ca:	f7ef f9e3 	bl	800c794 <HAL_UART_Abort_IT>
        xSemaphoreTake(*interrupt_sem, TIME_ELAPSED_ERROR);
 801d3ce:	687b      	ldr	r3, [r7, #4]
 801d3d0:	681b      	ldr	r3, [r3, #0]
 801d3d2:	2164      	movs	r1, #100	; 0x64
 801d3d4:	4618      	mov	r0, r3
 801d3d6:	f7f2 fefb 	bl	80101d0 <xQueueSemaphoreTake>

        HAL_UART_Abort_IT(&huart5);
 801d3da:	4814      	ldr	r0, [pc, #80]	; (801d42c <UART_4_5_task+0x1d0>)
 801d3dc:	f7ef f9da 	bl	800c794 <HAL_UART_Abort_IT>
        xSemaphoreTake(*interrupt_sem, TIME_ELAPSED_ERROR);
 801d3e0:	687b      	ldr	r3, [r7, #4]
 801d3e2:	681b      	ldr	r3, [r3, #0]
 801d3e4:	2164      	movs	r1, #100	; 0x64
 801d3e6:	4618      	mov	r0, r3
 801d3e8:	f7f2 fef2 	bl	80101d0 <xQueueSemaphoreTake>

        *error_report = OVER_TIME;
 801d3ec:	6a3b      	ldr	r3, [r7, #32]
 801d3ee:	2203      	movs	r2, #3
 801d3f0:	701a      	strb	r2, [r3, #0]
 801d3f2:	e015      	b.n	801d420 <UART_4_5_task+0x1c4>

    } else if (*error_report == ERROR_IT) {
 801d3f4:	6a3b      	ldr	r3, [r7, #32]
 801d3f6:	781b      	ldrb	r3, [r3, #0]
 801d3f8:	2b02      	cmp	r3, #2
 801d3fa:	d111      	bne.n	801d420 <UART_4_5_task+0x1c4>

        /* abort transmission in case HAL returns error so callback isr function wont release semaphore */
        HAL_UART_Abort_IT(&huart4);
 801d3fc:	480a      	ldr	r0, [pc, #40]	; (801d428 <UART_4_5_task+0x1cc>)
 801d3fe:	f7ef f9c9 	bl	800c794 <HAL_UART_Abort_IT>
        xSemaphoreTake(*interrupt_sem, TIME_ELAPSED_ERROR);
 801d402:	687b      	ldr	r3, [r7, #4]
 801d404:	681b      	ldr	r3, [r3, #0]
 801d406:	2164      	movs	r1, #100	; 0x64
 801d408:	4618      	mov	r0, r3
 801d40a:	f7f2 fee1 	bl	80101d0 <xQueueSemaphoreTake>

        HAL_UART_Abort_IT(&huart5);
 801d40e:	4807      	ldr	r0, [pc, #28]	; (801d42c <UART_4_5_task+0x1d0>)
 801d410:	f7ef f9c0 	bl	800c794 <HAL_UART_Abort_IT>
        xSemaphoreTake(*interrupt_sem, TIME_ELAPSED_ERROR);
 801d414:	687b      	ldr	r3, [r7, #4]
 801d416:	681b      	ldr	r3, [r3, #0]
 801d418:	2164      	movs	r1, #100	; 0x64
 801d41a:	4618      	mov	r0, r3
 801d41c:	f7f2 fed8 	bl	80101d0 <xQueueSemaphoreTake>
    }
}
 801d420:	3718      	adds	r7, #24
 801d422:	46bd      	mov	sp, r7
 801d424:	bd80      	pop	{r7, pc}
 801d426:	bf00      	nop
 801d428:	20000d18 	.word	0x20000d18
 801d42c:	20000da0 	.word	0x20000da0

0801d430 <HAL_UART_RxCpltCallback>:

void
HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 801d430:	b580      	push	{r7, lr}
 801d432:	b082      	sub	sp, #8
 801d434:	af00      	add	r7, sp, #0
 801d436:	6078      	str	r0, [r7, #4]

    if (huart == &huart4 || huart == &huart5) {
 801d438:	687b      	ldr	r3, [r7, #4]
 801d43a:	4a10      	ldr	r2, [pc, #64]	; (801d47c <HAL_UART_RxCpltCallback+0x4c>)
 801d43c:	4293      	cmp	r3, r2
 801d43e:	d003      	beq.n	801d448 <HAL_UART_RxCpltCallback+0x18>
 801d440:	687b      	ldr	r3, [r7, #4]
 801d442:	4a0f      	ldr	r2, [pc, #60]	; (801d480 <HAL_UART_RxCpltCallback+0x50>)
 801d444:	4293      	cmp	r3, r2
 801d446:	d106      	bne.n	801d456 <HAL_UART_RxCpltCallback+0x26>

        xSemaphoreGiveFromISR(stm_test_list_array[UART_4_5].q, NULL);
 801d448:	4b0e      	ldr	r3, [pc, #56]	; (801d484 <HAL_UART_RxCpltCallback+0x54>)
 801d44a:	6a1b      	ldr	r3, [r3, #32]
 801d44c:	2100      	movs	r1, #0
 801d44e:	4618      	mov	r0, r3
 801d450:	f7f2 fd42 	bl	800fed8 <xQueueGiveFromISR>

    } else if (huart == &huart1 || huart == &huart2) {

        xSemaphoreGiveFromISR(stm_test_list_array[UART_1_2].q, NULL);
    }
}
 801d454:	e00d      	b.n	801d472 <HAL_UART_RxCpltCallback+0x42>
    } else if (huart == &huart1 || huart == &huart2) {
 801d456:	687b      	ldr	r3, [r7, #4]
 801d458:	4a0b      	ldr	r2, [pc, #44]	; (801d488 <HAL_UART_RxCpltCallback+0x58>)
 801d45a:	4293      	cmp	r3, r2
 801d45c:	d003      	beq.n	801d466 <HAL_UART_RxCpltCallback+0x36>
 801d45e:	687b      	ldr	r3, [r7, #4]
 801d460:	4a0a      	ldr	r2, [pc, #40]	; (801d48c <HAL_UART_RxCpltCallback+0x5c>)
 801d462:	4293      	cmp	r3, r2
 801d464:	d105      	bne.n	801d472 <HAL_UART_RxCpltCallback+0x42>
        xSemaphoreGiveFromISR(stm_test_list_array[UART_1_2].q, NULL);
 801d466:	4b07      	ldr	r3, [pc, #28]	; (801d484 <HAL_UART_RxCpltCallback+0x54>)
 801d468:	685b      	ldr	r3, [r3, #4]
 801d46a:	2100      	movs	r1, #0
 801d46c:	4618      	mov	r0, r3
 801d46e:	f7f2 fd33 	bl	800fed8 <xQueueGiveFromISR>
}
 801d472:	bf00      	nop
 801d474:	3708      	adds	r7, #8
 801d476:	46bd      	mov	sp, r7
 801d478:	bd80      	pop	{r7, pc}
 801d47a:	bf00      	nop
 801d47c:	20000d18 	.word	0x20000d18
 801d480:	20000da0 	.word	0x20000da0
 801d484:	200000a0 	.word	0x200000a0
 801d488:	20000f38 	.word	0x20000f38
 801d48c:	20000fc0 	.word	0x20000fc0

0801d490 <HAL_UART_ErrorCallback>:

/* callbacks */
void
HAL_UART_ErrorCallback(UART_HandleTypeDef* huart) {
 801d490:	b580      	push	{r7, lr}
 801d492:	b084      	sub	sp, #16
 801d494:	af00      	add	r7, sp, #0
 801d496:	6078      	str	r0, [r7, #4]
    unit_tasting_package_t* cast;

    if (huart == &huart4 || huart == &huart5) {
 801d498:	687b      	ldr	r3, [r7, #4]
 801d49a:	4a15      	ldr	r2, [pc, #84]	; (801d4f0 <HAL_UART_ErrorCallback+0x60>)
 801d49c:	4293      	cmp	r3, r2
 801d49e:	d003      	beq.n	801d4a8 <HAL_UART_ErrorCallback+0x18>
 801d4a0:	687b      	ldr	r3, [r7, #4]
 801d4a2:	4a14      	ldr	r2, [pc, #80]	; (801d4f4 <HAL_UART_ErrorCallback+0x64>)
 801d4a4:	4293      	cmp	r3, r2
 801d4a6:	d108      	bne.n	801d4ba <HAL_UART_ErrorCallback+0x2a>

        cast = stm_test_list_array[UART_4_5].taskX_pack.p->payload;
 801d4a8:	4b13      	ldr	r3, [pc, #76]	; (801d4f8 <HAL_UART_ErrorCallback+0x68>)
 801d4aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801d4ac:	685b      	ldr	r3, [r3, #4]
 801d4ae:	60fb      	str	r3, [r7, #12]
        cast->error_report = ERROR_IT;
 801d4b0:	68fb      	ldr	r3, [r7, #12]
 801d4b2:	2202      	movs	r2, #2
 801d4b4:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

        cast = stm_test_list_array[UART_1_2].taskX_pack.p->payload;
        cast->error_report = ERROR_IT;
        xSemaphoreGiveFromISR(stm_test_list_array[UART_1_2].q, NULL);
    }
}
 801d4b8:	e015      	b.n	801d4e6 <HAL_UART_ErrorCallback+0x56>
    } else if (huart == &huart1 || huart == &huart2) {
 801d4ba:	687b      	ldr	r3, [r7, #4]
 801d4bc:	4a0f      	ldr	r2, [pc, #60]	; (801d4fc <HAL_UART_ErrorCallback+0x6c>)
 801d4be:	4293      	cmp	r3, r2
 801d4c0:	d003      	beq.n	801d4ca <HAL_UART_ErrorCallback+0x3a>
 801d4c2:	687b      	ldr	r3, [r7, #4]
 801d4c4:	4a0e      	ldr	r2, [pc, #56]	; (801d500 <HAL_UART_ErrorCallback+0x70>)
 801d4c6:	4293      	cmp	r3, r2
 801d4c8:	d10d      	bne.n	801d4e6 <HAL_UART_ErrorCallback+0x56>
        cast = stm_test_list_array[UART_1_2].taskX_pack.p->payload;
 801d4ca:	4b0b      	ldr	r3, [pc, #44]	; (801d4f8 <HAL_UART_ErrorCallback+0x68>)
 801d4cc:	691b      	ldr	r3, [r3, #16]
 801d4ce:	685b      	ldr	r3, [r3, #4]
 801d4d0:	60fb      	str	r3, [r7, #12]
        cast->error_report = ERROR_IT;
 801d4d2:	68fb      	ldr	r3, [r7, #12]
 801d4d4:	2202      	movs	r2, #2
 801d4d6:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        xSemaphoreGiveFromISR(stm_test_list_array[UART_1_2].q, NULL);
 801d4da:	4b07      	ldr	r3, [pc, #28]	; (801d4f8 <HAL_UART_ErrorCallback+0x68>)
 801d4dc:	685b      	ldr	r3, [r3, #4]
 801d4de:	2100      	movs	r1, #0
 801d4e0:	4618      	mov	r0, r3
 801d4e2:	f7f2 fcf9 	bl	800fed8 <xQueueGiveFromISR>
}
 801d4e6:	bf00      	nop
 801d4e8:	3710      	adds	r7, #16
 801d4ea:	46bd      	mov	sp, r7
 801d4ec:	bd80      	pop	{r7, pc}
 801d4ee:	bf00      	nop
 801d4f0:	20000d18 	.word	0x20000d18
 801d4f4:	20000da0 	.word	0x20000da0
 801d4f8:	200000a0 	.word	0x200000a0
 801d4fc:	20000f38 	.word	0x20000f38
 801d500:	20000fc0 	.word	0x20000fc0

0801d504 <HAL_UART_AbortCpltCallback>:

void
HAL_UART_AbortCpltCallback(UART_HandleTypeDef* huart) {
 801d504:	b580      	push	{r7, lr}
 801d506:	b082      	sub	sp, #8
 801d508:	af00      	add	r7, sp, #0
 801d50a:	6078      	str	r0, [r7, #4]
    if (huart == &huart4 || huart == &huart5) {
 801d50c:	687b      	ldr	r3, [r7, #4]
 801d50e:	4a10      	ldr	r2, [pc, #64]	; (801d550 <HAL_UART_AbortCpltCallback+0x4c>)
 801d510:	4293      	cmp	r3, r2
 801d512:	d003      	beq.n	801d51c <HAL_UART_AbortCpltCallback+0x18>
 801d514:	687b      	ldr	r3, [r7, #4]
 801d516:	4a0f      	ldr	r2, [pc, #60]	; (801d554 <HAL_UART_AbortCpltCallback+0x50>)
 801d518:	4293      	cmp	r3, r2
 801d51a:	d106      	bne.n	801d52a <HAL_UART_AbortCpltCallback+0x26>

        xSemaphoreGiveFromISR(stm_test_list_array[UART_4_5].q, NULL);
 801d51c:	4b0e      	ldr	r3, [pc, #56]	; (801d558 <HAL_UART_AbortCpltCallback+0x54>)
 801d51e:	6a1b      	ldr	r3, [r3, #32]
 801d520:	2100      	movs	r1, #0
 801d522:	4618      	mov	r0, r3
 801d524:	f7f2 fcd8 	bl	800fed8 <xQueueGiveFromISR>

    } else if (huart == &huart1 || huart == &huart2) {

        xSemaphoreGiveFromISR(stm_test_list_array[0].q, NULL);
    }
}
 801d528:	e00d      	b.n	801d546 <HAL_UART_AbortCpltCallback+0x42>
    } else if (huart == &huart1 || huart == &huart2) {
 801d52a:	687b      	ldr	r3, [r7, #4]
 801d52c:	4a0b      	ldr	r2, [pc, #44]	; (801d55c <HAL_UART_AbortCpltCallback+0x58>)
 801d52e:	4293      	cmp	r3, r2
 801d530:	d003      	beq.n	801d53a <HAL_UART_AbortCpltCallback+0x36>
 801d532:	687b      	ldr	r3, [r7, #4]
 801d534:	4a0a      	ldr	r2, [pc, #40]	; (801d560 <HAL_UART_AbortCpltCallback+0x5c>)
 801d536:	4293      	cmp	r3, r2
 801d538:	d105      	bne.n	801d546 <HAL_UART_AbortCpltCallback+0x42>
        xSemaphoreGiveFromISR(stm_test_list_array[0].q, NULL);
 801d53a:	4b07      	ldr	r3, [pc, #28]	; (801d558 <HAL_UART_AbortCpltCallback+0x54>)
 801d53c:	685b      	ldr	r3, [r3, #4]
 801d53e:	2100      	movs	r1, #0
 801d540:	4618      	mov	r0, r3
 801d542:	f7f2 fcc9 	bl	800fed8 <xQueueGiveFromISR>
}
 801d546:	bf00      	nop
 801d548:	3708      	adds	r7, #8
 801d54a:	46bd      	mov	sp, r7
 801d54c:	bd80      	pop	{r7, pc}
 801d54e:	bf00      	nop
 801d550:	20000d18 	.word	0x20000d18
 801d554:	20000da0 	.word	0x20000da0
 801d558:	200000a0 	.word	0x200000a0
 801d55c:	20000f38 	.word	0x20000f38
 801d560:	20000fc0 	.word	0x20000fc0

0801d564 <ur_main>:

/**
 * \brief           main function start up the software create the tasks and semaphore's
 */
void
ur_main() {
 801d564:	b580      	push	{r7, lr}
 801d566:	b086      	sub	sp, #24
 801d568:	af02      	add	r7, sp, #8

    BaseType_t err;

    /* creating semaphores for each testing task  */
    for (int i = 0; i < test_list_size; i++) {
 801d56a:	2300      	movs	r3, #0
 801d56c:	60fb      	str	r3, [r7, #12]
 801d56e:	e01f      	b.n	801d5b0 <ur_main+0x4c>

        stm_test_list_array[i].q = xSemaphoreCreateBinary();
 801d570:	2203      	movs	r2, #3
 801d572:	2100      	movs	r1, #0
 801d574:	2001      	movs	r0, #1
 801d576:	f7f2 fa5b 	bl	800fa30 <xQueueGenericCreate>
 801d57a:	4601      	mov	r1, r0
 801d57c:	483e      	ldr	r0, [pc, #248]	; (801d678 <ur_main+0x114>)
 801d57e:	68fa      	ldr	r2, [r7, #12]
 801d580:	4613      	mov	r3, r2
 801d582:	00db      	lsls	r3, r3, #3
 801d584:	1a9b      	subs	r3, r3, r2
 801d586:	009b      	lsls	r3, r3, #2
 801d588:	4403      	add	r3, r0
 801d58a:	3304      	adds	r3, #4
 801d58c:	6019      	str	r1, [r3, #0]

        if (stm_test_list_array[i].q == NULL) {
 801d58e:	493a      	ldr	r1, [pc, #232]	; (801d678 <ur_main+0x114>)
 801d590:	68fa      	ldr	r2, [r7, #12]
 801d592:	4613      	mov	r3, r2
 801d594:	00db      	lsls	r3, r3, #3
 801d596:	1a9b      	subs	r3, r3, r2
 801d598:	009b      	lsls	r3, r3, #2
 801d59a:	440b      	add	r3, r1
 801d59c:	3304      	adds	r3, #4
 801d59e:	681b      	ldr	r3, [r3, #0]
 801d5a0:	2b00      	cmp	r3, #0
 801d5a2:	d102      	bne.n	801d5aa <ur_main+0x46>
             exit(SEMAPHORE_CREATE_FAILED);
 801d5a4:	2001      	movs	r0, #1
 801d5a6:	f000 fab9 	bl	801db1c <exit>
    for (int i = 0; i < test_list_size; i++) {
 801d5aa:	68fb      	ldr	r3, [r7, #12]
 801d5ac:	3301      	adds	r3, #1
 801d5ae:	60fb      	str	r3, [r7, #12]
 801d5b0:	4b32      	ldr	r3, [pc, #200]	; (801d67c <ur_main+0x118>)
 801d5b2:	881b      	ldrh	r3, [r3, #0]
 801d5b4:	461a      	mov	r2, r3
 801d5b6:	68fb      	ldr	r3, [r7, #12]
 801d5b8:	4293      	cmp	r3, r2
 801d5ba:	dbd9      	blt.n	801d570 <ur_main+0xc>
        }
    }

    /* creating semaphore for "app_data_init_task" */
    app_init_sem = xSemaphoreCreateBinary();
 801d5bc:	2203      	movs	r2, #3
 801d5be:	2100      	movs	r1, #0
 801d5c0:	2001      	movs	r0, #1
 801d5c2:	f7f2 fa35 	bl	800fa30 <xQueueGenericCreate>
 801d5c6:	4603      	mov	r3, r0
 801d5c8:	4a2d      	ldr	r2, [pc, #180]	; (801d680 <ur_main+0x11c>)
 801d5ca:	6013      	str	r3, [r2, #0]

    if (app_init_sem == NULL)
 801d5cc:	4b2c      	ldr	r3, [pc, #176]	; (801d680 <ur_main+0x11c>)
 801d5ce:	681b      	ldr	r3, [r3, #0]
 801d5d0:	2b00      	cmp	r3, #0
 801d5d2:	d102      	bne.n	801d5da <ur_main+0x76>

    {
        exit(SEMAPHORE_CREATE_FAILED);
 801d5d4:	2001      	movs	r0, #1
 801d5d6:	f000 faa1 	bl	801db1c <exit>
    }

    /* create "begin_task" */
    err = xTaskCreate((TaskFunction_t)begin_task, "begin_task", BEGIN_TASK_STACK_SIZE, NULL, 0, NULL);
 801d5da:	2300      	movs	r3, #0
 801d5dc:	9301      	str	r3, [sp, #4]
 801d5de:	2300      	movs	r3, #0
 801d5e0:	9300      	str	r3, [sp, #0]
 801d5e2:	2300      	movs	r3, #0
 801d5e4:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 801d5e8:	4926      	ldr	r1, [pc, #152]	; (801d684 <ur_main+0x120>)
 801d5ea:	4827      	ldr	r0, [pc, #156]	; (801d688 <ur_main+0x124>)
 801d5ec:	f7f3 f915 	bl	801081a <xTaskCreate>
 801d5f0:	6078      	str	r0, [r7, #4]

    if (err != pdPASS) {
 801d5f2:	687b      	ldr	r3, [r7, #4]
 801d5f4:	2b01      	cmp	r3, #1
 801d5f6:	d002      	beq.n	801d5fe <ur_main+0x9a>
        exit(TASK_CREATE_FAILED);
 801d5f8:	2002      	movs	r0, #2
 801d5fa:	f000 fa8f 	bl	801db1c <exit>
    }

    /* create "app_data_init_task" */
    err = xTaskCreate((TaskFunction_t)app_data_init_task, "app_data_init_task", APP_INIT_TASK_STACK_SIZE, NULL,
 801d5fe:	2300      	movs	r3, #0
 801d600:	9301      	str	r3, [sp, #4]
 801d602:	f06f 0302 	mvn.w	r3, #2
 801d606:	9300      	str	r3, [sp, #0]
 801d608:	2300      	movs	r3, #0
 801d60a:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 801d60e:	491f      	ldr	r1, [pc, #124]	; (801d68c <ur_main+0x128>)
 801d610:	481f      	ldr	r0, [pc, #124]	; (801d690 <ur_main+0x12c>)
 801d612:	f7f3 f902 	bl	801081a <xTaskCreate>
 801d616:	6078      	str	r0, [r7, #4]
                      UNIT_TEST_TASK_PRIORITY, NULL);

    if (err != pdPASS) {
 801d618:	687b      	ldr	r3, [r7, #4]
 801d61a:	2b01      	cmp	r3, #1
 801d61c:	d002      	beq.n	801d624 <ur_main+0xc0>

    	exit(TASK_CREATE_FAILED);
 801d61e:	2002      	movs	r0, #2
 801d620:	f000 fa7c 	bl	801db1c <exit>
    }

    /* crate a task's from function "testing_thread". each task, except a member from "stm_test_list_array" */
    for (uint16_t i = 0; i < test_list_size; i++) {
 801d624:	2300      	movs	r3, #0
 801d626:	817b      	strh	r3, [r7, #10]
 801d628:	e01b      	b.n	801d662 <ur_main+0xfe>

        err = xTaskCreate((TaskFunction_t)testing_thread, "test_task", TESTIN_THREAD_STACK_SIZE,
                          &stm_test_list_array[i], UNIT_TEST_TASK_PRIORITY, NULL);
 801d62a:	897a      	ldrh	r2, [r7, #10]
 801d62c:	4613      	mov	r3, r2
 801d62e:	00db      	lsls	r3, r3, #3
 801d630:	1a9b      	subs	r3, r3, r2
 801d632:	009b      	lsls	r3, r3, #2
 801d634:	4a10      	ldr	r2, [pc, #64]	; (801d678 <ur_main+0x114>)
 801d636:	4413      	add	r3, r2
        err = xTaskCreate((TaskFunction_t)testing_thread, "test_task", TESTIN_THREAD_STACK_SIZE,
 801d638:	2200      	movs	r2, #0
 801d63a:	9201      	str	r2, [sp, #4]
 801d63c:	f06f 0202 	mvn.w	r2, #2
 801d640:	9200      	str	r2, [sp, #0]
 801d642:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 801d646:	4913      	ldr	r1, [pc, #76]	; (801d694 <ur_main+0x130>)
 801d648:	4813      	ldr	r0, [pc, #76]	; (801d698 <ur_main+0x134>)
 801d64a:	f7f3 f8e6 	bl	801081a <xTaskCreate>
 801d64e:	6078      	str	r0, [r7, #4]
        if (err != pdPASS) {
 801d650:	687b      	ldr	r3, [r7, #4]
 801d652:	2b01      	cmp	r3, #1
 801d654:	d002      	beq.n	801d65c <ur_main+0xf8>
        	exit(TASK_CREATE_FAILED);
 801d656:	2002      	movs	r0, #2
 801d658:	f000 fa60 	bl	801db1c <exit>
    for (uint16_t i = 0; i < test_list_size; i++) {
 801d65c:	897b      	ldrh	r3, [r7, #10]
 801d65e:	3301      	adds	r3, #1
 801d660:	817b      	strh	r3, [r7, #10]
 801d662:	4b06      	ldr	r3, [pc, #24]	; (801d67c <ur_main+0x118>)
 801d664:	881b      	ldrh	r3, [r3, #0]
 801d666:	897a      	ldrh	r2, [r7, #10]
 801d668:	429a      	cmp	r2, r3
 801d66a:	d3de      	bcc.n	801d62a <ur_main+0xc6>
        }
    }

    /* start freertos */
    vTaskStartScheduler();
 801d66c:	f7f3 faec 	bl	8010c48 <vTaskStartScheduler>
}
 801d670:	bf00      	nop
 801d672:	3710      	adds	r7, #16
 801d674:	46bd      	mov	sp, r7
 801d676:	bd80      	pop	{r7, pc}
 801d678:	200000a0 	.word	0x200000a0
 801d67c:	08022058 	.word	0x08022058
 801d680:	20024204 	.word	0x20024204
 801d684:	080217a8 	.word	0x080217a8
 801d688:	0801d981 	.word	0x0801d981
 801d68c:	080217b4 	.word	0x080217b4
 801d690:	0801d999 	.word	0x0801d999
 801d694:	080217c8 	.word	0x080217c8
 801d698:	0801da95 	.word	0x0801da95

0801d69c <udp_receive_callback>:
 * \param[in]       p: received pocket.
 * \param[in]       addr: sender ip address.
 * \param[in]       addr: sender port number.
 */
void
udp_receive_callback(void* arg, struct udp_pcb* upcb, struct pbuf* p, const ip_addr_t* addr, u16_t port) {
 801d69c:	b580      	push	{r7, lr}
 801d69e:	b086      	sub	sp, #24
 801d6a0:	af00      	add	r7, sp, #0
 801d6a2:	60f8      	str	r0, [r7, #12]
 801d6a4:	60b9      	str	r1, [r7, #8]
 801d6a6:	607a      	str	r2, [r7, #4]
 801d6a8:	603b      	str	r3, [r7, #0]

    unit_tasting_package_t* payload_cast; /* for casting the payload to "unit_tasting_package_t" */
    uint16_t tast_type;                   /* destination port  */

    /* check if pocket is sent to "app_data_init_task"  and if so directing the payload to task */
    if (upcb->local_port == APP_INIT_PORT) {
 801d6aa:	68bb      	ldr	r3, [r7, #8]
 801d6ac:	8a5b      	ldrh	r3, [r3, #18]
 801d6ae:	f24c 3256 	movw	r2, #50006	; 0xc356
 801d6b2:	4293      	cmp	r3, r2
 801d6b4:	d119      	bne.n	801d6ea <udp_receive_callback+0x4e>

        /* copy the sender payload in data structors belonging to the receiving task */
        memcpy(&app_commend, p->payload, p->len);
 801d6b6:	687b      	ldr	r3, [r7, #4]
 801d6b8:	6859      	ldr	r1, [r3, #4]
 801d6ba:	687b      	ldr	r3, [r7, #4]
 801d6bc:	895b      	ldrh	r3, [r3, #10]
 801d6be:	461a      	mov	r2, r3
 801d6c0:	483e      	ldr	r0, [pc, #248]	; (801d7bc <udp_receive_callback+0x120>)
 801d6c2:	f000 fc6e 	bl	801dfa2 <memcpy>

        /* drop the pocket after is copied   */
        pbuf_free(p);
 801d6c6:	6878      	ldr	r0, [r7, #4]
 801d6c8:	f7f6 fb06 	bl	8013cd8 <pbuf_free>

        /* Store the sender information in data structors belonging to the receiving task */
        app_sender_port = port;
 801d6cc:	4a3c      	ldr	r2, [pc, #240]	; (801d7c0 <udp_receive_callback+0x124>)
 801d6ce:	8c3b      	ldrh	r3, [r7, #32]
 801d6d0:	8013      	strh	r3, [r2, #0]
        ip_addr_copy(app_sender_ip, *addr);
 801d6d2:	683b      	ldr	r3, [r7, #0]
 801d6d4:	681b      	ldr	r3, [r3, #0]
 801d6d6:	4a3b      	ldr	r2, [pc, #236]	; (801d7c4 <udp_receive_callback+0x128>)
 801d6d8:	6013      	str	r3, [r2, #0]

        /* start the task */
        xSemaphoreGive(app_init_sem);
 801d6da:	4b3b      	ldr	r3, [pc, #236]	; (801d7c8 <udp_receive_callback+0x12c>)
 801d6dc:	6818      	ldr	r0, [r3, #0]
 801d6de:	2300      	movs	r3, #0
 801d6e0:	2200      	movs	r2, #0
 801d6e2:	2100      	movs	r1, #0
 801d6e4:	f7f2 fa52 	bl	800fb8c <xQueueGenericSend>
        return;
 801d6e8:	e064      	b.n	801d7b4 <udp_receive_callback+0x118>
    } else {

        payload_cast = p->payload; /* cast the payload to  unit_tasting_package_t pointer */
 801d6ea:	687b      	ldr	r3, [r7, #4]
 801d6ec:	685b      	ldr	r3, [r3, #4]
 801d6ee:	617b      	str	r3, [r7, #20]
        tast_type = upcb->local_port
 801d6f0:	68bb      	ldr	r3, [r7, #8]
 801d6f2:	8a5a      	ldrh	r2, [r3, #18]
 801d6f4:	f643 43a9 	movw	r3, #15529	; 0x3ca9
 801d6f8:	4413      	add	r3, r2
 801d6fa:	827b      	strh	r3, [r7, #18]
                    - SERVER_OFFSET_PORT; /* compute and store the task receiving the pocket by the dentation port */

        /* check if the id sent matches the card id */
        if (memcmp(payload_cast->id, this_card_name_and_id.id, ID_SIZE * sizeof(uint32_t)) != 0) {
 801d6fc:	697b      	ldr	r3, [r7, #20]
 801d6fe:	220c      	movs	r2, #12
 801d700:	4932      	ldr	r1, [pc, #200]	; (801d7cc <udp_receive_callback+0x130>)
 801d702:	4618      	mov	r0, r3
 801d704:	f000 fb71 	bl	801ddea <memcmp>
 801d708:	4603      	mov	r3, r0
 801d70a:	2b00      	cmp	r3, #0
 801d70c:	d003      	beq.n	801d716 <udp_receive_callback+0x7a>

            pbuf_free(p);
 801d70e:	6878      	ldr	r0, [r7, #4]
 801d710:	f7f6 fae2 	bl	8013cd8 <pbuf_free>
            return;
 801d714:	e04e      	b.n	801d7b4 <udp_receive_callback+0x118>
        }

        /* Check if we finished with the last packet */
        if (p->len > sizeof(unit_tasting_package_t) || stm_test_list_array[tast_type].test_complete_flag == TEST_RUNNING
 801d716:	687b      	ldr	r3, [r7, #4]
 801d718:	895b      	ldrh	r3, [r3, #10]
 801d71a:	2b72      	cmp	r3, #114	; 0x72
 801d71c:	d80f      	bhi.n	801d73e <udp_receive_callback+0xa2>
 801d71e:	8a7a      	ldrh	r2, [r7, #18]
 801d720:	492b      	ldr	r1, [pc, #172]	; (801d7d0 <udp_receive_callback+0x134>)
 801d722:	4613      	mov	r3, r2
 801d724:	00db      	lsls	r3, r3, #3
 801d726:	1a9b      	subs	r3, r3, r2
 801d728:	009b      	lsls	r3, r3, #2
 801d72a:	440b      	add	r3, r1
 801d72c:	3314      	adds	r3, #20
 801d72e:	781b      	ldrb	r3, [r3, #0]
 801d730:	2b01      	cmp	r3, #1
 801d732:	d004      	beq.n	801d73e <udp_receive_callback+0xa2>
            || tast_type >= test_list_size) {
 801d734:	4b27      	ldr	r3, [pc, #156]	; (801d7d4 <udp_receive_callback+0x138>)
 801d736:	881b      	ldrh	r3, [r3, #0]
 801d738:	8a7a      	ldrh	r2, [r7, #18]
 801d73a:	429a      	cmp	r2, r3
 801d73c:	d303      	bcc.n	801d746 <udp_receive_callback+0xaa>
            /* Drop the packet */
            pbuf_free(p);
 801d73e:	6878      	ldr	r0, [r7, #4]
 801d740:	f7f6 faca 	bl	8013cd8 <pbuf_free>
            return;
 801d744:	e036      	b.n	801d7b4 <udp_receive_callback+0x118>
        }

        /* Store the sender information in data structors belonging to the receiving task */
        ip_addr_copy(stm_test_list_array[tast_type].taskX_pack.dst_ip_addr, *addr);
 801d746:	8a7a      	ldrh	r2, [r7, #18]
 801d748:	683b      	ldr	r3, [r7, #0]
 801d74a:	6819      	ldr	r1, [r3, #0]
 801d74c:	4820      	ldr	r0, [pc, #128]	; (801d7d0 <udp_receive_callback+0x134>)
 801d74e:	4613      	mov	r3, r2
 801d750:	00db      	lsls	r3, r3, #3
 801d752:	1a9b      	subs	r3, r3, r2
 801d754:	009b      	lsls	r3, r3, #2
 801d756:	4403      	add	r3, r0
 801d758:	3308      	adds	r3, #8
 801d75a:	6019      	str	r1, [r3, #0]
        stm_test_list_array[tast_type].taskX_pack.dst_port = port;
 801d75c:	8a7a      	ldrh	r2, [r7, #18]
 801d75e:	491c      	ldr	r1, [pc, #112]	; (801d7d0 <udp_receive_callback+0x134>)
 801d760:	4613      	mov	r3, r2
 801d762:	00db      	lsls	r3, r3, #3
 801d764:	1a9b      	subs	r3, r3, r2
 801d766:	009b      	lsls	r3, r3, #2
 801d768:	440b      	add	r3, r1
 801d76a:	330c      	adds	r3, #12
 801d76c:	8c3a      	ldrh	r2, [r7, #32]
 801d76e:	801a      	strh	r2, [r3, #0]
        stm_test_list_array[tast_type].taskX_pack.p = p;
 801d770:	8a7a      	ldrh	r2, [r7, #18]
 801d772:	4917      	ldr	r1, [pc, #92]	; (801d7d0 <udp_receive_callback+0x134>)
 801d774:	4613      	mov	r3, r2
 801d776:	00db      	lsls	r3, r3, #3
 801d778:	1a9b      	subs	r3, r3, r2
 801d77a:	009b      	lsls	r3, r3, #2
 801d77c:	440b      	add	r3, r1
 801d77e:	3310      	adds	r3, #16
 801d780:	687a      	ldr	r2, [r7, #4]
 801d782:	601a      	str	r2, [r3, #0]

        /* set the tasks test_complete_flag to test running */
        stm_test_list_array[tast_type].test_complete_flag = TEST_RUNNING;
 801d784:	8a7a      	ldrh	r2, [r7, #18]
 801d786:	4912      	ldr	r1, [pc, #72]	; (801d7d0 <udp_receive_callback+0x134>)
 801d788:	4613      	mov	r3, r2
 801d78a:	00db      	lsls	r3, r3, #3
 801d78c:	1a9b      	subs	r3, r3, r2
 801d78e:	009b      	lsls	r3, r3, #2
 801d790:	440b      	add	r3, r1
 801d792:	3314      	adds	r3, #20
 801d794:	2201      	movs	r2, #1
 801d796:	701a      	strb	r2, [r3, #0]

        /* start the task */
        xSemaphoreGive(stm_test_list_array[tast_type].q);
 801d798:	8a7a      	ldrh	r2, [r7, #18]
 801d79a:	490d      	ldr	r1, [pc, #52]	; (801d7d0 <udp_receive_callback+0x134>)
 801d79c:	4613      	mov	r3, r2
 801d79e:	00db      	lsls	r3, r3, #3
 801d7a0:	1a9b      	subs	r3, r3, r2
 801d7a2:	009b      	lsls	r3, r3, #2
 801d7a4:	440b      	add	r3, r1
 801d7a6:	3304      	adds	r3, #4
 801d7a8:	6818      	ldr	r0, [r3, #0]
 801d7aa:	2300      	movs	r3, #0
 801d7ac:	2200      	movs	r2, #0
 801d7ae:	2100      	movs	r1, #0
 801d7b0:	f7f2 f9ec 	bl	800fb8c <xQueueGenericSend>
    }
}
 801d7b4:	3718      	adds	r7, #24
 801d7b6:	46bd      	mov	sp, r7
 801d7b8:	bd80      	pop	{r7, pc}
 801d7ba:	bf00      	nop
 801d7bc:	2002420c 	.word	0x2002420c
 801d7c0:	2002421c 	.word	0x2002421c
 801d7c4:	20024220 	.word	0x20024220
 801d7c8:	20024204 	.word	0x20024204
 801d7cc:	20000030 	.word	0x20000030
 801d7d0:	200000a0 	.word	0x200000a0
 801d7d4:	08022058 	.word	0x08022058

0801d7d8 <send_packet>:
 * \param[in]       ipaddr: ip address to send to
 * \param[in]       port: port number to send to
 * \return          error massage
 */
err_t
send_packet(struct udp_pcb* pcb, const void* payload, u16_t payload_len, const ip_addr_t* ipaddr, u16_t port) {
 801d7d8:	b580      	push	{r7, lr}
 801d7da:	b086      	sub	sp, #24
 801d7dc:	af00      	add	r7, sp, #0
 801d7de:	60f8      	str	r0, [r7, #12]
 801d7e0:	60b9      	str	r1, [r7, #8]
 801d7e2:	603b      	str	r3, [r7, #0]
 801d7e4:	4613      	mov	r3, r2
 801d7e6:	80fb      	strh	r3, [r7, #6]
    err_t err; /* except function error return */
    struct pbuf* p;

    /* allocate a pbuf for the payload */
    p = pbuf_alloc(PBUF_TRANSPORT, payload_len, PBUF_RAM);
 801d7e8:	88fb      	ldrh	r3, [r7, #6]
 801d7ea:	f44f 7220 	mov.w	r2, #640	; 0x280
 801d7ee:	4619      	mov	r1, r3
 801d7f0:	2036      	movs	r0, #54	; 0x36
 801d7f2:	f7f5 ff8d 	bl	8013710 <pbuf_alloc>
 801d7f6:	6178      	str	r0, [r7, #20]
    if (!p) {
 801d7f8:	697b      	ldr	r3, [r7, #20]
 801d7fa:	2b00      	cmp	r3, #0
 801d7fc:	d102      	bne.n	801d804 <send_packet+0x2c>
        /* failed to allocate pbuf*/
        return ERR_MEM;
 801d7fe:	f04f 33ff 	mov.w	r3, #4294967295
 801d802:	e013      	b.n	801d82c <send_packet+0x54>
    }

    /* copy the payload into the pbuf */
    memcpy(p->payload, payload, payload_len);
 801d804:	697b      	ldr	r3, [r7, #20]
 801d806:	685b      	ldr	r3, [r3, #4]
 801d808:	88fa      	ldrh	r2, [r7, #6]
 801d80a:	68b9      	ldr	r1, [r7, #8]
 801d80c:	4618      	mov	r0, r3
 801d80e:	f000 fbc8 	bl	801dfa2 <memcpy>

    /* send the packet */
    err = udp_sendto(pcb, p, ipaddr, port);
 801d812:	8c3b      	ldrh	r3, [r7, #32]
 801d814:	683a      	ldr	r2, [r7, #0]
 801d816:	6979      	ldr	r1, [r7, #20]
 801d818:	68f8      	ldr	r0, [r7, #12]
 801d81a:	f7fc f99f 	bl	8019b5c <udp_sendto>
 801d81e:	4603      	mov	r3, r0
 801d820:	74fb      	strb	r3, [r7, #19]

    /* free the pbuf */
    pbuf_free(p);
 801d822:	6978      	ldr	r0, [r7, #20]
 801d824:	f7f6 fa58 	bl	8013cd8 <pbuf_free>

    return err;
 801d828:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 801d82c:	4618      	mov	r0, r3
 801d82e:	3718      	adds	r7, #24
 801d830:	46bd      	mov	sp, r7
 801d832:	bd80      	pop	{r7, pc}

0801d834 <udpServer_init>:

/**
 * \brief           creating sockets initialising  card uniq id and task's ruining flags
 */
void
udpServer_init(void) {
 801d834:	b590      	push	{r4, r7, lr}
 801d836:	b083      	sub	sp, #12
 801d838:	af00      	add	r7, sp, #0

    err_t err; /* except function error return */
    /* crating sockets for testing tasks  */
    for (uint8_t i = 0; i < test_list_size; i++) {
 801d83a:	2300      	movs	r3, #0
 801d83c:	71fb      	strb	r3, [r7, #7]
 801d83e:	e041      	b.n	801d8c4 <udpServer_init+0x90>

        /* creating udp_pcb */
        stm_test_list_array[i].pcb_and_port_for_test = udp_new();
 801d840:	79fc      	ldrb	r4, [r7, #7]
 801d842:	f7fc fc2b 	bl	801a09c <udp_new>
 801d846:	4602      	mov	r2, r0
 801d848:	4946      	ldr	r1, [pc, #280]	; (801d964 <udpServer_init+0x130>)
 801d84a:	4623      	mov	r3, r4
 801d84c:	00db      	lsls	r3, r3, #3
 801d84e:	1b1b      	subs	r3, r3, r4
 801d850:	009b      	lsls	r3, r3, #2
 801d852:	440b      	add	r3, r1
 801d854:	3318      	adds	r3, #24
 801d856:	601a      	str	r2, [r3, #0]
        /* configuring the udp_pcb,  port number is task array index + SERVER_OFFSET_PORT */
        err = udp_bind(stm_test_list_array[i].pcb_and_port_for_test, IP_ADDR_ANY, SERVER_OFFSET_PORT + i);
 801d858:	79fa      	ldrb	r2, [r7, #7]
 801d85a:	4942      	ldr	r1, [pc, #264]	; (801d964 <udpServer_init+0x130>)
 801d85c:	4613      	mov	r3, r2
 801d85e:	00db      	lsls	r3, r3, #3
 801d860:	1a9b      	subs	r3, r3, r2
 801d862:	009b      	lsls	r3, r3, #2
 801d864:	440b      	add	r3, r1
 801d866:	3318      	adds	r3, #24
 801d868:	6818      	ldr	r0, [r3, #0]
 801d86a:	79fb      	ldrb	r3, [r7, #7]
 801d86c:	b29a      	uxth	r2, r3
 801d86e:	4b3e      	ldr	r3, [pc, #248]	; (801d968 <udpServer_init+0x134>)
 801d870:	4413      	add	r3, r2
 801d872:	b29b      	uxth	r3, r3
 801d874:	461a      	mov	r2, r3
 801d876:	493d      	ldr	r1, [pc, #244]	; (801d96c <udpServer_init+0x138>)
 801d878:	f7fc fb26 	bl	8019ec8 <udp_bind>
 801d87c:	4603      	mov	r3, r0
 801d87e:	717b      	strb	r3, [r7, #5]

        /* configuring the udp_pcb  receive callback function to udp_receive_callback   */
        if (err == ERR_OK) {
 801d880:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801d884:	2b00      	cmp	r3, #0
 801d886:	d10e      	bne.n	801d8a6 <udpServer_init+0x72>
            udp_recv(stm_test_list_array[i].pcb_and_port_for_test, udp_receive_callback, NULL);
 801d888:	79fa      	ldrb	r2, [r7, #7]
 801d88a:	4936      	ldr	r1, [pc, #216]	; (801d964 <udpServer_init+0x130>)
 801d88c:	4613      	mov	r3, r2
 801d88e:	00db      	lsls	r3, r3, #3
 801d890:	1a9b      	subs	r3, r3, r2
 801d892:	009b      	lsls	r3, r3, #2
 801d894:	440b      	add	r3, r1
 801d896:	3318      	adds	r3, #24
 801d898:	681b      	ldr	r3, [r3, #0]
 801d89a:	2200      	movs	r2, #0
 801d89c:	4934      	ldr	r1, [pc, #208]	; (801d970 <udpServer_init+0x13c>)
 801d89e:	4618      	mov	r0, r3
 801d8a0:	f7fc fb9a 	bl	8019fd8 <udp_recv>
 801d8a4:	e00b      	b.n	801d8be <udpServer_init+0x8a>
        } else {
            udp_remove(stm_test_list_array[i].pcb_and_port_for_test);
 801d8a6:	79fa      	ldrb	r2, [r7, #7]
 801d8a8:	492e      	ldr	r1, [pc, #184]	; (801d964 <udpServer_init+0x130>)
 801d8aa:	4613      	mov	r3, r2
 801d8ac:	00db      	lsls	r3, r3, #3
 801d8ae:	1a9b      	subs	r3, r3, r2
 801d8b0:	009b      	lsls	r3, r3, #2
 801d8b2:	440b      	add	r3, r1
 801d8b4:	3318      	adds	r3, #24
 801d8b6:	681b      	ldr	r3, [r3, #0]
 801d8b8:	4618      	mov	r0, r3
 801d8ba:	f7fc fbad 	bl	801a018 <udp_remove>
    for (uint8_t i = 0; i < test_list_size; i++) {
 801d8be:	79fb      	ldrb	r3, [r7, #7]
 801d8c0:	3301      	adds	r3, #1
 801d8c2:	71fb      	strb	r3, [r7, #7]
 801d8c4:	79fb      	ldrb	r3, [r7, #7]
 801d8c6:	b29a      	uxth	r2, r3
 801d8c8:	4b2a      	ldr	r3, [pc, #168]	; (801d974 <udpServer_init+0x140>)
 801d8ca:	881b      	ldrh	r3, [r3, #0]
 801d8cc:	429a      	cmp	r2, r3
 801d8ce:	d3b7      	bcc.n	801d840 <udpServer_init+0xc>
        }
    }

    /* crating a udp_pcb for the app_data_init_task  */
    app_port = udp_new();
 801d8d0:	f7fc fbe4 	bl	801a09c <udp_new>
 801d8d4:	4603      	mov	r3, r0
 801d8d6:	4a28      	ldr	r2, [pc, #160]	; (801d978 <udpServer_init+0x144>)
 801d8d8:	6013      	str	r3, [r2, #0]

    err = udp_bind(app_port, IP_ADDR_ANY, APP_INIT_PORT);
 801d8da:	4b27      	ldr	r3, [pc, #156]	; (801d978 <udpServer_init+0x144>)
 801d8dc:	681b      	ldr	r3, [r3, #0]
 801d8de:	f24c 3256 	movw	r2, #50006	; 0xc356
 801d8e2:	4922      	ldr	r1, [pc, #136]	; (801d96c <udpServer_init+0x138>)
 801d8e4:	4618      	mov	r0, r3
 801d8e6:	f7fc faef 	bl	8019ec8 <udp_bind>
 801d8ea:	4603      	mov	r3, r0
 801d8ec:	717b      	strb	r3, [r7, #5]

    /* configuring the udp_pcb  receive callback function to udp_receive_callback   */
    if (err == ERR_OK) {
 801d8ee:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801d8f2:	2b00      	cmp	r3, #0
 801d8f4:	d107      	bne.n	801d906 <udpServer_init+0xd2>
        udp_recv(app_port, udp_receive_callback, NULL);
 801d8f6:	4b20      	ldr	r3, [pc, #128]	; (801d978 <udpServer_init+0x144>)
 801d8f8:	681b      	ldr	r3, [r3, #0]
 801d8fa:	2200      	movs	r2, #0
 801d8fc:	491c      	ldr	r1, [pc, #112]	; (801d970 <udpServer_init+0x13c>)
 801d8fe:	4618      	mov	r0, r3
 801d900:	f7fc fb6a 	bl	8019fd8 <udp_recv>
 801d904:	e004      	b.n	801d910 <udpServer_init+0xdc>
    } else {
        udp_remove(app_port);
 801d906:	4b1c      	ldr	r3, [pc, #112]	; (801d978 <udpServer_init+0x144>)
 801d908:	681b      	ldr	r3, [r3, #0]
 801d90a:	4618      	mov	r0, r3
 801d90c:	f7fc fb84 	bl	801a018 <udp_remove>
    }

    /* setting test_complete_flag to TAST_COMLITE  */
    for (uint8_t i = 0; i < test_list_size; i++) {
 801d910:	2300      	movs	r3, #0
 801d912:	71bb      	strb	r3, [r7, #6]
 801d914:	e00c      	b.n	801d930 <udpServer_init+0xfc>

        stm_test_list_array[i].test_complete_flag = TEST_COMPLETE;
 801d916:	79ba      	ldrb	r2, [r7, #6]
 801d918:	4912      	ldr	r1, [pc, #72]	; (801d964 <udpServer_init+0x130>)
 801d91a:	4613      	mov	r3, r2
 801d91c:	00db      	lsls	r3, r3, #3
 801d91e:	1a9b      	subs	r3, r3, r2
 801d920:	009b      	lsls	r3, r3, #2
 801d922:	440b      	add	r3, r1
 801d924:	3314      	adds	r3, #20
 801d926:	2200      	movs	r2, #0
 801d928:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < test_list_size; i++) {
 801d92a:	79bb      	ldrb	r3, [r7, #6]
 801d92c:	3301      	adds	r3, #1
 801d92e:	71bb      	strb	r3, [r7, #6]
 801d930:	79bb      	ldrb	r3, [r7, #6]
 801d932:	b29a      	uxth	r2, r3
 801d934:	4b0f      	ldr	r3, [pc, #60]	; (801d974 <udpServer_init+0x140>)
 801d936:	881b      	ldrh	r3, [r3, #0]
 801d938:	429a      	cmp	r2, r3
 801d93a:	d3ec      	bcc.n	801d916 <udpServer_init+0xe2>
    }

    /* get card uniq id */
    this_card_name_and_id.id[0] = HAL_GetUIDw0();
 801d93c:	f7e5 fdba 	bl	80034b4 <HAL_GetUIDw0>
 801d940:	4603      	mov	r3, r0
 801d942:	4a0e      	ldr	r2, [pc, #56]	; (801d97c <udpServer_init+0x148>)
 801d944:	6013      	str	r3, [r2, #0]
    this_card_name_and_id.id[1] = HAL_GetUIDw1();
 801d946:	f7e5 fdc1 	bl	80034cc <HAL_GetUIDw1>
 801d94a:	4603      	mov	r3, r0
 801d94c:	4a0b      	ldr	r2, [pc, #44]	; (801d97c <udpServer_init+0x148>)
 801d94e:	6053      	str	r3, [r2, #4]
    this_card_name_and_id.id[2] = HAL_GetUIDw2();
 801d950:	f7e5 fdc8 	bl	80034e4 <HAL_GetUIDw2>
 801d954:	4603      	mov	r3, r0
 801d956:	4a09      	ldr	r2, [pc, #36]	; (801d97c <udpServer_init+0x148>)
 801d958:	6093      	str	r3, [r2, #8]
}
 801d95a:	bf00      	nop
 801d95c:	370c      	adds	r7, #12
 801d95e:	46bd      	mov	sp, r7
 801d960:	bd90      	pop	{r4, r7, pc}
 801d962:	bf00      	nop
 801d964:	200000a0 	.word	0x200000a0
 801d968:	ffffc357 	.word	0xffffc357
 801d96c:	08021910 	.word	0x08021910
 801d970:	0801d69d 	.word	0x0801d69d
 801d974:	08022058 	.word	0x08022058
 801d978:	20024208 	.word	0x20024208
 801d97c:	20000030 	.word	0x20000030

0801d980 <begin_task>:
 * \brief           task executed at program startup.
 *                  initialising the server.
 * \param[in]       arg: NULL
 */
void
begin_task(void const* arg) {
 801d980:	b580      	push	{r7, lr}
 801d982:	b082      	sub	sp, #8
 801d984:	af00      	add	r7, sp, #0
 801d986:	6078      	str	r0, [r7, #4]

    MX_LWIP_Init();
 801d988:	f7f0 fd42 	bl	800e410 <MX_LWIP_Init>
    udpServer_init();
 801d98c:	f7ff ff52 	bl	801d834 <udpServer_init>

    for (;;) {

        osDelay(1);
 801d990:	2001      	movs	r0, #1
 801d992:	f7f1 fc6a 	bl	800f26a <osDelay>
 801d996:	e7fb      	b.n	801d990 <begin_task+0x10>

0801d998 <app_data_init_task>:
 *                  excepting form linux pc  request of card and test's information and send the information
 *                  to linux pc app
 * \param[in]       arg: NULL
 */
void
app_data_init_task(void* arg) {
 801d998:	b580      	push	{r7, lr}
 801d99a:	b086      	sub	sp, #24
 801d99c:	af02      	add	r7, sp, #8
 801d99e:	6078      	str	r0, [r7, #4]
    err_t check; /* error return check */

    for (;;) {

        /* semaphore will be released and received pocket will be directed from  udp_receive_callback when a pocket is sent to the udp_pcb port belonging to this task*/
        if (xSemaphoreTake(app_init_sem, portMAX_DELAY) == pdFALSE) {
 801d9a0:	4b34      	ldr	r3, [pc, #208]	; (801da74 <app_data_init_task+0xdc>)
 801d9a2:	681b      	ldr	r3, [r3, #0]
 801d9a4:	f04f 31ff 	mov.w	r1, #4294967295
 801d9a8:	4618      	mov	r0, r3
 801d9aa:	f7f2 fc11 	bl	80101d0 <xQueueSemaphoreTake>
 801d9ae:	4603      	mov	r3, r0
 801d9b0:	2b00      	cmp	r3, #0
 801d9b2:	d054      	beq.n	801da5e <app_data_init_task+0xc6>
            continue;
        }

        /* if the sender asking for card name and uniq id */
        if (app_commend.type == ID_REQUEST) {
 801d9b4:	4b30      	ldr	r3, [pc, #192]	; (801da78 <app_data_init_task+0xe0>)
 801d9b6:	7b1b      	ldrb	r3, [r3, #12]
 801d9b8:	2b00      	cmp	r3, #0
 801d9ba:	d112      	bne.n	801d9e2 <app_data_init_task+0x4a>

            check = send_packet(app_port, &this_card_name_and_id, sizeof(this_card_name_and_id), &app_sender_ip,
 801d9bc:	4b2f      	ldr	r3, [pc, #188]	; (801da7c <app_data_init_task+0xe4>)
 801d9be:	6818      	ldr	r0, [r3, #0]
 801d9c0:	4b2f      	ldr	r3, [pc, #188]	; (801da80 <app_data_init_task+0xe8>)
 801d9c2:	881b      	ldrh	r3, [r3, #0]
 801d9c4:	9300      	str	r3, [sp, #0]
 801d9c6:	4b2f      	ldr	r3, [pc, #188]	; (801da84 <app_data_init_task+0xec>)
 801d9c8:	2270      	movs	r2, #112	; 0x70
 801d9ca:	492f      	ldr	r1, [pc, #188]	; (801da88 <app_data_init_task+0xf0>)
 801d9cc:	f7ff ff04 	bl	801d7d8 <send_packet>
 801d9d0:	4603      	mov	r3, r0
 801d9d2:	73fb      	strb	r3, [r7, #15]
                                app_sender_port);

            if (check != ERR_OK) {
 801d9d4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d9d8:	2b00      	cmp	r3, #0
 801d9da:	d042      	beq.n	801da62 <app_data_init_task+0xca>

            	exit(UDP_SEND_FAILED);
 801d9dc:	2003      	movs	r0, #3
 801d9de:	f000 f89d 	bl	801db1c <exit>
            }

            continue;
        }
        /* check if the id sent matches the card id */
        if (memcmp(app_commend.id, this_card_name_and_id.id, ID_SIZE * sizeof(uint32_t)) != 0) {
 801d9e2:	220c      	movs	r2, #12
 801d9e4:	4928      	ldr	r1, [pc, #160]	; (801da88 <app_data_init_task+0xf0>)
 801d9e6:	4824      	ldr	r0, [pc, #144]	; (801da78 <app_data_init_task+0xe0>)
 801d9e8:	f000 f9ff 	bl	801ddea <memcmp>
 801d9ec:	4603      	mov	r3, r0
 801d9ee:	2b00      	cmp	r3, #0
 801d9f0:	d139      	bne.n	801da66 <app_data_init_task+0xce>

            continue;
        }

        /* check witch request was sent and execute it */
        switch (app_commend.type) {
 801d9f2:	4b21      	ldr	r3, [pc, #132]	; (801da78 <app_data_init_task+0xe0>)
 801d9f4:	7b1b      	ldrb	r3, [r3, #12]
 801d9f6:	2b01      	cmp	r3, #1
 801d9f8:	d002      	beq.n	801da00 <app_data_init_task+0x68>
 801d9fa:	2b02      	cmp	r3, #2
 801d9fc:	d013      	beq.n	801da26 <app_data_init_task+0x8e>
 801d9fe:	e037      	b.n	801da70 <app_data_init_task+0xd8>

                /* if requesting for number of tests */
            case LIST_SIZE_REQUEST:

                /* send number of tests */
                check = send_packet(app_port, &pc_test_list_size, sizeof(pc_test_list_size), &app_sender_ip,
 801da00:	4b1e      	ldr	r3, [pc, #120]	; (801da7c <app_data_init_task+0xe4>)
 801da02:	6818      	ldr	r0, [r3, #0]
 801da04:	4b1e      	ldr	r3, [pc, #120]	; (801da80 <app_data_init_task+0xe8>)
 801da06:	881b      	ldrh	r3, [r3, #0]
 801da08:	9300      	str	r3, [sp, #0]
 801da0a:	4b1e      	ldr	r3, [pc, #120]	; (801da84 <app_data_init_task+0xec>)
 801da0c:	2202      	movs	r2, #2
 801da0e:	491f      	ldr	r1, [pc, #124]	; (801da8c <app_data_init_task+0xf4>)
 801da10:	f7ff fee2 	bl	801d7d8 <send_packet>
 801da14:	4603      	mov	r3, r0
 801da16:	73fb      	strb	r3, [r7, #15]
                                    app_sender_port);

                if (check != ERR_OK) {
 801da18:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801da1c:	2b00      	cmp	r3, #0
 801da1e:	d024      	beq.n	801da6a <app_data_init_task+0xd2>

                	exit(UDP_SEND_FAILED);
 801da20:	2003      	movs	r0, #3
 801da22:	f000 f87b 	bl	801db1c <exit>

                /* if requesting for test list member */
            case LIST_MEMBER_REQUEST:

                /* send test list member */
                check = send_packet(app_port, &pc_test_list_array[app_commend.list_index],
 801da26:	4b15      	ldr	r3, [pc, #84]	; (801da7c <app_data_init_task+0xe4>)
 801da28:	6818      	ldr	r0, [r3, #0]
 801da2a:	4b13      	ldr	r3, [pc, #76]	; (801da78 <app_data_init_task+0xe0>)
 801da2c:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 801da30:	b29b      	uxth	r3, r3
 801da32:	461a      	mov	r2, r3
 801da34:	2366      	movs	r3, #102	; 0x66
 801da36:	fb02 f303 	mul.w	r3, r2, r3
 801da3a:	4a15      	ldr	r2, [pc, #84]	; (801da90 <app_data_init_task+0xf8>)
 801da3c:	1899      	adds	r1, r3, r2
 801da3e:	4b10      	ldr	r3, [pc, #64]	; (801da80 <app_data_init_task+0xe8>)
 801da40:	881b      	ldrh	r3, [r3, #0]
 801da42:	9300      	str	r3, [sp, #0]
 801da44:	4b0f      	ldr	r3, [pc, #60]	; (801da84 <app_data_init_task+0xec>)
 801da46:	2266      	movs	r2, #102	; 0x66
 801da48:	f7ff fec6 	bl	801d7d8 <send_packet>
 801da4c:	4603      	mov	r3, r0
 801da4e:	73fb      	strb	r3, [r7, #15]
                                    sizeof(linux_app_test_setting_t), &app_sender_ip, app_sender_port);

                if (check != ERR_OK) {
 801da50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801da54:	2b00      	cmp	r3, #0
 801da56:	d00a      	beq.n	801da6e <app_data_init_task+0xd6>

                	exit(UDP_SEND_FAILED);
 801da58:	2003      	movs	r0, #3
 801da5a:	f000 f85f 	bl	801db1c <exit>
            continue;
 801da5e:	bf00      	nop
 801da60:	e79e      	b.n	801d9a0 <app_data_init_task+0x8>
            continue;
 801da62:	bf00      	nop
 801da64:	e79c      	b.n	801d9a0 <app_data_init_task+0x8>
            continue;
 801da66:	bf00      	nop
 801da68:	e79a      	b.n	801d9a0 <app_data_init_task+0x8>
                break;
 801da6a:	bf00      	nop
 801da6c:	e798      	b.n	801d9a0 <app_data_init_task+0x8>
                }
                break;
 801da6e:	bf00      	nop
        if (xSemaphoreTake(app_init_sem, portMAX_DELAY) == pdFALSE) {
 801da70:	e796      	b.n	801d9a0 <app_data_init_task+0x8>
 801da72:	bf00      	nop
 801da74:	20024204 	.word	0x20024204
 801da78:	2002420c 	.word	0x2002420c
 801da7c:	20024208 	.word	0x20024208
 801da80:	2002421c 	.word	0x2002421c
 801da84:	20024220 	.word	0x20024220
 801da88:	20000030 	.word	0x20000030
 801da8c:	0802205a 	.word	0x0802205a
 801da90:	0802192c 	.word	0x0802192c

0801da94 <testing_thread>:
 * \param[in]       arg: for each task starting the function, this function except test_func_t instants created by the developer,
 *                  in "stm_test_list_array".
 *                  also containing test function written  by the developer of hardware specific test, code
 */
void
testing_thread(void const* arg) {
 801da94:	b590      	push	{r4, r7, lr}
 801da96:	b089      	sub	sp, #36	; 0x24
 801da98:	af02      	add	r7, sp, #8
 801da9a:	6078      	str	r0, [r7, #4]

    err_t check;                                    /* error return check */
    test_func_t* thread_packeg = (test_func_t*)arg; /* for casting arg into a test_func_t pointer */
 801da9c:	687b      	ldr	r3, [r7, #4]
 801da9e:	617b      	str	r3, [r7, #20]
    uint8_t* data;                          /* will point to data for testing */

    for (;;) {

        /* semaphore will be released and received pocket will be directed from  udp_receive_callback when a pocket is sent to the udp_pcb port belonging to that task*/
        if (xSemaphoreTake(thread_packeg->q, portMAX_DELAY) == pdFALSE) {
 801daa0:	697b      	ldr	r3, [r7, #20]
 801daa2:	685b      	ldr	r3, [r3, #4]
 801daa4:	f04f 31ff 	mov.w	r1, #4294967295
 801daa8:	4618      	mov	r0, r3
 801daaa:	f7f2 fb91 	bl	80101d0 <xQueueSemaphoreTake>
 801daae:	4603      	mov	r3, r0
 801dab0:	2b00      	cmp	r3, #0
 801dab2:	d030      	beq.n	801db16 <testing_thread+0x82>
            continue;
        }

        uint_test_cast = thread_packeg->taskX_pack.p->payload;
 801dab4:	697b      	ldr	r3, [r7, #20]
 801dab6:	691b      	ldr	r3, [r3, #16]
 801dab8:	685b      	ldr	r3, [r3, #4]
 801daba:	613b      	str	r3, [r7, #16]
        data = uint_test_cast->data;
 801dabc:	693b      	ldr	r3, [r7, #16]
 801dabe:	330d      	adds	r3, #13
 801dac0:	60fb      	str	r3, [r7, #12]
        /* peripheral   tx to rx call the developer written, test function */
        thread_packeg->task_ptr(data, MAX_BUF_LEN, &thread_packeg->q, uint_test_cast->request,
 801dac2:	697b      	ldr	r3, [r7, #20]
 801dac4:	681c      	ldr	r4, [r3, #0]
 801dac6:	697b      	ldr	r3, [r7, #20]
 801dac8:	1d1a      	adds	r2, r3, #4
 801daca:	693b      	ldr	r3, [r7, #16]
 801dacc:	7b19      	ldrb	r1, [r3, #12]
 801dace:	693b      	ldr	r3, [r7, #16]
 801dad0:	3371      	adds	r3, #113	; 0x71
 801dad2:	9300      	str	r3, [sp, #0]
 801dad4:	460b      	mov	r3, r1
 801dad6:	2164      	movs	r1, #100	; 0x64
 801dad8:	68f8      	ldr	r0, [r7, #12]
 801dada:	47a0      	blx	r4
                                &uint_test_cast->error_report);

        /* send back the data to pc after being tested */
        check = udp_sendto(thread_packeg->pcb_and_port_for_test, thread_packeg->taskX_pack.p,
 801dadc:	697b      	ldr	r3, [r7, #20]
 801dade:	6998      	ldr	r0, [r3, #24]
 801dae0:	697b      	ldr	r3, [r7, #20]
 801dae2:	6919      	ldr	r1, [r3, #16]
                           &thread_packeg->taskX_pack.dst_ip_addr, thread_packeg->taskX_pack.dst_port);
 801dae4:	697b      	ldr	r3, [r7, #20]
 801dae6:	f103 0208 	add.w	r2, r3, #8
        check = udp_sendto(thread_packeg->pcb_and_port_for_test, thread_packeg->taskX_pack.p,
 801daea:	697b      	ldr	r3, [r7, #20]
 801daec:	899b      	ldrh	r3, [r3, #12]
 801daee:	f7fc f835 	bl	8019b5c <udp_sendto>
 801daf2:	4603      	mov	r3, r0
 801daf4:	72fb      	strb	r3, [r7, #11]

        if (check != ERR_OK) {
 801daf6:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801dafa:	2b00      	cmp	r3, #0
 801dafc:	d002      	beq.n	801db04 <testing_thread+0x70>

            exit(UDP_SEND_FAILED);
 801dafe:	2003      	movs	r0, #3
 801db00:	f000 f80c 	bl	801db1c <exit>
        }
        /* free pbuf received ofter being sent */
        pbuf_free(thread_packeg->taskX_pack.p);
 801db04:	697b      	ldr	r3, [r7, #20]
 801db06:	691b      	ldr	r3, [r3, #16]
 801db08:	4618      	mov	r0, r3
 801db0a:	f7f6 f8e5 	bl	8013cd8 <pbuf_free>

        /* indicate to  udp_receive_callback that task is finished  */
        thread_packeg->test_complete_flag = TEST_COMPLETE;
 801db0e:	697b      	ldr	r3, [r7, #20]
 801db10:	2200      	movs	r2, #0
 801db12:	751a      	strb	r2, [r3, #20]
 801db14:	e7c4      	b.n	801daa0 <testing_thread+0xc>
            continue;
 801db16:	bf00      	nop
        if (xSemaphoreTake(thread_packeg->q, portMAX_DELAY) == pdFALSE) {
 801db18:	e7c2      	b.n	801daa0 <testing_thread+0xc>
	...

0801db1c <exit>:
 801db1c:	b508      	push	{r3, lr}
 801db1e:	4b06      	ldr	r3, [pc, #24]	; (801db38 <exit+0x1c>)
 801db20:	4604      	mov	r4, r0
 801db22:	b113      	cbz	r3, 801db2a <exit+0xe>
 801db24:	2100      	movs	r1, #0
 801db26:	f3af 8000 	nop.w
 801db2a:	4b04      	ldr	r3, [pc, #16]	; (801db3c <exit+0x20>)
 801db2c:	681b      	ldr	r3, [r3, #0]
 801db2e:	b103      	cbz	r3, 801db32 <exit+0x16>
 801db30:	4798      	blx	r3
 801db32:	4620      	mov	r0, r4
 801db34:	f7e4 fc04 	bl	8002340 <_exit>
 801db38:	00000000 	.word	0x00000000
 801db3c:	2002435c 	.word	0x2002435c

0801db40 <rand>:
 801db40:	4b16      	ldr	r3, [pc, #88]	; (801db9c <rand+0x5c>)
 801db42:	b510      	push	{r4, lr}
 801db44:	681c      	ldr	r4, [r3, #0]
 801db46:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801db48:	b9b3      	cbnz	r3, 801db78 <rand+0x38>
 801db4a:	2018      	movs	r0, #24
 801db4c:	f000 faa2 	bl	801e094 <malloc>
 801db50:	4602      	mov	r2, r0
 801db52:	6320      	str	r0, [r4, #48]	; 0x30
 801db54:	b920      	cbnz	r0, 801db60 <rand+0x20>
 801db56:	4b12      	ldr	r3, [pc, #72]	; (801dba0 <rand+0x60>)
 801db58:	4812      	ldr	r0, [pc, #72]	; (801dba4 <rand+0x64>)
 801db5a:	2152      	movs	r1, #82	; 0x52
 801db5c:	f000 fa30 	bl	801dfc0 <__assert_func>
 801db60:	4911      	ldr	r1, [pc, #68]	; (801dba8 <rand+0x68>)
 801db62:	4b12      	ldr	r3, [pc, #72]	; (801dbac <rand+0x6c>)
 801db64:	e9c0 1300 	strd	r1, r3, [r0]
 801db68:	4b11      	ldr	r3, [pc, #68]	; (801dbb0 <rand+0x70>)
 801db6a:	6083      	str	r3, [r0, #8]
 801db6c:	230b      	movs	r3, #11
 801db6e:	8183      	strh	r3, [r0, #12]
 801db70:	2100      	movs	r1, #0
 801db72:	2001      	movs	r0, #1
 801db74:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801db78:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801db7a:	480e      	ldr	r0, [pc, #56]	; (801dbb4 <rand+0x74>)
 801db7c:	690b      	ldr	r3, [r1, #16]
 801db7e:	694c      	ldr	r4, [r1, #20]
 801db80:	4a0d      	ldr	r2, [pc, #52]	; (801dbb8 <rand+0x78>)
 801db82:	4358      	muls	r0, r3
 801db84:	fb02 0004 	mla	r0, r2, r4, r0
 801db88:	fba3 3202 	umull	r3, r2, r3, r2
 801db8c:	3301      	adds	r3, #1
 801db8e:	eb40 0002 	adc.w	r0, r0, r2
 801db92:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801db96:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801db9a:	bd10      	pop	{r4, pc}
 801db9c:	200001a0 	.word	0x200001a0
 801dba0:	0802205c 	.word	0x0802205c
 801dba4:	08022073 	.word	0x08022073
 801dba8:	abcd330e 	.word	0xabcd330e
 801dbac:	e66d1234 	.word	0xe66d1234
 801dbb0:	0005deec 	.word	0x0005deec
 801dbb4:	5851f42d 	.word	0x5851f42d
 801dbb8:	4c957f2d 	.word	0x4c957f2d

0801dbbc <std>:
 801dbbc:	2300      	movs	r3, #0
 801dbbe:	b510      	push	{r4, lr}
 801dbc0:	4604      	mov	r4, r0
 801dbc2:	e9c0 3300 	strd	r3, r3, [r0]
 801dbc6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801dbca:	6083      	str	r3, [r0, #8]
 801dbcc:	8181      	strh	r1, [r0, #12]
 801dbce:	6643      	str	r3, [r0, #100]	; 0x64
 801dbd0:	81c2      	strh	r2, [r0, #14]
 801dbd2:	6183      	str	r3, [r0, #24]
 801dbd4:	4619      	mov	r1, r3
 801dbd6:	2208      	movs	r2, #8
 801dbd8:	305c      	adds	r0, #92	; 0x5c
 801dbda:	f000 f916 	bl	801de0a <memset>
 801dbde:	4b0d      	ldr	r3, [pc, #52]	; (801dc14 <std+0x58>)
 801dbe0:	6263      	str	r3, [r4, #36]	; 0x24
 801dbe2:	4b0d      	ldr	r3, [pc, #52]	; (801dc18 <std+0x5c>)
 801dbe4:	62a3      	str	r3, [r4, #40]	; 0x28
 801dbe6:	4b0d      	ldr	r3, [pc, #52]	; (801dc1c <std+0x60>)
 801dbe8:	62e3      	str	r3, [r4, #44]	; 0x2c
 801dbea:	4b0d      	ldr	r3, [pc, #52]	; (801dc20 <std+0x64>)
 801dbec:	6323      	str	r3, [r4, #48]	; 0x30
 801dbee:	4b0d      	ldr	r3, [pc, #52]	; (801dc24 <std+0x68>)
 801dbf0:	6224      	str	r4, [r4, #32]
 801dbf2:	429c      	cmp	r4, r3
 801dbf4:	d006      	beq.n	801dc04 <std+0x48>
 801dbf6:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801dbfa:	4294      	cmp	r4, r2
 801dbfc:	d002      	beq.n	801dc04 <std+0x48>
 801dbfe:	33d0      	adds	r3, #208	; 0xd0
 801dc00:	429c      	cmp	r4, r3
 801dc02:	d105      	bne.n	801dc10 <std+0x54>
 801dc04:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801dc08:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dc0c:	f000 b9c6 	b.w	801df9c <__retarget_lock_init_recursive>
 801dc10:	bd10      	pop	{r4, pc}
 801dc12:	bf00      	nop
 801dc14:	0801dd65 	.word	0x0801dd65
 801dc18:	0801dd87 	.word	0x0801dd87
 801dc1c:	0801ddbf 	.word	0x0801ddbf
 801dc20:	0801dde3 	.word	0x0801dde3
 801dc24:	20024224 	.word	0x20024224

0801dc28 <stdio_exit_handler>:
 801dc28:	4a02      	ldr	r2, [pc, #8]	; (801dc34 <stdio_exit_handler+0xc>)
 801dc2a:	4903      	ldr	r1, [pc, #12]	; (801dc38 <stdio_exit_handler+0x10>)
 801dc2c:	4803      	ldr	r0, [pc, #12]	; (801dc3c <stdio_exit_handler+0x14>)
 801dc2e:	f000 b869 	b.w	801dd04 <_fwalk_sglue>
 801dc32:	bf00      	nop
 801dc34:	20000148 	.word	0x20000148
 801dc38:	0801e8b1 	.word	0x0801e8b1
 801dc3c:	20000154 	.word	0x20000154

0801dc40 <cleanup_stdio>:
 801dc40:	6841      	ldr	r1, [r0, #4]
 801dc42:	4b0c      	ldr	r3, [pc, #48]	; (801dc74 <cleanup_stdio+0x34>)
 801dc44:	4299      	cmp	r1, r3
 801dc46:	b510      	push	{r4, lr}
 801dc48:	4604      	mov	r4, r0
 801dc4a:	d001      	beq.n	801dc50 <cleanup_stdio+0x10>
 801dc4c:	f000 fe30 	bl	801e8b0 <_fflush_r>
 801dc50:	68a1      	ldr	r1, [r4, #8]
 801dc52:	4b09      	ldr	r3, [pc, #36]	; (801dc78 <cleanup_stdio+0x38>)
 801dc54:	4299      	cmp	r1, r3
 801dc56:	d002      	beq.n	801dc5e <cleanup_stdio+0x1e>
 801dc58:	4620      	mov	r0, r4
 801dc5a:	f000 fe29 	bl	801e8b0 <_fflush_r>
 801dc5e:	68e1      	ldr	r1, [r4, #12]
 801dc60:	4b06      	ldr	r3, [pc, #24]	; (801dc7c <cleanup_stdio+0x3c>)
 801dc62:	4299      	cmp	r1, r3
 801dc64:	d004      	beq.n	801dc70 <cleanup_stdio+0x30>
 801dc66:	4620      	mov	r0, r4
 801dc68:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dc6c:	f000 be20 	b.w	801e8b0 <_fflush_r>
 801dc70:	bd10      	pop	{r4, pc}
 801dc72:	bf00      	nop
 801dc74:	20024224 	.word	0x20024224
 801dc78:	2002428c 	.word	0x2002428c
 801dc7c:	200242f4 	.word	0x200242f4

0801dc80 <global_stdio_init.part.0>:
 801dc80:	b510      	push	{r4, lr}
 801dc82:	4b0b      	ldr	r3, [pc, #44]	; (801dcb0 <global_stdio_init.part.0+0x30>)
 801dc84:	4c0b      	ldr	r4, [pc, #44]	; (801dcb4 <global_stdio_init.part.0+0x34>)
 801dc86:	4a0c      	ldr	r2, [pc, #48]	; (801dcb8 <global_stdio_init.part.0+0x38>)
 801dc88:	601a      	str	r2, [r3, #0]
 801dc8a:	4620      	mov	r0, r4
 801dc8c:	2200      	movs	r2, #0
 801dc8e:	2104      	movs	r1, #4
 801dc90:	f7ff ff94 	bl	801dbbc <std>
 801dc94:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801dc98:	2201      	movs	r2, #1
 801dc9a:	2109      	movs	r1, #9
 801dc9c:	f7ff ff8e 	bl	801dbbc <std>
 801dca0:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801dca4:	2202      	movs	r2, #2
 801dca6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dcaa:	2112      	movs	r1, #18
 801dcac:	f7ff bf86 	b.w	801dbbc <std>
 801dcb0:	2002435c 	.word	0x2002435c
 801dcb4:	20024224 	.word	0x20024224
 801dcb8:	0801dc29 	.word	0x0801dc29

0801dcbc <__sfp_lock_acquire>:
 801dcbc:	4801      	ldr	r0, [pc, #4]	; (801dcc4 <__sfp_lock_acquire+0x8>)
 801dcbe:	f000 b96e 	b.w	801df9e <__retarget_lock_acquire_recursive>
 801dcc2:	bf00      	nop
 801dcc4:	20024365 	.word	0x20024365

0801dcc8 <__sfp_lock_release>:
 801dcc8:	4801      	ldr	r0, [pc, #4]	; (801dcd0 <__sfp_lock_release+0x8>)
 801dcca:	f000 b969 	b.w	801dfa0 <__retarget_lock_release_recursive>
 801dcce:	bf00      	nop
 801dcd0:	20024365 	.word	0x20024365

0801dcd4 <__sinit>:
 801dcd4:	b510      	push	{r4, lr}
 801dcd6:	4604      	mov	r4, r0
 801dcd8:	f7ff fff0 	bl	801dcbc <__sfp_lock_acquire>
 801dcdc:	6a23      	ldr	r3, [r4, #32]
 801dcde:	b11b      	cbz	r3, 801dce8 <__sinit+0x14>
 801dce0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801dce4:	f7ff bff0 	b.w	801dcc8 <__sfp_lock_release>
 801dce8:	4b04      	ldr	r3, [pc, #16]	; (801dcfc <__sinit+0x28>)
 801dcea:	6223      	str	r3, [r4, #32]
 801dcec:	4b04      	ldr	r3, [pc, #16]	; (801dd00 <__sinit+0x2c>)
 801dcee:	681b      	ldr	r3, [r3, #0]
 801dcf0:	2b00      	cmp	r3, #0
 801dcf2:	d1f5      	bne.n	801dce0 <__sinit+0xc>
 801dcf4:	f7ff ffc4 	bl	801dc80 <global_stdio_init.part.0>
 801dcf8:	e7f2      	b.n	801dce0 <__sinit+0xc>
 801dcfa:	bf00      	nop
 801dcfc:	0801dc41 	.word	0x0801dc41
 801dd00:	2002435c 	.word	0x2002435c

0801dd04 <_fwalk_sglue>:
 801dd04:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801dd08:	4607      	mov	r7, r0
 801dd0a:	4688      	mov	r8, r1
 801dd0c:	4614      	mov	r4, r2
 801dd0e:	2600      	movs	r6, #0
 801dd10:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801dd14:	f1b9 0901 	subs.w	r9, r9, #1
 801dd18:	d505      	bpl.n	801dd26 <_fwalk_sglue+0x22>
 801dd1a:	6824      	ldr	r4, [r4, #0]
 801dd1c:	2c00      	cmp	r4, #0
 801dd1e:	d1f7      	bne.n	801dd10 <_fwalk_sglue+0xc>
 801dd20:	4630      	mov	r0, r6
 801dd22:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801dd26:	89ab      	ldrh	r3, [r5, #12]
 801dd28:	2b01      	cmp	r3, #1
 801dd2a:	d907      	bls.n	801dd3c <_fwalk_sglue+0x38>
 801dd2c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801dd30:	3301      	adds	r3, #1
 801dd32:	d003      	beq.n	801dd3c <_fwalk_sglue+0x38>
 801dd34:	4629      	mov	r1, r5
 801dd36:	4638      	mov	r0, r7
 801dd38:	47c0      	blx	r8
 801dd3a:	4306      	orrs	r6, r0
 801dd3c:	3568      	adds	r5, #104	; 0x68
 801dd3e:	e7e9      	b.n	801dd14 <_fwalk_sglue+0x10>

0801dd40 <iprintf>:
 801dd40:	b40f      	push	{r0, r1, r2, r3}
 801dd42:	b507      	push	{r0, r1, r2, lr}
 801dd44:	4906      	ldr	r1, [pc, #24]	; (801dd60 <iprintf+0x20>)
 801dd46:	ab04      	add	r3, sp, #16
 801dd48:	6808      	ldr	r0, [r1, #0]
 801dd4a:	f853 2b04 	ldr.w	r2, [r3], #4
 801dd4e:	6881      	ldr	r1, [r0, #8]
 801dd50:	9301      	str	r3, [sp, #4]
 801dd52:	f000 fa7d 	bl	801e250 <_vfiprintf_r>
 801dd56:	b003      	add	sp, #12
 801dd58:	f85d eb04 	ldr.w	lr, [sp], #4
 801dd5c:	b004      	add	sp, #16
 801dd5e:	4770      	bx	lr
 801dd60:	200001a0 	.word	0x200001a0

0801dd64 <__sread>:
 801dd64:	b510      	push	{r4, lr}
 801dd66:	460c      	mov	r4, r1
 801dd68:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dd6c:	f000 f8ce 	bl	801df0c <_read_r>
 801dd70:	2800      	cmp	r0, #0
 801dd72:	bfab      	itete	ge
 801dd74:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801dd76:	89a3      	ldrhlt	r3, [r4, #12]
 801dd78:	181b      	addge	r3, r3, r0
 801dd7a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801dd7e:	bfac      	ite	ge
 801dd80:	6563      	strge	r3, [r4, #84]	; 0x54
 801dd82:	81a3      	strhlt	r3, [r4, #12]
 801dd84:	bd10      	pop	{r4, pc}

0801dd86 <__swrite>:
 801dd86:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801dd8a:	461f      	mov	r7, r3
 801dd8c:	898b      	ldrh	r3, [r1, #12]
 801dd8e:	05db      	lsls	r3, r3, #23
 801dd90:	4605      	mov	r5, r0
 801dd92:	460c      	mov	r4, r1
 801dd94:	4616      	mov	r6, r2
 801dd96:	d505      	bpl.n	801dda4 <__swrite+0x1e>
 801dd98:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dd9c:	2302      	movs	r3, #2
 801dd9e:	2200      	movs	r2, #0
 801dda0:	f000 f8a2 	bl	801dee8 <_lseek_r>
 801dda4:	89a3      	ldrh	r3, [r4, #12]
 801dda6:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801ddaa:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801ddae:	81a3      	strh	r3, [r4, #12]
 801ddb0:	4632      	mov	r2, r6
 801ddb2:	463b      	mov	r3, r7
 801ddb4:	4628      	mov	r0, r5
 801ddb6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801ddba:	f000 b8b9 	b.w	801df30 <_write_r>

0801ddbe <__sseek>:
 801ddbe:	b510      	push	{r4, lr}
 801ddc0:	460c      	mov	r4, r1
 801ddc2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ddc6:	f000 f88f 	bl	801dee8 <_lseek_r>
 801ddca:	1c43      	adds	r3, r0, #1
 801ddcc:	89a3      	ldrh	r3, [r4, #12]
 801ddce:	bf15      	itete	ne
 801ddd0:	6560      	strne	r0, [r4, #84]	; 0x54
 801ddd2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801ddd6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801ddda:	81a3      	strheq	r3, [r4, #12]
 801dddc:	bf18      	it	ne
 801ddde:	81a3      	strhne	r3, [r4, #12]
 801dde0:	bd10      	pop	{r4, pc}

0801dde2 <__sclose>:
 801dde2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801dde6:	f000 b819 	b.w	801de1c <_close_r>

0801ddea <memcmp>:
 801ddea:	b510      	push	{r4, lr}
 801ddec:	3901      	subs	r1, #1
 801ddee:	4402      	add	r2, r0
 801ddf0:	4290      	cmp	r0, r2
 801ddf2:	d101      	bne.n	801ddf8 <memcmp+0xe>
 801ddf4:	2000      	movs	r0, #0
 801ddf6:	e005      	b.n	801de04 <memcmp+0x1a>
 801ddf8:	7803      	ldrb	r3, [r0, #0]
 801ddfa:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801ddfe:	42a3      	cmp	r3, r4
 801de00:	d001      	beq.n	801de06 <memcmp+0x1c>
 801de02:	1b18      	subs	r0, r3, r4
 801de04:	bd10      	pop	{r4, pc}
 801de06:	3001      	adds	r0, #1
 801de08:	e7f2      	b.n	801ddf0 <memcmp+0x6>

0801de0a <memset>:
 801de0a:	4402      	add	r2, r0
 801de0c:	4603      	mov	r3, r0
 801de0e:	4293      	cmp	r3, r2
 801de10:	d100      	bne.n	801de14 <memset+0xa>
 801de12:	4770      	bx	lr
 801de14:	f803 1b01 	strb.w	r1, [r3], #1
 801de18:	e7f9      	b.n	801de0e <memset+0x4>
	...

0801de1c <_close_r>:
 801de1c:	b538      	push	{r3, r4, r5, lr}
 801de1e:	4d06      	ldr	r5, [pc, #24]	; (801de38 <_close_r+0x1c>)
 801de20:	2300      	movs	r3, #0
 801de22:	4604      	mov	r4, r0
 801de24:	4608      	mov	r0, r1
 801de26:	602b      	str	r3, [r5, #0]
 801de28:	f7e4 facd 	bl	80023c6 <_close>
 801de2c:	1c43      	adds	r3, r0, #1
 801de2e:	d102      	bne.n	801de36 <_close_r+0x1a>
 801de30:	682b      	ldr	r3, [r5, #0]
 801de32:	b103      	cbz	r3, 801de36 <_close_r+0x1a>
 801de34:	6023      	str	r3, [r4, #0]
 801de36:	bd38      	pop	{r3, r4, r5, pc}
 801de38:	20024360 	.word	0x20024360

0801de3c <_reclaim_reent>:
 801de3c:	4b29      	ldr	r3, [pc, #164]	; (801dee4 <_reclaim_reent+0xa8>)
 801de3e:	681b      	ldr	r3, [r3, #0]
 801de40:	4283      	cmp	r3, r0
 801de42:	b570      	push	{r4, r5, r6, lr}
 801de44:	4604      	mov	r4, r0
 801de46:	d04b      	beq.n	801dee0 <_reclaim_reent+0xa4>
 801de48:	69c3      	ldr	r3, [r0, #28]
 801de4a:	b143      	cbz	r3, 801de5e <_reclaim_reent+0x22>
 801de4c:	68db      	ldr	r3, [r3, #12]
 801de4e:	2b00      	cmp	r3, #0
 801de50:	d144      	bne.n	801dedc <_reclaim_reent+0xa0>
 801de52:	69e3      	ldr	r3, [r4, #28]
 801de54:	6819      	ldr	r1, [r3, #0]
 801de56:	b111      	cbz	r1, 801de5e <_reclaim_reent+0x22>
 801de58:	4620      	mov	r0, r4
 801de5a:	f000 f8cf 	bl	801dffc <_free_r>
 801de5e:	6961      	ldr	r1, [r4, #20]
 801de60:	b111      	cbz	r1, 801de68 <_reclaim_reent+0x2c>
 801de62:	4620      	mov	r0, r4
 801de64:	f000 f8ca 	bl	801dffc <_free_r>
 801de68:	69e1      	ldr	r1, [r4, #28]
 801de6a:	b111      	cbz	r1, 801de72 <_reclaim_reent+0x36>
 801de6c:	4620      	mov	r0, r4
 801de6e:	f000 f8c5 	bl	801dffc <_free_r>
 801de72:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801de74:	b111      	cbz	r1, 801de7c <_reclaim_reent+0x40>
 801de76:	4620      	mov	r0, r4
 801de78:	f000 f8c0 	bl	801dffc <_free_r>
 801de7c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801de7e:	b111      	cbz	r1, 801de86 <_reclaim_reent+0x4a>
 801de80:	4620      	mov	r0, r4
 801de82:	f000 f8bb 	bl	801dffc <_free_r>
 801de86:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801de88:	b111      	cbz	r1, 801de90 <_reclaim_reent+0x54>
 801de8a:	4620      	mov	r0, r4
 801de8c:	f000 f8b6 	bl	801dffc <_free_r>
 801de90:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801de92:	b111      	cbz	r1, 801de9a <_reclaim_reent+0x5e>
 801de94:	4620      	mov	r0, r4
 801de96:	f000 f8b1 	bl	801dffc <_free_r>
 801de9a:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801de9c:	b111      	cbz	r1, 801dea4 <_reclaim_reent+0x68>
 801de9e:	4620      	mov	r0, r4
 801dea0:	f000 f8ac 	bl	801dffc <_free_r>
 801dea4:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801dea6:	b111      	cbz	r1, 801deae <_reclaim_reent+0x72>
 801dea8:	4620      	mov	r0, r4
 801deaa:	f000 f8a7 	bl	801dffc <_free_r>
 801deae:	6a23      	ldr	r3, [r4, #32]
 801deb0:	b1b3      	cbz	r3, 801dee0 <_reclaim_reent+0xa4>
 801deb2:	4620      	mov	r0, r4
 801deb4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801deb8:	4718      	bx	r3
 801deba:	5949      	ldr	r1, [r1, r5]
 801debc:	b941      	cbnz	r1, 801ded0 <_reclaim_reent+0x94>
 801debe:	3504      	adds	r5, #4
 801dec0:	69e3      	ldr	r3, [r4, #28]
 801dec2:	2d80      	cmp	r5, #128	; 0x80
 801dec4:	68d9      	ldr	r1, [r3, #12]
 801dec6:	d1f8      	bne.n	801deba <_reclaim_reent+0x7e>
 801dec8:	4620      	mov	r0, r4
 801deca:	f000 f897 	bl	801dffc <_free_r>
 801dece:	e7c0      	b.n	801de52 <_reclaim_reent+0x16>
 801ded0:	680e      	ldr	r6, [r1, #0]
 801ded2:	4620      	mov	r0, r4
 801ded4:	f000 f892 	bl	801dffc <_free_r>
 801ded8:	4631      	mov	r1, r6
 801deda:	e7ef      	b.n	801debc <_reclaim_reent+0x80>
 801dedc:	2500      	movs	r5, #0
 801dede:	e7ef      	b.n	801dec0 <_reclaim_reent+0x84>
 801dee0:	bd70      	pop	{r4, r5, r6, pc}
 801dee2:	bf00      	nop
 801dee4:	200001a0 	.word	0x200001a0

0801dee8 <_lseek_r>:
 801dee8:	b538      	push	{r3, r4, r5, lr}
 801deea:	4d07      	ldr	r5, [pc, #28]	; (801df08 <_lseek_r+0x20>)
 801deec:	4604      	mov	r4, r0
 801deee:	4608      	mov	r0, r1
 801def0:	4611      	mov	r1, r2
 801def2:	2200      	movs	r2, #0
 801def4:	602a      	str	r2, [r5, #0]
 801def6:	461a      	mov	r2, r3
 801def8:	f7e4 fa8c 	bl	8002414 <_lseek>
 801defc:	1c43      	adds	r3, r0, #1
 801defe:	d102      	bne.n	801df06 <_lseek_r+0x1e>
 801df00:	682b      	ldr	r3, [r5, #0]
 801df02:	b103      	cbz	r3, 801df06 <_lseek_r+0x1e>
 801df04:	6023      	str	r3, [r4, #0]
 801df06:	bd38      	pop	{r3, r4, r5, pc}
 801df08:	20024360 	.word	0x20024360

0801df0c <_read_r>:
 801df0c:	b538      	push	{r3, r4, r5, lr}
 801df0e:	4d07      	ldr	r5, [pc, #28]	; (801df2c <_read_r+0x20>)
 801df10:	4604      	mov	r4, r0
 801df12:	4608      	mov	r0, r1
 801df14:	4611      	mov	r1, r2
 801df16:	2200      	movs	r2, #0
 801df18:	602a      	str	r2, [r5, #0]
 801df1a:	461a      	mov	r2, r3
 801df1c:	f7e4 fa1a 	bl	8002354 <_read>
 801df20:	1c43      	adds	r3, r0, #1
 801df22:	d102      	bne.n	801df2a <_read_r+0x1e>
 801df24:	682b      	ldr	r3, [r5, #0]
 801df26:	b103      	cbz	r3, 801df2a <_read_r+0x1e>
 801df28:	6023      	str	r3, [r4, #0]
 801df2a:	bd38      	pop	{r3, r4, r5, pc}
 801df2c:	20024360 	.word	0x20024360

0801df30 <_write_r>:
 801df30:	b538      	push	{r3, r4, r5, lr}
 801df32:	4d07      	ldr	r5, [pc, #28]	; (801df50 <_write_r+0x20>)
 801df34:	4604      	mov	r4, r0
 801df36:	4608      	mov	r0, r1
 801df38:	4611      	mov	r1, r2
 801df3a:	2200      	movs	r2, #0
 801df3c:	602a      	str	r2, [r5, #0]
 801df3e:	461a      	mov	r2, r3
 801df40:	f7e4 fa25 	bl	800238e <_write>
 801df44:	1c43      	adds	r3, r0, #1
 801df46:	d102      	bne.n	801df4e <_write_r+0x1e>
 801df48:	682b      	ldr	r3, [r5, #0]
 801df4a:	b103      	cbz	r3, 801df4e <_write_r+0x1e>
 801df4c:	6023      	str	r3, [r4, #0]
 801df4e:	bd38      	pop	{r3, r4, r5, pc}
 801df50:	20024360 	.word	0x20024360

0801df54 <__libc_init_array>:
 801df54:	b570      	push	{r4, r5, r6, lr}
 801df56:	4d0d      	ldr	r5, [pc, #52]	; (801df8c <__libc_init_array+0x38>)
 801df58:	4c0d      	ldr	r4, [pc, #52]	; (801df90 <__libc_init_array+0x3c>)
 801df5a:	1b64      	subs	r4, r4, r5
 801df5c:	10a4      	asrs	r4, r4, #2
 801df5e:	2600      	movs	r6, #0
 801df60:	42a6      	cmp	r6, r4
 801df62:	d109      	bne.n	801df78 <__libc_init_array+0x24>
 801df64:	4d0b      	ldr	r5, [pc, #44]	; (801df94 <__libc_init_array+0x40>)
 801df66:	4c0c      	ldr	r4, [pc, #48]	; (801df98 <__libc_init_array+0x44>)
 801df68:	f000 fe52 	bl	801ec10 <_init>
 801df6c:	1b64      	subs	r4, r4, r5
 801df6e:	10a4      	asrs	r4, r4, #2
 801df70:	2600      	movs	r6, #0
 801df72:	42a6      	cmp	r6, r4
 801df74:	d105      	bne.n	801df82 <__libc_init_array+0x2e>
 801df76:	bd70      	pop	{r4, r5, r6, pc}
 801df78:	f855 3b04 	ldr.w	r3, [r5], #4
 801df7c:	4798      	blx	r3
 801df7e:	3601      	adds	r6, #1
 801df80:	e7ee      	b.n	801df60 <__libc_init_array+0xc>
 801df82:	f855 3b04 	ldr.w	r3, [r5], #4
 801df86:	4798      	blx	r3
 801df88:	3601      	adds	r6, #1
 801df8a:	e7f2      	b.n	801df72 <__libc_init_array+0x1e>
 801df8c:	08022144 	.word	0x08022144
 801df90:	08022144 	.word	0x08022144
 801df94:	08022144 	.word	0x08022144
 801df98:	08022148 	.word	0x08022148

0801df9c <__retarget_lock_init_recursive>:
 801df9c:	4770      	bx	lr

0801df9e <__retarget_lock_acquire_recursive>:
 801df9e:	4770      	bx	lr

0801dfa0 <__retarget_lock_release_recursive>:
 801dfa0:	4770      	bx	lr

0801dfa2 <memcpy>:
 801dfa2:	440a      	add	r2, r1
 801dfa4:	4291      	cmp	r1, r2
 801dfa6:	f100 33ff 	add.w	r3, r0, #4294967295
 801dfaa:	d100      	bne.n	801dfae <memcpy+0xc>
 801dfac:	4770      	bx	lr
 801dfae:	b510      	push	{r4, lr}
 801dfb0:	f811 4b01 	ldrb.w	r4, [r1], #1
 801dfb4:	f803 4f01 	strb.w	r4, [r3, #1]!
 801dfb8:	4291      	cmp	r1, r2
 801dfba:	d1f9      	bne.n	801dfb0 <memcpy+0xe>
 801dfbc:	bd10      	pop	{r4, pc}
	...

0801dfc0 <__assert_func>:
 801dfc0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801dfc2:	4614      	mov	r4, r2
 801dfc4:	461a      	mov	r2, r3
 801dfc6:	4b09      	ldr	r3, [pc, #36]	; (801dfec <__assert_func+0x2c>)
 801dfc8:	681b      	ldr	r3, [r3, #0]
 801dfca:	4605      	mov	r5, r0
 801dfcc:	68d8      	ldr	r0, [r3, #12]
 801dfce:	b14c      	cbz	r4, 801dfe4 <__assert_func+0x24>
 801dfd0:	4b07      	ldr	r3, [pc, #28]	; (801dff0 <__assert_func+0x30>)
 801dfd2:	9100      	str	r1, [sp, #0]
 801dfd4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801dfd8:	4906      	ldr	r1, [pc, #24]	; (801dff4 <__assert_func+0x34>)
 801dfda:	462b      	mov	r3, r5
 801dfdc:	f000 fc90 	bl	801e900 <fiprintf>
 801dfe0:	f000 fd46 	bl	801ea70 <abort>
 801dfe4:	4b04      	ldr	r3, [pc, #16]	; (801dff8 <__assert_func+0x38>)
 801dfe6:	461c      	mov	r4, r3
 801dfe8:	e7f3      	b.n	801dfd2 <__assert_func+0x12>
 801dfea:	bf00      	nop
 801dfec:	200001a0 	.word	0x200001a0
 801dff0:	080220cb 	.word	0x080220cb
 801dff4:	080220d8 	.word	0x080220d8
 801dff8:	08022106 	.word	0x08022106

0801dffc <_free_r>:
 801dffc:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801dffe:	2900      	cmp	r1, #0
 801e000:	d044      	beq.n	801e08c <_free_r+0x90>
 801e002:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801e006:	9001      	str	r0, [sp, #4]
 801e008:	2b00      	cmp	r3, #0
 801e00a:	f1a1 0404 	sub.w	r4, r1, #4
 801e00e:	bfb8      	it	lt
 801e010:	18e4      	addlt	r4, r4, r3
 801e012:	f000 f8e7 	bl	801e1e4 <__malloc_lock>
 801e016:	4a1e      	ldr	r2, [pc, #120]	; (801e090 <_free_r+0x94>)
 801e018:	9801      	ldr	r0, [sp, #4]
 801e01a:	6813      	ldr	r3, [r2, #0]
 801e01c:	b933      	cbnz	r3, 801e02c <_free_r+0x30>
 801e01e:	6063      	str	r3, [r4, #4]
 801e020:	6014      	str	r4, [r2, #0]
 801e022:	b003      	add	sp, #12
 801e024:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801e028:	f000 b8e2 	b.w	801e1f0 <__malloc_unlock>
 801e02c:	42a3      	cmp	r3, r4
 801e02e:	d908      	bls.n	801e042 <_free_r+0x46>
 801e030:	6825      	ldr	r5, [r4, #0]
 801e032:	1961      	adds	r1, r4, r5
 801e034:	428b      	cmp	r3, r1
 801e036:	bf01      	itttt	eq
 801e038:	6819      	ldreq	r1, [r3, #0]
 801e03a:	685b      	ldreq	r3, [r3, #4]
 801e03c:	1949      	addeq	r1, r1, r5
 801e03e:	6021      	streq	r1, [r4, #0]
 801e040:	e7ed      	b.n	801e01e <_free_r+0x22>
 801e042:	461a      	mov	r2, r3
 801e044:	685b      	ldr	r3, [r3, #4]
 801e046:	b10b      	cbz	r3, 801e04c <_free_r+0x50>
 801e048:	42a3      	cmp	r3, r4
 801e04a:	d9fa      	bls.n	801e042 <_free_r+0x46>
 801e04c:	6811      	ldr	r1, [r2, #0]
 801e04e:	1855      	adds	r5, r2, r1
 801e050:	42a5      	cmp	r5, r4
 801e052:	d10b      	bne.n	801e06c <_free_r+0x70>
 801e054:	6824      	ldr	r4, [r4, #0]
 801e056:	4421      	add	r1, r4
 801e058:	1854      	adds	r4, r2, r1
 801e05a:	42a3      	cmp	r3, r4
 801e05c:	6011      	str	r1, [r2, #0]
 801e05e:	d1e0      	bne.n	801e022 <_free_r+0x26>
 801e060:	681c      	ldr	r4, [r3, #0]
 801e062:	685b      	ldr	r3, [r3, #4]
 801e064:	6053      	str	r3, [r2, #4]
 801e066:	440c      	add	r4, r1
 801e068:	6014      	str	r4, [r2, #0]
 801e06a:	e7da      	b.n	801e022 <_free_r+0x26>
 801e06c:	d902      	bls.n	801e074 <_free_r+0x78>
 801e06e:	230c      	movs	r3, #12
 801e070:	6003      	str	r3, [r0, #0]
 801e072:	e7d6      	b.n	801e022 <_free_r+0x26>
 801e074:	6825      	ldr	r5, [r4, #0]
 801e076:	1961      	adds	r1, r4, r5
 801e078:	428b      	cmp	r3, r1
 801e07a:	bf04      	itt	eq
 801e07c:	6819      	ldreq	r1, [r3, #0]
 801e07e:	685b      	ldreq	r3, [r3, #4]
 801e080:	6063      	str	r3, [r4, #4]
 801e082:	bf04      	itt	eq
 801e084:	1949      	addeq	r1, r1, r5
 801e086:	6021      	streq	r1, [r4, #0]
 801e088:	6054      	str	r4, [r2, #4]
 801e08a:	e7ca      	b.n	801e022 <_free_r+0x26>
 801e08c:	b003      	add	sp, #12
 801e08e:	bd30      	pop	{r4, r5, pc}
 801e090:	20024368 	.word	0x20024368

0801e094 <malloc>:
 801e094:	4b02      	ldr	r3, [pc, #8]	; (801e0a0 <malloc+0xc>)
 801e096:	4601      	mov	r1, r0
 801e098:	6818      	ldr	r0, [r3, #0]
 801e09a:	f000 b823 	b.w	801e0e4 <_malloc_r>
 801e09e:	bf00      	nop
 801e0a0:	200001a0 	.word	0x200001a0

0801e0a4 <sbrk_aligned>:
 801e0a4:	b570      	push	{r4, r5, r6, lr}
 801e0a6:	4e0e      	ldr	r6, [pc, #56]	; (801e0e0 <sbrk_aligned+0x3c>)
 801e0a8:	460c      	mov	r4, r1
 801e0aa:	6831      	ldr	r1, [r6, #0]
 801e0ac:	4605      	mov	r5, r0
 801e0ae:	b911      	cbnz	r1, 801e0b6 <sbrk_aligned+0x12>
 801e0b0:	f000 fcce 	bl	801ea50 <_sbrk_r>
 801e0b4:	6030      	str	r0, [r6, #0]
 801e0b6:	4621      	mov	r1, r4
 801e0b8:	4628      	mov	r0, r5
 801e0ba:	f000 fcc9 	bl	801ea50 <_sbrk_r>
 801e0be:	1c43      	adds	r3, r0, #1
 801e0c0:	d00a      	beq.n	801e0d8 <sbrk_aligned+0x34>
 801e0c2:	1cc4      	adds	r4, r0, #3
 801e0c4:	f024 0403 	bic.w	r4, r4, #3
 801e0c8:	42a0      	cmp	r0, r4
 801e0ca:	d007      	beq.n	801e0dc <sbrk_aligned+0x38>
 801e0cc:	1a21      	subs	r1, r4, r0
 801e0ce:	4628      	mov	r0, r5
 801e0d0:	f000 fcbe 	bl	801ea50 <_sbrk_r>
 801e0d4:	3001      	adds	r0, #1
 801e0d6:	d101      	bne.n	801e0dc <sbrk_aligned+0x38>
 801e0d8:	f04f 34ff 	mov.w	r4, #4294967295
 801e0dc:	4620      	mov	r0, r4
 801e0de:	bd70      	pop	{r4, r5, r6, pc}
 801e0e0:	2002436c 	.word	0x2002436c

0801e0e4 <_malloc_r>:
 801e0e4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801e0e8:	1ccd      	adds	r5, r1, #3
 801e0ea:	f025 0503 	bic.w	r5, r5, #3
 801e0ee:	3508      	adds	r5, #8
 801e0f0:	2d0c      	cmp	r5, #12
 801e0f2:	bf38      	it	cc
 801e0f4:	250c      	movcc	r5, #12
 801e0f6:	2d00      	cmp	r5, #0
 801e0f8:	4607      	mov	r7, r0
 801e0fa:	db01      	blt.n	801e100 <_malloc_r+0x1c>
 801e0fc:	42a9      	cmp	r1, r5
 801e0fe:	d905      	bls.n	801e10c <_malloc_r+0x28>
 801e100:	230c      	movs	r3, #12
 801e102:	603b      	str	r3, [r7, #0]
 801e104:	2600      	movs	r6, #0
 801e106:	4630      	mov	r0, r6
 801e108:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801e10c:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801e1e0 <_malloc_r+0xfc>
 801e110:	f000 f868 	bl	801e1e4 <__malloc_lock>
 801e114:	f8d8 3000 	ldr.w	r3, [r8]
 801e118:	461c      	mov	r4, r3
 801e11a:	bb5c      	cbnz	r4, 801e174 <_malloc_r+0x90>
 801e11c:	4629      	mov	r1, r5
 801e11e:	4638      	mov	r0, r7
 801e120:	f7ff ffc0 	bl	801e0a4 <sbrk_aligned>
 801e124:	1c43      	adds	r3, r0, #1
 801e126:	4604      	mov	r4, r0
 801e128:	d155      	bne.n	801e1d6 <_malloc_r+0xf2>
 801e12a:	f8d8 4000 	ldr.w	r4, [r8]
 801e12e:	4626      	mov	r6, r4
 801e130:	2e00      	cmp	r6, #0
 801e132:	d145      	bne.n	801e1c0 <_malloc_r+0xdc>
 801e134:	2c00      	cmp	r4, #0
 801e136:	d048      	beq.n	801e1ca <_malloc_r+0xe6>
 801e138:	6823      	ldr	r3, [r4, #0]
 801e13a:	4631      	mov	r1, r6
 801e13c:	4638      	mov	r0, r7
 801e13e:	eb04 0903 	add.w	r9, r4, r3
 801e142:	f000 fc85 	bl	801ea50 <_sbrk_r>
 801e146:	4581      	cmp	r9, r0
 801e148:	d13f      	bne.n	801e1ca <_malloc_r+0xe6>
 801e14a:	6821      	ldr	r1, [r4, #0]
 801e14c:	1a6d      	subs	r5, r5, r1
 801e14e:	4629      	mov	r1, r5
 801e150:	4638      	mov	r0, r7
 801e152:	f7ff ffa7 	bl	801e0a4 <sbrk_aligned>
 801e156:	3001      	adds	r0, #1
 801e158:	d037      	beq.n	801e1ca <_malloc_r+0xe6>
 801e15a:	6823      	ldr	r3, [r4, #0]
 801e15c:	442b      	add	r3, r5
 801e15e:	6023      	str	r3, [r4, #0]
 801e160:	f8d8 3000 	ldr.w	r3, [r8]
 801e164:	2b00      	cmp	r3, #0
 801e166:	d038      	beq.n	801e1da <_malloc_r+0xf6>
 801e168:	685a      	ldr	r2, [r3, #4]
 801e16a:	42a2      	cmp	r2, r4
 801e16c:	d12b      	bne.n	801e1c6 <_malloc_r+0xe2>
 801e16e:	2200      	movs	r2, #0
 801e170:	605a      	str	r2, [r3, #4]
 801e172:	e00f      	b.n	801e194 <_malloc_r+0xb0>
 801e174:	6822      	ldr	r2, [r4, #0]
 801e176:	1b52      	subs	r2, r2, r5
 801e178:	d41f      	bmi.n	801e1ba <_malloc_r+0xd6>
 801e17a:	2a0b      	cmp	r2, #11
 801e17c:	d917      	bls.n	801e1ae <_malloc_r+0xca>
 801e17e:	1961      	adds	r1, r4, r5
 801e180:	42a3      	cmp	r3, r4
 801e182:	6025      	str	r5, [r4, #0]
 801e184:	bf18      	it	ne
 801e186:	6059      	strne	r1, [r3, #4]
 801e188:	6863      	ldr	r3, [r4, #4]
 801e18a:	bf08      	it	eq
 801e18c:	f8c8 1000 	streq.w	r1, [r8]
 801e190:	5162      	str	r2, [r4, r5]
 801e192:	604b      	str	r3, [r1, #4]
 801e194:	4638      	mov	r0, r7
 801e196:	f104 060b 	add.w	r6, r4, #11
 801e19a:	f000 f829 	bl	801e1f0 <__malloc_unlock>
 801e19e:	f026 0607 	bic.w	r6, r6, #7
 801e1a2:	1d23      	adds	r3, r4, #4
 801e1a4:	1af2      	subs	r2, r6, r3
 801e1a6:	d0ae      	beq.n	801e106 <_malloc_r+0x22>
 801e1a8:	1b9b      	subs	r3, r3, r6
 801e1aa:	50a3      	str	r3, [r4, r2]
 801e1ac:	e7ab      	b.n	801e106 <_malloc_r+0x22>
 801e1ae:	42a3      	cmp	r3, r4
 801e1b0:	6862      	ldr	r2, [r4, #4]
 801e1b2:	d1dd      	bne.n	801e170 <_malloc_r+0x8c>
 801e1b4:	f8c8 2000 	str.w	r2, [r8]
 801e1b8:	e7ec      	b.n	801e194 <_malloc_r+0xb0>
 801e1ba:	4623      	mov	r3, r4
 801e1bc:	6864      	ldr	r4, [r4, #4]
 801e1be:	e7ac      	b.n	801e11a <_malloc_r+0x36>
 801e1c0:	4634      	mov	r4, r6
 801e1c2:	6876      	ldr	r6, [r6, #4]
 801e1c4:	e7b4      	b.n	801e130 <_malloc_r+0x4c>
 801e1c6:	4613      	mov	r3, r2
 801e1c8:	e7cc      	b.n	801e164 <_malloc_r+0x80>
 801e1ca:	230c      	movs	r3, #12
 801e1cc:	603b      	str	r3, [r7, #0]
 801e1ce:	4638      	mov	r0, r7
 801e1d0:	f000 f80e 	bl	801e1f0 <__malloc_unlock>
 801e1d4:	e797      	b.n	801e106 <_malloc_r+0x22>
 801e1d6:	6025      	str	r5, [r4, #0]
 801e1d8:	e7dc      	b.n	801e194 <_malloc_r+0xb0>
 801e1da:	605b      	str	r3, [r3, #4]
 801e1dc:	deff      	udf	#255	; 0xff
 801e1de:	bf00      	nop
 801e1e0:	20024368 	.word	0x20024368

0801e1e4 <__malloc_lock>:
 801e1e4:	4801      	ldr	r0, [pc, #4]	; (801e1ec <__malloc_lock+0x8>)
 801e1e6:	f7ff beda 	b.w	801df9e <__retarget_lock_acquire_recursive>
 801e1ea:	bf00      	nop
 801e1ec:	20024364 	.word	0x20024364

0801e1f0 <__malloc_unlock>:
 801e1f0:	4801      	ldr	r0, [pc, #4]	; (801e1f8 <__malloc_unlock+0x8>)
 801e1f2:	f7ff bed5 	b.w	801dfa0 <__retarget_lock_release_recursive>
 801e1f6:	bf00      	nop
 801e1f8:	20024364 	.word	0x20024364

0801e1fc <__sfputc_r>:
 801e1fc:	6893      	ldr	r3, [r2, #8]
 801e1fe:	3b01      	subs	r3, #1
 801e200:	2b00      	cmp	r3, #0
 801e202:	b410      	push	{r4}
 801e204:	6093      	str	r3, [r2, #8]
 801e206:	da08      	bge.n	801e21a <__sfputc_r+0x1e>
 801e208:	6994      	ldr	r4, [r2, #24]
 801e20a:	42a3      	cmp	r3, r4
 801e20c:	db01      	blt.n	801e212 <__sfputc_r+0x16>
 801e20e:	290a      	cmp	r1, #10
 801e210:	d103      	bne.n	801e21a <__sfputc_r+0x1e>
 801e212:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e216:	f000 bb85 	b.w	801e924 <__swbuf_r>
 801e21a:	6813      	ldr	r3, [r2, #0]
 801e21c:	1c58      	adds	r0, r3, #1
 801e21e:	6010      	str	r0, [r2, #0]
 801e220:	7019      	strb	r1, [r3, #0]
 801e222:	4608      	mov	r0, r1
 801e224:	f85d 4b04 	ldr.w	r4, [sp], #4
 801e228:	4770      	bx	lr

0801e22a <__sfputs_r>:
 801e22a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e22c:	4606      	mov	r6, r0
 801e22e:	460f      	mov	r7, r1
 801e230:	4614      	mov	r4, r2
 801e232:	18d5      	adds	r5, r2, r3
 801e234:	42ac      	cmp	r4, r5
 801e236:	d101      	bne.n	801e23c <__sfputs_r+0x12>
 801e238:	2000      	movs	r0, #0
 801e23a:	e007      	b.n	801e24c <__sfputs_r+0x22>
 801e23c:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e240:	463a      	mov	r2, r7
 801e242:	4630      	mov	r0, r6
 801e244:	f7ff ffda 	bl	801e1fc <__sfputc_r>
 801e248:	1c43      	adds	r3, r0, #1
 801e24a:	d1f3      	bne.n	801e234 <__sfputs_r+0xa>
 801e24c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e250 <_vfiprintf_r>:
 801e250:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801e254:	460d      	mov	r5, r1
 801e256:	b09d      	sub	sp, #116	; 0x74
 801e258:	4614      	mov	r4, r2
 801e25a:	4698      	mov	r8, r3
 801e25c:	4606      	mov	r6, r0
 801e25e:	b118      	cbz	r0, 801e268 <_vfiprintf_r+0x18>
 801e260:	6a03      	ldr	r3, [r0, #32]
 801e262:	b90b      	cbnz	r3, 801e268 <_vfiprintf_r+0x18>
 801e264:	f7ff fd36 	bl	801dcd4 <__sinit>
 801e268:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e26a:	07d9      	lsls	r1, r3, #31
 801e26c:	d405      	bmi.n	801e27a <_vfiprintf_r+0x2a>
 801e26e:	89ab      	ldrh	r3, [r5, #12]
 801e270:	059a      	lsls	r2, r3, #22
 801e272:	d402      	bmi.n	801e27a <_vfiprintf_r+0x2a>
 801e274:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e276:	f7ff fe92 	bl	801df9e <__retarget_lock_acquire_recursive>
 801e27a:	89ab      	ldrh	r3, [r5, #12]
 801e27c:	071b      	lsls	r3, r3, #28
 801e27e:	d501      	bpl.n	801e284 <_vfiprintf_r+0x34>
 801e280:	692b      	ldr	r3, [r5, #16]
 801e282:	b99b      	cbnz	r3, 801e2ac <_vfiprintf_r+0x5c>
 801e284:	4629      	mov	r1, r5
 801e286:	4630      	mov	r0, r6
 801e288:	f000 fb8a 	bl	801e9a0 <__swsetup_r>
 801e28c:	b170      	cbz	r0, 801e2ac <_vfiprintf_r+0x5c>
 801e28e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e290:	07dc      	lsls	r4, r3, #31
 801e292:	d504      	bpl.n	801e29e <_vfiprintf_r+0x4e>
 801e294:	f04f 30ff 	mov.w	r0, #4294967295
 801e298:	b01d      	add	sp, #116	; 0x74
 801e29a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801e29e:	89ab      	ldrh	r3, [r5, #12]
 801e2a0:	0598      	lsls	r0, r3, #22
 801e2a2:	d4f7      	bmi.n	801e294 <_vfiprintf_r+0x44>
 801e2a4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e2a6:	f7ff fe7b 	bl	801dfa0 <__retarget_lock_release_recursive>
 801e2aa:	e7f3      	b.n	801e294 <_vfiprintf_r+0x44>
 801e2ac:	2300      	movs	r3, #0
 801e2ae:	9309      	str	r3, [sp, #36]	; 0x24
 801e2b0:	2320      	movs	r3, #32
 801e2b2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801e2b6:	f8cd 800c 	str.w	r8, [sp, #12]
 801e2ba:	2330      	movs	r3, #48	; 0x30
 801e2bc:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801e470 <_vfiprintf_r+0x220>
 801e2c0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801e2c4:	f04f 0901 	mov.w	r9, #1
 801e2c8:	4623      	mov	r3, r4
 801e2ca:	469a      	mov	sl, r3
 801e2cc:	f813 2b01 	ldrb.w	r2, [r3], #1
 801e2d0:	b10a      	cbz	r2, 801e2d6 <_vfiprintf_r+0x86>
 801e2d2:	2a25      	cmp	r2, #37	; 0x25
 801e2d4:	d1f9      	bne.n	801e2ca <_vfiprintf_r+0x7a>
 801e2d6:	ebba 0b04 	subs.w	fp, sl, r4
 801e2da:	d00b      	beq.n	801e2f4 <_vfiprintf_r+0xa4>
 801e2dc:	465b      	mov	r3, fp
 801e2de:	4622      	mov	r2, r4
 801e2e0:	4629      	mov	r1, r5
 801e2e2:	4630      	mov	r0, r6
 801e2e4:	f7ff ffa1 	bl	801e22a <__sfputs_r>
 801e2e8:	3001      	adds	r0, #1
 801e2ea:	f000 80a9 	beq.w	801e440 <_vfiprintf_r+0x1f0>
 801e2ee:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801e2f0:	445a      	add	r2, fp
 801e2f2:	9209      	str	r2, [sp, #36]	; 0x24
 801e2f4:	f89a 3000 	ldrb.w	r3, [sl]
 801e2f8:	2b00      	cmp	r3, #0
 801e2fa:	f000 80a1 	beq.w	801e440 <_vfiprintf_r+0x1f0>
 801e2fe:	2300      	movs	r3, #0
 801e300:	f04f 32ff 	mov.w	r2, #4294967295
 801e304:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801e308:	f10a 0a01 	add.w	sl, sl, #1
 801e30c:	9304      	str	r3, [sp, #16]
 801e30e:	9307      	str	r3, [sp, #28]
 801e310:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801e314:	931a      	str	r3, [sp, #104]	; 0x68
 801e316:	4654      	mov	r4, sl
 801e318:	2205      	movs	r2, #5
 801e31a:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e31e:	4854      	ldr	r0, [pc, #336]	; (801e470 <_vfiprintf_r+0x220>)
 801e320:	f7e1 ff76 	bl	8000210 <memchr>
 801e324:	9a04      	ldr	r2, [sp, #16]
 801e326:	b9d8      	cbnz	r0, 801e360 <_vfiprintf_r+0x110>
 801e328:	06d1      	lsls	r1, r2, #27
 801e32a:	bf44      	itt	mi
 801e32c:	2320      	movmi	r3, #32
 801e32e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e332:	0713      	lsls	r3, r2, #28
 801e334:	bf44      	itt	mi
 801e336:	232b      	movmi	r3, #43	; 0x2b
 801e338:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801e33c:	f89a 3000 	ldrb.w	r3, [sl]
 801e340:	2b2a      	cmp	r3, #42	; 0x2a
 801e342:	d015      	beq.n	801e370 <_vfiprintf_r+0x120>
 801e344:	9a07      	ldr	r2, [sp, #28]
 801e346:	4654      	mov	r4, sl
 801e348:	2000      	movs	r0, #0
 801e34a:	f04f 0c0a 	mov.w	ip, #10
 801e34e:	4621      	mov	r1, r4
 801e350:	f811 3b01 	ldrb.w	r3, [r1], #1
 801e354:	3b30      	subs	r3, #48	; 0x30
 801e356:	2b09      	cmp	r3, #9
 801e358:	d94d      	bls.n	801e3f6 <_vfiprintf_r+0x1a6>
 801e35a:	b1b0      	cbz	r0, 801e38a <_vfiprintf_r+0x13a>
 801e35c:	9207      	str	r2, [sp, #28]
 801e35e:	e014      	b.n	801e38a <_vfiprintf_r+0x13a>
 801e360:	eba0 0308 	sub.w	r3, r0, r8
 801e364:	fa09 f303 	lsl.w	r3, r9, r3
 801e368:	4313      	orrs	r3, r2
 801e36a:	9304      	str	r3, [sp, #16]
 801e36c:	46a2      	mov	sl, r4
 801e36e:	e7d2      	b.n	801e316 <_vfiprintf_r+0xc6>
 801e370:	9b03      	ldr	r3, [sp, #12]
 801e372:	1d19      	adds	r1, r3, #4
 801e374:	681b      	ldr	r3, [r3, #0]
 801e376:	9103      	str	r1, [sp, #12]
 801e378:	2b00      	cmp	r3, #0
 801e37a:	bfbb      	ittet	lt
 801e37c:	425b      	neglt	r3, r3
 801e37e:	f042 0202 	orrlt.w	r2, r2, #2
 801e382:	9307      	strge	r3, [sp, #28]
 801e384:	9307      	strlt	r3, [sp, #28]
 801e386:	bfb8      	it	lt
 801e388:	9204      	strlt	r2, [sp, #16]
 801e38a:	7823      	ldrb	r3, [r4, #0]
 801e38c:	2b2e      	cmp	r3, #46	; 0x2e
 801e38e:	d10c      	bne.n	801e3aa <_vfiprintf_r+0x15a>
 801e390:	7863      	ldrb	r3, [r4, #1]
 801e392:	2b2a      	cmp	r3, #42	; 0x2a
 801e394:	d134      	bne.n	801e400 <_vfiprintf_r+0x1b0>
 801e396:	9b03      	ldr	r3, [sp, #12]
 801e398:	1d1a      	adds	r2, r3, #4
 801e39a:	681b      	ldr	r3, [r3, #0]
 801e39c:	9203      	str	r2, [sp, #12]
 801e39e:	2b00      	cmp	r3, #0
 801e3a0:	bfb8      	it	lt
 801e3a2:	f04f 33ff 	movlt.w	r3, #4294967295
 801e3a6:	3402      	adds	r4, #2
 801e3a8:	9305      	str	r3, [sp, #20]
 801e3aa:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801e480 <_vfiprintf_r+0x230>
 801e3ae:	7821      	ldrb	r1, [r4, #0]
 801e3b0:	2203      	movs	r2, #3
 801e3b2:	4650      	mov	r0, sl
 801e3b4:	f7e1 ff2c 	bl	8000210 <memchr>
 801e3b8:	b138      	cbz	r0, 801e3ca <_vfiprintf_r+0x17a>
 801e3ba:	9b04      	ldr	r3, [sp, #16]
 801e3bc:	eba0 000a 	sub.w	r0, r0, sl
 801e3c0:	2240      	movs	r2, #64	; 0x40
 801e3c2:	4082      	lsls	r2, r0
 801e3c4:	4313      	orrs	r3, r2
 801e3c6:	3401      	adds	r4, #1
 801e3c8:	9304      	str	r3, [sp, #16]
 801e3ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 801e3ce:	4829      	ldr	r0, [pc, #164]	; (801e474 <_vfiprintf_r+0x224>)
 801e3d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801e3d4:	2206      	movs	r2, #6
 801e3d6:	f7e1 ff1b 	bl	8000210 <memchr>
 801e3da:	2800      	cmp	r0, #0
 801e3dc:	d03f      	beq.n	801e45e <_vfiprintf_r+0x20e>
 801e3de:	4b26      	ldr	r3, [pc, #152]	; (801e478 <_vfiprintf_r+0x228>)
 801e3e0:	bb1b      	cbnz	r3, 801e42a <_vfiprintf_r+0x1da>
 801e3e2:	9b03      	ldr	r3, [sp, #12]
 801e3e4:	3307      	adds	r3, #7
 801e3e6:	f023 0307 	bic.w	r3, r3, #7
 801e3ea:	3308      	adds	r3, #8
 801e3ec:	9303      	str	r3, [sp, #12]
 801e3ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801e3f0:	443b      	add	r3, r7
 801e3f2:	9309      	str	r3, [sp, #36]	; 0x24
 801e3f4:	e768      	b.n	801e2c8 <_vfiprintf_r+0x78>
 801e3f6:	fb0c 3202 	mla	r2, ip, r2, r3
 801e3fa:	460c      	mov	r4, r1
 801e3fc:	2001      	movs	r0, #1
 801e3fe:	e7a6      	b.n	801e34e <_vfiprintf_r+0xfe>
 801e400:	2300      	movs	r3, #0
 801e402:	3401      	adds	r4, #1
 801e404:	9305      	str	r3, [sp, #20]
 801e406:	4619      	mov	r1, r3
 801e408:	f04f 0c0a 	mov.w	ip, #10
 801e40c:	4620      	mov	r0, r4
 801e40e:	f810 2b01 	ldrb.w	r2, [r0], #1
 801e412:	3a30      	subs	r2, #48	; 0x30
 801e414:	2a09      	cmp	r2, #9
 801e416:	d903      	bls.n	801e420 <_vfiprintf_r+0x1d0>
 801e418:	2b00      	cmp	r3, #0
 801e41a:	d0c6      	beq.n	801e3aa <_vfiprintf_r+0x15a>
 801e41c:	9105      	str	r1, [sp, #20]
 801e41e:	e7c4      	b.n	801e3aa <_vfiprintf_r+0x15a>
 801e420:	fb0c 2101 	mla	r1, ip, r1, r2
 801e424:	4604      	mov	r4, r0
 801e426:	2301      	movs	r3, #1
 801e428:	e7f0      	b.n	801e40c <_vfiprintf_r+0x1bc>
 801e42a:	ab03      	add	r3, sp, #12
 801e42c:	9300      	str	r3, [sp, #0]
 801e42e:	462a      	mov	r2, r5
 801e430:	4b12      	ldr	r3, [pc, #72]	; (801e47c <_vfiprintf_r+0x22c>)
 801e432:	a904      	add	r1, sp, #16
 801e434:	4630      	mov	r0, r6
 801e436:	f3af 8000 	nop.w
 801e43a:	4607      	mov	r7, r0
 801e43c:	1c78      	adds	r0, r7, #1
 801e43e:	d1d6      	bne.n	801e3ee <_vfiprintf_r+0x19e>
 801e440:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801e442:	07d9      	lsls	r1, r3, #31
 801e444:	d405      	bmi.n	801e452 <_vfiprintf_r+0x202>
 801e446:	89ab      	ldrh	r3, [r5, #12]
 801e448:	059a      	lsls	r2, r3, #22
 801e44a:	d402      	bmi.n	801e452 <_vfiprintf_r+0x202>
 801e44c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801e44e:	f7ff fda7 	bl	801dfa0 <__retarget_lock_release_recursive>
 801e452:	89ab      	ldrh	r3, [r5, #12]
 801e454:	065b      	lsls	r3, r3, #25
 801e456:	f53f af1d 	bmi.w	801e294 <_vfiprintf_r+0x44>
 801e45a:	9809      	ldr	r0, [sp, #36]	; 0x24
 801e45c:	e71c      	b.n	801e298 <_vfiprintf_r+0x48>
 801e45e:	ab03      	add	r3, sp, #12
 801e460:	9300      	str	r3, [sp, #0]
 801e462:	462a      	mov	r2, r5
 801e464:	4b05      	ldr	r3, [pc, #20]	; (801e47c <_vfiprintf_r+0x22c>)
 801e466:	a904      	add	r1, sp, #16
 801e468:	4630      	mov	r0, r6
 801e46a:	f000 f879 	bl	801e560 <_printf_i>
 801e46e:	e7e4      	b.n	801e43a <_vfiprintf_r+0x1ea>
 801e470:	08022107 	.word	0x08022107
 801e474:	08022111 	.word	0x08022111
 801e478:	00000000 	.word	0x00000000
 801e47c:	0801e22b 	.word	0x0801e22b
 801e480:	0802210d 	.word	0x0802210d

0801e484 <_printf_common>:
 801e484:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801e488:	4616      	mov	r6, r2
 801e48a:	4699      	mov	r9, r3
 801e48c:	688a      	ldr	r2, [r1, #8]
 801e48e:	690b      	ldr	r3, [r1, #16]
 801e490:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801e494:	4293      	cmp	r3, r2
 801e496:	bfb8      	it	lt
 801e498:	4613      	movlt	r3, r2
 801e49a:	6033      	str	r3, [r6, #0]
 801e49c:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801e4a0:	4607      	mov	r7, r0
 801e4a2:	460c      	mov	r4, r1
 801e4a4:	b10a      	cbz	r2, 801e4aa <_printf_common+0x26>
 801e4a6:	3301      	adds	r3, #1
 801e4a8:	6033      	str	r3, [r6, #0]
 801e4aa:	6823      	ldr	r3, [r4, #0]
 801e4ac:	0699      	lsls	r1, r3, #26
 801e4ae:	bf42      	ittt	mi
 801e4b0:	6833      	ldrmi	r3, [r6, #0]
 801e4b2:	3302      	addmi	r3, #2
 801e4b4:	6033      	strmi	r3, [r6, #0]
 801e4b6:	6825      	ldr	r5, [r4, #0]
 801e4b8:	f015 0506 	ands.w	r5, r5, #6
 801e4bc:	d106      	bne.n	801e4cc <_printf_common+0x48>
 801e4be:	f104 0a19 	add.w	sl, r4, #25
 801e4c2:	68e3      	ldr	r3, [r4, #12]
 801e4c4:	6832      	ldr	r2, [r6, #0]
 801e4c6:	1a9b      	subs	r3, r3, r2
 801e4c8:	42ab      	cmp	r3, r5
 801e4ca:	dc26      	bgt.n	801e51a <_printf_common+0x96>
 801e4cc:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801e4d0:	1e13      	subs	r3, r2, #0
 801e4d2:	6822      	ldr	r2, [r4, #0]
 801e4d4:	bf18      	it	ne
 801e4d6:	2301      	movne	r3, #1
 801e4d8:	0692      	lsls	r2, r2, #26
 801e4da:	d42b      	bmi.n	801e534 <_printf_common+0xb0>
 801e4dc:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801e4e0:	4649      	mov	r1, r9
 801e4e2:	4638      	mov	r0, r7
 801e4e4:	47c0      	blx	r8
 801e4e6:	3001      	adds	r0, #1
 801e4e8:	d01e      	beq.n	801e528 <_printf_common+0xa4>
 801e4ea:	6823      	ldr	r3, [r4, #0]
 801e4ec:	6922      	ldr	r2, [r4, #16]
 801e4ee:	f003 0306 	and.w	r3, r3, #6
 801e4f2:	2b04      	cmp	r3, #4
 801e4f4:	bf02      	ittt	eq
 801e4f6:	68e5      	ldreq	r5, [r4, #12]
 801e4f8:	6833      	ldreq	r3, [r6, #0]
 801e4fa:	1aed      	subeq	r5, r5, r3
 801e4fc:	68a3      	ldr	r3, [r4, #8]
 801e4fe:	bf0c      	ite	eq
 801e500:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801e504:	2500      	movne	r5, #0
 801e506:	4293      	cmp	r3, r2
 801e508:	bfc4      	itt	gt
 801e50a:	1a9b      	subgt	r3, r3, r2
 801e50c:	18ed      	addgt	r5, r5, r3
 801e50e:	2600      	movs	r6, #0
 801e510:	341a      	adds	r4, #26
 801e512:	42b5      	cmp	r5, r6
 801e514:	d11a      	bne.n	801e54c <_printf_common+0xc8>
 801e516:	2000      	movs	r0, #0
 801e518:	e008      	b.n	801e52c <_printf_common+0xa8>
 801e51a:	2301      	movs	r3, #1
 801e51c:	4652      	mov	r2, sl
 801e51e:	4649      	mov	r1, r9
 801e520:	4638      	mov	r0, r7
 801e522:	47c0      	blx	r8
 801e524:	3001      	adds	r0, #1
 801e526:	d103      	bne.n	801e530 <_printf_common+0xac>
 801e528:	f04f 30ff 	mov.w	r0, #4294967295
 801e52c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e530:	3501      	adds	r5, #1
 801e532:	e7c6      	b.n	801e4c2 <_printf_common+0x3e>
 801e534:	18e1      	adds	r1, r4, r3
 801e536:	1c5a      	adds	r2, r3, #1
 801e538:	2030      	movs	r0, #48	; 0x30
 801e53a:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801e53e:	4422      	add	r2, r4
 801e540:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801e544:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801e548:	3302      	adds	r3, #2
 801e54a:	e7c7      	b.n	801e4dc <_printf_common+0x58>
 801e54c:	2301      	movs	r3, #1
 801e54e:	4622      	mov	r2, r4
 801e550:	4649      	mov	r1, r9
 801e552:	4638      	mov	r0, r7
 801e554:	47c0      	blx	r8
 801e556:	3001      	adds	r0, #1
 801e558:	d0e6      	beq.n	801e528 <_printf_common+0xa4>
 801e55a:	3601      	adds	r6, #1
 801e55c:	e7d9      	b.n	801e512 <_printf_common+0x8e>
	...

0801e560 <_printf_i>:
 801e560:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801e564:	7e0f      	ldrb	r7, [r1, #24]
 801e566:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801e568:	2f78      	cmp	r7, #120	; 0x78
 801e56a:	4691      	mov	r9, r2
 801e56c:	4680      	mov	r8, r0
 801e56e:	460c      	mov	r4, r1
 801e570:	469a      	mov	sl, r3
 801e572:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801e576:	d807      	bhi.n	801e588 <_printf_i+0x28>
 801e578:	2f62      	cmp	r7, #98	; 0x62
 801e57a:	d80a      	bhi.n	801e592 <_printf_i+0x32>
 801e57c:	2f00      	cmp	r7, #0
 801e57e:	f000 80d4 	beq.w	801e72a <_printf_i+0x1ca>
 801e582:	2f58      	cmp	r7, #88	; 0x58
 801e584:	f000 80c0 	beq.w	801e708 <_printf_i+0x1a8>
 801e588:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e58c:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801e590:	e03a      	b.n	801e608 <_printf_i+0xa8>
 801e592:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801e596:	2b15      	cmp	r3, #21
 801e598:	d8f6      	bhi.n	801e588 <_printf_i+0x28>
 801e59a:	a101      	add	r1, pc, #4	; (adr r1, 801e5a0 <_printf_i+0x40>)
 801e59c:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801e5a0:	0801e5f9 	.word	0x0801e5f9
 801e5a4:	0801e60d 	.word	0x0801e60d
 801e5a8:	0801e589 	.word	0x0801e589
 801e5ac:	0801e589 	.word	0x0801e589
 801e5b0:	0801e589 	.word	0x0801e589
 801e5b4:	0801e589 	.word	0x0801e589
 801e5b8:	0801e60d 	.word	0x0801e60d
 801e5bc:	0801e589 	.word	0x0801e589
 801e5c0:	0801e589 	.word	0x0801e589
 801e5c4:	0801e589 	.word	0x0801e589
 801e5c8:	0801e589 	.word	0x0801e589
 801e5cc:	0801e711 	.word	0x0801e711
 801e5d0:	0801e639 	.word	0x0801e639
 801e5d4:	0801e6cb 	.word	0x0801e6cb
 801e5d8:	0801e589 	.word	0x0801e589
 801e5dc:	0801e589 	.word	0x0801e589
 801e5e0:	0801e733 	.word	0x0801e733
 801e5e4:	0801e589 	.word	0x0801e589
 801e5e8:	0801e639 	.word	0x0801e639
 801e5ec:	0801e589 	.word	0x0801e589
 801e5f0:	0801e589 	.word	0x0801e589
 801e5f4:	0801e6d3 	.word	0x0801e6d3
 801e5f8:	682b      	ldr	r3, [r5, #0]
 801e5fa:	1d1a      	adds	r2, r3, #4
 801e5fc:	681b      	ldr	r3, [r3, #0]
 801e5fe:	602a      	str	r2, [r5, #0]
 801e600:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801e604:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801e608:	2301      	movs	r3, #1
 801e60a:	e09f      	b.n	801e74c <_printf_i+0x1ec>
 801e60c:	6820      	ldr	r0, [r4, #0]
 801e60e:	682b      	ldr	r3, [r5, #0]
 801e610:	0607      	lsls	r7, r0, #24
 801e612:	f103 0104 	add.w	r1, r3, #4
 801e616:	6029      	str	r1, [r5, #0]
 801e618:	d501      	bpl.n	801e61e <_printf_i+0xbe>
 801e61a:	681e      	ldr	r6, [r3, #0]
 801e61c:	e003      	b.n	801e626 <_printf_i+0xc6>
 801e61e:	0646      	lsls	r6, r0, #25
 801e620:	d5fb      	bpl.n	801e61a <_printf_i+0xba>
 801e622:	f9b3 6000 	ldrsh.w	r6, [r3]
 801e626:	2e00      	cmp	r6, #0
 801e628:	da03      	bge.n	801e632 <_printf_i+0xd2>
 801e62a:	232d      	movs	r3, #45	; 0x2d
 801e62c:	4276      	negs	r6, r6
 801e62e:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e632:	485a      	ldr	r0, [pc, #360]	; (801e79c <_printf_i+0x23c>)
 801e634:	230a      	movs	r3, #10
 801e636:	e012      	b.n	801e65e <_printf_i+0xfe>
 801e638:	682b      	ldr	r3, [r5, #0]
 801e63a:	6820      	ldr	r0, [r4, #0]
 801e63c:	1d19      	adds	r1, r3, #4
 801e63e:	6029      	str	r1, [r5, #0]
 801e640:	0605      	lsls	r5, r0, #24
 801e642:	d501      	bpl.n	801e648 <_printf_i+0xe8>
 801e644:	681e      	ldr	r6, [r3, #0]
 801e646:	e002      	b.n	801e64e <_printf_i+0xee>
 801e648:	0641      	lsls	r1, r0, #25
 801e64a:	d5fb      	bpl.n	801e644 <_printf_i+0xe4>
 801e64c:	881e      	ldrh	r6, [r3, #0]
 801e64e:	4853      	ldr	r0, [pc, #332]	; (801e79c <_printf_i+0x23c>)
 801e650:	2f6f      	cmp	r7, #111	; 0x6f
 801e652:	bf0c      	ite	eq
 801e654:	2308      	moveq	r3, #8
 801e656:	230a      	movne	r3, #10
 801e658:	2100      	movs	r1, #0
 801e65a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801e65e:	6865      	ldr	r5, [r4, #4]
 801e660:	60a5      	str	r5, [r4, #8]
 801e662:	2d00      	cmp	r5, #0
 801e664:	bfa2      	ittt	ge
 801e666:	6821      	ldrge	r1, [r4, #0]
 801e668:	f021 0104 	bicge.w	r1, r1, #4
 801e66c:	6021      	strge	r1, [r4, #0]
 801e66e:	b90e      	cbnz	r6, 801e674 <_printf_i+0x114>
 801e670:	2d00      	cmp	r5, #0
 801e672:	d04b      	beq.n	801e70c <_printf_i+0x1ac>
 801e674:	4615      	mov	r5, r2
 801e676:	fbb6 f1f3 	udiv	r1, r6, r3
 801e67a:	fb03 6711 	mls	r7, r3, r1, r6
 801e67e:	5dc7      	ldrb	r7, [r0, r7]
 801e680:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801e684:	4637      	mov	r7, r6
 801e686:	42bb      	cmp	r3, r7
 801e688:	460e      	mov	r6, r1
 801e68a:	d9f4      	bls.n	801e676 <_printf_i+0x116>
 801e68c:	2b08      	cmp	r3, #8
 801e68e:	d10b      	bne.n	801e6a8 <_printf_i+0x148>
 801e690:	6823      	ldr	r3, [r4, #0]
 801e692:	07de      	lsls	r6, r3, #31
 801e694:	d508      	bpl.n	801e6a8 <_printf_i+0x148>
 801e696:	6923      	ldr	r3, [r4, #16]
 801e698:	6861      	ldr	r1, [r4, #4]
 801e69a:	4299      	cmp	r1, r3
 801e69c:	bfde      	ittt	le
 801e69e:	2330      	movle	r3, #48	; 0x30
 801e6a0:	f805 3c01 	strble.w	r3, [r5, #-1]
 801e6a4:	f105 35ff 	addle.w	r5, r5, #4294967295
 801e6a8:	1b52      	subs	r2, r2, r5
 801e6aa:	6122      	str	r2, [r4, #16]
 801e6ac:	f8cd a000 	str.w	sl, [sp]
 801e6b0:	464b      	mov	r3, r9
 801e6b2:	aa03      	add	r2, sp, #12
 801e6b4:	4621      	mov	r1, r4
 801e6b6:	4640      	mov	r0, r8
 801e6b8:	f7ff fee4 	bl	801e484 <_printf_common>
 801e6bc:	3001      	adds	r0, #1
 801e6be:	d14a      	bne.n	801e756 <_printf_i+0x1f6>
 801e6c0:	f04f 30ff 	mov.w	r0, #4294967295
 801e6c4:	b004      	add	sp, #16
 801e6c6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801e6ca:	6823      	ldr	r3, [r4, #0]
 801e6cc:	f043 0320 	orr.w	r3, r3, #32
 801e6d0:	6023      	str	r3, [r4, #0]
 801e6d2:	4833      	ldr	r0, [pc, #204]	; (801e7a0 <_printf_i+0x240>)
 801e6d4:	2778      	movs	r7, #120	; 0x78
 801e6d6:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801e6da:	6823      	ldr	r3, [r4, #0]
 801e6dc:	6829      	ldr	r1, [r5, #0]
 801e6de:	061f      	lsls	r7, r3, #24
 801e6e0:	f851 6b04 	ldr.w	r6, [r1], #4
 801e6e4:	d402      	bmi.n	801e6ec <_printf_i+0x18c>
 801e6e6:	065f      	lsls	r7, r3, #25
 801e6e8:	bf48      	it	mi
 801e6ea:	b2b6      	uxthmi	r6, r6
 801e6ec:	07df      	lsls	r7, r3, #31
 801e6ee:	bf48      	it	mi
 801e6f0:	f043 0320 	orrmi.w	r3, r3, #32
 801e6f4:	6029      	str	r1, [r5, #0]
 801e6f6:	bf48      	it	mi
 801e6f8:	6023      	strmi	r3, [r4, #0]
 801e6fa:	b91e      	cbnz	r6, 801e704 <_printf_i+0x1a4>
 801e6fc:	6823      	ldr	r3, [r4, #0]
 801e6fe:	f023 0320 	bic.w	r3, r3, #32
 801e702:	6023      	str	r3, [r4, #0]
 801e704:	2310      	movs	r3, #16
 801e706:	e7a7      	b.n	801e658 <_printf_i+0xf8>
 801e708:	4824      	ldr	r0, [pc, #144]	; (801e79c <_printf_i+0x23c>)
 801e70a:	e7e4      	b.n	801e6d6 <_printf_i+0x176>
 801e70c:	4615      	mov	r5, r2
 801e70e:	e7bd      	b.n	801e68c <_printf_i+0x12c>
 801e710:	682b      	ldr	r3, [r5, #0]
 801e712:	6826      	ldr	r6, [r4, #0]
 801e714:	6961      	ldr	r1, [r4, #20]
 801e716:	1d18      	adds	r0, r3, #4
 801e718:	6028      	str	r0, [r5, #0]
 801e71a:	0635      	lsls	r5, r6, #24
 801e71c:	681b      	ldr	r3, [r3, #0]
 801e71e:	d501      	bpl.n	801e724 <_printf_i+0x1c4>
 801e720:	6019      	str	r1, [r3, #0]
 801e722:	e002      	b.n	801e72a <_printf_i+0x1ca>
 801e724:	0670      	lsls	r0, r6, #25
 801e726:	d5fb      	bpl.n	801e720 <_printf_i+0x1c0>
 801e728:	8019      	strh	r1, [r3, #0]
 801e72a:	2300      	movs	r3, #0
 801e72c:	6123      	str	r3, [r4, #16]
 801e72e:	4615      	mov	r5, r2
 801e730:	e7bc      	b.n	801e6ac <_printf_i+0x14c>
 801e732:	682b      	ldr	r3, [r5, #0]
 801e734:	1d1a      	adds	r2, r3, #4
 801e736:	602a      	str	r2, [r5, #0]
 801e738:	681d      	ldr	r5, [r3, #0]
 801e73a:	6862      	ldr	r2, [r4, #4]
 801e73c:	2100      	movs	r1, #0
 801e73e:	4628      	mov	r0, r5
 801e740:	f7e1 fd66 	bl	8000210 <memchr>
 801e744:	b108      	cbz	r0, 801e74a <_printf_i+0x1ea>
 801e746:	1b40      	subs	r0, r0, r5
 801e748:	6060      	str	r0, [r4, #4]
 801e74a:	6863      	ldr	r3, [r4, #4]
 801e74c:	6123      	str	r3, [r4, #16]
 801e74e:	2300      	movs	r3, #0
 801e750:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801e754:	e7aa      	b.n	801e6ac <_printf_i+0x14c>
 801e756:	6923      	ldr	r3, [r4, #16]
 801e758:	462a      	mov	r2, r5
 801e75a:	4649      	mov	r1, r9
 801e75c:	4640      	mov	r0, r8
 801e75e:	47d0      	blx	sl
 801e760:	3001      	adds	r0, #1
 801e762:	d0ad      	beq.n	801e6c0 <_printf_i+0x160>
 801e764:	6823      	ldr	r3, [r4, #0]
 801e766:	079b      	lsls	r3, r3, #30
 801e768:	d413      	bmi.n	801e792 <_printf_i+0x232>
 801e76a:	68e0      	ldr	r0, [r4, #12]
 801e76c:	9b03      	ldr	r3, [sp, #12]
 801e76e:	4298      	cmp	r0, r3
 801e770:	bfb8      	it	lt
 801e772:	4618      	movlt	r0, r3
 801e774:	e7a6      	b.n	801e6c4 <_printf_i+0x164>
 801e776:	2301      	movs	r3, #1
 801e778:	4632      	mov	r2, r6
 801e77a:	4649      	mov	r1, r9
 801e77c:	4640      	mov	r0, r8
 801e77e:	47d0      	blx	sl
 801e780:	3001      	adds	r0, #1
 801e782:	d09d      	beq.n	801e6c0 <_printf_i+0x160>
 801e784:	3501      	adds	r5, #1
 801e786:	68e3      	ldr	r3, [r4, #12]
 801e788:	9903      	ldr	r1, [sp, #12]
 801e78a:	1a5b      	subs	r3, r3, r1
 801e78c:	42ab      	cmp	r3, r5
 801e78e:	dcf2      	bgt.n	801e776 <_printf_i+0x216>
 801e790:	e7eb      	b.n	801e76a <_printf_i+0x20a>
 801e792:	2500      	movs	r5, #0
 801e794:	f104 0619 	add.w	r6, r4, #25
 801e798:	e7f5      	b.n	801e786 <_printf_i+0x226>
 801e79a:	bf00      	nop
 801e79c:	08022118 	.word	0x08022118
 801e7a0:	08022129 	.word	0x08022129

0801e7a4 <__sflush_r>:
 801e7a4:	898a      	ldrh	r2, [r1, #12]
 801e7a6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801e7aa:	4605      	mov	r5, r0
 801e7ac:	0710      	lsls	r0, r2, #28
 801e7ae:	460c      	mov	r4, r1
 801e7b0:	d458      	bmi.n	801e864 <__sflush_r+0xc0>
 801e7b2:	684b      	ldr	r3, [r1, #4]
 801e7b4:	2b00      	cmp	r3, #0
 801e7b6:	dc05      	bgt.n	801e7c4 <__sflush_r+0x20>
 801e7b8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801e7ba:	2b00      	cmp	r3, #0
 801e7bc:	dc02      	bgt.n	801e7c4 <__sflush_r+0x20>
 801e7be:	2000      	movs	r0, #0
 801e7c0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801e7c4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e7c6:	2e00      	cmp	r6, #0
 801e7c8:	d0f9      	beq.n	801e7be <__sflush_r+0x1a>
 801e7ca:	2300      	movs	r3, #0
 801e7cc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801e7d0:	682f      	ldr	r7, [r5, #0]
 801e7d2:	6a21      	ldr	r1, [r4, #32]
 801e7d4:	602b      	str	r3, [r5, #0]
 801e7d6:	d032      	beq.n	801e83e <__sflush_r+0x9a>
 801e7d8:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801e7da:	89a3      	ldrh	r3, [r4, #12]
 801e7dc:	075a      	lsls	r2, r3, #29
 801e7de:	d505      	bpl.n	801e7ec <__sflush_r+0x48>
 801e7e0:	6863      	ldr	r3, [r4, #4]
 801e7e2:	1ac0      	subs	r0, r0, r3
 801e7e4:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801e7e6:	b10b      	cbz	r3, 801e7ec <__sflush_r+0x48>
 801e7e8:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801e7ea:	1ac0      	subs	r0, r0, r3
 801e7ec:	2300      	movs	r3, #0
 801e7ee:	4602      	mov	r2, r0
 801e7f0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801e7f2:	6a21      	ldr	r1, [r4, #32]
 801e7f4:	4628      	mov	r0, r5
 801e7f6:	47b0      	blx	r6
 801e7f8:	1c43      	adds	r3, r0, #1
 801e7fa:	89a3      	ldrh	r3, [r4, #12]
 801e7fc:	d106      	bne.n	801e80c <__sflush_r+0x68>
 801e7fe:	6829      	ldr	r1, [r5, #0]
 801e800:	291d      	cmp	r1, #29
 801e802:	d82b      	bhi.n	801e85c <__sflush_r+0xb8>
 801e804:	4a29      	ldr	r2, [pc, #164]	; (801e8ac <__sflush_r+0x108>)
 801e806:	410a      	asrs	r2, r1
 801e808:	07d6      	lsls	r6, r2, #31
 801e80a:	d427      	bmi.n	801e85c <__sflush_r+0xb8>
 801e80c:	2200      	movs	r2, #0
 801e80e:	6062      	str	r2, [r4, #4]
 801e810:	04d9      	lsls	r1, r3, #19
 801e812:	6922      	ldr	r2, [r4, #16]
 801e814:	6022      	str	r2, [r4, #0]
 801e816:	d504      	bpl.n	801e822 <__sflush_r+0x7e>
 801e818:	1c42      	adds	r2, r0, #1
 801e81a:	d101      	bne.n	801e820 <__sflush_r+0x7c>
 801e81c:	682b      	ldr	r3, [r5, #0]
 801e81e:	b903      	cbnz	r3, 801e822 <__sflush_r+0x7e>
 801e820:	6560      	str	r0, [r4, #84]	; 0x54
 801e822:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e824:	602f      	str	r7, [r5, #0]
 801e826:	2900      	cmp	r1, #0
 801e828:	d0c9      	beq.n	801e7be <__sflush_r+0x1a>
 801e82a:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e82e:	4299      	cmp	r1, r3
 801e830:	d002      	beq.n	801e838 <__sflush_r+0x94>
 801e832:	4628      	mov	r0, r5
 801e834:	f7ff fbe2 	bl	801dffc <_free_r>
 801e838:	2000      	movs	r0, #0
 801e83a:	6360      	str	r0, [r4, #52]	; 0x34
 801e83c:	e7c0      	b.n	801e7c0 <__sflush_r+0x1c>
 801e83e:	2301      	movs	r3, #1
 801e840:	4628      	mov	r0, r5
 801e842:	47b0      	blx	r6
 801e844:	1c41      	adds	r1, r0, #1
 801e846:	d1c8      	bne.n	801e7da <__sflush_r+0x36>
 801e848:	682b      	ldr	r3, [r5, #0]
 801e84a:	2b00      	cmp	r3, #0
 801e84c:	d0c5      	beq.n	801e7da <__sflush_r+0x36>
 801e84e:	2b1d      	cmp	r3, #29
 801e850:	d001      	beq.n	801e856 <__sflush_r+0xb2>
 801e852:	2b16      	cmp	r3, #22
 801e854:	d101      	bne.n	801e85a <__sflush_r+0xb6>
 801e856:	602f      	str	r7, [r5, #0]
 801e858:	e7b1      	b.n	801e7be <__sflush_r+0x1a>
 801e85a:	89a3      	ldrh	r3, [r4, #12]
 801e85c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e860:	81a3      	strh	r3, [r4, #12]
 801e862:	e7ad      	b.n	801e7c0 <__sflush_r+0x1c>
 801e864:	690f      	ldr	r7, [r1, #16]
 801e866:	2f00      	cmp	r7, #0
 801e868:	d0a9      	beq.n	801e7be <__sflush_r+0x1a>
 801e86a:	0793      	lsls	r3, r2, #30
 801e86c:	680e      	ldr	r6, [r1, #0]
 801e86e:	bf08      	it	eq
 801e870:	694b      	ldreq	r3, [r1, #20]
 801e872:	600f      	str	r7, [r1, #0]
 801e874:	bf18      	it	ne
 801e876:	2300      	movne	r3, #0
 801e878:	eba6 0807 	sub.w	r8, r6, r7
 801e87c:	608b      	str	r3, [r1, #8]
 801e87e:	f1b8 0f00 	cmp.w	r8, #0
 801e882:	dd9c      	ble.n	801e7be <__sflush_r+0x1a>
 801e884:	6a21      	ldr	r1, [r4, #32]
 801e886:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801e888:	4643      	mov	r3, r8
 801e88a:	463a      	mov	r2, r7
 801e88c:	4628      	mov	r0, r5
 801e88e:	47b0      	blx	r6
 801e890:	2800      	cmp	r0, #0
 801e892:	dc06      	bgt.n	801e8a2 <__sflush_r+0xfe>
 801e894:	89a3      	ldrh	r3, [r4, #12]
 801e896:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e89a:	81a3      	strh	r3, [r4, #12]
 801e89c:	f04f 30ff 	mov.w	r0, #4294967295
 801e8a0:	e78e      	b.n	801e7c0 <__sflush_r+0x1c>
 801e8a2:	4407      	add	r7, r0
 801e8a4:	eba8 0800 	sub.w	r8, r8, r0
 801e8a8:	e7e9      	b.n	801e87e <__sflush_r+0xda>
 801e8aa:	bf00      	nop
 801e8ac:	dfbffffe 	.word	0xdfbffffe

0801e8b0 <_fflush_r>:
 801e8b0:	b538      	push	{r3, r4, r5, lr}
 801e8b2:	690b      	ldr	r3, [r1, #16]
 801e8b4:	4605      	mov	r5, r0
 801e8b6:	460c      	mov	r4, r1
 801e8b8:	b913      	cbnz	r3, 801e8c0 <_fflush_r+0x10>
 801e8ba:	2500      	movs	r5, #0
 801e8bc:	4628      	mov	r0, r5
 801e8be:	bd38      	pop	{r3, r4, r5, pc}
 801e8c0:	b118      	cbz	r0, 801e8ca <_fflush_r+0x1a>
 801e8c2:	6a03      	ldr	r3, [r0, #32]
 801e8c4:	b90b      	cbnz	r3, 801e8ca <_fflush_r+0x1a>
 801e8c6:	f7ff fa05 	bl	801dcd4 <__sinit>
 801e8ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e8ce:	2b00      	cmp	r3, #0
 801e8d0:	d0f3      	beq.n	801e8ba <_fflush_r+0xa>
 801e8d2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e8d4:	07d0      	lsls	r0, r2, #31
 801e8d6:	d404      	bmi.n	801e8e2 <_fflush_r+0x32>
 801e8d8:	0599      	lsls	r1, r3, #22
 801e8da:	d402      	bmi.n	801e8e2 <_fflush_r+0x32>
 801e8dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e8de:	f7ff fb5e 	bl	801df9e <__retarget_lock_acquire_recursive>
 801e8e2:	4628      	mov	r0, r5
 801e8e4:	4621      	mov	r1, r4
 801e8e6:	f7ff ff5d 	bl	801e7a4 <__sflush_r>
 801e8ea:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e8ec:	07da      	lsls	r2, r3, #31
 801e8ee:	4605      	mov	r5, r0
 801e8f0:	d4e4      	bmi.n	801e8bc <_fflush_r+0xc>
 801e8f2:	89a3      	ldrh	r3, [r4, #12]
 801e8f4:	059b      	lsls	r3, r3, #22
 801e8f6:	d4e1      	bmi.n	801e8bc <_fflush_r+0xc>
 801e8f8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e8fa:	f7ff fb51 	bl	801dfa0 <__retarget_lock_release_recursive>
 801e8fe:	e7dd      	b.n	801e8bc <_fflush_r+0xc>

0801e900 <fiprintf>:
 801e900:	b40e      	push	{r1, r2, r3}
 801e902:	b503      	push	{r0, r1, lr}
 801e904:	4601      	mov	r1, r0
 801e906:	ab03      	add	r3, sp, #12
 801e908:	4805      	ldr	r0, [pc, #20]	; (801e920 <fiprintf+0x20>)
 801e90a:	f853 2b04 	ldr.w	r2, [r3], #4
 801e90e:	6800      	ldr	r0, [r0, #0]
 801e910:	9301      	str	r3, [sp, #4]
 801e912:	f7ff fc9d 	bl	801e250 <_vfiprintf_r>
 801e916:	b002      	add	sp, #8
 801e918:	f85d eb04 	ldr.w	lr, [sp], #4
 801e91c:	b003      	add	sp, #12
 801e91e:	4770      	bx	lr
 801e920:	200001a0 	.word	0x200001a0

0801e924 <__swbuf_r>:
 801e924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e926:	460e      	mov	r6, r1
 801e928:	4614      	mov	r4, r2
 801e92a:	4605      	mov	r5, r0
 801e92c:	b118      	cbz	r0, 801e936 <__swbuf_r+0x12>
 801e92e:	6a03      	ldr	r3, [r0, #32]
 801e930:	b90b      	cbnz	r3, 801e936 <__swbuf_r+0x12>
 801e932:	f7ff f9cf 	bl	801dcd4 <__sinit>
 801e936:	69a3      	ldr	r3, [r4, #24]
 801e938:	60a3      	str	r3, [r4, #8]
 801e93a:	89a3      	ldrh	r3, [r4, #12]
 801e93c:	071a      	lsls	r2, r3, #28
 801e93e:	d525      	bpl.n	801e98c <__swbuf_r+0x68>
 801e940:	6923      	ldr	r3, [r4, #16]
 801e942:	b31b      	cbz	r3, 801e98c <__swbuf_r+0x68>
 801e944:	6823      	ldr	r3, [r4, #0]
 801e946:	6922      	ldr	r2, [r4, #16]
 801e948:	1a98      	subs	r0, r3, r2
 801e94a:	6963      	ldr	r3, [r4, #20]
 801e94c:	b2f6      	uxtb	r6, r6
 801e94e:	4283      	cmp	r3, r0
 801e950:	4637      	mov	r7, r6
 801e952:	dc04      	bgt.n	801e95e <__swbuf_r+0x3a>
 801e954:	4621      	mov	r1, r4
 801e956:	4628      	mov	r0, r5
 801e958:	f7ff ffaa 	bl	801e8b0 <_fflush_r>
 801e95c:	b9e0      	cbnz	r0, 801e998 <__swbuf_r+0x74>
 801e95e:	68a3      	ldr	r3, [r4, #8]
 801e960:	3b01      	subs	r3, #1
 801e962:	60a3      	str	r3, [r4, #8]
 801e964:	6823      	ldr	r3, [r4, #0]
 801e966:	1c5a      	adds	r2, r3, #1
 801e968:	6022      	str	r2, [r4, #0]
 801e96a:	701e      	strb	r6, [r3, #0]
 801e96c:	6962      	ldr	r2, [r4, #20]
 801e96e:	1c43      	adds	r3, r0, #1
 801e970:	429a      	cmp	r2, r3
 801e972:	d004      	beq.n	801e97e <__swbuf_r+0x5a>
 801e974:	89a3      	ldrh	r3, [r4, #12]
 801e976:	07db      	lsls	r3, r3, #31
 801e978:	d506      	bpl.n	801e988 <__swbuf_r+0x64>
 801e97a:	2e0a      	cmp	r6, #10
 801e97c:	d104      	bne.n	801e988 <__swbuf_r+0x64>
 801e97e:	4621      	mov	r1, r4
 801e980:	4628      	mov	r0, r5
 801e982:	f7ff ff95 	bl	801e8b0 <_fflush_r>
 801e986:	b938      	cbnz	r0, 801e998 <__swbuf_r+0x74>
 801e988:	4638      	mov	r0, r7
 801e98a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e98c:	4621      	mov	r1, r4
 801e98e:	4628      	mov	r0, r5
 801e990:	f000 f806 	bl	801e9a0 <__swsetup_r>
 801e994:	2800      	cmp	r0, #0
 801e996:	d0d5      	beq.n	801e944 <__swbuf_r+0x20>
 801e998:	f04f 37ff 	mov.w	r7, #4294967295
 801e99c:	e7f4      	b.n	801e988 <__swbuf_r+0x64>
	...

0801e9a0 <__swsetup_r>:
 801e9a0:	b538      	push	{r3, r4, r5, lr}
 801e9a2:	4b2a      	ldr	r3, [pc, #168]	; (801ea4c <__swsetup_r+0xac>)
 801e9a4:	4605      	mov	r5, r0
 801e9a6:	6818      	ldr	r0, [r3, #0]
 801e9a8:	460c      	mov	r4, r1
 801e9aa:	b118      	cbz	r0, 801e9b4 <__swsetup_r+0x14>
 801e9ac:	6a03      	ldr	r3, [r0, #32]
 801e9ae:	b90b      	cbnz	r3, 801e9b4 <__swsetup_r+0x14>
 801e9b0:	f7ff f990 	bl	801dcd4 <__sinit>
 801e9b4:	89a3      	ldrh	r3, [r4, #12]
 801e9b6:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e9ba:	0718      	lsls	r0, r3, #28
 801e9bc:	d422      	bmi.n	801ea04 <__swsetup_r+0x64>
 801e9be:	06d9      	lsls	r1, r3, #27
 801e9c0:	d407      	bmi.n	801e9d2 <__swsetup_r+0x32>
 801e9c2:	2309      	movs	r3, #9
 801e9c4:	602b      	str	r3, [r5, #0]
 801e9c6:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801e9ca:	81a3      	strh	r3, [r4, #12]
 801e9cc:	f04f 30ff 	mov.w	r0, #4294967295
 801e9d0:	e034      	b.n	801ea3c <__swsetup_r+0x9c>
 801e9d2:	0758      	lsls	r0, r3, #29
 801e9d4:	d512      	bpl.n	801e9fc <__swsetup_r+0x5c>
 801e9d6:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e9d8:	b141      	cbz	r1, 801e9ec <__swsetup_r+0x4c>
 801e9da:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e9de:	4299      	cmp	r1, r3
 801e9e0:	d002      	beq.n	801e9e8 <__swsetup_r+0x48>
 801e9e2:	4628      	mov	r0, r5
 801e9e4:	f7ff fb0a 	bl	801dffc <_free_r>
 801e9e8:	2300      	movs	r3, #0
 801e9ea:	6363      	str	r3, [r4, #52]	; 0x34
 801e9ec:	89a3      	ldrh	r3, [r4, #12]
 801e9ee:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e9f2:	81a3      	strh	r3, [r4, #12]
 801e9f4:	2300      	movs	r3, #0
 801e9f6:	6063      	str	r3, [r4, #4]
 801e9f8:	6923      	ldr	r3, [r4, #16]
 801e9fa:	6023      	str	r3, [r4, #0]
 801e9fc:	89a3      	ldrh	r3, [r4, #12]
 801e9fe:	f043 0308 	orr.w	r3, r3, #8
 801ea02:	81a3      	strh	r3, [r4, #12]
 801ea04:	6923      	ldr	r3, [r4, #16]
 801ea06:	b94b      	cbnz	r3, 801ea1c <__swsetup_r+0x7c>
 801ea08:	89a3      	ldrh	r3, [r4, #12]
 801ea0a:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801ea0e:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801ea12:	d003      	beq.n	801ea1c <__swsetup_r+0x7c>
 801ea14:	4621      	mov	r1, r4
 801ea16:	4628      	mov	r0, r5
 801ea18:	f000 f857 	bl	801eaca <__smakebuf_r>
 801ea1c:	89a0      	ldrh	r0, [r4, #12]
 801ea1e:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801ea22:	f010 0301 	ands.w	r3, r0, #1
 801ea26:	d00a      	beq.n	801ea3e <__swsetup_r+0x9e>
 801ea28:	2300      	movs	r3, #0
 801ea2a:	60a3      	str	r3, [r4, #8]
 801ea2c:	6963      	ldr	r3, [r4, #20]
 801ea2e:	425b      	negs	r3, r3
 801ea30:	61a3      	str	r3, [r4, #24]
 801ea32:	6923      	ldr	r3, [r4, #16]
 801ea34:	b943      	cbnz	r3, 801ea48 <__swsetup_r+0xa8>
 801ea36:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801ea3a:	d1c4      	bne.n	801e9c6 <__swsetup_r+0x26>
 801ea3c:	bd38      	pop	{r3, r4, r5, pc}
 801ea3e:	0781      	lsls	r1, r0, #30
 801ea40:	bf58      	it	pl
 801ea42:	6963      	ldrpl	r3, [r4, #20]
 801ea44:	60a3      	str	r3, [r4, #8]
 801ea46:	e7f4      	b.n	801ea32 <__swsetup_r+0x92>
 801ea48:	2000      	movs	r0, #0
 801ea4a:	e7f7      	b.n	801ea3c <__swsetup_r+0x9c>
 801ea4c:	200001a0 	.word	0x200001a0

0801ea50 <_sbrk_r>:
 801ea50:	b538      	push	{r3, r4, r5, lr}
 801ea52:	4d06      	ldr	r5, [pc, #24]	; (801ea6c <_sbrk_r+0x1c>)
 801ea54:	2300      	movs	r3, #0
 801ea56:	4604      	mov	r4, r0
 801ea58:	4608      	mov	r0, r1
 801ea5a:	602b      	str	r3, [r5, #0]
 801ea5c:	f7e3 fce8 	bl	8002430 <_sbrk>
 801ea60:	1c43      	adds	r3, r0, #1
 801ea62:	d102      	bne.n	801ea6a <_sbrk_r+0x1a>
 801ea64:	682b      	ldr	r3, [r5, #0]
 801ea66:	b103      	cbz	r3, 801ea6a <_sbrk_r+0x1a>
 801ea68:	6023      	str	r3, [r4, #0]
 801ea6a:	bd38      	pop	{r3, r4, r5, pc}
 801ea6c:	20024360 	.word	0x20024360

0801ea70 <abort>:
 801ea70:	b508      	push	{r3, lr}
 801ea72:	2006      	movs	r0, #6
 801ea74:	f000 f88e 	bl	801eb94 <raise>
 801ea78:	2001      	movs	r0, #1
 801ea7a:	f7e3 fc61 	bl	8002340 <_exit>

0801ea7e <__swhatbuf_r>:
 801ea7e:	b570      	push	{r4, r5, r6, lr}
 801ea80:	460c      	mov	r4, r1
 801ea82:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801ea86:	2900      	cmp	r1, #0
 801ea88:	b096      	sub	sp, #88	; 0x58
 801ea8a:	4615      	mov	r5, r2
 801ea8c:	461e      	mov	r6, r3
 801ea8e:	da0d      	bge.n	801eaac <__swhatbuf_r+0x2e>
 801ea90:	89a3      	ldrh	r3, [r4, #12]
 801ea92:	f013 0f80 	tst.w	r3, #128	; 0x80
 801ea96:	f04f 0100 	mov.w	r1, #0
 801ea9a:	bf0c      	ite	eq
 801ea9c:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801eaa0:	2340      	movne	r3, #64	; 0x40
 801eaa2:	2000      	movs	r0, #0
 801eaa4:	6031      	str	r1, [r6, #0]
 801eaa6:	602b      	str	r3, [r5, #0]
 801eaa8:	b016      	add	sp, #88	; 0x58
 801eaaa:	bd70      	pop	{r4, r5, r6, pc}
 801eaac:	466a      	mov	r2, sp
 801eaae:	f000 f879 	bl	801eba4 <_fstat_r>
 801eab2:	2800      	cmp	r0, #0
 801eab4:	dbec      	blt.n	801ea90 <__swhatbuf_r+0x12>
 801eab6:	9901      	ldr	r1, [sp, #4]
 801eab8:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801eabc:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801eac0:	4259      	negs	r1, r3
 801eac2:	4159      	adcs	r1, r3
 801eac4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801eac8:	e7eb      	b.n	801eaa2 <__swhatbuf_r+0x24>

0801eaca <__smakebuf_r>:
 801eaca:	898b      	ldrh	r3, [r1, #12]
 801eacc:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801eace:	079d      	lsls	r5, r3, #30
 801ead0:	4606      	mov	r6, r0
 801ead2:	460c      	mov	r4, r1
 801ead4:	d507      	bpl.n	801eae6 <__smakebuf_r+0x1c>
 801ead6:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801eada:	6023      	str	r3, [r4, #0]
 801eadc:	6123      	str	r3, [r4, #16]
 801eade:	2301      	movs	r3, #1
 801eae0:	6163      	str	r3, [r4, #20]
 801eae2:	b002      	add	sp, #8
 801eae4:	bd70      	pop	{r4, r5, r6, pc}
 801eae6:	ab01      	add	r3, sp, #4
 801eae8:	466a      	mov	r2, sp
 801eaea:	f7ff ffc8 	bl	801ea7e <__swhatbuf_r>
 801eaee:	9900      	ldr	r1, [sp, #0]
 801eaf0:	4605      	mov	r5, r0
 801eaf2:	4630      	mov	r0, r6
 801eaf4:	f7ff faf6 	bl	801e0e4 <_malloc_r>
 801eaf8:	b948      	cbnz	r0, 801eb0e <__smakebuf_r+0x44>
 801eafa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801eafe:	059a      	lsls	r2, r3, #22
 801eb00:	d4ef      	bmi.n	801eae2 <__smakebuf_r+0x18>
 801eb02:	f023 0303 	bic.w	r3, r3, #3
 801eb06:	f043 0302 	orr.w	r3, r3, #2
 801eb0a:	81a3      	strh	r3, [r4, #12]
 801eb0c:	e7e3      	b.n	801ead6 <__smakebuf_r+0xc>
 801eb0e:	89a3      	ldrh	r3, [r4, #12]
 801eb10:	6020      	str	r0, [r4, #0]
 801eb12:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801eb16:	81a3      	strh	r3, [r4, #12]
 801eb18:	9b00      	ldr	r3, [sp, #0]
 801eb1a:	6163      	str	r3, [r4, #20]
 801eb1c:	9b01      	ldr	r3, [sp, #4]
 801eb1e:	6120      	str	r0, [r4, #16]
 801eb20:	b15b      	cbz	r3, 801eb3a <__smakebuf_r+0x70>
 801eb22:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801eb26:	4630      	mov	r0, r6
 801eb28:	f000 f84e 	bl	801ebc8 <_isatty_r>
 801eb2c:	b128      	cbz	r0, 801eb3a <__smakebuf_r+0x70>
 801eb2e:	89a3      	ldrh	r3, [r4, #12]
 801eb30:	f023 0303 	bic.w	r3, r3, #3
 801eb34:	f043 0301 	orr.w	r3, r3, #1
 801eb38:	81a3      	strh	r3, [r4, #12]
 801eb3a:	89a3      	ldrh	r3, [r4, #12]
 801eb3c:	431d      	orrs	r5, r3
 801eb3e:	81a5      	strh	r5, [r4, #12]
 801eb40:	e7cf      	b.n	801eae2 <__smakebuf_r+0x18>

0801eb42 <_raise_r>:
 801eb42:	291f      	cmp	r1, #31
 801eb44:	b538      	push	{r3, r4, r5, lr}
 801eb46:	4604      	mov	r4, r0
 801eb48:	460d      	mov	r5, r1
 801eb4a:	d904      	bls.n	801eb56 <_raise_r+0x14>
 801eb4c:	2316      	movs	r3, #22
 801eb4e:	6003      	str	r3, [r0, #0]
 801eb50:	f04f 30ff 	mov.w	r0, #4294967295
 801eb54:	bd38      	pop	{r3, r4, r5, pc}
 801eb56:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801eb58:	b112      	cbz	r2, 801eb60 <_raise_r+0x1e>
 801eb5a:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801eb5e:	b94b      	cbnz	r3, 801eb74 <_raise_r+0x32>
 801eb60:	4620      	mov	r0, r4
 801eb62:	f000 f853 	bl	801ec0c <_getpid_r>
 801eb66:	462a      	mov	r2, r5
 801eb68:	4601      	mov	r1, r0
 801eb6a:	4620      	mov	r0, r4
 801eb6c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801eb70:	f000 b83a 	b.w	801ebe8 <_kill_r>
 801eb74:	2b01      	cmp	r3, #1
 801eb76:	d00a      	beq.n	801eb8e <_raise_r+0x4c>
 801eb78:	1c59      	adds	r1, r3, #1
 801eb7a:	d103      	bne.n	801eb84 <_raise_r+0x42>
 801eb7c:	2316      	movs	r3, #22
 801eb7e:	6003      	str	r3, [r0, #0]
 801eb80:	2001      	movs	r0, #1
 801eb82:	e7e7      	b.n	801eb54 <_raise_r+0x12>
 801eb84:	2400      	movs	r4, #0
 801eb86:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801eb8a:	4628      	mov	r0, r5
 801eb8c:	4798      	blx	r3
 801eb8e:	2000      	movs	r0, #0
 801eb90:	e7e0      	b.n	801eb54 <_raise_r+0x12>
	...

0801eb94 <raise>:
 801eb94:	4b02      	ldr	r3, [pc, #8]	; (801eba0 <raise+0xc>)
 801eb96:	4601      	mov	r1, r0
 801eb98:	6818      	ldr	r0, [r3, #0]
 801eb9a:	f7ff bfd2 	b.w	801eb42 <_raise_r>
 801eb9e:	bf00      	nop
 801eba0:	200001a0 	.word	0x200001a0

0801eba4 <_fstat_r>:
 801eba4:	b538      	push	{r3, r4, r5, lr}
 801eba6:	4d07      	ldr	r5, [pc, #28]	; (801ebc4 <_fstat_r+0x20>)
 801eba8:	2300      	movs	r3, #0
 801ebaa:	4604      	mov	r4, r0
 801ebac:	4608      	mov	r0, r1
 801ebae:	4611      	mov	r1, r2
 801ebb0:	602b      	str	r3, [r5, #0]
 801ebb2:	f7e3 fc14 	bl	80023de <_fstat>
 801ebb6:	1c43      	adds	r3, r0, #1
 801ebb8:	d102      	bne.n	801ebc0 <_fstat_r+0x1c>
 801ebba:	682b      	ldr	r3, [r5, #0]
 801ebbc:	b103      	cbz	r3, 801ebc0 <_fstat_r+0x1c>
 801ebbe:	6023      	str	r3, [r4, #0]
 801ebc0:	bd38      	pop	{r3, r4, r5, pc}
 801ebc2:	bf00      	nop
 801ebc4:	20024360 	.word	0x20024360

0801ebc8 <_isatty_r>:
 801ebc8:	b538      	push	{r3, r4, r5, lr}
 801ebca:	4d06      	ldr	r5, [pc, #24]	; (801ebe4 <_isatty_r+0x1c>)
 801ebcc:	2300      	movs	r3, #0
 801ebce:	4604      	mov	r4, r0
 801ebd0:	4608      	mov	r0, r1
 801ebd2:	602b      	str	r3, [r5, #0]
 801ebd4:	f7e3 fc13 	bl	80023fe <_isatty>
 801ebd8:	1c43      	adds	r3, r0, #1
 801ebda:	d102      	bne.n	801ebe2 <_isatty_r+0x1a>
 801ebdc:	682b      	ldr	r3, [r5, #0]
 801ebde:	b103      	cbz	r3, 801ebe2 <_isatty_r+0x1a>
 801ebe0:	6023      	str	r3, [r4, #0]
 801ebe2:	bd38      	pop	{r3, r4, r5, pc}
 801ebe4:	20024360 	.word	0x20024360

0801ebe8 <_kill_r>:
 801ebe8:	b538      	push	{r3, r4, r5, lr}
 801ebea:	4d07      	ldr	r5, [pc, #28]	; (801ec08 <_kill_r+0x20>)
 801ebec:	2300      	movs	r3, #0
 801ebee:	4604      	mov	r4, r0
 801ebf0:	4608      	mov	r0, r1
 801ebf2:	4611      	mov	r1, r2
 801ebf4:	602b      	str	r3, [r5, #0]
 801ebf6:	f7e3 fb91 	bl	800231c <_kill>
 801ebfa:	1c43      	adds	r3, r0, #1
 801ebfc:	d102      	bne.n	801ec04 <_kill_r+0x1c>
 801ebfe:	682b      	ldr	r3, [r5, #0]
 801ec00:	b103      	cbz	r3, 801ec04 <_kill_r+0x1c>
 801ec02:	6023      	str	r3, [r4, #0]
 801ec04:	bd38      	pop	{r3, r4, r5, pc}
 801ec06:	bf00      	nop
 801ec08:	20024360 	.word	0x20024360

0801ec0c <_getpid_r>:
 801ec0c:	f7e3 bb7e 	b.w	800230c <_getpid>

0801ec10 <_init>:
 801ec10:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ec12:	bf00      	nop
 801ec14:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ec16:	bc08      	pop	{r3}
 801ec18:	469e      	mov	lr, r3
 801ec1a:	4770      	bx	lr

0801ec1c <_fini>:
 801ec1c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ec1e:	bf00      	nop
 801ec20:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801ec22:	bc08      	pop	{r3}
 801ec24:	469e      	mov	lr, r3
 801ec26:	4770      	bx	lr
