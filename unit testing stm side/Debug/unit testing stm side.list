
unit testing stm side.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001c8  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001e1c4  080001d0  080001d0  000101d0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003514  0801e394  0801e394  0002e394  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080218a8  080218a8  000402e4  2**0
                  CONTENTS
  4 .ARM          00000008  080218a8  080218a8  000318a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080218b0  080218b0  000402e4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080218b0  080218b0  000318b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080218b4  080218b4  000318b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001a4  20000000  080218b8  00040000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .RxDecripSection 000000a0  200001a4  08021a5c  000401a4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 10 .TxDecripSection 000000a0  20000244  08021afc  00040244  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 11 .bss          00024038  200002e4  08021b9c  000402e4  2**2
                  ALLOC
 12 ._user_heap_stack 00000604  2002431c  08021b9c  0004431c  2**0
                  ALLOC
 13 .ARM.attributes 00000030  00000000  00000000  000402e4  2**0
                  CONTENTS, READONLY
 14 .comment      00000043  00000000  00000000  00040314  2**0
                  CONTENTS, READONLY
 15 .debug_info   0003ef36  00000000  00000000  00040357  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_abbrev 0000a471  00000000  00000000  0007f28d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_aranges 00002e68  00000000  00000000  00089700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_rnglists 00002442  00000000  00000000  0008c568  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   0002f9cf  00000000  00000000  0008e9aa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    0000df1a  00000000  00000000  000be379  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  0000c410  00000000  00000000  000cc294  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  000d86a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001d0 <__do_global_dtors_aux>:
 80001d0:	b510      	push	{r4, lr}
 80001d2:	4c05      	ldr	r4, [pc, #20]	; (80001e8 <__do_global_dtors_aux+0x18>)
 80001d4:	7823      	ldrb	r3, [r4, #0]
 80001d6:	b933      	cbnz	r3, 80001e6 <__do_global_dtors_aux+0x16>
 80001d8:	4b04      	ldr	r3, [pc, #16]	; (80001ec <__do_global_dtors_aux+0x1c>)
 80001da:	b113      	cbz	r3, 80001e2 <__do_global_dtors_aux+0x12>
 80001dc:	4804      	ldr	r0, [pc, #16]	; (80001f0 <__do_global_dtors_aux+0x20>)
 80001de:	f3af 8000 	nop.w
 80001e2:	2301      	movs	r3, #1
 80001e4:	7023      	strb	r3, [r4, #0]
 80001e6:	bd10      	pop	{r4, pc}
 80001e8:	200002e4 	.word	0x200002e4
 80001ec:	00000000 	.word	0x00000000
 80001f0:	0801e37c 	.word	0x0801e37c

080001f4 <frame_dummy>:
 80001f4:	b508      	push	{r3, lr}
 80001f6:	4b03      	ldr	r3, [pc, #12]	; (8000204 <frame_dummy+0x10>)
 80001f8:	b11b      	cbz	r3, 8000202 <frame_dummy+0xe>
 80001fa:	4903      	ldr	r1, [pc, #12]	; (8000208 <frame_dummy+0x14>)
 80001fc:	4803      	ldr	r0, [pc, #12]	; (800020c <frame_dummy+0x18>)
 80001fe:	f3af 8000 	nop.w
 8000202:	bd08      	pop	{r3, pc}
 8000204:	00000000 	.word	0x00000000
 8000208:	200002e8 	.word	0x200002e8
 800020c:	0801e37c 	.word	0x0801e37c

08000210 <memchr>:
 8000210:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000214:	2a10      	cmp	r2, #16
 8000216:	db2b      	blt.n	8000270 <memchr+0x60>
 8000218:	f010 0f07 	tst.w	r0, #7
 800021c:	d008      	beq.n	8000230 <memchr+0x20>
 800021e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000222:	3a01      	subs	r2, #1
 8000224:	428b      	cmp	r3, r1
 8000226:	d02d      	beq.n	8000284 <memchr+0x74>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	b342      	cbz	r2, 8000280 <memchr+0x70>
 800022e:	d1f6      	bne.n	800021e <memchr+0xe>
 8000230:	b4f0      	push	{r4, r5, r6, r7}
 8000232:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000236:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800023a:	f022 0407 	bic.w	r4, r2, #7
 800023e:	f07f 0700 	mvns.w	r7, #0
 8000242:	2300      	movs	r3, #0
 8000244:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000248:	3c08      	subs	r4, #8
 800024a:	ea85 0501 	eor.w	r5, r5, r1
 800024e:	ea86 0601 	eor.w	r6, r6, r1
 8000252:	fa85 f547 	uadd8	r5, r5, r7
 8000256:	faa3 f587 	sel	r5, r3, r7
 800025a:	fa86 f647 	uadd8	r6, r6, r7
 800025e:	faa5 f687 	sel	r6, r5, r7
 8000262:	b98e      	cbnz	r6, 8000288 <memchr+0x78>
 8000264:	d1ee      	bne.n	8000244 <memchr+0x34>
 8000266:	bcf0      	pop	{r4, r5, r6, r7}
 8000268:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800026c:	f002 0207 	and.w	r2, r2, #7
 8000270:	b132      	cbz	r2, 8000280 <memchr+0x70>
 8000272:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000276:	3a01      	subs	r2, #1
 8000278:	ea83 0301 	eor.w	r3, r3, r1
 800027c:	b113      	cbz	r3, 8000284 <memchr+0x74>
 800027e:	d1f8      	bne.n	8000272 <memchr+0x62>
 8000280:	2000      	movs	r0, #0
 8000282:	4770      	bx	lr
 8000284:	3801      	subs	r0, #1
 8000286:	4770      	bx	lr
 8000288:	2d00      	cmp	r5, #0
 800028a:	bf06      	itte	eq
 800028c:	4635      	moveq	r5, r6
 800028e:	3803      	subeq	r0, #3
 8000290:	3807      	subne	r0, #7
 8000292:	f015 0f01 	tst.w	r5, #1
 8000296:	d107      	bne.n	80002a8 <memchr+0x98>
 8000298:	3001      	adds	r0, #1
 800029a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800029e:	bf02      	ittt	eq
 80002a0:	3001      	addeq	r0, #1
 80002a2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002a6:	3001      	addeq	r0, #1
 80002a8:	bcf0      	pop	{r4, r5, r6, r7}
 80002aa:	3801      	subs	r0, #1
 80002ac:	4770      	bx	lr
 80002ae:	bf00      	nop

080002b0 <__aeabi_uldivmod>:
 80002b0:	b953      	cbnz	r3, 80002c8 <__aeabi_uldivmod+0x18>
 80002b2:	b94a      	cbnz	r2, 80002c8 <__aeabi_uldivmod+0x18>
 80002b4:	2900      	cmp	r1, #0
 80002b6:	bf08      	it	eq
 80002b8:	2800      	cmpeq	r0, #0
 80002ba:	bf1c      	itt	ne
 80002bc:	f04f 31ff 	movne.w	r1, #4294967295
 80002c0:	f04f 30ff 	movne.w	r0, #4294967295
 80002c4:	f000 b970 	b.w	80005a8 <__aeabi_idiv0>
 80002c8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002cc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002d0:	f000 f806 	bl	80002e0 <__udivmoddi4>
 80002d4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002dc:	b004      	add	sp, #16
 80002de:	4770      	bx	lr

080002e0 <__udivmoddi4>:
 80002e0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002e4:	9e08      	ldr	r6, [sp, #32]
 80002e6:	460d      	mov	r5, r1
 80002e8:	4604      	mov	r4, r0
 80002ea:	460f      	mov	r7, r1
 80002ec:	2b00      	cmp	r3, #0
 80002ee:	d14a      	bne.n	8000386 <__udivmoddi4+0xa6>
 80002f0:	428a      	cmp	r2, r1
 80002f2:	4694      	mov	ip, r2
 80002f4:	d965      	bls.n	80003c2 <__udivmoddi4+0xe2>
 80002f6:	fab2 f382 	clz	r3, r2
 80002fa:	b143      	cbz	r3, 800030e <__udivmoddi4+0x2e>
 80002fc:	fa02 fc03 	lsl.w	ip, r2, r3
 8000300:	f1c3 0220 	rsb	r2, r3, #32
 8000304:	409f      	lsls	r7, r3
 8000306:	fa20 f202 	lsr.w	r2, r0, r2
 800030a:	4317      	orrs	r7, r2
 800030c:	409c      	lsls	r4, r3
 800030e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000312:	fa1f f58c 	uxth.w	r5, ip
 8000316:	fbb7 f1fe 	udiv	r1, r7, lr
 800031a:	0c22      	lsrs	r2, r4, #16
 800031c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000320:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000324:	fb01 f005 	mul.w	r0, r1, r5
 8000328:	4290      	cmp	r0, r2
 800032a:	d90a      	bls.n	8000342 <__udivmoddi4+0x62>
 800032c:	eb1c 0202 	adds.w	r2, ip, r2
 8000330:	f101 37ff 	add.w	r7, r1, #4294967295
 8000334:	f080 811c 	bcs.w	8000570 <__udivmoddi4+0x290>
 8000338:	4290      	cmp	r0, r2
 800033a:	f240 8119 	bls.w	8000570 <__udivmoddi4+0x290>
 800033e:	3902      	subs	r1, #2
 8000340:	4462      	add	r2, ip
 8000342:	1a12      	subs	r2, r2, r0
 8000344:	b2a4      	uxth	r4, r4
 8000346:	fbb2 f0fe 	udiv	r0, r2, lr
 800034a:	fb0e 2210 	mls	r2, lr, r0, r2
 800034e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000352:	fb00 f505 	mul.w	r5, r0, r5
 8000356:	42a5      	cmp	r5, r4
 8000358:	d90a      	bls.n	8000370 <__udivmoddi4+0x90>
 800035a:	eb1c 0404 	adds.w	r4, ip, r4
 800035e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000362:	f080 8107 	bcs.w	8000574 <__udivmoddi4+0x294>
 8000366:	42a5      	cmp	r5, r4
 8000368:	f240 8104 	bls.w	8000574 <__udivmoddi4+0x294>
 800036c:	4464      	add	r4, ip
 800036e:	3802      	subs	r0, #2
 8000370:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000374:	1b64      	subs	r4, r4, r5
 8000376:	2100      	movs	r1, #0
 8000378:	b11e      	cbz	r6, 8000382 <__udivmoddi4+0xa2>
 800037a:	40dc      	lsrs	r4, r3
 800037c:	2300      	movs	r3, #0
 800037e:	e9c6 4300 	strd	r4, r3, [r6]
 8000382:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000386:	428b      	cmp	r3, r1
 8000388:	d908      	bls.n	800039c <__udivmoddi4+0xbc>
 800038a:	2e00      	cmp	r6, #0
 800038c:	f000 80ed 	beq.w	800056a <__udivmoddi4+0x28a>
 8000390:	2100      	movs	r1, #0
 8000392:	e9c6 0500 	strd	r0, r5, [r6]
 8000396:	4608      	mov	r0, r1
 8000398:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800039c:	fab3 f183 	clz	r1, r3
 80003a0:	2900      	cmp	r1, #0
 80003a2:	d149      	bne.n	8000438 <__udivmoddi4+0x158>
 80003a4:	42ab      	cmp	r3, r5
 80003a6:	d302      	bcc.n	80003ae <__udivmoddi4+0xce>
 80003a8:	4282      	cmp	r2, r0
 80003aa:	f200 80f8 	bhi.w	800059e <__udivmoddi4+0x2be>
 80003ae:	1a84      	subs	r4, r0, r2
 80003b0:	eb65 0203 	sbc.w	r2, r5, r3
 80003b4:	2001      	movs	r0, #1
 80003b6:	4617      	mov	r7, r2
 80003b8:	2e00      	cmp	r6, #0
 80003ba:	d0e2      	beq.n	8000382 <__udivmoddi4+0xa2>
 80003bc:	e9c6 4700 	strd	r4, r7, [r6]
 80003c0:	e7df      	b.n	8000382 <__udivmoddi4+0xa2>
 80003c2:	b902      	cbnz	r2, 80003c6 <__udivmoddi4+0xe6>
 80003c4:	deff      	udf	#255	; 0xff
 80003c6:	fab2 f382 	clz	r3, r2
 80003ca:	2b00      	cmp	r3, #0
 80003cc:	f040 8090 	bne.w	80004f0 <__udivmoddi4+0x210>
 80003d0:	1a8a      	subs	r2, r1, r2
 80003d2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003d6:	fa1f fe8c 	uxth.w	lr, ip
 80003da:	2101      	movs	r1, #1
 80003dc:	fbb2 f5f7 	udiv	r5, r2, r7
 80003e0:	fb07 2015 	mls	r0, r7, r5, r2
 80003e4:	0c22      	lsrs	r2, r4, #16
 80003e6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003ea:	fb0e f005 	mul.w	r0, lr, r5
 80003ee:	4290      	cmp	r0, r2
 80003f0:	d908      	bls.n	8000404 <__udivmoddi4+0x124>
 80003f2:	eb1c 0202 	adds.w	r2, ip, r2
 80003f6:	f105 38ff 	add.w	r8, r5, #4294967295
 80003fa:	d202      	bcs.n	8000402 <__udivmoddi4+0x122>
 80003fc:	4290      	cmp	r0, r2
 80003fe:	f200 80cb 	bhi.w	8000598 <__udivmoddi4+0x2b8>
 8000402:	4645      	mov	r5, r8
 8000404:	1a12      	subs	r2, r2, r0
 8000406:	b2a4      	uxth	r4, r4
 8000408:	fbb2 f0f7 	udiv	r0, r2, r7
 800040c:	fb07 2210 	mls	r2, r7, r0, r2
 8000410:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000414:	fb0e fe00 	mul.w	lr, lr, r0
 8000418:	45a6      	cmp	lr, r4
 800041a:	d908      	bls.n	800042e <__udivmoddi4+0x14e>
 800041c:	eb1c 0404 	adds.w	r4, ip, r4
 8000420:	f100 32ff 	add.w	r2, r0, #4294967295
 8000424:	d202      	bcs.n	800042c <__udivmoddi4+0x14c>
 8000426:	45a6      	cmp	lr, r4
 8000428:	f200 80bb 	bhi.w	80005a2 <__udivmoddi4+0x2c2>
 800042c:	4610      	mov	r0, r2
 800042e:	eba4 040e 	sub.w	r4, r4, lr
 8000432:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000436:	e79f      	b.n	8000378 <__udivmoddi4+0x98>
 8000438:	f1c1 0720 	rsb	r7, r1, #32
 800043c:	408b      	lsls	r3, r1
 800043e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000442:	ea4c 0c03 	orr.w	ip, ip, r3
 8000446:	fa05 f401 	lsl.w	r4, r5, r1
 800044a:	fa20 f307 	lsr.w	r3, r0, r7
 800044e:	40fd      	lsrs	r5, r7
 8000450:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000454:	4323      	orrs	r3, r4
 8000456:	fbb5 f8f9 	udiv	r8, r5, r9
 800045a:	fa1f fe8c 	uxth.w	lr, ip
 800045e:	fb09 5518 	mls	r5, r9, r8, r5
 8000462:	0c1c      	lsrs	r4, r3, #16
 8000464:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000468:	fb08 f50e 	mul.w	r5, r8, lr
 800046c:	42a5      	cmp	r5, r4
 800046e:	fa02 f201 	lsl.w	r2, r2, r1
 8000472:	fa00 f001 	lsl.w	r0, r0, r1
 8000476:	d90b      	bls.n	8000490 <__udivmoddi4+0x1b0>
 8000478:	eb1c 0404 	adds.w	r4, ip, r4
 800047c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000480:	f080 8088 	bcs.w	8000594 <__udivmoddi4+0x2b4>
 8000484:	42a5      	cmp	r5, r4
 8000486:	f240 8085 	bls.w	8000594 <__udivmoddi4+0x2b4>
 800048a:	f1a8 0802 	sub.w	r8, r8, #2
 800048e:	4464      	add	r4, ip
 8000490:	1b64      	subs	r4, r4, r5
 8000492:	b29d      	uxth	r5, r3
 8000494:	fbb4 f3f9 	udiv	r3, r4, r9
 8000498:	fb09 4413 	mls	r4, r9, r3, r4
 800049c:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004a0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004a4:	45a6      	cmp	lr, r4
 80004a6:	d908      	bls.n	80004ba <__udivmoddi4+0x1da>
 80004a8:	eb1c 0404 	adds.w	r4, ip, r4
 80004ac:	f103 35ff 	add.w	r5, r3, #4294967295
 80004b0:	d26c      	bcs.n	800058c <__udivmoddi4+0x2ac>
 80004b2:	45a6      	cmp	lr, r4
 80004b4:	d96a      	bls.n	800058c <__udivmoddi4+0x2ac>
 80004b6:	3b02      	subs	r3, #2
 80004b8:	4464      	add	r4, ip
 80004ba:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004be:	fba3 9502 	umull	r9, r5, r3, r2
 80004c2:	eba4 040e 	sub.w	r4, r4, lr
 80004c6:	42ac      	cmp	r4, r5
 80004c8:	46c8      	mov	r8, r9
 80004ca:	46ae      	mov	lr, r5
 80004cc:	d356      	bcc.n	800057c <__udivmoddi4+0x29c>
 80004ce:	d053      	beq.n	8000578 <__udivmoddi4+0x298>
 80004d0:	b156      	cbz	r6, 80004e8 <__udivmoddi4+0x208>
 80004d2:	ebb0 0208 	subs.w	r2, r0, r8
 80004d6:	eb64 040e 	sbc.w	r4, r4, lr
 80004da:	fa04 f707 	lsl.w	r7, r4, r7
 80004de:	40ca      	lsrs	r2, r1
 80004e0:	40cc      	lsrs	r4, r1
 80004e2:	4317      	orrs	r7, r2
 80004e4:	e9c6 7400 	strd	r7, r4, [r6]
 80004e8:	4618      	mov	r0, r3
 80004ea:	2100      	movs	r1, #0
 80004ec:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80004f0:	f1c3 0120 	rsb	r1, r3, #32
 80004f4:	fa02 fc03 	lsl.w	ip, r2, r3
 80004f8:	fa20 f201 	lsr.w	r2, r0, r1
 80004fc:	fa25 f101 	lsr.w	r1, r5, r1
 8000500:	409d      	lsls	r5, r3
 8000502:	432a      	orrs	r2, r5
 8000504:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000508:	fa1f fe8c 	uxth.w	lr, ip
 800050c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000510:	fb07 1510 	mls	r5, r7, r0, r1
 8000514:	0c11      	lsrs	r1, r2, #16
 8000516:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800051a:	fb00 f50e 	mul.w	r5, r0, lr
 800051e:	428d      	cmp	r5, r1
 8000520:	fa04 f403 	lsl.w	r4, r4, r3
 8000524:	d908      	bls.n	8000538 <__udivmoddi4+0x258>
 8000526:	eb1c 0101 	adds.w	r1, ip, r1
 800052a:	f100 38ff 	add.w	r8, r0, #4294967295
 800052e:	d22f      	bcs.n	8000590 <__udivmoddi4+0x2b0>
 8000530:	428d      	cmp	r5, r1
 8000532:	d92d      	bls.n	8000590 <__udivmoddi4+0x2b0>
 8000534:	3802      	subs	r0, #2
 8000536:	4461      	add	r1, ip
 8000538:	1b49      	subs	r1, r1, r5
 800053a:	b292      	uxth	r2, r2
 800053c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000540:	fb07 1115 	mls	r1, r7, r5, r1
 8000544:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000548:	fb05 f10e 	mul.w	r1, r5, lr
 800054c:	4291      	cmp	r1, r2
 800054e:	d908      	bls.n	8000562 <__udivmoddi4+0x282>
 8000550:	eb1c 0202 	adds.w	r2, ip, r2
 8000554:	f105 38ff 	add.w	r8, r5, #4294967295
 8000558:	d216      	bcs.n	8000588 <__udivmoddi4+0x2a8>
 800055a:	4291      	cmp	r1, r2
 800055c:	d914      	bls.n	8000588 <__udivmoddi4+0x2a8>
 800055e:	3d02      	subs	r5, #2
 8000560:	4462      	add	r2, ip
 8000562:	1a52      	subs	r2, r2, r1
 8000564:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000568:	e738      	b.n	80003dc <__udivmoddi4+0xfc>
 800056a:	4631      	mov	r1, r6
 800056c:	4630      	mov	r0, r6
 800056e:	e708      	b.n	8000382 <__udivmoddi4+0xa2>
 8000570:	4639      	mov	r1, r7
 8000572:	e6e6      	b.n	8000342 <__udivmoddi4+0x62>
 8000574:	4610      	mov	r0, r2
 8000576:	e6fb      	b.n	8000370 <__udivmoddi4+0x90>
 8000578:	4548      	cmp	r0, r9
 800057a:	d2a9      	bcs.n	80004d0 <__udivmoddi4+0x1f0>
 800057c:	ebb9 0802 	subs.w	r8, r9, r2
 8000580:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000584:	3b01      	subs	r3, #1
 8000586:	e7a3      	b.n	80004d0 <__udivmoddi4+0x1f0>
 8000588:	4645      	mov	r5, r8
 800058a:	e7ea      	b.n	8000562 <__udivmoddi4+0x282>
 800058c:	462b      	mov	r3, r5
 800058e:	e794      	b.n	80004ba <__udivmoddi4+0x1da>
 8000590:	4640      	mov	r0, r8
 8000592:	e7d1      	b.n	8000538 <__udivmoddi4+0x258>
 8000594:	46d0      	mov	r8, sl
 8000596:	e77b      	b.n	8000490 <__udivmoddi4+0x1b0>
 8000598:	3d02      	subs	r5, #2
 800059a:	4462      	add	r2, ip
 800059c:	e732      	b.n	8000404 <__udivmoddi4+0x124>
 800059e:	4608      	mov	r0, r1
 80005a0:	e70a      	b.n	80003b8 <__udivmoddi4+0xd8>
 80005a2:	4464      	add	r4, ip
 80005a4:	3802      	subs	r0, #2
 80005a6:	e742      	b.n	800042e <__udivmoddi4+0x14e>

080005a8 <__aeabi_idiv0>:
 80005a8:	4770      	bx	lr
 80005aa:	bf00      	nop

080005ac <MX_ADC1_Init>:
ADC_HandleTypeDef hadc2;
ADC_HandleTypeDef hadc3;

/* ADC1 init function */
void MX_ADC1_Init(void)
{
 80005ac:	b580      	push	{r7, lr}
 80005ae:	b084      	sub	sp, #16
 80005b0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC1_Init 0 */

  /* USER CODE END ADC1_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80005b2:	463b      	mov	r3, r7
 80005b4:	2200      	movs	r2, #0
 80005b6:	601a      	str	r2, [r3, #0]
 80005b8:	605a      	str	r2, [r3, #4]
 80005ba:	609a      	str	r2, [r3, #8]
 80005bc:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC1_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc1.Instance = ADC1;
 80005be:	4b21      	ldr	r3, [pc, #132]	; (8000644 <MX_ADC1_Init+0x98>)
 80005c0:	4a21      	ldr	r2, [pc, #132]	; (8000648 <MX_ADC1_Init+0x9c>)
 80005c2:	601a      	str	r2, [r3, #0]
  hadc1.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 80005c4:	4b1f      	ldr	r3, [pc, #124]	; (8000644 <MX_ADC1_Init+0x98>)
 80005c6:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 80005ca:	605a      	str	r2, [r3, #4]
  hadc1.Init.Resolution = ADC_RESOLUTION_12B;
 80005cc:	4b1d      	ldr	r3, [pc, #116]	; (8000644 <MX_ADC1_Init+0x98>)
 80005ce:	2200      	movs	r2, #0
 80005d0:	609a      	str	r2, [r3, #8]
  hadc1.Init.ScanConvMode = ADC_SCAN_DISABLE;
 80005d2:	4b1c      	ldr	r3, [pc, #112]	; (8000644 <MX_ADC1_Init+0x98>)
 80005d4:	2200      	movs	r2, #0
 80005d6:	611a      	str	r2, [r3, #16]
  hadc1.Init.ContinuousConvMode = DISABLE;
 80005d8:	4b1a      	ldr	r3, [pc, #104]	; (8000644 <MX_ADC1_Init+0x98>)
 80005da:	2200      	movs	r2, #0
 80005dc:	619a      	str	r2, [r3, #24]
  hadc1.Init.DiscontinuousConvMode = DISABLE;
 80005de:	4b19      	ldr	r3, [pc, #100]	; (8000644 <MX_ADC1_Init+0x98>)
 80005e0:	2200      	movs	r2, #0
 80005e2:	f883 2020 	strb.w	r2, [r3, #32]
  hadc1.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 80005e6:	4b17      	ldr	r3, [pc, #92]	; (8000644 <MX_ADC1_Init+0x98>)
 80005e8:	2200      	movs	r2, #0
 80005ea:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc1.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 80005ec:	4b15      	ldr	r3, [pc, #84]	; (8000644 <MX_ADC1_Init+0x98>)
 80005ee:	4a17      	ldr	r2, [pc, #92]	; (800064c <MX_ADC1_Init+0xa0>)
 80005f0:	629a      	str	r2, [r3, #40]	; 0x28
  hadc1.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 80005f2:	4b14      	ldr	r3, [pc, #80]	; (8000644 <MX_ADC1_Init+0x98>)
 80005f4:	2200      	movs	r2, #0
 80005f6:	60da      	str	r2, [r3, #12]
  hadc1.Init.NbrOfConversion = 1;
 80005f8:	4b12      	ldr	r3, [pc, #72]	; (8000644 <MX_ADC1_Init+0x98>)
 80005fa:	2201      	movs	r2, #1
 80005fc:	61da      	str	r2, [r3, #28]
  hadc1.Init.DMAContinuousRequests = DISABLE;
 80005fe:	4b11      	ldr	r3, [pc, #68]	; (8000644 <MX_ADC1_Init+0x98>)
 8000600:	2200      	movs	r2, #0
 8000602:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc1.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 8000606:	4b0f      	ldr	r3, [pc, #60]	; (8000644 <MX_ADC1_Init+0x98>)
 8000608:	2201      	movs	r2, #1
 800060a:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc1) != HAL_OK)
 800060c:	480d      	ldr	r0, [pc, #52]	; (8000644 <MX_ADC1_Init+0x98>)
 800060e:	f002 fe25 	bl	800325c <HAL_ADC_Init>
 8000612:	4603      	mov	r3, r0
 8000614:	2b00      	cmp	r3, #0
 8000616:	d001      	beq.n	800061c <MX_ADC1_Init+0x70>
  {
    Error_Handler();
 8000618:	f000 ff0c 	bl	8001434 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 800061c:	2308      	movs	r3, #8
 800061e:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000620:	2301      	movs	r3, #1
 8000622:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 8000624:	2300      	movs	r3, #0
 8000626:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc1, &sConfig) != HAL_OK)
 8000628:	463b      	mov	r3, r7
 800062a:	4619      	mov	r1, r3
 800062c:	4805      	ldr	r0, [pc, #20]	; (8000644 <MX_ADC1_Init+0x98>)
 800062e:	f002 ff35 	bl	800349c <HAL_ADC_ConfigChannel>
 8000632:	4603      	mov	r3, r0
 8000634:	2b00      	cmp	r3, #0
 8000636:	d001      	beq.n	800063c <MX_ADC1_Init+0x90>
  {
    Error_Handler();
 8000638:	f000 fefc 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN ADC1_Init 2 */

  /* USER CODE END ADC1_Init 2 */

}
 800063c:	bf00      	nop
 800063e:	3710      	adds	r7, #16
 8000640:	46bd      	mov	sp, r7
 8000642:	bd80      	pop	{r7, pc}
 8000644:	20000300 	.word	0x20000300
 8000648:	40012000 	.word	0x40012000
 800064c:	0f000001 	.word	0x0f000001

08000650 <MX_ADC2_Init>:
/* ADC2 init function */
void MX_ADC2_Init(void)
{
 8000650:	b580      	push	{r7, lr}
 8000652:	b084      	sub	sp, #16
 8000654:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC2_Init 0 */

  /* USER CODE END ADC2_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 8000656:	463b      	mov	r3, r7
 8000658:	2200      	movs	r2, #0
 800065a:	601a      	str	r2, [r3, #0]
 800065c:	605a      	str	r2, [r3, #4]
 800065e:	609a      	str	r2, [r3, #8]
 8000660:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC2_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc2.Instance = ADC2;
 8000662:	4b21      	ldr	r3, [pc, #132]	; (80006e8 <MX_ADC2_Init+0x98>)
 8000664:	4a21      	ldr	r2, [pc, #132]	; (80006ec <MX_ADC2_Init+0x9c>)
 8000666:	601a      	str	r2, [r3, #0]
  hadc2.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 8000668:	4b1f      	ldr	r3, [pc, #124]	; (80006e8 <MX_ADC2_Init+0x98>)
 800066a:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 800066e:	605a      	str	r2, [r3, #4]
  hadc2.Init.Resolution = ADC_RESOLUTION_12B;
 8000670:	4b1d      	ldr	r3, [pc, #116]	; (80006e8 <MX_ADC2_Init+0x98>)
 8000672:	2200      	movs	r2, #0
 8000674:	609a      	str	r2, [r3, #8]
  hadc2.Init.ScanConvMode = ADC_SCAN_DISABLE;
 8000676:	4b1c      	ldr	r3, [pc, #112]	; (80006e8 <MX_ADC2_Init+0x98>)
 8000678:	2200      	movs	r2, #0
 800067a:	611a      	str	r2, [r3, #16]
  hadc2.Init.ContinuousConvMode = DISABLE;
 800067c:	4b1a      	ldr	r3, [pc, #104]	; (80006e8 <MX_ADC2_Init+0x98>)
 800067e:	2200      	movs	r2, #0
 8000680:	619a      	str	r2, [r3, #24]
  hadc2.Init.DiscontinuousConvMode = DISABLE;
 8000682:	4b19      	ldr	r3, [pc, #100]	; (80006e8 <MX_ADC2_Init+0x98>)
 8000684:	2200      	movs	r2, #0
 8000686:	f883 2020 	strb.w	r2, [r3, #32]
  hadc2.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800068a:	4b17      	ldr	r3, [pc, #92]	; (80006e8 <MX_ADC2_Init+0x98>)
 800068c:	2200      	movs	r2, #0
 800068e:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc2.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000690:	4b15      	ldr	r3, [pc, #84]	; (80006e8 <MX_ADC2_Init+0x98>)
 8000692:	4a17      	ldr	r2, [pc, #92]	; (80006f0 <MX_ADC2_Init+0xa0>)
 8000694:	629a      	str	r2, [r3, #40]	; 0x28
  hadc2.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 8000696:	4b14      	ldr	r3, [pc, #80]	; (80006e8 <MX_ADC2_Init+0x98>)
 8000698:	2200      	movs	r2, #0
 800069a:	60da      	str	r2, [r3, #12]
  hadc2.Init.NbrOfConversion = 1;
 800069c:	4b12      	ldr	r3, [pc, #72]	; (80006e8 <MX_ADC2_Init+0x98>)
 800069e:	2201      	movs	r2, #1
 80006a0:	61da      	str	r2, [r3, #28]
  hadc2.Init.DMAContinuousRequests = DISABLE;
 80006a2:	4b11      	ldr	r3, [pc, #68]	; (80006e8 <MX_ADC2_Init+0x98>)
 80006a4:	2200      	movs	r2, #0
 80006a6:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc2.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 80006aa:	4b0f      	ldr	r3, [pc, #60]	; (80006e8 <MX_ADC2_Init+0x98>)
 80006ac:	2201      	movs	r2, #1
 80006ae:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc2) != HAL_OK)
 80006b0:	480d      	ldr	r0, [pc, #52]	; (80006e8 <MX_ADC2_Init+0x98>)
 80006b2:	f002 fdd3 	bl	800325c <HAL_ADC_Init>
 80006b6:	4603      	mov	r3, r0
 80006b8:	2b00      	cmp	r3, #0
 80006ba:	d001      	beq.n	80006c0 <MX_ADC2_Init+0x70>
  {
    Error_Handler();
 80006bc:	f000 feba 	bl	8001434 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_8;
 80006c0:	2308      	movs	r3, #8
 80006c2:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 80006c4:	2301      	movs	r3, #1
 80006c6:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 80006c8:	2300      	movs	r3, #0
 80006ca:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc2, &sConfig) != HAL_OK)
 80006cc:	463b      	mov	r3, r7
 80006ce:	4619      	mov	r1, r3
 80006d0:	4805      	ldr	r0, [pc, #20]	; (80006e8 <MX_ADC2_Init+0x98>)
 80006d2:	f002 fee3 	bl	800349c <HAL_ADC_ConfigChannel>
 80006d6:	4603      	mov	r3, r0
 80006d8:	2b00      	cmp	r3, #0
 80006da:	d001      	beq.n	80006e0 <MX_ADC2_Init+0x90>
  {
    Error_Handler();
 80006dc:	f000 feaa 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN ADC2_Init 2 */

  /* USER CODE END ADC2_Init 2 */

}
 80006e0:	bf00      	nop
 80006e2:	3710      	adds	r7, #16
 80006e4:	46bd      	mov	sp, r7
 80006e6:	bd80      	pop	{r7, pc}
 80006e8:	20000348 	.word	0x20000348
 80006ec:	40012100 	.word	0x40012100
 80006f0:	0f000001 	.word	0x0f000001

080006f4 <MX_ADC3_Init>:
/* ADC3 init function */
void MX_ADC3_Init(void)
{
 80006f4:	b580      	push	{r7, lr}
 80006f6:	b084      	sub	sp, #16
 80006f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC3_Init 0 */

  /* USER CODE END ADC3_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 80006fa:	463b      	mov	r3, r7
 80006fc:	2200      	movs	r2, #0
 80006fe:	601a      	str	r2, [r3, #0]
 8000700:	605a      	str	r2, [r3, #4]
 8000702:	609a      	str	r2, [r3, #8]
 8000704:	60da      	str	r2, [r3, #12]

  /* USER CODE END ADC3_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc3.Instance = ADC3;
 8000706:	4b21      	ldr	r3, [pc, #132]	; (800078c <MX_ADC3_Init+0x98>)
 8000708:	4a21      	ldr	r2, [pc, #132]	; (8000790 <MX_ADC3_Init+0x9c>)
 800070a:	601a      	str	r2, [r3, #0]
  hadc3.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV4;
 800070c:	4b1f      	ldr	r3, [pc, #124]	; (800078c <MX_ADC3_Init+0x98>)
 800070e:	f44f 3280 	mov.w	r2, #65536	; 0x10000
 8000712:	605a      	str	r2, [r3, #4]
  hadc3.Init.Resolution = ADC_RESOLUTION_12B;
 8000714:	4b1d      	ldr	r3, [pc, #116]	; (800078c <MX_ADC3_Init+0x98>)
 8000716:	2200      	movs	r2, #0
 8000718:	609a      	str	r2, [r3, #8]
  hadc3.Init.ScanConvMode = ADC_SCAN_DISABLE;
 800071a:	4b1c      	ldr	r3, [pc, #112]	; (800078c <MX_ADC3_Init+0x98>)
 800071c:	2200      	movs	r2, #0
 800071e:	611a      	str	r2, [r3, #16]
  hadc3.Init.ContinuousConvMode = DISABLE;
 8000720:	4b1a      	ldr	r3, [pc, #104]	; (800078c <MX_ADC3_Init+0x98>)
 8000722:	2200      	movs	r2, #0
 8000724:	619a      	str	r2, [r3, #24]
  hadc3.Init.DiscontinuousConvMode = DISABLE;
 8000726:	4b19      	ldr	r3, [pc, #100]	; (800078c <MX_ADC3_Init+0x98>)
 8000728:	2200      	movs	r2, #0
 800072a:	f883 2020 	strb.w	r2, [r3, #32]
  hadc3.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 800072e:	4b17      	ldr	r3, [pc, #92]	; (800078c <MX_ADC3_Init+0x98>)
 8000730:	2200      	movs	r2, #0
 8000732:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc3.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 8000734:	4b15      	ldr	r3, [pc, #84]	; (800078c <MX_ADC3_Init+0x98>)
 8000736:	4a17      	ldr	r2, [pc, #92]	; (8000794 <MX_ADC3_Init+0xa0>)
 8000738:	629a      	str	r2, [r3, #40]	; 0x28
  hadc3.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800073a:	4b14      	ldr	r3, [pc, #80]	; (800078c <MX_ADC3_Init+0x98>)
 800073c:	2200      	movs	r2, #0
 800073e:	60da      	str	r2, [r3, #12]
  hadc3.Init.NbrOfConversion = 1;
 8000740:	4b12      	ldr	r3, [pc, #72]	; (800078c <MX_ADC3_Init+0x98>)
 8000742:	2201      	movs	r2, #1
 8000744:	61da      	str	r2, [r3, #28]
  hadc3.Init.DMAContinuousRequests = DISABLE;
 8000746:	4b11      	ldr	r3, [pc, #68]	; (800078c <MX_ADC3_Init+0x98>)
 8000748:	2200      	movs	r2, #0
 800074a:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  hadc3.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800074e:	4b0f      	ldr	r3, [pc, #60]	; (800078c <MX_ADC3_Init+0x98>)
 8000750:	2201      	movs	r2, #1
 8000752:	615a      	str	r2, [r3, #20]
  if (HAL_ADC_Init(&hadc3) != HAL_OK)
 8000754:	480d      	ldr	r0, [pc, #52]	; (800078c <MX_ADC3_Init+0x98>)
 8000756:	f002 fd81 	bl	800325c <HAL_ADC_Init>
 800075a:	4603      	mov	r3, r0
 800075c:	2b00      	cmp	r3, #0
 800075e:	d001      	beq.n	8000764 <MX_ADC3_Init+0x70>
  {
    Error_Handler();
 8000760:	f000 fe68 	bl	8001434 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel its corresponding rank in the sequencer and its sample time.
  */
  sConfig.Channel = ADC_CHANNEL_7;
 8000764:	2307      	movs	r3, #7
 8000766:	603b      	str	r3, [r7, #0]
  sConfig.Rank = ADC_REGULAR_RANK_1;
 8000768:	2301      	movs	r3, #1
 800076a:	607b      	str	r3, [r7, #4]
  sConfig.SamplingTime = ADC_SAMPLETIME_3CYCLES;
 800076c:	2300      	movs	r3, #0
 800076e:	60bb      	str	r3, [r7, #8]
  if (HAL_ADC_ConfigChannel(&hadc3, &sConfig) != HAL_OK)
 8000770:	463b      	mov	r3, r7
 8000772:	4619      	mov	r1, r3
 8000774:	4805      	ldr	r0, [pc, #20]	; (800078c <MX_ADC3_Init+0x98>)
 8000776:	f002 fe91 	bl	800349c <HAL_ADC_ConfigChannel>
 800077a:	4603      	mov	r3, r0
 800077c:	2b00      	cmp	r3, #0
 800077e:	d001      	beq.n	8000784 <MX_ADC3_Init+0x90>
  {
    Error_Handler();
 8000780:	f000 fe58 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN ADC3_Init 2 */

  /* USER CODE END ADC3_Init 2 */

}
 8000784:	bf00      	nop
 8000786:	3710      	adds	r7, #16
 8000788:	46bd      	mov	sp, r7
 800078a:	bd80      	pop	{r7, pc}
 800078c:	20000390 	.word	0x20000390
 8000790:	40012200 	.word	0x40012200
 8000794:	0f000001 	.word	0x0f000001

08000798 <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 8000798:	b580      	push	{r7, lr}
 800079a:	b08e      	sub	sp, #56	; 0x38
 800079c:	af00      	add	r7, sp, #0
 800079e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007a4:	2200      	movs	r2, #0
 80007a6:	601a      	str	r2, [r3, #0]
 80007a8:	605a      	str	r2, [r3, #4]
 80007aa:	609a      	str	r2, [r3, #8]
 80007ac:	60da      	str	r2, [r3, #12]
 80007ae:	611a      	str	r2, [r3, #16]
  if(adcHandle->Instance==ADC1)
 80007b0:	687b      	ldr	r3, [r7, #4]
 80007b2:	681b      	ldr	r3, [r3, #0]
 80007b4:	4a3f      	ldr	r2, [pc, #252]	; (80008b4 <HAL_ADC_MspInit+0x11c>)
 80007b6:	4293      	cmp	r3, r2
 80007b8:	d124      	bne.n	8000804 <HAL_ADC_MspInit+0x6c>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 80007ba:	4b3f      	ldr	r3, [pc, #252]	; (80008b8 <HAL_ADC_MspInit+0x120>)
 80007bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007be:	4a3e      	ldr	r2, [pc, #248]	; (80008b8 <HAL_ADC_MspInit+0x120>)
 80007c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80007c4:	6453      	str	r3, [r2, #68]	; 0x44
 80007c6:	4b3c      	ldr	r3, [pc, #240]	; (80008b8 <HAL_ADC_MspInit+0x120>)
 80007c8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80007ca:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80007ce:	623b      	str	r3, [r7, #32]
 80007d0:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80007d2:	4b39      	ldr	r3, [pc, #228]	; (80008b8 <HAL_ADC_MspInit+0x120>)
 80007d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007d6:	4a38      	ldr	r2, [pc, #224]	; (80008b8 <HAL_ADC_MspInit+0x120>)
 80007d8:	f043 0302 	orr.w	r3, r3, #2
 80007dc:	6313      	str	r3, [r2, #48]	; 0x30
 80007de:	4b36      	ldr	r3, [pc, #216]	; (80008b8 <HAL_ADC_MspInit+0x120>)
 80007e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80007e2:	f003 0302 	and.w	r3, r3, #2
 80007e6:	61fb      	str	r3, [r7, #28]
 80007e8:	69fb      	ldr	r3, [r7, #28]
    /**ADC1 GPIO Configuration
    PB0     ------> ADC1_IN8
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80007ea:	2301      	movs	r3, #1
 80007ec:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80007ee:	2303      	movs	r3, #3
 80007f0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80007f2:	2300      	movs	r3, #0
 80007f4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80007f6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80007fa:	4619      	mov	r1, r3
 80007fc:	482f      	ldr	r0, [pc, #188]	; (80008bc <HAL_ADC_MspInit+0x124>)
 80007fe:	f005 fc6b 	bl	80060d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC3_MspInit 1 */

  /* USER CODE END ADC3_MspInit 1 */
  }
}
 8000802:	e053      	b.n	80008ac <HAL_ADC_MspInit+0x114>
  else if(adcHandle->Instance==ADC2)
 8000804:	687b      	ldr	r3, [r7, #4]
 8000806:	681b      	ldr	r3, [r3, #0]
 8000808:	4a2d      	ldr	r2, [pc, #180]	; (80008c0 <HAL_ADC_MspInit+0x128>)
 800080a:	4293      	cmp	r3, r2
 800080c:	d124      	bne.n	8000858 <HAL_ADC_MspInit+0xc0>
    __HAL_RCC_ADC2_CLK_ENABLE();
 800080e:	4b2a      	ldr	r3, [pc, #168]	; (80008b8 <HAL_ADC_MspInit+0x120>)
 8000810:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000812:	4a29      	ldr	r2, [pc, #164]	; (80008b8 <HAL_ADC_MspInit+0x120>)
 8000814:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8000818:	6453      	str	r3, [r2, #68]	; 0x44
 800081a:	4b27      	ldr	r3, [pc, #156]	; (80008b8 <HAL_ADC_MspInit+0x120>)
 800081c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800081e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8000822:	61bb      	str	r3, [r7, #24]
 8000824:	69bb      	ldr	r3, [r7, #24]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000826:	4b24      	ldr	r3, [pc, #144]	; (80008b8 <HAL_ADC_MspInit+0x120>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800082a:	4a23      	ldr	r2, [pc, #140]	; (80008b8 <HAL_ADC_MspInit+0x120>)
 800082c:	f043 0302 	orr.w	r3, r3, #2
 8000830:	6313      	str	r3, [r2, #48]	; 0x30
 8000832:	4b21      	ldr	r3, [pc, #132]	; (80008b8 <HAL_ADC_MspInit+0x120>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000836:	f003 0302 	and.w	r3, r3, #2
 800083a:	617b      	str	r3, [r7, #20]
 800083c:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 800083e:	2301      	movs	r3, #1
 8000840:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000842:	2303      	movs	r3, #3
 8000844:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000846:	2300      	movs	r3, #0
 8000848:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800084a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800084e:	4619      	mov	r1, r3
 8000850:	481a      	ldr	r0, [pc, #104]	; (80008bc <HAL_ADC_MspInit+0x124>)
 8000852:	f005 fc41 	bl	80060d8 <HAL_GPIO_Init>
}
 8000856:	e029      	b.n	80008ac <HAL_ADC_MspInit+0x114>
  else if(adcHandle->Instance==ADC3)
 8000858:	687b      	ldr	r3, [r7, #4]
 800085a:	681b      	ldr	r3, [r3, #0]
 800085c:	4a19      	ldr	r2, [pc, #100]	; (80008c4 <HAL_ADC_MspInit+0x12c>)
 800085e:	4293      	cmp	r3, r2
 8000860:	d124      	bne.n	80008ac <HAL_ADC_MspInit+0x114>
    __HAL_RCC_ADC3_CLK_ENABLE();
 8000862:	4b15      	ldr	r3, [pc, #84]	; (80008b8 <HAL_ADC_MspInit+0x120>)
 8000864:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000866:	4a14      	ldr	r2, [pc, #80]	; (80008b8 <HAL_ADC_MspInit+0x120>)
 8000868:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800086c:	6453      	str	r3, [r2, #68]	; 0x44
 800086e:	4b12      	ldr	r3, [pc, #72]	; (80008b8 <HAL_ADC_MspInit+0x120>)
 8000870:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000872:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8000876:	613b      	str	r3, [r7, #16]
 8000878:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800087a:	4b0f      	ldr	r3, [pc, #60]	; (80008b8 <HAL_ADC_MspInit+0x120>)
 800087c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800087e:	4a0e      	ldr	r2, [pc, #56]	; (80008b8 <HAL_ADC_MspInit+0x120>)
 8000880:	f043 0320 	orr.w	r3, r3, #32
 8000884:	6313      	str	r3, [r2, #48]	; 0x30
 8000886:	4b0c      	ldr	r3, [pc, #48]	; (80008b8 <HAL_ADC_MspInit+0x120>)
 8000888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800088a:	f003 0320 	and.w	r3, r3, #32
 800088e:	60fb      	str	r3, [r7, #12]
 8000890:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8000892:	f44f 7300 	mov.w	r3, #512	; 0x200
 8000896:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000898:	2303      	movs	r3, #3
 800089a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800089c:	2300      	movs	r3, #0
 800089e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 80008a0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80008a4:	4619      	mov	r1, r3
 80008a6:	4808      	ldr	r0, [pc, #32]	; (80008c8 <HAL_ADC_MspInit+0x130>)
 80008a8:	f005 fc16 	bl	80060d8 <HAL_GPIO_Init>
}
 80008ac:	bf00      	nop
 80008ae:	3738      	adds	r7, #56	; 0x38
 80008b0:	46bd      	mov	sp, r7
 80008b2:	bd80      	pop	{r7, pc}
 80008b4:	40012000 	.word	0x40012000
 80008b8:	40023800 	.word	0x40023800
 80008bc:	40020400 	.word	0x40020400
 80008c0:	40012100 	.word	0x40012100
 80008c4:	40012200 	.word	0x40012200
 80008c8:	40021400 	.word	0x40021400

080008cc <MX_DAC_Init>:

DAC_HandleTypeDef hdac;

/* DAC init function */
void MX_DAC_Init(void)
{
 80008cc:	b580      	push	{r7, lr}
 80008ce:	b082      	sub	sp, #8
 80008d0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN DAC_Init 0 */

  /* USER CODE END DAC_Init 0 */

  DAC_ChannelConfTypeDef sConfig = {0};
 80008d2:	463b      	mov	r3, r7
 80008d4:	2200      	movs	r2, #0
 80008d6:	601a      	str	r2, [r3, #0]
 80008d8:	605a      	str	r2, [r3, #4]

  /* USER CODE END DAC_Init 1 */

  /** DAC Initialization
  */
  hdac.Instance = DAC;
 80008da:	4b0f      	ldr	r3, [pc, #60]	; (8000918 <MX_DAC_Init+0x4c>)
 80008dc:	4a0f      	ldr	r2, [pc, #60]	; (800091c <MX_DAC_Init+0x50>)
 80008de:	601a      	str	r2, [r3, #0]
  if (HAL_DAC_Init(&hdac) != HAL_OK)
 80008e0:	480d      	ldr	r0, [pc, #52]	; (8000918 <MX_DAC_Init+0x4c>)
 80008e2:	f003 f90d 	bl	8003b00 <HAL_DAC_Init>
 80008e6:	4603      	mov	r3, r0
 80008e8:	2b00      	cmp	r3, #0
 80008ea:	d001      	beq.n	80008f0 <MX_DAC_Init+0x24>
  {
    Error_Handler();
 80008ec:	f000 fda2 	bl	8001434 <Error_Handler>
  }

  /** DAC channel OUT1 config
  */
  sConfig.DAC_Trigger = DAC_TRIGGER_NONE;
 80008f0:	2300      	movs	r3, #0
 80008f2:	603b      	str	r3, [r7, #0]
  sConfig.DAC_OutputBuffer = DAC_OUTPUTBUFFER_ENABLE;
 80008f4:	2300      	movs	r3, #0
 80008f6:	607b      	str	r3, [r7, #4]
  if (HAL_DAC_ConfigChannel(&hdac, &sConfig, DAC_CHANNEL_1) != HAL_OK)
 80008f8:	463b      	mov	r3, r7
 80008fa:	2200      	movs	r2, #0
 80008fc:	4619      	mov	r1, r3
 80008fe:	4806      	ldr	r0, [pc, #24]	; (8000918 <MX_DAC_Init+0x4c>)
 8000900:	f003 f9a1 	bl	8003c46 <HAL_DAC_ConfigChannel>
 8000904:	4603      	mov	r3, r0
 8000906:	2b00      	cmp	r3, #0
 8000908:	d001      	beq.n	800090e <MX_DAC_Init+0x42>
  {
    Error_Handler();
 800090a:	f000 fd93 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN DAC_Init 2 */

  /* USER CODE END DAC_Init 2 */

}
 800090e:	bf00      	nop
 8000910:	3708      	adds	r7, #8
 8000912:	46bd      	mov	sp, r7
 8000914:	bd80      	pop	{r7, pc}
 8000916:	bf00      	nop
 8000918:	200003d8 	.word	0x200003d8
 800091c:	40007400 	.word	0x40007400

08000920 <HAL_DAC_MspInit>:

void HAL_DAC_MspInit(DAC_HandleTypeDef* dacHandle)
{
 8000920:	b580      	push	{r7, lr}
 8000922:	b08a      	sub	sp, #40	; 0x28
 8000924:	af00      	add	r7, sp, #0
 8000926:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000928:	f107 0314 	add.w	r3, r7, #20
 800092c:	2200      	movs	r2, #0
 800092e:	601a      	str	r2, [r3, #0]
 8000930:	605a      	str	r2, [r3, #4]
 8000932:	609a      	str	r2, [r3, #8]
 8000934:	60da      	str	r2, [r3, #12]
 8000936:	611a      	str	r2, [r3, #16]
  if(dacHandle->Instance==DAC)
 8000938:	687b      	ldr	r3, [r7, #4]
 800093a:	681b      	ldr	r3, [r3, #0]
 800093c:	4a15      	ldr	r2, [pc, #84]	; (8000994 <HAL_DAC_MspInit+0x74>)
 800093e:	4293      	cmp	r3, r2
 8000940:	d123      	bne.n	800098a <HAL_DAC_MspInit+0x6a>
  {
  /* USER CODE BEGIN DAC_MspInit 0 */

  /* USER CODE END DAC_MspInit 0 */
    /* DAC clock enable */
    __HAL_RCC_DAC_CLK_ENABLE();
 8000942:	4b15      	ldr	r3, [pc, #84]	; (8000998 <HAL_DAC_MspInit+0x78>)
 8000944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000946:	4a14      	ldr	r2, [pc, #80]	; (8000998 <HAL_DAC_MspInit+0x78>)
 8000948:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800094c:	6413      	str	r3, [r2, #64]	; 0x40
 800094e:	4b12      	ldr	r3, [pc, #72]	; (8000998 <HAL_DAC_MspInit+0x78>)
 8000950:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000952:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 8000956:	613b      	str	r3, [r7, #16]
 8000958:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800095a:	4b0f      	ldr	r3, [pc, #60]	; (8000998 <HAL_DAC_MspInit+0x78>)
 800095c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095e:	4a0e      	ldr	r2, [pc, #56]	; (8000998 <HAL_DAC_MspInit+0x78>)
 8000960:	f043 0301 	orr.w	r3, r3, #1
 8000964:	6313      	str	r3, [r2, #48]	; 0x30
 8000966:	4b0c      	ldr	r3, [pc, #48]	; (8000998 <HAL_DAC_MspInit+0x78>)
 8000968:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800096a:	f003 0301 	and.w	r3, r3, #1
 800096e:	60fb      	str	r3, [r7, #12]
 8000970:	68fb      	ldr	r3, [r7, #12]
    /**DAC GPIO Configuration
    PA4     ------> DAC_OUT1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 8000972:	2310      	movs	r3, #16
 8000974:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8000976:	2303      	movs	r3, #3
 8000978:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800097a:	2300      	movs	r3, #0
 800097c:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800097e:	f107 0314 	add.w	r3, r7, #20
 8000982:	4619      	mov	r1, r3
 8000984:	4805      	ldr	r0, [pc, #20]	; (800099c <HAL_DAC_MspInit+0x7c>)
 8000986:	f005 fba7 	bl	80060d8 <HAL_GPIO_Init>

  /* USER CODE BEGIN DAC_MspInit 1 */

  /* USER CODE END DAC_MspInit 1 */
  }
}
 800098a:	bf00      	nop
 800098c:	3728      	adds	r7, #40	; 0x28
 800098e:	46bd      	mov	sp, r7
 8000990:	bd80      	pop	{r7, pc}
 8000992:	bf00      	nop
 8000994:	40007400 	.word	0x40007400
 8000998:	40023800 	.word	0x40023800
 800099c:	40020000 	.word	0x40020000

080009a0 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 80009a0:	b580      	push	{r7, lr}
 80009a2:	b082      	sub	sp, #8
 80009a4:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 80009a6:	4b4e      	ldr	r3, [pc, #312]	; (8000ae0 <MX_DMA_Init+0x140>)
 80009a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009aa:	4a4d      	ldr	r2, [pc, #308]	; (8000ae0 <MX_DMA_Init+0x140>)
 80009ac:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80009b0:	6313      	str	r3, [r2, #48]	; 0x30
 80009b2:	4b4b      	ldr	r3, [pc, #300]	; (8000ae0 <MX_DMA_Init+0x140>)
 80009b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009b6:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80009ba:	607b      	str	r3, [r7, #4]
 80009bc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_DMA2_CLK_ENABLE();
 80009be:	4b48      	ldr	r3, [pc, #288]	; (8000ae0 <MX_DMA_Init+0x140>)
 80009c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009c2:	4a47      	ldr	r2, [pc, #284]	; (8000ae0 <MX_DMA_Init+0x140>)
 80009c4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80009c8:	6313      	str	r3, [r2, #48]	; 0x30
 80009ca:	4b45      	ldr	r3, [pc, #276]	; (8000ae0 <MX_DMA_Init+0x140>)
 80009cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80009ce:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80009d2:	603b      	str	r3, [r7, #0]
 80009d4:	683b      	ldr	r3, [r7, #0]

  /* DMA interrupt init */
  /* DMA1_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream0_IRQn, 5, 0);
 80009d6:	2200      	movs	r2, #0
 80009d8:	2105      	movs	r1, #5
 80009da:	200b      	movs	r0, #11
 80009dc:	f003 f866 	bl	8003aac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream0_IRQn);
 80009e0:	200b      	movs	r0, #11
 80009e2:	f003 f87f 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream1_IRQn, 5, 0);
 80009e6:	2200      	movs	r2, #0
 80009e8:	2105      	movs	r1, #5
 80009ea:	200c      	movs	r0, #12
 80009ec:	f003 f85e 	bl	8003aac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream1_IRQn);
 80009f0:	200c      	movs	r0, #12
 80009f2:	f003 f877 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream2_IRQn, 5, 0);
 80009f6:	2200      	movs	r2, #0
 80009f8:	2105      	movs	r1, #5
 80009fa:	200d      	movs	r0, #13
 80009fc:	f003 f856 	bl	8003aac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream2_IRQn);
 8000a00:	200d      	movs	r0, #13
 8000a02:	f003 f86f 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream3_IRQn, 5, 0);
 8000a06:	2200      	movs	r2, #0
 8000a08:	2105      	movs	r1, #5
 8000a0a:	200e      	movs	r0, #14
 8000a0c:	f003 f84e 	bl	8003aac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream3_IRQn);
 8000a10:	200e      	movs	r0, #14
 8000a12:	f003 f867 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream4_IRQn, 5, 0);
 8000a16:	2200      	movs	r2, #0
 8000a18:	2105      	movs	r1, #5
 8000a1a:	200f      	movs	r0, #15
 8000a1c:	f003 f846 	bl	8003aac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream4_IRQn);
 8000a20:	200f      	movs	r0, #15
 8000a22:	f003 f85f 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 5, 0);
 8000a26:	2200      	movs	r2, #0
 8000a28:	2105      	movs	r1, #5
 8000a2a:	2010      	movs	r0, #16
 8000a2c:	f003 f83e 	bl	8003aac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 8000a30:	2010      	movs	r0, #16
 8000a32:	f003 f857 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 5, 0);
 8000a36:	2200      	movs	r2, #0
 8000a38:	2105      	movs	r1, #5
 8000a3a:	2011      	movs	r0, #17
 8000a3c:	f003 f836 	bl	8003aac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 8000a40:	2011      	movs	r0, #17
 8000a42:	f003 f84f 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream7_IRQn, 5, 0);
 8000a46:	2200      	movs	r2, #0
 8000a48:	2105      	movs	r1, #5
 8000a4a:	202f      	movs	r0, #47	; 0x2f
 8000a4c:	f003 f82e 	bl	8003aac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream7_IRQn);
 8000a50:	202f      	movs	r0, #47	; 0x2f
 8000a52:	f003 f847 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream0_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream0_IRQn, 5, 0);
 8000a56:	2200      	movs	r2, #0
 8000a58:	2105      	movs	r1, #5
 8000a5a:	2038      	movs	r0, #56	; 0x38
 8000a5c:	f003 f826 	bl	8003aac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream0_IRQn);
 8000a60:	2038      	movs	r0, #56	; 0x38
 8000a62:	f003 f83f 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream1_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream1_IRQn, 5, 0);
 8000a66:	2200      	movs	r2, #0
 8000a68:	2105      	movs	r1, #5
 8000a6a:	2039      	movs	r0, #57	; 0x39
 8000a6c:	f003 f81e 	bl	8003aac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream1_IRQn);
 8000a70:	2039      	movs	r0, #57	; 0x39
 8000a72:	f003 f837 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream2_IRQn, 5, 0);
 8000a76:	2200      	movs	r2, #0
 8000a78:	2105      	movs	r1, #5
 8000a7a:	203a      	movs	r0, #58	; 0x3a
 8000a7c:	f003 f816 	bl	8003aac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream2_IRQn);
 8000a80:	203a      	movs	r0, #58	; 0x3a
 8000a82:	f003 f82f 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream3_IRQn, 5, 0);
 8000a86:	2200      	movs	r2, #0
 8000a88:	2105      	movs	r1, #5
 8000a8a:	203b      	movs	r0, #59	; 0x3b
 8000a8c:	f003 f80e 	bl	8003aac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream3_IRQn);
 8000a90:	203b      	movs	r0, #59	; 0x3b
 8000a92:	f003 f827 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream4_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream4_IRQn, 5, 0);
 8000a96:	2200      	movs	r2, #0
 8000a98:	2105      	movs	r1, #5
 8000a9a:	203c      	movs	r0, #60	; 0x3c
 8000a9c:	f003 f806 	bl	8003aac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream4_IRQn);
 8000aa0:	203c      	movs	r0, #60	; 0x3c
 8000aa2:	f003 f81f 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream5_IRQn, 5, 0);
 8000aa6:	2200      	movs	r2, #0
 8000aa8:	2105      	movs	r1, #5
 8000aaa:	2044      	movs	r0, #68	; 0x44
 8000aac:	f002 fffe 	bl	8003aac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream5_IRQn);
 8000ab0:	2044      	movs	r0, #68	; 0x44
 8000ab2:	f003 f817 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream6_IRQn, 5, 0);
 8000ab6:	2200      	movs	r2, #0
 8000ab8:	2105      	movs	r1, #5
 8000aba:	2045      	movs	r0, #69	; 0x45
 8000abc:	f002 fff6 	bl	8003aac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream6_IRQn);
 8000ac0:	2045      	movs	r0, #69	; 0x45
 8000ac2:	f003 f80f 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
  /* DMA2_Stream7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA2_Stream7_IRQn, 5, 0);
 8000ac6:	2200      	movs	r2, #0
 8000ac8:	2105      	movs	r1, #5
 8000aca:	2046      	movs	r0, #70	; 0x46
 8000acc:	f002 ffee 	bl	8003aac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA2_Stream7_IRQn);
 8000ad0:	2046      	movs	r0, #70	; 0x46
 8000ad2:	f003 f807 	bl	8003ae4 <HAL_NVIC_EnableIRQ>

}
 8000ad6:	bf00      	nop
 8000ad8:	3708      	adds	r7, #8
 8000ada:	46bd      	mov	sp, r7
 8000adc:	bd80      	pop	{r7, pc}
 8000ade:	bf00      	nop
 8000ae0:	40023800 	.word	0x40023800

08000ae4 <vApplicationGetIdleTaskMemory>:
/* USER CODE BEGIN GET_IDLE_TASK_MEMORY */
static StaticTask_t xIdleTaskTCBBuffer;
static StackType_t xIdleStack[configMINIMAL_STACK_SIZE];

void vApplicationGetIdleTaskMemory( StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize )
{
 8000ae4:	b480      	push	{r7}
 8000ae6:	b085      	sub	sp, #20
 8000ae8:	af00      	add	r7, sp, #0
 8000aea:	60f8      	str	r0, [r7, #12]
 8000aec:	60b9      	str	r1, [r7, #8]
 8000aee:	607a      	str	r2, [r7, #4]
  *ppxIdleTaskTCBBuffer = &xIdleTaskTCBBuffer;
 8000af0:	68fb      	ldr	r3, [r7, #12]
 8000af2:	4a07      	ldr	r2, [pc, #28]	; (8000b10 <vApplicationGetIdleTaskMemory+0x2c>)
 8000af4:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &xIdleStack[0];
 8000af6:	68bb      	ldr	r3, [r7, #8]
 8000af8:	4a06      	ldr	r2, [pc, #24]	; (8000b14 <vApplicationGetIdleTaskMemory+0x30>)
 8000afa:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize = configMINIMAL_STACK_SIZE;
 8000afc:	687b      	ldr	r3, [r7, #4]
 8000afe:	2280      	movs	r2, #128	; 0x80
 8000b00:	601a      	str	r2, [r3, #0]
  /* place for user code */
}
 8000b02:	bf00      	nop
 8000b04:	3714      	adds	r7, #20
 8000b06:	46bd      	mov	sp, r7
 8000b08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b0c:	4770      	bx	lr
 8000b0e:	bf00      	nop
 8000b10:	200003f0 	.word	0x200003f0
 8000b14:	20000490 	.word	0x20000490

08000b18 <MX_FREERTOS_Init>:
/**
  * @brief  FreeRTOS initialization
  * @param  None
  * @retval None
  */
void MX_FREERTOS_Init(void) {
 8000b18:	b5b0      	push	{r4, r5, r7, lr}
 8000b1a:	b088      	sub	sp, #32
 8000b1c:	af00      	add	r7, sp, #0
  /* add queues, ... */
  /* USER CODE END RTOS_QUEUES */

  /* Create the thread(s) */
  /* definition and creation of defaultTask */
  osThreadDef(defaultTask, StartDefaultTask, osPriorityNormal, 0, 128);
 8000b1e:	4b0a      	ldr	r3, [pc, #40]	; (8000b48 <MX_FREERTOS_Init+0x30>)
 8000b20:	1d3c      	adds	r4, r7, #4
 8000b22:	461d      	mov	r5, r3
 8000b24:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8000b26:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8000b28:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 8000b2c:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  defaultTaskHandle = osThreadCreate(osThread(defaultTask), NULL);
 8000b30:	1d3b      	adds	r3, r7, #4
 8000b32:	2100      	movs	r1, #0
 8000b34:	4618      	mov	r0, r3
 8000b36:	f00d ff32 	bl	800e99e <osThreadCreate>
 8000b3a:	4603      	mov	r3, r0
 8000b3c:	4a03      	ldr	r2, [pc, #12]	; (8000b4c <MX_FREERTOS_Init+0x34>)
 8000b3e:	6013      	str	r3, [r2, #0]

  /* USER CODE BEGIN RTOS_THREADS */
  /* add threads, ... */
  /* USER CODE END RTOS_THREADS */

}
 8000b40:	bf00      	nop
 8000b42:	3720      	adds	r7, #32
 8000b44:	46bd      	mov	sp, r7
 8000b46:	bdb0      	pop	{r4, r5, r7, pc}
 8000b48:	0801e3a0 	.word	0x0801e3a0
 8000b4c:	200003ec 	.word	0x200003ec

08000b50 <StartDefaultTask>:
  * @param  argument: Not used
  * @retval None
  */
/* USER CODE END Header_StartDefaultTask */
void StartDefaultTask(void const * argument)
{
 8000b50:	b580      	push	{r7, lr}
 8000b52:	b082      	sub	sp, #8
 8000b54:	af00      	add	r7, sp, #0
 8000b56:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000b58:	f00d f84c 	bl	800dbf4 <MX_LWIP_Init>
  /* USER CODE BEGIN StartDefaultTask */
  /* Infinite loop */
  for(;;)
  {
    osDelay(1);
 8000b5c:	2001      	movs	r0, #1
 8000b5e:	f00d ff76 	bl	800ea4e <osDelay>
 8000b62:	e7fb      	b.n	8000b5c <StartDefaultTask+0xc>

08000b64 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8000b64:	b580      	push	{r7, lr}
 8000b66:	b08e      	sub	sp, #56	; 0x38
 8000b68:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000b6a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000b6e:	2200      	movs	r2, #0
 8000b70:	601a      	str	r2, [r3, #0]
 8000b72:	605a      	str	r2, [r3, #4]
 8000b74:	609a      	str	r2, [r3, #8]
 8000b76:	60da      	str	r2, [r3, #12]
 8000b78:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8000b7a:	4b4c      	ldr	r3, [pc, #304]	; (8000cac <MX_GPIO_Init+0x148>)
 8000b7c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b7e:	4a4b      	ldr	r2, [pc, #300]	; (8000cac <MX_GPIO_Init+0x148>)
 8000b80:	f043 0310 	orr.w	r3, r3, #16
 8000b84:	6313      	str	r3, [r2, #48]	; 0x30
 8000b86:	4b49      	ldr	r3, [pc, #292]	; (8000cac <MX_GPIO_Init+0x148>)
 8000b88:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b8a:	f003 0310 	and.w	r3, r3, #16
 8000b8e:	623b      	str	r3, [r7, #32]
 8000b90:	6a3b      	ldr	r3, [r7, #32]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8000b92:	4b46      	ldr	r3, [pc, #280]	; (8000cac <MX_GPIO_Init+0x148>)
 8000b94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000b96:	4a45      	ldr	r2, [pc, #276]	; (8000cac <MX_GPIO_Init+0x148>)
 8000b98:	f043 0304 	orr.w	r3, r3, #4
 8000b9c:	6313      	str	r3, [r2, #48]	; 0x30
 8000b9e:	4b43      	ldr	r3, [pc, #268]	; (8000cac <MX_GPIO_Init+0x148>)
 8000ba0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000ba2:	f003 0304 	and.w	r3, r3, #4
 8000ba6:	61fb      	str	r3, [r7, #28]
 8000ba8:	69fb      	ldr	r3, [r7, #28]
  __HAL_RCC_GPIOF_CLK_ENABLE();
 8000baa:	4b40      	ldr	r3, [pc, #256]	; (8000cac <MX_GPIO_Init+0x148>)
 8000bac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bae:	4a3f      	ldr	r2, [pc, #252]	; (8000cac <MX_GPIO_Init+0x148>)
 8000bb0:	f043 0320 	orr.w	r3, r3, #32
 8000bb4:	6313      	str	r3, [r2, #48]	; 0x30
 8000bb6:	4b3d      	ldr	r3, [pc, #244]	; (8000cac <MX_GPIO_Init+0x148>)
 8000bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bba:	f003 0320 	and.w	r3, r3, #32
 8000bbe:	61bb      	str	r3, [r7, #24]
 8000bc0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8000bc2:	4b3a      	ldr	r3, [pc, #232]	; (8000cac <MX_GPIO_Init+0x148>)
 8000bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bc6:	4a39      	ldr	r2, [pc, #228]	; (8000cac <MX_GPIO_Init+0x148>)
 8000bc8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8000bcc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bce:	4b37      	ldr	r3, [pc, #220]	; (8000cac <MX_GPIO_Init+0x148>)
 8000bd0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bd2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8000bd6:	617b      	str	r3, [r7, #20]
 8000bd8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000bda:	4b34      	ldr	r3, [pc, #208]	; (8000cac <MX_GPIO_Init+0x148>)
 8000bdc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bde:	4a33      	ldr	r2, [pc, #204]	; (8000cac <MX_GPIO_Init+0x148>)
 8000be0:	f043 0301 	orr.w	r3, r3, #1
 8000be4:	6313      	str	r3, [r2, #48]	; 0x30
 8000be6:	4b31      	ldr	r3, [pc, #196]	; (8000cac <MX_GPIO_Init+0x148>)
 8000be8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bea:	f003 0301 	and.w	r3, r3, #1
 8000bee:	613b      	str	r3, [r7, #16]
 8000bf0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8000bf2:	4b2e      	ldr	r3, [pc, #184]	; (8000cac <MX_GPIO_Init+0x148>)
 8000bf4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000bf6:	4a2d      	ldr	r2, [pc, #180]	; (8000cac <MX_GPIO_Init+0x148>)
 8000bf8:	f043 0302 	orr.w	r3, r3, #2
 8000bfc:	6313      	str	r3, [r2, #48]	; 0x30
 8000bfe:	4b2b      	ldr	r3, [pc, #172]	; (8000cac <MX_GPIO_Init+0x148>)
 8000c00:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c02:	f003 0302 	and.w	r3, r3, #2
 8000c06:	60fb      	str	r3, [r7, #12]
 8000c08:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c0a:	4b28      	ldr	r3, [pc, #160]	; (8000cac <MX_GPIO_Init+0x148>)
 8000c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c0e:	4a27      	ldr	r2, [pc, #156]	; (8000cac <MX_GPIO_Init+0x148>)
 8000c10:	f043 0308 	orr.w	r3, r3, #8
 8000c14:	6313      	str	r3, [r2, #48]	; 0x30
 8000c16:	4b25      	ldr	r3, [pc, #148]	; (8000cac <MX_GPIO_Init+0x148>)
 8000c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c1a:	f003 0308 	and.w	r3, r3, #8
 8000c1e:	60bb      	str	r3, [r7, #8]
 8000c20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 8000c22:	4b22      	ldr	r3, [pc, #136]	; (8000cac <MX_GPIO_Init+0x148>)
 8000c24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c26:	4a21      	ldr	r2, [pc, #132]	; (8000cac <MX_GPIO_Init+0x148>)
 8000c28:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8000c2c:	6313      	str	r3, [r2, #48]	; 0x30
 8000c2e:	4b1f      	ldr	r3, [pc, #124]	; (8000cac <MX_GPIO_Init+0x148>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000c36:	607b      	str	r3, [r7, #4]
 8000c38:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, LD3_Pin|LD2_Pin, GPIO_PIN_RESET);
 8000c3a:	2200      	movs	r2, #0
 8000c3c:	f44f 4181 	mov.w	r1, #16512	; 0x4080
 8000c40:	481b      	ldr	r0, [pc, #108]	; (8000cb0 <MX_GPIO_Init+0x14c>)
 8000c42:	f005 fbf5 	bl	8006430 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOG, GPIO_PIN_6, GPIO_PIN_RESET);
 8000c46:	2200      	movs	r2, #0
 8000c48:	2140      	movs	r1, #64	; 0x40
 8000c4a:	481a      	ldr	r0, [pc, #104]	; (8000cb4 <MX_GPIO_Init+0x150>)
 8000c4c:	f005 fbf0 	bl	8006430 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PBPin PBPin */
  GPIO_InitStruct.Pin = LD3_Pin|LD2_Pin;
 8000c50:	f44f 4381 	mov.w	r3, #16512	; 0x4080
 8000c54:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c56:	2301      	movs	r3, #1
 8000c58:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c5a:	2300      	movs	r3, #0
 8000c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c5e:	2300      	movs	r3, #0
 8000c60:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000c62:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c66:	4619      	mov	r1, r3
 8000c68:	4811      	ldr	r0, [pc, #68]	; (8000cb0 <MX_GPIO_Init+0x14c>)
 8000c6a:	f005 fa35 	bl	80060d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PG6 */
  GPIO_InitStruct.Pin = GPIO_PIN_6;
 8000c6e:	2340      	movs	r3, #64	; 0x40
 8000c70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000c72:	2301      	movs	r3, #1
 8000c74:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c76:	2300      	movs	r3, #0
 8000c78:	62fb      	str	r3, [r7, #44]	; 0x2c
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c7a:	2300      	movs	r3, #0
 8000c7c:	633b      	str	r3, [r7, #48]	; 0x30
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 8000c7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c82:	4619      	mov	r1, r3
 8000c84:	480b      	ldr	r0, [pc, #44]	; (8000cb4 <MX_GPIO_Init+0x150>)
 8000c86:	f005 fa27 	bl	80060d8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = USB_OverCurrent_Pin;
 8000c8a:	2380      	movs	r3, #128	; 0x80
 8000c8c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8000c8e:	2300      	movs	r3, #0
 8000c90:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c92:	2300      	movs	r3, #0
 8000c94:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(USB_OverCurrent_GPIO_Port, &GPIO_InitStruct);
 8000c96:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8000c9a:	4619      	mov	r1, r3
 8000c9c:	4805      	ldr	r0, [pc, #20]	; (8000cb4 <MX_GPIO_Init+0x150>)
 8000c9e:	f005 fa1b 	bl	80060d8 <HAL_GPIO_Init>

}
 8000ca2:	bf00      	nop
 8000ca4:	3738      	adds	r7, #56	; 0x38
 8000ca6:	46bd      	mov	sp, r7
 8000ca8:	bd80      	pop	{r7, pc}
 8000caa:	bf00      	nop
 8000cac:	40023800 	.word	0x40023800
 8000cb0:	40020400 	.word	0x40020400
 8000cb4:	40021800 	.word	0x40021800

08000cb8 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c3_rx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8000cb8:	b580      	push	{r7, lr}
 8000cba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8000cbc:	4b1b      	ldr	r3, [pc, #108]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cbe:	4a1c      	ldr	r2, [pc, #112]	; (8000d30 <MX_I2C1_Init+0x78>)
 8000cc0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x20404768;
 8000cc2:	4b1a      	ldr	r3, [pc, #104]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cc4:	4a1b      	ldr	r2, [pc, #108]	; (8000d34 <MX_I2C1_Init+0x7c>)
 8000cc6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8000cc8:	4b18      	ldr	r3, [pc, #96]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cca:	2200      	movs	r2, #0
 8000ccc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000cce:	4b17      	ldr	r3, [pc, #92]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cd0:	2201      	movs	r2, #1
 8000cd2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000cd4:	4b15      	ldr	r3, [pc, #84]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8000cda:	4b14      	ldr	r3, [pc, #80]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cdc:	2200      	movs	r2, #0
 8000cde:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000ce0:	4b12      	ldr	r3, [pc, #72]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000ce2:	2200      	movs	r2, #0
 8000ce4:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000ce6:	4b11      	ldr	r3, [pc, #68]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000ce8:	2200      	movs	r2, #0
 8000cea:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000cec:	4b0f      	ldr	r3, [pc, #60]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cee:	2200      	movs	r2, #0
 8000cf0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8000cf2:	480e      	ldr	r0, [pc, #56]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000cf4:	f005 fbb6 	bl	8006464 <HAL_I2C_Init>
 8000cf8:	4603      	mov	r3, r0
 8000cfa:	2b00      	cmp	r3, #0
 8000cfc:	d001      	beq.n	8000d02 <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8000cfe:	f000 fb99 	bl	8001434 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d02:	2100      	movs	r1, #0
 8000d04:	4809      	ldr	r0, [pc, #36]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000d06:	f007 fb09 	bl	800831c <HAL_I2CEx_ConfigAnalogFilter>
 8000d0a:	4603      	mov	r3, r0
 8000d0c:	2b00      	cmp	r3, #0
 8000d0e:	d001      	beq.n	8000d14 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8000d10:	f000 fb90 	bl	8001434 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8000d14:	2100      	movs	r1, #0
 8000d16:	4805      	ldr	r0, [pc, #20]	; (8000d2c <MX_I2C1_Init+0x74>)
 8000d18:	f007 fb4b 	bl	80083b2 <HAL_I2CEx_ConfigDigitalFilter>
 8000d1c:	4603      	mov	r3, r0
 8000d1e:	2b00      	cmp	r3, #0
 8000d20:	d001      	beq.n	8000d26 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8000d22:	f000 fb87 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8000d26:	bf00      	nop
 8000d28:	bd80      	pop	{r7, pc}
 8000d2a:	bf00      	nop
 8000d2c:	20000690 	.word	0x20000690
 8000d30:	40005400 	.word	0x40005400
 8000d34:	20404768 	.word	0x20404768

08000d38 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8000d38:	b580      	push	{r7, lr}
 8000d3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8000d3c:	4b1b      	ldr	r3, [pc, #108]	; (8000dac <MX_I2C2_Init+0x74>)
 8000d3e:	4a1c      	ldr	r2, [pc, #112]	; (8000db0 <MX_I2C2_Init+0x78>)
 8000d40:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x20404768;
 8000d42:	4b1a      	ldr	r3, [pc, #104]	; (8000dac <MX_I2C2_Init+0x74>)
 8000d44:	4a1b      	ldr	r2, [pc, #108]	; (8000db4 <MX_I2C2_Init+0x7c>)
 8000d46:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8000d48:	4b18      	ldr	r3, [pc, #96]	; (8000dac <MX_I2C2_Init+0x74>)
 8000d4a:	2200      	movs	r2, #0
 8000d4c:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000d4e:	4b17      	ldr	r3, [pc, #92]	; (8000dac <MX_I2C2_Init+0x74>)
 8000d50:	2201      	movs	r2, #1
 8000d52:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000d54:	4b15      	ldr	r3, [pc, #84]	; (8000dac <MX_I2C2_Init+0x74>)
 8000d56:	2200      	movs	r2, #0
 8000d58:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8000d5a:	4b14      	ldr	r3, [pc, #80]	; (8000dac <MX_I2C2_Init+0x74>)
 8000d5c:	2200      	movs	r2, #0
 8000d5e:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000d60:	4b12      	ldr	r3, [pc, #72]	; (8000dac <MX_I2C2_Init+0x74>)
 8000d62:	2200      	movs	r2, #0
 8000d64:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000d66:	4b11      	ldr	r3, [pc, #68]	; (8000dac <MX_I2C2_Init+0x74>)
 8000d68:	2200      	movs	r2, #0
 8000d6a:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000d6c:	4b0f      	ldr	r3, [pc, #60]	; (8000dac <MX_I2C2_Init+0x74>)
 8000d6e:	2200      	movs	r2, #0
 8000d70:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8000d72:	480e      	ldr	r0, [pc, #56]	; (8000dac <MX_I2C2_Init+0x74>)
 8000d74:	f005 fb76 	bl	8006464 <HAL_I2C_Init>
 8000d78:	4603      	mov	r3, r0
 8000d7a:	2b00      	cmp	r3, #0
 8000d7c:	d001      	beq.n	8000d82 <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8000d7e:	f000 fb59 	bl	8001434 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000d82:	2100      	movs	r1, #0
 8000d84:	4809      	ldr	r0, [pc, #36]	; (8000dac <MX_I2C2_Init+0x74>)
 8000d86:	f007 fac9 	bl	800831c <HAL_I2CEx_ConfigAnalogFilter>
 8000d8a:	4603      	mov	r3, r0
 8000d8c:	2b00      	cmp	r3, #0
 8000d8e:	d001      	beq.n	8000d94 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8000d90:	f000 fb50 	bl	8001434 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8000d94:	2100      	movs	r1, #0
 8000d96:	4805      	ldr	r0, [pc, #20]	; (8000dac <MX_I2C2_Init+0x74>)
 8000d98:	f007 fb0b 	bl	80083b2 <HAL_I2CEx_ConfigDigitalFilter>
 8000d9c:	4603      	mov	r3, r0
 8000d9e:	2b00      	cmp	r3, #0
 8000da0:	d001      	beq.n	8000da6 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8000da2:	f000 fb47 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8000da6:	bf00      	nop
 8000da8:	bd80      	pop	{r7, pc}
 8000daa:	bf00      	nop
 8000dac:	200006e4 	.word	0x200006e4
 8000db0:	40005800 	.word	0x40005800
 8000db4:	20404768 	.word	0x20404768

08000db8 <MX_I2C3_Init>:
/* I2C3 init function */
void MX_I2C3_Init(void)
{
 8000db8:	b580      	push	{r7, lr}
 8000dba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C3_Init 0 */

  /* USER CODE BEGIN I2C3_Init 1 */

  /* USER CODE END I2C3_Init 1 */
  hi2c3.Instance = I2C3;
 8000dbc:	4b1b      	ldr	r3, [pc, #108]	; (8000e2c <MX_I2C3_Init+0x74>)
 8000dbe:	4a1c      	ldr	r2, [pc, #112]	; (8000e30 <MX_I2C3_Init+0x78>)
 8000dc0:	601a      	str	r2, [r3, #0]
  hi2c3.Init.Timing = 0x20404768;
 8000dc2:	4b1a      	ldr	r3, [pc, #104]	; (8000e2c <MX_I2C3_Init+0x74>)
 8000dc4:	4a1b      	ldr	r2, [pc, #108]	; (8000e34 <MX_I2C3_Init+0x7c>)
 8000dc6:	605a      	str	r2, [r3, #4]
  hi2c3.Init.OwnAddress1 = 0;
 8000dc8:	4b18      	ldr	r3, [pc, #96]	; (8000e2c <MX_I2C3_Init+0x74>)
 8000dca:	2200      	movs	r2, #0
 8000dcc:	609a      	str	r2, [r3, #8]
  hi2c3.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000dce:	4b17      	ldr	r3, [pc, #92]	; (8000e2c <MX_I2C3_Init+0x74>)
 8000dd0:	2201      	movs	r2, #1
 8000dd2:	60da      	str	r2, [r3, #12]
  hi2c3.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000dd4:	4b15      	ldr	r3, [pc, #84]	; (8000e2c <MX_I2C3_Init+0x74>)
 8000dd6:	2200      	movs	r2, #0
 8000dd8:	611a      	str	r2, [r3, #16]
  hi2c3.Init.OwnAddress2 = 0;
 8000dda:	4b14      	ldr	r3, [pc, #80]	; (8000e2c <MX_I2C3_Init+0x74>)
 8000ddc:	2200      	movs	r2, #0
 8000dde:	615a      	str	r2, [r3, #20]
  hi2c3.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000de0:	4b12      	ldr	r3, [pc, #72]	; (8000e2c <MX_I2C3_Init+0x74>)
 8000de2:	2200      	movs	r2, #0
 8000de4:	619a      	str	r2, [r3, #24]
  hi2c3.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000de6:	4b11      	ldr	r3, [pc, #68]	; (8000e2c <MX_I2C3_Init+0x74>)
 8000de8:	2200      	movs	r2, #0
 8000dea:	61da      	str	r2, [r3, #28]
  hi2c3.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000dec:	4b0f      	ldr	r3, [pc, #60]	; (8000e2c <MX_I2C3_Init+0x74>)
 8000dee:	2200      	movs	r2, #0
 8000df0:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c3) != HAL_OK)
 8000df2:	480e      	ldr	r0, [pc, #56]	; (8000e2c <MX_I2C3_Init+0x74>)
 8000df4:	f005 fb36 	bl	8006464 <HAL_I2C_Init>
 8000df8:	4603      	mov	r3, r0
 8000dfa:	2b00      	cmp	r3, #0
 8000dfc:	d001      	beq.n	8000e02 <MX_I2C3_Init+0x4a>
  {
    Error_Handler();
 8000dfe:	f000 fb19 	bl	8001434 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c3, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e02:	2100      	movs	r1, #0
 8000e04:	4809      	ldr	r0, [pc, #36]	; (8000e2c <MX_I2C3_Init+0x74>)
 8000e06:	f007 fa89 	bl	800831c <HAL_I2CEx_ConfigAnalogFilter>
 8000e0a:	4603      	mov	r3, r0
 8000e0c:	2b00      	cmp	r3, #0
 8000e0e:	d001      	beq.n	8000e14 <MX_I2C3_Init+0x5c>
  {
    Error_Handler();
 8000e10:	f000 fb10 	bl	8001434 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c3, 0) != HAL_OK)
 8000e14:	2100      	movs	r1, #0
 8000e16:	4805      	ldr	r0, [pc, #20]	; (8000e2c <MX_I2C3_Init+0x74>)
 8000e18:	f007 facb 	bl	80083b2 <HAL_I2CEx_ConfigDigitalFilter>
 8000e1c:	4603      	mov	r3, r0
 8000e1e:	2b00      	cmp	r3, #0
 8000e20:	d001      	beq.n	8000e26 <MX_I2C3_Init+0x6e>
  {
    Error_Handler();
 8000e22:	f000 fb07 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN I2C3_Init 2 */

  /* USER CODE END I2C3_Init 2 */

}
 8000e26:	bf00      	nop
 8000e28:	bd80      	pop	{r7, pc}
 8000e2a:	bf00      	nop
 8000e2c:	20000738 	.word	0x20000738
 8000e30:	40005c00 	.word	0x40005c00
 8000e34:	20404768 	.word	0x20404768

08000e38 <MX_I2C4_Init>:
/* I2C4 init function */
void MX_I2C4_Init(void)
{
 8000e38:	b580      	push	{r7, lr}
 8000e3a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C4_Init 0 */

  /* USER CODE BEGIN I2C4_Init 1 */

  /* USER CODE END I2C4_Init 1 */
  hi2c4.Instance = I2C4;
 8000e3c:	4b1b      	ldr	r3, [pc, #108]	; (8000eac <MX_I2C4_Init+0x74>)
 8000e3e:	4a1c      	ldr	r2, [pc, #112]	; (8000eb0 <MX_I2C4_Init+0x78>)
 8000e40:	601a      	str	r2, [r3, #0]
  hi2c4.Init.Timing = 0x20404768;
 8000e42:	4b1a      	ldr	r3, [pc, #104]	; (8000eac <MX_I2C4_Init+0x74>)
 8000e44:	4a1b      	ldr	r2, [pc, #108]	; (8000eb4 <MX_I2C4_Init+0x7c>)
 8000e46:	605a      	str	r2, [r3, #4]
  hi2c4.Init.OwnAddress1 = 0;
 8000e48:	4b18      	ldr	r3, [pc, #96]	; (8000eac <MX_I2C4_Init+0x74>)
 8000e4a:	2200      	movs	r2, #0
 8000e4c:	609a      	str	r2, [r3, #8]
  hi2c4.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8000e4e:	4b17      	ldr	r3, [pc, #92]	; (8000eac <MX_I2C4_Init+0x74>)
 8000e50:	2201      	movs	r2, #1
 8000e52:	60da      	str	r2, [r3, #12]
  hi2c4.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8000e54:	4b15      	ldr	r3, [pc, #84]	; (8000eac <MX_I2C4_Init+0x74>)
 8000e56:	2200      	movs	r2, #0
 8000e58:	611a      	str	r2, [r3, #16]
  hi2c4.Init.OwnAddress2 = 0;
 8000e5a:	4b14      	ldr	r3, [pc, #80]	; (8000eac <MX_I2C4_Init+0x74>)
 8000e5c:	2200      	movs	r2, #0
 8000e5e:	615a      	str	r2, [r3, #20]
  hi2c4.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8000e60:	4b12      	ldr	r3, [pc, #72]	; (8000eac <MX_I2C4_Init+0x74>)
 8000e62:	2200      	movs	r2, #0
 8000e64:	619a      	str	r2, [r3, #24]
  hi2c4.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8000e66:	4b11      	ldr	r3, [pc, #68]	; (8000eac <MX_I2C4_Init+0x74>)
 8000e68:	2200      	movs	r2, #0
 8000e6a:	61da      	str	r2, [r3, #28]
  hi2c4.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8000e6c:	4b0f      	ldr	r3, [pc, #60]	; (8000eac <MX_I2C4_Init+0x74>)
 8000e6e:	2200      	movs	r2, #0
 8000e70:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c4) != HAL_OK)
 8000e72:	480e      	ldr	r0, [pc, #56]	; (8000eac <MX_I2C4_Init+0x74>)
 8000e74:	f005 faf6 	bl	8006464 <HAL_I2C_Init>
 8000e78:	4603      	mov	r3, r0
 8000e7a:	2b00      	cmp	r3, #0
 8000e7c:	d001      	beq.n	8000e82 <MX_I2C4_Init+0x4a>
  {
    Error_Handler();
 8000e7e:	f000 fad9 	bl	8001434 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c4, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8000e82:	2100      	movs	r1, #0
 8000e84:	4809      	ldr	r0, [pc, #36]	; (8000eac <MX_I2C4_Init+0x74>)
 8000e86:	f007 fa49 	bl	800831c <HAL_I2CEx_ConfigAnalogFilter>
 8000e8a:	4603      	mov	r3, r0
 8000e8c:	2b00      	cmp	r3, #0
 8000e8e:	d001      	beq.n	8000e94 <MX_I2C4_Init+0x5c>
  {
    Error_Handler();
 8000e90:	f000 fad0 	bl	8001434 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c4, 0) != HAL_OK)
 8000e94:	2100      	movs	r1, #0
 8000e96:	4805      	ldr	r0, [pc, #20]	; (8000eac <MX_I2C4_Init+0x74>)
 8000e98:	f007 fa8b 	bl	80083b2 <HAL_I2CEx_ConfigDigitalFilter>
 8000e9c:	4603      	mov	r3, r0
 8000e9e:	2b00      	cmp	r3, #0
 8000ea0:	d001      	beq.n	8000ea6 <MX_I2C4_Init+0x6e>
  {
    Error_Handler();
 8000ea2:	f000 fac7 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN I2C4_Init 2 */

  /* USER CODE END I2C4_Init 2 */

}
 8000ea6:	bf00      	nop
 8000ea8:	bd80      	pop	{r7, pc}
 8000eaa:	bf00      	nop
 8000eac:	2000078c 	.word	0x2000078c
 8000eb0:	40006000 	.word	0x40006000
 8000eb4:	20404768 	.word	0x20404768

08000eb8 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8000eb8:	b580      	push	{r7, lr}
 8000eba:	b0b2      	sub	sp, #200	; 0xc8
 8000ebc:	af00      	add	r7, sp, #0
 8000ebe:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000ec0:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000ec4:	2200      	movs	r2, #0
 8000ec6:	601a      	str	r2, [r3, #0]
 8000ec8:	605a      	str	r2, [r3, #4]
 8000eca:	609a      	str	r2, [r3, #8]
 8000ecc:	60da      	str	r2, [r3, #12]
 8000ece:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 8000ed0:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ed4:	2284      	movs	r2, #132	; 0x84
 8000ed6:	2100      	movs	r1, #0
 8000ed8:	4618      	mov	r0, r3
 8000eda:	f01c fb4c 	bl	801d576 <memset>
  if(i2cHandle->Instance==I2C1)
 8000ede:	687b      	ldr	r3, [r7, #4]
 8000ee0:	681b      	ldr	r3, [r3, #0]
 8000ee2:	4a69      	ldr	r2, [pc, #420]	; (8001088 <HAL_I2C_MspInit+0x1d0>)
 8000ee4:	4293      	cmp	r3, r2
 8000ee6:	d17c      	bne.n	8000fe2 <HAL_I2C_MspInit+0x12a>

  /* USER CODE END I2C1_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C1;
 8000ee8:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8000eec:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ef4:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ef8:	4618      	mov	r0, r3
 8000efa:	f008 f803 	bl	8008f04 <HAL_RCCEx_PeriphCLKConfig>
 8000efe:	4603      	mov	r3, r0
 8000f00:	2b00      	cmp	r3, #0
 8000f02:	d001      	beq.n	8000f08 <HAL_I2C_MspInit+0x50>
    {
      Error_Handler();
 8000f04:	f000 fa96 	bl	8001434 <Error_Handler>
    }

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8000f08:	4b60      	ldr	r3, [pc, #384]	; (800108c <HAL_I2C_MspInit+0x1d4>)
 8000f0a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f0c:	4a5f      	ldr	r2, [pc, #380]	; (800108c <HAL_I2C_MspInit+0x1d4>)
 8000f0e:	f043 0302 	orr.w	r3, r3, #2
 8000f12:	6313      	str	r3, [r2, #48]	; 0x30
 8000f14:	4b5d      	ldr	r3, [pc, #372]	; (800108c <HAL_I2C_MspInit+0x1d4>)
 8000f16:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000f18:	f003 0302 	and.w	r3, r3, #2
 8000f1c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8000f1e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8000f20:	f44f 7340 	mov.w	r3, #768	; 0x300
 8000f24:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8000f28:	2312      	movs	r3, #18
 8000f2a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8000f2e:	2301      	movs	r3, #1
 8000f30:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8000f34:	2303      	movs	r3, #3
 8000f36:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8000f3a:	2304      	movs	r3, #4
 8000f3c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8000f40:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8000f44:	4619      	mov	r1, r3
 8000f46:	4852      	ldr	r0, [pc, #328]	; (8001090 <HAL_I2C_MspInit+0x1d8>)
 8000f48:	f005 f8c6 	bl	80060d8 <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8000f4c:	4b4f      	ldr	r3, [pc, #316]	; (800108c <HAL_I2C_MspInit+0x1d4>)
 8000f4e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f50:	4a4e      	ldr	r2, [pc, #312]	; (800108c <HAL_I2C_MspInit+0x1d4>)
 8000f52:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8000f56:	6413      	str	r3, [r2, #64]	; 0x40
 8000f58:	4b4c      	ldr	r3, [pc, #304]	; (800108c <HAL_I2C_MspInit+0x1d4>)
 8000f5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000f5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8000f60:	62bb      	str	r3, [r7, #40]	; 0x28
 8000f62:	6abb      	ldr	r3, [r7, #40]	; 0x28

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Stream5;
 8000f64:	4b4b      	ldr	r3, [pc, #300]	; (8001094 <HAL_I2C_MspInit+0x1dc>)
 8000f66:	4a4c      	ldr	r2, [pc, #304]	; (8001098 <HAL_I2C_MspInit+0x1e0>)
 8000f68:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Channel = DMA_CHANNEL_1;
 8000f6a:	4b4a      	ldr	r3, [pc, #296]	; (8001094 <HAL_I2C_MspInit+0x1dc>)
 8000f6c:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 8000f70:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8000f72:	4b48      	ldr	r3, [pc, #288]	; (8001094 <HAL_I2C_MspInit+0x1dc>)
 8000f74:	2200      	movs	r2, #0
 8000f76:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8000f78:	4b46      	ldr	r3, [pc, #280]	; (8001094 <HAL_I2C_MspInit+0x1dc>)
 8000f7a:	2200      	movs	r2, #0
 8000f7c:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8000f7e:	4b45      	ldr	r3, [pc, #276]	; (8001094 <HAL_I2C_MspInit+0x1dc>)
 8000f80:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8000f84:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8000f86:	4b43      	ldr	r3, [pc, #268]	; (8001094 <HAL_I2C_MspInit+0x1dc>)
 8000f88:	2200      	movs	r2, #0
 8000f8a:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8000f8c:	4b41      	ldr	r3, [pc, #260]	; (8001094 <HAL_I2C_MspInit+0x1dc>)
 8000f8e:	2200      	movs	r2, #0
 8000f90:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8000f92:	4b40      	ldr	r3, [pc, #256]	; (8001094 <HAL_I2C_MspInit+0x1dc>)
 8000f94:	2200      	movs	r2, #0
 8000f96:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8000f98:	4b3e      	ldr	r3, [pc, #248]	; (8001094 <HAL_I2C_MspInit+0x1dc>)
 8000f9a:	2200      	movs	r2, #0
 8000f9c:	621a      	str	r2, [r3, #32]
    hdma_i2c1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8000f9e:	4b3d      	ldr	r3, [pc, #244]	; (8001094 <HAL_I2C_MspInit+0x1dc>)
 8000fa0:	2200      	movs	r2, #0
 8000fa2:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8000fa4:	483b      	ldr	r0, [pc, #236]	; (8001094 <HAL_I2C_MspInit+0x1dc>)
 8000fa6:	f002 fea7 	bl	8003cf8 <HAL_DMA_Init>
 8000faa:	4603      	mov	r3, r0
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d001      	beq.n	8000fb4 <HAL_I2C_MspInit+0xfc>
    {
      Error_Handler();
 8000fb0:	f000 fa40 	bl	8001434 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8000fb4:	687b      	ldr	r3, [r7, #4]
 8000fb6:	4a37      	ldr	r2, [pc, #220]	; (8001094 <HAL_I2C_MspInit+0x1dc>)
 8000fb8:	63da      	str	r2, [r3, #60]	; 0x3c
 8000fba:	4a36      	ldr	r2, [pc, #216]	; (8001094 <HAL_I2C_MspInit+0x1dc>)
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	6393      	str	r3, [r2, #56]	; 0x38

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 5, 0);
 8000fc0:	2200      	movs	r2, #0
 8000fc2:	2105      	movs	r1, #5
 8000fc4:	201f      	movs	r0, #31
 8000fc6:	f002 fd71 	bl	8003aac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8000fca:	201f      	movs	r0, #31
 8000fcc:	f002 fd8a 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 5, 0);
 8000fd0:	2200      	movs	r2, #0
 8000fd2:	2105      	movs	r1, #5
 8000fd4:	2020      	movs	r0, #32
 8000fd6:	f002 fd69 	bl	8003aac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8000fda:	2020      	movs	r0, #32
 8000fdc:	f002 fd82 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
  /* USER CODE BEGIN I2C4_MspInit 1 */

  /* USER CODE END I2C4_MspInit 1 */
  }
}
 8000fe0:	e158      	b.n	8001294 <HAL_I2C_MspInit+0x3dc>
  else if(i2cHandle->Instance==I2C2)
 8000fe2:	687b      	ldr	r3, [r7, #4]
 8000fe4:	681b      	ldr	r3, [r3, #0]
 8000fe6:	4a2d      	ldr	r2, [pc, #180]	; (800109c <HAL_I2C_MspInit+0x1e4>)
 8000fe8:	4293      	cmp	r3, r2
 8000fea:	d15b      	bne.n	80010a4 <HAL_I2C_MspInit+0x1ec>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C2;
 8000fec:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 8000ff0:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.I2c2ClockSelection = RCC_I2C2CLKSOURCE_PCLK1;
 8000ff2:	2300      	movs	r3, #0
 8000ff4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8000ff8:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8000ffc:	4618      	mov	r0, r3
 8000ffe:	f007 ff81 	bl	8008f04 <HAL_RCCEx_PeriphCLKConfig>
 8001002:	4603      	mov	r3, r0
 8001004:	2b00      	cmp	r3, #0
 8001006:	d001      	beq.n	800100c <HAL_I2C_MspInit+0x154>
      Error_Handler();
 8001008:	f000 fa14 	bl	8001434 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 800100c:	4b1f      	ldr	r3, [pc, #124]	; (800108c <HAL_I2C_MspInit+0x1d4>)
 800100e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001010:	4a1e      	ldr	r2, [pc, #120]	; (800108c <HAL_I2C_MspInit+0x1d4>)
 8001012:	f043 0320 	orr.w	r3, r3, #32
 8001016:	6313      	str	r3, [r2, #48]	; 0x30
 8001018:	4b1c      	ldr	r3, [pc, #112]	; (800108c <HAL_I2C_MspInit+0x1d4>)
 800101a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800101c:	f003 0320 	and.w	r3, r3, #32
 8001020:	627b      	str	r3, [r7, #36]	; 0x24
 8001022:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 8001024:	2303      	movs	r3, #3
 8001026:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800102a:	2312      	movs	r3, #18
 800102c:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001030:	2301      	movs	r3, #1
 8001032:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001036:	2303      	movs	r3, #3
 8001038:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800103c:	2304      	movs	r3, #4
 800103e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001042:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001046:	4619      	mov	r1, r3
 8001048:	4815      	ldr	r0, [pc, #84]	; (80010a0 <HAL_I2C_MspInit+0x1e8>)
 800104a:	f005 f845 	bl	80060d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 800104e:	4b0f      	ldr	r3, [pc, #60]	; (800108c <HAL_I2C_MspInit+0x1d4>)
 8001050:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001052:	4a0e      	ldr	r2, [pc, #56]	; (800108c <HAL_I2C_MspInit+0x1d4>)
 8001054:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 8001058:	6413      	str	r3, [r2, #64]	; 0x40
 800105a:	4b0c      	ldr	r3, [pc, #48]	; (800108c <HAL_I2C_MspInit+0x1d4>)
 800105c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800105e:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8001062:	623b      	str	r3, [r7, #32]
 8001064:	6a3b      	ldr	r3, [r7, #32]
    HAL_NVIC_SetPriority(I2C2_EV_IRQn, 5, 0);
 8001066:	2200      	movs	r2, #0
 8001068:	2105      	movs	r1, #5
 800106a:	2021      	movs	r0, #33	; 0x21
 800106c:	f002 fd1e 	bl	8003aac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_EV_IRQn);
 8001070:	2021      	movs	r0, #33	; 0x21
 8001072:	f002 fd37 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C2_ER_IRQn, 5, 0);
 8001076:	2200      	movs	r2, #0
 8001078:	2105      	movs	r1, #5
 800107a:	2022      	movs	r0, #34	; 0x22
 800107c:	f002 fd16 	bl	8003aac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C2_ER_IRQn);
 8001080:	2022      	movs	r0, #34	; 0x22
 8001082:	f002 fd2f 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
}
 8001086:	e105      	b.n	8001294 <HAL_I2C_MspInit+0x3dc>
 8001088:	40005400 	.word	0x40005400
 800108c:	40023800 	.word	0x40023800
 8001090:	40020400 	.word	0x40020400
 8001094:	200007e0 	.word	0x200007e0
 8001098:	40026088 	.word	0x40026088
 800109c:	40005800 	.word	0x40005800
 80010a0:	40021400 	.word	0x40021400
  else if(i2cHandle->Instance==I2C3)
 80010a4:	687b      	ldr	r3, [r7, #4]
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	4a7c      	ldr	r2, [pc, #496]	; (800129c <HAL_I2C_MspInit+0x3e4>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	f040 809f 	bne.w	80011ee <HAL_I2C_MspInit+0x336>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C3;
 80010b0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80010b4:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.I2c3ClockSelection = RCC_I2C3CLKSOURCE_PCLK1;
 80010b6:	2300      	movs	r3, #0
 80010b8:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80010bc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80010c0:	4618      	mov	r0, r3
 80010c2:	f007 ff1f 	bl	8008f04 <HAL_RCCEx_PeriphCLKConfig>
 80010c6:	4603      	mov	r3, r0
 80010c8:	2b00      	cmp	r3, #0
 80010ca:	d001      	beq.n	80010d0 <HAL_I2C_MspInit+0x218>
      Error_Handler();
 80010cc:	f000 f9b2 	bl	8001434 <Error_Handler>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80010d0:	4b73      	ldr	r3, [pc, #460]	; (80012a0 <HAL_I2C_MspInit+0x3e8>)
 80010d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010d4:	4a72      	ldr	r2, [pc, #456]	; (80012a0 <HAL_I2C_MspInit+0x3e8>)
 80010d6:	f043 0304 	orr.w	r3, r3, #4
 80010da:	6313      	str	r3, [r2, #48]	; 0x30
 80010dc:	4b70      	ldr	r3, [pc, #448]	; (80012a0 <HAL_I2C_MspInit+0x3e8>)
 80010de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010e0:	f003 0304 	and.w	r3, r3, #4
 80010e4:	61fb      	str	r3, [r7, #28]
 80010e6:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80010e8:	4b6d      	ldr	r3, [pc, #436]	; (80012a0 <HAL_I2C_MspInit+0x3e8>)
 80010ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010ec:	4a6c      	ldr	r2, [pc, #432]	; (80012a0 <HAL_I2C_MspInit+0x3e8>)
 80010ee:	f043 0301 	orr.w	r3, r3, #1
 80010f2:	6313      	str	r3, [r2, #48]	; 0x30
 80010f4:	4b6a      	ldr	r3, [pc, #424]	; (80012a0 <HAL_I2C_MspInit+0x3e8>)
 80010f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80010f8:	f003 0301 	and.w	r3, r3, #1
 80010fc:	61bb      	str	r3, [r7, #24]
 80010fe:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_9;
 8001100:	f44f 7300 	mov.w	r3, #512	; 0x200
 8001104:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001108:	2312      	movs	r3, #18
 800110a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800110e:	2300      	movs	r3, #0
 8001110:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001114:	2303      	movs	r3, #3
 8001116:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 800111a:	2304      	movs	r3, #4
 800111c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001120:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001124:	4619      	mov	r1, r3
 8001126:	485f      	ldr	r0, [pc, #380]	; (80012a4 <HAL_I2C_MspInit+0x3ec>)
 8001128:	f004 ffd6 	bl	80060d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 800112c:	f44f 7380 	mov.w	r3, #256	; 0x100
 8001130:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001134:	2312      	movs	r3, #18
 8001136:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800113a:	2300      	movs	r3, #0
 800113c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001140:	2303      	movs	r3, #3
 8001142:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C3;
 8001146:	2304      	movs	r3, #4
 8001148:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800114c:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001150:	4619      	mov	r1, r3
 8001152:	4855      	ldr	r0, [pc, #340]	; (80012a8 <HAL_I2C_MspInit+0x3f0>)
 8001154:	f004 ffc0 	bl	80060d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C3_CLK_ENABLE();
 8001158:	4b51      	ldr	r3, [pc, #324]	; (80012a0 <HAL_I2C_MspInit+0x3e8>)
 800115a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800115c:	4a50      	ldr	r2, [pc, #320]	; (80012a0 <HAL_I2C_MspInit+0x3e8>)
 800115e:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8001162:	6413      	str	r3, [r2, #64]	; 0x40
 8001164:	4b4e      	ldr	r3, [pc, #312]	; (80012a0 <HAL_I2C_MspInit+0x3e8>)
 8001166:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001168:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800116c:	617b      	str	r3, [r7, #20]
 800116e:	697b      	ldr	r3, [r7, #20]
    hdma_i2c3_rx.Instance = DMA1_Stream1;
 8001170:	4b4e      	ldr	r3, [pc, #312]	; (80012ac <HAL_I2C_MspInit+0x3f4>)
 8001172:	4a4f      	ldr	r2, [pc, #316]	; (80012b0 <HAL_I2C_MspInit+0x3f8>)
 8001174:	601a      	str	r2, [r3, #0]
    hdma_i2c3_rx.Init.Channel = DMA_CHANNEL_1;
 8001176:	4b4d      	ldr	r3, [pc, #308]	; (80012ac <HAL_I2C_MspInit+0x3f4>)
 8001178:	f04f 7200 	mov.w	r2, #33554432	; 0x2000000
 800117c:	605a      	str	r2, [r3, #4]
    hdma_i2c3_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800117e:	4b4b      	ldr	r3, [pc, #300]	; (80012ac <HAL_I2C_MspInit+0x3f4>)
 8001180:	2200      	movs	r2, #0
 8001182:	609a      	str	r2, [r3, #8]
    hdma_i2c3_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001184:	4b49      	ldr	r3, [pc, #292]	; (80012ac <HAL_I2C_MspInit+0x3f4>)
 8001186:	2200      	movs	r2, #0
 8001188:	60da      	str	r2, [r3, #12]
    hdma_i2c3_rx.Init.MemInc = DMA_MINC_ENABLE;
 800118a:	4b48      	ldr	r3, [pc, #288]	; (80012ac <HAL_I2C_MspInit+0x3f4>)
 800118c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001190:	611a      	str	r2, [r3, #16]
    hdma_i2c3_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001192:	4b46      	ldr	r3, [pc, #280]	; (80012ac <HAL_I2C_MspInit+0x3f4>)
 8001194:	2200      	movs	r2, #0
 8001196:	615a      	str	r2, [r3, #20]
    hdma_i2c3_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001198:	4b44      	ldr	r3, [pc, #272]	; (80012ac <HAL_I2C_MspInit+0x3f4>)
 800119a:	2200      	movs	r2, #0
 800119c:	619a      	str	r2, [r3, #24]
    hdma_i2c3_rx.Init.Mode = DMA_NORMAL;
 800119e:	4b43      	ldr	r3, [pc, #268]	; (80012ac <HAL_I2C_MspInit+0x3f4>)
 80011a0:	2200      	movs	r2, #0
 80011a2:	61da      	str	r2, [r3, #28]
    hdma_i2c3_rx.Init.Priority = DMA_PRIORITY_LOW;
 80011a4:	4b41      	ldr	r3, [pc, #260]	; (80012ac <HAL_I2C_MspInit+0x3f4>)
 80011a6:	2200      	movs	r2, #0
 80011a8:	621a      	str	r2, [r3, #32]
    hdma_i2c3_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80011aa:	4b40      	ldr	r3, [pc, #256]	; (80012ac <HAL_I2C_MspInit+0x3f4>)
 80011ac:	2200      	movs	r2, #0
 80011ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_i2c3_rx) != HAL_OK)
 80011b0:	483e      	ldr	r0, [pc, #248]	; (80012ac <HAL_I2C_MspInit+0x3f4>)
 80011b2:	f002 fda1 	bl	8003cf8 <HAL_DMA_Init>
 80011b6:	4603      	mov	r3, r0
 80011b8:	2b00      	cmp	r3, #0
 80011ba:	d001      	beq.n	80011c0 <HAL_I2C_MspInit+0x308>
      Error_Handler();
 80011bc:	f000 f93a 	bl	8001434 <Error_Handler>
    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c3_rx);
 80011c0:	687b      	ldr	r3, [r7, #4]
 80011c2:	4a3a      	ldr	r2, [pc, #232]	; (80012ac <HAL_I2C_MspInit+0x3f4>)
 80011c4:	63da      	str	r2, [r3, #60]	; 0x3c
 80011c6:	4a39      	ldr	r2, [pc, #228]	; (80012ac <HAL_I2C_MspInit+0x3f4>)
 80011c8:	687b      	ldr	r3, [r7, #4]
 80011ca:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(I2C3_EV_IRQn, 5, 0);
 80011cc:	2200      	movs	r2, #0
 80011ce:	2105      	movs	r1, #5
 80011d0:	2048      	movs	r0, #72	; 0x48
 80011d2:	f002 fc6b 	bl	8003aac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_EV_IRQn);
 80011d6:	2048      	movs	r0, #72	; 0x48
 80011d8:	f002 fc84 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C3_ER_IRQn, 5, 0);
 80011dc:	2200      	movs	r2, #0
 80011de:	2105      	movs	r1, #5
 80011e0:	2049      	movs	r0, #73	; 0x49
 80011e2:	f002 fc63 	bl	8003aac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C3_ER_IRQn);
 80011e6:	2049      	movs	r0, #73	; 0x49
 80011e8:	f002 fc7c 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
}
 80011ec:	e052      	b.n	8001294 <HAL_I2C_MspInit+0x3dc>
  else if(i2cHandle->Instance==I2C4)
 80011ee:	687b      	ldr	r3, [r7, #4]
 80011f0:	681b      	ldr	r3, [r3, #0]
 80011f2:	4a30      	ldr	r2, [pc, #192]	; (80012b4 <HAL_I2C_MspInit+0x3fc>)
 80011f4:	4293      	cmp	r3, r2
 80011f6:	d14d      	bne.n	8001294 <HAL_I2C_MspInit+0x3dc>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_I2C4;
 80011f8:	f44f 3300 	mov.w	r3, #131072	; 0x20000
 80011fc:	633b      	str	r3, [r7, #48]	; 0x30
    PeriphClkInitStruct.I2c4ClockSelection = RCC_I2C4CLKSOURCE_PCLK1;
 80011fe:	2300      	movs	r3, #0
 8001200:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8001204:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8001208:	4618      	mov	r0, r3
 800120a:	f007 fe7b 	bl	8008f04 <HAL_RCCEx_PeriphCLKConfig>
 800120e:	4603      	mov	r3, r0
 8001210:	2b00      	cmp	r3, #0
 8001212:	d001      	beq.n	8001218 <HAL_I2C_MspInit+0x360>
      Error_Handler();
 8001214:	f000 f90e 	bl	8001434 <Error_Handler>
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001218:	4b21      	ldr	r3, [pc, #132]	; (80012a0 <HAL_I2C_MspInit+0x3e8>)
 800121a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800121c:	4a20      	ldr	r2, [pc, #128]	; (80012a0 <HAL_I2C_MspInit+0x3e8>)
 800121e:	f043 0320 	orr.w	r3, r3, #32
 8001222:	6313      	str	r3, [r2, #48]	; 0x30
 8001224:	4b1e      	ldr	r3, [pc, #120]	; (80012a0 <HAL_I2C_MspInit+0x3e8>)
 8001226:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001228:	f003 0320 	and.w	r3, r3, #32
 800122c:	613b      	str	r3, [r7, #16]
 800122e:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_14|GPIO_PIN_15;
 8001230:	f44f 4340 	mov.w	r3, #49152	; 0xc000
 8001234:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001238:	2312      	movs	r3, #18
 800123a:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800123e:	2300      	movs	r3, #0
 8001240:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001244:	2303      	movs	r3, #3
 8001246:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C4;
 800124a:	2304      	movs	r3, #4
 800124c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001250:	f107 03b4 	add.w	r3, r7, #180	; 0xb4
 8001254:	4619      	mov	r1, r3
 8001256:	4818      	ldr	r0, [pc, #96]	; (80012b8 <HAL_I2C_MspInit+0x400>)
 8001258:	f004 ff3e 	bl	80060d8 <HAL_GPIO_Init>
    __HAL_RCC_I2C4_CLK_ENABLE();
 800125c:	4b10      	ldr	r3, [pc, #64]	; (80012a0 <HAL_I2C_MspInit+0x3e8>)
 800125e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001260:	4a0f      	ldr	r2, [pc, #60]	; (80012a0 <HAL_I2C_MspInit+0x3e8>)
 8001262:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 8001266:	6413      	str	r3, [r2, #64]	; 0x40
 8001268:	4b0d      	ldr	r3, [pc, #52]	; (80012a0 <HAL_I2C_MspInit+0x3e8>)
 800126a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800126c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8001270:	60fb      	str	r3, [r7, #12]
 8001272:	68fb      	ldr	r3, [r7, #12]
    HAL_NVIC_SetPriority(I2C4_EV_IRQn, 5, 0);
 8001274:	2200      	movs	r2, #0
 8001276:	2105      	movs	r1, #5
 8001278:	205f      	movs	r0, #95	; 0x5f
 800127a:	f002 fc17 	bl	8003aac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_EV_IRQn);
 800127e:	205f      	movs	r0, #95	; 0x5f
 8001280:	f002 fc30 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C4_ER_IRQn, 5, 0);
 8001284:	2200      	movs	r2, #0
 8001286:	2105      	movs	r1, #5
 8001288:	2060      	movs	r0, #96	; 0x60
 800128a:	f002 fc0f 	bl	8003aac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C4_ER_IRQn);
 800128e:	2060      	movs	r0, #96	; 0x60
 8001290:	f002 fc28 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
}
 8001294:	bf00      	nop
 8001296:	37c8      	adds	r7, #200	; 0xc8
 8001298:	46bd      	mov	sp, r7
 800129a:	bd80      	pop	{r7, pc}
 800129c:	40005c00 	.word	0x40005c00
 80012a0:	40023800 	.word	0x40023800
 80012a4:	40020800 	.word	0x40020800
 80012a8:	40020000 	.word	0x40020000
 80012ac:	20000840 	.word	0x20000840
 80012b0:	40026028 	.word	0x40026028
 80012b4:	40006000 	.word	0x40006000
 80012b8:	40021400 	.word	0x40021400

080012bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80012bc:	b580      	push	{r7, lr}
 80012be:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80012c0:	f001 ff4b 	bl	800315a <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80012c4:	f000 f836 	bl	8001334 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80012c8:	f7ff fc4c 	bl	8000b64 <MX_GPIO_Init>
  MX_DMA_Init();
 80012cc:	f7ff fb68 	bl	80009a0 <MX_DMA_Init>
  MX_I2C1_Init();
 80012d0:	f7ff fcf2 	bl	8000cb8 <MX_I2C1_Init>
  MX_I2C2_Init();
 80012d4:	f7ff fd30 	bl	8000d38 <MX_I2C2_Init>
  MX_SPI1_Init();
 80012d8:	f000 f8b2 	bl	8001440 <MX_SPI1_Init>
  MX_SPI2_Init();
 80012dc:	f000 f8e8 	bl	80014b0 <MX_SPI2_Init>
  MX_UART4_Init();
 80012e0:	f000 ffa0 	bl	8002224 <MX_UART4_Init>
  MX_UART5_Init();
 80012e4:	f000 ffce 	bl	8002284 <MX_UART5_Init>
  MX_ADC1_Init();
 80012e8:	f7ff f960 	bl	80005ac <MX_ADC1_Init>
  MX_ADC2_Init();
 80012ec:	f7ff f9b0 	bl	8000650 <MX_ADC2_Init>
  MX_ADC3_Init();
 80012f0:	f7ff fa00 	bl	80006f4 <MX_ADC3_Init>
  MX_DAC_Init();
 80012f4:	f7ff faea 	bl	80008cc <MX_DAC_Init>
  MX_I2C3_Init();
 80012f8:	f7ff fd5e 	bl	8000db8 <MX_I2C3_Init>
  MX_I2C4_Init();
 80012fc:	f7ff fd9c 	bl	8000e38 <MX_I2C4_Init>
  MX_SPI3_Init();
 8001300:	f000 f914 	bl	800152c <MX_SPI3_Init>
  MX_SPI4_Init();
 8001304:	f000 f950 	bl	80015a8 <MX_SPI4_Init>
  MX_SPI5_Init();
 8001308:	f000 f988 	bl	800161c <MX_SPI5_Init>
  MX_UART7_Init();
 800130c:	f000 ffea 	bl	80022e4 <MX_UART7_Init>
  MX_UART8_Init();
 8001310:	f001 f818 	bl	8002344 <MX_UART8_Init>
  MX_USART1_UART_Init();
 8001314:	f001 f846 	bl	80023a4 <MX_USART1_UART_Init>
  MX_USART2_UART_Init();
 8001318:	f001 f874 	bl	8002404 <MX_USART2_UART_Init>
  MX_USART3_UART_Init();
 800131c:	f001 f8a2 	bl	8002464 <MX_USART3_UART_Init>
  MX_USART6_UART_Init();
 8001320:	f001 f8d0 	bl	80024c4 <MX_USART6_UART_Init>
  /* USER CODE BEGIN 2 */
  ur_main();
 8001324:	f01b fcd4 	bl	801ccd0 <ur_main>
  /* USER CODE END 2 */

  /* Call init function for freertos objects (in freertos.c) */
  MX_FREERTOS_Init();
 8001328:	f7ff fbf6 	bl	8000b18 <MX_FREERTOS_Init>

  /* Start scheduler */
  osKernelStart();
 800132c:	f00d fb20 	bl	800e970 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8001330:	e7fe      	b.n	8001330 <main+0x74>
	...

08001334 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001334:	b580      	push	{r7, lr}
 8001336:	b094      	sub	sp, #80	; 0x50
 8001338:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800133a:	f107 0320 	add.w	r3, r7, #32
 800133e:	2230      	movs	r2, #48	; 0x30
 8001340:	2100      	movs	r1, #0
 8001342:	4618      	mov	r0, r3
 8001344:	f01c f917 	bl	801d576 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001348:	f107 030c 	add.w	r3, r7, #12
 800134c:	2200      	movs	r2, #0
 800134e:	601a      	str	r2, [r3, #0]
 8001350:	605a      	str	r2, [r3, #4]
 8001352:	609a      	str	r2, [r3, #8]
 8001354:	60da      	str	r2, [r3, #12]
 8001356:	611a      	str	r2, [r3, #16]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 8001358:	f007 f878 	bl	800844c <HAL_PWR_EnableBkUpAccess>

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800135c:	4b2a      	ldr	r3, [pc, #168]	; (8001408 <SystemClock_Config+0xd4>)
 800135e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001360:	4a29      	ldr	r2, [pc, #164]	; (8001408 <SystemClock_Config+0xd4>)
 8001362:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001366:	6413      	str	r3, [r2, #64]	; 0x40
 8001368:	4b27      	ldr	r3, [pc, #156]	; (8001408 <SystemClock_Config+0xd4>)
 800136a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800136c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001370:	60bb      	str	r3, [r7, #8]
 8001372:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001374:	4b25      	ldr	r3, [pc, #148]	; (800140c <SystemClock_Config+0xd8>)
 8001376:	681b      	ldr	r3, [r3, #0]
 8001378:	4a24      	ldr	r2, [pc, #144]	; (800140c <SystemClock_Config+0xd8>)
 800137a:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800137e:	6013      	str	r3, [r2, #0]
 8001380:	4b22      	ldr	r3, [pc, #136]	; (800140c <SystemClock_Config+0xd8>)
 8001382:	681b      	ldr	r3, [r3, #0]
 8001384:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 8001388:	607b      	str	r3, [r7, #4]
 800138a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800138c:	2301      	movs	r3, #1
 800138e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_BYPASS;
 8001390:	f44f 23a0 	mov.w	r3, #327680	; 0x50000
 8001394:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001396:	2302      	movs	r3, #2
 8001398:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800139a:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 800139e:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 80013a0:	2304      	movs	r3, #4
 80013a2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 216;
 80013a4:	23d8      	movs	r3, #216	; 0xd8
 80013a6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80013a8:	2302      	movs	r3, #2
 80013aa:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 3;
 80013ac:	2303      	movs	r3, #3
 80013ae:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80013b0:	f107 0320 	add.w	r3, r7, #32
 80013b4:	4618      	mov	r0, r3
 80013b6:	f007 f8a9 	bl	800850c <HAL_RCC_OscConfig>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <SystemClock_Config+0x90>
  {
    Error_Handler();
 80013c0:	f000 f838 	bl	8001434 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80013c4:	f007 f852 	bl	800846c <HAL_PWREx_EnableOverDrive>
 80013c8:	4603      	mov	r3, r0
 80013ca:	2b00      	cmp	r3, #0
 80013cc:	d001      	beq.n	80013d2 <SystemClock_Config+0x9e>
  {
    Error_Handler();
 80013ce:	f000 f831 	bl	8001434 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80013d2:	230f      	movs	r3, #15
 80013d4:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80013d6:	2302      	movs	r3, #2
 80013d8:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80013da:	2300      	movs	r3, #0
 80013dc:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80013de:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80013e2:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 80013e4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013e8:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_7) != HAL_OK)
 80013ea:	f107 030c 	add.w	r3, r7, #12
 80013ee:	2107      	movs	r1, #7
 80013f0:	4618      	mov	r0, r3
 80013f2:	f007 fb2f 	bl	8008a54 <HAL_RCC_ClockConfig>
 80013f6:	4603      	mov	r3, r0
 80013f8:	2b00      	cmp	r3, #0
 80013fa:	d001      	beq.n	8001400 <SystemClock_Config+0xcc>
  {
    Error_Handler();
 80013fc:	f000 f81a 	bl	8001434 <Error_Handler>
  }
}
 8001400:	bf00      	nop
 8001402:	3750      	adds	r7, #80	; 0x50
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}
 8001408:	40023800 	.word	0x40023800
 800140c:	40007000 	.word	0x40007000

08001410 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8001410:	b580      	push	{r7, lr}
 8001412:	b082      	sub	sp, #8
 8001414:	af00      	add	r7, sp, #0
 8001416:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM1) {
 8001418:	687b      	ldr	r3, [r7, #4]
 800141a:	681b      	ldr	r3, [r3, #0]
 800141c:	4a04      	ldr	r2, [pc, #16]	; (8001430 <HAL_TIM_PeriodElapsedCallback+0x20>)
 800141e:	4293      	cmp	r3, r2
 8001420:	d101      	bne.n	8001426 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8001422:	f001 fea7 	bl	8003174 <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */

  /* USER CODE END Callback 1 */
}
 8001426:	bf00      	nop
 8001428:	3708      	adds	r7, #8
 800142a:	46bd      	mov	sp, r7
 800142c:	bd80      	pop	{r7, pc}
 800142e:	bf00      	nop
 8001430:	40010000 	.word	0x40010000

08001434 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001434:	b480      	push	{r7}
 8001436:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001438:	b672      	cpsid	i
}
 800143a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800143c:	e7fe      	b.n	800143c <Error_Handler+0x8>
	...

08001440 <MX_SPI1_Init>:
DMA_HandleTypeDef hdma_spi4_rx;
DMA_HandleTypeDef hdma_spi4_tx;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 8001440:	b580      	push	{r7, lr}
 8001442:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 8001444:	4b18      	ldr	r3, [pc, #96]	; (80014a8 <MX_SPI1_Init+0x68>)
 8001446:	4a19      	ldr	r2, [pc, #100]	; (80014ac <MX_SPI1_Init+0x6c>)
 8001448:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_SLAVE;
 800144a:	4b17      	ldr	r3, [pc, #92]	; (80014a8 <MX_SPI1_Init+0x68>)
 800144c:	2200      	movs	r2, #0
 800144e:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001450:	4b15      	ldr	r3, [pc, #84]	; (80014a8 <MX_SPI1_Init+0x68>)
 8001452:	2200      	movs	r2, #0
 8001454:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001456:	4b14      	ldr	r3, [pc, #80]	; (80014a8 <MX_SPI1_Init+0x68>)
 8001458:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 800145c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 800145e:	4b12      	ldr	r3, [pc, #72]	; (80014a8 <MX_SPI1_Init+0x68>)
 8001460:	2200      	movs	r2, #0
 8001462:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001464:	4b10      	ldr	r3, [pc, #64]	; (80014a8 <MX_SPI1_Init+0x68>)
 8001466:	2200      	movs	r2, #0
 8001468:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_HARD_INPUT;
 800146a:	4b0f      	ldr	r3, [pc, #60]	; (80014a8 <MX_SPI1_Init+0x68>)
 800146c:	2200      	movs	r2, #0
 800146e:	619a      	str	r2, [r3, #24]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001470:	4b0d      	ldr	r3, [pc, #52]	; (80014a8 <MX_SPI1_Init+0x68>)
 8001472:	2200      	movs	r2, #0
 8001474:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001476:	4b0c      	ldr	r3, [pc, #48]	; (80014a8 <MX_SPI1_Init+0x68>)
 8001478:	2200      	movs	r2, #0
 800147a:	625a      	str	r2, [r3, #36]	; 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800147c:	4b0a      	ldr	r3, [pc, #40]	; (80014a8 <MX_SPI1_Init+0x68>)
 800147e:	2200      	movs	r2, #0
 8001480:	629a      	str	r2, [r3, #40]	; 0x28
  hspi1.Init.CRCPolynomial = 7;
 8001482:	4b09      	ldr	r3, [pc, #36]	; (80014a8 <MX_SPI1_Init+0x68>)
 8001484:	2207      	movs	r2, #7
 8001486:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi1.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001488:	4b07      	ldr	r3, [pc, #28]	; (80014a8 <MX_SPI1_Init+0x68>)
 800148a:	2200      	movs	r2, #0
 800148c:	631a      	str	r2, [r3, #48]	; 0x30
  hspi1.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 800148e:	4b06      	ldr	r3, [pc, #24]	; (80014a8 <MX_SPI1_Init+0x68>)
 8001490:	2200      	movs	r2, #0
 8001492:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001494:	4804      	ldr	r0, [pc, #16]	; (80014a8 <MX_SPI1_Init+0x68>)
 8001496:	f008 f925 	bl	80096e4 <HAL_SPI_Init>
 800149a:	4603      	mov	r3, r0
 800149c:	2b00      	cmp	r3, #0
 800149e:	d001      	beq.n	80014a4 <MX_SPI1_Init+0x64>
  {
    Error_Handler();
 80014a0:	f7ff ffc8 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 80014a4:	bf00      	nop
 80014a6:	bd80      	pop	{r7, pc}
 80014a8:	200008a0 	.word	0x200008a0
 80014ac:	40013000 	.word	0x40013000

080014b0 <MX_SPI2_Init>:
/* SPI2 init function */
void MX_SPI2_Init(void)
{
 80014b0:	b580      	push	{r7, lr}
 80014b2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI2_Init 0 */

  /* USER CODE BEGIN SPI2_Init 1 */

  /* USER CODE END SPI2_Init 1 */
  hspi2.Instance = SPI2;
 80014b4:	4b1b      	ldr	r3, [pc, #108]	; (8001524 <MX_SPI2_Init+0x74>)
 80014b6:	4a1c      	ldr	r2, [pc, #112]	; (8001528 <MX_SPI2_Init+0x78>)
 80014b8:	601a      	str	r2, [r3, #0]
  hspi2.Init.Mode = SPI_MODE_MASTER;
 80014ba:	4b1a      	ldr	r3, [pc, #104]	; (8001524 <MX_SPI2_Init+0x74>)
 80014bc:	f44f 7282 	mov.w	r2, #260	; 0x104
 80014c0:	605a      	str	r2, [r3, #4]
  hspi2.Init.Direction = SPI_DIRECTION_2LINES;
 80014c2:	4b18      	ldr	r3, [pc, #96]	; (8001524 <MX_SPI2_Init+0x74>)
 80014c4:	2200      	movs	r2, #0
 80014c6:	609a      	str	r2, [r3, #8]
  hspi2.Init.DataSize = SPI_DATASIZE_8BIT;
 80014c8:	4b16      	ldr	r3, [pc, #88]	; (8001524 <MX_SPI2_Init+0x74>)
 80014ca:	f44f 62e0 	mov.w	r2, #1792	; 0x700
 80014ce:	60da      	str	r2, [r3, #12]
  hspi2.Init.CLKPolarity = SPI_POLARITY_LOW;
 80014d0:	4b14      	ldr	r3, [pc, #80]	; (8001524 <MX_SPI2_Init+0x74>)
 80014d2:	2200      	movs	r2, #0
 80014d4:	611a      	str	r2, [r3, #16]
  hspi2.Init.CLKPhase = SPI_PHASE_1EDGE;
 80014d6:	4b13      	ldr	r3, [pc, #76]	; (8001524 <MX_SPI2_Init+0x74>)
 80014d8:	2200      	movs	r2, #0
 80014da:	615a      	str	r2, [r3, #20]
  hspi2.Init.NSS = SPI_NSS_SOFT;
 80014dc:	4b11      	ldr	r3, [pc, #68]	; (8001524 <MX_SPI2_Init+0x74>)
 80014de:	f44f 7200 	mov.w	r2, #512	; 0x200
 80014e2:	619a      	str	r2, [r3, #24]
  hspi2.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 80014e4:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <MX_SPI2_Init+0x74>)
 80014e6:	2200      	movs	r2, #0
 80014e8:	61da      	str	r2, [r3, #28]
  hspi2.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80014ea:	4b0e      	ldr	r3, [pc, #56]	; (8001524 <MX_SPI2_Init+0x74>)
 80014ec:	2200      	movs	r2, #0
 80014ee:	621a      	str	r2, [r3, #32]
  hspi2.Init.TIMode = SPI_TIMODE_DISABLE;
 80014f0:	4b0c      	ldr	r3, [pc, #48]	; (8001524 <MX_SPI2_Init+0x74>)
 80014f2:	2200      	movs	r2, #0
 80014f4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi2.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80014f6:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <MX_SPI2_Init+0x74>)
 80014f8:	2200      	movs	r2, #0
 80014fa:	629a      	str	r2, [r3, #40]	; 0x28
  hspi2.Init.CRCPolynomial = 7;
 80014fc:	4b09      	ldr	r3, [pc, #36]	; (8001524 <MX_SPI2_Init+0x74>)
 80014fe:	2207      	movs	r2, #7
 8001500:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi2.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 8001502:	4b08      	ldr	r3, [pc, #32]	; (8001524 <MX_SPI2_Init+0x74>)
 8001504:	2200      	movs	r2, #0
 8001506:	631a      	str	r2, [r3, #48]	; 0x30
  hspi2.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <MX_SPI2_Init+0x74>)
 800150a:	2208      	movs	r2, #8
 800150c:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi2) != HAL_OK)
 800150e:	4805      	ldr	r0, [pc, #20]	; (8001524 <MX_SPI2_Init+0x74>)
 8001510:	f008 f8e8 	bl	80096e4 <HAL_SPI_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_SPI2_Init+0x6e>
  {
    Error_Handler();
 800151a:	f7ff ff8b 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN SPI2_Init 2 */

  /* USER CODE END SPI2_Init 2 */

}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000904 	.word	0x20000904
 8001528:	40003800 	.word	0x40003800

0800152c <MX_SPI3_Init>:
/* SPI3 init function */
void MX_SPI3_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI3_Init 0 */

  /* USER CODE BEGIN SPI3_Init 1 */

  /* USER CODE END SPI3_Init 1 */
  hspi3.Instance = SPI3;
 8001530:	4b1b      	ldr	r3, [pc, #108]	; (80015a0 <MX_SPI3_Init+0x74>)
 8001532:	4a1c      	ldr	r2, [pc, #112]	; (80015a4 <MX_SPI3_Init+0x78>)
 8001534:	601a      	str	r2, [r3, #0]
  hspi3.Init.Mode = SPI_MODE_MASTER;
 8001536:	4b1a      	ldr	r3, [pc, #104]	; (80015a0 <MX_SPI3_Init+0x74>)
 8001538:	f44f 7282 	mov.w	r2, #260	; 0x104
 800153c:	605a      	str	r2, [r3, #4]
  hspi3.Init.Direction = SPI_DIRECTION_2LINES;
 800153e:	4b18      	ldr	r3, [pc, #96]	; (80015a0 <MX_SPI3_Init+0x74>)
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
  hspi3.Init.DataSize = SPI_DATASIZE_4BIT;
 8001544:	4b16      	ldr	r3, [pc, #88]	; (80015a0 <MX_SPI3_Init+0x74>)
 8001546:	f44f 7240 	mov.w	r2, #768	; 0x300
 800154a:	60da      	str	r2, [r3, #12]
  hspi3.Init.CLKPolarity = SPI_POLARITY_LOW;
 800154c:	4b14      	ldr	r3, [pc, #80]	; (80015a0 <MX_SPI3_Init+0x74>)
 800154e:	2200      	movs	r2, #0
 8001550:	611a      	str	r2, [r3, #16]
  hspi3.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001552:	4b13      	ldr	r3, [pc, #76]	; (80015a0 <MX_SPI3_Init+0x74>)
 8001554:	2200      	movs	r2, #0
 8001556:	615a      	str	r2, [r3, #20]
  hspi3.Init.NSS = SPI_NSS_SOFT;
 8001558:	4b11      	ldr	r3, [pc, #68]	; (80015a0 <MX_SPI3_Init+0x74>)
 800155a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800155e:	619a      	str	r2, [r3, #24]
  hspi3.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001560:	4b0f      	ldr	r3, [pc, #60]	; (80015a0 <MX_SPI3_Init+0x74>)
 8001562:	2200      	movs	r2, #0
 8001564:	61da      	str	r2, [r3, #28]
  hspi3.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001566:	4b0e      	ldr	r3, [pc, #56]	; (80015a0 <MX_SPI3_Init+0x74>)
 8001568:	2200      	movs	r2, #0
 800156a:	621a      	str	r2, [r3, #32]
  hspi3.Init.TIMode = SPI_TIMODE_DISABLE;
 800156c:	4b0c      	ldr	r3, [pc, #48]	; (80015a0 <MX_SPI3_Init+0x74>)
 800156e:	2200      	movs	r2, #0
 8001570:	625a      	str	r2, [r3, #36]	; 0x24
  hspi3.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001572:	4b0b      	ldr	r3, [pc, #44]	; (80015a0 <MX_SPI3_Init+0x74>)
 8001574:	2200      	movs	r2, #0
 8001576:	629a      	str	r2, [r3, #40]	; 0x28
  hspi3.Init.CRCPolynomial = 7;
 8001578:	4b09      	ldr	r3, [pc, #36]	; (80015a0 <MX_SPI3_Init+0x74>)
 800157a:	2207      	movs	r2, #7
 800157c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi3.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800157e:	4b08      	ldr	r3, [pc, #32]	; (80015a0 <MX_SPI3_Init+0x74>)
 8001580:	2200      	movs	r2, #0
 8001582:	631a      	str	r2, [r3, #48]	; 0x30
  hspi3.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001584:	4b06      	ldr	r3, [pc, #24]	; (80015a0 <MX_SPI3_Init+0x74>)
 8001586:	2208      	movs	r2, #8
 8001588:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi3) != HAL_OK)
 800158a:	4805      	ldr	r0, [pc, #20]	; (80015a0 <MX_SPI3_Init+0x74>)
 800158c:	f008 f8aa 	bl	80096e4 <HAL_SPI_Init>
 8001590:	4603      	mov	r3, r0
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <MX_SPI3_Init+0x6e>
  {
    Error_Handler();
 8001596:	f7ff ff4d 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN SPI3_Init 2 */

  /* USER CODE END SPI3_Init 2 */

}
 800159a:	bf00      	nop
 800159c:	bd80      	pop	{r7, pc}
 800159e:	bf00      	nop
 80015a0:	20000968 	.word	0x20000968
 80015a4:	40003c00 	.word	0x40003c00

080015a8 <MX_SPI4_Init>:
/* SPI4 init function */
void MX_SPI4_Init(void)
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	af00      	add	r7, sp, #0
  /* USER CODE END SPI4_Init 0 */

  /* USER CODE BEGIN SPI4_Init 1 */

  /* USER CODE END SPI4_Init 1 */
  hspi4.Instance = SPI4;
 80015ac:	4b19      	ldr	r3, [pc, #100]	; (8001614 <MX_SPI4_Init+0x6c>)
 80015ae:	4a1a      	ldr	r2, [pc, #104]	; (8001618 <MX_SPI4_Init+0x70>)
 80015b0:	601a      	str	r2, [r3, #0]
  hspi4.Init.Mode = SPI_MODE_SLAVE;
 80015b2:	4b18      	ldr	r3, [pc, #96]	; (8001614 <MX_SPI4_Init+0x6c>)
 80015b4:	2200      	movs	r2, #0
 80015b6:	605a      	str	r2, [r3, #4]
  hspi4.Init.Direction = SPI_DIRECTION_2LINES;
 80015b8:	4b16      	ldr	r3, [pc, #88]	; (8001614 <MX_SPI4_Init+0x6c>)
 80015ba:	2200      	movs	r2, #0
 80015bc:	609a      	str	r2, [r3, #8]
  hspi4.Init.DataSize = SPI_DATASIZE_4BIT;
 80015be:	4b15      	ldr	r3, [pc, #84]	; (8001614 <MX_SPI4_Init+0x6c>)
 80015c0:	f44f 7240 	mov.w	r2, #768	; 0x300
 80015c4:	60da      	str	r2, [r3, #12]
  hspi4.Init.CLKPolarity = SPI_POLARITY_LOW;
 80015c6:	4b13      	ldr	r3, [pc, #76]	; (8001614 <MX_SPI4_Init+0x6c>)
 80015c8:	2200      	movs	r2, #0
 80015ca:	611a      	str	r2, [r3, #16]
  hspi4.Init.CLKPhase = SPI_PHASE_1EDGE;
 80015cc:	4b11      	ldr	r3, [pc, #68]	; (8001614 <MX_SPI4_Init+0x6c>)
 80015ce:	2200      	movs	r2, #0
 80015d0:	615a      	str	r2, [r3, #20]
  hspi4.Init.NSS = SPI_NSS_SOFT;
 80015d2:	4b10      	ldr	r3, [pc, #64]	; (8001614 <MX_SPI4_Init+0x6c>)
 80015d4:	f44f 7200 	mov.w	r2, #512	; 0x200
 80015d8:	619a      	str	r2, [r3, #24]
  hspi4.Init.FirstBit = SPI_FIRSTBIT_MSB;
 80015da:	4b0e      	ldr	r3, [pc, #56]	; (8001614 <MX_SPI4_Init+0x6c>)
 80015dc:	2200      	movs	r2, #0
 80015de:	621a      	str	r2, [r3, #32]
  hspi4.Init.TIMode = SPI_TIMODE_DISABLE;
 80015e0:	4b0c      	ldr	r3, [pc, #48]	; (8001614 <MX_SPI4_Init+0x6c>)
 80015e2:	2200      	movs	r2, #0
 80015e4:	625a      	str	r2, [r3, #36]	; 0x24
  hspi4.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 80015e6:	4b0b      	ldr	r3, [pc, #44]	; (8001614 <MX_SPI4_Init+0x6c>)
 80015e8:	2200      	movs	r2, #0
 80015ea:	629a      	str	r2, [r3, #40]	; 0x28
  hspi4.Init.CRCPolynomial = 7;
 80015ec:	4b09      	ldr	r3, [pc, #36]	; (8001614 <MX_SPI4_Init+0x6c>)
 80015ee:	2207      	movs	r2, #7
 80015f0:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi4.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 80015f2:	4b08      	ldr	r3, [pc, #32]	; (8001614 <MX_SPI4_Init+0x6c>)
 80015f4:	2200      	movs	r2, #0
 80015f6:	631a      	str	r2, [r3, #48]	; 0x30
  hspi4.Init.NSSPMode = SPI_NSS_PULSE_DISABLE;
 80015f8:	4b06      	ldr	r3, [pc, #24]	; (8001614 <MX_SPI4_Init+0x6c>)
 80015fa:	2200      	movs	r2, #0
 80015fc:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi4) != HAL_OK)
 80015fe:	4805      	ldr	r0, [pc, #20]	; (8001614 <MX_SPI4_Init+0x6c>)
 8001600:	f008 f870 	bl	80096e4 <HAL_SPI_Init>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d001      	beq.n	800160e <MX_SPI4_Init+0x66>
  {
    Error_Handler();
 800160a:	f7ff ff13 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN SPI4_Init 2 */

  /* USER CODE END SPI4_Init 2 */

}
 800160e:	bf00      	nop
 8001610:	bd80      	pop	{r7, pc}
 8001612:	bf00      	nop
 8001614:	200009cc 	.word	0x200009cc
 8001618:	40013400 	.word	0x40013400

0800161c <MX_SPI5_Init>:
/* SPI5 init function */
void MX_SPI5_Init(void)
{
 800161c:	b580      	push	{r7, lr}
 800161e:	af00      	add	r7, sp, #0
  /* USER CODE END SPI5_Init 0 */

  /* USER CODE BEGIN SPI5_Init 1 */

  /* USER CODE END SPI5_Init 1 */
  hspi5.Instance = SPI5;
 8001620:	4b1b      	ldr	r3, [pc, #108]	; (8001690 <MX_SPI5_Init+0x74>)
 8001622:	4a1c      	ldr	r2, [pc, #112]	; (8001694 <MX_SPI5_Init+0x78>)
 8001624:	601a      	str	r2, [r3, #0]
  hspi5.Init.Mode = SPI_MODE_MASTER;
 8001626:	4b1a      	ldr	r3, [pc, #104]	; (8001690 <MX_SPI5_Init+0x74>)
 8001628:	f44f 7282 	mov.w	r2, #260	; 0x104
 800162c:	605a      	str	r2, [r3, #4]
  hspi5.Init.Direction = SPI_DIRECTION_2LINES;
 800162e:	4b18      	ldr	r3, [pc, #96]	; (8001690 <MX_SPI5_Init+0x74>)
 8001630:	2200      	movs	r2, #0
 8001632:	609a      	str	r2, [r3, #8]
  hspi5.Init.DataSize = SPI_DATASIZE_4BIT;
 8001634:	4b16      	ldr	r3, [pc, #88]	; (8001690 <MX_SPI5_Init+0x74>)
 8001636:	f44f 7240 	mov.w	r2, #768	; 0x300
 800163a:	60da      	str	r2, [r3, #12]
  hspi5.Init.CLKPolarity = SPI_POLARITY_LOW;
 800163c:	4b14      	ldr	r3, [pc, #80]	; (8001690 <MX_SPI5_Init+0x74>)
 800163e:	2200      	movs	r2, #0
 8001640:	611a      	str	r2, [r3, #16]
  hspi5.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001642:	4b13      	ldr	r3, [pc, #76]	; (8001690 <MX_SPI5_Init+0x74>)
 8001644:	2200      	movs	r2, #0
 8001646:	615a      	str	r2, [r3, #20]
  hspi5.Init.NSS = SPI_NSS_SOFT;
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <MX_SPI5_Init+0x74>)
 800164a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800164e:	619a      	str	r2, [r3, #24]
  hspi5.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001650:	4b0f      	ldr	r3, [pc, #60]	; (8001690 <MX_SPI5_Init+0x74>)
 8001652:	2200      	movs	r2, #0
 8001654:	61da      	str	r2, [r3, #28]
  hspi5.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001656:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <MX_SPI5_Init+0x74>)
 8001658:	2200      	movs	r2, #0
 800165a:	621a      	str	r2, [r3, #32]
  hspi5.Init.TIMode = SPI_TIMODE_DISABLE;
 800165c:	4b0c      	ldr	r3, [pc, #48]	; (8001690 <MX_SPI5_Init+0x74>)
 800165e:	2200      	movs	r2, #0
 8001660:	625a      	str	r2, [r3, #36]	; 0x24
  hspi5.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001662:	4b0b      	ldr	r3, [pc, #44]	; (8001690 <MX_SPI5_Init+0x74>)
 8001664:	2200      	movs	r2, #0
 8001666:	629a      	str	r2, [r3, #40]	; 0x28
  hspi5.Init.CRCPolynomial = 7;
 8001668:	4b09      	ldr	r3, [pc, #36]	; (8001690 <MX_SPI5_Init+0x74>)
 800166a:	2207      	movs	r2, #7
 800166c:	62da      	str	r2, [r3, #44]	; 0x2c
  hspi5.Init.CRCLength = SPI_CRC_LENGTH_DATASIZE;
 800166e:	4b08      	ldr	r3, [pc, #32]	; (8001690 <MX_SPI5_Init+0x74>)
 8001670:	2200      	movs	r2, #0
 8001672:	631a      	str	r2, [r3, #48]	; 0x30
  hspi5.Init.NSSPMode = SPI_NSS_PULSE_ENABLE;
 8001674:	4b06      	ldr	r3, [pc, #24]	; (8001690 <MX_SPI5_Init+0x74>)
 8001676:	2208      	movs	r2, #8
 8001678:	635a      	str	r2, [r3, #52]	; 0x34
  if (HAL_SPI_Init(&hspi5) != HAL_OK)
 800167a:	4805      	ldr	r0, [pc, #20]	; (8001690 <MX_SPI5_Init+0x74>)
 800167c:	f008 f832 	bl	80096e4 <HAL_SPI_Init>
 8001680:	4603      	mov	r3, r0
 8001682:	2b00      	cmp	r3, #0
 8001684:	d001      	beq.n	800168a <MX_SPI5_Init+0x6e>
  {
    Error_Handler();
 8001686:	f7ff fed5 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN SPI5_Init 2 */

  /* USER CODE END SPI5_Init 2 */

}
 800168a:	bf00      	nop
 800168c:	bd80      	pop	{r7, pc}
 800168e:	bf00      	nop
 8001690:	20000a30 	.word	0x20000a30
 8001694:	40015000 	.word	0x40015000

08001698 <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 8001698:	b580      	push	{r7, lr}
 800169a:	b094      	sub	sp, #80	; 0x50
 800169c:	af00      	add	r7, sp, #0
 800169e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80016a0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80016a4:	2200      	movs	r2, #0
 80016a6:	601a      	str	r2, [r3, #0]
 80016a8:	605a      	str	r2, [r3, #4]
 80016aa:	609a      	str	r2, [r3, #8]
 80016ac:	60da      	str	r2, [r3, #12]
 80016ae:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 80016b0:	687b      	ldr	r3, [r7, #4]
 80016b2:	681b      	ldr	r3, [r3, #0]
 80016b4:	4a9f      	ldr	r2, [pc, #636]	; (8001934 <HAL_SPI_MspInit+0x29c>)
 80016b6:	4293      	cmp	r3, r2
 80016b8:	f040 80ba 	bne.w	8001830 <HAL_SPI_MspInit+0x198>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80016bc:	4b9e      	ldr	r3, [pc, #632]	; (8001938 <HAL_SPI_MspInit+0x2a0>)
 80016be:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016c0:	4a9d      	ldr	r2, [pc, #628]	; (8001938 <HAL_SPI_MspInit+0x2a0>)
 80016c2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80016c6:	6453      	str	r3, [r2, #68]	; 0x44
 80016c8:	4b9b      	ldr	r3, [pc, #620]	; (8001938 <HAL_SPI_MspInit+0x2a0>)
 80016ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80016cc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80016d0:	63bb      	str	r3, [r7, #56]	; 0x38
 80016d2:	6bbb      	ldr	r3, [r7, #56]	; 0x38

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80016d4:	4b98      	ldr	r3, [pc, #608]	; (8001938 <HAL_SPI_MspInit+0x2a0>)
 80016d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016d8:	4a97      	ldr	r2, [pc, #604]	; (8001938 <HAL_SPI_MspInit+0x2a0>)
 80016da:	f043 0301 	orr.w	r3, r3, #1
 80016de:	6313      	str	r3, [r2, #48]	; 0x30
 80016e0:	4b95      	ldr	r3, [pc, #596]	; (8001938 <HAL_SPI_MspInit+0x2a0>)
 80016e2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016e4:	f003 0301 	and.w	r3, r3, #1
 80016e8:	637b      	str	r3, [r7, #52]	; 0x34
 80016ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    __HAL_RCC_GPIOB_CLK_ENABLE();
 80016ec:	4b92      	ldr	r3, [pc, #584]	; (8001938 <HAL_SPI_MspInit+0x2a0>)
 80016ee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016f0:	4a91      	ldr	r2, [pc, #580]	; (8001938 <HAL_SPI_MspInit+0x2a0>)
 80016f2:	f043 0302 	orr.w	r3, r3, #2
 80016f6:	6313      	str	r3, [r2, #48]	; 0x30
 80016f8:	4b8f      	ldr	r3, [pc, #572]	; (8001938 <HAL_SPI_MspInit+0x2a0>)
 80016fa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80016fc:	f003 0302 	and.w	r3, r3, #2
 8001700:	633b      	str	r3, [r7, #48]	; 0x30
 8001702:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA15     ------> SPI1_NSS
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_15;
 8001704:	f248 0320 	movw	r3, #32800	; 0x8020
 8001708:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800170a:	2302      	movs	r3, #2
 800170c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800170e:	2300      	movs	r3, #0
 8001710:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001712:	2303      	movs	r3, #3
 8001714:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001716:	2305      	movs	r3, #5
 8001718:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800171a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800171e:	4619      	mov	r1, r3
 8001720:	4886      	ldr	r0, [pc, #536]	; (800193c <HAL_SPI_MspInit+0x2a4>)
 8001722:	f004 fcd9 	bl	80060d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001726:	2340      	movs	r3, #64	; 0x40
 8001728:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800172a:	2302      	movs	r3, #2
 800172c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800172e:	2301      	movs	r3, #1
 8001730:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001732:	2303      	movs	r3, #3
 8001734:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001736:	2305      	movs	r3, #5
 8001738:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800173a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800173e:	4619      	mov	r1, r3
 8001740:	487e      	ldr	r0, [pc, #504]	; (800193c <HAL_SPI_MspInit+0x2a4>)
 8001742:	f004 fcc9 	bl	80060d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001746:	2320      	movs	r3, #32
 8001748:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800174a:	2302      	movs	r3, #2
 800174c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800174e:	2301      	movs	r3, #1
 8001750:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001752:	2303      	movs	r3, #3
 8001754:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8001756:	2305      	movs	r3, #5
 8001758:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800175a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800175e:	4619      	mov	r1, r3
 8001760:	4877      	ldr	r0, [pc, #476]	; (8001940 <HAL_SPI_MspInit+0x2a8>)
 8001762:	f004 fcb9 	bl	80060d8 <HAL_GPIO_Init>

    /* SPI1 DMA Init */
    /* SPI1_RX Init */
    hdma_spi1_rx.Instance = DMA2_Stream2;
 8001766:	4b77      	ldr	r3, [pc, #476]	; (8001944 <HAL_SPI_MspInit+0x2ac>)
 8001768:	4a77      	ldr	r2, [pc, #476]	; (8001948 <HAL_SPI_MspInit+0x2b0>)
 800176a:	601a      	str	r2, [r3, #0]
    hdma_spi1_rx.Init.Channel = DMA_CHANNEL_3;
 800176c:	4b75      	ldr	r3, [pc, #468]	; (8001944 <HAL_SPI_MspInit+0x2ac>)
 800176e:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 8001772:	605a      	str	r2, [r3, #4]
    hdma_spi1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001774:	4b73      	ldr	r3, [pc, #460]	; (8001944 <HAL_SPI_MspInit+0x2ac>)
 8001776:	2200      	movs	r2, #0
 8001778:	609a      	str	r2, [r3, #8]
    hdma_spi1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800177a:	4b72      	ldr	r3, [pc, #456]	; (8001944 <HAL_SPI_MspInit+0x2ac>)
 800177c:	2200      	movs	r2, #0
 800177e:	60da      	str	r2, [r3, #12]
    hdma_spi1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001780:	4b70      	ldr	r3, [pc, #448]	; (8001944 <HAL_SPI_MspInit+0x2ac>)
 8001782:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001786:	611a      	str	r2, [r3, #16]
    hdma_spi1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001788:	4b6e      	ldr	r3, [pc, #440]	; (8001944 <HAL_SPI_MspInit+0x2ac>)
 800178a:	2200      	movs	r2, #0
 800178c:	615a      	str	r2, [r3, #20]
    hdma_spi1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800178e:	4b6d      	ldr	r3, [pc, #436]	; (8001944 <HAL_SPI_MspInit+0x2ac>)
 8001790:	2200      	movs	r2, #0
 8001792:	619a      	str	r2, [r3, #24]
    hdma_spi1_rx.Init.Mode = DMA_NORMAL;
 8001794:	4b6b      	ldr	r3, [pc, #428]	; (8001944 <HAL_SPI_MspInit+0x2ac>)
 8001796:	2200      	movs	r2, #0
 8001798:	61da      	str	r2, [r3, #28]
    hdma_spi1_rx.Init.Priority = DMA_PRIORITY_LOW;
 800179a:	4b6a      	ldr	r3, [pc, #424]	; (8001944 <HAL_SPI_MspInit+0x2ac>)
 800179c:	2200      	movs	r2, #0
 800179e:	621a      	str	r2, [r3, #32]
    hdma_spi1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017a0:	4b68      	ldr	r3, [pc, #416]	; (8001944 <HAL_SPI_MspInit+0x2ac>)
 80017a2:	2200      	movs	r2, #0
 80017a4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_rx) != HAL_OK)
 80017a6:	4867      	ldr	r0, [pc, #412]	; (8001944 <HAL_SPI_MspInit+0x2ac>)
 80017a8:	f002 faa6 	bl	8003cf8 <HAL_DMA_Init>
 80017ac:	4603      	mov	r3, r0
 80017ae:	2b00      	cmp	r3, #0
 80017b0:	d001      	beq.n	80017b6 <HAL_SPI_MspInit+0x11e>
    {
      Error_Handler();
 80017b2:	f7ff fe3f 	bl	8001434 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi1_rx);
 80017b6:	687b      	ldr	r3, [r7, #4]
 80017b8:	4a62      	ldr	r2, [pc, #392]	; (8001944 <HAL_SPI_MspInit+0x2ac>)
 80017ba:	659a      	str	r2, [r3, #88]	; 0x58
 80017bc:	4a61      	ldr	r2, [pc, #388]	; (8001944 <HAL_SPI_MspInit+0x2ac>)
 80017be:	687b      	ldr	r3, [r7, #4]
 80017c0:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1_TX Init */
    hdma_spi1_tx.Instance = DMA2_Stream3;
 80017c2:	4b62      	ldr	r3, [pc, #392]	; (800194c <HAL_SPI_MspInit+0x2b4>)
 80017c4:	4a62      	ldr	r2, [pc, #392]	; (8001950 <HAL_SPI_MspInit+0x2b8>)
 80017c6:	601a      	str	r2, [r3, #0]
    hdma_spi1_tx.Init.Channel = DMA_CHANNEL_3;
 80017c8:	4b60      	ldr	r3, [pc, #384]	; (800194c <HAL_SPI_MspInit+0x2b4>)
 80017ca:	f04f 62c0 	mov.w	r2, #100663296	; 0x6000000
 80017ce:	605a      	str	r2, [r3, #4]
    hdma_spi1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80017d0:	4b5e      	ldr	r3, [pc, #376]	; (800194c <HAL_SPI_MspInit+0x2b4>)
 80017d2:	2240      	movs	r2, #64	; 0x40
 80017d4:	609a      	str	r2, [r3, #8]
    hdma_spi1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80017d6:	4b5d      	ldr	r3, [pc, #372]	; (800194c <HAL_SPI_MspInit+0x2b4>)
 80017d8:	2200      	movs	r2, #0
 80017da:	60da      	str	r2, [r3, #12]
    hdma_spi1_tx.Init.MemInc = DMA_MINC_ENABLE;
 80017dc:	4b5b      	ldr	r3, [pc, #364]	; (800194c <HAL_SPI_MspInit+0x2b4>)
 80017de:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80017e2:	611a      	str	r2, [r3, #16]
    hdma_spi1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80017e4:	4b59      	ldr	r3, [pc, #356]	; (800194c <HAL_SPI_MspInit+0x2b4>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	615a      	str	r2, [r3, #20]
    hdma_spi1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80017ea:	4b58      	ldr	r3, [pc, #352]	; (800194c <HAL_SPI_MspInit+0x2b4>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	619a      	str	r2, [r3, #24]
    hdma_spi1_tx.Init.Mode = DMA_NORMAL;
 80017f0:	4b56      	ldr	r3, [pc, #344]	; (800194c <HAL_SPI_MspInit+0x2b4>)
 80017f2:	2200      	movs	r2, #0
 80017f4:	61da      	str	r2, [r3, #28]
    hdma_spi1_tx.Init.Priority = DMA_PRIORITY_LOW;
 80017f6:	4b55      	ldr	r3, [pc, #340]	; (800194c <HAL_SPI_MspInit+0x2b4>)
 80017f8:	2200      	movs	r2, #0
 80017fa:	621a      	str	r2, [r3, #32]
    hdma_spi1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80017fc:	4b53      	ldr	r3, [pc, #332]	; (800194c <HAL_SPI_MspInit+0x2b4>)
 80017fe:	2200      	movs	r2, #0
 8001800:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi1_tx) != HAL_OK)
 8001802:	4852      	ldr	r0, [pc, #328]	; (800194c <HAL_SPI_MspInit+0x2b4>)
 8001804:	f002 fa78 	bl	8003cf8 <HAL_DMA_Init>
 8001808:	4603      	mov	r3, r0
 800180a:	2b00      	cmp	r3, #0
 800180c:	d001      	beq.n	8001812 <HAL_SPI_MspInit+0x17a>
    {
      Error_Handler();
 800180e:	f7ff fe11 	bl	8001434 <Error_Handler>
    }

    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi1_tx);
 8001812:	687b      	ldr	r3, [r7, #4]
 8001814:	4a4d      	ldr	r2, [pc, #308]	; (800194c <HAL_SPI_MspInit+0x2b4>)
 8001816:	655a      	str	r2, [r3, #84]	; 0x54
 8001818:	4a4c      	ldr	r2, [pc, #304]	; (800194c <HAL_SPI_MspInit+0x2b4>)
 800181a:	687b      	ldr	r3, [r7, #4]
 800181c:	6393      	str	r3, [r2, #56]	; 0x38

    /* SPI1 interrupt Init */
    HAL_NVIC_SetPriority(SPI1_IRQn, 5, 0);
 800181e:	2200      	movs	r2, #0
 8001820:	2105      	movs	r1, #5
 8001822:	2023      	movs	r0, #35	; 0x23
 8001824:	f002 f942 	bl	8003aac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI1_IRQn);
 8001828:	2023      	movs	r0, #35	; 0x23
 800182a:	f002 f95b 	bl	8003ae4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN SPI5_MspInit 1 */

  /* USER CODE END SPI5_MspInit 1 */
  }
}
 800182e:	e1bd      	b.n	8001bac <HAL_SPI_MspInit+0x514>
  else if(spiHandle->Instance==SPI2)
 8001830:	687b      	ldr	r3, [r7, #4]
 8001832:	681b      	ldr	r3, [r3, #0]
 8001834:	4a47      	ldr	r2, [pc, #284]	; (8001954 <HAL_SPI_MspInit+0x2bc>)
 8001836:	4293      	cmp	r3, r2
 8001838:	f040 8094 	bne.w	8001964 <HAL_SPI_MspInit+0x2cc>
    __HAL_RCC_SPI2_CLK_ENABLE();
 800183c:	4b3e      	ldr	r3, [pc, #248]	; (8001938 <HAL_SPI_MspInit+0x2a0>)
 800183e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001840:	4a3d      	ldr	r2, [pc, #244]	; (8001938 <HAL_SPI_MspInit+0x2a0>)
 8001842:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001846:	6413      	str	r3, [r2, #64]	; 0x40
 8001848:	4b3b      	ldr	r3, [pc, #236]	; (8001938 <HAL_SPI_MspInit+0x2a0>)
 800184a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800184c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001850:	62fb      	str	r3, [r7, #44]	; 0x2c
 8001852:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8001854:	4b38      	ldr	r3, [pc, #224]	; (8001938 <HAL_SPI_MspInit+0x2a0>)
 8001856:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001858:	4a37      	ldr	r2, [pc, #220]	; (8001938 <HAL_SPI_MspInit+0x2a0>)
 800185a:	f043 0304 	orr.w	r3, r3, #4
 800185e:	6313      	str	r3, [r2, #48]	; 0x30
 8001860:	4b35      	ldr	r3, [pc, #212]	; (8001938 <HAL_SPI_MspInit+0x2a0>)
 8001862:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001864:	f003 0304 	and.w	r3, r3, #4
 8001868:	62bb      	str	r3, [r7, #40]	; 0x28
 800186a:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800186c:	4b32      	ldr	r3, [pc, #200]	; (8001938 <HAL_SPI_MspInit+0x2a0>)
 800186e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001870:	4a31      	ldr	r2, [pc, #196]	; (8001938 <HAL_SPI_MspInit+0x2a0>)
 8001872:	f043 0302 	orr.w	r3, r3, #2
 8001876:	6313      	str	r3, [r2, #48]	; 0x30
 8001878:	4b2f      	ldr	r3, [pc, #188]	; (8001938 <HAL_SPI_MspInit+0x2a0>)
 800187a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800187c:	f003 0302 	and.w	r3, r3, #2
 8001880:	627b      	str	r3, [r7, #36]	; 0x24
 8001882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8001884:	230c      	movs	r3, #12
 8001886:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001888:	2302      	movs	r3, #2
 800188a:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800188c:	2301      	movs	r3, #1
 800188e:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001890:	2303      	movs	r3, #3
 8001892:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 8001894:	2305      	movs	r3, #5
 8001896:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001898:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800189c:	4619      	mov	r1, r3
 800189e:	482e      	ldr	r0, [pc, #184]	; (8001958 <HAL_SPI_MspInit+0x2c0>)
 80018a0:	f004 fc1a 	bl	80060d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80018a4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80018a8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80018aa:	2302      	movs	r3, #2
 80018ac:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80018ae:	2300      	movs	r3, #0
 80018b0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80018b2:	2303      	movs	r3, #3
 80018b4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI2;
 80018b6:	2305      	movs	r3, #5
 80018b8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80018ba:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80018be:	4619      	mov	r1, r3
 80018c0:	481f      	ldr	r0, [pc, #124]	; (8001940 <HAL_SPI_MspInit+0x2a8>)
 80018c2:	f004 fc09 	bl	80060d8 <HAL_GPIO_Init>
    hdma_spi2_rx.Instance = DMA1_Stream3;
 80018c6:	4b25      	ldr	r3, [pc, #148]	; (800195c <HAL_SPI_MspInit+0x2c4>)
 80018c8:	4a25      	ldr	r2, [pc, #148]	; (8001960 <HAL_SPI_MspInit+0x2c8>)
 80018ca:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Channel = DMA_CHANNEL_0;
 80018cc:	4b23      	ldr	r3, [pc, #140]	; (800195c <HAL_SPI_MspInit+0x2c4>)
 80018ce:	2200      	movs	r2, #0
 80018d0:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 80018d2:	4b22      	ldr	r3, [pc, #136]	; (800195c <HAL_SPI_MspInit+0x2c4>)
 80018d4:	2200      	movs	r2, #0
 80018d6:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 80018d8:	4b20      	ldr	r3, [pc, #128]	; (800195c <HAL_SPI_MspInit+0x2c4>)
 80018da:	2200      	movs	r2, #0
 80018dc:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 80018de:	4b1f      	ldr	r3, [pc, #124]	; (800195c <HAL_SPI_MspInit+0x2c4>)
 80018e0:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80018e4:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80018e6:	4b1d      	ldr	r3, [pc, #116]	; (800195c <HAL_SPI_MspInit+0x2c4>)
 80018e8:	2200      	movs	r2, #0
 80018ea:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80018ec:	4b1b      	ldr	r3, [pc, #108]	; (800195c <HAL_SPI_MspInit+0x2c4>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_NORMAL;
 80018f2:	4b1a      	ldr	r3, [pc, #104]	; (800195c <HAL_SPI_MspInit+0x2c4>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80018f8:	4b18      	ldr	r3, [pc, #96]	; (800195c <HAL_SPI_MspInit+0x2c4>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	621a      	str	r2, [r3, #32]
    hdma_spi2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80018fe:	4b17      	ldr	r3, [pc, #92]	; (800195c <HAL_SPI_MspInit+0x2c4>)
 8001900:	2200      	movs	r2, #0
 8001902:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8001904:	4815      	ldr	r0, [pc, #84]	; (800195c <HAL_SPI_MspInit+0x2c4>)
 8001906:	f002 f9f7 	bl	8003cf8 <HAL_DMA_Init>
 800190a:	4603      	mov	r3, r0
 800190c:	2b00      	cmp	r3, #0
 800190e:	d001      	beq.n	8001914 <HAL_SPI_MspInit+0x27c>
      Error_Handler();
 8001910:	f7ff fd90 	bl	8001434 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi2_rx);
 8001914:	687b      	ldr	r3, [r7, #4]
 8001916:	4a11      	ldr	r2, [pc, #68]	; (800195c <HAL_SPI_MspInit+0x2c4>)
 8001918:	659a      	str	r2, [r3, #88]	; 0x58
 800191a:	4a10      	ldr	r2, [pc, #64]	; (800195c <HAL_SPI_MspInit+0x2c4>)
 800191c:	687b      	ldr	r3, [r7, #4]
 800191e:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI2_IRQn, 5, 0);
 8001920:	2200      	movs	r2, #0
 8001922:	2105      	movs	r1, #5
 8001924:	2024      	movs	r0, #36	; 0x24
 8001926:	f002 f8c1 	bl	8003aac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI2_IRQn);
 800192a:	2024      	movs	r0, #36	; 0x24
 800192c:	f002 f8da 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
}
 8001930:	e13c      	b.n	8001bac <HAL_SPI_MspInit+0x514>
 8001932:	bf00      	nop
 8001934:	40013000 	.word	0x40013000
 8001938:	40023800 	.word	0x40023800
 800193c:	40020000 	.word	0x40020000
 8001940:	40020400 	.word	0x40020400
 8001944:	20000a94 	.word	0x20000a94
 8001948:	40026440 	.word	0x40026440
 800194c:	20000af4 	.word	0x20000af4
 8001950:	40026458 	.word	0x40026458
 8001954:	40003800 	.word	0x40003800
 8001958:	40020800 	.word	0x40020800
 800195c:	20000b54 	.word	0x20000b54
 8001960:	40026058 	.word	0x40026058
  else if(spiHandle->Instance==SPI3)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a92      	ldr	r2, [pc, #584]	; (8001bb4 <HAL_SPI_MspInit+0x51c>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d15d      	bne.n	8001a2a <HAL_SPI_MspInit+0x392>
    __HAL_RCC_SPI3_CLK_ENABLE();
 800196e:	4b92      	ldr	r3, [pc, #584]	; (8001bb8 <HAL_SPI_MspInit+0x520>)
 8001970:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001972:	4a91      	ldr	r2, [pc, #580]	; (8001bb8 <HAL_SPI_MspInit+0x520>)
 8001974:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8001978:	6413      	str	r3, [r2, #64]	; 0x40
 800197a:	4b8f      	ldr	r3, [pc, #572]	; (8001bb8 <HAL_SPI_MspInit+0x520>)
 800197c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800197e:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8001982:	623b      	str	r3, [r7, #32]
 8001984:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001986:	4b8c      	ldr	r3, [pc, #560]	; (8001bb8 <HAL_SPI_MspInit+0x520>)
 8001988:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800198a:	4a8b      	ldr	r2, [pc, #556]	; (8001bb8 <HAL_SPI_MspInit+0x520>)
 800198c:	f043 0302 	orr.w	r3, r3, #2
 8001990:	6313      	str	r3, [r2, #48]	; 0x30
 8001992:	4b89      	ldr	r3, [pc, #548]	; (8001bb8 <HAL_SPI_MspInit+0x520>)
 8001994:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001996:	f003 0302 	and.w	r3, r3, #2
 800199a:	61fb      	str	r3, [r7, #28]
 800199c:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800199e:	4b86      	ldr	r3, [pc, #536]	; (8001bb8 <HAL_SPI_MspInit+0x520>)
 80019a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019a2:	4a85      	ldr	r2, [pc, #532]	; (8001bb8 <HAL_SPI_MspInit+0x520>)
 80019a4:	f043 0304 	orr.w	r3, r3, #4
 80019a8:	6313      	str	r3, [r2, #48]	; 0x30
 80019aa:	4b83      	ldr	r3, [pc, #524]	; (8001bb8 <HAL_SPI_MspInit+0x520>)
 80019ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80019ae:	f003 0304 	and.w	r3, r3, #4
 80019b2:	61bb      	str	r3, [r7, #24]
 80019b4:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80019b6:	2304      	movs	r3, #4
 80019b8:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019ba:	2302      	movs	r3, #2
 80019bc:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019be:	2300      	movs	r3, #0
 80019c0:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019c2:	2303      	movs	r3, #3
 80019c4:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF7_SPI3;
 80019c6:	2307      	movs	r3, #7
 80019c8:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ca:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019ce:	4619      	mov	r1, r3
 80019d0:	487a      	ldr	r0, [pc, #488]	; (8001bbc <HAL_SPI_MspInit+0x524>)
 80019d2:	f004 fb81 	bl	80060d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80019d6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80019da:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019dc:	2302      	movs	r3, #2
 80019de:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019e0:	2300      	movs	r3, #0
 80019e2:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019e4:	2303      	movs	r3, #3
 80019e6:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 80019e8:	2306      	movs	r3, #6
 80019ea:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80019ec:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80019f0:	4619      	mov	r1, r3
 80019f2:	4873      	ldr	r0, [pc, #460]	; (8001bc0 <HAL_SPI_MspInit+0x528>)
 80019f4:	f004 fb70 	bl	80060d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_4;
 80019f8:	2310      	movs	r3, #16
 80019fa:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019fc:	2302      	movs	r3, #2
 80019fe:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a00:	2300      	movs	r3, #0
 8001a02:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a04:	2303      	movs	r3, #3
 8001a06:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF6_SPI3;
 8001a08:	2306      	movs	r3, #6
 8001a0a:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001a0c:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a10:	4619      	mov	r1, r3
 8001a12:	486a      	ldr	r0, [pc, #424]	; (8001bbc <HAL_SPI_MspInit+0x524>)
 8001a14:	f004 fb60 	bl	80060d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(SPI3_IRQn, 5, 0);
 8001a18:	2200      	movs	r2, #0
 8001a1a:	2105      	movs	r1, #5
 8001a1c:	2033      	movs	r0, #51	; 0x33
 8001a1e:	f002 f845 	bl	8003aac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI3_IRQn);
 8001a22:	2033      	movs	r0, #51	; 0x33
 8001a24:	f002 f85e 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
}
 8001a28:	e0c0      	b.n	8001bac <HAL_SPI_MspInit+0x514>
  else if(spiHandle->Instance==SPI4)
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	4a65      	ldr	r2, [pc, #404]	; (8001bc4 <HAL_SPI_MspInit+0x52c>)
 8001a30:	4293      	cmp	r3, r2
 8001a32:	f040 808d 	bne.w	8001b50 <HAL_SPI_MspInit+0x4b8>
    __HAL_RCC_SPI4_CLK_ENABLE();
 8001a36:	4b60      	ldr	r3, [pc, #384]	; (8001bb8 <HAL_SPI_MspInit+0x520>)
 8001a38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a3a:	4a5f      	ldr	r2, [pc, #380]	; (8001bb8 <HAL_SPI_MspInit+0x520>)
 8001a3c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a40:	6453      	str	r3, [r2, #68]	; 0x44
 8001a42:	4b5d      	ldr	r3, [pc, #372]	; (8001bb8 <HAL_SPI_MspInit+0x520>)
 8001a44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001a46:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001a4a:	617b      	str	r3, [r7, #20]
 8001a4c:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOE_CLK_ENABLE();
 8001a4e:	4b5a      	ldr	r3, [pc, #360]	; (8001bb8 <HAL_SPI_MspInit+0x520>)
 8001a50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a52:	4a59      	ldr	r2, [pc, #356]	; (8001bb8 <HAL_SPI_MspInit+0x520>)
 8001a54:	f043 0310 	orr.w	r3, r3, #16
 8001a58:	6313      	str	r3, [r2, #48]	; 0x30
 8001a5a:	4b57      	ldr	r3, [pc, #348]	; (8001bb8 <HAL_SPI_MspInit+0x520>)
 8001a5c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001a5e:	f003 0310 	and.w	r3, r3, #16
 8001a62:	613b      	str	r3, [r7, #16]
 8001a64:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_5|GPIO_PIN_6;
 8001a66:	2364      	movs	r3, #100	; 0x64
 8001a68:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001a6a:	2302      	movs	r3, #2
 8001a6c:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001a6e:	2300      	movs	r3, #0
 8001a70:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001a72:	2303      	movs	r3, #3
 8001a74:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI4;
 8001a76:	2305      	movs	r3, #5
 8001a78:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001a7a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001a7e:	4619      	mov	r1, r3
 8001a80:	4851      	ldr	r0, [pc, #324]	; (8001bc8 <HAL_SPI_MspInit+0x530>)
 8001a82:	f004 fb29 	bl	80060d8 <HAL_GPIO_Init>
    hdma_spi4_rx.Instance = DMA2_Stream0;
 8001a86:	4b51      	ldr	r3, [pc, #324]	; (8001bcc <HAL_SPI_MspInit+0x534>)
 8001a88:	4a51      	ldr	r2, [pc, #324]	; (8001bd0 <HAL_SPI_MspInit+0x538>)
 8001a8a:	601a      	str	r2, [r3, #0]
    hdma_spi4_rx.Init.Channel = DMA_CHANNEL_4;
 8001a8c:	4b4f      	ldr	r3, [pc, #316]	; (8001bcc <HAL_SPI_MspInit+0x534>)
 8001a8e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8001a92:	605a      	str	r2, [r3, #4]
    hdma_spi4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8001a94:	4b4d      	ldr	r3, [pc, #308]	; (8001bcc <HAL_SPI_MspInit+0x534>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	609a      	str	r2, [r3, #8]
    hdma_spi4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001a9a:	4b4c      	ldr	r3, [pc, #304]	; (8001bcc <HAL_SPI_MspInit+0x534>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	60da      	str	r2, [r3, #12]
    hdma_spi4_rx.Init.MemInc = DMA_MINC_ENABLE;
 8001aa0:	4b4a      	ldr	r3, [pc, #296]	; (8001bcc <HAL_SPI_MspInit+0x534>)
 8001aa2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001aa6:	611a      	str	r2, [r3, #16]
    hdma_spi4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001aa8:	4b48      	ldr	r3, [pc, #288]	; (8001bcc <HAL_SPI_MspInit+0x534>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	615a      	str	r2, [r3, #20]
    hdma_spi4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001aae:	4b47      	ldr	r3, [pc, #284]	; (8001bcc <HAL_SPI_MspInit+0x534>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	619a      	str	r2, [r3, #24]
    hdma_spi4_rx.Init.Mode = DMA_NORMAL;
 8001ab4:	4b45      	ldr	r3, [pc, #276]	; (8001bcc <HAL_SPI_MspInit+0x534>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	61da      	str	r2, [r3, #28]
    hdma_spi4_rx.Init.Priority = DMA_PRIORITY_LOW;
 8001aba:	4b44      	ldr	r3, [pc, #272]	; (8001bcc <HAL_SPI_MspInit+0x534>)
 8001abc:	2200      	movs	r2, #0
 8001abe:	621a      	str	r2, [r3, #32]
    hdma_spi4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001ac0:	4b42      	ldr	r3, [pc, #264]	; (8001bcc <HAL_SPI_MspInit+0x534>)
 8001ac2:	2200      	movs	r2, #0
 8001ac4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_rx) != HAL_OK)
 8001ac6:	4841      	ldr	r0, [pc, #260]	; (8001bcc <HAL_SPI_MspInit+0x534>)
 8001ac8:	f002 f916 	bl	8003cf8 <HAL_DMA_Init>
 8001acc:	4603      	mov	r3, r0
 8001ace:	2b00      	cmp	r3, #0
 8001ad0:	d001      	beq.n	8001ad6 <HAL_SPI_MspInit+0x43e>
      Error_Handler();
 8001ad2:	f7ff fcaf 	bl	8001434 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmarx,hdma_spi4_rx);
 8001ad6:	687b      	ldr	r3, [r7, #4]
 8001ad8:	4a3c      	ldr	r2, [pc, #240]	; (8001bcc <HAL_SPI_MspInit+0x534>)
 8001ada:	659a      	str	r2, [r3, #88]	; 0x58
 8001adc:	4a3b      	ldr	r2, [pc, #236]	; (8001bcc <HAL_SPI_MspInit+0x534>)
 8001ade:	687b      	ldr	r3, [r7, #4]
 8001ae0:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_spi4_tx.Instance = DMA2_Stream4;
 8001ae2:	4b3c      	ldr	r3, [pc, #240]	; (8001bd4 <HAL_SPI_MspInit+0x53c>)
 8001ae4:	4a3c      	ldr	r2, [pc, #240]	; (8001bd8 <HAL_SPI_MspInit+0x540>)
 8001ae6:	601a      	str	r2, [r3, #0]
    hdma_spi4_tx.Init.Channel = DMA_CHANNEL_5;
 8001ae8:	4b3a      	ldr	r3, [pc, #232]	; (8001bd4 <HAL_SPI_MspInit+0x53c>)
 8001aea:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8001aee:	605a      	str	r2, [r3, #4]
    hdma_spi4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8001af0:	4b38      	ldr	r3, [pc, #224]	; (8001bd4 <HAL_SPI_MspInit+0x53c>)
 8001af2:	2240      	movs	r2, #64	; 0x40
 8001af4:	609a      	str	r2, [r3, #8]
    hdma_spi4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8001af6:	4b37      	ldr	r3, [pc, #220]	; (8001bd4 <HAL_SPI_MspInit+0x53c>)
 8001af8:	2200      	movs	r2, #0
 8001afa:	60da      	str	r2, [r3, #12]
    hdma_spi4_tx.Init.MemInc = DMA_MINC_ENABLE;
 8001afc:	4b35      	ldr	r3, [pc, #212]	; (8001bd4 <HAL_SPI_MspInit+0x53c>)
 8001afe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8001b02:	611a      	str	r2, [r3, #16]
    hdma_spi4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8001b04:	4b33      	ldr	r3, [pc, #204]	; (8001bd4 <HAL_SPI_MspInit+0x53c>)
 8001b06:	2200      	movs	r2, #0
 8001b08:	615a      	str	r2, [r3, #20]
    hdma_spi4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8001b0a:	4b32      	ldr	r3, [pc, #200]	; (8001bd4 <HAL_SPI_MspInit+0x53c>)
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	619a      	str	r2, [r3, #24]
    hdma_spi4_tx.Init.Mode = DMA_NORMAL;
 8001b10:	4b30      	ldr	r3, [pc, #192]	; (8001bd4 <HAL_SPI_MspInit+0x53c>)
 8001b12:	2200      	movs	r2, #0
 8001b14:	61da      	str	r2, [r3, #28]
    hdma_spi4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8001b16:	4b2f      	ldr	r3, [pc, #188]	; (8001bd4 <HAL_SPI_MspInit+0x53c>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	621a      	str	r2, [r3, #32]
    hdma_spi4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8001b1c:	4b2d      	ldr	r3, [pc, #180]	; (8001bd4 <HAL_SPI_MspInit+0x53c>)
 8001b1e:	2200      	movs	r2, #0
 8001b20:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_spi4_tx) != HAL_OK)
 8001b22:	482c      	ldr	r0, [pc, #176]	; (8001bd4 <HAL_SPI_MspInit+0x53c>)
 8001b24:	f002 f8e8 	bl	8003cf8 <HAL_DMA_Init>
 8001b28:	4603      	mov	r3, r0
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	d001      	beq.n	8001b32 <HAL_SPI_MspInit+0x49a>
      Error_Handler();
 8001b2e:	f7ff fc81 	bl	8001434 <Error_Handler>
    __HAL_LINKDMA(spiHandle,hdmatx,hdma_spi4_tx);
 8001b32:	687b      	ldr	r3, [r7, #4]
 8001b34:	4a27      	ldr	r2, [pc, #156]	; (8001bd4 <HAL_SPI_MspInit+0x53c>)
 8001b36:	655a      	str	r2, [r3, #84]	; 0x54
 8001b38:	4a26      	ldr	r2, [pc, #152]	; (8001bd4 <HAL_SPI_MspInit+0x53c>)
 8001b3a:	687b      	ldr	r3, [r7, #4]
 8001b3c:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(SPI4_IRQn, 5, 0);
 8001b3e:	2200      	movs	r2, #0
 8001b40:	2105      	movs	r1, #5
 8001b42:	2054      	movs	r0, #84	; 0x54
 8001b44:	f001 ffb2 	bl	8003aac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(SPI4_IRQn);
 8001b48:	2054      	movs	r0, #84	; 0x54
 8001b4a:	f001 ffcb 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
}
 8001b4e:	e02d      	b.n	8001bac <HAL_SPI_MspInit+0x514>
  else if(spiHandle->Instance==SPI5)
 8001b50:	687b      	ldr	r3, [r7, #4]
 8001b52:	681b      	ldr	r3, [r3, #0]
 8001b54:	4a21      	ldr	r2, [pc, #132]	; (8001bdc <HAL_SPI_MspInit+0x544>)
 8001b56:	4293      	cmp	r3, r2
 8001b58:	d128      	bne.n	8001bac <HAL_SPI_MspInit+0x514>
    __HAL_RCC_SPI5_CLK_ENABLE();
 8001b5a:	4b17      	ldr	r3, [pc, #92]	; (8001bb8 <HAL_SPI_MspInit+0x520>)
 8001b5c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b5e:	4a16      	ldr	r2, [pc, #88]	; (8001bb8 <HAL_SPI_MspInit+0x520>)
 8001b60:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8001b64:	6453      	str	r3, [r2, #68]	; 0x44
 8001b66:	4b14      	ldr	r3, [pc, #80]	; (8001bb8 <HAL_SPI_MspInit+0x520>)
 8001b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001b6a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8001b6e:	60fb      	str	r3, [r7, #12]
 8001b70:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOF_CLK_ENABLE();
 8001b72:	4b11      	ldr	r3, [pc, #68]	; (8001bb8 <HAL_SPI_MspInit+0x520>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b76:	4a10      	ldr	r2, [pc, #64]	; (8001bb8 <HAL_SPI_MspInit+0x520>)
 8001b78:	f043 0320 	orr.w	r3, r3, #32
 8001b7c:	6313      	str	r3, [r2, #48]	; 0x30
 8001b7e:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <HAL_SPI_MspInit+0x520>)
 8001b80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001b82:	f003 0320 	and.w	r3, r3, #32
 8001b86:	60bb      	str	r3, [r7, #8]
 8001b88:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_11;
 8001b8a:	f44f 6318 	mov.w	r3, #2432	; 0x980
 8001b8e:	63fb      	str	r3, [r7, #60]	; 0x3c
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001b90:	2302      	movs	r3, #2
 8001b92:	643b      	str	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b94:	2300      	movs	r3, #0
 8001b96:	647b      	str	r3, [r7, #68]	; 0x44
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001b98:	2303      	movs	r3, #3
 8001b9a:	64bb      	str	r3, [r7, #72]	; 0x48
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI5;
 8001b9c:	2305      	movs	r3, #5
 8001b9e:	64fb      	str	r3, [r7, #76]	; 0x4c
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8001ba0:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 8001ba4:	4619      	mov	r1, r3
 8001ba6:	480e      	ldr	r0, [pc, #56]	; (8001be0 <HAL_SPI_MspInit+0x548>)
 8001ba8:	f004 fa96 	bl	80060d8 <HAL_GPIO_Init>
}
 8001bac:	bf00      	nop
 8001bae:	3750      	adds	r7, #80	; 0x50
 8001bb0:	46bd      	mov	sp, r7
 8001bb2:	bd80      	pop	{r7, pc}
 8001bb4:	40003c00 	.word	0x40003c00
 8001bb8:	40023800 	.word	0x40023800
 8001bbc:	40020400 	.word	0x40020400
 8001bc0:	40020800 	.word	0x40020800
 8001bc4:	40013400 	.word	0x40013400
 8001bc8:	40021000 	.word	0x40021000
 8001bcc:	20000bb4 	.word	0x20000bb4
 8001bd0:	40026410 	.word	0x40026410
 8001bd4:	20000c14 	.word	0x20000c14
 8001bd8:	40026470 	.word	0x40026470
 8001bdc:	40015000 	.word	0x40015000
 8001be0:	40021400 	.word	0x40021400

08001be4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001be4:	b580      	push	{r7, lr}
 8001be6:	b082      	sub	sp, #8
 8001be8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_PWR_CLK_ENABLE();
 8001bea:	4b15      	ldr	r3, [pc, #84]	; (8001c40 <HAL_MspInit+0x5c>)
 8001bec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bee:	4a14      	ldr	r2, [pc, #80]	; (8001c40 <HAL_MspInit+0x5c>)
 8001bf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001bf4:	6413      	str	r3, [r2, #64]	; 0x40
 8001bf6:	4b12      	ldr	r3, [pc, #72]	; (8001c40 <HAL_MspInit+0x5c>)
 8001bf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001bfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001bfe:	607b      	str	r3, [r7, #4]
 8001c00:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001c02:	4b0f      	ldr	r3, [pc, #60]	; (8001c40 <HAL_MspInit+0x5c>)
 8001c04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c06:	4a0e      	ldr	r2, [pc, #56]	; (8001c40 <HAL_MspInit+0x5c>)
 8001c08:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8001c0c:	6453      	str	r3, [r2, #68]	; 0x44
 8001c0e:	4b0c      	ldr	r3, [pc, #48]	; (8001c40 <HAL_MspInit+0x5c>)
 8001c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c12:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8001c16:	603b      	str	r3, [r7, #0]
 8001c18:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8001c1a:	2200      	movs	r2, #0
 8001c1c:	210f      	movs	r1, #15
 8001c1e:	f06f 0001 	mvn.w	r0, #1
 8001c22:	f001 ff43 	bl	8003aac <HAL_NVIC_SetPriority>

  /* Peripheral interrupt init */
  /* FLASH_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(FLASH_IRQn, 5, 0);
 8001c26:	2200      	movs	r2, #0
 8001c28:	2105      	movs	r1, #5
 8001c2a:	2004      	movs	r0, #4
 8001c2c:	f001 ff3e 	bl	8003aac <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(FLASH_IRQn);
 8001c30:	2004      	movs	r0, #4
 8001c32:	f001 ff57 	bl	8003ae4 <HAL_NVIC_EnableIRQ>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001c36:	bf00      	nop
 8001c38:	3708      	adds	r7, #8
 8001c3a:	46bd      	mov	sp, r7
 8001c3c:	bd80      	pop	{r7, pc}
 8001c3e:	bf00      	nop
 8001c40:	40023800 	.word	0x40023800

08001c44 <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c44:	b580      	push	{r7, lr}
 8001c46:	b08c      	sub	sp, #48	; 0x30
 8001c48:	af00      	add	r7, sp, #0
 8001c4a:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock = 0U;
 8001c4c:	2300      	movs	r3, #0
 8001c4e:	62bb      	str	r3, [r7, #40]	; 0x28

  uint32_t              uwPrescalerValue = 0U;
 8001c50:	2300      	movs	r3, #0
 8001c52:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM1 clock */
  __HAL_RCC_TIM1_CLK_ENABLE();
 8001c54:	4b2f      	ldr	r3, [pc, #188]	; (8001d14 <HAL_InitTick+0xd0>)
 8001c56:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c58:	4a2e      	ldr	r2, [pc, #184]	; (8001d14 <HAL_InitTick+0xd0>)
 8001c5a:	f043 0301 	orr.w	r3, r3, #1
 8001c5e:	6453      	str	r3, [r2, #68]	; 0x44
 8001c60:	4b2c      	ldr	r3, [pc, #176]	; (8001d14 <HAL_InitTick+0xd0>)
 8001c62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8001c64:	f003 0301 	and.w	r3, r3, #1
 8001c68:	60bb      	str	r3, [r7, #8]
 8001c6a:	68bb      	ldr	r3, [r7, #8]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8001c6c:	f107 020c 	add.w	r2, r7, #12
 8001c70:	f107 0310 	add.w	r3, r7, #16
 8001c74:	4611      	mov	r1, r2
 8001c76:	4618      	mov	r0, r3
 8001c78:	f007 f912 	bl	8008ea0 <HAL_RCC_GetClockConfig>

  /* Compute TIM1 clock */
      uwTimclock = 2*HAL_RCC_GetPCLK2Freq();
 8001c7c:	f007 f8fc 	bl	8008e78 <HAL_RCC_GetPCLK2Freq>
 8001c80:	4603      	mov	r3, r0
 8001c82:	005b      	lsls	r3, r3, #1
 8001c84:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Compute the prescaler value to have TIM1 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8001c86:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8001c88:	4a23      	ldr	r2, [pc, #140]	; (8001d18 <HAL_InitTick+0xd4>)
 8001c8a:	fba2 2303 	umull	r2, r3, r2, r3
 8001c8e:	0c9b      	lsrs	r3, r3, #18
 8001c90:	3b01      	subs	r3, #1
 8001c92:	627b      	str	r3, [r7, #36]	; 0x24

  /* Initialize TIM1 */
  htim1.Instance = TIM1;
 8001c94:	4b21      	ldr	r3, [pc, #132]	; (8001d1c <HAL_InitTick+0xd8>)
 8001c96:	4a22      	ldr	r2, [pc, #136]	; (8001d20 <HAL_InitTick+0xdc>)
 8001c98:	601a      	str	r2, [r3, #0]
  + Period = [(TIM1CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim1.Init.Period = (1000000U / 1000U) - 1U;
 8001c9a:	4b20      	ldr	r3, [pc, #128]	; (8001d1c <HAL_InitTick+0xd8>)
 8001c9c:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001ca0:	60da      	str	r2, [r3, #12]
  htim1.Init.Prescaler = uwPrescalerValue;
 8001ca2:	4a1e      	ldr	r2, [pc, #120]	; (8001d1c <HAL_InitTick+0xd8>)
 8001ca4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001ca6:	6053      	str	r3, [r2, #4]
  htim1.Init.ClockDivision = 0;
 8001ca8:	4b1c      	ldr	r3, [pc, #112]	; (8001d1c <HAL_InitTick+0xd8>)
 8001caa:	2200      	movs	r2, #0
 8001cac:	611a      	str	r2, [r3, #16]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001cae:	4b1b      	ldr	r3, [pc, #108]	; (8001d1c <HAL_InitTick+0xd8>)
 8001cb0:	2200      	movs	r2, #0
 8001cb2:	609a      	str	r2, [r3, #8]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001cb4:	4b19      	ldr	r3, [pc, #100]	; (8001d1c <HAL_InitTick+0xd8>)
 8001cb6:	2200      	movs	r2, #0
 8001cb8:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim1);
 8001cba:	4818      	ldr	r0, [pc, #96]	; (8001d1c <HAL_InitTick+0xd8>)
 8001cbc:	f009 fcd8 	bl	800b670 <HAL_TIM_Base_Init>
 8001cc0:	4603      	mov	r3, r0
 8001cc2:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  if (status == HAL_OK)
 8001cc6:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d11b      	bne.n	8001d06 <HAL_InitTick+0xc2>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim1);
 8001cce:	4813      	ldr	r0, [pc, #76]	; (8001d1c <HAL_InitTick+0xd8>)
 8001cd0:	f009 fd30 	bl	800b734 <HAL_TIM_Base_Start_IT>
 8001cd4:	4603      	mov	r3, r0
 8001cd6:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
    if (status == HAL_OK)
 8001cda:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
 8001cde:	2b00      	cmp	r3, #0
 8001ce0:	d111      	bne.n	8001d06 <HAL_InitTick+0xc2>
    {
    /* Enable the TIM1 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM1_UP_TIM10_IRQn);
 8001ce2:	2019      	movs	r0, #25
 8001ce4:	f001 fefe 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	2b0f      	cmp	r3, #15
 8001cec:	d808      	bhi.n	8001d00 <HAL_InitTick+0xbc>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM1_UP_TIM10_IRQn, TickPriority, 0U);
 8001cee:	2200      	movs	r2, #0
 8001cf0:	6879      	ldr	r1, [r7, #4]
 8001cf2:	2019      	movs	r0, #25
 8001cf4:	f001 feda 	bl	8003aac <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8001cf8:	4a0a      	ldr	r2, [pc, #40]	; (8001d24 <HAL_InitTick+0xe0>)
 8001cfa:	687b      	ldr	r3, [r7, #4]
 8001cfc:	6013      	str	r3, [r2, #0]
 8001cfe:	e002      	b.n	8001d06 <HAL_InitTick+0xc2>
      }
      else
      {
        status = HAL_ERROR;
 8001d00:	2301      	movs	r3, #1
 8001d02:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
      }
    }
  }

 /* Return function status */
  return status;
 8001d06:	f897 302f 	ldrb.w	r3, [r7, #47]	; 0x2f
}
 8001d0a:	4618      	mov	r0, r3
 8001d0c:	3730      	adds	r7, #48	; 0x30
 8001d0e:	46bd      	mov	sp, r7
 8001d10:	bd80      	pop	{r7, pc}
 8001d12:	bf00      	nop
 8001d14:	40023800 	.word	0x40023800
 8001d18:	431bde83 	.word	0x431bde83
 8001d1c:	20000c74 	.word	0x20000c74
 8001d20:	40010000 	.word	0x40010000
 8001d24:	20000004 	.word	0x20000004

08001d28 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001d2c:	e7fe      	b.n	8001d2c <NMI_Handler+0x4>

08001d2e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001d2e:	b480      	push	{r7}
 8001d30:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001d32:	e7fe      	b.n	8001d32 <HardFault_Handler+0x4>

08001d34 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001d34:	b480      	push	{r7}
 8001d36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001d38:	e7fe      	b.n	8001d38 <MemManage_Handler+0x4>

08001d3a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001d3a:	b480      	push	{r7}
 8001d3c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001d3e:	e7fe      	b.n	8001d3e <BusFault_Handler+0x4>

08001d40 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001d40:	b480      	push	{r7}
 8001d42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001d44:	e7fe      	b.n	8001d44 <UsageFault_Handler+0x4>

08001d46 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001d46:	b480      	push	{r7}
 8001d48:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001d4a:	bf00      	nop
 8001d4c:	46bd      	mov	sp, r7
 8001d4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d52:	4770      	bx	lr

08001d54 <FLASH_IRQHandler>:

/**
  * @brief This function handles Flash global interrupt.
  */
void FLASH_IRQHandler(void)
{
 8001d54:	b580      	push	{r7, lr}
 8001d56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FLASH_IRQn 0 */

  /* USER CODE END FLASH_IRQn 0 */
  HAL_FLASH_IRQHandler();
 8001d58:	f003 feb6 	bl	8005ac8 <HAL_FLASH_IRQHandler>
  /* USER CODE BEGIN FLASH_IRQn 1 */

  /* USER CODE END FLASH_IRQn 1 */
}
 8001d5c:	bf00      	nop
 8001d5e:	bd80      	pop	{r7, pc}

08001d60 <DMA1_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA1 stream0 global interrupt.
  */
void DMA1_Stream0_IRQHandler(void)
{
 8001d60:	b580      	push	{r7, lr}
 8001d62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream0_IRQn 0 */

  /* USER CODE END DMA1_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_rx);
 8001d64:	4802      	ldr	r0, [pc, #8]	; (8001d70 <DMA1_Stream0_IRQHandler+0x10>)
 8001d66:	f002 f967 	bl	8004038 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream0_IRQn 1 */

  /* USER CODE END DMA1_Stream0_IRQn 1 */
}
 8001d6a:	bf00      	nop
 8001d6c:	bd80      	pop	{r7, pc}
 8001d6e:	bf00      	nop
 8001d70:	20001224 	.word	0x20001224

08001d74 <DMA1_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA1 stream1 global interrupt.
  */
void DMA1_Stream1_IRQHandler(void)
{
 8001d74:	b580      	push	{r7, lr}
 8001d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream1_IRQn 0 */

  /* USER CODE END DMA1_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c3_rx);
 8001d78:	4802      	ldr	r0, [pc, #8]	; (8001d84 <DMA1_Stream1_IRQHandler+0x10>)
 8001d7a:	f002 f95d 	bl	8004038 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream1_IRQn 1 */

  /* USER CODE END DMA1_Stream1_IRQn 1 */
}
 8001d7e:	bf00      	nop
 8001d80:	bd80      	pop	{r7, pc}
 8001d82:	bf00      	nop
 8001d84:	20000840 	.word	0x20000840

08001d88 <DMA1_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA1 stream2 global interrupt.
  */
void DMA1_Stream2_IRQHandler(void)
{
 8001d88:	b580      	push	{r7, lr}
 8001d8a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream2_IRQn 0 */

  /* USER CODE END DMA1_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_rx);
 8001d8c:	4802      	ldr	r0, [pc, #8]	; (8001d98 <DMA1_Stream2_IRQHandler+0x10>)
 8001d8e:	f002 f953 	bl	8004038 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream2_IRQn 1 */

  /* USER CODE END DMA1_Stream2_IRQn 1 */
}
 8001d92:	bf00      	nop
 8001d94:	bd80      	pop	{r7, pc}
 8001d96:	bf00      	nop
 8001d98:	20001164 	.word	0x20001164

08001d9c <DMA1_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA1 stream3 global interrupt.
  */
void DMA1_Stream3_IRQHandler(void)
{
 8001d9c:	b580      	push	{r7, lr}
 8001d9e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream3_IRQn 0 */

  /* USER CODE END DMA1_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 8001da0:	4802      	ldr	r0, [pc, #8]	; (8001dac <DMA1_Stream3_IRQHandler+0x10>)
 8001da2:	f002 f949 	bl	8004038 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream3_IRQn 1 */

  /* USER CODE END DMA1_Stream3_IRQn 1 */
}
 8001da6:	bf00      	nop
 8001da8:	bd80      	pop	{r7, pc}
 8001daa:	bf00      	nop
 8001dac:	20000b54 	.word	0x20000b54

08001db0 <DMA1_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA1 stream4 global interrupt.
  */
void DMA1_Stream4_IRQHandler(void)
{
 8001db0:	b580      	push	{r7, lr}
 8001db2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream4_IRQn 0 */

  /* USER CODE END DMA1_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart4_tx);
 8001db4:	4802      	ldr	r0, [pc, #8]	; (8001dc0 <DMA1_Stream4_IRQHandler+0x10>)
 8001db6:	f002 f93f 	bl	8004038 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream4_IRQn 1 */

  /* USER CODE END DMA1_Stream4_IRQn 1 */
}
 8001dba:	bf00      	nop
 8001dbc:	bd80      	pop	{r7, pc}
 8001dbe:	bf00      	nop
 8001dc0:	20001104 	.word	0x20001104

08001dc4 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8001dc4:	b580      	push	{r7, lr}
 8001dc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 8001dc8:	4802      	ldr	r0, [pc, #8]	; (8001dd4 <DMA1_Stream5_IRQHandler+0x10>)
 8001dca:	f002 f935 	bl	8004038 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8001dce:	bf00      	nop
 8001dd0:	bd80      	pop	{r7, pc}
 8001dd2:	bf00      	nop
 8001dd4:	200007e0 	.word	0x200007e0

08001dd8 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8001dd8:	b580      	push	{r7, lr}
 8001dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart8_rx);
 8001ddc:	4802      	ldr	r0, [pc, #8]	; (8001de8 <DMA1_Stream6_IRQHandler+0x10>)
 8001dde:	f002 f92b 	bl	8004038 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8001de2:	bf00      	nop
 8001de4:	bd80      	pop	{r7, pc}
 8001de6:	bf00      	nop
 8001de8:	20001284 	.word	0x20001284

08001dec <TIM1_UP_TIM10_IRQHandler>:

/**
  * @brief This function handles TIM1 update interrupt and TIM10 global interrupt.
  */
void TIM1_UP_TIM10_IRQHandler(void)
{
 8001dec:	b580      	push	{r7, lr}
 8001dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 0 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 0 */
  HAL_TIM_IRQHandler(&htim1);
 8001df0:	4802      	ldr	r0, [pc, #8]	; (8001dfc <TIM1_UP_TIM10_IRQHandler+0x10>)
 8001df2:	f009 fd17 	bl	800b824 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM1_UP_TIM10_IRQn 1 */

  /* USER CODE END TIM1_UP_TIM10_IRQn 1 */
}
 8001df6:	bf00      	nop
 8001df8:	bd80      	pop	{r7, pc}
 8001dfa:	bf00      	nop
 8001dfc:	20000c74 	.word	0x20000c74

08001e00 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8001e00:	b580      	push	{r7, lr}
 8001e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8001e04:	4802      	ldr	r0, [pc, #8]	; (8001e10 <I2C1_EV_IRQHandler+0x10>)
 8001e06:	f004 fdeb 	bl	80069e0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8001e0a:	bf00      	nop
 8001e0c:	bd80      	pop	{r7, pc}
 8001e0e:	bf00      	nop
 8001e10:	20000690 	.word	0x20000690

08001e14 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8001e14:	b580      	push	{r7, lr}
 8001e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8001e18:	4802      	ldr	r0, [pc, #8]	; (8001e24 <I2C1_ER_IRQHandler+0x10>)
 8001e1a:	f004 fdfb 	bl	8006a14 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8001e1e:	bf00      	nop
 8001e20:	bd80      	pop	{r7, pc}
 8001e22:	bf00      	nop
 8001e24:	20000690 	.word	0x20000690

08001e28 <I2C2_EV_IRQHandler>:

/**
  * @brief This function handles I2C2 event interrupt.
  */
void I2C2_EV_IRQHandler(void)
{
 8001e28:	b580      	push	{r7, lr}
 8001e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_EV_IRQn 0 */

  /* USER CODE END I2C2_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c2);
 8001e2c:	4802      	ldr	r0, [pc, #8]	; (8001e38 <I2C2_EV_IRQHandler+0x10>)
 8001e2e:	f004 fdd7 	bl	80069e0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C2_EV_IRQn 1 */

  /* USER CODE END I2C2_EV_IRQn 1 */
}
 8001e32:	bf00      	nop
 8001e34:	bd80      	pop	{r7, pc}
 8001e36:	bf00      	nop
 8001e38:	200006e4 	.word	0x200006e4

08001e3c <I2C2_ER_IRQHandler>:

/**
  * @brief This function handles I2C2 error interrupt.
  */
void I2C2_ER_IRQHandler(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C2_ER_IRQn 0 */

  /* USER CODE END I2C2_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c2);
 8001e40:	4802      	ldr	r0, [pc, #8]	; (8001e4c <I2C2_ER_IRQHandler+0x10>)
 8001e42:	f004 fde7 	bl	8006a14 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C2_ER_IRQn 1 */

  /* USER CODE END I2C2_ER_IRQn 1 */
}
 8001e46:	bf00      	nop
 8001e48:	bd80      	pop	{r7, pc}
 8001e4a:	bf00      	nop
 8001e4c:	200006e4 	.word	0x200006e4

08001e50 <SPI1_IRQHandler>:

/**
  * @brief This function handles SPI1 global interrupt.
  */
void SPI1_IRQHandler(void)
{
 8001e50:	b580      	push	{r7, lr}
 8001e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI1_IRQn 0 */

  /* USER CODE END SPI1_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi1);
 8001e54:	4802      	ldr	r0, [pc, #8]	; (8001e60 <SPI1_IRQHandler+0x10>)
 8001e56:	f008 fb67 	bl	800a528 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI1_IRQn 1 */

  /* USER CODE END SPI1_IRQn 1 */
}
 8001e5a:	bf00      	nop
 8001e5c:	bd80      	pop	{r7, pc}
 8001e5e:	bf00      	nop
 8001e60:	200008a0 	.word	0x200008a0

08001e64 <SPI2_IRQHandler>:

/**
  * @brief This function handles SPI2 global interrupt.
  */
void SPI2_IRQHandler(void)
{
 8001e64:	b580      	push	{r7, lr}
 8001e66:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI2_IRQn 0 */

  /* USER CODE END SPI2_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi2);
 8001e68:	4802      	ldr	r0, [pc, #8]	; (8001e74 <SPI2_IRQHandler+0x10>)
 8001e6a:	f008 fb5d 	bl	800a528 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI2_IRQn 1 */

  /* USER CODE END SPI2_IRQn 1 */
}
 8001e6e:	bf00      	nop
 8001e70:	bd80      	pop	{r7, pc}
 8001e72:	bf00      	nop
 8001e74:	20000904 	.word	0x20000904

08001e78 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt.
  */
void USART1_IRQHandler(void)
{
 8001e78:	b580      	push	{r7, lr}
 8001e7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 8001e7c:	4802      	ldr	r0, [pc, #8]	; (8001e88 <USART1_IRQHandler+0x10>)
 8001e7e:	f00a f9a1 	bl	800c1c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 8001e82:	bf00      	nop
 8001e84:	bd80      	pop	{r7, pc}
 8001e86:	bf00      	nop
 8001e88:	20000ee4 	.word	0x20000ee4

08001e8c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001e8c:	b580      	push	{r7, lr}
 8001e8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001e90:	4802      	ldr	r0, [pc, #8]	; (8001e9c <USART2_IRQHandler+0x10>)
 8001e92:	f00a f997 	bl	800c1c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8001e96:	bf00      	nop
 8001e98:	bd80      	pop	{r7, pc}
 8001e9a:	bf00      	nop
 8001e9c:	20000f6c 	.word	0x20000f6c

08001ea0 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8001ea0:	b580      	push	{r7, lr}
 8001ea2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8001ea4:	4802      	ldr	r0, [pc, #8]	; (8001eb0 <USART3_IRQHandler+0x10>)
 8001ea6:	f00a f98d 	bl	800c1c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8001eaa:	bf00      	nop
 8001eac:	bd80      	pop	{r7, pc}
 8001eae:	bf00      	nop
 8001eb0:	20000ff4 	.word	0x20000ff4

08001eb4 <DMA1_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA1 stream7 global interrupt.
  */
void DMA1_Stream7_IRQHandler(void)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream7_IRQn 0 */

  /* USER CODE END DMA1_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_uart5_tx);
 8001eb8:	4802      	ldr	r0, [pc, #8]	; (8001ec4 <DMA1_Stream7_IRQHandler+0x10>)
 8001eba:	f002 f8bd 	bl	8004038 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream7_IRQn 1 */

  /* USER CODE END DMA1_Stream7_IRQn 1 */
}
 8001ebe:	bf00      	nop
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	200011c4 	.word	0x200011c4

08001ec8 <SPI3_IRQHandler>:

/**
  * @brief This function handles SPI3 global interrupt.
  */
void SPI3_IRQHandler(void)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI3_IRQn 0 */

  /* USER CODE END SPI3_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi3);
 8001ecc:	4802      	ldr	r0, [pc, #8]	; (8001ed8 <SPI3_IRQHandler+0x10>)
 8001ece:	f008 fb2b 	bl	800a528 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI3_IRQn 1 */

  /* USER CODE END SPI3_IRQn 1 */
}
 8001ed2:	bf00      	nop
 8001ed4:	bd80      	pop	{r7, pc}
 8001ed6:	bf00      	nop
 8001ed8:	20000968 	.word	0x20000968

08001edc <UART4_IRQHandler>:

/**
  * @brief This function handles UART4 global interrupt.
  */
void UART4_IRQHandler(void)
{
 8001edc:	b580      	push	{r7, lr}
 8001ede:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART4_IRQn 0 */

  /* USER CODE END UART4_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 8001ee0:	4802      	ldr	r0, [pc, #8]	; (8001eec <UART4_IRQHandler+0x10>)
 8001ee2:	f00a f96f 	bl	800c1c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART4_IRQn 1 */

  /* USER CODE END UART4_IRQn 1 */
}
 8001ee6:	bf00      	nop
 8001ee8:	bd80      	pop	{r7, pc}
 8001eea:	bf00      	nop
 8001eec:	20000cc4 	.word	0x20000cc4

08001ef0 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8001ef0:	b580      	push	{r7, lr}
 8001ef2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8001ef4:	4802      	ldr	r0, [pc, #8]	; (8001f00 <UART5_IRQHandler+0x10>)
 8001ef6:	f00a f965 	bl	800c1c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8001efa:	bf00      	nop
 8001efc:	bd80      	pop	{r7, pc}
 8001efe:	bf00      	nop
 8001f00:	20000d4c 	.word	0x20000d4c

08001f04 <DMA2_Stream0_IRQHandler>:

/**
  * @brief This function handles DMA2 stream0 global interrupt.
  */
void DMA2_Stream0_IRQHandler(void)
{
 8001f04:	b580      	push	{r7, lr}
 8001f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream0_IRQn 0 */

  /* USER CODE END DMA2_Stream0_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_rx);
 8001f08:	4802      	ldr	r0, [pc, #8]	; (8001f14 <DMA2_Stream0_IRQHandler+0x10>)
 8001f0a:	f002 f895 	bl	8004038 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream0_IRQn 1 */

  /* USER CODE END DMA2_Stream0_IRQn 1 */
}
 8001f0e:	bf00      	nop
 8001f10:	bd80      	pop	{r7, pc}
 8001f12:	bf00      	nop
 8001f14:	20000bb4 	.word	0x20000bb4

08001f18 <DMA2_Stream1_IRQHandler>:

/**
  * @brief This function handles DMA2 stream1 global interrupt.
  */
void DMA2_Stream1_IRQHandler(void)
{
 8001f18:	b580      	push	{r7, lr}
 8001f1a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream1_IRQn 0 */

  /* USER CODE END DMA2_Stream1_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_rx);
 8001f1c:	4802      	ldr	r0, [pc, #8]	; (8001f28 <DMA2_Stream1_IRQHandler+0x10>)
 8001f1e:	f002 f88b 	bl	8004038 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream1_IRQn 1 */

  /* USER CODE END DMA2_Stream1_IRQn 1 */
}
 8001f22:	bf00      	nop
 8001f24:	bd80      	pop	{r7, pc}
 8001f26:	bf00      	nop
 8001f28:	200013a4 	.word	0x200013a4

08001f2c <DMA2_Stream2_IRQHandler>:

/**
  * @brief This function handles DMA2 stream2 global interrupt.
  */
void DMA2_Stream2_IRQHandler(void)
{
 8001f2c:	b580      	push	{r7, lr}
 8001f2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream2_IRQn 0 */

  /* USER CODE END DMA2_Stream2_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_rx);
 8001f30:	4802      	ldr	r0, [pc, #8]	; (8001f3c <DMA2_Stream2_IRQHandler+0x10>)
 8001f32:	f002 f881 	bl	8004038 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream2_IRQn 1 */

  /* USER CODE END DMA2_Stream2_IRQn 1 */
}
 8001f36:	bf00      	nop
 8001f38:	bd80      	pop	{r7, pc}
 8001f3a:	bf00      	nop
 8001f3c:	20000a94 	.word	0x20000a94

08001f40 <DMA2_Stream3_IRQHandler>:

/**
  * @brief This function handles DMA2 stream3 global interrupt.
  */
void DMA2_Stream3_IRQHandler(void)
{
 8001f40:	b580      	push	{r7, lr}
 8001f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream3_IRQn 0 */

  /* USER CODE END DMA2_Stream3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi1_tx);
 8001f44:	4802      	ldr	r0, [pc, #8]	; (8001f50 <DMA2_Stream3_IRQHandler+0x10>)
 8001f46:	f002 f877 	bl	8004038 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream3_IRQn 1 */

  /* USER CODE END DMA2_Stream3_IRQn 1 */
}
 8001f4a:	bf00      	nop
 8001f4c:	bd80      	pop	{r7, pc}
 8001f4e:	bf00      	nop
 8001f50:	20000af4 	.word	0x20000af4

08001f54 <DMA2_Stream4_IRQHandler>:

/**
  * @brief This function handles DMA2 stream4 global interrupt.
  */
void DMA2_Stream4_IRQHandler(void)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream4_IRQn 0 */

  /* USER CODE END DMA2_Stream4_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi4_tx);
 8001f58:	4802      	ldr	r0, [pc, #8]	; (8001f64 <DMA2_Stream4_IRQHandler+0x10>)
 8001f5a:	f002 f86d 	bl	8004038 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream4_IRQn 1 */

  /* USER CODE END DMA2_Stream4_IRQn 1 */
}
 8001f5e:	bf00      	nop
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	20000c14 	.word	0x20000c14

08001f68 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8001f68:	b580      	push	{r7, lr}
 8001f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001f6c:	4802      	ldr	r0, [pc, #8]	; (8001f78 <ETH_IRQHandler+0x10>)
 8001f6e:	f002 fe75 	bl	8004c5c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8001f72:	bf00      	nop
 8001f74:	bd80      	pop	{r7, pc}
 8001f76:	bf00      	nop
 8001f78:	20005e64 	.word	0x20005e64

08001f7c <ETH_WKUP_IRQHandler>:

/**
  * @brief This function handles Ethernet wake-up interrupt through EXTI line 19.
  */
void ETH_WKUP_IRQHandler(void)
{
 8001f7c:	b580      	push	{r7, lr}
 8001f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_WKUP_IRQn 0 */

  /* USER CODE END ETH_WKUP_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8001f80:	4802      	ldr	r0, [pc, #8]	; (8001f8c <ETH_WKUP_IRQHandler+0x10>)
 8001f82:	f002 fe6b 	bl	8004c5c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_WKUP_IRQn 1 */

  /* USER CODE END ETH_WKUP_IRQn 1 */
}
 8001f86:	bf00      	nop
 8001f88:	bd80      	pop	{r7, pc}
 8001f8a:	bf00      	nop
 8001f8c:	20005e64 	.word	0x20005e64

08001f90 <DMA2_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA2 stream5 global interrupt.
  */
void DMA2_Stream5_IRQHandler(void)
{
 8001f90:	b580      	push	{r7, lr}
 8001f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream5_IRQn 0 */

  /* USER CODE END DMA2_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_rx);
 8001f94:	4802      	ldr	r0, [pc, #8]	; (8001fa0 <DMA2_Stream5_IRQHandler+0x10>)
 8001f96:	f002 f84f 	bl	8004038 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream5_IRQn 1 */

  /* USER CODE END DMA2_Stream5_IRQn 1 */
}
 8001f9a:	bf00      	nop
 8001f9c:	bd80      	pop	{r7, pc}
 8001f9e:	bf00      	nop
 8001fa0:	200012e4 	.word	0x200012e4

08001fa4 <DMA2_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA2 stream6 global interrupt.
  */
void DMA2_Stream6_IRQHandler(void)
{
 8001fa4:	b580      	push	{r7, lr}
 8001fa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream6_IRQn 0 */

  /* USER CODE END DMA2_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart6_tx);
 8001fa8:	4802      	ldr	r0, [pc, #8]	; (8001fb4 <DMA2_Stream6_IRQHandler+0x10>)
 8001faa:	f002 f845 	bl	8004038 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream6_IRQn 1 */

  /* USER CODE END DMA2_Stream6_IRQn 1 */
}
 8001fae:	bf00      	nop
 8001fb0:	bd80      	pop	{r7, pc}
 8001fb2:	bf00      	nop
 8001fb4:	20001404 	.word	0x20001404

08001fb8 <DMA2_Stream7_IRQHandler>:

/**
  * @brief This function handles DMA2 stream7 global interrupt.
  */
void DMA2_Stream7_IRQHandler(void)
{
 8001fb8:	b580      	push	{r7, lr}
 8001fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA2_Stream7_IRQn 0 */

  /* USER CODE END DMA2_Stream7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart1_tx);
 8001fbc:	4802      	ldr	r0, [pc, #8]	; (8001fc8 <DMA2_Stream7_IRQHandler+0x10>)
 8001fbe:	f002 f83b 	bl	8004038 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA2_Stream7_IRQn 1 */

  /* USER CODE END DMA2_Stream7_IRQn 1 */
}
 8001fc2:	bf00      	nop
 8001fc4:	bd80      	pop	{r7, pc}
 8001fc6:	bf00      	nop
 8001fc8:	20001344 	.word	0x20001344

08001fcc <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8001fcc:	b580      	push	{r7, lr}
 8001fce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8001fd0:	4802      	ldr	r0, [pc, #8]	; (8001fdc <USART6_IRQHandler+0x10>)
 8001fd2:	f00a f8f7 	bl	800c1c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8001fd6:	bf00      	nop
 8001fd8:	bd80      	pop	{r7, pc}
 8001fda:	bf00      	nop
 8001fdc:	2000107c 	.word	0x2000107c

08001fe0 <I2C3_EV_IRQHandler>:

/**
  * @brief This function handles I2C3 event interrupt.
  */
void I2C3_EV_IRQHandler(void)
{
 8001fe0:	b580      	push	{r7, lr}
 8001fe2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_EV_IRQn 0 */

  /* USER CODE END I2C3_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c3);
 8001fe4:	4802      	ldr	r0, [pc, #8]	; (8001ff0 <I2C3_EV_IRQHandler+0x10>)
 8001fe6:	f004 fcfb 	bl	80069e0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C3_EV_IRQn 1 */

  /* USER CODE END I2C3_EV_IRQn 1 */
}
 8001fea:	bf00      	nop
 8001fec:	bd80      	pop	{r7, pc}
 8001fee:	bf00      	nop
 8001ff0:	20000738 	.word	0x20000738

08001ff4 <I2C3_ER_IRQHandler>:

/**
  * @brief This function handles I2C3 error interrupt.
  */
void I2C3_ER_IRQHandler(void)
{
 8001ff4:	b580      	push	{r7, lr}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C3_ER_IRQn 0 */

  /* USER CODE END I2C3_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c3);
 8001ff8:	4802      	ldr	r0, [pc, #8]	; (8002004 <I2C3_ER_IRQHandler+0x10>)
 8001ffa:	f004 fd0b 	bl	8006a14 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C3_ER_IRQn 1 */

  /* USER CODE END I2C3_ER_IRQn 1 */
}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000738 	.word	0x20000738

08002008 <UART7_IRQHandler>:

/**
  * @brief This function handles UART7 global interrupt.
  */
void UART7_IRQHandler(void)
{
 8002008:	b580      	push	{r7, lr}
 800200a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART7_IRQn 0 */

  /* USER CODE END UART7_IRQn 0 */
  HAL_UART_IRQHandler(&huart7);
 800200c:	4802      	ldr	r0, [pc, #8]	; (8002018 <UART7_IRQHandler+0x10>)
 800200e:	f00a f8d9 	bl	800c1c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART7_IRQn 1 */

  /* USER CODE END UART7_IRQn 1 */
}
 8002012:	bf00      	nop
 8002014:	bd80      	pop	{r7, pc}
 8002016:	bf00      	nop
 8002018:	20000dd4 	.word	0x20000dd4

0800201c <UART8_IRQHandler>:

/**
  * @brief This function handles UART8 global interrupt.
  */
void UART8_IRQHandler(void)
{
 800201c:	b580      	push	{r7, lr}
 800201e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART8_IRQn 0 */

  /* USER CODE END UART8_IRQn 0 */
  HAL_UART_IRQHandler(&huart8);
 8002020:	4802      	ldr	r0, [pc, #8]	; (800202c <UART8_IRQHandler+0x10>)
 8002022:	f00a f8cf 	bl	800c1c4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART8_IRQn 1 */

  /* USER CODE END UART8_IRQn 1 */
}
 8002026:	bf00      	nop
 8002028:	bd80      	pop	{r7, pc}
 800202a:	bf00      	nop
 800202c:	20000e5c 	.word	0x20000e5c

08002030 <SPI4_IRQHandler>:

/**
  * @brief This function handles SPI4 global interrupt.
  */
void SPI4_IRQHandler(void)
{
 8002030:	b580      	push	{r7, lr}
 8002032:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SPI4_IRQn 0 */

  /* USER CODE END SPI4_IRQn 0 */
  HAL_SPI_IRQHandler(&hspi4);
 8002034:	4802      	ldr	r0, [pc, #8]	; (8002040 <SPI4_IRQHandler+0x10>)
 8002036:	f008 fa77 	bl	800a528 <HAL_SPI_IRQHandler>
  /* USER CODE BEGIN SPI4_IRQn 1 */

  /* USER CODE END SPI4_IRQn 1 */
}
 800203a:	bf00      	nop
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	200009cc 	.word	0x200009cc

08002044 <I2C4_EV_IRQHandler>:

/**
  * @brief This function handles I2C4 event interrupt.
  */
void I2C4_EV_IRQHandler(void)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_EV_IRQn 0 */

  /* USER CODE END I2C4_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c4);
 8002048:	4802      	ldr	r0, [pc, #8]	; (8002054 <I2C4_EV_IRQHandler+0x10>)
 800204a:	f004 fcc9 	bl	80069e0 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C4_EV_IRQn 1 */

  /* USER CODE END I2C4_EV_IRQn 1 */
}
 800204e:	bf00      	nop
 8002050:	bd80      	pop	{r7, pc}
 8002052:	bf00      	nop
 8002054:	2000078c 	.word	0x2000078c

08002058 <I2C4_ER_IRQHandler>:

/**
  * @brief This function handles I2C4 error interrupt.
  */
void I2C4_ER_IRQHandler(void)
{
 8002058:	b580      	push	{r7, lr}
 800205a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C4_ER_IRQn 0 */

  /* USER CODE END I2C4_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c4);
 800205c:	4802      	ldr	r0, [pc, #8]	; (8002068 <I2C4_ER_IRQHandler+0x10>)
 800205e:	f004 fcd9 	bl	8006a14 <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C4_ER_IRQn 1 */

  /* USER CODE END I2C4_ER_IRQn 1 */
}
 8002062:	bf00      	nop
 8002064:	bd80      	pop	{r7, pc}
 8002066:	bf00      	nop
 8002068:	2000078c 	.word	0x2000078c

0800206c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800206c:	b480      	push	{r7}
 800206e:	af00      	add	r7, sp, #0
  return 1;
 8002070:	2301      	movs	r3, #1
}
 8002072:	4618      	mov	r0, r3
 8002074:	46bd      	mov	sp, r7
 8002076:	f85d 7b04 	ldr.w	r7, [sp], #4
 800207a:	4770      	bx	lr

0800207c <_kill>:

int _kill(int pid, int sig)
{
 800207c:	b480      	push	{r7}
 800207e:	b083      	sub	sp, #12
 8002080:	af00      	add	r7, sp, #0
 8002082:	6078      	str	r0, [r7, #4]
 8002084:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002086:	4b05      	ldr	r3, [pc, #20]	; (800209c <_kill+0x20>)
 8002088:	2216      	movs	r2, #22
 800208a:	601a      	str	r2, [r3, #0]
  return -1;
 800208c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002090:	4618      	mov	r0, r3
 8002092:	370c      	adds	r7, #12
 8002094:	46bd      	mov	sp, r7
 8002096:	f85d 7b04 	ldr.w	r7, [sp], #4
 800209a:	4770      	bx	lr
 800209c:	2002430c 	.word	0x2002430c

080020a0 <_exit>:

void _exit (int status)
{
 80020a0:	b580      	push	{r7, lr}
 80020a2:	b082      	sub	sp, #8
 80020a4:	af00      	add	r7, sp, #0
 80020a6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80020a8:	f04f 31ff 	mov.w	r1, #4294967295
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7ff ffe5 	bl	800207c <_kill>
  while (1) {}    /* Make sure we hang here */
 80020b2:	e7fe      	b.n	80020b2 <_exit+0x12>

080020b4 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80020b4:	b580      	push	{r7, lr}
 80020b6:	b086      	sub	sp, #24
 80020b8:	af00      	add	r7, sp, #0
 80020ba:	60f8      	str	r0, [r7, #12]
 80020bc:	60b9      	str	r1, [r7, #8]
 80020be:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020c0:	2300      	movs	r3, #0
 80020c2:	617b      	str	r3, [r7, #20]
 80020c4:	e00a      	b.n	80020dc <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80020c6:	f3af 8000 	nop.w
 80020ca:	4601      	mov	r1, r0
 80020cc:	68bb      	ldr	r3, [r7, #8]
 80020ce:	1c5a      	adds	r2, r3, #1
 80020d0:	60ba      	str	r2, [r7, #8]
 80020d2:	b2ca      	uxtb	r2, r1
 80020d4:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d6:	697b      	ldr	r3, [r7, #20]
 80020d8:	3301      	adds	r3, #1
 80020da:	617b      	str	r3, [r7, #20]
 80020dc:	697a      	ldr	r2, [r7, #20]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	429a      	cmp	r2, r3
 80020e2:	dbf0      	blt.n	80020c6 <_read+0x12>
  }

  return len;
 80020e4:	687b      	ldr	r3, [r7, #4]
}
 80020e6:	4618      	mov	r0, r3
 80020e8:	3718      	adds	r7, #24
 80020ea:	46bd      	mov	sp, r7
 80020ec:	bd80      	pop	{r7, pc}

080020ee <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020ee:	b580      	push	{r7, lr}
 80020f0:	b086      	sub	sp, #24
 80020f2:	af00      	add	r7, sp, #0
 80020f4:	60f8      	str	r0, [r7, #12]
 80020f6:	60b9      	str	r1, [r7, #8]
 80020f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020fa:	2300      	movs	r3, #0
 80020fc:	617b      	str	r3, [r7, #20]
 80020fe:	e009      	b.n	8002114 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8002100:	68bb      	ldr	r3, [r7, #8]
 8002102:	1c5a      	adds	r2, r3, #1
 8002104:	60ba      	str	r2, [r7, #8]
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800210e:	697b      	ldr	r3, [r7, #20]
 8002110:	3301      	adds	r3, #1
 8002112:	617b      	str	r3, [r7, #20]
 8002114:	697a      	ldr	r2, [r7, #20]
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	429a      	cmp	r2, r3
 800211a:	dbf1      	blt.n	8002100 <_write+0x12>
  }
  return len;
 800211c:	687b      	ldr	r3, [r7, #4]
}
 800211e:	4618      	mov	r0, r3
 8002120:	3718      	adds	r7, #24
 8002122:	46bd      	mov	sp, r7
 8002124:	bd80      	pop	{r7, pc}

08002126 <_close>:

int _close(int file)
{
 8002126:	b480      	push	{r7}
 8002128:	b083      	sub	sp, #12
 800212a:	af00      	add	r7, sp, #0
 800212c:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800212e:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002132:	4618      	mov	r0, r3
 8002134:	370c      	adds	r7, #12
 8002136:	46bd      	mov	sp, r7
 8002138:	f85d 7b04 	ldr.w	r7, [sp], #4
 800213c:	4770      	bx	lr

0800213e <_fstat>:


int _fstat(int file, struct stat *st)
{
 800213e:	b480      	push	{r7}
 8002140:	b083      	sub	sp, #12
 8002142:	af00      	add	r7, sp, #0
 8002144:	6078      	str	r0, [r7, #4]
 8002146:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002148:	683b      	ldr	r3, [r7, #0]
 800214a:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800214e:	605a      	str	r2, [r3, #4]
  return 0;
 8002150:	2300      	movs	r3, #0
}
 8002152:	4618      	mov	r0, r3
 8002154:	370c      	adds	r7, #12
 8002156:	46bd      	mov	sp, r7
 8002158:	f85d 7b04 	ldr.w	r7, [sp], #4
 800215c:	4770      	bx	lr

0800215e <_isatty>:

int _isatty(int file)
{
 800215e:	b480      	push	{r7}
 8002160:	b083      	sub	sp, #12
 8002162:	af00      	add	r7, sp, #0
 8002164:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002166:	2301      	movs	r3, #1
}
 8002168:	4618      	mov	r0, r3
 800216a:	370c      	adds	r7, #12
 800216c:	46bd      	mov	sp, r7
 800216e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002172:	4770      	bx	lr

08002174 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002174:	b480      	push	{r7}
 8002176:	b085      	sub	sp, #20
 8002178:	af00      	add	r7, sp, #0
 800217a:	60f8      	str	r0, [r7, #12]
 800217c:	60b9      	str	r1, [r7, #8]
 800217e:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002180:	2300      	movs	r3, #0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3714      	adds	r7, #20
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr
	...

08002190 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002190:	b480      	push	{r7}
 8002192:	b087      	sub	sp, #28
 8002194:	af00      	add	r7, sp, #0
 8002196:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002198:	4a14      	ldr	r2, [pc, #80]	; (80021ec <_sbrk+0x5c>)
 800219a:	4b15      	ldr	r3, [pc, #84]	; (80021f0 <_sbrk+0x60>)
 800219c:	1ad3      	subs	r3, r2, r3
 800219e:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80021a0:	697b      	ldr	r3, [r7, #20]
 80021a2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80021a4:	4b13      	ldr	r3, [pc, #76]	; (80021f4 <_sbrk+0x64>)
 80021a6:	681b      	ldr	r3, [r3, #0]
 80021a8:	2b00      	cmp	r3, #0
 80021aa:	d102      	bne.n	80021b2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80021ac:	4b11      	ldr	r3, [pc, #68]	; (80021f4 <_sbrk+0x64>)
 80021ae:	4a12      	ldr	r2, [pc, #72]	; (80021f8 <_sbrk+0x68>)
 80021b0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80021b2:	4b10      	ldr	r3, [pc, #64]	; (80021f4 <_sbrk+0x64>)
 80021b4:	681a      	ldr	r2, [r3, #0]
 80021b6:	687b      	ldr	r3, [r7, #4]
 80021b8:	4413      	add	r3, r2
 80021ba:	693a      	ldr	r2, [r7, #16]
 80021bc:	429a      	cmp	r2, r3
 80021be:	d205      	bcs.n	80021cc <_sbrk+0x3c>
  {
    errno = ENOMEM;
 80021c0:	4b0e      	ldr	r3, [pc, #56]	; (80021fc <_sbrk+0x6c>)
 80021c2:	220c      	movs	r2, #12
 80021c4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80021c6:	f04f 33ff 	mov.w	r3, #4294967295
 80021ca:	e009      	b.n	80021e0 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 80021cc:	4b09      	ldr	r3, [pc, #36]	; (80021f4 <_sbrk+0x64>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80021d2:	4b08      	ldr	r3, [pc, #32]	; (80021f4 <_sbrk+0x64>)
 80021d4:	681a      	ldr	r2, [r3, #0]
 80021d6:	687b      	ldr	r3, [r7, #4]
 80021d8:	4413      	add	r3, r2
 80021da:	4a06      	ldr	r2, [pc, #24]	; (80021f4 <_sbrk+0x64>)
 80021dc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80021de:	68fb      	ldr	r3, [r7, #12]
}
 80021e0:	4618      	mov	r0, r3
 80021e2:	371c      	adds	r7, #28
 80021e4:	46bd      	mov	sp, r7
 80021e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021ea:	4770      	bx	lr
 80021ec:	20050000 	.word	0x20050000
 80021f0:	00000400 	.word	0x00000400
 80021f4:	20000cc0 	.word	0x20000cc0
 80021f8:	20024320 	.word	0x20024320
 80021fc:	2002430c 	.word	0x2002430c

08002200 <SystemInit>:
  *         SystemFrequency variable.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002200:	b480      	push	{r7}
 8002202:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
#if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
  SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002204:	4b06      	ldr	r3, [pc, #24]	; (8002220 <SystemInit+0x20>)
 8002206:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800220a:	4a05      	ldr	r2, [pc, #20]	; (8002220 <SystemInit+0x20>)
 800220c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002210:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002214:	bf00      	nop
 8002216:	46bd      	mov	sp, r7
 8002218:	f85d 7b04 	ldr.w	r7, [sp], #4
 800221c:	4770      	bx	lr
 800221e:	bf00      	nop
 8002220:	e000ed00 	.word	0xe000ed00

08002224 <MX_UART4_Init>:
DMA_HandleTypeDef hdma_usart6_rx;
DMA_HandleTypeDef hdma_usart6_tx;

/* UART4 init function */
void MX_UART4_Init(void)
{
 8002224:	b580      	push	{r7, lr}
 8002226:	af00      	add	r7, sp, #0
  /* USER CODE END UART4_Init 0 */

  /* USER CODE BEGIN UART4_Init 1 */

  /* USER CODE END UART4_Init 1 */
  huart4.Instance = UART4;
 8002228:	4b14      	ldr	r3, [pc, #80]	; (800227c <MX_UART4_Init+0x58>)
 800222a:	4a15      	ldr	r2, [pc, #84]	; (8002280 <MX_UART4_Init+0x5c>)
 800222c:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800222e:	4b13      	ldr	r3, [pc, #76]	; (800227c <MX_UART4_Init+0x58>)
 8002230:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002234:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 8002236:	4b11      	ldr	r3, [pc, #68]	; (800227c <MX_UART4_Init+0x58>)
 8002238:	2200      	movs	r2, #0
 800223a:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800223c:	4b0f      	ldr	r3, [pc, #60]	; (800227c <MX_UART4_Init+0x58>)
 800223e:	2200      	movs	r2, #0
 8002240:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 8002242:	4b0e      	ldr	r3, [pc, #56]	; (800227c <MX_UART4_Init+0x58>)
 8002244:	2200      	movs	r2, #0
 8002246:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 8002248:	4b0c      	ldr	r3, [pc, #48]	; (800227c <MX_UART4_Init+0x58>)
 800224a:	220c      	movs	r2, #12
 800224c:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800224e:	4b0b      	ldr	r3, [pc, #44]	; (800227c <MX_UART4_Init+0x58>)
 8002250:	2200      	movs	r2, #0
 8002252:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 8002254:	4b09      	ldr	r3, [pc, #36]	; (800227c <MX_UART4_Init+0x58>)
 8002256:	2200      	movs	r2, #0
 8002258:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800225a:	4b08      	ldr	r3, [pc, #32]	; (800227c <MX_UART4_Init+0x58>)
 800225c:	2200      	movs	r2, #0
 800225e:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002260:	4b06      	ldr	r3, [pc, #24]	; (800227c <MX_UART4_Init+0x58>)
 8002262:	2200      	movs	r2, #0
 8002264:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 8002266:	4805      	ldr	r0, [pc, #20]	; (800227c <MX_UART4_Init+0x58>)
 8002268:	f009 fcd6 	bl	800bc18 <HAL_UART_Init>
 800226c:	4603      	mov	r3, r0
 800226e:	2b00      	cmp	r3, #0
 8002270:	d001      	beq.n	8002276 <MX_UART4_Init+0x52>
  {
    Error_Handler();
 8002272:	f7ff f8df 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN UART4_Init 2 */

  /* USER CODE END UART4_Init 2 */

}
 8002276:	bf00      	nop
 8002278:	bd80      	pop	{r7, pc}
 800227a:	bf00      	nop
 800227c:	20000cc4 	.word	0x20000cc4
 8002280:	40004c00 	.word	0x40004c00

08002284 <MX_UART5_Init>:
/* UART5 init function */
void MX_UART5_Init(void)
{
 8002284:	b580      	push	{r7, lr}
 8002286:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8002288:	4b14      	ldr	r3, [pc, #80]	; (80022dc <MX_UART5_Init+0x58>)
 800228a:	4a15      	ldr	r2, [pc, #84]	; (80022e0 <MX_UART5_Init+0x5c>)
 800228c:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 115200;
 800228e:	4b13      	ldr	r3, [pc, #76]	; (80022dc <MX_UART5_Init+0x58>)
 8002290:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002294:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8002296:	4b11      	ldr	r3, [pc, #68]	; (80022dc <MX_UART5_Init+0x58>)
 8002298:	2200      	movs	r2, #0
 800229a:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 800229c:	4b0f      	ldr	r3, [pc, #60]	; (80022dc <MX_UART5_Init+0x58>)
 800229e:	2200      	movs	r2, #0
 80022a0:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80022a2:	4b0e      	ldr	r3, [pc, #56]	; (80022dc <MX_UART5_Init+0x58>)
 80022a4:	2200      	movs	r2, #0
 80022a6:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80022a8:	4b0c      	ldr	r3, [pc, #48]	; (80022dc <MX_UART5_Init+0x58>)
 80022aa:	220c      	movs	r2, #12
 80022ac:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80022ae:	4b0b      	ldr	r3, [pc, #44]	; (80022dc <MX_UART5_Init+0x58>)
 80022b0:	2200      	movs	r2, #0
 80022b2:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80022b4:	4b09      	ldr	r3, [pc, #36]	; (80022dc <MX_UART5_Init+0x58>)
 80022b6:	2200      	movs	r2, #0
 80022b8:	61da      	str	r2, [r3, #28]
  huart5.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80022ba:	4b08      	ldr	r3, [pc, #32]	; (80022dc <MX_UART5_Init+0x58>)
 80022bc:	2200      	movs	r2, #0
 80022be:	621a      	str	r2, [r3, #32]
  huart5.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80022c0:	4b06      	ldr	r3, [pc, #24]	; (80022dc <MX_UART5_Init+0x58>)
 80022c2:	2200      	movs	r2, #0
 80022c4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80022c6:	4805      	ldr	r0, [pc, #20]	; (80022dc <MX_UART5_Init+0x58>)
 80022c8:	f009 fca6 	bl	800bc18 <HAL_UART_Init>
 80022cc:	4603      	mov	r3, r0
 80022ce:	2b00      	cmp	r3, #0
 80022d0:	d001      	beq.n	80022d6 <MX_UART5_Init+0x52>
  {
    Error_Handler();
 80022d2:	f7ff f8af 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80022d6:	bf00      	nop
 80022d8:	bd80      	pop	{r7, pc}
 80022da:	bf00      	nop
 80022dc:	20000d4c 	.word	0x20000d4c
 80022e0:	40005000 	.word	0x40005000

080022e4 <MX_UART7_Init>:
/* UART7 init function */
void MX_UART7_Init(void)
{
 80022e4:	b580      	push	{r7, lr}
 80022e6:	af00      	add	r7, sp, #0
  /* USER CODE END UART7_Init 0 */

  /* USER CODE BEGIN UART7_Init 1 */

  /* USER CODE END UART7_Init 1 */
  huart7.Instance = UART7;
 80022e8:	4b14      	ldr	r3, [pc, #80]	; (800233c <MX_UART7_Init+0x58>)
 80022ea:	4a15      	ldr	r2, [pc, #84]	; (8002340 <MX_UART7_Init+0x5c>)
 80022ec:	601a      	str	r2, [r3, #0]
  huart7.Init.BaudRate = 115200;
 80022ee:	4b13      	ldr	r3, [pc, #76]	; (800233c <MX_UART7_Init+0x58>)
 80022f0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80022f4:	605a      	str	r2, [r3, #4]
  huart7.Init.WordLength = UART_WORDLENGTH_8B;
 80022f6:	4b11      	ldr	r3, [pc, #68]	; (800233c <MX_UART7_Init+0x58>)
 80022f8:	2200      	movs	r2, #0
 80022fa:	609a      	str	r2, [r3, #8]
  huart7.Init.StopBits = UART_STOPBITS_1;
 80022fc:	4b0f      	ldr	r3, [pc, #60]	; (800233c <MX_UART7_Init+0x58>)
 80022fe:	2200      	movs	r2, #0
 8002300:	60da      	str	r2, [r3, #12]
  huart7.Init.Parity = UART_PARITY_NONE;
 8002302:	4b0e      	ldr	r3, [pc, #56]	; (800233c <MX_UART7_Init+0x58>)
 8002304:	2200      	movs	r2, #0
 8002306:	611a      	str	r2, [r3, #16]
  huart7.Init.Mode = UART_MODE_TX_RX;
 8002308:	4b0c      	ldr	r3, [pc, #48]	; (800233c <MX_UART7_Init+0x58>)
 800230a:	220c      	movs	r2, #12
 800230c:	615a      	str	r2, [r3, #20]
  huart7.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800230e:	4b0b      	ldr	r3, [pc, #44]	; (800233c <MX_UART7_Init+0x58>)
 8002310:	2200      	movs	r2, #0
 8002312:	619a      	str	r2, [r3, #24]
  huart7.Init.OverSampling = UART_OVERSAMPLING_16;
 8002314:	4b09      	ldr	r3, [pc, #36]	; (800233c <MX_UART7_Init+0x58>)
 8002316:	2200      	movs	r2, #0
 8002318:	61da      	str	r2, [r3, #28]
  huart7.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800231a:	4b08      	ldr	r3, [pc, #32]	; (800233c <MX_UART7_Init+0x58>)
 800231c:	2200      	movs	r2, #0
 800231e:	621a      	str	r2, [r3, #32]
  huart7.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002320:	4b06      	ldr	r3, [pc, #24]	; (800233c <MX_UART7_Init+0x58>)
 8002322:	2200      	movs	r2, #0
 8002324:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart7) != HAL_OK)
 8002326:	4805      	ldr	r0, [pc, #20]	; (800233c <MX_UART7_Init+0x58>)
 8002328:	f009 fc76 	bl	800bc18 <HAL_UART_Init>
 800232c:	4603      	mov	r3, r0
 800232e:	2b00      	cmp	r3, #0
 8002330:	d001      	beq.n	8002336 <MX_UART7_Init+0x52>
  {
    Error_Handler();
 8002332:	f7ff f87f 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN UART7_Init 2 */

  /* USER CODE END UART7_Init 2 */

}
 8002336:	bf00      	nop
 8002338:	bd80      	pop	{r7, pc}
 800233a:	bf00      	nop
 800233c:	20000dd4 	.word	0x20000dd4
 8002340:	40007800 	.word	0x40007800

08002344 <MX_UART8_Init>:
/* UART8 init function */
void MX_UART8_Init(void)
{
 8002344:	b580      	push	{r7, lr}
 8002346:	af00      	add	r7, sp, #0
  /* USER CODE END UART8_Init 0 */

  /* USER CODE BEGIN UART8_Init 1 */

  /* USER CODE END UART8_Init 1 */
  huart8.Instance = UART8;
 8002348:	4b14      	ldr	r3, [pc, #80]	; (800239c <MX_UART8_Init+0x58>)
 800234a:	4a15      	ldr	r2, [pc, #84]	; (80023a0 <MX_UART8_Init+0x5c>)
 800234c:	601a      	str	r2, [r3, #0]
  huart8.Init.BaudRate = 115200;
 800234e:	4b13      	ldr	r3, [pc, #76]	; (800239c <MX_UART8_Init+0x58>)
 8002350:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002354:	605a      	str	r2, [r3, #4]
  huart8.Init.WordLength = UART_WORDLENGTH_8B;
 8002356:	4b11      	ldr	r3, [pc, #68]	; (800239c <MX_UART8_Init+0x58>)
 8002358:	2200      	movs	r2, #0
 800235a:	609a      	str	r2, [r3, #8]
  huart8.Init.StopBits = UART_STOPBITS_1;
 800235c:	4b0f      	ldr	r3, [pc, #60]	; (800239c <MX_UART8_Init+0x58>)
 800235e:	2200      	movs	r2, #0
 8002360:	60da      	str	r2, [r3, #12]
  huart8.Init.Parity = UART_PARITY_NONE;
 8002362:	4b0e      	ldr	r3, [pc, #56]	; (800239c <MX_UART8_Init+0x58>)
 8002364:	2200      	movs	r2, #0
 8002366:	611a      	str	r2, [r3, #16]
  huart8.Init.Mode = UART_MODE_TX_RX;
 8002368:	4b0c      	ldr	r3, [pc, #48]	; (800239c <MX_UART8_Init+0x58>)
 800236a:	220c      	movs	r2, #12
 800236c:	615a      	str	r2, [r3, #20]
  huart8.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800236e:	4b0b      	ldr	r3, [pc, #44]	; (800239c <MX_UART8_Init+0x58>)
 8002370:	2200      	movs	r2, #0
 8002372:	619a      	str	r2, [r3, #24]
  huart8.Init.OverSampling = UART_OVERSAMPLING_16;
 8002374:	4b09      	ldr	r3, [pc, #36]	; (800239c <MX_UART8_Init+0x58>)
 8002376:	2200      	movs	r2, #0
 8002378:	61da      	str	r2, [r3, #28]
  huart8.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800237a:	4b08      	ldr	r3, [pc, #32]	; (800239c <MX_UART8_Init+0x58>)
 800237c:	2200      	movs	r2, #0
 800237e:	621a      	str	r2, [r3, #32]
  huart8.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002380:	4b06      	ldr	r3, [pc, #24]	; (800239c <MX_UART8_Init+0x58>)
 8002382:	2200      	movs	r2, #0
 8002384:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart8) != HAL_OK)
 8002386:	4805      	ldr	r0, [pc, #20]	; (800239c <MX_UART8_Init+0x58>)
 8002388:	f009 fc46 	bl	800bc18 <HAL_UART_Init>
 800238c:	4603      	mov	r3, r0
 800238e:	2b00      	cmp	r3, #0
 8002390:	d001      	beq.n	8002396 <MX_UART8_Init+0x52>
  {
    Error_Handler();
 8002392:	f7ff f84f 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN UART8_Init 2 */

  /* USER CODE END UART8_Init 2 */

}
 8002396:	bf00      	nop
 8002398:	bd80      	pop	{r7, pc}
 800239a:	bf00      	nop
 800239c:	20000e5c 	.word	0x20000e5c
 80023a0:	40007c00 	.word	0x40007c00

080023a4 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 80023a4:	b580      	push	{r7, lr}
 80023a6:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 80023a8:	4b14      	ldr	r3, [pc, #80]	; (80023fc <MX_USART1_UART_Init+0x58>)
 80023aa:	4a15      	ldr	r2, [pc, #84]	; (8002400 <MX_USART1_UART_Init+0x5c>)
 80023ac:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 80023ae:	4b13      	ldr	r3, [pc, #76]	; (80023fc <MX_USART1_UART_Init+0x58>)
 80023b0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80023b4:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 80023b6:	4b11      	ldr	r3, [pc, #68]	; (80023fc <MX_USART1_UART_Init+0x58>)
 80023b8:	2200      	movs	r2, #0
 80023ba:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 80023bc:	4b0f      	ldr	r3, [pc, #60]	; (80023fc <MX_USART1_UART_Init+0x58>)
 80023be:	2200      	movs	r2, #0
 80023c0:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 80023c2:	4b0e      	ldr	r3, [pc, #56]	; (80023fc <MX_USART1_UART_Init+0x58>)
 80023c4:	2200      	movs	r2, #0
 80023c6:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 80023c8:	4b0c      	ldr	r3, [pc, #48]	; (80023fc <MX_USART1_UART_Init+0x58>)
 80023ca:	220c      	movs	r2, #12
 80023cc:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80023ce:	4b0b      	ldr	r3, [pc, #44]	; (80023fc <MX_USART1_UART_Init+0x58>)
 80023d0:	2200      	movs	r2, #0
 80023d2:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 80023d4:	4b09      	ldr	r3, [pc, #36]	; (80023fc <MX_USART1_UART_Init+0x58>)
 80023d6:	2200      	movs	r2, #0
 80023d8:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80023da:	4b08      	ldr	r3, [pc, #32]	; (80023fc <MX_USART1_UART_Init+0x58>)
 80023dc:	2200      	movs	r2, #0
 80023de:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80023e0:	4b06      	ldr	r3, [pc, #24]	; (80023fc <MX_USART1_UART_Init+0x58>)
 80023e2:	2200      	movs	r2, #0
 80023e4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart1) != HAL_OK)
 80023e6:	4805      	ldr	r0, [pc, #20]	; (80023fc <MX_USART1_UART_Init+0x58>)
 80023e8:	f009 fc16 	bl	800bc18 <HAL_UART_Init>
 80023ec:	4603      	mov	r3, r0
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d001      	beq.n	80023f6 <MX_USART1_UART_Init+0x52>
  {
    Error_Handler();
 80023f2:	f7ff f81f 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 80023f6:	bf00      	nop
 80023f8:	bd80      	pop	{r7, pc}
 80023fa:	bf00      	nop
 80023fc:	20000ee4 	.word	0x20000ee4
 8002400:	40011000 	.word	0x40011000

08002404 <MX_USART2_UART_Init>:
/* USART2 init function */

void MX_USART2_UART_Init(void)
{
 8002404:	b580      	push	{r7, lr}
 8002406:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8002408:	4b14      	ldr	r3, [pc, #80]	; (800245c <MX_USART2_UART_Init+0x58>)
 800240a:	4a15      	ldr	r2, [pc, #84]	; (8002460 <MX_USART2_UART_Init+0x5c>)
 800240c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 800240e:	4b13      	ldr	r3, [pc, #76]	; (800245c <MX_USART2_UART_Init+0x58>)
 8002410:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002414:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8002416:	4b11      	ldr	r3, [pc, #68]	; (800245c <MX_USART2_UART_Init+0x58>)
 8002418:	2200      	movs	r2, #0
 800241a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800241c:	4b0f      	ldr	r3, [pc, #60]	; (800245c <MX_USART2_UART_Init+0x58>)
 800241e:	2200      	movs	r2, #0
 8002420:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8002422:	4b0e      	ldr	r3, [pc, #56]	; (800245c <MX_USART2_UART_Init+0x58>)
 8002424:	2200      	movs	r2, #0
 8002426:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8002428:	4b0c      	ldr	r3, [pc, #48]	; (800245c <MX_USART2_UART_Init+0x58>)
 800242a:	220c      	movs	r2, #12
 800242c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800242e:	4b0b      	ldr	r3, [pc, #44]	; (800245c <MX_USART2_UART_Init+0x58>)
 8002430:	2200      	movs	r2, #0
 8002432:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8002434:	4b09      	ldr	r3, [pc, #36]	; (800245c <MX_USART2_UART_Init+0x58>)
 8002436:	2200      	movs	r2, #0
 8002438:	61da      	str	r2, [r3, #28]
  huart2.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800243a:	4b08      	ldr	r3, [pc, #32]	; (800245c <MX_USART2_UART_Init+0x58>)
 800243c:	2200      	movs	r2, #0
 800243e:	621a      	str	r2, [r3, #32]
  huart2.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002440:	4b06      	ldr	r3, [pc, #24]	; (800245c <MX_USART2_UART_Init+0x58>)
 8002442:	2200      	movs	r2, #0
 8002444:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8002446:	4805      	ldr	r0, [pc, #20]	; (800245c <MX_USART2_UART_Init+0x58>)
 8002448:	f009 fbe6 	bl	800bc18 <HAL_UART_Init>
 800244c:	4603      	mov	r3, r0
 800244e:	2b00      	cmp	r3, #0
 8002450:	d001      	beq.n	8002456 <MX_USART2_UART_Init+0x52>
  {
    Error_Handler();
 8002452:	f7fe ffef 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8002456:	bf00      	nop
 8002458:	bd80      	pop	{r7, pc}
 800245a:	bf00      	nop
 800245c:	20000f6c 	.word	0x20000f6c
 8002460:	40004400 	.word	0x40004400

08002464 <MX_USART3_UART_Init>:
/* USART3 init function */

void MX_USART3_UART_Init(void)
{
 8002464:	b580      	push	{r7, lr}
 8002466:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8002468:	4b14      	ldr	r3, [pc, #80]	; (80024bc <MX_USART3_UART_Init+0x58>)
 800246a:	4a15      	ldr	r2, [pc, #84]	; (80024c0 <MX_USART3_UART_Init+0x5c>)
 800246c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 115200;
 800246e:	4b13      	ldr	r3, [pc, #76]	; (80024bc <MX_USART3_UART_Init+0x58>)
 8002470:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8002474:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8002476:	4b11      	ldr	r3, [pc, #68]	; (80024bc <MX_USART3_UART_Init+0x58>)
 8002478:	2200      	movs	r2, #0
 800247a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800247c:	4b0f      	ldr	r3, [pc, #60]	; (80024bc <MX_USART3_UART_Init+0x58>)
 800247e:	2200      	movs	r2, #0
 8002480:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8002482:	4b0e      	ldr	r3, [pc, #56]	; (80024bc <MX_USART3_UART_Init+0x58>)
 8002484:	2200      	movs	r2, #0
 8002486:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8002488:	4b0c      	ldr	r3, [pc, #48]	; (80024bc <MX_USART3_UART_Init+0x58>)
 800248a:	220c      	movs	r2, #12
 800248c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800248e:	4b0b      	ldr	r3, [pc, #44]	; (80024bc <MX_USART3_UART_Init+0x58>)
 8002490:	2200      	movs	r2, #0
 8002492:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8002494:	4b09      	ldr	r3, [pc, #36]	; (80024bc <MX_USART3_UART_Init+0x58>)
 8002496:	2200      	movs	r2, #0
 8002498:	61da      	str	r2, [r3, #28]
  huart3.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800249a:	4b08      	ldr	r3, [pc, #32]	; (80024bc <MX_USART3_UART_Init+0x58>)
 800249c:	2200      	movs	r2, #0
 800249e:	621a      	str	r2, [r3, #32]
  huart3.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 80024a0:	4b06      	ldr	r3, [pc, #24]	; (80024bc <MX_USART3_UART_Init+0x58>)
 80024a2:	2200      	movs	r2, #0
 80024a4:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80024a6:	4805      	ldr	r0, [pc, #20]	; (80024bc <MX_USART3_UART_Init+0x58>)
 80024a8:	f009 fbb6 	bl	800bc18 <HAL_UART_Init>
 80024ac:	4603      	mov	r3, r0
 80024ae:	2b00      	cmp	r3, #0
 80024b0:	d001      	beq.n	80024b6 <MX_USART3_UART_Init+0x52>
  {
    Error_Handler();
 80024b2:	f7fe ffbf 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80024b6:	bf00      	nop
 80024b8:	bd80      	pop	{r7, pc}
 80024ba:	bf00      	nop
 80024bc:	20000ff4 	.word	0x20000ff4
 80024c0:	40004800 	.word	0x40004800

080024c4 <MX_USART6_UART_Init>:
/* USART6 init function */

void MX_USART6_UART_Init(void)
{
 80024c4:	b580      	push	{r7, lr}
 80024c6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80024c8:	4b14      	ldr	r3, [pc, #80]	; (800251c <MX_USART6_UART_Init+0x58>)
 80024ca:	4a15      	ldr	r2, [pc, #84]	; (8002520 <MX_USART6_UART_Init+0x5c>)
 80024cc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80024ce:	4b13      	ldr	r3, [pc, #76]	; (800251c <MX_USART6_UART_Init+0x58>)
 80024d0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80024d4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80024d6:	4b11      	ldr	r3, [pc, #68]	; (800251c <MX_USART6_UART_Init+0x58>)
 80024d8:	2200      	movs	r2, #0
 80024da:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80024dc:	4b0f      	ldr	r3, [pc, #60]	; (800251c <MX_USART6_UART_Init+0x58>)
 80024de:	2200      	movs	r2, #0
 80024e0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80024e2:	4b0e      	ldr	r3, [pc, #56]	; (800251c <MX_USART6_UART_Init+0x58>)
 80024e4:	2200      	movs	r2, #0
 80024e6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80024e8:	4b0c      	ldr	r3, [pc, #48]	; (800251c <MX_USART6_UART_Init+0x58>)
 80024ea:	220c      	movs	r2, #12
 80024ec:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80024ee:	4b0b      	ldr	r3, [pc, #44]	; (800251c <MX_USART6_UART_Init+0x58>)
 80024f0:	2200      	movs	r2, #0
 80024f2:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80024f4:	4b09      	ldr	r3, [pc, #36]	; (800251c <MX_USART6_UART_Init+0x58>)
 80024f6:	2200      	movs	r2, #0
 80024f8:	61da      	str	r2, [r3, #28]
  huart6.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 80024fa:	4b08      	ldr	r3, [pc, #32]	; (800251c <MX_USART6_UART_Init+0x58>)
 80024fc:	2200      	movs	r2, #0
 80024fe:	621a      	str	r2, [r3, #32]
  huart6.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 8002500:	4b06      	ldr	r3, [pc, #24]	; (800251c <MX_USART6_UART_Init+0x58>)
 8002502:	2200      	movs	r2, #0
 8002504:	625a      	str	r2, [r3, #36]	; 0x24
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8002506:	4805      	ldr	r0, [pc, #20]	; (800251c <MX_USART6_UART_Init+0x58>)
 8002508:	f009 fb86 	bl	800bc18 <HAL_UART_Init>
 800250c:	4603      	mov	r3, r0
 800250e:	2b00      	cmp	r3, #0
 8002510:	d001      	beq.n	8002516 <MX_USART6_UART_Init+0x52>
  {
    Error_Handler();
 8002512:	f7fe ff8f 	bl	8001434 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8002516:	bf00      	nop
 8002518:	bd80      	pop	{r7, pc}
 800251a:	bf00      	nop
 800251c:	2000107c 	.word	0x2000107c
 8002520:	40011400 	.word	0x40011400

08002524 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 8002524:	b580      	push	{r7, lr}
 8002526:	b0bc      	sub	sp, #240	; 0xf0
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800252c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002530:	2200      	movs	r2, #0
 8002532:	601a      	str	r2, [r3, #0]
 8002534:	605a      	str	r2, [r3, #4]
 8002536:	609a      	str	r2, [r3, #8]
 8002538:	60da      	str	r2, [r3, #12]
 800253a:	611a      	str	r2, [r3, #16]
  RCC_PeriphCLKInitTypeDef PeriphClkInitStruct = {0};
 800253c:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002540:	2284      	movs	r2, #132	; 0x84
 8002542:	2100      	movs	r1, #0
 8002544:	4618      	mov	r0, r3
 8002546:	f01b f816 	bl	801d576 <memset>
  if(uartHandle->Instance==UART4)
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	4a64      	ldr	r2, [pc, #400]	; (80026e0 <HAL_UART_MspInit+0x1bc>)
 8002550:	4293      	cmp	r3, r2
 8002552:	f040 80d5 	bne.w	8002700 <HAL_UART_MspInit+0x1dc>

  /* USER CODE END UART4_MspInit 0 */

  /** Initializes the peripherals clock
  */
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART4;
 8002556:	f44f 7300 	mov.w	r3, #512	; 0x200
 800255a:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.Uart4ClockSelection = RCC_UART4CLKSOURCE_PCLK1;
 800255c:	2300      	movs	r3, #0
 800255e:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002562:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002566:	4618      	mov	r0, r3
 8002568:	f006 fccc 	bl	8008f04 <HAL_RCCEx_PeriphCLKConfig>
 800256c:	4603      	mov	r3, r0
 800256e:	2b00      	cmp	r3, #0
 8002570:	d001      	beq.n	8002576 <HAL_UART_MspInit+0x52>
    {
      Error_Handler();
 8002572:	f7fe ff5f 	bl	8001434 <Error_Handler>
    }

    /* UART4 clock enable */
    __HAL_RCC_UART4_CLK_ENABLE();
 8002576:	4b5b      	ldr	r3, [pc, #364]	; (80026e4 <HAL_UART_MspInit+0x1c0>)
 8002578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800257a:	4a5a      	ldr	r2, [pc, #360]	; (80026e4 <HAL_UART_MspInit+0x1c0>)
 800257c:	f443 2300 	orr.w	r3, r3, #524288	; 0x80000
 8002580:	6413      	str	r3, [r2, #64]	; 0x40
 8002582:	4b58      	ldr	r3, [pc, #352]	; (80026e4 <HAL_UART_MspInit+0x1c0>)
 8002584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002586:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800258a:	657b      	str	r3, [r7, #84]	; 0x54
 800258c:	6d7b      	ldr	r3, [r7, #84]	; 0x54

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800258e:	4b55      	ldr	r3, [pc, #340]	; (80026e4 <HAL_UART_MspInit+0x1c0>)
 8002590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002592:	4a54      	ldr	r2, [pc, #336]	; (80026e4 <HAL_UART_MspInit+0x1c0>)
 8002594:	f043 0301 	orr.w	r3, r3, #1
 8002598:	6313      	str	r3, [r2, #48]	; 0x30
 800259a:	4b52      	ldr	r3, [pc, #328]	; (80026e4 <HAL_UART_MspInit+0x1c0>)
 800259c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800259e:	f003 0301 	and.w	r3, r3, #1
 80025a2:	653b      	str	r3, [r7, #80]	; 0x50
 80025a4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80025a6:	4b4f      	ldr	r3, [pc, #316]	; (80026e4 <HAL_UART_MspInit+0x1c0>)
 80025a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025aa:	4a4e      	ldr	r2, [pc, #312]	; (80026e4 <HAL_UART_MspInit+0x1c0>)
 80025ac:	f043 0304 	orr.w	r3, r3, #4
 80025b0:	6313      	str	r3, [r2, #48]	; 0x30
 80025b2:	4b4c      	ldr	r3, [pc, #304]	; (80026e4 <HAL_UART_MspInit+0x1c0>)
 80025b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80025b6:	f003 0304 	and.w	r3, r3, #4
 80025ba:	64fb      	str	r3, [r7, #76]	; 0x4c
 80025bc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
    /**UART4 GPIO Configuration
    PA0/WKUP     ------> UART4_TX
    PC11     ------> UART4_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0;
 80025be:	2301      	movs	r3, #1
 80025c0:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025c4:	2302      	movs	r3, #2
 80025c6:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025ca:	2301      	movs	r3, #1
 80025cc:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025d0:	2303      	movs	r3, #3
 80025d2:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80025d6:	2308      	movs	r3, #8
 80025d8:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80025dc:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80025e0:	4619      	mov	r1, r3
 80025e2:	4841      	ldr	r0, [pc, #260]	; (80026e8 <HAL_UART_MspInit+0x1c4>)
 80025e4:	f003 fd78 	bl	80060d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11;
 80025e8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80025ec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80025f0:	2302      	movs	r3, #2
 80025f2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80025f6:	2301      	movs	r3, #1
 80025f8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80025fc:	2303      	movs	r3, #3
 80025fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8002602:	2308      	movs	r3, #8
 8002604:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002608:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 800260c:	4619      	mov	r1, r3
 800260e:	4837      	ldr	r0, [pc, #220]	; (80026ec <HAL_UART_MspInit+0x1c8>)
 8002610:	f003 fd62 	bl	80060d8 <HAL_GPIO_Init>

    /* UART4 DMA Init */
    /* UART4_TX Init */
    hdma_uart4_tx.Instance = DMA1_Stream4;
 8002614:	4b36      	ldr	r3, [pc, #216]	; (80026f0 <HAL_UART_MspInit+0x1cc>)
 8002616:	4a37      	ldr	r2, [pc, #220]	; (80026f4 <HAL_UART_MspInit+0x1d0>)
 8002618:	601a      	str	r2, [r3, #0]
    hdma_uart4_tx.Init.Channel = DMA_CHANNEL_4;
 800261a:	4b35      	ldr	r3, [pc, #212]	; (80026f0 <HAL_UART_MspInit+0x1cc>)
 800261c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002620:	605a      	str	r2, [r3, #4]
    hdma_uart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002622:	4b33      	ldr	r3, [pc, #204]	; (80026f0 <HAL_UART_MspInit+0x1cc>)
 8002624:	2240      	movs	r2, #64	; 0x40
 8002626:	609a      	str	r2, [r3, #8]
    hdma_uart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002628:	4b31      	ldr	r3, [pc, #196]	; (80026f0 <HAL_UART_MspInit+0x1cc>)
 800262a:	2200      	movs	r2, #0
 800262c:	60da      	str	r2, [r3, #12]
    hdma_uart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800262e:	4b30      	ldr	r3, [pc, #192]	; (80026f0 <HAL_UART_MspInit+0x1cc>)
 8002630:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002634:	611a      	str	r2, [r3, #16]
    hdma_uart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002636:	4b2e      	ldr	r3, [pc, #184]	; (80026f0 <HAL_UART_MspInit+0x1cc>)
 8002638:	2200      	movs	r2, #0
 800263a:	615a      	str	r2, [r3, #20]
    hdma_uart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800263c:	4b2c      	ldr	r3, [pc, #176]	; (80026f0 <HAL_UART_MspInit+0x1cc>)
 800263e:	2200      	movs	r2, #0
 8002640:	619a      	str	r2, [r3, #24]
    hdma_uart4_tx.Init.Mode = DMA_NORMAL;
 8002642:	4b2b      	ldr	r3, [pc, #172]	; (80026f0 <HAL_UART_MspInit+0x1cc>)
 8002644:	2200      	movs	r2, #0
 8002646:	61da      	str	r2, [r3, #28]
    hdma_uart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002648:	4b29      	ldr	r3, [pc, #164]	; (80026f0 <HAL_UART_MspInit+0x1cc>)
 800264a:	2200      	movs	r2, #0
 800264c:	621a      	str	r2, [r3, #32]
    hdma_uart4_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800264e:	4b28      	ldr	r3, [pc, #160]	; (80026f0 <HAL_UART_MspInit+0x1cc>)
 8002650:	2200      	movs	r2, #0
 8002652:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_tx) != HAL_OK)
 8002654:	4826      	ldr	r0, [pc, #152]	; (80026f0 <HAL_UART_MspInit+0x1cc>)
 8002656:	f001 fb4f 	bl	8003cf8 <HAL_DMA_Init>
 800265a:	4603      	mov	r3, r0
 800265c:	2b00      	cmp	r3, #0
 800265e:	d001      	beq.n	8002664 <HAL_UART_MspInit+0x140>
    {
      Error_Handler();
 8002660:	f7fe fee8 	bl	8001434 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart4_tx);
 8002664:	687b      	ldr	r3, [r7, #4]
 8002666:	4a22      	ldr	r2, [pc, #136]	; (80026f0 <HAL_UART_MspInit+0x1cc>)
 8002668:	671a      	str	r2, [r3, #112]	; 0x70
 800266a:	4a21      	ldr	r2, [pc, #132]	; (80026f0 <HAL_UART_MspInit+0x1cc>)
 800266c:	687b      	ldr	r3, [r7, #4]
 800266e:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4_RX Init */
    hdma_uart4_rx.Instance = DMA1_Stream2;
 8002670:	4b21      	ldr	r3, [pc, #132]	; (80026f8 <HAL_UART_MspInit+0x1d4>)
 8002672:	4a22      	ldr	r2, [pc, #136]	; (80026fc <HAL_UART_MspInit+0x1d8>)
 8002674:	601a      	str	r2, [r3, #0]
    hdma_uart4_rx.Init.Channel = DMA_CHANNEL_4;
 8002676:	4b20      	ldr	r3, [pc, #128]	; (80026f8 <HAL_UART_MspInit+0x1d4>)
 8002678:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800267c:	605a      	str	r2, [r3, #4]
    hdma_uart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800267e:	4b1e      	ldr	r3, [pc, #120]	; (80026f8 <HAL_UART_MspInit+0x1d4>)
 8002680:	2200      	movs	r2, #0
 8002682:	609a      	str	r2, [r3, #8]
    hdma_uart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002684:	4b1c      	ldr	r3, [pc, #112]	; (80026f8 <HAL_UART_MspInit+0x1d4>)
 8002686:	2200      	movs	r2, #0
 8002688:	60da      	str	r2, [r3, #12]
    hdma_uart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800268a:	4b1b      	ldr	r3, [pc, #108]	; (80026f8 <HAL_UART_MspInit+0x1d4>)
 800268c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002690:	611a      	str	r2, [r3, #16]
    hdma_uart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002692:	4b19      	ldr	r3, [pc, #100]	; (80026f8 <HAL_UART_MspInit+0x1d4>)
 8002694:	2200      	movs	r2, #0
 8002696:	615a      	str	r2, [r3, #20]
    hdma_uart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002698:	4b17      	ldr	r3, [pc, #92]	; (80026f8 <HAL_UART_MspInit+0x1d4>)
 800269a:	2200      	movs	r2, #0
 800269c:	619a      	str	r2, [r3, #24]
    hdma_uart4_rx.Init.Mode = DMA_NORMAL;
 800269e:	4b16      	ldr	r3, [pc, #88]	; (80026f8 <HAL_UART_MspInit+0x1d4>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	61da      	str	r2, [r3, #28]
    hdma_uart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 80026a4:	4b14      	ldr	r3, [pc, #80]	; (80026f8 <HAL_UART_MspInit+0x1d4>)
 80026a6:	2200      	movs	r2, #0
 80026a8:	621a      	str	r2, [r3, #32]
    hdma_uart4_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80026aa:	4b13      	ldr	r3, [pc, #76]	; (80026f8 <HAL_UART_MspInit+0x1d4>)
 80026ac:	2200      	movs	r2, #0
 80026ae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart4_rx) != HAL_OK)
 80026b0:	4811      	ldr	r0, [pc, #68]	; (80026f8 <HAL_UART_MspInit+0x1d4>)
 80026b2:	f001 fb21 	bl	8003cf8 <HAL_DMA_Init>
 80026b6:	4603      	mov	r3, r0
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	d001      	beq.n	80026c0 <HAL_UART_MspInit+0x19c>
    {
      Error_Handler();
 80026bc:	f7fe feba 	bl	8001434 <Error_Handler>
    }

    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart4_rx);
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	4a0d      	ldr	r2, [pc, #52]	; (80026f8 <HAL_UART_MspInit+0x1d4>)
 80026c4:	675a      	str	r2, [r3, #116]	; 0x74
 80026c6:	4a0c      	ldr	r2, [pc, #48]	; (80026f8 <HAL_UART_MspInit+0x1d4>)
 80026c8:	687b      	ldr	r3, [r7, #4]
 80026ca:	6393      	str	r3, [r2, #56]	; 0x38

    /* UART4 interrupt Init */
    HAL_NVIC_SetPriority(UART4_IRQn, 5, 0);
 80026cc:	2200      	movs	r2, #0
 80026ce:	2105      	movs	r1, #5
 80026d0:	2034      	movs	r0, #52	; 0x34
 80026d2:	f001 f9eb 	bl	8003aac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART4_IRQn);
 80026d6:	2034      	movs	r0, #52	; 0x34
 80026d8:	f001 fa04 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }
}
 80026dc:	e3f4      	b.n	8002ec8 <HAL_UART_MspInit+0x9a4>
 80026de:	bf00      	nop
 80026e0:	40004c00 	.word	0x40004c00
 80026e4:	40023800 	.word	0x40023800
 80026e8:	40020000 	.word	0x40020000
 80026ec:	40020800 	.word	0x40020800
 80026f0:	20001104 	.word	0x20001104
 80026f4:	40026070 	.word	0x40026070
 80026f8:	20001164 	.word	0x20001164
 80026fc:	40026040 	.word	0x40026040
  else if(uartHandle->Instance==UART5)
 8002700:	687b      	ldr	r3, [r7, #4]
 8002702:	681b      	ldr	r3, [r3, #0]
 8002704:	4a9a      	ldr	r2, [pc, #616]	; (8002970 <HAL_UART_MspInit+0x44c>)
 8002706:	4293      	cmp	r3, r2
 8002708:	f040 80c4 	bne.w	8002894 <HAL_UART_MspInit+0x370>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART5;
 800270c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8002710:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.Uart5ClockSelection = RCC_UART5CLKSOURCE_PCLK1;
 8002712:	2300      	movs	r3, #0
 8002714:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002718:	f107 0358 	add.w	r3, r7, #88	; 0x58
 800271c:	4618      	mov	r0, r3
 800271e:	f006 fbf1 	bl	8008f04 <HAL_RCCEx_PeriphCLKConfig>
 8002722:	4603      	mov	r3, r0
 8002724:	2b00      	cmp	r3, #0
 8002726:	d001      	beq.n	800272c <HAL_UART_MspInit+0x208>
      Error_Handler();
 8002728:	f7fe fe84 	bl	8001434 <Error_Handler>
    __HAL_RCC_UART5_CLK_ENABLE();
 800272c:	4b91      	ldr	r3, [pc, #580]	; (8002974 <HAL_UART_MspInit+0x450>)
 800272e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002730:	4a90      	ldr	r2, [pc, #576]	; (8002974 <HAL_UART_MspInit+0x450>)
 8002732:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8002736:	6413      	str	r3, [r2, #64]	; 0x40
 8002738:	4b8e      	ldr	r3, [pc, #568]	; (8002974 <HAL_UART_MspInit+0x450>)
 800273a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273c:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002740:	64bb      	str	r3, [r7, #72]	; 0x48
 8002742:	6cbb      	ldr	r3, [r7, #72]	; 0x48
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002744:	4b8b      	ldr	r3, [pc, #556]	; (8002974 <HAL_UART_MspInit+0x450>)
 8002746:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002748:	4a8a      	ldr	r2, [pc, #552]	; (8002974 <HAL_UART_MspInit+0x450>)
 800274a:	f043 0304 	orr.w	r3, r3, #4
 800274e:	6313      	str	r3, [r2, #48]	; 0x30
 8002750:	4b88      	ldr	r3, [pc, #544]	; (8002974 <HAL_UART_MspInit+0x450>)
 8002752:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002754:	f003 0304 	and.w	r3, r3, #4
 8002758:	647b      	str	r3, [r7, #68]	; 0x44
 800275a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800275c:	4b85      	ldr	r3, [pc, #532]	; (8002974 <HAL_UART_MspInit+0x450>)
 800275e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002760:	4a84      	ldr	r2, [pc, #528]	; (8002974 <HAL_UART_MspInit+0x450>)
 8002762:	f043 0308 	orr.w	r3, r3, #8
 8002766:	6313      	str	r3, [r2, #48]	; 0x30
 8002768:	4b82      	ldr	r3, [pc, #520]	; (8002974 <HAL_UART_MspInit+0x450>)
 800276a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276c:	f003 0308 	and.w	r3, r3, #8
 8002770:	643b      	str	r3, [r7, #64]	; 0x40
 8002772:	6c3b      	ldr	r3, [r7, #64]	; 0x40
    GPIO_InitStruct.Pin = GPIO_PIN_12;
 8002774:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8002778:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800277c:	2302      	movs	r3, #2
 800277e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002782:	2301      	movs	r3, #1
 8002784:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002788:	2303      	movs	r3, #3
 800278a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 800278e:	2308      	movs	r3, #8
 8002790:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002794:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002798:	4619      	mov	r1, r3
 800279a:	4877      	ldr	r0, [pc, #476]	; (8002978 <HAL_UART_MspInit+0x454>)
 800279c:	f003 fc9c 	bl	80060d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_2;
 80027a0:	2304      	movs	r3, #4
 80027a2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027a6:	2302      	movs	r3, #2
 80027a8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80027ac:	2301      	movs	r3, #1
 80027ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027b2:	2303      	movs	r3, #3
 80027b4:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80027b8:	2308      	movs	r3, #8
 80027ba:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80027be:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 80027c2:	4619      	mov	r1, r3
 80027c4:	486d      	ldr	r0, [pc, #436]	; (800297c <HAL_UART_MspInit+0x458>)
 80027c6:	f003 fc87 	bl	80060d8 <HAL_GPIO_Init>
    hdma_uart5_tx.Instance = DMA1_Stream7;
 80027ca:	4b6d      	ldr	r3, [pc, #436]	; (8002980 <HAL_UART_MspInit+0x45c>)
 80027cc:	4a6d      	ldr	r2, [pc, #436]	; (8002984 <HAL_UART_MspInit+0x460>)
 80027ce:	601a      	str	r2, [r3, #0]
    hdma_uart5_tx.Init.Channel = DMA_CHANNEL_4;
 80027d0:	4b6b      	ldr	r3, [pc, #428]	; (8002980 <HAL_UART_MspInit+0x45c>)
 80027d2:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80027d6:	605a      	str	r2, [r3, #4]
    hdma_uart5_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80027d8:	4b69      	ldr	r3, [pc, #420]	; (8002980 <HAL_UART_MspInit+0x45c>)
 80027da:	2240      	movs	r2, #64	; 0x40
 80027dc:	609a      	str	r2, [r3, #8]
    hdma_uart5_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80027de:	4b68      	ldr	r3, [pc, #416]	; (8002980 <HAL_UART_MspInit+0x45c>)
 80027e0:	2200      	movs	r2, #0
 80027e2:	60da      	str	r2, [r3, #12]
    hdma_uart5_tx.Init.MemInc = DMA_MINC_ENABLE;
 80027e4:	4b66      	ldr	r3, [pc, #408]	; (8002980 <HAL_UART_MspInit+0x45c>)
 80027e6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80027ea:	611a      	str	r2, [r3, #16]
    hdma_uart5_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80027ec:	4b64      	ldr	r3, [pc, #400]	; (8002980 <HAL_UART_MspInit+0x45c>)
 80027ee:	2200      	movs	r2, #0
 80027f0:	615a      	str	r2, [r3, #20]
    hdma_uart5_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80027f2:	4b63      	ldr	r3, [pc, #396]	; (8002980 <HAL_UART_MspInit+0x45c>)
 80027f4:	2200      	movs	r2, #0
 80027f6:	619a      	str	r2, [r3, #24]
    hdma_uart5_tx.Init.Mode = DMA_NORMAL;
 80027f8:	4b61      	ldr	r3, [pc, #388]	; (8002980 <HAL_UART_MspInit+0x45c>)
 80027fa:	2200      	movs	r2, #0
 80027fc:	61da      	str	r2, [r3, #28]
    hdma_uart5_tx.Init.Priority = DMA_PRIORITY_LOW;
 80027fe:	4b60      	ldr	r3, [pc, #384]	; (8002980 <HAL_UART_MspInit+0x45c>)
 8002800:	2200      	movs	r2, #0
 8002802:	621a      	str	r2, [r3, #32]
    hdma_uart5_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002804:	4b5e      	ldr	r3, [pc, #376]	; (8002980 <HAL_UART_MspInit+0x45c>)
 8002806:	2200      	movs	r2, #0
 8002808:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_tx) != HAL_OK)
 800280a:	485d      	ldr	r0, [pc, #372]	; (8002980 <HAL_UART_MspInit+0x45c>)
 800280c:	f001 fa74 	bl	8003cf8 <HAL_DMA_Init>
 8002810:	4603      	mov	r3, r0
 8002812:	2b00      	cmp	r3, #0
 8002814:	d001      	beq.n	800281a <HAL_UART_MspInit+0x2f6>
      Error_Handler();
 8002816:	f7fe fe0d 	bl	8001434 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_uart5_tx);
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	4a58      	ldr	r2, [pc, #352]	; (8002980 <HAL_UART_MspInit+0x45c>)
 800281e:	671a      	str	r2, [r3, #112]	; 0x70
 8002820:	4a57      	ldr	r2, [pc, #348]	; (8002980 <HAL_UART_MspInit+0x45c>)
 8002822:	687b      	ldr	r3, [r7, #4]
 8002824:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_uart5_rx.Instance = DMA1_Stream0;
 8002826:	4b58      	ldr	r3, [pc, #352]	; (8002988 <HAL_UART_MspInit+0x464>)
 8002828:	4a58      	ldr	r2, [pc, #352]	; (800298c <HAL_UART_MspInit+0x468>)
 800282a:	601a      	str	r2, [r3, #0]
    hdma_uart5_rx.Init.Channel = DMA_CHANNEL_4;
 800282c:	4b56      	ldr	r3, [pc, #344]	; (8002988 <HAL_UART_MspInit+0x464>)
 800282e:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002832:	605a      	str	r2, [r3, #4]
    hdma_uart5_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002834:	4b54      	ldr	r3, [pc, #336]	; (8002988 <HAL_UART_MspInit+0x464>)
 8002836:	2200      	movs	r2, #0
 8002838:	609a      	str	r2, [r3, #8]
    hdma_uart5_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800283a:	4b53      	ldr	r3, [pc, #332]	; (8002988 <HAL_UART_MspInit+0x464>)
 800283c:	2200      	movs	r2, #0
 800283e:	60da      	str	r2, [r3, #12]
    hdma_uart5_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002840:	4b51      	ldr	r3, [pc, #324]	; (8002988 <HAL_UART_MspInit+0x464>)
 8002842:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002846:	611a      	str	r2, [r3, #16]
    hdma_uart5_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002848:	4b4f      	ldr	r3, [pc, #316]	; (8002988 <HAL_UART_MspInit+0x464>)
 800284a:	2200      	movs	r2, #0
 800284c:	615a      	str	r2, [r3, #20]
    hdma_uart5_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800284e:	4b4e      	ldr	r3, [pc, #312]	; (8002988 <HAL_UART_MspInit+0x464>)
 8002850:	2200      	movs	r2, #0
 8002852:	619a      	str	r2, [r3, #24]
    hdma_uart5_rx.Init.Mode = DMA_NORMAL;
 8002854:	4b4c      	ldr	r3, [pc, #304]	; (8002988 <HAL_UART_MspInit+0x464>)
 8002856:	2200      	movs	r2, #0
 8002858:	61da      	str	r2, [r3, #28]
    hdma_uart5_rx.Init.Priority = DMA_PRIORITY_LOW;
 800285a:	4b4b      	ldr	r3, [pc, #300]	; (8002988 <HAL_UART_MspInit+0x464>)
 800285c:	2200      	movs	r2, #0
 800285e:	621a      	str	r2, [r3, #32]
    hdma_uart5_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002860:	4b49      	ldr	r3, [pc, #292]	; (8002988 <HAL_UART_MspInit+0x464>)
 8002862:	2200      	movs	r2, #0
 8002864:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart5_rx) != HAL_OK)
 8002866:	4848      	ldr	r0, [pc, #288]	; (8002988 <HAL_UART_MspInit+0x464>)
 8002868:	f001 fa46 	bl	8003cf8 <HAL_DMA_Init>
 800286c:	4603      	mov	r3, r0
 800286e:	2b00      	cmp	r3, #0
 8002870:	d001      	beq.n	8002876 <HAL_UART_MspInit+0x352>
      Error_Handler();
 8002872:	f7fe fddf 	bl	8001434 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart5_rx);
 8002876:	687b      	ldr	r3, [r7, #4]
 8002878:	4a43      	ldr	r2, [pc, #268]	; (8002988 <HAL_UART_MspInit+0x464>)
 800287a:	675a      	str	r2, [r3, #116]	; 0x74
 800287c:	4a42      	ldr	r2, [pc, #264]	; (8002988 <HAL_UART_MspInit+0x464>)
 800287e:	687b      	ldr	r3, [r7, #4]
 8002880:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART5_IRQn, 5, 0);
 8002882:	2200      	movs	r2, #0
 8002884:	2105      	movs	r1, #5
 8002886:	2035      	movs	r0, #53	; 0x35
 8002888:	f001 f910 	bl	8003aac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 800288c:	2035      	movs	r0, #53	; 0x35
 800288e:	f001 f929 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
}
 8002892:	e319      	b.n	8002ec8 <HAL_UART_MspInit+0x9a4>
  else if(uartHandle->Instance==UART7)
 8002894:	687b      	ldr	r3, [r7, #4]
 8002896:	681b      	ldr	r3, [r3, #0]
 8002898:	4a3d      	ldr	r2, [pc, #244]	; (8002990 <HAL_UART_MspInit+0x46c>)
 800289a:	4293      	cmp	r3, r2
 800289c:	d17e      	bne.n	800299c <HAL_UART_MspInit+0x478>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART7;
 800289e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80028a2:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.Uart7ClockSelection = RCC_UART7CLKSOURCE_PCLK1;
 80028a4:	2300      	movs	r3, #0
 80028a6:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80028aa:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80028ae:	4618      	mov	r0, r3
 80028b0:	f006 fb28 	bl	8008f04 <HAL_RCCEx_PeriphCLKConfig>
 80028b4:	4603      	mov	r3, r0
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d001      	beq.n	80028be <HAL_UART_MspInit+0x39a>
      Error_Handler();
 80028ba:	f7fe fdbb 	bl	8001434 <Error_Handler>
    __HAL_RCC_UART7_CLK_ENABLE();
 80028be:	4b2d      	ldr	r3, [pc, #180]	; (8002974 <HAL_UART_MspInit+0x450>)
 80028c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c2:	4a2c      	ldr	r2, [pc, #176]	; (8002974 <HAL_UART_MspInit+0x450>)
 80028c4:	f043 4380 	orr.w	r3, r3, #1073741824	; 0x40000000
 80028c8:	6413      	str	r3, [r2, #64]	; 0x40
 80028ca:	4b2a      	ldr	r3, [pc, #168]	; (8002974 <HAL_UART_MspInit+0x450>)
 80028cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ce:	f003 4380 	and.w	r3, r3, #1073741824	; 0x40000000
 80028d2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80028d4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
    __HAL_RCC_GPIOF_CLK_ENABLE();
 80028d6:	4b27      	ldr	r3, [pc, #156]	; (8002974 <HAL_UART_MspInit+0x450>)
 80028d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028da:	4a26      	ldr	r2, [pc, #152]	; (8002974 <HAL_UART_MspInit+0x450>)
 80028dc:	f043 0320 	orr.w	r3, r3, #32
 80028e0:	6313      	str	r3, [r2, #48]	; 0x30
 80028e2:	4b24      	ldr	r3, [pc, #144]	; (8002974 <HAL_UART_MspInit+0x450>)
 80028e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028e6:	f003 0320 	and.w	r3, r3, #32
 80028ea:	63bb      	str	r3, [r7, #56]	; 0x38
 80028ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80028ee:	4b21      	ldr	r3, [pc, #132]	; (8002974 <HAL_UART_MspInit+0x450>)
 80028f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f2:	4a20      	ldr	r2, [pc, #128]	; (8002974 <HAL_UART_MspInit+0x450>)
 80028f4:	f043 0310 	orr.w	r3, r3, #16
 80028f8:	6313      	str	r3, [r2, #48]	; 0x30
 80028fa:	4b1e      	ldr	r3, [pc, #120]	; (8002974 <HAL_UART_MspInit+0x450>)
 80028fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028fe:	f003 0310 	and.w	r3, r3, #16
 8002902:	637b      	str	r3, [r7, #52]	; 0x34
 8002904:	6b7b      	ldr	r3, [r7, #52]	; 0x34
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002906:	2340      	movs	r3, #64	; 0x40
 8002908:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800290c:	2302      	movs	r3, #2
 800290e:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002912:	2300      	movs	r3, #0
 8002914:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002918:	2303      	movs	r3, #3
 800291a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800291e:	2308      	movs	r3, #8
 8002920:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOF, &GPIO_InitStruct);
 8002924:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002928:	4619      	mov	r1, r3
 800292a:	481a      	ldr	r0, [pc, #104]	; (8002994 <HAL_UART_MspInit+0x470>)
 800292c:	f003 fbd4 	bl	80060d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_8;
 8002930:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002934:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002938:	2302      	movs	r3, #2
 800293a:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800293e:	2300      	movs	r3, #0
 8002940:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002944:	2303      	movs	r3, #3
 8002946:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART7;
 800294a:	2308      	movs	r3, #8
 800294c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002950:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002954:	4619      	mov	r1, r3
 8002956:	4810      	ldr	r0, [pc, #64]	; (8002998 <HAL_UART_MspInit+0x474>)
 8002958:	f003 fbbe 	bl	80060d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(UART7_IRQn, 5, 0);
 800295c:	2200      	movs	r2, #0
 800295e:	2105      	movs	r1, #5
 8002960:	2052      	movs	r0, #82	; 0x52
 8002962:	f001 f8a3 	bl	8003aac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART7_IRQn);
 8002966:	2052      	movs	r0, #82	; 0x52
 8002968:	f001 f8bc 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
}
 800296c:	e2ac      	b.n	8002ec8 <HAL_UART_MspInit+0x9a4>
 800296e:	bf00      	nop
 8002970:	40005000 	.word	0x40005000
 8002974:	40023800 	.word	0x40023800
 8002978:	40020800 	.word	0x40020800
 800297c:	40020c00 	.word	0x40020c00
 8002980:	200011c4 	.word	0x200011c4
 8002984:	400260b8 	.word	0x400260b8
 8002988:	20001224 	.word	0x20001224
 800298c:	40026010 	.word	0x40026010
 8002990:	40007800 	.word	0x40007800
 8002994:	40021400 	.word	0x40021400
 8002998:	40021000 	.word	0x40021000
  else if(uartHandle->Instance==UART8)
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a8f      	ldr	r2, [pc, #572]	; (8002be0 <HAL_UART_MspInit+0x6bc>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d173      	bne.n	8002a8e <HAL_UART_MspInit+0x56a>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_UART8;
 80029a6:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80029aa:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.Uart8ClockSelection = RCC_UART8CLKSOURCE_PCLK1;
 80029ac:	2300      	movs	r3, #0
 80029ae:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 80029b2:	f107 0358 	add.w	r3, r7, #88	; 0x58
 80029b6:	4618      	mov	r0, r3
 80029b8:	f006 faa4 	bl	8008f04 <HAL_RCCEx_PeriphCLKConfig>
 80029bc:	4603      	mov	r3, r0
 80029be:	2b00      	cmp	r3, #0
 80029c0:	d001      	beq.n	80029c6 <HAL_UART_MspInit+0x4a2>
      Error_Handler();
 80029c2:	f7fe fd37 	bl	8001434 <Error_Handler>
    __HAL_RCC_UART8_CLK_ENABLE();
 80029c6:	4b87      	ldr	r3, [pc, #540]	; (8002be4 <HAL_UART_MspInit+0x6c0>)
 80029c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029ca:	4a86      	ldr	r2, [pc, #536]	; (8002be4 <HAL_UART_MspInit+0x6c0>)
 80029cc:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 80029d0:	6413      	str	r3, [r2, #64]	; 0x40
 80029d2:	4b84      	ldr	r3, [pc, #528]	; (8002be4 <HAL_UART_MspInit+0x6c0>)
 80029d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80029d6:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80029da:	633b      	str	r3, [r7, #48]	; 0x30
 80029dc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
    __HAL_RCC_GPIOE_CLK_ENABLE();
 80029de:	4b81      	ldr	r3, [pc, #516]	; (8002be4 <HAL_UART_MspInit+0x6c0>)
 80029e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029e2:	4a80      	ldr	r2, [pc, #512]	; (8002be4 <HAL_UART_MspInit+0x6c0>)
 80029e4:	f043 0310 	orr.w	r3, r3, #16
 80029e8:	6313      	str	r3, [r2, #48]	; 0x30
 80029ea:	4b7e      	ldr	r3, [pc, #504]	; (8002be4 <HAL_UART_MspInit+0x6c0>)
 80029ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029ee:	f003 0310 	and.w	r3, r3, #16
 80029f2:	62fb      	str	r3, [r7, #44]	; 0x2c
 80029f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 80029f6:	2303      	movs	r3, #3
 80029f8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029fc:	2302      	movs	r3, #2
 80029fe:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a02:	2300      	movs	r3, #0
 8002a04:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a08:	2303      	movs	r3, #3
 8002a0a:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_UART8;
 8002a0e:	2308      	movs	r3, #8
 8002a10:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8002a14:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002a18:	4619      	mov	r1, r3
 8002a1a:	4873      	ldr	r0, [pc, #460]	; (8002be8 <HAL_UART_MspInit+0x6c4>)
 8002a1c:	f003 fb5c 	bl	80060d8 <HAL_GPIO_Init>
    hdma_uart8_rx.Instance = DMA1_Stream6;
 8002a20:	4b72      	ldr	r3, [pc, #456]	; (8002bec <HAL_UART_MspInit+0x6c8>)
 8002a22:	4a73      	ldr	r2, [pc, #460]	; (8002bf0 <HAL_UART_MspInit+0x6cc>)
 8002a24:	601a      	str	r2, [r3, #0]
    hdma_uart8_rx.Init.Channel = DMA_CHANNEL_5;
 8002a26:	4b71      	ldr	r3, [pc, #452]	; (8002bec <HAL_UART_MspInit+0x6c8>)
 8002a28:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002a2c:	605a      	str	r2, [r3, #4]
    hdma_uart8_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002a2e:	4b6f      	ldr	r3, [pc, #444]	; (8002bec <HAL_UART_MspInit+0x6c8>)
 8002a30:	2200      	movs	r2, #0
 8002a32:	609a      	str	r2, [r3, #8]
    hdma_uart8_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002a34:	4b6d      	ldr	r3, [pc, #436]	; (8002bec <HAL_UART_MspInit+0x6c8>)
 8002a36:	2200      	movs	r2, #0
 8002a38:	60da      	str	r2, [r3, #12]
    hdma_uart8_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002a3a:	4b6c      	ldr	r3, [pc, #432]	; (8002bec <HAL_UART_MspInit+0x6c8>)
 8002a3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002a40:	611a      	str	r2, [r3, #16]
    hdma_uart8_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002a42:	4b6a      	ldr	r3, [pc, #424]	; (8002bec <HAL_UART_MspInit+0x6c8>)
 8002a44:	2200      	movs	r2, #0
 8002a46:	615a      	str	r2, [r3, #20]
    hdma_uart8_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002a48:	4b68      	ldr	r3, [pc, #416]	; (8002bec <HAL_UART_MspInit+0x6c8>)
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	619a      	str	r2, [r3, #24]
    hdma_uart8_rx.Init.Mode = DMA_NORMAL;
 8002a4e:	4b67      	ldr	r3, [pc, #412]	; (8002bec <HAL_UART_MspInit+0x6c8>)
 8002a50:	2200      	movs	r2, #0
 8002a52:	61da      	str	r2, [r3, #28]
    hdma_uart8_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002a54:	4b65      	ldr	r3, [pc, #404]	; (8002bec <HAL_UART_MspInit+0x6c8>)
 8002a56:	2200      	movs	r2, #0
 8002a58:	621a      	str	r2, [r3, #32]
    hdma_uart8_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002a5a:	4b64      	ldr	r3, [pc, #400]	; (8002bec <HAL_UART_MspInit+0x6c8>)
 8002a5c:	2200      	movs	r2, #0
 8002a5e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_uart8_rx) != HAL_OK)
 8002a60:	4862      	ldr	r0, [pc, #392]	; (8002bec <HAL_UART_MspInit+0x6c8>)
 8002a62:	f001 f949 	bl	8003cf8 <HAL_DMA_Init>
 8002a66:	4603      	mov	r3, r0
 8002a68:	2b00      	cmp	r3, #0
 8002a6a:	d001      	beq.n	8002a70 <HAL_UART_MspInit+0x54c>
      Error_Handler();
 8002a6c:	f7fe fce2 	bl	8001434 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_uart8_rx);
 8002a70:	687b      	ldr	r3, [r7, #4]
 8002a72:	4a5e      	ldr	r2, [pc, #376]	; (8002bec <HAL_UART_MspInit+0x6c8>)
 8002a74:	675a      	str	r2, [r3, #116]	; 0x74
 8002a76:	4a5d      	ldr	r2, [pc, #372]	; (8002bec <HAL_UART_MspInit+0x6c8>)
 8002a78:	687b      	ldr	r3, [r7, #4]
 8002a7a:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(UART8_IRQn, 5, 0);
 8002a7c:	2200      	movs	r2, #0
 8002a7e:	2105      	movs	r1, #5
 8002a80:	2053      	movs	r0, #83	; 0x53
 8002a82:	f001 f813 	bl	8003aac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART8_IRQn);
 8002a86:	2053      	movs	r0, #83	; 0x53
 8002a88:	f001 f82c 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
}
 8002a8c:	e21c      	b.n	8002ec8 <HAL_UART_MspInit+0x9a4>
  else if(uartHandle->Instance==USART1)
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	681b      	ldr	r3, [r3, #0]
 8002a92:	4a58      	ldr	r2, [pc, #352]	; (8002bf4 <HAL_UART_MspInit+0x6d0>)
 8002a94:	4293      	cmp	r3, r2
 8002a96:	f040 80b9 	bne.w	8002c0c <HAL_UART_MspInit+0x6e8>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART1;
 8002a9a:	2340      	movs	r3, #64	; 0x40
 8002a9c:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 8002a9e:	2300      	movs	r3, #0
 8002aa0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002aa4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002aa8:	4618      	mov	r0, r3
 8002aaa:	f006 fa2b 	bl	8008f04 <HAL_RCCEx_PeriphCLKConfig>
 8002aae:	4603      	mov	r3, r0
 8002ab0:	2b00      	cmp	r3, #0
 8002ab2:	d001      	beq.n	8002ab8 <HAL_UART_MspInit+0x594>
      Error_Handler();
 8002ab4:	f7fe fcbe 	bl	8001434 <Error_Handler>
    __HAL_RCC_USART1_CLK_ENABLE();
 8002ab8:	4b4a      	ldr	r3, [pc, #296]	; (8002be4 <HAL_UART_MspInit+0x6c0>)
 8002aba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002abc:	4a49      	ldr	r2, [pc, #292]	; (8002be4 <HAL_UART_MspInit+0x6c0>)
 8002abe:	f043 0310 	orr.w	r3, r3, #16
 8002ac2:	6453      	str	r3, [r2, #68]	; 0x44
 8002ac4:	4b47      	ldr	r3, [pc, #284]	; (8002be4 <HAL_UART_MspInit+0x6c0>)
 8002ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ac8:	f003 0310 	and.w	r3, r3, #16
 8002acc:	62bb      	str	r3, [r7, #40]	; 0x28
 8002ace:	6abb      	ldr	r3, [r7, #40]	; 0x28
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002ad0:	4b44      	ldr	r3, [pc, #272]	; (8002be4 <HAL_UART_MspInit+0x6c0>)
 8002ad2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ad4:	4a43      	ldr	r2, [pc, #268]	; (8002be4 <HAL_UART_MspInit+0x6c0>)
 8002ad6:	f043 0301 	orr.w	r3, r3, #1
 8002ada:	6313      	str	r3, [r2, #48]	; 0x30
 8002adc:	4b41      	ldr	r3, [pc, #260]	; (8002be4 <HAL_UART_MspInit+0x6c0>)
 8002ade:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ae0:	f003 0301 	and.w	r3, r3, #1
 8002ae4:	627b      	str	r3, [r7, #36]	; 0x24
 8002ae6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 8002ae8:	f44f 63c0 	mov.w	r3, #1536	; 0x600
 8002aec:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002af0:	2302      	movs	r3, #2
 8002af2:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002af6:	2300      	movs	r3, #0
 8002af8:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002afc:	2303      	movs	r3, #3
 8002afe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART1;
 8002b02:	2307      	movs	r3, #7
 8002b04:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b08:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	483a      	ldr	r0, [pc, #232]	; (8002bf8 <HAL_UART_MspInit+0x6d4>)
 8002b10:	f003 fae2 	bl	80060d8 <HAL_GPIO_Init>
    hdma_usart1_rx.Instance = DMA2_Stream5;
 8002b14:	4b39      	ldr	r3, [pc, #228]	; (8002bfc <HAL_UART_MspInit+0x6d8>)
 8002b16:	4a3a      	ldr	r2, [pc, #232]	; (8002c00 <HAL_UART_MspInit+0x6dc>)
 8002b18:	601a      	str	r2, [r3, #0]
    hdma_usart1_rx.Init.Channel = DMA_CHANNEL_4;
 8002b1a:	4b38      	ldr	r3, [pc, #224]	; (8002bfc <HAL_UART_MspInit+0x6d8>)
 8002b1c:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b20:	605a      	str	r2, [r3, #4]
    hdma_usart1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002b22:	4b36      	ldr	r3, [pc, #216]	; (8002bfc <HAL_UART_MspInit+0x6d8>)
 8002b24:	2200      	movs	r2, #0
 8002b26:	609a      	str	r2, [r3, #8]
    hdma_usart1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b28:	4b34      	ldr	r3, [pc, #208]	; (8002bfc <HAL_UART_MspInit+0x6d8>)
 8002b2a:	2200      	movs	r2, #0
 8002b2c:	60da      	str	r2, [r3, #12]
    hdma_usart1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002b2e:	4b33      	ldr	r3, [pc, #204]	; (8002bfc <HAL_UART_MspInit+0x6d8>)
 8002b30:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b34:	611a      	str	r2, [r3, #16]
    hdma_usart1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b36:	4b31      	ldr	r3, [pc, #196]	; (8002bfc <HAL_UART_MspInit+0x6d8>)
 8002b38:	2200      	movs	r2, #0
 8002b3a:	615a      	str	r2, [r3, #20]
    hdma_usart1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b3c:	4b2f      	ldr	r3, [pc, #188]	; (8002bfc <HAL_UART_MspInit+0x6d8>)
 8002b3e:	2200      	movs	r2, #0
 8002b40:	619a      	str	r2, [r3, #24]
    hdma_usart1_rx.Init.Mode = DMA_NORMAL;
 8002b42:	4b2e      	ldr	r3, [pc, #184]	; (8002bfc <HAL_UART_MspInit+0x6d8>)
 8002b44:	2200      	movs	r2, #0
 8002b46:	61da      	str	r2, [r3, #28]
    hdma_usart1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002b48:	4b2c      	ldr	r3, [pc, #176]	; (8002bfc <HAL_UART_MspInit+0x6d8>)
 8002b4a:	2200      	movs	r2, #0
 8002b4c:	621a      	str	r2, [r3, #32]
    hdma_usart1_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002b4e:	4b2b      	ldr	r3, [pc, #172]	; (8002bfc <HAL_UART_MspInit+0x6d8>)
 8002b50:	2200      	movs	r2, #0
 8002b52:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_rx) != HAL_OK)
 8002b54:	4829      	ldr	r0, [pc, #164]	; (8002bfc <HAL_UART_MspInit+0x6d8>)
 8002b56:	f001 f8cf 	bl	8003cf8 <HAL_DMA_Init>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	d001      	beq.n	8002b64 <HAL_UART_MspInit+0x640>
      Error_Handler();
 8002b60:	f7fe fc68 	bl	8001434 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart1_rx);
 8002b64:	687b      	ldr	r3, [r7, #4]
 8002b66:	4a25      	ldr	r2, [pc, #148]	; (8002bfc <HAL_UART_MspInit+0x6d8>)
 8002b68:	675a      	str	r2, [r3, #116]	; 0x74
 8002b6a:	4a24      	ldr	r2, [pc, #144]	; (8002bfc <HAL_UART_MspInit+0x6d8>)
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart1_tx.Instance = DMA2_Stream7;
 8002b70:	4b24      	ldr	r3, [pc, #144]	; (8002c04 <HAL_UART_MspInit+0x6e0>)
 8002b72:	4a25      	ldr	r2, [pc, #148]	; (8002c08 <HAL_UART_MspInit+0x6e4>)
 8002b74:	601a      	str	r2, [r3, #0]
    hdma_usart1_tx.Init.Channel = DMA_CHANNEL_4;
 8002b76:	4b23      	ldr	r3, [pc, #140]	; (8002c04 <HAL_UART_MspInit+0x6e0>)
 8002b78:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b7c:	605a      	str	r2, [r3, #4]
    hdma_usart1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002b7e:	4b21      	ldr	r3, [pc, #132]	; (8002c04 <HAL_UART_MspInit+0x6e0>)
 8002b80:	2240      	movs	r2, #64	; 0x40
 8002b82:	609a      	str	r2, [r3, #8]
    hdma_usart1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002b84:	4b1f      	ldr	r3, [pc, #124]	; (8002c04 <HAL_UART_MspInit+0x6e0>)
 8002b86:	2200      	movs	r2, #0
 8002b88:	60da      	str	r2, [r3, #12]
    hdma_usart1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002b8a:	4b1e      	ldr	r3, [pc, #120]	; (8002c04 <HAL_UART_MspInit+0x6e0>)
 8002b8c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002b90:	611a      	str	r2, [r3, #16]
    hdma_usart1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002b92:	4b1c      	ldr	r3, [pc, #112]	; (8002c04 <HAL_UART_MspInit+0x6e0>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	615a      	str	r2, [r3, #20]
    hdma_usart1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002b98:	4b1a      	ldr	r3, [pc, #104]	; (8002c04 <HAL_UART_MspInit+0x6e0>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	619a      	str	r2, [r3, #24]
    hdma_usart1_tx.Init.Mode = DMA_NORMAL;
 8002b9e:	4b19      	ldr	r3, [pc, #100]	; (8002c04 <HAL_UART_MspInit+0x6e0>)
 8002ba0:	2200      	movs	r2, #0
 8002ba2:	61da      	str	r2, [r3, #28]
    hdma_usart1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002ba4:	4b17      	ldr	r3, [pc, #92]	; (8002c04 <HAL_UART_MspInit+0x6e0>)
 8002ba6:	2200      	movs	r2, #0
 8002ba8:	621a      	str	r2, [r3, #32]
    hdma_usart1_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002baa:	4b16      	ldr	r3, [pc, #88]	; (8002c04 <HAL_UART_MspInit+0x6e0>)
 8002bac:	2200      	movs	r2, #0
 8002bae:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart1_tx) != HAL_OK)
 8002bb0:	4814      	ldr	r0, [pc, #80]	; (8002c04 <HAL_UART_MspInit+0x6e0>)
 8002bb2:	f001 f8a1 	bl	8003cf8 <HAL_DMA_Init>
 8002bb6:	4603      	mov	r3, r0
 8002bb8:	2b00      	cmp	r3, #0
 8002bba:	d001      	beq.n	8002bc0 <HAL_UART_MspInit+0x69c>
      Error_Handler();
 8002bbc:	f7fe fc3a 	bl	8001434 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart1_tx);
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	4a10      	ldr	r2, [pc, #64]	; (8002c04 <HAL_UART_MspInit+0x6e0>)
 8002bc4:	671a      	str	r2, [r3, #112]	; 0x70
 8002bc6:	4a0f      	ldr	r2, [pc, #60]	; (8002c04 <HAL_UART_MspInit+0x6e0>)
 8002bc8:	687b      	ldr	r3, [r7, #4]
 8002bca:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART1_IRQn, 5, 0);
 8002bcc:	2200      	movs	r2, #0
 8002bce:	2105      	movs	r1, #5
 8002bd0:	2025      	movs	r0, #37	; 0x25
 8002bd2:	f000 ff6b 	bl	8003aac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 8002bd6:	2025      	movs	r0, #37	; 0x25
 8002bd8:	f000 ff84 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
}
 8002bdc:	e174      	b.n	8002ec8 <HAL_UART_MspInit+0x9a4>
 8002bde:	bf00      	nop
 8002be0:	40007c00 	.word	0x40007c00
 8002be4:	40023800 	.word	0x40023800
 8002be8:	40021000 	.word	0x40021000
 8002bec:	20001284 	.word	0x20001284
 8002bf0:	400260a0 	.word	0x400260a0
 8002bf4:	40011000 	.word	0x40011000
 8002bf8:	40020000 	.word	0x40020000
 8002bfc:	200012e4 	.word	0x200012e4
 8002c00:	40026488 	.word	0x40026488
 8002c04:	20001344 	.word	0x20001344
 8002c08:	400264b8 	.word	0x400264b8
  else if(uartHandle->Instance==USART2)
 8002c0c:	687b      	ldr	r3, [r7, #4]
 8002c0e:	681b      	ldr	r3, [r3, #0]
 8002c10:	4aaf      	ldr	r2, [pc, #700]	; (8002ed0 <HAL_UART_MspInit+0x9ac>)
 8002c12:	4293      	cmp	r3, r2
 8002c14:	d165      	bne.n	8002ce2 <HAL_UART_MspInit+0x7be>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART2;
 8002c16:	2380      	movs	r3, #128	; 0x80
 8002c18:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.Usart2ClockSelection = RCC_USART2CLKSOURCE_PCLK1;
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002c20:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002c24:	4618      	mov	r0, r3
 8002c26:	f006 f96d 	bl	8008f04 <HAL_RCCEx_PeriphCLKConfig>
 8002c2a:	4603      	mov	r3, r0
 8002c2c:	2b00      	cmp	r3, #0
 8002c2e:	d001      	beq.n	8002c34 <HAL_UART_MspInit+0x710>
      Error_Handler();
 8002c30:	f7fe fc00 	bl	8001434 <Error_Handler>
    __HAL_RCC_USART2_CLK_ENABLE();
 8002c34:	4ba7      	ldr	r3, [pc, #668]	; (8002ed4 <HAL_UART_MspInit+0x9b0>)
 8002c36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c38:	4aa6      	ldr	r2, [pc, #664]	; (8002ed4 <HAL_UART_MspInit+0x9b0>)
 8002c3a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c3e:	6413      	str	r3, [r2, #64]	; 0x40
 8002c40:	4ba4      	ldr	r3, [pc, #656]	; (8002ed4 <HAL_UART_MspInit+0x9b0>)
 8002c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c44:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002c48:	623b      	str	r3, [r7, #32]
 8002c4a:	6a3b      	ldr	r3, [r7, #32]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c4c:	4ba1      	ldr	r3, [pc, #644]	; (8002ed4 <HAL_UART_MspInit+0x9b0>)
 8002c4e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c50:	4aa0      	ldr	r2, [pc, #640]	; (8002ed4 <HAL_UART_MspInit+0x9b0>)
 8002c52:	f043 0301 	orr.w	r3, r3, #1
 8002c56:	6313      	str	r3, [r2, #48]	; 0x30
 8002c58:	4b9e      	ldr	r3, [pc, #632]	; (8002ed4 <HAL_UART_MspInit+0x9b0>)
 8002c5a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c5c:	f003 0301 	and.w	r3, r3, #1
 8002c60:	61fb      	str	r3, [r7, #28]
 8002c62:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002c64:	4b9b      	ldr	r3, [pc, #620]	; (8002ed4 <HAL_UART_MspInit+0x9b0>)
 8002c66:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c68:	4a9a      	ldr	r2, [pc, #616]	; (8002ed4 <HAL_UART_MspInit+0x9b0>)
 8002c6a:	f043 0308 	orr.w	r3, r3, #8
 8002c6e:	6313      	str	r3, [r2, #48]	; 0x30
 8002c70:	4b98      	ldr	r3, [pc, #608]	; (8002ed4 <HAL_UART_MspInit+0x9b0>)
 8002c72:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c74:	f003 0308 	and.w	r3, r3, #8
 8002c78:	61bb      	str	r3, [r7, #24]
 8002c7a:	69bb      	ldr	r3, [r7, #24]
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002c7c:	2308      	movs	r3, #8
 8002c7e:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c82:	2302      	movs	r3, #2
 8002c84:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c88:	2300      	movs	r3, #0
 8002c8a:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002c8e:	2303      	movs	r3, #3
 8002c90:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002c94:	2307      	movs	r3, #7
 8002c96:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002c9a:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002c9e:	4619      	mov	r1, r3
 8002ca0:	488d      	ldr	r0, [pc, #564]	; (8002ed8 <HAL_UART_MspInit+0x9b4>)
 8002ca2:	f003 fa19 	bl	80060d8 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_5;
 8002ca6:	2320      	movs	r3, #32
 8002ca8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002cac:	2302      	movs	r3, #2
 8002cae:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002cb2:	2300      	movs	r3, #0
 8002cb4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002cb8:	2303      	movs	r3, #3
 8002cba:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002cbe:	2307      	movs	r3, #7
 8002cc0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002cc4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002cc8:	4619      	mov	r1, r3
 8002cca:	4884      	ldr	r0, [pc, #528]	; (8002edc <HAL_UART_MspInit+0x9b8>)
 8002ccc:	f003 fa04 	bl	80060d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART2_IRQn, 5, 0);
 8002cd0:	2200      	movs	r2, #0
 8002cd2:	2105      	movs	r1, #5
 8002cd4:	2026      	movs	r0, #38	; 0x26
 8002cd6:	f000 fee9 	bl	8003aac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002cda:	2026      	movs	r0, #38	; 0x26
 8002cdc:	f000 ff02 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
}
 8002ce0:	e0f2      	b.n	8002ec8 <HAL_UART_MspInit+0x9a4>
  else if(uartHandle->Instance==USART3)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	4a7e      	ldr	r2, [pc, #504]	; (8002ee0 <HAL_UART_MspInit+0x9bc>)
 8002ce8:	4293      	cmp	r3, r2
 8002cea:	d146      	bne.n	8002d7a <HAL_UART_MspInit+0x856>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART3;
 8002cec:	f44f 7380 	mov.w	r3, #256	; 0x100
 8002cf0:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.Usart3ClockSelection = RCC_USART3CLKSOURCE_PCLK1;
 8002cf2:	2300      	movs	r3, #0
 8002cf4:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002cf8:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002cfc:	4618      	mov	r0, r3
 8002cfe:	f006 f901 	bl	8008f04 <HAL_RCCEx_PeriphCLKConfig>
 8002d02:	4603      	mov	r3, r0
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	d001      	beq.n	8002d0c <HAL_UART_MspInit+0x7e8>
      Error_Handler();
 8002d08:	f7fe fb94 	bl	8001434 <Error_Handler>
    __HAL_RCC_USART3_CLK_ENABLE();
 8002d0c:	4b71      	ldr	r3, [pc, #452]	; (8002ed4 <HAL_UART_MspInit+0x9b0>)
 8002d0e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d10:	4a70      	ldr	r2, [pc, #448]	; (8002ed4 <HAL_UART_MspInit+0x9b0>)
 8002d12:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8002d16:	6413      	str	r3, [r2, #64]	; 0x40
 8002d18:	4b6e      	ldr	r3, [pc, #440]	; (8002ed4 <HAL_UART_MspInit+0x9b0>)
 8002d1a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d1c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8002d20:	617b      	str	r3, [r7, #20]
 8002d22:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8002d24:	4b6b      	ldr	r3, [pc, #428]	; (8002ed4 <HAL_UART_MspInit+0x9b0>)
 8002d26:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d28:	4a6a      	ldr	r2, [pc, #424]	; (8002ed4 <HAL_UART_MspInit+0x9b0>)
 8002d2a:	f043 0308 	orr.w	r3, r3, #8
 8002d2e:	6313      	str	r3, [r2, #48]	; 0x30
 8002d30:	4b68      	ldr	r3, [pc, #416]	; (8002ed4 <HAL_UART_MspInit+0x9b0>)
 8002d32:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d34:	f003 0308 	and.w	r3, r3, #8
 8002d38:	613b      	str	r3, [r7, #16]
 8002d3a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = STLK_RX_Pin|STLK_TX_Pin;
 8002d3c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002d40:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d44:	2302      	movs	r3, #2
 8002d46:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002d4a:	2301      	movs	r3, #1
 8002d4c:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d50:	2303      	movs	r3, #3
 8002d52:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8002d56:	2307      	movs	r3, #7
 8002d58:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8002d5c:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002d60:	4619      	mov	r1, r3
 8002d62:	485e      	ldr	r0, [pc, #376]	; (8002edc <HAL_UART_MspInit+0x9b8>)
 8002d64:	f003 f9b8 	bl	80060d8 <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART3_IRQn, 5, 0);
 8002d68:	2200      	movs	r2, #0
 8002d6a:	2105      	movs	r1, #5
 8002d6c:	2027      	movs	r0, #39	; 0x27
 8002d6e:	f000 fe9d 	bl	8003aac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART3_IRQn);
 8002d72:	2027      	movs	r0, #39	; 0x27
 8002d74:	f000 feb6 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
}
 8002d78:	e0a6      	b.n	8002ec8 <HAL_UART_MspInit+0x9a4>
  else if(uartHandle->Instance==USART6)
 8002d7a:	687b      	ldr	r3, [r7, #4]
 8002d7c:	681b      	ldr	r3, [r3, #0]
 8002d7e:	4a59      	ldr	r2, [pc, #356]	; (8002ee4 <HAL_UART_MspInit+0x9c0>)
 8002d80:	4293      	cmp	r3, r2
 8002d82:	f040 80a1 	bne.w	8002ec8 <HAL_UART_MspInit+0x9a4>
    PeriphClkInitStruct.PeriphClockSelection = RCC_PERIPHCLK_USART6;
 8002d86:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002d8a:	65bb      	str	r3, [r7, #88]	; 0x58
    PeriphClkInitStruct.Usart6ClockSelection = RCC_USART6CLKSOURCE_PCLK2;
 8002d8c:	2300      	movs	r3, #0
 8002d8e:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
    if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInitStruct) != HAL_OK)
 8002d92:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8002d96:	4618      	mov	r0, r3
 8002d98:	f006 f8b4 	bl	8008f04 <HAL_RCCEx_PeriphCLKConfig>
 8002d9c:	4603      	mov	r3, r0
 8002d9e:	2b00      	cmp	r3, #0
 8002da0:	d001      	beq.n	8002da6 <HAL_UART_MspInit+0x882>
      Error_Handler();
 8002da2:	f7fe fb47 	bl	8001434 <Error_Handler>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002da6:	4b4b      	ldr	r3, [pc, #300]	; (8002ed4 <HAL_UART_MspInit+0x9b0>)
 8002da8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002daa:	4a4a      	ldr	r2, [pc, #296]	; (8002ed4 <HAL_UART_MspInit+0x9b0>)
 8002dac:	f043 0320 	orr.w	r3, r3, #32
 8002db0:	6453      	str	r3, [r2, #68]	; 0x44
 8002db2:	4b48      	ldr	r3, [pc, #288]	; (8002ed4 <HAL_UART_MspInit+0x9b0>)
 8002db4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002db6:	f003 0320 	and.w	r3, r3, #32
 8002dba:	60fb      	str	r3, [r7, #12]
 8002dbc:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002dbe:	4b45      	ldr	r3, [pc, #276]	; (8002ed4 <HAL_UART_MspInit+0x9b0>)
 8002dc0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dc2:	4a44      	ldr	r2, [pc, #272]	; (8002ed4 <HAL_UART_MspInit+0x9b0>)
 8002dc4:	f043 0304 	orr.w	r3, r3, #4
 8002dc8:	6313      	str	r3, [r2, #48]	; 0x30
 8002dca:	4b42      	ldr	r3, [pc, #264]	; (8002ed4 <HAL_UART_MspInit+0x9b0>)
 8002dcc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002dce:	f003 0304 	and.w	r3, r3, #4
 8002dd2:	60bb      	str	r3, [r7, #8]
 8002dd4:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002dd6:	23c0      	movs	r3, #192	; 0xc0
 8002dd8:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ddc:	2302      	movs	r3, #2
 8002dde:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002de2:	2300      	movs	r3, #0
 8002de4:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002de8:	2303      	movs	r3, #3
 8002dea:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002dee:	2308      	movs	r3, #8
 8002df0:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002df4:	f107 03dc 	add.w	r3, r7, #220	; 0xdc
 8002df8:	4619      	mov	r1, r3
 8002dfa:	483b      	ldr	r0, [pc, #236]	; (8002ee8 <HAL_UART_MspInit+0x9c4>)
 8002dfc:	f003 f96c 	bl	80060d8 <HAL_GPIO_Init>
    hdma_usart6_rx.Instance = DMA2_Stream1;
 8002e00:	4b3a      	ldr	r3, [pc, #232]	; (8002eec <HAL_UART_MspInit+0x9c8>)
 8002e02:	4a3b      	ldr	r2, [pc, #236]	; (8002ef0 <HAL_UART_MspInit+0x9cc>)
 8002e04:	601a      	str	r2, [r3, #0]
    hdma_usart6_rx.Init.Channel = DMA_CHANNEL_5;
 8002e06:	4b39      	ldr	r3, [pc, #228]	; (8002eec <HAL_UART_MspInit+0x9c8>)
 8002e08:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002e0c:	605a      	str	r2, [r3, #4]
    hdma_usart6_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002e0e:	4b37      	ldr	r3, [pc, #220]	; (8002eec <HAL_UART_MspInit+0x9c8>)
 8002e10:	2200      	movs	r2, #0
 8002e12:	609a      	str	r2, [r3, #8]
    hdma_usart6_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e14:	4b35      	ldr	r3, [pc, #212]	; (8002eec <HAL_UART_MspInit+0x9c8>)
 8002e16:	2200      	movs	r2, #0
 8002e18:	60da      	str	r2, [r3, #12]
    hdma_usart6_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002e1a:	4b34      	ldr	r3, [pc, #208]	; (8002eec <HAL_UART_MspInit+0x9c8>)
 8002e1c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e20:	611a      	str	r2, [r3, #16]
    hdma_usart6_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e22:	4b32      	ldr	r3, [pc, #200]	; (8002eec <HAL_UART_MspInit+0x9c8>)
 8002e24:	2200      	movs	r2, #0
 8002e26:	615a      	str	r2, [r3, #20]
    hdma_usart6_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e28:	4b30      	ldr	r3, [pc, #192]	; (8002eec <HAL_UART_MspInit+0x9c8>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	619a      	str	r2, [r3, #24]
    hdma_usart6_rx.Init.Mode = DMA_NORMAL;
 8002e2e:	4b2f      	ldr	r3, [pc, #188]	; (8002eec <HAL_UART_MspInit+0x9c8>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	61da      	str	r2, [r3, #28]
    hdma_usart6_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002e34:	4b2d      	ldr	r3, [pc, #180]	; (8002eec <HAL_UART_MspInit+0x9c8>)
 8002e36:	2200      	movs	r2, #0
 8002e38:	621a      	str	r2, [r3, #32]
    hdma_usart6_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e3a:	4b2c      	ldr	r3, [pc, #176]	; (8002eec <HAL_UART_MspInit+0x9c8>)
 8002e3c:	2200      	movs	r2, #0
 8002e3e:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_rx) != HAL_OK)
 8002e40:	482a      	ldr	r0, [pc, #168]	; (8002eec <HAL_UART_MspInit+0x9c8>)
 8002e42:	f000 ff59 	bl	8003cf8 <HAL_DMA_Init>
 8002e46:	4603      	mov	r3, r0
 8002e48:	2b00      	cmp	r3, #0
 8002e4a:	d001      	beq.n	8002e50 <HAL_UART_MspInit+0x92c>
      Error_Handler();
 8002e4c:	f7fe faf2 	bl	8001434 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart6_rx);
 8002e50:	687b      	ldr	r3, [r7, #4]
 8002e52:	4a26      	ldr	r2, [pc, #152]	; (8002eec <HAL_UART_MspInit+0x9c8>)
 8002e54:	675a      	str	r2, [r3, #116]	; 0x74
 8002e56:	4a25      	ldr	r2, [pc, #148]	; (8002eec <HAL_UART_MspInit+0x9c8>)
 8002e58:	687b      	ldr	r3, [r7, #4]
 8002e5a:	6393      	str	r3, [r2, #56]	; 0x38
    hdma_usart6_tx.Instance = DMA2_Stream6;
 8002e5c:	4b25      	ldr	r3, [pc, #148]	; (8002ef4 <HAL_UART_MspInit+0x9d0>)
 8002e5e:	4a26      	ldr	r2, [pc, #152]	; (8002ef8 <HAL_UART_MspInit+0x9d4>)
 8002e60:	601a      	str	r2, [r3, #0]
    hdma_usart6_tx.Init.Channel = DMA_CHANNEL_5;
 8002e62:	4b24      	ldr	r3, [pc, #144]	; (8002ef4 <HAL_UART_MspInit+0x9d0>)
 8002e64:	f04f 6220 	mov.w	r2, #167772160	; 0xa000000
 8002e68:	605a      	str	r2, [r3, #4]
    hdma_usart6_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002e6a:	4b22      	ldr	r3, [pc, #136]	; (8002ef4 <HAL_UART_MspInit+0x9d0>)
 8002e6c:	2240      	movs	r2, #64	; 0x40
 8002e6e:	609a      	str	r2, [r3, #8]
    hdma_usart6_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002e70:	4b20      	ldr	r3, [pc, #128]	; (8002ef4 <HAL_UART_MspInit+0x9d0>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	60da      	str	r2, [r3, #12]
    hdma_usart6_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002e76:	4b1f      	ldr	r3, [pc, #124]	; (8002ef4 <HAL_UART_MspInit+0x9d0>)
 8002e78:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002e7c:	611a      	str	r2, [r3, #16]
    hdma_usart6_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002e7e:	4b1d      	ldr	r3, [pc, #116]	; (8002ef4 <HAL_UART_MspInit+0x9d0>)
 8002e80:	2200      	movs	r2, #0
 8002e82:	615a      	str	r2, [r3, #20]
    hdma_usart6_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002e84:	4b1b      	ldr	r3, [pc, #108]	; (8002ef4 <HAL_UART_MspInit+0x9d0>)
 8002e86:	2200      	movs	r2, #0
 8002e88:	619a      	str	r2, [r3, #24]
    hdma_usart6_tx.Init.Mode = DMA_NORMAL;
 8002e8a:	4b1a      	ldr	r3, [pc, #104]	; (8002ef4 <HAL_UART_MspInit+0x9d0>)
 8002e8c:	2200      	movs	r2, #0
 8002e8e:	61da      	str	r2, [r3, #28]
    hdma_usart6_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002e90:	4b18      	ldr	r3, [pc, #96]	; (8002ef4 <HAL_UART_MspInit+0x9d0>)
 8002e92:	2200      	movs	r2, #0
 8002e94:	621a      	str	r2, [r3, #32]
    hdma_usart6_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002e96:	4b17      	ldr	r3, [pc, #92]	; (8002ef4 <HAL_UART_MspInit+0x9d0>)
 8002e98:	2200      	movs	r2, #0
 8002e9a:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart6_tx) != HAL_OK)
 8002e9c:	4815      	ldr	r0, [pc, #84]	; (8002ef4 <HAL_UART_MspInit+0x9d0>)
 8002e9e:	f000 ff2b 	bl	8003cf8 <HAL_DMA_Init>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	d001      	beq.n	8002eac <HAL_UART_MspInit+0x988>
      Error_Handler();
 8002ea8:	f7fe fac4 	bl	8001434 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart6_tx);
 8002eac:	687b      	ldr	r3, [r7, #4]
 8002eae:	4a11      	ldr	r2, [pc, #68]	; (8002ef4 <HAL_UART_MspInit+0x9d0>)
 8002eb0:	671a      	str	r2, [r3, #112]	; 0x70
 8002eb2:	4a10      	ldr	r2, [pc, #64]	; (8002ef4 <HAL_UART_MspInit+0x9d0>)
 8002eb4:	687b      	ldr	r3, [r7, #4]
 8002eb6:	6393      	str	r3, [r2, #56]	; 0x38
    HAL_NVIC_SetPriority(USART6_IRQn, 5, 0);
 8002eb8:	2200      	movs	r2, #0
 8002eba:	2105      	movs	r1, #5
 8002ebc:	2047      	movs	r0, #71	; 0x47
 8002ebe:	f000 fdf5 	bl	8003aac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 8002ec2:	2047      	movs	r0, #71	; 0x47
 8002ec4:	f000 fe0e 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
}
 8002ec8:	bf00      	nop
 8002eca:	37f0      	adds	r7, #240	; 0xf0
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	40004400 	.word	0x40004400
 8002ed4:	40023800 	.word	0x40023800
 8002ed8:	40020000 	.word	0x40020000
 8002edc:	40020c00 	.word	0x40020c00
 8002ee0:	40004800 	.word	0x40004800
 8002ee4:	40011400 	.word	0x40011400
 8002ee8:	40020800 	.word	0x40020800
 8002eec:	200013a4 	.word	0x200013a4
 8002ef0:	40026428 	.word	0x40026428
 8002ef4:	20001404 	.word	0x20001404
 8002ef8:	400264a0 	.word	0x400264a0

08002efc <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack      /* set stack pointer */
 8002efc:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002f34 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002f00:	f7ff f97e 	bl	8002200 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002f04:	480c      	ldr	r0, [pc, #48]	; (8002f38 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8002f06:	490d      	ldr	r1, [pc, #52]	; (8002f3c <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002f08:	4a0d      	ldr	r2, [pc, #52]	; (8002f40 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002f0a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002f0c:	e002      	b.n	8002f14 <LoopCopyDataInit>

08002f0e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002f0e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002f10:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002f12:	3304      	adds	r3, #4

08002f14 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002f14:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002f16:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002f18:	d3f9      	bcc.n	8002f0e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002f1a:	4a0a      	ldr	r2, [pc, #40]	; (8002f44 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002f1c:	4c0a      	ldr	r4, [pc, #40]	; (8002f48 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002f1e:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002f20:	e001      	b.n	8002f26 <LoopFillZerobss>

08002f22 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002f22:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002f24:	3204      	adds	r2, #4

08002f26 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002f26:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002f28:	d3fb      	bcc.n	8002f22 <FillZerobss>
  
/* Call static constructors */
    bl __libc_init_array
 8002f2a:	f01a fbc9 	bl	801d6c0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002f2e:	f7fe f9c5 	bl	80012bc <main>
  bx  lr    
 8002f32:	4770      	bx	lr
  ldr   sp, =_estack      /* set stack pointer */
 8002f34:	20050000 	.word	0x20050000
  ldr r0, =_sdata
 8002f38:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002f3c:	200001a4 	.word	0x200001a4
  ldr r2, =_sidata
 8002f40:	080218b8 	.word	0x080218b8
  ldr r2, =_sbss
 8002f44:	200002e4 	.word	0x200002e4
  ldr r4, =_ebss
 8002f48:	2002431c 	.word	0x2002431c

08002f4c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002f4c:	e7fe      	b.n	8002f4c <ADC_IRQHandler>

08002f4e <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8002f4e:	b480      	push	{r7}
 8002f50:	b083      	sub	sp, #12
 8002f52:	af00      	add	r7, sp, #0
 8002f54:	6078      	str	r0, [r7, #4]
 8002f56:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8002f58:	687b      	ldr	r3, [r7, #4]
 8002f5a:	2b00      	cmp	r3, #0
 8002f5c:	d00b      	beq.n	8002f76 <LAN8742_RegisterBusIO+0x28>
 8002f5e:	683b      	ldr	r3, [r7, #0]
 8002f60:	68db      	ldr	r3, [r3, #12]
 8002f62:	2b00      	cmp	r3, #0
 8002f64:	d007      	beq.n	8002f76 <LAN8742_RegisterBusIO+0x28>
 8002f66:	683b      	ldr	r3, [r7, #0]
 8002f68:	689b      	ldr	r3, [r3, #8]
 8002f6a:	2b00      	cmp	r3, #0
 8002f6c:	d003      	beq.n	8002f76 <LAN8742_RegisterBusIO+0x28>
 8002f6e:	683b      	ldr	r3, [r7, #0]
 8002f70:	691b      	ldr	r3, [r3, #16]
 8002f72:	2b00      	cmp	r3, #0
 8002f74:	d102      	bne.n	8002f7c <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 8002f76:	f04f 33ff 	mov.w	r3, #4294967295
 8002f7a:	e014      	b.n	8002fa6 <LAN8742_RegisterBusIO+0x58>
  }

  pObj->IO.Init = ioctx->Init;
 8002f7c:	683b      	ldr	r3, [r7, #0]
 8002f7e:	681a      	ldr	r2, [r3, #0]
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 8002f84:	683b      	ldr	r3, [r7, #0]
 8002f86:	685a      	ldr	r2, [r3, #4]
 8002f88:	687b      	ldr	r3, [r7, #4]
 8002f8a:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8002f8c:	683b      	ldr	r3, [r7, #0]
 8002f8e:	68da      	ldr	r2, [r3, #12]
 8002f90:	687b      	ldr	r3, [r7, #4]
 8002f92:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 8002f94:	683b      	ldr	r3, [r7, #0]
 8002f96:	689a      	ldr	r2, [r3, #8]
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	691a      	ldr	r2, [r3, #16]
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	619a      	str	r2, [r3, #24]

  return LAN8742_STATUS_OK;
 8002fa4:	2300      	movs	r3, #0
}
 8002fa6:	4618      	mov	r0, r3
 8002fa8:	370c      	adds	r7, #12
 8002faa:	46bd      	mov	sp, r7
 8002fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fb0:	4770      	bx	lr

08002fb2 <LAN8742_Init>:
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ADDRESS_ERROR if cannot find device address
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 8002fb2:	b580      	push	{r7, lr}
 8002fb4:	b086      	sub	sp, #24
 8002fb6:	af00      	add	r7, sp, #0
 8002fb8:	6078      	str	r0, [r7, #4]
   uint32_t regvalue = 0, addr = 0;
 8002fba:	2300      	movs	r3, #0
 8002fbc:	60fb      	str	r3, [r7, #12]
 8002fbe:	2300      	movs	r3, #0
 8002fc0:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 8002fc2:	2300      	movs	r3, #0
 8002fc4:	613b      	str	r3, [r7, #16]

   if(pObj->Is_Initialized == 0)
 8002fc6:	687b      	ldr	r3, [r7, #4]
 8002fc8:	685b      	ldr	r3, [r3, #4]
 8002fca:	2b00      	cmp	r3, #0
 8002fcc:	d139      	bne.n	8003042 <LAN8742_Init+0x90>
   {
     if(pObj->IO.Init != 0)
 8002fce:	687b      	ldr	r3, [r7, #4]
 8002fd0:	689b      	ldr	r3, [r3, #8]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d002      	beq.n	8002fdc <LAN8742_Init+0x2a>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	689b      	ldr	r3, [r3, #8]
 8002fda:	4798      	blx	r3
     }

     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 8002fdc:	687b      	ldr	r3, [r7, #4]
 8002fde:	2220      	movs	r2, #32
 8002fe0:	601a      	str	r2, [r3, #0]

     /* Get the device address from special mode register */
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8002fe2:	2300      	movs	r3, #0
 8002fe4:	617b      	str	r3, [r7, #20]
 8002fe6:	e01c      	b.n	8003022 <LAN8742_Init+0x70>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 8002fe8:	687b      	ldr	r3, [r7, #4]
 8002fea:	695b      	ldr	r3, [r3, #20]
 8002fec:	f107 020c 	add.w	r2, r7, #12
 8002ff0:	2112      	movs	r1, #18
 8002ff2:	6978      	ldr	r0, [r7, #20]
 8002ff4:	4798      	blx	r3
 8002ff6:	4603      	mov	r3, r0
 8002ff8:	2b00      	cmp	r3, #0
 8002ffa:	da03      	bge.n	8003004 <LAN8742_Init+0x52>
       {
         status = LAN8742_STATUS_READ_ERROR;
 8002ffc:	f06f 0304 	mvn.w	r3, #4
 8003000:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address
            continue with next address */
         continue;
 8003002:	e00b      	b.n	800301c <LAN8742_Init+0x6a>
       }

       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	f003 031f 	and.w	r3, r3, #31
 800300a:	697a      	ldr	r2, [r7, #20]
 800300c:	429a      	cmp	r2, r3
 800300e:	d105      	bne.n	800301c <LAN8742_Init+0x6a>
       {
         pObj->DevAddr = addr;
 8003010:	687b      	ldr	r3, [r7, #4]
 8003012:	697a      	ldr	r2, [r7, #20]
 8003014:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8003016:	2300      	movs	r3, #0
 8003018:	613b      	str	r3, [r7, #16]
         break;
 800301a:	e005      	b.n	8003028 <LAN8742_Init+0x76>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 800301c:	697b      	ldr	r3, [r7, #20]
 800301e:	3301      	adds	r3, #1
 8003020:	617b      	str	r3, [r7, #20]
 8003022:	697b      	ldr	r3, [r7, #20]
 8003024:	2b1f      	cmp	r3, #31
 8003026:	d9df      	bls.n	8002fe8 <LAN8742_Init+0x36>
       }
     }

     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	2b1f      	cmp	r3, #31
 800302e:	d902      	bls.n	8003036 <LAN8742_Init+0x84>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 8003030:	f06f 0302 	mvn.w	r3, #2
 8003034:	613b      	str	r3, [r7, #16]
     }

     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8003036:	693b      	ldr	r3, [r7, #16]
 8003038:	2b00      	cmp	r3, #0
 800303a:	d102      	bne.n	8003042 <LAN8742_Init+0x90>
     {
       pObj->Is_Initialized = 1;
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	2201      	movs	r2, #1
 8003040:	605a      	str	r2, [r3, #4]
     }
   }

   return status;
 8003042:	693b      	ldr	r3, [r7, #16]
 }
 8003044:	4618      	mov	r0, r3
 8003046:	3718      	adds	r7, #24
 8003048:	46bd      	mov	sp, r7
 800304a:	bd80      	pop	{r7, pc}

0800304c <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD
  *         LAN8742_STATUS_READ_ERROR if cannot read register
  *         LAN8742_STATUS_WRITE_ERROR if cannot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800304c:	b580      	push	{r7, lr}
 800304e:	b084      	sub	sp, #16
 8003050:	af00      	add	r7, sp, #0
 8003052:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8003054:	2300      	movs	r3, #0
 8003056:	60fb      	str	r3, [r7, #12]

  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003058:	687b      	ldr	r3, [r7, #4]
 800305a:	695b      	ldr	r3, [r3, #20]
 800305c:	687a      	ldr	r2, [r7, #4]
 800305e:	6810      	ldr	r0, [r2, #0]
 8003060:	f107 020c 	add.w	r2, r7, #12
 8003064:	2101      	movs	r1, #1
 8003066:	4798      	blx	r3
 8003068:	4603      	mov	r3, r0
 800306a:	2b00      	cmp	r3, #0
 800306c:	da02      	bge.n	8003074 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800306e:	f06f 0304 	mvn.w	r3, #4
 8003072:	e06e      	b.n	8003152 <LAN8742_GetLinkState+0x106>
  }

  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8003074:	687b      	ldr	r3, [r7, #4]
 8003076:	695b      	ldr	r3, [r3, #20]
 8003078:	687a      	ldr	r2, [r7, #4]
 800307a:	6810      	ldr	r0, [r2, #0]
 800307c:	f107 020c 	add.w	r2, r7, #12
 8003080:	2101      	movs	r1, #1
 8003082:	4798      	blx	r3
 8003084:	4603      	mov	r3, r0
 8003086:	2b00      	cmp	r3, #0
 8003088:	da02      	bge.n	8003090 <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 800308a:	f06f 0304 	mvn.w	r3, #4
 800308e:	e060      	b.n	8003152 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 8003090:	68fb      	ldr	r3, [r7, #12]
 8003092:	f003 0304 	and.w	r3, r3, #4
 8003096:	2b00      	cmp	r3, #0
 8003098:	d101      	bne.n	800309e <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;
 800309a:	2301      	movs	r3, #1
 800309c:	e059      	b.n	8003152 <LAN8742_GetLinkState+0x106>
  }

  /* Check Auto negotiation */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	695b      	ldr	r3, [r3, #20]
 80030a2:	687a      	ldr	r2, [r7, #4]
 80030a4:	6810      	ldr	r0, [r2, #0]
 80030a6:	f107 020c 	add.w	r2, r7, #12
 80030aa:	2100      	movs	r1, #0
 80030ac:	4798      	blx	r3
 80030ae:	4603      	mov	r3, r0
 80030b0:	2b00      	cmp	r3, #0
 80030b2:	da02      	bge.n	80030ba <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 80030b4:	f06f 0304 	mvn.w	r3, #4
 80030b8:	e04b      	b.n	8003152 <LAN8742_GetLinkState+0x106>
  }

  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 80030ba:	68fb      	ldr	r3, [r7, #12]
 80030bc:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80030c0:	2b00      	cmp	r3, #0
 80030c2:	d11b      	bne.n	80030fc <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE))
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030ca:	2b00      	cmp	r3, #0
 80030cc:	d006      	beq.n	80030dc <LAN8742_GetLinkState+0x90>
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	d001      	beq.n	80030dc <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80030d8:	2302      	movs	r3, #2
 80030da:	e03a      	b.n	8003152 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 80030dc:	68fb      	ldr	r3, [r7, #12]
 80030de:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80030e6:	2303      	movs	r3, #3
 80030e8:	e033      	b.n	8003152 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80030f0:	2b00      	cmp	r3, #0
 80030f2:	d001      	beq.n	80030f8 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80030f4:	2304      	movs	r3, #4
 80030f6:	e02c      	b.n	8003152 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80030f8:	2305      	movs	r3, #5
 80030fa:	e02a      	b.n	8003152 <LAN8742_GetLinkState+0x106>
    }
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80030fc:	687b      	ldr	r3, [r7, #4]
 80030fe:	695b      	ldr	r3, [r3, #20]
 8003100:	687a      	ldr	r2, [r7, #4]
 8003102:	6810      	ldr	r0, [r2, #0]
 8003104:	f107 020c 	add.w	r2, r7, #12
 8003108:	211f      	movs	r1, #31
 800310a:	4798      	blx	r3
 800310c:	4603      	mov	r3, r0
 800310e:	2b00      	cmp	r3, #0
 8003110:	da02      	bge.n	8003118 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 8003112:	f06f 0304 	mvn.w	r3, #4
 8003116:	e01c      	b.n	8003152 <LAN8742_GetLinkState+0x106>
    }

    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 8003118:	68fb      	ldr	r3, [r7, #12]
 800311a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800311e:	2b00      	cmp	r3, #0
 8003120:	d101      	bne.n	8003126 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 8003122:	2306      	movs	r3, #6
 8003124:	e015      	b.n	8003152 <LAN8742_GetLinkState+0x106>
    }

    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	f003 031c 	and.w	r3, r3, #28
 800312c:	2b18      	cmp	r3, #24
 800312e:	d101      	bne.n	8003134 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8003130:	2302      	movs	r3, #2
 8003132:	e00e      	b.n	8003152 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	f003 031c 	and.w	r3, r3, #28
 800313a:	2b08      	cmp	r3, #8
 800313c:	d101      	bne.n	8003142 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 800313e:	2303      	movs	r3, #3
 8003140:	e007      	b.n	8003152 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8003142:	68fb      	ldr	r3, [r7, #12]
 8003144:	f003 031c 	and.w	r3, r3, #28
 8003148:	2b14      	cmp	r3, #20
 800314a:	d101      	bne.n	8003150 <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800314c:	2304      	movs	r3, #4
 800314e:	e000      	b.n	8003152 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 8003150:	2305      	movs	r3, #5
    }
  }
}
 8003152:	4618      	mov	r0, r3
 8003154:	3710      	adds	r7, #16
 8003156:	46bd      	mov	sp, r7
 8003158:	bd80      	pop	{r7, pc}

0800315a <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800315a:	b580      	push	{r7, lr}
 800315c:	af00      	add	r7, sp, #0
#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 800315e:	2003      	movs	r0, #3
 8003160:	f000 fc99 	bl	8003a96 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003164:	200f      	movs	r0, #15
 8003166:	f7fe fd6d 	bl	8001c44 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800316a:	f7fe fd3b 	bl	8001be4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 800316e:	2300      	movs	r3, #0
}
 8003170:	4618      	mov	r0, r3
 8003172:	bd80      	pop	{r7, pc}

08003174 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003174:	b480      	push	{r7}
 8003176:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003178:	4b06      	ldr	r3, [pc, #24]	; (8003194 <HAL_IncTick+0x20>)
 800317a:	781b      	ldrb	r3, [r3, #0]
 800317c:	461a      	mov	r2, r3
 800317e:	4b06      	ldr	r3, [pc, #24]	; (8003198 <HAL_IncTick+0x24>)
 8003180:	681b      	ldr	r3, [r3, #0]
 8003182:	4413      	add	r3, r2
 8003184:	4a04      	ldr	r2, [pc, #16]	; (8003198 <HAL_IncTick+0x24>)
 8003186:	6013      	str	r3, [r2, #0]
}
 8003188:	bf00      	nop
 800318a:	46bd      	mov	sp, r7
 800318c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003190:	4770      	bx	lr
 8003192:	bf00      	nop
 8003194:	20000008 	.word	0x20000008
 8003198:	20001464 	.word	0x20001464

0800319c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800319c:	b480      	push	{r7}
 800319e:	af00      	add	r7, sp, #0
  return uwTick;
 80031a0:	4b03      	ldr	r3, [pc, #12]	; (80031b0 <HAL_GetTick+0x14>)
 80031a2:	681b      	ldr	r3, [r3, #0]
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	46bd      	mov	sp, r7
 80031a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ac:	4770      	bx	lr
 80031ae:	bf00      	nop
 80031b0:	20001464 	.word	0x20001464

080031b4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay  specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80031b4:	b580      	push	{r7, lr}
 80031b6:	b084      	sub	sp, #16
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80031bc:	f7ff ffee 	bl	800319c <HAL_GetTick>
 80031c0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80031c2:	687b      	ldr	r3, [r7, #4]
 80031c4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80031c6:	68fb      	ldr	r3, [r7, #12]
 80031c8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80031cc:	d005      	beq.n	80031da <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80031ce:	4b0a      	ldr	r3, [pc, #40]	; (80031f8 <HAL_Delay+0x44>)
 80031d0:	781b      	ldrb	r3, [r3, #0]
 80031d2:	461a      	mov	r2, r3
 80031d4:	68fb      	ldr	r3, [r7, #12]
 80031d6:	4413      	add	r3, r2
 80031d8:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80031da:	bf00      	nop
 80031dc:	f7ff ffde 	bl	800319c <HAL_GetTick>
 80031e0:	4602      	mov	r2, r0
 80031e2:	68bb      	ldr	r3, [r7, #8]
 80031e4:	1ad3      	subs	r3, r2, r3
 80031e6:	68fa      	ldr	r2, [r7, #12]
 80031e8:	429a      	cmp	r2, r3
 80031ea:	d8f7      	bhi.n	80031dc <HAL_Delay+0x28>
  {
  }
}
 80031ec:	bf00      	nop
 80031ee:	bf00      	nop
 80031f0:	3710      	adds	r7, #16
 80031f2:	46bd      	mov	sp, r7
 80031f4:	bd80      	pop	{r7, pc}
 80031f6:	bf00      	nop
 80031f8:	20000008 	.word	0x20000008

080031fc <HAL_GetREVID>:
/**
  * @brief  Returns the device revision identifier.
  * @retval Device revision identifier
  */
uint32_t HAL_GetREVID(void)
{
 80031fc:	b480      	push	{r7}
 80031fe:	af00      	add	r7, sp, #0
   return((DBGMCU->IDCODE) >> 16U);
 8003200:	4b03      	ldr	r3, [pc, #12]	; (8003210 <HAL_GetREVID+0x14>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	0c1b      	lsrs	r3, r3, #16
}
 8003206:	4618      	mov	r0, r3
 8003208:	46bd      	mov	sp, r7
 800320a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800320e:	4770      	bx	lr
 8003210:	e0042000 	.word	0xe0042000

08003214 <HAL_GetUIDw0>:
/**
  * @brief  Returns first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 8003214:	b480      	push	{r7}
 8003216:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 8003218:	4b03      	ldr	r3, [pc, #12]	; (8003228 <HAL_GetUIDw0+0x14>)
 800321a:	681b      	ldr	r3, [r3, #0]
}
 800321c:	4618      	mov	r0, r3
 800321e:	46bd      	mov	sp, r7
 8003220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003224:	4770      	bx	lr
 8003226:	bf00      	nop
 8003228:	1ff0f420 	.word	0x1ff0f420

0800322c <HAL_GetUIDw1>:
/**
  * @brief  Returns second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800322c:	b480      	push	{r7}
 800322e:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 4U))));
 8003230:	4b03      	ldr	r3, [pc, #12]	; (8003240 <HAL_GetUIDw1+0x14>)
 8003232:	681b      	ldr	r3, [r3, #0]
}
 8003234:	4618      	mov	r0, r3
 8003236:	46bd      	mov	sp, r7
 8003238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323c:	4770      	bx	lr
 800323e:	bf00      	nop
 8003240:	1ff0f424 	.word	0x1ff0f424

08003244 <HAL_GetUIDw2>:
/**
  * @brief  Returns third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 8003244:	b480      	push	{r7}
 8003246:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 8U))));
 8003248:	4b03      	ldr	r3, [pc, #12]	; (8003258 <HAL_GetUIDw2+0x14>)
 800324a:	681b      	ldr	r3, [r3, #0]
}
 800324c:	4618      	mov	r0, r3
 800324e:	46bd      	mov	sp, r7
 8003250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003254:	4770      	bx	lr
 8003256:	bf00      	nop
 8003258:	1ff0f428 	.word	0x1ff0f428

0800325c <HAL_ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef* hadc)
{
 800325c:	b580      	push	{r7, lr}
 800325e:	b084      	sub	sp, #16
 8003260:	af00      	add	r7, sp, #0
 8003262:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 8003264:	2300      	movs	r3, #0
 8003266:	73fb      	strb	r3, [r7, #15]
  
  /* Check ADC handle */
  if(hadc == NULL)
 8003268:	687b      	ldr	r3, [r7, #4]
 800326a:	2b00      	cmp	r3, #0
 800326c:	d101      	bne.n	8003272 <HAL_ADC_Init+0x16>
  {
    return HAL_ERROR;
 800326e:	2301      	movs	r3, #1
 8003270:	e031      	b.n	80032d6 <HAL_ADC_Init+0x7a>
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
  {
    assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge));
  }

  if(hadc->State == HAL_ADC_STATE_RESET)
 8003272:	687b      	ldr	r3, [r7, #4]
 8003274:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003276:	2b00      	cmp	r3, #0
 8003278:	d109      	bne.n	800328e <HAL_ADC_Init+0x32>

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800327a:	6878      	ldr	r0, [r7, #4]
 800327c:	f7fd fa8c 	bl	8000798 <HAL_ADC_MspInit>
#endif /* USE_HAL_ADC_REGISTER_CALLBACKS */

    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 8003280:	687b      	ldr	r3, [r7, #4]
 8003282:	2200      	movs	r2, #0
 8003284:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	2200      	movs	r2, #0
 800328a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  }
  
  /* Configuration of ADC parameters if previous preliminary actions are      */ 
  /* correctly completed.                                                     */
  if (HAL_IS_BIT_CLR(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL))
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003292:	f003 0310 	and.w	r3, r3, #16
 8003296:	2b00      	cmp	r3, #0
 8003298:	d116      	bne.n	80032c8 <HAL_ADC_Init+0x6c>
  {
    /* Set ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 800329a:	687b      	ldr	r3, [r7, #4]
 800329c:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800329e:	4b10      	ldr	r3, [pc, #64]	; (80032e0 <HAL_ADC_Init+0x84>)
 80032a0:	4013      	ands	r3, r2
 80032a2:	f043 0202 	orr.w	r2, r3, #2
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_REG_BUSY | HAL_ADC_STATE_INJ_BUSY,
                      HAL_ADC_STATE_BUSY_INTERNAL);
    
    /* Set ADC parameters */
    ADC_Init(hadc);
 80032aa:	6878      	ldr	r0, [r7, #4]
 80032ac:	f000 fa4c 	bl	8003748 <ADC_Init>
    
    /* Set ADC error code to none */
    ADC_CLEAR_ERRORCODE(hadc);
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	645a      	str	r2, [r3, #68]	; 0x44
    
    /* Set the ADC state */
    ADC_STATE_CLR_SET(hadc->State,
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	f023 0303 	bic.w	r3, r3, #3
 80032be:	f043 0201 	orr.w	r2, r3, #1
 80032c2:	687b      	ldr	r3, [r7, #4]
 80032c4:	641a      	str	r2, [r3, #64]	; 0x40
 80032c6:	e001      	b.n	80032cc <HAL_ADC_Init+0x70>
                      HAL_ADC_STATE_BUSY_INTERNAL,
                      HAL_ADC_STATE_READY);
  }
  else
  {
    tmp_hal_status = HAL_ERROR;
 80032c8:	2301      	movs	r3, #1
 80032ca:	73fb      	strb	r3, [r7, #15]
  }
  
  /* Release Lock */
  __HAL_UNLOCK(hadc);
 80032cc:	687b      	ldr	r3, [r7, #4]
 80032ce:	2200      	movs	r2, #0
 80032d0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Return function status */
  return tmp_hal_status;
 80032d4:	7bfb      	ldrb	r3, [r7, #15]
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3710      	adds	r7, #16
 80032da:	46bd      	mov	sp, r7
 80032dc:	bd80      	pop	{r7, pc}
 80032de:	bf00      	nop
 80032e0:	ffffeefd 	.word	0xffffeefd

080032e4 <HAL_ADC_Start>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef* hadc)
{
 80032e4:	b480      	push	{r7}
 80032e6:	b085      	sub	sp, #20
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  __IO uint32_t counter = 0;
 80032ec:	2300      	movs	r3, #0
 80032ee:	60fb      	str	r3, [r7, #12]
  /* Check the parameters */
  assert_param(IS_FUNCTIONAL_STATE(hadc->Init.ContinuousConvMode));
  assert_param(IS_ADC_EXT_TRIG_EDGE(hadc->Init.ExternalTrigConvEdge)); 
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80032f0:	687b      	ldr	r3, [r7, #4]
 80032f2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80032f6:	2b01      	cmp	r3, #1
 80032f8:	d101      	bne.n	80032fe <HAL_ADC_Start+0x1a>
 80032fa:	2302      	movs	r3, #2
 80032fc:	e0ad      	b.n	800345a <HAL_ADC_Start+0x176>
 80032fe:	687b      	ldr	r3, [r7, #4]
 8003300:	2201      	movs	r2, #1
 8003302:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Enable the ADC peripheral */
  /* Check if ADC peripheral is disabled in order to enable it and wait during 
  Tstab time the ADC's stabilization */
  if((hadc->Instance->CR2 & ADC_CR2_ADON) != ADC_CR2_ADON)
 8003306:	687b      	ldr	r3, [r7, #4]
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f003 0301 	and.w	r3, r3, #1
 8003310:	2b01      	cmp	r3, #1
 8003312:	d018      	beq.n	8003346 <HAL_ADC_Start+0x62>
  {  
    /* Enable the Peripheral */
    __HAL_ADC_ENABLE(hadc);
 8003314:	687b      	ldr	r3, [r7, #4]
 8003316:	681b      	ldr	r3, [r3, #0]
 8003318:	689a      	ldr	r2, [r3, #8]
 800331a:	687b      	ldr	r3, [r7, #4]
 800331c:	681b      	ldr	r3, [r3, #0]
 800331e:	f042 0201 	orr.w	r2, r2, #1
 8003322:	609a      	str	r2, [r3, #8]
    
    /* Delay for ADC stabilization time */
    /* Compute number of CPU cycles to wait for */
    counter = (ADC_STAB_DELAY_US * (SystemCoreClock / 1000000));
 8003324:	4b50      	ldr	r3, [pc, #320]	; (8003468 <HAL_ADC_Start+0x184>)
 8003326:	681b      	ldr	r3, [r3, #0]
 8003328:	4a50      	ldr	r2, [pc, #320]	; (800346c <HAL_ADC_Start+0x188>)
 800332a:	fba2 2303 	umull	r2, r3, r2, r3
 800332e:	0c9a      	lsrs	r2, r3, #18
 8003330:	4613      	mov	r3, r2
 8003332:	005b      	lsls	r3, r3, #1
 8003334:	4413      	add	r3, r2
 8003336:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003338:	e002      	b.n	8003340 <HAL_ADC_Start+0x5c>
    {
      counter--;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	3b01      	subs	r3, #1
 800333e:	60fb      	str	r3, [r7, #12]
    while(counter != 0)
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	2b00      	cmp	r3, #0
 8003344:	d1f9      	bne.n	800333a <HAL_ADC_Start+0x56>
    }
  }
  
  /* Start conversion if ADC is effectively enabled */
  if(HAL_IS_BIT_SET(hadc->Instance->CR2, ADC_CR2_ADON))
 8003346:	687b      	ldr	r3, [r7, #4]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	f003 0301 	and.w	r3, r3, #1
 8003350:	2b01      	cmp	r3, #1
 8003352:	d175      	bne.n	8003440 <HAL_ADC_Start+0x15c>
  {
    /* Set ADC state                                                          */
    /* - Clear state bitfield related to regular group conversion results     */
    /* - Set state bitfield related to regular group operation                */
    ADC_STATE_CLR_SET(hadc->State,
 8003354:	687b      	ldr	r3, [r7, #4]
 8003356:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003358:	4b45      	ldr	r3, [pc, #276]	; (8003470 <HAL_ADC_Start+0x18c>)
 800335a:	4013      	ands	r3, r2
 800335c:	f443 7280 	orr.w	r2, r3, #256	; 0x100
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	641a      	str	r2, [r3, #64]	; 0x40
                      HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR,
                      HAL_ADC_STATE_REG_BUSY);
    
    /* If conversions on group regular are also triggering group injected,    */
    /* update ADC state.                                                      */
    if (READ_BIT(hadc->Instance->CR1, ADC_CR1_JAUTO) != RESET)
 8003364:	687b      	ldr	r3, [r7, #4]
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	685b      	ldr	r3, [r3, #4]
 800336a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800336e:	2b00      	cmp	r3, #0
 8003370:	d007      	beq.n	8003382 <HAL_ADC_Start+0x9e>
    {
      ADC_STATE_CLR_SET(hadc->State, HAL_ADC_STATE_INJ_EOC, HAL_ADC_STATE_INJ_BUSY);  
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003376:	f423 5340 	bic.w	r3, r3, #12288	; 0x3000
 800337a:	f443 5280 	orr.w	r2, r3, #4096	; 0x1000
 800337e:	687b      	ldr	r3, [r7, #4]
 8003380:	641a      	str	r2, [r3, #64]	; 0x40
    }
    
    /* State machine update: Check if an injected conversion is ongoing */
    if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_INJ_BUSY))
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003386:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800338a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800338e:	d106      	bne.n	800339e <HAL_ADC_Start+0xba>
    {
      /* Reset ADC error code fields related to conversions on group regular */
      CLEAR_BIT(hadc->ErrorCode, (HAL_ADC_ERROR_OVR | HAL_ADC_ERROR_DMA));         
 8003390:	687b      	ldr	r3, [r7, #4]
 8003392:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003394:	f023 0206 	bic.w	r2, r3, #6
 8003398:	687b      	ldr	r3, [r7, #4]
 800339a:	645a      	str	r2, [r3, #68]	; 0x44
 800339c:	e002      	b.n	80033a4 <HAL_ADC_Start+0xc0>
    }
    else
    {
      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800339e:	687b      	ldr	r3, [r7, #4]
 80033a0:	2200      	movs	r2, #0
 80033a2:	645a      	str	r2, [r3, #68]	; 0x44
    }
    
    /* Process unlocked */
    /* Unlock before starting ADC conversions: in case of potential           */
    /* interruption, to let the process to ADC IRQ Handler.                   */
    __HAL_UNLOCK(hadc);
 80033a4:	687b      	ldr	r3, [r7, #4]
 80033a6:	2200      	movs	r2, #0
 80033a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    
    /* Clear regular group conversion flag and overrun flag */
    /* (To ensure of no unknown state from potential previous ADC operations) */
    __HAL_ADC_CLEAR_FLAG(hadc, ADC_FLAG_EOC | ADC_FLAG_OVR);
 80033ac:	687b      	ldr	r3, [r7, #4]
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	f06f 0222 	mvn.w	r2, #34	; 0x22
 80033b4:	601a      	str	r2, [r3, #0]
    
    /* Check if Multimode enabled */
    if(HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI))
 80033b6:	4b2f      	ldr	r3, [pc, #188]	; (8003474 <HAL_ADC_Start+0x190>)
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	f003 031f 	and.w	r3, r3, #31
 80033be:	2b00      	cmp	r3, #0
 80033c0:	d10f      	bne.n	80033e2 <HAL_ADC_Start+0xfe>
    {
      /* if no external trigger present enable software conversion of regular channels */
      if((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET) 
 80033c2:	687b      	ldr	r3, [r7, #4]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	689b      	ldr	r3, [r3, #8]
 80033c8:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d143      	bne.n	8003458 <HAL_ADC_Start+0x174>
      {
        /* Enable the selected ADC software conversion for regular group */
        hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	689a      	ldr	r2, [r3, #8]
 80033d6:	687b      	ldr	r3, [r7, #4]
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 80033de:	609a      	str	r2, [r3, #8]
 80033e0:	e03a      	b.n	8003458 <HAL_ADC_Start+0x174>
      }
    }
    else
    {
      /* if instance of handle correspond to ADC1 and  no external trigger present enable software conversion of regular channels */
      if((hadc->Instance == ADC1) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	4a24      	ldr	r2, [pc, #144]	; (8003478 <HAL_ADC_Start+0x194>)
 80033e8:	4293      	cmp	r3, r2
 80033ea:	d10e      	bne.n	800340a <HAL_ADC_Start+0x126>
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	689b      	ldr	r3, [r3, #8]
 80033f2:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	d107      	bne.n	800340a <HAL_ADC_Start+0x126>
      {
        /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 80033fa:	687b      	ldr	r3, [r7, #4]
 80033fc:	681b      	ldr	r3, [r3, #0]
 80033fe:	689a      	ldr	r2, [r3, #8]
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	681b      	ldr	r3, [r3, #0]
 8003404:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 8003408:	609a      	str	r2, [r3, #8]
      }

      /* if dual mode is selected, ADC3 works independently. */
      /* check if the mode selected is not triple */
      if( HAL_IS_BIT_CLR(ADC->CCR, ADC_CCR_MULTI_4) )
 800340a:	4b1a      	ldr	r3, [pc, #104]	; (8003474 <HAL_ADC_Start+0x190>)
 800340c:	685b      	ldr	r3, [r3, #4]
 800340e:	f003 0310 	and.w	r3, r3, #16
 8003412:	2b00      	cmp	r3, #0
 8003414:	d120      	bne.n	8003458 <HAL_ADC_Start+0x174>
      {
        /* if instance of handle correspond to ADC3 and no external trigger present enable software conversion of regular channels */
        if((hadc->Instance == ADC3) && ((hadc->Instance->CR2 & ADC_CR2_EXTEN) == RESET))
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	4a18      	ldr	r2, [pc, #96]	; (800347c <HAL_ADC_Start+0x198>)
 800341c:	4293      	cmp	r3, r2
 800341e:	d11b      	bne.n	8003458 <HAL_ADC_Start+0x174>
 8003420:	687b      	ldr	r3, [r7, #4]
 8003422:	681b      	ldr	r3, [r3, #0]
 8003424:	689b      	ldr	r3, [r3, #8]
 8003426:	f003 5340 	and.w	r3, r3, #805306368	; 0x30000000
 800342a:	2b00      	cmp	r3, #0
 800342c:	d114      	bne.n	8003458 <HAL_ADC_Start+0x174>
        {
          /* Enable the selected ADC software conversion for regular group */
          hadc->Instance->CR2 |= (uint32_t)ADC_CR2_SWSTART;
 800342e:	687b      	ldr	r3, [r7, #4]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	689a      	ldr	r2, [r3, #8]
 8003434:	687b      	ldr	r3, [r7, #4]
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	f042 4280 	orr.w	r2, r2, #1073741824	; 0x40000000
 800343c:	609a      	str	r2, [r3, #8]
 800343e:	e00b      	b.n	8003458 <HAL_ADC_Start+0x174>
    }
  }
  else
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003444:	f043 0210 	orr.w	r2, r3, #16
 8003448:	687b      	ldr	r3, [r7, #4]
 800344a:	641a      	str	r2, [r3, #64]	; 0x40
    
    /* Set ADC error code to ADC IP internal error */
    SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800344c:	687b      	ldr	r3, [r7, #4]
 800344e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003450:	f043 0201 	orr.w	r2, r3, #1
 8003454:	687b      	ldr	r3, [r7, #4]
 8003456:	645a      	str	r2, [r3, #68]	; 0x44
  }
  
  /* Return function status */
  return HAL_OK;
 8003458:	2300      	movs	r3, #0
}
 800345a:	4618      	mov	r0, r3
 800345c:	3714      	adds	r7, #20
 800345e:	46bd      	mov	sp, r7
 8003460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003464:	4770      	bx	lr
 8003466:	bf00      	nop
 8003468:	20000000 	.word	0x20000000
 800346c:	431bde83 	.word	0x431bde83
 8003470:	fffff8fe 	.word	0xfffff8fe
 8003474:	40012300 	.word	0x40012300
 8003478:	40012000 	.word	0x40012000
 800347c:	40012200 	.word	0x40012200

08003480 <HAL_ADC_GetValue>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.
  * @retval Converted value
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef* hadc)
{       
 8003480:	b480      	push	{r7}
 8003482:	b083      	sub	sp, #12
 8003484:	af00      	add	r7, sp, #0
 8003486:	6078      	str	r0, [r7, #4]
  /* Return the selected ADC converted value */ 
  return hadc->Instance->DR;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	681b      	ldr	r3, [r3, #0]
 800348c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
}
 800348e:	4618      	mov	r0, r3
 8003490:	370c      	adds	r7, #12
 8003492:	46bd      	mov	sp, r7
 8003494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003498:	4770      	bx	lr
	...

0800349c <HAL_ADC_ConfigChannel>:
  *         the configuration information for the specified ADC.
  * @param  sConfig ADC configuration structure. 
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef* hadc, ADC_ChannelConfTypeDef* sConfig)
{
 800349c:	b480      	push	{r7}
 800349e:	b085      	sub	sp, #20
 80034a0:	af00      	add	r7, sp, #0
 80034a2:	6078      	str	r0, [r7, #4]
 80034a4:	6039      	str	r1, [r7, #0]
  __IO uint32_t counter = 0;
 80034a6:	2300      	movs	r3, #0
 80034a8:	60fb      	str	r3, [r7, #12]
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_REGULAR_RANK(sConfig->Rank));
  assert_param(IS_ADC_SAMPLE_TIME(sConfig->SamplingTime));
  
  /* Process locked */
  __HAL_LOCK(hadc);
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80034b0:	2b01      	cmp	r3, #1
 80034b2:	d101      	bne.n	80034b8 <HAL_ADC_ConfigChannel+0x1c>
 80034b4:	2302      	movs	r3, #2
 80034b6:	e136      	b.n	8003726 <HAL_ADC_ConfigChannel+0x28a>
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	2201      	movs	r2, #1
 80034bc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* if ADC_Channel_10 ... ADC_Channel_18 is selected */
  if ((sConfig->Channel > ADC_CHANNEL_9) && (sConfig->Channel != ADC_INTERNAL_NONE))
 80034c0:	683b      	ldr	r3, [r7, #0]
 80034c2:	681b      	ldr	r3, [r3, #0]
 80034c4:	2b09      	cmp	r3, #9
 80034c6:	d93a      	bls.n	800353e <HAL_ADC_ConfigChannel+0xa2>
 80034c8:	683b      	ldr	r3, [r7, #0]
 80034ca:	681b      	ldr	r3, [r3, #0]
 80034cc:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80034d0:	d035      	beq.n	800353e <HAL_ADC_ConfigChannel+0xa2>
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR1 &= ~ADC_SMPR1(ADC_SMPR1_SMP10, sConfig->Channel);
 80034d2:	687b      	ldr	r3, [r7, #4]
 80034d4:	681b      	ldr	r3, [r3, #0]
 80034d6:	68d9      	ldr	r1, [r3, #12]
 80034d8:	683b      	ldr	r3, [r7, #0]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	b29b      	uxth	r3, r3
 80034de:	461a      	mov	r2, r3
 80034e0:	4613      	mov	r3, r2
 80034e2:	005b      	lsls	r3, r3, #1
 80034e4:	4413      	add	r3, r2
 80034e6:	3b1e      	subs	r3, #30
 80034e8:	2207      	movs	r2, #7
 80034ea:	fa02 f303 	lsl.w	r3, r2, r3
 80034ee:	43da      	mvns	r2, r3
 80034f0:	687b      	ldr	r3, [r7, #4]
 80034f2:	681b      	ldr	r3, [r3, #0]
 80034f4:	400a      	ands	r2, r1
 80034f6:	60da      	str	r2, [r3, #12]

    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80034f8:	683b      	ldr	r3, [r7, #0]
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4a8d      	ldr	r2, [pc, #564]	; (8003734 <HAL_ADC_ConfigChannel+0x298>)
 80034fe:	4293      	cmp	r3, r2
 8003500:	d10a      	bne.n	8003518 <HAL_ADC_ConfigChannel+0x7c>
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, ADC_CHANNEL_18);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	68d9      	ldr	r1, [r3, #12]
 8003508:	683b      	ldr	r3, [r7, #0]
 800350a:	689b      	ldr	r3, [r3, #8]
 800350c:	061a      	lsls	r2, r3, #24
 800350e:	687b      	ldr	r3, [r7, #4]
 8003510:	681b      	ldr	r3, [r3, #0]
 8003512:	430a      	orrs	r2, r1
 8003514:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 8003516:	e035      	b.n	8003584 <HAL_ADC_ConfigChannel+0xe8>
    }
    else
    {
      /* Set the new sample time */
      hadc->Instance->SMPR1 |= ADC_SMPR1(sConfig->SamplingTime, sConfig->Channel);
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	68d9      	ldr	r1, [r3, #12]
 800351e:	683b      	ldr	r3, [r7, #0]
 8003520:	689a      	ldr	r2, [r3, #8]
 8003522:	683b      	ldr	r3, [r7, #0]
 8003524:	681b      	ldr	r3, [r3, #0]
 8003526:	b29b      	uxth	r3, r3
 8003528:	4618      	mov	r0, r3
 800352a:	4603      	mov	r3, r0
 800352c:	005b      	lsls	r3, r3, #1
 800352e:	4403      	add	r3, r0
 8003530:	3b1e      	subs	r3, #30
 8003532:	409a      	lsls	r2, r3
 8003534:	687b      	ldr	r3, [r7, #4]
 8003536:	681b      	ldr	r3, [r3, #0]
 8003538:	430a      	orrs	r2, r1
 800353a:	60da      	str	r2, [r3, #12]
    if (sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 800353c:	e022      	b.n	8003584 <HAL_ADC_ConfigChannel+0xe8>
    }
  }
  else /* ADC_Channel include in ADC_Channel_[0..9] */
  {
    /* Clear the old sample time */
    hadc->Instance->SMPR2 &= ~ADC_SMPR2(ADC_SMPR2_SMP0, sConfig->Channel);
 800353e:	687b      	ldr	r3, [r7, #4]
 8003540:	681b      	ldr	r3, [r3, #0]
 8003542:	6919      	ldr	r1, [r3, #16]
 8003544:	683b      	ldr	r3, [r7, #0]
 8003546:	681b      	ldr	r3, [r3, #0]
 8003548:	b29b      	uxth	r3, r3
 800354a:	461a      	mov	r2, r3
 800354c:	4613      	mov	r3, r2
 800354e:	005b      	lsls	r3, r3, #1
 8003550:	4413      	add	r3, r2
 8003552:	2207      	movs	r2, #7
 8003554:	fa02 f303 	lsl.w	r3, r2, r3
 8003558:	43da      	mvns	r2, r3
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	681b      	ldr	r3, [r3, #0]
 800355e:	400a      	ands	r2, r1
 8003560:	611a      	str	r2, [r3, #16]
    
    /* Set the new sample time */
    hadc->Instance->SMPR2 |= ADC_SMPR2(sConfig->SamplingTime, sConfig->Channel);
 8003562:	687b      	ldr	r3, [r7, #4]
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	6919      	ldr	r1, [r3, #16]
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	689a      	ldr	r2, [r3, #8]
 800356c:	683b      	ldr	r3, [r7, #0]
 800356e:	681b      	ldr	r3, [r3, #0]
 8003570:	b29b      	uxth	r3, r3
 8003572:	4618      	mov	r0, r3
 8003574:	4603      	mov	r3, r0
 8003576:	005b      	lsls	r3, r3, #1
 8003578:	4403      	add	r3, r0
 800357a:	409a      	lsls	r2, r3
 800357c:	687b      	ldr	r3, [r7, #4]
 800357e:	681b      	ldr	r3, [r3, #0]
 8003580:	430a      	orrs	r2, r1
 8003582:	611a      	str	r2, [r3, #16]
  }
  
  /* For Rank 1 to 6 */
  if (sConfig->Rank < 7)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	2b06      	cmp	r3, #6
 800358a:	d824      	bhi.n	80035d6 <HAL_ADC_ConfigChannel+0x13a>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR3 &= ~ADC_SQR3_RK(ADC_SQR3_SQ1, sConfig->Rank);
 800358c:	687b      	ldr	r3, [r7, #4]
 800358e:	681b      	ldr	r3, [r3, #0]
 8003590:	6b59      	ldr	r1, [r3, #52]	; 0x34
 8003592:	683b      	ldr	r3, [r7, #0]
 8003594:	685a      	ldr	r2, [r3, #4]
 8003596:	4613      	mov	r3, r2
 8003598:	009b      	lsls	r3, r3, #2
 800359a:	4413      	add	r3, r2
 800359c:	3b05      	subs	r3, #5
 800359e:	221f      	movs	r2, #31
 80035a0:	fa02 f303 	lsl.w	r3, r2, r3
 80035a4:	43da      	mvns	r2, r3
 80035a6:	687b      	ldr	r3, [r7, #4]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	400a      	ands	r2, r1
 80035ac:	635a      	str	r2, [r3, #52]	; 0x34
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR3 |= ADC_SQR3_RK(sConfig->Channel, sConfig->Rank);
 80035ae:	687b      	ldr	r3, [r7, #4]
 80035b0:	681b      	ldr	r3, [r3, #0]
 80035b2:	6b59      	ldr	r1, [r3, #52]	; 0x34
 80035b4:	683b      	ldr	r3, [r7, #0]
 80035b6:	681b      	ldr	r3, [r3, #0]
 80035b8:	b29b      	uxth	r3, r3
 80035ba:	4618      	mov	r0, r3
 80035bc:	683b      	ldr	r3, [r7, #0]
 80035be:	685a      	ldr	r2, [r3, #4]
 80035c0:	4613      	mov	r3, r2
 80035c2:	009b      	lsls	r3, r3, #2
 80035c4:	4413      	add	r3, r2
 80035c6:	3b05      	subs	r3, #5
 80035c8:	fa00 f203 	lsl.w	r2, r0, r3
 80035cc:	687b      	ldr	r3, [r7, #4]
 80035ce:	681b      	ldr	r3, [r3, #0]
 80035d0:	430a      	orrs	r2, r1
 80035d2:	635a      	str	r2, [r3, #52]	; 0x34
 80035d4:	e04c      	b.n	8003670 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 7 to 12 */
  else if (sConfig->Rank < 13)
 80035d6:	683b      	ldr	r3, [r7, #0]
 80035d8:	685b      	ldr	r3, [r3, #4]
 80035da:	2b0c      	cmp	r3, #12
 80035dc:	d824      	bhi.n	8003628 <HAL_ADC_ConfigChannel+0x18c>
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR2 &= ~ADC_SQR2_RK(ADC_SQR2_SQ7, sConfig->Rank);
 80035de:	687b      	ldr	r3, [r7, #4]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80035e4:	683b      	ldr	r3, [r7, #0]
 80035e6:	685a      	ldr	r2, [r3, #4]
 80035e8:	4613      	mov	r3, r2
 80035ea:	009b      	lsls	r3, r3, #2
 80035ec:	4413      	add	r3, r2
 80035ee:	3b23      	subs	r3, #35	; 0x23
 80035f0:	221f      	movs	r2, #31
 80035f2:	fa02 f303 	lsl.w	r3, r2, r3
 80035f6:	43da      	mvns	r2, r3
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	400a      	ands	r2, r1
 80035fe:	631a      	str	r2, [r3, #48]	; 0x30
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR2 |= ADC_SQR2_RK(sConfig->Channel, sConfig->Rank);
 8003600:	687b      	ldr	r3, [r7, #4]
 8003602:	681b      	ldr	r3, [r3, #0]
 8003604:	6b19      	ldr	r1, [r3, #48]	; 0x30
 8003606:	683b      	ldr	r3, [r7, #0]
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	b29b      	uxth	r3, r3
 800360c:	4618      	mov	r0, r3
 800360e:	683b      	ldr	r3, [r7, #0]
 8003610:	685a      	ldr	r2, [r3, #4]
 8003612:	4613      	mov	r3, r2
 8003614:	009b      	lsls	r3, r3, #2
 8003616:	4413      	add	r3, r2
 8003618:	3b23      	subs	r3, #35	; 0x23
 800361a:	fa00 f203 	lsl.w	r2, r0, r3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	430a      	orrs	r2, r1
 8003624:	631a      	str	r2, [r3, #48]	; 0x30
 8003626:	e023      	b.n	8003670 <HAL_ADC_ConfigChannel+0x1d4>
  }
  /* For Rank 13 to 16 */
  else
  {
    /* Clear the old SQx bits for the selected rank */
    hadc->Instance->SQR1 &= ~ADC_SQR1_RK(ADC_SQR1_SQ13, sConfig->Rank);
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 800362e:	683b      	ldr	r3, [r7, #0]
 8003630:	685a      	ldr	r2, [r3, #4]
 8003632:	4613      	mov	r3, r2
 8003634:	009b      	lsls	r3, r3, #2
 8003636:	4413      	add	r3, r2
 8003638:	3b41      	subs	r3, #65	; 0x41
 800363a:	221f      	movs	r2, #31
 800363c:	fa02 f303 	lsl.w	r3, r2, r3
 8003640:	43da      	mvns	r2, r3
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	400a      	ands	r2, r1
 8003648:	62da      	str	r2, [r3, #44]	; 0x2c
    
    /* Set the SQx bits for the selected rank */
    hadc->Instance->SQR1 |= ADC_SQR1_RK(sConfig->Channel, sConfig->Rank);
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 8003650:	683b      	ldr	r3, [r7, #0]
 8003652:	681b      	ldr	r3, [r3, #0]
 8003654:	b29b      	uxth	r3, r3
 8003656:	4618      	mov	r0, r3
 8003658:	683b      	ldr	r3, [r7, #0]
 800365a:	685a      	ldr	r2, [r3, #4]
 800365c:	4613      	mov	r3, r2
 800365e:	009b      	lsls	r3, r3, #2
 8003660:	4413      	add	r3, r2
 8003662:	3b41      	subs	r3, #65	; 0x41
 8003664:	fa00 f203 	lsl.w	r2, r0, r3
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	430a      	orrs	r2, r1
 800366e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  
  /* if no internal channel selected */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_INTERNAL_NONE))
 8003670:	687b      	ldr	r3, [r7, #4]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	4a30      	ldr	r2, [pc, #192]	; (8003738 <HAL_ADC_ConfigChannel+0x29c>)
 8003676:	4293      	cmp	r3, r2
 8003678:	d10a      	bne.n	8003690 <HAL_ADC_ConfigChannel+0x1f4>
 800367a:	683b      	ldr	r3, [r7, #0]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8003682:	d105      	bne.n	8003690 <HAL_ADC_ConfigChannel+0x1f4>
  {
    /* Disable the VBAT & TSVREFE channel*/
    ADC->CCR &= ~(ADC_CCR_VBATE | ADC_CCR_TSVREFE);
 8003684:	4b2d      	ldr	r3, [pc, #180]	; (800373c <HAL_ADC_ConfigChannel+0x2a0>)
 8003686:	685b      	ldr	r3, [r3, #4]
 8003688:	4a2c      	ldr	r2, [pc, #176]	; (800373c <HAL_ADC_ConfigChannel+0x2a0>)
 800368a:	f423 0340 	bic.w	r3, r3, #12582912	; 0xc00000
 800368e:	6053      	str	r3, [r2, #4]
  }

  /* if ADC1 Channel_18 is selected enable VBAT Channel */
  if ((hadc->Instance == ADC1) && (sConfig->Channel == ADC_CHANNEL_VBAT))
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4a28      	ldr	r2, [pc, #160]	; (8003738 <HAL_ADC_ConfigChannel+0x29c>)
 8003696:	4293      	cmp	r3, r2
 8003698:	d10f      	bne.n	80036ba <HAL_ADC_ConfigChannel+0x21e>
 800369a:	683b      	ldr	r3, [r7, #0]
 800369c:	681b      	ldr	r3, [r3, #0]
 800369e:	2b12      	cmp	r3, #18
 80036a0:	d10b      	bne.n	80036ba <HAL_ADC_ConfigChannel+0x21e>
  {
    /* Disable the TEMPSENSOR channel as it is multiplixed with the VBAT channel */
    ADC->CCR &= ~ADC_CCR_TSVREFE;
 80036a2:	4b26      	ldr	r3, [pc, #152]	; (800373c <HAL_ADC_ConfigChannel+0x2a0>)
 80036a4:	685b      	ldr	r3, [r3, #4]
 80036a6:	4a25      	ldr	r2, [pc, #148]	; (800373c <HAL_ADC_ConfigChannel+0x2a0>)
 80036a8:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80036ac:	6053      	str	r3, [r2, #4]

    /* Enable the VBAT channel*/
    ADC->CCR |= ADC_CCR_VBATE;
 80036ae:	4b23      	ldr	r3, [pc, #140]	; (800373c <HAL_ADC_ConfigChannel+0x2a0>)
 80036b0:	685b      	ldr	r3, [r3, #4]
 80036b2:	4a22      	ldr	r2, [pc, #136]	; (800373c <HAL_ADC_ConfigChannel+0x2a0>)
 80036b4:	f443 0380 	orr.w	r3, r3, #4194304	; 0x400000
 80036b8:	6053      	str	r3, [r2, #4]
  }
  
  /* if ADC1 Channel_18 or Channel_17 is selected enable TSVREFE Channel(Temperature sensor and VREFINT) */
  if ((hadc->Instance == ADC1) && ((sConfig->Channel == ADC_CHANNEL_TEMPSENSOR) || (sConfig->Channel == ADC_CHANNEL_VREFINT)))
 80036ba:	687b      	ldr	r3, [r7, #4]
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	4a1e      	ldr	r2, [pc, #120]	; (8003738 <HAL_ADC_ConfigChannel+0x29c>)
 80036c0:	4293      	cmp	r3, r2
 80036c2:	d12b      	bne.n	800371c <HAL_ADC_ConfigChannel+0x280>
 80036c4:	683b      	ldr	r3, [r7, #0]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	4a1a      	ldr	r2, [pc, #104]	; (8003734 <HAL_ADC_ConfigChannel+0x298>)
 80036ca:	4293      	cmp	r3, r2
 80036cc:	d003      	beq.n	80036d6 <HAL_ADC_ConfigChannel+0x23a>
 80036ce:	683b      	ldr	r3, [r7, #0]
 80036d0:	681b      	ldr	r3, [r3, #0]
 80036d2:	2b11      	cmp	r3, #17
 80036d4:	d122      	bne.n	800371c <HAL_ADC_ConfigChannel+0x280>
  {
    /* Disable the VBAT channel as it is multiplixed with TEMPSENSOR channel */
    ADC->CCR &= ~ADC_CCR_VBATE;
 80036d6:	4b19      	ldr	r3, [pc, #100]	; (800373c <HAL_ADC_ConfigChannel+0x2a0>)
 80036d8:	685b      	ldr	r3, [r3, #4]
 80036da:	4a18      	ldr	r2, [pc, #96]	; (800373c <HAL_ADC_ConfigChannel+0x2a0>)
 80036dc:	f423 0380 	bic.w	r3, r3, #4194304	; 0x400000
 80036e0:	6053      	str	r3, [r2, #4]

    /* Enable the TSVREFE channel*/
    ADC->CCR |= ADC_CCR_TSVREFE;
 80036e2:	4b16      	ldr	r3, [pc, #88]	; (800373c <HAL_ADC_ConfigChannel+0x2a0>)
 80036e4:	685b      	ldr	r3, [r3, #4]
 80036e6:	4a15      	ldr	r2, [pc, #84]	; (800373c <HAL_ADC_ConfigChannel+0x2a0>)
 80036e8:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80036ec:	6053      	str	r3, [r2, #4]

    if(sConfig->Channel == ADC_CHANNEL_TEMPSENSOR)
 80036ee:	683b      	ldr	r3, [r7, #0]
 80036f0:	681b      	ldr	r3, [r3, #0]
 80036f2:	4a10      	ldr	r2, [pc, #64]	; (8003734 <HAL_ADC_ConfigChannel+0x298>)
 80036f4:	4293      	cmp	r3, r2
 80036f6:	d111      	bne.n	800371c <HAL_ADC_ConfigChannel+0x280>
    {
      /* Delay for temperature sensor stabilization time */
      /* Compute number of CPU cycles to wait for */
      counter = (ADC_TEMPSENSOR_DELAY_US * (SystemCoreClock / 1000000));
 80036f8:	4b11      	ldr	r3, [pc, #68]	; (8003740 <HAL_ADC_ConfigChannel+0x2a4>)
 80036fa:	681b      	ldr	r3, [r3, #0]
 80036fc:	4a11      	ldr	r2, [pc, #68]	; (8003744 <HAL_ADC_ConfigChannel+0x2a8>)
 80036fe:	fba2 2303 	umull	r2, r3, r2, r3
 8003702:	0c9a      	lsrs	r2, r3, #18
 8003704:	4613      	mov	r3, r2
 8003706:	009b      	lsls	r3, r3, #2
 8003708:	4413      	add	r3, r2
 800370a:	005b      	lsls	r3, r3, #1
 800370c:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 800370e:	e002      	b.n	8003716 <HAL_ADC_ConfigChannel+0x27a>
      {
        counter--;
 8003710:	68fb      	ldr	r3, [r7, #12]
 8003712:	3b01      	subs	r3, #1
 8003714:	60fb      	str	r3, [r7, #12]
      while(counter != 0)
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	2b00      	cmp	r3, #0
 800371a:	d1f9      	bne.n	8003710 <HAL_ADC_ConfigChannel+0x274>
      }
    }
  }
  
  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	2200      	movs	r2, #0
 8003720:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
  
  /* Return function status */
  return HAL_OK;
 8003724:	2300      	movs	r3, #0
}
 8003726:	4618      	mov	r0, r3
 8003728:	3714      	adds	r7, #20
 800372a:	46bd      	mov	sp, r7
 800372c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003730:	4770      	bx	lr
 8003732:	bf00      	nop
 8003734:	10000012 	.word	0x10000012
 8003738:	40012000 	.word	0x40012000
 800373c:	40012300 	.word	0x40012300
 8003740:	20000000 	.word	0x20000000
 8003744:	431bde83 	.word	0x431bde83

08003748 <ADC_Init>:
  * @param  hadc pointer to a ADC_HandleTypeDef structure that contains
  *         the configuration information for the specified ADC.  
  * @retval None
  */
static void ADC_Init(ADC_HandleTypeDef* hadc)
{
 8003748:	b480      	push	{r7}
 800374a:	b083      	sub	sp, #12
 800374c:	af00      	add	r7, sp, #0
 800374e:	6078      	str	r0, [r7, #4]
  /* Set ADC parameters */
  /* Set the ADC clock prescaler */
  ADC->CCR &= ~(ADC_CCR_ADCPRE);
 8003750:	4b78      	ldr	r3, [pc, #480]	; (8003934 <ADC_Init+0x1ec>)
 8003752:	685b      	ldr	r3, [r3, #4]
 8003754:	4a77      	ldr	r2, [pc, #476]	; (8003934 <ADC_Init+0x1ec>)
 8003756:	f423 3340 	bic.w	r3, r3, #196608	; 0x30000
 800375a:	6053      	str	r3, [r2, #4]
  ADC->CCR |=  hadc->Init.ClockPrescaler;
 800375c:	4b75      	ldr	r3, [pc, #468]	; (8003934 <ADC_Init+0x1ec>)
 800375e:	685a      	ldr	r2, [r3, #4]
 8003760:	687b      	ldr	r3, [r7, #4]
 8003762:	685b      	ldr	r3, [r3, #4]
 8003764:	4973      	ldr	r1, [pc, #460]	; (8003934 <ADC_Init+0x1ec>)
 8003766:	4313      	orrs	r3, r2
 8003768:	604b      	str	r3, [r1, #4]
  
  /* Set ADC scan mode */
  hadc->Instance->CR1 &= ~(ADC_CR1_SCAN);
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	685a      	ldr	r2, [r3, #4]
 8003770:	687b      	ldr	r3, [r7, #4]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8003778:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  ADC_CR1_SCANCONV(hadc->Init.ScanConvMode);
 800377a:	687b      	ldr	r3, [r7, #4]
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	6859      	ldr	r1, [r3, #4]
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	691b      	ldr	r3, [r3, #16]
 8003784:	021a      	lsls	r2, r3, #8
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	681b      	ldr	r3, [r3, #0]
 800378a:	430a      	orrs	r2, r1
 800378c:	605a      	str	r2, [r3, #4]
  
  /* Set ADC resolution */
  hadc->Instance->CR1 &= ~(ADC_CR1_RES);
 800378e:	687b      	ldr	r3, [r7, #4]
 8003790:	681b      	ldr	r3, [r3, #0]
 8003792:	685a      	ldr	r2, [r3, #4]
 8003794:	687b      	ldr	r3, [r7, #4]
 8003796:	681b      	ldr	r3, [r3, #0]
 8003798:	f022 7240 	bic.w	r2, r2, #50331648	; 0x3000000
 800379c:	605a      	str	r2, [r3, #4]
  hadc->Instance->CR1 |=  hadc->Init.Resolution;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	6859      	ldr	r1, [r3, #4]
 80037a4:	687b      	ldr	r3, [r7, #4]
 80037a6:	689a      	ldr	r2, [r3, #8]
 80037a8:	687b      	ldr	r3, [r7, #4]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	430a      	orrs	r2, r1
 80037ae:	605a      	str	r2, [r3, #4]
  
  /* Set ADC data alignment */
  hadc->Instance->CR2 &= ~(ADC_CR2_ALIGN);
 80037b0:	687b      	ldr	r3, [r7, #4]
 80037b2:	681b      	ldr	r3, [r3, #0]
 80037b4:	689a      	ldr	r2, [r3, #8]
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	681b      	ldr	r3, [r3, #0]
 80037ba:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80037be:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= hadc->Init.DataAlign;
 80037c0:	687b      	ldr	r3, [r7, #4]
 80037c2:	681b      	ldr	r3, [r3, #0]
 80037c4:	6899      	ldr	r1, [r3, #8]
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	68da      	ldr	r2, [r3, #12]
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	681b      	ldr	r3, [r3, #0]
 80037ce:	430a      	orrs	r2, r1
 80037d0:	609a      	str	r2, [r3, #8]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if(hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 80037d2:	687b      	ldr	r3, [r7, #4]
 80037d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80037d6:	4a58      	ldr	r2, [pc, #352]	; (8003938 <ADC_Init+0x1f0>)
 80037d8:	4293      	cmp	r3, r2
 80037da:	d022      	beq.n	8003822 <ADC_Init+0xda>
  {
    /* Select external trigger to start conversion */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 80037dc:	687b      	ldr	r3, [r7, #4]
 80037de:	681b      	ldr	r3, [r3, #0]
 80037e0:	689a      	ldr	r2, [r3, #8]
 80037e2:	687b      	ldr	r3, [r7, #4]
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80037ea:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConv;
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	6899      	ldr	r1, [r3, #8]
 80037f2:	687b      	ldr	r3, [r7, #4]
 80037f4:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80037f6:	687b      	ldr	r3, [r7, #4]
 80037f8:	681b      	ldr	r3, [r3, #0]
 80037fa:	430a      	orrs	r2, r1
 80037fc:	609a      	str	r2, [r3, #8]
    
    /* Select external trigger polarity */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 80037fe:	687b      	ldr	r3, [r7, #4]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	689a      	ldr	r2, [r3, #8]
 8003804:	687b      	ldr	r3, [r7, #4]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 800380c:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 |= hadc->Init.ExternalTrigConvEdge;
 800380e:	687b      	ldr	r3, [r7, #4]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	6899      	ldr	r1, [r3, #8]
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003818:	687b      	ldr	r3, [r7, #4]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	430a      	orrs	r2, r1
 800381e:	609a      	str	r2, [r3, #8]
 8003820:	e00f      	b.n	8003842 <ADC_Init+0xfa>
  }
  else
  {
    /* Reset the external trigger */
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTSEL);
 8003822:	687b      	ldr	r3, [r7, #4]
 8003824:	681b      	ldr	r3, [r3, #0]
 8003826:	689a      	ldr	r2, [r3, #8]
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 8003830:	609a      	str	r2, [r3, #8]
    hadc->Instance->CR2 &= ~(ADC_CR2_EXTEN);
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	689a      	ldr	r2, [r3, #8]
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	681b      	ldr	r3, [r3, #0]
 800383c:	f022 5240 	bic.w	r2, r2, #805306368	; 0x30000000
 8003840:	609a      	str	r2, [r3, #8]
  }
  
  /* Enable or disable ADC continuous conversion mode */
  hadc->Instance->CR2 &= ~(ADC_CR2_CONT);
 8003842:	687b      	ldr	r3, [r7, #4]
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	689a      	ldr	r2, [r3, #8]
 8003848:	687b      	ldr	r3, [r7, #4]
 800384a:	681b      	ldr	r3, [r3, #0]
 800384c:	f022 0202 	bic.w	r2, r2, #2
 8003850:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode);
 8003852:	687b      	ldr	r3, [r7, #4]
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	6899      	ldr	r1, [r3, #8]
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	699b      	ldr	r3, [r3, #24]
 800385c:	005a      	lsls	r2, r3, #1
 800385e:	687b      	ldr	r3, [r7, #4]
 8003860:	681b      	ldr	r3, [r3, #0]
 8003862:	430a      	orrs	r2, r1
 8003864:	609a      	str	r2, [r3, #8]
  
  if(hadc->Init.DiscontinuousConvMode != DISABLE)
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	f893 3020 	ldrb.w	r3, [r3, #32]
 800386c:	2b00      	cmp	r3, #0
 800386e:	d01b      	beq.n	80038a8 <ADC_Init+0x160>
  {
    assert_param(IS_ADC_REGULAR_DISC_NUMBER(hadc->Init.NbrOfDiscConversion));
  
    /* Enable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 |= (uint32_t)ADC_CR1_DISCEN;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	685a      	ldr	r2, [r3, #4]
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	681b      	ldr	r3, [r3, #0]
 800387a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800387e:	605a      	str	r2, [r3, #4]
    
    /* Set the number of channels to be converted in discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCNUM);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	685a      	ldr	r2, [r3, #4]
 8003886:	687b      	ldr	r3, [r7, #4]
 8003888:	681b      	ldr	r3, [r3, #0]
 800388a:	f422 4260 	bic.w	r2, r2, #57344	; 0xe000
 800388e:	605a      	str	r2, [r3, #4]
    hadc->Instance->CR1 |=  ADC_CR1_DISCONTINUOUS(hadc->Init.NbrOfDiscConversion);
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	6859      	ldr	r1, [r3, #4]
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800389a:	3b01      	subs	r3, #1
 800389c:	035a      	lsls	r2, r3, #13
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	430a      	orrs	r2, r1
 80038a4:	605a      	str	r2, [r3, #4]
 80038a6:	e007      	b.n	80038b8 <ADC_Init+0x170>
  }
  else
  {
    /* Disable the selected ADC regular discontinuous mode */
    hadc->Instance->CR1 &= ~(ADC_CR1_DISCEN);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	685a      	ldr	r2, [r3, #4]
 80038ae:	687b      	ldr	r3, [r7, #4]
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80038b6:	605a      	str	r2, [r3, #4]
  }
  
  /* Set ADC number of conversion */
  hadc->Instance->SQR1 &= ~(ADC_SQR1_L);
 80038b8:	687b      	ldr	r3, [r7, #4]
 80038ba:	681b      	ldr	r3, [r3, #0]
 80038bc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	f422 0270 	bic.w	r2, r2, #15728640	; 0xf00000
 80038c6:	62da      	str	r2, [r3, #44]	; 0x2c
  hadc->Instance->SQR1 |=  ADC_SQR1(hadc->Init.NbrOfConversion);
 80038c8:	687b      	ldr	r3, [r7, #4]
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	6ad9      	ldr	r1, [r3, #44]	; 0x2c
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	69db      	ldr	r3, [r3, #28]
 80038d2:	3b01      	subs	r3, #1
 80038d4:	051a      	lsls	r2, r3, #20
 80038d6:	687b      	ldr	r3, [r7, #4]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	430a      	orrs	r2, r1
 80038dc:	62da      	str	r2, [r3, #44]	; 0x2c
  
  /* Enable or disable ADC DMA continuous request */
  hadc->Instance->CR2 &= ~(ADC_CR2_DDS);
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	681b      	ldr	r3, [r3, #0]
 80038e2:	689a      	ldr	r2, [r3, #8]
 80038e4:	687b      	ldr	r3, [r7, #4]
 80038e6:	681b      	ldr	r3, [r3, #0]
 80038e8:	f422 7200 	bic.w	r2, r2, #512	; 0x200
 80038ec:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_DMAContReq((uint32_t)hadc->Init.DMAContinuousRequests);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	6899      	ldr	r1, [r3, #8]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80038fa:	025a      	lsls	r2, r3, #9
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	430a      	orrs	r2, r1
 8003902:	609a      	str	r2, [r3, #8]
  
  /* Enable or disable ADC end of conversion selection */
  hadc->Instance->CR2 &= ~(ADC_CR2_EOCS);
 8003904:	687b      	ldr	r3, [r7, #4]
 8003906:	681b      	ldr	r3, [r3, #0]
 8003908:	689a      	ldr	r2, [r3, #8]
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	681b      	ldr	r3, [r3, #0]
 800390e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003912:	609a      	str	r2, [r3, #8]
  hadc->Instance->CR2 |= ADC_CR2_EOCSelection(hadc->Init.EOCSelection);
 8003914:	687b      	ldr	r3, [r7, #4]
 8003916:	681b      	ldr	r3, [r3, #0]
 8003918:	6899      	ldr	r1, [r3, #8]
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	695b      	ldr	r3, [r3, #20]
 800391e:	029a      	lsls	r2, r3, #10
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	681b      	ldr	r3, [r3, #0]
 8003924:	430a      	orrs	r2, r1
 8003926:	609a      	str	r2, [r3, #8]
}
 8003928:	bf00      	nop
 800392a:	370c      	adds	r7, #12
 800392c:	46bd      	mov	sp, r7
 800392e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003932:	4770      	bx	lr
 8003934:	40012300 	.word	0x40012300
 8003938:	0f000001 	.word	0x0f000001

0800393c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800393c:	b480      	push	{r7}
 800393e:	b085      	sub	sp, #20
 8003940:	af00      	add	r7, sp, #0
 8003942:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003944:	687b      	ldr	r3, [r7, #4]
 8003946:	f003 0307 	and.w	r3, r3, #7
 800394a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800394c:	4b0b      	ldr	r3, [pc, #44]	; (800397c <__NVIC_SetPriorityGrouping+0x40>)
 800394e:	68db      	ldr	r3, [r3, #12]
 8003950:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003952:	68ba      	ldr	r2, [r7, #8]
 8003954:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003958:	4013      	ands	r3, r2
 800395a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003960:	68bb      	ldr	r3, [r7, #8]
 8003962:	431a      	orrs	r2, r3
  reg_value  =  (reg_value                                   |
 8003964:	4b06      	ldr	r3, [pc, #24]	; (8003980 <__NVIC_SetPriorityGrouping+0x44>)
 8003966:	4313      	orrs	r3, r2
 8003968:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800396a:	4a04      	ldr	r2, [pc, #16]	; (800397c <__NVIC_SetPriorityGrouping+0x40>)
 800396c:	68bb      	ldr	r3, [r7, #8]
 800396e:	60d3      	str	r3, [r2, #12]
}
 8003970:	bf00      	nop
 8003972:	3714      	adds	r7, #20
 8003974:	46bd      	mov	sp, r7
 8003976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800397a:	4770      	bx	lr
 800397c:	e000ed00 	.word	0xe000ed00
 8003980:	05fa0000 	.word	0x05fa0000

08003984 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003984:	b480      	push	{r7}
 8003986:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003988:	4b04      	ldr	r3, [pc, #16]	; (800399c <__NVIC_GetPriorityGrouping+0x18>)
 800398a:	68db      	ldr	r3, [r3, #12]
 800398c:	0a1b      	lsrs	r3, r3, #8
 800398e:	f003 0307 	and.w	r3, r3, #7
}
 8003992:	4618      	mov	r0, r3
 8003994:	46bd      	mov	sp, r7
 8003996:	f85d 7b04 	ldr.w	r7, [sp], #4
 800399a:	4770      	bx	lr
 800399c:	e000ed00 	.word	0xe000ed00

080039a0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80039a0:	b480      	push	{r7}
 80039a2:	b083      	sub	sp, #12
 80039a4:	af00      	add	r7, sp, #0
 80039a6:	4603      	mov	r3, r0
 80039a8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	db0b      	blt.n	80039ca <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80039b2:	79fb      	ldrb	r3, [r7, #7]
 80039b4:	f003 021f 	and.w	r2, r3, #31
 80039b8:	4907      	ldr	r1, [pc, #28]	; (80039d8 <__NVIC_EnableIRQ+0x38>)
 80039ba:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039be:	095b      	lsrs	r3, r3, #5
 80039c0:	2001      	movs	r0, #1
 80039c2:	fa00 f202 	lsl.w	r2, r0, r2
 80039c6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80039ca:	bf00      	nop
 80039cc:	370c      	adds	r7, #12
 80039ce:	46bd      	mov	sp, r7
 80039d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d4:	4770      	bx	lr
 80039d6:	bf00      	nop
 80039d8:	e000e100 	.word	0xe000e100

080039dc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80039dc:	b480      	push	{r7}
 80039de:	b083      	sub	sp, #12
 80039e0:	af00      	add	r7, sp, #0
 80039e2:	4603      	mov	r3, r0
 80039e4:	6039      	str	r1, [r7, #0]
 80039e6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80039e8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039ec:	2b00      	cmp	r3, #0
 80039ee:	db0a      	blt.n	8003a06 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]                = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80039f0:	683b      	ldr	r3, [r7, #0]
 80039f2:	b2da      	uxtb	r2, r3
 80039f4:	490c      	ldr	r1, [pc, #48]	; (8003a28 <__NVIC_SetPriority+0x4c>)
 80039f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80039fa:	0112      	lsls	r2, r2, #4
 80039fc:	b2d2      	uxtb	r2, r2
 80039fe:	440b      	add	r3, r1
 8003a00:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003a04:	e00a      	b.n	8003a1c <__NVIC_SetPriority+0x40>
    SCB->SHPR[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003a06:	683b      	ldr	r3, [r7, #0]
 8003a08:	b2da      	uxtb	r2, r3
 8003a0a:	4908      	ldr	r1, [pc, #32]	; (8003a2c <__NVIC_SetPriority+0x50>)
 8003a0c:	79fb      	ldrb	r3, [r7, #7]
 8003a0e:	f003 030f 	and.w	r3, r3, #15
 8003a12:	3b04      	subs	r3, #4
 8003a14:	0112      	lsls	r2, r2, #4
 8003a16:	b2d2      	uxtb	r2, r2
 8003a18:	440b      	add	r3, r1
 8003a1a:	761a      	strb	r2, [r3, #24]
}
 8003a1c:	bf00      	nop
 8003a1e:	370c      	adds	r7, #12
 8003a20:	46bd      	mov	sp, r7
 8003a22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a26:	4770      	bx	lr
 8003a28:	e000e100 	.word	0xe000e100
 8003a2c:	e000ed00 	.word	0xe000ed00

08003a30 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003a30:	b480      	push	{r7}
 8003a32:	b089      	sub	sp, #36	; 0x24
 8003a34:	af00      	add	r7, sp, #0
 8003a36:	60f8      	str	r0, [r7, #12]
 8003a38:	60b9      	str	r1, [r7, #8]
 8003a3a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	f003 0307 	and.w	r3, r3, #7
 8003a42:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003a44:	69fb      	ldr	r3, [r7, #28]
 8003a46:	f1c3 0307 	rsb	r3, r3, #7
 8003a4a:	2b04      	cmp	r3, #4
 8003a4c:	bf28      	it	cs
 8003a4e:	2304      	movcs	r3, #4
 8003a50:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003a52:	69fb      	ldr	r3, [r7, #28]
 8003a54:	3304      	adds	r3, #4
 8003a56:	2b06      	cmp	r3, #6
 8003a58:	d902      	bls.n	8003a60 <NVIC_EncodePriority+0x30>
 8003a5a:	69fb      	ldr	r3, [r7, #28]
 8003a5c:	3b03      	subs	r3, #3
 8003a5e:	e000      	b.n	8003a62 <NVIC_EncodePriority+0x32>
 8003a60:	2300      	movs	r3, #0
 8003a62:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a64:	f04f 32ff 	mov.w	r2, #4294967295
 8003a68:	69bb      	ldr	r3, [r7, #24]
 8003a6a:	fa02 f303 	lsl.w	r3, r2, r3
 8003a6e:	43da      	mvns	r2, r3
 8003a70:	68bb      	ldr	r3, [r7, #8]
 8003a72:	401a      	ands	r2, r3
 8003a74:	697b      	ldr	r3, [r7, #20]
 8003a76:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003a78:	f04f 31ff 	mov.w	r1, #4294967295
 8003a7c:	697b      	ldr	r3, [r7, #20]
 8003a7e:	fa01 f303 	lsl.w	r3, r1, r3
 8003a82:	43d9      	mvns	r1, r3
 8003a84:	687b      	ldr	r3, [r7, #4]
 8003a86:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003a88:	4313      	orrs	r3, r2
         );
}
 8003a8a:	4618      	mov	r0, r3
 8003a8c:	3724      	adds	r7, #36	; 0x24
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003a96:	b580      	push	{r7, lr}
 8003a98:	b082      	sub	sp, #8
 8003a9a:	af00      	add	r7, sp, #0
 8003a9c:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003a9e:	6878      	ldr	r0, [r7, #4]
 8003aa0:	f7ff ff4c 	bl	800393c <__NVIC_SetPriorityGrouping>
}
 8003aa4:	bf00      	nop
 8003aa6:	3708      	adds	r7, #8
 8003aa8:	46bd      	mov	sp, r7
 8003aaa:	bd80      	pop	{r7, pc}

08003aac <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b086      	sub	sp, #24
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	4603      	mov	r3, r0
 8003ab4:	60b9      	str	r1, [r7, #8]
 8003ab6:	607a      	str	r2, [r7, #4]
 8003ab8:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00;
 8003aba:	2300      	movs	r3, #0
 8003abc:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003abe:	f7ff ff61 	bl	8003984 <__NVIC_GetPriorityGrouping>
 8003ac2:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003ac4:	687a      	ldr	r2, [r7, #4]
 8003ac6:	68b9      	ldr	r1, [r7, #8]
 8003ac8:	6978      	ldr	r0, [r7, #20]
 8003aca:	f7ff ffb1 	bl	8003a30 <NVIC_EncodePriority>
 8003ace:	4602      	mov	r2, r0
 8003ad0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003ad4:	4611      	mov	r1, r2
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	f7ff ff80 	bl	80039dc <__NVIC_SetPriority>
}
 8003adc:	bf00      	nop
 8003ade:	3718      	adds	r7, #24
 8003ae0:	46bd      	mov	sp, r7
 8003ae2:	bd80      	pop	{r7, pc}

08003ae4 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f7xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b082      	sub	sp, #8
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	4603      	mov	r3, r0
 8003aec:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003af2:	4618      	mov	r0, r3
 8003af4:	f7ff ff54 	bl	80039a0 <__NVIC_EnableIRQ>
}
 8003af8:	bf00      	nop
 8003afa:	3708      	adds	r7, #8
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}

08003b00 <HAL_DAC_Init>:
  * @param  hdac pointer to a DAC_HandleTypeDef structure that contains
  *         the configuration information for the specified DAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Init(DAC_HandleTypeDef *hdac)
{
 8003b00:	b580      	push	{r7, lr}
 8003b02:	b082      	sub	sp, #8
 8003b04:	af00      	add	r7, sp, #0
 8003b06:	6078      	str	r0, [r7, #4]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	2b00      	cmp	r3, #0
 8003b0c:	d101      	bne.n	8003b12 <HAL_DAC_Init+0x12>
  {
    return HAL_ERROR;
 8003b0e:	2301      	movs	r3, #1
 8003b10:	e014      	b.n	8003b3c <HAL_DAC_Init+0x3c>
  }
  /* Check the parameters */
  assert_param(IS_DAC_ALL_INSTANCE(hdac->Instance));

  if (hdac->State == HAL_DAC_STATE_RESET)
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	791b      	ldrb	r3, [r3, #4]
 8003b16:	b2db      	uxtb	r3, r3
 8003b18:	2b00      	cmp	r3, #0
 8003b1a:	d105      	bne.n	8003b28 <HAL_DAC_Init+0x28>
      hdac->MspInitCallback             = HAL_DAC_MspInit;
    }
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */

    /* Allocate lock resource and initialize it */
    hdac->Lock = HAL_UNLOCKED;
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2200      	movs	r2, #0
 8003b20:	715a      	strb	r2, [r3, #5]
#if (USE_HAL_DAC_REGISTER_CALLBACKS == 1)
    /* Init the low level hardware */
    hdac->MspInitCallback(hdac);
#else
    /* Init the low level hardware */
    HAL_DAC_MspInit(hdac);
 8003b22:	6878      	ldr	r0, [r7, #4]
 8003b24:	f7fc fefc 	bl	8000920 <HAL_DAC_MspInit>
#endif /* USE_HAL_DAC_REGISTER_CALLBACKS */
  }

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	2202      	movs	r2, #2
 8003b2c:	711a      	strb	r2, [r3, #4]

  /* Set DAC error code to none */
  hdac->ErrorCode = HAL_DAC_ERROR_NONE;
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	2200      	movs	r2, #0
 8003b32:	611a      	str	r2, [r3, #16]

  /* Initialize the DAC state*/
  hdac->State = HAL_DAC_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	711a      	strb	r2, [r3, #4]

  /* Return function status */
  return HAL_OK;
 8003b3a:	2300      	movs	r3, #0
}
 8003b3c:	4618      	mov	r0, r3
 8003b3e:	3708      	adds	r7, #8
 8003b40:	46bd      	mov	sp, r7
 8003b42:	bd80      	pop	{r7, pc}

08003b44 <HAL_DAC_Start>:
  *            @arg DAC_CHANNEL_1: DAC Channel1 selected
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_Start(DAC_HandleTypeDef *hdac, uint32_t Channel)
{
 8003b44:	b480      	push	{r7}
 8003b46:	b083      	sub	sp, #12
 8003b48:	af00      	add	r7, sp, #0
 8003b4a:	6078      	str	r0, [r7, #4]
 8003b4c:	6039      	str	r1, [r7, #0]
  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	2b00      	cmp	r3, #0
 8003b52:	d101      	bne.n	8003b58 <HAL_DAC_Start+0x14>
  {
    return HAL_ERROR;
 8003b54:	2301      	movs	r3, #1
 8003b56:	e046      	b.n	8003be6 <HAL_DAC_Start+0xa2>

  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003b58:	687b      	ldr	r3, [r7, #4]
 8003b5a:	795b      	ldrb	r3, [r3, #5]
 8003b5c:	2b01      	cmp	r3, #1
 8003b5e:	d101      	bne.n	8003b64 <HAL_DAC_Start+0x20>
 8003b60:	2302      	movs	r3, #2
 8003b62:	e040      	b.n	8003be6 <HAL_DAC_Start+0xa2>
 8003b64:	687b      	ldr	r3, [r7, #4]
 8003b66:	2201      	movs	r2, #1
 8003b68:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003b6a:	687b      	ldr	r3, [r7, #4]
 8003b6c:	2202      	movs	r2, #2
 8003b6e:	711a      	strb	r2, [r3, #4]

  /* Enable the Peripheral */
  __HAL_DAC_ENABLE(hdac, Channel);
 8003b70:	687b      	ldr	r3, [r7, #4]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	6819      	ldr	r1, [r3, #0]
 8003b76:	683b      	ldr	r3, [r7, #0]
 8003b78:	f003 0310 	and.w	r3, r3, #16
 8003b7c:	2201      	movs	r2, #1
 8003b7e:	409a      	lsls	r2, r3
 8003b80:	687b      	ldr	r3, [r7, #4]
 8003b82:	681b      	ldr	r3, [r3, #0]
 8003b84:	430a      	orrs	r2, r1
 8003b86:	601a      	str	r2, [r3, #0]

  if (Channel == DAC_CHANNEL_1)
 8003b88:	683b      	ldr	r3, [r7, #0]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	d10f      	bne.n	8003bae <HAL_DAC_Start+0x6a>
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN1 | DAC_CR_TSEL1)) == DAC_TRIGGER_SOFTWARE)
 8003b8e:	687b      	ldr	r3, [r7, #4]
 8003b90:	681b      	ldr	r3, [r3, #0]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	f003 033c 	and.w	r3, r3, #60	; 0x3c
 8003b98:	2b3c      	cmp	r3, #60	; 0x3c
 8003b9a:	d11d      	bne.n	8003bd8 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion */
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG1);
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	685a      	ldr	r2, [r3, #4]
 8003ba2:	687b      	ldr	r3, [r7, #4]
 8003ba4:	681b      	ldr	r3, [r3, #0]
 8003ba6:	f042 0201 	orr.w	r2, r2, #1
 8003baa:	605a      	str	r2, [r3, #4]
 8003bac:	e014      	b.n	8003bd8 <HAL_DAC_Start+0x94>
  }

  else
  {
    /* Check if software trigger enabled */
    if ((hdac->Instance->CR & (DAC_CR_TEN2 | DAC_CR_TSEL2)) == (DAC_TRIGGER_SOFTWARE << (Channel & 0x10UL)))
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 8003bb8:	683b      	ldr	r3, [r7, #0]
 8003bba:	f003 0310 	and.w	r3, r3, #16
 8003bbe:	213c      	movs	r1, #60	; 0x3c
 8003bc0:	fa01 f303 	lsl.w	r3, r1, r3
 8003bc4:	429a      	cmp	r2, r3
 8003bc6:	d107      	bne.n	8003bd8 <HAL_DAC_Start+0x94>
    {
      /* Enable the selected DAC software conversion*/
      SET_BIT(hdac->Instance->SWTRIGR, DAC_SWTRIGR_SWTRIG2);
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	681b      	ldr	r3, [r3, #0]
 8003bcc:	685a      	ldr	r2, [r3, #4]
 8003bce:	687b      	ldr	r3, [r7, #4]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	f042 0202 	orr.w	r2, r2, #2
 8003bd6:	605a      	str	r2, [r3, #4]
    }
  }


  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003bd8:	687b      	ldr	r3, [r7, #4]
 8003bda:	2201      	movs	r2, #1
 8003bdc:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	2200      	movs	r2, #0
 8003be2:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return HAL_OK;
 8003be4:	2300      	movs	r3, #0
}
 8003be6:	4618      	mov	r0, r3
 8003be8:	370c      	adds	r7, #12
 8003bea:	46bd      	mov	sp, r7
 8003bec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf0:	4770      	bx	lr

08003bf2 <HAL_DAC_SetValue>:
  *            @arg DAC_ALIGN_12B_R: 12bit right data alignment selected
  * @param  Data Data to be loaded in the selected data holding register.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_SetValue(DAC_HandleTypeDef *hdac, uint32_t Channel, uint32_t Alignment, uint32_t Data)
{
 8003bf2:	b480      	push	{r7}
 8003bf4:	b087      	sub	sp, #28
 8003bf6:	af00      	add	r7, sp, #0
 8003bf8:	60f8      	str	r0, [r7, #12]
 8003bfa:	60b9      	str	r1, [r7, #8]
 8003bfc:	607a      	str	r2, [r7, #4]
 8003bfe:	603b      	str	r3, [r7, #0]
  __IO uint32_t tmp = 0UL;
 8003c00:	2300      	movs	r3, #0
 8003c02:	617b      	str	r3, [r7, #20]

  /* Check the DAC peripheral handle */
  if (hdac == NULL)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2b00      	cmp	r3, #0
 8003c08:	d101      	bne.n	8003c0e <HAL_DAC_SetValue+0x1c>
  {
    return HAL_ERROR;
 8003c0a:	2301      	movs	r3, #1
 8003c0c:	e015      	b.n	8003c3a <HAL_DAC_SetValue+0x48>
  /* Check the parameters */
  assert_param(IS_DAC_CHANNEL(Channel));
  assert_param(IS_DAC_ALIGN(Alignment));
  assert_param(IS_DAC_DATA(Data));

  tmp = (uint32_t)hdac->Instance;
 8003c0e:	68fb      	ldr	r3, [r7, #12]
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	617b      	str	r3, [r7, #20]
  if (Channel == DAC_CHANNEL_1)
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d105      	bne.n	8003c26 <HAL_DAC_SetValue+0x34>
  {
    tmp += DAC_DHR12R1_ALIGNMENT(Alignment);
 8003c1a:	697a      	ldr	r2, [r7, #20]
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	4413      	add	r3, r2
 8003c20:	3308      	adds	r3, #8
 8003c22:	617b      	str	r3, [r7, #20]
 8003c24:	e004      	b.n	8003c30 <HAL_DAC_SetValue+0x3e>
  }

  else
  {
    tmp += DAC_DHR12R2_ALIGNMENT(Alignment);
 8003c26:	697a      	ldr	r2, [r7, #20]
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	4413      	add	r3, r2
 8003c2c:	3314      	adds	r3, #20
 8003c2e:	617b      	str	r3, [r7, #20]
  }


  /* Set the DAC channel selected data holding register */
  *(__IO uint32_t *) tmp = Data;
 8003c30:	697b      	ldr	r3, [r7, #20]
 8003c32:	461a      	mov	r2, r3
 8003c34:	683b      	ldr	r3, [r7, #0]
 8003c36:	6013      	str	r3, [r2, #0]

  /* Return function status */
  return HAL_OK;
 8003c38:	2300      	movs	r3, #0
}
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	371c      	adds	r7, #28
 8003c3e:	46bd      	mov	sp, r7
 8003c40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c44:	4770      	bx	lr

08003c46 <HAL_DAC_ConfigChannel>:
  *            @arg DAC_CHANNEL_2: DAC Channel2 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DAC_ConfigChannel(DAC_HandleTypeDef *hdac,
                                        const DAC_ChannelConfTypeDef *sConfig, uint32_t Channel)
{
 8003c46:	b480      	push	{r7}
 8003c48:	b089      	sub	sp, #36	; 0x24
 8003c4a:	af00      	add	r7, sp, #0
 8003c4c:	60f8      	str	r0, [r7, #12]
 8003c4e:	60b9      	str	r1, [r7, #8]
 8003c50:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003c52:	2300      	movs	r3, #0
 8003c54:	77fb      	strb	r3, [r7, #31]
  uint32_t tmpreg1;
  uint32_t tmpreg2;

  /* Check the DAC peripheral handle and channel configuration struct */
  if ((hdac == NULL) || (sConfig == NULL))
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	2b00      	cmp	r3, #0
 8003c5a:	d002      	beq.n	8003c62 <HAL_DAC_ConfigChannel+0x1c>
 8003c5c:	68bb      	ldr	r3, [r7, #8]
 8003c5e:	2b00      	cmp	r3, #0
 8003c60:	d101      	bne.n	8003c66 <HAL_DAC_ConfigChannel+0x20>
  {
    return HAL_ERROR;
 8003c62:	2301      	movs	r3, #1
 8003c64:	e042      	b.n	8003cec <HAL_DAC_ConfigChannel+0xa6>
  assert_param(IS_DAC_TRIGGER(sConfig->DAC_Trigger));
  assert_param(IS_DAC_OUTPUT_BUFFER_STATE(sConfig->DAC_OutputBuffer));
  assert_param(IS_DAC_CHANNEL(Channel));

  /* Process locked */
  __HAL_LOCK(hdac);
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	795b      	ldrb	r3, [r3, #5]
 8003c6a:	2b01      	cmp	r3, #1
 8003c6c:	d101      	bne.n	8003c72 <HAL_DAC_ConfigChannel+0x2c>
 8003c6e:	2302      	movs	r3, #2
 8003c70:	e03c      	b.n	8003cec <HAL_DAC_ConfigChannel+0xa6>
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	2201      	movs	r2, #1
 8003c76:	715a      	strb	r2, [r3, #5]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_BUSY;
 8003c78:	68fb      	ldr	r3, [r7, #12]
 8003c7a:	2202      	movs	r2, #2
 8003c7c:	711a      	strb	r2, [r3, #4]

  /* Get the DAC CR value */
  tmpreg1 = hdac->Instance->CR;
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	681b      	ldr	r3, [r3, #0]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	61bb      	str	r3, [r7, #24]
  /* Clear BOFFx, TENx, TSELx, WAVEx and MAMPx bits */
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
               << (Channel & 0x10UL));
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	f003 0310 	and.w	r3, r3, #16
 8003c8c:	f640 72fe 	movw	r2, #4094	; 0xffe
 8003c90:	fa02 f303 	lsl.w	r3, r2, r3
  tmpreg1 &= ~(((uint32_t)(DAC_CR_MAMP1 | DAC_CR_WAVE1 | DAC_CR_TSEL1 | DAC_CR_TEN1 | DAC_CR_BOFF1))
 8003c94:	43db      	mvns	r3, r3
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	61bb      	str	r3, [r7, #24]
  /* Configure for the selected DAC channel: buffer output, trigger */
  /* Set TSELx and TENx bits according to DAC_Trigger value */
  /* Set BOFFx bit according to DAC_OutputBuffer value */
  tmpreg2 = (sConfig->DAC_Trigger | sConfig->DAC_OutputBuffer);
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	681a      	ldr	r2, [r3, #0]
 8003ca0:	68bb      	ldr	r3, [r7, #8]
 8003ca2:	685b      	ldr	r3, [r3, #4]
 8003ca4:	4313      	orrs	r3, r2
 8003ca6:	617b      	str	r3, [r7, #20]
  /* Calculate CR register value depending on DAC_Channel */
  tmpreg1 |= tmpreg2 << (Channel & 0x10UL);
 8003ca8:	687b      	ldr	r3, [r7, #4]
 8003caa:	f003 0310 	and.w	r3, r3, #16
 8003cae:	697a      	ldr	r2, [r7, #20]
 8003cb0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	4313      	orrs	r3, r2
 8003cb8:	61bb      	str	r3, [r7, #24]
  /* Write to DAC CR */
  hdac->Instance->CR = tmpreg1;
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	69ba      	ldr	r2, [r7, #24]
 8003cc0:	601a      	str	r2, [r3, #0]
  /* Disable wave generation */
  CLEAR_BIT(hdac->Instance->CR, (DAC_CR_WAVE1 << (Channel & 0x10UL)));
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	6819      	ldr	r1, [r3, #0]
 8003cc8:	687b      	ldr	r3, [r7, #4]
 8003cca:	f003 0310 	and.w	r3, r3, #16
 8003cce:	22c0      	movs	r2, #192	; 0xc0
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	43da      	mvns	r2, r3
 8003cd6:	68fb      	ldr	r3, [r7, #12]
 8003cd8:	681b      	ldr	r3, [r3, #0]
 8003cda:	400a      	ands	r2, r1
 8003cdc:	601a      	str	r2, [r3, #0]

  /* Change DAC state */
  hdac->State = HAL_DAC_STATE_READY;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	2201      	movs	r2, #1
 8003ce2:	711a      	strb	r2, [r3, #4]

  /* Process unlocked */
  __HAL_UNLOCK(hdac);
 8003ce4:	68fb      	ldr	r3, [r7, #12]
 8003ce6:	2200      	movs	r2, #0
 8003ce8:	715a      	strb	r2, [r3, #5]

  /* Return function status */
  return status;
 8003cea:	7ffb      	ldrb	r3, [r7, #31]
}
 8003cec:	4618      	mov	r0, r3
 8003cee:	3724      	adds	r7, #36	; 0x24
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr

08003cf8 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b086      	sub	sp, #24
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d00:	2300      	movs	r3, #0
 8003d02:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003d04:	f7ff fa4a 	bl	800319c <HAL_GetTick>
 8003d08:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d101      	bne.n	8003d14 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e099      	b.n	8003e48 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	2202      	movs	r2, #2
 8003d18:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	2200      	movs	r2, #0
 8003d20:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	681a      	ldr	r2, [r3, #0]
 8003d2a:	687b      	ldr	r3, [r7, #4]
 8003d2c:	681b      	ldr	r3, [r3, #0]
 8003d2e:	f022 0201 	bic.w	r2, r2, #1
 8003d32:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d34:	e00f      	b.n	8003d56 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003d36:	f7ff fa31 	bl	800319c <HAL_GetTick>
 8003d3a:	4602      	mov	r2, r0
 8003d3c:	693b      	ldr	r3, [r7, #16]
 8003d3e:	1ad3      	subs	r3, r2, r3
 8003d40:	2b05      	cmp	r3, #5
 8003d42:	d908      	bls.n	8003d56 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2220      	movs	r2, #32
 8003d48:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	2203      	movs	r2, #3
 8003d4e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003d52:	2303      	movs	r3, #3
 8003d54:	e078      	b.n	8003e48 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003d56:	687b      	ldr	r3, [r7, #4]
 8003d58:	681b      	ldr	r3, [r3, #0]
 8003d5a:	681b      	ldr	r3, [r3, #0]
 8003d5c:	f003 0301 	and.w	r3, r3, #1
 8003d60:	2b00      	cmp	r3, #0
 8003d62:	d1e8      	bne.n	8003d36 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	681b      	ldr	r3, [r3, #0]
 8003d6a:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003d6c:	697a      	ldr	r2, [r7, #20]
 8003d6e:	4b38      	ldr	r3, [pc, #224]	; (8003e50 <HAL_DMA_Init+0x158>)
 8003d70:	4013      	ands	r3, r2
 8003d72:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	685a      	ldr	r2, [r3, #4]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	689b      	ldr	r3, [r3, #8]
 8003d7c:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d7e:	687b      	ldr	r3, [r7, #4]
 8003d80:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003d82:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	691b      	ldr	r3, [r3, #16]
 8003d88:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003d8e:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	699b      	ldr	r3, [r3, #24]
 8003d94:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003d9a:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003d9c:	687b      	ldr	r3, [r7, #4]
 8003d9e:	6a1b      	ldr	r3, [r3, #32]
 8003da0:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003da2:	697a      	ldr	r2, [r7, #20]
 8003da4:	4313      	orrs	r3, r2
 8003da6:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003dac:	2b04      	cmp	r3, #4
 8003dae:	d107      	bne.n	8003dc0 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003db4:	687b      	ldr	r3, [r7, #4]
 8003db6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003db8:	4313      	orrs	r3, r2
 8003dba:	697a      	ldr	r2, [r7, #20]
 8003dbc:	4313      	orrs	r3, r2
 8003dbe:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	681b      	ldr	r3, [r3, #0]
 8003dc4:	697a      	ldr	r2, [r7, #20]
 8003dc6:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003dc8:	687b      	ldr	r3, [r7, #4]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003dd0:	697b      	ldr	r3, [r7, #20]
 8003dd2:	f023 0307 	bic.w	r3, r3, #7
 8003dd6:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003dd8:	687b      	ldr	r3, [r7, #4]
 8003dda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ddc:	697a      	ldr	r2, [r7, #20]
 8003dde:	4313      	orrs	r3, r2
 8003de0:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003de6:	2b04      	cmp	r3, #4
 8003de8:	d117      	bne.n	8003e1a <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003dee:	697a      	ldr	r2, [r7, #20]
 8003df0:	4313      	orrs	r3, r2
 8003df2:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d00e      	beq.n	8003e1a <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003dfc:	6878      	ldr	r0, [r7, #4]
 8003dfe:	f000 fb23 	bl	8004448 <DMA_CheckFifoParam>
 8003e02:	4603      	mov	r3, r0
 8003e04:	2b00      	cmp	r3, #0
 8003e06:	d008      	beq.n	8003e1a <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	2240      	movs	r2, #64	; 0x40
 8003e0c:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_RESET;
 8003e0e:	687b      	ldr	r3, [r7, #4]
 8003e10:	2200      	movs	r2, #0
 8003e12:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003e16:	2301      	movs	r3, #1
 8003e18:	e016      	b.n	8003e48 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003e1a:	687b      	ldr	r3, [r7, #4]
 8003e1c:	681b      	ldr	r3, [r3, #0]
 8003e1e:	697a      	ldr	r2, [r7, #20]
 8003e20:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 fada 	bl	80043dc <DMA_CalcBaseAndBitshift>
 8003e28:	4603      	mov	r3, r0
 8003e2a:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e30:	223f      	movs	r2, #63	; 0x3f
 8003e32:	409a      	lsls	r2, r3
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	2200      	movs	r2, #0
 8003e3c:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2201      	movs	r2, #1
 8003e42:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003e46:	2300      	movs	r3, #0
}
 8003e48:	4618      	mov	r0, r3
 8003e4a:	3718      	adds	r7, #24
 8003e4c:	46bd      	mov	sp, r7
 8003e4e:	bd80      	pop	{r7, pc}
 8003e50:	f010803f 	.word	0xf010803f

08003e54 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003e54:	b580      	push	{r7, lr}
 8003e56:	b086      	sub	sp, #24
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	60f8      	str	r0, [r7, #12]
 8003e5c:	60b9      	str	r1, [r7, #8]
 8003e5e:	607a      	str	r2, [r7, #4]
 8003e60:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003e62:	2300      	movs	r3, #0
 8003e64:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003e6a:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003e72:	2b01      	cmp	r3, #1
 8003e74:	d101      	bne.n	8003e7a <HAL_DMA_Start_IT+0x26>
 8003e76:	2302      	movs	r3, #2
 8003e78:	e048      	b.n	8003f0c <HAL_DMA_Start_IT+0xb8>
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003e88:	b2db      	uxtb	r3, r3
 8003e8a:	2b01      	cmp	r3, #1
 8003e8c:	d137      	bne.n	8003efe <HAL_DMA_Start_IT+0xaa>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2202      	movs	r2, #2
 8003e92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003e9c:	683b      	ldr	r3, [r7, #0]
 8003e9e:	687a      	ldr	r2, [r7, #4]
 8003ea0:	68b9      	ldr	r1, [r7, #8]
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f000 fa6c 	bl	8004380 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003ea8:	68fb      	ldr	r3, [r7, #12]
 8003eaa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003eac:	223f      	movs	r2, #63	; 0x3f
 8003eae:	409a      	lsls	r2, r3
 8003eb0:	693b      	ldr	r3, [r7, #16]
 8003eb2:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	681b      	ldr	r3, [r3, #0]
 8003eb8:	681a      	ldr	r2, [r3, #0]
 8003eba:	68fb      	ldr	r3, [r7, #12]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	f042 0216 	orr.w	r2, r2, #22
 8003ec2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR |= DMA_IT_FE;
 8003ec4:	68fb      	ldr	r3, [r7, #12]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	695a      	ldr	r2, [r3, #20]
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	681b      	ldr	r3, [r3, #0]
 8003ece:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8003ed2:	615a      	str	r2, [r3, #20]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ed8:	2b00      	cmp	r3, #0
 8003eda:	d007      	beq.n	8003eec <HAL_DMA_Start_IT+0x98>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003edc:	68fb      	ldr	r3, [r7, #12]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	681a      	ldr	r2, [r3, #0]
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	f042 0208 	orr.w	r2, r2, #8
 8003eea:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	681b      	ldr	r3, [r3, #0]
 8003ef0:	681a      	ldr	r2, [r3, #0]
 8003ef2:	68fb      	ldr	r3, [r7, #12]
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	f042 0201 	orr.w	r2, r2, #1
 8003efa:	601a      	str	r2, [r3, #0]
 8003efc:	e005      	b.n	8003f0a <HAL_DMA_Start_IT+0xb6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	2200      	movs	r2, #0
 8003f02:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003f06:	2302      	movs	r3, #2
 8003f08:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003f0a:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f0c:	4618      	mov	r0, r3
 8003f0e:	3718      	adds	r7, #24
 8003f10:	46bd      	mov	sp, r7
 8003f12:	bd80      	pop	{r7, pc}

08003f14 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f14:	b580      	push	{r7, lr}
 8003f16:	b084      	sub	sp, #16
 8003f18:	af00      	add	r7, sp, #0
 8003f1a:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f1c:	687b      	ldr	r3, [r7, #4]
 8003f1e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f20:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003f22:	f7ff f93b 	bl	800319c <HAL_GetTick>
 8003f26:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f2e:	b2db      	uxtb	r3, r3
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d008      	beq.n	8003f46 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	2280      	movs	r2, #128	; 0x80
 8003f38:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e052      	b.n	8003fec <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	681a      	ldr	r2, [r3, #0]
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	681b      	ldr	r3, [r3, #0]
 8003f50:	f022 0216 	bic.w	r2, r2, #22
 8003f54:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003f56:	687b      	ldr	r3, [r7, #4]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	695a      	ldr	r2, [r3, #20]
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003f64:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6a:	2b00      	cmp	r3, #0
 8003f6c:	d103      	bne.n	8003f76 <HAL_DMA_Abort+0x62>
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003f72:	2b00      	cmp	r3, #0
 8003f74:	d007      	beq.n	8003f86 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003f76:	687b      	ldr	r3, [r7, #4]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	681a      	ldr	r2, [r3, #0]
 8003f7c:	687b      	ldr	r3, [r7, #4]
 8003f7e:	681b      	ldr	r3, [r3, #0]
 8003f80:	f022 0208 	bic.w	r2, r2, #8
 8003f84:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003f86:	687b      	ldr	r3, [r7, #4]
 8003f88:	681b      	ldr	r3, [r3, #0]
 8003f8a:	681a      	ldr	r2, [r3, #0]
 8003f8c:	687b      	ldr	r3, [r7, #4]
 8003f8e:	681b      	ldr	r3, [r3, #0]
 8003f90:	f022 0201 	bic.w	r2, r2, #1
 8003f94:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f96:	e013      	b.n	8003fc0 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f98:	f7ff f900 	bl	800319c <HAL_GetTick>
 8003f9c:	4602      	mov	r2, r0
 8003f9e:	68bb      	ldr	r3, [r7, #8]
 8003fa0:	1ad3      	subs	r3, r2, r3
 8003fa2:	2b05      	cmp	r3, #5
 8003fa4:	d90c      	bls.n	8003fc0 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	2220      	movs	r2, #32
 8003faa:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003fac:	687b      	ldr	r3, [r7, #4]
 8003fae:	2203      	movs	r2, #3
 8003fb0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        return HAL_TIMEOUT;
 8003fbc:	2303      	movs	r3, #3
 8003fbe:	e015      	b.n	8003fec <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003fc0:	687b      	ldr	r3, [r7, #4]
 8003fc2:	681b      	ldr	r3, [r3, #0]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	f003 0301 	and.w	r3, r3, #1
 8003fca:	2b00      	cmp	r3, #0
 8003fcc:	d1e4      	bne.n	8003f98 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003fd2:	223f      	movs	r2, #63	; 0x3f
 8003fd4:	409a      	lsls	r2, r3
 8003fd6:	68fb      	ldr	r3, [r7, #12]
 8003fd8:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	2201      	movs	r2, #1
 8003fde:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	2200      	movs	r2, #0
 8003fe6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
  }
  return HAL_OK;
 8003fea:	2300      	movs	r3, #0
}
 8003fec:	4618      	mov	r0, r3
 8003fee:	3710      	adds	r7, #16
 8003ff0:	46bd      	mov	sp, r7
 8003ff2:	bd80      	pop	{r7, pc}

08003ff4 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8003ff4:	b480      	push	{r7}
 8003ff6:	b083      	sub	sp, #12
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004002:	b2db      	uxtb	r3, r3
 8004004:	2b02      	cmp	r3, #2
 8004006:	d004      	beq.n	8004012 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2280      	movs	r2, #128	; 0x80
 800400c:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800400e:	2301      	movs	r3, #1
 8004010:	e00c      	b.n	800402c <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2205      	movs	r2, #5
 8004016:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	681a      	ldr	r2, [r3, #0]
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	f022 0201 	bic.w	r2, r2, #1
 8004028:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800402a:	2300      	movs	r3, #0
}
 800402c:	4618      	mov	r0, r3
 800402e:	370c      	adds	r7, #12
 8004030:	46bd      	mov	sp, r7
 8004032:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004036:	4770      	bx	lr

08004038 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004038:	b580      	push	{r7, lr}
 800403a:	b086      	sub	sp, #24
 800403c:	af00      	add	r7, sp, #0
 800403e:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0;
 8004040:	2300      	movs	r3, #0
 8004042:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600;
 8004044:	4b8e      	ldr	r3, [pc, #568]	; (8004280 <HAL_DMA_IRQHandler+0x248>)
 8004046:	681b      	ldr	r3, [r3, #0]
 8004048:	4a8e      	ldr	r2, [pc, #568]	; (8004284 <HAL_DMA_IRQHandler+0x24c>)
 800404a:	fba2 2303 	umull	r2, r3, r2, r3
 800404e:	0a9b      	lsrs	r3, r3, #10
 8004050:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004056:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004058:	693b      	ldr	r3, [r7, #16]
 800405a:	681b      	ldr	r3, [r3, #0]
 800405c:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004062:	2208      	movs	r2, #8
 8004064:	409a      	lsls	r2, r3
 8004066:	68fb      	ldr	r3, [r7, #12]
 8004068:	4013      	ands	r3, r2
 800406a:	2b00      	cmp	r3, #0
 800406c:	d01a      	beq.n	80040a4 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	681b      	ldr	r3, [r3, #0]
 8004074:	f003 0304 	and.w	r3, r3, #4
 8004078:	2b00      	cmp	r3, #0
 800407a:	d013      	beq.n	80040a4 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	681a      	ldr	r2, [r3, #0]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f022 0204 	bic.w	r2, r2, #4
 800408a:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004090:	2208      	movs	r2, #8
 8004092:	409a      	lsls	r2, r3
 8004094:	693b      	ldr	r3, [r7, #16]
 8004096:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800409c:	f043 0201 	orr.w	r2, r3, #1
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040a8:	2201      	movs	r2, #1
 80040aa:	409a      	lsls	r2, r3
 80040ac:	68fb      	ldr	r3, [r7, #12]
 80040ae:	4013      	ands	r3, r2
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d012      	beq.n	80040da <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	695b      	ldr	r3, [r3, #20]
 80040ba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040be:	2b00      	cmp	r3, #0
 80040c0:	d00b      	beq.n	80040da <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040c6:	2201      	movs	r2, #1
 80040c8:	409a      	lsls	r2, r3
 80040ca:	693b      	ldr	r3, [r7, #16]
 80040cc:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040d2:	f043 0202 	orr.w	r2, r3, #2
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040de:	2204      	movs	r2, #4
 80040e0:	409a      	lsls	r2, r3
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	4013      	ands	r3, r2
 80040e6:	2b00      	cmp	r3, #0
 80040e8:	d012      	beq.n	8004110 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	f003 0302 	and.w	r3, r3, #2
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00b      	beq.n	8004110 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040fc:	2204      	movs	r2, #4
 80040fe:	409a      	lsls	r2, r3
 8004100:	693b      	ldr	r3, [r7, #16]
 8004102:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004108:	f043 0204 	orr.w	r2, r3, #4
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004114:	2210      	movs	r2, #16
 8004116:	409a      	lsls	r2, r3
 8004118:	68fb      	ldr	r3, [r7, #12]
 800411a:	4013      	ands	r3, r2
 800411c:	2b00      	cmp	r3, #0
 800411e:	d043      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004120:	687b      	ldr	r3, [r7, #4]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681b      	ldr	r3, [r3, #0]
 8004126:	f003 0308 	and.w	r3, r3, #8
 800412a:	2b00      	cmp	r3, #0
 800412c:	d03c      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004132:	2210      	movs	r2, #16
 8004134:	409a      	lsls	r2, r3
 8004136:	693b      	ldr	r3, [r7, #16]
 8004138:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	681b      	ldr	r3, [r3, #0]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004144:	2b00      	cmp	r3, #0
 8004146:	d018      	beq.n	800417a <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	681b      	ldr	r3, [r3, #0]
 800414e:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004152:	2b00      	cmp	r3, #0
 8004154:	d108      	bne.n	8004168 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004156:	687b      	ldr	r3, [r7, #4]
 8004158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800415a:	2b00      	cmp	r3, #0
 800415c:	d024      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004162:	6878      	ldr	r0, [r7, #4]
 8004164:	4798      	blx	r3
 8004166:	e01f      	b.n	80041a8 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800416c:	2b00      	cmp	r3, #0
 800416e:	d01b      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004174:	6878      	ldr	r0, [r7, #4]
 8004176:	4798      	blx	r3
 8004178:	e016      	b.n	80041a8 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004184:	2b00      	cmp	r3, #0
 8004186:	d107      	bne.n	8004198 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004188:	687b      	ldr	r3, [r7, #4]
 800418a:	681b      	ldr	r3, [r3, #0]
 800418c:	681a      	ldr	r2, [r3, #0]
 800418e:	687b      	ldr	r3, [r7, #4]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	f022 0208 	bic.w	r2, r2, #8
 8004196:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004198:	687b      	ldr	r3, [r7, #4]
 800419a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419c:	2b00      	cmp	r3, #0
 800419e:	d003      	beq.n	80041a8 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80041a0:	687b      	ldr	r3, [r7, #4]
 80041a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041a4:	6878      	ldr	r0, [r7, #4]
 80041a6:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ac:	2220      	movs	r2, #32
 80041ae:	409a      	lsls	r2, r3
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	4013      	ands	r3, r2
 80041b4:	2b00      	cmp	r3, #0
 80041b6:	f000 808f 	beq.w	80042d8 <HAL_DMA_IRQHandler+0x2a0>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f003 0310 	and.w	r3, r3, #16
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	f000 8087 	beq.w	80042d8 <HAL_DMA_IRQHandler+0x2a0>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041ce:	2220      	movs	r2, #32
 80041d0:	409a      	lsls	r2, r3
 80041d2:	693b      	ldr	r3, [r7, #16]
 80041d4:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80041dc:	b2db      	uxtb	r3, r3
 80041de:	2b05      	cmp	r3, #5
 80041e0:	d136      	bne.n	8004250 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80041e2:	687b      	ldr	r3, [r7, #4]
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	681a      	ldr	r2, [r3, #0]
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	f022 0216 	bic.w	r2, r2, #22
 80041f0:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80041f2:	687b      	ldr	r3, [r7, #4]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	695a      	ldr	r2, [r3, #20]
 80041f8:	687b      	ldr	r3, [r7, #4]
 80041fa:	681b      	ldr	r3, [r3, #0]
 80041fc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004200:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004206:	2b00      	cmp	r3, #0
 8004208:	d103      	bne.n	8004212 <HAL_DMA_IRQHandler+0x1da>
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800420e:	2b00      	cmp	r3, #0
 8004210:	d007      	beq.n	8004222 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004212:	687b      	ldr	r3, [r7, #4]
 8004214:	681b      	ldr	r3, [r3, #0]
 8004216:	681a      	ldr	r2, [r3, #0]
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f022 0208 	bic.w	r2, r2, #8
 8004220:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004226:	223f      	movs	r2, #63	; 0x3f
 8004228:	409a      	lsls	r2, r3
 800422a:	693b      	ldr	r3, [r7, #16]
 800422c:	609a      	str	r2, [r3, #8]

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800422e:	687b      	ldr	r3, [r7, #4]
 8004230:	2201      	movs	r2, #1
 8004232:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	2200      	movs	r2, #0
 800423a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        if(hdma->XferAbortCallback != NULL)
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004242:	2b00      	cmp	r3, #0
 8004244:	d07e      	beq.n	8004344 <HAL_DMA_IRQHandler+0x30c>
        {
          hdma->XferAbortCallback(hdma);
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800424a:	6878      	ldr	r0, [r7, #4]
 800424c:	4798      	blx	r3
        }
        return;
 800424e:	e079      	b.n	8004344 <HAL_DMA_IRQHandler+0x30c>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004250:	687b      	ldr	r3, [r7, #4]
 8004252:	681b      	ldr	r3, [r3, #0]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800425a:	2b00      	cmp	r3, #0
 800425c:	d01d      	beq.n	800429a <HAL_DMA_IRQHandler+0x262>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681b      	ldr	r3, [r3, #0]
 8004264:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004268:	2b00      	cmp	r3, #0
 800426a:	d10d      	bne.n	8004288 <HAL_DMA_IRQHandler+0x250>
        {
          if(hdma->XferM1CpltCallback != NULL)
 800426c:	687b      	ldr	r3, [r7, #4]
 800426e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004270:	2b00      	cmp	r3, #0
 8004272:	d031      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004278:	6878      	ldr	r0, [r7, #4]
 800427a:	4798      	blx	r3
 800427c:	e02c      	b.n	80042d8 <HAL_DMA_IRQHandler+0x2a0>
 800427e:	bf00      	nop
 8004280:	20000000 	.word	0x20000000
 8004284:	1b4e81b5 	.word	0x1b4e81b5
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 8004288:	687b      	ldr	r3, [r7, #4]
 800428a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800428c:	2b00      	cmp	r3, #0
 800428e:	d023      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x2a0>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004290:	687b      	ldr	r3, [r7, #4]
 8004292:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004294:	6878      	ldr	r0, [r7, #4]
 8004296:	4798      	blx	r3
 8004298:	e01e      	b.n	80042d8 <HAL_DMA_IRQHandler+0x2a0>
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	681b      	ldr	r3, [r3, #0]
 80042a0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042a4:	2b00      	cmp	r3, #0
 80042a6:	d10f      	bne.n	80042c8 <HAL_DMA_IRQHandler+0x290>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	687b      	ldr	r3, [r7, #4]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f022 0210 	bic.w	r2, r2, #16
 80042b6:	601a      	str	r2, [r3, #0]

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	2201      	movs	r2, #1
 80042bc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        }

        if(hdma->XferCpltCallback != NULL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d003      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x2a0>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042dc:	2b00      	cmp	r3, #0
 80042de:	d032      	beq.n	8004346 <HAL_DMA_IRQHandler+0x30e>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042e4:	f003 0301 	and.w	r3, r3, #1
 80042e8:	2b00      	cmp	r3, #0
 80042ea:	d022      	beq.n	8004332 <HAL_DMA_IRQHandler+0x2fa>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2205      	movs	r2, #5
 80042f0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681a      	ldr	r2, [r3, #0]
 80042fa:	687b      	ldr	r3, [r7, #4]
 80042fc:	681b      	ldr	r3, [r3, #0]
 80042fe:	f022 0201 	bic.w	r2, r2, #1
 8004302:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	3301      	adds	r3, #1
 8004308:	60bb      	str	r3, [r7, #8]
 800430a:	697a      	ldr	r2, [r7, #20]
 800430c:	429a      	cmp	r2, r3
 800430e:	d307      	bcc.n	8004320 <HAL_DMA_IRQHandler+0x2e8>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004310:	687b      	ldr	r3, [r7, #4]
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	681b      	ldr	r3, [r3, #0]
 8004316:	f003 0301 	and.w	r3, r3, #1
 800431a:	2b00      	cmp	r3, #0
 800431c:	d1f2      	bne.n	8004304 <HAL_DMA_IRQHandler+0x2cc>
 800431e:	e000      	b.n	8004322 <HAL_DMA_IRQHandler+0x2ea>
          break;
 8004320:	bf00      	nop

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	2201      	movs	r2, #1
 8004326:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	2200      	movs	r2, #0
 800432e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

    }

    if(hdma->XferErrorCallback != NULL)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004336:	2b00      	cmp	r3, #0
 8004338:	d005      	beq.n	8004346 <HAL_DMA_IRQHandler+0x30e>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800433e:	6878      	ldr	r0, [r7, #4]
 8004340:	4798      	blx	r3
 8004342:	e000      	b.n	8004346 <HAL_DMA_IRQHandler+0x30e>
        return;
 8004344:	bf00      	nop
    }
  }
}
 8004346:	3718      	adds	r7, #24
 8004348:	46bd      	mov	sp, r7
 800434a:	bd80      	pop	{r7, pc}

0800434c <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800434c:	b480      	push	{r7}
 800434e:	b083      	sub	sp, #12
 8004350:	af00      	add	r7, sp, #0
 8004352:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800435a:	b2db      	uxtb	r3, r3
}
 800435c:	4618      	mov	r0, r3
 800435e:	370c      	adds	r7, #12
 8004360:	46bd      	mov	sp, r7
 8004362:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004366:	4770      	bx	lr

08004368 <HAL_DMA_GetError>:
  * @param  hdma  pointer to a DMA_HandleTypeDef structure that contains
  *              the configuration information for the specified DMA Stream.
  * @retval DMA Error Code
  */
uint32_t HAL_DMA_GetError(DMA_HandleTypeDef *hdma)
{
 8004368:	b480      	push	{r7}
 800436a:	b083      	sub	sp, #12
 800436c:	af00      	add	r7, sp, #0
 800436e:	6078      	str	r0, [r7, #4]
  return hdma->ErrorCode;
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	6d5b      	ldr	r3, [r3, #84]	; 0x54
}
 8004374:	4618      	mov	r0, r3
 8004376:	370c      	adds	r7, #12
 8004378:	46bd      	mov	sp, r7
 800437a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800437e:	4770      	bx	lr

08004380 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004380:	b480      	push	{r7}
 8004382:	b085      	sub	sp, #20
 8004384:	af00      	add	r7, sp, #0
 8004386:	60f8      	str	r0, [r7, #12]
 8004388:	60b9      	str	r1, [r7, #8]
 800438a:	607a      	str	r2, [r7, #4]
 800438c:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 800438e:	68fb      	ldr	r3, [r7, #12]
 8004390:	681b      	ldr	r3, [r3, #0]
 8004392:	681a      	ldr	r2, [r3, #0]
 8004394:	68fb      	ldr	r3, [r7, #12]
 8004396:	681b      	ldr	r3, [r3, #0]
 8004398:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 800439c:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 800439e:	68fb      	ldr	r3, [r7, #12]
 80043a0:	681b      	ldr	r3, [r3, #0]
 80043a2:	683a      	ldr	r2, [r7, #0]
 80043a4:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	689b      	ldr	r3, [r3, #8]
 80043aa:	2b40      	cmp	r3, #64	; 0x40
 80043ac:	d108      	bne.n	80043c0 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80043ae:	68fb      	ldr	r3, [r7, #12]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	687a      	ldr	r2, [r7, #4]
 80043b4:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80043b6:	68fb      	ldr	r3, [r7, #12]
 80043b8:	681b      	ldr	r3, [r3, #0]
 80043ba:	68ba      	ldr	r2, [r7, #8]
 80043bc:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80043be:	e007      	b.n	80043d0 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	68ba      	ldr	r2, [r7, #8]
 80043c6:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	687a      	ldr	r2, [r7, #4]
 80043ce:	60da      	str	r2, [r3, #12]
}
 80043d0:	bf00      	nop
 80043d2:	3714      	adds	r7, #20
 80043d4:	46bd      	mov	sp, r7
 80043d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043da:	4770      	bx	lr

080043dc <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80043dc:	b480      	push	{r7}
 80043de:	b085      	sub	sp, #20
 80043e0:	af00      	add	r7, sp, #0
 80043e2:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	b2db      	uxtb	r3, r3
 80043ea:	3b10      	subs	r3, #16
 80043ec:	4a13      	ldr	r2, [pc, #76]	; (800443c <DMA_CalcBaseAndBitshift+0x60>)
 80043ee:	fba2 2303 	umull	r2, r3, r2, r3
 80043f2:	091b      	lsrs	r3, r3, #4
 80043f4:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80043f6:	4a12      	ldr	r2, [pc, #72]	; (8004440 <DMA_CalcBaseAndBitshift+0x64>)
 80043f8:	68fb      	ldr	r3, [r7, #12]
 80043fa:	4413      	add	r3, r2
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	461a      	mov	r2, r3
 8004400:	687b      	ldr	r3, [r7, #4]
 8004402:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	2b03      	cmp	r3, #3
 8004408:	d908      	bls.n	800441c <DMA_CalcBaseAndBitshift+0x40>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	461a      	mov	r2, r3
 8004410:	4b0c      	ldr	r3, [pc, #48]	; (8004444 <DMA_CalcBaseAndBitshift+0x68>)
 8004412:	4013      	ands	r3, r2
 8004414:	1d1a      	adds	r2, r3, #4
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	659a      	str	r2, [r3, #88]	; 0x58
 800441a:	e006      	b.n	800442a <DMA_CalcBaseAndBitshift+0x4e>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	461a      	mov	r2, r3
 8004422:	4b08      	ldr	r3, [pc, #32]	; (8004444 <DMA_CalcBaseAndBitshift+0x68>)
 8004424:	4013      	ands	r3, r2
 8004426:	687a      	ldr	r2, [r7, #4]
 8004428:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800442e:	4618      	mov	r0, r3
 8004430:	3714      	adds	r7, #20
 8004432:	46bd      	mov	sp, r7
 8004434:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004438:	4770      	bx	lr
 800443a:	bf00      	nop
 800443c:	aaaaaaab 	.word	0xaaaaaaab
 8004440:	08020f58 	.word	0x08020f58
 8004444:	fffffc00 	.word	0xfffffc00

08004448 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004448:	b480      	push	{r7}
 800444a:	b085      	sub	sp, #20
 800444c:	af00      	add	r7, sp, #0
 800444e:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004450:	2300      	movs	r3, #0
 8004452:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004458:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	699b      	ldr	r3, [r3, #24]
 800445e:	2b00      	cmp	r3, #0
 8004460:	d11f      	bne.n	80044a2 <DMA_CheckFifoParam+0x5a>
  {
    switch (tmp)
 8004462:	68bb      	ldr	r3, [r7, #8]
 8004464:	2b03      	cmp	r3, #3
 8004466:	d856      	bhi.n	8004516 <DMA_CheckFifoParam+0xce>
 8004468:	a201      	add	r2, pc, #4	; (adr r2, 8004470 <DMA_CheckFifoParam+0x28>)
 800446a:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800446e:	bf00      	nop
 8004470:	08004481 	.word	0x08004481
 8004474:	08004493 	.word	0x08004493
 8004478:	08004481 	.word	0x08004481
 800447c:	08004517 	.word	0x08004517
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004480:	687b      	ldr	r3, [r7, #4]
 8004482:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004484:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004488:	2b00      	cmp	r3, #0
 800448a:	d046      	beq.n	800451a <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 800448c:	2301      	movs	r3, #1
 800448e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004490:	e043      	b.n	800451a <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004496:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800449a:	d140      	bne.n	800451e <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 800449c:	2301      	movs	r3, #1
 800449e:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044a0:	e03d      	b.n	800451e <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	699b      	ldr	r3, [r3, #24]
 80044a6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044aa:	d121      	bne.n	80044f0 <DMA_CheckFifoParam+0xa8>
  {
    switch (tmp)
 80044ac:	68bb      	ldr	r3, [r7, #8]
 80044ae:	2b03      	cmp	r3, #3
 80044b0:	d837      	bhi.n	8004522 <DMA_CheckFifoParam+0xda>
 80044b2:	a201      	add	r2, pc, #4	; (adr r2, 80044b8 <DMA_CheckFifoParam+0x70>)
 80044b4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b8:	080044c9 	.word	0x080044c9
 80044bc:	080044cf 	.word	0x080044cf
 80044c0:	080044c9 	.word	0x080044c9
 80044c4:	080044e1 	.word	0x080044e1
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80044c8:	2301      	movs	r3, #1
 80044ca:	73fb      	strb	r3, [r7, #15]
      break;
 80044cc:	e030      	b.n	8004530 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044d2:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d025      	beq.n	8004526 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80044da:	2301      	movs	r3, #1
 80044dc:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044de:	e022      	b.n	8004526 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044e4:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80044e8:	d11f      	bne.n	800452a <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80044ea:	2301      	movs	r3, #1
 80044ec:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80044ee:	e01c      	b.n	800452a <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	2b02      	cmp	r3, #2
 80044f4:	d903      	bls.n	80044fe <DMA_CheckFifoParam+0xb6>
 80044f6:	68bb      	ldr	r3, [r7, #8]
 80044f8:	2b03      	cmp	r3, #3
 80044fa:	d003      	beq.n	8004504 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80044fc:	e018      	b.n	8004530 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	73fb      	strb	r3, [r7, #15]
      break;
 8004502:	e015      	b.n	8004530 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004508:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800450c:	2b00      	cmp	r3, #0
 800450e:	d00e      	beq.n	800452e <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004510:	2301      	movs	r3, #1
 8004512:	73fb      	strb	r3, [r7, #15]
      break;
 8004514:	e00b      	b.n	800452e <DMA_CheckFifoParam+0xe6>
      break;
 8004516:	bf00      	nop
 8004518:	e00a      	b.n	8004530 <DMA_CheckFifoParam+0xe8>
      break;
 800451a:	bf00      	nop
 800451c:	e008      	b.n	8004530 <DMA_CheckFifoParam+0xe8>
      break;
 800451e:	bf00      	nop
 8004520:	e006      	b.n	8004530 <DMA_CheckFifoParam+0xe8>
      break;
 8004522:	bf00      	nop
 8004524:	e004      	b.n	8004530 <DMA_CheckFifoParam+0xe8>
      break;
 8004526:	bf00      	nop
 8004528:	e002      	b.n	8004530 <DMA_CheckFifoParam+0xe8>
      break;   
 800452a:	bf00      	nop
 800452c:	e000      	b.n	8004530 <DMA_CheckFifoParam+0xe8>
      break;
 800452e:	bf00      	nop
    }
  } 
  
  return status; 
 8004530:	7bfb      	ldrb	r3, [r7, #15]
}
 8004532:	4618      	mov	r0, r3
 8004534:	3714      	adds	r7, #20
 8004536:	46bd      	mov	sp, r7
 8004538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800453c:	4770      	bx	lr
 800453e:	bf00      	nop

08004540 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	2b00      	cmp	r3, #0
 800454c:	d101      	bne.n	8004552 <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 800454e:	2301      	movs	r3, #1
 8004550:	e086      	b.n	8004660 <HAL_ETH_Init+0x120>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004558:	2b00      	cmp	r3, #0
 800455a:	d106      	bne.n	800456a <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2223      	movs	r2, #35	; 0x23
 8004560:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	f009 ff83 	bl	800e470 <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800456a:	4b3f      	ldr	r3, [pc, #252]	; (8004668 <HAL_ETH_Init+0x128>)
 800456c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800456e:	4a3e      	ldr	r2, [pc, #248]	; (8004668 <HAL_ETH_Init+0x128>)
 8004570:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004574:	6453      	str	r3, [r2, #68]	; 0x44
 8004576:	4b3c      	ldr	r3, [pc, #240]	; (8004668 <HAL_ETH_Init+0x128>)
 8004578:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800457a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800457e:	60bb      	str	r3, [r7, #8]
 8004580:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 8004582:	4b3a      	ldr	r3, [pc, #232]	; (800466c <HAL_ETH_Init+0x12c>)
 8004584:	685b      	ldr	r3, [r3, #4]
 8004586:	4a39      	ldr	r2, [pc, #228]	; (800466c <HAL_ETH_Init+0x12c>)
 8004588:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800458c:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 800458e:	4b37      	ldr	r3, [pc, #220]	; (800466c <HAL_ETH_Init+0x12c>)
 8004590:	685a      	ldr	r2, [r3, #4]
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	689b      	ldr	r3, [r3, #8]
 8004596:	4935      	ldr	r1, [pc, #212]	; (800466c <HAL_ETH_Init+0x12c>)
 8004598:	4313      	orrs	r3, r2
 800459a:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 800459c:	4b33      	ldr	r3, [pc, #204]	; (800466c <HAL_ETH_Init+0x12c>)
 800459e:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	681b      	ldr	r3, [r3, #0]
 80045a4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	687a      	ldr	r2, [r7, #4]
 80045ac:	6812      	ldr	r2, [r2, #0]
 80045ae:	f043 0301 	orr.w	r3, r3, #1
 80045b2:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80045b6:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80045b8:	f7fe fdf0 	bl	800319c <HAL_GetTick>
 80045bc:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80045be:	e011      	b.n	80045e4 <HAL_ETH_Init+0xa4>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 80045c0:	f7fe fdec 	bl	800319c <HAL_GetTick>
 80045c4:	4602      	mov	r2, r0
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	1ad3      	subs	r3, r2, r3
 80045ca:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 80045ce:	d909      	bls.n	80045e4 <HAL_ETH_Init+0xa4>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	2204      	movs	r2, #4
 80045d4:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	22e0      	movs	r2, #224	; 0xe0
 80045dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e03d      	b.n	8004660 <HAL_ETH_Init+0x120>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	f003 0301 	and.w	r3, r3, #1
 80045f2:	2b00      	cmp	r3, #0
 80045f4:	d1e4      	bne.n	80045c0 <HAL_ETH_Init+0x80>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 80045f6:	6878      	ldr	r0, [r7, #4]
 80045f8:	f000 ff4e 	bl	8005498 <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 80045fc:	6878      	ldr	r0, [r7, #4]
 80045fe:	f000 fff9 	bl	80055f4 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 8004602:	6878      	ldr	r0, [r7, #4]
 8004604:	f001 f84f 	bl	80056a6 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8004608:	687b      	ldr	r3, [r7, #4]
 800460a:	685b      	ldr	r3, [r3, #4]
 800460c:	461a      	mov	r2, r3
 800460e:	2100      	movs	r1, #0
 8004610:	6878      	ldr	r0, [r7, #4]
 8004612:	f000 ffb7 	bl	8005584 <ETH_MACAddressConfig>

  /* Disable MMC Interrupts */
  SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 8004616:	687b      	ldr	r3, [r7, #4]
 8004618:	681b      	ldr	r3, [r3, #0]
 800461a:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 8004624:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Disable Rx MMC Interrupts */
  SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f8d3 110c 	ldr.w	r1, [r3, #268]	; 0x10c
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681a      	ldr	r2, [r3, #0]
 8004632:	4b0f      	ldr	r3, [pc, #60]	; (8004670 <HAL_ETH_Init+0x130>)
 8004634:	430b      	orrs	r3, r1
 8004636:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
          ETH_MMCRIMR_RFCEM);

  /* Disable Tx MMC Interrupts */
  SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 8004642:	687b      	ldr	r3, [r7, #4]
 8004644:	681b      	ldr	r3, [r3, #0]
 8004646:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 800464a:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
          ETH_MMCTIMR_TGFSCM);

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	2200      	movs	r2, #0
 8004652:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2210      	movs	r2, #16
 800465a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 800465e:	2300      	movs	r3, #0
}
 8004660:	4618      	mov	r0, r3
 8004662:	3710      	adds	r7, #16
 8004664:	46bd      	mov	sp, r7
 8004666:	bd80      	pop	{r7, pc}
 8004668:	40023800 	.word	0x40023800
 800466c:	40013800 	.word	0x40013800
 8004670:	00020060 	.word	0x00020060

08004674 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b084      	sub	sp, #16
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004682:	2b10      	cmp	r3, #16
 8004684:	d15f      	bne.n	8004746 <HAL_ETH_Start_IT+0xd2>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 8004686:	687b      	ldr	r3, [r7, #4]
 8004688:	2223      	movs	r2, #35	; 0x23
 800468a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2201      	movs	r2, #1
 8004692:	659a      	str	r2, [r3, #88]	; 0x58

    /* Set number of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8004694:	687b      	ldr	r3, [r7, #4]
 8004696:	2204      	movs	r2, #4
 8004698:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 800469a:	6878      	ldr	r0, [r7, #4]
 800469c:	f000 f9f6 	bl	8004a8c <ETH_UpdateDescriptor>

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80046a0:	687b      	ldr	r3, [r7, #4]
 80046a2:	681b      	ldr	r3, [r3, #0]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80046a8:	2001      	movs	r0, #1
 80046aa:	f7fe fd83 	bl	80031b4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	68fa      	ldr	r2, [r7, #12]
 80046b4:	601a      	str	r2, [r3, #0]

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	681b      	ldr	r3, [r3, #0]
 80046ba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046be:	699b      	ldr	r3, [r3, #24]
 80046c0:	687a      	ldr	r2, [r7, #4]
 80046c2:	6812      	ldr	r2, [r2, #0]
 80046c4:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 80046c8:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046cc:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 80046ce:	687b      	ldr	r3, [r7, #4]
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80046d6:	699b      	ldr	r3, [r3, #24]
 80046d8:	687a      	ldr	r2, [r7, #4]
 80046da:	6812      	ldr	r2, [r2, #0]
 80046dc:	f043 0302 	orr.w	r3, r3, #2
 80046e0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80046e4:	6193      	str	r3, [r2, #24]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80046e6:	6878      	ldr	r0, [r7, #4]
 80046e8:	f000 fd73 	bl	80051d2 <ETH_FlushTransmitFIFO>


    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	681b      	ldr	r3, [r3, #0]
 80046f0:	681a      	ldr	r2, [r3, #0]
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f042 0208 	orr.w	r2, r2, #8
 80046fa:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	681b      	ldr	r3, [r3, #0]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8004704:	2001      	movs	r0, #1
 8004706:	f7fe fd55 	bl	80031b4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 800470a:	687b      	ldr	r3, [r7, #4]
 800470c:	681b      	ldr	r3, [r3, #0]
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f042 0204 	orr.w	r2, r2, #4
 8004720:	601a      	str	r2, [r3, #0]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8004722:	687b      	ldr	r3, [r7, #4]
 8004724:	681b      	ldr	r3, [r3, #0]
 8004726:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800472a:	69d9      	ldr	r1, [r3, #28]
 800472c:	687b      	ldr	r3, [r7, #4]
 800472e:	681a      	ldr	r2, [r3, #0]
 8004730:	4b07      	ldr	r3, [pc, #28]	; (8004750 <HAL_ETH_Start_IT+0xdc>)
 8004732:	430b      	orrs	r3, r1
 8004734:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004738:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 800473a:	687b      	ldr	r3, [r7, #4]
 800473c:	2223      	movs	r2, #35	; 0x23
 800473e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8004742:	2300      	movs	r3, #0
 8004744:	e000      	b.n	8004748 <HAL_ETH_Start_IT+0xd4>
  }
  else
  {
    return HAL_ERROR;
 8004746:	2301      	movs	r3, #1
  }
}
 8004748:	4618      	mov	r0, r3
 800474a:	3710      	adds	r7, #16
 800474c:	46bd      	mov	sp, r7
 800474e:	bd80      	pop	{r7, pc}
 8004750:	0001a0c1 	.word	0x0001a0c1

08004754 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8004754:	b580      	push	{r7, lr}
 8004756:	b086      	sub	sp, #24
 8004758:	af00      	add	r7, sp, #0
 800475a:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8004762:	2b23      	cmp	r3, #35	; 0x23
 8004764:	d16e      	bne.n	8004844 <HAL_ETH_Stop_IT+0xf0>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	2223      	movs	r2, #35	; 0x23
 800476a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 800476e:	687b      	ldr	r3, [r7, #4]
 8004770:	681b      	ldr	r3, [r3, #0]
 8004772:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004776:	69d9      	ldr	r1, [r3, #28]
 8004778:	687b      	ldr	r3, [r7, #4]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	4b34      	ldr	r3, [pc, #208]	; (8004850 <HAL_ETH_Stop_IT+0xfc>)
 800477e:	400b      	ands	r3, r1
 8004780:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004784:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	681b      	ldr	r3, [r3, #0]
 800478a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800478e:	699b      	ldr	r3, [r3, #24]
 8004790:	687a      	ldr	r2, [r7, #4]
 8004792:	6812      	ldr	r2, [r2, #0]
 8004794:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004798:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800479c:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	681b      	ldr	r3, [r3, #0]
 80047a2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80047a6:	699b      	ldr	r3, [r3, #24]
 80047a8:	687a      	ldr	r2, [r7, #4]
 80047aa:	6812      	ldr	r2, [r2, #0]
 80047ac:	f023 0302 	bic.w	r3, r3, #2
 80047b0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80047b4:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	681a      	ldr	r2, [r3, #0]
 80047bc:	687b      	ldr	r3, [r7, #4]
 80047be:	681b      	ldr	r3, [r3, #0]
 80047c0:	f022 0204 	bic.w	r2, r2, #4
 80047c4:	601a      	str	r2, [r3, #0]


    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	681b      	ldr	r3, [r3, #0]
 80047cc:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80047ce:	2001      	movs	r0, #1
 80047d0:	f7fe fcf0 	bl	80031b4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	681b      	ldr	r3, [r3, #0]
 80047d8:	693a      	ldr	r2, [r7, #16]
 80047da:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 80047dc:	6878      	ldr	r0, [r7, #4]
 80047de:	f000 fcf8 	bl	80051d2 <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	681b      	ldr	r3, [r3, #0]
 80047e6:	681a      	ldr	r2, [r3, #0]
 80047e8:	687b      	ldr	r3, [r7, #4]
 80047ea:	681b      	ldr	r3, [r3, #0]
 80047ec:	f022 0208 	bic.w	r2, r2, #8
 80047f0:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 80047f2:	687b      	ldr	r3, [r7, #4]
 80047f4:	681b      	ldr	r3, [r3, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 80047fa:	2001      	movs	r0, #1
 80047fc:	f7fe fcda 	bl	80031b4 <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8004800:	687b      	ldr	r3, [r7, #4]
 8004802:	681b      	ldr	r3, [r3, #0]
 8004804:	693a      	ldr	r2, [r7, #16]
 8004806:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004808:	2300      	movs	r3, #0
 800480a:	617b      	str	r3, [r7, #20]
 800480c:	e00e      	b.n	800482c <HAL_ETH_Stop_IT+0xd8>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	697a      	ldr	r2, [r7, #20]
 8004812:	3212      	adds	r2, #18
 8004814:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004818:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 800481a:	68fb      	ldr	r3, [r7, #12]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8004826:	697b      	ldr	r3, [r7, #20]
 8004828:	3301      	adds	r3, #1
 800482a:	617b      	str	r3, [r7, #20]
 800482c:	697b      	ldr	r3, [r7, #20]
 800482e:	2b03      	cmp	r3, #3
 8004830:	d9ed      	bls.n	800480e <HAL_ETH_Stop_IT+0xba>
    }

    heth->RxDescList.ItMode = 0U;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	2200      	movs	r2, #0
 8004836:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8004838:	687b      	ldr	r3, [r7, #4]
 800483a:	2210      	movs	r2, #16
 800483c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8004840:	2300      	movs	r3, #0
 8004842:	e000      	b.n	8004846 <HAL_ETH_Stop_IT+0xf2>
  }
  else
  {
    return HAL_ERROR;
 8004844:	2301      	movs	r3, #1
  }
}
 8004846:	4618      	mov	r0, r3
 8004848:	3718      	adds	r7, #24
 800484a:	46bd      	mov	sp, r7
 800484c:	bd80      	pop	{r7, pc}
 800484e:	bf00      	nop
 8004850:	fffe5f3e 	.word	0xfffe5f3e

08004854 <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfigTypeDef *pTxConfig)
{
 8004854:	b580      	push	{r7, lr}
 8004856:	b082      	sub	sp, #8
 8004858:	af00      	add	r7, sp, #0
 800485a:	6078      	str	r0, [r7, #4]
 800485c:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	2b00      	cmp	r3, #0
 8004862:	d109      	bne.n	8004878 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004864:	687b      	ldr	r3, [r7, #4]
 8004866:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800486a:	f043 0201 	orr.w	r2, r3, #1
 800486e:	687b      	ldr	r3, [r7, #4]
 8004870:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8004874:	2301      	movs	r3, #1
 8004876:	e045      	b.n	8004904 <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8004878:	687b      	ldr	r3, [r7, #4]
 800487a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800487e:	2b23      	cmp	r3, #35	; 0x23
 8004880:	d13f      	bne.n	8004902 <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 800488a:	2201      	movs	r2, #1
 800488c:	6839      	ldr	r1, [r7, #0]
 800488e:	6878      	ldr	r0, [r7, #4]
 8004890:	f000 ff78 	bl	8005784 <ETH_Prepare_Tx_Descriptors>
 8004894:	4603      	mov	r3, r0
 8004896:	2b00      	cmp	r3, #0
 8004898:	d009      	beq.n	80048ae <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80048a0:	f043 0202 	orr.w	r2, r3, #2
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 80048aa:	2301      	movs	r3, #1
 80048ac:	e02a      	b.n	8004904 <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80048ae:	f3bf 8f4f 	dsb	sy
}
 80048b2:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048b8:	1c5a      	adds	r2, r3, #1
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	629a      	str	r2, [r3, #40]	; 0x28
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048c2:	2b03      	cmp	r3, #3
 80048c4:	d904      	bls.n	80048d0 <HAL_ETH_Transmit_IT+0x7c>
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80048ca:	1f1a      	subs	r2, r3, #4
 80048cc:	687b      	ldr	r3, [r7, #4]
 80048ce:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048d8:	695b      	ldr	r3, [r3, #20]
 80048da:	f003 0304 	and.w	r3, r3, #4
 80048de:	2b00      	cmp	r3, #0
 80048e0:	d00d      	beq.n	80048fe <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048ea:	461a      	mov	r2, r3
 80048ec:	2304      	movs	r3, #4
 80048ee:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 80048f0:	687b      	ldr	r3, [r7, #4]
 80048f2:	681b      	ldr	r3, [r3, #0]
 80048f4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80048f8:	461a      	mov	r2, r3
 80048fa:	2300      	movs	r3, #0
 80048fc:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 80048fe:	2300      	movs	r3, #0
 8004900:	e000      	b.n	8004904 <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8004902:	2301      	movs	r3, #1
  }
}
 8004904:	4618      	mov	r0, r3
 8004906:	3708      	adds	r7, #8
 8004908:	46bd      	mov	sp, r7
 800490a:	bd80      	pop	{r7, pc}

0800490c <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 800490c:	b580      	push	{r7, lr}
 800490e:	b088      	sub	sp, #32
 8004910:	af00      	add	r7, sp, #0
 8004912:	6078      	str	r0, [r7, #4]
 8004914:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8004916:	2300      	movs	r3, #0
 8004918:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 800491a:	2300      	movs	r3, #0
 800491c:	74fb      	strb	r3, [r7, #19]

  if (pAppBuff == NULL)
 800491e:	683b      	ldr	r3, [r7, #0]
 8004920:	2b00      	cmp	r3, #0
 8004922:	d109      	bne.n	8004938 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800492a:	f043 0201 	orr.w	r2, r3, #1
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8004934:	2301      	movs	r3, #1
 8004936:	e0a4      	b.n	8004a82 <HAL_ETH_ReadData+0x176>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800493e:	2b23      	cmp	r3, #35	; 0x23
 8004940:	d001      	beq.n	8004946 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8004942:	2301      	movs	r3, #1
 8004944:	e09d      	b.n	8004a82 <HAL_ETH_ReadData+0x176>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800494a:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	69fa      	ldr	r2, [r7, #28]
 8004950:	3212      	adds	r2, #18
 8004952:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004956:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800495c:	f1c3 0304 	rsb	r3, r3, #4
 8004960:	60fb      	str	r3, [r7, #12]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004962:	e066      	b.n	8004a32 <HAL_ETH_ReadData+0x126>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8004964:	69bb      	ldr	r3, [r7, #24]
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800496c:	2b00      	cmp	r3, #0
 800496e:	d007      	beq.n	8004980 <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC7;
 8004970:	69bb      	ldr	r3, [r7, #24]
 8004972:	69da      	ldr	r2, [r3, #28]
 8004974:	687b      	ldr	r3, [r7, #4]
 8004976:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC6;
 8004978:	69bb      	ldr	r3, [r7, #24]
 800497a:	699a      	ldr	r2, [r3, #24]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8004980:	69bb      	ldr	r3, [r7, #24]
 8004982:	681b      	ldr	r3, [r3, #0]
 8004984:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004988:	2b00      	cmp	r3, #0
 800498a:	d103      	bne.n	8004994 <HAL_ETH_ReadData+0x88>
 800498c:	687b      	ldr	r3, [r7, #4]
 800498e:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8004990:	2b00      	cmp	r3, #0
 8004992:	d03c      	beq.n	8004a0e <HAL_ETH_ReadData+0x102>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8004994:	69bb      	ldr	r3, [r7, #24]
 8004996:	681b      	ldr	r3, [r3, #0]
 8004998:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800499c:	2b00      	cmp	r3, #0
 800499e:	d005      	beq.n	80049ac <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	2200      	movs	r2, #0
 80049a4:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	2200      	movs	r2, #0
 80049aa:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
      bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT);
 80049ac:	69bb      	ldr	r3, [r7, #24]
 80049ae:	681b      	ldr	r3, [r3, #0]
 80049b0:	0c1b      	lsrs	r3, r3, #16
 80049b2:	f3c3 030d 	ubfx	r3, r3, #0, #14
 80049b6:	60bb      	str	r3, [r7, #8]

      /* Check if last descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 80049b8:	69bb      	ldr	r3, [r7, #24]
 80049ba:	681b      	ldr	r3, [r3, #0]
 80049bc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d005      	beq.n	80049d0 <HAL_ETH_ReadData+0xc4>
      {
        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 80049c4:	69bb      	ldr	r3, [r7, #24]
 80049c6:	681a      	ldr	r2, [r3, #0]
 80049c8:	687b      	ldr	r3, [r7, #4]
 80049ca:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 80049cc:	2301      	movs	r3, #1
 80049ce:	74fb      	strb	r3, [r7, #19]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 80049d0:	69bb      	ldr	r3, [r7, #24]
 80049d2:	689a      	ldr	r2, [r3, #8]
 80049d4:	69bb      	ldr	r3, [r7, #24]
 80049d6:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 80049de:	687b      	ldr	r3, [r7, #4]
 80049e0:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 80049e4:	69bb      	ldr	r3, [r7, #24]
 80049e6:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 80049e8:	461a      	mov	r2, r3
 80049ea:	68bb      	ldr	r3, [r7, #8]
 80049ec:	b29b      	uxth	r3, r3
 80049ee:	f009 ff13 	bl	800e818 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80049f6:	1c5a      	adds	r2, r3, #1
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8004a00:	68bb      	ldr	r3, [r7, #8]
 8004a02:	441a      	add	r2, r3
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8004a08:	69bb      	ldr	r3, [r7, #24]
 8004a0a:	2200      	movs	r2, #0
 8004a0c:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8004a0e:	69fb      	ldr	r3, [r7, #28]
 8004a10:	3301      	adds	r3, #1
 8004a12:	61fb      	str	r3, [r7, #28]
 8004a14:	69fb      	ldr	r3, [r7, #28]
 8004a16:	2b03      	cmp	r3, #3
 8004a18:	d902      	bls.n	8004a20 <HAL_ETH_ReadData+0x114>
 8004a1a:	69fb      	ldr	r3, [r7, #28]
 8004a1c:	3b04      	subs	r3, #4
 8004a1e:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	69fa      	ldr	r2, [r7, #28]
 8004a24:	3212      	adds	r2, #18
 8004a26:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004a2a:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8004a2c:	697b      	ldr	r3, [r7, #20]
 8004a2e:	3301      	adds	r3, #1
 8004a30:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004a32:	69bb      	ldr	r3, [r7, #24]
 8004a34:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	db06      	blt.n	8004a48 <HAL_ETH_ReadData+0x13c>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8004a3a:	697a      	ldr	r2, [r7, #20]
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	429a      	cmp	r2, r3
 8004a40:	d202      	bcs.n	8004a48 <HAL_ETH_ReadData+0x13c>
         && (rxdataready == 0U))
 8004a42:	7cfb      	ldrb	r3, [r7, #19]
 8004a44:	2b00      	cmp	r3, #0
 8004a46:	d08d      	beq.n	8004964 <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8004a48:	687b      	ldr	r3, [r7, #4]
 8004a4a:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8004a4c:	697b      	ldr	r3, [r7, #20]
 8004a4e:	441a      	add	r2, r3
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d002      	beq.n	8004a62 <HAL_ETH_ReadData+0x156>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8004a5c:	6878      	ldr	r0, [r7, #4]
 8004a5e:	f000 f815 	bl	8004a8c <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8004a62:	687b      	ldr	r3, [r7, #4]
 8004a64:	69fa      	ldr	r2, [r7, #28]
 8004a66:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8004a68:	7cfb      	ldrb	r3, [r7, #19]
 8004a6a:	2b01      	cmp	r3, #1
 8004a6c:	d108      	bne.n	8004a80 <HAL_ETH_ReadData+0x174>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8004a6e:	687b      	ldr	r3, [r7, #4]
 8004a70:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8004a72:	683b      	ldr	r3, [r7, #0]
 8004a74:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	2200      	movs	r2, #0
 8004a7a:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8004a7c:	2300      	movs	r3, #0
 8004a7e:	e000      	b.n	8004a82 <HAL_ETH_ReadData+0x176>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8004a80:	2301      	movs	r3, #1
}
 8004a82:	4618      	mov	r0, r3
 8004a84:	3720      	adds	r7, #32
 8004a86:	46bd      	mov	sp, r7
 8004a88:	bd80      	pop	{r7, pc}
	...

08004a8c <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8004a8c:	b580      	push	{r7, lr}
 8004a8e:	b088      	sub	sp, #32
 8004a90:	af00      	add	r7, sp, #0
 8004a92:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t tailidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8004a94:	2300      	movs	r3, #0
 8004a96:	60bb      	str	r3, [r7, #8]
  uint8_t allocStatus = 1U;
 8004a98:	2301      	movs	r3, #1
 8004a9a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8004aa0:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	69fa      	ldr	r2, [r7, #28]
 8004aa6:	3212      	adds	r2, #18
 8004aa8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004aac:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8004aae:	687b      	ldr	r3, [r7, #4]
 8004ab0:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004ab2:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8004ab4:	e042      	b.n	8004b3c <ETH_UpdateDescriptor+0xb0>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8004ab6:	697b      	ldr	r3, [r7, #20]
 8004ab8:	6a1b      	ldr	r3, [r3, #32]
 8004aba:	2b00      	cmp	r3, #0
 8004abc:	d112      	bne.n	8004ae4 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8004abe:	f107 0308 	add.w	r3, r7, #8
 8004ac2:	4618      	mov	r0, r3
 8004ac4:	f009 fe78 	bl	800e7b8 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8004ac8:	68bb      	ldr	r3, [r7, #8]
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d102      	bne.n	8004ad4 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8004ace:	2300      	movs	r3, #0
 8004ad0:	74fb      	strb	r3, [r7, #19]
 8004ad2:	e007      	b.n	8004ae4 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8004ad4:	68bb      	ldr	r3, [r7, #8]
 8004ad6:	461a      	mov	r2, r3
 8004ad8:	697b      	ldr	r3, [r7, #20]
 8004ada:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8004adc:	68bb      	ldr	r3, [r7, #8]
 8004ade:	461a      	mov	r2, r3
 8004ae0:	697b      	ldr	r3, [r7, #20]
 8004ae2:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8004ae4:	7cfb      	ldrb	r3, [r7, #19]
 8004ae6:	2b00      	cmp	r3, #0
 8004ae8:	d028      	beq.n	8004b3c <ETH_UpdateDescriptor+0xb0>
    {
      if (heth->RxDescList.ItMode == 0U)
 8004aea:	687b      	ldr	r3, [r7, #4]
 8004aec:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d106      	bne.n	8004b00 <ETH_UpdateDescriptor+0x74>
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_DIC | ETH_DMARXDESC_RCH);
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	695a      	ldr	r2, [r3, #20]
 8004af6:	4b26      	ldr	r3, [pc, #152]	; (8004b90 <ETH_UpdateDescriptor+0x104>)
 8004af8:	4313      	orrs	r3, r2
 8004afa:	697a      	ldr	r2, [r7, #20]
 8004afc:	6053      	str	r3, [r2, #4]
 8004afe:	e005      	b.n	8004b0c <ETH_UpdateDescriptor+0x80>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, heth->Init.RxBuffLen | ETH_DMARXDESC_RCH);
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	695b      	ldr	r3, [r3, #20]
 8004b04:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 8004b08:	697b      	ldr	r3, [r7, #20]
 8004b0a:	605a      	str	r2, [r3, #4]
      }

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8004b0c:	697b      	ldr	r3, [r7, #20]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8004b14:	697b      	ldr	r3, [r7, #20]
 8004b16:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8004b18:	69fb      	ldr	r3, [r7, #28]
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	61fb      	str	r3, [r7, #28]
 8004b1e:	69fb      	ldr	r3, [r7, #28]
 8004b20:	2b03      	cmp	r3, #3
 8004b22:	d902      	bls.n	8004b2a <ETH_UpdateDescriptor+0x9e>
 8004b24:	69fb      	ldr	r3, [r7, #28]
 8004b26:	3b04      	subs	r3, #4
 8004b28:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	69fa      	ldr	r2, [r7, #28]
 8004b2e:	3212      	adds	r2, #18
 8004b30:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004b34:	617b      	str	r3, [r7, #20]
      desccount--;
 8004b36:	69bb      	ldr	r3, [r7, #24]
 8004b38:	3b01      	subs	r3, #1
 8004b3a:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8004b3c:	69bb      	ldr	r3, [r7, #24]
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d002      	beq.n	8004b48 <ETH_UpdateDescriptor+0xbc>
 8004b42:	7cfb      	ldrb	r3, [r7, #19]
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d1b6      	bne.n	8004ab6 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8004b4c:	69ba      	ldr	r2, [r7, #24]
 8004b4e:	429a      	cmp	r2, r3
 8004b50:	d01a      	beq.n	8004b88 <ETH_UpdateDescriptor+0xfc>
  {
    /* Set the tail pointer index */
    tailidx = (descidx + 1U) % ETH_RX_DESC_CNT;
 8004b52:	69fb      	ldr	r3, [r7, #28]
 8004b54:	3301      	adds	r3, #1
 8004b56:	f003 0303 	and.w	r3, r3, #3
 8004b5a:	60fb      	str	r3, [r7, #12]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8004b5c:	f3bf 8f5f 	dmb	sy
}
 8004b60:	bf00      	nop

    /* DMB instruction to avoid race condition */
    __DMB();

    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, ((uint32_t)(heth->Init.RxDesc + (tailidx))));
 8004b62:	687b      	ldr	r3, [r7, #4]
 8004b64:	6919      	ldr	r1, [r3, #16]
 8004b66:	68fa      	ldr	r2, [r7, #12]
 8004b68:	4613      	mov	r3, r2
 8004b6a:	009b      	lsls	r3, r3, #2
 8004b6c:	4413      	add	r3, r2
 8004b6e:	00db      	lsls	r3, r3, #3
 8004b70:	18ca      	adds	r2, r1, r3
 8004b72:	687b      	ldr	r3, [r7, #4]
 8004b74:	681b      	ldr	r3, [r3, #0]
 8004b76:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004b7a:	609a      	str	r2, [r3, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8004b7c:	687b      	ldr	r3, [r7, #4]
 8004b7e:	69fa      	ldr	r2, [r7, #28]
 8004b80:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	69ba      	ldr	r2, [r7, #24]
 8004b86:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8004b88:	bf00      	nop
 8004b8a:	3720      	adds	r7, #32
 8004b8c:	46bd      	mov	sp, r7
 8004b8e:	bd80      	pop	{r7, pc}
 8004b90:	80004000 	.word	0x80004000

08004b94 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8004b94:	b580      	push	{r7, lr}
 8004b96:	b086      	sub	sp, #24
 8004b98:	af00      	add	r7, sp, #0
 8004b9a:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	3318      	adds	r3, #24
 8004ba0:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8004ba2:	68bb      	ldr	r3, [r7, #8]
 8004ba4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004ba6:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8004ba8:	68bb      	ldr	r3, [r7, #8]
 8004baa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bac:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8004bae:	2301      	movs	r3, #1
 8004bb0:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004bb2:	e047      	b.n	8004c44 <HAL_ETH_ReleaseTxPacket+0xb0>
  {
    pktInUse = 1U;
 8004bb4:	2301      	movs	r3, #1
 8004bb6:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8004bbe:	68ba      	ldr	r2, [r7, #8]
 8004bc0:	693b      	ldr	r3, [r7, #16]
 8004bc2:	3304      	adds	r3, #4
 8004bc4:	009b      	lsls	r3, r3, #2
 8004bc6:	4413      	add	r3, r2
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	2b00      	cmp	r3, #0
 8004bcc:	d10a      	bne.n	8004be4 <HAL_ETH_ReleaseTxPacket+0x50>
    {
      /* No packet in use, skip to next.  */
      INCR_TX_DESC_INDEX(idx, 1U);
 8004bce:	693b      	ldr	r3, [r7, #16]
 8004bd0:	3301      	adds	r3, #1
 8004bd2:	613b      	str	r3, [r7, #16]
 8004bd4:	693b      	ldr	r3, [r7, #16]
 8004bd6:	2b03      	cmp	r3, #3
 8004bd8:	d902      	bls.n	8004be0 <HAL_ETH_ReleaseTxPacket+0x4c>
 8004bda:	693b      	ldr	r3, [r7, #16]
 8004bdc:	3b04      	subs	r3, #4
 8004bde:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8004be0:	2300      	movs	r3, #0
 8004be2:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8004be4:	7bbb      	ldrb	r3, [r7, #14]
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d02c      	beq.n	8004c44 <HAL_ETH_ReleaseTxPacket+0xb0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	68d9      	ldr	r1, [r3, #12]
 8004bee:	693a      	ldr	r2, [r7, #16]
 8004bf0:	4613      	mov	r3, r2
 8004bf2:	009b      	lsls	r3, r3, #2
 8004bf4:	4413      	add	r3, r2
 8004bf6:	00db      	lsls	r3, r3, #3
 8004bf8:	440b      	add	r3, r1
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	2b00      	cmp	r3, #0
 8004bfe:	db1f      	blt.n	8004c40 <HAL_ETH_ReleaseTxPacket+0xac>
        {
          HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
        }
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8004c00:	68ba      	ldr	r2, [r7, #8]
 8004c02:	693b      	ldr	r3, [r7, #16]
 8004c04:	3304      	adds	r3, #4
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4413      	add	r3, r2
 8004c0a:	685b      	ldr	r3, [r3, #4]
 8004c0c:	4618      	mov	r0, r3
 8004c0e:	f009 fe45 	bl	800e89c <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8004c12:	68ba      	ldr	r2, [r7, #8]
 8004c14:	693b      	ldr	r3, [r7, #16]
 8004c16:	3304      	adds	r3, #4
 8004c18:	009b      	lsls	r3, r3, #2
 8004c1a:	4413      	add	r3, r2
 8004c1c:	2200      	movs	r2, #0
 8004c1e:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        INCR_TX_DESC_INDEX(idx, 1U);
 8004c20:	693b      	ldr	r3, [r7, #16]
 8004c22:	3301      	adds	r3, #1
 8004c24:	613b      	str	r3, [r7, #16]
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	2b03      	cmp	r3, #3
 8004c2a:	d902      	bls.n	8004c32 <HAL_ETH_ReleaseTxPacket+0x9e>
 8004c2c:	693b      	ldr	r3, [r7, #16]
 8004c2e:	3b04      	subs	r3, #4
 8004c30:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8004c32:	68bb      	ldr	r3, [r7, #8]
 8004c34:	697a      	ldr	r2, [r7, #20]
 8004c36:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8004c38:	68bb      	ldr	r3, [r7, #8]
 8004c3a:	693a      	ldr	r2, [r7, #16]
 8004c3c:	62da      	str	r2, [r3, #44]	; 0x2c
 8004c3e:	e001      	b.n	8004c44 <HAL_ETH_ReleaseTxPacket+0xb0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8004c40:	2300      	movs	r3, #0
 8004c42:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8004c44:	697b      	ldr	r3, [r7, #20]
 8004c46:	2b00      	cmp	r3, #0
 8004c48:	d002      	beq.n	8004c50 <HAL_ETH_ReleaseTxPacket+0xbc>
 8004c4a:	7bfb      	ldrb	r3, [r7, #15]
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	d1b1      	bne.n	8004bb4 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8004c50:	2300      	movs	r3, #0
}
 8004c52:	4618      	mov	r0, r3
 8004c54:	3718      	adds	r7, #24
 8004c56:	46bd      	mov	sp, r7
 8004c58:	bd80      	pop	{r7, pc}
	...

08004c5c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8004c5c:	b580      	push	{r7, lr}
 8004c5e:	b086      	sub	sp, #24
 8004c60:	af00      	add	r7, sp, #0
 8004c62:	6078      	str	r0, [r7, #4]
  uint32_t mac_flag = READ_REG(heth->Instance->MACSR);
 8004c64:	687b      	ldr	r3, [r7, #4]
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c6a:	617b      	str	r3, [r7, #20]
  uint32_t dma_flag = READ_REG(heth->Instance->DMASR);
 8004c6c:	687b      	ldr	r3, [r7, #4]
 8004c6e:	681b      	ldr	r3, [r3, #0]
 8004c70:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c74:	695b      	ldr	r3, [r3, #20]
 8004c76:	613b      	str	r3, [r7, #16]
  uint32_t dma_itsource = READ_REG(heth->Instance->DMAIER);
 8004c78:	687b      	ldr	r3, [r7, #4]
 8004c7a:	681b      	ldr	r3, [r3, #0]
 8004c7c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004c80:	69db      	ldr	r3, [r3, #28]
 8004c82:	60fb      	str	r3, [r7, #12]
  uint32_t exti_flag = READ_REG(EXTI->PR);
 8004c84:	4b4b      	ldr	r3, [pc, #300]	; (8004db4 <HAL_ETH_IRQHandler+0x158>)
 8004c86:	695b      	ldr	r3, [r3, #20]
 8004c88:	60bb      	str	r3, [r7, #8]

  /* Packet received */
  if (((dma_flag & ETH_DMASR_RS) != 0U) && ((dma_itsource & ETH_DMAIER_RIE) != 0U))
 8004c8a:	693b      	ldr	r3, [r7, #16]
 8004c8c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c90:	2b00      	cmp	r3, #0
 8004c92:	d00e      	beq.n	8004cb2 <HAL_ETH_IRQHandler+0x56>
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d009      	beq.n	8004cb2 <HAL_ETH_IRQHandler+0x56>
  {
    /* Clear the Eth DMA Rx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	681b      	ldr	r3, [r3, #0]
 8004ca2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004ca6:	461a      	mov	r2, r3
 8004ca8:	4b43      	ldr	r3, [pc, #268]	; (8004db8 <HAL_ETH_IRQHandler+0x15c>)
 8004caa:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Receive complete callback*/
    heth->RxCpltCallback(heth);
#else
    /* Receive complete callback */
    HAL_ETH_RxCpltCallback(heth);
 8004cac:	6878      	ldr	r0, [r7, #4]
 8004cae:	f009 f90f 	bl	800ded0 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* Packet transmitted */
  if (((dma_flag & ETH_DMASR_TS) != 0U) && ((dma_itsource & ETH_DMAIER_TIE) != 0U))
 8004cb2:	693b      	ldr	r3, [r7, #16]
 8004cb4:	f003 0301 	and.w	r3, r3, #1
 8004cb8:	2b00      	cmp	r3, #0
 8004cba:	d00f      	beq.n	8004cdc <HAL_ETH_IRQHandler+0x80>
 8004cbc:	68fb      	ldr	r3, [r7, #12]
 8004cbe:	f003 0301 	and.w	r3, r3, #1
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	d00a      	beq.n	8004cdc <HAL_ETH_IRQHandler+0x80>
  {
    /* Clear the Eth DMA Tx IT pending bits */
    __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	681b      	ldr	r3, [r3, #0]
 8004cca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004cce:	461a      	mov	r2, r3
 8004cd0:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 8004cd4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /*Call registered Transmit complete callback*/
    heth->TxCpltCallback(heth);
#else
    /* Transfer complete callback */
    HAL_ETH_TxCpltCallback(heth);
 8004cd6:	6878      	ldr	r0, [r7, #4]
 8004cd8:	f009 f90a 	bl	800def0 <HAL_ETH_TxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }

  /* ETH DMA Error */
  if (((dma_flag & ETH_DMASR_AIS) != 0U) && ((dma_itsource & ETH_DMAIER_AISE) != 0U))
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004ce2:	2b00      	cmp	r3, #0
 8004ce4:	d042      	beq.n	8004d6c <HAL_ETH_IRQHandler+0x110>
 8004ce6:	68fb      	ldr	r3, [r7, #12]
 8004ce8:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	d03d      	beq.n	8004d6c <HAL_ETH_IRQHandler+0x110>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004cf6:	f043 0208 	orr.w	r2, r3, #8
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    /* if fatal bus error occurred */
    if ((dma_flag & ETH_DMASR_FBES) != 0U)
 8004d00:	693b      	ldr	r3, [r7, #16]
 8004d02:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004d06:	2b00      	cmp	r3, #0
 8004d08:	d01a      	beq.n	8004d40 <HAL_ETH_IRQHandler+0xe4>
    {
      /* Get DMA error code  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d12:	695a      	ldr	r2, [r3, #20]
 8004d14:	4b29      	ldr	r3, [pc, #164]	; (8004dbc <HAL_ETH_IRQHandler+0x160>)
 8004d16:	4013      	ands	r3, r2
 8004d18:	687a      	ldr	r2, [r7, #4]
 8004d1a:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

      /* Disable all interrupts */
      __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d26:	69db      	ldr	r3, [r3, #28]
 8004d28:	687a      	ldr	r2, [r7, #4]
 8004d2a:	6812      	ldr	r2, [r2, #0]
 8004d2c:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8004d30:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8004d34:	61d3      	str	r3, [r2, #28]

      /* Set HAL state to ERROR */
      heth->gState = HAL_ETH_STATE_ERROR;
 8004d36:	687b      	ldr	r3, [r7, #4]
 8004d38:	22e0      	movs	r2, #224	; 0xe0
 8004d3a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8004d3e:	e012      	b.n	8004d66 <HAL_ETH_IRQHandler+0x10a>
    }
    else
    {
      /* Get DMA error status  */
      heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d48:	695a      	ldr	r2, [r3, #20]
 8004d4a:	f248 6380 	movw	r3, #34432	; 0x8680
 8004d4e:	4013      	ands	r3, r2
 8004d50:	687a      	ldr	r2, [r7, #4]
 8004d52:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                            ETH_DMASR_RBUS | ETH_DMASR_AIS));

      /* Clear the interrupt summary flag */
      __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	681b      	ldr	r3, [r3, #0]
 8004d5a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8004d5e:	461a      	mov	r2, r3
 8004d60:	f248 6380 	movw	r3, #34432	; 0x8680
 8004d64:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered Error callback*/
    heth->ErrorCallback(heth);
#else
    /* Ethernet DMA Error callback */
    HAL_ETH_ErrorCallback(heth);
 8004d66:	6878      	ldr	r0, [r7, #4]
 8004d68:	f009 f8d2 	bl	800df10 <HAL_ETH_ErrorCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }


  /* ETH PMT IT */
  if ((mac_flag & ETH_MAC_PMT_IT) != 0U)
 8004d6c:	697b      	ldr	r3, [r7, #20]
 8004d6e:	f003 0308 	and.w	r3, r3, #8
 8004d72:	2b00      	cmp	r3, #0
 8004d74:	d00e      	beq.n	8004d94 <HAL_ETH_IRQHandler+0x138>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 8004d76:	687b      	ldr	r3, [r7, #4]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d7c:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 8004d86:	6878      	ldr	r0, [r7, #4]
 8004d88:	f000 f81a 	bl	8004dc0 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	2200      	movs	r2, #0
 8004d90:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if ((exti_flag & ETH_WAKEUP_EXTI_LINE) != 0U)
 8004d94:	68bb      	ldr	r3, [r7, #8]
 8004d96:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d006      	beq.n	8004dac <HAL_ETH_IRQHandler+0x150>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 8004d9e:	4b05      	ldr	r3, [pc, #20]	; (8004db4 <HAL_ETH_IRQHandler+0x158>)
 8004da0:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8004da4:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f000 f814 	bl	8004dd4 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 8004dac:	bf00      	nop
 8004dae:	3718      	adds	r7, #24
 8004db0:	46bd      	mov	sp, r7
 8004db2:	bd80      	pop	{r7, pc}
 8004db4:	40013c00 	.word	0x40013c00
 8004db8:	00010040 	.word	0x00010040
 8004dbc:	007e2000 	.word	0x007e2000

08004dc0 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8004dc0:	b480      	push	{r7}
 8004dc2:	b083      	sub	sp, #12
 8004dc4:	af00      	add	r7, sp, #0
 8004dc6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8004dc8:	bf00      	nop
 8004dca:	370c      	adds	r7, #12
 8004dcc:	46bd      	mov	sp, r7
 8004dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dd2:	4770      	bx	lr

08004dd4 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8004dd4:	b480      	push	{r7}
 8004dd6:	b083      	sub	sp, #12
 8004dd8:	af00      	add	r7, sp, #0
 8004dda:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 8004ddc:	bf00      	nop
 8004dde:	370c      	adds	r7, #12
 8004de0:	46bd      	mov	sp, r7
 8004de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de6:	4770      	bx	lr

08004de8 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8004de8:	b580      	push	{r7, lr}
 8004dea:	b086      	sub	sp, #24
 8004dec:	af00      	add	r7, sp, #0
 8004dee:	60f8      	str	r0, [r7, #12]
 8004df0:	60b9      	str	r1, [r7, #8]
 8004df2:	607a      	str	r2, [r7, #4]
 8004df4:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	691b      	ldr	r3, [r3, #16]
 8004dfc:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004dfe:	697b      	ldr	r3, [r7, #20]
 8004e00:	f003 031c 	and.w	r3, r3, #28
 8004e04:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8004e06:	68bb      	ldr	r3, [r7, #8]
 8004e08:	02db      	lsls	r3, r3, #11
 8004e0a:	b29b      	uxth	r3, r3
 8004e0c:	697a      	ldr	r2, [r7, #20]
 8004e0e:	4313      	orrs	r3, r2
 8004e10:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8004e12:	687b      	ldr	r3, [r7, #4]
 8004e14:	019b      	lsls	r3, r3, #6
 8004e16:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004e1a:	697a      	ldr	r2, [r7, #20]
 8004e1c:	4313      	orrs	r3, r2
 8004e1e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8004e20:	697b      	ldr	r3, [r7, #20]
 8004e22:	f023 0302 	bic.w	r3, r3, #2
 8004e26:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8004e28:	697b      	ldr	r3, [r7, #20]
 8004e2a:	f043 0301 	orr.w	r3, r3, #1
 8004e2e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004e30:	68fb      	ldr	r3, [r7, #12]
 8004e32:	681b      	ldr	r3, [r3, #0]
 8004e34:	697a      	ldr	r2, [r7, #20]
 8004e36:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8004e38:	f7fe f9b0 	bl	800319c <HAL_GetTick>
 8004e3c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004e3e:	e00d      	b.n	8004e5c <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 8004e40:	f7fe f9ac 	bl	800319c <HAL_GetTick>
 8004e44:	4602      	mov	r2, r0
 8004e46:	693b      	ldr	r3, [r7, #16]
 8004e48:	1ad3      	subs	r3, r2, r3
 8004e4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e4e:	d301      	bcc.n	8004e54 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 8004e50:	2301      	movs	r3, #1
 8004e52:	e010      	b.n	8004e76 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	681b      	ldr	r3, [r3, #0]
 8004e58:	691b      	ldr	r3, [r3, #16]
 8004e5a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004e5c:	697b      	ldr	r3, [r7, #20]
 8004e5e:	f003 0301 	and.w	r3, r3, #1
 8004e62:	2b00      	cmp	r3, #0
 8004e64:	d1ec      	bne.n	8004e40 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 8004e66:	68fb      	ldr	r3, [r7, #12]
 8004e68:	681b      	ldr	r3, [r3, #0]
 8004e6a:	695b      	ldr	r3, [r3, #20]
 8004e6c:	b29b      	uxth	r3, r3
 8004e6e:	461a      	mov	r2, r3
 8004e70:	683b      	ldr	r3, [r7, #0]
 8004e72:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 8004e74:	2300      	movs	r3, #0
}
 8004e76:	4618      	mov	r0, r3
 8004e78:	3718      	adds	r7, #24
 8004e7a:	46bd      	mov	sp, r7
 8004e7c:	bd80      	pop	{r7, pc}

08004e7e <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(const ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 8004e7e:	b580      	push	{r7, lr}
 8004e80:	b086      	sub	sp, #24
 8004e82:	af00      	add	r7, sp, #0
 8004e84:	60f8      	str	r0, [r7, #12]
 8004e86:	60b9      	str	r1, [r7, #8]
 8004e88:	607a      	str	r2, [r7, #4]
 8004e8a:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	681b      	ldr	r3, [r3, #0]
 8004e90:	691b      	ldr	r3, [r3, #16]
 8004e92:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 8004e94:	697b      	ldr	r3, [r7, #20]
 8004e96:	f003 031c 	and.w	r3, r3, #28
 8004e9a:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 8004e9c:	68bb      	ldr	r3, [r7, #8]
 8004e9e:	02db      	lsls	r3, r3, #11
 8004ea0:	b29b      	uxth	r3, r3
 8004ea2:	697a      	ldr	r2, [r7, #20]
 8004ea4:	4313      	orrs	r3, r2
 8004ea6:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8004ea8:	687b      	ldr	r3, [r7, #4]
 8004eaa:	019b      	lsls	r3, r3, #6
 8004eac:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8004eb0:	697a      	ldr	r2, [r7, #20]
 8004eb2:	4313      	orrs	r3, r2
 8004eb4:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8004eb6:	697b      	ldr	r3, [r7, #20]
 8004eb8:	f043 0302 	orr.w	r3, r3, #2
 8004ebc:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	f043 0301 	orr.w	r3, r3, #1
 8004ec4:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8004ec6:	683b      	ldr	r3, [r7, #0]
 8004ec8:	b29a      	uxth	r2, r3
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8004ed0:	68fb      	ldr	r3, [r7, #12]
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	697a      	ldr	r2, [r7, #20]
 8004ed6:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8004ed8:	f7fe f960 	bl	800319c <HAL_GetTick>
 8004edc:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004ede:	e00d      	b.n	8004efc <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8004ee0:	f7fe f95c 	bl	800319c <HAL_GetTick>
 8004ee4:	4602      	mov	r2, r0
 8004ee6:	693b      	ldr	r3, [r7, #16]
 8004ee8:	1ad3      	subs	r3, r2, r3
 8004eea:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004eee:	d301      	bcc.n	8004ef4 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8004ef0:	2301      	movs	r3, #1
 8004ef2:	e009      	b.n	8004f08 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	691b      	ldr	r3, [r3, #16]
 8004efa:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 8004efc:	697b      	ldr	r3, [r7, #20]
 8004efe:	f003 0301 	and.w	r3, r3, #1
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	d1ec      	bne.n	8004ee0 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8004f06:	2300      	movs	r3, #0
}
 8004f08:	4618      	mov	r0, r3
 8004f0a:	3718      	adds	r7, #24
 8004f0c:	46bd      	mov	sp, r7
 8004f0e:	bd80      	pop	{r7, pc}

08004f10 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(const ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8004f10:	b480      	push	{r7}
 8004f12:	b083      	sub	sp, #12
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
 8004f18:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8004f1a:	683b      	ldr	r3, [r7, #0]
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d101      	bne.n	8004f24 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8004f20:	2301      	movs	r3, #1
 8004f22:	e0e6      	b.n	80050f2 <HAL_ETH_GetMACConfig+0x1e2>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0310 	and.w	r3, r3, #16
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	bf14      	ite	ne
 8004f32:	2301      	movne	r3, #1
 8004f34:	2300      	moveq	r3, #0
 8004f36:	b2db      	uxtb	r3, r3
 8004f38:	461a      	mov	r2, r3
 8004f3a:	683b      	ldr	r3, [r7, #0]
 8004f3c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 8004f40:	687b      	ldr	r3, [r7, #4]
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f003 0260 	and.w	r2, r3, #96	; 0x60
 8004f4a:	683b      	ldr	r3, [r7, #0]
 8004f4c:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	681b      	ldr	r3, [r3, #0]
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004f58:	2b00      	cmp	r3, #0
 8004f5a:	bf0c      	ite	eq
 8004f5c:	2301      	moveq	r3, #1
 8004f5e:	2300      	movne	r3, #0
 8004f60:	b2db      	uxtb	r3, r3
 8004f62:	461a      	mov	r2, r3
 8004f64:	683b      	ldr	r3, [r7, #0]
 8004f66:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	bf14      	ite	ne
 8004f78:	2301      	movne	r3, #1
 8004f7a:	2300      	moveq	r3, #0
 8004f7c:	b2db      	uxtb	r3, r3
 8004f7e:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 8004f80:	683b      	ldr	r3, [r7, #0]
 8004f82:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 8004f84:	687b      	ldr	r3, [r7, #4]
 8004f86:	681b      	ldr	r3, [r3, #0]
 8004f88:	681b      	ldr	r3, [r3, #0]
 8004f8a:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8004f8e:	2b00      	cmp	r3, #0
 8004f90:	bf0c      	ite	eq
 8004f92:	2301      	moveq	r3, #1
 8004f94:	2300      	movne	r3, #0
 8004f96:	b2db      	uxtb	r3, r3
 8004f98:	461a      	mov	r2, r3
 8004f9a:	683b      	ldr	r3, [r7, #0]
 8004f9c:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 8004f9e:	687b      	ldr	r3, [r7, #4]
 8004fa0:	681b      	ldr	r3, [r3, #0]
 8004fa2:	681b      	ldr	r3, [r3, #0]
 8004fa4:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8004fa8:	2b00      	cmp	r3, #0
 8004faa:	bf14      	ite	ne
 8004fac:	2301      	movne	r3, #1
 8004fae:	2300      	moveq	r3, #0
 8004fb0:	b2db      	uxtb	r3, r3
 8004fb2:	461a      	mov	r2, r3
 8004fb4:	683b      	ldr	r3, [r7, #0]
 8004fb6:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	681b      	ldr	r3, [r3, #0]
 8004fbc:	681b      	ldr	r3, [r3, #0]
 8004fbe:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8004fc2:	683b      	ldr	r3, [r7, #0]
 8004fc4:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8004fc6:	687b      	ldr	r3, [r7, #4]
 8004fc8:	681b      	ldr	r3, [r3, #0]
 8004fca:	681b      	ldr	r3, [r3, #0]
 8004fcc:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8004fd0:	683b      	ldr	r3, [r7, #0]
 8004fd2:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8004fd4:	687b      	ldr	r3, [r7, #4]
 8004fd6:	681b      	ldr	r3, [r3, #0]
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	bf0c      	ite	eq
 8004fe2:	2301      	moveq	r3, #1
 8004fe4:	2300      	movne	r3, #0
 8004fe6:	b2db      	uxtb	r3, r3
 8004fe8:	461a      	mov	r2, r3
 8004fea:	683b      	ldr	r3, [r7, #0]
 8004fec:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	681b      	ldr	r3, [r3, #0]
 8004ff2:	681b      	ldr	r3, [r3, #0]
 8004ff4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8004ff8:	2b00      	cmp	r3, #0
 8004ffa:	bf0c      	ite	eq
 8004ffc:	2301      	moveq	r3, #1
 8004ffe:	2300      	movne	r3, #0
 8005000:	b2db      	uxtb	r3, r3
 8005002:	461a      	mov	r2, r3
 8005004:	683b      	ldr	r3, [r7, #0]
 8005006:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8005008:	687b      	ldr	r3, [r7, #4]
 800500a:	681b      	ldr	r3, [r3, #0]
 800500c:	681b      	ldr	r3, [r3, #0]
 800500e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005012:	2b00      	cmp	r3, #0
 8005014:	bf14      	ite	ne
 8005016:	2301      	movne	r3, #1
 8005018:	2300      	moveq	r3, #0
 800501a:	b2db      	uxtb	r3, r3
 800501c:	461a      	mov	r2, r3
 800501e:	683b      	ldr	r3, [r7, #0]
 8005020:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8005022:	687b      	ldr	r3, [r7, #4]
 8005024:	681b      	ldr	r3, [r3, #0]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 800502c:	683b      	ldr	r3, [r7, #0]
 800502e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8005030:	687b      	ldr	r3, [r7, #4]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800503a:	2b00      	cmp	r3, #0
 800503c:	bf14      	ite	ne
 800503e:	2301      	movne	r3, #1
 8005040:	2300      	moveq	r3, #0
 8005042:	b2db      	uxtb	r3, r3
 8005044:	461a      	mov	r2, r3
 8005046:	683b      	ldr	r3, [r7, #0]
 8005048:	711a      	strb	r2, [r3, #4]
  macconf->CRCStripTypePacket = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSTF) >> 25U) > 0U) ? ENABLE : DISABLE;
 800504a:	687b      	ldr	r3, [r7, #4]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	681b      	ldr	r3, [r3, #0]
 8005050:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005054:	2b00      	cmp	r3, #0
 8005056:	bf14      	ite	ne
 8005058:	2301      	movne	r3, #1
 800505a:	2300      	moveq	r3, #0
 800505c:	b2db      	uxtb	r3, r3
 800505e:	461a      	mov	r2, r3
 8005060:	683b      	ldr	r3, [r7, #0]
 8005062:	739a      	strb	r2, [r3, #14]

  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 8005064:	687b      	ldr	r3, [r7, #4]
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	699b      	ldr	r3, [r3, #24]
 800506a:	f003 0302 	and.w	r3, r3, #2
 800506e:	2b00      	cmp	r3, #0
 8005070:	bf14      	ite	ne
 8005072:	2301      	movne	r3, #1
 8005074:	2300      	moveq	r3, #0
 8005076:	b2db      	uxtb	r3, r3
 8005078:	461a      	mov	r2, r3
 800507a:	683b      	ldr	r3, [r7, #0]
 800507c:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 8005080:	687b      	ldr	r3, [r7, #4]
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	699b      	ldr	r3, [r3, #24]
 8005086:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800508a:	2b00      	cmp	r3, #0
 800508c:	bf0c      	ite	eq
 800508e:	2301      	moveq	r3, #1
 8005090:	2300      	movne	r3, #0
 8005092:	b2db      	uxtb	r3, r3
 8005094:	461a      	mov	r2, r3
 8005096:	683b      	ldr	r3, [r7, #0]
 8005098:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 800509c:	687b      	ldr	r3, [r7, #4]
 800509e:	681b      	ldr	r3, [r3, #0]
 80050a0:	699b      	ldr	r3, [r3, #24]
 80050a2:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80050a6:	683b      	ldr	r3, [r7, #0]
 80050a8:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80050aa:	687b      	ldr	r3, [r7, #4]
 80050ac:	681b      	ldr	r3, [r3, #0]
 80050ae:	699b      	ldr	r3, [r3, #24]
 80050b0:	0c1b      	lsrs	r3, r3, #16
 80050b2:	b29a      	uxth	r2, r3
 80050b4:	683b      	ldr	r3, [r7, #0]
 80050b6:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	681b      	ldr	r3, [r3, #0]
 80050bc:	699b      	ldr	r3, [r3, #24]
 80050be:	f003 0304 	and.w	r3, r3, #4
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	bf14      	ite	ne
 80050c6:	2301      	movne	r3, #1
 80050c8:	2300      	moveq	r3, #0
 80050ca:	b2db      	uxtb	r3, r3
 80050cc:	461a      	mov	r2, r3
 80050ce:	683b      	ldr	r3, [r7, #0]
 80050d0:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80050d4:	687b      	ldr	r3, [r7, #4]
 80050d6:	681b      	ldr	r3, [r3, #0]
 80050d8:	699b      	ldr	r3, [r3, #24]
 80050da:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 80050de:	2b00      	cmp	r3, #0
 80050e0:	bf14      	ite	ne
 80050e2:	2301      	movne	r3, #1
 80050e4:	2300      	moveq	r3, #0
 80050e6:	b2db      	uxtb	r3, r3
 80050e8:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 80050ea:	683b      	ldr	r3, [r7, #0]
 80050ec:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 80050f0:	2300      	movs	r3, #0
}
 80050f2:	4618      	mov	r0, r3
 80050f4:	370c      	adds	r7, #12
 80050f6:	46bd      	mov	sp, r7
 80050f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050fc:	4770      	bx	lr

080050fe <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 80050fe:	b580      	push	{r7, lr}
 8005100:	b082      	sub	sp, #8
 8005102:	af00      	add	r7, sp, #0
 8005104:	6078      	str	r0, [r7, #4]
 8005106:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 8005108:	683b      	ldr	r3, [r7, #0]
 800510a:	2b00      	cmp	r3, #0
 800510c:	d101      	bne.n	8005112 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 800510e:	2301      	movs	r3, #1
 8005110:	e00b      	b.n	800512a <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8005118:	2b10      	cmp	r3, #16
 800511a:	d105      	bne.n	8005128 <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 800511c:	6839      	ldr	r1, [r7, #0]
 800511e:	6878      	ldr	r0, [r7, #4]
 8005120:	f000 f87c 	bl	800521c <ETH_SetMACConfig>

    return HAL_OK;
 8005124:	2300      	movs	r3, #0
 8005126:	e000      	b.n	800512a <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 8005128:	2301      	movs	r3, #1
  }
}
 800512a:	4618      	mov	r0, r3
 800512c:	3708      	adds	r7, #8
 800512e:	46bd      	mov	sp, r7
 8005130:	bd80      	pop	{r7, pc}
	...

08005134 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8005134:	b580      	push	{r7, lr}
 8005136:	b084      	sub	sp, #16
 8005138:	af00      	add	r7, sp, #0
 800513a:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 800513c:	687b      	ldr	r3, [r7, #4]
 800513e:	681b      	ldr	r3, [r3, #0]
 8005140:	691b      	ldr	r3, [r3, #16]
 8005142:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8005144:	68fb      	ldr	r3, [r7, #12]
 8005146:	f023 031c 	bic.w	r3, r3, #28
 800514a:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 800514c:	f003 fe74 	bl	8008e38 <HAL_RCC_GetHCLKFreq>
 8005150:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if (hclk < 35000000U)
 8005152:	68bb      	ldr	r3, [r7, #8]
 8005154:	4a14      	ldr	r2, [pc, #80]	; (80051a8 <HAL_ETH_SetMDIOClockRange+0x74>)
 8005156:	4293      	cmp	r3, r2
 8005158:	d804      	bhi.n	8005164 <HAL_ETH_SetMDIOClockRange+0x30>
  {
    /* CSR Clock Range between 0-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 800515a:	68fb      	ldr	r3, [r7, #12]
 800515c:	f043 0308 	orr.w	r3, r3, #8
 8005160:	60fb      	str	r3, [r7, #12]
 8005162:	e019      	b.n	8005198 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 60000000U)
 8005164:	68bb      	ldr	r3, [r7, #8]
 8005166:	4a11      	ldr	r2, [pc, #68]	; (80051ac <HAL_ETH_SetMDIOClockRange+0x78>)
 8005168:	4293      	cmp	r3, r2
 800516a:	d204      	bcs.n	8005176 <HAL_ETH_SetMDIOClockRange+0x42>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 800516c:	68fb      	ldr	r3, [r7, #12]
 800516e:	f043 030c 	orr.w	r3, r3, #12
 8005172:	60fb      	str	r3, [r7, #12]
 8005174:	e010      	b.n	8005198 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else if (hclk < 100000000U)
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	4a0d      	ldr	r2, [pc, #52]	; (80051b0 <HAL_ETH_SetMDIOClockRange+0x7c>)
 800517a:	4293      	cmp	r3, r2
 800517c:	d90c      	bls.n	8005198 <HAL_ETH_SetMDIOClockRange+0x64>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if (hclk < 150000000U)
 800517e:	68bb      	ldr	r3, [r7, #8]
 8005180:	4a0c      	ldr	r2, [pc, #48]	; (80051b4 <HAL_ETH_SetMDIOClockRange+0x80>)
 8005182:	4293      	cmp	r3, r2
 8005184:	d804      	bhi.n	8005190 <HAL_ETH_SetMDIOClockRange+0x5c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 8005186:	68fb      	ldr	r3, [r7, #12]
 8005188:	f043 0304 	orr.w	r3, r3, #4
 800518c:	60fb      	str	r3, [r7, #12]
 800518e:	e003      	b.n	8005198 <HAL_ETH_SetMDIOClockRange+0x64>
  }
  else /* (hclk >= 150000000)  */
  {
    /* CSR Clock >= 150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 8005190:	68fb      	ldr	r3, [r7, #12]
 8005192:	f043 0310 	orr.w	r3, r3, #16
 8005196:	60fb      	str	r3, [r7, #12]
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8005198:	687b      	ldr	r3, [r7, #4]
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	68fa      	ldr	r2, [r7, #12]
 800519e:	611a      	str	r2, [r3, #16]
}
 80051a0:	bf00      	nop
 80051a2:	3710      	adds	r7, #16
 80051a4:	46bd      	mov	sp, r7
 80051a6:	bd80      	pop	{r7, pc}
 80051a8:	02160ebf 	.word	0x02160ebf
 80051ac:	03938700 	.word	0x03938700
 80051b0:	05f5e0ff 	.word	0x05f5e0ff
 80051b4:	08f0d17f 	.word	0x08f0d17f

080051b8 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(const ETH_HandleTypeDef *heth)
{
 80051b8:	b480      	push	{r7}
 80051ba:	b083      	sub	sp, #12
 80051bc:	af00      	add	r7, sp, #0
 80051be:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 80051c0:	687b      	ldr	r3, [r7, #4]
 80051c2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 80051c6:	4618      	mov	r0, r3
 80051c8:	370c      	adds	r7, #12
 80051ca:	46bd      	mov	sp, r7
 80051cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051d0:	4770      	bx	lr

080051d2 <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 80051d2:	b580      	push	{r7, lr}
 80051d4:	b084      	sub	sp, #16
 80051d6:	af00      	add	r7, sp, #0
 80051d8:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 80051da:	2300      	movs	r3, #0
 80051dc:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 80051de:	687b      	ldr	r3, [r7, #4]
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051e6:	699b      	ldr	r3, [r3, #24]
 80051e8:	687a      	ldr	r2, [r7, #4]
 80051ea:	6812      	ldr	r2, [r2, #0]
 80051ec:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80051f0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80051f4:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 80051f6:	687b      	ldr	r3, [r7, #4]
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80051fe:	699b      	ldr	r3, [r3, #24]
 8005200:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005202:	2001      	movs	r0, #1
 8005204:	f7fd ffd6 	bl	80031b4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	681a      	ldr	r2, [r3, #0]
 800520c:	68fb      	ldr	r3, [r7, #12]
 800520e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8005212:	6193      	str	r3, [r2, #24]
}
 8005214:	bf00      	nop
 8005216:	3710      	adds	r7, #16
 8005218:	46bd      	mov	sp, r7
 800521a:	bd80      	pop	{r7, pc}

0800521c <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth, const ETH_MACConfigTypeDef *macconf)
{
 800521c:	b580      	push	{r7, lr}
 800521e:	b084      	sub	sp, #16
 8005220:	af00      	add	r7, sp, #0
 8005222:	6078      	str	r0, [r7, #4]
 8005224:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	681b      	ldr	r3, [r3, #0]
 800522c:	60fb      	str	r3, [r7, #12]
  /* Clear CSTF, WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800522e:	68fa      	ldr	r2, [r7, #12]
 8005230:	4b53      	ldr	r3, [pc, #332]	; (8005380 <ETH_SetMACConfig+0x164>)
 8005232:	4013      	ands	r3, r2
 8005234:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 8005236:	683b      	ldr	r3, [r7, #0]
 8005238:	7b9b      	ldrb	r3, [r3, #14]
 800523a:	065b      	lsls	r3, r3, #25
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800523c:	683a      	ldr	r2, [r7, #0]
 800523e:	7c12      	ldrb	r2, [r2, #16]
 8005240:	2a00      	cmp	r2, #0
 8005242:	d102      	bne.n	800524a <ETH_SetMACConfig+0x2e>
 8005244:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8005248:	e000      	b.n	800524c <ETH_SetMACConfig+0x30>
 800524a:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 800524c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 800524e:	683a      	ldr	r2, [r7, #0]
 8005250:	7c52      	ldrb	r2, [r2, #17]
 8005252:	2a00      	cmp	r2, #0
 8005254:	d102      	bne.n	800525c <ETH_SetMACConfig+0x40>
 8005256:	f44f 0280 	mov.w	r2, #4194304	; 0x400000
 800525a:	e000      	b.n	800525e <ETH_SetMACConfig+0x42>
 800525c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800525e:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 8005264:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8005266:	683b      	ldr	r3, [r7, #0]
 8005268:	7fdb      	ldrb	r3, [r3, #31]
 800526a:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 800526c:	431a      	orrs	r2, r3
                        macconf->Speed |
 800526e:	683b      	ldr	r3, [r7, #0]
 8005270:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 8005272:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 8005274:	683a      	ldr	r2, [r7, #0]
 8005276:	7f92      	ldrb	r2, [r2, #30]
 8005278:	2a00      	cmp	r2, #0
 800527a:	d102      	bne.n	8005282 <ETH_SetMACConfig+0x66>
 800527c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005280:	e000      	b.n	8005284 <ETH_SetMACConfig+0x68>
 8005282:	2200      	movs	r2, #0
                        macconf->Speed |
 8005284:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8005286:	683b      	ldr	r3, [r7, #0]
 8005288:	7f1b      	ldrb	r3, [r3, #28]
 800528a:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 800528c:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 800528e:	683b      	ldr	r3, [r7, #0]
 8005290:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 8005292:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8005294:	683b      	ldr	r3, [r7, #0]
 8005296:	791b      	ldrb	r3, [r3, #4]
 8005298:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 800529a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800529c:	683a      	ldr	r2, [r7, #0]
 800529e:	f892 2020 	ldrb.w	r2, [r2, #32]
 80052a2:	2a00      	cmp	r2, #0
 80052a4:	d102      	bne.n	80052ac <ETH_SetMACConfig+0x90>
 80052a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80052aa:	e000      	b.n	80052ae <ETH_SetMACConfig+0x92>
 80052ac:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80052ae:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80052b0:	683b      	ldr	r3, [r7, #0]
 80052b2:	7bdb      	ldrb	r3, [r3, #15]
 80052b4:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 80052b6:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 80052b8:	683b      	ldr	r3, [r7, #0]
 80052ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 80052bc:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 80052be:	683b      	ldr	r3, [r7, #0]
 80052c0:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80052c4:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)macconf->CRCStripTypePacket << 25U) |
 80052c6:	4313      	orrs	r3, r2
 80052c8:	68fa      	ldr	r2, [r7, #12]
 80052ca:	4313      	orrs	r3, r2
 80052cc:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	68fa      	ldr	r2, [r7, #12]
 80052d4:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	681b      	ldr	r3, [r3, #0]
 80052da:	681b      	ldr	r3, [r3, #0]
 80052dc:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80052de:	2001      	movs	r0, #1
 80052e0:	f7fd ff68 	bl	80031b4 <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	68fa      	ldr	r2, [r7, #12]
 80052ea:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 80052ec:	687b      	ldr	r3, [r7, #4]
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	699b      	ldr	r3, [r3, #24]
 80052f2:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 80052f4:	68fa      	ldr	r2, [r7, #12]
 80052f6:	f64f 7341 	movw	r3, #65345	; 0xff41
 80052fa:	4013      	ands	r3, r2
 80052fc:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80052fe:	683b      	ldr	r3, [r7, #0]
 8005300:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005302:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8005304:	683a      	ldr	r2, [r7, #0]
 8005306:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800530a:	2a00      	cmp	r2, #0
 800530c:	d101      	bne.n	8005312 <ETH_SetMACConfig+0xf6>
 800530e:	2280      	movs	r2, #128	; 0x80
 8005310:	e000      	b.n	8005314 <ETH_SetMACConfig+0xf8>
 8005312:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005314:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 8005316:	683b      	ldr	r3, [r7, #0]
 8005318:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800531a:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800531c:	683a      	ldr	r2, [r7, #0]
 800531e:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8005322:	2a01      	cmp	r2, #1
 8005324:	d101      	bne.n	800532a <ETH_SetMACConfig+0x10e>
 8005326:	2208      	movs	r2, #8
 8005328:	e000      	b.n	800532c <ETH_SetMACConfig+0x110>
 800532a:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 800532c:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 800532e:	683a      	ldr	r2, [r7, #0]
 8005330:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8005334:	2a01      	cmp	r2, #1
 8005336:	d101      	bne.n	800533c <ETH_SetMACConfig+0x120>
 8005338:	2204      	movs	r2, #4
 800533a:	e000      	b.n	800533e <ETH_SetMACConfig+0x122>
 800533c:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 800533e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 8005340:	683a      	ldr	r2, [r7, #0]
 8005342:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 8005346:	2a01      	cmp	r2, #1
 8005348:	d101      	bne.n	800534e <ETH_SetMACConfig+0x132>
 800534a:	2202      	movs	r2, #2
 800534c:	e000      	b.n	8005350 <ETH_SetMACConfig+0x134>
 800534e:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8005350:	4313      	orrs	r3, r2
 8005352:	68fa      	ldr	r2, [r7, #12]
 8005354:	4313      	orrs	r3, r2
 8005356:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	68fa      	ldr	r2, [r7, #12]
 800535e:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 8005360:	687b      	ldr	r3, [r7, #4]
 8005362:	681b      	ldr	r3, [r3, #0]
 8005364:	699b      	ldr	r3, [r3, #24]
 8005366:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005368:	2001      	movs	r0, #1
 800536a:	f7fd ff23 	bl	80031b4 <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68fa      	ldr	r2, [r7, #12]
 8005374:	619a      	str	r2, [r3, #24]
}
 8005376:	bf00      	nop
 8005378:	3710      	adds	r7, #16
 800537a:	46bd      	mov	sp, r7
 800537c:	bd80      	pop	{r7, pc}
 800537e:	bf00      	nop
 8005380:	fd20810f 	.word	0xfd20810f

08005384 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth, const ETH_DMAConfigTypeDef *dmaconf)
{
 8005384:	b580      	push	{r7, lr}
 8005386:	b084      	sub	sp, #16
 8005388:	af00      	add	r7, sp, #0
 800538a:	6078      	str	r0, [r7, #4]
 800538c:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005396:	699b      	ldr	r3, [r3, #24]
 8005398:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 800539a:	68fa      	ldr	r2, [r7, #12]
 800539c:	4b3d      	ldr	r3, [pc, #244]	; (8005494 <ETH_SetDMAConfig+0x110>)
 800539e:	4013      	ands	r3, r2
 80053a0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80053a2:	683b      	ldr	r3, [r7, #0]
 80053a4:	7b1b      	ldrb	r3, [r3, #12]
 80053a6:	2b00      	cmp	r3, #0
 80053a8:	d102      	bne.n	80053b0 <ETH_SetDMAConfig+0x2c>
 80053aa:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 80053ae:	e000      	b.n	80053b2 <ETH_SetDMAConfig+0x2e>
 80053b0:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80053b2:	683b      	ldr	r3, [r7, #0]
 80053b4:	7b5b      	ldrb	r3, [r3, #13]
 80053b6:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80053b8:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80053ba:	683a      	ldr	r2, [r7, #0]
 80053bc:	7f52      	ldrb	r2, [r2, #29]
 80053be:	2a00      	cmp	r2, #0
 80053c0:	d102      	bne.n	80053c8 <ETH_SetDMAConfig+0x44>
 80053c2:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 80053c6:	e000      	b.n	80053ca <ETH_SetDMAConfig+0x46>
 80053c8:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 80053ca:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80053cc:	683b      	ldr	r3, [r7, #0]
 80053ce:	7b9b      	ldrb	r3, [r3, #14]
 80053d0:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 80053d2:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 80053d4:	683b      	ldr	r3, [r7, #0]
 80053d6:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 80053d8:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80053da:	683b      	ldr	r3, [r7, #0]
 80053dc:	7f1b      	ldrb	r3, [r3, #28]
 80053de:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 80053e0:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80053e2:	683b      	ldr	r3, [r7, #0]
 80053e4:	7f9b      	ldrb	r3, [r3, #30]
 80053e6:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 80053e8:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 80053ea:	683b      	ldr	r3, [r7, #0]
 80053ec:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 80053ee:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 80053f0:	683b      	ldr	r3, [r7, #0]
 80053f2:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 80053f6:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 80053f8:	4313      	orrs	r3, r2
 80053fa:	68fa      	ldr	r2, [r7, #12]
 80053fc:	4313      	orrs	r3, r2
 80053fe:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	681b      	ldr	r3, [r3, #0]
 8005404:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005408:	461a      	mov	r2, r3
 800540a:	68fb      	ldr	r3, [r7, #12]
 800540c:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005416:	699b      	ldr	r3, [r3, #24]
 8005418:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800541a:	2001      	movs	r0, #1
 800541c:	f7fd feca 	bl	80031b4 <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8005420:	687b      	ldr	r3, [r7, #4]
 8005422:	681b      	ldr	r3, [r3, #0]
 8005424:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005428:	461a      	mov	r2, r3
 800542a:	68fb      	ldr	r3, [r7, #12]
 800542c:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800542e:	683b      	ldr	r3, [r7, #0]
 8005430:	791b      	ldrb	r3, [r3, #4]
 8005432:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8005434:	683b      	ldr	r3, [r7, #0]
 8005436:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8005438:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800543a:	683b      	ldr	r3, [r7, #0]
 800543c:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 800543e:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 8005440:	683b      	ldr	r3, [r7, #0]
 8005442:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 8005444:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005446:	683b      	ldr	r3, [r7, #0]
 8005448:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 800544c:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 800544e:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 8005450:	683b      	ldr	r3, [r7, #0]
 8005452:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8005454:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 8005456:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 8005458:	683b      	ldr	r3, [r7, #0]
 800545a:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 800545c:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800545e:	687a      	ldr	r2, [r7, #4]
 8005460:	6812      	ldr	r2, [r2, #0]
 8005462:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 8005466:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800546a:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 800546c:	687b      	ldr	r3, [r7, #4]
 800546e:	681b      	ldr	r3, [r3, #0]
 8005470:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005474:	681b      	ldr	r3, [r3, #0]
 8005476:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8005478:	2001      	movs	r0, #1
 800547a:	f7fd fe9b 	bl	80031b4 <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005486:	461a      	mov	r2, r3
 8005488:	68fb      	ldr	r3, [r7, #12]
 800548a:	6013      	str	r3, [r2, #0]
}
 800548c:	bf00      	nop
 800548e:	3710      	adds	r7, #16
 8005490:	46bd      	mov	sp, r7
 8005492:	bd80      	pop	{r7, pc}
 8005494:	f8de3f23 	.word	0xf8de3f23

08005498 <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 8005498:	b580      	push	{r7, lr}
 800549a:	b0a6      	sub	sp, #152	; 0x98
 800549c:	af00      	add	r7, sp, #0
 800549e:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 80054a0:	2301      	movs	r3, #1
 80054a2:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 80054a6:	2301      	movs	r3, #1
 80054a8:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 80054ac:	2300      	movs	r3, #0
 80054ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 80054b0:	2300      	movs	r3, #0
 80054b2:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 80054b6:	2301      	movs	r3, #1
 80054b8:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 80054bc:	2300      	movs	r3, #0
 80054be:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.CRCStripTypePacket = ENABLE;
 80054c2:	2301      	movs	r3, #1
 80054c4:	f887 3042 	strb.w	r3, [r7, #66]	; 0x42
  macDefaultConf.ChecksumOffload = ENABLE;
 80054c8:	2301      	movs	r3, #1
 80054ca:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 80054ce:	2300      	movs	r3, #0
 80054d0:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 80054d4:	2300      	movs	r3, #0
 80054d6:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 80054da:	2300      	movs	r3, #0
 80054dc:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 80054de:	2300      	movs	r3, #0
 80054e0:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 80054e4:	2300      	movs	r3, #0
 80054e6:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 80054e8:	2300      	movs	r3, #0
 80054ea:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 80054ee:	2300      	movs	r3, #0
 80054f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 80054f4:	2300      	movs	r3, #0
 80054f6:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 80054fa:	2300      	movs	r3, #0
 80054fc:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 8005500:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005504:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8005506:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800550a:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800550c:	2300      	movs	r3, #0
 800550e:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8005512:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8005516:	4619      	mov	r1, r3
 8005518:	6878      	ldr	r0, [r7, #4]
 800551a:	f7ff fe7f 	bl	800521c <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800551e:	2301      	movs	r3, #1
 8005520:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8005522:	2301      	movs	r3, #1
 8005524:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8005526:	2301      	movs	r3, #1
 8005528:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800552c:	2301      	movs	r3, #1
 800552e:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 8005530:	2300      	movs	r3, #0
 8005532:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8005534:	2300      	movs	r3, #0
 8005536:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 800553a:	2300      	movs	r3, #0
 800553c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 8005540:	2300      	movs	r3, #0
 8005542:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 8005544:	2301      	movs	r3, #1
 8005546:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 800554a:	2301      	movs	r3, #1
 800554c:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 800554e:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005552:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 8005554:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005558:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 800555a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800555e:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 8005560:	2301      	movs	r3, #1
 8005562:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 8005566:	2300      	movs	r3, #0
 8005568:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 800556a:	2300      	movs	r3, #0
 800556c:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 800556e:	f107 0308 	add.w	r3, r7, #8
 8005572:	4619      	mov	r1, r3
 8005574:	6878      	ldr	r0, [r7, #4]
 8005576:	f7ff ff05 	bl	8005384 <ETH_SetDMAConfig>
}
 800557a:	bf00      	nop
 800557c:	3798      	adds	r7, #152	; 0x98
 800557e:	46bd      	mov	sp, r7
 8005580:	bd80      	pop	{r7, pc}
	...

08005584 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 8005584:	b480      	push	{r7}
 8005586:	b087      	sub	sp, #28
 8005588:	af00      	add	r7, sp, #0
 800558a:	60f8      	str	r0, [r7, #12]
 800558c:	60b9      	str	r1, [r7, #8]
 800558e:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 8005590:	687b      	ldr	r3, [r7, #4]
 8005592:	3305      	adds	r3, #5
 8005594:	781b      	ldrb	r3, [r3, #0]
 8005596:	021b      	lsls	r3, r3, #8
 8005598:	687a      	ldr	r2, [r7, #4]
 800559a:	3204      	adds	r2, #4
 800559c:	7812      	ldrb	r2, [r2, #0]
 800559e:	4313      	orrs	r3, r2
 80055a0:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80055a2:	68ba      	ldr	r2, [r7, #8]
 80055a4:	4b11      	ldr	r3, [pc, #68]	; (80055ec <ETH_MACAddressConfig+0x68>)
 80055a6:	4413      	add	r3, r2
 80055a8:	461a      	mov	r2, r3
 80055aa:	697b      	ldr	r3, [r7, #20]
 80055ac:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	3303      	adds	r3, #3
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	061a      	lsls	r2, r3, #24
 80055b6:	687b      	ldr	r3, [r7, #4]
 80055b8:	3302      	adds	r3, #2
 80055ba:	781b      	ldrb	r3, [r3, #0]
 80055bc:	041b      	lsls	r3, r3, #16
 80055be:	431a      	orrs	r2, r3
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	3301      	adds	r3, #1
 80055c4:	781b      	ldrb	r3, [r3, #0]
 80055c6:	021b      	lsls	r3, r3, #8
 80055c8:	4313      	orrs	r3, r2
 80055ca:	687a      	ldr	r2, [r7, #4]
 80055cc:	7812      	ldrb	r2, [r2, #0]
 80055ce:	4313      	orrs	r3, r2
 80055d0:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 80055d2:	68ba      	ldr	r2, [r7, #8]
 80055d4:	4b06      	ldr	r3, [pc, #24]	; (80055f0 <ETH_MACAddressConfig+0x6c>)
 80055d6:	4413      	add	r3, r2
 80055d8:	461a      	mov	r2, r3
 80055da:	697b      	ldr	r3, [r7, #20]
 80055dc:	6013      	str	r3, [r2, #0]
}
 80055de:	bf00      	nop
 80055e0:	371c      	adds	r7, #28
 80055e2:	46bd      	mov	sp, r7
 80055e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80055e8:	4770      	bx	lr
 80055ea:	bf00      	nop
 80055ec:	40028040 	.word	0x40028040
 80055f0:	40028044 	.word	0x40028044

080055f4 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 80055f4:	b480      	push	{r7}
 80055f6:	b085      	sub	sp, #20
 80055f8:	af00      	add	r7, sp, #0
 80055fa:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80055fc:	2300      	movs	r3, #0
 80055fe:	60fb      	str	r3, [r7, #12]
 8005600:	e03e      	b.n	8005680 <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 8005602:	687b      	ldr	r3, [r7, #4]
 8005604:	68d9      	ldr	r1, [r3, #12]
 8005606:	68fa      	ldr	r2, [r7, #12]
 8005608:	4613      	mov	r3, r2
 800560a:	009b      	lsls	r3, r3, #2
 800560c:	4413      	add	r3, r2
 800560e:	00db      	lsls	r3, r3, #3
 8005610:	440b      	add	r3, r1
 8005612:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0U);
 8005614:	68bb      	ldr	r3, [r7, #8]
 8005616:	2200      	movs	r2, #0
 8005618:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0U);
 800561a:	68bb      	ldr	r3, [r7, #8]
 800561c:	2200      	movs	r2, #0
 800561e:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0U);
 8005620:	68bb      	ldr	r3, [r7, #8]
 8005622:	2200      	movs	r2, #0
 8005624:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0U);
 8005626:	68bb      	ldr	r3, [r7, #8]
 8005628:	2200      	movs	r2, #0
 800562a:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 800562c:	68b9      	ldr	r1, [r7, #8]
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	68fa      	ldr	r2, [r7, #12]
 8005632:	3206      	adds	r2, #6
 8005634:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8005638:	68bb      	ldr	r3, [r7, #8]
 800563a:	681b      	ldr	r3, [r3, #0]
 800563c:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 8005640:	68bb      	ldr	r3, [r7, #8]
 8005642:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 8005644:	68fb      	ldr	r3, [r7, #12]
 8005646:	2b02      	cmp	r3, #2
 8005648:	d80c      	bhi.n	8005664 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 800564a:	687b      	ldr	r3, [r7, #4]
 800564c:	68d9      	ldr	r1, [r3, #12]
 800564e:	68fb      	ldr	r3, [r7, #12]
 8005650:	1c5a      	adds	r2, r3, #1
 8005652:	4613      	mov	r3, r2
 8005654:	009b      	lsls	r3, r3, #2
 8005656:	4413      	add	r3, r2
 8005658:	00db      	lsls	r3, r3, #3
 800565a:	440b      	add	r3, r1
 800565c:	461a      	mov	r2, r3
 800565e:	68bb      	ldr	r3, [r7, #8]
 8005660:	60da      	str	r2, [r3, #12]
 8005662:	e004      	b.n	800566e <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	68db      	ldr	r3, [r3, #12]
 8005668:	461a      	mov	r2, r3
 800566a:	68bb      	ldr	r3, [r7, #8]
 800566c:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 800566e:	68bb      	ldr	r3, [r7, #8]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 8005676:	68bb      	ldr	r3, [r7, #8]
 8005678:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 800567a:	68fb      	ldr	r3, [r7, #12]
 800567c:	3301      	adds	r3, #1
 800567e:	60fb      	str	r3, [r7, #12]
 8005680:	68fb      	ldr	r3, [r7, #12]
 8005682:	2b03      	cmp	r3, #3
 8005684:	d9bd      	bls.n	8005602 <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	2200      	movs	r2, #0
 800568a:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	68da      	ldr	r2, [r3, #12]
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	681b      	ldr	r3, [r3, #0]
 8005694:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005698:	611a      	str	r2, [r3, #16]
}
 800569a:	bf00      	nop
 800569c:	3714      	adds	r7, #20
 800569e:	46bd      	mov	sp, r7
 80056a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80056a4:	4770      	bx	lr

080056a6 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 80056a6:	b480      	push	{r7}
 80056a8:	b085      	sub	sp, #20
 80056aa:	af00      	add	r7, sp, #0
 80056ac:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 80056ae:	2300      	movs	r3, #0
 80056b0:	60fb      	str	r3, [r7, #12]
 80056b2:	e048      	b.n	8005746 <ETH_DMARxDescListInit+0xa0>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	6919      	ldr	r1, [r3, #16]
 80056b8:	68fa      	ldr	r2, [r7, #12]
 80056ba:	4613      	mov	r3, r2
 80056bc:	009b      	lsls	r3, r3, #2
 80056be:	4413      	add	r3, r2
 80056c0:	00db      	lsls	r3, r3, #3
 80056c2:	440b      	add	r3, r1
 80056c4:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0U);
 80056c6:	68bb      	ldr	r3, [r7, #8]
 80056c8:	2200      	movs	r2, #0
 80056ca:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0U);
 80056cc:	68bb      	ldr	r3, [r7, #8]
 80056ce:	2200      	movs	r2, #0
 80056d0:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0U);
 80056d2:	68bb      	ldr	r3, [r7, #8]
 80056d4:	2200      	movs	r2, #0
 80056d6:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0U);
 80056d8:	68bb      	ldr	r3, [r7, #8]
 80056da:	2200      	movs	r2, #0
 80056dc:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0U);
 80056de:	68bb      	ldr	r3, [r7, #8]
 80056e0:	2200      	movs	r2, #0
 80056e2:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0U);
 80056e4:	68bb      	ldr	r3, [r7, #8]
 80056e6:	2200      	movs	r2, #0
 80056e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 80056ea:	68bb      	ldr	r3, [r7, #8]
 80056ec:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80056f0:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = heth->Init.RxBuffLen | ETH_DMARXDESC_RCH;
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	695b      	ldr	r3, [r3, #20]
 80056f6:	f443 4280 	orr.w	r2, r3, #16384	; 0x4000
 80056fa:	68bb      	ldr	r3, [r7, #8]
 80056fc:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 80056fe:	68bb      	ldr	r3, [r7, #8]
 8005700:	685b      	ldr	r3, [r3, #4]
 8005702:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8005706:	68bb      	ldr	r3, [r7, #8]
 8005708:	605a      	str	r2, [r3, #4]
    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 800570a:	68b9      	ldr	r1, [r7, #8]
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	68fa      	ldr	r2, [r7, #12]
 8005710:	3212      	adds	r2, #18
 8005712:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8005716:	68fb      	ldr	r3, [r7, #12]
 8005718:	2b02      	cmp	r3, #2
 800571a:	d80c      	bhi.n	8005736 <ETH_DMARxDescListInit+0x90>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 800571c:	687b      	ldr	r3, [r7, #4]
 800571e:	6919      	ldr	r1, [r3, #16]
 8005720:	68fb      	ldr	r3, [r7, #12]
 8005722:	1c5a      	adds	r2, r3, #1
 8005724:	4613      	mov	r3, r2
 8005726:	009b      	lsls	r3, r3, #2
 8005728:	4413      	add	r3, r2
 800572a:	00db      	lsls	r3, r3, #3
 800572c:	440b      	add	r3, r1
 800572e:	461a      	mov	r2, r3
 8005730:	68bb      	ldr	r3, [r7, #8]
 8005732:	60da      	str	r2, [r3, #12]
 8005734:	e004      	b.n	8005740 <ETH_DMARxDescListInit+0x9a>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	691b      	ldr	r3, [r3, #16]
 800573a:	461a      	mov	r2, r3
 800573c:	68bb      	ldr	r3, [r7, #8]
 800573e:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	3301      	adds	r3, #1
 8005744:	60fb      	str	r3, [r7, #12]
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	2b03      	cmp	r3, #3
 800574a:	d9b3      	bls.n	80056b4 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0U);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	2200      	movs	r2, #0
 8005750:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0U);
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	2200      	movs	r2, #0
 8005756:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0U);
 8005758:	687b      	ldr	r3, [r7, #4]
 800575a:	2200      	movs	r2, #0
 800575c:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0U);
 800575e:	687b      	ldr	r3, [r7, #4]
 8005760:	2200      	movs	r2, #0
 8005762:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0U);
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	2200      	movs	r2, #0
 8005768:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	691a      	ldr	r2, [r3, #16]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8005776:	60da      	str	r2, [r3, #12]
}
 8005778:	bf00      	nop
 800577a:	3714      	adds	r7, #20
 800577c:	46bd      	mov	sp, r7
 800577e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005782:	4770      	bx	lr

08005784 <ETH_Prepare_Tx_Descriptors>:
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, const ETH_TxPacketConfigTypeDef *pTxConfig,
                                           uint32_t ItMode)
{
 8005784:	b480      	push	{r7}
 8005786:	b091      	sub	sp, #68	; 0x44
 8005788:	af00      	add	r7, sp, #0
 800578a:	60f8      	str	r0, [r7, #12]
 800578c:	60b9      	str	r1, [r7, #8]
 800578e:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	3318      	adds	r3, #24
 8005794:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8005796:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005798:	691b      	ldr	r3, [r3, #16]
 800579a:	63fb      	str	r3, [r7, #60]	; 0x3c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 800579c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800579e:	691b      	ldr	r3, [r3, #16]
 80057a0:	623b      	str	r3, [r7, #32]
  uint32_t idx;
  uint32_t descnbr = 0;
 80057a2:	2300      	movs	r3, #0
 80057a4:	637b      	str	r3, [r7, #52]	; 0x34
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80057a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80057a8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80057aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80057ae:	633b      	str	r3, [r7, #48]	; 0x30

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 80057b0:	68bb      	ldr	r3, [r7, #8]
 80057b2:	689b      	ldr	r3, [r3, #8]
 80057b4:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t           bd_count = 0;
 80057b6:	2300      	movs	r3, #0
 80057b8:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t primask_bit;

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80057ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057bc:	681b      	ldr	r3, [r3, #0]
 80057be:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80057c2:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80057c6:	d007      	beq.n	80057d8 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80057c8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80057ca:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80057cc:	3304      	adds	r3, #4
 80057ce:	009b      	lsls	r3, r3, #2
 80057d0:	4413      	add	r3, r2
 80057d2:	685b      	ldr	r3, [r3, #4]
 80057d4:	2b00      	cmp	r3, #0
 80057d6:	d001      	beq.n	80057dc <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 80057d8:	2302      	movs	r3, #2
 80057da:	e111      	b.n	8005a00 <ETH_Prepare_Tx_Descriptors+0x27c>
  }


  descnbr += 1U;
 80057dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80057de:	3301      	adds	r3, #1
 80057e0:	637b      	str	r3, [r7, #52]	; 0x34

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 80057e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80057e4:	681b      	ldr	r3, [r3, #0]
 80057e6:	461a      	mov	r2, r3
 80057e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ea:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 80057ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057ee:	685a      	ldr	r2, [r3, #4]
 80057f0:	4b86      	ldr	r3, [pc, #536]	; (8005a0c <ETH_Prepare_Tx_Descriptors+0x288>)
 80057f2:	4013      	ands	r3, r2
 80057f4:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80057f6:	6852      	ldr	r2, [r2, #4]
 80057f8:	431a      	orrs	r2, r3
 80057fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80057fc:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 80057fe:	68bb      	ldr	r3, [r7, #8]
 8005800:	681b      	ldr	r3, [r3, #0]
 8005802:	f003 0301 	and.w	r3, r3, #1
 8005806:	2b00      	cmp	r3, #0
 8005808:	d008      	beq.n	800581c <ETH_Prepare_Tx_Descriptors+0x98>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 800580a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8005812:	68bb      	ldr	r3, [r7, #8]
 8005814:	695b      	ldr	r3, [r3, #20]
 8005816:	431a      	orrs	r2, r3
 8005818:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800581a:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 800581c:	68bb      	ldr	r3, [r7, #8]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f003 0320 	and.w	r3, r3, #32
 8005824:	2b00      	cmp	r3, #0
 8005826:	d008      	beq.n	800583a <ETH_Prepare_Tx_Descriptors+0xb6>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8005828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8005830:	68bb      	ldr	r3, [r7, #8]
 8005832:	691b      	ldr	r3, [r3, #16]
 8005834:	431a      	orrs	r2, r3
 8005836:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005838:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 800583a:	68bb      	ldr	r3, [r7, #8]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f003 0304 	and.w	r3, r3, #4
 8005842:	2b00      	cmp	r3, #0
 8005844:	d005      	beq.n	8005852 <ETH_Prepare_Tx_Descriptors+0xce>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8005846:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 800584e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005850:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8005852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005854:	681b      	ldr	r3, [r3, #0]
 8005856:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 800585a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800585c:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 800585e:	e082      	b.n	8005966 <ETH_Prepare_Tx_Descriptors+0x1e2>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005862:	681b      	ldr	r3, [r3, #0]
 8005864:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8005868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800586a:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2b00      	cmp	r3, #0
 8005870:	d006      	beq.n	8005880 <ETH_Prepare_Tx_Descriptors+0xfc>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005872:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005874:	681b      	ldr	r3, [r3, #0]
 8005876:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800587a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800587c:	601a      	str	r2, [r3, #0]
 800587e:	e005      	b.n	800588c <ETH_Prepare_Tx_Descriptors+0x108>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005880:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8005888:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800588a:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 800588c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800588e:	3301      	adds	r3, #1
 8005890:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005892:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8005894:	2b03      	cmp	r3, #3
 8005896:	d902      	bls.n	800589e <ETH_Prepare_Tx_Descriptors+0x11a>
 8005898:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800589a:	3b04      	subs	r3, #4
 800589c:	63fb      	str	r3, [r7, #60]	; 0x3c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 800589e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058a0:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80058a2:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058a6:	633b      	str	r3, [r7, #48]	; 0x30

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 80058a8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058aa:	681b      	ldr	r3, [r3, #0]
 80058ac:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 80058b0:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80058b4:	d007      	beq.n	80058c6 <ETH_Prepare_Tx_Descriptors+0x142>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 80058b6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80058b8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058ba:	3304      	adds	r3, #4
 80058bc:	009b      	lsls	r3, r3, #2
 80058be:	4413      	add	r3, r2
 80058c0:	685b      	ldr	r3, [r3, #4]
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d029      	beq.n	800591a <ETH_Prepare_Tx_Descriptors+0x196>
    {
      descidx = firstdescidx;
 80058c6:	6a3b      	ldr	r3, [r7, #32]
 80058c8:	63fb      	str	r3, [r7, #60]	; 0x3c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80058ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80058cc:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80058ce:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80058d2:	633b      	str	r3, [r7, #48]	; 0x30

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 80058d4:	2300      	movs	r3, #0
 80058d6:	63bb      	str	r3, [r7, #56]	; 0x38
 80058d8:	e019      	b.n	800590e <ETH_Prepare_Tx_Descriptors+0x18a>
  __ASM volatile ("dmb 0xF":::"memory");
 80058da:	f3bf 8f5f 	dmb	sy
}
 80058de:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80058e0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 80058e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80058ea:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 80058ec:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058ee:	3301      	adds	r3, #1
 80058f0:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058f2:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058f4:	2b03      	cmp	r3, #3
 80058f6:	d902      	bls.n	80058fe <ETH_Prepare_Tx_Descriptors+0x17a>
 80058f8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80058fa:	3b04      	subs	r3, #4
 80058fc:	63fb      	str	r3, [r7, #60]	; 0x3c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 80058fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005900:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005902:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8005906:	633b      	str	r3, [r7, #48]	; 0x30
      for (idx = 0; idx < descnbr; idx ++)
 8005908:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800590a:	3301      	adds	r3, #1
 800590c:	63bb      	str	r3, [r7, #56]	; 0x38
 800590e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8005910:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005912:	429a      	cmp	r2, r3
 8005914:	d3e1      	bcc.n	80058da <ETH_Prepare_Tx_Descriptors+0x156>
      }

      return HAL_ETH_ERROR_BUSY;
 8005916:	2302      	movs	r3, #2
 8005918:	e072      	b.n	8005a00 <ETH_Prepare_Tx_Descriptors+0x27c>
    }

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 800591a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800591c:	681b      	ldr	r3, [r3, #0]
 800591e:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8005922:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005924:	601a      	str	r2, [r3, #0]

    descnbr += 1U;
 8005926:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005928:	3301      	adds	r3, #1
 800592a:	637b      	str	r3, [r7, #52]	; 0x34

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 800592c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800592e:	689b      	ldr	r3, [r3, #8]
 8005930:	62fb      	str	r3, [r7, #44]	; 0x2c

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8005932:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005934:	681b      	ldr	r3, [r3, #0]
 8005936:	461a      	mov	r2, r3
 8005938:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593a:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 800593c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800593e:	685a      	ldr	r2, [r3, #4]
 8005940:	4b32      	ldr	r3, [pc, #200]	; (8005a0c <ETH_Prepare_Tx_Descriptors+0x288>)
 8005942:	4013      	ands	r3, r2
 8005944:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005946:	6852      	ldr	r2, [r2, #4]
 8005948:	431a      	orrs	r2, r3
 800594a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800594c:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 800594e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8005950:	3301      	adds	r3, #1
 8005952:	62bb      	str	r3, [r7, #40]	; 0x28
  __ASM volatile ("dmb 0xF":::"memory");
 8005954:	f3bf 8f5f 	dmb	sy
}
 8005958:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 800595a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8005962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005964:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8005966:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8005968:	689b      	ldr	r3, [r3, #8]
 800596a:	2b00      	cmp	r3, #0
 800596c:	f47f af78 	bne.w	8005860 <ETH_Prepare_Tx_Descriptors+0xdc>
  }

  if (ItMode != ((uint32_t)RESET))
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	2b00      	cmp	r3, #0
 8005974:	d006      	beq.n	8005984 <ETH_Prepare_Tx_Descriptors+0x200>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005976:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 800597e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005980:	601a      	str	r2, [r3, #0]
 8005982:	e005      	b.n	8005990 <ETH_Prepare_Tx_Descriptors+0x20c>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8005984:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005986:	681b      	ldr	r3, [r3, #0]
 8005988:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 800598c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800598e:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8005990:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8005998:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800599a:	601a      	str	r2, [r3, #0]

  /* Get address of first descriptor */
  dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[firstdescidx];
 800599c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800599e:	6a3a      	ldr	r2, [r7, #32]
 80059a0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80059a4:	633b      	str	r3, [r7, #48]	; 0x30
  __ASM volatile ("dmb 0xF":::"memory");
 80059a6:	f3bf 8f5f 	dmb	sy
}
 80059aa:	bf00      	nop
  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 80059ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059ae:	681b      	ldr	r3, [r3, #0]
 80059b0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 80059b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80059b6:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 80059b8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80059bc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80059be:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80059c0:	3304      	adds	r3, #4
 80059c2:	009b      	lsls	r3, r3, #2
 80059c4:	440b      	add	r3, r1
 80059c6:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 80059c8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059ca:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80059cc:	611a      	str	r2, [r3, #16]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80059ce:	f3ef 8310 	mrs	r3, PRIMASK
 80059d2:	613b      	str	r3, [r7, #16]
  return(result);
 80059d4:	693b      	ldr	r3, [r7, #16]

  /* Enter critical section */
  primask_bit = __get_PRIMASK();
 80059d6:	61fb      	str	r3, [r7, #28]
 80059d8:	2301      	movs	r3, #1
 80059da:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059dc:	697b      	ldr	r3, [r7, #20]
 80059de:	f383 8810 	msr	PRIMASK, r3
}
 80059e2:	bf00      	nop
  __set_PRIMASK(1);

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 80059e4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059e6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 80059e8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80059ea:	4413      	add	r3, r2
 80059ec:	1c5a      	adds	r2, r3, #1
 80059ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80059f0:	629a      	str	r2, [r3, #40]	; 0x28
 80059f2:	69fb      	ldr	r3, [r7, #28]
 80059f4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80059f6:	69bb      	ldr	r3, [r7, #24]
 80059f8:	f383 8810 	msr	PRIMASK, r3
}
 80059fc:	bf00      	nop

  /* Exit critical section: restore previous priority mask */
  __set_PRIMASK(primask_bit);

  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 80059fe:	2300      	movs	r3, #0
}
 8005a00:	4618      	mov	r0, r3
 8005a02:	3744      	adds	r7, #68	; 0x44
 8005a04:	46bd      	mov	sp, r7
 8005a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a0a:	4770      	bx	lr
 8005a0c:	ffffe000 	.word	0xffffe000

08005a10 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8005a10:	b580      	push	{r7, lr}
 8005a12:	b086      	sub	sp, #24
 8005a14:	af00      	add	r7, sp, #0
 8005a16:	60f8      	str	r0, [r7, #12]
 8005a18:	60b9      	str	r1, [r7, #8]
 8005a1a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005a1e:	2301      	movs	r3, #1
 8005a20:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005a22:	4b27      	ldr	r3, [pc, #156]	; (8005ac0 <HAL_FLASH_Program+0xb0>)
 8005a24:	7d1b      	ldrb	r3, [r3, #20]
 8005a26:	2b01      	cmp	r3, #1
 8005a28:	d101      	bne.n	8005a2e <HAL_FLASH_Program+0x1e>
 8005a2a:	2302      	movs	r3, #2
 8005a2c:	e043      	b.n	8005ab6 <HAL_FLASH_Program+0xa6>
 8005a2e:	4b24      	ldr	r3, [pc, #144]	; (8005ac0 <HAL_FLASH_Program+0xb0>)
 8005a30:	2201      	movs	r2, #1
 8005a32:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005a34:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005a38:	f000 f940 	bl	8005cbc <FLASH_WaitForLastOperation>
 8005a3c:	4603      	mov	r3, r0
 8005a3e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8005a40:	7dfb      	ldrb	r3, [r7, #23]
 8005a42:	2b00      	cmp	r3, #0
 8005a44:	d133      	bne.n	8005aae <HAL_FLASH_Program+0x9e>
  {
    switch(TypeProgram)
 8005a46:	68fb      	ldr	r3, [r7, #12]
 8005a48:	2b03      	cmp	r3, #3
 8005a4a:	d823      	bhi.n	8005a94 <HAL_FLASH_Program+0x84>
 8005a4c:	a201      	add	r2, pc, #4	; (adr r2, 8005a54 <HAL_FLASH_Program+0x44>)
 8005a4e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005a52:	bf00      	nop
 8005a54:	08005a65 	.word	0x08005a65
 8005a58:	08005a71 	.word	0x08005a71
 8005a5c:	08005a7d 	.word	0x08005a7d
 8005a60:	08005a89 	.word	0x08005a89
    {
      case FLASH_TYPEPROGRAM_BYTE :
      {
        /*Program byte (8-bit) at a specified address.*/
        FLASH_Program_Byte(Address, (uint8_t) Data);
 8005a64:	783b      	ldrb	r3, [r7, #0]
 8005a66:	4619      	mov	r1, r3
 8005a68:	68b8      	ldr	r0, [r7, #8]
 8005a6a:	f000 f9e9 	bl	8005e40 <FLASH_Program_Byte>
        break;
 8005a6e:	e012      	b.n	8005a96 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_HALFWORD :
      {
        /*Program halfword (16-bit) at a specified address.*/
        FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8005a70:	883b      	ldrh	r3, [r7, #0]
 8005a72:	4619      	mov	r1, r3
 8005a74:	68b8      	ldr	r0, [r7, #8]
 8005a76:	f000 f9bd 	bl	8005df4 <FLASH_Program_HalfWord>
        break;
 8005a7a:	e00c      	b.n	8005a96 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_WORD :
      {
        /*Program word (32-bit) at a specified address.*/
        FLASH_Program_Word(Address, (uint32_t) Data);
 8005a7c:	683b      	ldr	r3, [r7, #0]
 8005a7e:	4619      	mov	r1, r3
 8005a80:	68b8      	ldr	r0, [r7, #8]
 8005a82:	f000 f991 	bl	8005da8 <FLASH_Program_Word>
        break;
 8005a86:	e006      	b.n	8005a96 <HAL_FLASH_Program+0x86>
      }
      
      case FLASH_TYPEPROGRAM_DOUBLEWORD :
      {
        /*Program double word (64-bit) at a specified address.*/
        FLASH_Program_DoubleWord(Address, Data);
 8005a88:	e9d7 2300 	ldrd	r2, r3, [r7]
 8005a8c:	68b8      	ldr	r0, [r7, #8]
 8005a8e:	f000 f955 	bl	8005d3c <FLASH_Program_DoubleWord>
        break;
 8005a92:	e000      	b.n	8005a96 <HAL_FLASH_Program+0x86>
      }
      default :
        break;
 8005a94:	bf00      	nop
    }
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005a96:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005a9a:	f000 f90f 	bl	8005cbc <FLASH_WaitForLastOperation>
 8005a9e:	4603      	mov	r3, r0
 8005aa0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);
 8005aa2:	4b08      	ldr	r3, [pc, #32]	; (8005ac4 <HAL_FLASH_Program+0xb4>)
 8005aa4:	691b      	ldr	r3, [r3, #16]
 8005aa6:	4a07      	ldr	r2, [pc, #28]	; (8005ac4 <HAL_FLASH_Program+0xb4>)
 8005aa8:	f023 0301 	bic.w	r3, r3, #1
 8005aac:	6113      	str	r3, [r2, #16]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005aae:	4b04      	ldr	r3, [pc, #16]	; (8005ac0 <HAL_FLASH_Program+0xb0>)
 8005ab0:	2200      	movs	r2, #0
 8005ab2:	751a      	strb	r2, [r3, #20]

  return status;
 8005ab4:	7dfb      	ldrb	r3, [r7, #23]
}
 8005ab6:	4618      	mov	r0, r3
 8005ab8:	3718      	adds	r7, #24
 8005aba:	46bd      	mov	sp, r7
 8005abc:	bd80      	pop	{r7, pc}
 8005abe:	bf00      	nop
 8005ac0:	20001468 	.word	0x20001468
 8005ac4:	40023c00 	.word	0x40023c00

08005ac8 <HAL_FLASH_IRQHandler>:
/**
  * @brief This function handles FLASH interrupt request.
  * @retval None
  */
void HAL_FLASH_IRQHandler(void)
{
 8005ac8:	b580      	push	{r7, lr}
 8005aca:	b082      	sub	sp, #8
 8005acc:	af00      	add	r7, sp, #0
  uint32_t temp = 0;
 8005ace:	2300      	movs	r3, #0
 8005ad0:	607b      	str	r3, [r7, #4]
  
  /* If the program operation is completed, disable the PG Bit */
  FLASH->CR &= (~FLASH_CR_PG);
 8005ad2:	4b55      	ldr	r3, [pc, #340]	; (8005c28 <HAL_FLASH_IRQHandler+0x160>)
 8005ad4:	691b      	ldr	r3, [r3, #16]
 8005ad6:	4a54      	ldr	r2, [pc, #336]	; (8005c28 <HAL_FLASH_IRQHandler+0x160>)
 8005ad8:	f023 0301 	bic.w	r3, r3, #1
 8005adc:	6113      	str	r3, [r2, #16]

  /* If the erase operation is completed, disable the SER Bit */
  FLASH->CR &= (~FLASH_CR_SER);
 8005ade:	4b52      	ldr	r3, [pc, #328]	; (8005c28 <HAL_FLASH_IRQHandler+0x160>)
 8005ae0:	691b      	ldr	r3, [r3, #16]
 8005ae2:	4a51      	ldr	r2, [pc, #324]	; (8005c28 <HAL_FLASH_IRQHandler+0x160>)
 8005ae4:	f023 0302 	bic.w	r3, r3, #2
 8005ae8:	6113      	str	r3, [r2, #16]
  FLASH->CR &= SECTOR_MASK; 
 8005aea:	4b4f      	ldr	r3, [pc, #316]	; (8005c28 <HAL_FLASH_IRQHandler+0x160>)
 8005aec:	691b      	ldr	r3, [r3, #16]
 8005aee:	4a4e      	ldr	r2, [pc, #312]	; (8005c28 <HAL_FLASH_IRQHandler+0x160>)
 8005af0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8005af4:	6113      	str	r3, [r2, #16]

  /* if the erase operation is completed, disable the MER Bit */
  FLASH->CR &= (~FLASH_MER_BIT);
 8005af6:	4b4c      	ldr	r3, [pc, #304]	; (8005c28 <HAL_FLASH_IRQHandler+0x160>)
 8005af8:	691b      	ldr	r3, [r3, #16]
 8005afa:	4a4b      	ldr	r2, [pc, #300]	; (8005c28 <HAL_FLASH_IRQHandler+0x160>)
 8005afc:	f023 0304 	bic.w	r3, r3, #4
 8005b00:	6113      	str	r3, [r2, #16]

  /* Check FLASH End of Operation flag  */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005b02:	4b49      	ldr	r3, [pc, #292]	; (8005c28 <HAL_FLASH_IRQHandler+0x160>)
 8005b04:	68db      	ldr	r3, [r3, #12]
 8005b06:	f003 0301 	and.w	r3, r3, #1
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d049      	beq.n	8005ba2 <HAL_FLASH_IRQHandler+0xda>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005b0e:	4b46      	ldr	r3, [pc, #280]	; (8005c28 <HAL_FLASH_IRQHandler+0x160>)
 8005b10:	2201      	movs	r2, #1
 8005b12:	60da      	str	r2, [r3, #12]
    
    switch (pFlash.ProcedureOnGoing)
 8005b14:	4b45      	ldr	r3, [pc, #276]	; (8005c2c <HAL_FLASH_IRQHandler+0x164>)
 8005b16:	781b      	ldrb	r3, [r3, #0]
 8005b18:	b2db      	uxtb	r3, r3
 8005b1a:	2b03      	cmp	r3, #3
 8005b1c:	d037      	beq.n	8005b8e <HAL_FLASH_IRQHandler+0xc6>
 8005b1e:	2b03      	cmp	r3, #3
 8005b20:	dc3e      	bgt.n	8005ba0 <HAL_FLASH_IRQHandler+0xd8>
 8005b22:	2b01      	cmp	r3, #1
 8005b24:	d002      	beq.n	8005b2c <HAL_FLASH_IRQHandler+0x64>
 8005b26:	2b02      	cmp	r3, #2
 8005b28:	d02a      	beq.n	8005b80 <HAL_FLASH_IRQHandler+0xb8>
        /* Programming procedure is completed */
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
        break;
      }
      default :
        break;
 8005b2a:	e039      	b.n	8005ba0 <HAL_FLASH_IRQHandler+0xd8>
        pFlash.NbSectorsToErase--;
 8005b2c:	4b3f      	ldr	r3, [pc, #252]	; (8005c2c <HAL_FLASH_IRQHandler+0x164>)
 8005b2e:	685b      	ldr	r3, [r3, #4]
 8005b30:	3b01      	subs	r3, #1
 8005b32:	4a3e      	ldr	r2, [pc, #248]	; (8005c2c <HAL_FLASH_IRQHandler+0x164>)
 8005b34:	6053      	str	r3, [r2, #4]
        if(pFlash.NbSectorsToErase != 0)
 8005b36:	4b3d      	ldr	r3, [pc, #244]	; (8005c2c <HAL_FLASH_IRQHandler+0x164>)
 8005b38:	685b      	ldr	r3, [r3, #4]
 8005b3a:	2b00      	cmp	r3, #0
 8005b3c:	d013      	beq.n	8005b66 <HAL_FLASH_IRQHandler+0x9e>
          temp = pFlash.Sector;
 8005b3e:	4b3b      	ldr	r3, [pc, #236]	; (8005c2c <HAL_FLASH_IRQHandler+0x164>)
 8005b40:	68db      	ldr	r3, [r3, #12]
 8005b42:	607b      	str	r3, [r7, #4]
          HAL_FLASH_EndOfOperationCallback(temp);
 8005b44:	6878      	ldr	r0, [r7, #4]
 8005b46:	f000 f873 	bl	8005c30 <HAL_FLASH_EndOfOperationCallback>
          temp = ++pFlash.Sector;
 8005b4a:	4b38      	ldr	r3, [pc, #224]	; (8005c2c <HAL_FLASH_IRQHandler+0x164>)
 8005b4c:	68db      	ldr	r3, [r3, #12]
 8005b4e:	3301      	adds	r3, #1
 8005b50:	4a36      	ldr	r2, [pc, #216]	; (8005c2c <HAL_FLASH_IRQHandler+0x164>)
 8005b52:	60d3      	str	r3, [r2, #12]
 8005b54:	607b      	str	r3, [r7, #4]
          FLASH_Erase_Sector(temp, pFlash.VoltageForErase);
 8005b56:	4b35      	ldr	r3, [pc, #212]	; (8005c2c <HAL_FLASH_IRQHandler+0x164>)
 8005b58:	7a1b      	ldrb	r3, [r3, #8]
 8005b5a:	b2db      	uxtb	r3, r3
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	6878      	ldr	r0, [r7, #4]
 8005b60:	f000 fa6e 	bl	8006040 <FLASH_Erase_Sector>
        break;
 8005b64:	e01d      	b.n	8005ba2 <HAL_FLASH_IRQHandler+0xda>
          pFlash.Sector = temp = 0xFFFFFFFFU;
 8005b66:	f04f 33ff 	mov.w	r3, #4294967295
 8005b6a:	607b      	str	r3, [r7, #4]
 8005b6c:	4a2f      	ldr	r2, [pc, #188]	; (8005c2c <HAL_FLASH_IRQHandler+0x164>)
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	60d3      	str	r3, [r2, #12]
          HAL_FLASH_EndOfOperationCallback(temp);
 8005b72:	6878      	ldr	r0, [r7, #4]
 8005b74:	f000 f85c 	bl	8005c30 <HAL_FLASH_EndOfOperationCallback>
          pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8005b78:	4b2c      	ldr	r3, [pc, #176]	; (8005c2c <HAL_FLASH_IRQHandler+0x164>)
 8005b7a:	2200      	movs	r2, #0
 8005b7c:	701a      	strb	r2, [r3, #0]
        break;
 8005b7e:	e010      	b.n	8005ba2 <HAL_FLASH_IRQHandler+0xda>
        HAL_FLASH_EndOfOperationCallback(0);
 8005b80:	2000      	movs	r0, #0
 8005b82:	f000 f855 	bl	8005c30 <HAL_FLASH_EndOfOperationCallback>
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8005b86:	4b29      	ldr	r3, [pc, #164]	; (8005c2c <HAL_FLASH_IRQHandler+0x164>)
 8005b88:	2200      	movs	r2, #0
 8005b8a:	701a      	strb	r2, [r3, #0]
        break;
 8005b8c:	e009      	b.n	8005ba2 <HAL_FLASH_IRQHandler+0xda>
        HAL_FLASH_EndOfOperationCallback(pFlash.Address);
 8005b8e:	4b27      	ldr	r3, [pc, #156]	; (8005c2c <HAL_FLASH_IRQHandler+0x164>)
 8005b90:	691b      	ldr	r3, [r3, #16]
 8005b92:	4618      	mov	r0, r3
 8005b94:	f000 f84c 	bl	8005c30 <HAL_FLASH_EndOfOperationCallback>
        pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8005b98:	4b24      	ldr	r3, [pc, #144]	; (8005c2c <HAL_FLASH_IRQHandler+0x164>)
 8005b9a:	2200      	movs	r2, #0
 8005b9c:	701a      	strb	r2, [r3, #0]
        break;
 8005b9e:	e000      	b.n	8005ba2 <HAL_FLASH_IRQHandler+0xda>
        break;
 8005ba0:	bf00      	nop
    }
  }
  
  /* Check FLASH operation error flags */
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8005ba2:	4b21      	ldr	r3, [pc, #132]	; (8005c28 <HAL_FLASH_IRQHandler+0x160>)
 8005ba4:	68db      	ldr	r3, [r3, #12]
 8005ba6:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8005baa:	2b00      	cmp	r3, #0
 8005bac:	d023      	beq.n	8005bf6 <HAL_FLASH_IRQHandler+0x12e>
  {
    switch (pFlash.ProcedureOnGoing)
 8005bae:	4b1f      	ldr	r3, [pc, #124]	; (8005c2c <HAL_FLASH_IRQHandler+0x164>)
 8005bb0:	781b      	ldrb	r3, [r3, #0]
 8005bb2:	b2db      	uxtb	r3, r3
 8005bb4:	2b03      	cmp	r3, #3
 8005bb6:	d011      	beq.n	8005bdc <HAL_FLASH_IRQHandler+0x114>
 8005bb8:	2b03      	cmp	r3, #3
 8005bba:	dc13      	bgt.n	8005be4 <HAL_FLASH_IRQHandler+0x11c>
 8005bbc:	2b01      	cmp	r3, #1
 8005bbe:	d002      	beq.n	8005bc6 <HAL_FLASH_IRQHandler+0xfe>
 8005bc0:	2b02      	cmp	r3, #2
 8005bc2:	d008      	beq.n	8005bd6 <HAL_FLASH_IRQHandler+0x10e>
        /*return the faulty address*/
        temp = pFlash.Address;
        break;
      }
    default :
      break;
 8005bc4:	e00e      	b.n	8005be4 <HAL_FLASH_IRQHandler+0x11c>
        temp = pFlash.Sector;
 8005bc6:	4b19      	ldr	r3, [pc, #100]	; (8005c2c <HAL_FLASH_IRQHandler+0x164>)
 8005bc8:	68db      	ldr	r3, [r3, #12]
 8005bca:	607b      	str	r3, [r7, #4]
        pFlash.Sector = 0xFFFFFFFFU;
 8005bcc:	4b17      	ldr	r3, [pc, #92]	; (8005c2c <HAL_FLASH_IRQHandler+0x164>)
 8005bce:	f04f 32ff 	mov.w	r2, #4294967295
 8005bd2:	60da      	str	r2, [r3, #12]
        break;
 8005bd4:	e007      	b.n	8005be6 <HAL_FLASH_IRQHandler+0x11e>
        temp = 0;
 8005bd6:	2300      	movs	r3, #0
 8005bd8:	607b      	str	r3, [r7, #4]
        break;
 8005bda:	e004      	b.n	8005be6 <HAL_FLASH_IRQHandler+0x11e>
        temp = pFlash.Address;
 8005bdc:	4b13      	ldr	r3, [pc, #76]	; (8005c2c <HAL_FLASH_IRQHandler+0x164>)
 8005bde:	691b      	ldr	r3, [r3, #16]
 8005be0:	607b      	str	r3, [r7, #4]
        break;
 8005be2:	e000      	b.n	8005be6 <HAL_FLASH_IRQHandler+0x11e>
      break;
 8005be4:	bf00      	nop
    }
    /*Save the Error code*/
    FLASH_SetErrorCode();
 8005be6:	f000 f94f 	bl	8005e88 <FLASH_SetErrorCode>

    /* FLASH error interrupt user callback */
    HAL_FLASH_OperationErrorCallback(temp);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 f82a 	bl	8005c44 <HAL_FLASH_OperationErrorCallback>

    /*Stop the procedure ongoing */
    pFlash.ProcedureOnGoing = FLASH_PROC_NONE;
 8005bf0:	4b0e      	ldr	r3, [pc, #56]	; (8005c2c <HAL_FLASH_IRQHandler+0x164>)
 8005bf2:	2200      	movs	r2, #0
 8005bf4:	701a      	strb	r2, [r3, #0]
  }
  
  if(pFlash.ProcedureOnGoing == FLASH_PROC_NONE)
 8005bf6:	4b0d      	ldr	r3, [pc, #52]	; (8005c2c <HAL_FLASH_IRQHandler+0x164>)
 8005bf8:	781b      	ldrb	r3, [r3, #0]
 8005bfa:	b2db      	uxtb	r3, r3
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d10e      	bne.n	8005c1e <HAL_FLASH_IRQHandler+0x156>
  {
    /* Disable End of FLASH Operation interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_EOP);
 8005c00:	4b09      	ldr	r3, [pc, #36]	; (8005c28 <HAL_FLASH_IRQHandler+0x160>)
 8005c02:	691b      	ldr	r3, [r3, #16]
 8005c04:	4a08      	ldr	r2, [pc, #32]	; (8005c28 <HAL_FLASH_IRQHandler+0x160>)
 8005c06:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8005c0a:	6113      	str	r3, [r2, #16]

    /* Disable Error source interrupt */
    __HAL_FLASH_DISABLE_IT(FLASH_IT_ERR);
 8005c0c:	4b06      	ldr	r3, [pc, #24]	; (8005c28 <HAL_FLASH_IRQHandler+0x160>)
 8005c0e:	691b      	ldr	r3, [r3, #16]
 8005c10:	4a05      	ldr	r2, [pc, #20]	; (8005c28 <HAL_FLASH_IRQHandler+0x160>)
 8005c12:	f023 7300 	bic.w	r3, r3, #33554432	; 0x2000000
 8005c16:	6113      	str	r3, [r2, #16]

    /* Process Unlocked */
    __HAL_UNLOCK(&pFlash);
 8005c18:	4b04      	ldr	r3, [pc, #16]	; (8005c2c <HAL_FLASH_IRQHandler+0x164>)
 8005c1a:	2200      	movs	r2, #0
 8005c1c:	751a      	strb	r2, [r3, #20]
  }
  
}
 8005c1e:	bf00      	nop
 8005c20:	3708      	adds	r7, #8
 8005c22:	46bd      	mov	sp, r7
 8005c24:	bd80      	pop	{r7, pc}
 8005c26:	bf00      	nop
 8005c28:	40023c00 	.word	0x40023c00
 8005c2c:	20001468 	.word	0x20001468

08005c30 <HAL_FLASH_EndOfOperationCallback>:
  *                 - Program      : Address which was selected for data program
  *                 - Mass Erase   : No return value expected
  * @retval None
  */
__weak void HAL_FLASH_EndOfOperationCallback(uint32_t ReturnValue)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_FLASH_EndOfOperationCallback could be implemented in the user file
  */ 
}
 8005c38:	bf00      	nop
 8005c3a:	370c      	adds	r7, #12
 8005c3c:	46bd      	mov	sp, r7
 8005c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c42:	4770      	bx	lr

08005c44 <HAL_FLASH_OperationErrorCallback>:
  *                 - Program      : Address which was selected for data program
  *                 - Mass Erase   : No return value expected
  * @retval None
  */
__weak void HAL_FLASH_OperationErrorCallback(uint32_t ReturnValue)
{
 8005c44:	b480      	push	{r7}
 8005c46:	b083      	sub	sp, #12
 8005c48:	af00      	add	r7, sp, #0
 8005c4a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(ReturnValue);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_FLASH_OperationErrorCallback could be implemented in the user file
   */ 
}
 8005c4c:	bf00      	nop
 8005c4e:	370c      	adds	r7, #12
 8005c50:	46bd      	mov	sp, r7
 8005c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c56:	4770      	bx	lr

08005c58 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8005c58:	b480      	push	{r7}
 8005c5a:	b083      	sub	sp, #12
 8005c5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8005c5e:	2300      	movs	r3, #0
 8005c60:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005c62:	4b0b      	ldr	r3, [pc, #44]	; (8005c90 <HAL_FLASH_Unlock+0x38>)
 8005c64:	691b      	ldr	r3, [r3, #16]
 8005c66:	2b00      	cmp	r3, #0
 8005c68:	da0b      	bge.n	8005c82 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8005c6a:	4b09      	ldr	r3, [pc, #36]	; (8005c90 <HAL_FLASH_Unlock+0x38>)
 8005c6c:	4a09      	ldr	r2, [pc, #36]	; (8005c94 <HAL_FLASH_Unlock+0x3c>)
 8005c6e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8005c70:	4b07      	ldr	r3, [pc, #28]	; (8005c90 <HAL_FLASH_Unlock+0x38>)
 8005c72:	4a09      	ldr	r2, [pc, #36]	; (8005c98 <HAL_FLASH_Unlock+0x40>)
 8005c74:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8005c76:	4b06      	ldr	r3, [pc, #24]	; (8005c90 <HAL_FLASH_Unlock+0x38>)
 8005c78:	691b      	ldr	r3, [r3, #16]
 8005c7a:	2b00      	cmp	r3, #0
 8005c7c:	da01      	bge.n	8005c82 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8005c7e:	2301      	movs	r3, #1
 8005c80:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8005c82:	79fb      	ldrb	r3, [r7, #7]
}
 8005c84:	4618      	mov	r0, r3
 8005c86:	370c      	adds	r7, #12
 8005c88:	46bd      	mov	sp, r7
 8005c8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8e:	4770      	bx	lr
 8005c90:	40023c00 	.word	0x40023c00
 8005c94:	45670123 	.word	0x45670123
 8005c98:	cdef89ab 	.word	0xcdef89ab

08005c9c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8005c9c:	b480      	push	{r7}
 8005c9e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8005ca0:	4b05      	ldr	r3, [pc, #20]	; (8005cb8 <HAL_FLASH_Lock+0x1c>)
 8005ca2:	691b      	ldr	r3, [r3, #16]
 8005ca4:	4a04      	ldr	r2, [pc, #16]	; (8005cb8 <HAL_FLASH_Lock+0x1c>)
 8005ca6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8005caa:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8005cac:	2300      	movs	r3, #0
}
 8005cae:	4618      	mov	r0, r3
 8005cb0:	46bd      	mov	sp, r7
 8005cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cb6:	4770      	bx	lr
 8005cb8:	40023c00 	.word	0x40023c00

08005cbc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8005cbc:	b580      	push	{r7, lr}
 8005cbe:	b084      	sub	sp, #16
 8005cc0:	af00      	add	r7, sp, #0
 8005cc2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8005cc8:	4b1a      	ldr	r3, [pc, #104]	; (8005d34 <FLASH_WaitForLastOperation+0x78>)
 8005cca:	2200      	movs	r2, #0
 8005ccc:	619a      	str	r2, [r3, #24]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8005cce:	f7fd fa65 	bl	800319c <HAL_GetTick>
 8005cd2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005cd4:	e010      	b.n	8005cf8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005cdc:	d00c      	beq.n	8005cf8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0)||((HAL_GetTick() - tickstart ) > Timeout))
 8005cde:	687b      	ldr	r3, [r7, #4]
 8005ce0:	2b00      	cmp	r3, #0
 8005ce2:	d007      	beq.n	8005cf4 <FLASH_WaitForLastOperation+0x38>
 8005ce4:	f7fd fa5a 	bl	800319c <HAL_GetTick>
 8005ce8:	4602      	mov	r2, r0
 8005cea:	68fb      	ldr	r3, [r7, #12]
 8005cec:	1ad3      	subs	r3, r2, r3
 8005cee:	687a      	ldr	r2, [r7, #4]
 8005cf0:	429a      	cmp	r2, r3
 8005cf2:	d201      	bcs.n	8005cf8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8005cf4:	2303      	movs	r3, #3
 8005cf6:	e019      	b.n	8005d2c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8005cf8:	4b0f      	ldr	r3, [pc, #60]	; (8005d38 <FLASH_WaitForLastOperation+0x7c>)
 8005cfa:	68db      	ldr	r3, [r3, #12]
 8005cfc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d1e8      	bne.n	8005cd6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ALL_ERRORS) != RESET)
 8005d04:	4b0c      	ldr	r3, [pc, #48]	; (8005d38 <FLASH_WaitForLastOperation+0x7c>)
 8005d06:	68db      	ldr	r3, [r3, #12]
 8005d08:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8005d0c:	2b00      	cmp	r3, #0
 8005d0e:	d003      	beq.n	8005d18 <FLASH_WaitForLastOperation+0x5c>
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8005d10:	f000 f8ba 	bl	8005e88 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8005d14:	2301      	movs	r3, #1
 8005d16:	e009      	b.n	8005d2c <FLASH_WaitForLastOperation+0x70>
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8005d18:	4b07      	ldr	r3, [pc, #28]	; (8005d38 <FLASH_WaitForLastOperation+0x7c>)
 8005d1a:	68db      	ldr	r3, [r3, #12]
 8005d1c:	f003 0301 	and.w	r3, r3, #1
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d002      	beq.n	8005d2a <FLASH_WaitForLastOperation+0x6e>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8005d24:	4b04      	ldr	r3, [pc, #16]	; (8005d38 <FLASH_WaitForLastOperation+0x7c>)
 8005d26:	2201      	movs	r2, #1
 8005d28:	60da      	str	r2, [r3, #12]
  }

  /* If there is an error flag set */
  return HAL_OK;
 8005d2a:	2300      	movs	r3, #0
  
}  
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	3710      	adds	r7, #16
 8005d30:	46bd      	mov	sp, r7
 8005d32:	bd80      	pop	{r7, pc}
 8005d34:	20001468 	.word	0x20001468
 8005d38:	40023c00 	.word	0x40023c00

08005d3c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8005d3c:	b480      	push	{r7}
 8005d3e:	b085      	sub	sp, #20
 8005d40:	af00      	add	r7, sp, #0
 8005d42:	60f8      	str	r0, [r7, #12]
 8005d44:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8005d48:	4b16      	ldr	r3, [pc, #88]	; (8005da4 <FLASH_Program_DoubleWord+0x68>)
 8005d4a:	691b      	ldr	r3, [r3, #16]
 8005d4c:	4a15      	ldr	r2, [pc, #84]	; (8005da4 <FLASH_Program_DoubleWord+0x68>)
 8005d4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005d52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8005d54:	4b13      	ldr	r3, [pc, #76]	; (8005da4 <FLASH_Program_DoubleWord+0x68>)
 8005d56:	691b      	ldr	r3, [r3, #16]
 8005d58:	4a12      	ldr	r2, [pc, #72]	; (8005da4 <FLASH_Program_DoubleWord+0x68>)
 8005d5a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8005d5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005d60:	4b10      	ldr	r3, [pc, #64]	; (8005da4 <FLASH_Program_DoubleWord+0x68>)
 8005d62:	691b      	ldr	r3, [r3, #16]
 8005d64:	4a0f      	ldr	r2, [pc, #60]	; (8005da4 <FLASH_Program_DoubleWord+0x68>)
 8005d66:	f043 0301 	orr.w	r3, r3, #1
 8005d6a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	683a      	ldr	r2, [r7, #0]
 8005d70:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8005d72:	f3bf 8f6f 	isb	sy
}
 8005d76:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8005d78:	e9d7 0100 	ldrd	r0, r1, [r7]
 8005d7c:	f04f 0200 	mov.w	r2, #0
 8005d80:	f04f 0300 	mov.w	r3, #0
 8005d84:	000a      	movs	r2, r1
 8005d86:	2300      	movs	r3, #0
 8005d88:	68f9      	ldr	r1, [r7, #12]
 8005d8a:	3104      	adds	r1, #4
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	600b      	str	r3, [r1, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005d90:	f3bf 8f4f 	dsb	sy
}
 8005d94:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8005d96:	bf00      	nop
 8005d98:	3714      	adds	r7, #20
 8005d9a:	46bd      	mov	sp, r7
 8005d9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005da0:	4770      	bx	lr
 8005da2:	bf00      	nop
 8005da4:	40023c00 	.word	0x40023c00

08005da8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8005da8:	b480      	push	{r7}
 8005daa:	b083      	sub	sp, #12
 8005dac:	af00      	add	r7, sp, #0
 8005dae:	6078      	str	r0, [r7, #4]
 8005db0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8005db2:	4b0f      	ldr	r3, [pc, #60]	; (8005df0 <FLASH_Program_Word+0x48>)
 8005db4:	691b      	ldr	r3, [r3, #16]
 8005db6:	4a0e      	ldr	r2, [pc, #56]	; (8005df0 <FLASH_Program_Word+0x48>)
 8005db8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005dbc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8005dbe:	4b0c      	ldr	r3, [pc, #48]	; (8005df0 <FLASH_Program_Word+0x48>)
 8005dc0:	691b      	ldr	r3, [r3, #16]
 8005dc2:	4a0b      	ldr	r2, [pc, #44]	; (8005df0 <FLASH_Program_Word+0x48>)
 8005dc4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8005dc8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005dca:	4b09      	ldr	r3, [pc, #36]	; (8005df0 <FLASH_Program_Word+0x48>)
 8005dcc:	691b      	ldr	r3, [r3, #16]
 8005dce:	4a08      	ldr	r2, [pc, #32]	; (8005df0 <FLASH_Program_Word+0x48>)
 8005dd0:	f043 0301 	orr.w	r3, r3, #1
 8005dd4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	683a      	ldr	r2, [r7, #0]
 8005dda:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005ddc:	f3bf 8f4f 	dsb	sy
}
 8005de0:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8005de2:	bf00      	nop
 8005de4:	370c      	adds	r7, #12
 8005de6:	46bd      	mov	sp, r7
 8005de8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005dec:	4770      	bx	lr
 8005dee:	bf00      	nop
 8005df0:	40023c00 	.word	0x40023c00

08005df4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8005df4:	b480      	push	{r7}
 8005df6:	b083      	sub	sp, #12
 8005df8:	af00      	add	r7, sp, #0
 8005dfa:	6078      	str	r0, [r7, #4]
 8005dfc:	460b      	mov	r3, r1
 8005dfe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8005e00:	4b0e      	ldr	r3, [pc, #56]	; (8005e3c <FLASH_Program_HalfWord+0x48>)
 8005e02:	691b      	ldr	r3, [r3, #16]
 8005e04:	4a0d      	ldr	r2, [pc, #52]	; (8005e3c <FLASH_Program_HalfWord+0x48>)
 8005e06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e0a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8005e0c:	4b0b      	ldr	r3, [pc, #44]	; (8005e3c <FLASH_Program_HalfWord+0x48>)
 8005e0e:	691b      	ldr	r3, [r3, #16]
 8005e10:	4a0a      	ldr	r2, [pc, #40]	; (8005e3c <FLASH_Program_HalfWord+0x48>)
 8005e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005e16:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005e18:	4b08      	ldr	r3, [pc, #32]	; (8005e3c <FLASH_Program_HalfWord+0x48>)
 8005e1a:	691b      	ldr	r3, [r3, #16]
 8005e1c:	4a07      	ldr	r2, [pc, #28]	; (8005e3c <FLASH_Program_HalfWord+0x48>)
 8005e1e:	f043 0301 	orr.w	r3, r3, #1
 8005e22:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	887a      	ldrh	r2, [r7, #2]
 8005e28:	801a      	strh	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005e2a:	f3bf 8f4f 	dsb	sy
}
 8005e2e:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
  
}
 8005e30:	bf00      	nop
 8005e32:	370c      	adds	r7, #12
 8005e34:	46bd      	mov	sp, r7
 8005e36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e3a:	4770      	bx	lr
 8005e3c:	40023c00 	.word	0x40023c00

08005e40 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8005e40:	b480      	push	{r7}
 8005e42:	b083      	sub	sp, #12
 8005e44:	af00      	add	r7, sp, #0
 8005e46:	6078      	str	r0, [r7, #4]
 8005e48:	460b      	mov	r3, r1
 8005e4a:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  FLASH->CR &= CR_PSIZE_MASK;
 8005e4c:	4b0d      	ldr	r3, [pc, #52]	; (8005e84 <FLASH_Program_Byte+0x44>)
 8005e4e:	691b      	ldr	r3, [r3, #16]
 8005e50:	4a0c      	ldr	r2, [pc, #48]	; (8005e84 <FLASH_Program_Byte+0x44>)
 8005e52:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005e56:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8005e58:	4b0a      	ldr	r3, [pc, #40]	; (8005e84 <FLASH_Program_Byte+0x44>)
 8005e5a:	4a0a      	ldr	r2, [pc, #40]	; (8005e84 <FLASH_Program_Byte+0x44>)
 8005e5c:	691b      	ldr	r3, [r3, #16]
 8005e5e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8005e60:	4b08      	ldr	r3, [pc, #32]	; (8005e84 <FLASH_Program_Byte+0x44>)
 8005e62:	691b      	ldr	r3, [r3, #16]
 8005e64:	4a07      	ldr	r2, [pc, #28]	; (8005e84 <FLASH_Program_Byte+0x44>)
 8005e66:	f043 0301 	orr.w	r3, r3, #1
 8005e6a:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8005e6c:	687b      	ldr	r3, [r7, #4]
 8005e6e:	78fa      	ldrb	r2, [r7, #3]
 8005e70:	701a      	strb	r2, [r3, #0]
  __ASM volatile ("dsb 0xF":::"memory");
 8005e72:	f3bf 8f4f 	dsb	sy
}
 8005e76:	bf00      	nop

  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 8005e78:	bf00      	nop
 8005e7a:	370c      	adds	r7, #12
 8005e7c:	46bd      	mov	sp, r7
 8005e7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005e82:	4770      	bx	lr
 8005e84:	40023c00 	.word	0x40023c00

08005e88 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 8005e88:	b480      	push	{r7}
 8005e8a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8005e8c:	4b21      	ldr	r3, [pc, #132]	; (8005f14 <FLASH_SetErrorCode+0x8c>)
 8005e8e:	68db      	ldr	r3, [r3, #12]
 8005e90:	f003 0302 	and.w	r3, r3, #2
 8005e94:	2b00      	cmp	r3, #0
 8005e96:	d005      	beq.n	8005ea4 <FLASH_SetErrorCode+0x1c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8005e98:	4b1f      	ldr	r3, [pc, #124]	; (8005f18 <FLASH_SetErrorCode+0x90>)
 8005e9a:	699b      	ldr	r3, [r3, #24]
 8005e9c:	f043 0320 	orr.w	r3, r3, #32
 8005ea0:	4a1d      	ldr	r2, [pc, #116]	; (8005f18 <FLASH_SetErrorCode+0x90>)
 8005ea2:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8005ea4:	4b1b      	ldr	r3, [pc, #108]	; (8005f14 <FLASH_SetErrorCode+0x8c>)
 8005ea6:	68db      	ldr	r3, [r3, #12]
 8005ea8:	f003 0310 	and.w	r3, r3, #16
 8005eac:	2b00      	cmp	r3, #0
 8005eae:	d005      	beq.n	8005ebc <FLASH_SetErrorCode+0x34>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8005eb0:	4b19      	ldr	r3, [pc, #100]	; (8005f18 <FLASH_SetErrorCode+0x90>)
 8005eb2:	699b      	ldr	r3, [r3, #24]
 8005eb4:	f043 0310 	orr.w	r3, r3, #16
 8005eb8:	4a17      	ldr	r2, [pc, #92]	; (8005f18 <FLASH_SetErrorCode+0x90>)
 8005eba:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8005ebc:	4b15      	ldr	r3, [pc, #84]	; (8005f14 <FLASH_SetErrorCode+0x8c>)
 8005ebe:	68db      	ldr	r3, [r3, #12]
 8005ec0:	f003 0320 	and.w	r3, r3, #32
 8005ec4:	2b00      	cmp	r3, #0
 8005ec6:	d005      	beq.n	8005ed4 <FLASH_SetErrorCode+0x4c>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8005ec8:	4b13      	ldr	r3, [pc, #76]	; (8005f18 <FLASH_SetErrorCode+0x90>)
 8005eca:	699b      	ldr	r3, [r3, #24]
 8005ecc:	f043 0308 	orr.w	r3, r3, #8
 8005ed0:	4a11      	ldr	r2, [pc, #68]	; (8005f18 <FLASH_SetErrorCode+0x90>)
 8005ed2:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8005ed4:	4b0f      	ldr	r3, [pc, #60]	; (8005f14 <FLASH_SetErrorCode+0x8c>)
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d005      	beq.n	8005eec <FLASH_SetErrorCode+0x64>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8005ee0:	4b0d      	ldr	r3, [pc, #52]	; (8005f18 <FLASH_SetErrorCode+0x90>)
 8005ee2:	699b      	ldr	r3, [r3, #24]
 8005ee4:	f043 0304 	orr.w	r3, r3, #4
 8005ee8:	4a0b      	ldr	r2, [pc, #44]	; (8005f18 <FLASH_SetErrorCode+0x90>)
 8005eea:	6193      	str	r3, [r2, #24]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_ERSERR) != RESET)
 8005eec:	4b09      	ldr	r3, [pc, #36]	; (8005f14 <FLASH_SetErrorCode+0x8c>)
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	d005      	beq.n	8005f04 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_ERS;
 8005ef8:	4b07      	ldr	r3, [pc, #28]	; (8005f18 <FLASH_SetErrorCode+0x90>)
 8005efa:	699b      	ldr	r3, [r3, #24]
 8005efc:	f043 0302 	orr.w	r3, r3, #2
 8005f00:	4a05      	ldr	r2, [pc, #20]	; (8005f18 <FLASH_SetErrorCode+0x90>)
 8005f02:	6193      	str	r3, [r2, #24]
   pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
  }  
#endif /* FLASH_OPTCR2_PCROP */
  
  /* Clear error programming flags */
  __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_ALL_ERRORS);
 8005f04:	4b03      	ldr	r3, [pc, #12]	; (8005f14 <FLASH_SetErrorCode+0x8c>)
 8005f06:	22f2      	movs	r2, #242	; 0xf2
 8005f08:	60da      	str	r2, [r3, #12]
}
 8005f0a:	bf00      	nop
 8005f0c:	46bd      	mov	sp, r7
 8005f0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f12:	4770      	bx	lr
 8005f14:	40023c00 	.word	0x40023c00
 8005f18:	20001468 	.word	0x20001468

08005f1c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFF means that all the sectors have been correctly erased)
  * 
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8005f1c:	b580      	push	{r7, lr}
 8005f1e:	b084      	sub	sp, #16
 8005f20:	af00      	add	r7, sp, #0
 8005f22:	6078      	str	r0, [r7, #4]
 8005f24:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8005f26:	2301      	movs	r3, #1
 8005f28:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0;
 8005f2a:	2300      	movs	r3, #0
 8005f2c:	60bb      	str	r3, [r7, #8]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8005f2e:	4b2f      	ldr	r3, [pc, #188]	; (8005fec <HAL_FLASHEx_Erase+0xd0>)
 8005f30:	7d1b      	ldrb	r3, [r3, #20]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d101      	bne.n	8005f3a <HAL_FLASHEx_Erase+0x1e>
 8005f36:	2302      	movs	r3, #2
 8005f38:	e053      	b.n	8005fe2 <HAL_FLASHEx_Erase+0xc6>
 8005f3a:	4b2c      	ldr	r3, [pc, #176]	; (8005fec <HAL_FLASHEx_Erase+0xd0>)
 8005f3c:	2201      	movs	r2, #1
 8005f3e:	751a      	strb	r2, [r3, #20]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005f40:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005f44:	f7ff feba 	bl	8005cbc <FLASH_WaitForLastOperation>
 8005f48:	4603      	mov	r3, r0
 8005f4a:	73fb      	strb	r3, [r7, #15]

  if(status == HAL_OK)
 8005f4c:	7bfb      	ldrb	r3, [r7, #15]
 8005f4e:	2b00      	cmp	r3, #0
 8005f50:	d143      	bne.n	8005fda <HAL_FLASHEx_Erase+0xbe>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8005f52:	683b      	ldr	r3, [r7, #0]
 8005f54:	f04f 32ff 	mov.w	r2, #4294967295
 8005f58:	601a      	str	r2, [r3, #0]
    
    if(pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	681b      	ldr	r3, [r3, #0]
 8005f5e:	2b01      	cmp	r3, #1
 8005f60:	d112      	bne.n	8005f88 <HAL_FLASHEx_Erase+0x6c>
    {
      /*Mass erase to be done*/
#if defined (FLASH_OPTCR_nDBANK)      
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
#else
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange);      
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	68db      	ldr	r3, [r3, #12]
 8005f66:	b2db      	uxtb	r3, r3
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f000 f843 	bl	8005ff4 <FLASH_MassErase>
#endif /* FLASH_OPTCR_nDBANK */
                      
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005f6e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005f72:	f7ff fea3 	bl	8005cbc <FLASH_WaitForLastOperation>
 8005f76:	4603      	mov	r3, r0
 8005f78:	73fb      	strb	r3, [r7, #15]
      
      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8005f7a:	4b1d      	ldr	r3, [pc, #116]	; (8005ff0 <HAL_FLASHEx_Erase+0xd4>)
 8005f7c:	691b      	ldr	r3, [r3, #16]
 8005f7e:	4a1c      	ldr	r2, [pc, #112]	; (8005ff0 <HAL_FLASHEx_Erase+0xd4>)
 8005f80:	f023 0304 	bic.w	r3, r3, #4
 8005f84:	6113      	str	r3, [r2, #16]
 8005f86:	e028      	b.n	8005fda <HAL_FLASHEx_Erase+0xbe>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	685b      	ldr	r3, [r3, #4]
 8005f8c:	60bb      	str	r3, [r7, #8]
 8005f8e:	e01c      	b.n	8005fca <HAL_FLASHEx_Erase+0xae>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	68db      	ldr	r3, [r3, #12]
 8005f94:	b2db      	uxtb	r3, r3
 8005f96:	4619      	mov	r1, r3
 8005f98:	68b8      	ldr	r0, [r7, #8]
 8005f9a:	f000 f851 	bl	8006040 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8005f9e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8005fa2:	f7ff fe8b 	bl	8005cbc <FLASH_WaitForLastOperation>
 8005fa6:	4603      	mov	r3, r0
 8005fa8:	73fb      	strb	r3, [r7, #15]
        
        /* If the erase operation is completed, disable the SER Bit and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB)); 
 8005faa:	4b11      	ldr	r3, [pc, #68]	; (8005ff0 <HAL_FLASHEx_Erase+0xd4>)
 8005fac:	691b      	ldr	r3, [r3, #16]
 8005fae:	4a10      	ldr	r2, [pc, #64]	; (8005ff0 <HAL_FLASHEx_Erase+0xd4>)
 8005fb0:	f023 037a 	bic.w	r3, r3, #122	; 0x7a
 8005fb4:	6113      	str	r3, [r2, #16]

        if(status != HAL_OK) 
 8005fb6:	7bfb      	ldrb	r3, [r7, #15]
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d003      	beq.n	8005fc4 <HAL_FLASHEx_Erase+0xa8>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8005fbc:	683b      	ldr	r3, [r7, #0]
 8005fbe:	68ba      	ldr	r2, [r7, #8]
 8005fc0:	601a      	str	r2, [r3, #0]
          break;
 8005fc2:	e00a      	b.n	8005fda <HAL_FLASHEx_Erase+0xbe>
      for(index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8005fc4:	68bb      	ldr	r3, [r7, #8]
 8005fc6:	3301      	adds	r3, #1
 8005fc8:	60bb      	str	r3, [r7, #8]
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	689a      	ldr	r2, [r3, #8]
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	685b      	ldr	r3, [r3, #4]
 8005fd2:	4413      	add	r3, r2
 8005fd4:	68ba      	ldr	r2, [r7, #8]
 8005fd6:	429a      	cmp	r2, r3
 8005fd8:	d3da      	bcc.n	8005f90 <HAL_FLASHEx_Erase+0x74>
      }
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8005fda:	4b04      	ldr	r3, [pc, #16]	; (8005fec <HAL_FLASHEx_Erase+0xd0>)
 8005fdc:	2200      	movs	r2, #0
 8005fde:	751a      	strb	r2, [r3, #20]

  return status;
 8005fe0:	7bfb      	ldrb	r3, [r7, #15]
}
 8005fe2:	4618      	mov	r0, r3
 8005fe4:	3710      	adds	r7, #16
 8005fe6:	46bd      	mov	sp, r7
 8005fe8:	bd80      	pop	{r7, pc}
 8005fea:	bf00      	nop
 8005fec:	20001468 	.word	0x20001468
 8005ff0:	40023c00 	.word	0x40023c00

08005ff4 <FLASH_MassErase>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval HAL Status
  */
static void FLASH_MassErase(uint8_t VoltageRange)
{
 8005ff4:	b480      	push	{r7}
 8005ff6:	b083      	sub	sp, #12
 8005ff8:	af00      	add	r7, sp, #0
 8005ffa:	4603      	mov	r3, r0
 8005ffc:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  /* if the previous operation is completed, proceed to erase all sectors */
  FLASH->CR &= CR_PSIZE_MASK;
 8005ffe:	4b0f      	ldr	r3, [pc, #60]	; (800603c <FLASH_MassErase+0x48>)
 8006000:	691b      	ldr	r3, [r3, #16]
 8006002:	4a0e      	ldr	r2, [pc, #56]	; (800603c <FLASH_MassErase+0x48>)
 8006004:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006008:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800600a:	4b0c      	ldr	r3, [pc, #48]	; (800603c <FLASH_MassErase+0x48>)
 800600c:	691b      	ldr	r3, [r3, #16]
 800600e:	4a0b      	ldr	r2, [pc, #44]	; (800603c <FLASH_MassErase+0x48>)
 8006010:	f043 0304 	orr.w	r3, r3, #4
 8006014:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange <<8);
 8006016:	4b09      	ldr	r3, [pc, #36]	; (800603c <FLASH_MassErase+0x48>)
 8006018:	691a      	ldr	r2, [r3, #16]
 800601a:	79fb      	ldrb	r3, [r7, #7]
 800601c:	021b      	lsls	r3, r3, #8
 800601e:	4313      	orrs	r3, r2
 8006020:	4a06      	ldr	r2, [pc, #24]	; (800603c <FLASH_MassErase+0x48>)
 8006022:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006026:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 8006028:	f3bf 8f4f 	dsb	sy
}
 800602c:	bf00      	nop
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 800602e:	bf00      	nop
 8006030:	370c      	adds	r7, #12
 8006032:	46bd      	mov	sp, r7
 8006034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006038:	4770      	bx	lr
 800603a:	bf00      	nop
 800603c:	40023c00 	.word	0x40023c00

08006040 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  * 
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8006040:	b480      	push	{r7}
 8006042:	b085      	sub	sp, #20
 8006044:	af00      	add	r7, sp, #0
 8006046:	6078      	str	r0, [r7, #4]
 8006048:	460b      	mov	r3, r1
 800604a:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0;
 800604c:	2300      	movs	r3, #0
 800604e:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  
  if(VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8006050:	78fb      	ldrb	r3, [r7, #3]
 8006052:	2b00      	cmp	r3, #0
 8006054:	d102      	bne.n	800605c <FLASH_Erase_Sector+0x1c>
  {
     tmp_psize = FLASH_PSIZE_BYTE;
 8006056:	2300      	movs	r3, #0
 8006058:	60fb      	str	r3, [r7, #12]
 800605a:	e010      	b.n	800607e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_2)
 800605c:	78fb      	ldrb	r3, [r7, #3]
 800605e:	2b01      	cmp	r3, #1
 8006060:	d103      	bne.n	800606a <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8006062:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006066:	60fb      	str	r3, [r7, #12]
 8006068:	e009      	b.n	800607e <FLASH_Erase_Sector+0x3e>
  }
  else if(VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800606a:	78fb      	ldrb	r3, [r7, #3]
 800606c:	2b02      	cmp	r3, #2
 800606e:	d103      	bne.n	8006078 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8006070:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006074:	60fb      	str	r3, [r7, #12]
 8006076:	e002      	b.n	800607e <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8006078:	f44f 7340 	mov.w	r3, #768	; 0x300
 800607c:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  FLASH->CR &= CR_PSIZE_MASK;
 800607e:	4b15      	ldr	r3, [pc, #84]	; (80060d4 <FLASH_Erase_Sector+0x94>)
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	4a14      	ldr	r2, [pc, #80]	; (80060d4 <FLASH_Erase_Sector+0x94>)
 8006084:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006088:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800608a:	4b12      	ldr	r3, [pc, #72]	; (80060d4 <FLASH_Erase_Sector+0x94>)
 800608c:	691a      	ldr	r2, [r3, #16]
 800608e:	4911      	ldr	r1, [pc, #68]	; (80060d4 <FLASH_Erase_Sector+0x94>)
 8006090:	68fb      	ldr	r3, [r7, #12]
 8006092:	4313      	orrs	r3, r2
 8006094:	610b      	str	r3, [r1, #16]
  FLASH->CR &= SECTOR_MASK;
 8006096:	4b0f      	ldr	r3, [pc, #60]	; (80060d4 <FLASH_Erase_Sector+0x94>)
 8006098:	691b      	ldr	r3, [r3, #16]
 800609a:	4a0e      	ldr	r2, [pc, #56]	; (80060d4 <FLASH_Erase_Sector+0x94>)
 800609c:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80060a0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80060a2:	4b0c      	ldr	r3, [pc, #48]	; (80060d4 <FLASH_Erase_Sector+0x94>)
 80060a4:	691a      	ldr	r2, [r3, #16]
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	00db      	lsls	r3, r3, #3
 80060aa:	4313      	orrs	r3, r2
 80060ac:	4a09      	ldr	r2, [pc, #36]	; (80060d4 <FLASH_Erase_Sector+0x94>)
 80060ae:	f043 0302 	orr.w	r3, r3, #2
 80060b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80060b4:	4b07      	ldr	r3, [pc, #28]	; (80060d4 <FLASH_Erase_Sector+0x94>)
 80060b6:	691b      	ldr	r3, [r3, #16]
 80060b8:	4a06      	ldr	r2, [pc, #24]	; (80060d4 <FLASH_Erase_Sector+0x94>)
 80060ba:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80060be:	6113      	str	r3, [r2, #16]
  __ASM volatile ("dsb 0xF":::"memory");
 80060c0:	f3bf 8f4f 	dsb	sy
}
 80060c4:	bf00      	nop
  
  /* Data synchronous Barrier (DSB) Just after the write operation
     This will force the CPU to respect the sequence of instruction (no optimization).*/
  __DSB();
}
 80060c6:	bf00      	nop
 80060c8:	3714      	adds	r7, #20
 80060ca:	46bd      	mov	sp, r7
 80060cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060d0:	4770      	bx	lr
 80060d2:	bf00      	nop
 80060d4:	40023c00 	.word	0x40023c00

080060d8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80060d8:	b480      	push	{r7}
 80060da:	b089      	sub	sp, #36	; 0x24
 80060dc:	af00      	add	r7, sp, #0
 80060de:	6078      	str	r0, [r7, #4]
 80060e0:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00;
 80060e2:	2300      	movs	r3, #0
 80060e4:	61fb      	str	r3, [r7, #28]
  uint32_t ioposition = 0x00;
 80060e6:	2300      	movs	r3, #0
 80060e8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00;
 80060ea:	2300      	movs	r3, #0
 80060ec:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00;
 80060ee:	2300      	movs	r3, #0
 80060f0:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for (position = 0; position < GPIO_NUMBER; position++)
 80060f2:	2300      	movs	r3, #0
 80060f4:	61fb      	str	r3, [r7, #28]
 80060f6:	e175      	b.n	80063e4 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = ((uint32_t)0x01) << position;
 80060f8:	2201      	movs	r2, #1
 80060fa:	69fb      	ldr	r3, [r7, #28]
 80060fc:	fa02 f303 	lsl.w	r3, r2, r3
 8006100:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006102:	683b      	ldr	r3, [r7, #0]
 8006104:	681b      	ldr	r3, [r3, #0]
 8006106:	697a      	ldr	r2, [r7, #20]
 8006108:	4013      	ands	r3, r2
 800610a:	613b      	str	r3, [r7, #16]

    if (iocurrent == ioposition)
 800610c:	693a      	ldr	r2, [r7, #16]
 800610e:	697b      	ldr	r3, [r7, #20]
 8006110:	429a      	cmp	r2, r3
 8006112:	f040 8164 	bne.w	80063de <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 8006116:	683b      	ldr	r3, [r7, #0]
 8006118:	685b      	ldr	r3, [r3, #4]
 800611a:	f003 0303 	and.w	r3, r3, #3
 800611e:	2b01      	cmp	r3, #1
 8006120:	d005      	beq.n	800612e <HAL_GPIO_Init+0x56>
 8006122:	683b      	ldr	r3, [r7, #0]
 8006124:	685b      	ldr	r3, [r3, #4]
 8006126:	f003 0303 	and.w	r3, r3, #3
 800612a:	2b02      	cmp	r3, #2
 800612c:	d130      	bne.n	8006190 <HAL_GPIO_Init+0xb8>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	689b      	ldr	r3, [r3, #8]
 8006132:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2));
 8006134:	69fb      	ldr	r3, [r7, #28]
 8006136:	005b      	lsls	r3, r3, #1
 8006138:	2203      	movs	r2, #3
 800613a:	fa02 f303 	lsl.w	r3, r2, r3
 800613e:	43db      	mvns	r3, r3
 8006140:	69ba      	ldr	r2, [r7, #24]
 8006142:	4013      	ands	r3, r2
 8006144:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2));
 8006146:	683b      	ldr	r3, [r7, #0]
 8006148:	68da      	ldr	r2, [r3, #12]
 800614a:	69fb      	ldr	r3, [r7, #28]
 800614c:	005b      	lsls	r3, r3, #1
 800614e:	fa02 f303 	lsl.w	r3, r2, r3
 8006152:	69ba      	ldr	r2, [r7, #24]
 8006154:	4313      	orrs	r3, r2
 8006156:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	69ba      	ldr	r2, [r7, #24]
 800615c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	685b      	ldr	r3, [r3, #4]
 8006162:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006164:	2201      	movs	r2, #1
 8006166:	69fb      	ldr	r3, [r7, #28]
 8006168:	fa02 f303 	lsl.w	r3, r2, r3
 800616c:	43db      	mvns	r3, r3
 800616e:	69ba      	ldr	r2, [r7, #24]
 8006170:	4013      	ands	r3, r2
 8006172:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	685b      	ldr	r3, [r3, #4]
 8006178:	091b      	lsrs	r3, r3, #4
 800617a:	f003 0201 	and.w	r2, r3, #1
 800617e:	69fb      	ldr	r3, [r7, #28]
 8006180:	fa02 f303 	lsl.w	r3, r2, r3
 8006184:	69ba      	ldr	r2, [r7, #24]
 8006186:	4313      	orrs	r3, r2
 8006188:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	69ba      	ldr	r2, [r7, #24]
 800618e:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	685b      	ldr	r3, [r3, #4]
 8006194:	f003 0303 	and.w	r3, r3, #3
 8006198:	2b03      	cmp	r3, #3
 800619a:	d017      	beq.n	80061cc <HAL_GPIO_Init+0xf4>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	68db      	ldr	r3, [r3, #12]
 80061a0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2));
 80061a2:	69fb      	ldr	r3, [r7, #28]
 80061a4:	005b      	lsls	r3, r3, #1
 80061a6:	2203      	movs	r2, #3
 80061a8:	fa02 f303 	lsl.w	r3, r2, r3
 80061ac:	43db      	mvns	r3, r3
 80061ae:	69ba      	ldr	r2, [r7, #24]
 80061b0:	4013      	ands	r3, r2
 80061b2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2));
 80061b4:	683b      	ldr	r3, [r7, #0]
 80061b6:	689a      	ldr	r2, [r3, #8]
 80061b8:	69fb      	ldr	r3, [r7, #28]
 80061ba:	005b      	lsls	r3, r3, #1
 80061bc:	fa02 f303 	lsl.w	r3, r2, r3
 80061c0:	69ba      	ldr	r2, [r7, #24]
 80061c2:	4313      	orrs	r3, r2
 80061c4:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80061c6:	687b      	ldr	r3, [r7, #4]
 80061c8:	69ba      	ldr	r2, [r7, #24]
 80061ca:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80061cc:	683b      	ldr	r3, [r7, #0]
 80061ce:	685b      	ldr	r3, [r3, #4]
 80061d0:	f003 0303 	and.w	r3, r3, #3
 80061d4:	2b02      	cmp	r3, #2
 80061d6:	d123      	bne.n	8006220 <HAL_GPIO_Init+0x148>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3];
 80061d8:	69fb      	ldr	r3, [r7, #28]
 80061da:	08da      	lsrs	r2, r3, #3
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	3208      	adds	r2, #8
 80061e0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80061e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)0xF << ((uint32_t)(position & (uint32_t)0x07) * 4)) ;
 80061e6:	69fb      	ldr	r3, [r7, #28]
 80061e8:	f003 0307 	and.w	r3, r3, #7
 80061ec:	009b      	lsls	r3, r3, #2
 80061ee:	220f      	movs	r2, #15
 80061f0:	fa02 f303 	lsl.w	r3, r2, r3
 80061f4:	43db      	mvns	r3, r3
 80061f6:	69ba      	ldr	r2, [r7, #24]
 80061f8:	4013      	ands	r3, r2
 80061fa:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07) * 4));
 80061fc:	683b      	ldr	r3, [r7, #0]
 80061fe:	691a      	ldr	r2, [r3, #16]
 8006200:	69fb      	ldr	r3, [r7, #28]
 8006202:	f003 0307 	and.w	r3, r3, #7
 8006206:	009b      	lsls	r3, r3, #2
 8006208:	fa02 f303 	lsl.w	r3, r2, r3
 800620c:	69ba      	ldr	r2, [r7, #24]
 800620e:	4313      	orrs	r3, r2
 8006210:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3] = temp;
 8006212:	69fb      	ldr	r3, [r7, #28]
 8006214:	08da      	lsrs	r2, r3, #3
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	3208      	adds	r2, #8
 800621a:	69b9      	ldr	r1, [r7, #24]
 800621c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	681b      	ldr	r3, [r3, #0]
 8006224:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2));
 8006226:	69fb      	ldr	r3, [r7, #28]
 8006228:	005b      	lsls	r3, r3, #1
 800622a:	2203      	movs	r2, #3
 800622c:	fa02 f303 	lsl.w	r3, r2, r3
 8006230:	43db      	mvns	r3, r3
 8006232:	69ba      	ldr	r2, [r7, #24]
 8006234:	4013      	ands	r3, r2
 8006236:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2));
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	685b      	ldr	r3, [r3, #4]
 800623c:	f003 0203 	and.w	r2, r3, #3
 8006240:	69fb      	ldr	r3, [r7, #28]
 8006242:	005b      	lsls	r3, r3, #1
 8006244:	fa02 f303 	lsl.w	r3, r2, r3
 8006248:	69ba      	ldr	r2, [r7, #24]
 800624a:	4313      	orrs	r3, r2
 800624c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	69ba      	ldr	r2, [r7, #24]
 8006252:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00u)
 8006254:	683b      	ldr	r3, [r7, #0]
 8006256:	685b      	ldr	r3, [r3, #4]
 8006258:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 800625c:	2b00      	cmp	r3, #0
 800625e:	f000 80be 	beq.w	80063de <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006262:	4b66      	ldr	r3, [pc, #408]	; (80063fc <HAL_GPIO_Init+0x324>)
 8006264:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006266:	4a65      	ldr	r2, [pc, #404]	; (80063fc <HAL_GPIO_Init+0x324>)
 8006268:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800626c:	6453      	str	r3, [r2, #68]	; 0x44
 800626e:	4b63      	ldr	r3, [pc, #396]	; (80063fc <HAL_GPIO_Init+0x324>)
 8006270:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006272:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006276:	60fb      	str	r3, [r7, #12]
 8006278:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2];
 800627a:	4a61      	ldr	r2, [pc, #388]	; (8006400 <HAL_GPIO_Init+0x328>)
 800627c:	69fb      	ldr	r3, [r7, #28]
 800627e:	089b      	lsrs	r3, r3, #2
 8006280:	3302      	adds	r3, #2
 8006282:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006286:	61bb      	str	r3, [r7, #24]
        temp &= ~(((uint32_t)0x0F) << (4 * (position & 0x03)));
 8006288:	69fb      	ldr	r3, [r7, #28]
 800628a:	f003 0303 	and.w	r3, r3, #3
 800628e:	009b      	lsls	r3, r3, #2
 8006290:	220f      	movs	r2, #15
 8006292:	fa02 f303 	lsl.w	r3, r2, r3
 8006296:	43db      	mvns	r3, r3
 8006298:	69ba      	ldr	r2, [r7, #24]
 800629a:	4013      	ands	r3, r2
 800629c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03)));
 800629e:	687b      	ldr	r3, [r7, #4]
 80062a0:	4a58      	ldr	r2, [pc, #352]	; (8006404 <HAL_GPIO_Init+0x32c>)
 80062a2:	4293      	cmp	r3, r2
 80062a4:	d037      	beq.n	8006316 <HAL_GPIO_Init+0x23e>
 80062a6:	687b      	ldr	r3, [r7, #4]
 80062a8:	4a57      	ldr	r2, [pc, #348]	; (8006408 <HAL_GPIO_Init+0x330>)
 80062aa:	4293      	cmp	r3, r2
 80062ac:	d031      	beq.n	8006312 <HAL_GPIO_Init+0x23a>
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	4a56      	ldr	r2, [pc, #344]	; (800640c <HAL_GPIO_Init+0x334>)
 80062b2:	4293      	cmp	r3, r2
 80062b4:	d02b      	beq.n	800630e <HAL_GPIO_Init+0x236>
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	4a55      	ldr	r2, [pc, #340]	; (8006410 <HAL_GPIO_Init+0x338>)
 80062ba:	4293      	cmp	r3, r2
 80062bc:	d025      	beq.n	800630a <HAL_GPIO_Init+0x232>
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	4a54      	ldr	r2, [pc, #336]	; (8006414 <HAL_GPIO_Init+0x33c>)
 80062c2:	4293      	cmp	r3, r2
 80062c4:	d01f      	beq.n	8006306 <HAL_GPIO_Init+0x22e>
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	4a53      	ldr	r2, [pc, #332]	; (8006418 <HAL_GPIO_Init+0x340>)
 80062ca:	4293      	cmp	r3, r2
 80062cc:	d019      	beq.n	8006302 <HAL_GPIO_Init+0x22a>
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	4a52      	ldr	r2, [pc, #328]	; (800641c <HAL_GPIO_Init+0x344>)
 80062d2:	4293      	cmp	r3, r2
 80062d4:	d013      	beq.n	80062fe <HAL_GPIO_Init+0x226>
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	4a51      	ldr	r2, [pc, #324]	; (8006420 <HAL_GPIO_Init+0x348>)
 80062da:	4293      	cmp	r3, r2
 80062dc:	d00d      	beq.n	80062fa <HAL_GPIO_Init+0x222>
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	4a50      	ldr	r2, [pc, #320]	; (8006424 <HAL_GPIO_Init+0x34c>)
 80062e2:	4293      	cmp	r3, r2
 80062e4:	d007      	beq.n	80062f6 <HAL_GPIO_Init+0x21e>
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	4a4f      	ldr	r2, [pc, #316]	; (8006428 <HAL_GPIO_Init+0x350>)
 80062ea:	4293      	cmp	r3, r2
 80062ec:	d101      	bne.n	80062f2 <HAL_GPIO_Init+0x21a>
 80062ee:	2309      	movs	r3, #9
 80062f0:	e012      	b.n	8006318 <HAL_GPIO_Init+0x240>
 80062f2:	230a      	movs	r3, #10
 80062f4:	e010      	b.n	8006318 <HAL_GPIO_Init+0x240>
 80062f6:	2308      	movs	r3, #8
 80062f8:	e00e      	b.n	8006318 <HAL_GPIO_Init+0x240>
 80062fa:	2307      	movs	r3, #7
 80062fc:	e00c      	b.n	8006318 <HAL_GPIO_Init+0x240>
 80062fe:	2306      	movs	r3, #6
 8006300:	e00a      	b.n	8006318 <HAL_GPIO_Init+0x240>
 8006302:	2305      	movs	r3, #5
 8006304:	e008      	b.n	8006318 <HAL_GPIO_Init+0x240>
 8006306:	2304      	movs	r3, #4
 8006308:	e006      	b.n	8006318 <HAL_GPIO_Init+0x240>
 800630a:	2303      	movs	r3, #3
 800630c:	e004      	b.n	8006318 <HAL_GPIO_Init+0x240>
 800630e:	2302      	movs	r3, #2
 8006310:	e002      	b.n	8006318 <HAL_GPIO_Init+0x240>
 8006312:	2301      	movs	r3, #1
 8006314:	e000      	b.n	8006318 <HAL_GPIO_Init+0x240>
 8006316:	2300      	movs	r3, #0
 8006318:	69fa      	ldr	r2, [r7, #28]
 800631a:	f002 0203 	and.w	r2, r2, #3
 800631e:	0092      	lsls	r2, r2, #2
 8006320:	4093      	lsls	r3, r2
 8006322:	69ba      	ldr	r2, [r7, #24]
 8006324:	4313      	orrs	r3, r2
 8006326:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2] = temp;
 8006328:	4935      	ldr	r1, [pc, #212]	; (8006400 <HAL_GPIO_Init+0x328>)
 800632a:	69fb      	ldr	r3, [r7, #28]
 800632c:	089b      	lsrs	r3, r3, #2
 800632e:	3302      	adds	r3, #2
 8006330:	69ba      	ldr	r2, [r7, #24]
 8006332:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006336:	4b3d      	ldr	r3, [pc, #244]	; (800642c <HAL_GPIO_Init+0x354>)
 8006338:	689b      	ldr	r3, [r3, #8]
 800633a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800633c:	693b      	ldr	r3, [r7, #16]
 800633e:	43db      	mvns	r3, r3
 8006340:	69ba      	ldr	r2, [r7, #24]
 8006342:	4013      	ands	r3, r2
 8006344:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00u)
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800634e:	2b00      	cmp	r3, #0
 8006350:	d003      	beq.n	800635a <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8006352:	69ba      	ldr	r2, [r7, #24]
 8006354:	693b      	ldr	r3, [r7, #16]
 8006356:	4313      	orrs	r3, r2
 8006358:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800635a:	4a34      	ldr	r2, [pc, #208]	; (800642c <HAL_GPIO_Init+0x354>)
 800635c:	69bb      	ldr	r3, [r7, #24]
 800635e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006360:	4b32      	ldr	r3, [pc, #200]	; (800642c <HAL_GPIO_Init+0x354>)
 8006362:	68db      	ldr	r3, [r3, #12]
 8006364:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006366:	693b      	ldr	r3, [r7, #16]
 8006368:	43db      	mvns	r3, r3
 800636a:	69ba      	ldr	r2, [r7, #24]
 800636c:	4013      	ands	r3, r2
 800636e:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00u)
 8006370:	683b      	ldr	r3, [r7, #0]
 8006372:	685b      	ldr	r3, [r3, #4]
 8006374:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006378:	2b00      	cmp	r3, #0
 800637a:	d003      	beq.n	8006384 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 800637c:	69ba      	ldr	r2, [r7, #24]
 800637e:	693b      	ldr	r3, [r7, #16]
 8006380:	4313      	orrs	r3, r2
 8006382:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006384:	4a29      	ldr	r2, [pc, #164]	; (800642c <HAL_GPIO_Init+0x354>)
 8006386:	69bb      	ldr	r3, [r7, #24]
 8006388:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800638a:	4b28      	ldr	r3, [pc, #160]	; (800642c <HAL_GPIO_Init+0x354>)
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006390:	693b      	ldr	r3, [r7, #16]
 8006392:	43db      	mvns	r3, r3
 8006394:	69ba      	ldr	r2, [r7, #24]
 8006396:	4013      	ands	r3, r2
 8006398:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00u)
 800639a:	683b      	ldr	r3, [r7, #0]
 800639c:	685b      	ldr	r3, [r3, #4]
 800639e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80063a2:	2b00      	cmp	r3, #0
 80063a4:	d003      	beq.n	80063ae <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 80063a6:	69ba      	ldr	r2, [r7, #24]
 80063a8:	693b      	ldr	r3, [r7, #16]
 80063aa:	4313      	orrs	r3, r2
 80063ac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80063ae:	4a1f      	ldr	r2, [pc, #124]	; (800642c <HAL_GPIO_Init+0x354>)
 80063b0:	69bb      	ldr	r3, [r7, #24]
 80063b2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80063b4:	4b1d      	ldr	r3, [pc, #116]	; (800642c <HAL_GPIO_Init+0x354>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80063ba:	693b      	ldr	r3, [r7, #16]
 80063bc:	43db      	mvns	r3, r3
 80063be:	69ba      	ldr	r2, [r7, #24]
 80063c0:	4013      	ands	r3, r2
 80063c2:	61bb      	str	r3, [r7, #24]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00u)
 80063c4:	683b      	ldr	r3, [r7, #0]
 80063c6:	685b      	ldr	r3, [r3, #4]
 80063c8:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80063cc:	2b00      	cmp	r3, #0
 80063ce:	d003      	beq.n	80063d8 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 80063d0:	69ba      	ldr	r2, [r7, #24]
 80063d2:	693b      	ldr	r3, [r7, #16]
 80063d4:	4313      	orrs	r3, r2
 80063d6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80063d8:	4a14      	ldr	r2, [pc, #80]	; (800642c <HAL_GPIO_Init+0x354>)
 80063da:	69bb      	ldr	r3, [r7, #24]
 80063dc:	6013      	str	r3, [r2, #0]
  for (position = 0; position < GPIO_NUMBER; position++)
 80063de:	69fb      	ldr	r3, [r7, #28]
 80063e0:	3301      	adds	r3, #1
 80063e2:	61fb      	str	r3, [r7, #28]
 80063e4:	69fb      	ldr	r3, [r7, #28]
 80063e6:	2b0f      	cmp	r3, #15
 80063e8:	f67f ae86 	bls.w	80060f8 <HAL_GPIO_Init+0x20>
      }
    }
  }
}
 80063ec:	bf00      	nop
 80063ee:	bf00      	nop
 80063f0:	3724      	adds	r7, #36	; 0x24
 80063f2:	46bd      	mov	sp, r7
 80063f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f8:	4770      	bx	lr
 80063fa:	bf00      	nop
 80063fc:	40023800 	.word	0x40023800
 8006400:	40013800 	.word	0x40013800
 8006404:	40020000 	.word	0x40020000
 8006408:	40020400 	.word	0x40020400
 800640c:	40020800 	.word	0x40020800
 8006410:	40020c00 	.word	0x40020c00
 8006414:	40021000 	.word	0x40021000
 8006418:	40021400 	.word	0x40021400
 800641c:	40021800 	.word	0x40021800
 8006420:	40021c00 	.word	0x40021c00
 8006424:	40022000 	.word	0x40022000
 8006428:	40022400 	.word	0x40022400
 800642c:	40013c00 	.word	0x40013c00

08006430 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006430:	b480      	push	{r7}
 8006432:	b083      	sub	sp, #12
 8006434:	af00      	add	r7, sp, #0
 8006436:	6078      	str	r0, [r7, #4]
 8006438:	460b      	mov	r3, r1
 800643a:	807b      	strh	r3, [r7, #2]
 800643c:	4613      	mov	r3, r2
 800643e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 8006440:	787b      	ldrb	r3, [r7, #1]
 8006442:	2b00      	cmp	r3, #0
 8006444:	d003      	beq.n	800644e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006446:	887a      	ldrh	r2, [r7, #2]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
  }
}
 800644c:	e003      	b.n	8006456 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16;
 800644e:	887b      	ldrh	r3, [r7, #2]
 8006450:	041a      	lsls	r2, r3, #16
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	619a      	str	r2, [r3, #24]
}
 8006456:	bf00      	nop
 8006458:	370c      	adds	r7, #12
 800645a:	46bd      	mov	sp, r7
 800645c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006460:	4770      	bx	lr
	...

08006464 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8006464:	b580      	push	{r7, lr}
 8006466:	b082      	sub	sp, #8
 8006468:	af00      	add	r7, sp, #0
 800646a:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800646c:	687b      	ldr	r3, [r7, #4]
 800646e:	2b00      	cmp	r3, #0
 8006470:	d101      	bne.n	8006476 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8006472:	2301      	movs	r3, #1
 8006474:	e08b      	b.n	800658e <HAL_I2C_Init+0x12a>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8006476:	687b      	ldr	r3, [r7, #4]
 8006478:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800647c:	b2db      	uxtb	r3, r3
 800647e:	2b00      	cmp	r3, #0
 8006480:	d106      	bne.n	8006490 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	2200      	movs	r2, #0
 8006486:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800648a:	6878      	ldr	r0, [r7, #4]
 800648c:	f7fa fd14 	bl	8000eb8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8006490:	687b      	ldr	r3, [r7, #4]
 8006492:	2224      	movs	r2, #36	; 0x24
 8006494:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8006498:	687b      	ldr	r3, [r7, #4]
 800649a:	681b      	ldr	r3, [r3, #0]
 800649c:	681a      	ldr	r2, [r3, #0]
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	681b      	ldr	r3, [r3, #0]
 80064a2:	f022 0201 	bic.w	r2, r2, #1
 80064a6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 80064a8:	687b      	ldr	r3, [r7, #4]
 80064aa:	685a      	ldr	r2, [r3, #4]
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	f022 6270 	bic.w	r2, r2, #251658240	; 0xf000000
 80064b4:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 80064b6:	687b      	ldr	r3, [r7, #4]
 80064b8:	681b      	ldr	r3, [r3, #0]
 80064ba:	689a      	ldr	r2, [r3, #8]
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	681b      	ldr	r3, [r3, #0]
 80064c0:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80064c4:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	68db      	ldr	r3, [r3, #12]
 80064ca:	2b01      	cmp	r3, #1
 80064cc:	d107      	bne.n	80064de <HAL_I2C_Init+0x7a>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	689a      	ldr	r2, [r3, #8]
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80064da:	609a      	str	r2, [r3, #8]
 80064dc:	e006      	b.n	80064ec <HAL_I2C_Init+0x88>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 80064de:	687b      	ldr	r3, [r7, #4]
 80064e0:	689a      	ldr	r2, [r3, #8]
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	f442 4204 	orr.w	r2, r2, #33792	; 0x8400
 80064ea:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 80064ec:	687b      	ldr	r3, [r7, #4]
 80064ee:	68db      	ldr	r3, [r3, #12]
 80064f0:	2b02      	cmp	r3, #2
 80064f2:	d108      	bne.n	8006506 <HAL_I2C_Init+0xa2>
  {
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 80064f4:	687b      	ldr	r3, [r7, #4]
 80064f6:	681b      	ldr	r3, [r3, #0]
 80064f8:	685a      	ldr	r2, [r3, #4]
 80064fa:	687b      	ldr	r3, [r7, #4]
 80064fc:	681b      	ldr	r3, [r3, #0]
 80064fe:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006502:	605a      	str	r2, [r3, #4]
 8006504:	e007      	b.n	8006516 <HAL_I2C_Init+0xb2>
  }
  else
  {
    /* Clear the I2C ADD10 bit */
    CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_ADD10);
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	685a      	ldr	r2, [r3, #4]
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	681b      	ldr	r3, [r3, #0]
 8006510:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006514:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	681b      	ldr	r3, [r3, #0]
 800651a:	6859      	ldr	r1, [r3, #4]
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681a      	ldr	r2, [r3, #0]
 8006520:	4b1d      	ldr	r3, [pc, #116]	; (8006598 <HAL_I2C_Init+0x134>)
 8006522:	430b      	orrs	r3, r1
 8006524:	6053      	str	r3, [r2, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	681b      	ldr	r3, [r3, #0]
 800652a:	68da      	ldr	r2, [r3, #12]
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8006534:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006536:	687b      	ldr	r3, [r7, #4]
 8006538:	691a      	ldr	r2, [r3, #16]
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	695b      	ldr	r3, [r3, #20]
 800653e:	ea42 0103 	orr.w	r1, r2, r3
                          (hi2c->Init.OwnAddress2Masks << 8));
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	699b      	ldr	r3, [r3, #24]
 8006546:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	430a      	orrs	r2, r1
 800654e:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	69d9      	ldr	r1, [r3, #28]
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	6a1a      	ldr	r2, [r3, #32]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	430a      	orrs	r2, r1
 800655e:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	681a      	ldr	r2, [r3, #0]
 8006566:	687b      	ldr	r3, [r7, #4]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f042 0201 	orr.w	r2, r2, #1
 800656e:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8006570:	687b      	ldr	r3, [r7, #4]
 8006572:	2200      	movs	r2, #0
 8006574:	645a      	str	r2, [r3, #68]	; 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 8006576:	687b      	ldr	r3, [r7, #4]
 8006578:	2220      	movs	r2, #32
 800657a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->PreviousState = I2C_STATE_NONE;
 800657e:	687b      	ldr	r3, [r7, #4]
 8006580:	2200      	movs	r2, #0
 8006582:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	2200      	movs	r2, #0
 8006588:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  return HAL_OK;
 800658c:	2300      	movs	r3, #0
}
 800658e:	4618      	mov	r0, r3
 8006590:	3708      	adds	r7, #8
 8006592:	46bd      	mov	sp, r7
 8006594:	bd80      	pop	{r7, pc}
 8006596:	bf00      	nop
 8006598:	02008000 	.word	0x02008000

0800659c <HAL_I2C_Master_Receive_IT>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                            uint16_t Size)
{
 800659c:	b580      	push	{r7, lr}
 800659e:	b088      	sub	sp, #32
 80065a0:	af02      	add	r7, sp, #8
 80065a2:	60f8      	str	r0, [r7, #12]
 80065a4:	607a      	str	r2, [r7, #4]
 80065a6:	461a      	mov	r2, r3
 80065a8:	460b      	mov	r3, r1
 80065aa:	817b      	strh	r3, [r7, #10]
 80065ac:	4613      	mov	r3, r2
 80065ae:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;

  if (hi2c->State == HAL_I2C_STATE_READY)
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80065b6:	b2db      	uxtb	r3, r3
 80065b8:	2b20      	cmp	r3, #32
 80065ba:	d153      	bne.n	8006664 <HAL_I2C_Master_Receive_IT+0xc8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 80065bc:	68fb      	ldr	r3, [r7, #12]
 80065be:	681b      	ldr	r3, [r3, #0]
 80065c0:	699b      	ldr	r3, [r3, #24]
 80065c2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80065c6:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80065ca:	d101      	bne.n	80065d0 <HAL_I2C_Master_Receive_IT+0x34>
    {
      return HAL_BUSY;
 80065cc:	2302      	movs	r3, #2
 80065ce:	e04a      	b.n	8006666 <HAL_I2C_Master_Receive_IT+0xca>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80065d6:	2b01      	cmp	r3, #1
 80065d8:	d101      	bne.n	80065de <HAL_I2C_Master_Receive_IT+0x42>
 80065da:	2302      	movs	r3, #2
 80065dc:	e043      	b.n	8006666 <HAL_I2C_Master_Receive_IT+0xca>
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2201      	movs	r2, #1
 80065e2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80065e6:	68fb      	ldr	r3, [r7, #12]
 80065e8:	2222      	movs	r2, #34	; 0x22
 80065ea:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80065ee:	68fb      	ldr	r3, [r7, #12]
 80065f0:	2210      	movs	r2, #16
 80065f2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2200      	movs	r2, #0
 80065fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80065fc:	68fb      	ldr	r3, [r7, #12]
 80065fe:	687a      	ldr	r2, [r7, #4]
 8006600:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	893a      	ldrh	r2, [r7, #8]
 8006606:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006608:	68fb      	ldr	r3, [r7, #12]
 800660a:	4a19      	ldr	r2, [pc, #100]	; (8006670 <HAL_I2C_Master_Receive_IT+0xd4>)
 800660c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_IT;
 800660e:	68fb      	ldr	r3, [r7, #12]
 8006610:	4a18      	ldr	r2, [pc, #96]	; (8006674 <HAL_I2C_Master_Receive_IT+0xd8>)
 8006612:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006614:	68fb      	ldr	r3, [r7, #12]
 8006616:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006618:	b29b      	uxth	r3, r3
 800661a:	2bff      	cmp	r3, #255	; 0xff
 800661c:	d906      	bls.n	800662c <HAL_I2C_Master_Receive_IT+0x90>
    {
      hi2c->XferSize = 1U;
 800661e:	68fb      	ldr	r3, [r7, #12]
 8006620:	2201      	movs	r2, #1
 8006622:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 8006624:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006628:	617b      	str	r3, [r7, #20]
 800662a:	e007      	b.n	800663c <HAL_I2C_Master_Receive_IT+0xa0>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800662c:	68fb      	ldr	r3, [r7, #12]
 800662e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006630:	b29a      	uxth	r2, r3
 8006632:	68fb      	ldr	r3, [r7, #12]
 8006634:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 8006636:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 800663a:	617b      	str	r3, [r7, #20]
    }

    /* Send Slave Address */
    /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE */
    I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800663c:	68fb      	ldr	r3, [r7, #12]
 800663e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006640:	b2da      	uxtb	r2, r3
 8006642:	8979      	ldrh	r1, [r7, #10]
 8006644:	4b0c      	ldr	r3, [pc, #48]	; (8006678 <HAL_I2C_Master_Receive_IT+0xdc>)
 8006646:	9300      	str	r3, [sp, #0]
 8006648:	697b      	ldr	r3, [r7, #20]
 800664a:	68f8      	ldr	r0, [r7, #12]
 800664c:	f001 fd52 	bl	80080f4 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8006650:	68fb      	ldr	r3, [r7, #12]
 8006652:	2200      	movs	r2, #0
 8006654:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, RXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006658:	2102      	movs	r1, #2
 800665a:	68f8      	ldr	r0, [r7, #12]
 800665c:	f001 fd7c 	bl	8008158 <I2C_Enable_IRQ>

    return HAL_OK;
 8006660:	2300      	movs	r3, #0
 8006662:	e000      	b.n	8006666 <HAL_I2C_Master_Receive_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8006664:	2302      	movs	r3, #2
  }
}
 8006666:	4618      	mov	r0, r3
 8006668:	3718      	adds	r7, #24
 800666a:	46bd      	mov	sp, r7
 800666c:	bd80      	pop	{r7, pc}
 800666e:	bf00      	nop
 8006670:	ffff0000 	.word	0xffff0000
 8006674:	08006b5f 	.word	0x08006b5f
 8006678:	80002400 	.word	0x80002400

0800667c <HAL_I2C_Slave_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Slave_Transmit_IT(I2C_HandleTypeDef *hi2c, uint8_t *pData, uint16_t Size)
{
 800667c:	b580      	push	{r7, lr}
 800667e:	b084      	sub	sp, #16
 8006680:	af00      	add	r7, sp, #0
 8006682:	60f8      	str	r0, [r7, #12]
 8006684:	60b9      	str	r1, [r7, #8]
 8006686:	4613      	mov	r3, r2
 8006688:	80fb      	strh	r3, [r7, #6]
  if (hi2c->State == HAL_I2C_STATE_READY)
 800668a:	68fb      	ldr	r3, [r7, #12]
 800668c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006690:	b2db      	uxtb	r3, r3
 8006692:	2b20      	cmp	r3, #32
 8006694:	d156      	bne.n	8006744 <HAL_I2C_Slave_Transmit_IT+0xc8>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006696:	68fb      	ldr	r3, [r7, #12]
 8006698:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800669c:	2b01      	cmp	r3, #1
 800669e:	d101      	bne.n	80066a4 <HAL_I2C_Slave_Transmit_IT+0x28>
 80066a0:	2302      	movs	r3, #2
 80066a2:	e050      	b.n	8006746 <HAL_I2C_Slave_Transmit_IT+0xca>
 80066a4:	68fb      	ldr	r3, [r7, #12]
 80066a6:	2201      	movs	r2, #1
 80066a8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	2221      	movs	r2, #33	; 0x21
 80066b0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_SLAVE;
 80066b4:	68fb      	ldr	r3, [r7, #12]
 80066b6:	2220      	movs	r2, #32
 80066b8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80066bc:	68fb      	ldr	r3, [r7, #12]
 80066be:	2200      	movs	r2, #0
 80066c0:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Address Acknowledge */
    hi2c->Instance->CR2 &= ~I2C_CR2_NACK;
 80066c2:	68fb      	ldr	r3, [r7, #12]
 80066c4:	681b      	ldr	r3, [r3, #0]
 80066c6:	685a      	ldr	r2, [r3, #4]
 80066c8:	68fb      	ldr	r3, [r7, #12]
 80066ca:	681b      	ldr	r3, [r3, #0]
 80066cc:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80066d0:	605a      	str	r2, [r3, #4]

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80066d2:	68fb      	ldr	r3, [r7, #12]
 80066d4:	68ba      	ldr	r2, [r7, #8]
 80066d6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80066d8:	68fb      	ldr	r3, [r7, #12]
 80066da:	88fa      	ldrh	r2, [r7, #6]
 80066dc:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80066de:	68fb      	ldr	r3, [r7, #12]
 80066e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80066e2:	b29a      	uxth	r2, r3
 80066e4:	68fb      	ldr	r3, [r7, #12]
 80066e6:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80066e8:	68fb      	ldr	r3, [r7, #12]
 80066ea:	4a19      	ldr	r2, [pc, #100]	; (8006750 <HAL_I2C_Slave_Transmit_IT+0xd4>)
 80066ec:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Slave_ISR_IT;
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	4a18      	ldr	r2, [pc, #96]	; (8006754 <HAL_I2C_Slave_Transmit_IT+0xd8>)
 80066f2:	635a      	str	r2, [r3, #52]	; 0x34

    /* Preload TX data if no stretch enable */
    if (hi2c->Init.NoStretchMode == I2C_NOSTRETCH_ENABLE)
 80066f4:	68fb      	ldr	r3, [r7, #12]
 80066f6:	6a1b      	ldr	r3, [r3, #32]
 80066f8:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80066fc:	d117      	bne.n	800672e <HAL_I2C_Slave_Transmit_IT+0xb2>
    {
      /* Preload TX register */
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006702:	781a      	ldrb	r2, [r3, #0]
 8006704:	68fb      	ldr	r3, [r7, #12]
 8006706:	681b      	ldr	r3, [r3, #0]
 8006708:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800670a:	68fb      	ldr	r3, [r7, #12]
 800670c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800670e:	1c5a      	adds	r2, r3, #1
 8006710:	68fb      	ldr	r3, [r7, #12]
 8006712:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006714:	68fb      	ldr	r3, [r7, #12]
 8006716:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006718:	b29b      	uxth	r3, r3
 800671a:	3b01      	subs	r3, #1
 800671c:	b29a      	uxth	r2, r3
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006722:	68fb      	ldr	r3, [r7, #12]
 8006724:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006726:	3b01      	subs	r3, #1
 8006728:	b29a      	uxth	r2, r3
 800672a:	68fb      	ldr	r3, [r7, #12]
 800672c:	851a      	strh	r2, [r3, #40]	; 0x28
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800672e:	68fb      	ldr	r3, [r7, #12]
 8006730:	2200      	movs	r2, #0
 8006732:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Enable ERR, TC, STOP, NACK, TXI interrupt */
    /* possible to enable all of these */
    /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
      I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
    I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT | I2C_XFER_LISTEN_IT);
 8006736:	f248 0101 	movw	r1, #32769	; 0x8001
 800673a:	68f8      	ldr	r0, [r7, #12]
 800673c:	f001 fd0c 	bl	8008158 <I2C_Enable_IRQ>

    return HAL_OK;
 8006740:	2300      	movs	r3, #0
 8006742:	e000      	b.n	8006746 <HAL_I2C_Slave_Transmit_IT+0xca>
  }
  else
  {
    return HAL_BUSY;
 8006744:	2302      	movs	r3, #2
  }
}
 8006746:	4618      	mov	r0, r3
 8006748:	3710      	adds	r7, #16
 800674a:	46bd      	mov	sp, r7
 800674c:	bd80      	pop	{r7, pc}
 800674e:	bf00      	nop
 8006750:	ffff0000 	.word	0xffff0000
 8006754:	08006dc9 	.word	0x08006dc9

08006758 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 8006758:	b580      	push	{r7, lr}
 800675a:	b088      	sub	sp, #32
 800675c:	af02      	add	r7, sp, #8
 800675e:	60f8      	str	r0, [r7, #12]
 8006760:	607a      	str	r2, [r7, #4]
 8006762:	461a      	mov	r2, r3
 8006764:	460b      	mov	r3, r1
 8006766:	817b      	strh	r3, [r7, #10]
 8006768:	4613      	mov	r3, r2
 800676a:	813b      	strh	r3, [r7, #8]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800676c:	68fb      	ldr	r3, [r7, #12]
 800676e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006772:	b2db      	uxtb	r3, r3
 8006774:	2b20      	cmp	r3, #32
 8006776:	f040 80cd 	bne.w	8006914 <HAL_I2C_Master_Receive_DMA+0x1bc>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800677a:	68fb      	ldr	r3, [r7, #12]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	699b      	ldr	r3, [r3, #24]
 8006780:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8006784:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006788:	d101      	bne.n	800678e <HAL_I2C_Master_Receive_DMA+0x36>
    {
      return HAL_BUSY;
 800678a:	2302      	movs	r3, #2
 800678c:	e0c3      	b.n	8006916 <HAL_I2C_Master_Receive_DMA+0x1be>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800678e:	68fb      	ldr	r3, [r7, #12]
 8006790:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006794:	2b01      	cmp	r3, #1
 8006796:	d101      	bne.n	800679c <HAL_I2C_Master_Receive_DMA+0x44>
 8006798:	2302      	movs	r3, #2
 800679a:	e0bc      	b.n	8006916 <HAL_I2C_Master_Receive_DMA+0x1be>
 800679c:	68fb      	ldr	r3, [r7, #12]
 800679e:	2201      	movs	r2, #1
 80067a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 80067a4:	68fb      	ldr	r3, [r7, #12]
 80067a6:	2222      	movs	r2, #34	; 0x22
 80067a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 80067ac:	68fb      	ldr	r3, [r7, #12]
 80067ae:	2210      	movs	r2, #16
 80067b0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 80067b4:	68fb      	ldr	r3, [r7, #12]
 80067b6:	2200      	movs	r2, #0
 80067b8:	645a      	str	r2, [r3, #68]	; 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80067ba:	68fb      	ldr	r3, [r7, #12]
 80067bc:	687a      	ldr	r2, [r7, #4]
 80067be:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80067c0:	68fb      	ldr	r3, [r7, #12]
 80067c2:	893a      	ldrh	r2, [r7, #8]
 80067c4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80067c6:	68fb      	ldr	r3, [r7, #12]
 80067c8:	4a55      	ldr	r2, [pc, #340]	; (8006920 <HAL_I2C_Master_Receive_DMA+0x1c8>)
 80067ca:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 80067cc:	68fb      	ldr	r3, [r7, #12]
 80067ce:	4a55      	ldr	r2, [pc, #340]	; (8006924 <HAL_I2C_Master_Receive_DMA+0x1cc>)
 80067d0:	635a      	str	r2, [r3, #52]	; 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 80067d2:	68fb      	ldr	r3, [r7, #12]
 80067d4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067d6:	b29b      	uxth	r3, r3
 80067d8:	2bff      	cmp	r3, #255	; 0xff
 80067da:	d906      	bls.n	80067ea <HAL_I2C_Master_Receive_DMA+0x92>
    {
      hi2c->XferSize = 1U;
 80067dc:	68fb      	ldr	r3, [r7, #12]
 80067de:	2201      	movs	r2, #1
 80067e0:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_RELOAD_MODE;
 80067e2:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80067e6:	617b      	str	r3, [r7, #20]
 80067e8:	e007      	b.n	80067fa <HAL_I2C_Master_Receive_DMA+0xa2>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 80067ea:	68fb      	ldr	r3, [r7, #12]
 80067ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80067ee:	b29a      	uxth	r2, r3
 80067f0:	68fb      	ldr	r3, [r7, #12]
 80067f2:	851a      	strh	r2, [r3, #40]	; 0x28
      xfermode = I2C_AUTOEND_MODE;
 80067f4:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80067f8:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 80067fa:	68fb      	ldr	r3, [r7, #12]
 80067fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d070      	beq.n	80068e4 <HAL_I2C_Master_Receive_DMA+0x18c>
    {
      if (hi2c->hdmarx != NULL)
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006806:	2b00      	cmp	r3, #0
 8006808:	d020      	beq.n	800684c <HAL_I2C_Master_Receive_DMA+0xf4>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800680a:	68fb      	ldr	r3, [r7, #12]
 800680c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800680e:	4a46      	ldr	r2, [pc, #280]	; (8006928 <HAL_I2C_Master_Receive_DMA+0x1d0>)
 8006810:	63da      	str	r2, [r3, #60]	; 0x3c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 8006812:	68fb      	ldr	r3, [r7, #12]
 8006814:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006816:	4a45      	ldr	r2, [pc, #276]	; (800692c <HAL_I2C_Master_Receive_DMA+0x1d4>)
 8006818:	64da      	str	r2, [r3, #76]	; 0x4c

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800681a:	68fb      	ldr	r3, [r7, #12]
 800681c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800681e:	2200      	movs	r2, #0
 8006820:	641a      	str	r2, [r3, #64]	; 0x40
        hi2c->hdmarx->XferAbortCallback = NULL;
 8006822:	68fb      	ldr	r3, [r7, #12]
 8006824:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006826:	2200      	movs	r2, #0
 8006828:	651a      	str	r2, [r3, #80]	; 0x50

        /* Enable the DMA stream */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800682a:	68fb      	ldr	r3, [r7, #12]
 800682c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800682e:	68fb      	ldr	r3, [r7, #12]
 8006830:	681b      	ldr	r3, [r3, #0]
 8006832:	3324      	adds	r3, #36	; 0x24
 8006834:	4619      	mov	r1, r3
 8006836:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 8006838:	68fb      	ldr	r3, [r7, #12]
 800683a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800683c:	f7fd fb0a 	bl	8003e54 <HAL_DMA_Start_IT>
 8006840:	4603      	mov	r3, r0
 8006842:	74fb      	strb	r3, [r7, #19]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 8006844:	7cfb      	ldrb	r3, [r7, #19]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d138      	bne.n	80068bc <HAL_I2C_Master_Receive_DMA+0x164>
 800684a:	e013      	b.n	8006874 <HAL_I2C_Master_Receive_DMA+0x11c>
        hi2c->State     = HAL_I2C_STATE_READY;
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2220      	movs	r2, #32
 8006850:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 8006854:	68fb      	ldr	r3, [r7, #12]
 8006856:	2200      	movs	r2, #0
 8006858:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800685c:	68fb      	ldr	r3, [r7, #12]
 800685e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006860:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8006864:	68fb      	ldr	r3, [r7, #12]
 8006866:	645a      	str	r2, [r3, #68]	; 0x44
        __HAL_UNLOCK(hi2c);
 8006868:	68fb      	ldr	r3, [r7, #12]
 800686a:	2200      	movs	r2, #0
 800686c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        return HAL_ERROR;
 8006870:	2301      	movs	r3, #1
 8006872:	e050      	b.n	8006916 <HAL_I2C_Master_Receive_DMA+0x1be>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 8006874:	68fb      	ldr	r3, [r7, #12]
 8006876:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006878:	b2da      	uxtb	r2, r3
 800687a:	8979      	ldrh	r1, [r7, #10]
 800687c:	4b2c      	ldr	r3, [pc, #176]	; (8006930 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 800687e:	9300      	str	r3, [sp, #0]
 8006880:	697b      	ldr	r3, [r7, #20]
 8006882:	68f8      	ldr	r0, [r7, #12]
 8006884:	f001 fc36 	bl	80080f4 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 8006888:	68fb      	ldr	r3, [r7, #12]
 800688a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800688c:	b29a      	uxth	r2, r3
 800688e:	68fb      	ldr	r3, [r7, #12]
 8006890:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006892:	1ad3      	subs	r3, r2, r3
 8006894:	b29a      	uxth	r2, r3
 8006896:	68fb      	ldr	r3, [r7, #12]
 8006898:	855a      	strh	r2, [r3, #42]	; 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800689a:	68fb      	ldr	r3, [r7, #12]
 800689c:	2200      	movs	r2, #0
 800689e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 80068a2:	2110      	movs	r1, #16
 80068a4:	68f8      	ldr	r0, [r7, #12]
 80068a6:	f001 fc57 	bl	8008158 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80068aa:	68fb      	ldr	r3, [r7, #12]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	681a      	ldr	r2, [r3, #0]
 80068b0:	68fb      	ldr	r3, [r7, #12]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80068b8:	601a      	str	r2, [r3, #0]
 80068ba:	e029      	b.n	8006910 <HAL_I2C_Master_Receive_DMA+0x1b8>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 80068bc:	68fb      	ldr	r3, [r7, #12]
 80068be:	2220      	movs	r2, #32
 80068c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 80068c4:	68fb      	ldr	r3, [r7, #12]
 80068c6:	2200      	movs	r2, #0
 80068c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 80068cc:	68fb      	ldr	r3, [r7, #12]
 80068ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80068d0:	f043 0210 	orr.w	r2, r3, #16
 80068d4:	68fb      	ldr	r3, [r7, #12]
 80068d6:	645a      	str	r2, [r3, #68]	; 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	2200      	movs	r2, #0
 80068dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

        return HAL_ERROR;
 80068e0:	2301      	movs	r3, #1
 80068e2:	e018      	b.n	8006916 <HAL_I2C_Master_Receive_DMA+0x1be>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	4a13      	ldr	r2, [pc, #76]	; (8006934 <HAL_I2C_Master_Receive_DMA+0x1dc>)
 80068e8:	635a      	str	r2, [r3, #52]	; 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 80068ea:	68fb      	ldr	r3, [r7, #12]
 80068ec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80068ee:	b2da      	uxtb	r2, r3
 80068f0:	8979      	ldrh	r1, [r7, #10]
 80068f2:	4b0f      	ldr	r3, [pc, #60]	; (8006930 <HAL_I2C_Master_Receive_DMA+0x1d8>)
 80068f4:	9300      	str	r3, [sp, #0]
 80068f6:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80068fa:	68f8      	ldr	r0, [r7, #12]
 80068fc:	f001 fbfa 	bl	80080f4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8006900:	68fb      	ldr	r3, [r7, #12]
 8006902:	2200      	movs	r2, #0
 8006904:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
                process unlock */
      /* Enable ERR, TC, STOP, NACK, RXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006908:	2102      	movs	r1, #2
 800690a:	68f8      	ldr	r0, [r7, #12]
 800690c:	f001 fc24 	bl	8008158 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 8006910:	2300      	movs	r3, #0
 8006912:	e000      	b.n	8006916 <HAL_I2C_Master_Receive_DMA+0x1be>
  }
  else
  {
    return HAL_BUSY;
 8006914:	2302      	movs	r3, #2
  }
}
 8006916:	4618      	mov	r0, r3
 8006918:	3718      	adds	r7, #24
 800691a:	46bd      	mov	sp, r7
 800691c:	bd80      	pop	{r7, pc}
 800691e:	bf00      	nop
 8006920:	ffff0000 	.word	0xffff0000
 8006924:	08006fbb 	.word	0x08006fbb
 8006928:	08007f93 	.word	0x08007f93
 800692c:	08008045 	.word	0x08008045
 8006930:	80002400 	.word	0x80002400
 8006934:	08006b5f 	.word	0x08006b5f

08006938 <HAL_I2C_Master_Abort_IT>:
  * @param  DevAddress Target device address: The device 7 bits address value
  *         in datasheet must be shifted to the left before calling the interface
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Abort_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress)
{
 8006938:	b580      	push	{r7, lr}
 800693a:	b086      	sub	sp, #24
 800693c:	af02      	add	r7, sp, #8
 800693e:	6078      	str	r0, [r7, #4]
 8006940:	460b      	mov	r3, r1
 8006942:	807b      	strh	r3, [r7, #2]
  HAL_I2C_ModeTypeDef tmp_mode = hi2c->Mode;
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800694a:	73fb      	strb	r3, [r7, #15]

  if ((tmp_mode == HAL_I2C_MODE_MASTER) || (tmp_mode == HAL_I2C_MODE_MEM))
 800694c:	7bfb      	ldrb	r3, [r7, #15]
 800694e:	2b10      	cmp	r3, #16
 8006950:	d002      	beq.n	8006958 <HAL_I2C_Master_Abort_IT+0x20>
 8006952:	7bfb      	ldrb	r3, [r7, #15]
 8006954:	2b40      	cmp	r3, #64	; 0x40
 8006956:	d13c      	bne.n	80069d2 <HAL_I2C_Master_Abort_IT+0x9a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8006958:	687b      	ldr	r3, [r7, #4]
 800695a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800695e:	2b01      	cmp	r3, #1
 8006960:	d101      	bne.n	8006966 <HAL_I2C_Master_Abort_IT+0x2e>
 8006962:	2302      	movs	r3, #2
 8006964:	e036      	b.n	80069d4 <HAL_I2C_Master_Abort_IT+0x9c>
 8006966:	687b      	ldr	r3, [r7, #4]
 8006968:	2201      	movs	r2, #1
 800696a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Disable Interrupts and Store Previous state */
    if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006974:	b2db      	uxtb	r3, r3
 8006976:	2b21      	cmp	r3, #33	; 0x21
 8006978:	d107      	bne.n	800698a <HAL_I2C_Master_Abort_IT+0x52>
    {
      I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800697a:	2101      	movs	r1, #1
 800697c:	6878      	ldr	r0, [r7, #4]
 800697e:	f001 fc6f 	bl	8008260 <I2C_Disable_IRQ>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8006982:	687b      	ldr	r3, [r7, #4]
 8006984:	2211      	movs	r2, #17
 8006986:	631a      	str	r2, [r3, #48]	; 0x30
 8006988:	e00c      	b.n	80069a4 <HAL_I2C_Master_Abort_IT+0x6c>
    }
    else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006990:	b2db      	uxtb	r3, r3
 8006992:	2b22      	cmp	r3, #34	; 0x22
 8006994:	d106      	bne.n	80069a4 <HAL_I2C_Master_Abort_IT+0x6c>
    {
      I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8006996:	2102      	movs	r1, #2
 8006998:	6878      	ldr	r0, [r7, #4]
 800699a:	f001 fc61 	bl	8008260 <I2C_Disable_IRQ>
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800699e:	687b      	ldr	r3, [r7, #4]
 80069a0:	2212      	movs	r2, #18
 80069a2:	631a      	str	r2, [r3, #48]	; 0x30
    {
      /* Do nothing */
    }

    /* Set State at HAL_I2C_STATE_ABORT */
    hi2c->State = HAL_I2C_STATE_ABORT;
 80069a4:	687b      	ldr	r3, [r7, #4]
 80069a6:	2260      	movs	r2, #96	; 0x60
 80069a8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Set NBYTES to 1 to generate a dummy read on I2C peripheral */
    /* Set AUTOEND mode, this will generate a NACK then STOP condition to abort the current transfer */
    I2C_TransferConfig(hi2c, DevAddress, 1, I2C_AUTOEND_MODE, I2C_GENERATE_STOP);
 80069ac:	8879      	ldrh	r1, [r7, #2]
 80069ae:	4b0b      	ldr	r3, [pc, #44]	; (80069dc <HAL_I2C_Master_Abort_IT+0xa4>)
 80069b0:	9300      	str	r3, [sp, #0]
 80069b2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80069b6:	2201      	movs	r2, #1
 80069b8:	6878      	ldr	r0, [r7, #4]
 80069ba:	f001 fb9b 	bl	80080f4 <I2C_TransferConfig>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80069be:	687b      	ldr	r3, [r7, #4]
 80069c0:	2200      	movs	r2, #0
 80069c2:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80069c6:	2120      	movs	r1, #32
 80069c8:	6878      	ldr	r0, [r7, #4]
 80069ca:	f001 fbc5 	bl	8008158 <I2C_Enable_IRQ>

    return HAL_OK;
 80069ce:	2300      	movs	r3, #0
 80069d0:	e000      	b.n	80069d4 <HAL_I2C_Master_Abort_IT+0x9c>
  }
  else
  {
    /* Wrong usage of abort function */
    /* This function should be used only in case of abort monitored by master device */
    return HAL_ERROR;
 80069d2:	2301      	movs	r3, #1
  }
}
 80069d4:	4618      	mov	r0, r3
 80069d6:	3710      	adds	r7, #16
 80069d8:	46bd      	mov	sp, r7
 80069da:	bd80      	pop	{r7, pc}
 80069dc:	80004000 	.word	0x80004000

080069e0 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 80069e0:	b580      	push	{r7, lr}
 80069e2:	b084      	sub	sp, #16
 80069e4:	af00      	add	r7, sp, #0
 80069e6:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 80069e8:	687b      	ldr	r3, [r7, #4]
 80069ea:	681b      	ldr	r3, [r3, #0]
 80069ec:	699b      	ldr	r3, [r3, #24]
 80069ee:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 80069f0:	687b      	ldr	r3, [r7, #4]
 80069f2:	681b      	ldr	r3, [r3, #0]
 80069f4:	681b      	ldr	r3, [r3, #0]
 80069f6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 80069f8:	687b      	ldr	r3, [r7, #4]
 80069fa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80069fc:	2b00      	cmp	r3, #0
 80069fe:	d005      	beq.n	8006a0c <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 8006a00:	687b      	ldr	r3, [r7, #4]
 8006a02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006a04:	68ba      	ldr	r2, [r7, #8]
 8006a06:	68f9      	ldr	r1, [r7, #12]
 8006a08:	6878      	ldr	r0, [r7, #4]
 8006a0a:	4798      	blx	r3
  }
}
 8006a0c:	bf00      	nop
 8006a0e:	3710      	adds	r7, #16
 8006a10:	46bd      	mov	sp, r7
 8006a12:	bd80      	pop	{r7, pc}

08006a14 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8006a14:	b580      	push	{r7, lr}
 8006a16:	b086      	sub	sp, #24
 8006a18:	af00      	add	r7, sp, #0
 8006a1a:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 8006a1c:	687b      	ldr	r3, [r7, #4]
 8006a1e:	681b      	ldr	r3, [r3, #0]
 8006a20:	699b      	ldr	r3, [r3, #24]
 8006a22:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 8006a24:	687b      	ldr	r3, [r7, #4]
 8006a26:	681b      	ldr	r3, [r3, #0]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006a2c:	697b      	ldr	r3, [r7, #20]
 8006a2e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a32:	2b00      	cmp	r3, #0
 8006a34:	d00f      	beq.n	8006a56 <HAL_I2C_ER_IRQHandler+0x42>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006a36:	693b      	ldr	r3, [r7, #16]
 8006a38:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 8006a3c:	2b00      	cmp	r3, #0
 8006a3e:	d00a      	beq.n	8006a56 <HAL_I2C_ER_IRQHandler+0x42>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 8006a40:	687b      	ldr	r3, [r7, #4]
 8006a42:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a44:	f043 0201 	orr.w	r2, r3, #1
 8006a48:	687b      	ldr	r3, [r7, #4]
 8006a4a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8006a4c:	687b      	ldr	r3, [r7, #4]
 8006a4e:	681b      	ldr	r3, [r3, #0]
 8006a50:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006a54:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006a56:	697b      	ldr	r3, [r7, #20]
 8006a58:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006a5c:	2b00      	cmp	r3, #0
 8006a5e:	d00f      	beq.n	8006a80 <HAL_I2C_ER_IRQHandler+0x6c>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006a60:	693b      	ldr	r3, [r7, #16]
 8006a62:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 8006a66:	2b00      	cmp	r3, #0
 8006a68:	d00a      	beq.n	8006a80 <HAL_I2C_ER_IRQHandler+0x6c>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 8006a6a:	687b      	ldr	r3, [r7, #4]
 8006a6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a6e:	f043 0208 	orr.w	r2, r3, #8
 8006a72:	687b      	ldr	r3, [r7, #4]
 8006a74:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8006a76:	687b      	ldr	r3, [r7, #4]
 8006a78:	681b      	ldr	r3, [r3, #0]
 8006a7a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8006a7e:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006a80:	697b      	ldr	r3, [r7, #20]
 8006a82:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d00f      	beq.n	8006aaa <HAL_I2C_ER_IRQHandler+0x96>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 8006a8a:	693b      	ldr	r3, [r7, #16]
 8006a8c:	f003 0380 	and.w	r3, r3, #128	; 0x80
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 8006a90:	2b00      	cmp	r3, #0
 8006a92:	d00a      	beq.n	8006aaa <HAL_I2C_ER_IRQHandler+0x96>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 8006a94:	687b      	ldr	r3, [r7, #4]
 8006a96:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006a98:	f043 0202 	orr.w	r2, r3, #2
 8006a9c:	687b      	ldr	r3, [r7, #4]
 8006a9e:	645a      	str	r2, [r3, #68]	; 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	681b      	ldr	r3, [r3, #0]
 8006aa4:	f44f 7200 	mov.w	r2, #512	; 0x200
 8006aa8:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006aae:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 8006ab0:	68fb      	ldr	r3, [r7, #12]
 8006ab2:	f003 030b 	and.w	r3, r3, #11
 8006ab6:	2b00      	cmp	r3, #0
 8006ab8:	d003      	beq.n	8006ac2 <HAL_I2C_ER_IRQHandler+0xae>
  {
    I2C_ITError(hi2c, tmperror);
 8006aba:	68f9      	ldr	r1, [r7, #12]
 8006abc:	6878      	ldr	r0, [r7, #4]
 8006abe:	f001 f92d 	bl	8007d1c <I2C_ITError>
  }
}
 8006ac2:	bf00      	nop
 8006ac4:	3718      	adds	r7, #24
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	bd80      	pop	{r7, pc}

08006aca <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006aca:	b480      	push	{r7}
 8006acc:	b083      	sub	sp, #12
 8006ace:	af00      	add	r7, sp, #0
 8006ad0:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8006ad2:	bf00      	nop
 8006ad4:	370c      	adds	r7, #12
 8006ad6:	46bd      	mov	sp, r7
 8006ad8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006adc:	4770      	bx	lr

08006ade <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006ade:	b480      	push	{r7}
 8006ae0:	b083      	sub	sp, #12
 8006ae2:	af00      	add	r7, sp, #0
 8006ae4:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8006ae6:	bf00      	nop
 8006ae8:	370c      	adds	r7, #12
 8006aea:	46bd      	mov	sp, r7
 8006aec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af0:	4770      	bx	lr

08006af2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006af2:	b480      	push	{r7}
 8006af4:	b083      	sub	sp, #12
 8006af6:	af00      	add	r7, sp, #0
 8006af8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8006afa:	bf00      	nop
 8006afc:	370c      	adds	r7, #12
 8006afe:	46bd      	mov	sp, r7
 8006b00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b04:	4770      	bx	lr

08006b06 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8006b06:	b480      	push	{r7}
 8006b08:	b083      	sub	sp, #12
 8006b0a:	af00      	add	r7, sp, #0
 8006b0c:	6078      	str	r0, [r7, #4]
 8006b0e:	460b      	mov	r3, r1
 8006b10:	70fb      	strb	r3, [r7, #3]
 8006b12:	4613      	mov	r3, r2
 8006b14:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8006b16:	bf00      	nop
 8006b18:	370c      	adds	r7, #12
 8006b1a:	46bd      	mov	sp, r7
 8006b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b20:	4770      	bx	lr

08006b22 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b22:	b480      	push	{r7}
 8006b24:	b083      	sub	sp, #12
 8006b26:	af00      	add	r7, sp, #0
 8006b28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 8006b2a:	bf00      	nop
 8006b2c:	370c      	adds	r7, #12
 8006b2e:	46bd      	mov	sp, r7
 8006b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b34:	4770      	bx	lr

08006b36 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b36:	b480      	push	{r7}
 8006b38:	b083      	sub	sp, #12
 8006b3a:	af00      	add	r7, sp, #0
 8006b3c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8006b3e:	bf00      	nop
 8006b40:	370c      	adds	r7, #12
 8006b42:	46bd      	mov	sp, r7
 8006b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b48:	4770      	bx	lr

08006b4a <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8006b4a:	b480      	push	{r7}
 8006b4c:	b083      	sub	sp, #12
 8006b4e:	af00      	add	r7, sp, #0
 8006b50:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8006b52:	bf00      	nop
 8006b54:	370c      	adds	r7, #12
 8006b56:	46bd      	mov	sp, r7
 8006b58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b5c:	4770      	bx	lr

08006b5e <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8006b5e:	b580      	push	{r7, lr}
 8006b60:	b088      	sub	sp, #32
 8006b62:	af02      	add	r7, sp, #8
 8006b64:	60f8      	str	r0, [r7, #12]
 8006b66:	60b9      	str	r1, [r7, #8]
 8006b68:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 8006b6a:	68bb      	ldr	r3, [r7, #8]
 8006b6c:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006b74:	2b01      	cmp	r3, #1
 8006b76:	d101      	bne.n	8006b7c <I2C_Master_ISR_IT+0x1e>
 8006b78:	2302      	movs	r3, #2
 8006b7a:	e121      	b.n	8006dc0 <I2C_Master_ISR_IT+0x262>
 8006b7c:	68fb      	ldr	r3, [r7, #12]
 8006b7e:	2201      	movs	r2, #1
 8006b80:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006b84:	697b      	ldr	r3, [r7, #20]
 8006b86:	f003 0310 	and.w	r3, r3, #16
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d012      	beq.n	8006bb4 <I2C_Master_ISR_IT+0x56>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006b94:	2b00      	cmp	r3, #0
 8006b96:	d00d      	beq.n	8006bb4 <I2C_Master_ISR_IT+0x56>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006b98:	68fb      	ldr	r3, [r7, #12]
 8006b9a:	681b      	ldr	r3, [r3, #0]
 8006b9c:	2210      	movs	r2, #16
 8006b9e:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ba0:	68fb      	ldr	r3, [r7, #12]
 8006ba2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ba4:	f043 0204 	orr.w	r2, r3, #4
 8006ba8:	68fb      	ldr	r3, [r7, #12]
 8006baa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8006bac:	68f8      	ldr	r0, [r7, #12]
 8006bae:	f001 f9cc 	bl	8007f4a <I2C_Flush_TXDR>
 8006bb2:	e0f2      	b.n	8006d9a <I2C_Master_ISR_IT+0x23c>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006bb4:	697b      	ldr	r3, [r7, #20]
 8006bb6:	f003 0304 	and.w	r3, r3, #4
 8006bba:	2b00      	cmp	r3, #0
 8006bbc:	d022      	beq.n	8006c04 <I2C_Master_ISR_IT+0xa6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d01d      	beq.n	8006c04 <I2C_Master_ISR_IT+0xa6>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8006bc8:	697b      	ldr	r3, [r7, #20]
 8006bca:	f023 0304 	bic.w	r3, r3, #4
 8006bce:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006bd0:	68fb      	ldr	r3, [r7, #12]
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006bd6:	68fb      	ldr	r3, [r7, #12]
 8006bd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bda:	b2d2      	uxtb	r2, r2
 8006bdc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006bde:	68fb      	ldr	r3, [r7, #12]
 8006be0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006be2:	1c5a      	adds	r2, r3, #1
 8006be4:	68fb      	ldr	r3, [r7, #12]
 8006be6:	625a      	str	r2, [r3, #36]	; 0x24

    hi2c->XferSize--;
 8006be8:	68fb      	ldr	r3, [r7, #12]
 8006bea:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006bec:	3b01      	subs	r3, #1
 8006bee:	b29a      	uxth	r2, r3
 8006bf0:	68fb      	ldr	r3, [r7, #12]
 8006bf2:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferCount--;
 8006bf4:	68fb      	ldr	r3, [r7, #12]
 8006bf6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006bf8:	b29b      	uxth	r3, r3
 8006bfa:	3b01      	subs	r3, #1
 8006bfc:	b29a      	uxth	r2, r3
 8006bfe:	68fb      	ldr	r3, [r7, #12]
 8006c00:	855a      	strh	r2, [r3, #42]	; 0x2a
 8006c02:	e0ca      	b.n	8006d9a <I2C_Master_ISR_IT+0x23c>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d128      	bne.n	8006c60 <I2C_Master_ISR_IT+0x102>
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006c0e:	697b      	ldr	r3, [r7, #20]
 8006c10:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) == RESET) && \
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d023      	beq.n	8006c60 <I2C_Master_ISR_IT+0x102>
            (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET)))
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	f003 0302 	and.w	r3, r3, #2
           ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006c1e:	2b00      	cmp	r3, #0
 8006c20:	d01e      	beq.n	8006c60 <I2C_Master_ISR_IT+0x102>
  {
    /* Write data to TXDR */
    if (hi2c->XferCount != 0U)
 8006c22:	68fb      	ldr	r3, [r7, #12]
 8006c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c26:	b29b      	uxth	r3, r3
 8006c28:	2b00      	cmp	r3, #0
 8006c2a:	f000 80b6 	beq.w	8006d9a <I2C_Master_ISR_IT+0x23c>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006c2e:	68fb      	ldr	r3, [r7, #12]
 8006c30:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c32:	781a      	ldrb	r2, [r3, #0]
 8006c34:	68fb      	ldr	r3, [r7, #12]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006c3a:	68fb      	ldr	r3, [r7, #12]
 8006c3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006c3e:	1c5a      	adds	r2, r3, #1
 8006c40:	68fb      	ldr	r3, [r7, #12]
 8006c42:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006c44:	68fb      	ldr	r3, [r7, #12]
 8006c46:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c48:	3b01      	subs	r3, #1
 8006c4a:	b29a      	uxth	r2, r3
 8006c4c:	68fb      	ldr	r3, [r7, #12]
 8006c4e:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006c50:	68fb      	ldr	r3, [r7, #12]
 8006c52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c54:	b29b      	uxth	r3, r3
 8006c56:	3b01      	subs	r3, #1
 8006c58:	b29a      	uxth	r2, r3
 8006c5a:	68fb      	ldr	r3, [r7, #12]
 8006c5c:	855a      	strh	r2, [r3, #42]	; 0x2a
    if (hi2c->XferCount != 0U)
 8006c5e:	e09c      	b.n	8006d9a <I2C_Master_ISR_IT+0x23c>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8006c60:	697b      	ldr	r3, [r7, #20]
 8006c62:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d06a      	beq.n	8006d40 <I2C_Master_ISR_IT+0x1e2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 8006c70:	2b00      	cmp	r3, #0
 8006c72:	d065      	beq.n	8006d40 <I2C_Master_ISR_IT+0x1e2>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006c74:	68fb      	ldr	r3, [r7, #12]
 8006c76:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c78:	b29b      	uxth	r3, r3
 8006c7a:	2b00      	cmp	r3, #0
 8006c7c:	d04e      	beq.n	8006d1c <I2C_Master_ISR_IT+0x1be>
 8006c7e:	68fb      	ldr	r3, [r7, #12]
 8006c80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d14a      	bne.n	8006d1c <I2C_Master_ISR_IT+0x1be>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8006c86:	68fb      	ldr	r3, [r7, #12]
 8006c88:	681b      	ldr	r3, [r3, #0]
 8006c8a:	685b      	ldr	r3, [r3, #4]
 8006c8c:	b29b      	uxth	r3, r3
 8006c8e:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8006c92:	827b      	strh	r3, [r7, #18]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006c94:	68fb      	ldr	r3, [r7, #12]
 8006c96:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006c98:	b29b      	uxth	r3, r3
 8006c9a:	2bff      	cmp	r3, #255	; 0xff
 8006c9c:	d91c      	bls.n	8006cd8 <I2C_Master_ISR_IT+0x17a>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8006c9e:	68fb      	ldr	r3, [r7, #12]
 8006ca0:	681b      	ldr	r3, [r3, #0]
 8006ca2:	699b      	ldr	r3, [r3, #24]
 8006ca4:	0c1b      	lsrs	r3, r3, #16
 8006ca6:	b2db      	uxtb	r3, r3
 8006ca8:	f003 0301 	and.w	r3, r3, #1
 8006cac:	b2db      	uxtb	r3, r3
 8006cae:	2b01      	cmp	r3, #1
 8006cb0:	d103      	bne.n	8006cba <I2C_Master_ISR_IT+0x15c>
        {
          hi2c->XferSize = 1U;
 8006cb2:	68fb      	ldr	r3, [r7, #12]
 8006cb4:	2201      	movs	r2, #1
 8006cb6:	851a      	strh	r2, [r3, #40]	; 0x28
 8006cb8:	e002      	b.n	8006cc0 <I2C_Master_ISR_IT+0x162>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8006cba:	68fb      	ldr	r3, [r7, #12]
 8006cbc:	22ff      	movs	r2, #255	; 0xff
 8006cbe:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 8006cc0:	68fb      	ldr	r3, [r7, #12]
 8006cc2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cc4:	b2da      	uxtb	r2, r3
 8006cc6:	8a79      	ldrh	r1, [r7, #18]
 8006cc8:	2300      	movs	r3, #0
 8006cca:	9300      	str	r3, [sp, #0]
 8006ccc:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8006cd0:	68f8      	ldr	r0, [r7, #12]
 8006cd2:	f001 fa0f 	bl	80080f4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006cd6:	e032      	b.n	8006d3e <I2C_Master_ISR_IT+0x1e0>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006cdc:	b29a      	uxth	r2, r3
 8006cde:	68fb      	ldr	r3, [r7, #12]
 8006ce0:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8006ce2:	68fb      	ldr	r3, [r7, #12]
 8006ce4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ce6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006cea:	d00b      	beq.n	8006d04 <I2C_Master_ISR_IT+0x1a6>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006cec:	68fb      	ldr	r3, [r7, #12]
 8006cee:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006cf0:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 8006cf2:	68fb      	ldr	r3, [r7, #12]
 8006cf4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006cf6:	8a79      	ldrh	r1, [r7, #18]
 8006cf8:	2000      	movs	r0, #0
 8006cfa:	9000      	str	r0, [sp, #0]
 8006cfc:	68f8      	ldr	r0, [r7, #12]
 8006cfe:	f001 f9f9 	bl	80080f4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d02:	e01c      	b.n	8006d3e <I2C_Master_ISR_IT+0x1e0>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 8006d04:	68fb      	ldr	r3, [r7, #12]
 8006d06:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006d08:	b2da      	uxtb	r2, r3
 8006d0a:	8a79      	ldrh	r1, [r7, #18]
 8006d0c:	2300      	movs	r3, #0
 8006d0e:	9300      	str	r3, [sp, #0]
 8006d10:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 8006d14:	68f8      	ldr	r0, [r7, #12]
 8006d16:	f001 f9ed 	bl	80080f4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8006d1a:	e010      	b.n	8006d3e <I2C_Master_ISR_IT+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d26:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d2a:	d003      	beq.n	8006d34 <I2C_Master_ISR_IT+0x1d6>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 8006d2c:	68f8      	ldr	r0, [r7, #12]
 8006d2e:	f000 fcdc 	bl	80076ea <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006d32:	e032      	b.n	8006d9a <I2C_Master_ISR_IT+0x23c>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006d34:	2140      	movs	r1, #64	; 0x40
 8006d36:	68f8      	ldr	r0, [r7, #12]
 8006d38:	f000 fff0 	bl	8007d1c <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 8006d3c:	e02d      	b.n	8006d9a <I2C_Master_ISR_IT+0x23c>
 8006d3e:	e02c      	b.n	8006d9a <I2C_Master_ISR_IT+0x23c>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8006d40:	697b      	ldr	r3, [r7, #20]
 8006d42:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d027      	beq.n	8006d9a <I2C_Master_ISR_IT+0x23c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 8006d50:	2b00      	cmp	r3, #0
 8006d52:	d022      	beq.n	8006d9a <I2C_Master_ISR_IT+0x23c>
  {
    if (hi2c->XferCount == 0U)
 8006d54:	68fb      	ldr	r3, [r7, #12]
 8006d56:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006d58:	b29b      	uxth	r3, r3
 8006d5a:	2b00      	cmp	r3, #0
 8006d5c:	d119      	bne.n	8006d92 <I2C_Master_ISR_IT+0x234>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	681b      	ldr	r3, [r3, #0]
 8006d62:	685b      	ldr	r3, [r3, #4]
 8006d64:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d68:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006d6c:	d015      	beq.n	8006d9a <I2C_Master_ISR_IT+0x23c>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 8006d6e:	68fb      	ldr	r3, [r7, #12]
 8006d70:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d72:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006d76:	d108      	bne.n	8006d8a <I2C_Master_ISR_IT+0x22c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8006d78:	68fb      	ldr	r3, [r7, #12]
 8006d7a:	681b      	ldr	r3, [r3, #0]
 8006d7c:	685a      	ldr	r2, [r3, #4]
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	681b      	ldr	r3, [r3, #0]
 8006d82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8006d86:	605a      	str	r2, [r3, #4]
 8006d88:	e007      	b.n	8006d9a <I2C_Master_ISR_IT+0x23c>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8006d8a:	68f8      	ldr	r0, [r7, #12]
 8006d8c:	f000 fcad 	bl	80076ea <I2C_ITMasterSeqCplt>
 8006d90:	e003      	b.n	8006d9a <I2C_Master_ISR_IT+0x23c>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8006d92:	2140      	movs	r1, #64	; 0x40
 8006d94:	68f8      	ldr	r0, [r7, #12]
 8006d96:	f000 ffc1 	bl	8007d1c <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006d9a:	697b      	ldr	r3, [r7, #20]
 8006d9c:	f003 0320 	and.w	r3, r3, #32
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d008      	beq.n	8006db6 <I2C_Master_ISR_IT+0x258>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006daa:	2b00      	cmp	r3, #0
 8006dac:	d003      	beq.n	8006db6 <I2C_Master_ISR_IT+0x258>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 8006dae:	6979      	ldr	r1, [r7, #20]
 8006db0:	68f8      	ldr	r0, [r7, #12]
 8006db2:	f000 fd33 	bl	800781c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006db6:	68fb      	ldr	r3, [r7, #12]
 8006db8:	2200      	movs	r2, #0
 8006dba:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3718      	adds	r7, #24
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	bd80      	pop	{r7, pc}

08006dc8 <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 8006dc8:	b580      	push	{r7, lr}
 8006dca:	b086      	sub	sp, #24
 8006dcc:	af00      	add	r7, sp, #0
 8006dce:	60f8      	str	r0, [r7, #12]
 8006dd0:	60b9      	str	r1, [r7, #8]
 8006dd2:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006dd8:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 8006dda:	68bb      	ldr	r3, [r7, #8]
 8006ddc:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 8006dde:	68fb      	ldr	r3, [r7, #12]
 8006de0:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006de4:	2b01      	cmp	r3, #1
 8006de6:	d101      	bne.n	8006dec <I2C_Slave_ISR_IT+0x24>
 8006de8:	2302      	movs	r3, #2
 8006dea:	e0e2      	b.n	8006fb2 <I2C_Slave_ISR_IT+0x1ea>
 8006dec:	68fb      	ldr	r3, [r7, #12]
 8006dee:	2201      	movs	r2, #1
 8006df0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006df4:	693b      	ldr	r3, [r7, #16]
 8006df6:	f003 0320 	and.w	r3, r3, #32
 8006dfa:	2b00      	cmp	r3, #0
 8006dfc:	d009      	beq.n	8006e12 <I2C_Slave_ISR_IT+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d004      	beq.n	8006e12 <I2C_Slave_ISR_IT+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 8006e08:	6939      	ldr	r1, [r7, #16]
 8006e0a:	68f8      	ldr	r0, [r7, #12]
 8006e0c:	f000 fdce 	bl	80079ac <I2C_ITSlaveCplt>
 8006e10:	e0ca      	b.n	8006fa8 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006e12:	693b      	ldr	r3, [r7, #16]
 8006e14:	f003 0310 	and.w	r3, r3, #16
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d04b      	beq.n	8006eb4 <I2C_Slave_ISR_IT+0xec>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	d046      	beq.n	8006eb4 <I2C_Slave_ISR_IT+0xec>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8006e26:	68fb      	ldr	r3, [r7, #12]
 8006e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006e2a:	b29b      	uxth	r3, r3
 8006e2c:	2b00      	cmp	r3, #0
 8006e2e:	d128      	bne.n	8006e82 <I2C_Slave_ISR_IT+0xba>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8006e30:	68fb      	ldr	r3, [r7, #12]
 8006e32:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e36:	b2db      	uxtb	r3, r3
 8006e38:	2b28      	cmp	r3, #40	; 0x28
 8006e3a:	d108      	bne.n	8006e4e <I2C_Slave_ISR_IT+0x86>
 8006e3c:	697b      	ldr	r3, [r7, #20]
 8006e3e:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8006e42:	d104      	bne.n	8006e4e <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8006e44:	6939      	ldr	r1, [r7, #16]
 8006e46:	68f8      	ldr	r0, [r7, #12]
 8006e48:	f000 ff14 	bl	8007c74 <I2C_ITListenCplt>
 8006e4c:	e031      	b.n	8006eb2 <I2C_Slave_ISR_IT+0xea>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8006e4e:	68fb      	ldr	r3, [r7, #12]
 8006e50:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8006e54:	b2db      	uxtb	r3, r3
 8006e56:	2b29      	cmp	r3, #41	; 0x29
 8006e58:	d10e      	bne.n	8006e78 <I2C_Slave_ISR_IT+0xb0>
 8006e5a:	697b      	ldr	r3, [r7, #20]
 8006e5c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006e60:	d00a      	beq.n	8006e78 <I2C_Slave_ISR_IT+0xb0>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e62:	68fb      	ldr	r3, [r7, #12]
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	2210      	movs	r2, #16
 8006e68:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8006e6a:	68f8      	ldr	r0, [r7, #12]
 8006e6c:	f001 f86d 	bl	8007f4a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006e70:	68f8      	ldr	r0, [r7, #12]
 8006e72:	f000 fc77 	bl	8007764 <I2C_ITSlaveSeqCplt>
 8006e76:	e01c      	b.n	8006eb2 <I2C_Slave_ISR_IT+0xea>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e78:	68fb      	ldr	r3, [r7, #12]
 8006e7a:	681b      	ldr	r3, [r3, #0]
 8006e7c:	2210      	movs	r2, #16
 8006e7e:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 8006e80:	e08f      	b.n	8006fa2 <I2C_Slave_ISR_IT+0x1da>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006e82:	68fb      	ldr	r3, [r7, #12]
 8006e84:	681b      	ldr	r3, [r3, #0]
 8006e86:	2210      	movs	r2, #16
 8006e88:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006e8a:	68fb      	ldr	r3, [r7, #12]
 8006e8c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e8e:	f043 0204 	orr.w	r2, r3, #4
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8006e96:	697b      	ldr	r3, [r7, #20]
 8006e98:	2b00      	cmp	r3, #0
 8006e9a:	d003      	beq.n	8006ea4 <I2C_Slave_ISR_IT+0xdc>
 8006e9c:	697b      	ldr	r3, [r7, #20]
 8006e9e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006ea2:	d17e      	bne.n	8006fa2 <I2C_Slave_ISR_IT+0x1da>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8006ea4:	68fb      	ldr	r3, [r7, #12]
 8006ea6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ea8:	4619      	mov	r1, r3
 8006eaa:	68f8      	ldr	r0, [r7, #12]
 8006eac:	f000 ff36 	bl	8007d1c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8006eb0:	e077      	b.n	8006fa2 <I2C_Slave_ISR_IT+0x1da>
 8006eb2:	e076      	b.n	8006fa2 <I2C_Slave_ISR_IT+0x1da>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006eb4:	693b      	ldr	r3, [r7, #16]
 8006eb6:	f003 0304 	and.w	r3, r3, #4
 8006eba:	2b00      	cmp	r3, #0
 8006ebc:	d02f      	beq.n	8006f1e <I2C_Slave_ISR_IT+0x156>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	f003 0304 	and.w	r3, r3, #4
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 8006ec4:	2b00      	cmp	r3, #0
 8006ec6:	d02a      	beq.n	8006f1e <I2C_Slave_ISR_IT+0x156>
  {
    if (hi2c->XferCount > 0U)
 8006ec8:	68fb      	ldr	r3, [r7, #12]
 8006eca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006ecc:	b29b      	uxth	r3, r3
 8006ece:	2b00      	cmp	r3, #0
 8006ed0:	d018      	beq.n	8006f04 <I2C_Slave_ISR_IT+0x13c>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8006ed2:	68fb      	ldr	r3, [r7, #12]
 8006ed4:	681b      	ldr	r3, [r3, #0]
 8006ed6:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8006ed8:	68fb      	ldr	r3, [r7, #12]
 8006eda:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006edc:	b2d2      	uxtb	r2, r2
 8006ede:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006ee4:	1c5a      	adds	r2, r3, #1
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferSize--;
 8006eea:	68fb      	ldr	r3, [r7, #12]
 8006eec:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006eee:	3b01      	subs	r3, #1
 8006ef0:	b29a      	uxth	r2, r3
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8006ef6:	68fb      	ldr	r3, [r7, #12]
 8006ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006efa:	b29b      	uxth	r3, r3
 8006efc:	3b01      	subs	r3, #1
 8006efe:	b29a      	uxth	r2, r3
 8006f00:	68fb      	ldr	r3, [r7, #12]
 8006f02:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f08:	b29b      	uxth	r3, r3
 8006f0a:	2b00      	cmp	r3, #0
 8006f0c:	d14b      	bne.n	8006fa6 <I2C_Slave_ISR_IT+0x1de>
 8006f0e:	697b      	ldr	r3, [r7, #20]
 8006f10:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8006f14:	d047      	beq.n	8006fa6 <I2C_Slave_ISR_IT+0x1de>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 8006f16:	68f8      	ldr	r0, [r7, #12]
 8006f18:	f000 fc24 	bl	8007764 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 8006f1c:	e043      	b.n	8006fa6 <I2C_Slave_ISR_IT+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006f1e:	693b      	ldr	r3, [r7, #16]
 8006f20:	f003 0308 	and.w	r3, r3, #8
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d009      	beq.n	8006f3c <I2C_Slave_ISR_IT+0x174>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 8006f2e:	2b00      	cmp	r3, #0
 8006f30:	d004      	beq.n	8006f3c <I2C_Slave_ISR_IT+0x174>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 8006f32:	6939      	ldr	r1, [r7, #16]
 8006f34:	68f8      	ldr	r0, [r7, #12]
 8006f36:	f000 fb54 	bl	80075e2 <I2C_ITAddrCplt>
 8006f3a:	e035      	b.n	8006fa8 <I2C_Slave_ISR_IT+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	f003 0302 	and.w	r3, r3, #2
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d030      	beq.n	8006fa8 <I2C_Slave_ISR_IT+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8006f46:	687b      	ldr	r3, [r7, #4]
 8006f48:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d02b      	beq.n	8006fa8 <I2C_Slave_ISR_IT+0x1e0>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 8006f50:	68fb      	ldr	r3, [r7, #12]
 8006f52:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f54:	b29b      	uxth	r3, r3
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d018      	beq.n	8006f8c <I2C_Slave_ISR_IT+0x1c4>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 8006f5a:	68fb      	ldr	r3, [r7, #12]
 8006f5c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f5e:	781a      	ldrb	r2, [r3, #0]
 8006f60:	68fb      	ldr	r3, [r7, #12]
 8006f62:	681b      	ldr	r3, [r3, #0]
 8006f64:	629a      	str	r2, [r3, #40]	; 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006f66:	68fb      	ldr	r3, [r7, #12]
 8006f68:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006f6a:	1c5a      	adds	r2, r3, #1
 8006f6c:	68fb      	ldr	r3, [r7, #12]
 8006f6e:	625a      	str	r2, [r3, #36]	; 0x24

      hi2c->XferCount--;
 8006f70:	68fb      	ldr	r3, [r7, #12]
 8006f72:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006f74:	b29b      	uxth	r3, r3
 8006f76:	3b01      	subs	r3, #1
 8006f78:	b29a      	uxth	r2, r3
 8006f7a:	68fb      	ldr	r3, [r7, #12]
 8006f7c:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8006f82:	3b01      	subs	r3, #1
 8006f84:	b29a      	uxth	r2, r3
 8006f86:	68fb      	ldr	r3, [r7, #12]
 8006f88:	851a      	strh	r2, [r3, #40]	; 0x28
 8006f8a:	e00d      	b.n	8006fa8 <I2C_Slave_ISR_IT+0x1e0>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 8006f8c:	697b      	ldr	r3, [r7, #20]
 8006f8e:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006f92:	d002      	beq.n	8006f9a <I2C_Slave_ISR_IT+0x1d2>
 8006f94:	697b      	ldr	r3, [r7, #20]
 8006f96:	2b00      	cmp	r3, #0
 8006f98:	d106      	bne.n	8006fa8 <I2C_Slave_ISR_IT+0x1e0>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8006f9a:	68f8      	ldr	r0, [r7, #12]
 8006f9c:	f000 fbe2 	bl	8007764 <I2C_ITSlaveSeqCplt>
 8006fa0:	e002      	b.n	8006fa8 <I2C_Slave_ISR_IT+0x1e0>
    if (hi2c->XferCount == 0U)
 8006fa2:	bf00      	nop
 8006fa4:	e000      	b.n	8006fa8 <I2C_Slave_ISR_IT+0x1e0>
    if ((hi2c->XferCount == 0U) && \
 8006fa6:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8006fa8:	68fb      	ldr	r3, [r7, #12]
 8006faa:	2200      	movs	r2, #0
 8006fac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8006fb0:	2300      	movs	r3, #0
}
 8006fb2:	4618      	mov	r0, r3
 8006fb4:	3718      	adds	r7, #24
 8006fb6:	46bd      	mov	sp, r7
 8006fb8:	bd80      	pop	{r7, pc}

08006fba <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 8006fba:	b580      	push	{r7, lr}
 8006fbc:	b088      	sub	sp, #32
 8006fbe:	af02      	add	r7, sp, #8
 8006fc0:	60f8      	str	r0, [r7, #12]
 8006fc2:	60b9      	str	r1, [r7, #8]
 8006fc4:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8006fcc:	2b01      	cmp	r3, #1
 8006fce:	d101      	bne.n	8006fd4 <I2C_Master_ISR_DMA+0x1a>
 8006fd0:	2302      	movs	r3, #2
 8006fd2:	e0e7      	b.n	80071a4 <I2C_Master_ISR_DMA+0x1ea>
 8006fd4:	68fb      	ldr	r3, [r7, #12]
 8006fd6:	2201      	movs	r2, #1
 8006fd8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006fdc:	68bb      	ldr	r3, [r7, #8]
 8006fde:	f003 0310 	and.w	r3, r3, #16
 8006fe2:	2b00      	cmp	r3, #0
 8006fe4:	d016      	beq.n	8007014 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8006fec:	2b00      	cmp	r3, #0
 8006fee:	d011      	beq.n	8007014 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	681b      	ldr	r3, [r3, #0]
 8006ff4:	2210      	movs	r2, #16
 8006ff6:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8006ff8:	68fb      	ldr	r3, [r7, #12]
 8006ffa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006ffc:	f043 0204 	orr.w	r2, r3, #4
 8007000:	68fb      	ldr	r3, [r7, #12]
 8007002:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007004:	2120      	movs	r1, #32
 8007006:	68f8      	ldr	r0, [r7, #12]
 8007008:	f001 f8a6 	bl	8008158 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800700c:	68f8      	ldr	r0, [r7, #12]
 800700e:	f000 ff9c 	bl	8007f4a <I2C_Flush_TXDR>
 8007012:	e0c2      	b.n	800719a <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007014:	68bb      	ldr	r3, [r7, #8]
 8007016:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800701a:	2b00      	cmp	r3, #0
 800701c:	d07f      	beq.n	800711e <I2C_Master_ISR_DMA+0x164>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007024:	2b00      	cmp	r3, #0
 8007026:	d07a      	beq.n	800711e <I2C_Master_ISR_DMA+0x164>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 8007028:	68fb      	ldr	r3, [r7, #12]
 800702a:	681b      	ldr	r3, [r3, #0]
 800702c:	681a      	ldr	r2, [r3, #0]
 800702e:	68fb      	ldr	r3, [r7, #12]
 8007030:	681b      	ldr	r3, [r3, #0]
 8007032:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007036:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 8007038:	68fb      	ldr	r3, [r7, #12]
 800703a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800703c:	b29b      	uxth	r3, r3
 800703e:	2b00      	cmp	r3, #0
 8007040:	d05c      	beq.n	80070fc <I2C_Master_ISR_DMA+0x142>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 8007042:	68fb      	ldr	r3, [r7, #12]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	b29b      	uxth	r3, r3
 800704a:	f3c3 0309 	ubfx	r3, r3, #0, #10
 800704e:	827b      	strh	r3, [r7, #18]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007050:	68fb      	ldr	r3, [r7, #12]
 8007052:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007054:	b29b      	uxth	r3, r3
 8007056:	2bff      	cmp	r3, #255	; 0xff
 8007058:	d914      	bls.n	8007084 <I2C_Master_ISR_DMA+0xca>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800705a:	68fb      	ldr	r3, [r7, #12]
 800705c:	681b      	ldr	r3, [r3, #0]
 800705e:	699b      	ldr	r3, [r3, #24]
 8007060:	0c1b      	lsrs	r3, r3, #16
 8007062:	b2db      	uxtb	r3, r3
 8007064:	f003 0301 	and.w	r3, r3, #1
 8007068:	b2db      	uxtb	r3, r3
 800706a:	2b01      	cmp	r3, #1
 800706c:	d103      	bne.n	8007076 <I2C_Master_ISR_DMA+0xbc>
        {
          hi2c->XferSize = 1U;
 800706e:	68fb      	ldr	r3, [r7, #12]
 8007070:	2201      	movs	r2, #1
 8007072:	851a      	strh	r2, [r3, #40]	; 0x28
 8007074:	e002      	b.n	800707c <I2C_Master_ISR_DMA+0xc2>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	22ff      	movs	r2, #255	; 0xff
 800707a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        xfermode = I2C_RELOAD_MODE;
 800707c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 8007080:	617b      	str	r3, [r7, #20]
 8007082:	e010      	b.n	80070a6 <I2C_Master_ISR_DMA+0xec>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 8007084:	68fb      	ldr	r3, [r7, #12]
 8007086:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007088:	b29a      	uxth	r2, r3
 800708a:	68fb      	ldr	r3, [r7, #12]
 800708c:	851a      	strh	r2, [r3, #40]	; 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800708e:	68fb      	ldr	r3, [r7, #12]
 8007090:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007092:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007096:	d003      	beq.n	80070a0 <I2C_Master_ISR_DMA+0xe6>
        {
          xfermode = hi2c->XferOptions;
 8007098:	68fb      	ldr	r3, [r7, #12]
 800709a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800709c:	617b      	str	r3, [r7, #20]
 800709e:	e002      	b.n	80070a6 <I2C_Master_ISR_DMA+0xec>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 80070a0:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80070a4:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 80070a6:	68fb      	ldr	r3, [r7, #12]
 80070a8:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070aa:	b2da      	uxtb	r2, r3
 80070ac:	8a79      	ldrh	r1, [r7, #18]
 80070ae:	2300      	movs	r3, #0
 80070b0:	9300      	str	r3, [sp, #0]
 80070b2:	697b      	ldr	r3, [r7, #20]
 80070b4:	68f8      	ldr	r0, [r7, #12]
 80070b6:	f001 f81d 	bl	80080f4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80070ba:	68fb      	ldr	r3, [r7, #12]
 80070bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80070be:	b29a      	uxth	r2, r3
 80070c0:	68fb      	ldr	r3, [r7, #12]
 80070c2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80070c4:	1ad3      	subs	r3, r2, r3
 80070c6:	b29a      	uxth	r2, r3
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80070cc:	68fb      	ldr	r3, [r7, #12]
 80070ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80070d2:	b2db      	uxtb	r3, r3
 80070d4:	2b22      	cmp	r3, #34	; 0x22
 80070d6:	d108      	bne.n	80070ea <I2C_Master_ISR_DMA+0x130>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80070d8:	68fb      	ldr	r3, [r7, #12]
 80070da:	681b      	ldr	r3, [r3, #0]
 80070dc:	681a      	ldr	r2, [r3, #0]
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	681b      	ldr	r3, [r3, #0]
 80070e2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80070e6:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80070e8:	e057      	b.n	800719a <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80070ea:	68fb      	ldr	r3, [r7, #12]
 80070ec:	681b      	ldr	r3, [r3, #0]
 80070ee:	681a      	ldr	r2, [r3, #0]
 80070f0:	68fb      	ldr	r3, [r7, #12]
 80070f2:	681b      	ldr	r3, [r3, #0]
 80070f4:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80070f8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80070fa:	e04e      	b.n	800719a <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	685b      	ldr	r3, [r3, #4]
 8007102:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007106:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800710a:	d003      	beq.n	8007114 <I2C_Master_ISR_DMA+0x15a>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800710c:	68f8      	ldr	r0, [r7, #12]
 800710e:	f000 faec 	bl	80076ea <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 8007112:	e042      	b.n	800719a <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007114:	2140      	movs	r1, #64	; 0x40
 8007116:	68f8      	ldr	r0, [r7, #12]
 8007118:	f000 fe00 	bl	8007d1c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800711c:	e03d      	b.n	800719a <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800711e:	68bb      	ldr	r3, [r7, #8]
 8007120:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007124:	2b00      	cmp	r3, #0
 8007126:	d028      	beq.n	800717a <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800712e:	2b00      	cmp	r3, #0
 8007130:	d023      	beq.n	800717a <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 8007132:	68fb      	ldr	r3, [r7, #12]
 8007134:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007136:	b29b      	uxth	r3, r3
 8007138:	2b00      	cmp	r3, #0
 800713a:	d119      	bne.n	8007170 <I2C_Master_ISR_DMA+0x1b6>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800713c:	68fb      	ldr	r3, [r7, #12]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	685b      	ldr	r3, [r3, #4]
 8007142:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007146:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 800714a:	d025      	beq.n	8007198 <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800714c:	68fb      	ldr	r3, [r7, #12]
 800714e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007150:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007154:	d108      	bne.n	8007168 <I2C_Master_ISR_DMA+0x1ae>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 8007156:	68fb      	ldr	r3, [r7, #12]
 8007158:	681b      	ldr	r3, [r3, #0]
 800715a:	685a      	ldr	r2, [r3, #4]
 800715c:	68fb      	ldr	r3, [r7, #12]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007164:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 8007166:	e017      	b.n	8007198 <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 8007168:	68f8      	ldr	r0, [r7, #12]
 800716a:	f000 fabe 	bl	80076ea <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800716e:	e013      	b.n	8007198 <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 8007170:	2140      	movs	r1, #64	; 0x40
 8007172:	68f8      	ldr	r0, [r7, #12]
 8007174:	f000 fdd2 	bl	8007d1c <I2C_ITError>
    if (hi2c->XferCount == 0U)
 8007178:	e00e      	b.n	8007198 <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800717a:	68bb      	ldr	r3, [r7, #8]
 800717c:	f003 0320 	and.w	r3, r3, #32
 8007180:	2b00      	cmp	r3, #0
 8007182:	d00a      	beq.n	800719a <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 8007184:	687b      	ldr	r3, [r7, #4]
 8007186:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800718a:	2b00      	cmp	r3, #0
 800718c:	d005      	beq.n	800719a <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800718e:	68b9      	ldr	r1, [r7, #8]
 8007190:	68f8      	ldr	r0, [r7, #12]
 8007192:	f000 fb43 	bl	800781c <I2C_ITMasterCplt>
 8007196:	e000      	b.n	800719a <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 8007198:	bf00      	nop
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800719a:	68fb      	ldr	r3, [r7, #12]
 800719c:	2200      	movs	r2, #0
 800719e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80071a2:	2300      	movs	r3, #0
}
 80071a4:	4618      	mov	r0, r3
 80071a6:	3718      	adds	r7, #24
 80071a8:	46bd      	mov	sp, r7
 80071aa:	bd80      	pop	{r7, pc}

080071ac <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 80071ac:	b580      	push	{r7, lr}
 80071ae:	b088      	sub	sp, #32
 80071b0:	af02      	add	r7, sp, #8
 80071b2:	60f8      	str	r0, [r7, #12]
 80071b4:	60b9      	str	r1, [r7, #8]
 80071b6:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 80071b8:	4b90      	ldr	r3, [pc, #576]	; (80073fc <I2C_Mem_ISR_DMA+0x250>)
 80071ba:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 80071bc:	68fb      	ldr	r3, [r7, #12]
 80071be:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80071c2:	2b01      	cmp	r3, #1
 80071c4:	d101      	bne.n	80071ca <I2C_Mem_ISR_DMA+0x1e>
 80071c6:	2302      	movs	r3, #2
 80071c8:	e12f      	b.n	800742a <I2C_Mem_ISR_DMA+0x27e>
 80071ca:	68fb      	ldr	r3, [r7, #12]
 80071cc:	2201      	movs	r2, #1
 80071ce:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80071d2:	68bb      	ldr	r3, [r7, #8]
 80071d4:	f003 0310 	and.w	r3, r3, #16
 80071d8:	2b00      	cmp	r3, #0
 80071da:	d016      	beq.n	800720a <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 80071e2:	2b00      	cmp	r3, #0
 80071e4:	d011      	beq.n	800720a <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80071e6:	68fb      	ldr	r3, [r7, #12]
 80071e8:	681b      	ldr	r3, [r3, #0]
 80071ea:	2210      	movs	r2, #16
 80071ec:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80071ee:	68fb      	ldr	r3, [r7, #12]
 80071f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071f2:	f043 0204 	orr.w	r2, r3, #4
 80071f6:	68fb      	ldr	r3, [r7, #12]
 80071f8:	645a      	str	r2, [r3, #68]	; 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 80071fa:	2120      	movs	r1, #32
 80071fc:	68f8      	ldr	r0, [r7, #12]
 80071fe:	f000 ffab 	bl	8008158 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007202:	68f8      	ldr	r0, [r7, #12]
 8007204:	f000 fea1 	bl	8007f4a <I2C_Flush_TXDR>
 8007208:	e10a      	b.n	8007420 <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800720a:	68bb      	ldr	r3, [r7, #8]
 800720c:	f003 0302 	and.w	r3, r3, #2
 8007210:	2b00      	cmp	r3, #0
 8007212:	d00e      	beq.n	8007232 <I2C_Mem_ISR_DMA+0x86>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	f003 0302 	and.w	r3, r3, #2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800721a:	2b00      	cmp	r3, #0
 800721c:	d009      	beq.n	8007232 <I2C_Mem_ISR_DMA+0x86>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800721e:	68fb      	ldr	r3, [r7, #12]
 8007220:	681b      	ldr	r3, [r3, #0]
 8007222:	68fa      	ldr	r2, [r7, #12]
 8007224:	6d12      	ldr	r2, [r2, #80]	; 0x50
 8007226:	629a      	str	r2, [r3, #40]	; 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 8007228:	68fb      	ldr	r3, [r7, #12]
 800722a:	f04f 32ff 	mov.w	r2, #4294967295
 800722e:	651a      	str	r2, [r3, #80]	; 0x50
 8007230:	e0f6      	b.n	8007420 <I2C_Mem_ISR_DMA+0x274>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007232:	68bb      	ldr	r3, [r7, #8]
 8007234:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007238:	2b00      	cmp	r3, #0
 800723a:	d06d      	beq.n	8007318 <I2C_Mem_ISR_DMA+0x16c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800723c:	687b      	ldr	r3, [r7, #4]
 800723e:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 8007242:	2b00      	cmp	r3, #0
 8007244:	d068      	beq.n	8007318 <I2C_Mem_ISR_DMA+0x16c>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 8007246:	2101      	movs	r1, #1
 8007248:	68f8      	ldr	r0, [r7, #12]
 800724a:	f001 f809 	bl	8008260 <I2C_Disable_IRQ>

    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800724e:	2110      	movs	r1, #16
 8007250:	68f8      	ldr	r0, [r7, #12]
 8007252:	f000 ff81 	bl	8008158 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 8007256:	68fb      	ldr	r3, [r7, #12]
 8007258:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800725a:	b29b      	uxth	r3, r3
 800725c:	2b00      	cmp	r3, #0
 800725e:	d056      	beq.n	800730e <I2C_Mem_ISR_DMA+0x162>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007260:	68fb      	ldr	r3, [r7, #12]
 8007262:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007264:	b29b      	uxth	r3, r3
 8007266:	2bff      	cmp	r3, #255	; 0xff
 8007268:	d91e      	bls.n	80072a8 <I2C_Mem_ISR_DMA+0xfc>
      {
        /* Errata workaround 170323 */
        if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 800726a:	68fb      	ldr	r3, [r7, #12]
 800726c:	681b      	ldr	r3, [r3, #0]
 800726e:	699b      	ldr	r3, [r3, #24]
 8007270:	0c1b      	lsrs	r3, r3, #16
 8007272:	b2db      	uxtb	r3, r3
 8007274:	f003 0301 	and.w	r3, r3, #1
 8007278:	b2db      	uxtb	r3, r3
 800727a:	2b01      	cmp	r3, #1
 800727c:	d103      	bne.n	8007286 <I2C_Mem_ISR_DMA+0xda>
        {
          hi2c->XferSize = 1U;
 800727e:	68fb      	ldr	r3, [r7, #12]
 8007280:	2201      	movs	r2, #1
 8007282:	851a      	strh	r2, [r3, #40]	; 0x28
 8007284:	e002      	b.n	800728c <I2C_Mem_ISR_DMA+0xe0>
        }
        else
        {
          hi2c->XferSize = MAX_NBYTE_SIZE;
 8007286:	68fb      	ldr	r3, [r7, #12]
 8007288:	22ff      	movs	r2, #255	; 0xff
 800728a:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8007290:	b299      	uxth	r1, r3
 8007292:	68fb      	ldr	r3, [r7, #12]
 8007294:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007296:	b2da      	uxtb	r2, r3
 8007298:	2300      	movs	r3, #0
 800729a:	9300      	str	r3, [sp, #0]
 800729c:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 80072a0:	68f8      	ldr	r0, [r7, #12]
 80072a2:	f000 ff27 	bl	80080f4 <I2C_TransferConfig>
 80072a6:	e011      	b.n	80072cc <I2C_Mem_ISR_DMA+0x120>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 80072a8:	68fb      	ldr	r3, [r7, #12]
 80072aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072ac:	b29a      	uxth	r2, r3
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	851a      	strh	r2, [r3, #40]	; 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 80072b2:	68fb      	ldr	r3, [r7, #12]
 80072b4:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80072b6:	b299      	uxth	r1, r3
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072bc:	b2da      	uxtb	r2, r3
 80072be:	2300      	movs	r3, #0
 80072c0:	9300      	str	r3, [sp, #0]
 80072c2:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80072c6:	68f8      	ldr	r0, [r7, #12]
 80072c8:	f000 ff14 	bl	80080f4 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 80072cc:	68fb      	ldr	r3, [r7, #12]
 80072ce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80072d0:	b29a      	uxth	r2, r3
 80072d2:	68fb      	ldr	r3, [r7, #12]
 80072d4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80072d6:	1ad3      	subs	r3, r2, r3
 80072d8:	b29a      	uxth	r2, r3
 80072da:	68fb      	ldr	r3, [r7, #12]
 80072dc:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80072de:	68fb      	ldr	r3, [r7, #12]
 80072e0:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072e4:	b2db      	uxtb	r3, r3
 80072e6:	2b22      	cmp	r3, #34	; 0x22
 80072e8:	d108      	bne.n	80072fc <I2C_Mem_ISR_DMA+0x150>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80072ea:	68fb      	ldr	r3, [r7, #12]
 80072ec:	681b      	ldr	r3, [r3, #0]
 80072ee:	681a      	ldr	r2, [r3, #0]
 80072f0:	68fb      	ldr	r3, [r7, #12]
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80072f8:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 80072fa:	e091      	b.n	8007420 <I2C_Mem_ISR_DMA+0x274>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80072fc:	68fb      	ldr	r3, [r7, #12]
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	681a      	ldr	r2, [r3, #0]
 8007302:	68fb      	ldr	r3, [r7, #12]
 8007304:	681b      	ldr	r3, [r3, #0]
 8007306:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800730a:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800730c:	e088      	b.n	8007420 <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800730e:	2140      	movs	r1, #64	; 0x40
 8007310:	68f8      	ldr	r0, [r7, #12]
 8007312:	f000 fd03 	bl	8007d1c <I2C_ITError>
    if (hi2c->XferCount != 0U)
 8007316:	e083      	b.n	8007420 <I2C_Mem_ISR_DMA+0x274>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007318:	68bb      	ldr	r3, [r7, #8]
 800731a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800731e:	2b00      	cmp	r3, #0
 8007320:	d070      	beq.n	8007404 <I2C_Mem_ISR_DMA+0x258>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	f003 0340 	and.w	r3, r3, #64	; 0x40
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 8007328:	2b00      	cmp	r3, #0
 800732a:	d06b      	beq.n	8007404 <I2C_Mem_ISR_DMA+0x258>
  {
    /* Disable Interrupt related to address step */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800732c:	2101      	movs	r1, #1
 800732e:	68f8      	ldr	r0, [r7, #12]
 8007330:	f000 ff96 	bl	8008260 <I2C_Disable_IRQ>

    /* Enable only Error and NACK interrupt for data transfer */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 8007334:	2110      	movs	r1, #16
 8007336:	68f8      	ldr	r0, [r7, #12]
 8007338:	f000 ff0e 	bl	8008158 <I2C_Enable_IRQ>

    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800733c:	68fb      	ldr	r3, [r7, #12]
 800733e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007342:	b2db      	uxtb	r3, r3
 8007344:	2b22      	cmp	r3, #34	; 0x22
 8007346:	d101      	bne.n	800734c <I2C_Mem_ISR_DMA+0x1a0>
    {
      direction = I2C_GENERATE_START_READ;
 8007348:	4b2d      	ldr	r3, [pc, #180]	; (8007400 <I2C_Mem_ISR_DMA+0x254>)
 800734a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800734c:	68fb      	ldr	r3, [r7, #12]
 800734e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007350:	b29b      	uxth	r3, r3
 8007352:	2bff      	cmp	r3, #255	; 0xff
 8007354:	d91e      	bls.n	8007394 <I2C_Mem_ISR_DMA+0x1e8>
    {
      /* Errata workaround 170323 */
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8007356:	68fb      	ldr	r3, [r7, #12]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	699b      	ldr	r3, [r3, #24]
 800735c:	0c1b      	lsrs	r3, r3, #16
 800735e:	b2db      	uxtb	r3, r3
 8007360:	f003 0301 	and.w	r3, r3, #1
 8007364:	b2db      	uxtb	r3, r3
 8007366:	2b01      	cmp	r3, #1
 8007368:	d103      	bne.n	8007372 <I2C_Mem_ISR_DMA+0x1c6>
      {
        hi2c->XferSize = 1U;
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	2201      	movs	r2, #1
 800736e:	851a      	strh	r2, [r3, #40]	; 0x28
 8007370:	e002      	b.n	8007378 <I2C_Mem_ISR_DMA+0x1cc>
      }
      else
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007372:	68fb      	ldr	r3, [r7, #12]
 8007374:	22ff      	movs	r2, #255	; 0xff
 8007376:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 8007378:	68fb      	ldr	r3, [r7, #12]
 800737a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800737c:	b299      	uxth	r1, r3
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007382:	b2da      	uxtb	r2, r3
 8007384:	697b      	ldr	r3, [r7, #20]
 8007386:	9300      	str	r3, [sp, #0]
 8007388:	f04f 7380 	mov.w	r3, #16777216	; 0x1000000
 800738c:	68f8      	ldr	r0, [r7, #12]
 800738e:	f000 feb1 	bl	80080f4 <I2C_TransferConfig>
 8007392:	e011      	b.n	80073b8 <I2C_Mem_ISR_DMA+0x20c>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 8007394:	68fb      	ldr	r3, [r7, #12]
 8007396:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007398:	b29a      	uxth	r2, r3
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	851a      	strh	r2, [r3, #40]	; 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800739e:	68fb      	ldr	r3, [r7, #12]
 80073a0:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80073a2:	b299      	uxth	r1, r3
 80073a4:	68fb      	ldr	r3, [r7, #12]
 80073a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073a8:	b2da      	uxtb	r2, r3
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	9300      	str	r3, [sp, #0]
 80073ae:	f04f 7300 	mov.w	r3, #33554432	; 0x2000000
 80073b2:	68f8      	ldr	r0, [r7, #12]
 80073b4:	f000 fe9e 	bl	80080f4 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 80073b8:	68fb      	ldr	r3, [r7, #12]
 80073ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80073bc:	b29a      	uxth	r2, r3
 80073be:	68fb      	ldr	r3, [r7, #12]
 80073c0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80073c2:	1ad3      	subs	r3, r2, r3
 80073c4:	b29a      	uxth	r2, r3
 80073c6:	68fb      	ldr	r3, [r7, #12]
 80073c8:	855a      	strh	r2, [r3, #42]	; 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80073ca:	68fb      	ldr	r3, [r7, #12]
 80073cc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80073d0:	b2db      	uxtb	r3, r3
 80073d2:	2b22      	cmp	r3, #34	; 0x22
 80073d4:	d108      	bne.n	80073e8 <I2C_Mem_ISR_DMA+0x23c>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 80073d6:	68fb      	ldr	r3, [r7, #12]
 80073d8:	681b      	ldr	r3, [r3, #0]
 80073da:	681a      	ldr	r2, [r3, #0]
 80073dc:	68fb      	ldr	r3, [r7, #12]
 80073de:	681b      	ldr	r3, [r3, #0]
 80073e0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80073e4:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80073e6:	e01b      	b.n	8007420 <I2C_Mem_ISR_DMA+0x274>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 80073e8:	68fb      	ldr	r3, [r7, #12]
 80073ea:	681b      	ldr	r3, [r3, #0]
 80073ec:	681a      	ldr	r2, [r3, #0]
 80073ee:	68fb      	ldr	r3, [r7, #12]
 80073f0:	681b      	ldr	r3, [r3, #0]
 80073f2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80073f6:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80073f8:	e012      	b.n	8007420 <I2C_Mem_ISR_DMA+0x274>
 80073fa:	bf00      	nop
 80073fc:	80002000 	.word	0x80002000
 8007400:	80002400 	.word	0x80002400
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007404:	68bb      	ldr	r3, [r7, #8]
 8007406:	f003 0320 	and.w	r3, r3, #32
 800740a:	2b00      	cmp	r3, #0
 800740c:	d008      	beq.n	8007420 <I2C_Mem_ISR_DMA+0x274>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	f003 0320 	and.w	r3, r3, #32
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007414:	2b00      	cmp	r3, #0
 8007416:	d003      	beq.n	8007420 <I2C_Mem_ISR_DMA+0x274>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 8007418:	68b9      	ldr	r1, [r7, #8]
 800741a:	68f8      	ldr	r0, [r7, #12]
 800741c:	f000 f9fe 	bl	800781c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007420:	68fb      	ldr	r3, [r7, #12]
 8007422:	2200      	movs	r2, #0
 8007424:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 8007428:	2300      	movs	r3, #0
}
 800742a:	4618      	mov	r0, r3
 800742c:	3718      	adds	r7, #24
 800742e:	46bd      	mov	sp, r7
 8007430:	bd80      	pop	{r7, pc}
 8007432:	bf00      	nop

08007434 <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 8007434:	b580      	push	{r7, lr}
 8007436:	b088      	sub	sp, #32
 8007438:	af00      	add	r7, sp, #0
 800743a:	60f8      	str	r0, [r7, #12]
 800743c:	60b9      	str	r1, [r7, #8]
 800743e:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 8007440:	68fb      	ldr	r3, [r7, #12]
 8007442:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007444:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 8007446:	2300      	movs	r3, #0
 8007448:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800744a:	68fb      	ldr	r3, [r7, #12]
 800744c:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8007450:	2b01      	cmp	r3, #1
 8007452:	d101      	bne.n	8007458 <I2C_Slave_ISR_DMA+0x24>
 8007454:	2302      	movs	r3, #2
 8007456:	e0c0      	b.n	80075da <I2C_Slave_ISR_DMA+0x1a6>
 8007458:	68fb      	ldr	r3, [r7, #12]
 800745a:	2201      	movs	r2, #1
 800745c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007460:	68bb      	ldr	r3, [r7, #8]
 8007462:	f003 0320 	and.w	r3, r3, #32
 8007466:	2b00      	cmp	r3, #0
 8007468:	d009      	beq.n	800747e <I2C_Slave_ISR_DMA+0x4a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	f003 0320 	and.w	r3, r3, #32
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 8007470:	2b00      	cmp	r3, #0
 8007472:	d004      	beq.n	800747e <I2C_Slave_ISR_DMA+0x4a>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 8007474:	68b9      	ldr	r1, [r7, #8]
 8007476:	68f8      	ldr	r0, [r7, #12]
 8007478:	f000 fa98 	bl	80079ac <I2C_ITSlaveCplt>
 800747c:	e0a8      	b.n	80075d0 <I2C_Slave_ISR_DMA+0x19c>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800747e:	68bb      	ldr	r3, [r7, #8]
 8007480:	f003 0310 	and.w	r3, r3, #16
 8007484:	2b00      	cmp	r3, #0
 8007486:	f000 8095 	beq.w	80075b4 <I2C_Slave_ISR_DMA+0x180>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	f003 0310 	and.w	r3, r3, #16
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 8007490:	2b00      	cmp	r3, #0
 8007492:	f000 808f 	beq.w	80075b4 <I2C_Slave_ISR_DMA+0x180>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 8007496:	687b      	ldr	r3, [r7, #4]
 8007498:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800749c:	2b00      	cmp	r3, #0
 800749e:	d104      	bne.n	80074aa <I2C_Slave_ISR_DMA+0x76>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 80074a0:	687b      	ldr	r3, [r7, #4]
 80074a2:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80074a6:	2b00      	cmp	r3, #0
 80074a8:	d07d      	beq.n	80075a6 <I2C_Slave_ISR_DMA+0x172>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 80074aa:	68fb      	ldr	r3, [r7, #12]
 80074ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074ae:	2b00      	cmp	r3, #0
 80074b0:	d00c      	beq.n	80074cc <I2C_Slave_ISR_DMA+0x98>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80074b8:	2b00      	cmp	r3, #0
 80074ba:	d007      	beq.n	80074cc <I2C_Slave_ISR_DMA+0x98>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 80074bc:	68fb      	ldr	r3, [r7, #12]
 80074be:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074c0:	681b      	ldr	r3, [r3, #0]
 80074c2:	685b      	ldr	r3, [r3, #4]
 80074c4:	2b00      	cmp	r3, #0
 80074c6:	d101      	bne.n	80074cc <I2C_Slave_ISR_DMA+0x98>
          {
            treatdmanack = 1U;
 80074c8:	2301      	movs	r3, #1
 80074ca:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 80074cc:	68fb      	ldr	r3, [r7, #12]
 80074ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074d0:	2b00      	cmp	r3, #0
 80074d2:	d00c      	beq.n	80074ee <I2C_Slave_ISR_DMA+0xba>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 80074d4:	687b      	ldr	r3, [r7, #4]
 80074d6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80074da:	2b00      	cmp	r3, #0
 80074dc:	d007      	beq.n	80074ee <I2C_Slave_ISR_DMA+0xba>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 80074de:	68fb      	ldr	r3, [r7, #12]
 80074e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074e2:	681b      	ldr	r3, [r3, #0]
 80074e4:	685b      	ldr	r3, [r3, #4]
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	d101      	bne.n	80074ee <I2C_Slave_ISR_DMA+0xba>
          {
            treatdmanack = 1U;
 80074ea:	2301      	movs	r3, #1
 80074ec:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 80074ee:	69fb      	ldr	r3, [r7, #28]
 80074f0:	2b01      	cmp	r3, #1
 80074f2:	d128      	bne.n	8007546 <I2C_Slave_ISR_DMA+0x112>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 80074f4:	68fb      	ldr	r3, [r7, #12]
 80074f6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074fa:	b2db      	uxtb	r3, r3
 80074fc:	2b28      	cmp	r3, #40	; 0x28
 80074fe:	d108      	bne.n	8007512 <I2C_Slave_ISR_DMA+0xde>
 8007500:	69bb      	ldr	r3, [r7, #24]
 8007502:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007506:	d104      	bne.n	8007512 <I2C_Slave_ISR_DMA+0xde>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 8007508:	68b9      	ldr	r1, [r7, #8]
 800750a:	68f8      	ldr	r0, [r7, #12]
 800750c:	f000 fbb2 	bl	8007c74 <I2C_ITListenCplt>
 8007510:	e048      	b.n	80075a4 <I2C_Slave_ISR_DMA+0x170>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007512:	68fb      	ldr	r3, [r7, #12]
 8007514:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007518:	b2db      	uxtb	r3, r3
 800751a:	2b29      	cmp	r3, #41	; 0x29
 800751c:	d10e      	bne.n	800753c <I2C_Slave_ISR_DMA+0x108>
 800751e:	69bb      	ldr	r3, [r7, #24]
 8007520:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007524:	d00a      	beq.n	800753c <I2C_Slave_ISR_DMA+0x108>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007526:	68fb      	ldr	r3, [r7, #12]
 8007528:	681b      	ldr	r3, [r3, #0]
 800752a:	2210      	movs	r2, #16
 800752c:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800752e:	68f8      	ldr	r0, [r7, #12]
 8007530:	f000 fd0b 	bl	8007f4a <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 8007534:	68f8      	ldr	r0, [r7, #12]
 8007536:	f000 f915 	bl	8007764 <I2C_ITSlaveSeqCplt>
 800753a:	e033      	b.n	80075a4 <I2C_Slave_ISR_DMA+0x170>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800753c:	68fb      	ldr	r3, [r7, #12]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	2210      	movs	r2, #16
 8007542:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 8007544:	e034      	b.n	80075b0 <I2C_Slave_ISR_DMA+0x17c>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007546:	68fb      	ldr	r3, [r7, #12]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	2210      	movs	r2, #16
 800754c:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800754e:	68fb      	ldr	r3, [r7, #12]
 8007550:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007552:	f043 0204 	orr.w	r2, r3, #4
 8007556:	68fb      	ldr	r3, [r7, #12]
 8007558:	645a      	str	r2, [r3, #68]	; 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800755a:	68fb      	ldr	r3, [r7, #12]
 800755c:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007560:	75fb      	strb	r3, [r7, #23]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007562:	69bb      	ldr	r3, [r7, #24]
 8007564:	2b00      	cmp	r3, #0
 8007566:	d003      	beq.n	8007570 <I2C_Slave_ISR_DMA+0x13c>
 8007568:	69bb      	ldr	r3, [r7, #24]
 800756a:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800756e:	d11f      	bne.n	80075b0 <I2C_Slave_ISR_DMA+0x17c>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8007570:	7dfb      	ldrb	r3, [r7, #23]
 8007572:	2b21      	cmp	r3, #33	; 0x21
 8007574:	d002      	beq.n	800757c <I2C_Slave_ISR_DMA+0x148>
 8007576:	7dfb      	ldrb	r3, [r7, #23]
 8007578:	2b29      	cmp	r3, #41	; 0x29
 800757a:	d103      	bne.n	8007584 <I2C_Slave_ISR_DMA+0x150>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	2221      	movs	r2, #33	; 0x21
 8007580:	631a      	str	r2, [r3, #48]	; 0x30
 8007582:	e008      	b.n	8007596 <I2C_Slave_ISR_DMA+0x162>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8007584:	7dfb      	ldrb	r3, [r7, #23]
 8007586:	2b22      	cmp	r3, #34	; 0x22
 8007588:	d002      	beq.n	8007590 <I2C_Slave_ISR_DMA+0x15c>
 800758a:	7dfb      	ldrb	r3, [r7, #23]
 800758c:	2b2a      	cmp	r3, #42	; 0x2a
 800758e:	d102      	bne.n	8007596 <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007590:	68fb      	ldr	r3, [r7, #12]
 8007592:	2222      	movs	r2, #34	; 0x22
 8007594:	631a      	str	r2, [r3, #48]	; 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800759a:	4619      	mov	r1, r3
 800759c:	68f8      	ldr	r0, [r7, #12]
 800759e:	f000 fbbd 	bl	8007d1c <I2C_ITError>
      if (treatdmanack == 1U)
 80075a2:	e005      	b.n	80075b0 <I2C_Slave_ISR_DMA+0x17c>
 80075a4:	e004      	b.n	80075b0 <I2C_Slave_ISR_DMA+0x17c>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80075a6:	68fb      	ldr	r3, [r7, #12]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	2210      	movs	r2, #16
 80075ac:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80075ae:	e00f      	b.n	80075d0 <I2C_Slave_ISR_DMA+0x19c>
      if (treatdmanack == 1U)
 80075b0:	bf00      	nop
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 80075b2:	e00d      	b.n	80075d0 <I2C_Slave_ISR_DMA+0x19c>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80075b4:	68bb      	ldr	r3, [r7, #8]
 80075b6:	f003 0308 	and.w	r3, r3, #8
 80075ba:	2b00      	cmp	r3, #0
 80075bc:	d008      	beq.n	80075d0 <I2C_Slave_ISR_DMA+0x19c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	f003 0308 	and.w	r3, r3, #8
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 80075c4:	2b00      	cmp	r3, #0
 80075c6:	d003      	beq.n	80075d0 <I2C_Slave_ISR_DMA+0x19c>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 80075c8:	68b9      	ldr	r1, [r7, #8]
 80075ca:	68f8      	ldr	r0, [r7, #12]
 80075cc:	f000 f809 	bl	80075e2 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 80075d0:	68fb      	ldr	r3, [r7, #12]
 80075d2:	2200      	movs	r2, #0
 80075d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  return HAL_OK;
 80075d8:	2300      	movs	r3, #0
}
 80075da:	4618      	mov	r0, r3
 80075dc:	3720      	adds	r7, #32
 80075de:	46bd      	mov	sp, r7
 80075e0:	bd80      	pop	{r7, pc}

080075e2 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80075e2:	b580      	push	{r7, lr}
 80075e4:	b084      	sub	sp, #16
 80075e6:	af00      	add	r7, sp, #0
 80075e8:	6078      	str	r0, [r7, #4]
 80075ea:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80075ec:	687b      	ldr	r3, [r7, #4]
 80075ee:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80075f2:	b2db      	uxtb	r3, r3
 80075f4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80075f8:	2b28      	cmp	r3, #40	; 0x28
 80075fa:	d16a      	bne.n	80076d2 <I2C_ITAddrCplt+0xf0>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 80075fc:	687b      	ldr	r3, [r7, #4]
 80075fe:	681b      	ldr	r3, [r3, #0]
 8007600:	699b      	ldr	r3, [r3, #24]
 8007602:	0c1b      	lsrs	r3, r3, #16
 8007604:	b2db      	uxtb	r3, r3
 8007606:	f003 0301 	and.w	r3, r3, #1
 800760a:	73fb      	strb	r3, [r7, #15]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800760c:	687b      	ldr	r3, [r7, #4]
 800760e:	681b      	ldr	r3, [r3, #0]
 8007610:	699b      	ldr	r3, [r3, #24]
 8007612:	0c1b      	lsrs	r3, r3, #16
 8007614:	b29b      	uxth	r3, r3
 8007616:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 800761a:	81bb      	strh	r3, [r7, #12]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800761c:	687b      	ldr	r3, [r7, #4]
 800761e:	681b      	ldr	r3, [r3, #0]
 8007620:	689b      	ldr	r3, [r3, #8]
 8007622:	b29b      	uxth	r3, r3
 8007624:	f3c3 0309 	ubfx	r3, r3, #0, #10
 8007628:	817b      	strh	r3, [r7, #10]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800762a:	687b      	ldr	r3, [r7, #4]
 800762c:	681b      	ldr	r3, [r3, #0]
 800762e:	68db      	ldr	r3, [r3, #12]
 8007630:	b29b      	uxth	r3, r3
 8007632:	f003 03fe 	and.w	r3, r3, #254	; 0xfe
 8007636:	813b      	strh	r3, [r7, #8]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 8007638:	687b      	ldr	r3, [r7, #4]
 800763a:	68db      	ldr	r3, [r3, #12]
 800763c:	2b02      	cmp	r3, #2
 800763e:	d138      	bne.n	80076b2 <I2C_ITAddrCplt+0xd0>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 8007640:	897b      	ldrh	r3, [r7, #10]
 8007642:	09db      	lsrs	r3, r3, #7
 8007644:	b29a      	uxth	r2, r3
 8007646:	89bb      	ldrh	r3, [r7, #12]
 8007648:	4053      	eors	r3, r2
 800764a:	b29b      	uxth	r3, r3
 800764c:	f003 0306 	and.w	r3, r3, #6
 8007650:	2b00      	cmp	r3, #0
 8007652:	d11c      	bne.n	800768e <I2C_ITAddrCplt+0xac>
      {
        slaveaddrcode = ownadd1code;
 8007654:	897b      	ldrh	r3, [r7, #10]
 8007656:	81bb      	strh	r3, [r7, #12]
        hi2c->AddrEventCount++;
 8007658:	687b      	ldr	r3, [r7, #4]
 800765a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800765c:	1c5a      	adds	r2, r3, #1
 800765e:	687b      	ldr	r3, [r7, #4]
 8007660:	649a      	str	r2, [r3, #72]	; 0x48
        if (hi2c->AddrEventCount == 2U)
 8007662:	687b      	ldr	r3, [r7, #4]
 8007664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007666:	2b02      	cmp	r3, #2
 8007668:	d13b      	bne.n	80076e2 <I2C_ITAddrCplt+0x100>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800766a:	687b      	ldr	r3, [r7, #4]
 800766c:	2200      	movs	r2, #0
 800766e:	649a      	str	r2, [r3, #72]	; 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	681b      	ldr	r3, [r3, #0]
 8007674:	2208      	movs	r2, #8
 8007676:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8007678:	687b      	ldr	r3, [r7, #4]
 800767a:	2200      	movs	r2, #0
 800767c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 8007680:	89ba      	ldrh	r2, [r7, #12]
 8007682:	7bfb      	ldrb	r3, [r7, #15]
 8007684:	4619      	mov	r1, r3
 8007686:	6878      	ldr	r0, [r7, #4]
 8007688:	f7ff fa3d 	bl	8006b06 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800768c:	e029      	b.n	80076e2 <I2C_ITAddrCplt+0x100>
        slaveaddrcode = ownadd2code;
 800768e:	893b      	ldrh	r3, [r7, #8]
 8007690:	81bb      	strh	r3, [r7, #12]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 8007692:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8007696:	6878      	ldr	r0, [r7, #4]
 8007698:	f000 fde2 	bl	8008260 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800769c:	687b      	ldr	r3, [r7, #4]
 800769e:	2200      	movs	r2, #0
 80076a0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80076a4:	89ba      	ldrh	r2, [r7, #12]
 80076a6:	7bfb      	ldrb	r3, [r7, #15]
 80076a8:	4619      	mov	r1, r3
 80076aa:	6878      	ldr	r0, [r7, #4]
 80076ac:	f7ff fa2b 	bl	8006b06 <HAL_I2C_AddrCallback>
}
 80076b0:	e017      	b.n	80076e2 <I2C_ITAddrCplt+0x100>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 80076b2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 80076b6:	6878      	ldr	r0, [r7, #4]
 80076b8:	f000 fdd2 	bl	8008260 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	2200      	movs	r2, #0
 80076c0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 80076c4:	89ba      	ldrh	r2, [r7, #12]
 80076c6:	7bfb      	ldrb	r3, [r7, #15]
 80076c8:	4619      	mov	r1, r3
 80076ca:	6878      	ldr	r0, [r7, #4]
 80076cc:	f7ff fa1b 	bl	8006b06 <HAL_I2C_AddrCallback>
}
 80076d0:	e007      	b.n	80076e2 <I2C_ITAddrCplt+0x100>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80076d2:	687b      	ldr	r3, [r7, #4]
 80076d4:	681b      	ldr	r3, [r3, #0]
 80076d6:	2208      	movs	r2, #8
 80076d8:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 80076da:	687b      	ldr	r3, [r7, #4]
 80076dc:	2200      	movs	r2, #0
 80076de:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
}
 80076e2:	bf00      	nop
 80076e4:	3710      	adds	r7, #16
 80076e6:	46bd      	mov	sp, r7
 80076e8:	bd80      	pop	{r7, pc}

080076ea <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 80076ea:	b580      	push	{r7, lr}
 80076ec:	b082      	sub	sp, #8
 80076ee:	af00      	add	r7, sp, #0
 80076f0:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80076f2:	687b      	ldr	r3, [r7, #4]
 80076f4:	2200      	movs	r2, #0
 80076f6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80076fa:	687b      	ldr	r3, [r7, #4]
 80076fc:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007700:	b2db      	uxtb	r3, r3
 8007702:	2b21      	cmp	r3, #33	; 0x21
 8007704:	d115      	bne.n	8007732 <I2C_ITMasterSeqCplt+0x48>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2220      	movs	r2, #32
 800770a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2211      	movs	r2, #17
 8007712:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	2200      	movs	r2, #0
 8007718:	635a      	str	r2, [r3, #52]	; 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800771a:	2101      	movs	r1, #1
 800771c:	6878      	ldr	r0, [r7, #4]
 800771e:	f000 fd9f 	bl	8008260 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007722:	687b      	ldr	r3, [r7, #4]
 8007724:	2200      	movs	r2, #0
 8007726:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f7ff f9cd 	bl	8006aca <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007730:	e014      	b.n	800775c <I2C_ITMasterSeqCplt+0x72>
    hi2c->State         = HAL_I2C_STATE_READY;
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	2220      	movs	r2, #32
 8007736:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	2212      	movs	r2, #18
 800773e:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->XferISR       = NULL;
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2200      	movs	r2, #0
 8007744:	635a      	str	r2, [r3, #52]	; 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 8007746:	2102      	movs	r1, #2
 8007748:	6878      	ldr	r0, [r7, #4]
 800774a:	f000 fd89 	bl	8008260 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800774e:	687b      	ldr	r3, [r7, #4]
 8007750:	2200      	movs	r2, #0
 8007752:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_MasterRxCpltCallback(hi2c);
 8007756:	6878      	ldr	r0, [r7, #4]
 8007758:	f014 fe98 	bl	801c48c <HAL_I2C_MasterRxCpltCallback>
}
 800775c:	bf00      	nop
 800775e:	3708      	adds	r7, #8
 8007760:	46bd      	mov	sp, r7
 8007762:	bd80      	pop	{r7, pc}

08007764 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 8007764:	b580      	push	{r7, lr}
 8007766:	b084      	sub	sp, #16
 8007768:	af00      	add	r7, sp, #0
 800776a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800776c:	687b      	ldr	r3, [r7, #4]
 800776e:	681b      	ldr	r3, [r3, #0]
 8007770:	681b      	ldr	r3, [r3, #0]
 8007772:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007774:	687b      	ldr	r3, [r7, #4]
 8007776:	2200      	movs	r2, #0
 8007778:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800777c:	68fb      	ldr	r3, [r7, #12]
 800777e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007782:	2b00      	cmp	r3, #0
 8007784:	d008      	beq.n	8007798 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	681a      	ldr	r2, [r3, #0]
 800778c:	687b      	ldr	r3, [r7, #4]
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007794:	601a      	str	r2, [r3, #0]
 8007796:	e00c      	b.n	80077b2 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007798:	68fb      	ldr	r3, [r7, #12]
 800779a:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 800779e:	2b00      	cmp	r3, #0
 80077a0:	d007      	beq.n	80077b2 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	681a      	ldr	r2, [r3, #0]
 80077a8:	687b      	ldr	r3, [r7, #4]
 80077aa:	681b      	ldr	r3, [r3, #0]
 80077ac:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80077b0:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077b8:	b2db      	uxtb	r3, r3
 80077ba:	2b29      	cmp	r3, #41	; 0x29
 80077bc:	d112      	bne.n	80077e4 <I2C_ITSlaveSeqCplt+0x80>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2228      	movs	r2, #40	; 0x28
 80077c2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2221      	movs	r2, #33	; 0x21
 80077ca:	631a      	str	r2, [r3, #48]	; 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 80077cc:	2101      	movs	r1, #1
 80077ce:	6878      	ldr	r0, [r7, #4]
 80077d0:	f000 fd46 	bl	8008260 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	2200      	movs	r2, #0
 80077d8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 80077dc:	6878      	ldr	r0, [r7, #4]
 80077de:	f7ff f97e 	bl	8006ade <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 80077e2:	e017      	b.n	8007814 <I2C_ITSlaveSeqCplt+0xb0>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80077ea:	b2db      	uxtb	r3, r3
 80077ec:	2b2a      	cmp	r3, #42	; 0x2a
 80077ee:	d111      	bne.n	8007814 <I2C_ITSlaveSeqCplt+0xb0>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 80077f0:	687b      	ldr	r3, [r7, #4]
 80077f2:	2228      	movs	r2, #40	; 0x28
 80077f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	2222      	movs	r2, #34	; 0x22
 80077fc:	631a      	str	r2, [r3, #48]	; 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 80077fe:	2102      	movs	r1, #2
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 fd2d 	bl	8008260 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f7ff f96f 	bl	8006af2 <HAL_I2C_SlaveRxCpltCallback>
}
 8007814:	bf00      	nop
 8007816:	3710      	adds	r7, #16
 8007818:	46bd      	mov	sp, r7
 800781a:	bd80      	pop	{r7, pc}

0800781c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800781c:	b580      	push	{r7, lr}
 800781e:	b086      	sub	sp, #24
 8007820:	af00      	add	r7, sp, #0
 8007822:	6078      	str	r0, [r7, #4]
 8007824:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 8007826:	683b      	ldr	r3, [r7, #0]
 8007828:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800782a:	687b      	ldr	r3, [r7, #4]
 800782c:	681b      	ldr	r3, [r3, #0]
 800782e:	2220      	movs	r2, #32
 8007830:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007838:	b2db      	uxtb	r3, r3
 800783a:	2b21      	cmp	r3, #33	; 0x21
 800783c:	d107      	bne.n	800784e <I2C_ITMasterCplt+0x32>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800783e:	2101      	movs	r1, #1
 8007840:	6878      	ldr	r0, [r7, #4]
 8007842:	f000 fd0d 	bl	8008260 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8007846:	687b      	ldr	r3, [r7, #4]
 8007848:	2211      	movs	r2, #17
 800784a:	631a      	str	r2, [r3, #48]	; 0x30
 800784c:	e00c      	b.n	8007868 <I2C_ITMasterCplt+0x4c>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800784e:	687b      	ldr	r3, [r7, #4]
 8007850:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007854:	b2db      	uxtb	r3, r3
 8007856:	2b22      	cmp	r3, #34	; 0x22
 8007858:	d106      	bne.n	8007868 <I2C_ITMasterCplt+0x4c>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800785a:	2102      	movs	r1, #2
 800785c:	6878      	ldr	r0, [r7, #4]
 800785e:	f000 fcff 	bl	8008260 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8007862:	687b      	ldr	r3, [r7, #4]
 8007864:	2212      	movs	r2, #18
 8007866:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007868:	687b      	ldr	r3, [r7, #4]
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	6859      	ldr	r1, [r3, #4]
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681a      	ldr	r2, [r3, #0]
 8007872:	4b4c      	ldr	r3, [pc, #304]	; (80079a4 <I2C_ITMasterCplt+0x188>)
 8007874:	400b      	ands	r3, r1
 8007876:	6053      	str	r3, [r2, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 8007878:	687b      	ldr	r3, [r7, #4]
 800787a:	2200      	movs	r2, #0
 800787c:	635a      	str	r2, [r3, #52]	; 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800787e:	687b      	ldr	r3, [r7, #4]
 8007880:	4a49      	ldr	r2, [pc, #292]	; (80079a8 <I2C_ITMasterCplt+0x18c>)
 8007882:	62da      	str	r2, [r3, #44]	; 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 8007884:	697b      	ldr	r3, [r7, #20]
 8007886:	f003 0310 	and.w	r3, r3, #16
 800788a:	2b00      	cmp	r3, #0
 800788c:	d009      	beq.n	80078a2 <I2C_ITMasterCplt+0x86>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	681b      	ldr	r3, [r3, #0]
 8007892:	2210      	movs	r2, #16
 8007894:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800789a:	f043 0204 	orr.w	r2, r3, #4
 800789e:	687b      	ldr	r3, [r7, #4]
 80078a0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078a8:	b2db      	uxtb	r3, r3
 80078aa:	2b60      	cmp	r3, #96	; 0x60
 80078ac:	d10a      	bne.n	80078c4 <I2C_ITMasterCplt+0xa8>
 80078ae:	697b      	ldr	r3, [r7, #20]
 80078b0:	f003 0304 	and.w	r3, r3, #4
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d005      	beq.n	80078c4 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80078be:	b2db      	uxtb	r3, r3
 80078c0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 80078c2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 80078c4:	6878      	ldr	r0, [r7, #4]
 80078c6:	f000 fb40 	bl	8007f4a <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 80078ca:	687b      	ldr	r3, [r7, #4]
 80078cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078ce:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078d6:	b2db      	uxtb	r3, r3
 80078d8:	2b60      	cmp	r3, #96	; 0x60
 80078da:	d002      	beq.n	80078e2 <I2C_ITMasterCplt+0xc6>
 80078dc:	693b      	ldr	r3, [r7, #16]
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d006      	beq.n	80078f0 <I2C_ITMasterCplt+0xd4>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 80078e2:	687b      	ldr	r3, [r7, #4]
 80078e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80078e6:	4619      	mov	r1, r3
 80078e8:	6878      	ldr	r0, [r7, #4]
 80078ea:	f000 fa17 	bl	8007d1c <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 80078ee:	e054      	b.n	800799a <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80078f0:	687b      	ldr	r3, [r7, #4]
 80078f2:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80078f6:	b2db      	uxtb	r3, r3
 80078f8:	2b21      	cmp	r3, #33	; 0x21
 80078fa:	d124      	bne.n	8007946 <I2C_ITMasterCplt+0x12a>
    hi2c->State = HAL_I2C_STATE_READY;
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2220      	movs	r2, #32
 8007900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2200      	movs	r2, #0
 8007908:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800790a:	687b      	ldr	r3, [r7, #4]
 800790c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007910:	b2db      	uxtb	r3, r3
 8007912:	2b40      	cmp	r3, #64	; 0x40
 8007914:	d10b      	bne.n	800792e <I2C_ITMasterCplt+0x112>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	2200      	movs	r2, #0
 800791a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800791e:	687b      	ldr	r3, [r7, #4]
 8007920:	2200      	movs	r2, #0
 8007922:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemTxCpltCallback(hi2c);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f7ff f905 	bl	8006b36 <HAL_I2C_MemTxCpltCallback>
}
 800792c:	e035      	b.n	800799a <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800792e:	687b      	ldr	r3, [r7, #4]
 8007930:	2200      	movs	r2, #0
 8007932:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8007936:	687b      	ldr	r3, [r7, #4]
 8007938:	2200      	movs	r2, #0
 800793a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800793e:	6878      	ldr	r0, [r7, #4]
 8007940:	f7ff f8c3 	bl	8006aca <HAL_I2C_MasterTxCpltCallback>
}
 8007944:	e029      	b.n	800799a <I2C_ITMasterCplt+0x17e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007946:	687b      	ldr	r3, [r7, #4]
 8007948:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800794c:	b2db      	uxtb	r3, r3
 800794e:	2b22      	cmp	r3, #34	; 0x22
 8007950:	d123      	bne.n	800799a <I2C_ITMasterCplt+0x17e>
    hi2c->State = HAL_I2C_STATE_READY;
 8007952:	687b      	ldr	r3, [r7, #4]
 8007954:	2220      	movs	r2, #32
 8007956:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	2200      	movs	r2, #0
 800795e:	631a      	str	r2, [r3, #48]	; 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007966:	b2db      	uxtb	r3, r3
 8007968:	2b40      	cmp	r3, #64	; 0x40
 800796a:	d10b      	bne.n	8007984 <I2C_ITMasterCplt+0x168>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	2200      	movs	r2, #0
 8007970:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	2200      	movs	r2, #0
 8007978:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MemRxCpltCallback(hi2c);
 800797c:	6878      	ldr	r0, [r7, #4]
 800797e:	f7ff f8e4 	bl	8006b4a <HAL_I2C_MemRxCpltCallback>
}
 8007982:	e00a      	b.n	800799a <I2C_ITMasterCplt+0x17e>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2200      	movs	r2, #0
 8007988:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      __HAL_UNLOCK(hi2c);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	2200      	movs	r2, #0
 8007990:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8007994:	6878      	ldr	r0, [r7, #4]
 8007996:	f014 fd79 	bl	801c48c <HAL_I2C_MasterRxCpltCallback>
}
 800799a:	bf00      	nop
 800799c:	3718      	adds	r7, #24
 800799e:	46bd      	mov	sp, r7
 80079a0:	bd80      	pop	{r7, pc}
 80079a2:	bf00      	nop
 80079a4:	fe00e800 	.word	0xfe00e800
 80079a8:	ffff0000 	.word	0xffff0000

080079ac <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 80079ac:	b580      	push	{r7, lr}
 80079ae:	b086      	sub	sp, #24
 80079b0:	af00      	add	r7, sp, #0
 80079b2:	6078      	str	r0, [r7, #4]
 80079b4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 80079b6:	687b      	ldr	r3, [r7, #4]
 80079b8:	681b      	ldr	r3, [r3, #0]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 80079be:	683b      	ldr	r3, [r7, #0]
 80079c0:	617b      	str	r3, [r7, #20]
  uint32_t tmpoptions = hi2c->XferOptions;
 80079c2:	687b      	ldr	r3, [r7, #4]
 80079c4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80079c6:	60fb      	str	r3, [r7, #12]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 80079c8:	687b      	ldr	r3, [r7, #4]
 80079ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80079ce:	72fb      	strb	r3, [r7, #11]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	2220      	movs	r2, #32
 80079d6:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80079d8:	7afb      	ldrb	r3, [r7, #11]
 80079da:	2b21      	cmp	r3, #33	; 0x21
 80079dc:	d002      	beq.n	80079e4 <I2C_ITSlaveCplt+0x38>
 80079de:	7afb      	ldrb	r3, [r7, #11]
 80079e0:	2b29      	cmp	r3, #41	; 0x29
 80079e2:	d108      	bne.n	80079f6 <I2C_ITSlaveCplt+0x4a>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 80079e4:	f248 0101 	movw	r1, #32769	; 0x8001
 80079e8:	6878      	ldr	r0, [r7, #4]
 80079ea:	f000 fc39 	bl	8008260 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80079ee:	687b      	ldr	r3, [r7, #4]
 80079f0:	2221      	movs	r2, #33	; 0x21
 80079f2:	631a      	str	r2, [r3, #48]	; 0x30
 80079f4:	e019      	b.n	8007a2a <I2C_ITSlaveCplt+0x7e>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80079f6:	7afb      	ldrb	r3, [r7, #11]
 80079f8:	2b22      	cmp	r3, #34	; 0x22
 80079fa:	d002      	beq.n	8007a02 <I2C_ITSlaveCplt+0x56>
 80079fc:	7afb      	ldrb	r3, [r7, #11]
 80079fe:	2b2a      	cmp	r3, #42	; 0x2a
 8007a00:	d108      	bne.n	8007a14 <I2C_ITSlaveCplt+0x68>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 8007a02:	f248 0102 	movw	r1, #32770	; 0x8002
 8007a06:	6878      	ldr	r0, [r7, #4]
 8007a08:	f000 fc2a 	bl	8008260 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8007a0c:	687b      	ldr	r3, [r7, #4]
 8007a0e:	2222      	movs	r2, #34	; 0x22
 8007a10:	631a      	str	r2, [r3, #48]	; 0x30
 8007a12:	e00a      	b.n	8007a2a <I2C_ITSlaveCplt+0x7e>
  }
  else if (tmpstate == HAL_I2C_STATE_LISTEN)
 8007a14:	7afb      	ldrb	r3, [r7, #11]
 8007a16:	2b28      	cmp	r3, #40	; 0x28
 8007a18:	d107      	bne.n	8007a2a <I2C_ITSlaveCplt+0x7e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT | I2C_XFER_RX_IT);
 8007a1a:	f248 0103 	movw	r1, #32771	; 0x8003
 8007a1e:	6878      	ldr	r0, [r7, #4]
 8007a20:	f000 fc1e 	bl	8008260 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007a24:	687b      	ldr	r3, [r7, #4]
 8007a26:	2200      	movs	r2, #0
 8007a28:	631a      	str	r2, [r3, #48]	; 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8007a2a:	687b      	ldr	r3, [r7, #4]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	685a      	ldr	r2, [r3, #4]
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007a38:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 8007a3a:	687b      	ldr	r3, [r7, #4]
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	6859      	ldr	r1, [r3, #4]
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681a      	ldr	r2, [r3, #0]
 8007a44:	4b89      	ldr	r3, [pc, #548]	; (8007c6c <I2C_ITSlaveCplt+0x2c0>)
 8007a46:	400b      	ands	r3, r1
 8007a48:	6053      	str	r3, [r2, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 fa7d 	bl	8007f4a <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 8007a50:	693b      	ldr	r3, [r7, #16]
 8007a52:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007a56:	2b00      	cmp	r3, #0
 8007a58:	d013      	beq.n	8007a82 <I2C_ITSlaveCplt+0xd6>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	681a      	ldr	r2, [r3, #0]
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007a68:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 8007a6a:	687b      	ldr	r3, [r7, #4]
 8007a6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d01f      	beq.n	8007ab2 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 8007a72:	687b      	ldr	r3, [r7, #4]
 8007a74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	685b      	ldr	r3, [r3, #4]
 8007a7a:	b29a      	uxth	r2, r3
 8007a7c:	687b      	ldr	r3, [r7, #4]
 8007a7e:	855a      	strh	r2, [r3, #42]	; 0x2a
 8007a80:	e017      	b.n	8007ab2 <I2C_ITSlaveCplt+0x106>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007a88:	2b00      	cmp	r3, #0
 8007a8a:	d012      	beq.n	8007ab2 <I2C_ITSlaveCplt+0x106>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007a9a:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d006      	beq.n	8007ab2 <I2C_ITSlaveCplt+0x106>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007aa8:	681b      	ldr	r3, [r3, #0]
 8007aaa:	685b      	ldr	r3, [r3, #4]
 8007aac:	b29a      	uxth	r2, r3
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	855a      	strh	r2, [r3, #42]	; 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 8007ab2:	697b      	ldr	r3, [r7, #20]
 8007ab4:	f003 0304 	and.w	r3, r3, #4
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d020      	beq.n	8007afe <I2C_ITSlaveCplt+0x152>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 8007abc:	697b      	ldr	r3, [r7, #20]
 8007abe:	f023 0304 	bic.w	r3, r3, #4
 8007ac2:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ace:	b2d2      	uxtb	r2, r2
 8007ad0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007ad6:	1c5a      	adds	r2, r3, #1
 8007ad8:	687b      	ldr	r3, [r7, #4]
 8007ada:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d00c      	beq.n	8007afe <I2C_ITSlaveCplt+0x152>
    {
      hi2c->XferSize--;
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007ae8:	3b01      	subs	r3, #1
 8007aea:	b29a      	uxth	r2, r3
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007af4:	b29b      	uxth	r3, r3
 8007af6:	3b01      	subs	r3, #1
 8007af8:	b29a      	uxth	r2, r3
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8007afe:	687b      	ldr	r3, [r7, #4]
 8007b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b02:	b29b      	uxth	r3, r3
 8007b04:	2b00      	cmp	r3, #0
 8007b06:	d005      	beq.n	8007b14 <I2C_ITSlaveCplt+0x168>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007b08:	687b      	ldr	r3, [r7, #4]
 8007b0a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b0c:	f043 0204 	orr.w	r2, r3, #4
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	645a      	str	r2, [r3, #68]	; 0x44
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007b14:	697b      	ldr	r3, [r7, #20]
 8007b16:	f003 0310 	and.w	r3, r3, #16
 8007b1a:	2b00      	cmp	r3, #0
 8007b1c:	d049      	beq.n	8007bb2 <I2C_ITSlaveCplt+0x206>
      (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_IT_NACKI) != RESET))
 8007b1e:	693b      	ldr	r3, [r7, #16]
 8007b20:	f003 0310 	and.w	r3, r3, #16
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 8007b24:	2b00      	cmp	r3, #0
 8007b26:	d044      	beq.n	8007bb2 <I2C_ITSlaveCplt+0x206>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007b2c:	b29b      	uxth	r3, r3
 8007b2e:	2b00      	cmp	r3, #0
 8007b30:	d128      	bne.n	8007b84 <I2C_ITSlaveCplt+0x1d8>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b38:	b2db      	uxtb	r3, r3
 8007b3a:	2b28      	cmp	r3, #40	; 0x28
 8007b3c:	d108      	bne.n	8007b50 <I2C_ITSlaveCplt+0x1a4>
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	f1b3 7f00 	cmp.w	r3, #33554432	; 0x2000000
 8007b44:	d104      	bne.n	8007b50 <I2C_ITSlaveCplt+0x1a4>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 8007b46:	6979      	ldr	r1, [r7, #20]
 8007b48:	6878      	ldr	r0, [r7, #4]
 8007b4a:	f000 f893 	bl	8007c74 <I2C_ITListenCplt>
 8007b4e:	e030      	b.n	8007bb2 <I2C_ITSlaveCplt+0x206>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007b56:	b2db      	uxtb	r3, r3
 8007b58:	2b29      	cmp	r3, #41	; 0x29
 8007b5a:	d10e      	bne.n	8007b7a <I2C_ITSlaveCplt+0x1ce>
 8007b5c:	68fb      	ldr	r3, [r7, #12]
 8007b5e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007b62:	d00a      	beq.n	8007b7a <I2C_ITSlaveCplt+0x1ce>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	681b      	ldr	r3, [r3, #0]
 8007b68:	2210      	movs	r2, #16
 8007b6a:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 8007b6c:	6878      	ldr	r0, [r7, #4]
 8007b6e:	f000 f9ec 	bl	8007f4a <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f7ff fdf6 	bl	8007764 <I2C_ITSlaveSeqCplt>
 8007b78:	e01b      	b.n	8007bb2 <I2C_ITSlaveCplt+0x206>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	681b      	ldr	r3, [r3, #0]
 8007b7e:	2210      	movs	r2, #16
 8007b80:	61da      	str	r2, [r3, #28]
 8007b82:	e016      	b.n	8007bb2 <I2C_ITSlaveCplt+0x206>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	2210      	movs	r2, #16
 8007b8a:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007b8c:	687b      	ldr	r3, [r7, #4]
 8007b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007b90:	f043 0204 	orr.w	r2, r3, #4
 8007b94:	687b      	ldr	r3, [r7, #4]
 8007b96:	645a      	str	r2, [r3, #68]	; 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 8007b98:	68fb      	ldr	r3, [r7, #12]
 8007b9a:	2b00      	cmp	r3, #0
 8007b9c:	d003      	beq.n	8007ba6 <I2C_ITSlaveCplt+0x1fa>
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8007ba4:	d105      	bne.n	8007bb2 <I2C_ITSlaveCplt+0x206>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007baa:	4619      	mov	r1, r3
 8007bac:	6878      	ldr	r0, [r7, #4]
 8007bae:	f000 f8b5 	bl	8007d1c <I2C_ITError>
      }
    }
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2200      	movs	r2, #0
 8007bb6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2200      	movs	r2, #0
 8007bbe:	635a      	str	r2, [r3, #52]	; 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bc4:	2b00      	cmp	r3, #0
 8007bc6:	d010      	beq.n	8007bea <I2C_ITSlaveCplt+0x23e>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 8007bc8:	687b      	ldr	r3, [r7, #4]
 8007bca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007bcc:	4619      	mov	r1, r3
 8007bce:	6878      	ldr	r0, [r7, #4]
 8007bd0:	f000 f8a4 	bl	8007d1c <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8007bd4:	687b      	ldr	r3, [r7, #4]
 8007bd6:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007bda:	b2db      	uxtb	r3, r3
 8007bdc:	2b28      	cmp	r3, #40	; 0x28
 8007bde:	d141      	bne.n	8007c64 <I2C_ITSlaveCplt+0x2b8>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 8007be0:	6979      	ldr	r1, [r7, #20]
 8007be2:	6878      	ldr	r0, [r7, #4]
 8007be4:	f000 f846 	bl	8007c74 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007be8:	e03c      	b.n	8007c64 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bee:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8007bf2:	d014      	beq.n	8007c1e <I2C_ITSlaveCplt+0x272>
    I2C_ITSlaveSeqCplt(hi2c);
 8007bf4:	6878      	ldr	r0, [r7, #4]
 8007bf6:	f7ff fdb5 	bl	8007764 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007bfa:	687b      	ldr	r3, [r7, #4]
 8007bfc:	4a1c      	ldr	r2, [pc, #112]	; (8007c70 <I2C_ITSlaveCplt+0x2c4>)
 8007bfe:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 8007c00:	687b      	ldr	r3, [r7, #4]
 8007c02:	2220      	movs	r2, #32
 8007c04:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	2200      	movs	r2, #0
 8007c12:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ListenCpltCallback(hi2c);
 8007c16:	6878      	ldr	r0, [r7, #4]
 8007c18:	f7fe ff83 	bl	8006b22 <HAL_I2C_ListenCpltCallback>
}
 8007c1c:	e022      	b.n	8007c64 <I2C_ITSlaveCplt+0x2b8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007c24:	b2db      	uxtb	r3, r3
 8007c26:	2b22      	cmp	r3, #34	; 0x22
 8007c28:	d10e      	bne.n	8007c48 <I2C_ITSlaveCplt+0x29c>
    hi2c->State = HAL_I2C_STATE_READY;
 8007c2a:	687b      	ldr	r3, [r7, #4]
 8007c2c:	2220      	movs	r2, #32
 8007c2e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	2200      	movs	r2, #0
 8007c36:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	2200      	movs	r2, #0
 8007c3c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 8007c40:	6878      	ldr	r0, [r7, #4]
 8007c42:	f7fe ff56 	bl	8006af2 <HAL_I2C_SlaveRxCpltCallback>
}
 8007c46:	e00d      	b.n	8007c64 <I2C_ITSlaveCplt+0x2b8>
    hi2c->State = HAL_I2C_STATE_READY;
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	2220      	movs	r2, #32
 8007c4c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	2200      	movs	r2, #0
 8007c54:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007c56:	687b      	ldr	r3, [r7, #4]
 8007c58:	2200      	movs	r2, #0
 8007c5a:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8007c5e:	6878      	ldr	r0, [r7, #4]
 8007c60:	f7fe ff3d 	bl	8006ade <HAL_I2C_SlaveTxCpltCallback>
}
 8007c64:	bf00      	nop
 8007c66:	3718      	adds	r7, #24
 8007c68:	46bd      	mov	sp, r7
 8007c6a:	bd80      	pop	{r7, pc}
 8007c6c:	fe00e800 	.word	0xfe00e800
 8007c70:	ffff0000 	.word	0xffff0000

08007c74 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 8007c74:	b580      	push	{r7, lr}
 8007c76:	b082      	sub	sp, #8
 8007c78:	af00      	add	r7, sp, #0
 8007c7a:	6078      	str	r0, [r7, #4]
 8007c7c:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	4a25      	ldr	r2, [pc, #148]	; (8007d18 <I2C_ITListenCplt+0xa4>)
 8007c82:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	2200      	movs	r2, #0
 8007c88:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	2220      	movs	r2, #32
 8007c8e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferISR = NULL;
 8007c9a:	687b      	ldr	r3, [r7, #4]
 8007c9c:	2200      	movs	r2, #0
 8007c9e:	635a      	str	r2, [r3, #52]	; 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	f003 0304 	and.w	r3, r3, #4
 8007ca6:	2b00      	cmp	r3, #0
 8007ca8:	d022      	beq.n	8007cf0 <I2C_ITListenCplt+0x7c>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 8007caa:	687b      	ldr	r3, [r7, #4]
 8007cac:	681b      	ldr	r3, [r3, #0]
 8007cae:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cb4:	b2d2      	uxtb	r2, r2
 8007cb6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007cbc:	1c5a      	adds	r2, r3, #1
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	625a      	str	r2, [r3, #36]	; 0x24

    if ((hi2c->XferSize > 0U))
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cc6:	2b00      	cmp	r3, #0
 8007cc8:	d012      	beq.n	8007cf0 <I2C_ITListenCplt+0x7c>
    {
      hi2c->XferSize--;
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8007cce:	3b01      	subs	r3, #1
 8007cd0:	b29a      	uxth	r2, r3
 8007cd2:	687b      	ldr	r3, [r7, #4]
 8007cd4:	851a      	strh	r2, [r3, #40]	; 0x28
      hi2c->XferCount--;
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007cda:	b29b      	uxth	r3, r3
 8007cdc:	3b01      	subs	r3, #1
 8007cde:	b29a      	uxth	r2, r3
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	855a      	strh	r2, [r3, #42]	; 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007ce4:	687b      	ldr	r3, [r7, #4]
 8007ce6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007ce8:	f043 0204 	orr.w	r2, r3, #4
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	645a      	str	r2, [r3, #68]	; 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007cf0:	f248 0103 	movw	r1, #32771	; 0x8003
 8007cf4:	6878      	ldr	r0, [r7, #4]
 8007cf6:	f000 fab3 	bl	8008260 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	2210      	movs	r2, #16
 8007d00:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 8007d02:	687b      	ldr	r3, [r7, #4]
 8007d04:	2200      	movs	r2, #0
 8007d06:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 8007d0a:	6878      	ldr	r0, [r7, #4]
 8007d0c:	f7fe ff09 	bl	8006b22 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 8007d10:	bf00      	nop
 8007d12:	3708      	adds	r7, #8
 8007d14:	46bd      	mov	sp, r7
 8007d16:	bd80      	pop	{r7, pc}
 8007d18:	ffff0000 	.word	0xffff0000

08007d1c <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 8007d1c:	b580      	push	{r7, lr}
 8007d1e:	b084      	sub	sp, #16
 8007d20:	af00      	add	r7, sp, #0
 8007d22:	6078      	str	r0, [r7, #4]
 8007d24:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 8007d26:	687b      	ldr	r3, [r7, #4]
 8007d28:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d2c:	73fb      	strb	r3, [r7, #15]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 8007d2e:	687b      	ldr	r3, [r7, #4]
 8007d30:	2200      	movs	r2, #0
 8007d32:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	4a6d      	ldr	r2, [pc, #436]	; (8007ef0 <I2C_ITError+0x1d4>)
 8007d3a:	62da      	str	r2, [r3, #44]	; 0x2c
  hi2c->XferCount     = 0U;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2200      	movs	r2, #0
 8007d40:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 8007d42:	687b      	ldr	r3, [r7, #4]
 8007d44:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007d46:	683b      	ldr	r3, [r7, #0]
 8007d48:	431a      	orrs	r2, r3
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	645a      	str	r2, [r3, #68]	; 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 8007d4e:	7bfb      	ldrb	r3, [r7, #15]
 8007d50:	2b28      	cmp	r3, #40	; 0x28
 8007d52:	d005      	beq.n	8007d60 <I2C_ITError+0x44>
 8007d54:	7bfb      	ldrb	r3, [r7, #15]
 8007d56:	2b29      	cmp	r3, #41	; 0x29
 8007d58:	d002      	beq.n	8007d60 <I2C_ITError+0x44>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 8007d5a:	7bfb      	ldrb	r3, [r7, #15]
 8007d5c:	2b2a      	cmp	r3, #42	; 0x2a
 8007d5e:	d10b      	bne.n	8007d78 <I2C_ITError+0x5c>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007d60:	2103      	movs	r1, #3
 8007d62:	6878      	ldr	r0, [r7, #4]
 8007d64:	f000 fa7c 	bl	8008260 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 8007d68:	687b      	ldr	r3, [r7, #4]
 8007d6a:	2228      	movs	r2, #40	; 0x28
 8007d6c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 8007d70:	687b      	ldr	r3, [r7, #4]
 8007d72:	4a60      	ldr	r2, [pc, #384]	; (8007ef4 <I2C_ITError+0x1d8>)
 8007d74:	635a      	str	r2, [r3, #52]	; 0x34
 8007d76:	e030      	b.n	8007dda <I2C_ITError+0xbe>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 8007d78:	f248 0103 	movw	r1, #32771	; 0x8003
 8007d7c:	6878      	ldr	r0, [r7, #4]
 8007d7e:	f000 fa6f 	bl	8008260 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 8007d82:	6878      	ldr	r0, [r7, #4]
 8007d84:	f000 f8e1 	bl	8007f4a <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007d8e:	b2db      	uxtb	r3, r3
 8007d90:	2b60      	cmp	r3, #96	; 0x60
 8007d92:	d01f      	beq.n	8007dd4 <I2C_ITError+0xb8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	2220      	movs	r2, #32
 8007d98:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	681b      	ldr	r3, [r3, #0]
 8007da0:	699b      	ldr	r3, [r3, #24]
 8007da2:	f003 0320 	and.w	r3, r3, #32
 8007da6:	2b20      	cmp	r3, #32
 8007da8:	d114      	bne.n	8007dd4 <I2C_ITError+0xb8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	699b      	ldr	r3, [r3, #24]
 8007db0:	f003 0310 	and.w	r3, r3, #16
 8007db4:	2b10      	cmp	r3, #16
 8007db6:	d109      	bne.n	8007dcc <I2C_ITError+0xb0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	681b      	ldr	r3, [r3, #0]
 8007dbc:	2210      	movs	r2, #16
 8007dbe:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007dc4:	f043 0204 	orr.w	r2, r3, #4
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	645a      	str	r2, [r3, #68]	; 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8007dcc:	687b      	ldr	r3, [r7, #4]
 8007dce:	681b      	ldr	r3, [r3, #0]
 8007dd0:	2220      	movs	r2, #32
 8007dd2:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 8007dd4:	687b      	ldr	r3, [r7, #4]
 8007dd6:	2200      	movs	r2, #0
 8007dd8:	635a      	str	r2, [r3, #52]	; 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 8007dda:	687b      	ldr	r3, [r7, #4]
 8007ddc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007dde:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de4:	2b00      	cmp	r3, #0
 8007de6:	d039      	beq.n	8007e5c <I2C_ITError+0x140>
 8007de8:	68bb      	ldr	r3, [r7, #8]
 8007dea:	2b11      	cmp	r3, #17
 8007dec:	d002      	beq.n	8007df4 <I2C_ITError+0xd8>
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	2b21      	cmp	r3, #33	; 0x21
 8007df2:	d133      	bne.n	8007e5c <I2C_ITError+0x140>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 8007df4:	687b      	ldr	r3, [r7, #4]
 8007df6:	681b      	ldr	r3, [r3, #0]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007dfe:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8007e02:	d107      	bne.n	8007e14 <I2C_ITError+0xf8>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 8007e04:	687b      	ldr	r3, [r7, #4]
 8007e06:	681b      	ldr	r3, [r3, #0]
 8007e08:	681a      	ldr	r2, [r3, #0]
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	681b      	ldr	r3, [r3, #0]
 8007e0e:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8007e12:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e18:	4618      	mov	r0, r3
 8007e1a:	f7fc fa97 	bl	800434c <HAL_DMA_GetState>
 8007e1e:	4603      	mov	r3, r0
 8007e20:	2b01      	cmp	r3, #1
 8007e22:	d017      	beq.n	8007e54 <I2C_ITError+0x138>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e28:	4a33      	ldr	r2, [pc, #204]	; (8007ef8 <I2C_ITError+0x1dc>)
 8007e2a:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007e2c:	687b      	ldr	r3, [r7, #4]
 8007e2e:	2200      	movs	r2, #0
 8007e30:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8007e34:	687b      	ldr	r3, [r7, #4]
 8007e36:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e38:	4618      	mov	r0, r3
 8007e3a:	f7fc f8db 	bl	8003ff4 <HAL_DMA_Abort_IT>
 8007e3e:	4603      	mov	r3, r0
 8007e40:	2b00      	cmp	r3, #0
 8007e42:	d04d      	beq.n	8007ee0 <I2C_ITError+0x1c4>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8007e44:	687b      	ldr	r3, [r7, #4]
 8007e46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e48:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007e4a:	687a      	ldr	r2, [r7, #4]
 8007e4c:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007e4e:	4610      	mov	r0, r2
 8007e50:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007e52:	e045      	b.n	8007ee0 <I2C_ITError+0x1c4>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007e54:	6878      	ldr	r0, [r7, #4]
 8007e56:	f000 f851 	bl	8007efc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007e5a:	e041      	b.n	8007ee0 <I2C_ITError+0x1c4>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e60:	2b00      	cmp	r3, #0
 8007e62:	d039      	beq.n	8007ed8 <I2C_ITError+0x1bc>
 8007e64:	68bb      	ldr	r3, [r7, #8]
 8007e66:	2b12      	cmp	r3, #18
 8007e68:	d002      	beq.n	8007e70 <I2C_ITError+0x154>
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	2b22      	cmp	r3, #34	; 0x22
 8007e6e:	d133      	bne.n	8007ed8 <I2C_ITError+0x1bc>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	681b      	ldr	r3, [r3, #0]
 8007e76:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8007e7a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007e7e:	d107      	bne.n	8007e90 <I2C_ITError+0x174>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007e80:	687b      	ldr	r3, [r7, #4]
 8007e82:	681b      	ldr	r3, [r3, #0]
 8007e84:	681a      	ldr	r2, [r3, #0]
 8007e86:	687b      	ldr	r3, [r7, #4]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007e8e:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007e94:	4618      	mov	r0, r3
 8007e96:	f7fc fa59 	bl	800434c <HAL_DMA_GetState>
 8007e9a:	4603      	mov	r3, r0
 8007e9c:	2b01      	cmp	r3, #1
 8007e9e:	d017      	beq.n	8007ed0 <I2C_ITError+0x1b4>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8007ea0:	687b      	ldr	r3, [r7, #4]
 8007ea2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ea4:	4a14      	ldr	r2, [pc, #80]	; (8007ef8 <I2C_ITError+0x1dc>)
 8007ea6:	651a      	str	r2, [r3, #80]	; 0x50

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8007ea8:	687b      	ldr	r3, [r7, #4]
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8007eb0:	687b      	ldr	r3, [r7, #4]
 8007eb2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007eb4:	4618      	mov	r0, r3
 8007eb6:	f7fc f89d 	bl	8003ff4 <HAL_DMA_Abort_IT>
 8007eba:	4603      	mov	r3, r0
 8007ebc:	2b00      	cmp	r3, #0
 8007ebe:	d011      	beq.n	8007ee4 <I2C_ITError+0x1c8>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8007ec0:	687b      	ldr	r3, [r7, #4]
 8007ec2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8007ec4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007ec6:	687a      	ldr	r2, [r7, #4]
 8007ec8:	6bd2      	ldr	r2, [r2, #60]	; 0x3c
 8007eca:	4610      	mov	r0, r2
 8007ecc:	4798      	blx	r3
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007ece:	e009      	b.n	8007ee4 <I2C_ITError+0x1c8>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 8007ed0:	6878      	ldr	r0, [r7, #4]
 8007ed2:	f000 f813 	bl	8007efc <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007ed6:	e005      	b.n	8007ee4 <I2C_ITError+0x1c8>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 8007ed8:	6878      	ldr	r0, [r7, #4]
 8007eda:	f000 f80f 	bl	8007efc <I2C_TreatErrorCallback>
  }
}
 8007ede:	e002      	b.n	8007ee6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8007ee0:	bf00      	nop
 8007ee2:	e000      	b.n	8007ee6 <I2C_ITError+0x1ca>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8007ee4:	bf00      	nop
}
 8007ee6:	bf00      	nop
 8007ee8:	3710      	adds	r7, #16
 8007eea:	46bd      	mov	sp, r7
 8007eec:	bd80      	pop	{r7, pc}
 8007eee:	bf00      	nop
 8007ef0:	ffff0000 	.word	0xffff0000
 8007ef4:	08006dc9 	.word	0x08006dc9
 8007ef8:	080080b9 	.word	0x080080b9

08007efc <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8007efc:	b580      	push	{r7, lr}
 8007efe:	b082      	sub	sp, #8
 8007f00:	af00      	add	r7, sp, #0
 8007f02:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8007f04:	687b      	ldr	r3, [r7, #4]
 8007f06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	2b60      	cmp	r3, #96	; 0x60
 8007f0e:	d10e      	bne.n	8007f2e <I2C_TreatErrorCallback+0x32>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8007f10:	687b      	ldr	r3, [r7, #4]
 8007f12:	2220      	movs	r2, #32
 8007f14:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
    hi2c->PreviousState = I2C_STATE_NONE;
 8007f18:	687b      	ldr	r3, [r7, #4]
 8007f1a:	2200      	movs	r2, #0
 8007f1c:	631a      	str	r2, [r3, #48]	; 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	2200      	movs	r2, #0
 8007f22:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8007f26:	6878      	ldr	r0, [r7, #4]
 8007f28:	f014 faf0 	bl	801c50c <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8007f2c:	e009      	b.n	8007f42 <I2C_TreatErrorCallback+0x46>
    hi2c->PreviousState = I2C_STATE_NONE;
 8007f2e:	687b      	ldr	r3, [r7, #4]
 8007f30:	2200      	movs	r2, #0
 8007f32:	631a      	str	r2, [r3, #48]	; 0x30
    __HAL_UNLOCK(hi2c);
 8007f34:	687b      	ldr	r3, [r7, #4]
 8007f36:	2200      	movs	r2, #0
 8007f38:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
    HAL_I2C_ErrorCallback(hi2c);
 8007f3c:	6878      	ldr	r0, [r7, #4]
 8007f3e:	f014 fac1 	bl	801c4c4 <HAL_I2C_ErrorCallback>
}
 8007f42:	bf00      	nop
 8007f44:	3708      	adds	r7, #8
 8007f46:	46bd      	mov	sp, r7
 8007f48:	bd80      	pop	{r7, pc}

08007f4a <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 8007f4a:	b480      	push	{r7}
 8007f4c:	b083      	sub	sp, #12
 8007f4e:	af00      	add	r7, sp, #0
 8007f50:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	681b      	ldr	r3, [r3, #0]
 8007f56:	699b      	ldr	r3, [r3, #24]
 8007f58:	f003 0302 	and.w	r3, r3, #2
 8007f5c:	2b02      	cmp	r3, #2
 8007f5e:	d103      	bne.n	8007f68 <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 8007f60:	687b      	ldr	r3, [r7, #4]
 8007f62:	681b      	ldr	r3, [r3, #0]
 8007f64:	2200      	movs	r2, #0
 8007f66:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8007f68:	687b      	ldr	r3, [r7, #4]
 8007f6a:	681b      	ldr	r3, [r3, #0]
 8007f6c:	699b      	ldr	r3, [r3, #24]
 8007f6e:	f003 0301 	and.w	r3, r3, #1
 8007f72:	2b01      	cmp	r3, #1
 8007f74:	d007      	beq.n	8007f86 <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	681b      	ldr	r3, [r3, #0]
 8007f7a:	699a      	ldr	r2, [r3, #24]
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f042 0201 	orr.w	r2, r2, #1
 8007f84:	619a      	str	r2, [r3, #24]
  }
}
 8007f86:	bf00      	nop
 8007f88:	370c      	adds	r7, #12
 8007f8a:	46bd      	mov	sp, r7
 8007f8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f90:	4770      	bx	lr

08007f92 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007f92:	b580      	push	{r7, lr}
 8007f94:	b084      	sub	sp, #16
 8007f96:	af00      	add	r7, sp, #0
 8007f98:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8007f9a:	687b      	ldr	r3, [r7, #4]
 8007f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f9e:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 8007fa0:	68fb      	ldr	r3, [r7, #12]
 8007fa2:	681b      	ldr	r3, [r3, #0]
 8007fa4:	681a      	ldr	r2, [r3, #0]
 8007fa6:	68fb      	ldr	r3, [r7, #12]
 8007fa8:	681b      	ldr	r3, [r3, #0]
 8007faa:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8007fae:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 8007fb0:	68fb      	ldr	r3, [r7, #12]
 8007fb2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fb4:	b29b      	uxth	r3, r3
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d104      	bne.n	8007fc4 <I2C_DMAMasterReceiveCplt+0x32>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 8007fba:	2120      	movs	r1, #32
 8007fbc:	68f8      	ldr	r0, [r7, #12]
 8007fbe:	f000 f8cb 	bl	8008158 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 8007fc2:	e03b      	b.n	800803c <I2C_DMAMasterReceiveCplt+0xaa>
    hi2c->pBuffPtr += hi2c->XferSize;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007fc8:	68fa      	ldr	r2, [r7, #12]
 8007fca:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 8007fcc:	441a      	add	r2, r3
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	625a      	str	r2, [r3, #36]	; 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8007fd6:	b29b      	uxth	r3, r3
 8007fd8:	2bff      	cmp	r3, #255	; 0xff
 8007fda:	d911      	bls.n	8008000 <I2C_DMAMasterReceiveCplt+0x6e>
      if (I2C_GET_DIR(hi2c) == I2C_DIRECTION_RECEIVE)
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	681b      	ldr	r3, [r3, #0]
 8007fe0:	699b      	ldr	r3, [r3, #24]
 8007fe2:	0c1b      	lsrs	r3, r3, #16
 8007fe4:	b2db      	uxtb	r3, r3
 8007fe6:	f003 0301 	and.w	r3, r3, #1
 8007fea:	b2db      	uxtb	r3, r3
 8007fec:	2b01      	cmp	r3, #1
 8007fee:	d103      	bne.n	8007ff8 <I2C_DMAMasterReceiveCplt+0x66>
        hi2c->XferSize = 1U;
 8007ff0:	68fb      	ldr	r3, [r7, #12]
 8007ff2:	2201      	movs	r2, #1
 8007ff4:	851a      	strh	r2, [r3, #40]	; 0x28
 8007ff6:	e008      	b.n	800800a <I2C_DMAMasterReceiveCplt+0x78>
        hi2c->XferSize = MAX_NBYTE_SIZE;
 8007ff8:	68fb      	ldr	r3, [r7, #12]
 8007ffa:	22ff      	movs	r2, #255	; 0xff
 8007ffc:	851a      	strh	r2, [r3, #40]	; 0x28
 8007ffe:	e004      	b.n	800800a <I2C_DMAMasterReceiveCplt+0x78>
      hi2c->XferSize = hi2c->XferCount;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8008004:	b29a      	uxth	r2, r3
 8008006:	68fb      	ldr	r3, [r7, #12]
 8008008:	851a      	strh	r2, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800800a:	68fb      	ldr	r3, [r7, #12]
 800800c:	6bd8      	ldr	r0, [r3, #60]	; 0x3c
 800800e:	68fb      	ldr	r3, [r7, #12]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	3324      	adds	r3, #36	; 0x24
 8008014:	4619      	mov	r1, r3
 8008016:	68fb      	ldr	r3, [r7, #12]
 8008018:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800801a:	461a      	mov	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800801c:	68fb      	ldr	r3, [r7, #12]
 800801e:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 8008020:	f7fb ff18 	bl	8003e54 <HAL_DMA_Start_IT>
 8008024:	4603      	mov	r3, r0
 8008026:	2b00      	cmp	r3, #0
 8008028:	d004      	beq.n	8008034 <I2C_DMAMasterReceiveCplt+0xa2>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800802a:	2110      	movs	r1, #16
 800802c:	68f8      	ldr	r0, [r7, #12]
 800802e:	f7ff fe75 	bl	8007d1c <I2C_ITError>
}
 8008032:	e003      	b.n	800803c <I2C_DMAMasterReceiveCplt+0xaa>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 8008034:	2140      	movs	r1, #64	; 0x40
 8008036:	68f8      	ldr	r0, [r7, #12]
 8008038:	f000 f88e 	bl	8008158 <I2C_Enable_IRQ>
}
 800803c:	bf00      	nop
 800803e:	3710      	adds	r7, #16
 8008040:	46bd      	mov	sp, r7
 8008042:	bd80      	pop	{r7, pc}

08008044 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 8008044:	b580      	push	{r7, lr}
 8008046:	b084      	sub	sp, #16
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
  uint32_t treatdmaerror = 0U;
 800804c:	2300      	movs	r3, #0
 800804e:	60fb      	str	r3, [r7, #12]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 8008050:	687b      	ldr	r3, [r7, #4]
 8008052:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008054:	60bb      	str	r3, [r7, #8]

  if (hi2c->hdmatx != NULL)
 8008056:	68bb      	ldr	r3, [r7, #8]
 8008058:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800805a:	2b00      	cmp	r3, #0
 800805c:	d007      	beq.n	800806e <I2C_DMAError+0x2a>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800805e:	68bb      	ldr	r3, [r7, #8]
 8008060:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008062:	681b      	ldr	r3, [r3, #0]
 8008064:	685b      	ldr	r3, [r3, #4]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d101      	bne.n	800806e <I2C_DMAError+0x2a>
    {
      treatdmaerror = 1U;
 800806a:	2301      	movs	r3, #1
 800806c:	60fb      	str	r3, [r7, #12]
    }
  }

  if (hi2c->hdmarx != NULL)
 800806e:	68bb      	ldr	r3, [r7, #8]
 8008070:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008072:	2b00      	cmp	r3, #0
 8008074:	d007      	beq.n	8008086 <I2C_DMAError+0x42>
  {
    if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 8008076:	68bb      	ldr	r3, [r7, #8]
 8008078:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	685b      	ldr	r3, [r3, #4]
 800807e:	2b00      	cmp	r3, #0
 8008080:	d101      	bne.n	8008086 <I2C_DMAError+0x42>
    {
      treatdmaerror = 1U;
 8008082:	2301      	movs	r3, #1
 8008084:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Check if a FIFO error is detected, if true normal use case, so no specific action to perform */
  if (!((HAL_DMA_GetError(hdma) == HAL_DMA_ERROR_FE)) && (treatdmaerror != 0U))
 8008086:	6878      	ldr	r0, [r7, #4]
 8008088:	f7fc f96e 	bl	8004368 <HAL_DMA_GetError>
 800808c:	4603      	mov	r3, r0
 800808e:	2b02      	cmp	r3, #2
 8008090:	d00e      	beq.n	80080b0 <I2C_DMAError+0x6c>
 8008092:	68fb      	ldr	r3, [r7, #12]
 8008094:	2b00      	cmp	r3, #0
 8008096:	d00b      	beq.n	80080b0 <I2C_DMAError+0x6c>
  {
    /* Disable Acknowledge */
    hi2c->Instance->CR2 |= I2C_CR2_NACK;
 8008098:	68bb      	ldr	r3, [r7, #8]
 800809a:	681b      	ldr	r3, [r3, #0]
 800809c:	685a      	ldr	r2, [r3, #4]
 800809e:	68bb      	ldr	r3, [r7, #8]
 80080a0:	681b      	ldr	r3, [r3, #0]
 80080a2:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80080a6:	605a      	str	r2, [r3, #4]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 80080a8:	2110      	movs	r1, #16
 80080aa:	68b8      	ldr	r0, [r7, #8]
 80080ac:	f7ff fe36 	bl	8007d1c <I2C_ITError>
  }
}
 80080b0:	bf00      	nop
 80080b2:	3710      	adds	r7, #16
 80080b4:	46bd      	mov	sp, r7
 80080b6:	bd80      	pop	{r7, pc}

080080b8 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80080b8:	b580      	push	{r7, lr}
 80080ba:	b084      	sub	sp, #16
 80080bc:	af00      	add	r7, sp, #0
 80080be:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080c4:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	d003      	beq.n	80080d6 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 80080ce:	68fb      	ldr	r3, [r7, #12]
 80080d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080d2:	2200      	movs	r2, #0
 80080d4:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080da:	2b00      	cmp	r3, #0
 80080dc:	d003      	beq.n	80080e6 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80080e2:	2200      	movs	r2, #0
 80080e4:	651a      	str	r2, [r3, #80]	; 0x50
  }

  I2C_TreatErrorCallback(hi2c);
 80080e6:	68f8      	ldr	r0, [r7, #12]
 80080e8:	f7ff ff08 	bl	8007efc <I2C_TreatErrorCallback>
}
 80080ec:	bf00      	nop
 80080ee:	3710      	adds	r7, #16
 80080f0:	46bd      	mov	sp, r7
 80080f2:	bd80      	pop	{r7, pc}

080080f4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 80080f4:	b480      	push	{r7}
 80080f6:	b087      	sub	sp, #28
 80080f8:	af00      	add	r7, sp, #0
 80080fa:	60f8      	str	r0, [r7, #12]
 80080fc:	607b      	str	r3, [r7, #4]
 80080fe:	460b      	mov	r3, r1
 8008100:	817b      	strh	r3, [r7, #10]
 8008102:	4613      	mov	r3, r2
 8008104:	727b      	strb	r3, [r7, #9]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008106:	897b      	ldrh	r3, [r7, #10]
 8008108:	f3c3 0209 	ubfx	r2, r3, #0, #10
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800810c:	7a7b      	ldrb	r3, [r7, #9]
 800810e:	041b      	lsls	r3, r3, #16
 8008110:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 8008114:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 8008116:	687b      	ldr	r3, [r7, #4]
 8008118:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800811a:	6a3b      	ldr	r3, [r7, #32]
 800811c:	4313      	orrs	r3, r2
 800811e:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8008122:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	685a      	ldr	r2, [r3, #4]
 800812a:	6a3b      	ldr	r3, [r7, #32]
 800812c:	0d5b      	lsrs	r3, r3, #21
 800812e:	f403 6180 	and.w	r1, r3, #1024	; 0x400
 8008132:	4b08      	ldr	r3, [pc, #32]	; (8008154 <I2C_TransferConfig+0x60>)
 8008134:	430b      	orrs	r3, r1
 8008136:	43db      	mvns	r3, r3
 8008138:	ea02 0103 	and.w	r1, r2, r3
 800813c:	68fb      	ldr	r3, [r7, #12]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	697a      	ldr	r2, [r7, #20]
 8008142:	430a      	orrs	r2, r1
 8008144:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 8008146:	bf00      	nop
 8008148:	371c      	adds	r7, #28
 800814a:	46bd      	mov	sp, r7
 800814c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008150:	4770      	bx	lr
 8008152:	bf00      	nop
 8008154:	03ff63ff 	.word	0x03ff63ff

08008158 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008158:	b480      	push	{r7}
 800815a:	b085      	sub	sp, #20
 800815c:	af00      	add	r7, sp, #0
 800815e:	6078      	str	r0, [r7, #4]
 8008160:	460b      	mov	r3, r1
 8008162:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 8008164:	2300      	movs	r3, #0
 8008166:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8008168:	687b      	ldr	r3, [r7, #4]
 800816a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800816c:	4a39      	ldr	r2, [pc, #228]	; (8008254 <I2C_Enable_IRQ+0xfc>)
 800816e:	4293      	cmp	r3, r2
 8008170:	d032      	beq.n	80081d8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	6b5b      	ldr	r3, [r3, #52]	; 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 8008176:	4a38      	ldr	r2, [pc, #224]	; (8008258 <I2C_Enable_IRQ+0x100>)
 8008178:	4293      	cmp	r3, r2
 800817a:	d02d      	beq.n	80081d8 <I2C_Enable_IRQ+0x80>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 8008180:	4a36      	ldr	r2, [pc, #216]	; (800825c <I2C_Enable_IRQ+0x104>)
 8008182:	4293      	cmp	r3, r2
 8008184:	d028      	beq.n	80081d8 <I2C_Enable_IRQ+0x80>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 8008186:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800818a:	2b00      	cmp	r3, #0
 800818c:	da03      	bge.n	8008196 <I2C_Enable_IRQ+0x3e>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800818e:	68fb      	ldr	r3, [r7, #12]
 8008190:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 8008194:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008196:	887b      	ldrh	r3, [r7, #2]
 8008198:	f003 0301 	and.w	r3, r3, #1
 800819c:	2b00      	cmp	r3, #0
 800819e:	d003      	beq.n	80081a8 <I2C_Enable_IRQ+0x50>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80081a0:	68fb      	ldr	r3, [r7, #12]
 80081a2:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80081a6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80081a8:	887b      	ldrh	r3, [r7, #2]
 80081aa:	f003 0302 	and.w	r3, r3, #2
 80081ae:	2b00      	cmp	r3, #0
 80081b0:	d003      	beq.n	80081ba <I2C_Enable_IRQ+0x62>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 80081b2:	68fb      	ldr	r3, [r7, #12]
 80081b4:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 80081b8:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 80081ba:	887b      	ldrh	r3, [r7, #2]
 80081bc:	2b10      	cmp	r3, #16
 80081be:	d103      	bne.n	80081c8 <I2C_Enable_IRQ+0x70>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80081c0:	68fb      	ldr	r3, [r7, #12]
 80081c2:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80081c6:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80081c8:	887b      	ldrh	r3, [r7, #2]
 80081ca:	2b20      	cmp	r3, #32
 80081cc:	d133      	bne.n	8008236 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	f043 0320 	orr.w	r3, r3, #32
 80081d4:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 80081d6:	e02e      	b.n	8008236 <I2C_Enable_IRQ+0xde>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80081d8:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80081dc:	2b00      	cmp	r3, #0
 80081de:	da03      	bge.n	80081e8 <I2C_Enable_IRQ+0x90>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80081e6:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 80081e8:	887b      	ldrh	r3, [r7, #2]
 80081ea:	f003 0301 	and.w	r3, r3, #1
 80081ee:	2b00      	cmp	r3, #0
 80081f0:	d003      	beq.n	80081fa <I2C_Enable_IRQ+0xa2>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	f043 03f2 	orr.w	r3, r3, #242	; 0xf2
 80081f8:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 80081fa:	887b      	ldrh	r3, [r7, #2]
 80081fc:	f003 0302 	and.w	r3, r3, #2
 8008200:	2b00      	cmp	r3, #0
 8008202:	d003      	beq.n	800820c <I2C_Enable_IRQ+0xb4>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	f043 03f4 	orr.w	r3, r3, #244	; 0xf4
 800820a:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800820c:	887b      	ldrh	r3, [r7, #2]
 800820e:	2b10      	cmp	r3, #16
 8008210:	d103      	bne.n	800821a <I2C_Enable_IRQ+0xc2>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 8008212:	68fb      	ldr	r3, [r7, #12]
 8008214:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 8008218:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800821a:	887b      	ldrh	r3, [r7, #2]
 800821c:	2b20      	cmp	r3, #32
 800821e:	d103      	bne.n	8008228 <I2C_Enable_IRQ+0xd0>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 8008220:	68fb      	ldr	r3, [r7, #12]
 8008222:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 8008226:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_RELOAD_IT)
 8008228:	887b      	ldrh	r3, [r7, #2]
 800822a:	2b40      	cmp	r3, #64	; 0x40
 800822c:	d103      	bne.n	8008236 <I2C_Enable_IRQ+0xde>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8008234:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 8008236:	687b      	ldr	r3, [r7, #4]
 8008238:	681b      	ldr	r3, [r3, #0]
 800823a:	6819      	ldr	r1, [r3, #0]
 800823c:	687b      	ldr	r3, [r7, #4]
 800823e:	681b      	ldr	r3, [r3, #0]
 8008240:	68fa      	ldr	r2, [r7, #12]
 8008242:	430a      	orrs	r2, r1
 8008244:	601a      	str	r2, [r3, #0]
}
 8008246:	bf00      	nop
 8008248:	3714      	adds	r7, #20
 800824a:	46bd      	mov	sp, r7
 800824c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008250:	4770      	bx	lr
 8008252:	bf00      	nop
 8008254:	08006fbb 	.word	0x08006fbb
 8008258:	08007435 	.word	0x08007435
 800825c:	080071ad 	.word	0x080071ad

08008260 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 8008260:	b480      	push	{r7}
 8008262:	b085      	sub	sp, #20
 8008264:	af00      	add	r7, sp, #0
 8008266:	6078      	str	r0, [r7, #4]
 8008268:	460b      	mov	r3, r1
 800826a:	807b      	strh	r3, [r7, #2]
  uint32_t tmpisr = 0U;
 800826c:	2300      	movs	r3, #0
 800826e:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 8008270:	887b      	ldrh	r3, [r7, #2]
 8008272:	f003 0301 	and.w	r3, r3, #1
 8008276:	2b00      	cmp	r3, #0
 8008278:	d00f      	beq.n	800829a <I2C_Disable_IRQ+0x3a>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	f043 0342 	orr.w	r3, r3, #66	; 0x42
 8008280:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8008288:	b2db      	uxtb	r3, r3
 800828a:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800828e:	2b28      	cmp	r3, #40	; 0x28
 8008290:	d003      	beq.n	800829a <I2C_Disable_IRQ+0x3a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 8008298:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800829a:	887b      	ldrh	r3, [r7, #2]
 800829c:	f003 0302 	and.w	r3, r3, #2
 80082a0:	2b00      	cmp	r3, #0
 80082a2:	d00f      	beq.n	80082c4 <I2C_Disable_IRQ+0x64>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	f043 0344 	orr.w	r3, r3, #68	; 0x44
 80082aa:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80082b2:	b2db      	uxtb	r3, r3
 80082b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80082b8:	2b28      	cmp	r3, #40	; 0x28
 80082ba:	d003      	beq.n	80082c4 <I2C_Disable_IRQ+0x64>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80082bc:	68fb      	ldr	r3, [r7, #12]
 80082be:	f043 03b0 	orr.w	r3, r3, #176	; 0xb0
 80082c2:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 80082c4:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	da03      	bge.n	80082d4 <I2C_Disable_IRQ+0x74>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	f043 03b8 	orr.w	r3, r3, #184	; 0xb8
 80082d2:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 80082d4:	887b      	ldrh	r3, [r7, #2]
 80082d6:	2b10      	cmp	r3, #16
 80082d8:	d103      	bne.n	80082e2 <I2C_Disable_IRQ+0x82>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	f043 0390 	orr.w	r3, r3, #144	; 0x90
 80082e0:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 80082e2:	887b      	ldrh	r3, [r7, #2]
 80082e4:	2b20      	cmp	r3, #32
 80082e6:	d103      	bne.n	80082f0 <I2C_Disable_IRQ+0x90>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 80082e8:	68fb      	ldr	r3, [r7, #12]
 80082ea:	f043 0320 	orr.w	r3, r3, #32
 80082ee:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 80082f0:	887b      	ldrh	r3, [r7, #2]
 80082f2:	2b40      	cmp	r3, #64	; 0x40
 80082f4:	d103      	bne.n	80082fe <I2C_Disable_IRQ+0x9e>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80082fc:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 80082fe:	687b      	ldr	r3, [r7, #4]
 8008300:	681b      	ldr	r3, [r3, #0]
 8008302:	6819      	ldr	r1, [r3, #0]
 8008304:	68fb      	ldr	r3, [r7, #12]
 8008306:	43da      	mvns	r2, r3
 8008308:	687b      	ldr	r3, [r7, #4]
 800830a:	681b      	ldr	r3, [r3, #0]
 800830c:	400a      	ands	r2, r1
 800830e:	601a      	str	r2, [r3, #0]
}
 8008310:	bf00      	nop
 8008312:	3714      	adds	r7, #20
 8008314:	46bd      	mov	sp, r7
 8008316:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831a:	4770      	bx	lr

0800831c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800831c:	b480      	push	{r7}
 800831e:	b083      	sub	sp, #12
 8008320:	af00      	add	r7, sp, #0
 8008322:	6078      	str	r0, [r7, #4]
 8008324:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800832c:	b2db      	uxtb	r3, r3
 800832e:	2b20      	cmp	r3, #32
 8008330:	d138      	bne.n	80083a4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8008338:	2b01      	cmp	r3, #1
 800833a:	d101      	bne.n	8008340 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800833c:	2302      	movs	r3, #2
 800833e:	e032      	b.n	80083a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 8008340:	687b      	ldr	r3, [r7, #4]
 8008342:	2201      	movs	r2, #1
 8008344:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 8008348:	687b      	ldr	r3, [r7, #4]
 800834a:	2224      	movs	r2, #36	; 0x24
 800834c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	681b      	ldr	r3, [r3, #0]
 8008354:	681a      	ldr	r2, [r3, #0]
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	681b      	ldr	r3, [r3, #0]
 800835a:	f022 0201 	bic.w	r2, r2, #1
 800835e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	681a      	ldr	r2, [r3, #0]
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	681b      	ldr	r3, [r3, #0]
 800836a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800836e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 8008370:	687b      	ldr	r3, [r7, #4]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	6819      	ldr	r1, [r3, #0]
 8008376:	687b      	ldr	r3, [r7, #4]
 8008378:	681b      	ldr	r3, [r3, #0]
 800837a:	683a      	ldr	r2, [r7, #0]
 800837c:	430a      	orrs	r2, r1
 800837e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	681b      	ldr	r3, [r3, #0]
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	681b      	ldr	r3, [r3, #0]
 800838a:	f042 0201 	orr.w	r2, r2, #1
 800838e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2220      	movs	r2, #32
 8008394:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	2200      	movs	r2, #0
 800839c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 80083a0:	2300      	movs	r3, #0
 80083a2:	e000      	b.n	80083a6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 80083a4:	2302      	movs	r3, #2
  }
}
 80083a6:	4618      	mov	r0, r3
 80083a8:	370c      	adds	r7, #12
 80083aa:	46bd      	mov	sp, r7
 80083ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083b0:	4770      	bx	lr

080083b2 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 80083b2:	b480      	push	{r7}
 80083b4:	b085      	sub	sp, #20
 80083b6:	af00      	add	r7, sp, #0
 80083b8:	6078      	str	r0, [r7, #4]
 80083ba:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80083c2:	b2db      	uxtb	r3, r3
 80083c4:	2b20      	cmp	r3, #32
 80083c6:	d139      	bne.n	800843c <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 80083c8:	687b      	ldr	r3, [r7, #4]
 80083ca:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80083ce:	2b01      	cmp	r3, #1
 80083d0:	d101      	bne.n	80083d6 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 80083d2:	2302      	movs	r3, #2
 80083d4:	e033      	b.n	800843e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 80083d6:	687b      	ldr	r3, [r7, #4]
 80083d8:	2201      	movs	r2, #1
 80083da:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    hi2c->State = HAL_I2C_STATE_BUSY;
 80083de:	687b      	ldr	r3, [r7, #4]
 80083e0:	2224      	movs	r2, #36	; 0x24
 80083e2:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	681b      	ldr	r3, [r3, #0]
 80083ea:	681a      	ldr	r2, [r3, #0]
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	f022 0201 	bic.w	r2, r2, #1
 80083f4:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 80083f6:	687b      	ldr	r3, [r7, #4]
 80083f8:	681b      	ldr	r3, [r3, #0]
 80083fa:	681b      	ldr	r3, [r3, #0]
 80083fc:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	f423 6370 	bic.w	r3, r3, #3840	; 0xf00
 8008404:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 8008406:	683b      	ldr	r3, [r7, #0]
 8008408:	021b      	lsls	r3, r3, #8
 800840a:	68fa      	ldr	r2, [r7, #12]
 800840c:	4313      	orrs	r3, r2
 800840e:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 8008410:	687b      	ldr	r3, [r7, #4]
 8008412:	681b      	ldr	r3, [r3, #0]
 8008414:	68fa      	ldr	r2, [r7, #12]
 8008416:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 8008418:	687b      	ldr	r3, [r7, #4]
 800841a:	681b      	ldr	r3, [r3, #0]
 800841c:	681a      	ldr	r2, [r3, #0]
 800841e:	687b      	ldr	r3, [r7, #4]
 8008420:	681b      	ldr	r3, [r3, #0]
 8008422:	f042 0201 	orr.w	r2, r2, #1
 8008426:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	2220      	movs	r2, #32
 800842c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	2200      	movs	r2, #0
 8008434:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40

    return HAL_OK;
 8008438:	2300      	movs	r3, #0
 800843a:	e000      	b.n	800843e <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800843c:	2302      	movs	r3, #2
  }
}
 800843e:	4618      	mov	r0, r3
 8008440:	3714      	adds	r7, #20
 8008442:	46bd      	mov	sp, r7
 8008444:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008448:	4770      	bx	lr
	...

0800844c <HAL_PWR_EnableBkUpAccess>:
  * @note If the HSE divided by 2, 3, ..31 is used as the RTC clock, the 
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 800844c:	b480      	push	{r7}
 800844e:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR1, PWR_CR1_DBP);
 8008450:	4b05      	ldr	r3, [pc, #20]	; (8008468 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008452:	681b      	ldr	r3, [r3, #0]
 8008454:	4a04      	ldr	r2, [pc, #16]	; (8008468 <HAL_PWR_EnableBkUpAccess+0x1c>)
 8008456:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800845a:	6013      	str	r3, [r2, #0]
}
 800845c:	bf00      	nop
 800845e:	46bd      	mov	sp, r7
 8008460:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008464:	4770      	bx	lr
 8008466:	bf00      	nop
 8008468:	40007000 	.word	0x40007000

0800846c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800846c:	b580      	push	{r7, lr}
 800846e:	b082      	sub	sp, #8
 8008470:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0;
 8008472:	2300      	movs	r3, #0
 8008474:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8008476:	4b23      	ldr	r3, [pc, #140]	; (8008504 <HAL_PWREx_EnableOverDrive+0x98>)
 8008478:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800847a:	4a22      	ldr	r2, [pc, #136]	; (8008504 <HAL_PWREx_EnableOverDrive+0x98>)
 800847c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008480:	6413      	str	r3, [r2, #64]	; 0x40
 8008482:	4b20      	ldr	r3, [pc, #128]	; (8008504 <HAL_PWREx_EnableOverDrive+0x98>)
 8008484:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008486:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800848a:	603b      	str	r3, [r7, #0]
 800848c:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 216 MHz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 800848e:	4b1e      	ldr	r3, [pc, #120]	; (8008508 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008490:	681b      	ldr	r3, [r3, #0]
 8008492:	4a1d      	ldr	r2, [pc, #116]	; (8008508 <HAL_PWREx_EnableOverDrive+0x9c>)
 8008494:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008498:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 800849a:	f7fa fe7f 	bl	800319c <HAL_GetTick>
 800849e:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80084a0:	e009      	b.n	80084b6 <HAL_PWREx_EnableOverDrive+0x4a>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80084a2:	f7fa fe7b 	bl	800319c <HAL_GetTick>
 80084a6:	4602      	mov	r2, r0
 80084a8:	687b      	ldr	r3, [r7, #4]
 80084aa:	1ad3      	subs	r3, r2, r3
 80084ac:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80084b0:	d901      	bls.n	80084b6 <HAL_PWREx_EnableOverDrive+0x4a>
    {
      return HAL_TIMEOUT;
 80084b2:	2303      	movs	r3, #3
 80084b4:	e022      	b.n	80084fc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 80084b6:	4b14      	ldr	r3, [pc, #80]	; (8008508 <HAL_PWREx_EnableOverDrive+0x9c>)
 80084b8:	685b      	ldr	r3, [r3, #4]
 80084ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80084be:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80084c2:	d1ee      	bne.n	80084a2 <HAL_PWREx_EnableOverDrive+0x36>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 80084c4:	4b10      	ldr	r3, [pc, #64]	; (8008508 <HAL_PWREx_EnableOverDrive+0x9c>)
 80084c6:	681b      	ldr	r3, [r3, #0]
 80084c8:	4a0f      	ldr	r2, [pc, #60]	; (8008508 <HAL_PWREx_EnableOverDrive+0x9c>)
 80084ca:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80084ce:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 80084d0:	f7fa fe64 	bl	800319c <HAL_GetTick>
 80084d4:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80084d6:	e009      	b.n	80084ec <HAL_PWREx_EnableOverDrive+0x80>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 80084d8:	f7fa fe60 	bl	800319c <HAL_GetTick>
 80084dc:	4602      	mov	r2, r0
 80084de:	687b      	ldr	r3, [r7, #4]
 80084e0:	1ad3      	subs	r3, r2, r3
 80084e2:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80084e6:	d901      	bls.n	80084ec <HAL_PWREx_EnableOverDrive+0x80>
    {
      return HAL_TIMEOUT;
 80084e8:	2303      	movs	r3, #3
 80084ea:	e007      	b.n	80084fc <HAL_PWREx_EnableOverDrive+0x90>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 80084ec:	4b06      	ldr	r3, [pc, #24]	; (8008508 <HAL_PWREx_EnableOverDrive+0x9c>)
 80084ee:	685b      	ldr	r3, [r3, #4]
 80084f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80084f4:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80084f8:	d1ee      	bne.n	80084d8 <HAL_PWREx_EnableOverDrive+0x6c>
    }
  } 
  return HAL_OK;
 80084fa:	2300      	movs	r3, #0
}
 80084fc:	4618      	mov	r0, r3
 80084fe:	3708      	adds	r7, #8
 8008500:	46bd      	mov	sp, r7
 8008502:	bd80      	pop	{r7, pc}
 8008504:	40023800 	.word	0x40023800
 8008508:	40007000 	.word	0x40007000

0800850c <HAL_RCC_OscConfig>:
  *         supported by this function. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800850c:	b580      	push	{r7, lr}
 800850e:	b086      	sub	sp, #24
 8008510:	af00      	add	r7, sp, #0
 8008512:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  FlagStatus pwrclkchanged = RESET;
 8008514:	2300      	movs	r3, #0
 8008516:	75fb      	strb	r3, [r7, #23]

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8008518:	687b      	ldr	r3, [r7, #4]
 800851a:	2b00      	cmp	r3, #0
 800851c:	d101      	bne.n	8008522 <HAL_RCC_OscConfig+0x16>
  {
    return HAL_ERROR;
 800851e:	2301      	movs	r3, #1
 8008520:	e291      	b.n	8008a46 <HAL_RCC_OscConfig+0x53a>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	681b      	ldr	r3, [r3, #0]
 8008526:	f003 0301 	and.w	r3, r3, #1
 800852a:	2b00      	cmp	r3, #0
 800852c:	f000 8087 	beq.w	800863e <HAL_RCC_OscConfig+0x132>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL, It can not be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8008530:	4b96      	ldr	r3, [pc, #600]	; (800878c <HAL_RCC_OscConfig+0x280>)
 8008532:	689b      	ldr	r3, [r3, #8]
 8008534:	f003 030c 	and.w	r3, r3, #12
 8008538:	2b04      	cmp	r3, #4
 800853a:	d00c      	beq.n	8008556 <HAL_RCC_OscConfig+0x4a>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800853c:	4b93      	ldr	r3, [pc, #588]	; (800878c <HAL_RCC_OscConfig+0x280>)
 800853e:	689b      	ldr	r3, [r3, #8]
 8008540:	f003 030c 	and.w	r3, r3, #12
 8008544:	2b08      	cmp	r3, #8
 8008546:	d112      	bne.n	800856e <HAL_RCC_OscConfig+0x62>
 8008548:	4b90      	ldr	r3, [pc, #576]	; (800878c <HAL_RCC_OscConfig+0x280>)
 800854a:	685b      	ldr	r3, [r3, #4]
 800854c:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008550:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008554:	d10b      	bne.n	800856e <HAL_RCC_OscConfig+0x62>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008556:	4b8d      	ldr	r3, [pc, #564]	; (800878c <HAL_RCC_OscConfig+0x280>)
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800855e:	2b00      	cmp	r3, #0
 8008560:	d06c      	beq.n	800863c <HAL_RCC_OscConfig+0x130>
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	685b      	ldr	r3, [r3, #4]
 8008566:	2b00      	cmp	r3, #0
 8008568:	d168      	bne.n	800863c <HAL_RCC_OscConfig+0x130>
      {
        return HAL_ERROR;
 800856a:	2301      	movs	r3, #1
 800856c:	e26b      	b.n	8008a46 <HAL_RCC_OscConfig+0x53a>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800856e:	687b      	ldr	r3, [r7, #4]
 8008570:	685b      	ldr	r3, [r3, #4]
 8008572:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8008576:	d106      	bne.n	8008586 <HAL_RCC_OscConfig+0x7a>
 8008578:	4b84      	ldr	r3, [pc, #528]	; (800878c <HAL_RCC_OscConfig+0x280>)
 800857a:	681b      	ldr	r3, [r3, #0]
 800857c:	4a83      	ldr	r2, [pc, #524]	; (800878c <HAL_RCC_OscConfig+0x280>)
 800857e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008582:	6013      	str	r3, [r2, #0]
 8008584:	e02e      	b.n	80085e4 <HAL_RCC_OscConfig+0xd8>
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	685b      	ldr	r3, [r3, #4]
 800858a:	2b00      	cmp	r3, #0
 800858c:	d10c      	bne.n	80085a8 <HAL_RCC_OscConfig+0x9c>
 800858e:	4b7f      	ldr	r3, [pc, #508]	; (800878c <HAL_RCC_OscConfig+0x280>)
 8008590:	681b      	ldr	r3, [r3, #0]
 8008592:	4a7e      	ldr	r2, [pc, #504]	; (800878c <HAL_RCC_OscConfig+0x280>)
 8008594:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8008598:	6013      	str	r3, [r2, #0]
 800859a:	4b7c      	ldr	r3, [pc, #496]	; (800878c <HAL_RCC_OscConfig+0x280>)
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	4a7b      	ldr	r2, [pc, #492]	; (800878c <HAL_RCC_OscConfig+0x280>)
 80085a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80085a4:	6013      	str	r3, [r2, #0]
 80085a6:	e01d      	b.n	80085e4 <HAL_RCC_OscConfig+0xd8>
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	685b      	ldr	r3, [r3, #4]
 80085ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80085b0:	d10c      	bne.n	80085cc <HAL_RCC_OscConfig+0xc0>
 80085b2:	4b76      	ldr	r3, [pc, #472]	; (800878c <HAL_RCC_OscConfig+0x280>)
 80085b4:	681b      	ldr	r3, [r3, #0]
 80085b6:	4a75      	ldr	r2, [pc, #468]	; (800878c <HAL_RCC_OscConfig+0x280>)
 80085b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80085bc:	6013      	str	r3, [r2, #0]
 80085be:	4b73      	ldr	r3, [pc, #460]	; (800878c <HAL_RCC_OscConfig+0x280>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a72      	ldr	r2, [pc, #456]	; (800878c <HAL_RCC_OscConfig+0x280>)
 80085c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085c8:	6013      	str	r3, [r2, #0]
 80085ca:	e00b      	b.n	80085e4 <HAL_RCC_OscConfig+0xd8>
 80085cc:	4b6f      	ldr	r3, [pc, #444]	; (800878c <HAL_RCC_OscConfig+0x280>)
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	4a6e      	ldr	r2, [pc, #440]	; (800878c <HAL_RCC_OscConfig+0x280>)
 80085d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085d6:	6013      	str	r3, [r2, #0]
 80085d8:	4b6c      	ldr	r3, [pc, #432]	; (800878c <HAL_RCC_OscConfig+0x280>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a6b      	ldr	r2, [pc, #428]	; (800878c <HAL_RCC_OscConfig+0x280>)
 80085de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80085e2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80085e4:	687b      	ldr	r3, [r7, #4]
 80085e6:	685b      	ldr	r3, [r3, #4]
 80085e8:	2b00      	cmp	r3, #0
 80085ea:	d013      	beq.n	8008614 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80085ec:	f7fa fdd6 	bl	800319c <HAL_GetTick>
 80085f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085f2:	e008      	b.n	8008606 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80085f4:	f7fa fdd2 	bl	800319c <HAL_GetTick>
 80085f8:	4602      	mov	r2, r0
 80085fa:	693b      	ldr	r3, [r7, #16]
 80085fc:	1ad3      	subs	r3, r2, r3
 80085fe:	2b64      	cmp	r3, #100	; 0x64
 8008600:	d901      	bls.n	8008606 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008602:	2303      	movs	r3, #3
 8008604:	e21f      	b.n	8008a46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008606:	4b61      	ldr	r3, [pc, #388]	; (800878c <HAL_RCC_OscConfig+0x280>)
 8008608:	681b      	ldr	r3, [r3, #0]
 800860a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800860e:	2b00      	cmp	r3, #0
 8008610:	d0f0      	beq.n	80085f4 <HAL_RCC_OscConfig+0xe8>
 8008612:	e014      	b.n	800863e <HAL_RCC_OscConfig+0x132>
        }
      }
      else
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8008614:	f7fa fdc2 	bl	800319c <HAL_GetTick>
 8008618:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800861a:	e008      	b.n	800862e <HAL_RCC_OscConfig+0x122>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800861c:	f7fa fdbe 	bl	800319c <HAL_GetTick>
 8008620:	4602      	mov	r2, r0
 8008622:	693b      	ldr	r3, [r7, #16]
 8008624:	1ad3      	subs	r3, r2, r3
 8008626:	2b64      	cmp	r3, #100	; 0x64
 8008628:	d901      	bls.n	800862e <HAL_RCC_OscConfig+0x122>
          {
            return HAL_TIMEOUT;
 800862a:	2303      	movs	r3, #3
 800862c:	e20b      	b.n	8008a46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800862e:	4b57      	ldr	r3, [pc, #348]	; (800878c <HAL_RCC_OscConfig+0x280>)
 8008630:	681b      	ldr	r3, [r3, #0]
 8008632:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008636:	2b00      	cmp	r3, #0
 8008638:	d1f0      	bne.n	800861c <HAL_RCC_OscConfig+0x110>
 800863a:	e000      	b.n	800863e <HAL_RCC_OscConfig+0x132>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800863c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	f003 0302 	and.w	r3, r3, #2
 8008646:	2b00      	cmp	r3, #0
 8008648:	d069      	beq.n	800871e <HAL_RCC_OscConfig+0x212>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800864a:	4b50      	ldr	r3, [pc, #320]	; (800878c <HAL_RCC_OscConfig+0x280>)
 800864c:	689b      	ldr	r3, [r3, #8]
 800864e:	f003 030c 	and.w	r3, r3, #12
 8008652:	2b00      	cmp	r3, #0
 8008654:	d00b      	beq.n	800866e <HAL_RCC_OscConfig+0x162>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008656:	4b4d      	ldr	r3, [pc, #308]	; (800878c <HAL_RCC_OscConfig+0x280>)
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	f003 030c 	and.w	r3, r3, #12
 800865e:	2b08      	cmp	r3, #8
 8008660:	d11c      	bne.n	800869c <HAL_RCC_OscConfig+0x190>
 8008662:	4b4a      	ldr	r3, [pc, #296]	; (800878c <HAL_RCC_OscConfig+0x280>)
 8008664:	685b      	ldr	r3, [r3, #4]
 8008666:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800866a:	2b00      	cmp	r3, #0
 800866c:	d116      	bne.n	800869c <HAL_RCC_OscConfig+0x190>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800866e:	4b47      	ldr	r3, [pc, #284]	; (800878c <HAL_RCC_OscConfig+0x280>)
 8008670:	681b      	ldr	r3, [r3, #0]
 8008672:	f003 0302 	and.w	r3, r3, #2
 8008676:	2b00      	cmp	r3, #0
 8008678:	d005      	beq.n	8008686 <HAL_RCC_OscConfig+0x17a>
 800867a:	687b      	ldr	r3, [r7, #4]
 800867c:	68db      	ldr	r3, [r3, #12]
 800867e:	2b01      	cmp	r3, #1
 8008680:	d001      	beq.n	8008686 <HAL_RCC_OscConfig+0x17a>
      {
        return HAL_ERROR;
 8008682:	2301      	movs	r3, #1
 8008684:	e1df      	b.n	8008a46 <HAL_RCC_OscConfig+0x53a>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008686:	4b41      	ldr	r3, [pc, #260]	; (800878c <HAL_RCC_OscConfig+0x280>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800868e:	687b      	ldr	r3, [r7, #4]
 8008690:	691b      	ldr	r3, [r3, #16]
 8008692:	00db      	lsls	r3, r3, #3
 8008694:	493d      	ldr	r1, [pc, #244]	; (800878c <HAL_RCC_OscConfig+0x280>)
 8008696:	4313      	orrs	r3, r2
 8008698:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800869a:	e040      	b.n	800871e <HAL_RCC_OscConfig+0x212>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	68db      	ldr	r3, [r3, #12]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d023      	beq.n	80086ec <HAL_RCC_OscConfig+0x1e0>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80086a4:	4b39      	ldr	r3, [pc, #228]	; (800878c <HAL_RCC_OscConfig+0x280>)
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	4a38      	ldr	r2, [pc, #224]	; (800878c <HAL_RCC_OscConfig+0x280>)
 80086aa:	f043 0301 	orr.w	r3, r3, #1
 80086ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086b0:	f7fa fd74 	bl	800319c <HAL_GetTick>
 80086b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80086b6:	e008      	b.n	80086ca <HAL_RCC_OscConfig+0x1be>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80086b8:	f7fa fd70 	bl	800319c <HAL_GetTick>
 80086bc:	4602      	mov	r2, r0
 80086be:	693b      	ldr	r3, [r7, #16]
 80086c0:	1ad3      	subs	r3, r2, r3
 80086c2:	2b02      	cmp	r3, #2
 80086c4:	d901      	bls.n	80086ca <HAL_RCC_OscConfig+0x1be>
          {
            return HAL_TIMEOUT;
 80086c6:	2303      	movs	r3, #3
 80086c8:	e1bd      	b.n	8008a46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80086ca:	4b30      	ldr	r3, [pc, #192]	; (800878c <HAL_RCC_OscConfig+0x280>)
 80086cc:	681b      	ldr	r3, [r3, #0]
 80086ce:	f003 0302 	and.w	r3, r3, #2
 80086d2:	2b00      	cmp	r3, #0
 80086d4:	d0f0      	beq.n	80086b8 <HAL_RCC_OscConfig+0x1ac>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086d6:	4b2d      	ldr	r3, [pc, #180]	; (800878c <HAL_RCC_OscConfig+0x280>)
 80086d8:	681b      	ldr	r3, [r3, #0]
 80086da:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	691b      	ldr	r3, [r3, #16]
 80086e2:	00db      	lsls	r3, r3, #3
 80086e4:	4929      	ldr	r1, [pc, #164]	; (800878c <HAL_RCC_OscConfig+0x280>)
 80086e6:	4313      	orrs	r3, r2
 80086e8:	600b      	str	r3, [r1, #0]
 80086ea:	e018      	b.n	800871e <HAL_RCC_OscConfig+0x212>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80086ec:	4b27      	ldr	r3, [pc, #156]	; (800878c <HAL_RCC_OscConfig+0x280>)
 80086ee:	681b      	ldr	r3, [r3, #0]
 80086f0:	4a26      	ldr	r2, [pc, #152]	; (800878c <HAL_RCC_OscConfig+0x280>)
 80086f2:	f023 0301 	bic.w	r3, r3, #1
 80086f6:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086f8:	f7fa fd50 	bl	800319c <HAL_GetTick>
 80086fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80086fe:	e008      	b.n	8008712 <HAL_RCC_OscConfig+0x206>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8008700:	f7fa fd4c 	bl	800319c <HAL_GetTick>
 8008704:	4602      	mov	r2, r0
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	1ad3      	subs	r3, r2, r3
 800870a:	2b02      	cmp	r3, #2
 800870c:	d901      	bls.n	8008712 <HAL_RCC_OscConfig+0x206>
          {
            return HAL_TIMEOUT;
 800870e:	2303      	movs	r3, #3
 8008710:	e199      	b.n	8008a46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008712:	4b1e      	ldr	r3, [pc, #120]	; (800878c <HAL_RCC_OscConfig+0x280>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f003 0302 	and.w	r3, r3, #2
 800871a:	2b00      	cmp	r3, #0
 800871c:	d1f0      	bne.n	8008700 <HAL_RCC_OscConfig+0x1f4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f003 0308 	and.w	r3, r3, #8
 8008726:	2b00      	cmp	r3, #0
 8008728:	d038      	beq.n	800879c <HAL_RCC_OscConfig+0x290>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	695b      	ldr	r3, [r3, #20]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d019      	beq.n	8008766 <HAL_RCC_OscConfig+0x25a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008732:	4b16      	ldr	r3, [pc, #88]	; (800878c <HAL_RCC_OscConfig+0x280>)
 8008734:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008736:	4a15      	ldr	r2, [pc, #84]	; (800878c <HAL_RCC_OscConfig+0x280>)
 8008738:	f043 0301 	orr.w	r3, r3, #1
 800873c:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800873e:	f7fa fd2d 	bl	800319c <HAL_GetTick>
 8008742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008744:	e008      	b.n	8008758 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8008746:	f7fa fd29 	bl	800319c <HAL_GetTick>
 800874a:	4602      	mov	r2, r0
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	1ad3      	subs	r3, r2, r3
 8008750:	2b02      	cmp	r3, #2
 8008752:	d901      	bls.n	8008758 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008754:	2303      	movs	r3, #3
 8008756:	e176      	b.n	8008a46 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008758:	4b0c      	ldr	r3, [pc, #48]	; (800878c <HAL_RCC_OscConfig+0x280>)
 800875a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800875c:	f003 0302 	and.w	r3, r3, #2
 8008760:	2b00      	cmp	r3, #0
 8008762:	d0f0      	beq.n	8008746 <HAL_RCC_OscConfig+0x23a>
 8008764:	e01a      	b.n	800879c <HAL_RCC_OscConfig+0x290>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008766:	4b09      	ldr	r3, [pc, #36]	; (800878c <HAL_RCC_OscConfig+0x280>)
 8008768:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800876a:	4a08      	ldr	r2, [pc, #32]	; (800878c <HAL_RCC_OscConfig+0x280>)
 800876c:	f023 0301 	bic.w	r3, r3, #1
 8008770:	6753      	str	r3, [r2, #116]	; 0x74

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008772:	f7fa fd13 	bl	800319c <HAL_GetTick>
 8008776:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008778:	e00a      	b.n	8008790 <HAL_RCC_OscConfig+0x284>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 800877a:	f7fa fd0f 	bl	800319c <HAL_GetTick>
 800877e:	4602      	mov	r2, r0
 8008780:	693b      	ldr	r3, [r7, #16]
 8008782:	1ad3      	subs	r3, r2, r3
 8008784:	2b02      	cmp	r3, #2
 8008786:	d903      	bls.n	8008790 <HAL_RCC_OscConfig+0x284>
        {
          return HAL_TIMEOUT;
 8008788:	2303      	movs	r3, #3
 800878a:	e15c      	b.n	8008a46 <HAL_RCC_OscConfig+0x53a>
 800878c:	40023800 	.word	0x40023800
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008790:	4b91      	ldr	r3, [pc, #580]	; (80089d8 <HAL_RCC_OscConfig+0x4cc>)
 8008792:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008794:	f003 0302 	and.w	r3, r3, #2
 8008798:	2b00      	cmp	r3, #0
 800879a:	d1ee      	bne.n	800877a <HAL_RCC_OscConfig+0x26e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	f003 0304 	and.w	r3, r3, #4
 80087a4:	2b00      	cmp	r3, #0
 80087a6:	f000 80a4 	beq.w	80088f2 <HAL_RCC_OscConfig+0x3e6>
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80087aa:	4b8b      	ldr	r3, [pc, #556]	; (80089d8 <HAL_RCC_OscConfig+0x4cc>)
 80087ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d10d      	bne.n	80087d2 <HAL_RCC_OscConfig+0x2c6>
    {
      /* Enable Power Clock*/
      __HAL_RCC_PWR_CLK_ENABLE();
 80087b6:	4b88      	ldr	r3, [pc, #544]	; (80089d8 <HAL_RCC_OscConfig+0x4cc>)
 80087b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ba:	4a87      	ldr	r2, [pc, #540]	; (80089d8 <HAL_RCC_OscConfig+0x4cc>)
 80087bc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087c0:	6413      	str	r3, [r2, #64]	; 0x40
 80087c2:	4b85      	ldr	r3, [pc, #532]	; (80089d8 <HAL_RCC_OscConfig+0x4cc>)
 80087c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087c6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087ca:	60bb      	str	r3, [r7, #8]
 80087cc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80087ce:	2301      	movs	r3, #1
 80087d0:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80087d2:	4b82      	ldr	r3, [pc, #520]	; (80089dc <HAL_RCC_OscConfig+0x4d0>)
 80087d4:	681b      	ldr	r3, [r3, #0]
 80087d6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087da:	2b00      	cmp	r3, #0
 80087dc:	d118      	bne.n	8008810 <HAL_RCC_OscConfig+0x304>
    {
      /* Enable write access to Backup domain */
      PWR->CR1 |= PWR_CR1_DBP;
 80087de:	4b7f      	ldr	r3, [pc, #508]	; (80089dc <HAL_RCC_OscConfig+0x4d0>)
 80087e0:	681b      	ldr	r3, [r3, #0]
 80087e2:	4a7e      	ldr	r2, [pc, #504]	; (80089dc <HAL_RCC_OscConfig+0x4d0>)
 80087e4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087e8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80087ea:	f7fa fcd7 	bl	800319c <HAL_GetTick>
 80087ee:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 80087f0:	e008      	b.n	8008804 <HAL_RCC_OscConfig+0x2f8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80087f2:	f7fa fcd3 	bl	800319c <HAL_GetTick>
 80087f6:	4602      	mov	r2, r0
 80087f8:	693b      	ldr	r3, [r7, #16]
 80087fa:	1ad3      	subs	r3, r2, r3
 80087fc:	2b64      	cmp	r3, #100	; 0x64
 80087fe:	d901      	bls.n	8008804 <HAL_RCC_OscConfig+0x2f8>
        {
          return HAL_TIMEOUT;
 8008800:	2303      	movs	r3, #3
 8008802:	e120      	b.n	8008a46 <HAL_RCC_OscConfig+0x53a>
      while (HAL_IS_BIT_CLR(PWR->CR1, PWR_CR1_DBP))
 8008804:	4b75      	ldr	r3, [pc, #468]	; (80089dc <HAL_RCC_OscConfig+0x4d0>)
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800880c:	2b00      	cmp	r3, #0
 800880e:	d0f0      	beq.n	80087f2 <HAL_RCC_OscConfig+0x2e6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	689b      	ldr	r3, [r3, #8]
 8008814:	2b01      	cmp	r3, #1
 8008816:	d106      	bne.n	8008826 <HAL_RCC_OscConfig+0x31a>
 8008818:	4b6f      	ldr	r3, [pc, #444]	; (80089d8 <HAL_RCC_OscConfig+0x4cc>)
 800881a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800881c:	4a6e      	ldr	r2, [pc, #440]	; (80089d8 <HAL_RCC_OscConfig+0x4cc>)
 800881e:	f043 0301 	orr.w	r3, r3, #1
 8008822:	6713      	str	r3, [r2, #112]	; 0x70
 8008824:	e02d      	b.n	8008882 <HAL_RCC_OscConfig+0x376>
 8008826:	687b      	ldr	r3, [r7, #4]
 8008828:	689b      	ldr	r3, [r3, #8]
 800882a:	2b00      	cmp	r3, #0
 800882c:	d10c      	bne.n	8008848 <HAL_RCC_OscConfig+0x33c>
 800882e:	4b6a      	ldr	r3, [pc, #424]	; (80089d8 <HAL_RCC_OscConfig+0x4cc>)
 8008830:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008832:	4a69      	ldr	r2, [pc, #420]	; (80089d8 <HAL_RCC_OscConfig+0x4cc>)
 8008834:	f023 0301 	bic.w	r3, r3, #1
 8008838:	6713      	str	r3, [r2, #112]	; 0x70
 800883a:	4b67      	ldr	r3, [pc, #412]	; (80089d8 <HAL_RCC_OscConfig+0x4cc>)
 800883c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800883e:	4a66      	ldr	r2, [pc, #408]	; (80089d8 <HAL_RCC_OscConfig+0x4cc>)
 8008840:	f023 0304 	bic.w	r3, r3, #4
 8008844:	6713      	str	r3, [r2, #112]	; 0x70
 8008846:	e01c      	b.n	8008882 <HAL_RCC_OscConfig+0x376>
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	689b      	ldr	r3, [r3, #8]
 800884c:	2b05      	cmp	r3, #5
 800884e:	d10c      	bne.n	800886a <HAL_RCC_OscConfig+0x35e>
 8008850:	4b61      	ldr	r3, [pc, #388]	; (80089d8 <HAL_RCC_OscConfig+0x4cc>)
 8008852:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008854:	4a60      	ldr	r2, [pc, #384]	; (80089d8 <HAL_RCC_OscConfig+0x4cc>)
 8008856:	f043 0304 	orr.w	r3, r3, #4
 800885a:	6713      	str	r3, [r2, #112]	; 0x70
 800885c:	4b5e      	ldr	r3, [pc, #376]	; (80089d8 <HAL_RCC_OscConfig+0x4cc>)
 800885e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008860:	4a5d      	ldr	r2, [pc, #372]	; (80089d8 <HAL_RCC_OscConfig+0x4cc>)
 8008862:	f043 0301 	orr.w	r3, r3, #1
 8008866:	6713      	str	r3, [r2, #112]	; 0x70
 8008868:	e00b      	b.n	8008882 <HAL_RCC_OscConfig+0x376>
 800886a:	4b5b      	ldr	r3, [pc, #364]	; (80089d8 <HAL_RCC_OscConfig+0x4cc>)
 800886c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800886e:	4a5a      	ldr	r2, [pc, #360]	; (80089d8 <HAL_RCC_OscConfig+0x4cc>)
 8008870:	f023 0301 	bic.w	r3, r3, #1
 8008874:	6713      	str	r3, [r2, #112]	; 0x70
 8008876:	4b58      	ldr	r3, [pc, #352]	; (80089d8 <HAL_RCC_OscConfig+0x4cc>)
 8008878:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800887a:	4a57      	ldr	r2, [pc, #348]	; (80089d8 <HAL_RCC_OscConfig+0x4cc>)
 800887c:	f023 0304 	bic.w	r3, r3, #4
 8008880:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	689b      	ldr	r3, [r3, #8]
 8008886:	2b00      	cmp	r3, #0
 8008888:	d015      	beq.n	80088b6 <HAL_RCC_OscConfig+0x3aa>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800888a:	f7fa fc87 	bl	800319c <HAL_GetTick>
 800888e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008890:	e00a      	b.n	80088a8 <HAL_RCC_OscConfig+0x39c>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8008892:	f7fa fc83 	bl	800319c <HAL_GetTick>
 8008896:	4602      	mov	r2, r0
 8008898:	693b      	ldr	r3, [r7, #16]
 800889a:	1ad3      	subs	r3, r2, r3
 800889c:	f241 3288 	movw	r2, #5000	; 0x1388
 80088a0:	4293      	cmp	r3, r2
 80088a2:	d901      	bls.n	80088a8 <HAL_RCC_OscConfig+0x39c>
        {
          return HAL_TIMEOUT;
 80088a4:	2303      	movs	r3, #3
 80088a6:	e0ce      	b.n	8008a46 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80088a8:	4b4b      	ldr	r3, [pc, #300]	; (80089d8 <HAL_RCC_OscConfig+0x4cc>)
 80088aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088ac:	f003 0302 	and.w	r3, r3, #2
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	d0ee      	beq.n	8008892 <HAL_RCC_OscConfig+0x386>
 80088b4:	e014      	b.n	80088e0 <HAL_RCC_OscConfig+0x3d4>
      }
    }
    else
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80088b6:	f7fa fc71 	bl	800319c <HAL_GetTick>
 80088ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80088bc:	e00a      	b.n	80088d4 <HAL_RCC_OscConfig+0x3c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80088be:	f7fa fc6d 	bl	800319c <HAL_GetTick>
 80088c2:	4602      	mov	r2, r0
 80088c4:	693b      	ldr	r3, [r7, #16]
 80088c6:	1ad3      	subs	r3, r2, r3
 80088c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80088cc:	4293      	cmp	r3, r2
 80088ce:	d901      	bls.n	80088d4 <HAL_RCC_OscConfig+0x3c8>
        {
          return HAL_TIMEOUT;
 80088d0:	2303      	movs	r3, #3
 80088d2:	e0b8      	b.n	8008a46 <HAL_RCC_OscConfig+0x53a>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80088d4:	4b40      	ldr	r3, [pc, #256]	; (80089d8 <HAL_RCC_OscConfig+0x4cc>)
 80088d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088d8:	f003 0302 	and.w	r3, r3, #2
 80088dc:	2b00      	cmp	r3, #0
 80088de:	d1ee      	bne.n	80088be <HAL_RCC_OscConfig+0x3b2>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80088e0:	7dfb      	ldrb	r3, [r7, #23]
 80088e2:	2b01      	cmp	r3, #1
 80088e4:	d105      	bne.n	80088f2 <HAL_RCC_OscConfig+0x3e6>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80088e6:	4b3c      	ldr	r3, [pc, #240]	; (80089d8 <HAL_RCC_OscConfig+0x4cc>)
 80088e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088ea:	4a3b      	ldr	r2, [pc, #236]	; (80089d8 <HAL_RCC_OscConfig+0x4cc>)
 80088ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80088f2:	687b      	ldr	r3, [r7, #4]
 80088f4:	699b      	ldr	r3, [r3, #24]
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	f000 80a4 	beq.w	8008a44 <HAL_RCC_OscConfig+0x538>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80088fc:	4b36      	ldr	r3, [pc, #216]	; (80089d8 <HAL_RCC_OscConfig+0x4cc>)
 80088fe:	689b      	ldr	r3, [r3, #8]
 8008900:	f003 030c 	and.w	r3, r3, #12
 8008904:	2b08      	cmp	r3, #8
 8008906:	d06b      	beq.n	80089e0 <HAL_RCC_OscConfig+0x4d4>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	699b      	ldr	r3, [r3, #24]
 800890c:	2b02      	cmp	r3, #2
 800890e:	d149      	bne.n	80089a4 <HAL_RCC_OscConfig+0x498>
#if defined (RCC_PLLCFGR_PLLR)
        assert_param(IS_RCC_PLLR_VALUE(RCC_OscInitStruct->PLL.PLLR));
#endif

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008910:	4b31      	ldr	r3, [pc, #196]	; (80089d8 <HAL_RCC_OscConfig+0x4cc>)
 8008912:	681b      	ldr	r3, [r3, #0]
 8008914:	4a30      	ldr	r2, [pc, #192]	; (80089d8 <HAL_RCC_OscConfig+0x4cc>)
 8008916:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 800891a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800891c:	f7fa fc3e 	bl	800319c <HAL_GetTick>
 8008920:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008922:	e008      	b.n	8008936 <HAL_RCC_OscConfig+0x42a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008924:	f7fa fc3a 	bl	800319c <HAL_GetTick>
 8008928:	4602      	mov	r2, r0
 800892a:	693b      	ldr	r3, [r7, #16]
 800892c:	1ad3      	subs	r3, r2, r3
 800892e:	2b02      	cmp	r3, #2
 8008930:	d901      	bls.n	8008936 <HAL_RCC_OscConfig+0x42a>
          {
            return HAL_TIMEOUT;
 8008932:	2303      	movs	r3, #3
 8008934:	e087      	b.n	8008a46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008936:	4b28      	ldr	r3, [pc, #160]	; (80089d8 <HAL_RCC_OscConfig+0x4cc>)
 8008938:	681b      	ldr	r3, [r3, #0]
 800893a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800893e:	2b00      	cmp	r3, #0
 8008940:	d1f0      	bne.n	8008924 <HAL_RCC_OscConfig+0x418>
                             RCC_OscInitStruct->PLL.PLLN,
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ,
                             RCC_OscInitStruct->PLL.PLLR);
#else
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	69da      	ldr	r2, [r3, #28]
 8008946:	687b      	ldr	r3, [r7, #4]
 8008948:	6a1b      	ldr	r3, [r3, #32]
 800894a:	431a      	orrs	r2, r3
 800894c:	687b      	ldr	r3, [r7, #4]
 800894e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008950:	019b      	lsls	r3, r3, #6
 8008952:	431a      	orrs	r2, r3
 8008954:	687b      	ldr	r3, [r7, #4]
 8008956:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008958:	085b      	lsrs	r3, r3, #1
 800895a:	3b01      	subs	r3, #1
 800895c:	041b      	lsls	r3, r3, #16
 800895e:	431a      	orrs	r2, r3
 8008960:	687b      	ldr	r3, [r7, #4]
 8008962:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008964:	061b      	lsls	r3, r3, #24
 8008966:	4313      	orrs	r3, r2
 8008968:	4a1b      	ldr	r2, [pc, #108]	; (80089d8 <HAL_RCC_OscConfig+0x4cc>)
 800896a:	f043 5300 	orr.w	r3, r3, #536870912	; 0x20000000
 800896e:	6053      	str	r3, [r2, #4]
                             RCC_OscInitStruct->PLL.PLLP,
                             RCC_OscInitStruct->PLL.PLLQ);
#endif

        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008970:	4b19      	ldr	r3, [pc, #100]	; (80089d8 <HAL_RCC_OscConfig+0x4cc>)
 8008972:	681b      	ldr	r3, [r3, #0]
 8008974:	4a18      	ldr	r2, [pc, #96]	; (80089d8 <HAL_RCC_OscConfig+0x4cc>)
 8008976:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 800897a:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800897c:	f7fa fc0e 	bl	800319c <HAL_GetTick>
 8008980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008982:	e008      	b.n	8008996 <HAL_RCC_OscConfig+0x48a>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8008984:	f7fa fc0a 	bl	800319c <HAL_GetTick>
 8008988:	4602      	mov	r2, r0
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	1ad3      	subs	r3, r2, r3
 800898e:	2b02      	cmp	r3, #2
 8008990:	d901      	bls.n	8008996 <HAL_RCC_OscConfig+0x48a>
          {
            return HAL_TIMEOUT;
 8008992:	2303      	movs	r3, #3
 8008994:	e057      	b.n	8008a46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008996:	4b10      	ldr	r3, [pc, #64]	; (80089d8 <HAL_RCC_OscConfig+0x4cc>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d0f0      	beq.n	8008984 <HAL_RCC_OscConfig+0x478>
 80089a2:	e04f      	b.n	8008a44 <HAL_RCC_OscConfig+0x538>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80089a4:	4b0c      	ldr	r3, [pc, #48]	; (80089d8 <HAL_RCC_OscConfig+0x4cc>)
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	4a0b      	ldr	r2, [pc, #44]	; (80089d8 <HAL_RCC_OscConfig+0x4cc>)
 80089aa:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80089ae:	6013      	str	r3, [r2, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80089b0:	f7fa fbf4 	bl	800319c <HAL_GetTick>
 80089b4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089b6:	e008      	b.n	80089ca <HAL_RCC_OscConfig+0x4be>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80089b8:	f7fa fbf0 	bl	800319c <HAL_GetTick>
 80089bc:	4602      	mov	r2, r0
 80089be:	693b      	ldr	r3, [r7, #16]
 80089c0:	1ad3      	subs	r3, r2, r3
 80089c2:	2b02      	cmp	r3, #2
 80089c4:	d901      	bls.n	80089ca <HAL_RCC_OscConfig+0x4be>
          {
            return HAL_TIMEOUT;
 80089c6:	2303      	movs	r3, #3
 80089c8:	e03d      	b.n	8008a46 <HAL_RCC_OscConfig+0x53a>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80089ca:	4b03      	ldr	r3, [pc, #12]	; (80089d8 <HAL_RCC_OscConfig+0x4cc>)
 80089cc:	681b      	ldr	r3, [r3, #0]
 80089ce:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80089d2:	2b00      	cmp	r3, #0
 80089d4:	d1f0      	bne.n	80089b8 <HAL_RCC_OscConfig+0x4ac>
 80089d6:	e035      	b.n	8008a44 <HAL_RCC_OscConfig+0x538>
 80089d8:	40023800 	.word	0x40023800
 80089dc:	40007000 	.word	0x40007000
      }
    }
    else
    {
      /* Do not return HAL_ERROR if request repeats the current configuration */
      pll_config = RCC->PLLCFGR;
 80089e0:	4b1b      	ldr	r3, [pc, #108]	; (8008a50 <HAL_RCC_OscConfig+0x544>)
 80089e2:	685b      	ldr	r3, [r3, #4]
 80089e4:	60fb      	str	r3, [r7, #12]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	699b      	ldr	r3, [r3, #24]
 80089ea:	2b01      	cmp	r3, #1
 80089ec:	d028      	beq.n	8008a40 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089ee:	68fb      	ldr	r3, [r7, #12]
 80089f0:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	69db      	ldr	r3, [r3, #28]
      if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80089f8:	429a      	cmp	r2, r3
 80089fa:	d121      	bne.n	8008a40 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6a1b      	ldr	r3, [r3, #32]
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8008a06:	429a      	cmp	r2, r3
 8008a08:	d11a      	bne.n	8008a40 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008a0a:	68fa      	ldr	r2, [r7, #12]
 8008a0c:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8008a10:	4013      	ands	r3, r2
 8008a12:	687a      	ldr	r2, [r7, #4]
 8008a14:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8008a16:	0192      	lsls	r2, r2, #6
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8008a18:	4293      	cmp	r3, r2
 8008a1a:	d111      	bne.n	8008a40 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8008a22:	687b      	ldr	r3, [r7, #4]
 8008a24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a26:	085b      	lsrs	r3, r3, #1
 8008a28:	3b01      	subs	r3, #1
 8008a2a:	041b      	lsls	r3, r3, #16
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)) ||
 8008a2c:	429a      	cmp	r2, r3
 8008a2e:	d107      	bne.n	8008a40 <HAL_RCC_OscConfig+0x534>
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008a36:	687b      	ldr	r3, [r7, #4]
 8008a38:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a3a:	061b      	lsls	r3, r3, #24
          (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != ((((RCC_OscInitStruct->PLL.PLLP) >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos)) ||
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d001      	beq.n	8008a44 <HAL_RCC_OscConfig+0x538>
#endif
      {
        return HAL_ERROR;
 8008a40:	2301      	movs	r3, #1
 8008a42:	e000      	b.n	8008a46 <HAL_RCC_OscConfig+0x53a>
      }
    }
  }
  return HAL_OK;
 8008a44:	2300      	movs	r3, #0
}
 8008a46:	4618      	mov	r0, r3
 8008a48:	3718      	adds	r7, #24
 8008a4a:	46bd      	mov	sp, r7
 8008a4c:	bd80      	pop	{r7, pc}
 8008a4e:	bf00      	nop
 8008a50:	40023800 	.word	0x40023800

08008a54 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008a54:	b580      	push	{r7, lr}
 8008a56:	b084      	sub	sp, #16
 8008a58:	af00      	add	r7, sp, #0
 8008a5a:	6078      	str	r0, [r7, #4]
 8008a5c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 8008a5e:	2300      	movs	r3, #0
 8008a60:	60fb      	str	r3, [r7, #12]

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8008a62:	687b      	ldr	r3, [r7, #4]
 8008a64:	2b00      	cmp	r3, #0
 8008a66:	d101      	bne.n	8008a6c <HAL_RCC_ClockConfig+0x18>
  {
    return HAL_ERROR;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e0d0      	b.n	8008c0e <HAL_RCC_ClockConfig+0x1ba>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
     must be correctly programmed according to the frequency of the CPU clock
     (HCLK) and the supply voltage of the device. */

  /* Increasing the CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8008a6c:	4b6a      	ldr	r3, [pc, #424]	; (8008c18 <HAL_RCC_ClockConfig+0x1c4>)
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f003 030f 	and.w	r3, r3, #15
 8008a74:	683a      	ldr	r2, [r7, #0]
 8008a76:	429a      	cmp	r2, r3
 8008a78:	d910      	bls.n	8008a9c <HAL_RCC_ClockConfig+0x48>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a7a:	4b67      	ldr	r3, [pc, #412]	; (8008c18 <HAL_RCC_ClockConfig+0x1c4>)
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f023 020f 	bic.w	r2, r3, #15
 8008a82:	4965      	ldr	r1, [pc, #404]	; (8008c18 <HAL_RCC_ClockConfig+0x1c4>)
 8008a84:	683b      	ldr	r3, [r7, #0]
 8008a86:	4313      	orrs	r3, r2
 8008a88:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a8a:	4b63      	ldr	r3, [pc, #396]	; (8008c18 <HAL_RCC_ClockConfig+0x1c4>)
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f003 030f 	and.w	r3, r3, #15
 8008a92:	683a      	ldr	r2, [r7, #0]
 8008a94:	429a      	cmp	r2, r3
 8008a96:	d001      	beq.n	8008a9c <HAL_RCC_ClockConfig+0x48>
    {
      return HAL_ERROR;
 8008a98:	2301      	movs	r3, #1
 8008a9a:	e0b8      	b.n	8008c0e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	681b      	ldr	r3, [r3, #0]
 8008aa0:	f003 0302 	and.w	r3, r3, #2
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	d020      	beq.n	8008aea <HAL_RCC_ClockConfig+0x96>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	681b      	ldr	r3, [r3, #0]
 8008aac:	f003 0304 	and.w	r3, r3, #4
 8008ab0:	2b00      	cmp	r3, #0
 8008ab2:	d005      	beq.n	8008ac0 <HAL_RCC_ClockConfig+0x6c>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008ab4:	4b59      	ldr	r3, [pc, #356]	; (8008c1c <HAL_RCC_ClockConfig+0x1c8>)
 8008ab6:	689b      	ldr	r3, [r3, #8]
 8008ab8:	4a58      	ldr	r2, [pc, #352]	; (8008c1c <HAL_RCC_ClockConfig+0x1c8>)
 8008aba:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008abe:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	f003 0308 	and.w	r3, r3, #8
 8008ac8:	2b00      	cmp	r3, #0
 8008aca:	d005      	beq.n	8008ad8 <HAL_RCC_ClockConfig+0x84>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008acc:	4b53      	ldr	r3, [pc, #332]	; (8008c1c <HAL_RCC_ClockConfig+0x1c8>)
 8008ace:	689b      	ldr	r3, [r3, #8]
 8008ad0:	4a52      	ldr	r2, [pc, #328]	; (8008c1c <HAL_RCC_ClockConfig+0x1c8>)
 8008ad2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008ad6:	6093      	str	r3, [r2, #8]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008ad8:	4b50      	ldr	r3, [pc, #320]	; (8008c1c <HAL_RCC_ClockConfig+0x1c8>)
 8008ada:	689b      	ldr	r3, [r3, #8]
 8008adc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008ae0:	687b      	ldr	r3, [r7, #4]
 8008ae2:	689b      	ldr	r3, [r3, #8]
 8008ae4:	494d      	ldr	r1, [pc, #308]	; (8008c1c <HAL_RCC_ClockConfig+0x1c8>)
 8008ae6:	4313      	orrs	r3, r2
 8008ae8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	f003 0301 	and.w	r3, r3, #1
 8008af2:	2b00      	cmp	r3, #0
 8008af4:	d040      	beq.n	8008b78 <HAL_RCC_ClockConfig+0x124>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008af6:	687b      	ldr	r3, [r7, #4]
 8008af8:	685b      	ldr	r3, [r3, #4]
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d107      	bne.n	8008b0e <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008afe:	4b47      	ldr	r3, [pc, #284]	; (8008c1c <HAL_RCC_ClockConfig+0x1c8>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d115      	bne.n	8008b36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e07f      	b.n	8008c0e <HAL_RCC_ClockConfig+0x1ba>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8008b0e:	687b      	ldr	r3, [r7, #4]
 8008b10:	685b      	ldr	r3, [r3, #4]
 8008b12:	2b02      	cmp	r3, #2
 8008b14:	d107      	bne.n	8008b26 <HAL_RCC_ClockConfig+0xd2>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008b16:	4b41      	ldr	r3, [pc, #260]	; (8008c1c <HAL_RCC_ClockConfig+0x1c8>)
 8008b18:	681b      	ldr	r3, [r3, #0]
 8008b1a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008b1e:	2b00      	cmp	r3, #0
 8008b20:	d109      	bne.n	8008b36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008b22:	2301      	movs	r3, #1
 8008b24:	e073      	b.n	8008c0e <HAL_RCC_ClockConfig+0x1ba>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008b26:	4b3d      	ldr	r3, [pc, #244]	; (8008c1c <HAL_RCC_ClockConfig+0x1c8>)
 8008b28:	681b      	ldr	r3, [r3, #0]
 8008b2a:	f003 0302 	and.w	r3, r3, #2
 8008b2e:	2b00      	cmp	r3, #0
 8008b30:	d101      	bne.n	8008b36 <HAL_RCC_ClockConfig+0xe2>
      {
        return HAL_ERROR;
 8008b32:	2301      	movs	r3, #1
 8008b34:	e06b      	b.n	8008c0e <HAL_RCC_ClockConfig+0x1ba>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008b36:	4b39      	ldr	r3, [pc, #228]	; (8008c1c <HAL_RCC_ClockConfig+0x1c8>)
 8008b38:	689b      	ldr	r3, [r3, #8]
 8008b3a:	f023 0203 	bic.w	r2, r3, #3
 8008b3e:	687b      	ldr	r3, [r7, #4]
 8008b40:	685b      	ldr	r3, [r3, #4]
 8008b42:	4936      	ldr	r1, [pc, #216]	; (8008c1c <HAL_RCC_ClockConfig+0x1c8>)
 8008b44:	4313      	orrs	r3, r2
 8008b46:	608b      	str	r3, [r1, #8]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8008b48:	f7fa fb28 	bl	800319c <HAL_GetTick>
 8008b4c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b4e:	e00a      	b.n	8008b66 <HAL_RCC_ClockConfig+0x112>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b50:	f7fa fb24 	bl	800319c <HAL_GetTick>
 8008b54:	4602      	mov	r2, r0
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	1ad3      	subs	r3, r2, r3
 8008b5a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b5e:	4293      	cmp	r3, r2
 8008b60:	d901      	bls.n	8008b66 <HAL_RCC_ClockConfig+0x112>
      {
        return HAL_TIMEOUT;
 8008b62:	2303      	movs	r3, #3
 8008b64:	e053      	b.n	8008c0e <HAL_RCC_ClockConfig+0x1ba>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b66:	4b2d      	ldr	r3, [pc, #180]	; (8008c1c <HAL_RCC_ClockConfig+0x1c8>)
 8008b68:	689b      	ldr	r3, [r3, #8]
 8008b6a:	f003 020c 	and.w	r2, r3, #12
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	685b      	ldr	r3, [r3, #4]
 8008b72:	009b      	lsls	r3, r3, #2
 8008b74:	429a      	cmp	r2, r3
 8008b76:	d1eb      	bne.n	8008b50 <HAL_RCC_ClockConfig+0xfc>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8008b78:	4b27      	ldr	r3, [pc, #156]	; (8008c18 <HAL_RCC_ClockConfig+0x1c4>)
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f003 030f 	and.w	r3, r3, #15
 8008b80:	683a      	ldr	r2, [r7, #0]
 8008b82:	429a      	cmp	r2, r3
 8008b84:	d210      	bcs.n	8008ba8 <HAL_RCC_ClockConfig+0x154>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b86:	4b24      	ldr	r3, [pc, #144]	; (8008c18 <HAL_RCC_ClockConfig+0x1c4>)
 8008b88:	681b      	ldr	r3, [r3, #0]
 8008b8a:	f023 020f 	bic.w	r2, r3, #15
 8008b8e:	4922      	ldr	r1, [pc, #136]	; (8008c18 <HAL_RCC_ClockConfig+0x1c4>)
 8008b90:	683b      	ldr	r3, [r7, #0]
 8008b92:	4313      	orrs	r3, r2
 8008b94:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b96:	4b20      	ldr	r3, [pc, #128]	; (8008c18 <HAL_RCC_ClockConfig+0x1c4>)
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f003 030f 	and.w	r3, r3, #15
 8008b9e:	683a      	ldr	r2, [r7, #0]
 8008ba0:	429a      	cmp	r2, r3
 8008ba2:	d001      	beq.n	8008ba8 <HAL_RCC_ClockConfig+0x154>
    {
      return HAL_ERROR;
 8008ba4:	2301      	movs	r3, #1
 8008ba6:	e032      	b.n	8008c0e <HAL_RCC_ClockConfig+0x1ba>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008ba8:	687b      	ldr	r3, [r7, #4]
 8008baa:	681b      	ldr	r3, [r3, #0]
 8008bac:	f003 0304 	and.w	r3, r3, #4
 8008bb0:	2b00      	cmp	r3, #0
 8008bb2:	d008      	beq.n	8008bc6 <HAL_RCC_ClockConfig+0x172>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008bb4:	4b19      	ldr	r3, [pc, #100]	; (8008c1c <HAL_RCC_ClockConfig+0x1c8>)
 8008bb6:	689b      	ldr	r3, [r3, #8]
 8008bb8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	68db      	ldr	r3, [r3, #12]
 8008bc0:	4916      	ldr	r1, [pc, #88]	; (8008c1c <HAL_RCC_ClockConfig+0x1c8>)
 8008bc2:	4313      	orrs	r3, r2
 8008bc4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008bc6:	687b      	ldr	r3, [r7, #4]
 8008bc8:	681b      	ldr	r3, [r3, #0]
 8008bca:	f003 0308 	and.w	r3, r3, #8
 8008bce:	2b00      	cmp	r3, #0
 8008bd0:	d009      	beq.n	8008be6 <HAL_RCC_ClockConfig+0x192>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 8008bd2:	4b12      	ldr	r3, [pc, #72]	; (8008c1c <HAL_RCC_ClockConfig+0x1c8>)
 8008bd4:	689b      	ldr	r3, [r3, #8]
 8008bd6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008bda:	687b      	ldr	r3, [r7, #4]
 8008bdc:	691b      	ldr	r3, [r3, #16]
 8008bde:	00db      	lsls	r3, r3, #3
 8008be0:	490e      	ldr	r1, [pc, #56]	; (8008c1c <HAL_RCC_ClockConfig+0x1c8>)
 8008be2:	4313      	orrs	r3, r2
 8008be4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8008be6:	f000 f821 	bl	8008c2c <HAL_RCC_GetSysClockFreq>
 8008bea:	4602      	mov	r2, r0
 8008bec:	4b0b      	ldr	r3, [pc, #44]	; (8008c1c <HAL_RCC_ClockConfig+0x1c8>)
 8008bee:	689b      	ldr	r3, [r3, #8]
 8008bf0:	091b      	lsrs	r3, r3, #4
 8008bf2:	f003 030f 	and.w	r3, r3, #15
 8008bf6:	490a      	ldr	r1, [pc, #40]	; (8008c20 <HAL_RCC_ClockConfig+0x1cc>)
 8008bf8:	5ccb      	ldrb	r3, [r1, r3]
 8008bfa:	fa22 f303 	lsr.w	r3, r2, r3
 8008bfe:	4a09      	ldr	r2, [pc, #36]	; (8008c24 <HAL_RCC_ClockConfig+0x1d0>)
 8008c00:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 8008c02:	4b09      	ldr	r3, [pc, #36]	; (8008c28 <HAL_RCC_ClockConfig+0x1d4>)
 8008c04:	681b      	ldr	r3, [r3, #0]
 8008c06:	4618      	mov	r0, r3
 8008c08:	f7f9 f81c 	bl	8001c44 <HAL_InitTick>

  return HAL_OK;
 8008c0c:	2300      	movs	r3, #0
}
 8008c0e:	4618      	mov	r0, r3
 8008c10:	3710      	adds	r7, #16
 8008c12:	46bd      	mov	sp, r7
 8008c14:	bd80      	pop	{r7, pc}
 8008c16:	bf00      	nop
 8008c18:	40023c00 	.word	0x40023c00
 8008c1c:	40023800 	.word	0x40023800
 8008c20:	08020f40 	.word	0x08020f40
 8008c24:	20000000 	.word	0x20000000
 8008c28:	20000004 	.word	0x20000004

08008c2c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008c2c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c30:	b094      	sub	sp, #80	; 0x50
 8008c32:	af00      	add	r7, sp, #0
  uint32_t pllm = 0, pllvco = 0, pllp = 0;
 8008c34:	2300      	movs	r3, #0
 8008c36:	647b      	str	r3, [r7, #68]	; 0x44
 8008c38:	2300      	movs	r3, #0
 8008c3a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008c3c:	2300      	movs	r3, #0
 8008c3e:	643b      	str	r3, [r7, #64]	; 0x40
  uint32_t sysclockfreq = 0;
 8008c40:	2300      	movs	r3, #0
 8008c42:	64bb      	str	r3, [r7, #72]	; 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008c44:	4b79      	ldr	r3, [pc, #484]	; (8008e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8008c46:	689b      	ldr	r3, [r3, #8]
 8008c48:	f003 030c 	and.w	r3, r3, #12
 8008c4c:	2b08      	cmp	r3, #8
 8008c4e:	d00d      	beq.n	8008c6c <HAL_RCC_GetSysClockFreq+0x40>
 8008c50:	2b08      	cmp	r3, #8
 8008c52:	f200 80e1 	bhi.w	8008e18 <HAL_RCC_GetSysClockFreq+0x1ec>
 8008c56:	2b00      	cmp	r3, #0
 8008c58:	d002      	beq.n	8008c60 <HAL_RCC_GetSysClockFreq+0x34>
 8008c5a:	2b04      	cmp	r3, #4
 8008c5c:	d003      	beq.n	8008c66 <HAL_RCC_GetSysClockFreq+0x3a>
 8008c5e:	e0db      	b.n	8008e18 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008c60:	4b73      	ldr	r3, [pc, #460]	; (8008e30 <HAL_RCC_GetSysClockFreq+0x204>)
 8008c62:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008c64:	e0db      	b.n	8008e1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008c66:	4b73      	ldr	r3, [pc, #460]	; (8008e34 <HAL_RCC_GetSysClockFreq+0x208>)
 8008c68:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008c6a:	e0d8      	b.n	8008e1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008c6c:	4b6f      	ldr	r3, [pc, #444]	; (8008e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c74:	647b      	str	r3, [r7, #68]	; 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLCFGR_PLLSRC_HSI)
 8008c76:	4b6d      	ldr	r3, [pc, #436]	; (8008e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8008c78:	685b      	ldr	r3, [r3, #4]
 8008c7a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c7e:	2b00      	cmp	r3, #0
 8008c80:	d063      	beq.n	8008d4a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c82:	4b6a      	ldr	r3, [pc, #424]	; (8008e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8008c84:	685b      	ldr	r3, [r3, #4]
 8008c86:	099b      	lsrs	r3, r3, #6
 8008c88:	2200      	movs	r2, #0
 8008c8a:	63bb      	str	r3, [r7, #56]	; 0x38
 8008c8c:	63fa      	str	r2, [r7, #60]	; 0x3c
 8008c8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c90:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c94:	633b      	str	r3, [r7, #48]	; 0x30
 8008c96:	2300      	movs	r3, #0
 8008c98:	637b      	str	r3, [r7, #52]	; 0x34
 8008c9a:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	; 0x30
 8008c9e:	4622      	mov	r2, r4
 8008ca0:	462b      	mov	r3, r5
 8008ca2:	f04f 0000 	mov.w	r0, #0
 8008ca6:	f04f 0100 	mov.w	r1, #0
 8008caa:	0159      	lsls	r1, r3, #5
 8008cac:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008cb0:	0150      	lsls	r0, r2, #5
 8008cb2:	4602      	mov	r2, r0
 8008cb4:	460b      	mov	r3, r1
 8008cb6:	4621      	mov	r1, r4
 8008cb8:	1a51      	subs	r1, r2, r1
 8008cba:	6139      	str	r1, [r7, #16]
 8008cbc:	4629      	mov	r1, r5
 8008cbe:	eb63 0301 	sbc.w	r3, r3, r1
 8008cc2:	617b      	str	r3, [r7, #20]
 8008cc4:	f04f 0200 	mov.w	r2, #0
 8008cc8:	f04f 0300 	mov.w	r3, #0
 8008ccc:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8008cd0:	4659      	mov	r1, fp
 8008cd2:	018b      	lsls	r3, r1, #6
 8008cd4:	4651      	mov	r1, sl
 8008cd6:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8008cda:	4651      	mov	r1, sl
 8008cdc:	018a      	lsls	r2, r1, #6
 8008cde:	4651      	mov	r1, sl
 8008ce0:	ebb2 0801 	subs.w	r8, r2, r1
 8008ce4:	4659      	mov	r1, fp
 8008ce6:	eb63 0901 	sbc.w	r9, r3, r1
 8008cea:	f04f 0200 	mov.w	r2, #0
 8008cee:	f04f 0300 	mov.w	r3, #0
 8008cf2:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8008cf6:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8008cfa:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8008cfe:	4690      	mov	r8, r2
 8008d00:	4699      	mov	r9, r3
 8008d02:	4623      	mov	r3, r4
 8008d04:	eb18 0303 	adds.w	r3, r8, r3
 8008d08:	60bb      	str	r3, [r7, #8]
 8008d0a:	462b      	mov	r3, r5
 8008d0c:	eb49 0303 	adc.w	r3, r9, r3
 8008d10:	60fb      	str	r3, [r7, #12]
 8008d12:	f04f 0200 	mov.w	r2, #0
 8008d16:	f04f 0300 	mov.w	r3, #0
 8008d1a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8008d1e:	4629      	mov	r1, r5
 8008d20:	024b      	lsls	r3, r1, #9
 8008d22:	4621      	mov	r1, r4
 8008d24:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8008d28:	4621      	mov	r1, r4
 8008d2a:	024a      	lsls	r2, r1, #9
 8008d2c:	4610      	mov	r0, r2
 8008d2e:	4619      	mov	r1, r3
 8008d30:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008d32:	2200      	movs	r2, #0
 8008d34:	62bb      	str	r3, [r7, #40]	; 0x28
 8008d36:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008d38:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008d3c:	f7f7 fab8 	bl	80002b0 <__aeabi_uldivmod>
 8008d40:	4602      	mov	r2, r0
 8008d42:	460b      	mov	r3, r1
 8008d44:	4613      	mov	r3, r2
 8008d46:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008d48:	e058      	b.n	8008dfc <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008d4a:	4b38      	ldr	r3, [pc, #224]	; (8008e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	099b      	lsrs	r3, r3, #6
 8008d50:	2200      	movs	r2, #0
 8008d52:	4618      	mov	r0, r3
 8008d54:	4611      	mov	r1, r2
 8008d56:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8008d5a:	623b      	str	r3, [r7, #32]
 8008d5c:	2300      	movs	r3, #0
 8008d5e:	627b      	str	r3, [r7, #36]	; 0x24
 8008d60:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8008d64:	4642      	mov	r2, r8
 8008d66:	464b      	mov	r3, r9
 8008d68:	f04f 0000 	mov.w	r0, #0
 8008d6c:	f04f 0100 	mov.w	r1, #0
 8008d70:	0159      	lsls	r1, r3, #5
 8008d72:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008d76:	0150      	lsls	r0, r2, #5
 8008d78:	4602      	mov	r2, r0
 8008d7a:	460b      	mov	r3, r1
 8008d7c:	4641      	mov	r1, r8
 8008d7e:	ebb2 0a01 	subs.w	sl, r2, r1
 8008d82:	4649      	mov	r1, r9
 8008d84:	eb63 0b01 	sbc.w	fp, r3, r1
 8008d88:	f04f 0200 	mov.w	r2, #0
 8008d8c:	f04f 0300 	mov.w	r3, #0
 8008d90:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8008d94:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8008d98:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8008d9c:	ebb2 040a 	subs.w	r4, r2, sl
 8008da0:	eb63 050b 	sbc.w	r5, r3, fp
 8008da4:	f04f 0200 	mov.w	r2, #0
 8008da8:	f04f 0300 	mov.w	r3, #0
 8008dac:	00eb      	lsls	r3, r5, #3
 8008dae:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008db2:	00e2      	lsls	r2, r4, #3
 8008db4:	4614      	mov	r4, r2
 8008db6:	461d      	mov	r5, r3
 8008db8:	4643      	mov	r3, r8
 8008dba:	18e3      	adds	r3, r4, r3
 8008dbc:	603b      	str	r3, [r7, #0]
 8008dbe:	464b      	mov	r3, r9
 8008dc0:	eb45 0303 	adc.w	r3, r5, r3
 8008dc4:	607b      	str	r3, [r7, #4]
 8008dc6:	f04f 0200 	mov.w	r2, #0
 8008dca:	f04f 0300 	mov.w	r3, #0
 8008dce:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008dd2:	4629      	mov	r1, r5
 8008dd4:	028b      	lsls	r3, r1, #10
 8008dd6:	4621      	mov	r1, r4
 8008dd8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008ddc:	4621      	mov	r1, r4
 8008dde:	028a      	lsls	r2, r1, #10
 8008de0:	4610      	mov	r0, r2
 8008de2:	4619      	mov	r1, r3
 8008de4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8008de6:	2200      	movs	r2, #0
 8008de8:	61bb      	str	r3, [r7, #24]
 8008dea:	61fa      	str	r2, [r7, #28]
 8008dec:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008df0:	f7f7 fa5e 	bl	80002b0 <__aeabi_uldivmod>
 8008df4:	4602      	mov	r2, r0
 8008df6:	460b      	mov	r3, r1
 8008df8:	4613      	mov	r3, r2
 8008dfa:	64fb      	str	r3, [r7, #76]	; 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1) * 2);
 8008dfc:	4b0b      	ldr	r3, [pc, #44]	; (8008e2c <HAL_RCC_GetSysClockFreq+0x200>)
 8008dfe:	685b      	ldr	r3, [r3, #4]
 8008e00:	0c1b      	lsrs	r3, r3, #16
 8008e02:	f003 0303 	and.w	r3, r3, #3
 8008e06:	3301      	adds	r3, #1
 8008e08:	005b      	lsls	r3, r3, #1
 8008e0a:	643b      	str	r3, [r7, #64]	; 0x40

      sysclockfreq = pllvco / pllp;
 8008e0c:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008e0e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8008e10:	fbb2 f3f3 	udiv	r3, r2, r3
 8008e14:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008e16:	e002      	b.n	8008e1e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008e18:	4b05      	ldr	r3, [pc, #20]	; (8008e30 <HAL_RCC_GetSysClockFreq+0x204>)
 8008e1a:	64bb      	str	r3, [r7, #72]	; 0x48
      break;
 8008e1c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008e1e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
}
 8008e20:	4618      	mov	r0, r3
 8008e22:	3750      	adds	r7, #80	; 0x50
 8008e24:	46bd      	mov	sp, r7
 8008e26:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008e2a:	bf00      	nop
 8008e2c:	40023800 	.word	0x40023800
 8008e30:	00f42400 	.word	0x00f42400
 8008e34:	007a1200 	.word	0x007a1200

08008e38 <HAL_RCC_GetHCLKFreq>:
  *         right HCLK value. Otherwise, any configuration based on this function will be incorrect.
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency.
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008e38:	b480      	push	{r7}
 8008e3a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008e3c:	4b03      	ldr	r3, [pc, #12]	; (8008e4c <HAL_RCC_GetHCLKFreq+0x14>)
 8008e3e:	681b      	ldr	r3, [r3, #0]
}
 8008e40:	4618      	mov	r0, r3
 8008e42:	46bd      	mov	sp, r7
 8008e44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e48:	4770      	bx	lr
 8008e4a:	bf00      	nop
 8008e4c:	20000000 	.word	0x20000000

08008e50 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008e50:	b580      	push	{r7, lr}
 8008e52:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8008e54:	f7ff fff0 	bl	8008e38 <HAL_RCC_GetHCLKFreq>
 8008e58:	4602      	mov	r2, r0
 8008e5a:	4b05      	ldr	r3, [pc, #20]	; (8008e70 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008e5c:	689b      	ldr	r3, [r3, #8]
 8008e5e:	0a9b      	lsrs	r3, r3, #10
 8008e60:	f003 0307 	and.w	r3, r3, #7
 8008e64:	4903      	ldr	r1, [pc, #12]	; (8008e74 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008e66:	5ccb      	ldrb	r3, [r1, r3]
 8008e68:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008e6c:	4618      	mov	r0, r3
 8008e6e:	bd80      	pop	{r7, pc}
 8008e70:	40023800 	.word	0x40023800
 8008e74:	08020f50 	.word	0x08020f50

08008e78 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008e78:	b580      	push	{r7, lr}
 8008e7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8008e7c:	f7ff ffdc 	bl	8008e38 <HAL_RCC_GetHCLKFreq>
 8008e80:	4602      	mov	r2, r0
 8008e82:	4b05      	ldr	r3, [pc, #20]	; (8008e98 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008e84:	689b      	ldr	r3, [r3, #8]
 8008e86:	0b5b      	lsrs	r3, r3, #13
 8008e88:	f003 0307 	and.w	r3, r3, #7
 8008e8c:	4903      	ldr	r1, [pc, #12]	; (8008e9c <HAL_RCC_GetPCLK2Freq+0x24>)
 8008e8e:	5ccb      	ldrb	r3, [r1, r3]
 8008e90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008e94:	4618      	mov	r0, r3
 8008e96:	bd80      	pop	{r7, pc}
 8008e98:	40023800 	.word	0x40023800
 8008e9c:	08020f50 	.word	0x08020f50

08008ea0 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8008ea0:	b480      	push	{r7}
 8008ea2:	b083      	sub	sp, #12
 8008ea4:	af00      	add	r7, sp, #0
 8008ea6:	6078      	str	r0, [r7, #4]
 8008ea8:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8008eaa:	687b      	ldr	r3, [r7, #4]
 8008eac:	220f      	movs	r2, #15
 8008eae:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8008eb0:	4b12      	ldr	r3, [pc, #72]	; (8008efc <HAL_RCC_GetClockConfig+0x5c>)
 8008eb2:	689b      	ldr	r3, [r3, #8]
 8008eb4:	f003 0203 	and.w	r2, r3, #3
 8008eb8:	687b      	ldr	r3, [r7, #4]
 8008eba:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8008ebc:	4b0f      	ldr	r3, [pc, #60]	; (8008efc <HAL_RCC_GetClockConfig+0x5c>)
 8008ebe:	689b      	ldr	r3, [r3, #8]
 8008ec0:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8008ec4:	687b      	ldr	r3, [r7, #4]
 8008ec6:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8008ec8:	4b0c      	ldr	r3, [pc, #48]	; (8008efc <HAL_RCC_GetClockConfig+0x5c>)
 8008eca:	689b      	ldr	r3, [r3, #8]
 8008ecc:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008ed0:	687b      	ldr	r3, [r7, #4]
 8008ed2:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3);
 8008ed4:	4b09      	ldr	r3, [pc, #36]	; (8008efc <HAL_RCC_GetClockConfig+0x5c>)
 8008ed6:	689b      	ldr	r3, [r3, #8]
 8008ed8:	08db      	lsrs	r3, r3, #3
 8008eda:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8008ee2:	4b07      	ldr	r3, [pc, #28]	; (8008f00 <HAL_RCC_GetClockConfig+0x60>)
 8008ee4:	681b      	ldr	r3, [r3, #0]
 8008ee6:	f003 020f 	and.w	r2, r3, #15
 8008eea:	683b      	ldr	r3, [r7, #0]
 8008eec:	601a      	str	r2, [r3, #0]
}
 8008eee:	bf00      	nop
 8008ef0:	370c      	adds	r7, #12
 8008ef2:	46bd      	mov	sp, r7
 8008ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ef8:	4770      	bx	lr
 8008efa:	bf00      	nop
 8008efc:	40023800 	.word	0x40023800
 8008f00:	40023c00 	.word	0x40023c00

08008f04 <HAL_RCCEx_PeriphCLKConfig>:
  *         the backup registers) are set to their reset values.
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8008f04:	b580      	push	{r7, lr}
 8008f06:	b088      	sub	sp, #32
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0;
 8008f0c:	2300      	movs	r3, #0
 8008f0e:	617b      	str	r3, [r7, #20]
  uint32_t tmpreg0 = 0;
 8008f10:	2300      	movs	r3, #0
 8008f12:	613b      	str	r3, [r7, #16]
  uint32_t tmpreg1 = 0;
 8008f14:	2300      	movs	r3, #0
 8008f16:	60fb      	str	r3, [r7, #12]
  uint32_t plli2sused = 0;
 8008f18:	2300      	movs	r3, #0
 8008f1a:	61fb      	str	r3, [r7, #28]
  uint32_t pllsaiused = 0;
 8008f1c:	2300      	movs	r3, #0
 8008f1e:	61bb      	str	r3, [r7, #24]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*----------------------------------- I2S configuration ----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == (RCC_PERIPHCLK_I2S))
 8008f20:	687b      	ldr	r3, [r7, #4]
 8008f22:	681b      	ldr	r3, [r3, #0]
 8008f24:	f003 0301 	and.w	r3, r3, #1
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d012      	beq.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2SCLKSOURCE(PeriphClkInit->I2sClockSelection));

    /* Configure I2S Clock source */
    __HAL_RCC_I2S_CONFIG(PeriphClkInit->I2sClockSelection);
 8008f2c:	4b69      	ldr	r3, [pc, #420]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f2e:	689b      	ldr	r3, [r3, #8]
 8008f30:	4a68      	ldr	r2, [pc, #416]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f32:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 8008f36:	6093      	str	r3, [r2, #8]
 8008f38:	4b66      	ldr	r3, [pc, #408]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f3a:	689a      	ldr	r2, [r3, #8]
 8008f3c:	687b      	ldr	r3, [r7, #4]
 8008f3e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f40:	4964      	ldr	r1, [pc, #400]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f42:	4313      	orrs	r3, r2
 8008f44:	608b      	str	r3, [r1, #8]

    /* Enable the PLLI2S when it's used as clock source for I2S */
    if(PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)
 8008f46:	687b      	ldr	r3, [r7, #4]
 8008f48:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008f4a:	2b00      	cmp	r3, #0
 8008f4c:	d101      	bne.n	8008f52 <HAL_RCCEx_PeriphCLKConfig+0x4e>
    {
      plli2sused = 1;
 8008f4e:	2301      	movs	r3, #1
 8008f50:	61fb      	str	r3, [r7, #28]
    }
  }

  /*------------------------------------ SAI1 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == (RCC_PERIPHCLK_SAI1))
 8008f52:	687b      	ldr	r3, [r7, #4]
 8008f54:	681b      	ldr	r3, [r3, #0]
 8008f56:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8008f5a:	2b00      	cmp	r3, #0
 8008f5c:	d017      	beq.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI1CLKSOURCE(PeriphClkInit->Sai1ClockSelection));

    /* Configure SAI1 Clock source */
    __HAL_RCC_SAI1_CONFIG(PeriphClkInit->Sai1ClockSelection);
 8008f5e:	4b5d      	ldr	r3, [pc, #372]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f60:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008f64:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8008f68:	687b      	ldr	r3, [r7, #4]
 8008f6a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f6c:	4959      	ldr	r1, [pc, #356]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f6e:	4313      	orrs	r3, r2
 8008f70:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f78:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8008f7c:	d101      	bne.n	8008f82 <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      plli2sused = 1;
 8008f7e:	2301      	movs	r3, #1
 8008f80:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)
 8008f82:	687b      	ldr	r3, [r7, #4]
 8008f84:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8008f86:	2b00      	cmp	r3, #0
 8008f88:	d101      	bne.n	8008f8e <HAL_RCCEx_PeriphCLKConfig+0x8a>
    {
      pllsaiused = 1;
 8008f8a:	2301      	movs	r3, #1
 8008f8c:	61bb      	str	r3, [r7, #24]
    }
  }

  /*------------------------------------ SAI2 configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == (RCC_PERIPHCLK_SAI2))
 8008f8e:	687b      	ldr	r3, [r7, #4]
 8008f90:	681b      	ldr	r3, [r3, #0]
 8008f92:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8008f96:	2b00      	cmp	r3, #0
 8008f98:	d017      	beq.n	8008fca <HAL_RCCEx_PeriphCLKConfig+0xc6>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SAI2CLKSOURCE(PeriphClkInit->Sai2ClockSelection));

    /* Configure SAI2 Clock source */
    __HAL_RCC_SAI2_CONFIG(PeriphClkInit->Sai2ClockSelection);
 8008f9a:	4b4e      	ldr	r3, [pc, #312]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008f9c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8008fa0:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8008fa4:	687b      	ldr	r3, [r7, #4]
 8008fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fa8:	494a      	ldr	r1, [pc, #296]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008faa:	4313      	orrs	r3, r2
 8008fac:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c

    /* Enable the PLLI2S when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fb4:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008fb8:	d101      	bne.n	8008fbe <HAL_RCCEx_PeriphCLKConfig+0xba>
    {
      plli2sused = 1;
 8008fba:	2301      	movs	r3, #1
 8008fbc:	61fb      	str	r3, [r7, #28]
    }
    /* Enable the PLLSAI when it's used as clock source for SAI */
    if(PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)
 8008fbe:	687b      	ldr	r3, [r7, #4]
 8008fc0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fc2:	2b00      	cmp	r3, #0
 8008fc4:	d101      	bne.n	8008fca <HAL_RCCEx_PeriphCLKConfig+0xc6>
    {
      pllsaiused = 1;
 8008fc6:	2301      	movs	r3, #1
 8008fc8:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- SPDIF-RX Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8008fd2:	2b00      	cmp	r3, #0
 8008fd4:	d001      	beq.n	8008fda <HAL_RCCEx_PeriphCLKConfig+0xd6>
  {
      plli2sused = 1;
 8008fd6:	2301      	movs	r3, #1
 8008fd8:	61fb      	str	r3, [r7, #28]
  }

  /*------------------------------------ RTC configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == (RCC_PERIPHCLK_RTC))
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681b      	ldr	r3, [r3, #0]
 8008fde:	f003 0320 	and.w	r3, r3, #32
 8008fe2:	2b00      	cmp	r3, #0
 8008fe4:	f000 808b 	beq.w	80090fe <HAL_RCCEx_PeriphCLKConfig+0x1fa>
  {
    /* Check for RTC Parameters used to output RTCCLK */
    assert_param(IS_RCC_RTCCLKSOURCE(PeriphClkInit->RTCClockSelection));

    /* Enable Power Clock*/
    __HAL_RCC_PWR_CLK_ENABLE();
 8008fe8:	4b3a      	ldr	r3, [pc, #232]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008fea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008fec:	4a39      	ldr	r2, [pc, #228]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008fee:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8008ff2:	6413      	str	r3, [r2, #64]	; 0x40
 8008ff4:	4b37      	ldr	r3, [pc, #220]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8008ff6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008ff8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8008ffc:	60bb      	str	r3, [r7, #8]
 8008ffe:	68bb      	ldr	r3, [r7, #8]

    /* Enable write access to Backup domain */
    PWR->CR1 |= PWR_CR1_DBP;
 8009000:	4b35      	ldr	r3, [pc, #212]	; (80090d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	4a34      	ldr	r2, [pc, #208]	; (80090d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009006:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800900a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800900c:	f7fa f8c6 	bl	800319c <HAL_GetTick>
 8009010:	6178      	str	r0, [r7, #20]

    /* Wait for Backup domain Write protection disable */
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009012:	e008      	b.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x122>
    {
      if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8009014:	f7fa f8c2 	bl	800319c <HAL_GetTick>
 8009018:	4602      	mov	r2, r0
 800901a:	697b      	ldr	r3, [r7, #20]
 800901c:	1ad3      	subs	r3, r2, r3
 800901e:	2b64      	cmp	r3, #100	; 0x64
 8009020:	d901      	bls.n	8009026 <HAL_RCCEx_PeriphCLKConfig+0x122>
      {
        return HAL_TIMEOUT;
 8009022:	2303      	movs	r3, #3
 8009024:	e357      	b.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while((PWR->CR1 & PWR_CR1_DBP) == RESET)
 8009026:	4b2c      	ldr	r3, [pc, #176]	; (80090d8 <HAL_RCCEx_PeriphCLKConfig+0x1d4>)
 8009028:	681b      	ldr	r3, [r3, #0]
 800902a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800902e:	2b00      	cmp	r3, #0
 8009030:	d0f0      	beq.n	8009014 <HAL_RCCEx_PeriphCLKConfig+0x110>
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified */
    tmpreg0 = (RCC->BDCR & RCC_BDCR_RTCSEL);
 8009032:	4b28      	ldr	r3, [pc, #160]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009034:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009036:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800903a:	613b      	str	r3, [r7, #16]

    if((tmpreg0 != 0x00000000U) && (tmpreg0 != (PeriphClkInit->RTCClockSelection & RCC_BDCR_RTCSEL)))
 800903c:	693b      	ldr	r3, [r7, #16]
 800903e:	2b00      	cmp	r3, #0
 8009040:	d035      	beq.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009046:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800904a:	693a      	ldr	r2, [r7, #16]
 800904c:	429a      	cmp	r2, r3
 800904e:	d02e      	beq.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
    {
      /* Store the content of BDCR register before the reset of Backup Domain */
      tmpreg0 = (RCC->BDCR & ~(RCC_BDCR_RTCSEL));
 8009050:	4b20      	ldr	r3, [pc, #128]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009052:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8009054:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009058:	613b      	str	r3, [r7, #16]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 800905a:	4b1e      	ldr	r3, [pc, #120]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800905c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800905e:	4a1d      	ldr	r2, [pc, #116]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009060:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8009064:	6713      	str	r3, [r2, #112]	; 0x70
      __HAL_RCC_BACKUPRESET_RELEASE();
 8009066:	4b1b      	ldr	r3, [pc, #108]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009068:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800906a:	4a1a      	ldr	r2, [pc, #104]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800906c:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8009070:	6713      	str	r3, [r2, #112]	; 0x70

      /* Restore the Content of BDCR register */
      RCC->BDCR = tmpreg0;
 8009072:	4a18      	ldr	r2, [pc, #96]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 8009074:	693b      	ldr	r3, [r7, #16]
 8009076:	6713      	str	r3, [r2, #112]	; 0x70

      /* Wait for LSE reactivation if LSE was enable prior to Backup Domain reset */
      if (HAL_IS_BIT_SET(RCC->BDCR, RCC_BDCR_LSEON))
 8009078:	4b16      	ldr	r3, [pc, #88]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 800907a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800907c:	f003 0301 	and.w	r3, r3, #1
 8009080:	2b01      	cmp	r3, #1
 8009082:	d114      	bne.n	80090ae <HAL_RCCEx_PeriphCLKConfig+0x1aa>
      {
        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8009084:	f7fa f88a 	bl	800319c <HAL_GetTick>
 8009088:	6178      	str	r0, [r7, #20]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800908a:	e00a      	b.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800908c:	f7fa f886 	bl	800319c <HAL_GetTick>
 8009090:	4602      	mov	r2, r0
 8009092:	697b      	ldr	r3, [r7, #20]
 8009094:	1ad3      	subs	r3, r2, r3
 8009096:	f241 3288 	movw	r2, #5000	; 0x1388
 800909a:	4293      	cmp	r3, r2
 800909c:	d901      	bls.n	80090a2 <HAL_RCCEx_PeriphCLKConfig+0x19e>
          {
            return HAL_TIMEOUT;
 800909e:	2303      	movs	r3, #3
 80090a0:	e319      	b.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80090a2:	4b0c      	ldr	r3, [pc, #48]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090a4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80090a6:	f003 0302 	and.w	r3, r3, #2
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d0ee      	beq.n	800908c <HAL_RCCEx_PeriphCLKConfig+0x188>
          }
        }
      }
    }
    __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090b6:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 80090ba:	d111      	bne.n	80090e0 <HAL_RCCEx_PeriphCLKConfig+0x1dc>
 80090bc:	4b05      	ldr	r3, [pc, #20]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090be:	689b      	ldr	r3, [r3, #8]
 80090c0:	f423 12f8 	bic.w	r2, r3, #2031616	; 0x1f0000
 80090c4:	687b      	ldr	r3, [r7, #4]
 80090c6:	6b19      	ldr	r1, [r3, #48]	; 0x30
 80090c8:	4b04      	ldr	r3, [pc, #16]	; (80090dc <HAL_RCCEx_PeriphCLKConfig+0x1d8>)
 80090ca:	400b      	ands	r3, r1
 80090cc:	4901      	ldr	r1, [pc, #4]	; (80090d4 <HAL_RCCEx_PeriphCLKConfig+0x1d0>)
 80090ce:	4313      	orrs	r3, r2
 80090d0:	608b      	str	r3, [r1, #8]
 80090d2:	e00b      	b.n	80090ec <HAL_RCCEx_PeriphCLKConfig+0x1e8>
 80090d4:	40023800 	.word	0x40023800
 80090d8:	40007000 	.word	0x40007000
 80090dc:	0ffffcff 	.word	0x0ffffcff
 80090e0:	4baa      	ldr	r3, [pc, #680]	; (800938c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090e2:	689b      	ldr	r3, [r3, #8]
 80090e4:	4aa9      	ldr	r2, [pc, #676]	; (800938c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090e6:	f423 13f8 	bic.w	r3, r3, #2031616	; 0x1f0000
 80090ea:	6093      	str	r3, [r2, #8]
 80090ec:	4ba7      	ldr	r3, [pc, #668]	; (800938c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090ee:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80090f0:	687b      	ldr	r3, [r7, #4]
 80090f2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80090f4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80090f8:	49a4      	ldr	r1, [pc, #656]	; (800938c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80090fa:	4313      	orrs	r3, r2
 80090fc:	670b      	str	r3, [r1, #112]	; 0x70
  }

  /*------------------------------------ TIM configuration --------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_TIM) == (RCC_PERIPHCLK_TIM))
 80090fe:	687b      	ldr	r3, [r7, #4]
 8009100:	681b      	ldr	r3, [r3, #0]
 8009102:	f003 0310 	and.w	r3, r3, #16
 8009106:	2b00      	cmp	r3, #0
 8009108:	d010      	beq.n	800912c <HAL_RCCEx_PeriphCLKConfig+0x228>
  {
    /* Check the parameters */
    assert_param(IS_RCC_TIMPRES(PeriphClkInit->TIMPresSelection));

    /* Configure Timer Prescaler */
    __HAL_RCC_TIMCLKPRESCALER(PeriphClkInit->TIMPresSelection);
 800910a:	4ba0      	ldr	r3, [pc, #640]	; (800938c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800910c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009110:	4a9e      	ldr	r2, [pc, #632]	; (800938c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009112:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 8009116:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
 800911a:	4b9c      	ldr	r3, [pc, #624]	; (800938c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800911c:	f8d3 208c 	ldr.w	r2, [r3, #140]	; 0x8c
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009124:	4999      	ldr	r1, [pc, #612]	; (800938c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009126:	4313      	orrs	r3, r2
 8009128:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
  }

  /*-------------------------------------- I2C1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 800912c:	687b      	ldr	r3, [r7, #4]
 800912e:	681b      	ldr	r3, [r3, #0]
 8009130:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8009134:	2b00      	cmp	r3, #0
 8009136:	d00a      	beq.n	800914e <HAL_RCCEx_PeriphCLKConfig+0x24a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8009138:	4b94      	ldr	r3, [pc, #592]	; (800938c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800913a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800913e:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009142:	687b      	ldr	r3, [r7, #4]
 8009144:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 8009146:	4991      	ldr	r1, [pc, #580]	; (800938c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009148:	4313      	orrs	r3, r2
 800914a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C2) == RCC_PERIPHCLK_I2C2)
 800914e:	687b      	ldr	r3, [r7, #4]
 8009150:	681b      	ldr	r3, [r3, #0]
 8009152:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8009156:	2b00      	cmp	r3, #0
 8009158:	d00a      	beq.n	8009170 <HAL_RCCEx_PeriphCLKConfig+0x26c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C2CLKSOURCE(PeriphClkInit->I2c2ClockSelection));

    /* Configure the I2C2 clock source */
    __HAL_RCC_I2C2_CONFIG(PeriphClkInit->I2c2ClockSelection);
 800915a:	4b8c      	ldr	r3, [pc, #560]	; (800938c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800915c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009160:	f423 2240 	bic.w	r2, r3, #786432	; 0xc0000
 8009164:	687b      	ldr	r3, [r7, #4]
 8009166:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8009168:	4988      	ldr	r1, [pc, #544]	; (800938c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800916a:	4313      	orrs	r3, r2
 800916c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8009170:	687b      	ldr	r3, [r7, #4]
 8009172:	681b      	ldr	r3, [r3, #0]
 8009174:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8009178:	2b00      	cmp	r3, #0
 800917a:	d00a      	beq.n	8009192 <HAL_RCCEx_PeriphCLKConfig+0x28e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 800917c:	4b83      	ldr	r3, [pc, #524]	; (800938c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800917e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009182:	f423 1240 	bic.w	r2, r3, #3145728	; 0x300000
 8009186:	687b      	ldr	r3, [r7, #4]
 8009188:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800918a:	4980      	ldr	r1, [pc, #512]	; (800938c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800918c:	4313      	orrs	r3, r2
 800918e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- I2C4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C4) == RCC_PERIPHCLK_I2C4)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800919a:	2b00      	cmp	r3, #0
 800919c:	d00a      	beq.n	80091b4 <HAL_RCCEx_PeriphCLKConfig+0x2b0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C4CLKSOURCE(PeriphClkInit->I2c4ClockSelection));

    /* Configure the I2C4 clock source */
    __HAL_RCC_I2C4_CONFIG(PeriphClkInit->I2c4ClockSelection);
 800919e:	4b7b      	ldr	r3, [pc, #492]	; (800938c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091a0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091a4:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 80091a8:	687b      	ldr	r3, [r7, #4]
 80091aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80091ac:	4977      	ldr	r1, [pc, #476]	; (800938c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091ae:	4313      	orrs	r3, r2
 80091b0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091bc:	2b00      	cmp	r3, #0
 80091be:	d00a      	beq.n	80091d6 <HAL_RCCEx_PeriphCLKConfig+0x2d2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80091c0:	4b72      	ldr	r3, [pc, #456]	; (800938c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091c2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091c6:	f023 0203 	bic.w	r2, r3, #3
 80091ca:	687b      	ldr	r3, [r7, #4]
 80091cc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80091ce:	496f      	ldr	r1, [pc, #444]	; (800938c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091d0:	4313      	orrs	r3, r2
 80091d2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART2 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 80091d6:	687b      	ldr	r3, [r7, #4]
 80091d8:	681b      	ldr	r3, [r3, #0]
 80091da:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091de:	2b00      	cmp	r3, #0
 80091e0:	d00a      	beq.n	80091f8 <HAL_RCCEx_PeriphCLKConfig+0x2f4>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 80091e2:	4b6a      	ldr	r3, [pc, #424]	; (800938c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80091e8:	f023 020c 	bic.w	r2, r3, #12
 80091ec:	687b      	ldr	r3, [r7, #4]
 80091ee:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80091f0:	4966      	ldr	r1, [pc, #408]	; (800938c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80091f2:	4313      	orrs	r3, r2
 80091f4:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART3 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART3) == RCC_PERIPHCLK_USART3)
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009200:	2b00      	cmp	r3, #0
 8009202:	d00a      	beq.n	800921a <HAL_RCCEx_PeriphCLKConfig+0x316>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART3CLKSOURCE(PeriphClkInit->Usart3ClockSelection));

    /* Configure the USART3 clock source */
    __HAL_RCC_USART3_CONFIG(PeriphClkInit->Usart3ClockSelection);
 8009204:	4b61      	ldr	r3, [pc, #388]	; (800938c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009206:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800920a:	f023 0230 	bic.w	r2, r3, #48	; 0x30
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8009212:	495e      	ldr	r1, [pc, #376]	; (800938c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009214:	4313      	orrs	r3, r2
 8009216:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART4 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART4) == RCC_PERIPHCLK_UART4)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	681b      	ldr	r3, [r3, #0]
 800921e:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8009222:	2b00      	cmp	r3, #0
 8009224:	d00a      	beq.n	800923c <HAL_RCCEx_PeriphCLKConfig+0x338>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART4CLKSOURCE(PeriphClkInit->Uart4ClockSelection));

    /* Configure the UART4 clock source */
    __HAL_RCC_UART4_CONFIG(PeriphClkInit->Uart4ClockSelection);
 8009226:	4b59      	ldr	r3, [pc, #356]	; (800938c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009228:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800922c:	f023 02c0 	bic.w	r2, r3, #192	; 0xc0
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009234:	4955      	ldr	r1, [pc, #340]	; (800938c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009236:	4313      	orrs	r3, r2
 8009238:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART5 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART5) == RCC_PERIPHCLK_UART5)
 800923c:	687b      	ldr	r3, [r7, #4]
 800923e:	681b      	ldr	r3, [r3, #0]
 8009240:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8009244:	2b00      	cmp	r3, #0
 8009246:	d00a      	beq.n	800925e <HAL_RCCEx_PeriphCLKConfig+0x35a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART5CLKSOURCE(PeriphClkInit->Uart5ClockSelection));

    /* Configure the UART5 clock source */
    __HAL_RCC_UART5_CONFIG(PeriphClkInit->Uart5ClockSelection);
 8009248:	4b50      	ldr	r3, [pc, #320]	; (800938c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800924a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800924e:	f423 7240 	bic.w	r2, r3, #768	; 0x300
 8009252:	687b      	ldr	r3, [r7, #4]
 8009254:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009256:	494d      	ldr	r1, [pc, #308]	; (800938c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009258:	4313      	orrs	r3, r2
 800925a:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- USART6 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART6) == RCC_PERIPHCLK_USART6)
 800925e:	687b      	ldr	r3, [r7, #4]
 8009260:	681b      	ldr	r3, [r3, #0]
 8009262:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8009266:	2b00      	cmp	r3, #0
 8009268:	d00a      	beq.n	8009280 <HAL_RCCEx_PeriphCLKConfig+0x37c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART6CLKSOURCE(PeriphClkInit->Usart6ClockSelection));

    /* Configure the USART6 clock source */
    __HAL_RCC_USART6_CONFIG(PeriphClkInit->Usart6ClockSelection);
 800926a:	4b48      	ldr	r3, [pc, #288]	; (800938c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800926c:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009270:	f423 6240 	bic.w	r2, r3, #3072	; 0xc00
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009278:	4944      	ldr	r1, [pc, #272]	; (800938c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800927a:	4313      	orrs	r3, r2
 800927c:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART7 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART7) == RCC_PERIPHCLK_UART7)
 8009280:	687b      	ldr	r3, [r7, #4]
 8009282:	681b      	ldr	r3, [r3, #0]
 8009284:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8009288:	2b00      	cmp	r3, #0
 800928a:	d00a      	beq.n	80092a2 <HAL_RCCEx_PeriphCLKConfig+0x39e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART7CLKSOURCE(PeriphClkInit->Uart7ClockSelection));

    /* Configure the UART7 clock source */
    __HAL_RCC_UART7_CONFIG(PeriphClkInit->Uart7ClockSelection);
 800928c:	4b3f      	ldr	r3, [pc, #252]	; (800938c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800928e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009292:	f423 5240 	bic.w	r2, r3, #12288	; 0x3000
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800929a:	493c      	ldr	r1, [pc, #240]	; (800938c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 800929c:	4313      	orrs	r3, r2
 800929e:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- UART8 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_UART8) == RCC_PERIPHCLK_UART8)
 80092a2:	687b      	ldr	r3, [r7, #4]
 80092a4:	681b      	ldr	r3, [r3, #0]
 80092a6:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d00a      	beq.n	80092c4 <HAL_RCCEx_PeriphCLKConfig+0x3c0>
  {
    /* Check the parameters */
    assert_param(IS_RCC_UART8CLKSOURCE(PeriphClkInit->Uart8ClockSelection));

    /* Configure the UART8 clock source */
    __HAL_RCC_UART8_CONFIG(PeriphClkInit->Uart8ClockSelection);
 80092ae:	4b37      	ldr	r3, [pc, #220]	; (800938c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80092b0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092b4:	f423 4240 	bic.w	r2, r3, #49152	; 0xc000
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 80092bc:	4933      	ldr	r1, [pc, #204]	; (800938c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80092be:	4313      	orrs	r3, r2
 80092c0:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*--------------------------------------- CEC Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CEC) == RCC_PERIPHCLK_CEC)
 80092c4:	687b      	ldr	r3, [r7, #4]
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80092cc:	2b00      	cmp	r3, #0
 80092ce:	d00a      	beq.n	80092e6 <HAL_RCCEx_PeriphCLKConfig+0x3e2>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CECCLKSOURCE(PeriphClkInit->CecClockSelection));

    /* Configure the CEC clock source */
    __HAL_RCC_CEC_CONFIG(PeriphClkInit->CecClockSelection);
 80092d0:	4b2e      	ldr	r3, [pc, #184]	; (800938c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80092d2:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092d6:	f023 6280 	bic.w	r2, r3, #67108864	; 0x4000000
 80092da:	687b      	ldr	r3, [r7, #4]
 80092dc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80092de:	492b      	ldr	r1, [pc, #172]	; (800938c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80092e0:	4313      	orrs	r3, r2
 80092e2:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }

  /*-------------------------------------- CK48 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48)
 80092e6:	687b      	ldr	r3, [r7, #4]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d011      	beq.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0x412>
  {
    /* Check the parameters */
    assert_param(IS_RCC_CLK48SOURCE(PeriphClkInit->Clk48ClockSelection));

    /* Configure the CLK48 source */
    __HAL_RCC_CLK48_CONFIG(PeriphClkInit->Clk48ClockSelection);
 80092f2:	4b26      	ldr	r3, [pc, #152]	; (800938c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 80092f4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80092f8:	f023 6200 	bic.w	r2, r3, #134217728	; 0x8000000
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009300:	4922      	ldr	r1, [pc, #136]	; (800938c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009302:	4313      	orrs	r3, r2
 8009304:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90

    /* Enable the PLLSAI when it's used as clock source for CK48 */
    if(PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP)
 8009308:	687b      	ldr	r3, [r7, #4]
 800930a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800930c:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009310:	d101      	bne.n	8009316 <HAL_RCCEx_PeriphCLKConfig+0x412>
    {
      pllsaiused = 1;
 8009312:	2301      	movs	r3, #1
 8009314:	61bb      	str	r3, [r7, #24]
    }
  }

  /*-------------------------------------- LTDC Configuration -----------------------------------*/
#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == RCC_PERIPHCLK_LTDC)
 8009316:	687b      	ldr	r3, [r7, #4]
 8009318:	681b      	ldr	r3, [r3, #0]
 800931a:	f003 0308 	and.w	r3, r3, #8
 800931e:	2b00      	cmp	r3, #0
 8009320:	d001      	beq.n	8009326 <HAL_RCCEx_PeriphCLKConfig+0x422>
  {
    pllsaiused = 1;
 8009322:	2301      	movs	r3, #1
 8009324:	61bb      	str	r3, [r7, #24]
  }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx */

  /*-------------------------------------- LPTIM1 Configuration -----------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == RCC_PERIPHCLK_LPTIM1)
 8009326:	687b      	ldr	r3, [r7, #4]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800932e:	2b00      	cmp	r3, #0
 8009330:	d00a      	beq.n	8009348 <HAL_RCCEx_PeriphCLKConfig+0x444>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPTIM1CLK(PeriphClkInit->Lptim1ClockSelection));

    /* Configure the LTPIM1 clock source */
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->Lptim1ClockSelection);
 8009332:	4b16      	ldr	r3, [pc, #88]	; (800938c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009334:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8009338:	f023 7240 	bic.w	r2, r3, #50331648	; 0x3000000
 800933c:	687b      	ldr	r3, [r7, #4]
 800933e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8009340:	4912      	ldr	r1, [pc, #72]	; (800938c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009342:	4313      	orrs	r3, r2
 8009344:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
   }

  /*------------------------------------- SDMMC1 Configuration ------------------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SDMMC1) == RCC_PERIPHCLK_SDMMC1)
 8009348:	687b      	ldr	r3, [r7, #4]
 800934a:	681b      	ldr	r3, [r3, #0]
 800934c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8009350:	2b00      	cmp	r3, #0
 8009352:	d00b      	beq.n	800936c <HAL_RCCEx_PeriphCLKConfig+0x468>
  {
    /* Check the parameters */
    assert_param(IS_RCC_SDMMC1CLKSOURCE(PeriphClkInit->Sdmmc1ClockSelection));

    /* Configure the SDMMC1 clock source */
    __HAL_RCC_SDMMC1_CONFIG(PeriphClkInit->Sdmmc1ClockSelection);
 8009354:	4b0d      	ldr	r3, [pc, #52]	; (800938c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009356:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800935a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 800935e:	687b      	ldr	r3, [r7, #4]
 8009360:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8009364:	4909      	ldr	r1, [pc, #36]	; (800938c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009366:	4313      	orrs	r3, r2
 8009368:	f8c1 3090 	str.w	r3, [r1, #144]	; 0x90
  }
#endif /* STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx */

  /*-------------------------------------- PLLI2S Configuration ---------------------------------*/
  /* PLLI2S is configured when a peripheral will use it as source clock : SAI1, SAI2, I2S or SPDIF-RX */
  if((plli2sused == 1) || ((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S))
 800936c:	69fb      	ldr	r3, [r7, #28]
 800936e:	2b01      	cmp	r3, #1
 8009370:	d006      	beq.n	8009380 <HAL_RCCEx_PeriphCLKConfig+0x47c>
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	681b      	ldr	r3, [r3, #0]
 8009376:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800937a:	2b00      	cmp	r3, #0
 800937c:	f000 80d9 	beq.w	8009532 <HAL_RCCEx_PeriphCLKConfig+0x62e>
  {
    /* Disable the PLLI2S */
    __HAL_RCC_PLLI2S_DISABLE();
 8009380:	4b02      	ldr	r3, [pc, #8]	; (800938c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	4a01      	ldr	r2, [pc, #4]	; (800938c <HAL_RCCEx_PeriphCLKConfig+0x488>)
 8009386:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800938a:	e001      	b.n	8009390 <HAL_RCCEx_PeriphCLKConfig+0x48c>
 800938c:	40023800 	.word	0x40023800
 8009390:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009392:	f7f9 ff03 	bl	800319c <HAL_GetTick>
 8009396:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is disabled */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 8009398:	e008      	b.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 800939a:	f7f9 feff 	bl	800319c <HAL_GetTick>
 800939e:	4602      	mov	r2, r0
 80093a0:	697b      	ldr	r3, [r7, #20]
 80093a2:	1ad3      	subs	r3, r2, r3
 80093a4:	2b64      	cmp	r3, #100	; 0x64
 80093a6:	d901      	bls.n	80093ac <HAL_RCCEx_PeriphCLKConfig+0x4a8>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80093a8:	2303      	movs	r3, #3
 80093aa:	e194      	b.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  != RESET)
 80093ac:	4b6c      	ldr	r3, [pc, #432]	; (8009560 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80093ae:	681b      	ldr	r3, [r3, #0]
 80093b0:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 80093b4:	2b00      	cmp	r3, #0
 80093b6:	d1f0      	bne.n	800939a <HAL_RCCEx_PeriphCLKConfig+0x496>

    /* check for common PLLI2S Parameters */
    assert_param(IS_RCC_PLLI2SN_VALUE(PeriphClkInit->PLLI2S.PLLI2SN));

    /*----------------- In Case of PLLI2S is selected as source clock for I2S -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2S) == RCC_PERIPHCLK_I2S) && (PeriphClkInit->I2sClockSelection == RCC_I2SCLKSOURCE_PLLI2S)))
 80093b8:	687b      	ldr	r3, [r7, #4]
 80093ba:	681b      	ldr	r3, [r3, #0]
 80093bc:	f003 0301 	and.w	r3, r3, #1
 80093c0:	2b00      	cmp	r3, #0
 80093c2:	d021      	beq.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x504>
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80093c8:	2b00      	cmp	r3, #0
 80093ca:	d11d      	bne.n	8009408 <HAL_RCCEx_PeriphCLKConfig+0x504>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SR_VALUE(PeriphClkInit->PLLI2S.PLLI2SR));

      /* Read PLLI2SP and PLLI2SQ value from PLLI2SCFGR register (this value is not needed for I2S configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 80093cc:	4b64      	ldr	r3, [pc, #400]	; (8009560 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80093ce:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093d2:	0c1b      	lsrs	r3, r3, #16
 80093d4:	f003 0303 	and.w	r3, r3, #3
 80093d8:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 80093da:	4b61      	ldr	r3, [pc, #388]	; (8009560 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80093dc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80093e0:	0e1b      	lsrs	r3, r3, #24
 80093e2:	f003 030f 	and.w	r3, r3, #15
 80093e6:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* I2SCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SR */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , tmpreg0, tmpreg1, PeriphClkInit->PLLI2S.PLLI2SR);
 80093e8:	687b      	ldr	r3, [r7, #4]
 80093ea:	685b      	ldr	r3, [r3, #4]
 80093ec:	019a      	lsls	r2, r3, #6
 80093ee:	693b      	ldr	r3, [r7, #16]
 80093f0:	041b      	lsls	r3, r3, #16
 80093f2:	431a      	orrs	r2, r3
 80093f4:	68fb      	ldr	r3, [r7, #12]
 80093f6:	061b      	lsls	r3, r3, #24
 80093f8:	431a      	orrs	r2, r3
 80093fa:	687b      	ldr	r3, [r7, #4]
 80093fc:	689b      	ldr	r3, [r3, #8]
 80093fe:	071b      	lsls	r3, r3, #28
 8009400:	4957      	ldr	r1, [pc, #348]	; (8009560 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009402:	4313      	orrs	r3, r2
 8009404:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009408:	687b      	ldr	r3, [r7, #4]
 800940a:	681b      	ldr	r3, [r3, #0]
 800940c:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8009410:	2b00      	cmp	r3, #0
 8009412:	d004      	beq.n	800941e <HAL_RCCEx_PeriphCLKConfig+0x51a>
 8009414:	687b      	ldr	r3, [r7, #4]
 8009416:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009418:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800941c:	d00a      	beq.n	8009434 <HAL_RCCEx_PeriphCLKConfig+0x530>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800941e:	687b      	ldr	r3, [r7, #4]
 8009420:	681b      	ldr	r3, [r3, #0]
 8009422:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLI2S)) ||
 8009426:	2b00      	cmp	r3, #0
 8009428:	d02e      	beq.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x584>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLI2S)))
 800942a:	687b      	ldr	r3, [r7, #4]
 800942c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800942e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8009432:	d129      	bne.n	8009488 <HAL_RCCEx_PeriphCLKConfig+0x584>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));
      /* Check for PLLI2S/DIVQ parameters */
      assert_param(IS_RCC_PLLI2S_DIVQ_VALUE(PeriphClkInit->PLLI2SDivQ));

      /* Read PLLI2SP and PLLI2SR values from PLLI2SCFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SP) >> RCC_PLLI2SCFGR_PLLI2SP_Pos);
 8009434:	4b4a      	ldr	r3, [pc, #296]	; (8009560 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009436:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800943a:	0c1b      	lsrs	r3, r3, #16
 800943c:	f003 0303 	and.w	r3, r3, #3
 8009440:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 8009442:	4b47      	ldr	r3, [pc, #284]	; (8009560 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009444:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8009448:	0f1b      	lsrs	r3, r3, #28
 800944a:	f003 0307 	and.w	r3, r3, #7
 800944e:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLI2S_VCO Output = PLLI2S_VCO Input * PLLI2SN */
      /* SAI_CLK(first level) = PLLI2S_VCO Output/PLLI2SQ */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN, tmpreg0, PeriphClkInit->PLLI2S.PLLI2SQ, tmpreg1);
 8009450:	687b      	ldr	r3, [r7, #4]
 8009452:	685b      	ldr	r3, [r3, #4]
 8009454:	019a      	lsls	r2, r3, #6
 8009456:	693b      	ldr	r3, [r7, #16]
 8009458:	041b      	lsls	r3, r3, #16
 800945a:	431a      	orrs	r2, r3
 800945c:	687b      	ldr	r3, [r7, #4]
 800945e:	68db      	ldr	r3, [r3, #12]
 8009460:	061b      	lsls	r3, r3, #24
 8009462:	431a      	orrs	r2, r3
 8009464:	68fb      	ldr	r3, [r7, #12]
 8009466:	071b      	lsls	r3, r3, #28
 8009468:	493d      	ldr	r1, [pc, #244]	; (8009560 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800946a:	4313      	orrs	r3, r2
 800946c:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84

      /* SAI_CLK_x = SAI_CLK(first level)/PLLI2SDIVQ */
      __HAL_RCC_PLLI2S_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLI2SDivQ);
 8009470:	4b3b      	ldr	r3, [pc, #236]	; (8009560 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009472:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009476:	f023 021f 	bic.w	r2, r3, #31
 800947a:	687b      	ldr	r3, [r7, #4]
 800947c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800947e:	3b01      	subs	r3, #1
 8009480:	4937      	ldr	r1, [pc, #220]	; (8009560 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009482:	4313      	orrs	r3, r2
 8009484:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLI2S is selected as source clock for SPDIF-RX -------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SPDIFRX) == RCC_PERIPHCLK_SPDIFRX)
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8009490:	2b00      	cmp	r3, #0
 8009492:	d01d      	beq.n	80094d0 <HAL_RCCEx_PeriphCLKConfig+0x5cc>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLI2SP_VALUE(PeriphClkInit->PLLI2S.PLLI2SP));

     /* Read PLLI2SR value from PLLI2SCFGR register (this value is not needed for SPDIF-RX configuration) */
      tmpreg0 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SQ) >> RCC_PLLI2SCFGR_PLLI2SQ_Pos);
 8009494:	4b32      	ldr	r3, [pc, #200]	; (8009560 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009496:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800949a:	0e1b      	lsrs	r3, r3, #24
 800949c:	f003 030f 	and.w	r3, r3, #15
 80094a0:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLI2SCFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLI2SCFGR_PLLI2SR_Pos);
 80094a2:	4b2f      	ldr	r3, [pc, #188]	; (8009560 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80094a4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80094a8:	0f1b      	lsrs	r3, r3, #28
 80094aa:	f003 0307 	and.w	r3, r3, #7
 80094ae:	60fb      	str	r3, [r7, #12]
      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLM) */
      /* SPDIFCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, tmpreg0, tmpreg1);
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	685b      	ldr	r3, [r3, #4]
 80094b4:	019a      	lsls	r2, r3, #6
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	691b      	ldr	r3, [r3, #16]
 80094ba:	041b      	lsls	r3, r3, #16
 80094bc:	431a      	orrs	r2, r3
 80094be:	693b      	ldr	r3, [r7, #16]
 80094c0:	061b      	lsls	r3, r3, #24
 80094c2:	431a      	orrs	r2, r3
 80094c4:	68fb      	ldr	r3, [r7, #12]
 80094c6:	071b      	lsls	r3, r3, #28
 80094c8:	4925      	ldr	r1, [pc, #148]	; (8009560 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80094ca:	4313      	orrs	r3, r2
 80094cc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /*----------------- In Case of PLLI2S is just selected  -----------------*/
    if((PeriphClkInit->PeriphClockSelection & RCC_PERIPHCLK_PLLI2S) == RCC_PERIPHCLK_PLLI2S)
 80094d0:	687b      	ldr	r3, [r7, #4]
 80094d2:	681b      	ldr	r3, [r3, #0]
 80094d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80094d8:	2b00      	cmp	r3, #0
 80094da:	d011      	beq.n	8009500 <HAL_RCCEx_PeriphCLKConfig+0x5fc>
      assert_param(IS_RCC_PLLI2SQ_VALUE(PeriphClkInit->PLLI2S.PLLI2SQ));

      /* Configure the PLLI2S division factors */
      /* PLLI2S_VCO = f(VCO clock) = f(PLLI2S clock input) x (PLLI2SN/PLLI2SM) */
      /* SPDIFRXCLK = f(PLLI2S clock output) = f(VCO clock) / PLLI2SP */
      __HAL_RCC_PLLI2S_CONFIG(PeriphClkInit->PLLI2S.PLLI2SN , PeriphClkInit->PLLI2S.PLLI2SP, PeriphClkInit->PLLI2S.PLLI2SQ, PeriphClkInit->PLLI2S.PLLI2SR);
 80094dc:	687b      	ldr	r3, [r7, #4]
 80094de:	685b      	ldr	r3, [r3, #4]
 80094e0:	019a      	lsls	r2, r3, #6
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	691b      	ldr	r3, [r3, #16]
 80094e6:	041b      	lsls	r3, r3, #16
 80094e8:	431a      	orrs	r2, r3
 80094ea:	687b      	ldr	r3, [r7, #4]
 80094ec:	68db      	ldr	r3, [r3, #12]
 80094ee:	061b      	lsls	r3, r3, #24
 80094f0:	431a      	orrs	r2, r3
 80094f2:	687b      	ldr	r3, [r7, #4]
 80094f4:	689b      	ldr	r3, [r3, #8]
 80094f6:	071b      	lsls	r3, r3, #28
 80094f8:	4919      	ldr	r1, [pc, #100]	; (8009560 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 80094fa:	4313      	orrs	r3, r2
 80094fc:	f8c1 3084 	str.w	r3, [r1, #132]	; 0x84
    }

    /* Enable the PLLI2S */
    __HAL_RCC_PLLI2S_ENABLE();
 8009500:	4b17      	ldr	r3, [pc, #92]	; (8009560 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009502:	681b      	ldr	r3, [r3, #0]
 8009504:	4a16      	ldr	r2, [pc, #88]	; (8009560 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009506:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800950a:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 800950c:	f7f9 fe46 	bl	800319c <HAL_GetTick>
 8009510:	6178      	str	r0, [r7, #20]

    /* Wait till PLLI2S is ready */
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009512:	e008      	b.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0x622>
    {
      if((HAL_GetTick() - tickstart) > PLLI2S_TIMEOUT_VALUE)
 8009514:	f7f9 fe42 	bl	800319c <HAL_GetTick>
 8009518:	4602      	mov	r2, r0
 800951a:	697b      	ldr	r3, [r7, #20]
 800951c:	1ad3      	subs	r3, r2, r3
 800951e:	2b64      	cmp	r3, #100	; 0x64
 8009520:	d901      	bls.n	8009526 <HAL_RCCEx_PeriphCLKConfig+0x622>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 8009522:	2303      	movs	r3, #3
 8009524:	e0d7      	b.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLI2SRDY)  == RESET)
 8009526:	4b0e      	ldr	r3, [pc, #56]	; (8009560 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800952e:	2b00      	cmp	r3, #0
 8009530:	d0f0      	beq.n	8009514 <HAL_RCCEx_PeriphCLKConfig+0x610>
    }
  }

  /*-------------------------------------- PLLSAI Configuration ---------------------------------*/
  /* PLLSAI is configured when a peripheral will use it as source clock : SAI1, SAI2, LTDC or CK48 */
  if(pllsaiused == 1)
 8009532:	69bb      	ldr	r3, [r7, #24]
 8009534:	2b01      	cmp	r3, #1
 8009536:	f040 80cd 	bne.w	80096d4 <HAL_RCCEx_PeriphCLKConfig+0x7d0>
  {
    /* Disable PLLSAI Clock */
    __HAL_RCC_PLLSAI_DISABLE();
 800953a:	4b09      	ldr	r3, [pc, #36]	; (8009560 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 800953c:	681b      	ldr	r3, [r3, #0]
 800953e:	4a08      	ldr	r2, [pc, #32]	; (8009560 <HAL_RCCEx_PeriphCLKConfig+0x65c>)
 8009540:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8009544:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 8009546:	f7f9 fe29 	bl	800319c <HAL_GetTick>
 800954a:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is disabled */
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 800954c:	e00a      	b.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0x660>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 800954e:	f7f9 fe25 	bl	800319c <HAL_GetTick>
 8009552:	4602      	mov	r2, r0
 8009554:	697b      	ldr	r3, [r7, #20]
 8009556:	1ad3      	subs	r3, r2, r3
 8009558:	2b64      	cmp	r3, #100	; 0x64
 800955a:	d903      	bls.n	8009564 <HAL_RCCEx_PeriphCLKConfig+0x660>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 800955c:	2303      	movs	r3, #3
 800955e:	e0ba      	b.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
 8009560:	40023800 	.word	0x40023800
    while(__HAL_RCC_PLLSAI_GET_FLAG() != RESET)
 8009564:	4b5e      	ldr	r3, [pc, #376]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009566:	681b      	ldr	r3, [r3, #0]
 8009568:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 800956c:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 8009570:	d0ed      	beq.n	800954e <HAL_RCCEx_PeriphCLKConfig+0x64a>

    /* Check the PLLSAI division factors */
    assert_param(IS_RCC_PLLSAIN_VALUE(PeriphClkInit->PLLSAI.PLLSAIN));

    /*----------------- In Case of PLLSAI is selected as source clock for SAI -------------------*/
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 8009572:	687b      	ldr	r3, [r7, #4]
 8009574:	681b      	ldr	r3, [r3, #0]
 8009576:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800957a:	2b00      	cmp	r3, #0
 800957c:	d003      	beq.n	8009586 <HAL_RCCEx_PeriphCLKConfig+0x682>
 800957e:	687b      	ldr	r3, [r7, #4]
 8009580:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8009582:	2b00      	cmp	r3, #0
 8009584:	d009      	beq.n	800959a <HAL_RCCEx_PeriphCLKConfig+0x696>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009586:	687b      	ldr	r3, [r7, #4]
 8009588:	681b      	ldr	r3, [r3, #0]
 800958a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
    if(((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI1) == RCC_PERIPHCLK_SAI1) && (PeriphClkInit->Sai1ClockSelection == RCC_SAI1CLKSOURCE_PLLSAI)) ||\
 800958e:	2b00      	cmp	r3, #0
 8009590:	d02e      	beq.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
       ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_SAI2) == RCC_PERIPHCLK_SAI2) && (PeriphClkInit->Sai2ClockSelection == RCC_SAI2CLKSOURCE_PLLSAI)))
 8009592:	687b      	ldr	r3, [r7, #4]
 8009594:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009596:	2b00      	cmp	r3, #0
 8009598:	d12a      	bne.n	80095f0 <HAL_RCCEx_PeriphCLKConfig+0x6ec>
      assert_param(IS_RCC_PLLSAIQ_VALUE(PeriphClkInit->PLLSAI.PLLSAIQ));
      /* check for PLLSAI/DIVQ Parameter */
      assert_param(IS_RCC_PLLSAI_DIVQ_VALUE(PeriphClkInit->PLLSAIDivQ));

      /* Read PLLSAIP value from PLLSAICFGR register (this value is not needed for SAI configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800959a:	4b51      	ldr	r3, [pc, #324]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800959c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095a0:	0c1b      	lsrs	r3, r3, #16
 80095a2:	f003 0303 	and.w	r3, r3, #3
 80095a6:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLI2SCFGR_PLLI2SR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 80095a8:	4b4d      	ldr	r3, [pc, #308]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80095aa:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80095ae:	0f1b      	lsrs	r3, r3, #28
 80095b0:	f003 0307 	and.w	r3, r3, #7
 80095b4:	60fb      	str	r3, [r7, #12]
      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* SAI_CLK(first level) = PLLSAI_VCO Output/PLLSAIQ */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg0, PeriphClkInit->PLLSAI.PLLSAIQ, tmpreg1);
 80095b6:	687b      	ldr	r3, [r7, #4]
 80095b8:	695b      	ldr	r3, [r3, #20]
 80095ba:	019a      	lsls	r2, r3, #6
 80095bc:	693b      	ldr	r3, [r7, #16]
 80095be:	041b      	lsls	r3, r3, #16
 80095c0:	431a      	orrs	r2, r3
 80095c2:	687b      	ldr	r3, [r7, #4]
 80095c4:	699b      	ldr	r3, [r3, #24]
 80095c6:	061b      	lsls	r3, r3, #24
 80095c8:	431a      	orrs	r2, r3
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	071b      	lsls	r3, r3, #28
 80095ce:	4944      	ldr	r1, [pc, #272]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80095d0:	4313      	orrs	r3, r2
 80095d2:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* SAI_CLK_x = SAI_CLK(first level)/PLLSAIDIVQ */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVQ_CONFIG(PeriphClkInit->PLLSAIDivQ);
 80095d6:	4b42      	ldr	r3, [pc, #264]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80095d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80095dc:	f423 52f8 	bic.w	r2, r3, #7936	; 0x1f00
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80095e4:	3b01      	subs	r3, #1
 80095e6:	021b      	lsls	r3, r3, #8
 80095e8:	493d      	ldr	r1, [pc, #244]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80095ea:	4313      	orrs	r3, r2
 80095ec:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }

    /*----------------- In Case of PLLSAI is selected as source clock for CLK48 -------------------*/
    /* In Case of PLLI2S is selected as source clock for CK48 */
    if((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_CLK48) == RCC_PERIPHCLK_CLK48) && (PeriphClkInit->Clk48ClockSelection == RCC_CLK48SOURCE_PLLSAIP))
 80095f0:	687b      	ldr	r3, [r7, #4]
 80095f2:	681b      	ldr	r3, [r3, #0]
 80095f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80095f8:	2b00      	cmp	r3, #0
 80095fa:	d022      	beq.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x73e>
 80095fc:	687b      	ldr	r3, [r7, #4]
 80095fe:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8009600:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8009604:	d11d      	bne.n	8009642 <HAL_RCCEx_PeriphCLKConfig+0x73e>
    {
      /* check for Parameters */
      assert_param(IS_RCC_PLLSAIP_VALUE(PeriphClkInit->PLLSAI.PLLSAIP));
      /* Read PLLSAIQ and PLLSAIR value from PLLSAICFGR register (this value is not needed for CK48 configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 8009606:	4b36      	ldr	r3, [pc, #216]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009608:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800960c:	0e1b      	lsrs	r3, r3, #24
 800960e:	f003 030f 	and.w	r3, r3, #15
 8009612:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIR) >> RCC_PLLSAICFGR_PLLSAIR_Pos);
 8009614:	4b32      	ldr	r3, [pc, #200]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009616:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800961a:	0f1b      	lsrs	r3, r3, #28
 800961c:	f003 0307 	and.w	r3, r3, #7
 8009620:	60fb      	str	r3, [r7, #12]

      /* Configure the PLLSAI division factors */
      /* PLLSAI_VCO = f(VCO clock) = f(PLLSAI clock input) x (PLLI2SN/PLLM) */
      /* 48CLK = f(PLLSAI clock output) = f(VCO clock) / PLLSAIP */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , PeriphClkInit->PLLSAI.PLLSAIP, tmpreg0, tmpreg1);
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	695b      	ldr	r3, [r3, #20]
 8009626:	019a      	lsls	r2, r3, #6
 8009628:	687b      	ldr	r3, [r7, #4]
 800962a:	6a1b      	ldr	r3, [r3, #32]
 800962c:	041b      	lsls	r3, r3, #16
 800962e:	431a      	orrs	r2, r3
 8009630:	693b      	ldr	r3, [r7, #16]
 8009632:	061b      	lsls	r3, r3, #24
 8009634:	431a      	orrs	r2, r3
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	071b      	lsls	r3, r3, #28
 800963a:	4929      	ldr	r1, [pc, #164]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800963c:	4313      	orrs	r3, r2
 800963e:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88
    }

#if defined(STM32F746xx) || defined(STM32F756xx) || defined (STM32F767xx) || defined (STM32F769xx) || defined (STM32F777xx) || defined (STM32F779xx) || defined (STM32F750xx)
    /*---------------------------- LTDC configuration -------------------------------*/
    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LTDC) == (RCC_PERIPHCLK_LTDC))
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	681b      	ldr	r3, [r3, #0]
 8009646:	f003 0308 	and.w	r3, r3, #8
 800964a:	2b00      	cmp	r3, #0
 800964c:	d028      	beq.n	80096a0 <HAL_RCCEx_PeriphCLKConfig+0x79c>
    {
      assert_param(IS_RCC_PLLSAIR_VALUE(PeriphClkInit->PLLSAI.PLLSAIR));
      assert_param(IS_RCC_PLLSAI_DIVR_VALUE(PeriphClkInit->PLLSAIDivR));

      /* Read PLLSAIP and PLLSAIQ value from PLLSAICFGR register (these value are not needed for LTDC configuration) */
      tmpreg0 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIQ) >> RCC_PLLSAICFGR_PLLSAIQ_Pos);
 800964e:	4b24      	ldr	r3, [pc, #144]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009650:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009654:	0e1b      	lsrs	r3, r3, #24
 8009656:	f003 030f 	and.w	r3, r3, #15
 800965a:	613b      	str	r3, [r7, #16]
      tmpreg1 = ((RCC->PLLSAICFGR & RCC_PLLSAICFGR_PLLSAIP) >> RCC_PLLSAICFGR_PLLSAIP_Pos);
 800965c:	4b20      	ldr	r3, [pc, #128]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800965e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8009662:	0c1b      	lsrs	r3, r3, #16
 8009664:	f003 0303 	and.w	r3, r3, #3
 8009668:	60fb      	str	r3, [r7, #12]

      /* PLLSAI_VCO Input  = PLL_SOURCE/PLLM */
      /* PLLSAI_VCO Output = PLLSAI_VCO Input * PLLSAIN */
      /* LTDC_CLK(first level) = PLLSAI_VCO Output/PLLSAIR */
      __HAL_RCC_PLLSAI_CONFIG(PeriphClkInit->PLLSAI.PLLSAIN , tmpreg1, tmpreg0, PeriphClkInit->PLLSAI.PLLSAIR);
 800966a:	687b      	ldr	r3, [r7, #4]
 800966c:	695b      	ldr	r3, [r3, #20]
 800966e:	019a      	lsls	r2, r3, #6
 8009670:	68fb      	ldr	r3, [r7, #12]
 8009672:	041b      	lsls	r3, r3, #16
 8009674:	431a      	orrs	r2, r3
 8009676:	693b      	ldr	r3, [r7, #16]
 8009678:	061b      	lsls	r3, r3, #24
 800967a:	431a      	orrs	r2, r3
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	69db      	ldr	r3, [r3, #28]
 8009680:	071b      	lsls	r3, r3, #28
 8009682:	4917      	ldr	r1, [pc, #92]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 8009684:	4313      	orrs	r3, r2
 8009686:	f8c1 3088 	str.w	r3, [r1, #136]	; 0x88

      /* LTDC_CLK = LTDC_CLK(first level)/PLLSAIDIVR */
      __HAL_RCC_PLLSAI_PLLSAICLKDIVR_CONFIG(PeriphClkInit->PLLSAIDivR);
 800968a:	4b15      	ldr	r3, [pc, #84]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800968c:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 8009690:	f423 3240 	bic.w	r2, r3, #196608	; 0x30000
 8009694:	687b      	ldr	r3, [r7, #4]
 8009696:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8009698:	4911      	ldr	r1, [pc, #68]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 800969a:	4313      	orrs	r3, r2
 800969c:	f8c1 308c 	str.w	r3, [r1, #140]	; 0x8c
    }
#endif /* STM32F746xx || STM32F756xx || STM32F767xx || STM32F769xx || STM32F777xx || STM32F779xx || STM32F750xx  */

    /* Enable PLLSAI Clock */
    __HAL_RCC_PLLSAI_ENABLE();
 80096a0:	4b0f      	ldr	r3, [pc, #60]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	4a0e      	ldr	r2, [pc, #56]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80096a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80096aa:	6013      	str	r3, [r2, #0]

    /* Get Start Tick*/
    tickstart = HAL_GetTick();
 80096ac:	f7f9 fd76 	bl	800319c <HAL_GetTick>
 80096b0:	6178      	str	r0, [r7, #20]

    /* Wait till PLLSAI is ready */
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80096b2:	e008      	b.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
    {
      if((HAL_GetTick() - tickstart) > PLLSAI_TIMEOUT_VALUE)
 80096b4:	f7f9 fd72 	bl	800319c <HAL_GetTick>
 80096b8:	4602      	mov	r2, r0
 80096ba:	697b      	ldr	r3, [r7, #20]
 80096bc:	1ad3      	subs	r3, r2, r3
 80096be:	2b64      	cmp	r3, #100	; 0x64
 80096c0:	d901      	bls.n	80096c6 <HAL_RCCEx_PeriphCLKConfig+0x7c2>
      {
        /* return in case of Timeout detected */
        return HAL_TIMEOUT;
 80096c2:	2303      	movs	r3, #3
 80096c4:	e007      	b.n	80096d6 <HAL_RCCEx_PeriphCLKConfig+0x7d2>
    while(__HAL_RCC_PLLSAI_GET_FLAG() == RESET)
 80096c6:	4b06      	ldr	r3, [pc, #24]	; (80096e0 <HAL_RCCEx_PeriphCLKConfig+0x7dc>)
 80096c8:	681b      	ldr	r3, [r3, #0]
 80096ca:	f003 5300 	and.w	r3, r3, #536870912	; 0x20000000
 80096ce:	f1b3 5f00 	cmp.w	r3, #536870912	; 0x20000000
 80096d2:	d1ef      	bne.n	80096b4 <HAL_RCCEx_PeriphCLKConfig+0x7b0>
      }
    }
  }
  return HAL_OK;
 80096d4:	2300      	movs	r3, #0
}
 80096d6:	4618      	mov	r0, r3
 80096d8:	3720      	adds	r7, #32
 80096da:	46bd      	mov	sp, r7
 80096dc:	bd80      	pop	{r7, pc}
 80096de:	bf00      	nop
 80096e0:	40023800 	.word	0x40023800

080096e4 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80096e4:	b580      	push	{r7, lr}
 80096e6:	b084      	sub	sp, #16
 80096e8:	af00      	add	r7, sp, #0
 80096ea:	6078      	str	r0, [r7, #4]
  uint32_t frxth;

  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80096ec:	687b      	ldr	r3, [r7, #4]
 80096ee:	2b00      	cmp	r3, #0
 80096f0:	d101      	bne.n	80096f6 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80096f2:	2301      	movs	r3, #1
 80096f4:	e09d      	b.n	8009832 <HAL_SPI_Init+0x14e>
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_NSSP(hspi->Init.NSSPMode));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80096fa:	2b00      	cmp	r3, #0
 80096fc:	d108      	bne.n	8009710 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 80096fe:	687b      	ldr	r3, [r7, #4]
 8009700:	685b      	ldr	r3, [r3, #4]
 8009702:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009706:	d009      	beq.n	800971c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8009708:	687b      	ldr	r3, [r7, #4]
 800970a:	2200      	movs	r2, #0
 800970c:	61da      	str	r2, [r3, #28]
 800970e:	e005      	b.n	800971c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2200      	movs	r2, #0
 8009714:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8009716:	687b      	ldr	r3, [r7, #4]
 8009718:	2200      	movs	r2, #0
 800971a:	615a      	str	r2, [r3, #20]
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
    assert_param(IS_SPI_CRC_LENGTH(hspi->Init.CRCLength));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800971c:	687b      	ldr	r3, [r7, #4]
 800971e:	2200      	movs	r2, #0
 8009720:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8009722:	687b      	ldr	r3, [r7, #4]
 8009724:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009728:	b2db      	uxtb	r3, r3
 800972a:	2b00      	cmp	r3, #0
 800972c:	d106      	bne.n	800973c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800972e:	687b      	ldr	r3, [r7, #4]
 8009730:	2200      	movs	r2, #0
 8009732:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8009736:	6878      	ldr	r0, [r7, #4]
 8009738:	f7f7 ffae 	bl	8001698 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 800973c:	687b      	ldr	r3, [r7, #4]
 800973e:	2202      	movs	r2, #2
 8009740:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	681b      	ldr	r3, [r3, #0]
 8009748:	681a      	ldr	r2, [r3, #0]
 800974a:	687b      	ldr	r3, [r7, #4]
 800974c:	681b      	ldr	r3, [r3, #0]
 800974e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009752:	601a      	str	r2, [r3, #0]

  /* Align by default the rs fifo threshold on the data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009754:	687b      	ldr	r3, [r7, #4]
 8009756:	68db      	ldr	r3, [r3, #12]
 8009758:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800975c:	d902      	bls.n	8009764 <HAL_SPI_Init+0x80>
  {
    frxth = SPI_RXFIFO_THRESHOLD_HF;
 800975e:	2300      	movs	r3, #0
 8009760:	60fb      	str	r3, [r7, #12]
 8009762:	e002      	b.n	800976a <HAL_SPI_Init+0x86>
  }
  else
  {
    frxth = SPI_RXFIFO_THRESHOLD_QF;
 8009764:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8009768:	60fb      	str	r3, [r7, #12]
  }

  /* CRC calculation is valid only for 16Bit and 8 Bit */
  if ((hspi->Init.DataSize != SPI_DATASIZE_16BIT) && (hspi->Init.DataSize != SPI_DATASIZE_8BIT))
 800976a:	687b      	ldr	r3, [r7, #4]
 800976c:	68db      	ldr	r3, [r3, #12]
 800976e:	f5b3 6f70 	cmp.w	r3, #3840	; 0xf00
 8009772:	d007      	beq.n	8009784 <HAL_SPI_Init+0xa0>
 8009774:	687b      	ldr	r3, [r7, #4]
 8009776:	68db      	ldr	r3, [r3, #12]
 8009778:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800977c:	d002      	beq.n	8009784 <HAL_SPI_Init+0xa0>
  {
    /* CRC must be disabled */
    hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 800977e:	687b      	ldr	r3, [r7, #4]
 8009780:	2200      	movs	r2, #0
 8009782:	629a      	str	r2, [r3, #40]	; 0x28
  }

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	685b      	ldr	r3, [r3, #4]
 8009788:	f403 7282 	and.w	r2, r3, #260	; 0x104
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	689b      	ldr	r3, [r3, #8]
 8009790:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8009794:	431a      	orrs	r2, r3
 8009796:	687b      	ldr	r3, [r7, #4]
 8009798:	691b      	ldr	r3, [r3, #16]
 800979a:	f003 0302 	and.w	r3, r3, #2
 800979e:	431a      	orrs	r2, r3
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	695b      	ldr	r3, [r3, #20]
 80097a4:	f003 0301 	and.w	r3, r3, #1
 80097a8:	431a      	orrs	r2, r3
 80097aa:	687b      	ldr	r3, [r7, #4]
 80097ac:	699b      	ldr	r3, [r3, #24]
 80097ae:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80097b2:	431a      	orrs	r2, r3
 80097b4:	687b      	ldr	r3, [r7, #4]
 80097b6:	69db      	ldr	r3, [r3, #28]
 80097b8:	f003 0338 	and.w	r3, r3, #56	; 0x38
 80097bc:	431a      	orrs	r2, r3
 80097be:	687b      	ldr	r3, [r7, #4]
 80097c0:	6a1b      	ldr	r3, [r3, #32]
 80097c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80097c6:	ea42 0103 	orr.w	r1, r2, r3
 80097ca:	687b      	ldr	r3, [r7, #4]
 80097cc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80097ce:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 80097d2:	687b      	ldr	r3, [r7, #4]
 80097d4:	681b      	ldr	r3, [r3, #0]
 80097d6:	430a      	orrs	r2, r1
 80097d8:	601a      	str	r2, [r3, #0]
    }
  }
#endif /* USE_SPI_CRC */

  /* Configure : NSS management, TI Mode, NSS Pulse, Data size and Rx Fifo threshold */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) |
 80097da:	687b      	ldr	r3, [r7, #4]
 80097dc:	699b      	ldr	r3, [r3, #24]
 80097de:	0c1b      	lsrs	r3, r3, #16
 80097e0:	f003 0204 	and.w	r2, r3, #4
 80097e4:	687b      	ldr	r3, [r7, #4]
 80097e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80097e8:	f003 0310 	and.w	r3, r3, #16
 80097ec:	431a      	orrs	r2, r3
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80097f2:	f003 0308 	and.w	r3, r3, #8
 80097f6:	431a      	orrs	r2, r3
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	68db      	ldr	r3, [r3, #12]
 80097fc:	f403 6370 	and.w	r3, r3, #3840	; 0xf00
 8009800:	ea42 0103 	orr.w	r1, r2, r3
 8009804:	68fb      	ldr	r3, [r7, #12]
 8009806:	f403 5280 	and.w	r2, r3, #4096	; 0x1000
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	681b      	ldr	r3, [r3, #0]
 800980e:	430a      	orrs	r2, r1
 8009810:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8009812:	687b      	ldr	r3, [r7, #4]
 8009814:	681b      	ldr	r3, [r3, #0]
 8009816:	69da      	ldr	r2, [r3, #28]
 8009818:	687b      	ldr	r3, [r7, #4]
 800981a:	681b      	ldr	r3, [r3, #0]
 800981c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8009820:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	2200      	movs	r2, #0
 8009826:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State     = HAL_SPI_STATE_READY;
 8009828:	687b      	ldr	r3, [r7, #4]
 800982a:	2201      	movs	r2, #1
 800982c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  return HAL_OK;
 8009830:	2300      	movs	r3, #0
}
 8009832:	4618      	mov	r0, r3
 8009834:	3710      	adds	r7, #16
 8009836:	46bd      	mov	sp, r7
 8009838:	bd80      	pop	{r7, pc}
	...

0800983c <HAL_SPI_Transmit_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 800983c:	b480      	push	{r7}
 800983e:	b087      	sub	sp, #28
 8009840:	af00      	add	r7, sp, #0
 8009842:	60f8      	str	r0, [r7, #12]
 8009844:	60b9      	str	r1, [r7, #8]
 8009846:	4613      	mov	r3, r2
 8009848:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800984a:	2300      	movs	r3, #0
 800984c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));


  if ((pData == NULL) || (Size == 0U))
 800984e:	68bb      	ldr	r3, [r7, #8]
 8009850:	2b00      	cmp	r3, #0
 8009852:	d002      	beq.n	800985a <HAL_SPI_Transmit_IT+0x1e>
 8009854:	88fb      	ldrh	r3, [r7, #6]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d102      	bne.n	8009860 <HAL_SPI_Transmit_IT+0x24>
  {
    errorcode = HAL_ERROR;
 800985a:	2301      	movs	r3, #1
 800985c:	75fb      	strb	r3, [r7, #23]
    goto error;
 800985e:	e06d      	b.n	800993c <HAL_SPI_Transmit_IT+0x100>
  }

  if (hspi->State != HAL_SPI_STATE_READY)
 8009860:	68fb      	ldr	r3, [r7, #12]
 8009862:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009866:	b2db      	uxtb	r3, r3
 8009868:	2b01      	cmp	r3, #1
 800986a:	d002      	beq.n	8009872 <HAL_SPI_Transmit_IT+0x36>
  {
    errorcode = HAL_BUSY;
 800986c:	2302      	movs	r3, #2
 800986e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009870:	e064      	b.n	800993c <HAL_SPI_Transmit_IT+0x100>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009872:	68fb      	ldr	r3, [r7, #12]
 8009874:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009878:	2b01      	cmp	r3, #1
 800987a:	d101      	bne.n	8009880 <HAL_SPI_Transmit_IT+0x44>
 800987c:	2302      	movs	r3, #2
 800987e:	e05e      	b.n	800993e <HAL_SPI_Transmit_IT+0x102>
 8009880:	68fb      	ldr	r3, [r7, #12]
 8009882:	2201      	movs	r2, #1
 8009884:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009888:	68fb      	ldr	r3, [r7, #12]
 800988a:	2203      	movs	r2, #3
 800988c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	2200      	movs	r2, #0
 8009894:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	68ba      	ldr	r2, [r7, #8]
 800989a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800989c:	68fb      	ldr	r3, [r7, #12]
 800989e:	88fa      	ldrh	r2, [r7, #6]
 80098a0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 80098a2:	68fb      	ldr	r3, [r7, #12]
 80098a4:	88fa      	ldrh	r2, [r7, #6]
 80098a6:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 80098a8:	68fb      	ldr	r3, [r7, #12]
 80098aa:	2200      	movs	r2, #0
 80098ac:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = 0U;
 80098ae:	68fb      	ldr	r3, [r7, #12]
 80098b0:	2200      	movs	r2, #0
 80098b2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 80098b6:	68fb      	ldr	r3, [r7, #12]
 80098b8:	2200      	movs	r2, #0
 80098ba:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->RxISR       = NULL;
 80098be:	68fb      	ldr	r3, [r7, #12]
 80098c0:	2200      	movs	r2, #0
 80098c2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 80098c4:	68fb      	ldr	r3, [r7, #12]
 80098c6:	68db      	ldr	r3, [r3, #12]
 80098c8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 80098cc:	d903      	bls.n	80098d6 <HAL_SPI_Transmit_IT+0x9a>
  {
    hspi->TxISR = SPI_TxISR_16BIT;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	4a1e      	ldr	r2, [pc, #120]	; (800994c <HAL_SPI_Transmit_IT+0x110>)
 80098d2:	651a      	str	r2, [r3, #80]	; 0x50
 80098d4:	e002      	b.n	80098dc <HAL_SPI_Transmit_IT+0xa0>
  }
  else
  {
    hspi->TxISR = SPI_TxISR_8BIT;
 80098d6:	68fb      	ldr	r3, [r7, #12]
 80098d8:	4a1d      	ldr	r2, [pc, #116]	; (8009950 <HAL_SPI_Transmit_IT+0x114>)
 80098da:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80098dc:	68fb      	ldr	r3, [r7, #12]
 80098de:	689b      	ldr	r3, [r3, #8]
 80098e0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80098e4:	d10f      	bne.n	8009906 <HAL_SPI_Transmit_IT+0xca>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 80098e6:	68fb      	ldr	r3, [r7, #12]
 80098e8:	681b      	ldr	r3, [r3, #0]
 80098ea:	681a      	ldr	r2, [r3, #0]
 80098ec:	68fb      	ldr	r3, [r7, #12]
 80098ee:	681b      	ldr	r3, [r3, #0]
 80098f0:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80098f4:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	681b      	ldr	r3, [r3, #0]
 80098fa:	681a      	ldr	r2, [r3, #0]
 80098fc:	68fb      	ldr	r3, [r7, #12]
 80098fe:	681b      	ldr	r3, [r3, #0]
 8009900:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009904:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009906:	68fb      	ldr	r3, [r7, #12]
 8009908:	681b      	ldr	r3, [r3, #0]
 800990a:	681b      	ldr	r3, [r3, #0]
 800990c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009910:	2b40      	cmp	r3, #64	; 0x40
 8009912:	d007      	beq.n	8009924 <HAL_SPI_Transmit_IT+0xe8>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009914:	68fb      	ldr	r3, [r7, #12]
 8009916:	681b      	ldr	r3, [r3, #0]
 8009918:	681a      	ldr	r2, [r3, #0]
 800991a:	68fb      	ldr	r3, [r7, #12]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009922:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009924:	68fb      	ldr	r3, [r7, #12]
 8009926:	2200      	movs	r2, #0
 8009928:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	685a      	ldr	r2, [r3, #4]
 8009932:	68fb      	ldr	r3, [r7, #12]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	f042 02a0 	orr.w	r2, r2, #160	; 0xa0
 800993a:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 800993c:	7dfb      	ldrb	r3, [r7, #23]
}
 800993e:	4618      	mov	r0, r3
 8009940:	371c      	adds	r7, #28
 8009942:	46bd      	mov	sp, r7
 8009944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009948:	4770      	bx	lr
 800994a:	bf00      	nop
 800994c:	0800aebb 	.word	0x0800aebb
 8009950:	0800ae75 	.word	0x0800ae75

08009954 <HAL_SPI_Receive_IT>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_IT(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009954:	b580      	push	{r7, lr}
 8009956:	b086      	sub	sp, #24
 8009958:	af00      	add	r7, sp, #0
 800995a:	60f8      	str	r0, [r7, #12]
 800995c:	60b9      	str	r1, [r7, #8]
 800995e:	4613      	mov	r3, r2
 8009960:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009962:	2300      	movs	r3, #0
 8009964:	75fb      	strb	r3, [r7, #23]


  if (hspi->State != HAL_SPI_STATE_READY)
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800996c:	b2db      	uxtb	r3, r3
 800996e:	2b01      	cmp	r3, #1
 8009970:	d002      	beq.n	8009978 <HAL_SPI_Receive_IT+0x24>
  {
    errorcode = HAL_BUSY;
 8009972:	2302      	movs	r3, #2
 8009974:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009976:	e092      	b.n	8009a9e <HAL_SPI_Receive_IT+0x14a>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	689b      	ldr	r3, [r3, #8]
 800997c:	2b00      	cmp	r3, #0
 800997e:	d110      	bne.n	80099a2 <HAL_SPI_Receive_IT+0x4e>
 8009980:	68fb      	ldr	r3, [r7, #12]
 8009982:	685b      	ldr	r3, [r3, #4]
 8009984:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009988:	d10b      	bne.n	80099a2 <HAL_SPI_Receive_IT+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	2204      	movs	r2, #4
 800998e:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_IT(hspi, pData, pData, Size);
 8009992:	88fb      	ldrh	r3, [r7, #6]
 8009994:	68ba      	ldr	r2, [r7, #8]
 8009996:	68b9      	ldr	r1, [r7, #8]
 8009998:	68f8      	ldr	r0, [r7, #12]
 800999a:	f000 f889 	bl	8009ab0 <HAL_SPI_TransmitReceive_IT>
 800999e:	4603      	mov	r3, r0
 80099a0:	e07e      	b.n	8009aa0 <HAL_SPI_Receive_IT+0x14c>
  }


  if ((pData == NULL) || (Size == 0U))
 80099a2:	68bb      	ldr	r3, [r7, #8]
 80099a4:	2b00      	cmp	r3, #0
 80099a6:	d002      	beq.n	80099ae <HAL_SPI_Receive_IT+0x5a>
 80099a8:	88fb      	ldrh	r3, [r7, #6]
 80099aa:	2b00      	cmp	r3, #0
 80099ac:	d102      	bne.n	80099b4 <HAL_SPI_Receive_IT+0x60>
  {
    errorcode = HAL_ERROR;
 80099ae:	2301      	movs	r3, #1
 80099b0:	75fb      	strb	r3, [r7, #23]
    goto error;
 80099b2:	e074      	b.n	8009a9e <HAL_SPI_Receive_IT+0x14a>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 80099b4:	68fb      	ldr	r3, [r7, #12]
 80099b6:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 80099ba:	2b01      	cmp	r3, #1
 80099bc:	d101      	bne.n	80099c2 <HAL_SPI_Receive_IT+0x6e>
 80099be:	2302      	movs	r3, #2
 80099c0:	e06e      	b.n	8009aa0 <HAL_SPI_Receive_IT+0x14c>
 80099c2:	68fb      	ldr	r3, [r7, #12]
 80099c4:	2201      	movs	r2, #1
 80099c6:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 80099ca:	68fb      	ldr	r3, [r7, #12]
 80099cc:	2204      	movs	r2, #4
 80099ce:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 80099d2:	68fb      	ldr	r3, [r7, #12]
 80099d4:	2200      	movs	r2, #0
 80099d6:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 80099d8:	68fb      	ldr	r3, [r7, #12]
 80099da:	68ba      	ldr	r2, [r7, #8]
 80099dc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 80099de:	68fb      	ldr	r3, [r7, #12]
 80099e0:	88fa      	ldrh	r2, [r7, #6]
 80099e2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 80099e6:	68fb      	ldr	r3, [r7, #12]
 80099e8:	88fa      	ldrh	r2, [r7, #6]
 80099ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 80099ee:	68fb      	ldr	r3, [r7, #12]
 80099f0:	2200      	movs	r2, #0
 80099f2:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = 0U;
 80099f4:	68fb      	ldr	r3, [r7, #12]
 80099f6:	2200      	movs	r2, #0
 80099f8:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	2200      	movs	r2, #0
 80099fe:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8009a00:	68fb      	ldr	r3, [r7, #12]
 8009a02:	2200      	movs	r2, #0
 8009a04:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check the data size to adapt Rx threshold and the set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009a06:	68fb      	ldr	r3, [r7, #12]
 8009a08:	68db      	ldr	r3, [r3, #12]
 8009a0a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009a0e:	d90b      	bls.n	8009a28 <HAL_SPI_Receive_IT+0xd4>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009a10:	68fb      	ldr	r3, [r7, #12]
 8009a12:	681b      	ldr	r3, [r3, #0]
 8009a14:	685a      	ldr	r2, [r3, #4]
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	681b      	ldr	r3, [r3, #0]
 8009a1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009a1e:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_16BIT;
 8009a20:	68fb      	ldr	r3, [r7, #12]
 8009a22:	4a21      	ldr	r2, [pc, #132]	; (8009aa8 <HAL_SPI_Receive_IT+0x154>)
 8009a24:	64da      	str	r2, [r3, #76]	; 0x4c
 8009a26:	e00a      	b.n	8009a3e <HAL_SPI_Receive_IT+0xea>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009a28:	68fb      	ldr	r3, [r7, #12]
 8009a2a:	681b      	ldr	r3, [r3, #0]
 8009a2c:	685a      	ldr	r2, [r3, #4]
 8009a2e:	68fb      	ldr	r3, [r7, #12]
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009a36:	605a      	str	r2, [r3, #4]
    hspi->RxISR = SPI_RxISR_8BIT;
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	4a1c      	ldr	r2, [pc, #112]	; (8009aac <HAL_SPI_Receive_IT+0x158>)
 8009a3c:	64da      	str	r2, [r3, #76]	; 0x4c
  }

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	689b      	ldr	r3, [r3, #8]
 8009a42:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a46:	d10f      	bne.n	8009a68 <HAL_SPI_Receive_IT+0x114>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009a48:	68fb      	ldr	r3, [r7, #12]
 8009a4a:	681b      	ldr	r3, [r3, #0]
 8009a4c:	681a      	ldr	r2, [r3, #0]
 8009a4e:	68fb      	ldr	r3, [r7, #12]
 8009a50:	681b      	ldr	r3, [r3, #0]
 8009a52:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009a56:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009a58:	68fb      	ldr	r3, [r7, #12]
 8009a5a:	681b      	ldr	r3, [r3, #0]
 8009a5c:	681a      	ldr	r2, [r3, #0]
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	681b      	ldr	r3, [r3, #0]
 8009a62:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009a66:	601a      	str	r2, [r3, #0]
  /* Note : The SPI must be enabled after unlocking current process
            to avoid the risk of SPI interrupt handle execution before current
            process unlock */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009a68:	68fb      	ldr	r3, [r7, #12]
 8009a6a:	681b      	ldr	r3, [r3, #0]
 8009a6c:	681b      	ldr	r3, [r3, #0]
 8009a6e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009a72:	2b40      	cmp	r3, #64	; 0x40
 8009a74:	d007      	beq.n	8009a86 <HAL_SPI_Receive_IT+0x132>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009a76:	68fb      	ldr	r3, [r7, #12]
 8009a78:	681b      	ldr	r3, [r3, #0]
 8009a7a:	681a      	ldr	r2, [r3, #0]
 8009a7c:	68fb      	ldr	r3, [r7, #12]
 8009a7e:	681b      	ldr	r3, [r3, #0]
 8009a80:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009a84:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009a86:	68fb      	ldr	r3, [r7, #12]
 8009a88:	2200      	movs	r2, #0
 8009a8a:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 8009a8e:	68fb      	ldr	r3, [r7, #12]
 8009a90:	681b      	ldr	r3, [r3, #0]
 8009a92:	685a      	ldr	r2, [r3, #4]
 8009a94:	68fb      	ldr	r3, [r7, #12]
 8009a96:	681b      	ldr	r3, [r3, #0]
 8009a98:	f042 0260 	orr.w	r2, r2, #96	; 0x60
 8009a9c:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8009a9e:	7dfb      	ldrb	r3, [r7, #23]
}
 8009aa0:	4618      	mov	r0, r3
 8009aa2:	3718      	adds	r7, #24
 8009aa4:	46bd      	mov	sp, r7
 8009aa6:	bd80      	pop	{r7, pc}
 8009aa8:	0800ae29 	.word	0x0800ae29
 8009aac:	0800add9 	.word	0x0800add9

08009ab0 <HAL_SPI_TransmitReceive_IT>:
  * @param  pRxData pointer to reception data buffer
  * @param  Size amount of data to be sent and received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_IT(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size)
{
 8009ab0:	b480      	push	{r7}
 8009ab2:	b087      	sub	sp, #28
 8009ab4:	af00      	add	r7, sp, #0
 8009ab6:	60f8      	str	r0, [r7, #12]
 8009ab8:	60b9      	str	r1, [r7, #8]
 8009aba:	607a      	str	r2, [r7, #4]
 8009abc:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8009abe:	2300      	movs	r3, #0
 8009ac0:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8009ac2:	68fb      	ldr	r3, [r7, #12]
 8009ac4:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009ac8:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 8009aca:	68fb      	ldr	r3, [r7, #12]
 8009acc:	685b      	ldr	r3, [r3, #4]
 8009ace:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8009ad0:	7dbb      	ldrb	r3, [r7, #22]
 8009ad2:	2b01      	cmp	r3, #1
 8009ad4:	d00d      	beq.n	8009af2 <HAL_SPI_TransmitReceive_IT+0x42>
 8009ad6:	693b      	ldr	r3, [r7, #16]
 8009ad8:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009adc:	d106      	bne.n	8009aec <HAL_SPI_TransmitReceive_IT+0x3c>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8009ade:	68fb      	ldr	r3, [r7, #12]
 8009ae0:	689b      	ldr	r3, [r3, #8]
 8009ae2:	2b00      	cmp	r3, #0
 8009ae4:	d102      	bne.n	8009aec <HAL_SPI_TransmitReceive_IT+0x3c>
 8009ae6:	7dbb      	ldrb	r3, [r7, #22]
 8009ae8:	2b04      	cmp	r3, #4
 8009aea:	d002      	beq.n	8009af2 <HAL_SPI_TransmitReceive_IT+0x42>
  {
    errorcode = HAL_BUSY;
 8009aec:	2302      	movs	r3, #2
 8009aee:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009af0:	e07d      	b.n	8009bee <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8009af2:	68bb      	ldr	r3, [r7, #8]
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	d005      	beq.n	8009b04 <HAL_SPI_TransmitReceive_IT+0x54>
 8009af8:	687b      	ldr	r3, [r7, #4]
 8009afa:	2b00      	cmp	r3, #0
 8009afc:	d002      	beq.n	8009b04 <HAL_SPI_TransmitReceive_IT+0x54>
 8009afe:	887b      	ldrh	r3, [r7, #2]
 8009b00:	2b00      	cmp	r3, #0
 8009b02:	d102      	bne.n	8009b0a <HAL_SPI_TransmitReceive_IT+0x5a>
  {
    errorcode = HAL_ERROR;
 8009b04:	2301      	movs	r3, #1
 8009b06:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009b08:	e071      	b.n	8009bee <HAL_SPI_TransmitReceive_IT+0x13e>
  }

  /* Process locked */
  __HAL_LOCK(hspi);
 8009b0a:	68fb      	ldr	r3, [r7, #12]
 8009b0c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009b10:	2b01      	cmp	r3, #1
 8009b12:	d101      	bne.n	8009b18 <HAL_SPI_TransmitReceive_IT+0x68>
 8009b14:	2302      	movs	r3, #2
 8009b16:	e06b      	b.n	8009bf0 <HAL_SPI_TransmitReceive_IT+0x140>
 8009b18:	68fb      	ldr	r3, [r7, #12]
 8009b1a:	2201      	movs	r2, #1
 8009b1c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8009b20:	68fb      	ldr	r3, [r7, #12]
 8009b22:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009b26:	b2db      	uxtb	r3, r3
 8009b28:	2b04      	cmp	r3, #4
 8009b2a:	d003      	beq.n	8009b34 <HAL_SPI_TransmitReceive_IT+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8009b2c:	68fb      	ldr	r3, [r7, #12]
 8009b2e:	2205      	movs	r2, #5
 8009b30:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009b34:	68fb      	ldr	r3, [r7, #12]
 8009b36:	2200      	movs	r2, #0
 8009b38:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8009b3a:	68fb      	ldr	r3, [r7, #12]
 8009b3c:	68ba      	ldr	r2, [r7, #8]
 8009b3e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009b40:	68fb      	ldr	r3, [r7, #12]
 8009b42:	887a      	ldrh	r2, [r7, #2]
 8009b44:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	887a      	ldrh	r2, [r7, #2]
 8009b4a:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8009b4c:	68fb      	ldr	r3, [r7, #12]
 8009b4e:	687a      	ldr	r2, [r7, #4]
 8009b50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	887a      	ldrh	r2, [r7, #2]
 8009b56:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8009b5a:	68fb      	ldr	r3, [r7, #12]
 8009b5c:	887a      	ldrh	r2, [r7, #2]
 8009b5e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Set the function for IT treatment */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009b62:	68fb      	ldr	r3, [r7, #12]
 8009b64:	68db      	ldr	r3, [r3, #12]
 8009b66:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009b6a:	d906      	bls.n	8009b7a <HAL_SPI_TransmitReceive_IT+0xca>
  {
    hspi->RxISR     = SPI_2linesRxISR_16BIT;
 8009b6c:	68fb      	ldr	r3, [r7, #12]
 8009b6e:	4a23      	ldr	r2, [pc, #140]	; (8009bfc <HAL_SPI_TransmitReceive_IT+0x14c>)
 8009b70:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_16BIT;
 8009b72:	68fb      	ldr	r3, [r7, #12]
 8009b74:	4a22      	ldr	r2, [pc, #136]	; (8009c00 <HAL_SPI_TransmitReceive_IT+0x150>)
 8009b76:	651a      	str	r2, [r3, #80]	; 0x50
 8009b78:	e005      	b.n	8009b86 <HAL_SPI_TransmitReceive_IT+0xd6>
  }
  else
  {
    hspi->RxISR     = SPI_2linesRxISR_8BIT;
 8009b7a:	68fb      	ldr	r3, [r7, #12]
 8009b7c:	4a21      	ldr	r2, [pc, #132]	; (8009c04 <HAL_SPI_TransmitReceive_IT+0x154>)
 8009b7e:	64da      	str	r2, [r3, #76]	; 0x4c
    hspi->TxISR     = SPI_2linesTxISR_8BIT;
 8009b80:	68fb      	ldr	r3, [r7, #12]
 8009b82:	4a21      	ldr	r2, [pc, #132]	; (8009c08 <HAL_SPI_TransmitReceive_IT+0x158>)
 8009b84:	651a      	str	r2, [r3, #80]	; 0x50
    hspi->CRCSize = 0U;
  }
#endif /* USE_SPI_CRC */

  /* Check if packing mode is enabled and if there is more than 2 data to receive */
  if ((hspi->Init.DataSize > SPI_DATASIZE_8BIT) || (Size >= 2U))
 8009b86:	68fb      	ldr	r3, [r7, #12]
 8009b88:	68db      	ldr	r3, [r3, #12]
 8009b8a:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009b8e:	d802      	bhi.n	8009b96 <HAL_SPI_TransmitReceive_IT+0xe6>
 8009b90:	887b      	ldrh	r3, [r7, #2]
 8009b92:	2b01      	cmp	r3, #1
 8009b94:	d908      	bls.n	8009ba8 <HAL_SPI_TransmitReceive_IT+0xf8>
  {
    /* Set RX Fifo threshold according the reception data length: 16 bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009b96:	68fb      	ldr	r3, [r7, #12]
 8009b98:	681b      	ldr	r3, [r3, #0]
 8009b9a:	685a      	ldr	r2, [r3, #4]
 8009b9c:	68fb      	ldr	r3, [r7, #12]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009ba4:	605a      	str	r2, [r3, #4]
 8009ba6:	e007      	b.n	8009bb8 <HAL_SPI_TransmitReceive_IT+0x108>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8 bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009ba8:	68fb      	ldr	r3, [r7, #12]
 8009baa:	681b      	ldr	r3, [r3, #0]
 8009bac:	685a      	ldr	r2, [r3, #4]
 8009bae:	68fb      	ldr	r3, [r7, #12]
 8009bb0:	681b      	ldr	r3, [r3, #0]
 8009bb2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009bb6:	605a      	str	r2, [r3, #4]
  }


  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009bb8:	68fb      	ldr	r3, [r7, #12]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	681b      	ldr	r3, [r3, #0]
 8009bbe:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009bc2:	2b40      	cmp	r3, #64	; 0x40
 8009bc4:	d007      	beq.n	8009bd6 <HAL_SPI_TransmitReceive_IT+0x126>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009bc6:	68fb      	ldr	r3, [r7, #12]
 8009bc8:	681b      	ldr	r3, [r3, #0]
 8009bca:	681a      	ldr	r2, [r3, #0]
 8009bcc:	68fb      	ldr	r3, [r7, #12]
 8009bce:	681b      	ldr	r3, [r3, #0]
 8009bd0:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009bd4:	601a      	str	r2, [r3, #0]
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009bd6:	68fb      	ldr	r3, [r7, #12]
 8009bd8:	2200      	movs	r2, #0
 8009bda:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  /* Enable TXE, RXNE and ERR interrupt */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8009bde:	68fb      	ldr	r3, [r7, #12]
 8009be0:	681b      	ldr	r3, [r3, #0]
 8009be2:	685a      	ldr	r2, [r3, #4]
 8009be4:	68fb      	ldr	r3, [r7, #12]
 8009be6:	681b      	ldr	r3, [r3, #0]
 8009be8:	f042 02e0 	orr.w	r2, r2, #224	; 0xe0
 8009bec:	605a      	str	r2, [r3, #4]

error :
  return errorcode;
 8009bee:	7dfb      	ldrb	r3, [r7, #23]
}
 8009bf0:	4618      	mov	r0, r3
 8009bf2:	371c      	adds	r7, #28
 8009bf4:	46bd      	mov	sp, r7
 8009bf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009bfa:	4770      	bx	lr
 8009bfc:	0800ad13 	.word	0x0800ad13
 8009c00:	0800ad79 	.word	0x0800ad79
 8009c04:	0800abc3 	.word	0x0800abc3
 8009c08:	0800ac81 	.word	0x0800ac81

08009c0c <HAL_SPI_Transmit_DMA>:
  * @param  pData pointer to data buffer
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009c0c:	b580      	push	{r7, lr}
 8009c0e:	b086      	sub	sp, #24
 8009c10:	af00      	add	r7, sp, #0
 8009c12:	60f8      	str	r0, [r7, #12]
 8009c14:	60b9      	str	r1, [r7, #8]
 8009c16:	4613      	mov	r3, r2
 8009c18:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009c1a:	2300      	movs	r3, #0
 8009c1c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009c1e:	68fb      	ldr	r3, [r7, #12]
 8009c20:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009c24:	2b01      	cmp	r3, #1
 8009c26:	d101      	bne.n	8009c2c <HAL_SPI_Transmit_DMA+0x20>
 8009c28:	2302      	movs	r3, #2
 8009c2a:	e0d4      	b.n	8009dd6 <HAL_SPI_Transmit_DMA+0x1ca>
 8009c2c:	68fb      	ldr	r3, [r7, #12]
 8009c2e:	2201      	movs	r2, #1
 8009c30:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if (hspi->State != HAL_SPI_STATE_READY)
 8009c34:	68fb      	ldr	r3, [r7, #12]
 8009c36:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009c3a:	b2db      	uxtb	r3, r3
 8009c3c:	2b01      	cmp	r3, #1
 8009c3e:	d002      	beq.n	8009c46 <HAL_SPI_Transmit_DMA+0x3a>
  {
    errorcode = HAL_BUSY;
 8009c40:	2302      	movs	r3, #2
 8009c42:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009c44:	e0c2      	b.n	8009dcc <HAL_SPI_Transmit_DMA+0x1c0>
  }

  if ((pData == NULL) || (Size == 0U))
 8009c46:	68bb      	ldr	r3, [r7, #8]
 8009c48:	2b00      	cmp	r3, #0
 8009c4a:	d002      	beq.n	8009c52 <HAL_SPI_Transmit_DMA+0x46>
 8009c4c:	88fb      	ldrh	r3, [r7, #6]
 8009c4e:	2b00      	cmp	r3, #0
 8009c50:	d102      	bne.n	8009c58 <HAL_SPI_Transmit_DMA+0x4c>
  {
    errorcode = HAL_ERROR;
 8009c52:	2301      	movs	r3, #1
 8009c54:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009c56:	e0b9      	b.n	8009dcc <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8009c58:	68fb      	ldr	r3, [r7, #12]
 8009c5a:	2203      	movs	r2, #3
 8009c5c:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009c60:	68fb      	ldr	r3, [r7, #12]
 8009c62:	2200      	movs	r2, #0
 8009c64:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8009c66:	68fb      	ldr	r3, [r7, #12]
 8009c68:	68ba      	ldr	r2, [r7, #8]
 8009c6a:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 8009c6c:	68fb      	ldr	r3, [r7, #12]
 8009c6e:	88fa      	ldrh	r2, [r7, #6]
 8009c70:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	88fa      	ldrh	r2, [r7, #6]
 8009c76:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8009c78:	68fb      	ldr	r3, [r7, #12]
 8009c7a:	2200      	movs	r2, #0
 8009c7c:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8009c7e:	68fb      	ldr	r3, [r7, #12]
 8009c80:	2200      	movs	r2, #0
 8009c82:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->RxISR       = NULL;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	2200      	movs	r2, #0
 8009c88:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->RxXferSize  = 0U;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	2200      	movs	r2, #0
 8009c8e:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = 0U;
 8009c92:	68fb      	ldr	r3, [r7, #12]
 8009c94:	2200      	movs	r2, #0
 8009c96:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	689b      	ldr	r3, [r3, #8]
 8009c9e:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ca2:	d10f      	bne.n	8009cc4 <HAL_SPI_Transmit_DMA+0xb8>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009ca4:	68fb      	ldr	r3, [r7, #12]
 8009ca6:	681b      	ldr	r3, [r3, #0]
 8009ca8:	681a      	ldr	r2, [r3, #0]
 8009caa:	68fb      	ldr	r3, [r7, #12]
 8009cac:	681b      	ldr	r3, [r3, #0]
 8009cae:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009cb2:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	681b      	ldr	r3, [r3, #0]
 8009cb8:	681a      	ldr	r2, [r3, #0]
 8009cba:	68fb      	ldr	r3, [r7, #12]
 8009cbc:	681b      	ldr	r3, [r3, #0]
 8009cbe:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009cc2:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Set the SPI TxDMA Half transfer complete callback */
  hspi->hdmatx->XferHalfCpltCallback = SPI_DMAHalfTransmitCplt;
 8009cc4:	68fb      	ldr	r3, [r7, #12]
 8009cc6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cc8:	4a45      	ldr	r2, [pc, #276]	; (8009de0 <HAL_SPI_Transmit_DMA+0x1d4>)
 8009cca:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI TxDMA transfer complete callback */
  hspi->hdmatx->XferCpltCallback = SPI_DMATransmitCplt;
 8009ccc:	68fb      	ldr	r3, [r7, #12]
 8009cce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cd0:	4a44      	ldr	r2, [pc, #272]	; (8009de4 <HAL_SPI_Transmit_DMA+0x1d8>)
 8009cd2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmatx->XferErrorCallback = SPI_DMAError;
 8009cd4:	68fb      	ldr	r3, [r7, #12]
 8009cd6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009cd8:	4a43      	ldr	r2, [pc, #268]	; (8009de8 <HAL_SPI_Transmit_DMA+0x1dc>)
 8009cda:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmatx->XferAbortCallback = NULL;
 8009cdc:	68fb      	ldr	r3, [r7, #12]
 8009cde:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009ce0:	2200      	movs	r2, #0
 8009ce2:	651a      	str	r2, [r3, #80]	; 0x50

  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	685a      	ldr	r2, [r3, #4]
 8009cea:	68fb      	ldr	r3, [r7, #12]
 8009cec:	681b      	ldr	r3, [r3, #0]
 8009cee:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009cf2:	605a      	str	r2, [r3, #4]
  /* Packing mode is enabled only if the DMA setting is HALWORD */
  if ((hspi->Init.DataSize <= SPI_DATASIZE_8BIT) && (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD))
 8009cf4:	68fb      	ldr	r3, [r7, #12]
 8009cf6:	68db      	ldr	r3, [r3, #12]
 8009cf8:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009cfc:	d82d      	bhi.n	8009d5a <HAL_SPI_Transmit_DMA+0x14e>
 8009cfe:	68fb      	ldr	r3, [r7, #12]
 8009d00:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8009d02:	699b      	ldr	r3, [r3, #24]
 8009d04:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009d08:	d127      	bne.n	8009d5a <HAL_SPI_Transmit_DMA+0x14e>
  {
    /* Check the even/odd of the data size + crc if enabled */
    if ((hspi->TxXferCount & 0x1U) == 0U)
 8009d0a:	68fb      	ldr	r3, [r7, #12]
 8009d0c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d0e:	b29b      	uxth	r3, r3
 8009d10:	f003 0301 	and.w	r3, r3, #1
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d10f      	bne.n	8009d38 <HAL_SPI_Transmit_DMA+0x12c>
    {
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009d18:	68fb      	ldr	r3, [r7, #12]
 8009d1a:	681b      	ldr	r3, [r3, #0]
 8009d1c:	685a      	ldr	r2, [r3, #4]
 8009d1e:	68fb      	ldr	r3, [r7, #12]
 8009d20:	681b      	ldr	r3, [r3, #0]
 8009d22:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009d26:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U);
 8009d28:	68fb      	ldr	r3, [r7, #12]
 8009d2a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d2c:	b29b      	uxth	r3, r3
 8009d2e:	085b      	lsrs	r3, r3, #1
 8009d30:	b29a      	uxth	r2, r3
 8009d32:	68fb      	ldr	r3, [r7, #12]
 8009d34:	87da      	strh	r2, [r3, #62]	; 0x3e
 8009d36:	e010      	b.n	8009d5a <HAL_SPI_Transmit_DMA+0x14e>
    }
    else
    {
      SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	681b      	ldr	r3, [r3, #0]
 8009d3c:	685a      	ldr	r2, [r3, #4]
 8009d3e:	68fb      	ldr	r3, [r7, #12]
 8009d40:	681b      	ldr	r3, [r3, #0]
 8009d42:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009d46:	605a      	str	r2, [r3, #4]
      hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 8009d48:	68fb      	ldr	r3, [r7, #12]
 8009d4a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d4c:	b29b      	uxth	r3, r3
 8009d4e:	085b      	lsrs	r3, r3, #1
 8009d50:	b29b      	uxth	r3, r3
 8009d52:	3301      	adds	r3, #1
 8009d54:	b29a      	uxth	r2, r3
 8009d56:	68fb      	ldr	r3, [r7, #12]
 8009d58:	87da      	strh	r2, [r3, #62]	; 0x3e
    }
  }

  /* Enable the Tx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009d5a:	68fb      	ldr	r3, [r7, #12]
 8009d5c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009d62:	4619      	mov	r1, r3
 8009d64:	68fb      	ldr	r3, [r7, #12]
 8009d66:	681b      	ldr	r3, [r3, #0]
 8009d68:	330c      	adds	r3, #12
 8009d6a:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 8009d6c:	68fb      	ldr	r3, [r7, #12]
 8009d6e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8009d70:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 8009d72:	f7fa f86f 	bl	8003e54 <HAL_DMA_Start_IT>
 8009d76:	4603      	mov	r3, r0
 8009d78:	2b00      	cmp	r3, #0
 8009d7a:	d008      	beq.n	8009d8e <HAL_SPI_Transmit_DMA+0x182>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009d7c:	68fb      	ldr	r3, [r7, #12]
 8009d7e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009d80:	f043 0210 	orr.w	r2, r3, #16
 8009d84:	68fb      	ldr	r3, [r7, #12]
 8009d86:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8009d88:	2301      	movs	r3, #1
 8009d8a:	75fb      	strb	r3, [r7, #23]

    goto error;
 8009d8c:	e01e      	b.n	8009dcc <HAL_SPI_Transmit_DMA+0x1c0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	681b      	ldr	r3, [r3, #0]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009d98:	2b40      	cmp	r3, #64	; 0x40
 8009d9a:	d007      	beq.n	8009dac <HAL_SPI_Transmit_DMA+0x1a0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009d9c:	68fb      	ldr	r3, [r7, #12]
 8009d9e:	681b      	ldr	r3, [r3, #0]
 8009da0:	681a      	ldr	r2, [r3, #0]
 8009da2:	68fb      	ldr	r3, [r7, #12]
 8009da4:	681b      	ldr	r3, [r3, #0]
 8009da6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009daa:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009dac:	68fb      	ldr	r3, [r7, #12]
 8009dae:	681b      	ldr	r3, [r3, #0]
 8009db0:	685a      	ldr	r2, [r3, #4]
 8009db2:	68fb      	ldr	r3, [r7, #12]
 8009db4:	681b      	ldr	r3, [r3, #0]
 8009db6:	f042 0220 	orr.w	r2, r2, #32
 8009dba:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 8009dbc:	68fb      	ldr	r3, [r7, #12]
 8009dbe:	681b      	ldr	r3, [r3, #0]
 8009dc0:	685a      	ldr	r2, [r3, #4]
 8009dc2:	68fb      	ldr	r3, [r7, #12]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	f042 0202 	orr.w	r2, r2, #2
 8009dca:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8009dcc:	68fb      	ldr	r3, [r7, #12]
 8009dce:	2200      	movs	r2, #0
 8009dd0:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 8009dd4:	7dfb      	ldrb	r3, [r7, #23]
}
 8009dd6:	4618      	mov	r0, r3
 8009dd8:	3718      	adds	r7, #24
 8009dda:	46bd      	mov	sp, r7
 8009ddc:	bd80      	pop	{r7, pc}
 8009dde:	bf00      	nop
 8009de0:	0800a945 	.word	0x0800a945
 8009de4:	0800a761 	.word	0x0800a761
 8009de8:	0800a999 	.word	0x0800a999

08009dec <HAL_SPI_Receive_DMA>:
  * @note   When the CRC feature is enabled the pData Length must be Size + 1.
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size)
{
 8009dec:	b580      	push	{r7, lr}
 8009dee:	b086      	sub	sp, #24
 8009df0:	af00      	add	r7, sp, #0
 8009df2:	60f8      	str	r0, [r7, #12]
 8009df4:	60b9      	str	r1, [r7, #8]
 8009df6:	4613      	mov	r3, r2
 8009df8:	80fb      	strh	r3, [r7, #6]
  HAL_StatusTypeDef errorcode = HAL_OK;
 8009dfa:	2300      	movs	r3, #0
 8009dfc:	75fb      	strb	r3, [r7, #23]

  /* Check rx dma handle */
  assert_param(IS_SPI_DMA_HANDLE(hspi->hdmarx));

  if (hspi->State != HAL_SPI_STATE_READY)
 8009dfe:	68fb      	ldr	r3, [r7, #12]
 8009e00:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 8009e04:	b2db      	uxtb	r3, r3
 8009e06:	2b01      	cmp	r3, #1
 8009e08:	d002      	beq.n	8009e10 <HAL_SPI_Receive_DMA+0x24>
  {
    errorcode = HAL_BUSY;
 8009e0a:	2302      	movs	r3, #2
 8009e0c:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009e0e:	e0fe      	b.n	800a00e <HAL_SPI_Receive_DMA+0x222>
  }

  if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 8009e10:	68fb      	ldr	r3, [r7, #12]
 8009e12:	689b      	ldr	r3, [r3, #8]
 8009e14:	2b00      	cmp	r3, #0
 8009e16:	d110      	bne.n	8009e3a <HAL_SPI_Receive_DMA+0x4e>
 8009e18:	68fb      	ldr	r3, [r7, #12]
 8009e1a:	685b      	ldr	r3, [r3, #4]
 8009e1c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8009e20:	d10b      	bne.n	8009e3a <HAL_SPI_Receive_DMA+0x4e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8009e22:	68fb      	ldr	r3, [r7, #12]
 8009e24:	2204      	movs	r2, #4
 8009e26:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* Check tx dma handle */
    assert_param(IS_SPI_DMA_HANDLE(hspi->hdmatx));

    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive_DMA(hspi, pData, pData, Size);
 8009e2a:	88fb      	ldrh	r3, [r7, #6]
 8009e2c:	68ba      	ldr	r2, [r7, #8]
 8009e2e:	68b9      	ldr	r1, [r7, #8]
 8009e30:	68f8      	ldr	r0, [r7, #12]
 8009e32:	f000 f8fb 	bl	800a02c <HAL_SPI_TransmitReceive_DMA>
 8009e36:	4603      	mov	r3, r0
 8009e38:	e0ee      	b.n	800a018 <HAL_SPI_Receive_DMA+0x22c>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8009e3a:	68fb      	ldr	r3, [r7, #12]
 8009e3c:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 8009e40:	2b01      	cmp	r3, #1
 8009e42:	d101      	bne.n	8009e48 <HAL_SPI_Receive_DMA+0x5c>
 8009e44:	2302      	movs	r3, #2
 8009e46:	e0e7      	b.n	800a018 <HAL_SPI_Receive_DMA+0x22c>
 8009e48:	68fb      	ldr	r3, [r7, #12]
 8009e4a:	2201      	movs	r2, #1
 8009e4c:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  if ((pData == NULL) || (Size == 0U))
 8009e50:	68bb      	ldr	r3, [r7, #8]
 8009e52:	2b00      	cmp	r3, #0
 8009e54:	d002      	beq.n	8009e5c <HAL_SPI_Receive_DMA+0x70>
 8009e56:	88fb      	ldrh	r3, [r7, #6]
 8009e58:	2b00      	cmp	r3, #0
 8009e5a:	d102      	bne.n	8009e62 <HAL_SPI_Receive_DMA+0x76>
  {
    errorcode = HAL_ERROR;
 8009e5c:	2301      	movs	r3, #1
 8009e5e:	75fb      	strb	r3, [r7, #23]
    goto error;
 8009e60:	e0d5      	b.n	800a00e <HAL_SPI_Receive_DMA+0x222>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8009e62:	68fb      	ldr	r3, [r7, #12]
 8009e64:	2204      	movs	r2, #4
 8009e66:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8009e6a:	68fb      	ldr	r3, [r7, #12]
 8009e6c:	2200      	movs	r2, #0
 8009e6e:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8009e70:	68fb      	ldr	r3, [r7, #12]
 8009e72:	68ba      	ldr	r2, [r7, #8]
 8009e74:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 8009e76:	68fb      	ldr	r3, [r7, #12]
 8009e78:	88fa      	ldrh	r2, [r7, #6]
 8009e7a:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 8009e7e:	68fb      	ldr	r3, [r7, #12]
 8009e80:	88fa      	ldrh	r2, [r7, #6]
 8009e82:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8009e86:	68fb      	ldr	r3, [r7, #12]
 8009e88:	2200      	movs	r2, #0
 8009e8a:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 8009e8c:	68fb      	ldr	r3, [r7, #12]
 8009e8e:	2200      	movs	r2, #0
 8009e90:	651a      	str	r2, [r3, #80]	; 0x50
  hspi->TxXferSize  = 0U;
 8009e92:	68fb      	ldr	r3, [r7, #12]
 8009e94:	2200      	movs	r2, #0
 8009e96:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = 0U;
 8009e98:	68fb      	ldr	r3, [r7, #12]
 8009e9a:	2200      	movs	r2, #0
 8009e9c:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8009e9e:	68fb      	ldr	r3, [r7, #12]
 8009ea0:	689b      	ldr	r3, [r3, #8]
 8009ea2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009ea6:	d10f      	bne.n	8009ec8 <HAL_SPI_Receive_DMA+0xdc>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8009ea8:	68fb      	ldr	r3, [r7, #12]
 8009eaa:	681b      	ldr	r3, [r3, #0]
 8009eac:	681a      	ldr	r2, [r3, #0]
 8009eae:	68fb      	ldr	r3, [r7, #12]
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009eb6:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8009eb8:	68fb      	ldr	r3, [r7, #12]
 8009eba:	681b      	ldr	r3, [r3, #0]
 8009ebc:	681a      	ldr	r2, [r3, #0]
 8009ebe:	68fb      	ldr	r3, [r7, #12]
 8009ec0:	681b      	ldr	r3, [r3, #0]
 8009ec2:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8009ec6:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */


  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009ec8:	68fb      	ldr	r3, [r7, #12]
 8009eca:	681b      	ldr	r3, [r3, #0]
 8009ecc:	685a      	ldr	r2, [r3, #4]
 8009ece:	68fb      	ldr	r3, [r7, #12]
 8009ed0:	681b      	ldr	r3, [r3, #0]
 8009ed2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009ed6:	605a      	str	r2, [r3, #4]
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 8009ed8:	68fb      	ldr	r3, [r7, #12]
 8009eda:	68db      	ldr	r3, [r3, #12]
 8009edc:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 8009ee0:	d908      	bls.n	8009ef4 <HAL_SPI_Receive_DMA+0x108>
  {
    /* Set RX Fifo threshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009ee2:	68fb      	ldr	r3, [r7, #12]
 8009ee4:	681b      	ldr	r3, [r3, #0]
 8009ee6:	685a      	ldr	r2, [r3, #4]
 8009ee8:	68fb      	ldr	r3, [r7, #12]
 8009eea:	681b      	ldr	r3, [r3, #0]
 8009eec:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009ef0:	605a      	str	r2, [r3, #4]
 8009ef2:	e042      	b.n	8009f7a <HAL_SPI_Receive_DMA+0x18e>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009ef4:	68fb      	ldr	r3, [r7, #12]
 8009ef6:	681b      	ldr	r3, [r3, #0]
 8009ef8:	685a      	ldr	r2, [r3, #4]
 8009efa:	68fb      	ldr	r3, [r7, #12]
 8009efc:	681b      	ldr	r3, [r3, #0]
 8009efe:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8009f02:	605a      	str	r2, [r3, #4]

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8009f04:	68fb      	ldr	r3, [r7, #12]
 8009f06:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f08:	699b      	ldr	r3, [r3, #24]
 8009f0a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009f0e:	d134      	bne.n	8009f7a <HAL_SPI_Receive_DMA+0x18e>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 8009f10:	68fb      	ldr	r3, [r7, #12]
 8009f12:	681b      	ldr	r3, [r3, #0]
 8009f14:	685a      	ldr	r2, [r3, #4]
 8009f16:	68fb      	ldr	r3, [r7, #12]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 8009f1e:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 8009f20:	68fb      	ldr	r3, [r7, #12]
 8009f22:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009f26:	b29b      	uxth	r3, r3
 8009f28:	f003 0301 	and.w	r3, r3, #1
 8009f2c:	2b00      	cmp	r3, #0
 8009f2e:	d111      	bne.n	8009f54 <HAL_SPI_Receive_DMA+0x168>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009f30:	68fb      	ldr	r3, [r7, #12]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	685a      	ldr	r2, [r3, #4]
 8009f36:	68fb      	ldr	r3, [r7, #12]
 8009f38:	681b      	ldr	r3, [r3, #0]
 8009f3a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009f3e:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 8009f40:	68fb      	ldr	r3, [r7, #12]
 8009f42:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009f46:	b29b      	uxth	r3, r3
 8009f48:	085b      	lsrs	r3, r3, #1
 8009f4a:	b29a      	uxth	r2, r3
 8009f4c:	68fb      	ldr	r3, [r7, #12]
 8009f4e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 8009f52:	e012      	b.n	8009f7a <HAL_SPI_Receive_DMA+0x18e>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 8009f54:	68fb      	ldr	r3, [r7, #12]
 8009f56:	681b      	ldr	r3, [r3, #0]
 8009f58:	685a      	ldr	r2, [r3, #4]
 8009f5a:	68fb      	ldr	r3, [r7, #12]
 8009f5c:	681b      	ldr	r3, [r3, #0]
 8009f5e:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009f62:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 8009f64:	68fb      	ldr	r3, [r7, #12]
 8009f66:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009f6a:	b29b      	uxth	r3, r3
 8009f6c:	085b      	lsrs	r3, r3, #1
 8009f6e:	b29b      	uxth	r3, r3
 8009f70:	3301      	adds	r3, #1
 8009f72:	b29a      	uxth	r2, r3
 8009f74:	68fb      	ldr	r3, [r7, #12]
 8009f76:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Set the SPI RxDMA Half transfer complete callback */
  hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 8009f7a:	68fb      	ldr	r3, [r7, #12]
 8009f7c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f7e:	4a28      	ldr	r2, [pc, #160]	; (800a020 <HAL_SPI_Receive_DMA+0x234>)
 8009f80:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the SPI Rx DMA transfer complete callback */
  hspi->hdmarx->XferCpltCallback = SPI_DMAReceiveCplt;
 8009f82:	68fb      	ldr	r3, [r7, #12]
 8009f84:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f86:	4a27      	ldr	r2, [pc, #156]	; (800a024 <HAL_SPI_Receive_DMA+0x238>)
 8009f88:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 8009f8a:	68fb      	ldr	r3, [r7, #12]
 8009f8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f8e:	4a26      	ldr	r2, [pc, #152]	; (800a028 <HAL_SPI_Receive_DMA+0x23c>)
 8009f90:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 8009f92:	68fb      	ldr	r3, [r7, #12]
 8009f94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8009f96:	2200      	movs	r2, #0
 8009f98:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009f9a:	68fb      	ldr	r3, [r7, #12]
 8009f9c:	6d98      	ldr	r0, [r3, #88]	; 0x58
 8009f9e:	68fb      	ldr	r3, [r7, #12]
 8009fa0:	681b      	ldr	r3, [r3, #0]
 8009fa2:	330c      	adds	r3, #12
 8009fa4:	4619      	mov	r1, r3
 8009fa6:	68fb      	ldr	r3, [r7, #12]
 8009fa8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009faa:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 8009fac:	68fb      	ldr	r3, [r7, #12]
 8009fae:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 8009fb2:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 8009fb4:	f7f9 ff4e 	bl	8003e54 <HAL_DMA_Start_IT>
 8009fb8:	4603      	mov	r3, r0
 8009fba:	2b00      	cmp	r3, #0
 8009fbc:	d008      	beq.n	8009fd0 <HAL_SPI_Receive_DMA+0x1e4>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 8009fbe:	68fb      	ldr	r3, [r7, #12]
 8009fc0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8009fc2:	f043 0210 	orr.w	r2, r3, #16
 8009fc6:	68fb      	ldr	r3, [r7, #12]
 8009fc8:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 8009fca:	2301      	movs	r3, #1
 8009fcc:	75fb      	strb	r3, [r7, #23]

    goto error;
 8009fce:	e01e      	b.n	800a00e <HAL_SPI_Receive_DMA+0x222>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8009fd0:	68fb      	ldr	r3, [r7, #12]
 8009fd2:	681b      	ldr	r3, [r3, #0]
 8009fd4:	681b      	ldr	r3, [r3, #0]
 8009fd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009fda:	2b40      	cmp	r3, #64	; 0x40
 8009fdc:	d007      	beq.n	8009fee <HAL_SPI_Receive_DMA+0x202>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8009fde:	68fb      	ldr	r3, [r7, #12]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	681a      	ldr	r2, [r3, #0]
 8009fe4:	68fb      	ldr	r3, [r7, #12]
 8009fe6:	681b      	ldr	r3, [r3, #0]
 8009fe8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009fec:	601a      	str	r2, [r3, #0]
  }

  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	681b      	ldr	r3, [r3, #0]
 8009ff2:	685a      	ldr	r2, [r3, #4]
 8009ff4:	68fb      	ldr	r3, [r7, #12]
 8009ff6:	681b      	ldr	r3, [r3, #0]
 8009ff8:	f042 0220 	orr.w	r2, r2, #32
 8009ffc:	605a      	str	r2, [r3, #4]

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 8009ffe:	68fb      	ldr	r3, [r7, #12]
 800a000:	681b      	ldr	r3, [r3, #0]
 800a002:	685a      	ldr	r2, [r3, #4]
 800a004:	68fb      	ldr	r3, [r7, #12]
 800a006:	681b      	ldr	r3, [r3, #0]
 800a008:	f042 0201 	orr.w	r2, r2, #1
 800a00c:	605a      	str	r2, [r3, #4]

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a00e:	68fb      	ldr	r3, [r7, #12]
 800a010:	2200      	movs	r2, #0
 800a012:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a016:	7dfb      	ldrb	r3, [r7, #23]
}
 800a018:	4618      	mov	r0, r3
 800a01a:	3718      	adds	r7, #24
 800a01c:	46bd      	mov	sp, r7
 800a01e:	bd80      	pop	{r7, pc}
 800a020:	0800a961 	.word	0x0800a961
 800a024:	0800a809 	.word	0x0800a809
 800a028:	0800a999 	.word	0x0800a999

0800a02c <HAL_SPI_TransmitReceive_DMA>:
  * @param  Size amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive_DMA(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData,
                                              uint16_t Size)
{
 800a02c:	b580      	push	{r7, lr}
 800a02e:	b086      	sub	sp, #24
 800a030:	af00      	add	r7, sp, #0
 800a032:	60f8      	str	r0, [r7, #12]
 800a034:	60b9      	str	r1, [r7, #8]
 800a036:	607a      	str	r2, [r7, #4]
 800a038:	807b      	strh	r3, [r7, #2]
  uint32_t             tmp_mode;
  HAL_SPI_StateTypeDef tmp_state;
  HAL_StatusTypeDef errorcode = HAL_OK;
 800a03a:	2300      	movs	r3, #0
 800a03c:	75fb      	strb	r3, [r7, #23]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process locked */
  __HAL_LOCK(hspi);
 800a03e:	68fb      	ldr	r3, [r7, #12]
 800a040:	f893 305c 	ldrb.w	r3, [r3, #92]	; 0x5c
 800a044:	2b01      	cmp	r3, #1
 800a046:	d101      	bne.n	800a04c <HAL_SPI_TransmitReceive_DMA+0x20>
 800a048:	2302      	movs	r3, #2
 800a04a:	e164      	b.n	800a316 <HAL_SPI_TransmitReceive_DMA+0x2ea>
 800a04c:	68fb      	ldr	r3, [r7, #12]
 800a04e:	2201      	movs	r2, #1
 800a050:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

  /* Init temporary variables */
  tmp_state           = hspi->State;
 800a054:	68fb      	ldr	r3, [r7, #12]
 800a056:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a05a:	75bb      	strb	r3, [r7, #22]
  tmp_mode            = hspi->Init.Mode;
 800a05c:	68fb      	ldr	r3, [r7, #12]
 800a05e:	685b      	ldr	r3, [r3, #4]
 800a060:	613b      	str	r3, [r7, #16]

  if (!((tmp_state == HAL_SPI_STATE_READY) ||
 800a062:	7dbb      	ldrb	r3, [r7, #22]
 800a064:	2b01      	cmp	r3, #1
 800a066:	d00d      	beq.n	800a084 <HAL_SPI_TransmitReceive_DMA+0x58>
 800a068:	693b      	ldr	r3, [r7, #16]
 800a06a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a06e:	d106      	bne.n	800a07e <HAL_SPI_TransmitReceive_DMA+0x52>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800a070:	68fb      	ldr	r3, [r7, #12]
 800a072:	689b      	ldr	r3, [r3, #8]
 800a074:	2b00      	cmp	r3, #0
 800a076:	d102      	bne.n	800a07e <HAL_SPI_TransmitReceive_DMA+0x52>
 800a078:	7dbb      	ldrb	r3, [r7, #22]
 800a07a:	2b04      	cmp	r3, #4
 800a07c:	d002      	beq.n	800a084 <HAL_SPI_TransmitReceive_DMA+0x58>
  {
    errorcode = HAL_BUSY;
 800a07e:	2302      	movs	r3, #2
 800a080:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a082:	e143      	b.n	800a30c <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 800a084:	68bb      	ldr	r3, [r7, #8]
 800a086:	2b00      	cmp	r3, #0
 800a088:	d005      	beq.n	800a096 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800a08a:	687b      	ldr	r3, [r7, #4]
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d002      	beq.n	800a096 <HAL_SPI_TransmitReceive_DMA+0x6a>
 800a090:	887b      	ldrh	r3, [r7, #2]
 800a092:	2b00      	cmp	r3, #0
 800a094:	d102      	bne.n	800a09c <HAL_SPI_TransmitReceive_DMA+0x70>
  {
    errorcode = HAL_ERROR;
 800a096:	2301      	movs	r3, #1
 800a098:	75fb      	strb	r3, [r7, #23]
    goto error;
 800a09a:	e137      	b.n	800a30c <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 800a09c:	68fb      	ldr	r3, [r7, #12]
 800a09e:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a0a2:	b2db      	uxtb	r3, r3
 800a0a4:	2b04      	cmp	r3, #4
 800a0a6:	d003      	beq.n	800a0b0 <HAL_SPI_TransmitReceive_DMA+0x84>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800a0a8:	68fb      	ldr	r3, [r7, #12]
 800a0aa:	2205      	movs	r2, #5
 800a0ac:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 800a0b0:	68fb      	ldr	r3, [r7, #12]
 800a0b2:	2200      	movs	r2, #0
 800a0b4:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800a0b6:	68fb      	ldr	r3, [r7, #12]
 800a0b8:	68ba      	ldr	r2, [r7, #8]
 800a0ba:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferSize  = Size;
 800a0bc:	68fb      	ldr	r3, [r7, #12]
 800a0be:	887a      	ldrh	r2, [r7, #2]
 800a0c0:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->TxXferCount = Size;
 800a0c2:	68fb      	ldr	r3, [r7, #12]
 800a0c4:	887a      	ldrh	r2, [r7, #2]
 800a0c6:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800a0c8:	68fb      	ldr	r3, [r7, #12]
 800a0ca:	687a      	ldr	r2, [r7, #4]
 800a0cc:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferSize  = Size;
 800a0ce:	68fb      	ldr	r3, [r7, #12]
 800a0d0:	887a      	ldrh	r2, [r7, #2]
 800a0d2:	f8a3 2044 	strh.w	r2, [r3, #68]	; 0x44
  hspi->RxXferCount = Size;
 800a0d6:	68fb      	ldr	r3, [r7, #12]
 800a0d8:	887a      	ldrh	r2, [r7, #2]
 800a0da:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  /* Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800a0de:	68fb      	ldr	r3, [r7, #12]
 800a0e0:	2200      	movs	r2, #0
 800a0e2:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->TxISR       = NULL;
 800a0e4:	68fb      	ldr	r3, [r7, #12]
 800a0e6:	2200      	movs	r2, #0
 800a0e8:	651a      	str	r2, [r3, #80]	; 0x50
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Reset the threshold bit */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX | SPI_CR2_LDMARX);
 800a0ea:	68fb      	ldr	r3, [r7, #12]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	685a      	ldr	r2, [r3, #4]
 800a0f0:	68fb      	ldr	r3, [r7, #12]
 800a0f2:	681b      	ldr	r3, [r3, #0]
 800a0f4:	f422 42c0 	bic.w	r2, r2, #24576	; 0x6000
 800a0f8:	605a      	str	r2, [r3, #4]

  /* The packing mode management is enabled by the DMA settings according the spi data size */
  if (hspi->Init.DataSize > SPI_DATASIZE_8BIT)
 800a0fa:	68fb      	ldr	r3, [r7, #12]
 800a0fc:	68db      	ldr	r3, [r3, #12]
 800a0fe:	f5b3 6fe0 	cmp.w	r3, #1792	; 0x700
 800a102:	d908      	bls.n	800a116 <HAL_SPI_TransmitReceive_DMA+0xea>
  {
    /* Set fiforxthreshold according the reception data length: 16bit */
    CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	685a      	ldr	r2, [r3, #4]
 800a10a:	68fb      	ldr	r3, [r7, #12]
 800a10c:	681b      	ldr	r3, [r3, #0]
 800a10e:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a112:	605a      	str	r2, [r3, #4]
 800a114:	e06f      	b.n	800a1f6 <HAL_SPI_TransmitReceive_DMA+0x1ca>
  }
  else
  {
    /* Set RX Fifo threshold according the reception data length: 8bit */
    SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a116:	68fb      	ldr	r3, [r7, #12]
 800a118:	681b      	ldr	r3, [r3, #0]
 800a11a:	685a      	ldr	r2, [r3, #4]
 800a11c:	68fb      	ldr	r3, [r7, #12]
 800a11e:	681b      	ldr	r3, [r3, #0]
 800a120:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800a124:	605a      	str	r2, [r3, #4]

    if (hspi->hdmatx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a126:	68fb      	ldr	r3, [r7, #12]
 800a128:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a12a:	699b      	ldr	r3, [r3, #24]
 800a12c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a130:	d126      	bne.n	800a180 <HAL_SPI_TransmitReceive_DMA+0x154>
    {
      if ((hspi->TxXferSize & 0x1U) == 0x0U)
 800a132:	68fb      	ldr	r3, [r7, #12]
 800a134:	8f9b      	ldrh	r3, [r3, #60]	; 0x3c
 800a136:	f003 0301 	and.w	r3, r3, #1
 800a13a:	2b00      	cmp	r3, #0
 800a13c:	d10f      	bne.n	800a15e <HAL_SPI_TransmitReceive_DMA+0x132>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800a13e:	68fb      	ldr	r3, [r7, #12]
 800a140:	681b      	ldr	r3, [r3, #0]
 800a142:	685a      	ldr	r2, [r3, #4]
 800a144:	68fb      	ldr	r3, [r7, #12]
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 800a14c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = hspi->TxXferCount >> 1U;
 800a14e:	68fb      	ldr	r3, [r7, #12]
 800a150:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a152:	b29b      	uxth	r3, r3
 800a154:	085b      	lsrs	r3, r3, #1
 800a156:	b29a      	uxth	r2, r3
 800a158:	68fb      	ldr	r3, [r7, #12]
 800a15a:	87da      	strh	r2, [r3, #62]	; 0x3e
 800a15c:	e010      	b.n	800a180 <HAL_SPI_TransmitReceive_DMA+0x154>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMATX);
 800a15e:	68fb      	ldr	r3, [r7, #12]
 800a160:	681b      	ldr	r3, [r3, #0]
 800a162:	685a      	ldr	r2, [r3, #4]
 800a164:	68fb      	ldr	r3, [r7, #12]
 800a166:	681b      	ldr	r3, [r3, #0]
 800a168:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800a16c:	605a      	str	r2, [r3, #4]
        hspi->TxXferCount = (hspi->TxXferCount >> 1U) + 1U;
 800a16e:	68fb      	ldr	r3, [r7, #12]
 800a170:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a172:	b29b      	uxth	r3, r3
 800a174:	085b      	lsrs	r3, r3, #1
 800a176:	b29b      	uxth	r3, r3
 800a178:	3301      	adds	r3, #1
 800a17a:	b29a      	uxth	r2, r3
 800a17c:	68fb      	ldr	r3, [r7, #12]
 800a17e:	87da      	strh	r2, [r3, #62]	; 0x3e
      }
    }

    if (hspi->hdmarx->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 800a180:	68fb      	ldr	r3, [r7, #12]
 800a182:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a184:	699b      	ldr	r3, [r3, #24]
 800a186:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800a18a:	d134      	bne.n	800a1f6 <HAL_SPI_TransmitReceive_DMA+0x1ca>
    {
      /* Set RX Fifo threshold according the reception data length: 16bit */
      CLEAR_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800a18c:	68fb      	ldr	r3, [r7, #12]
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	685a      	ldr	r2, [r3, #4]
 800a192:	68fb      	ldr	r3, [r7, #12]
 800a194:	681b      	ldr	r3, [r3, #0]
 800a196:	f422 5280 	bic.w	r2, r2, #4096	; 0x1000
 800a19a:	605a      	str	r2, [r3, #4]

      if ((hspi->RxXferCount & 0x1U) == 0x0U)
 800a19c:	68fb      	ldr	r3, [r7, #12]
 800a19e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a1a2:	b29b      	uxth	r3, r3
 800a1a4:	f003 0301 	and.w	r3, r3, #1
 800a1a8:	2b00      	cmp	r3, #0
 800a1aa:	d111      	bne.n	800a1d0 <HAL_SPI_TransmitReceive_DMA+0x1a4>
      {
        CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a1ac:	68fb      	ldr	r3, [r7, #12]
 800a1ae:	681b      	ldr	r3, [r3, #0]
 800a1b0:	685a      	ldr	r2, [r3, #4]
 800a1b2:	68fb      	ldr	r3, [r7, #12]
 800a1b4:	681b      	ldr	r3, [r3, #0]
 800a1b6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800a1ba:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = hspi->RxXferCount >> 1U;
 800a1bc:	68fb      	ldr	r3, [r7, #12]
 800a1be:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a1c2:	b29b      	uxth	r3, r3
 800a1c4:	085b      	lsrs	r3, r3, #1
 800a1c6:	b29a      	uxth	r2, r3
 800a1c8:	68fb      	ldr	r3, [r7, #12]
 800a1ca:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
 800a1ce:	e012      	b.n	800a1f6 <HAL_SPI_TransmitReceive_DMA+0x1ca>
      }
      else
      {
        SET_BIT(hspi->Instance->CR2, SPI_CR2_LDMARX);
 800a1d0:	68fb      	ldr	r3, [r7, #12]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	685a      	ldr	r2, [r3, #4]
 800a1d6:	68fb      	ldr	r3, [r7, #12]
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800a1de:	605a      	str	r2, [r3, #4]
        hspi->RxXferCount = (hspi->RxXferCount >> 1U) + 1U;
 800a1e0:	68fb      	ldr	r3, [r7, #12]
 800a1e2:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a1e6:	b29b      	uxth	r3, r3
 800a1e8:	085b      	lsrs	r3, r3, #1
 800a1ea:	b29b      	uxth	r3, r3
 800a1ec:	3301      	adds	r3, #1
 800a1ee:	b29a      	uxth	r2, r3
 800a1f0:	68fb      	ldr	r3, [r7, #12]
 800a1f2:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
      }
    }
  }

  /* Check if we are in Rx only or in Rx/Tx Mode and configure the DMA transfer complete callback */
  if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800a1f6:	68fb      	ldr	r3, [r7, #12]
 800a1f8:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a1fc:	b2db      	uxtb	r3, r3
 800a1fe:	2b04      	cmp	r3, #4
 800a200:	d108      	bne.n	800a214 <HAL_SPI_TransmitReceive_DMA+0x1e8>
  {
    /* Set the SPI Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfReceiveCplt;
 800a202:	68fb      	ldr	r3, [r7, #12]
 800a204:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a206:	4a46      	ldr	r2, [pc, #280]	; (800a320 <HAL_SPI_TransmitReceive_DMA+0x2f4>)
 800a208:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMAReceiveCplt;
 800a20a:	68fb      	ldr	r3, [r7, #12]
 800a20c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a20e:	4a45      	ldr	r2, [pc, #276]	; (800a324 <HAL_SPI_TransmitReceive_DMA+0x2f8>)
 800a210:	63da      	str	r2, [r3, #60]	; 0x3c
 800a212:	e007      	b.n	800a224 <HAL_SPI_TransmitReceive_DMA+0x1f8>
  }
  else
  {
    /* Set the SPI Tx/Rx DMA Half transfer complete callback */
    hspi->hdmarx->XferHalfCpltCallback = SPI_DMAHalfTransmitReceiveCplt;
 800a214:	68fb      	ldr	r3, [r7, #12]
 800a216:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a218:	4a43      	ldr	r2, [pc, #268]	; (800a328 <HAL_SPI_TransmitReceive_DMA+0x2fc>)
 800a21a:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->hdmarx->XferCpltCallback     = SPI_DMATransmitReceiveCplt;
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a220:	4a42      	ldr	r2, [pc, #264]	; (800a32c <HAL_SPI_TransmitReceive_DMA+0x300>)
 800a222:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Set the DMA error callback */
  hspi->hdmarx->XferErrorCallback = SPI_DMAError;
 800a224:	68fb      	ldr	r3, [r7, #12]
 800a226:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a228:	4a41      	ldr	r2, [pc, #260]	; (800a330 <HAL_SPI_TransmitReceive_DMA+0x304>)
 800a22a:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA AbortCpltCallback */
  hspi->hdmarx->XferAbortCallback = NULL;
 800a22c:	68fb      	ldr	r3, [r7, #12]
 800a22e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a230:	2200      	movs	r2, #0
 800a232:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Rx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a234:	68fb      	ldr	r3, [r7, #12]
 800a236:	6d98      	ldr	r0, [r3, #88]	; 0x58
 800a238:	68fb      	ldr	r3, [r7, #12]
 800a23a:	681b      	ldr	r3, [r3, #0]
 800a23c:	330c      	adds	r3, #12
 800a23e:	4619      	mov	r1, r3
 800a240:	68fb      	ldr	r3, [r7, #12]
 800a242:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800a244:	461a      	mov	r2, r3
                                 hspi->RxXferCount))
 800a246:	68fb      	ldr	r3, [r7, #12]
 800a248:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800a24c:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmarx, (uint32_t)&hspi->Instance->DR, (uint32_t)hspi->pRxBuffPtr,
 800a24e:	f7f9 fe01 	bl	8003e54 <HAL_DMA_Start_IT>
 800a252:	4603      	mov	r3, r0
 800a254:	2b00      	cmp	r3, #0
 800a256:	d008      	beq.n	800a26a <HAL_SPI_TransmitReceive_DMA+0x23e>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a258:	68fb      	ldr	r3, [r7, #12]
 800a25a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a25c:	f043 0210 	orr.w	r2, r3, #16
 800a260:	68fb      	ldr	r3, [r7, #12]
 800a262:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800a264:	2301      	movs	r3, #1
 800a266:	75fb      	strb	r3, [r7, #23]

    goto error;
 800a268:	e050      	b.n	800a30c <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Enable Rx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	681b      	ldr	r3, [r3, #0]
 800a26e:	685a      	ldr	r2, [r3, #4]
 800a270:	68fb      	ldr	r3, [r7, #12]
 800a272:	681b      	ldr	r3, [r3, #0]
 800a274:	f042 0201 	orr.w	r2, r2, #1
 800a278:	605a      	str	r2, [r3, #4]

  /* Set the SPI Tx DMA transfer complete callback as NULL because the communication closing
  is performed in DMA reception complete callback  */
  hspi->hdmatx->XferHalfCpltCallback = NULL;
 800a27a:	68fb      	ldr	r3, [r7, #12]
 800a27c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a27e:	2200      	movs	r2, #0
 800a280:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->hdmatx->XferCpltCallback     = NULL;
 800a282:	68fb      	ldr	r3, [r7, #12]
 800a284:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a286:	2200      	movs	r2, #0
 800a288:	63da      	str	r2, [r3, #60]	; 0x3c
  hspi->hdmatx->XferErrorCallback    = NULL;
 800a28a:	68fb      	ldr	r3, [r7, #12]
 800a28c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a28e:	2200      	movs	r2, #0
 800a290:	64da      	str	r2, [r3, #76]	; 0x4c
  hspi->hdmatx->XferAbortCallback    = NULL;
 800a292:	68fb      	ldr	r3, [r7, #12]
 800a294:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a296:	2200      	movs	r2, #0
 800a298:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the Tx DMA Stream/Channel  */
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	6d58      	ldr	r0, [r3, #84]	; 0x54
 800a29e:	68fb      	ldr	r3, [r7, #12]
 800a2a0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a2a2:	4619      	mov	r1, r3
 800a2a4:	68fb      	ldr	r3, [r7, #12]
 800a2a6:	681b      	ldr	r3, [r3, #0]
 800a2a8:	330c      	adds	r3, #12
 800a2aa:	461a      	mov	r2, r3
                                 hspi->TxXferCount))
 800a2ac:	68fb      	ldr	r3, [r7, #12]
 800a2ae:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800a2b0:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hspi->hdmatx, (uint32_t)hspi->pTxBuffPtr, (uint32_t)&hspi->Instance->DR,
 800a2b2:	f7f9 fdcf 	bl	8003e54 <HAL_DMA_Start_IT>
 800a2b6:	4603      	mov	r3, r0
 800a2b8:	2b00      	cmp	r3, #0
 800a2ba:	d008      	beq.n	800a2ce <HAL_SPI_TransmitReceive_DMA+0x2a2>
  {
    /* Update SPI error code */
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a2bc:	68fb      	ldr	r3, [r7, #12]
 800a2be:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a2c0:	f043 0210 	orr.w	r2, r3, #16
 800a2c4:	68fb      	ldr	r3, [r7, #12]
 800a2c6:	661a      	str	r2, [r3, #96]	; 0x60
    errorcode = HAL_ERROR;
 800a2c8:	2301      	movs	r3, #1
 800a2ca:	75fb      	strb	r3, [r7, #23]

    goto error;
 800a2cc:	e01e      	b.n	800a30c <HAL_SPI_TransmitReceive_DMA+0x2e0>
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800a2ce:	68fb      	ldr	r3, [r7, #12]
 800a2d0:	681b      	ldr	r3, [r3, #0]
 800a2d2:	681b      	ldr	r3, [r3, #0]
 800a2d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2d8:	2b40      	cmp	r3, #64	; 0x40
 800a2da:	d007      	beq.n	800a2ec <HAL_SPI_TransmitReceive_DMA+0x2c0>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 800a2dc:	68fb      	ldr	r3, [r7, #12]
 800a2de:	681b      	ldr	r3, [r3, #0]
 800a2e0:	681a      	ldr	r2, [r3, #0]
 800a2e2:	68fb      	ldr	r3, [r7, #12]
 800a2e4:	681b      	ldr	r3, [r3, #0]
 800a2e6:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a2ea:	601a      	str	r2, [r3, #0]
  }
  /* Enable the SPI Error Interrupt Bit */
  __HAL_SPI_ENABLE_IT(hspi, (SPI_IT_ERR));
 800a2ec:	68fb      	ldr	r3, [r7, #12]
 800a2ee:	681b      	ldr	r3, [r3, #0]
 800a2f0:	685a      	ldr	r2, [r3, #4]
 800a2f2:	68fb      	ldr	r3, [r7, #12]
 800a2f4:	681b      	ldr	r3, [r3, #0]
 800a2f6:	f042 0220 	orr.w	r2, r2, #32
 800a2fa:	605a      	str	r2, [r3, #4]

  /* Enable Tx DMA Request */
  SET_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a2fc:	68fb      	ldr	r3, [r7, #12]
 800a2fe:	681b      	ldr	r3, [r3, #0]
 800a300:	685a      	ldr	r2, [r3, #4]
 800a302:	68fb      	ldr	r3, [r7, #12]
 800a304:	681b      	ldr	r3, [r3, #0]
 800a306:	f042 0202 	orr.w	r2, r2, #2
 800a30a:	605a      	str	r2, [r3, #4]

error :
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 800a30c:	68fb      	ldr	r3, [r7, #12]
 800a30e:	2200      	movs	r2, #0
 800a310:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c
  return errorcode;
 800a314:	7dfb      	ldrb	r3, [r7, #23]
}
 800a316:	4618      	mov	r0, r3
 800a318:	3718      	adds	r7, #24
 800a31a:	46bd      	mov	sp, r7
 800a31c:	bd80      	pop	{r7, pc}
 800a31e:	bf00      	nop
 800a320:	0800a961 	.word	0x0800a961
 800a324:	0800a809 	.word	0x0800a809
 800a328:	0800a97d 	.word	0x0800a97d
 800a32c:	0800a8b3 	.word	0x0800a8b3
 800a330:	0800a999 	.word	0x0800a999

0800a334 <HAL_SPI_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Abort_IT(SPI_HandleTypeDef *hspi)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b088      	sub	sp, #32
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt ;
  __IO uint32_t count;
  __IO uint32_t resetcount;

  /* Initialized local variable  */
  errorcode = HAL_OK;
 800a33c:	2300      	movs	r3, #0
 800a33e:	77fb      	strb	r3, [r7, #31]
  abortcplt = 1U;
 800a340:	2301      	movs	r3, #1
 800a342:	61bb      	str	r3, [r7, #24]
  resetcount = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800a344:	4b72      	ldr	r3, [pc, #456]	; (800a510 <HAL_SPI_Abort_IT+0x1dc>)
 800a346:	681b      	ldr	r3, [r3, #0]
 800a348:	4a72      	ldr	r2, [pc, #456]	; (800a514 <HAL_SPI_Abort_IT+0x1e0>)
 800a34a:	fba2 2303 	umull	r2, r3, r2, r3
 800a34e:	0a5b      	lsrs	r3, r3, #9
 800a350:	2264      	movs	r2, #100	; 0x64
 800a352:	fb02 f303 	mul.w	r3, r2, r3
 800a356:	613b      	str	r3, [r7, #16]
  count = resetcount;
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	617b      	str	r3, [r7, #20]

  /* Clear ERRIE interrupt to avoid error interrupts generation during Abort procedure */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_ERRIE);
 800a35c:	687b      	ldr	r3, [r7, #4]
 800a35e:	681b      	ldr	r3, [r3, #0]
 800a360:	685a      	ldr	r2, [r3, #4]
 800a362:	687b      	ldr	r3, [r7, #4]
 800a364:	681b      	ldr	r3, [r3, #0]
 800a366:	f022 0220 	bic.w	r2, r2, #32
 800a36a:	605a      	str	r2, [r3, #4]

  /* Change Rx and Tx Irq Handler to Disable TXEIE, RXNEIE and ERRIE interrupts */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE))
 800a36c:	687b      	ldr	r3, [r7, #4]
 800a36e:	681b      	ldr	r3, [r3, #0]
 800a370:	685b      	ldr	r3, [r3, #4]
 800a372:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a376:	2b80      	cmp	r3, #128	; 0x80
 800a378:	d117      	bne.n	800a3aa <HAL_SPI_Abort_IT+0x76>
  {
    hspi->TxISR = SPI_AbortTx_ISR;
 800a37a:	687b      	ldr	r3, [r7, #4]
 800a37c:	4a66      	ldr	r2, [pc, #408]	; (800a518 <HAL_SPI_Abort_IT+0x1e4>)
 800a37e:	651a      	str	r2, [r3, #80]	; 0x50
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 800a380:	697b      	ldr	r3, [r7, #20]
 800a382:	2b00      	cmp	r3, #0
 800a384:	d106      	bne.n	800a394 <HAL_SPI_Abort_IT+0x60>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a386:	687b      	ldr	r3, [r7, #4]
 800a388:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a38a:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a38e:	687b      	ldr	r3, [r7, #4]
 800a390:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800a392:	e008      	b.n	800a3a6 <HAL_SPI_Abort_IT+0x72>
      }
      count--;
 800a394:	697b      	ldr	r3, [r7, #20]
 800a396:	3b01      	subs	r3, #1
 800a398:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 800a39a:	687b      	ldr	r3, [r7, #4]
 800a39c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a3a0:	b2db      	uxtb	r3, r3
 800a3a2:	2b07      	cmp	r3, #7
 800a3a4:	d1ec      	bne.n	800a380 <HAL_SPI_Abort_IT+0x4c>
    /* Reset Timeout Counter */
    count = resetcount;
 800a3a6:	693b      	ldr	r3, [r7, #16]
 800a3a8:	617b      	str	r3, [r7, #20]
  }

  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 800a3aa:	687b      	ldr	r3, [r7, #4]
 800a3ac:	681b      	ldr	r3, [r3, #0]
 800a3ae:	685b      	ldr	r3, [r3, #4]
 800a3b0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a3b4:	2b40      	cmp	r3, #64	; 0x40
 800a3b6:	d117      	bne.n	800a3e8 <HAL_SPI_Abort_IT+0xb4>
  {
    hspi->RxISR = SPI_AbortRx_ISR;
 800a3b8:	687b      	ldr	r3, [r7, #4]
 800a3ba:	4a58      	ldr	r2, [pc, #352]	; (800a51c <HAL_SPI_Abort_IT+0x1e8>)
 800a3bc:	64da      	str	r2, [r3, #76]	; 0x4c
    /* Wait HAL_SPI_STATE_ABORT state */
    do
    {
      if (count == 0U)
 800a3be:	697b      	ldr	r3, [r7, #20]
 800a3c0:	2b00      	cmp	r3, #0
 800a3c2:	d106      	bne.n	800a3d2 <HAL_SPI_Abort_IT+0x9e>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a3c4:	687b      	ldr	r3, [r7, #4]
 800a3c6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a3c8:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a3cc:	687b      	ldr	r3, [r7, #4]
 800a3ce:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800a3d0:	e008      	b.n	800a3e4 <HAL_SPI_Abort_IT+0xb0>
      }
      count--;
 800a3d2:	697b      	ldr	r3, [r7, #20]
 800a3d4:	3b01      	subs	r3, #1
 800a3d6:	617b      	str	r3, [r7, #20]
    } while (hspi->State != HAL_SPI_STATE_ABORT);
 800a3d8:	687b      	ldr	r3, [r7, #4]
 800a3da:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a3de:	b2db      	uxtb	r3, r3
 800a3e0:	2b07      	cmp	r3, #7
 800a3e2:	d1ec      	bne.n	800a3be <HAL_SPI_Abort_IT+0x8a>
    /* Reset Timeout Counter */
    count = resetcount;
 800a3e4:	693b      	ldr	r3, [r7, #16]
 800a3e6:	617b      	str	r3, [r7, #20]
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to SPI Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (hspi->hdmatx != NULL)
 800a3e8:	687b      	ldr	r3, [r7, #4]
 800a3ea:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a3ec:	2b00      	cmp	r3, #0
 800a3ee:	d00f      	beq.n	800a410 <HAL_SPI_Abort_IT+0xdc>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 800a3f0:	687b      	ldr	r3, [r7, #4]
 800a3f2:	681b      	ldr	r3, [r3, #0]
 800a3f4:	685b      	ldr	r3, [r3, #4]
 800a3f6:	f003 0302 	and.w	r3, r3, #2
 800a3fa:	2b02      	cmp	r3, #2
 800a3fc:	d104      	bne.n	800a408 <HAL_SPI_Abort_IT+0xd4>
    {
      hspi->hdmatx->XferAbortCallback = SPI_DMATxAbortCallback;
 800a3fe:	687b      	ldr	r3, [r7, #4]
 800a400:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a402:	4a47      	ldr	r2, [pc, #284]	; (800a520 <HAL_SPI_Abort_IT+0x1ec>)
 800a404:	651a      	str	r2, [r3, #80]	; 0x50
 800a406:	e003      	b.n	800a410 <HAL_SPI_Abort_IT+0xdc>
    }
    else
    {
      hspi->hdmatx->XferAbortCallback = NULL;
 800a408:	687b      	ldr	r3, [r7, #4]
 800a40a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a40c:	2200      	movs	r2, #0
 800a40e:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (hspi->hdmarx != NULL)
 800a410:	687b      	ldr	r3, [r7, #4]
 800a412:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a414:	2b00      	cmp	r3, #0
 800a416:	d00f      	beq.n	800a438 <HAL_SPI_Abort_IT+0x104>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 800a418:	687b      	ldr	r3, [r7, #4]
 800a41a:	681b      	ldr	r3, [r3, #0]
 800a41c:	685b      	ldr	r3, [r3, #4]
 800a41e:	f003 0301 	and.w	r3, r3, #1
 800a422:	2b01      	cmp	r3, #1
 800a424:	d104      	bne.n	800a430 <HAL_SPI_Abort_IT+0xfc>
    {
      hspi->hdmarx->XferAbortCallback = SPI_DMARxAbortCallback;
 800a426:	687b      	ldr	r3, [r7, #4]
 800a428:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a42a:	4a3e      	ldr	r2, [pc, #248]	; (800a524 <HAL_SPI_Abort_IT+0x1f0>)
 800a42c:	651a      	str	r2, [r3, #80]	; 0x50
 800a42e:	e003      	b.n	800a438 <HAL_SPI_Abort_IT+0x104>
    }
    else
    {
      hspi->hdmarx->XferAbortCallback = NULL;
 800a430:	687b      	ldr	r3, [r7, #4]
 800a432:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a434:	2200      	movs	r2, #0
 800a436:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Disable the SPI DMA Tx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXDMAEN))
 800a438:	687b      	ldr	r3, [r7, #4]
 800a43a:	681b      	ldr	r3, [r3, #0]
 800a43c:	685b      	ldr	r3, [r3, #4]
 800a43e:	f003 0302 	and.w	r3, r3, #2
 800a442:	2b02      	cmp	r3, #2
 800a444:	d115      	bne.n	800a472 <HAL_SPI_Abort_IT+0x13e>
  {
    /* Abort the SPI DMA Tx Stream/Channel */
    if (hspi->hdmatx != NULL)
 800a446:	687b      	ldr	r3, [r7, #4]
 800a448:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a44a:	2b00      	cmp	r3, #0
 800a44c:	d011      	beq.n	800a472 <HAL_SPI_Abort_IT+0x13e>
    {
      /* Abort DMA Tx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmatx) != HAL_OK)
 800a44e:	687b      	ldr	r3, [r7, #4]
 800a450:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a452:	4618      	mov	r0, r3
 800a454:	f7f9 fdce 	bl	8003ff4 <HAL_DMA_Abort_IT>
 800a458:	4603      	mov	r3, r0
 800a45a:	2b00      	cmp	r3, #0
 800a45c:	d007      	beq.n	800a46e <HAL_SPI_Abort_IT+0x13a>
      {
        hspi->hdmatx->XferAbortCallback = NULL;
 800a45e:	687b      	ldr	r3, [r7, #4]
 800a460:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a462:	2200      	movs	r2, #0
 800a464:	651a      	str	r2, [r3, #80]	; 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a466:	687b      	ldr	r3, [r7, #4]
 800a468:	2240      	movs	r2, #64	; 0x40
 800a46a:	661a      	str	r2, [r3, #96]	; 0x60
 800a46c:	e001      	b.n	800a472 <HAL_SPI_Abort_IT+0x13e>
      }
      else
      {
        abortcplt = 0U;
 800a46e:	2300      	movs	r3, #0
 800a470:	61bb      	str	r3, [r7, #24]
      }
    }
  }
  /* Disable the SPI DMA Rx request if enabled */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXDMAEN))
 800a472:	687b      	ldr	r3, [r7, #4]
 800a474:	681b      	ldr	r3, [r3, #0]
 800a476:	685b      	ldr	r3, [r3, #4]
 800a478:	f003 0301 	and.w	r3, r3, #1
 800a47c:	2b01      	cmp	r3, #1
 800a47e:	d115      	bne.n	800a4ac <HAL_SPI_Abort_IT+0x178>
  {
    /* Abort the SPI DMA Rx Stream/Channel */
    if (hspi->hdmarx != NULL)
 800a480:	687b      	ldr	r3, [r7, #4]
 800a482:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a484:	2b00      	cmp	r3, #0
 800a486:	d011      	beq.n	800a4ac <HAL_SPI_Abort_IT+0x178>
    {
      /* Abort DMA Rx Handle linked to SPI Peripheral */
      if (HAL_DMA_Abort_IT(hspi->hdmarx) !=  HAL_OK)
 800a488:	687b      	ldr	r3, [r7, #4]
 800a48a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a48c:	4618      	mov	r0, r3
 800a48e:	f7f9 fdb1 	bl	8003ff4 <HAL_DMA_Abort_IT>
 800a492:	4603      	mov	r3, r0
 800a494:	2b00      	cmp	r3, #0
 800a496:	d007      	beq.n	800a4a8 <HAL_SPI_Abort_IT+0x174>
      {
        hspi->hdmarx->XferAbortCallback = NULL;
 800a498:	687b      	ldr	r3, [r7, #4]
 800a49a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a49c:	2200      	movs	r2, #0
 800a49e:	651a      	str	r2, [r3, #80]	; 0x50
        hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	2240      	movs	r2, #64	; 0x40
 800a4a4:	661a      	str	r2, [r3, #96]	; 0x60
 800a4a6:	e001      	b.n	800a4ac <HAL_SPI_Abort_IT+0x178>
      }
      else
      {
        abortcplt = 0U;
 800a4a8:	2300      	movs	r3, #0
 800a4aa:	61bb      	str	r3, [r7, #24]
      }
    }
  }

  if (abortcplt == 1U)
 800a4ac:	69bb      	ldr	r3, [r7, #24]
 800a4ae:	2b01      	cmp	r3, #1
 800a4b0:	d129      	bne.n	800a506 <HAL_SPI_Abort_IT+0x1d2>
  {
    /* Reset Tx and Rx transfer counters */
    hspi->RxXferCount = 0U;
 800a4b2:	687b      	ldr	r3, [r7, #4]
 800a4b4:	2200      	movs	r2, #0
 800a4b6:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->TxXferCount = 0U;
 800a4ba:	687b      	ldr	r3, [r7, #4]
 800a4bc:	2200      	movs	r2, #0
 800a4be:	87da      	strh	r2, [r3, #62]	; 0x3e

    /* Check error during Abort procedure */
    if (hspi->ErrorCode == HAL_SPI_ERROR_ABORT)
 800a4c0:	687b      	ldr	r3, [r7, #4]
 800a4c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a4c4:	2b40      	cmp	r3, #64	; 0x40
 800a4c6:	d102      	bne.n	800a4ce <HAL_SPI_Abort_IT+0x19a>
    {
      /* return HAL_Error in case of error during Abort procedure */
      errorcode = HAL_ERROR;
 800a4c8:	2301      	movs	r3, #1
 800a4ca:	77fb      	strb	r3, [r7, #31]
 800a4cc:	e002      	b.n	800a4d4 <HAL_SPI_Abort_IT+0x1a0>
    }
    else
    {
      /* Reset errorCode */
      hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800a4ce:	687b      	ldr	r3, [r7, #4]
 800a4d0:	2200      	movs	r2, #0
 800a4d2:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear the Error flags in the SR register */
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a4d4:	2300      	movs	r3, #0
 800a4d6:	60fb      	str	r3, [r7, #12]
 800a4d8:	687b      	ldr	r3, [r7, #4]
 800a4da:	681b      	ldr	r3, [r3, #0]
 800a4dc:	68db      	ldr	r3, [r3, #12]
 800a4de:	60fb      	str	r3, [r7, #12]
 800a4e0:	687b      	ldr	r3, [r7, #4]
 800a4e2:	681b      	ldr	r3, [r3, #0]
 800a4e4:	689b      	ldr	r3, [r3, #8]
 800a4e6:	60fb      	str	r3, [r7, #12]
 800a4e8:	68fb      	ldr	r3, [r7, #12]
    __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a4ea:	2300      	movs	r3, #0
 800a4ec:	60bb      	str	r3, [r7, #8]
 800a4ee:	687b      	ldr	r3, [r7, #4]
 800a4f0:	681b      	ldr	r3, [r3, #0]
 800a4f2:	689b      	ldr	r3, [r3, #8]
 800a4f4:	60bb      	str	r3, [r7, #8]
 800a4f6:	68bb      	ldr	r3, [r7, #8]

    /* Restore hspi->State to Ready */
    hspi->State = HAL_SPI_STATE_READY;
 800a4f8:	687b      	ldr	r3, [r7, #4]
 800a4fa:	2201      	movs	r2, #1
 800a4fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    /* As no DMA to be aborted, call directly user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->AbortCpltCallback(hspi);
#else
    HAL_SPI_AbortCpltCallback(hspi);
 800a500:	6878      	ldr	r0, [r7, #4]
 800a502:	f012 f99f 	bl	801c844 <HAL_SPI_AbortCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  return errorcode;
 800a506:	7ffb      	ldrb	r3, [r7, #31]
}
 800a508:	4618      	mov	r0, r3
 800a50a:	3720      	adds	r7, #32
 800a50c:	46bd      	mov	sp, r7
 800a50e:	bd80      	pop	{r7, pc}
 800a510:	20000000 	.word	0x20000000
 800a514:	057619f1 	.word	0x057619f1
 800a518:	0800b52d 	.word	0x0800b52d
 800a51c:	0800b46d 	.word	0x0800b46d
 800a520:	0800aa03 	.word	0x0800aa03
 800a524:	0800aae1 	.word	0x0800aae1

0800a528 <HAL_SPI_IRQHandler>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for the specified SPI module.
  * @retval None
  */
void HAL_SPI_IRQHandler(SPI_HandleTypeDef *hspi)
{
 800a528:	b580      	push	{r7, lr}
 800a52a:	b088      	sub	sp, #32
 800a52c:	af00      	add	r7, sp, #0
 800a52e:	6078      	str	r0, [r7, #4]
  uint32_t itsource = hspi->Instance->CR2;
 800a530:	687b      	ldr	r3, [r7, #4]
 800a532:	681b      	ldr	r3, [r3, #0]
 800a534:	685b      	ldr	r3, [r3, #4]
 800a536:	61fb      	str	r3, [r7, #28]
  uint32_t itflag   = hspi->Instance->SR;
 800a538:	687b      	ldr	r3, [r7, #4]
 800a53a:	681b      	ldr	r3, [r3, #0]
 800a53c:	689b      	ldr	r3, [r3, #8]
 800a53e:	61bb      	str	r3, [r7, #24]

  /* SPI in mode Receiver ----------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a540:	69bb      	ldr	r3, [r7, #24]
 800a542:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a546:	2b00      	cmp	r3, #0
 800a548:	d10e      	bne.n	800a568 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a54a:	69bb      	ldr	r3, [r7, #24]
 800a54c:	f003 0301 	and.w	r3, r3, #1
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) == RESET) &&
 800a550:	2b00      	cmp	r3, #0
 800a552:	d009      	beq.n	800a568 <HAL_SPI_IRQHandler+0x40>
      (SPI_CHECK_FLAG(itflag, SPI_FLAG_RXNE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_RXNE) != RESET))
 800a554:	69fb      	ldr	r3, [r7, #28]
 800a556:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a55a:	2b00      	cmp	r3, #0
 800a55c:	d004      	beq.n	800a568 <HAL_SPI_IRQHandler+0x40>
  {
    hspi->RxISR(hspi);
 800a55e:	687b      	ldr	r3, [r7, #4]
 800a560:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800a562:	6878      	ldr	r0, [r7, #4]
 800a564:	4798      	blx	r3
    return;
 800a566:	e0ce      	b.n	800a706 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in mode Transmitter -------------------------------------------------*/
  if ((SPI_CHECK_FLAG(itflag, SPI_FLAG_TXE) != RESET) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_TXE) != RESET))
 800a568:	69bb      	ldr	r3, [r7, #24]
 800a56a:	f003 0302 	and.w	r3, r3, #2
 800a56e:	2b00      	cmp	r3, #0
 800a570:	d009      	beq.n	800a586 <HAL_SPI_IRQHandler+0x5e>
 800a572:	69fb      	ldr	r3, [r7, #28]
 800a574:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a578:	2b00      	cmp	r3, #0
 800a57a:	d004      	beq.n	800a586 <HAL_SPI_IRQHandler+0x5e>
  {
    hspi->TxISR(hspi);
 800a57c:	687b      	ldr	r3, [r7, #4]
 800a57e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800a580:	6878      	ldr	r0, [r7, #4]
 800a582:	4798      	blx	r3
    return;
 800a584:	e0bf      	b.n	800a706 <HAL_SPI_IRQHandler+0x1de>
  }

  /* SPI in Error Treatment --------------------------------------------------*/
  if (((SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET) || (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a586:	69bb      	ldr	r3, [r7, #24]
 800a588:	f003 0320 	and.w	r3, r3, #32
 800a58c:	2b00      	cmp	r3, #0
 800a58e:	d10a      	bne.n	800a5a6 <HAL_SPI_IRQHandler+0x7e>
 800a590:	69bb      	ldr	r3, [r7, #24]
 800a592:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a596:	2b00      	cmp	r3, #0
 800a598:	d105      	bne.n	800a5a6 <HAL_SPI_IRQHandler+0x7e>
       || (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)) && (SPI_CHECK_IT_SOURCE(itsource, SPI_IT_ERR) != RESET))
 800a59a:	69bb      	ldr	r3, [r7, #24]
 800a59c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a5a0:	2b00      	cmp	r3, #0
 800a5a2:	f000 80b0 	beq.w	800a706 <HAL_SPI_IRQHandler+0x1de>
 800a5a6:	69fb      	ldr	r3, [r7, #28]
 800a5a8:	f003 0320 	and.w	r3, r3, #32
 800a5ac:	2b00      	cmp	r3, #0
 800a5ae:	f000 80aa 	beq.w	800a706 <HAL_SPI_IRQHandler+0x1de>
  {
    /* SPI Overrun error interrupt occurred ----------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_OVR) != RESET)
 800a5b2:	69bb      	ldr	r3, [r7, #24]
 800a5b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a5b8:	2b00      	cmp	r3, #0
 800a5ba:	d023      	beq.n	800a604 <HAL_SPI_IRQHandler+0xdc>
    {
      if (hspi->State != HAL_SPI_STATE_BUSY_TX)
 800a5bc:	687b      	ldr	r3, [r7, #4]
 800a5be:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800a5c2:	b2db      	uxtb	r3, r3
 800a5c4:	2b03      	cmp	r3, #3
 800a5c6:	d011      	beq.n	800a5ec <HAL_SPI_IRQHandler+0xc4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_OVR);
 800a5c8:	687b      	ldr	r3, [r7, #4]
 800a5ca:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a5cc:	f043 0204 	orr.w	r2, r3, #4
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	661a      	str	r2, [r3, #96]	; 0x60
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a5d4:	2300      	movs	r3, #0
 800a5d6:	617b      	str	r3, [r7, #20]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	68db      	ldr	r3, [r3, #12]
 800a5de:	617b      	str	r3, [r7, #20]
 800a5e0:	687b      	ldr	r3, [r7, #4]
 800a5e2:	681b      	ldr	r3, [r3, #0]
 800a5e4:	689b      	ldr	r3, [r3, #8]
 800a5e6:	617b      	str	r3, [r7, #20]
 800a5e8:	697b      	ldr	r3, [r7, #20]
 800a5ea:	e00b      	b.n	800a604 <HAL_SPI_IRQHandler+0xdc>
      }
      else
      {
        __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a5ec:	2300      	movs	r3, #0
 800a5ee:	613b      	str	r3, [r7, #16]
 800a5f0:	687b      	ldr	r3, [r7, #4]
 800a5f2:	681b      	ldr	r3, [r3, #0]
 800a5f4:	68db      	ldr	r3, [r3, #12]
 800a5f6:	613b      	str	r3, [r7, #16]
 800a5f8:	687b      	ldr	r3, [r7, #4]
 800a5fa:	681b      	ldr	r3, [r3, #0]
 800a5fc:	689b      	ldr	r3, [r3, #8]
 800a5fe:	613b      	str	r3, [r7, #16]
 800a600:	693b      	ldr	r3, [r7, #16]
        return;
 800a602:	e080      	b.n	800a706 <HAL_SPI_IRQHandler+0x1de>
      }
    }

    /* SPI Mode Fault error interrupt occurred -------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_MODF) != RESET)
 800a604:	69bb      	ldr	r3, [r7, #24]
 800a606:	f003 0320 	and.w	r3, r3, #32
 800a60a:	2b00      	cmp	r3, #0
 800a60c:	d014      	beq.n	800a638 <HAL_SPI_IRQHandler+0x110>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_MODF);
 800a60e:	687b      	ldr	r3, [r7, #4]
 800a610:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a612:	f043 0201 	orr.w	r2, r3, #1
 800a616:	687b      	ldr	r3, [r7, #4]
 800a618:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_MODFFLAG(hspi);
 800a61a:	2300      	movs	r3, #0
 800a61c:	60fb      	str	r3, [r7, #12]
 800a61e:	687b      	ldr	r3, [r7, #4]
 800a620:	681b      	ldr	r3, [r3, #0]
 800a622:	689b      	ldr	r3, [r3, #8]
 800a624:	60fb      	str	r3, [r7, #12]
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	681b      	ldr	r3, [r3, #0]
 800a62a:	681a      	ldr	r2, [r3, #0]
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a634:	601a      	str	r2, [r3, #0]
 800a636:	68fb      	ldr	r3, [r7, #12]
    }

    /* SPI Frame error interrupt occurred ------------------------------------*/
    if (SPI_CHECK_FLAG(itflag, SPI_FLAG_FRE) != RESET)
 800a638:	69bb      	ldr	r3, [r7, #24]
 800a63a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a63e:	2b00      	cmp	r3, #0
 800a640:	d00c      	beq.n	800a65c <HAL_SPI_IRQHandler+0x134>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FRE);
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a646:	f043 0208 	orr.w	r2, r3, #8
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	661a      	str	r2, [r3, #96]	; 0x60
      __HAL_SPI_CLEAR_FREFLAG(hspi);
 800a64e:	2300      	movs	r3, #0
 800a650:	60bb      	str	r3, [r7, #8]
 800a652:	687b      	ldr	r3, [r7, #4]
 800a654:	681b      	ldr	r3, [r3, #0]
 800a656:	689b      	ldr	r3, [r3, #8]
 800a658:	60bb      	str	r3, [r7, #8]
 800a65a:	68bb      	ldr	r3, [r7, #8]
    }

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a65c:	687b      	ldr	r3, [r7, #4]
 800a65e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a660:	2b00      	cmp	r3, #0
 800a662:	d04f      	beq.n	800a704 <HAL_SPI_IRQHandler+0x1dc>
    {
      /* Disable all interrupts */
      __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE | SPI_IT_TXE | SPI_IT_ERR);
 800a664:	687b      	ldr	r3, [r7, #4]
 800a666:	681b      	ldr	r3, [r3, #0]
 800a668:	685a      	ldr	r2, [r3, #4]
 800a66a:	687b      	ldr	r3, [r7, #4]
 800a66c:	681b      	ldr	r3, [r3, #0]
 800a66e:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800a672:	605a      	str	r2, [r3, #4]

      hspi->State = HAL_SPI_STATE_READY;
 800a674:	687b      	ldr	r3, [r7, #4]
 800a676:	2201      	movs	r2, #1
 800a678:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      /* Disable the SPI DMA requests if enabled */
      if ((HAL_IS_BIT_SET(itsource, SPI_CR2_TXDMAEN)) || (HAL_IS_BIT_SET(itsource, SPI_CR2_RXDMAEN)))
 800a67c:	69fb      	ldr	r3, [r7, #28]
 800a67e:	f003 0302 	and.w	r3, r3, #2
 800a682:	2b00      	cmp	r3, #0
 800a684:	d104      	bne.n	800a690 <HAL_SPI_IRQHandler+0x168>
 800a686:	69fb      	ldr	r3, [r7, #28]
 800a688:	f003 0301 	and.w	r3, r3, #1
 800a68c:	2b00      	cmp	r3, #0
 800a68e:	d034      	beq.n	800a6fa <HAL_SPI_IRQHandler+0x1d2>
      {
        CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN));
 800a690:	687b      	ldr	r3, [r7, #4]
 800a692:	681b      	ldr	r3, [r3, #0]
 800a694:	685a      	ldr	r2, [r3, #4]
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	f022 0203 	bic.w	r2, r2, #3
 800a69e:	605a      	str	r2, [r3, #4]

        /* Abort the SPI DMA Rx channel */
        if (hspi->hdmarx != NULL)
 800a6a0:	687b      	ldr	r3, [r7, #4]
 800a6a2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6a4:	2b00      	cmp	r3, #0
 800a6a6:	d011      	beq.n	800a6cc <HAL_SPI_IRQHandler+0x1a4>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmarx->XferAbortCallback = SPI_DMAAbortOnError;
 800a6a8:	687b      	ldr	r3, [r7, #4]
 800a6aa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6ac:	4a17      	ldr	r2, [pc, #92]	; (800a70c <HAL_SPI_IRQHandler+0x1e4>)
 800a6ae:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmarx))
 800a6b0:	687b      	ldr	r3, [r7, #4]
 800a6b2:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800a6b4:	4618      	mov	r0, r3
 800a6b6:	f7f9 fc9d 	bl	8003ff4 <HAL_DMA_Abort_IT>
 800a6ba:	4603      	mov	r3, r0
 800a6bc:	2b00      	cmp	r3, #0
 800a6be:	d005      	beq.n	800a6cc <HAL_SPI_IRQHandler+0x1a4>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6c4:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a6c8:	687b      	ldr	r3, [r7, #4]
 800a6ca:	661a      	str	r2, [r3, #96]	; 0x60
          }
        }
        /* Abort the SPI DMA Tx channel */
        if (hspi->hdmatx != NULL)
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d016      	beq.n	800a702 <HAL_SPI_IRQHandler+0x1da>
        {
          /* Set the SPI DMA Abort callback :
          will lead to call HAL_SPI_ErrorCallback() at end of DMA abort procedure */
          hspi->hdmatx->XferAbortCallback = SPI_DMAAbortOnError;
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6d8:	4a0c      	ldr	r2, [pc, #48]	; (800a70c <HAL_SPI_IRQHandler+0x1e4>)
 800a6da:	651a      	str	r2, [r3, #80]	; 0x50
          if (HAL_OK != HAL_DMA_Abort_IT(hspi->hdmatx))
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800a6e0:	4618      	mov	r0, r3
 800a6e2:	f7f9 fc87 	bl	8003ff4 <HAL_DMA_Abort_IT>
 800a6e6:	4603      	mov	r3, r0
 800a6e8:	2b00      	cmp	r3, #0
 800a6ea:	d00a      	beq.n	800a702 <HAL_SPI_IRQHandler+0x1da>
          {
            SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a6f0:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	661a      	str	r2, [r3, #96]	; 0x60
        if (hspi->hdmatx != NULL)
 800a6f8:	e003      	b.n	800a702 <HAL_SPI_IRQHandler+0x1da>
      {
        /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->ErrorCallback(hspi);
#else
        HAL_SPI_ErrorCallback(hspi);
 800a6fa:	6878      	ldr	r0, [r7, #4]
 800a6fc:	f012 f8be 	bl	801c87c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      }
    }
    return;
 800a700:	e000      	b.n	800a704 <HAL_SPI_IRQHandler+0x1dc>
        if (hspi->hdmatx != NULL)
 800a702:	bf00      	nop
    return;
 800a704:	bf00      	nop
  }
}
 800a706:	3720      	adds	r7, #32
 800a708:	46bd      	mov	sp, r7
 800a70a:	bd80      	pop	{r7, pc}
 800a70c:	0800a9d9 	.word	0x0800a9d9

0800a710 <HAL_SPI_TxCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a710:	b480      	push	{r7}
 800a712:	b083      	sub	sp, #12
 800a714:	af00      	add	r7, sp, #0
 800a716:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxCpltCallback should be implemented in the user file
   */
}
 800a718:	bf00      	nop
 800a71a:	370c      	adds	r7, #12
 800a71c:	46bd      	mov	sp, r7
 800a71e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a722:	4770      	bx	lr

0800a724 <HAL_SPI_TxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a724:	b480      	push	{r7}
 800a726:	b083      	sub	sp, #12
 800a728:	af00      	add	r7, sp, #0
 800a72a:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxHalfCpltCallback should be implemented in the user file
   */
}
 800a72c:	bf00      	nop
 800a72e:	370c      	adds	r7, #12
 800a730:	46bd      	mov	sp, r7
 800a732:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a736:	4770      	bx	lr

0800a738 <HAL_SPI_RxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_RxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a738:	b480      	push	{r7}
 800a73a:	b083      	sub	sp, #12
 800a73c:	af00      	add	r7, sp, #0
 800a73e:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_RxHalfCpltCallback() should be implemented in the user file
   */
}
 800a740:	bf00      	nop
 800a742:	370c      	adds	r7, #12
 800a744:	46bd      	mov	sp, r7
 800a746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a74a:	4770      	bx	lr

0800a74c <HAL_SPI_TxRxHalfCpltCallback>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
__weak void HAL_SPI_TxRxHalfCpltCallback(SPI_HandleTypeDef *hspi)
{
 800a74c:	b480      	push	{r7}
 800a74e:	b083      	sub	sp, #12
 800a750:	af00      	add	r7, sp, #0
 800a752:	6078      	str	r0, [r7, #4]
  UNUSED(hspi);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 800a754:	bf00      	nop
 800a756:	370c      	adds	r7, #12
 800a758:	46bd      	mov	sp, r7
 800a75a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a75e:	4770      	bx	lr

0800a760 <SPI_DMATransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a760:	b580      	push	{r7, lr}
 800a762:	b086      	sub	sp, #24
 800a764:	af00      	add	r7, sp, #0
 800a766:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a76c:	617b      	str	r3, [r7, #20]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a76e:	f7f8 fd15 	bl	800319c <HAL_GetTick>
 800a772:	6138      	str	r0, [r7, #16]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800a774:	687b      	ldr	r3, [r7, #4]
 800a776:	681b      	ldr	r3, [r3, #0]
 800a778:	681b      	ldr	r3, [r3, #0]
 800a77a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a77e:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a782:	d03b      	beq.n	800a7fc <SPI_DMATransmitCplt+0x9c>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a784:	697b      	ldr	r3, [r7, #20]
 800a786:	681b      	ldr	r3, [r3, #0]
 800a788:	685a      	ldr	r2, [r3, #4]
 800a78a:	697b      	ldr	r3, [r7, #20]
 800a78c:	681b      	ldr	r3, [r3, #0]
 800a78e:	f022 0220 	bic.w	r2, r2, #32
 800a792:	605a      	str	r2, [r3, #4]

    /* Disable Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800a794:	697b      	ldr	r3, [r7, #20]
 800a796:	681b      	ldr	r3, [r3, #0]
 800a798:	685a      	ldr	r2, [r3, #4]
 800a79a:	697b      	ldr	r3, [r7, #20]
 800a79c:	681b      	ldr	r3, [r3, #0]
 800a79e:	f022 0202 	bic.w	r2, r2, #2
 800a7a2:	605a      	str	r2, [r3, #4]

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a7a4:	693a      	ldr	r2, [r7, #16]
 800a7a6:	2164      	movs	r1, #100	; 0x64
 800a7a8:	6978      	ldr	r0, [r7, #20]
 800a7aa:	f000 fd43 	bl	800b234 <SPI_EndRxTxTransaction>
 800a7ae:	4603      	mov	r3, r0
 800a7b0:	2b00      	cmp	r3, #0
 800a7b2:	d005      	beq.n	800a7c0 <SPI_DMATransmitCplt+0x60>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a7b4:	697b      	ldr	r3, [r7, #20]
 800a7b6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7b8:	f043 0220 	orr.w	r2, r3, #32
 800a7bc:	697b      	ldr	r3, [r7, #20]
 800a7be:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Clear overrun flag in 2 Lines communication mode because received data is not read */
    if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800a7c0:	697b      	ldr	r3, [r7, #20]
 800a7c2:	689b      	ldr	r3, [r3, #8]
 800a7c4:	2b00      	cmp	r3, #0
 800a7c6:	d10a      	bne.n	800a7de <SPI_DMATransmitCplt+0x7e>
    {
      __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800a7c8:	2300      	movs	r3, #0
 800a7ca:	60fb      	str	r3, [r7, #12]
 800a7cc:	697b      	ldr	r3, [r7, #20]
 800a7ce:	681b      	ldr	r3, [r3, #0]
 800a7d0:	68db      	ldr	r3, [r3, #12]
 800a7d2:	60fb      	str	r3, [r7, #12]
 800a7d4:	697b      	ldr	r3, [r7, #20]
 800a7d6:	681b      	ldr	r3, [r3, #0]
 800a7d8:	689b      	ldr	r3, [r3, #8]
 800a7da:	60fb      	str	r3, [r7, #12]
 800a7dc:	68fb      	ldr	r3, [r7, #12]
    }

    hspi->TxXferCount = 0U;
 800a7de:	697b      	ldr	r3, [r7, #20]
 800a7e0:	2200      	movs	r2, #0
 800a7e2:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->State = HAL_SPI_STATE_READY;
 800a7e4:	697b      	ldr	r3, [r7, #20]
 800a7e6:	2201      	movs	r2, #1
 800a7e8:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a7ec:	697b      	ldr	r3, [r7, #20]
 800a7ee:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a7f0:	2b00      	cmp	r3, #0
 800a7f2:	d003      	beq.n	800a7fc <SPI_DMATransmitCplt+0x9c>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a7f4:	6978      	ldr	r0, [r7, #20]
 800a7f6:	f012 f841 	bl	801c87c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a7fa:	e002      	b.n	800a802 <SPI_DMATransmitCplt+0xa2>
  }
  /* Call user Tx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxCpltCallback(hspi);
#else
  HAL_SPI_TxCpltCallback(hspi);
 800a7fc:	6978      	ldr	r0, [r7, #20]
 800a7fe:	f7ff ff87 	bl	800a710 <HAL_SPI_TxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a802:	3718      	adds	r7, #24
 800a804:	46bd      	mov	sp, r7
 800a806:	bd80      	pop	{r7, pc}

0800a808 <SPI_DMAReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a808:	b580      	push	{r7, lr}
 800a80a:	b084      	sub	sp, #16
 800a80c:	af00      	add	r7, sp, #0
 800a80e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a810:	687b      	ldr	r3, [r7, #4]
 800a812:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a814:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a816:	f7f8 fcc1 	bl	800319c <HAL_GetTick>
 800a81a:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800a81c:	687b      	ldr	r3, [r7, #4]
 800a81e:	681b      	ldr	r3, [r3, #0]
 800a820:	681b      	ldr	r3, [r3, #0]
 800a822:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a826:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a82a:	d03c      	beq.n	800a8a6 <SPI_DMAReceiveCplt+0x9e>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a82c:	68fb      	ldr	r3, [r7, #12]
 800a82e:	681b      	ldr	r3, [r3, #0]
 800a830:	685a      	ldr	r2, [r3, #4]
 800a832:	68fb      	ldr	r3, [r7, #12]
 800a834:	681b      	ldr	r3, [r3, #0]
 800a836:	f022 0220 	bic.w	r2, r2, #32
 800a83a:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check if we are in Master RX 2 line mode */
    if ((hspi->Init.Direction == SPI_DIRECTION_2LINES) && (hspi->Init.Mode == SPI_MODE_MASTER))
 800a83c:	68fb      	ldr	r3, [r7, #12]
 800a83e:	689b      	ldr	r3, [r3, #8]
 800a840:	2b00      	cmp	r3, #0
 800a842:	d10d      	bne.n	800a860 <SPI_DMAReceiveCplt+0x58>
 800a844:	68fb      	ldr	r3, [r7, #12]
 800a846:	685b      	ldr	r3, [r3, #4]
 800a848:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800a84c:	d108      	bne.n	800a860 <SPI_DMAReceiveCplt+0x58>
    {
      /* Disable Rx/Tx DMA Request (done by default to handle the case master rx direction 2 lines) */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a84e:	68fb      	ldr	r3, [r7, #12]
 800a850:	681b      	ldr	r3, [r3, #0]
 800a852:	685a      	ldr	r2, [r3, #4]
 800a854:	68fb      	ldr	r3, [r7, #12]
 800a856:	681b      	ldr	r3, [r3, #0]
 800a858:	f022 0203 	bic.w	r2, r2, #3
 800a85c:	605a      	str	r2, [r3, #4]
 800a85e:	e007      	b.n	800a870 <SPI_DMAReceiveCplt+0x68>
    }
    else
    {
      /* Normal case */
      CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800a860:	68fb      	ldr	r3, [r7, #12]
 800a862:	681b      	ldr	r3, [r3, #0]
 800a864:	685a      	ldr	r2, [r3, #4]
 800a866:	68fb      	ldr	r3, [r7, #12]
 800a868:	681b      	ldr	r3, [r3, #0]
 800a86a:	f022 0201 	bic.w	r2, r2, #1
 800a86e:	605a      	str	r2, [r3, #4]
    }

    /* Check the end of the transaction */
    if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a870:	68ba      	ldr	r2, [r7, #8]
 800a872:	2164      	movs	r1, #100	; 0x64
 800a874:	68f8      	ldr	r0, [r7, #12]
 800a876:	f000 fc61 	bl	800b13c <SPI_EndRxTransaction>
 800a87a:	4603      	mov	r3, r0
 800a87c:	2b00      	cmp	r3, #0
 800a87e:	d002      	beq.n	800a886 <SPI_DMAReceiveCplt+0x7e>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 800a880:	68fb      	ldr	r3, [r7, #12]
 800a882:	2220      	movs	r2, #32
 800a884:	661a      	str	r2, [r3, #96]	; 0x60
    }

    hspi->RxXferCount = 0U;
 800a886:	68fb      	ldr	r3, [r7, #12]
 800a888:	2200      	movs	r2, #0
 800a88a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800a88e:	68fb      	ldr	r3, [r7, #12]
 800a890:	2201      	movs	r2, #1
 800a892:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a896:	68fb      	ldr	r3, [r7, #12]
 800a898:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a89a:	2b00      	cmp	r3, #0
 800a89c:	d003      	beq.n	800a8a6 <SPI_DMAReceiveCplt+0x9e>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a89e:	68f8      	ldr	r0, [r7, #12]
 800a8a0:	f011 ffec 	bl	801c87c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a8a4:	e002      	b.n	800a8ac <SPI_DMAReceiveCplt+0xa4>
  }
  /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxCpltCallback(hspi);
#else
  HAL_SPI_RxCpltCallback(hspi);
 800a8a6:	68f8      	ldr	r0, [r7, #12]
 800a8a8:	f011 ff88 	bl	801c7bc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a8ac:	3710      	adds	r7, #16
 800a8ae:	46bd      	mov	sp, r7
 800a8b0:	bd80      	pop	{r7, pc}

0800a8b2 <SPI_DMATransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMATransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a8b2:	b580      	push	{r7, lr}
 800a8b4:	b084      	sub	sp, #16
 800a8b6:	af00      	add	r7, sp, #0
 800a8b8:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a8ba:	687b      	ldr	r3, [r7, #4]
 800a8bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a8be:	60fb      	str	r3, [r7, #12]
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
#endif /* USE_SPI_CRC */

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800a8c0:	f7f8 fc6c 	bl	800319c <HAL_GetTick>
 800a8c4:	60b8      	str	r0, [r7, #8]

  /* DMA Normal Mode */
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) != DMA_SxCR_CIRC)
 800a8c6:	687b      	ldr	r3, [r7, #4]
 800a8c8:	681b      	ldr	r3, [r3, #0]
 800a8ca:	681b      	ldr	r3, [r3, #0]
 800a8cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800a8d0:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a8d4:	d030      	beq.n	800a938 <SPI_DMATransmitReceiveCplt+0x86>
  {
    /* Disable ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800a8d6:	68fb      	ldr	r3, [r7, #12]
 800a8d8:	681b      	ldr	r3, [r3, #0]
 800a8da:	685a      	ldr	r2, [r3, #4]
 800a8dc:	68fb      	ldr	r3, [r7, #12]
 800a8de:	681b      	ldr	r3, [r3, #0]
 800a8e0:	f022 0220 	bic.w	r2, r2, #32
 800a8e4:	605a      	str	r2, [r3, #4]
      }
    }
#endif /* USE_SPI_CRC */

    /* Check the end of the transaction */
    if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800a8e6:	68ba      	ldr	r2, [r7, #8]
 800a8e8:	2164      	movs	r1, #100	; 0x64
 800a8ea:	68f8      	ldr	r0, [r7, #12]
 800a8ec:	f000 fca2 	bl	800b234 <SPI_EndRxTxTransaction>
 800a8f0:	4603      	mov	r3, r0
 800a8f2:	2b00      	cmp	r3, #0
 800a8f4:	d005      	beq.n	800a902 <SPI_DMATransmitReceiveCplt+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800a8f6:	68fb      	ldr	r3, [r7, #12]
 800a8f8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a8fa:	f043 0220 	orr.w	r2, r3, #32
 800a8fe:	68fb      	ldr	r3, [r7, #12]
 800a900:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Disable Rx/Tx DMA Request */
    CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a902:	68fb      	ldr	r3, [r7, #12]
 800a904:	681b      	ldr	r3, [r3, #0]
 800a906:	685a      	ldr	r2, [r3, #4]
 800a908:	68fb      	ldr	r3, [r7, #12]
 800a90a:	681b      	ldr	r3, [r3, #0]
 800a90c:	f022 0203 	bic.w	r2, r2, #3
 800a910:	605a      	str	r2, [r3, #4]

    hspi->TxXferCount = 0U;
 800a912:	68fb      	ldr	r3, [r7, #12]
 800a914:	2200      	movs	r2, #0
 800a916:	87da      	strh	r2, [r3, #62]	; 0x3e
    hspi->RxXferCount = 0U;
 800a918:	68fb      	ldr	r3, [r7, #12]
 800a91a:	2200      	movs	r2, #0
 800a91c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    hspi->State = HAL_SPI_STATE_READY;
 800a920:	68fb      	ldr	r3, [r7, #12]
 800a922:	2201      	movs	r2, #1
 800a924:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
#endif /* USE_SPI_CRC */

    if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800a928:	68fb      	ldr	r3, [r7, #12]
 800a92a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a92c:	2b00      	cmp	r3, #0
 800a92e:	d003      	beq.n	800a938 <SPI_DMATransmitReceiveCplt+0x86>
    {
      /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->ErrorCallback(hspi);
#else
      HAL_SPI_ErrorCallback(hspi);
 800a930:	68f8      	ldr	r0, [r7, #12]
 800a932:	f011 ffa3 	bl	801c87c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
      return;
 800a936:	e002      	b.n	800a93e <SPI_DMATransmitReceiveCplt+0x8c>
  }
  /* Call user TxRx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxCpltCallback(hspi);
#else
  HAL_SPI_TxRxCpltCallback(hspi);
 800a938:	68f8      	ldr	r0, [r7, #12]
 800a93a:	f011 ff5b 	bl	801c7f4 <HAL_SPI_TxRxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a93e:	3710      	adds	r7, #16
 800a940:	46bd      	mov	sp, r7
 800a942:	bd80      	pop	{r7, pc}

0800a944 <SPI_DMAHalfTransmitCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800a944:	b580      	push	{r7, lr}
 800a946:	b084      	sub	sp, #16
 800a948:	af00      	add	r7, sp, #0
 800a94a:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a94c:	687b      	ldr	r3, [r7, #4]
 800a94e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a950:	60fb      	str	r3, [r7, #12]

  /* Call user Tx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxHalfCpltCallback(hspi);
 800a952:	68f8      	ldr	r0, [r7, #12]
 800a954:	f7ff fee6 	bl	800a724 <HAL_SPI_TxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a958:	bf00      	nop
 800a95a:	3710      	adds	r7, #16
 800a95c:	46bd      	mov	sp, r7
 800a95e:	bd80      	pop	{r7, pc}

0800a960 <SPI_DMAHalfReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a960:	b580      	push	{r7, lr}
 800a962:	b084      	sub	sp, #16
 800a964:	af00      	add	r7, sp, #0
 800a966:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a968:	687b      	ldr	r3, [r7, #4]
 800a96a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a96c:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->RxHalfCpltCallback(hspi);
#else
  HAL_SPI_RxHalfCpltCallback(hspi);
 800a96e:	68f8      	ldr	r0, [r7, #12]
 800a970:	f7ff fee2 	bl	800a738 <HAL_SPI_RxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a974:	bf00      	nop
 800a976:	3710      	adds	r7, #16
 800a978:	46bd      	mov	sp, r7
 800a97a:	bd80      	pop	{r7, pc}

0800a97c <SPI_DMAHalfTransmitReceiveCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAHalfTransmitReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800a97c:	b580      	push	{r7, lr}
 800a97e:	b084      	sub	sp, #16
 800a980:	af00      	add	r7, sp, #0
 800a982:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a984:	687b      	ldr	r3, [r7, #4]
 800a986:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a988:	60fb      	str	r3, [r7, #12]

  /* Call user TxRx half complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->TxRxHalfCpltCallback(hspi);
#else
  HAL_SPI_TxRxHalfCpltCallback(hspi);
 800a98a:	68f8      	ldr	r0, [r7, #12]
 800a98c:	f7ff fede 	bl	800a74c <HAL_SPI_TxRxHalfCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a990:	bf00      	nop
 800a992:	3710      	adds	r7, #16
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}

0800a998 <SPI_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void SPI_DMAError(DMA_HandleTypeDef *hdma)
{
 800a998:	b580      	push	{r7, lr}
 800a99a:	b084      	sub	sp, #16
 800a99c:	af00      	add	r7, sp, #0
 800a99e:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a9a0:	687b      	ldr	r3, [r7, #4]
 800a9a2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9a4:	60fb      	str	r3, [r7, #12]

  /* Stop the disable DMA transfer on SPI side */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN | SPI_CR2_RXDMAEN);
 800a9a6:	68fb      	ldr	r3, [r7, #12]
 800a9a8:	681b      	ldr	r3, [r3, #0]
 800a9aa:	685a      	ldr	r2, [r3, #4]
 800a9ac:	68fb      	ldr	r3, [r7, #12]
 800a9ae:	681b      	ldr	r3, [r3, #0]
 800a9b0:	f022 0203 	bic.w	r2, r2, #3
 800a9b4:	605a      	str	r2, [r3, #4]

  SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_DMA);
 800a9b6:	68fb      	ldr	r3, [r7, #12]
 800a9b8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800a9ba:	f043 0210 	orr.w	r2, r3, #16
 800a9be:	68fb      	ldr	r3, [r7, #12]
 800a9c0:	661a      	str	r2, [r3, #96]	; 0x60
  hspi->State = HAL_SPI_STATE_READY;
 800a9c2:	68fb      	ldr	r3, [r7, #12]
 800a9c4:	2201      	movs	r2, #1
 800a9c6:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a9ca:	68f8      	ldr	r0, [r7, #12]
 800a9cc:	f011 ff56 	bl	801c87c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a9d0:	bf00      	nop
 800a9d2:	3710      	adds	r7, #16
 800a9d4:	46bd      	mov	sp, r7
 800a9d6:	bd80      	pop	{r7, pc}

0800a9d8 <SPI_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a9d8:	b580      	push	{r7, lr}
 800a9da:	b084      	sub	sp, #16
 800a9dc:	af00      	add	r7, sp, #0
 800a9de:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800a9e0:	687b      	ldr	r3, [r7, #4]
 800a9e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a9e4:	60fb      	str	r3, [r7, #12]
  hspi->RxXferCount = 0U;
 800a9e6:	68fb      	ldr	r3, [r7, #12]
 800a9e8:	2200      	movs	r2, #0
 800a9ea:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800a9ee:	68fb      	ldr	r3, [r7, #12]
 800a9f0:	2200      	movs	r2, #0
 800a9f2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->ErrorCallback(hspi);
#else
  HAL_SPI_ErrorCallback(hspi);
 800a9f4:	68f8      	ldr	r0, [r7, #12]
 800a9f6:	f011 ff41 	bl	801c87c <HAL_SPI_ErrorCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800a9fa:	bf00      	nop
 800a9fc:	3710      	adds	r7, #16
 800a9fe:	46bd      	mov	sp, r7
 800aa00:	bd80      	pop	{r7, pc}

0800aa02 <SPI_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800aa02:	b580      	push	{r7, lr}
 800aa04:	b088      	sub	sp, #32
 800aa06:	af02      	add	r7, sp, #8
 800aa08:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800aa0a:	687b      	ldr	r3, [r7, #4]
 800aa0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aa0e:	617b      	str	r3, [r7, #20]

  hspi->hdmatx->XferAbortCallback = NULL;
 800aa10:	697b      	ldr	r3, [r7, #20]
 800aa12:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800aa14:	2200      	movs	r2, #0
 800aa16:	651a      	str	r2, [r3, #80]	; 0x50

  /* Disable Tx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_TXDMAEN);
 800aa18:	697b      	ldr	r3, [r7, #20]
 800aa1a:	681b      	ldr	r3, [r3, #0]
 800aa1c:	685a      	ldr	r2, [r3, #4]
 800aa1e:	697b      	ldr	r3, [r7, #20]
 800aa20:	681b      	ldr	r3, [r3, #0]
 800aa22:	f022 0202 	bic.w	r2, r2, #2
 800aa26:	605a      	str	r2, [r3, #4]

  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800aa28:	f7f8 fbb8 	bl	800319c <HAL_GetTick>
 800aa2c:	4603      	mov	r3, r0
 800aa2e:	461a      	mov	r2, r3
 800aa30:	2164      	movs	r1, #100	; 0x64
 800aa32:	6978      	ldr	r0, [r7, #20]
 800aa34:	f000 fbfe 	bl	800b234 <SPI_EndRxTxTransaction>
 800aa38:	4603      	mov	r3, r0
 800aa3a:	2b00      	cmp	r3, #0
 800aa3c:	d002      	beq.n	800aa44 <SPI_DMATxAbortCallback+0x42>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800aa3e:	697b      	ldr	r3, [r7, #20]
 800aa40:	2240      	movs	r2, #64	; 0x40
 800aa42:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aa44:	697b      	ldr	r3, [r7, #20]
 800aa46:	681b      	ldr	r3, [r3, #0]
 800aa48:	681a      	ldr	r2, [r3, #0]
 800aa4a:	697b      	ldr	r3, [r7, #20]
 800aa4c:	681b      	ldr	r3, [r3, #0]
 800aa4e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aa52:	601a      	str	r2, [r3, #0]

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800aa54:	f7f8 fba2 	bl	800319c <HAL_GetTick>
 800aa58:	4603      	mov	r3, r0
 800aa5a:	9300      	str	r3, [sp, #0]
 800aa5c:	2364      	movs	r3, #100	; 0x64
 800aa5e:	2200      	movs	r2, #0
 800aa60:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800aa64:	6978      	ldr	r0, [r7, #20]
 800aa66:	f000 fad3 	bl	800b010 <SPI_WaitFifoStateUntilTimeout>
 800aa6a:	4603      	mov	r3, r0
 800aa6c:	2b00      	cmp	r3, #0
 800aa6e:	d002      	beq.n	800aa76 <SPI_DMATxAbortCallback+0x74>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800aa70:	697b      	ldr	r3, [r7, #20]
 800aa72:	2240      	movs	r2, #64	; 0x40
 800aa74:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmarx != NULL)
 800aa76:	697b      	ldr	r3, [r7, #20]
 800aa78:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa7a:	2b00      	cmp	r3, #0
 800aa7c:	d004      	beq.n	800aa88 <SPI_DMATxAbortCallback+0x86>
  {
    if (hspi->hdmarx->XferAbortCallback != NULL)
 800aa7e:	697b      	ldr	r3, [r7, #20]
 800aa80:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800aa82:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800aa84:	2b00      	cmp	r3, #0
 800aa86:	d127      	bne.n	800aad8 <SPI_DMATxAbortCallback+0xd6>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 800aa88:	697b      	ldr	r3, [r7, #20]
 800aa8a:	2200      	movs	r2, #0
 800aa8c:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800aa90:	697b      	ldr	r3, [r7, #20]
 800aa92:	2200      	movs	r2, #0
 800aa94:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 800aa96:	697b      	ldr	r3, [r7, #20]
 800aa98:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800aa9a:	2b40      	cmp	r3, #64	; 0x40
 800aa9c:	d002      	beq.n	800aaa4 <SPI_DMATxAbortCallback+0xa2>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800aa9e:	697b      	ldr	r3, [r7, #20]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800aaa4:	2300      	movs	r3, #0
 800aaa6:	613b      	str	r3, [r7, #16]
 800aaa8:	697b      	ldr	r3, [r7, #20]
 800aaaa:	681b      	ldr	r3, [r3, #0]
 800aaac:	68db      	ldr	r3, [r3, #12]
 800aaae:	613b      	str	r3, [r7, #16]
 800aab0:	697b      	ldr	r3, [r7, #20]
 800aab2:	681b      	ldr	r3, [r3, #0]
 800aab4:	689b      	ldr	r3, [r3, #8]
 800aab6:	613b      	str	r3, [r7, #16]
 800aab8:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800aaba:	2300      	movs	r3, #0
 800aabc:	60fb      	str	r3, [r7, #12]
 800aabe:	697b      	ldr	r3, [r7, #20]
 800aac0:	681b      	ldr	r3, [r3, #0]
 800aac2:	689b      	ldr	r3, [r3, #8]
 800aac4:	60fb      	str	r3, [r7, #12]
 800aac6:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 800aac8:	697b      	ldr	r3, [r7, #20]
 800aaca:	2201      	movs	r2, #1
 800aacc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 800aad0:	6978      	ldr	r0, [r7, #20]
 800aad2:	f011 feb7 	bl	801c844 <HAL_SPI_AbortCpltCallback>
 800aad6:	e000      	b.n	800aada <SPI_DMATxAbortCallback+0xd8>
      return;
 800aad8:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800aada:	3718      	adds	r7, #24
 800aadc:	46bd      	mov	sp, r7
 800aade:	bd80      	pop	{r7, pc}

0800aae0 <SPI_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void SPI_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800aae0:	b580      	push	{r7, lr}
 800aae2:	b088      	sub	sp, #32
 800aae4:	af02      	add	r7, sp, #8
 800aae6:	6078      	str	r0, [r7, #4]
  SPI_HandleTypeDef *hspi = (SPI_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent); /* Derogation MISRAC2012-Rule-11.5 */
 800aae8:	687b      	ldr	r3, [r7, #4]
 800aaea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aaec:	617b      	str	r3, [r7, #20]

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 800aaee:	697b      	ldr	r3, [r7, #20]
 800aaf0:	681b      	ldr	r3, [r3, #0]
 800aaf2:	681a      	ldr	r2, [r3, #0]
 800aaf4:	697b      	ldr	r3, [r7, #20]
 800aaf6:	681b      	ldr	r3, [r3, #0]
 800aaf8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800aafc:	601a      	str	r2, [r3, #0]

  hspi->hdmarx->XferAbortCallback = NULL;
 800aafe:	697b      	ldr	r3, [r7, #20]
 800ab00:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800ab02:	2200      	movs	r2, #0
 800ab04:	651a      	str	r2, [r3, #80]	; 0x50

  /* Disable Rx DMA Request */
  CLEAR_BIT(hspi->Instance->CR2, SPI_CR2_RXDMAEN);
 800ab06:	697b      	ldr	r3, [r7, #20]
 800ab08:	681b      	ldr	r3, [r3, #0]
 800ab0a:	685a      	ldr	r2, [r3, #4]
 800ab0c:	697b      	ldr	r3, [r7, #20]
 800ab0e:	681b      	ldr	r3, [r3, #0]
 800ab10:	f022 0201 	bic.w	r2, r2, #1
 800ab14:	605a      	str	r2, [r3, #4]

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800ab16:	f7f8 fb41 	bl	800319c <HAL_GetTick>
 800ab1a:	4603      	mov	r3, r0
 800ab1c:	9300      	str	r3, [sp, #0]
 800ab1e:	2364      	movs	r3, #100	; 0x64
 800ab20:	2200      	movs	r2, #0
 800ab22:	2180      	movs	r1, #128	; 0x80
 800ab24:	6978      	ldr	r0, [r7, #20]
 800ab26:	f000 f9eb 	bl	800af00 <SPI_WaitFlagStateUntilTimeout>
 800ab2a:	4603      	mov	r3, r0
 800ab2c:	2b00      	cmp	r3, #0
 800ab2e:	d002      	beq.n	800ab36 <SPI_DMARxAbortCallback+0x56>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800ab30:	697b      	ldr	r3, [r7, #20]
 800ab32:	2240      	movs	r2, #64	; 0x40
 800ab34:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800ab36:	f7f8 fb31 	bl	800319c <HAL_GetTick>
 800ab3a:	4603      	mov	r3, r0
 800ab3c:	9300      	str	r3, [sp, #0]
 800ab3e:	2364      	movs	r3, #100	; 0x64
 800ab40:	2200      	movs	r2, #0
 800ab42:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800ab46:	6978      	ldr	r0, [r7, #20]
 800ab48:	f000 fa62 	bl	800b010 <SPI_WaitFifoStateUntilTimeout>
 800ab4c:	4603      	mov	r3, r0
 800ab4e:	2b00      	cmp	r3, #0
 800ab50:	d002      	beq.n	800ab58 <SPI_DMARxAbortCallback+0x78>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800ab52:	697b      	ldr	r3, [r7, #20]
 800ab54:	2240      	movs	r2, #64	; 0x40
 800ab56:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Check if an Abort process is still ongoing */
  if (hspi->hdmatx != NULL)
 800ab58:	697b      	ldr	r3, [r7, #20]
 800ab5a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab5c:	2b00      	cmp	r3, #0
 800ab5e:	d004      	beq.n	800ab6a <SPI_DMARxAbortCallback+0x8a>
  {
    if (hspi->hdmatx->XferAbortCallback != NULL)
 800ab60:	697b      	ldr	r3, [r7, #20]
 800ab62:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800ab64:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800ab66:	2b00      	cmp	r3, #0
 800ab68:	d127      	bne.n	800abba <SPI_DMARxAbortCallback+0xda>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA Stream/Channel are aborted, call user Abort Complete callback */
  hspi->RxXferCount = 0U;
 800ab6a:	697b      	ldr	r3, [r7, #20]
 800ab6c:	2200      	movs	r2, #0
 800ab6e:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  hspi->TxXferCount = 0U;
 800ab72:	697b      	ldr	r3, [r7, #20]
 800ab74:	2200      	movs	r2, #0
 800ab76:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Check no error during Abort procedure */
  if (hspi->ErrorCode != HAL_SPI_ERROR_ABORT)
 800ab78:	697b      	ldr	r3, [r7, #20]
 800ab7a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800ab7c:	2b40      	cmp	r3, #64	; 0x40
 800ab7e:	d002      	beq.n	800ab86 <SPI_DMARxAbortCallback+0xa6>
  {
    /* Reset errorCode */
    hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 800ab80:	697b      	ldr	r3, [r7, #20]
 800ab82:	2200      	movs	r2, #0
 800ab84:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear the Error flags in the SR register */
  __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800ab86:	2300      	movs	r3, #0
 800ab88:	613b      	str	r3, [r7, #16]
 800ab8a:	697b      	ldr	r3, [r7, #20]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	68db      	ldr	r3, [r3, #12]
 800ab90:	613b      	str	r3, [r7, #16]
 800ab92:	697b      	ldr	r3, [r7, #20]
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	689b      	ldr	r3, [r3, #8]
 800ab98:	613b      	str	r3, [r7, #16]
 800ab9a:	693b      	ldr	r3, [r7, #16]
  __HAL_SPI_CLEAR_FREFLAG(hspi);
 800ab9c:	2300      	movs	r3, #0
 800ab9e:	60fb      	str	r3, [r7, #12]
 800aba0:	697b      	ldr	r3, [r7, #20]
 800aba2:	681b      	ldr	r3, [r3, #0]
 800aba4:	689b      	ldr	r3, [r3, #8]
 800aba6:	60fb      	str	r3, [r7, #12]
 800aba8:	68fb      	ldr	r3, [r7, #12]

  /* Restore hspi->State to Ready */
  hspi->State  = HAL_SPI_STATE_READY;
 800abaa:	697b      	ldr	r3, [r7, #20]
 800abac:	2201      	movs	r2, #1
 800abae:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

  /* Call user Abort complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
  hspi->AbortCpltCallback(hspi);
#else
  HAL_SPI_AbortCpltCallback(hspi);
 800abb2:	6978      	ldr	r0, [r7, #20]
 800abb4:	f011 fe46 	bl	801c844 <HAL_SPI_AbortCpltCallback>
 800abb8:	e000      	b.n	800abbc <SPI_DMARxAbortCallback+0xdc>
      return;
 800abba:	bf00      	nop
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
}
 800abbc:	3718      	adds	r7, #24
 800abbe:	46bd      	mov	sp, r7
 800abc0:	bd80      	pop	{r7, pc}

0800abc2 <SPI_2linesRxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800abc2:	b580      	push	{r7, lr}
 800abc4:	b082      	sub	sp, #8
 800abc6:	af00      	add	r7, sp, #0
 800abc8:	6078      	str	r0, [r7, #4]
  /* Receive data in packing mode */
  if (hspi->RxXferCount > 1U)
 800abca:	687b      	ldr	r3, [r7, #4]
 800abcc:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800abd0:	b29b      	uxth	r3, r3
 800abd2:	2b01      	cmp	r3, #1
 800abd4:	d923      	bls.n	800ac1e <SPI_2linesRxISR_8BIT+0x5c>
  {
    *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800abd6:	687b      	ldr	r3, [r7, #4]
 800abd8:	681b      	ldr	r3, [r3, #0]
 800abda:	68da      	ldr	r2, [r3, #12]
 800abdc:	687b      	ldr	r3, [r7, #4]
 800abde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abe0:	b292      	uxth	r2, r2
 800abe2:	801a      	strh	r2, [r3, #0]
    hspi->pRxBuffPtr += sizeof(uint16_t);
 800abe4:	687b      	ldr	r3, [r7, #4]
 800abe6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800abe8:	1c9a      	adds	r2, r3, #2
 800abea:	687b      	ldr	r3, [r7, #4]
 800abec:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount -= 2U;
 800abee:	687b      	ldr	r3, [r7, #4]
 800abf0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800abf4:	b29b      	uxth	r3, r3
 800abf6:	3b02      	subs	r3, #2
 800abf8:	b29a      	uxth	r2, r3
 800abfa:	687b      	ldr	r3, [r7, #4]
 800abfc:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
    if (hspi->RxXferCount == 1U)
 800ac00:	687b      	ldr	r3, [r7, #4]
 800ac02:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ac06:	b29b      	uxth	r3, r3
 800ac08:	2b01      	cmp	r3, #1
 800ac0a:	d11f      	bne.n	800ac4c <SPI_2linesRxISR_8BIT+0x8a>
    {
      /* Set RX Fifo threshold according the reception data length: 8bit */
      SET_BIT(hspi->Instance->CR2, SPI_RXFIFO_THRESHOLD);
 800ac0c:	687b      	ldr	r3, [r7, #4]
 800ac0e:	681b      	ldr	r3, [r3, #0]
 800ac10:	685a      	ldr	r2, [r3, #4]
 800ac12:	687b      	ldr	r3, [r7, #4]
 800ac14:	681b      	ldr	r3, [r3, #0]
 800ac16:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800ac1a:	605a      	str	r2, [r3, #4]
 800ac1c:	e016      	b.n	800ac4c <SPI_2linesRxISR_8BIT+0x8a>
    }
  }
  /* Receive data in 8 Bit mode */
  else
  {
    *hspi->pRxBuffPtr = *((__IO uint8_t *)&hspi->Instance->DR);
 800ac1e:	687b      	ldr	r3, [r7, #4]
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	f103 020c 	add.w	r2, r3, #12
 800ac26:	687b      	ldr	r3, [r7, #4]
 800ac28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac2a:	7812      	ldrb	r2, [r2, #0]
 800ac2c:	b2d2      	uxtb	r2, r2
 800ac2e:	701a      	strb	r2, [r3, #0]
    hspi->pRxBuffPtr++;
 800ac30:	687b      	ldr	r3, [r7, #4]
 800ac32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ac34:	1c5a      	adds	r2, r3, #1
 800ac36:	687b      	ldr	r3, [r7, #4]
 800ac38:	641a      	str	r2, [r3, #64]	; 0x40
    hspi->RxXferCount--;
 800ac3a:	687b      	ldr	r3, [r7, #4]
 800ac3c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ac40:	b29b      	uxth	r3, r3
 800ac42:	3b01      	subs	r3, #1
 800ac44:	b29a      	uxth	r2, r3
 800ac46:	687b      	ldr	r3, [r7, #4]
 800ac48:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  }

  /* Check end of the reception */
  if (hspi->RxXferCount == 0U)
 800ac4c:	687b      	ldr	r3, [r7, #4]
 800ac4e:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ac52:	b29b      	uxth	r3, r3
 800ac54:	2b00      	cmp	r3, #0
 800ac56:	d10f      	bne.n	800ac78 <SPI_2linesRxISR_8BIT+0xb6>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE  and ERR interrupt */
    __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800ac58:	687b      	ldr	r3, [r7, #4]
 800ac5a:	681b      	ldr	r3, [r3, #0]
 800ac5c:	685a      	ldr	r2, [r3, #4]
 800ac5e:	687b      	ldr	r3, [r7, #4]
 800ac60:	681b      	ldr	r3, [r3, #0]
 800ac62:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800ac66:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800ac68:	687b      	ldr	r3, [r7, #4]
 800ac6a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac6c:	b29b      	uxth	r3, r3
 800ac6e:	2b00      	cmp	r3, #0
 800ac70:	d102      	bne.n	800ac78 <SPI_2linesRxISR_8BIT+0xb6>
    {
      SPI_CloseRxTx_ISR(hspi);
 800ac72:	6878      	ldr	r0, [r7, #4]
 800ac74:	f000 fb48 	bl	800b308 <SPI_CloseRxTx_ISR>
    }
  }
}
 800ac78:	bf00      	nop
 800ac7a:	3708      	adds	r7, #8
 800ac7c:	46bd      	mov	sp, r7
 800ac7e:	bd80      	pop	{r7, pc}

0800ac80 <SPI_2linesTxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800ac80:	b580      	push	{r7, lr}
 800ac82:	b082      	sub	sp, #8
 800ac84:	af00      	add	r7, sp, #0
 800ac86:	6078      	str	r0, [r7, #4]
  /* Transmit data in packing Bit mode */
  if (hspi->TxXferCount >= 2U)
 800ac88:	687b      	ldr	r3, [r7, #4]
 800ac8a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ac8c:	b29b      	uxth	r3, r3
 800ac8e:	2b01      	cmp	r3, #1
 800ac90:	d912      	bls.n	800acb8 <SPI_2linesTxISR_8BIT+0x38>
  {
    hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ac92:	687b      	ldr	r3, [r7, #4]
 800ac94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ac96:	881a      	ldrh	r2, [r3, #0]
 800ac98:	687b      	ldr	r3, [r7, #4]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	60da      	str	r2, [r3, #12]
    hspi->pTxBuffPtr += sizeof(uint16_t);
 800ac9e:	687b      	ldr	r3, [r7, #4]
 800aca0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aca2:	1c9a      	adds	r2, r3, #2
 800aca4:	687b      	ldr	r3, [r7, #4]
 800aca6:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount -= 2U;
 800aca8:	687b      	ldr	r3, [r7, #4]
 800acaa:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800acac:	b29b      	uxth	r3, r3
 800acae:	3b02      	subs	r3, #2
 800acb0:	b29a      	uxth	r2, r3
 800acb2:	687b      	ldr	r3, [r7, #4]
 800acb4:	87da      	strh	r2, [r3, #62]	; 0x3e
 800acb6:	e012      	b.n	800acde <SPI_2linesTxISR_8BIT+0x5e>
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800acb8:	687b      	ldr	r3, [r7, #4]
 800acba:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800acbc:	687b      	ldr	r3, [r7, #4]
 800acbe:	681b      	ldr	r3, [r3, #0]
 800acc0:	330c      	adds	r3, #12
 800acc2:	7812      	ldrb	r2, [r2, #0]
 800acc4:	701a      	strb	r2, [r3, #0]
    hspi->pTxBuffPtr++;
 800acc6:	687b      	ldr	r3, [r7, #4]
 800acc8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800acca:	1c5a      	adds	r2, r3, #1
 800accc:	687b      	ldr	r3, [r7, #4]
 800acce:	639a      	str	r2, [r3, #56]	; 0x38
    hspi->TxXferCount--;
 800acd0:	687b      	ldr	r3, [r7, #4]
 800acd2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800acd4:	b29b      	uxth	r3, r3
 800acd6:	3b01      	subs	r3, #1
 800acd8:	b29a      	uxth	r2, r3
 800acda:	687b      	ldr	r3, [r7, #4]
 800acdc:	87da      	strh	r2, [r3, #62]	; 0x3e
  }

  /* Check the end of the transmission */
  if (hspi->TxXferCount == 0U)
 800acde:	687b      	ldr	r3, [r7, #4]
 800ace0:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ace2:	b29b      	uxth	r3, r3
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d110      	bne.n	800ad0a <SPI_2linesTxISR_8BIT+0x8a>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800ace8:	687b      	ldr	r3, [r7, #4]
 800acea:	681b      	ldr	r3, [r3, #0]
 800acec:	685a      	ldr	r2, [r3, #4]
 800acee:	687b      	ldr	r3, [r7, #4]
 800acf0:	681b      	ldr	r3, [r3, #0]
 800acf2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800acf6:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800acf8:	687b      	ldr	r3, [r7, #4]
 800acfa:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800acfe:	b29b      	uxth	r3, r3
 800ad00:	2b00      	cmp	r3, #0
 800ad02:	d102      	bne.n	800ad0a <SPI_2linesTxISR_8BIT+0x8a>
    {
      SPI_CloseRxTx_ISR(hspi);
 800ad04:	6878      	ldr	r0, [r7, #4]
 800ad06:	f000 faff 	bl	800b308 <SPI_CloseRxTx_ISR>
    }
  }
}
 800ad0a:	bf00      	nop
 800ad0c:	3708      	adds	r7, #8
 800ad0e:	46bd      	mov	sp, r7
 800ad10:	bd80      	pop	{r7, pc}

0800ad12 <SPI_2linesRxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesRxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800ad12:	b580      	push	{r7, lr}
 800ad14:	b082      	sub	sp, #8
 800ad16:	af00      	add	r7, sp, #0
 800ad18:	6078      	str	r0, [r7, #4]
  /* Receive data in 16 Bit mode */
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800ad1a:	687b      	ldr	r3, [r7, #4]
 800ad1c:	681b      	ldr	r3, [r3, #0]
 800ad1e:	68da      	ldr	r2, [r3, #12]
 800ad20:	687b      	ldr	r3, [r7, #4]
 800ad22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad24:	b292      	uxth	r2, r2
 800ad26:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800ad28:	687b      	ldr	r3, [r7, #4]
 800ad2a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ad2c:	1c9a      	adds	r2, r3, #2
 800ad2e:	687b      	ldr	r3, [r7, #4]
 800ad30:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800ad32:	687b      	ldr	r3, [r7, #4]
 800ad34:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ad38:	b29b      	uxth	r3, r3
 800ad3a:	3b01      	subs	r3, #1
 800ad3c:	b29a      	uxth	r2, r3
 800ad3e:	687b      	ldr	r3, [r7, #4]
 800ad40:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46

  if (hspi->RxXferCount == 0U)
 800ad44:	687b      	ldr	r3, [r7, #4]
 800ad46:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ad4a:	b29b      	uxth	r3, r3
 800ad4c:	2b00      	cmp	r3, #0
 800ad4e:	d10f      	bne.n	800ad70 <SPI_2linesRxISR_16BIT+0x5e>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable RXNE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_RXNE);
 800ad50:	687b      	ldr	r3, [r7, #4]
 800ad52:	681b      	ldr	r3, [r3, #0]
 800ad54:	685a      	ldr	r2, [r3, #4]
 800ad56:	687b      	ldr	r3, [r7, #4]
 800ad58:	681b      	ldr	r3, [r3, #0]
 800ad5a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800ad5e:	605a      	str	r2, [r3, #4]

    if (hspi->TxXferCount == 0U)
 800ad60:	687b      	ldr	r3, [r7, #4]
 800ad62:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad64:	b29b      	uxth	r3, r3
 800ad66:	2b00      	cmp	r3, #0
 800ad68:	d102      	bne.n	800ad70 <SPI_2linesRxISR_16BIT+0x5e>
    {
      SPI_CloseRxTx_ISR(hspi);
 800ad6a:	6878      	ldr	r0, [r7, #4]
 800ad6c:	f000 facc 	bl	800b308 <SPI_CloseRxTx_ISR>
    }
  }
}
 800ad70:	bf00      	nop
 800ad72:	3708      	adds	r7, #8
 800ad74:	46bd      	mov	sp, r7
 800ad76:	bd80      	pop	{r7, pc}

0800ad78 <SPI_2linesTxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_2linesTxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	b082      	sub	sp, #8
 800ad7c:	af00      	add	r7, sp, #0
 800ad7e:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800ad80:	687b      	ldr	r3, [r7, #4]
 800ad82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad84:	881a      	ldrh	r2, [r3, #0]
 800ad86:	687b      	ldr	r3, [r7, #4]
 800ad88:	681b      	ldr	r3, [r3, #0]
 800ad8a:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800ad8c:	687b      	ldr	r3, [r7, #4]
 800ad8e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ad90:	1c9a      	adds	r2, r3, #2
 800ad92:	687b      	ldr	r3, [r7, #4]
 800ad94:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800ad96:	687b      	ldr	r3, [r7, #4]
 800ad98:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ad9a:	b29b      	uxth	r3, r3
 800ad9c:	3b01      	subs	r3, #1
 800ad9e:	b29a      	uxth	r2, r3
 800ada0:	687b      	ldr	r3, [r7, #4]
 800ada2:	87da      	strh	r2, [r3, #62]	; 0x3e

  /* Enable CRC Transmission */
  if (hspi->TxXferCount == 0U)
 800ada4:	687b      	ldr	r3, [r7, #4]
 800ada6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ada8:	b29b      	uxth	r3, r3
 800adaa:	2b00      	cmp	r3, #0
 800adac:	d110      	bne.n	800add0 <SPI_2linesTxISR_16BIT+0x58>
      return;
    }
#endif /* USE_SPI_CRC */

    /* Disable TXE interrupt */
    __HAL_SPI_DISABLE_IT(hspi, SPI_IT_TXE);
 800adae:	687b      	ldr	r3, [r7, #4]
 800adb0:	681b      	ldr	r3, [r3, #0]
 800adb2:	685a      	ldr	r2, [r3, #4]
 800adb4:	687b      	ldr	r3, [r7, #4]
 800adb6:	681b      	ldr	r3, [r3, #0]
 800adb8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800adbc:	605a      	str	r2, [r3, #4]

    if (hspi->RxXferCount == 0U)
 800adbe:	687b      	ldr	r3, [r7, #4]
 800adc0:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800adc4:	b29b      	uxth	r3, r3
 800adc6:	2b00      	cmp	r3, #0
 800adc8:	d102      	bne.n	800add0 <SPI_2linesTxISR_16BIT+0x58>
    {
      SPI_CloseRxTx_ISR(hspi);
 800adca:	6878      	ldr	r0, [r7, #4]
 800adcc:	f000 fa9c 	bl	800b308 <SPI_CloseRxTx_ISR>
    }
  }
}
 800add0:	bf00      	nop
 800add2:	3708      	adds	r7, #8
 800add4:	46bd      	mov	sp, r7
 800add6:	bd80      	pop	{r7, pc}

0800add8 <SPI_RxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	b082      	sub	sp, #8
 800addc:	af00      	add	r7, sp, #0
 800adde:	6078      	str	r0, [r7, #4]
  *hspi->pRxBuffPtr = (*(__IO uint8_t *)&hspi->Instance->DR);
 800ade0:	687b      	ldr	r3, [r7, #4]
 800ade2:	681b      	ldr	r3, [r3, #0]
 800ade4:	f103 020c 	add.w	r2, r3, #12
 800ade8:	687b      	ldr	r3, [r7, #4]
 800adea:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adec:	7812      	ldrb	r2, [r2, #0]
 800adee:	b2d2      	uxtb	r2, r2
 800adf0:	701a      	strb	r2, [r3, #0]
  hspi->pRxBuffPtr++;
 800adf2:	687b      	ldr	r3, [r7, #4]
 800adf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800adf6:	1c5a      	adds	r2, r3, #1
 800adf8:	687b      	ldr	r3, [r7, #4]
 800adfa:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800adfc:	687b      	ldr	r3, [r7, #4]
 800adfe:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ae02:	b29b      	uxth	r3, r3
 800ae04:	3b01      	subs	r3, #1
 800ae06:	b29a      	uxth	r2, r3
 800ae08:	687b      	ldr	r3, [r7, #4]
 800ae0a:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800ae0e:	687b      	ldr	r3, [r7, #4]
 800ae10:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ae14:	b29b      	uxth	r3, r3
 800ae16:	2b00      	cmp	r3, #0
 800ae18:	d102      	bne.n	800ae20 <SPI_RxISR_8BIT+0x48>
    {
      hspi->RxISR =  SPI_RxISR_8BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800ae1a:	6878      	ldr	r0, [r7, #4]
 800ae1c:	f000 fab6 	bl	800b38c <SPI_CloseRx_ISR>
  }
}
 800ae20:	bf00      	nop
 800ae22:	3708      	adds	r7, #8
 800ae24:	46bd      	mov	sp, r7
 800ae26:	bd80      	pop	{r7, pc}

0800ae28 <SPI_RxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_RxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800ae28:	b580      	push	{r7, lr}
 800ae2a:	b082      	sub	sp, #8
 800ae2c:	af00      	add	r7, sp, #0
 800ae2e:	6078      	str	r0, [r7, #4]
  *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)(hspi->Instance->DR);
 800ae30:	687b      	ldr	r3, [r7, #4]
 800ae32:	681b      	ldr	r3, [r3, #0]
 800ae34:	68da      	ldr	r2, [r3, #12]
 800ae36:	687b      	ldr	r3, [r7, #4]
 800ae38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae3a:	b292      	uxth	r2, r2
 800ae3c:	801a      	strh	r2, [r3, #0]
  hspi->pRxBuffPtr += sizeof(uint16_t);
 800ae3e:	687b      	ldr	r3, [r7, #4]
 800ae40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800ae42:	1c9a      	adds	r2, r3, #2
 800ae44:	687b      	ldr	r3, [r7, #4]
 800ae46:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->RxXferCount--;
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ae4e:	b29b      	uxth	r3, r3
 800ae50:	3b01      	subs	r3, #1
 800ae52:	b29a      	uxth	r2, r3
 800ae54:	687b      	ldr	r3, [r7, #4]
 800ae56:	f8a3 2046 	strh.w	r2, [r3, #70]	; 0x46
  {
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  if (hspi->RxXferCount == 0U)
 800ae5a:	687b      	ldr	r3, [r7, #4]
 800ae5c:	f8b3 3046 	ldrh.w	r3, [r3, #70]	; 0x46
 800ae60:	b29b      	uxth	r3, r3
 800ae62:	2b00      	cmp	r3, #0
 800ae64:	d102      	bne.n	800ae6c <SPI_RxISR_16BIT+0x44>
    {
      hspi->RxISR = SPI_RxISR_16BITCRC;
      return;
    }
#endif /* USE_SPI_CRC */
    SPI_CloseRx_ISR(hspi);
 800ae66:	6878      	ldr	r0, [r7, #4]
 800ae68:	f000 fa90 	bl	800b38c <SPI_CloseRx_ISR>
  }
}
 800ae6c:	bf00      	nop
 800ae6e:	3708      	adds	r7, #8
 800ae70:	46bd      	mov	sp, r7
 800ae72:	bd80      	pop	{r7, pc}

0800ae74 <SPI_TxISR_8BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_8BIT(struct __SPI_HandleTypeDef *hspi)
{
 800ae74:	b580      	push	{r7, lr}
 800ae76:	b082      	sub	sp, #8
 800ae78:	af00      	add	r7, sp, #0
 800ae7a:	6078      	str	r0, [r7, #4]
  *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 800ae7c:	687b      	ldr	r3, [r7, #4]
 800ae7e:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ae80:	687b      	ldr	r3, [r7, #4]
 800ae82:	681b      	ldr	r3, [r3, #0]
 800ae84:	330c      	adds	r3, #12
 800ae86:	7812      	ldrb	r2, [r2, #0]
 800ae88:	701a      	strb	r2, [r3, #0]
  hspi->pTxBuffPtr++;
 800ae8a:	687b      	ldr	r3, [r7, #4]
 800ae8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800ae8e:	1c5a      	adds	r2, r3, #1
 800ae90:	687b      	ldr	r3, [r7, #4]
 800ae92:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800ae94:	687b      	ldr	r3, [r7, #4]
 800ae96:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800ae98:	b29b      	uxth	r3, r3
 800ae9a:	3b01      	subs	r3, #1
 800ae9c:	b29a      	uxth	r2, r3
 800ae9e:	687b      	ldr	r3, [r7, #4]
 800aea0:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800aea2:	687b      	ldr	r3, [r7, #4]
 800aea4:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aea6:	b29b      	uxth	r3, r3
 800aea8:	2b00      	cmp	r3, #0
 800aeaa:	d102      	bne.n	800aeb2 <SPI_TxISR_8BIT+0x3e>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800aeac:	6878      	ldr	r0, [r7, #4]
 800aeae:	f000 fa9d 	bl	800b3ec <SPI_CloseTx_ISR>
  }
}
 800aeb2:	bf00      	nop
 800aeb4:	3708      	adds	r7, #8
 800aeb6:	46bd      	mov	sp, r7
 800aeb8:	bd80      	pop	{r7, pc}

0800aeba <SPI_TxISR_16BIT>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_TxISR_16BIT(struct __SPI_HandleTypeDef *hspi)
{
 800aeba:	b580      	push	{r7, lr}
 800aebc:	b082      	sub	sp, #8
 800aebe:	af00      	add	r7, sp, #0
 800aec0:	6078      	str	r0, [r7, #4]
  /* Transmit data in 16 Bit mode */
  hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 800aec2:	687b      	ldr	r3, [r7, #4]
 800aec4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aec6:	881a      	ldrh	r2, [r3, #0]
 800aec8:	687b      	ldr	r3, [r7, #4]
 800aeca:	681b      	ldr	r3, [r3, #0]
 800aecc:	60da      	str	r2, [r3, #12]
  hspi->pTxBuffPtr += sizeof(uint16_t);
 800aece:	687b      	ldr	r3, [r7, #4]
 800aed0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800aed2:	1c9a      	adds	r2, r3, #2
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->TxXferCount--;
 800aed8:	687b      	ldr	r3, [r7, #4]
 800aeda:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aedc:	b29b      	uxth	r3, r3
 800aede:	3b01      	subs	r3, #1
 800aee0:	b29a      	uxth	r2, r3
 800aee2:	687b      	ldr	r3, [r7, #4]
 800aee4:	87da      	strh	r2, [r3, #62]	; 0x3e

  if (hspi->TxXferCount == 0U)
 800aee6:	687b      	ldr	r3, [r7, #4]
 800aee8:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800aeea:	b29b      	uxth	r3, r3
 800aeec:	2b00      	cmp	r3, #0
 800aeee:	d102      	bne.n	800aef6 <SPI_TxISR_16BIT+0x3c>
    {
      /* Enable CRC Transmission */
      SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
    }
#endif /* USE_SPI_CRC */
    SPI_CloseTx_ISR(hspi);
 800aef0:	6878      	ldr	r0, [r7, #4]
 800aef2:	f000 fa7b 	bl	800b3ec <SPI_CloseTx_ISR>
  }
}
 800aef6:	bf00      	nop
 800aef8:	3708      	adds	r7, #8
 800aefa:	46bd      	mov	sp, r7
 800aefc:	bd80      	pop	{r7, pc}
	...

0800af00 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800af00:	b580      	push	{r7, lr}
 800af02:	b088      	sub	sp, #32
 800af04:	af00      	add	r7, sp, #0
 800af06:	60f8      	str	r0, [r7, #12]
 800af08:	60b9      	str	r1, [r7, #8]
 800af0a:	603b      	str	r3, [r7, #0]
 800af0c:	4613      	mov	r3, r2
 800af0e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 800af10:	f7f8 f944 	bl	800319c <HAL_GetTick>
 800af14:	4602      	mov	r2, r0
 800af16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800af18:	1a9b      	subs	r3, r3, r2
 800af1a:	683a      	ldr	r2, [r7, #0]
 800af1c:	4413      	add	r3, r2
 800af1e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 800af20:	f7f8 f93c 	bl	800319c <HAL_GetTick>
 800af24:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 800af26:	4b39      	ldr	r3, [pc, #228]	; (800b00c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	015b      	lsls	r3, r3, #5
 800af2c:	0d1b      	lsrs	r3, r3, #20
 800af2e:	69fa      	ldr	r2, [r7, #28]
 800af30:	fb02 f303 	mul.w	r3, r2, r3
 800af34:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800af36:	e054      	b.n	800afe2 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 800af38:	683b      	ldr	r3, [r7, #0]
 800af3a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800af3e:	d050      	beq.n	800afe2 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800af40:	f7f8 f92c 	bl	800319c <HAL_GetTick>
 800af44:	4602      	mov	r2, r0
 800af46:	69bb      	ldr	r3, [r7, #24]
 800af48:	1ad3      	subs	r3, r2, r3
 800af4a:	69fa      	ldr	r2, [r7, #28]
 800af4c:	429a      	cmp	r2, r3
 800af4e:	d902      	bls.n	800af56 <SPI_WaitFlagStateUntilTimeout+0x56>
 800af50:	69fb      	ldr	r3, [r7, #28]
 800af52:	2b00      	cmp	r3, #0
 800af54:	d13d      	bne.n	800afd2 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800af56:	68fb      	ldr	r3, [r7, #12]
 800af58:	681b      	ldr	r3, [r3, #0]
 800af5a:	685a      	ldr	r2, [r3, #4]
 800af5c:	68fb      	ldr	r3, [r7, #12]
 800af5e:	681b      	ldr	r3, [r3, #0]
 800af60:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800af64:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800af66:	68fb      	ldr	r3, [r7, #12]
 800af68:	685b      	ldr	r3, [r3, #4]
 800af6a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800af6e:	d111      	bne.n	800af94 <SPI_WaitFlagStateUntilTimeout+0x94>
 800af70:	68fb      	ldr	r3, [r7, #12]
 800af72:	689b      	ldr	r3, [r3, #8]
 800af74:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800af78:	d004      	beq.n	800af84 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800af7a:	68fb      	ldr	r3, [r7, #12]
 800af7c:	689b      	ldr	r3, [r3, #8]
 800af7e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800af82:	d107      	bne.n	800af94 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800af84:	68fb      	ldr	r3, [r7, #12]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	681a      	ldr	r2, [r3, #0]
 800af8a:	68fb      	ldr	r3, [r7, #12]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800af92:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800af94:	68fb      	ldr	r3, [r7, #12]
 800af96:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800af98:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800af9c:	d10f      	bne.n	800afbe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 800af9e:	68fb      	ldr	r3, [r7, #12]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	681a      	ldr	r2, [r3, #0]
 800afa4:	68fb      	ldr	r3, [r7, #12]
 800afa6:	681b      	ldr	r3, [r3, #0]
 800afa8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800afac:	601a      	str	r2, [r3, #0]
 800afae:	68fb      	ldr	r3, [r7, #12]
 800afb0:	681b      	ldr	r3, [r3, #0]
 800afb2:	681a      	ldr	r2, [r3, #0]
 800afb4:	68fb      	ldr	r3, [r7, #12]
 800afb6:	681b      	ldr	r3, [r3, #0]
 800afb8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800afbc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800afbe:	68fb      	ldr	r3, [r7, #12]
 800afc0:	2201      	movs	r2, #1
 800afc2:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800afc6:	68fb      	ldr	r3, [r7, #12]
 800afc8:	2200      	movs	r2, #0
 800afca:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800afce:	2303      	movs	r3, #3
 800afd0:	e017      	b.n	800b002 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800afd2:	697b      	ldr	r3, [r7, #20]
 800afd4:	2b00      	cmp	r3, #0
 800afd6:	d101      	bne.n	800afdc <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 800afd8:	2300      	movs	r3, #0
 800afda:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800afdc:	697b      	ldr	r3, [r7, #20]
 800afde:	3b01      	subs	r3, #1
 800afe0:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800afe2:	68fb      	ldr	r3, [r7, #12]
 800afe4:	681b      	ldr	r3, [r3, #0]
 800afe6:	689a      	ldr	r2, [r3, #8]
 800afe8:	68bb      	ldr	r3, [r7, #8]
 800afea:	4013      	ands	r3, r2
 800afec:	68ba      	ldr	r2, [r7, #8]
 800afee:	429a      	cmp	r2, r3
 800aff0:	bf0c      	ite	eq
 800aff2:	2301      	moveq	r3, #1
 800aff4:	2300      	movne	r3, #0
 800aff6:	b2db      	uxtb	r3, r3
 800aff8:	461a      	mov	r2, r3
 800affa:	79fb      	ldrb	r3, [r7, #7]
 800affc:	429a      	cmp	r2, r3
 800affe:	d19b      	bne.n	800af38 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 800b000:	2300      	movs	r3, #0
}
 800b002:	4618      	mov	r0, r3
 800b004:	3720      	adds	r7, #32
 800b006:	46bd      	mov	sp, r7
 800b008:	bd80      	pop	{r7, pc}
 800b00a:	bf00      	nop
 800b00c:	20000000 	.word	0x20000000

0800b010 <SPI_WaitFifoStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFifoStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Fifo, uint32_t State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b08a      	sub	sp, #40	; 0x28
 800b014:	af00      	add	r7, sp, #0
 800b016:	60f8      	str	r0, [r7, #12]
 800b018:	60b9      	str	r1, [r7, #8]
 800b01a:	607a      	str	r2, [r7, #4]
 800b01c:	603b      	str	r3, [r7, #0]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;
  __IO uint8_t  *ptmpreg8;
  __IO uint8_t  tmpreg8 = 0;
 800b01e:	2300      	movs	r3, #0
 800b020:	75fb      	strb	r3, [r7, #23]

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout = Timeout - (HAL_GetTick() - Tickstart);
 800b022:	f7f8 f8bb 	bl	800319c <HAL_GetTick>
 800b026:	4602      	mov	r2, r0
 800b028:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800b02a:	1a9b      	subs	r3, r3, r2
 800b02c:	683a      	ldr	r2, [r7, #0]
 800b02e:	4413      	add	r3, r2
 800b030:	627b      	str	r3, [r7, #36]	; 0x24
  tmp_tickstart = HAL_GetTick();
 800b032:	f7f8 f8b3 	bl	800319c <HAL_GetTick>
 800b036:	6238      	str	r0, [r7, #32]

  /* Initialize the 8bit temporary pointer */
  ptmpreg8 = (__IO uint8_t *)&hspi->Instance->DR;
 800b038:	68fb      	ldr	r3, [r7, #12]
 800b03a:	681b      	ldr	r3, [r3, #0]
 800b03c:	330c      	adds	r3, #12
 800b03e:	61fb      	str	r3, [r7, #28]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 35U) >> 20U);
 800b040:	4b3d      	ldr	r3, [pc, #244]	; (800b138 <SPI_WaitFifoStateUntilTimeout+0x128>)
 800b042:	681a      	ldr	r2, [r3, #0]
 800b044:	4613      	mov	r3, r2
 800b046:	009b      	lsls	r3, r3, #2
 800b048:	4413      	add	r3, r2
 800b04a:	00da      	lsls	r2, r3, #3
 800b04c:	1ad3      	subs	r3, r2, r3
 800b04e:	0d1b      	lsrs	r3, r3, #20
 800b050:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b052:	fb02 f303 	mul.w	r3, r2, r3
 800b056:	61bb      	str	r3, [r7, #24]

  while ((hspi->Instance->SR & Fifo) != State)
 800b058:	e060      	b.n	800b11c <SPI_WaitFifoStateUntilTimeout+0x10c>
  {
    if ((Fifo == SPI_SR_FRLVL) && (State == SPI_FRLVL_EMPTY))
 800b05a:	68bb      	ldr	r3, [r7, #8]
 800b05c:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800b060:	d107      	bne.n	800b072 <SPI_WaitFifoStateUntilTimeout+0x62>
 800b062:	687b      	ldr	r3, [r7, #4]
 800b064:	2b00      	cmp	r3, #0
 800b066:	d104      	bne.n	800b072 <SPI_WaitFifoStateUntilTimeout+0x62>
    {
      /* Flush Data Register by a blank read */
      tmpreg8 = *ptmpreg8;
 800b068:	69fb      	ldr	r3, [r7, #28]
 800b06a:	781b      	ldrb	r3, [r3, #0]
 800b06c:	b2db      	uxtb	r3, r3
 800b06e:	75fb      	strb	r3, [r7, #23]
      /* To avoid GCC warning */
      UNUSED(tmpreg8);
 800b070:	7dfb      	ldrb	r3, [r7, #23]
    }

    if (Timeout != HAL_MAX_DELAY)
 800b072:	683b      	ldr	r3, [r7, #0]
 800b074:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b078:	d050      	beq.n	800b11c <SPI_WaitFifoStateUntilTimeout+0x10c>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 800b07a:	f7f8 f88f 	bl	800319c <HAL_GetTick>
 800b07e:	4602      	mov	r2, r0
 800b080:	6a3b      	ldr	r3, [r7, #32]
 800b082:	1ad3      	subs	r3, r2, r3
 800b084:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800b086:	429a      	cmp	r2, r3
 800b088:	d902      	bls.n	800b090 <SPI_WaitFifoStateUntilTimeout+0x80>
 800b08a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800b08c:	2b00      	cmp	r3, #0
 800b08e:	d13d      	bne.n	800b10c <SPI_WaitFifoStateUntilTimeout+0xfc>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800b090:	68fb      	ldr	r3, [r7, #12]
 800b092:	681b      	ldr	r3, [r3, #0]
 800b094:	685a      	ldr	r2, [r3, #4]
 800b096:	68fb      	ldr	r3, [r7, #12]
 800b098:	681b      	ldr	r3, [r3, #0]
 800b09a:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 800b09e:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b0a0:	68fb      	ldr	r3, [r7, #12]
 800b0a2:	685b      	ldr	r3, [r3, #4]
 800b0a4:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b0a8:	d111      	bne.n	800b0ce <SPI_WaitFifoStateUntilTimeout+0xbe>
 800b0aa:	68fb      	ldr	r3, [r7, #12]
 800b0ac:	689b      	ldr	r3, [r3, #8]
 800b0ae:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b0b2:	d004      	beq.n	800b0be <SPI_WaitFifoStateUntilTimeout+0xae>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b0b4:	68fb      	ldr	r3, [r7, #12]
 800b0b6:	689b      	ldr	r3, [r3, #8]
 800b0b8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b0bc:	d107      	bne.n	800b0ce <SPI_WaitFifoStateUntilTimeout+0xbe>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800b0be:	68fb      	ldr	r3, [r7, #12]
 800b0c0:	681b      	ldr	r3, [r3, #0]
 800b0c2:	681a      	ldr	r2, [r3, #0]
 800b0c4:	68fb      	ldr	r3, [r7, #12]
 800b0c6:	681b      	ldr	r3, [r3, #0]
 800b0c8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b0cc:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800b0ce:	68fb      	ldr	r3, [r7, #12]
 800b0d0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800b0d2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800b0d6:	d10f      	bne.n	800b0f8 <SPI_WaitFifoStateUntilTimeout+0xe8>
        {
          SPI_RESET_CRC(hspi);
 800b0d8:	68fb      	ldr	r3, [r7, #12]
 800b0da:	681b      	ldr	r3, [r3, #0]
 800b0dc:	681a      	ldr	r2, [r3, #0]
 800b0de:	68fb      	ldr	r3, [r7, #12]
 800b0e0:	681b      	ldr	r3, [r3, #0]
 800b0e2:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800b0e6:	601a      	str	r2, [r3, #0]
 800b0e8:	68fb      	ldr	r3, [r7, #12]
 800b0ea:	681b      	ldr	r3, [r3, #0]
 800b0ec:	681a      	ldr	r2, [r3, #0]
 800b0ee:	68fb      	ldr	r3, [r7, #12]
 800b0f0:	681b      	ldr	r3, [r3, #0]
 800b0f2:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 800b0f6:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 800b0f8:	68fb      	ldr	r3, [r7, #12]
 800b0fa:	2201      	movs	r2, #1
 800b0fc:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800b100:	68fb      	ldr	r3, [r7, #12]
 800b102:	2200      	movs	r2, #0
 800b104:	f883 205c 	strb.w	r2, [r3, #92]	; 0x5c

        return HAL_TIMEOUT;
 800b108:	2303      	movs	r3, #3
 800b10a:	e010      	b.n	800b12e <SPI_WaitFifoStateUntilTimeout+0x11e>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 800b10c:	69bb      	ldr	r3, [r7, #24]
 800b10e:	2b00      	cmp	r3, #0
 800b110:	d101      	bne.n	800b116 <SPI_WaitFifoStateUntilTimeout+0x106>
      {
        tmp_timeout = 0U;
 800b112:	2300      	movs	r3, #0
 800b114:	627b      	str	r3, [r7, #36]	; 0x24
      }
      count--;
 800b116:	69bb      	ldr	r3, [r7, #24]
 800b118:	3b01      	subs	r3, #1
 800b11a:	61bb      	str	r3, [r7, #24]
  while ((hspi->Instance->SR & Fifo) != State)
 800b11c:	68fb      	ldr	r3, [r7, #12]
 800b11e:	681b      	ldr	r3, [r3, #0]
 800b120:	689a      	ldr	r2, [r3, #8]
 800b122:	68bb      	ldr	r3, [r7, #8]
 800b124:	4013      	ands	r3, r2
 800b126:	687a      	ldr	r2, [r7, #4]
 800b128:	429a      	cmp	r2, r3
 800b12a:	d196      	bne.n	800b05a <SPI_WaitFifoStateUntilTimeout+0x4a>
    }
  }

  return HAL_OK;
 800b12c:	2300      	movs	r3, #0
}
 800b12e:	4618      	mov	r0, r3
 800b130:	3728      	adds	r7, #40	; 0x28
 800b132:	46bd      	mov	sp, r7
 800b134:	bd80      	pop	{r7, pc}
 800b136:	bf00      	nop
 800b138:	20000000 	.word	0x20000000

0800b13c <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 800b13c:	b580      	push	{r7, lr}
 800b13e:	b088      	sub	sp, #32
 800b140:	af02      	add	r7, sp, #8
 800b142:	60f8      	str	r0, [r7, #12]
 800b144:	60b9      	str	r1, [r7, #8]
 800b146:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b148:	68fb      	ldr	r3, [r7, #12]
 800b14a:	685b      	ldr	r3, [r3, #4]
 800b14c:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b150:	d111      	bne.n	800b176 <SPI_EndRxTransaction+0x3a>
 800b152:	68fb      	ldr	r3, [r7, #12]
 800b154:	689b      	ldr	r3, [r3, #8]
 800b156:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b15a:	d004      	beq.n	800b166 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b15c:	68fb      	ldr	r3, [r7, #12]
 800b15e:	689b      	ldr	r3, [r3, #8]
 800b160:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b164:	d107      	bne.n	800b176 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800b166:	68fb      	ldr	r3, [r7, #12]
 800b168:	681b      	ldr	r3, [r3, #0]
 800b16a:	681a      	ldr	r2, [r3, #0]
 800b16c:	68fb      	ldr	r3, [r7, #12]
 800b16e:	681b      	ldr	r3, [r3, #0]
 800b170:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b174:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b176:	68fb      	ldr	r3, [r7, #12]
 800b178:	685b      	ldr	r3, [r3, #4]
 800b17a:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b17e:	d112      	bne.n	800b1a6 <SPI_EndRxTransaction+0x6a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b180:	687b      	ldr	r3, [r7, #4]
 800b182:	9300      	str	r3, [sp, #0]
 800b184:	68bb      	ldr	r3, [r7, #8]
 800b186:	2200      	movs	r2, #0
 800b188:	2180      	movs	r1, #128	; 0x80
 800b18a:	68f8      	ldr	r0, [r7, #12]
 800b18c:	f7ff feb8 	bl	800af00 <SPI_WaitFlagStateUntilTimeout>
 800b190:	4603      	mov	r3, r0
 800b192:	2b00      	cmp	r3, #0
 800b194:	d021      	beq.n	800b1da <SPI_EndRxTransaction+0x9e>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b196:	68fb      	ldr	r3, [r7, #12]
 800b198:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b19a:	f043 0220 	orr.w	r2, r3, #32
 800b19e:	68fb      	ldr	r3, [r7, #12]
 800b1a0:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800b1a2:	2303      	movs	r3, #3
 800b1a4:	e03d      	b.n	800b222 <SPI_EndRxTransaction+0xe6>
    }
  }
  else /* SPI_MODE_SLAVE */
  {
    /* Timeout in µs */
    __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b1a6:	4b21      	ldr	r3, [pc, #132]	; (800b22c <SPI_EndRxTransaction+0xf0>)
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	4a21      	ldr	r2, [pc, #132]	; (800b230 <SPI_EndRxTransaction+0xf4>)
 800b1ac:	fba2 2303 	umull	r2, r3, r2, r3
 800b1b0:	0d5b      	lsrs	r3, r3, #21
 800b1b2:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b1b6:	fb02 f303 	mul.w	r3, r2, r3
 800b1ba:	617b      	str	r3, [r7, #20]
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b1bc:	697b      	ldr	r3, [r7, #20]
 800b1be:	2b00      	cmp	r3, #0
 800b1c0:	d00a      	beq.n	800b1d8 <SPI_EndRxTransaction+0x9c>
      {
        break;
      }
      count--;
 800b1c2:	697b      	ldr	r3, [r7, #20]
 800b1c4:	3b01      	subs	r3, #1
 800b1c6:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b1c8:	68fb      	ldr	r3, [r7, #12]
 800b1ca:	681b      	ldr	r3, [r3, #0]
 800b1cc:	689b      	ldr	r3, [r3, #8]
 800b1ce:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b1d2:	2b80      	cmp	r3, #128	; 0x80
 800b1d4:	d0f2      	beq.n	800b1bc <SPI_EndRxTransaction+0x80>
 800b1d6:	e000      	b.n	800b1da <SPI_EndRxTransaction+0x9e>
        break;
 800b1d8:	bf00      	nop
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800b1da:	68fb      	ldr	r3, [r7, #12]
 800b1dc:	685b      	ldr	r3, [r3, #4]
 800b1de:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b1e2:	d11d      	bne.n	800b220 <SPI_EndRxTransaction+0xe4>
 800b1e4:	68fb      	ldr	r3, [r7, #12]
 800b1e6:	689b      	ldr	r3, [r3, #8]
 800b1e8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800b1ec:	d004      	beq.n	800b1f8 <SPI_EndRxTransaction+0xbc>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 800b1ee:	68fb      	ldr	r3, [r7, #12]
 800b1f0:	689b      	ldr	r3, [r3, #8]
 800b1f2:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b1f6:	d113      	bne.n	800b220 <SPI_EndRxTransaction+0xe4>
  {
    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b1f8:	687b      	ldr	r3, [r7, #4]
 800b1fa:	9300      	str	r3, [sp, #0]
 800b1fc:	68bb      	ldr	r3, [r7, #8]
 800b1fe:	2200      	movs	r2, #0
 800b200:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b204:	68f8      	ldr	r0, [r7, #12]
 800b206:	f7ff ff03 	bl	800b010 <SPI_WaitFifoStateUntilTimeout>
 800b20a:	4603      	mov	r3, r0
 800b20c:	2b00      	cmp	r3, #0
 800b20e:	d007      	beq.n	800b220 <SPI_EndRxTransaction+0xe4>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b210:	68fb      	ldr	r3, [r7, #12]
 800b212:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b214:	f043 0220 	orr.w	r2, r3, #32
 800b218:	68fb      	ldr	r3, [r7, #12]
 800b21a:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800b21c:	2303      	movs	r3, #3
 800b21e:	e000      	b.n	800b222 <SPI_EndRxTransaction+0xe6>
    }
  }
  return HAL_OK;
 800b220:	2300      	movs	r3, #0
}
 800b222:	4618      	mov	r0, r3
 800b224:	3718      	adds	r7, #24
 800b226:	46bd      	mov	sp, r7
 800b228:	bd80      	pop	{r7, pc}
 800b22a:	bf00      	nop
 800b22c:	20000000 	.word	0x20000000
 800b230:	165e9f81 	.word	0x165e9f81

0800b234 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 800b234:	b580      	push	{r7, lr}
 800b236:	b088      	sub	sp, #32
 800b238:	af02      	add	r7, sp, #8
 800b23a:	60f8      	str	r0, [r7, #12]
 800b23c:	60b9      	str	r1, [r7, #8]
 800b23e:	607a      	str	r2, [r7, #4]
  /* Control if the TX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FTLVL, SPI_FTLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b240:	687b      	ldr	r3, [r7, #4]
 800b242:	9300      	str	r3, [sp, #0]
 800b244:	68bb      	ldr	r3, [r7, #8]
 800b246:	2200      	movs	r2, #0
 800b248:	f44f 51c0 	mov.w	r1, #6144	; 0x1800
 800b24c:	68f8      	ldr	r0, [r7, #12]
 800b24e:	f7ff fedf 	bl	800b010 <SPI_WaitFifoStateUntilTimeout>
 800b252:	4603      	mov	r3, r0
 800b254:	2b00      	cmp	r3, #0
 800b256:	d007      	beq.n	800b268 <SPI_EndRxTxTransaction+0x34>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b258:	68fb      	ldr	r3, [r7, #12]
 800b25a:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b25c:	f043 0220 	orr.w	r2, r3, #32
 800b260:	68fb      	ldr	r3, [r7, #12]
 800b262:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b264:	2303      	movs	r3, #3
 800b266:	e046      	b.n	800b2f6 <SPI_EndRxTxTransaction+0xc2>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 800b268:	4b25      	ldr	r3, [pc, #148]	; (800b300 <SPI_EndRxTxTransaction+0xcc>)
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	4a25      	ldr	r2, [pc, #148]	; (800b304 <SPI_EndRxTxTransaction+0xd0>)
 800b26e:	fba2 2303 	umull	r2, r3, r2, r3
 800b272:	0d5b      	lsrs	r3, r3, #21
 800b274:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 800b278:	fb02 f303 	mul.w	r3, r2, r3
 800b27c:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 800b27e:	68fb      	ldr	r3, [r7, #12]
 800b280:	685b      	ldr	r3, [r3, #4]
 800b282:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800b286:	d112      	bne.n	800b2ae <SPI_EndRxTxTransaction+0x7a>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 800b288:	687b      	ldr	r3, [r7, #4]
 800b28a:	9300      	str	r3, [sp, #0]
 800b28c:	68bb      	ldr	r3, [r7, #8]
 800b28e:	2200      	movs	r2, #0
 800b290:	2180      	movs	r1, #128	; 0x80
 800b292:	68f8      	ldr	r0, [r7, #12]
 800b294:	f7ff fe34 	bl	800af00 <SPI_WaitFlagStateUntilTimeout>
 800b298:	4603      	mov	r3, r0
 800b29a:	2b00      	cmp	r3, #0
 800b29c:	d016      	beq.n	800b2cc <SPI_EndRxTxTransaction+0x98>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b29e:	68fb      	ldr	r3, [r7, #12]
 800b2a0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b2a2:	f043 0220 	orr.w	r2, r3, #32
 800b2a6:	68fb      	ldr	r3, [r7, #12]
 800b2a8:	661a      	str	r2, [r3, #96]	; 0x60
      return HAL_TIMEOUT;
 800b2aa:	2303      	movs	r3, #3
 800b2ac:	e023      	b.n	800b2f6 <SPI_EndRxTxTransaction+0xc2>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800b2ae:	697b      	ldr	r3, [r7, #20]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d00a      	beq.n	800b2ca <SPI_EndRxTxTransaction+0x96>
      {
        break;
      }
      count--;
 800b2b4:	697b      	ldr	r3, [r7, #20]
 800b2b6:	3b01      	subs	r3, #1
 800b2b8:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 800b2ba:	68fb      	ldr	r3, [r7, #12]
 800b2bc:	681b      	ldr	r3, [r3, #0]
 800b2be:	689b      	ldr	r3, [r3, #8]
 800b2c0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b2c4:	2b80      	cmp	r3, #128	; 0x80
 800b2c6:	d0f2      	beq.n	800b2ae <SPI_EndRxTxTransaction+0x7a>
 800b2c8:	e000      	b.n	800b2cc <SPI_EndRxTxTransaction+0x98>
        break;
 800b2ca:	bf00      	nop
  }


  /* Control if the RX fifo is empty */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, Timeout, Tickstart) != HAL_OK)
 800b2cc:	687b      	ldr	r3, [r7, #4]
 800b2ce:	9300      	str	r3, [sp, #0]
 800b2d0:	68bb      	ldr	r3, [r7, #8]
 800b2d2:	2200      	movs	r2, #0
 800b2d4:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b2d8:	68f8      	ldr	r0, [r7, #12]
 800b2da:	f7ff fe99 	bl	800b010 <SPI_WaitFifoStateUntilTimeout>
 800b2de:	4603      	mov	r3, r0
 800b2e0:	2b00      	cmp	r3, #0
 800b2e2:	d007      	beq.n	800b2f4 <SPI_EndRxTxTransaction+0xc0>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b2e4:	68fb      	ldr	r3, [r7, #12]
 800b2e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b2e8:	f043 0220 	orr.w	r2, r3, #32
 800b2ec:	68fb      	ldr	r3, [r7, #12]
 800b2ee:	661a      	str	r2, [r3, #96]	; 0x60
    return HAL_TIMEOUT;
 800b2f0:	2303      	movs	r3, #3
 800b2f2:	e000      	b.n	800b2f6 <SPI_EndRxTxTransaction+0xc2>
  }

  return HAL_OK;
 800b2f4:	2300      	movs	r3, #0
}
 800b2f6:	4618      	mov	r0, r3
 800b2f8:	3718      	adds	r7, #24
 800b2fa:	46bd      	mov	sp, r7
 800b2fc:	bd80      	pop	{r7, pc}
 800b2fe:	bf00      	nop
 800b300:	20000000 	.word	0x20000000
 800b304:	165e9f81 	.word	0x165e9f81

0800b308 <SPI_CloseRxTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRxTx_ISR(SPI_HandleTypeDef *hspi)
{
 800b308:	b580      	push	{r7, lr}
 800b30a:	b084      	sub	sp, #16
 800b30c:	af00      	add	r7, sp, #0
 800b30e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800b310:	f7f7 ff44 	bl	800319c <HAL_GetTick>
 800b314:	60f8      	str	r0, [r7, #12]

  /* Disable ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, SPI_IT_ERR);
 800b316:	687b      	ldr	r3, [r7, #4]
 800b318:	681b      	ldr	r3, [r3, #0]
 800b31a:	685a      	ldr	r2, [r3, #4]
 800b31c:	687b      	ldr	r3, [r7, #4]
 800b31e:	681b      	ldr	r3, [r3, #0]
 800b320:	f022 0220 	bic.w	r2, r2, #32
 800b324:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b326:	68fa      	ldr	r2, [r7, #12]
 800b328:	2164      	movs	r1, #100	; 0x64
 800b32a:	6878      	ldr	r0, [r7, #4]
 800b32c:	f7ff ff82 	bl	800b234 <SPI_EndRxTxTransaction>
 800b330:	4603      	mov	r3, r0
 800b332:	2b00      	cmp	r3, #0
 800b334:	d005      	beq.n	800b342 <SPI_CloseRxTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b336:	687b      	ldr	r3, [r7, #4]
 800b338:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b33a:	f043 0220 	orr.w	r2, r3, #32
 800b33e:	687b      	ldr	r3, [r7, #4]
 800b340:	661a      	str	r2, [r3, #96]	; 0x60
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800b342:	687b      	ldr	r3, [r7, #4]
 800b344:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b346:	2b00      	cmp	r3, #0
 800b348:	d115      	bne.n	800b376 <SPI_CloseRxTx_ISR+0x6e>
    {
      if (hspi->State == HAL_SPI_STATE_BUSY_RX)
 800b34a:	687b      	ldr	r3, [r7, #4]
 800b34c:	f893 305d 	ldrb.w	r3, [r3, #93]	; 0x5d
 800b350:	b2db      	uxtb	r3, r3
 800b352:	2b04      	cmp	r3, #4
 800b354:	d107      	bne.n	800b366 <SPI_CloseRxTx_ISR+0x5e>
      {
        hspi->State = HAL_SPI_STATE_READY;
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	2201      	movs	r2, #1
 800b35a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
        hspi->RxCpltCallback(hspi);
#else
        HAL_SPI_RxCpltCallback(hspi);
 800b35e:	6878      	ldr	r0, [r7, #4]
 800b360:	f011 fa2c 	bl	801c7bc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800b364:	e00e      	b.n	800b384 <SPI_CloseRxTx_ISR+0x7c>
        hspi->State = HAL_SPI_STATE_READY;
 800b366:	687b      	ldr	r3, [r7, #4]
 800b368:	2201      	movs	r2, #1
 800b36a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
        HAL_SPI_TxRxCpltCallback(hspi);
 800b36e:	6878      	ldr	r0, [r7, #4]
 800b370:	f011 fa40 	bl	801c7f4 <HAL_SPI_TxRxCpltCallback>
}
 800b374:	e006      	b.n	800b384 <SPI_CloseRxTx_ISR+0x7c>
      hspi->State = HAL_SPI_STATE_READY;
 800b376:	687b      	ldr	r3, [r7, #4]
 800b378:	2201      	movs	r2, #1
 800b37a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
      HAL_SPI_ErrorCallback(hspi);
 800b37e:	6878      	ldr	r0, [r7, #4]
 800b380:	f011 fa7c 	bl	801c87c <HAL_SPI_ErrorCallback>
}
 800b384:	bf00      	nop
 800b386:	3710      	adds	r7, #16
 800b388:	46bd      	mov	sp, r7
 800b38a:	bd80      	pop	{r7, pc}

0800b38c <SPI_CloseRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseRx_ISR(SPI_HandleTypeDef *hspi)
{
 800b38c:	b580      	push	{r7, lr}
 800b38e:	b082      	sub	sp, #8
 800b390:	af00      	add	r7, sp, #0
 800b392:	6078      	str	r0, [r7, #4]
  /* Disable RXNE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_RXNE | SPI_IT_ERR));
 800b394:	687b      	ldr	r3, [r7, #4]
 800b396:	681b      	ldr	r3, [r3, #0]
 800b398:	685a      	ldr	r2, [r3, #4]
 800b39a:	687b      	ldr	r3, [r7, #4]
 800b39c:	681b      	ldr	r3, [r3, #0]
 800b39e:	f022 0260 	bic.w	r2, r2, #96	; 0x60
 800b3a2:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800b3a4:	f7f7 fefa 	bl	800319c <HAL_GetTick>
 800b3a8:	4603      	mov	r3, r0
 800b3aa:	461a      	mov	r2, r3
 800b3ac:	2164      	movs	r1, #100	; 0x64
 800b3ae:	6878      	ldr	r0, [r7, #4]
 800b3b0:	f7ff fec4 	bl	800b13c <SPI_EndRxTransaction>
 800b3b4:	4603      	mov	r3, r0
 800b3b6:	2b00      	cmp	r3, #0
 800b3b8:	d005      	beq.n	800b3c6 <SPI_CloseRx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b3ba:	687b      	ldr	r3, [r7, #4]
 800b3bc:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b3be:	f043 0220 	orr.w	r2, r3, #32
 800b3c2:	687b      	ldr	r3, [r7, #4]
 800b3c4:	661a      	str	r2, [r3, #96]	; 0x60
  }
  hspi->State = HAL_SPI_STATE_READY;
 800b3c6:	687b      	ldr	r3, [r7, #4]
 800b3c8:	2201      	movs	r2, #1
 800b3ca:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
  else
  {
#endif /* USE_SPI_CRC */
    if (hspi->ErrorCode == HAL_SPI_ERROR_NONE)
 800b3ce:	687b      	ldr	r3, [r7, #4]
 800b3d0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b3d2:	2b00      	cmp	r3, #0
 800b3d4:	d103      	bne.n	800b3de <SPI_CloseRx_ISR+0x52>
    {
      /* Call user Rx complete callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
      hspi->RxCpltCallback(hspi);
#else
      HAL_SPI_RxCpltCallback(hspi);
 800b3d6:	6878      	ldr	r0, [r7, #4]
 800b3d8:	f011 f9f0 	bl	801c7bc <HAL_SPI_RxCpltCallback>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
    }
#if (USE_SPI_CRC != 0U)
  }
#endif /* USE_SPI_CRC */
}
 800b3dc:	e002      	b.n	800b3e4 <SPI_CloseRx_ISR+0x58>
      HAL_SPI_ErrorCallback(hspi);
 800b3de:	6878      	ldr	r0, [r7, #4]
 800b3e0:	f011 fa4c 	bl	801c87c <HAL_SPI_ErrorCallback>
}
 800b3e4:	bf00      	nop
 800b3e6:	3708      	adds	r7, #8
 800b3e8:	46bd      	mov	sp, r7
 800b3ea:	bd80      	pop	{r7, pc}

0800b3ec <SPI_CloseTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_CloseTx_ISR(SPI_HandleTypeDef *hspi)
{
 800b3ec:	b580      	push	{r7, lr}
 800b3ee:	b084      	sub	sp, #16
 800b3f0:	af00      	add	r7, sp, #0
 800b3f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 800b3f4:	f7f7 fed2 	bl	800319c <HAL_GetTick>
 800b3f8:	60f8      	str	r0, [r7, #12]

  /* Disable TXE and ERR interrupt */
  __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_ERR));
 800b3fa:	687b      	ldr	r3, [r7, #4]
 800b3fc:	681b      	ldr	r3, [r3, #0]
 800b3fe:	685a      	ldr	r2, [r3, #4]
 800b400:	687b      	ldr	r3, [r7, #4]
 800b402:	681b      	ldr	r3, [r3, #0]
 800b404:	f022 02a0 	bic.w	r2, r2, #160	; 0xa0
 800b408:	605a      	str	r2, [r3, #4]

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, tickstart) != HAL_OK)
 800b40a:	68fa      	ldr	r2, [r7, #12]
 800b40c:	2164      	movs	r1, #100	; 0x64
 800b40e:	6878      	ldr	r0, [r7, #4]
 800b410:	f7ff ff10 	bl	800b234 <SPI_EndRxTxTransaction>
 800b414:	4603      	mov	r3, r0
 800b416:	2b00      	cmp	r3, #0
 800b418:	d005      	beq.n	800b426 <SPI_CloseTx_ISR+0x3a>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b41e:	f043 0220 	orr.w	r2, r3, #32
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800b426:	687b      	ldr	r3, [r7, #4]
 800b428:	689b      	ldr	r3, [r3, #8]
 800b42a:	2b00      	cmp	r3, #0
 800b42c:	d10a      	bne.n	800b444 <SPI_CloseTx_ISR+0x58>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 800b42e:	2300      	movs	r3, #0
 800b430:	60bb      	str	r3, [r7, #8]
 800b432:	687b      	ldr	r3, [r7, #4]
 800b434:	681b      	ldr	r3, [r3, #0]
 800b436:	68db      	ldr	r3, [r3, #12]
 800b438:	60bb      	str	r3, [r7, #8]
 800b43a:	687b      	ldr	r3, [r7, #4]
 800b43c:	681b      	ldr	r3, [r3, #0]
 800b43e:	689b      	ldr	r3, [r3, #8]
 800b440:	60bb      	str	r3, [r7, #8]
 800b442:	68bb      	ldr	r3, [r7, #8]
  }

  hspi->State = HAL_SPI_STATE_READY;
 800b444:	687b      	ldr	r3, [r7, #4]
 800b446:	2201      	movs	r2, #1
 800b448:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 800b44c:	687b      	ldr	r3, [r7, #4]
 800b44e:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b450:	2b00      	cmp	r3, #0
 800b452:	d003      	beq.n	800b45c <SPI_CloseTx_ISR+0x70>
  {
    /* Call user error callback */
#if (USE_HAL_SPI_REGISTER_CALLBACKS == 1U)
    hspi->ErrorCallback(hspi);
#else
    HAL_SPI_ErrorCallback(hspi);
 800b454:	6878      	ldr	r0, [r7, #4]
 800b456:	f011 fa11 	bl	801c87c <HAL_SPI_ErrorCallback>
    hspi->TxCpltCallback(hspi);
#else
    HAL_SPI_TxCpltCallback(hspi);
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }
}
 800b45a:	e002      	b.n	800b462 <SPI_CloseTx_ISR+0x76>
    HAL_SPI_TxCpltCallback(hspi);
 800b45c:	6878      	ldr	r0, [r7, #4]
 800b45e:	f7ff f957 	bl	800a710 <HAL_SPI_TxCpltCallback>
}
 800b462:	bf00      	nop
 800b464:	3710      	adds	r7, #16
 800b466:	46bd      	mov	sp, r7
 800b468:	bd80      	pop	{r7, pc}
	...

0800b46c <SPI_AbortRx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortRx_ISR(SPI_HandleTypeDef *hspi)
{
 800b46c:	b580      	push	{r7, lr}
 800b46e:	b086      	sub	sp, #24
 800b470:	af02      	add	r7, sp, #8
 800b472:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b474:	687b      	ldr	r3, [r7, #4]
 800b476:	681b      	ldr	r3, [r3, #0]
 800b478:	681a      	ldr	r2, [r3, #0]
 800b47a:	687b      	ldr	r3, [r7, #4]
 800b47c:	681b      	ldr	r3, [r3, #0]
 800b47e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b482:	601a      	str	r2, [r3, #0]

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800b484:	4b27      	ldr	r3, [pc, #156]	; (800b524 <SPI_AbortRx_ISR+0xb8>)
 800b486:	681b      	ldr	r3, [r3, #0]
 800b488:	4a27      	ldr	r2, [pc, #156]	; (800b528 <SPI_AbortRx_ISR+0xbc>)
 800b48a:	fba2 2303 	umull	r2, r3, r2, r3
 800b48e:	0a5b      	lsrs	r3, r3, #9
 800b490:	2264      	movs	r2, #100	; 0x64
 800b492:	fb02 f303 	mul.w	r3, r2, r3
 800b496:	60fb      	str	r3, [r7, #12]

  /* Disable RXNEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXNEIE));
 800b498:	687b      	ldr	r3, [r7, #4]
 800b49a:	681b      	ldr	r3, [r3, #0]
 800b49c:	685a      	ldr	r2, [r3, #4]
 800b49e:	687b      	ldr	r3, [r7, #4]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b4a6:	605a      	str	r2, [r3, #4]

  /* Check RXNEIE is disabled */
  do
  {
    if (count == 0U)
 800b4a8:	68fb      	ldr	r3, [r7, #12]
 800b4aa:	2b00      	cmp	r3, #0
 800b4ac:	d106      	bne.n	800b4bc <SPI_AbortRx_ISR+0x50>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b4ae:	687b      	ldr	r3, [r7, #4]
 800b4b0:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b4b2:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b4b6:	687b      	ldr	r3, [r7, #4]
 800b4b8:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 800b4ba:	e009      	b.n	800b4d0 <SPI_AbortRx_ISR+0x64>
    }
    count--;
 800b4bc:	68fb      	ldr	r3, [r7, #12]
 800b4be:	3b01      	subs	r3, #1
 800b4c0:	60fb      	str	r3, [r7, #12]
  } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
 800b4c2:	687b      	ldr	r3, [r7, #4]
 800b4c4:	681b      	ldr	r3, [r3, #0]
 800b4c6:	685b      	ldr	r3, [r3, #4]
 800b4c8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b4cc:	2b40      	cmp	r3, #64	; 0x40
 800b4ce:	d0eb      	beq.n	800b4a8 <SPI_AbortRx_ISR+0x3c>

  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800b4d0:	f7f7 fe64 	bl	800319c <HAL_GetTick>
 800b4d4:	4603      	mov	r3, r0
 800b4d6:	9300      	str	r3, [sp, #0]
 800b4d8:	2364      	movs	r3, #100	; 0x64
 800b4da:	2200      	movs	r2, #0
 800b4dc:	2180      	movs	r1, #128	; 0x80
 800b4de:	6878      	ldr	r0, [r7, #4]
 800b4e0:	f7ff fd0e 	bl	800af00 <SPI_WaitFlagStateUntilTimeout>
 800b4e4:	4603      	mov	r3, r0
 800b4e6:	2b00      	cmp	r3, #0
 800b4e8:	d002      	beq.n	800b4f0 <SPI_AbortRx_ISR+0x84>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800b4ea:	687b      	ldr	r3, [r7, #4]
 800b4ec:	2240      	movs	r2, #64	; 0x40
 800b4ee:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800b4f0:	f7f7 fe54 	bl	800319c <HAL_GetTick>
 800b4f4:	4603      	mov	r3, r0
 800b4f6:	9300      	str	r3, [sp, #0]
 800b4f8:	2364      	movs	r3, #100	; 0x64
 800b4fa:	2200      	movs	r2, #0
 800b4fc:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b500:	6878      	ldr	r0, [r7, #4]
 800b502:	f7ff fd85 	bl	800b010 <SPI_WaitFifoStateUntilTimeout>
 800b506:	4603      	mov	r3, r0
 800b508:	2b00      	cmp	r3, #0
 800b50a:	d002      	beq.n	800b512 <SPI_AbortRx_ISR+0xa6>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800b50c:	687b      	ldr	r3, [r7, #4]
 800b50e:	2240      	movs	r2, #64	; 0x40
 800b510:	661a      	str	r2, [r3, #96]	; 0x60
  }

  hspi->State = HAL_SPI_STATE_ABORT;
 800b512:	687b      	ldr	r3, [r7, #4]
 800b514:	2207      	movs	r2, #7
 800b516:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
}
 800b51a:	bf00      	nop
 800b51c:	3710      	adds	r7, #16
 800b51e:	46bd      	mov	sp, r7
 800b520:	bd80      	pop	{r7, pc}
 800b522:	bf00      	nop
 800b524:	20000000 	.word	0x20000000
 800b528:	057619f1 	.word	0x057619f1

0800b52c <SPI_AbortTx_ISR>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval None
  */
static void SPI_AbortTx_ISR(SPI_HandleTypeDef *hspi)
{
 800b52c:	b580      	push	{r7, lr}
 800b52e:	b086      	sub	sp, #24
 800b530:	af02      	add	r7, sp, #8
 800b532:	6078      	str	r0, [r7, #4]
  __IO uint32_t count;

  count = SPI_DEFAULT_TIMEOUT * (SystemCoreClock / 24U / 1000U);
 800b534:	4b4c      	ldr	r3, [pc, #304]	; (800b668 <SPI_AbortTx_ISR+0x13c>)
 800b536:	681b      	ldr	r3, [r3, #0]
 800b538:	4a4c      	ldr	r2, [pc, #304]	; (800b66c <SPI_AbortTx_ISR+0x140>)
 800b53a:	fba2 2303 	umull	r2, r3, r2, r3
 800b53e:	0a5b      	lsrs	r3, r3, #9
 800b540:	2264      	movs	r2, #100	; 0x64
 800b542:	fb02 f303 	mul.w	r3, r2, r3
 800b546:	60fb      	str	r3, [r7, #12]

  /* Disable TXEIE interrupt */
  CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_TXEIE));
 800b548:	687b      	ldr	r3, [r7, #4]
 800b54a:	681b      	ldr	r3, [r3, #0]
 800b54c:	685a      	ldr	r2, [r3, #4]
 800b54e:	687b      	ldr	r3, [r7, #4]
 800b550:	681b      	ldr	r3, [r3, #0]
 800b552:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b556:	605a      	str	r2, [r3, #4]

  /* Check TXEIE is disabled */
  do
  {
    if (count == 0U)
 800b558:	68fb      	ldr	r3, [r7, #12]
 800b55a:	2b00      	cmp	r3, #0
 800b55c:	d106      	bne.n	800b56c <SPI_AbortTx_ISR+0x40>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b55e:	687b      	ldr	r3, [r7, #4]
 800b560:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b562:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b566:	687b      	ldr	r3, [r7, #4]
 800b568:	661a      	str	r2, [r3, #96]	; 0x60
      break;
 800b56a:	e009      	b.n	800b580 <SPI_AbortTx_ISR+0x54>
    }
    count--;
 800b56c:	68fb      	ldr	r3, [r7, #12]
 800b56e:	3b01      	subs	r3, #1
 800b570:	60fb      	str	r3, [r7, #12]
  } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_TXEIE));
 800b572:	687b      	ldr	r3, [r7, #4]
 800b574:	681b      	ldr	r3, [r3, #0]
 800b576:	685b      	ldr	r3, [r3, #4]
 800b578:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b57c:	2b80      	cmp	r3, #128	; 0x80
 800b57e:	d0eb      	beq.n	800b558 <SPI_AbortTx_ISR+0x2c>

  if (SPI_EndRxTxTransaction(hspi, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800b580:	f7f7 fe0c 	bl	800319c <HAL_GetTick>
 800b584:	4603      	mov	r3, r0
 800b586:	461a      	mov	r2, r3
 800b588:	2164      	movs	r1, #100	; 0x64
 800b58a:	6878      	ldr	r0, [r7, #4]
 800b58c:	f7ff fe52 	bl	800b234 <SPI_EndRxTxTransaction>
 800b590:	4603      	mov	r3, r0
 800b592:	2b00      	cmp	r3, #0
 800b594:	d002      	beq.n	800b59c <SPI_AbortTx_ISR+0x70>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800b596:	687b      	ldr	r3, [r7, #4]
 800b598:	2240      	movs	r2, #64	; 0x40
 800b59a:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Disable SPI Peripheral */
  __HAL_SPI_DISABLE(hspi);
 800b59c:	687b      	ldr	r3, [r7, #4]
 800b59e:	681b      	ldr	r3, [r3, #0]
 800b5a0:	681a      	ldr	r2, [r3, #0]
 800b5a2:	687b      	ldr	r3, [r7, #4]
 800b5a4:	681b      	ldr	r3, [r3, #0]
 800b5a6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b5aa:	601a      	str	r2, [r3, #0]

  /* Empty the FRLVL fifo */
  if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800b5ac:	f7f7 fdf6 	bl	800319c <HAL_GetTick>
 800b5b0:	4603      	mov	r3, r0
 800b5b2:	9300      	str	r3, [sp, #0]
 800b5b4:	2364      	movs	r3, #100	; 0x64
 800b5b6:	2200      	movs	r2, #0
 800b5b8:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b5bc:	6878      	ldr	r0, [r7, #4]
 800b5be:	f7ff fd27 	bl	800b010 <SPI_WaitFifoStateUntilTimeout>
 800b5c2:	4603      	mov	r3, r0
 800b5c4:	2b00      	cmp	r3, #0
 800b5c6:	d002      	beq.n	800b5ce <SPI_AbortTx_ISR+0xa2>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800b5c8:	687b      	ldr	r3, [r7, #4]
 800b5ca:	2240      	movs	r2, #64	; 0x40
 800b5cc:	661a      	str	r2, [r3, #96]	; 0x60
  }

  /* Check case of Full-Duplex Mode and disable directly RXNEIE interrupt */
  if (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE))
 800b5ce:	687b      	ldr	r3, [r7, #4]
 800b5d0:	681b      	ldr	r3, [r3, #0]
 800b5d2:	685b      	ldr	r3, [r3, #4]
 800b5d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b5d8:	2b40      	cmp	r3, #64	; 0x40
 800b5da:	d13c      	bne.n	800b656 <SPI_AbortTx_ISR+0x12a>
  {
    /* Disable RXNEIE interrupt */
    CLEAR_BIT(hspi->Instance->CR2, (SPI_CR2_RXNEIE));
 800b5dc:	687b      	ldr	r3, [r7, #4]
 800b5de:	681b      	ldr	r3, [r3, #0]
 800b5e0:	685a      	ldr	r2, [r3, #4]
 800b5e2:	687b      	ldr	r3, [r7, #4]
 800b5e4:	681b      	ldr	r3, [r3, #0]
 800b5e6:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800b5ea:	605a      	str	r2, [r3, #4]

    /* Check RXNEIE is disabled */
    do
    {
      if (count == 0U)
 800b5ec:	68fb      	ldr	r3, [r7, #12]
 800b5ee:	2b00      	cmp	r3, #0
 800b5f0:	d106      	bne.n	800b600 <SPI_AbortTx_ISR+0xd4>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_ABORT);
 800b5f2:	687b      	ldr	r3, [r7, #4]
 800b5f4:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800b5f6:	f043 0240 	orr.w	r2, r3, #64	; 0x40
 800b5fa:	687b      	ldr	r3, [r7, #4]
 800b5fc:	661a      	str	r2, [r3, #96]	; 0x60
        break;
 800b5fe:	e009      	b.n	800b614 <SPI_AbortTx_ISR+0xe8>
      }
      count--;
 800b600:	68fb      	ldr	r3, [r7, #12]
 800b602:	3b01      	subs	r3, #1
 800b604:	60fb      	str	r3, [r7, #12]
    } while (HAL_IS_BIT_SET(hspi->Instance->CR2, SPI_CR2_RXNEIE));
 800b606:	687b      	ldr	r3, [r7, #4]
 800b608:	681b      	ldr	r3, [r3, #0]
 800b60a:	685b      	ldr	r3, [r3, #4]
 800b60c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b610:	2b40      	cmp	r3, #64	; 0x40
 800b612:	d0eb      	beq.n	800b5ec <SPI_AbortTx_ISR+0xc0>

    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800b614:	f7f7 fdc2 	bl	800319c <HAL_GetTick>
 800b618:	4603      	mov	r3, r0
 800b61a:	9300      	str	r3, [sp, #0]
 800b61c:	2364      	movs	r3, #100	; 0x64
 800b61e:	2200      	movs	r2, #0
 800b620:	2180      	movs	r1, #128	; 0x80
 800b622:	6878      	ldr	r0, [r7, #4]
 800b624:	f7ff fc6c 	bl	800af00 <SPI_WaitFlagStateUntilTimeout>
 800b628:	4603      	mov	r3, r0
 800b62a:	2b00      	cmp	r3, #0
 800b62c:	d002      	beq.n	800b634 <SPI_AbortTx_ISR+0x108>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800b62e:	687b      	ldr	r3, [r7, #4]
 800b630:	2240      	movs	r2, #64	; 0x40
 800b632:	661a      	str	r2, [r3, #96]	; 0x60
    }

    /* Empty the FRLVL fifo */
    if (SPI_WaitFifoStateUntilTimeout(hspi, SPI_FLAG_FRLVL, SPI_FRLVL_EMPTY, SPI_DEFAULT_TIMEOUT, HAL_GetTick()) != HAL_OK)
 800b634:	f7f7 fdb2 	bl	800319c <HAL_GetTick>
 800b638:	4603      	mov	r3, r0
 800b63a:	9300      	str	r3, [sp, #0]
 800b63c:	2364      	movs	r3, #100	; 0x64
 800b63e:	2200      	movs	r2, #0
 800b640:	f44f 61c0 	mov.w	r1, #1536	; 0x600
 800b644:	6878      	ldr	r0, [r7, #4]
 800b646:	f7ff fce3 	bl	800b010 <SPI_WaitFifoStateUntilTimeout>
 800b64a:	4603      	mov	r3, r0
 800b64c:	2b00      	cmp	r3, #0
 800b64e:	d002      	beq.n	800b656 <SPI_AbortTx_ISR+0x12a>
    {
      hspi->ErrorCode = HAL_SPI_ERROR_ABORT;
 800b650:	687b      	ldr	r3, [r7, #4]
 800b652:	2240      	movs	r2, #64	; 0x40
 800b654:	661a      	str	r2, [r3, #96]	; 0x60
    }
  }
  hspi->State = HAL_SPI_STATE_ABORT;
 800b656:	687b      	ldr	r3, [r7, #4]
 800b658:	2207      	movs	r2, #7
 800b65a:	f883 205d 	strb.w	r2, [r3, #93]	; 0x5d
}
 800b65e:	bf00      	nop
 800b660:	3710      	adds	r7, #16
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
 800b666:	bf00      	nop
 800b668:	20000000 	.word	0x20000000
 800b66c:	057619f1 	.word	0x057619f1

0800b670 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 800b670:	b580      	push	{r7, lr}
 800b672:	b082      	sub	sp, #8
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800b678:	687b      	ldr	r3, [r7, #4]
 800b67a:	2b00      	cmp	r3, #0
 800b67c:	d101      	bne.n	800b682 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800b67e:	2301      	movs	r3, #1
 800b680:	e049      	b.n	800b716 <HAL_TIM_Base_Init+0xa6>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800b682:	687b      	ldr	r3, [r7, #4]
 800b684:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b688:	b2db      	uxtb	r3, r3
 800b68a:	2b00      	cmp	r3, #0
 800b68c:	d106      	bne.n	800b69c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	2200      	movs	r2, #0
 800b692:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800b696:	6878      	ldr	r0, [r7, #4]
 800b698:	f000 f841 	bl	800b71e <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2202      	movs	r2, #2
 800b6a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800b6a4:	687b      	ldr	r3, [r7, #4]
 800b6a6:	681a      	ldr	r2, [r3, #0]
 800b6a8:	687b      	ldr	r3, [r7, #4]
 800b6aa:	3304      	adds	r3, #4
 800b6ac:	4619      	mov	r1, r3
 800b6ae:	4610      	mov	r0, r2
 800b6b0:	f000 f9e8 	bl	800ba84 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800b6b4:	687b      	ldr	r3, [r7, #4]
 800b6b6:	2201      	movs	r2, #1
 800b6b8:	f883 2048 	strb.w	r2, [r3, #72]	; 0x48

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b6bc:	687b      	ldr	r3, [r7, #4]
 800b6be:	2201      	movs	r2, #1
 800b6c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2201      	movs	r2, #1
 800b6c8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800b6cc:	687b      	ldr	r3, [r7, #4]
 800b6ce:	2201      	movs	r2, #1
 800b6d0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800b6d4:	687b      	ldr	r3, [r7, #4]
 800b6d6:	2201      	movs	r2, #1
 800b6d8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	2201      	movs	r2, #1
 800b6e0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800b6e4:	687b      	ldr	r3, [r7, #4]
 800b6e6:	2201      	movs	r2, #1
 800b6e8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	2201      	movs	r2, #1
 800b6f0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800b6f4:	687b      	ldr	r3, [r7, #4]
 800b6f6:	2201      	movs	r2, #1
 800b6f8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	2201      	movs	r2, #1
 800b700:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
 800b704:	687b      	ldr	r3, [r7, #4]
 800b706:	2201      	movs	r2, #1
 800b708:	f883 2047 	strb.w	r2, [r3, #71]	; 0x47

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800b70c:	687b      	ldr	r3, [r7, #4]
 800b70e:	2201      	movs	r2, #1
 800b710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800b714:	2300      	movs	r3, #0
}
 800b716:	4618      	mov	r0, r3
 800b718:	3708      	adds	r7, #8
 800b71a:	46bd      	mov	sp, r7
 800b71c:	bd80      	pop	{r7, pc}

0800b71e <HAL_TIM_Base_MspInit>:
  * @brief  Initializes the TIM Base MSP.
  * @param  htim TIM Base handle
  * @retval None
  */
__weak void HAL_TIM_Base_MspInit(TIM_HandleTypeDef *htim)
{
 800b71e:	b480      	push	{r7}
 800b720:	b083      	sub	sp, #12
 800b722:	af00      	add	r7, sp, #0
 800b724:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_Base_MspInit could be implemented in the user file
   */
}
 800b726:	bf00      	nop
 800b728:	370c      	adds	r7, #12
 800b72a:	46bd      	mov	sp, r7
 800b72c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b730:	4770      	bx	lr
	...

0800b734 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800b734:	b480      	push	{r7}
 800b736:	b085      	sub	sp, #20
 800b738:	af00      	add	r7, sp, #0
 800b73a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800b73c:	687b      	ldr	r3, [r7, #4]
 800b73e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800b742:	b2db      	uxtb	r3, r3
 800b744:	2b01      	cmp	r3, #1
 800b746:	d001      	beq.n	800b74c <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800b748:	2301      	movs	r3, #1
 800b74a:	e054      	b.n	800b7f6 <HAL_TIM_Base_Start_IT+0xc2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800b74c:	687b      	ldr	r3, [r7, #4]
 800b74e:	2202      	movs	r2, #2
 800b750:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800b754:	687b      	ldr	r3, [r7, #4]
 800b756:	681b      	ldr	r3, [r3, #0]
 800b758:	68da      	ldr	r2, [r3, #12]
 800b75a:	687b      	ldr	r3, [r7, #4]
 800b75c:	681b      	ldr	r3, [r3, #0]
 800b75e:	f042 0201 	orr.w	r2, r2, #1
 800b762:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800b764:	687b      	ldr	r3, [r7, #4]
 800b766:	681b      	ldr	r3, [r3, #0]
 800b768:	4a26      	ldr	r2, [pc, #152]	; (800b804 <HAL_TIM_Base_Start_IT+0xd0>)
 800b76a:	4293      	cmp	r3, r2
 800b76c:	d022      	beq.n	800b7b4 <HAL_TIM_Base_Start_IT+0x80>
 800b76e:	687b      	ldr	r3, [r7, #4]
 800b770:	681b      	ldr	r3, [r3, #0]
 800b772:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800b776:	d01d      	beq.n	800b7b4 <HAL_TIM_Base_Start_IT+0x80>
 800b778:	687b      	ldr	r3, [r7, #4]
 800b77a:	681b      	ldr	r3, [r3, #0]
 800b77c:	4a22      	ldr	r2, [pc, #136]	; (800b808 <HAL_TIM_Base_Start_IT+0xd4>)
 800b77e:	4293      	cmp	r3, r2
 800b780:	d018      	beq.n	800b7b4 <HAL_TIM_Base_Start_IT+0x80>
 800b782:	687b      	ldr	r3, [r7, #4]
 800b784:	681b      	ldr	r3, [r3, #0]
 800b786:	4a21      	ldr	r2, [pc, #132]	; (800b80c <HAL_TIM_Base_Start_IT+0xd8>)
 800b788:	4293      	cmp	r3, r2
 800b78a:	d013      	beq.n	800b7b4 <HAL_TIM_Base_Start_IT+0x80>
 800b78c:	687b      	ldr	r3, [r7, #4]
 800b78e:	681b      	ldr	r3, [r3, #0]
 800b790:	4a1f      	ldr	r2, [pc, #124]	; (800b810 <HAL_TIM_Base_Start_IT+0xdc>)
 800b792:	4293      	cmp	r3, r2
 800b794:	d00e      	beq.n	800b7b4 <HAL_TIM_Base_Start_IT+0x80>
 800b796:	687b      	ldr	r3, [r7, #4]
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	4a1e      	ldr	r2, [pc, #120]	; (800b814 <HAL_TIM_Base_Start_IT+0xe0>)
 800b79c:	4293      	cmp	r3, r2
 800b79e:	d009      	beq.n	800b7b4 <HAL_TIM_Base_Start_IT+0x80>
 800b7a0:	687b      	ldr	r3, [r7, #4]
 800b7a2:	681b      	ldr	r3, [r3, #0]
 800b7a4:	4a1c      	ldr	r2, [pc, #112]	; (800b818 <HAL_TIM_Base_Start_IT+0xe4>)
 800b7a6:	4293      	cmp	r3, r2
 800b7a8:	d004      	beq.n	800b7b4 <HAL_TIM_Base_Start_IT+0x80>
 800b7aa:	687b      	ldr	r3, [r7, #4]
 800b7ac:	681b      	ldr	r3, [r3, #0]
 800b7ae:	4a1b      	ldr	r2, [pc, #108]	; (800b81c <HAL_TIM_Base_Start_IT+0xe8>)
 800b7b0:	4293      	cmp	r3, r2
 800b7b2:	d115      	bne.n	800b7e0 <HAL_TIM_Base_Start_IT+0xac>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800b7b4:	687b      	ldr	r3, [r7, #4]
 800b7b6:	681b      	ldr	r3, [r3, #0]
 800b7b8:	689a      	ldr	r2, [r3, #8]
 800b7ba:	4b19      	ldr	r3, [pc, #100]	; (800b820 <HAL_TIM_Base_Start_IT+0xec>)
 800b7bc:	4013      	ands	r3, r2
 800b7be:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7c0:	68fb      	ldr	r3, [r7, #12]
 800b7c2:	2b06      	cmp	r3, #6
 800b7c4:	d015      	beq.n	800b7f2 <HAL_TIM_Base_Start_IT+0xbe>
 800b7c6:	68fb      	ldr	r3, [r7, #12]
 800b7c8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b7cc:	d011      	beq.n	800b7f2 <HAL_TIM_Base_Start_IT+0xbe>
    {
      __HAL_TIM_ENABLE(htim);
 800b7ce:	687b      	ldr	r3, [r7, #4]
 800b7d0:	681b      	ldr	r3, [r3, #0]
 800b7d2:	681a      	ldr	r2, [r3, #0]
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	681b      	ldr	r3, [r3, #0]
 800b7d8:	f042 0201 	orr.w	r2, r2, #1
 800b7dc:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7de:	e008      	b.n	800b7f2 <HAL_TIM_Base_Start_IT+0xbe>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800b7e0:	687b      	ldr	r3, [r7, #4]
 800b7e2:	681b      	ldr	r3, [r3, #0]
 800b7e4:	681a      	ldr	r2, [r3, #0]
 800b7e6:	687b      	ldr	r3, [r7, #4]
 800b7e8:	681b      	ldr	r3, [r3, #0]
 800b7ea:	f042 0201 	orr.w	r2, r2, #1
 800b7ee:	601a      	str	r2, [r3, #0]
 800b7f0:	e000      	b.n	800b7f4 <HAL_TIM_Base_Start_IT+0xc0>
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800b7f2:	bf00      	nop
  }

  /* Return function status */
  return HAL_OK;
 800b7f4:	2300      	movs	r3, #0
}
 800b7f6:	4618      	mov	r0, r3
 800b7f8:	3714      	adds	r7, #20
 800b7fa:	46bd      	mov	sp, r7
 800b7fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800b800:	4770      	bx	lr
 800b802:	bf00      	nop
 800b804:	40010000 	.word	0x40010000
 800b808:	40000400 	.word	0x40000400
 800b80c:	40000800 	.word	0x40000800
 800b810:	40000c00 	.word	0x40000c00
 800b814:	40010400 	.word	0x40010400
 800b818:	40014000 	.word	0x40014000
 800b81c:	40001800 	.word	0x40001800
 800b820:	00010007 	.word	0x00010007

0800b824 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800b824:	b580      	push	{r7, lr}
 800b826:	b084      	sub	sp, #16
 800b828:	af00      	add	r7, sp, #0
 800b82a:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 800b82c:	687b      	ldr	r3, [r7, #4]
 800b82e:	681b      	ldr	r3, [r3, #0]
 800b830:	68db      	ldr	r3, [r3, #12]
 800b832:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800b834:	687b      	ldr	r3, [r7, #4]
 800b836:	681b      	ldr	r3, [r3, #0]
 800b838:	691b      	ldr	r3, [r3, #16]
 800b83a:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 800b83c:	68bb      	ldr	r3, [r7, #8]
 800b83e:	f003 0302 	and.w	r3, r3, #2
 800b842:	2b00      	cmp	r3, #0
 800b844:	d020      	beq.n	800b888 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800b846:	68fb      	ldr	r3, [r7, #12]
 800b848:	f003 0302 	and.w	r3, r3, #2
 800b84c:	2b00      	cmp	r3, #0
 800b84e:	d01b      	beq.n	800b888 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 800b850:	687b      	ldr	r3, [r7, #4]
 800b852:	681b      	ldr	r3, [r3, #0]
 800b854:	f06f 0202 	mvn.w	r2, #2
 800b858:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800b85a:	687b      	ldr	r3, [r7, #4]
 800b85c:	2201      	movs	r2, #1
 800b85e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800b860:	687b      	ldr	r3, [r7, #4]
 800b862:	681b      	ldr	r3, [r3, #0]
 800b864:	699b      	ldr	r3, [r3, #24]
 800b866:	f003 0303 	and.w	r3, r3, #3
 800b86a:	2b00      	cmp	r3, #0
 800b86c:	d003      	beq.n	800b876 <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800b86e:	6878      	ldr	r0, [r7, #4]
 800b870:	f000 f8e9 	bl	800ba46 <HAL_TIM_IC_CaptureCallback>
 800b874:	e005      	b.n	800b882 <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800b876:	6878      	ldr	r0, [r7, #4]
 800b878:	f000 f8db 	bl	800ba32 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b87c:	6878      	ldr	r0, [r7, #4]
 800b87e:	f000 f8ec 	bl	800ba5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b882:	687b      	ldr	r3, [r7, #4]
 800b884:	2200      	movs	r2, #0
 800b886:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 800b888:	68bb      	ldr	r3, [r7, #8]
 800b88a:	f003 0304 	and.w	r3, r3, #4
 800b88e:	2b00      	cmp	r3, #0
 800b890:	d020      	beq.n	800b8d4 <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 800b892:	68fb      	ldr	r3, [r7, #12]
 800b894:	f003 0304 	and.w	r3, r3, #4
 800b898:	2b00      	cmp	r3, #0
 800b89a:	d01b      	beq.n	800b8d4 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 800b89c:	687b      	ldr	r3, [r7, #4]
 800b89e:	681b      	ldr	r3, [r3, #0]
 800b8a0:	f06f 0204 	mvn.w	r2, #4
 800b8a4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800b8a6:	687b      	ldr	r3, [r7, #4]
 800b8a8:	2202      	movs	r2, #2
 800b8aa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 800b8ac:	687b      	ldr	r3, [r7, #4]
 800b8ae:	681b      	ldr	r3, [r3, #0]
 800b8b0:	699b      	ldr	r3, [r3, #24]
 800b8b2:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b8b6:	2b00      	cmp	r3, #0
 800b8b8:	d003      	beq.n	800b8c2 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b8ba:	6878      	ldr	r0, [r7, #4]
 800b8bc:	f000 f8c3 	bl	800ba46 <HAL_TIM_IC_CaptureCallback>
 800b8c0:	e005      	b.n	800b8ce <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b8c2:	6878      	ldr	r0, [r7, #4]
 800b8c4:	f000 f8b5 	bl	800ba32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b8c8:	6878      	ldr	r0, [r7, #4]
 800b8ca:	f000 f8c6 	bl	800ba5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b8ce:	687b      	ldr	r3, [r7, #4]
 800b8d0:	2200      	movs	r2, #0
 800b8d2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800b8d4:	68bb      	ldr	r3, [r7, #8]
 800b8d6:	f003 0308 	and.w	r3, r3, #8
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d020      	beq.n	800b920 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 800b8de:	68fb      	ldr	r3, [r7, #12]
 800b8e0:	f003 0308 	and.w	r3, r3, #8
 800b8e4:	2b00      	cmp	r3, #0
 800b8e6:	d01b      	beq.n	800b920 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 800b8e8:	687b      	ldr	r3, [r7, #4]
 800b8ea:	681b      	ldr	r3, [r3, #0]
 800b8ec:	f06f 0208 	mvn.w	r2, #8
 800b8f0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800b8f2:	687b      	ldr	r3, [r7, #4]
 800b8f4:	2204      	movs	r2, #4
 800b8f6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800b8f8:	687b      	ldr	r3, [r7, #4]
 800b8fa:	681b      	ldr	r3, [r3, #0]
 800b8fc:	69db      	ldr	r3, [r3, #28]
 800b8fe:	f003 0303 	and.w	r3, r3, #3
 800b902:	2b00      	cmp	r3, #0
 800b904:	d003      	beq.n	800b90e <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b906:	6878      	ldr	r0, [r7, #4]
 800b908:	f000 f89d 	bl	800ba46 <HAL_TIM_IC_CaptureCallback>
 800b90c:	e005      	b.n	800b91a <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b90e:	6878      	ldr	r0, [r7, #4]
 800b910:	f000 f88f 	bl	800ba32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b914:	6878      	ldr	r0, [r7, #4]
 800b916:	f000 f8a0 	bl	800ba5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b91a:	687b      	ldr	r3, [r7, #4]
 800b91c:	2200      	movs	r2, #0
 800b91e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 800b920:	68bb      	ldr	r3, [r7, #8]
 800b922:	f003 0310 	and.w	r3, r3, #16
 800b926:	2b00      	cmp	r3, #0
 800b928:	d020      	beq.n	800b96c <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 800b92a:	68fb      	ldr	r3, [r7, #12]
 800b92c:	f003 0310 	and.w	r3, r3, #16
 800b930:	2b00      	cmp	r3, #0
 800b932:	d01b      	beq.n	800b96c <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800b934:	687b      	ldr	r3, [r7, #4]
 800b936:	681b      	ldr	r3, [r3, #0]
 800b938:	f06f 0210 	mvn.w	r2, #16
 800b93c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800b93e:	687b      	ldr	r3, [r7, #4]
 800b940:	2208      	movs	r2, #8
 800b942:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800b944:	687b      	ldr	r3, [r7, #4]
 800b946:	681b      	ldr	r3, [r3, #0]
 800b948:	69db      	ldr	r3, [r3, #28]
 800b94a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800b94e:	2b00      	cmp	r3, #0
 800b950:	d003      	beq.n	800b95a <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800b952:	6878      	ldr	r0, [r7, #4]
 800b954:	f000 f877 	bl	800ba46 <HAL_TIM_IC_CaptureCallback>
 800b958:	e005      	b.n	800b966 <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800b95a:	6878      	ldr	r0, [r7, #4]
 800b95c:	f000 f869 	bl	800ba32 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800b960:	6878      	ldr	r0, [r7, #4]
 800b962:	f000 f87a 	bl	800ba5a <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800b966:	687b      	ldr	r3, [r7, #4]
 800b968:	2200      	movs	r2, #0
 800b96a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 800b96c:	68bb      	ldr	r3, [r7, #8]
 800b96e:	f003 0301 	and.w	r3, r3, #1
 800b972:	2b00      	cmp	r3, #0
 800b974:	d00c      	beq.n	800b990 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 800b976:	68fb      	ldr	r3, [r7, #12]
 800b978:	f003 0301 	and.w	r3, r3, #1
 800b97c:	2b00      	cmp	r3, #0
 800b97e:	d007      	beq.n	800b990 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 800b980:	687b      	ldr	r3, [r7, #4]
 800b982:	681b      	ldr	r3, [r3, #0]
 800b984:	f06f 0201 	mvn.w	r2, #1
 800b988:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800b98a:	6878      	ldr	r0, [r7, #4]
 800b98c:	f7f5 fd40 	bl	8001410 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b990:	68bb      	ldr	r3, [r7, #8]
 800b992:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b996:	2b00      	cmp	r3, #0
 800b998:	d104      	bne.n	800b9a4 <HAL_TIM_IRQHandler+0x180>
      ((itflag & (TIM_FLAG_SYSTEM_BREAK)) == (TIM_FLAG_SYSTEM_BREAK)))
 800b99a:	68bb      	ldr	r3, [r7, #8]
 800b99c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
  if (((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK)) || \
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d00c      	beq.n	800b9be <HAL_TIM_IRQHandler+0x19a>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b9a4:	68fb      	ldr	r3, [r7, #12]
 800b9a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9aa:	2b00      	cmp	r3, #0
 800b9ac:	d007      	beq.n	800b9be <HAL_TIM_IRQHandler+0x19a>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK | TIM_FLAG_SYSTEM_BREAK);
 800b9ae:	687b      	ldr	r3, [r7, #4]
 800b9b0:	681b      	ldr	r3, [r3, #0]
 800b9b2:	f46f 5202 	mvn.w	r2, #8320	; 0x2080
 800b9b6:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800b9b8:	6878      	ldr	r0, [r7, #4]
 800b9ba:	f000 f919 	bl	800bbf0 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break2 input event */
  if ((itflag & (TIM_FLAG_BREAK2)) == (TIM_FLAG_BREAK2))
 800b9be:	68bb      	ldr	r3, [r7, #8]
 800b9c0:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800b9c4:	2b00      	cmp	r3, #0
 800b9c6:	d00c      	beq.n	800b9e2 <HAL_TIM_IRQHandler+0x1be>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 800b9c8:	68fb      	ldr	r3, [r7, #12]
 800b9ca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800b9ce:	2b00      	cmp	r3, #0
 800b9d0:	d007      	beq.n	800b9e2 <HAL_TIM_IRQHandler+0x1be>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK2);
 800b9d2:	687b      	ldr	r3, [r7, #4]
 800b9d4:	681b      	ldr	r3, [r3, #0]
 800b9d6:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800b9da:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->Break2Callback(htim);
#else
      HAL_TIMEx_Break2Callback(htim);
 800b9dc:	6878      	ldr	r0, [r7, #4]
 800b9de:	f000 f911 	bl	800bc04 <HAL_TIMEx_Break2Callback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 800b9e2:	68bb      	ldr	r3, [r7, #8]
 800b9e4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9e8:	2b00      	cmp	r3, #0
 800b9ea:	d00c      	beq.n	800ba06 <HAL_TIM_IRQHandler+0x1e2>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 800b9ec:	68fb      	ldr	r3, [r7, #12]
 800b9ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800b9f2:	2b00      	cmp	r3, #0
 800b9f4:	d007      	beq.n	800ba06 <HAL_TIM_IRQHandler+0x1e2>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 800b9f6:	687b      	ldr	r3, [r7, #4]
 800b9f8:	681b      	ldr	r3, [r3, #0]
 800b9fa:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800b9fe:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800ba00:	6878      	ldr	r0, [r7, #4]
 800ba02:	f000 f834 	bl	800ba6e <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 800ba06:	68bb      	ldr	r3, [r7, #8]
 800ba08:	f003 0320 	and.w	r3, r3, #32
 800ba0c:	2b00      	cmp	r3, #0
 800ba0e:	d00c      	beq.n	800ba2a <HAL_TIM_IRQHandler+0x206>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800ba10:	68fb      	ldr	r3, [r7, #12]
 800ba12:	f003 0320 	and.w	r3, r3, #32
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	d007      	beq.n	800ba2a <HAL_TIM_IRQHandler+0x206>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 800ba1a:	687b      	ldr	r3, [r7, #4]
 800ba1c:	681b      	ldr	r3, [r3, #0]
 800ba1e:	f06f 0220 	mvn.w	r2, #32
 800ba22:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800ba24:	6878      	ldr	r0, [r7, #4]
 800ba26:	f000 f8d9 	bl	800bbdc <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 800ba2a:	bf00      	nop
 800ba2c:	3710      	adds	r7, #16
 800ba2e:	46bd      	mov	sp, r7
 800ba30:	bd80      	pop	{r7, pc}

0800ba32 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800ba32:	b480      	push	{r7}
 800ba34:	b083      	sub	sp, #12
 800ba36:	af00      	add	r7, sp, #0
 800ba38:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800ba3a:	bf00      	nop
 800ba3c:	370c      	adds	r7, #12
 800ba3e:	46bd      	mov	sp, r7
 800ba40:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba44:	4770      	bx	lr

0800ba46 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800ba46:	b480      	push	{r7}
 800ba48:	b083      	sub	sp, #12
 800ba4a:	af00      	add	r7, sp, #0
 800ba4c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800ba4e:	bf00      	nop
 800ba50:	370c      	adds	r7, #12
 800ba52:	46bd      	mov	sp, r7
 800ba54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba58:	4770      	bx	lr

0800ba5a <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800ba5a:	b480      	push	{r7}
 800ba5c:	b083      	sub	sp, #12
 800ba5e:	af00      	add	r7, sp, #0
 800ba60:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800ba62:	bf00      	nop
 800ba64:	370c      	adds	r7, #12
 800ba66:	46bd      	mov	sp, r7
 800ba68:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba6c:	4770      	bx	lr

0800ba6e <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800ba6e:	b480      	push	{r7}
 800ba70:	b083      	sub	sp, #12
 800ba72:	af00      	add	r7, sp, #0
 800ba74:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800ba76:	bf00      	nop
 800ba78:	370c      	adds	r7, #12
 800ba7a:	46bd      	mov	sp, r7
 800ba7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ba80:	4770      	bx	lr
	...

0800ba84 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 800ba84:	b480      	push	{r7}
 800ba86:	b085      	sub	sp, #20
 800ba88:	af00      	add	r7, sp, #0
 800ba8a:	6078      	str	r0, [r7, #4]
 800ba8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	681b      	ldr	r3, [r3, #0]
 800ba92:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 800ba94:	687b      	ldr	r3, [r7, #4]
 800ba96:	4a46      	ldr	r2, [pc, #280]	; (800bbb0 <TIM_Base_SetConfig+0x12c>)
 800ba98:	4293      	cmp	r3, r2
 800ba9a:	d013      	beq.n	800bac4 <TIM_Base_SetConfig+0x40>
 800ba9c:	687b      	ldr	r3, [r7, #4]
 800ba9e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800baa2:	d00f      	beq.n	800bac4 <TIM_Base_SetConfig+0x40>
 800baa4:	687b      	ldr	r3, [r7, #4]
 800baa6:	4a43      	ldr	r2, [pc, #268]	; (800bbb4 <TIM_Base_SetConfig+0x130>)
 800baa8:	4293      	cmp	r3, r2
 800baaa:	d00b      	beq.n	800bac4 <TIM_Base_SetConfig+0x40>
 800baac:	687b      	ldr	r3, [r7, #4]
 800baae:	4a42      	ldr	r2, [pc, #264]	; (800bbb8 <TIM_Base_SetConfig+0x134>)
 800bab0:	4293      	cmp	r3, r2
 800bab2:	d007      	beq.n	800bac4 <TIM_Base_SetConfig+0x40>
 800bab4:	687b      	ldr	r3, [r7, #4]
 800bab6:	4a41      	ldr	r2, [pc, #260]	; (800bbbc <TIM_Base_SetConfig+0x138>)
 800bab8:	4293      	cmp	r3, r2
 800baba:	d003      	beq.n	800bac4 <TIM_Base_SetConfig+0x40>
 800babc:	687b      	ldr	r3, [r7, #4]
 800babe:	4a40      	ldr	r2, [pc, #256]	; (800bbc0 <TIM_Base_SetConfig+0x13c>)
 800bac0:	4293      	cmp	r3, r2
 800bac2:	d108      	bne.n	800bad6 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 800bac4:	68fb      	ldr	r3, [r7, #12]
 800bac6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800baca:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800bacc:	683b      	ldr	r3, [r7, #0]
 800bace:	685b      	ldr	r3, [r3, #4]
 800bad0:	68fa      	ldr	r2, [r7, #12]
 800bad2:	4313      	orrs	r3, r2
 800bad4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	4a35      	ldr	r2, [pc, #212]	; (800bbb0 <TIM_Base_SetConfig+0x12c>)
 800bada:	4293      	cmp	r3, r2
 800badc:	d02b      	beq.n	800bb36 <TIM_Base_SetConfig+0xb2>
 800bade:	687b      	ldr	r3, [r7, #4]
 800bae0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800bae4:	d027      	beq.n	800bb36 <TIM_Base_SetConfig+0xb2>
 800bae6:	687b      	ldr	r3, [r7, #4]
 800bae8:	4a32      	ldr	r2, [pc, #200]	; (800bbb4 <TIM_Base_SetConfig+0x130>)
 800baea:	4293      	cmp	r3, r2
 800baec:	d023      	beq.n	800bb36 <TIM_Base_SetConfig+0xb2>
 800baee:	687b      	ldr	r3, [r7, #4]
 800baf0:	4a31      	ldr	r2, [pc, #196]	; (800bbb8 <TIM_Base_SetConfig+0x134>)
 800baf2:	4293      	cmp	r3, r2
 800baf4:	d01f      	beq.n	800bb36 <TIM_Base_SetConfig+0xb2>
 800baf6:	687b      	ldr	r3, [r7, #4]
 800baf8:	4a30      	ldr	r2, [pc, #192]	; (800bbbc <TIM_Base_SetConfig+0x138>)
 800bafa:	4293      	cmp	r3, r2
 800bafc:	d01b      	beq.n	800bb36 <TIM_Base_SetConfig+0xb2>
 800bafe:	687b      	ldr	r3, [r7, #4]
 800bb00:	4a2f      	ldr	r2, [pc, #188]	; (800bbc0 <TIM_Base_SetConfig+0x13c>)
 800bb02:	4293      	cmp	r3, r2
 800bb04:	d017      	beq.n	800bb36 <TIM_Base_SetConfig+0xb2>
 800bb06:	687b      	ldr	r3, [r7, #4]
 800bb08:	4a2e      	ldr	r2, [pc, #184]	; (800bbc4 <TIM_Base_SetConfig+0x140>)
 800bb0a:	4293      	cmp	r3, r2
 800bb0c:	d013      	beq.n	800bb36 <TIM_Base_SetConfig+0xb2>
 800bb0e:	687b      	ldr	r3, [r7, #4]
 800bb10:	4a2d      	ldr	r2, [pc, #180]	; (800bbc8 <TIM_Base_SetConfig+0x144>)
 800bb12:	4293      	cmp	r3, r2
 800bb14:	d00f      	beq.n	800bb36 <TIM_Base_SetConfig+0xb2>
 800bb16:	687b      	ldr	r3, [r7, #4]
 800bb18:	4a2c      	ldr	r2, [pc, #176]	; (800bbcc <TIM_Base_SetConfig+0x148>)
 800bb1a:	4293      	cmp	r3, r2
 800bb1c:	d00b      	beq.n	800bb36 <TIM_Base_SetConfig+0xb2>
 800bb1e:	687b      	ldr	r3, [r7, #4]
 800bb20:	4a2b      	ldr	r2, [pc, #172]	; (800bbd0 <TIM_Base_SetConfig+0x14c>)
 800bb22:	4293      	cmp	r3, r2
 800bb24:	d007      	beq.n	800bb36 <TIM_Base_SetConfig+0xb2>
 800bb26:	687b      	ldr	r3, [r7, #4]
 800bb28:	4a2a      	ldr	r2, [pc, #168]	; (800bbd4 <TIM_Base_SetConfig+0x150>)
 800bb2a:	4293      	cmp	r3, r2
 800bb2c:	d003      	beq.n	800bb36 <TIM_Base_SetConfig+0xb2>
 800bb2e:	687b      	ldr	r3, [r7, #4]
 800bb30:	4a29      	ldr	r2, [pc, #164]	; (800bbd8 <TIM_Base_SetConfig+0x154>)
 800bb32:	4293      	cmp	r3, r2
 800bb34:	d108      	bne.n	800bb48 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800bb36:	68fb      	ldr	r3, [r7, #12]
 800bb38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800bb3c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800bb3e:	683b      	ldr	r3, [r7, #0]
 800bb40:	68db      	ldr	r3, [r3, #12]
 800bb42:	68fa      	ldr	r2, [r7, #12]
 800bb44:	4313      	orrs	r3, r2
 800bb46:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800bb48:	68fb      	ldr	r3, [r7, #12]
 800bb4a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800bb4e:	683b      	ldr	r3, [r7, #0]
 800bb50:	695b      	ldr	r3, [r3, #20]
 800bb52:	4313      	orrs	r3, r2
 800bb54:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800bb56:	687b      	ldr	r3, [r7, #4]
 800bb58:	68fa      	ldr	r2, [r7, #12]
 800bb5a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800bb5c:	683b      	ldr	r3, [r7, #0]
 800bb5e:	689a      	ldr	r2, [r3, #8]
 800bb60:	687b      	ldr	r3, [r7, #4]
 800bb62:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 800bb64:	683b      	ldr	r3, [r7, #0]
 800bb66:	681a      	ldr	r2, [r3, #0]
 800bb68:	687b      	ldr	r3, [r7, #4]
 800bb6a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800bb6c:	687b      	ldr	r3, [r7, #4]
 800bb6e:	4a10      	ldr	r2, [pc, #64]	; (800bbb0 <TIM_Base_SetConfig+0x12c>)
 800bb70:	4293      	cmp	r3, r2
 800bb72:	d003      	beq.n	800bb7c <TIM_Base_SetConfig+0xf8>
 800bb74:	687b      	ldr	r3, [r7, #4]
 800bb76:	4a12      	ldr	r2, [pc, #72]	; (800bbc0 <TIM_Base_SetConfig+0x13c>)
 800bb78:	4293      	cmp	r3, r2
 800bb7a:	d103      	bne.n	800bb84 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 800bb7c:	683b      	ldr	r3, [r7, #0]
 800bb7e:	691a      	ldr	r2, [r3, #16]
 800bb80:	687b      	ldr	r3, [r7, #4]
 800bb82:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800bb84:	687b      	ldr	r3, [r7, #4]
 800bb86:	2201      	movs	r2, #1
 800bb88:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 800bb8a:	687b      	ldr	r3, [r7, #4]
 800bb8c:	691b      	ldr	r3, [r3, #16]
 800bb8e:	f003 0301 	and.w	r3, r3, #1
 800bb92:	2b01      	cmp	r3, #1
 800bb94:	d105      	bne.n	800bba2 <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 800bb96:	687b      	ldr	r3, [r7, #4]
 800bb98:	691b      	ldr	r3, [r3, #16]
 800bb9a:	f023 0201 	bic.w	r2, r3, #1
 800bb9e:	687b      	ldr	r3, [r7, #4]
 800bba0:	611a      	str	r2, [r3, #16]
  }
}
 800bba2:	bf00      	nop
 800bba4:	3714      	adds	r7, #20
 800bba6:	46bd      	mov	sp, r7
 800bba8:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbac:	4770      	bx	lr
 800bbae:	bf00      	nop
 800bbb0:	40010000 	.word	0x40010000
 800bbb4:	40000400 	.word	0x40000400
 800bbb8:	40000800 	.word	0x40000800
 800bbbc:	40000c00 	.word	0x40000c00
 800bbc0:	40010400 	.word	0x40010400
 800bbc4:	40014000 	.word	0x40014000
 800bbc8:	40014400 	.word	0x40014400
 800bbcc:	40014800 	.word	0x40014800
 800bbd0:	40001800 	.word	0x40001800
 800bbd4:	40001c00 	.word	0x40001c00
 800bbd8:	40002000 	.word	0x40002000

0800bbdc <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 800bbdc:	b480      	push	{r7}
 800bbde:	b083      	sub	sp, #12
 800bbe0:	af00      	add	r7, sp, #0
 800bbe2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800bbe4:	bf00      	nop
 800bbe6:	370c      	adds	r7, #12
 800bbe8:	46bd      	mov	sp, r7
 800bbea:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bbee:	4770      	bx	lr

0800bbf0 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800bbf0:	b480      	push	{r7}
 800bbf2:	b083      	sub	sp, #12
 800bbf4:	af00      	add	r7, sp, #0
 800bbf6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800bbf8:	bf00      	nop
 800bbfa:	370c      	adds	r7, #12
 800bbfc:	46bd      	mov	sp, r7
 800bbfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc02:	4770      	bx	lr

0800bc04 <HAL_TIMEx_Break2Callback>:
  * @brief  Break2 detection callback in non blocking mode
  * @param  htim: TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_Break2Callback(TIM_HandleTypeDef *htim)
{
 800bc04:	b480      	push	{r7}
 800bc06:	b083      	sub	sp, #12
 800bc08:	af00      	add	r7, sp, #0
 800bc0a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_TIMEx_Break2Callback could be implemented in the user file
   */
}
 800bc0c:	bf00      	nop
 800bc0e:	370c      	adds	r7, #12
 800bc10:	46bd      	mov	sp, r7
 800bc12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bc16:	4770      	bx	lr

0800bc18 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800bc18:	b580      	push	{r7, lr}
 800bc1a:	b082      	sub	sp, #8
 800bc1c:	af00      	add	r7, sp, #0
 800bc1e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800bc20:	687b      	ldr	r3, [r7, #4]
 800bc22:	2b00      	cmp	r3, #0
 800bc24:	d101      	bne.n	800bc2a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800bc26:	2301      	movs	r3, #1
 800bc28:	e040      	b.n	800bcac <HAL_UART_Init+0x94>
  {
    /* Check the parameters */
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 800bc2a:	687b      	ldr	r3, [r7, #4]
 800bc2c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bc2e:	2b00      	cmp	r3, #0
 800bc30:	d106      	bne.n	800bc40 <HAL_UART_Init+0x28>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	2200      	movs	r2, #0
 800bc36:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800bc3a:	6878      	ldr	r0, [r7, #4]
 800bc3c:	f7f6 fc72 	bl	8002524 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800bc40:	687b      	ldr	r3, [r7, #4]
 800bc42:	2224      	movs	r2, #36	; 0x24
 800bc44:	67da      	str	r2, [r3, #124]	; 0x7c

  __HAL_UART_DISABLE(huart);
 800bc46:	687b      	ldr	r3, [r7, #4]
 800bc48:	681b      	ldr	r3, [r3, #0]
 800bc4a:	681a      	ldr	r2, [r3, #0]
 800bc4c:	687b      	ldr	r3, [r7, #4]
 800bc4e:	681b      	ldr	r3, [r3, #0]
 800bc50:	f022 0201 	bic.w	r2, r2, #1
 800bc54:	601a      	str	r2, [r3, #0]

  /* Perform advanced settings configuration */
  /* For some items, configuration requires to be done prior TE and RE bits are set */
  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 800bc56:	687b      	ldr	r3, [r7, #4]
 800bc58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800bc5a:	2b00      	cmp	r3, #0
 800bc5c:	d002      	beq.n	800bc64 <HAL_UART_Init+0x4c>
  {
    UART_AdvFeatureConfig(huart);
 800bc5e:	6878      	ldr	r0, [r7, #4]
 800bc60:	f001 f810 	bl	800cc84 <UART_AdvFeatureConfig>
  }

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 800bc64:	6878      	ldr	r0, [r7, #4]
 800bc66:	f000 fda9 	bl	800c7bc <UART_SetConfig>
 800bc6a:	4603      	mov	r3, r0
 800bc6c:	2b01      	cmp	r3, #1
 800bc6e:	d101      	bne.n	800bc74 <HAL_UART_Init+0x5c>
  {
    return HAL_ERROR;
 800bc70:	2301      	movs	r3, #1
 800bc72:	e01b      	b.n	800bcac <HAL_UART_Init+0x94>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800bc74:	687b      	ldr	r3, [r7, #4]
 800bc76:	681b      	ldr	r3, [r3, #0]
 800bc78:	685a      	ldr	r2, [r3, #4]
 800bc7a:	687b      	ldr	r3, [r7, #4]
 800bc7c:	681b      	ldr	r3, [r3, #0]
 800bc7e:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 800bc82:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800bc84:	687b      	ldr	r3, [r7, #4]
 800bc86:	681b      	ldr	r3, [r3, #0]
 800bc88:	689a      	ldr	r2, [r3, #8]
 800bc8a:	687b      	ldr	r3, [r7, #4]
 800bc8c:	681b      	ldr	r3, [r3, #0]
 800bc8e:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 800bc92:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 800bc94:	687b      	ldr	r3, [r7, #4]
 800bc96:	681b      	ldr	r3, [r3, #0]
 800bc98:	681a      	ldr	r2, [r3, #0]
 800bc9a:	687b      	ldr	r3, [r7, #4]
 800bc9c:	681b      	ldr	r3, [r3, #0]
 800bc9e:	f042 0201 	orr.w	r2, r2, #1
 800bca2:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 800bca4:	6878      	ldr	r0, [r7, #4]
 800bca6:	f001 f88f 	bl	800cdc8 <UART_CheckIdleState>
 800bcaa:	4603      	mov	r3, r0
}
 800bcac:	4618      	mov	r0, r3
 800bcae:	3708      	adds	r7, #8
 800bcb0:	46bd      	mov	sp, r7
 800bcb2:	bd80      	pop	{r7, pc}

0800bcb4 <HAL_UART_Transmit_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_IT(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bcb4:	b480      	push	{r7}
 800bcb6:	b08b      	sub	sp, #44	; 0x2c
 800bcb8:	af00      	add	r7, sp, #0
 800bcba:	60f8      	str	r0, [r7, #12]
 800bcbc:	60b9      	str	r1, [r7, #8]
 800bcbe:	4613      	mov	r3, r2
 800bcc0:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800bcc2:	68fb      	ldr	r3, [r7, #12]
 800bcc4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800bcc6:	2b20      	cmp	r3, #32
 800bcc8:	d147      	bne.n	800bd5a <HAL_UART_Transmit_IT+0xa6>
  {
    if ((pData == NULL) || (Size == 0U))
 800bcca:	68bb      	ldr	r3, [r7, #8]
 800bccc:	2b00      	cmp	r3, #0
 800bcce:	d002      	beq.n	800bcd6 <HAL_UART_Transmit_IT+0x22>
 800bcd0:	88fb      	ldrh	r3, [r7, #6]
 800bcd2:	2b00      	cmp	r3, #0
 800bcd4:	d101      	bne.n	800bcda <HAL_UART_Transmit_IT+0x26>
    {
      return HAL_ERROR;
 800bcd6:	2301      	movs	r3, #1
 800bcd8:	e040      	b.n	800bd5c <HAL_UART_Transmit_IT+0xa8>
    }

    huart->pTxBuffPtr  = pData;
 800bcda:	68fb      	ldr	r3, [r7, #12]
 800bcdc:	68ba      	ldr	r2, [r7, #8]
 800bcde:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800bce0:	68fb      	ldr	r3, [r7, #12]
 800bce2:	88fa      	ldrh	r2, [r7, #6]
 800bce4:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800bce8:	68fb      	ldr	r3, [r7, #12]
 800bcea:	88fa      	ldrh	r2, [r7, #6]
 800bcec:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->TxISR       = NULL;
 800bcf0:	68fb      	ldr	r3, [r7, #12]
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	66da      	str	r2, [r3, #108]	; 0x6c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800bcf6:	68fb      	ldr	r3, [r7, #12]
 800bcf8:	2200      	movs	r2, #0
 800bcfa:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800bcfe:	68fb      	ldr	r3, [r7, #12]
 800bd00:	2221      	movs	r2, #33	; 0x21
 800bd02:	67da      	str	r2, [r3, #124]	; 0x7c

    /* Set the Tx ISR function pointer according to the data word length */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800bd04:	68fb      	ldr	r3, [r7, #12]
 800bd06:	689b      	ldr	r3, [r3, #8]
 800bd08:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800bd0c:	d107      	bne.n	800bd1e <HAL_UART_Transmit_IT+0x6a>
 800bd0e:	68fb      	ldr	r3, [r7, #12]
 800bd10:	691b      	ldr	r3, [r3, #16]
 800bd12:	2b00      	cmp	r3, #0
 800bd14:	d103      	bne.n	800bd1e <HAL_UART_Transmit_IT+0x6a>
    {
      huart->TxISR = UART_TxISR_16BIT;
 800bd16:	68fb      	ldr	r3, [r7, #12]
 800bd18:	4a13      	ldr	r2, [pc, #76]	; (800bd68 <HAL_UART_Transmit_IT+0xb4>)
 800bd1a:	66da      	str	r2, [r3, #108]	; 0x6c
 800bd1c:	e002      	b.n	800bd24 <HAL_UART_Transmit_IT+0x70>
    }
    else
    {
      huart->TxISR = UART_TxISR_8BIT;
 800bd1e:	68fb      	ldr	r3, [r7, #12]
 800bd20:	4a12      	ldr	r2, [pc, #72]	; (800bd6c <HAL_UART_Transmit_IT+0xb8>)
 800bd22:	66da      	str	r2, [r3, #108]	; 0x6c
    }

    /* Enable the Transmit Data Register Empty interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800bd24:	68fb      	ldr	r3, [r7, #12]
 800bd26:	681b      	ldr	r3, [r3, #0]
 800bd28:	617b      	str	r3, [r7, #20]
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bd2a:	697b      	ldr	r3, [r7, #20]
 800bd2c:	e853 3f00 	ldrex	r3, [r3]
 800bd30:	613b      	str	r3, [r7, #16]
   return(result);
 800bd32:	693b      	ldr	r3, [r7, #16]
 800bd34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd38:	627b      	str	r3, [r7, #36]	; 0x24
 800bd3a:	68fb      	ldr	r3, [r7, #12]
 800bd3c:	681b      	ldr	r3, [r3, #0]
 800bd3e:	461a      	mov	r2, r3
 800bd40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bd42:	623b      	str	r3, [r7, #32]
 800bd44:	61fa      	str	r2, [r7, #28]
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bd46:	69f9      	ldr	r1, [r7, #28]
 800bd48:	6a3a      	ldr	r2, [r7, #32]
 800bd4a:	e841 2300 	strex	r3, r2, [r1]
 800bd4e:	61bb      	str	r3, [r7, #24]
   return(result);
 800bd50:	69bb      	ldr	r3, [r7, #24]
 800bd52:	2b00      	cmp	r3, #0
 800bd54:	d1e6      	bne.n	800bd24 <HAL_UART_Transmit_IT+0x70>

    return HAL_OK;
 800bd56:	2300      	movs	r3, #0
 800bd58:	e000      	b.n	800bd5c <HAL_UART_Transmit_IT+0xa8>
  }
  else
  {
    return HAL_BUSY;
 800bd5a:	2302      	movs	r3, #2
  }
}
 800bd5c:	4618      	mov	r0, r3
 800bd5e:	372c      	adds	r7, #44	; 0x2c
 800bd60:	46bd      	mov	sp, r7
 800bd62:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bd66:	4770      	bx	lr
 800bd68:	0800d791 	.word	0x0800d791
 800bd6c:	0800d6db 	.word	0x0800d6db

0800bd70 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bd70:	b580      	push	{r7, lr}
 800bd72:	b08a      	sub	sp, #40	; 0x28
 800bd74:	af00      	add	r7, sp, #0
 800bd76:	60f8      	str	r0, [r7, #12]
 800bd78:	60b9      	str	r1, [r7, #8]
 800bd7a:	4613      	mov	r3, r2
 800bd7c:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800bd7e:	68fb      	ldr	r3, [r7, #12]
 800bd80:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bd84:	2b20      	cmp	r3, #32
 800bd86:	d132      	bne.n	800bdee <HAL_UART_Receive_IT+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bd88:	68bb      	ldr	r3, [r7, #8]
 800bd8a:	2b00      	cmp	r3, #0
 800bd8c:	d002      	beq.n	800bd94 <HAL_UART_Receive_IT+0x24>
 800bd8e:	88fb      	ldrh	r3, [r7, #6]
 800bd90:	2b00      	cmp	r3, #0
 800bd92:	d101      	bne.n	800bd98 <HAL_UART_Receive_IT+0x28>
    {
      return HAL_ERROR;
 800bd94:	2301      	movs	r3, #1
 800bd96:	e02b      	b.n	800bdf0 <HAL_UART_Receive_IT+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bd98:	68fb      	ldr	r3, [r7, #12]
 800bd9a:	2200      	movs	r2, #0
 800bd9c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bd9e:	68fb      	ldr	r3, [r7, #12]
 800bda0:	681b      	ldr	r3, [r3, #0]
 800bda2:	685b      	ldr	r3, [r3, #4]
 800bda4:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bda8:	2b00      	cmp	r3, #0
 800bdaa:	d018      	beq.n	800bdde <HAL_UART_Receive_IT+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bdac:	68fb      	ldr	r3, [r7, #12]
 800bdae:	681b      	ldr	r3, [r3, #0]
 800bdb0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bdb2:	697b      	ldr	r3, [r7, #20]
 800bdb4:	e853 3f00 	ldrex	r3, [r3]
 800bdb8:	613b      	str	r3, [r7, #16]
   return(result);
 800bdba:	693b      	ldr	r3, [r7, #16]
 800bdbc:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bdc0:	627b      	str	r3, [r7, #36]	; 0x24
 800bdc2:	68fb      	ldr	r3, [r7, #12]
 800bdc4:	681b      	ldr	r3, [r3, #0]
 800bdc6:	461a      	mov	r2, r3
 800bdc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bdca:	623b      	str	r3, [r7, #32]
 800bdcc:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bdce:	69f9      	ldr	r1, [r7, #28]
 800bdd0:	6a3a      	ldr	r2, [r7, #32]
 800bdd2:	e841 2300 	strex	r3, r2, [r1]
 800bdd6:	61bb      	str	r3, [r7, #24]
   return(result);
 800bdd8:	69bb      	ldr	r3, [r7, #24]
 800bdda:	2b00      	cmp	r3, #0
 800bddc:	d1e6      	bne.n	800bdac <HAL_UART_Receive_IT+0x3c>
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 800bdde:	88fb      	ldrh	r3, [r7, #6]
 800bde0:	461a      	mov	r2, r3
 800bde2:	68b9      	ldr	r1, [r7, #8]
 800bde4:	68f8      	ldr	r0, [r7, #12]
 800bde6:	f001 f8b3 	bl	800cf50 <UART_Start_Receive_IT>
 800bdea:	4603      	mov	r3, r0
 800bdec:	e000      	b.n	800bdf0 <HAL_UART_Receive_IT+0x80>
  }
  else
  {
    return HAL_BUSY;
 800bdee:	2302      	movs	r3, #2
  }
}
 800bdf0:	4618      	mov	r0, r3
 800bdf2:	3728      	adds	r7, #40	; 0x28
 800bdf4:	46bd      	mov	sp, r7
 800bdf6:	bd80      	pop	{r7, pc}

0800bdf8 <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 800bdf8:	b580      	push	{r7, lr}
 800bdfa:	b08a      	sub	sp, #40	; 0x28
 800bdfc:	af00      	add	r7, sp, #0
 800bdfe:	60f8      	str	r0, [r7, #12]
 800be00:	60b9      	str	r1, [r7, #8]
 800be02:	4613      	mov	r3, r2
 800be04:	80fb      	strh	r3, [r7, #6]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 800be06:	68fb      	ldr	r3, [r7, #12]
 800be08:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800be0a:	2b20      	cmp	r3, #32
 800be0c:	d165      	bne.n	800beda <HAL_UART_Transmit_DMA+0xe2>
  {
    if ((pData == NULL) || (Size == 0U))
 800be0e:	68bb      	ldr	r3, [r7, #8]
 800be10:	2b00      	cmp	r3, #0
 800be12:	d002      	beq.n	800be1a <HAL_UART_Transmit_DMA+0x22>
 800be14:	88fb      	ldrh	r3, [r7, #6]
 800be16:	2b00      	cmp	r3, #0
 800be18:	d101      	bne.n	800be1e <HAL_UART_Transmit_DMA+0x26>
    {
      return HAL_ERROR;
 800be1a:	2301      	movs	r3, #1
 800be1c:	e05e      	b.n	800bedc <HAL_UART_Transmit_DMA+0xe4>
    }

    huart->pTxBuffPtr  = pData;
 800be1e:	68fb      	ldr	r3, [r7, #12]
 800be20:	68ba      	ldr	r2, [r7, #8]
 800be22:	64da      	str	r2, [r3, #76]	; 0x4c
    huart->TxXferSize  = Size;
 800be24:	68fb      	ldr	r3, [r7, #12]
 800be26:	88fa      	ldrh	r2, [r7, #6]
 800be28:	f8a3 2050 	strh.w	r2, [r3, #80]	; 0x50
    huart->TxXferCount = Size;
 800be2c:	68fb      	ldr	r3, [r7, #12]
 800be2e:	88fa      	ldrh	r2, [r7, #6]
 800be30:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800be34:	68fb      	ldr	r3, [r7, #12]
 800be36:	2200      	movs	r2, #0
 800be38:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800be3c:	68fb      	ldr	r3, [r7, #12]
 800be3e:	2221      	movs	r2, #33	; 0x21
 800be40:	67da      	str	r2, [r3, #124]	; 0x7c

    if (huart->hdmatx != NULL)
 800be42:	68fb      	ldr	r3, [r7, #12]
 800be44:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be46:	2b00      	cmp	r3, #0
 800be48:	d027      	beq.n	800be9a <HAL_UART_Transmit_DMA+0xa2>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 800be4a:	68fb      	ldr	r3, [r7, #12]
 800be4c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be4e:	4a25      	ldr	r2, [pc, #148]	; (800bee4 <HAL_UART_Transmit_DMA+0xec>)
 800be50:	63da      	str	r2, [r3, #60]	; 0x3c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800be52:	68fb      	ldr	r3, [r7, #12]
 800be54:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be56:	4a24      	ldr	r2, [pc, #144]	; (800bee8 <HAL_UART_Transmit_DMA+0xf0>)
 800be58:	641a      	str	r2, [r3, #64]	; 0x40

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 800be5a:	68fb      	ldr	r3, [r7, #12]
 800be5c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be5e:	4a23      	ldr	r2, [pc, #140]	; (800beec <HAL_UART_Transmit_DMA+0xf4>)
 800be60:	64da      	str	r2, [r3, #76]	; 0x4c

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 800be62:	68fb      	ldr	r3, [r7, #12]
 800be64:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800be66:	2200      	movs	r2, #0
 800be68:	651a      	str	r2, [r3, #80]	; 0x50

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 800be6a:	68fb      	ldr	r3, [r7, #12]
 800be6c:	6f18      	ldr	r0, [r3, #112]	; 0x70
 800be6e:	68fb      	ldr	r3, [r7, #12]
 800be70:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800be72:	4619      	mov	r1, r3
 800be74:	68fb      	ldr	r3, [r7, #12]
 800be76:	681b      	ldr	r3, [r3, #0]
 800be78:	3328      	adds	r3, #40	; 0x28
 800be7a:	461a      	mov	r2, r3
 800be7c:	88fb      	ldrh	r3, [r7, #6]
 800be7e:	f7f7 ffe9 	bl	8003e54 <HAL_DMA_Start_IT>
 800be82:	4603      	mov	r3, r0
 800be84:	2b00      	cmp	r3, #0
 800be86:	d008      	beq.n	800be9a <HAL_UART_Transmit_DMA+0xa2>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	2210      	movs	r2, #16
 800be8c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 800be90:	68fb      	ldr	r3, [r7, #12]
 800be92:	2220      	movs	r2, #32
 800be94:	67da      	str	r2, [r3, #124]	; 0x7c

        return HAL_ERROR;
 800be96:	2301      	movs	r3, #1
 800be98:	e020      	b.n	800bedc <HAL_UART_Transmit_DMA+0xe4>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 800be9a:	68fb      	ldr	r3, [r7, #12]
 800be9c:	681b      	ldr	r3, [r3, #0]
 800be9e:	2240      	movs	r2, #64	; 0x40
 800bea0:	621a      	str	r2, [r3, #32]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800bea2:	68fb      	ldr	r3, [r7, #12]
 800bea4:	681b      	ldr	r3, [r3, #0]
 800bea6:	3308      	adds	r3, #8
 800bea8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800beaa:	697b      	ldr	r3, [r7, #20]
 800beac:	e853 3f00 	ldrex	r3, [r3]
 800beb0:	613b      	str	r3, [r7, #16]
   return(result);
 800beb2:	693b      	ldr	r3, [r7, #16]
 800beb4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800beb8:	627b      	str	r3, [r7, #36]	; 0x24
 800beba:	68fb      	ldr	r3, [r7, #12]
 800bebc:	681b      	ldr	r3, [r3, #0]
 800bebe:	3308      	adds	r3, #8
 800bec0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800bec2:	623a      	str	r2, [r7, #32]
 800bec4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bec6:	69f9      	ldr	r1, [r7, #28]
 800bec8:	6a3a      	ldr	r2, [r7, #32]
 800beca:	e841 2300 	strex	r3, r2, [r1]
 800bece:	61bb      	str	r3, [r7, #24]
   return(result);
 800bed0:	69bb      	ldr	r3, [r7, #24]
 800bed2:	2b00      	cmp	r3, #0
 800bed4:	d1e5      	bne.n	800bea2 <HAL_UART_Transmit_DMA+0xaa>

    return HAL_OK;
 800bed6:	2300      	movs	r3, #0
 800bed8:	e000      	b.n	800bedc <HAL_UART_Transmit_DMA+0xe4>
  }
  else
  {
    return HAL_BUSY;
 800beda:	2302      	movs	r3, #2
  }
}
 800bedc:	4618      	mov	r0, r3
 800bede:	3728      	adds	r7, #40	; 0x28
 800bee0:	46bd      	mov	sp, r7
 800bee2:	bd80      	pop	{r7, pc}
 800bee4:	0800d331 	.word	0x0800d331
 800bee8:	0800d3c7 	.word	0x0800d3c7
 800beec:	0800d549 	.word	0x0800d549

0800bef0 <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800bef0:	b580      	push	{r7, lr}
 800bef2:	b08a      	sub	sp, #40	; 0x28
 800bef4:	af00      	add	r7, sp, #0
 800bef6:	60f8      	str	r0, [r7, #12]
 800bef8:	60b9      	str	r1, [r7, #8]
 800befa:	4613      	mov	r3, r2
 800befc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800befe:	68fb      	ldr	r3, [r7, #12]
 800bf00:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800bf04:	2b20      	cmp	r3, #32
 800bf06:	d132      	bne.n	800bf6e <HAL_UART_Receive_DMA+0x7e>
  {
    if ((pData == NULL) || (Size == 0U))
 800bf08:	68bb      	ldr	r3, [r7, #8]
 800bf0a:	2b00      	cmp	r3, #0
 800bf0c:	d002      	beq.n	800bf14 <HAL_UART_Receive_DMA+0x24>
 800bf0e:	88fb      	ldrh	r3, [r7, #6]
 800bf10:	2b00      	cmp	r3, #0
 800bf12:	d101      	bne.n	800bf18 <HAL_UART_Receive_DMA+0x28>
    {
      return HAL_ERROR;
 800bf14:	2301      	movs	r3, #1
 800bf16:	e02b      	b.n	800bf70 <HAL_UART_Receive_DMA+0x80>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800bf18:	68fb      	ldr	r3, [r7, #12]
 800bf1a:	2200      	movs	r2, #0
 800bf1c:	661a      	str	r2, [r3, #96]	; 0x60

    /* Check that USART RTOEN bit is set */
    if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800bf1e:	68fb      	ldr	r3, [r7, #12]
 800bf20:	681b      	ldr	r3, [r3, #0]
 800bf22:	685b      	ldr	r3, [r3, #4]
 800bf24:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800bf28:	2b00      	cmp	r3, #0
 800bf2a:	d018      	beq.n	800bf5e <HAL_UART_Receive_DMA+0x6e>
    {
      /* Enable the UART Receiver Timeout Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800bf2c:	68fb      	ldr	r3, [r7, #12]
 800bf2e:	681b      	ldr	r3, [r3, #0]
 800bf30:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf32:	697b      	ldr	r3, [r7, #20]
 800bf34:	e853 3f00 	ldrex	r3, [r3]
 800bf38:	613b      	str	r3, [r7, #16]
   return(result);
 800bf3a:	693b      	ldr	r3, [r7, #16]
 800bf3c:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800bf40:	627b      	str	r3, [r7, #36]	; 0x24
 800bf42:	68fb      	ldr	r3, [r7, #12]
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	461a      	mov	r2, r3
 800bf48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800bf4a:	623b      	str	r3, [r7, #32]
 800bf4c:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bf4e:	69f9      	ldr	r1, [r7, #28]
 800bf50:	6a3a      	ldr	r2, [r7, #32]
 800bf52:	e841 2300 	strex	r3, r2, [r1]
 800bf56:	61bb      	str	r3, [r7, #24]
   return(result);
 800bf58:	69bb      	ldr	r3, [r7, #24]
 800bf5a:	2b00      	cmp	r3, #0
 800bf5c:	d1e6      	bne.n	800bf2c <HAL_UART_Receive_DMA+0x3c>
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 800bf5e:	88fb      	ldrh	r3, [r7, #6]
 800bf60:	461a      	mov	r2, r3
 800bf62:	68b9      	ldr	r1, [r7, #8]
 800bf64:	68f8      	ldr	r0, [r7, #12]
 800bf66:	f001 f8b9 	bl	800d0dc <UART_Start_Receive_DMA>
 800bf6a:	4603      	mov	r3, r0
 800bf6c:	e000      	b.n	800bf70 <HAL_UART_Receive_DMA+0x80>
  }
  else
  {
    return HAL_BUSY;
 800bf6e:	2302      	movs	r3, #2
  }
}
 800bf70:	4618      	mov	r0, r3
 800bf72:	3728      	adds	r7, #40	; 0x28
 800bf74:	46bd      	mov	sp, r7
 800bf76:	bd80      	pop	{r7, pc}

0800bf78 <HAL_UART_Abort_IT>:
  * @note   This procedure is executed in Interrupt mode, meaning that abort procedure could be
  *         considered as completed only when user abort complete callback is executed (not when exiting function).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Abort_IT(UART_HandleTypeDef *huart)
{
 800bf78:	b580      	push	{r7, lr}
 800bf7a:	b0a2      	sub	sp, #136	; 0x88
 800bf7c:	af00      	add	r7, sp, #0
 800bf7e:	6078      	str	r0, [r7, #4]
  uint32_t abortcplt = 1U;
 800bf80:	2301      	movs	r3, #1
 800bf82:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84

  /* Disable interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE | USART_CR1_TCIE));
 800bf86:	687b      	ldr	r3, [r7, #4]
 800bf88:	681b      	ldr	r3, [r3, #0]
 800bf8a:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bf8c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800bf8e:	e853 3f00 	ldrex	r3, [r3]
 800bf92:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800bf94:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800bf96:	f423 73f0 	bic.w	r3, r3, #480	; 0x1e0
 800bf9a:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800bf9e:	687b      	ldr	r3, [r7, #4]
 800bfa0:	681b      	ldr	r3, [r3, #0]
 800bfa2:	461a      	mov	r2, r3
 800bfa4:	f8d7 3080 	ldr.w	r3, [r7, #128]	; 0x80
 800bfa8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800bfaa:	66ba      	str	r2, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfac:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800bfae:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800bfb0:	e841 2300 	strex	r3, r2, [r1]
 800bfb4:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800bfb6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800bfb8:	2b00      	cmp	r3, #0
 800bfba:	d1e4      	bne.n	800bf86 <HAL_UART_Abort_IT+0xe>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	681b      	ldr	r3, [r3, #0]
 800bfc0:	3308      	adds	r3, #8
 800bfc2:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bfc4:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800bfc6:	e853 3f00 	ldrex	r3, [r3]
 800bfca:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800bfcc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800bfce:	f023 0301 	bic.w	r3, r3, #1
 800bfd2:	67fb      	str	r3, [r7, #124]	; 0x7c
 800bfd4:	687b      	ldr	r3, [r7, #4]
 800bfd6:	681b      	ldr	r3, [r3, #0]
 800bfd8:	3308      	adds	r3, #8
 800bfda:	6ffa      	ldr	r2, [r7, #124]	; 0x7c
 800bfdc:	65ba      	str	r2, [r7, #88]	; 0x58
 800bfde:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800bfe0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800bfe2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800bfe4:	e841 2300 	strex	r3, r2, [r1]
 800bfe8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800bfea:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800bfec:	2b00      	cmp	r3, #0
 800bfee:	d1e5      	bne.n	800bfbc <HAL_UART_Abort_IT+0x44>

  /* If Reception till IDLE event was ongoing, disable IDLEIE interrupt */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800bff0:	687b      	ldr	r3, [r7, #4]
 800bff2:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800bff4:	2b01      	cmp	r3, #1
 800bff6:	d118      	bne.n	800c02a <HAL_UART_Abort_IT+0xb2>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_IDLEIE));
 800bff8:	687b      	ldr	r3, [r7, #4]
 800bffa:	681b      	ldr	r3, [r3, #0]
 800bffc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800bffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c000:	e853 3f00 	ldrex	r3, [r3]
 800c004:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c006:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c008:	f023 0310 	bic.w	r3, r3, #16
 800c00c:	67bb      	str	r3, [r7, #120]	; 0x78
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	461a      	mov	r2, r3
 800c014:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c016:	647b      	str	r3, [r7, #68]	; 0x44
 800c018:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c01a:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c01c:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c01e:	e841 2300 	strex	r3, r2, [r1]
 800c022:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c024:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c026:	2b00      	cmp	r3, #0
 800c028:	d1e6      	bne.n	800bff8 <HAL_UART_Abort_IT+0x80>
  }

  /* If DMA Tx and/or DMA Rx Handles are associated to UART Handle, DMA Abort complete callbacks should be initialised
     before any call to DMA Abort functions */
  /* DMA Tx Handle is valid */
  if (huart->hdmatx != NULL)
 800c02a:	687b      	ldr	r3, [r7, #4]
 800c02c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c02e:	2b00      	cmp	r3, #0
 800c030:	d00f      	beq.n	800c052 <HAL_UART_Abort_IT+0xda>
  {
    /* Set DMA Abort Complete callback if UART DMA Tx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	689b      	ldr	r3, [r3, #8]
 800c038:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c03c:	2b80      	cmp	r3, #128	; 0x80
 800c03e:	d104      	bne.n	800c04a <HAL_UART_Abort_IT+0xd2>
    {
      huart->hdmatx->XferAbortCallback = UART_DMATxAbortCallback;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c044:	4a5d      	ldr	r2, [pc, #372]	; (800c1bc <HAL_UART_Abort_IT+0x244>)
 800c046:	651a      	str	r2, [r3, #80]	; 0x50
 800c048:	e003      	b.n	800c052 <HAL_UART_Abort_IT+0xda>
    }
    else
    {
      huart->hdmatx->XferAbortCallback = NULL;
 800c04a:	687b      	ldr	r3, [r7, #4]
 800c04c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c04e:	2200      	movs	r2, #0
 800c050:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }
  /* DMA Rx Handle is valid */
  if (huart->hdmarx != NULL)
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c056:	2b00      	cmp	r3, #0
 800c058:	d00f      	beq.n	800c07a <HAL_UART_Abort_IT+0x102>
  {
    /* Set DMA Abort Complete callback if UART DMA Rx request if enabled.
       Otherwise, set it to NULL */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c05a:	687b      	ldr	r3, [r7, #4]
 800c05c:	681b      	ldr	r3, [r3, #0]
 800c05e:	689b      	ldr	r3, [r3, #8]
 800c060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c064:	2b40      	cmp	r3, #64	; 0x40
 800c066:	d104      	bne.n	800c072 <HAL_UART_Abort_IT+0xfa>
    {
      huart->hdmarx->XferAbortCallback = UART_DMARxAbortCallback;
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c06c:	4a54      	ldr	r2, [pc, #336]	; (800c1c0 <HAL_UART_Abort_IT+0x248>)
 800c06e:	651a      	str	r2, [r3, #80]	; 0x50
 800c070:	e003      	b.n	800c07a <HAL_UART_Abort_IT+0x102>
    }
    else
    {
      huart->hdmarx->XferAbortCallback = NULL;
 800c072:	687b      	ldr	r3, [r7, #4]
 800c074:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c076:	2200      	movs	r2, #0
 800c078:	651a      	str	r2, [r3, #80]	; 0x50
    }
  }

  /* Abort the UART DMA Tx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT))
 800c07a:	687b      	ldr	r3, [r7, #4]
 800c07c:	681b      	ldr	r3, [r3, #0]
 800c07e:	689b      	ldr	r3, [r3, #8]
 800c080:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c084:	2b80      	cmp	r3, #128	; 0x80
 800c086:	d12d      	bne.n	800c0e4 <HAL_UART_Abort_IT+0x16c>
  {
    /* Disable DMA Tx at UART level */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800c088:	687b      	ldr	r3, [r7, #4]
 800c08a:	681b      	ldr	r3, [r3, #0]
 800c08c:	3308      	adds	r3, #8
 800c08e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c092:	e853 3f00 	ldrex	r3, [r3]
 800c096:	623b      	str	r3, [r7, #32]
   return(result);
 800c098:	6a3b      	ldr	r3, [r7, #32]
 800c09a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800c09e:	677b      	str	r3, [r7, #116]	; 0x74
 800c0a0:	687b      	ldr	r3, [r7, #4]
 800c0a2:	681b      	ldr	r3, [r3, #0]
 800c0a4:	3308      	adds	r3, #8
 800c0a6:	6f7a      	ldr	r2, [r7, #116]	; 0x74
 800c0a8:	633a      	str	r2, [r7, #48]	; 0x30
 800c0aa:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c0ac:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c0ae:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c0b0:	e841 2300 	strex	r3, r2, [r1]
 800c0b4:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c0b6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	d1e5      	bne.n	800c088 <HAL_UART_Abort_IT+0x110>

    /* Abort the UART DMA Tx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmatx != NULL)
 800c0bc:	687b      	ldr	r3, [r7, #4]
 800c0be:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0c0:	2b00      	cmp	r3, #0
 800c0c2:	d00f      	beq.n	800c0e4 <HAL_UART_Abort_IT+0x16c>
    {
      /* UART Tx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(huart->hdmatx) != HAL_OK)
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	f7f7 ff93 	bl	8003ff4 <HAL_DMA_Abort_IT>
 800c0ce:	4603      	mov	r3, r0
 800c0d0:	2b00      	cmp	r3, #0
 800c0d2:	d004      	beq.n	800c0de <HAL_UART_Abort_IT+0x166>
      {
        huart->hdmatx->XferAbortCallback = NULL;
 800c0d4:	687b      	ldr	r3, [r7, #4]
 800c0d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800c0d8:	2200      	movs	r2, #0
 800c0da:	651a      	str	r2, [r3, #80]	; 0x50
 800c0dc:	e002      	b.n	800c0e4 <HAL_UART_Abort_IT+0x16c>
      }
      else
      {
        abortcplt = 0U;
 800c0de:	2300      	movs	r3, #0
 800c0e0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* Abort the UART DMA Rx channel if enabled */
  if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c0e4:	687b      	ldr	r3, [r7, #4]
 800c0e6:	681b      	ldr	r3, [r3, #0]
 800c0e8:	689b      	ldr	r3, [r3, #8]
 800c0ea:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c0ee:	2b40      	cmp	r3, #64	; 0x40
 800c0f0:	d130      	bne.n	800c154 <HAL_UART_Abort_IT+0x1dc>
  {
    /* Disable the UART DMA Rx request if enabled */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c0f2:	687b      	ldr	r3, [r7, #4]
 800c0f4:	681b      	ldr	r3, [r3, #0]
 800c0f6:	3308      	adds	r3, #8
 800c0f8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c0fa:	693b      	ldr	r3, [r7, #16]
 800c0fc:	e853 3f00 	ldrex	r3, [r3]
 800c100:	60fb      	str	r3, [r7, #12]
   return(result);
 800c102:	68fb      	ldr	r3, [r7, #12]
 800c104:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c108:	673b      	str	r3, [r7, #112]	; 0x70
 800c10a:	687b      	ldr	r3, [r7, #4]
 800c10c:	681b      	ldr	r3, [r3, #0]
 800c10e:	3308      	adds	r3, #8
 800c110:	6f3a      	ldr	r2, [r7, #112]	; 0x70
 800c112:	61fa      	str	r2, [r7, #28]
 800c114:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c116:	69b9      	ldr	r1, [r7, #24]
 800c118:	69fa      	ldr	r2, [r7, #28]
 800c11a:	e841 2300 	strex	r3, r2, [r1]
 800c11e:	617b      	str	r3, [r7, #20]
   return(result);
 800c120:	697b      	ldr	r3, [r7, #20]
 800c122:	2b00      	cmp	r3, #0
 800c124:	d1e5      	bne.n	800c0f2 <HAL_UART_Abort_IT+0x17a>

    /* Abort the UART DMA Rx channel : use non blocking DMA Abort API (callback) */
    if (huart->hdmarx != NULL)
 800c126:	687b      	ldr	r3, [r7, #4]
 800c128:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c12a:	2b00      	cmp	r3, #0
 800c12c:	d012      	beq.n	800c154 <HAL_UART_Abort_IT+0x1dc>
    {
      /* UART Rx DMA Abort callback has already been initialised :
         will lead to call HAL_UART_AbortCpltCallback() at end of DMA abort procedure */

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c12e:	687b      	ldr	r3, [r7, #4]
 800c130:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c132:	4618      	mov	r0, r3
 800c134:	f7f7 ff5e 	bl	8003ff4 <HAL_DMA_Abort_IT>
 800c138:	4603      	mov	r3, r0
 800c13a:	2b00      	cmp	r3, #0
 800c13c:	d007      	beq.n	800c14e <HAL_UART_Abort_IT+0x1d6>
      {
        huart->hdmarx->XferAbortCallback = NULL;
 800c13e:	687b      	ldr	r3, [r7, #4]
 800c140:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c142:	2200      	movs	r2, #0
 800c144:	651a      	str	r2, [r3, #80]	; 0x50
        abortcplt = 1U;
 800c146:	2301      	movs	r3, #1
 800c148:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800c14c:	e002      	b.n	800c154 <HAL_UART_Abort_IT+0x1dc>
      }
      else
      {
        abortcplt = 0U;
 800c14e:	2300      	movs	r3, #0
 800c150:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
      }
    }
  }

  /* if no DMA abort complete callback execution is required => call user Abort Complete callback */
  if (abortcplt == 1U)
 800c154:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c158:	2b01      	cmp	r3, #1
 800c15a:	d12a      	bne.n	800c1b2 <HAL_UART_Abort_IT+0x23a>
  {
    /* Reset Tx and Rx transfer counters */
    huart->TxXferCount = 0U;
 800c15c:	687b      	ldr	r3, [r7, #4]
 800c15e:	2200      	movs	r2, #0
 800c160:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    huart->RxXferCount = 0U;
 800c164:	687b      	ldr	r3, [r7, #4]
 800c166:	2200      	movs	r2, #0
 800c168:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Clear ISR function pointers */
    huart->RxISR = NULL;
 800c16c:	687b      	ldr	r3, [r7, #4]
 800c16e:	2200      	movs	r2, #0
 800c170:	669a      	str	r2, [r3, #104]	; 0x68
    huart->TxISR = NULL;
 800c172:	687b      	ldr	r3, [r7, #4]
 800c174:	2200      	movs	r2, #0
 800c176:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Reset errorCode */
    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	2200      	movs	r2, #0
 800c17c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Clear the Error flags in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800c180:	687b      	ldr	r3, [r7, #4]
 800c182:	681b      	ldr	r3, [r3, #0]
 800c184:	220f      	movs	r2, #15
 800c186:	621a      	str	r2, [r3, #32]


    /* Discard the received data */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	699a      	ldr	r2, [r3, #24]
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	681b      	ldr	r3, [r3, #0]
 800c192:	f042 0208 	orr.w	r2, r2, #8
 800c196:	619a      	str	r2, [r3, #24]

    /* Restore huart->gState and huart->RxState to Ready */
    huart->gState  = HAL_UART_STATE_READY;
 800c198:	687b      	ldr	r3, [r7, #4]
 800c19a:	2220      	movs	r2, #32
 800c19c:	67da      	str	r2, [r3, #124]	; 0x7c
    huart->RxState = HAL_UART_STATE_READY;
 800c19e:	687b      	ldr	r3, [r7, #4]
 800c1a0:	2220      	movs	r2, #32
 800c1a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c1a6:	687b      	ldr	r3, [r7, #4]
 800c1a8:	2200      	movs	r2, #0
 800c1aa:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Abort complete callback */
    huart->AbortCpltCallback(huart);
#else
    /* Call legacy weak Abort complete callback */
    HAL_UART_AbortCpltCallback(huart);
 800c1ac:	6878      	ldr	r0, [r7, #4]
 800c1ae:	f010 fd5f 	bl	801cc70 <HAL_UART_AbortCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }

  return HAL_OK;
 800c1b2:	2300      	movs	r3, #0
}
 800c1b4:	4618      	mov	r0, r3
 800c1b6:	3788      	adds	r7, #136	; 0x88
 800c1b8:	46bd      	mov	sp, r7
 800c1ba:	bd80      	pop	{r7, pc}
 800c1bc:	0800d5f3 	.word	0x0800d5f3
 800c1c0:	0800d65f 	.word	0x0800d65f

0800c1c4 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800c1c4:	b580      	push	{r7, lr}
 800c1c6:	b0ba      	sub	sp, #232	; 0xe8
 800c1c8:	af00      	add	r7, sp, #0
 800c1ca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 800c1cc:	687b      	ldr	r3, [r7, #4]
 800c1ce:	681b      	ldr	r3, [r3, #0]
 800c1d0:	69db      	ldr	r3, [r3, #28]
 800c1d2:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800c1d6:	687b      	ldr	r3, [r7, #4]
 800c1d8:	681b      	ldr	r3, [r3, #0]
 800c1da:	681b      	ldr	r3, [r3, #0]
 800c1dc:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800c1e0:	687b      	ldr	r3, [r7, #4]
 800c1e2:	681b      	ldr	r3, [r3, #0]
 800c1e4:	689b      	ldr	r3, [r3, #8]
 800c1e6:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 800c1ea:	f8d7 20e4 	ldr.w	r2, [r7, #228]	; 0xe4
 800c1ee:	f640 030f 	movw	r3, #2063	; 0x80f
 800c1f2:	4013      	ands	r3, r2
 800c1f4:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == 0U)
 800c1f8:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c1fc:	2b00      	cmp	r3, #0
 800c1fe:	d115      	bne.n	800c22c <HAL_UART_IRQHandler+0x68>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 800c200:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c204:	f003 0320 	and.w	r3, r3, #32
 800c208:	2b00      	cmp	r3, #0
 800c20a:	d00f      	beq.n	800c22c <HAL_UART_IRQHandler+0x68>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c20c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c210:	f003 0320 	and.w	r3, r3, #32
 800c214:	2b00      	cmp	r3, #0
 800c216:	d009      	beq.n	800c22c <HAL_UART_IRQHandler+0x68>
    {
      if (huart->RxISR != NULL)
 800c218:	687b      	ldr	r3, [r7, #4]
 800c21a:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c21c:	2b00      	cmp	r3, #0
 800c21e:	f000 8297 	beq.w	800c750 <HAL_UART_IRQHandler+0x58c>
      {
        huart->RxISR(huart);
 800c222:	687b      	ldr	r3, [r7, #4]
 800c224:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c226:	6878      	ldr	r0, [r7, #4]
 800c228:	4798      	blx	r3
      }
      return;
 800c22a:	e291      	b.n	800c750 <HAL_UART_IRQHandler+0x58c>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 800c22c:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800c230:	2b00      	cmp	r3, #0
 800c232:	f000 8117 	beq.w	800c464 <HAL_UART_IRQHandler+0x2a0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 800c236:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c23a:	f003 0301 	and.w	r3, r3, #1
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d106      	bne.n	800c250 <HAL_UART_IRQHandler+0x8c>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 800c242:	f8d7 20e0 	ldr.w	r2, [r7, #224]	; 0xe0
 800c246:	4b85      	ldr	r3, [pc, #532]	; (800c45c <HAL_UART_IRQHandler+0x298>)
 800c248:	4013      	ands	r3, r2
 800c24a:	2b00      	cmp	r3, #0
 800c24c:	f000 810a 	beq.w	800c464 <HAL_UART_IRQHandler+0x2a0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 800c250:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c254:	f003 0301 	and.w	r3, r3, #1
 800c258:	2b00      	cmp	r3, #0
 800c25a:	d011      	beq.n	800c280 <HAL_UART_IRQHandler+0xbc>
 800c25c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c260:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800c264:	2b00      	cmp	r3, #0
 800c266:	d00b      	beq.n	800c280 <HAL_UART_IRQHandler+0xbc>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 800c268:	687b      	ldr	r3, [r7, #4]
 800c26a:	681b      	ldr	r3, [r3, #0]
 800c26c:	2201      	movs	r2, #1
 800c26e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800c270:	687b      	ldr	r3, [r7, #4]
 800c272:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c276:	f043 0201 	orr.w	r2, r3, #1
 800c27a:	687b      	ldr	r3, [r7, #4]
 800c27c:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c280:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c284:	f003 0302 	and.w	r3, r3, #2
 800c288:	2b00      	cmp	r3, #0
 800c28a:	d011      	beq.n	800c2b0 <HAL_UART_IRQHandler+0xec>
 800c28c:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c290:	f003 0301 	and.w	r3, r3, #1
 800c294:	2b00      	cmp	r3, #0
 800c296:	d00b      	beq.n	800c2b0 <HAL_UART_IRQHandler+0xec>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 800c298:	687b      	ldr	r3, [r7, #4]
 800c29a:	681b      	ldr	r3, [r3, #0]
 800c29c:	2202      	movs	r2, #2
 800c29e:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800c2a0:	687b      	ldr	r3, [r7, #4]
 800c2a2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c2a6:	f043 0204 	orr.w	r2, r3, #4
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 800c2b0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2b4:	f003 0304 	and.w	r3, r3, #4
 800c2b8:	2b00      	cmp	r3, #0
 800c2ba:	d011      	beq.n	800c2e0 <HAL_UART_IRQHandler+0x11c>
 800c2bc:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c2c0:	f003 0301 	and.w	r3, r3, #1
 800c2c4:	2b00      	cmp	r3, #0
 800c2c6:	d00b      	beq.n	800c2e0 <HAL_UART_IRQHandler+0x11c>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 800c2c8:	687b      	ldr	r3, [r7, #4]
 800c2ca:	681b      	ldr	r3, [r3, #0]
 800c2cc:	2204      	movs	r2, #4
 800c2ce:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800c2d0:	687b      	ldr	r3, [r7, #4]
 800c2d2:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c2d6:	f043 0202 	orr.w	r2, r3, #2
 800c2da:	687b      	ldr	r3, [r7, #4]
 800c2dc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 800c2e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c2e4:	f003 0308 	and.w	r3, r3, #8
 800c2e8:	2b00      	cmp	r3, #0
 800c2ea:	d017      	beq.n	800c31c <HAL_UART_IRQHandler+0x158>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c2ec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c2f0:	f003 0320 	and.w	r3, r3, #32
 800c2f4:	2b00      	cmp	r3, #0
 800c2f6:	d105      	bne.n	800c304 <HAL_UART_IRQHandler+0x140>
            ((cr3its & USART_CR3_EIE) != 0U)))
 800c2f8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800c2fc:	f003 0301 	and.w	r3, r3, #1
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 800c300:	2b00      	cmp	r3, #0
 800c302:	d00b      	beq.n	800c31c <HAL_UART_IRQHandler+0x158>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	681b      	ldr	r3, [r3, #0]
 800c308:	2208      	movs	r2, #8
 800c30a:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800c30c:	687b      	ldr	r3, [r7, #4]
 800c30e:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c312:	f043 0208 	orr.w	r2, r3, #8
 800c316:	687b      	ldr	r3, [r7, #4]
 800c318:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 800c31c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c320:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800c324:	2b00      	cmp	r3, #0
 800c326:	d012      	beq.n	800c34e <HAL_UART_IRQHandler+0x18a>
 800c328:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c32c:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800c330:	2b00      	cmp	r3, #0
 800c332:	d00c      	beq.n	800c34e <HAL_UART_IRQHandler+0x18a>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	681b      	ldr	r3, [r3, #0]
 800c338:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800c33c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 800c33e:	687b      	ldr	r3, [r7, #4]
 800c340:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c344:	f043 0220 	orr.w	r2, r3, #32
 800c348:	687b      	ldr	r3, [r7, #4]
 800c34a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800c34e:	687b      	ldr	r3, [r7, #4]
 800c350:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c354:	2b00      	cmp	r3, #0
 800c356:	f000 81fd 	beq.w	800c754 <HAL_UART_IRQHandler+0x590>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 800c35a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c35e:	f003 0320 	and.w	r3, r3, #32
 800c362:	2b00      	cmp	r3, #0
 800c364:	d00d      	beq.n	800c382 <HAL_UART_IRQHandler+0x1be>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 800c366:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c36a:	f003 0320 	and.w	r3, r3, #32
 800c36e:	2b00      	cmp	r3, #0
 800c370:	d007      	beq.n	800c382 <HAL_UART_IRQHandler+0x1be>
      {
        if (huart->RxISR != NULL)
 800c372:	687b      	ldr	r3, [r7, #4]
 800c374:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c376:	2b00      	cmp	r3, #0
 800c378:	d003      	beq.n	800c382 <HAL_UART_IRQHandler+0x1be>
        {
          huart->RxISR(huart);
 800c37a:	687b      	ldr	r3, [r7, #4]
 800c37c:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 800c37e:	6878      	ldr	r0, [r7, #4]
 800c380:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 800c382:	687b      	ldr	r3, [r7, #4]
 800c384:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800c388:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c38c:	687b      	ldr	r3, [r7, #4]
 800c38e:	681b      	ldr	r3, [r3, #0]
 800c390:	689b      	ldr	r3, [r3, #8]
 800c392:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c396:	2b40      	cmp	r3, #64	; 0x40
 800c398:	d005      	beq.n	800c3a6 <HAL_UART_IRQHandler+0x1e2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 800c39a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800c39e:	f003 0328 	and.w	r3, r3, #40	; 0x28
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 800c3a2:	2b00      	cmp	r3, #0
 800c3a4:	d04f      	beq.n	800c446 <HAL_UART_IRQHandler+0x282>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800c3a6:	6878      	ldr	r0, [r7, #4]
 800c3a8:	f000 ff5e 	bl	800d268 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c3ac:	687b      	ldr	r3, [r7, #4]
 800c3ae:	681b      	ldr	r3, [r3, #0]
 800c3b0:	689b      	ldr	r3, [r3, #8]
 800c3b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c3b6:	2b40      	cmp	r3, #64	; 0x40
 800c3b8:	d141      	bne.n	800c43e <HAL_UART_IRQHandler+0x27a>
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c3ba:	687b      	ldr	r3, [r7, #4]
 800c3bc:	681b      	ldr	r3, [r3, #0]
 800c3be:	3308      	adds	r3, #8
 800c3c0:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c3c4:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 800c3c8:	e853 3f00 	ldrex	r3, [r3]
 800c3cc:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800c3d0:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800c3d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c3d8:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800c3dc:	687b      	ldr	r3, [r7, #4]
 800c3de:	681b      	ldr	r3, [r3, #0]
 800c3e0:	3308      	adds	r3, #8
 800c3e2:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 800c3e6:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 800c3ea:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c3ee:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800c3f2:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800c3f6:	e841 2300 	strex	r3, r2, [r1]
 800c3fa:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800c3fe:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800c402:	2b00      	cmp	r3, #0
 800c404:	d1d9      	bne.n	800c3ba <HAL_UART_IRQHandler+0x1f6>

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 800c406:	687b      	ldr	r3, [r7, #4]
 800c408:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c40a:	2b00      	cmp	r3, #0
 800c40c:	d013      	beq.n	800c436 <HAL_UART_IRQHandler+0x272>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800c40e:	687b      	ldr	r3, [r7, #4]
 800c410:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c412:	4a13      	ldr	r2, [pc, #76]	; (800c460 <HAL_UART_IRQHandler+0x29c>)
 800c414:	651a      	str	r2, [r3, #80]	; 0x50

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800c416:	687b      	ldr	r3, [r7, #4]
 800c418:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c41a:	4618      	mov	r0, r3
 800c41c:	f7f7 fdea 	bl	8003ff4 <HAL_DMA_Abort_IT>
 800c420:	4603      	mov	r3, r0
 800c422:	2b00      	cmp	r3, #0
 800c424:	d017      	beq.n	800c456 <HAL_UART_IRQHandler+0x292>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800c426:	687b      	ldr	r3, [r7, #4]
 800c428:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c42a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800c42c:	687a      	ldr	r2, [r7, #4]
 800c42e:	6f52      	ldr	r2, [r2, #116]	; 0x74
 800c430:	4610      	mov	r0, r2
 800c432:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c434:	e00f      	b.n	800c456 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800c436:	6878      	ldr	r0, [r7, #4]
 800c438:	f010 fbe0 	bl	801cbfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c43c:	e00b      	b.n	800c456 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800c43e:	6878      	ldr	r0, [r7, #4]
 800c440:	f010 fbdc 	bl	801cbfc <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c444:	e007      	b.n	800c456 <HAL_UART_IRQHandler+0x292>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800c446:	6878      	ldr	r0, [r7, #4]
 800c448:	f010 fbd8 	bl	801cbfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800c44c:	687b      	ldr	r3, [r7, #4]
 800c44e:	2200      	movs	r2, #0
 800c450:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      }
    }
    return;
 800c454:	e17e      	b.n	800c754 <HAL_UART_IRQHandler+0x590>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c456:	bf00      	nop
    return;
 800c458:	e17c      	b.n	800c754 <HAL_UART_IRQHandler+0x590>
 800c45a:	bf00      	nop
 800c45c:	04000120 	.word	0x04000120
 800c460:	0800d5c7 	.word	0x0800d5c7

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800c464:	687b      	ldr	r3, [r7, #4]
 800c466:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800c468:	2b01      	cmp	r3, #1
 800c46a:	f040 814c 	bne.w	800c706 <HAL_UART_IRQHandler+0x542>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 800c46e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c472:	f003 0310 	and.w	r3, r3, #16
 800c476:	2b00      	cmp	r3, #0
 800c478:	f000 8145 	beq.w	800c706 <HAL_UART_IRQHandler+0x542>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 800c47c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c480:	f003 0310 	and.w	r3, r3, #16
 800c484:	2b00      	cmp	r3, #0
 800c486:	f000 813e 	beq.w	800c706 <HAL_UART_IRQHandler+0x542>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800c48a:	687b      	ldr	r3, [r7, #4]
 800c48c:	681b      	ldr	r3, [r3, #0]
 800c48e:	2210      	movs	r2, #16
 800c490:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800c492:	687b      	ldr	r3, [r7, #4]
 800c494:	681b      	ldr	r3, [r3, #0]
 800c496:	689b      	ldr	r3, [r3, #8]
 800c498:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c49c:	2b40      	cmp	r3, #64	; 0x40
 800c49e:	f040 80b6 	bne.w	800c60e <HAL_UART_IRQHandler+0x44a>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800c4a2:	687b      	ldr	r3, [r7, #4]
 800c4a4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4a6:	681b      	ldr	r3, [r3, #0]
 800c4a8:	685b      	ldr	r3, [r3, #4]
 800c4aa:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800c4ae:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800c4b2:	2b00      	cmp	r3, #0
 800c4b4:	f000 8150 	beq.w	800c758 <HAL_UART_IRQHandler+0x594>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800c4b8:	687b      	ldr	r3, [r7, #4]
 800c4ba:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800c4be:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c4c2:	429a      	cmp	r2, r3
 800c4c4:	f080 8148 	bcs.w	800c758 <HAL_UART_IRQHandler+0x594>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800c4c8:	687b      	ldr	r3, [r7, #4]
 800c4ca:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800c4ce:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800c4d2:	687b      	ldr	r3, [r7, #4]
 800c4d4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c4d6:	69db      	ldr	r3, [r3, #28]
 800c4d8:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c4dc:	f000 8086 	beq.w	800c5ec <HAL_UART_IRQHandler+0x428>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800c4e0:	687b      	ldr	r3, [r7, #4]
 800c4e2:	681b      	ldr	r3, [r3, #0]
 800c4e4:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c4e8:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800c4ec:	e853 3f00 	ldrex	r3, [r3]
 800c4f0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800c4f4:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800c4f8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800c4fc:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800c500:	687b      	ldr	r3, [r7, #4]
 800c502:	681b      	ldr	r3, [r3, #0]
 800c504:	461a      	mov	r2, r3
 800c506:	f8d7 30b8 	ldr.w	r3, [r7, #184]	; 0xb8
 800c50a:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 800c50e:	f8c7 2090 	str.w	r2, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c512:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800c516:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800c51a:	e841 2300 	strex	r3, r2, [r1]
 800c51e:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800c522:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800c526:	2b00      	cmp	r3, #0
 800c528:	d1da      	bne.n	800c4e0 <HAL_UART_IRQHandler+0x31c>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	681b      	ldr	r3, [r3, #0]
 800c52e:	3308      	adds	r3, #8
 800c530:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c532:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800c534:	e853 3f00 	ldrex	r3, [r3]
 800c538:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800c53a:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800c53c:	f023 0301 	bic.w	r3, r3, #1
 800c540:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800c544:	687b      	ldr	r3, [r7, #4]
 800c546:	681b      	ldr	r3, [r3, #0]
 800c548:	3308      	adds	r3, #8
 800c54a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800c54e:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800c552:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c554:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800c556:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800c55a:	e841 2300 	strex	r3, r2, [r1]
 800c55e:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800c560:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800c562:	2b00      	cmp	r3, #0
 800c564:	d1e1      	bne.n	800c52a <HAL_UART_IRQHandler+0x366>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800c566:	687b      	ldr	r3, [r7, #4]
 800c568:	681b      	ldr	r3, [r3, #0]
 800c56a:	3308      	adds	r3, #8
 800c56c:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c56e:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800c570:	e853 3f00 	ldrex	r3, [r3]
 800c574:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800c576:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800c578:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800c57c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800c580:	687b      	ldr	r3, [r7, #4]
 800c582:	681b      	ldr	r3, [r3, #0]
 800c584:	3308      	adds	r3, #8
 800c586:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800c58a:	66fa      	str	r2, [r7, #108]	; 0x6c
 800c58c:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c58e:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800c590:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800c592:	e841 2300 	strex	r3, r2, [r1]
 800c596:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800c598:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800c59a:	2b00      	cmp	r3, #0
 800c59c:	d1e3      	bne.n	800c566 <HAL_UART_IRQHandler+0x3a2>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800c59e:	687b      	ldr	r3, [r7, #4]
 800c5a0:	2220      	movs	r2, #32
 800c5a2:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c5a6:	687b      	ldr	r3, [r7, #4]
 800c5a8:	2200      	movs	r2, #0
 800c5aa:	661a      	str	r2, [r3, #96]	; 0x60

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c5ac:	687b      	ldr	r3, [r7, #4]
 800c5ae:	681b      	ldr	r3, [r3, #0]
 800c5b0:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c5b2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800c5b4:	e853 3f00 	ldrex	r3, [r3]
 800c5b8:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800c5ba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800c5bc:	f023 0310 	bic.w	r3, r3, #16
 800c5c0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800c5c4:	687b      	ldr	r3, [r7, #4]
 800c5c6:	681b      	ldr	r3, [r3, #0]
 800c5c8:	461a      	mov	r2, r3
 800c5ca:	f8d7 30ac 	ldr.w	r3, [r7, #172]	; 0xac
 800c5ce:	65bb      	str	r3, [r7, #88]	; 0x58
 800c5d0:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c5d2:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800c5d4:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800c5d6:	e841 2300 	strex	r3, r2, [r1]
 800c5da:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800c5dc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800c5de:	2b00      	cmp	r3, #0
 800c5e0:	d1e4      	bne.n	800c5ac <HAL_UART_IRQHandler+0x3e8>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800c5e2:	687b      	ldr	r3, [r7, #4]
 800c5e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800c5e6:	4618      	mov	r0, r3
 800c5e8:	f7f7 fc94 	bl	8003f14 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c5ec:	687b      	ldr	r3, [r7, #4]
 800c5ee:	2202      	movs	r2, #2
 800c5f0:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800c5f2:	687b      	ldr	r3, [r7, #4]
 800c5f4:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800c5f8:	687b      	ldr	r3, [r7, #4]
 800c5fa:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c5fe:	b29b      	uxth	r3, r3
 800c600:	1ad3      	subs	r3, r2, r3
 800c602:	b29b      	uxth	r3, r3
 800c604:	4619      	mov	r1, r3
 800c606:	6878      	ldr	r0, [r7, #4]
 800c608:	f000 f8cc 	bl	800c7a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c60c:	e0a4      	b.n	800c758 <HAL_UART_IRQHandler+0x594>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800c60e:	687b      	ldr	r3, [r7, #4]
 800c610:	f8b3 2058 	ldrh.w	r2, [r3, #88]	; 0x58
 800c614:	687b      	ldr	r3, [r7, #4]
 800c616:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c61a:	b29b      	uxth	r3, r3
 800c61c:	1ad3      	subs	r3, r2, r3
 800c61e:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800c622:	687b      	ldr	r3, [r7, #4]
 800c624:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800c628:	b29b      	uxth	r3, r3
 800c62a:	2b00      	cmp	r3, #0
 800c62c:	f000 8096 	beq.w	800c75c <HAL_UART_IRQHandler+0x598>
          && (nb_rx_data > 0U))
 800c630:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c634:	2b00      	cmp	r3, #0
 800c636:	f000 8091 	beq.w	800c75c <HAL_UART_IRQHandler+0x598>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800c63a:	687b      	ldr	r3, [r7, #4]
 800c63c:	681b      	ldr	r3, [r3, #0]
 800c63e:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c640:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800c642:	e853 3f00 	ldrex	r3, [r3]
 800c646:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800c648:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800c64a:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800c64e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800c652:	687b      	ldr	r3, [r7, #4]
 800c654:	681b      	ldr	r3, [r3, #0]
 800c656:	461a      	mov	r2, r3
 800c658:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800c65c:	647b      	str	r3, [r7, #68]	; 0x44
 800c65e:	643a      	str	r2, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c660:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800c662:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800c664:	e841 2300 	strex	r3, r2, [r1]
 800c668:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800c66a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800c66c:	2b00      	cmp	r3, #0
 800c66e:	d1e4      	bne.n	800c63a <HAL_UART_IRQHandler+0x476>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800c670:	687b      	ldr	r3, [r7, #4]
 800c672:	681b      	ldr	r3, [r3, #0]
 800c674:	3308      	adds	r3, #8
 800c676:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c67a:	e853 3f00 	ldrex	r3, [r3]
 800c67e:	623b      	str	r3, [r7, #32]
   return(result);
 800c680:	6a3b      	ldr	r3, [r7, #32]
 800c682:	f023 0301 	bic.w	r3, r3, #1
 800c686:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800c68a:	687b      	ldr	r3, [r7, #4]
 800c68c:	681b      	ldr	r3, [r3, #0]
 800c68e:	3308      	adds	r3, #8
 800c690:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800c694:	633a      	str	r2, [r7, #48]	; 0x30
 800c696:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c698:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800c69a:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800c69c:	e841 2300 	strex	r3, r2, [r1]
 800c6a0:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800c6a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800c6a4:	2b00      	cmp	r3, #0
 800c6a6:	d1e3      	bne.n	800c670 <HAL_UART_IRQHandler+0x4ac>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800c6a8:	687b      	ldr	r3, [r7, #4]
 800c6aa:	2220      	movs	r2, #32
 800c6ac:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800c6b0:	687b      	ldr	r3, [r7, #4]
 800c6b2:	2200      	movs	r2, #0
 800c6b4:	661a      	str	r2, [r3, #96]	; 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 800c6b6:	687b      	ldr	r3, [r7, #4]
 800c6b8:	2200      	movs	r2, #0
 800c6ba:	669a      	str	r2, [r3, #104]	; 0x68

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800c6bc:	687b      	ldr	r3, [r7, #4]
 800c6be:	681b      	ldr	r3, [r3, #0]
 800c6c0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800c6c2:	693b      	ldr	r3, [r7, #16]
 800c6c4:	e853 3f00 	ldrex	r3, [r3]
 800c6c8:	60fb      	str	r3, [r7, #12]
   return(result);
 800c6ca:	68fb      	ldr	r3, [r7, #12]
 800c6cc:	f023 0310 	bic.w	r3, r3, #16
 800c6d0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800c6d4:	687b      	ldr	r3, [r7, #4]
 800c6d6:	681b      	ldr	r3, [r3, #0]
 800c6d8:	461a      	mov	r2, r3
 800c6da:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800c6de:	61fb      	str	r3, [r7, #28]
 800c6e0:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800c6e2:	69b9      	ldr	r1, [r7, #24]
 800c6e4:	69fa      	ldr	r2, [r7, #28]
 800c6e6:	e841 2300 	strex	r3, r2, [r1]
 800c6ea:	617b      	str	r3, [r7, #20]
   return(result);
 800c6ec:	697b      	ldr	r3, [r7, #20]
 800c6ee:	2b00      	cmp	r3, #0
 800c6f0:	d1e4      	bne.n	800c6bc <HAL_UART_IRQHandler+0x4f8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800c6f2:	687b      	ldr	r3, [r7, #4]
 800c6f4:	2202      	movs	r2, #2
 800c6f6:	665a      	str	r2, [r3, #100]	; 0x64
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800c6f8:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800c6fc:	4619      	mov	r1, r3
 800c6fe:	6878      	ldr	r0, [r7, #4]
 800c700:	f000 f850 	bl	800c7a4 <HAL_UARTEx_RxEventCallback>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 800c704:	e02a      	b.n	800c75c <HAL_UART_IRQHandler+0x598>
  }
#endif /* USART_CR3_WUFIE */
#endif /* USART_CR1_UESM */

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 800c706:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c70a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c70e:	2b00      	cmp	r3, #0
 800c710:	d00e      	beq.n	800c730 <HAL_UART_IRQHandler+0x56c>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 800c712:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c716:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d008      	beq.n	800c730 <HAL_UART_IRQHandler+0x56c>
  {
    if (huart->TxISR != NULL)
 800c71e:	687b      	ldr	r3, [r7, #4]
 800c720:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c722:	2b00      	cmp	r3, #0
 800c724:	d01c      	beq.n	800c760 <HAL_UART_IRQHandler+0x59c>
    {
      huart->TxISR(huart);
 800c726:	687b      	ldr	r3, [r7, #4]
 800c728:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800c72a:	6878      	ldr	r0, [r7, #4]
 800c72c:	4798      	blx	r3
    }
    return;
 800c72e:	e017      	b.n	800c760 <HAL_UART_IRQHandler+0x59c>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 800c730:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800c734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c738:	2b00      	cmp	r3, #0
 800c73a:	d012      	beq.n	800c762 <HAL_UART_IRQHandler+0x59e>
 800c73c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800c740:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800c744:	2b00      	cmp	r3, #0
 800c746:	d00c      	beq.n	800c762 <HAL_UART_IRQHandler+0x59e>
  {
    UART_EndTransmit_IT(huart);
 800c748:	6878      	ldr	r0, [r7, #4]
 800c74a:	f001 f881 	bl	800d850 <UART_EndTransmit_IT>
    return;
 800c74e:	e008      	b.n	800c762 <HAL_UART_IRQHandler+0x59e>
      return;
 800c750:	bf00      	nop
 800c752:	e006      	b.n	800c762 <HAL_UART_IRQHandler+0x59e>
    return;
 800c754:	bf00      	nop
 800c756:	e004      	b.n	800c762 <HAL_UART_IRQHandler+0x59e>
      return;
 800c758:	bf00      	nop
 800c75a:	e002      	b.n	800c762 <HAL_UART_IRQHandler+0x59e>
      return;
 800c75c:	bf00      	nop
 800c75e:	e000      	b.n	800c762 <HAL_UART_IRQHandler+0x59e>
    return;
 800c760:	bf00      	nop
  }

}
 800c762:	37e8      	adds	r7, #232	; 0xe8
 800c764:	46bd      	mov	sp, r7
 800c766:	bd80      	pop	{r7, pc}

0800c768 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800c768:	b480      	push	{r7}
 800c76a:	b083      	sub	sp, #12
 800c76c:	af00      	add	r7, sp, #0
 800c76e:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 800c770:	bf00      	nop
 800c772:	370c      	adds	r7, #12
 800c774:	46bd      	mov	sp, r7
 800c776:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c77a:	4770      	bx	lr

0800c77c <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c77c:	b480      	push	{r7}
 800c77e:	b083      	sub	sp, #12
 800c780:	af00      	add	r7, sp, #0
 800c782:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 800c784:	bf00      	nop
 800c786:	370c      	adds	r7, #12
 800c788:	46bd      	mov	sp, r7
 800c78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c78e:	4770      	bx	lr

0800c790 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800c790:	b480      	push	{r7}
 800c792:	b083      	sub	sp, #12
 800c794:	af00      	add	r7, sp, #0
 800c796:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 800c798:	bf00      	nop
 800c79a:	370c      	adds	r7, #12
 800c79c:	46bd      	mov	sp, r7
 800c79e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7a2:	4770      	bx	lr

0800c7a4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800c7a4:	b480      	push	{r7}
 800c7a6:	b083      	sub	sp, #12
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
 800c7ac:	460b      	mov	r3, r1
 800c7ae:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800c7b0:	bf00      	nop
 800c7b2:	370c      	adds	r7, #12
 800c7b4:	46bd      	mov	sp, r7
 800c7b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c7ba:	4770      	bx	lr

0800c7bc <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 800c7bc:	b580      	push	{r7, lr}
 800c7be:	b088      	sub	sp, #32
 800c7c0:	af00      	add	r7, sp, #0
 800c7c2:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 800c7c4:	2300      	movs	r3, #0
 800c7c6:	77bb      	strb	r3, [r7, #30]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 800c7c8:	687b      	ldr	r3, [r7, #4]
 800c7ca:	689a      	ldr	r2, [r3, #8]
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	691b      	ldr	r3, [r3, #16]
 800c7d0:	431a      	orrs	r2, r3
 800c7d2:	687b      	ldr	r3, [r7, #4]
 800c7d4:	695b      	ldr	r3, [r3, #20]
 800c7d6:	431a      	orrs	r2, r3
 800c7d8:	687b      	ldr	r3, [r7, #4]
 800c7da:	69db      	ldr	r3, [r3, #28]
 800c7dc:	4313      	orrs	r3, r2
 800c7de:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 800c7e0:	687b      	ldr	r3, [r7, #4]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	681a      	ldr	r2, [r3, #0]
 800c7e6:	4ba6      	ldr	r3, [pc, #664]	; (800ca80 <UART_SetConfig+0x2c4>)
 800c7e8:	4013      	ands	r3, r2
 800c7ea:	687a      	ldr	r2, [r7, #4]
 800c7ec:	6812      	ldr	r2, [r2, #0]
 800c7ee:	6979      	ldr	r1, [r7, #20]
 800c7f0:	430b      	orrs	r3, r1
 800c7f2:	6013      	str	r3, [r2, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800c7f4:	687b      	ldr	r3, [r7, #4]
 800c7f6:	681b      	ldr	r3, [r3, #0]
 800c7f8:	685b      	ldr	r3, [r3, #4]
 800c7fa:	f423 5140 	bic.w	r1, r3, #12288	; 0x3000
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	68da      	ldr	r2, [r3, #12]
 800c802:	687b      	ldr	r3, [r7, #4]
 800c804:	681b      	ldr	r3, [r3, #0]
 800c806:	430a      	orrs	r2, r1
 800c808:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	699b      	ldr	r3, [r3, #24]
 800c80e:	617b      	str	r3, [r7, #20]

  tmpreg |= huart->Init.OneBitSampling;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6a1b      	ldr	r3, [r3, #32]
 800c814:	697a      	ldr	r2, [r7, #20]
 800c816:	4313      	orrs	r3, r2
 800c818:	617b      	str	r3, [r7, #20]
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 800c81a:	687b      	ldr	r3, [r7, #4]
 800c81c:	681b      	ldr	r3, [r3, #0]
 800c81e:	689b      	ldr	r3, [r3, #8]
 800c820:	f423 6130 	bic.w	r1, r3, #2816	; 0xb00
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	681b      	ldr	r3, [r3, #0]
 800c828:	697a      	ldr	r2, [r7, #20]
 800c82a:	430a      	orrs	r2, r1
 800c82c:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 800c82e:	687b      	ldr	r3, [r7, #4]
 800c830:	681b      	ldr	r3, [r3, #0]
 800c832:	4a94      	ldr	r2, [pc, #592]	; (800ca84 <UART_SetConfig+0x2c8>)
 800c834:	4293      	cmp	r3, r2
 800c836:	d120      	bne.n	800c87a <UART_SetConfig+0xbe>
 800c838:	4b93      	ldr	r3, [pc, #588]	; (800ca88 <UART_SetConfig+0x2cc>)
 800c83a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c83e:	f003 0303 	and.w	r3, r3, #3
 800c842:	2b03      	cmp	r3, #3
 800c844:	d816      	bhi.n	800c874 <UART_SetConfig+0xb8>
 800c846:	a201      	add	r2, pc, #4	; (adr r2, 800c84c <UART_SetConfig+0x90>)
 800c848:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c84c:	0800c85d 	.word	0x0800c85d
 800c850:	0800c869 	.word	0x0800c869
 800c854:	0800c863 	.word	0x0800c863
 800c858:	0800c86f 	.word	0x0800c86f
 800c85c:	2301      	movs	r3, #1
 800c85e:	77fb      	strb	r3, [r7, #31]
 800c860:	e150      	b.n	800cb04 <UART_SetConfig+0x348>
 800c862:	2302      	movs	r3, #2
 800c864:	77fb      	strb	r3, [r7, #31]
 800c866:	e14d      	b.n	800cb04 <UART_SetConfig+0x348>
 800c868:	2304      	movs	r3, #4
 800c86a:	77fb      	strb	r3, [r7, #31]
 800c86c:	e14a      	b.n	800cb04 <UART_SetConfig+0x348>
 800c86e:	2308      	movs	r3, #8
 800c870:	77fb      	strb	r3, [r7, #31]
 800c872:	e147      	b.n	800cb04 <UART_SetConfig+0x348>
 800c874:	2310      	movs	r3, #16
 800c876:	77fb      	strb	r3, [r7, #31]
 800c878:	e144      	b.n	800cb04 <UART_SetConfig+0x348>
 800c87a:	687b      	ldr	r3, [r7, #4]
 800c87c:	681b      	ldr	r3, [r3, #0]
 800c87e:	4a83      	ldr	r2, [pc, #524]	; (800ca8c <UART_SetConfig+0x2d0>)
 800c880:	4293      	cmp	r3, r2
 800c882:	d132      	bne.n	800c8ea <UART_SetConfig+0x12e>
 800c884:	4b80      	ldr	r3, [pc, #512]	; (800ca88 <UART_SetConfig+0x2cc>)
 800c886:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c88a:	f003 030c 	and.w	r3, r3, #12
 800c88e:	2b0c      	cmp	r3, #12
 800c890:	d828      	bhi.n	800c8e4 <UART_SetConfig+0x128>
 800c892:	a201      	add	r2, pc, #4	; (adr r2, 800c898 <UART_SetConfig+0xdc>)
 800c894:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800c898:	0800c8cd 	.word	0x0800c8cd
 800c89c:	0800c8e5 	.word	0x0800c8e5
 800c8a0:	0800c8e5 	.word	0x0800c8e5
 800c8a4:	0800c8e5 	.word	0x0800c8e5
 800c8a8:	0800c8d9 	.word	0x0800c8d9
 800c8ac:	0800c8e5 	.word	0x0800c8e5
 800c8b0:	0800c8e5 	.word	0x0800c8e5
 800c8b4:	0800c8e5 	.word	0x0800c8e5
 800c8b8:	0800c8d3 	.word	0x0800c8d3
 800c8bc:	0800c8e5 	.word	0x0800c8e5
 800c8c0:	0800c8e5 	.word	0x0800c8e5
 800c8c4:	0800c8e5 	.word	0x0800c8e5
 800c8c8:	0800c8df 	.word	0x0800c8df
 800c8cc:	2300      	movs	r3, #0
 800c8ce:	77fb      	strb	r3, [r7, #31]
 800c8d0:	e118      	b.n	800cb04 <UART_SetConfig+0x348>
 800c8d2:	2302      	movs	r3, #2
 800c8d4:	77fb      	strb	r3, [r7, #31]
 800c8d6:	e115      	b.n	800cb04 <UART_SetConfig+0x348>
 800c8d8:	2304      	movs	r3, #4
 800c8da:	77fb      	strb	r3, [r7, #31]
 800c8dc:	e112      	b.n	800cb04 <UART_SetConfig+0x348>
 800c8de:	2308      	movs	r3, #8
 800c8e0:	77fb      	strb	r3, [r7, #31]
 800c8e2:	e10f      	b.n	800cb04 <UART_SetConfig+0x348>
 800c8e4:	2310      	movs	r3, #16
 800c8e6:	77fb      	strb	r3, [r7, #31]
 800c8e8:	e10c      	b.n	800cb04 <UART_SetConfig+0x348>
 800c8ea:	687b      	ldr	r3, [r7, #4]
 800c8ec:	681b      	ldr	r3, [r3, #0]
 800c8ee:	4a68      	ldr	r2, [pc, #416]	; (800ca90 <UART_SetConfig+0x2d4>)
 800c8f0:	4293      	cmp	r3, r2
 800c8f2:	d120      	bne.n	800c936 <UART_SetConfig+0x17a>
 800c8f4:	4b64      	ldr	r3, [pc, #400]	; (800ca88 <UART_SetConfig+0x2cc>)
 800c8f6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c8fa:	f003 0330 	and.w	r3, r3, #48	; 0x30
 800c8fe:	2b30      	cmp	r3, #48	; 0x30
 800c900:	d013      	beq.n	800c92a <UART_SetConfig+0x16e>
 800c902:	2b30      	cmp	r3, #48	; 0x30
 800c904:	d814      	bhi.n	800c930 <UART_SetConfig+0x174>
 800c906:	2b20      	cmp	r3, #32
 800c908:	d009      	beq.n	800c91e <UART_SetConfig+0x162>
 800c90a:	2b20      	cmp	r3, #32
 800c90c:	d810      	bhi.n	800c930 <UART_SetConfig+0x174>
 800c90e:	2b00      	cmp	r3, #0
 800c910:	d002      	beq.n	800c918 <UART_SetConfig+0x15c>
 800c912:	2b10      	cmp	r3, #16
 800c914:	d006      	beq.n	800c924 <UART_SetConfig+0x168>
 800c916:	e00b      	b.n	800c930 <UART_SetConfig+0x174>
 800c918:	2300      	movs	r3, #0
 800c91a:	77fb      	strb	r3, [r7, #31]
 800c91c:	e0f2      	b.n	800cb04 <UART_SetConfig+0x348>
 800c91e:	2302      	movs	r3, #2
 800c920:	77fb      	strb	r3, [r7, #31]
 800c922:	e0ef      	b.n	800cb04 <UART_SetConfig+0x348>
 800c924:	2304      	movs	r3, #4
 800c926:	77fb      	strb	r3, [r7, #31]
 800c928:	e0ec      	b.n	800cb04 <UART_SetConfig+0x348>
 800c92a:	2308      	movs	r3, #8
 800c92c:	77fb      	strb	r3, [r7, #31]
 800c92e:	e0e9      	b.n	800cb04 <UART_SetConfig+0x348>
 800c930:	2310      	movs	r3, #16
 800c932:	77fb      	strb	r3, [r7, #31]
 800c934:	e0e6      	b.n	800cb04 <UART_SetConfig+0x348>
 800c936:	687b      	ldr	r3, [r7, #4]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	4a56      	ldr	r2, [pc, #344]	; (800ca94 <UART_SetConfig+0x2d8>)
 800c93c:	4293      	cmp	r3, r2
 800c93e:	d120      	bne.n	800c982 <UART_SetConfig+0x1c6>
 800c940:	4b51      	ldr	r3, [pc, #324]	; (800ca88 <UART_SetConfig+0x2cc>)
 800c942:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c946:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 800c94a:	2bc0      	cmp	r3, #192	; 0xc0
 800c94c:	d013      	beq.n	800c976 <UART_SetConfig+0x1ba>
 800c94e:	2bc0      	cmp	r3, #192	; 0xc0
 800c950:	d814      	bhi.n	800c97c <UART_SetConfig+0x1c0>
 800c952:	2b80      	cmp	r3, #128	; 0x80
 800c954:	d009      	beq.n	800c96a <UART_SetConfig+0x1ae>
 800c956:	2b80      	cmp	r3, #128	; 0x80
 800c958:	d810      	bhi.n	800c97c <UART_SetConfig+0x1c0>
 800c95a:	2b00      	cmp	r3, #0
 800c95c:	d002      	beq.n	800c964 <UART_SetConfig+0x1a8>
 800c95e:	2b40      	cmp	r3, #64	; 0x40
 800c960:	d006      	beq.n	800c970 <UART_SetConfig+0x1b4>
 800c962:	e00b      	b.n	800c97c <UART_SetConfig+0x1c0>
 800c964:	2300      	movs	r3, #0
 800c966:	77fb      	strb	r3, [r7, #31]
 800c968:	e0cc      	b.n	800cb04 <UART_SetConfig+0x348>
 800c96a:	2302      	movs	r3, #2
 800c96c:	77fb      	strb	r3, [r7, #31]
 800c96e:	e0c9      	b.n	800cb04 <UART_SetConfig+0x348>
 800c970:	2304      	movs	r3, #4
 800c972:	77fb      	strb	r3, [r7, #31]
 800c974:	e0c6      	b.n	800cb04 <UART_SetConfig+0x348>
 800c976:	2308      	movs	r3, #8
 800c978:	77fb      	strb	r3, [r7, #31]
 800c97a:	e0c3      	b.n	800cb04 <UART_SetConfig+0x348>
 800c97c:	2310      	movs	r3, #16
 800c97e:	77fb      	strb	r3, [r7, #31]
 800c980:	e0c0      	b.n	800cb04 <UART_SetConfig+0x348>
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	681b      	ldr	r3, [r3, #0]
 800c986:	4a44      	ldr	r2, [pc, #272]	; (800ca98 <UART_SetConfig+0x2dc>)
 800c988:	4293      	cmp	r3, r2
 800c98a:	d125      	bne.n	800c9d8 <UART_SetConfig+0x21c>
 800c98c:	4b3e      	ldr	r3, [pc, #248]	; (800ca88 <UART_SetConfig+0x2cc>)
 800c98e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c992:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800c996:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c99a:	d017      	beq.n	800c9cc <UART_SetConfig+0x210>
 800c99c:	f5b3 7f40 	cmp.w	r3, #768	; 0x300
 800c9a0:	d817      	bhi.n	800c9d2 <UART_SetConfig+0x216>
 800c9a2:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c9a6:	d00b      	beq.n	800c9c0 <UART_SetConfig+0x204>
 800c9a8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800c9ac:	d811      	bhi.n	800c9d2 <UART_SetConfig+0x216>
 800c9ae:	2b00      	cmp	r3, #0
 800c9b0:	d003      	beq.n	800c9ba <UART_SetConfig+0x1fe>
 800c9b2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800c9b6:	d006      	beq.n	800c9c6 <UART_SetConfig+0x20a>
 800c9b8:	e00b      	b.n	800c9d2 <UART_SetConfig+0x216>
 800c9ba:	2300      	movs	r3, #0
 800c9bc:	77fb      	strb	r3, [r7, #31]
 800c9be:	e0a1      	b.n	800cb04 <UART_SetConfig+0x348>
 800c9c0:	2302      	movs	r3, #2
 800c9c2:	77fb      	strb	r3, [r7, #31]
 800c9c4:	e09e      	b.n	800cb04 <UART_SetConfig+0x348>
 800c9c6:	2304      	movs	r3, #4
 800c9c8:	77fb      	strb	r3, [r7, #31]
 800c9ca:	e09b      	b.n	800cb04 <UART_SetConfig+0x348>
 800c9cc:	2308      	movs	r3, #8
 800c9ce:	77fb      	strb	r3, [r7, #31]
 800c9d0:	e098      	b.n	800cb04 <UART_SetConfig+0x348>
 800c9d2:	2310      	movs	r3, #16
 800c9d4:	77fb      	strb	r3, [r7, #31]
 800c9d6:	e095      	b.n	800cb04 <UART_SetConfig+0x348>
 800c9d8:	687b      	ldr	r3, [r7, #4]
 800c9da:	681b      	ldr	r3, [r3, #0]
 800c9dc:	4a2f      	ldr	r2, [pc, #188]	; (800ca9c <UART_SetConfig+0x2e0>)
 800c9de:	4293      	cmp	r3, r2
 800c9e0:	d125      	bne.n	800ca2e <UART_SetConfig+0x272>
 800c9e2:	4b29      	ldr	r3, [pc, #164]	; (800ca88 <UART_SetConfig+0x2cc>)
 800c9e4:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800c9e8:	f403 6340 	and.w	r3, r3, #3072	; 0xc00
 800c9ec:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c9f0:	d017      	beq.n	800ca22 <UART_SetConfig+0x266>
 800c9f2:	f5b3 6f40 	cmp.w	r3, #3072	; 0xc00
 800c9f6:	d817      	bhi.n	800ca28 <UART_SetConfig+0x26c>
 800c9f8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800c9fc:	d00b      	beq.n	800ca16 <UART_SetConfig+0x25a>
 800c9fe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800ca02:	d811      	bhi.n	800ca28 <UART_SetConfig+0x26c>
 800ca04:	2b00      	cmp	r3, #0
 800ca06:	d003      	beq.n	800ca10 <UART_SetConfig+0x254>
 800ca08:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ca0c:	d006      	beq.n	800ca1c <UART_SetConfig+0x260>
 800ca0e:	e00b      	b.n	800ca28 <UART_SetConfig+0x26c>
 800ca10:	2301      	movs	r3, #1
 800ca12:	77fb      	strb	r3, [r7, #31]
 800ca14:	e076      	b.n	800cb04 <UART_SetConfig+0x348>
 800ca16:	2302      	movs	r3, #2
 800ca18:	77fb      	strb	r3, [r7, #31]
 800ca1a:	e073      	b.n	800cb04 <UART_SetConfig+0x348>
 800ca1c:	2304      	movs	r3, #4
 800ca1e:	77fb      	strb	r3, [r7, #31]
 800ca20:	e070      	b.n	800cb04 <UART_SetConfig+0x348>
 800ca22:	2308      	movs	r3, #8
 800ca24:	77fb      	strb	r3, [r7, #31]
 800ca26:	e06d      	b.n	800cb04 <UART_SetConfig+0x348>
 800ca28:	2310      	movs	r3, #16
 800ca2a:	77fb      	strb	r3, [r7, #31]
 800ca2c:	e06a      	b.n	800cb04 <UART_SetConfig+0x348>
 800ca2e:	687b      	ldr	r3, [r7, #4]
 800ca30:	681b      	ldr	r3, [r3, #0]
 800ca32:	4a1b      	ldr	r2, [pc, #108]	; (800caa0 <UART_SetConfig+0x2e4>)
 800ca34:	4293      	cmp	r3, r2
 800ca36:	d138      	bne.n	800caaa <UART_SetConfig+0x2ee>
 800ca38:	4b13      	ldr	r3, [pc, #76]	; (800ca88 <UART_SetConfig+0x2cc>)
 800ca3a:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800ca3e:	f403 5340 	and.w	r3, r3, #12288	; 0x3000
 800ca42:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ca46:	d017      	beq.n	800ca78 <UART_SetConfig+0x2bc>
 800ca48:	f5b3 5f40 	cmp.w	r3, #12288	; 0x3000
 800ca4c:	d82a      	bhi.n	800caa4 <UART_SetConfig+0x2e8>
 800ca4e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca52:	d00b      	beq.n	800ca6c <UART_SetConfig+0x2b0>
 800ca54:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800ca58:	d824      	bhi.n	800caa4 <UART_SetConfig+0x2e8>
 800ca5a:	2b00      	cmp	r3, #0
 800ca5c:	d003      	beq.n	800ca66 <UART_SetConfig+0x2aa>
 800ca5e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800ca62:	d006      	beq.n	800ca72 <UART_SetConfig+0x2b6>
 800ca64:	e01e      	b.n	800caa4 <UART_SetConfig+0x2e8>
 800ca66:	2300      	movs	r3, #0
 800ca68:	77fb      	strb	r3, [r7, #31]
 800ca6a:	e04b      	b.n	800cb04 <UART_SetConfig+0x348>
 800ca6c:	2302      	movs	r3, #2
 800ca6e:	77fb      	strb	r3, [r7, #31]
 800ca70:	e048      	b.n	800cb04 <UART_SetConfig+0x348>
 800ca72:	2304      	movs	r3, #4
 800ca74:	77fb      	strb	r3, [r7, #31]
 800ca76:	e045      	b.n	800cb04 <UART_SetConfig+0x348>
 800ca78:	2308      	movs	r3, #8
 800ca7a:	77fb      	strb	r3, [r7, #31]
 800ca7c:	e042      	b.n	800cb04 <UART_SetConfig+0x348>
 800ca7e:	bf00      	nop
 800ca80:	efff69f3 	.word	0xefff69f3
 800ca84:	40011000 	.word	0x40011000
 800ca88:	40023800 	.word	0x40023800
 800ca8c:	40004400 	.word	0x40004400
 800ca90:	40004800 	.word	0x40004800
 800ca94:	40004c00 	.word	0x40004c00
 800ca98:	40005000 	.word	0x40005000
 800ca9c:	40011400 	.word	0x40011400
 800caa0:	40007800 	.word	0x40007800
 800caa4:	2310      	movs	r3, #16
 800caa6:	77fb      	strb	r3, [r7, #31]
 800caa8:	e02c      	b.n	800cb04 <UART_SetConfig+0x348>
 800caaa:	687b      	ldr	r3, [r7, #4]
 800caac:	681b      	ldr	r3, [r3, #0]
 800caae:	4a72      	ldr	r2, [pc, #456]	; (800cc78 <UART_SetConfig+0x4bc>)
 800cab0:	4293      	cmp	r3, r2
 800cab2:	d125      	bne.n	800cb00 <UART_SetConfig+0x344>
 800cab4:	4b71      	ldr	r3, [pc, #452]	; (800cc7c <UART_SetConfig+0x4c0>)
 800cab6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800caba:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800cabe:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800cac2:	d017      	beq.n	800caf4 <UART_SetConfig+0x338>
 800cac4:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800cac8:	d817      	bhi.n	800cafa <UART_SetConfig+0x33e>
 800caca:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cace:	d00b      	beq.n	800cae8 <UART_SetConfig+0x32c>
 800cad0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cad4:	d811      	bhi.n	800cafa <UART_SetConfig+0x33e>
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d003      	beq.n	800cae2 <UART_SetConfig+0x326>
 800cada:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800cade:	d006      	beq.n	800caee <UART_SetConfig+0x332>
 800cae0:	e00b      	b.n	800cafa <UART_SetConfig+0x33e>
 800cae2:	2300      	movs	r3, #0
 800cae4:	77fb      	strb	r3, [r7, #31]
 800cae6:	e00d      	b.n	800cb04 <UART_SetConfig+0x348>
 800cae8:	2302      	movs	r3, #2
 800caea:	77fb      	strb	r3, [r7, #31]
 800caec:	e00a      	b.n	800cb04 <UART_SetConfig+0x348>
 800caee:	2304      	movs	r3, #4
 800caf0:	77fb      	strb	r3, [r7, #31]
 800caf2:	e007      	b.n	800cb04 <UART_SetConfig+0x348>
 800caf4:	2308      	movs	r3, #8
 800caf6:	77fb      	strb	r3, [r7, #31]
 800caf8:	e004      	b.n	800cb04 <UART_SetConfig+0x348>
 800cafa:	2310      	movs	r3, #16
 800cafc:	77fb      	strb	r3, [r7, #31]
 800cafe:	e001      	b.n	800cb04 <UART_SetConfig+0x348>
 800cb00:	2310      	movs	r3, #16
 800cb02:	77fb      	strb	r3, [r7, #31]

  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	69db      	ldr	r3, [r3, #28]
 800cb08:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800cb0c:	d15b      	bne.n	800cbc6 <UART_SetConfig+0x40a>
  {
    switch (clocksource)
 800cb0e:	7ffb      	ldrb	r3, [r7, #31]
 800cb10:	2b08      	cmp	r3, #8
 800cb12:	d828      	bhi.n	800cb66 <UART_SetConfig+0x3aa>
 800cb14:	a201      	add	r2, pc, #4	; (adr r2, 800cb1c <UART_SetConfig+0x360>)
 800cb16:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cb1a:	bf00      	nop
 800cb1c:	0800cb41 	.word	0x0800cb41
 800cb20:	0800cb49 	.word	0x0800cb49
 800cb24:	0800cb51 	.word	0x0800cb51
 800cb28:	0800cb67 	.word	0x0800cb67
 800cb2c:	0800cb57 	.word	0x0800cb57
 800cb30:	0800cb67 	.word	0x0800cb67
 800cb34:	0800cb67 	.word	0x0800cb67
 800cb38:	0800cb67 	.word	0x0800cb67
 800cb3c:	0800cb5f 	.word	0x0800cb5f
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cb40:	f7fc f986 	bl	8008e50 <HAL_RCC_GetPCLK1Freq>
 800cb44:	61b8      	str	r0, [r7, #24]
        break;
 800cb46:	e013      	b.n	800cb70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cb48:	f7fc f996 	bl	8008e78 <HAL_RCC_GetPCLK2Freq>
 800cb4c:	61b8      	str	r0, [r7, #24]
        break;
 800cb4e:	e00f      	b.n	800cb70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cb50:	4b4b      	ldr	r3, [pc, #300]	; (800cc80 <UART_SetConfig+0x4c4>)
 800cb52:	61bb      	str	r3, [r7, #24]
        break;
 800cb54:	e00c      	b.n	800cb70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cb56:	f7fc f869 	bl	8008c2c <HAL_RCC_GetSysClockFreq>
 800cb5a:	61b8      	str	r0, [r7, #24]
        break;
 800cb5c:	e008      	b.n	800cb70 <UART_SetConfig+0x3b4>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cb5e:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cb62:	61bb      	str	r3, [r7, #24]
        break;
 800cb64:	e004      	b.n	800cb70 <UART_SetConfig+0x3b4>
      default:
        pclk = 0U;
 800cb66:	2300      	movs	r3, #0
 800cb68:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800cb6a:	2301      	movs	r3, #1
 800cb6c:	77bb      	strb	r3, [r7, #30]
        break;
 800cb6e:	bf00      	nop
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 800cb70:	69bb      	ldr	r3, [r7, #24]
 800cb72:	2b00      	cmp	r3, #0
 800cb74:	d074      	beq.n	800cc60 <UART_SetConfig+0x4a4>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 800cb76:	69bb      	ldr	r3, [r7, #24]
 800cb78:	005a      	lsls	r2, r3, #1
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	685b      	ldr	r3, [r3, #4]
 800cb7e:	085b      	lsrs	r3, r3, #1
 800cb80:	441a      	add	r2, r3
 800cb82:	687b      	ldr	r3, [r7, #4]
 800cb84:	685b      	ldr	r3, [r3, #4]
 800cb86:	fbb2 f3f3 	udiv	r3, r2, r3
 800cb8a:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cb8c:	693b      	ldr	r3, [r7, #16]
 800cb8e:	2b0f      	cmp	r3, #15
 800cb90:	d916      	bls.n	800cbc0 <UART_SetConfig+0x404>
 800cb92:	693b      	ldr	r3, [r7, #16]
 800cb94:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cb98:	d212      	bcs.n	800cbc0 <UART_SetConfig+0x404>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 800cb9a:	693b      	ldr	r3, [r7, #16]
 800cb9c:	b29b      	uxth	r3, r3
 800cb9e:	f023 030f 	bic.w	r3, r3, #15
 800cba2:	81fb      	strh	r3, [r7, #14]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 800cba4:	693b      	ldr	r3, [r7, #16]
 800cba6:	085b      	lsrs	r3, r3, #1
 800cba8:	b29b      	uxth	r3, r3
 800cbaa:	f003 0307 	and.w	r3, r3, #7
 800cbae:	b29a      	uxth	r2, r3
 800cbb0:	89fb      	ldrh	r3, [r7, #14]
 800cbb2:	4313      	orrs	r3, r2
 800cbb4:	81fb      	strh	r3, [r7, #14]
        huart->Instance->BRR = brrtemp;
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	681b      	ldr	r3, [r3, #0]
 800cbba:	89fa      	ldrh	r2, [r7, #14]
 800cbbc:	60da      	str	r2, [r3, #12]
 800cbbe:	e04f      	b.n	800cc60 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800cbc0:	2301      	movs	r3, #1
 800cbc2:	77bb      	strb	r3, [r7, #30]
 800cbc4:	e04c      	b.n	800cc60 <UART_SetConfig+0x4a4>
      }
    }
  }
  else
  {
    switch (clocksource)
 800cbc6:	7ffb      	ldrb	r3, [r7, #31]
 800cbc8:	2b08      	cmp	r3, #8
 800cbca:	d828      	bhi.n	800cc1e <UART_SetConfig+0x462>
 800cbcc:	a201      	add	r2, pc, #4	; (adr r2, 800cbd4 <UART_SetConfig+0x418>)
 800cbce:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800cbd2:	bf00      	nop
 800cbd4:	0800cbf9 	.word	0x0800cbf9
 800cbd8:	0800cc01 	.word	0x0800cc01
 800cbdc:	0800cc09 	.word	0x0800cc09
 800cbe0:	0800cc1f 	.word	0x0800cc1f
 800cbe4:	0800cc0f 	.word	0x0800cc0f
 800cbe8:	0800cc1f 	.word	0x0800cc1f
 800cbec:	0800cc1f 	.word	0x0800cc1f
 800cbf0:	0800cc1f 	.word	0x0800cc1f
 800cbf4:	0800cc17 	.word	0x0800cc17
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 800cbf8:	f7fc f92a 	bl	8008e50 <HAL_RCC_GetPCLK1Freq>
 800cbfc:	61b8      	str	r0, [r7, #24]
        break;
 800cbfe:	e013      	b.n	800cc28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 800cc00:	f7fc f93a 	bl	8008e78 <HAL_RCC_GetPCLK2Freq>
 800cc04:	61b8      	str	r0, [r7, #24]
        break;
 800cc06:	e00f      	b.n	800cc28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_HSI:
        pclk = (uint32_t) HSI_VALUE;
 800cc08:	4b1d      	ldr	r3, [pc, #116]	; (800cc80 <UART_SetConfig+0x4c4>)
 800cc0a:	61bb      	str	r3, [r7, #24]
        break;
 800cc0c:	e00c      	b.n	800cc28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 800cc0e:	f7fc f80d 	bl	8008c2c <HAL_RCC_GetSysClockFreq>
 800cc12:	61b8      	str	r0, [r7, #24]
        break;
 800cc14:	e008      	b.n	800cc28 <UART_SetConfig+0x46c>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 800cc16:	f44f 4300 	mov.w	r3, #32768	; 0x8000
 800cc1a:	61bb      	str	r3, [r7, #24]
        break;
 800cc1c:	e004      	b.n	800cc28 <UART_SetConfig+0x46c>
      default:
        pclk = 0U;
 800cc1e:	2300      	movs	r3, #0
 800cc20:	61bb      	str	r3, [r7, #24]
        ret = HAL_ERROR;
 800cc22:	2301      	movs	r3, #1
 800cc24:	77bb      	strb	r3, [r7, #30]
        break;
 800cc26:	bf00      	nop
    }

    if (pclk != 0U)
 800cc28:	69bb      	ldr	r3, [r7, #24]
 800cc2a:	2b00      	cmp	r3, #0
 800cc2c:	d018      	beq.n	800cc60 <UART_SetConfig+0x4a4>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 800cc2e:	687b      	ldr	r3, [r7, #4]
 800cc30:	685b      	ldr	r3, [r3, #4]
 800cc32:	085a      	lsrs	r2, r3, #1
 800cc34:	69bb      	ldr	r3, [r7, #24]
 800cc36:	441a      	add	r2, r3
 800cc38:	687b      	ldr	r3, [r7, #4]
 800cc3a:	685b      	ldr	r3, [r3, #4]
 800cc3c:	fbb2 f3f3 	udiv	r3, r2, r3
 800cc40:	613b      	str	r3, [r7, #16]
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 800cc42:	693b      	ldr	r3, [r7, #16]
 800cc44:	2b0f      	cmp	r3, #15
 800cc46:	d909      	bls.n	800cc5c <UART_SetConfig+0x4a0>
 800cc48:	693b      	ldr	r3, [r7, #16]
 800cc4a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800cc4e:	d205      	bcs.n	800cc5c <UART_SetConfig+0x4a0>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 800cc50:	693b      	ldr	r3, [r7, #16]
 800cc52:	b29a      	uxth	r2, r3
 800cc54:	687b      	ldr	r3, [r7, #4]
 800cc56:	681b      	ldr	r3, [r3, #0]
 800cc58:	60da      	str	r2, [r3, #12]
 800cc5a:	e001      	b.n	800cc60 <UART_SetConfig+0x4a4>
      }
      else
      {
        ret = HAL_ERROR;
 800cc5c:	2301      	movs	r3, #1
 800cc5e:	77bb      	strb	r3, [r7, #30]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 800cc60:	687b      	ldr	r3, [r7, #4]
 800cc62:	2200      	movs	r2, #0
 800cc64:	669a      	str	r2, [r3, #104]	; 0x68
  huart->TxISR = NULL;
 800cc66:	687b      	ldr	r3, [r7, #4]
 800cc68:	2200      	movs	r2, #0
 800cc6a:	66da      	str	r2, [r3, #108]	; 0x6c

  return ret;
 800cc6c:	7fbb      	ldrb	r3, [r7, #30]
}
 800cc6e:	4618      	mov	r0, r3
 800cc70:	3720      	adds	r7, #32
 800cc72:	46bd      	mov	sp, r7
 800cc74:	bd80      	pop	{r7, pc}
 800cc76:	bf00      	nop
 800cc78:	40007c00 	.word	0x40007c00
 800cc7c:	40023800 	.word	0x40023800
 800cc80:	00f42400 	.word	0x00f42400

0800cc84 <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 800cc84:	b480      	push	{r7}
 800cc86:	b083      	sub	sp, #12
 800cc88:	af00      	add	r7, sp, #0
 800cc8a:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 800cc8c:	687b      	ldr	r3, [r7, #4]
 800cc8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cc90:	f003 0308 	and.w	r3, r3, #8
 800cc94:	2b00      	cmp	r3, #0
 800cc96:	d00a      	beq.n	800ccae <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 800cc98:	687b      	ldr	r3, [r7, #4]
 800cc9a:	681b      	ldr	r3, [r3, #0]
 800cc9c:	685b      	ldr	r3, [r3, #4]
 800cc9e:	f423 4100 	bic.w	r1, r3, #32768	; 0x8000
 800cca2:	687b      	ldr	r3, [r7, #4]
 800cca4:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 800cca6:	687b      	ldr	r3, [r7, #4]
 800cca8:	681b      	ldr	r3, [r3, #0]
 800ccaa:	430a      	orrs	r2, r1
 800ccac:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 800ccae:	687b      	ldr	r3, [r7, #4]
 800ccb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccb2:	f003 0301 	and.w	r3, r3, #1
 800ccb6:	2b00      	cmp	r3, #0
 800ccb8:	d00a      	beq.n	800ccd0 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 800ccba:	687b      	ldr	r3, [r7, #4]
 800ccbc:	681b      	ldr	r3, [r3, #0]
 800ccbe:	685b      	ldr	r3, [r3, #4]
 800ccc0:	f423 3100 	bic.w	r1, r3, #131072	; 0x20000
 800ccc4:	687b      	ldr	r3, [r7, #4]
 800ccc6:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 800ccc8:	687b      	ldr	r3, [r7, #4]
 800ccca:	681b      	ldr	r3, [r3, #0]
 800cccc:	430a      	orrs	r2, r1
 800ccce:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 800ccd0:	687b      	ldr	r3, [r7, #4]
 800ccd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccd4:	f003 0302 	and.w	r3, r3, #2
 800ccd8:	2b00      	cmp	r3, #0
 800ccda:	d00a      	beq.n	800ccf2 <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 800ccdc:	687b      	ldr	r3, [r7, #4]
 800ccde:	681b      	ldr	r3, [r3, #0]
 800cce0:	685b      	ldr	r3, [r3, #4]
 800cce2:	f423 3180 	bic.w	r1, r3, #65536	; 0x10000
 800cce6:	687b      	ldr	r3, [r7, #4]
 800cce8:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800ccea:	687b      	ldr	r3, [r7, #4]
 800ccec:	681b      	ldr	r3, [r3, #0]
 800ccee:	430a      	orrs	r2, r1
 800ccf0:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 800ccf2:	687b      	ldr	r3, [r7, #4]
 800ccf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ccf6:	f003 0304 	and.w	r3, r3, #4
 800ccfa:	2b00      	cmp	r3, #0
 800ccfc:	d00a      	beq.n	800cd14 <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 800ccfe:	687b      	ldr	r3, [r7, #4]
 800cd00:	681b      	ldr	r3, [r3, #0]
 800cd02:	685b      	ldr	r3, [r3, #4]
 800cd04:	f423 2180 	bic.w	r1, r3, #262144	; 0x40000
 800cd08:	687b      	ldr	r3, [r7, #4]
 800cd0a:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800cd0c:	687b      	ldr	r3, [r7, #4]
 800cd0e:	681b      	ldr	r3, [r3, #0]
 800cd10:	430a      	orrs	r2, r1
 800cd12:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 800cd14:	687b      	ldr	r3, [r7, #4]
 800cd16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd18:	f003 0310 	and.w	r3, r3, #16
 800cd1c:	2b00      	cmp	r3, #0
 800cd1e:	d00a      	beq.n	800cd36 <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 800cd20:	687b      	ldr	r3, [r7, #4]
 800cd22:	681b      	ldr	r3, [r3, #0]
 800cd24:	689b      	ldr	r3, [r3, #8]
 800cd26:	f423 5180 	bic.w	r1, r3, #4096	; 0x1000
 800cd2a:	687b      	ldr	r3, [r7, #4]
 800cd2c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800cd2e:	687b      	ldr	r3, [r7, #4]
 800cd30:	681b      	ldr	r3, [r3, #0]
 800cd32:	430a      	orrs	r2, r1
 800cd34:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 800cd36:	687b      	ldr	r3, [r7, #4]
 800cd38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd3a:	f003 0320 	and.w	r3, r3, #32
 800cd3e:	2b00      	cmp	r3, #0
 800cd40:	d00a      	beq.n	800cd58 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 800cd42:	687b      	ldr	r3, [r7, #4]
 800cd44:	681b      	ldr	r3, [r3, #0]
 800cd46:	689b      	ldr	r3, [r3, #8]
 800cd48:	f423 5100 	bic.w	r1, r3, #8192	; 0x2000
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 800cd50:	687b      	ldr	r3, [r7, #4]
 800cd52:	681b      	ldr	r3, [r3, #0]
 800cd54:	430a      	orrs	r2, r1
 800cd56:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 800cd58:	687b      	ldr	r3, [r7, #4]
 800cd5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd5c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800cd60:	2b00      	cmp	r3, #0
 800cd62:	d01a      	beq.n	800cd9a <UART_AdvFeatureConfig+0x116>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 800cd64:	687b      	ldr	r3, [r7, #4]
 800cd66:	681b      	ldr	r3, [r3, #0]
 800cd68:	685b      	ldr	r3, [r3, #4]
 800cd6a:	f423 1180 	bic.w	r1, r3, #1048576	; 0x100000
 800cd6e:	687b      	ldr	r3, [r7, #4]
 800cd70:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 800cd72:	687b      	ldr	r3, [r7, #4]
 800cd74:	681b      	ldr	r3, [r3, #0]
 800cd76:	430a      	orrs	r2, r1
 800cd78:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 800cd7a:	687b      	ldr	r3, [r7, #4]
 800cd7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800cd7e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800cd82:	d10a      	bne.n	800cd9a <UART_AdvFeatureConfig+0x116>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 800cd84:	687b      	ldr	r3, [r7, #4]
 800cd86:	681b      	ldr	r3, [r3, #0]
 800cd88:	685b      	ldr	r3, [r3, #4]
 800cd8a:	f423 01c0 	bic.w	r1, r3, #6291456	; 0x600000
 800cd8e:	687b      	ldr	r3, [r7, #4]
 800cd90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800cd92:	687b      	ldr	r3, [r7, #4]
 800cd94:	681b      	ldr	r3, [r3, #0]
 800cd96:	430a      	orrs	r2, r1
 800cd98:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 800cd9a:	687b      	ldr	r3, [r7, #4]
 800cd9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800cd9e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	d00a      	beq.n	800cdbc <UART_AdvFeatureConfig+0x138>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 800cda6:	687b      	ldr	r3, [r7, #4]
 800cda8:	681b      	ldr	r3, [r3, #0]
 800cdaa:	685b      	ldr	r3, [r3, #4]
 800cdac:	f423 2100 	bic.w	r1, r3, #524288	; 0x80000
 800cdb0:	687b      	ldr	r3, [r7, #4]
 800cdb2:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 800cdb4:	687b      	ldr	r3, [r7, #4]
 800cdb6:	681b      	ldr	r3, [r3, #0]
 800cdb8:	430a      	orrs	r2, r1
 800cdba:	605a      	str	r2, [r3, #4]
  }
}
 800cdbc:	bf00      	nop
 800cdbe:	370c      	adds	r7, #12
 800cdc0:	46bd      	mov	sp, r7
 800cdc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cdc6:	4770      	bx	lr

0800cdc8 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 800cdc8:	b580      	push	{r7, lr}
 800cdca:	b08c      	sub	sp, #48	; 0x30
 800cdcc:	af02      	add	r7, sp, #8
 800cdce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cdd0:	687b      	ldr	r3, [r7, #4]
 800cdd2:	2200      	movs	r2, #0
 800cdd4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 800cdd8:	f7f6 f9e0 	bl	800319c <HAL_GetTick>
 800cddc:	6278      	str	r0, [r7, #36]	; 0x24

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 800cdde:	687b      	ldr	r3, [r7, #4]
 800cde0:	681b      	ldr	r3, [r3, #0]
 800cde2:	681b      	ldr	r3, [r3, #0]
 800cde4:	f003 0308 	and.w	r3, r3, #8
 800cde8:	2b08      	cmp	r3, #8
 800cdea:	d12e      	bne.n	800ce4a <UART_CheckIdleState+0x82>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 800cdec:	f06f 437e 	mvn.w	r3, #4261412864	; 0xfe000000
 800cdf0:	9300      	str	r3, [sp, #0]
 800cdf2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cdf4:	2200      	movs	r2, #0
 800cdf6:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800cdfa:	6878      	ldr	r0, [r7, #4]
 800cdfc:	f000 f83b 	bl	800ce76 <UART_WaitOnFlagUntilTimeout>
 800ce00:	4603      	mov	r3, r0
 800ce02:	2b00      	cmp	r3, #0
 800ce04:	d021      	beq.n	800ce4a <UART_CheckIdleState+0x82>
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 800ce06:	687b      	ldr	r3, [r7, #4]
 800ce08:	681b      	ldr	r3, [r3, #0]
 800ce0a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800ce0c:	693b      	ldr	r3, [r7, #16]
 800ce0e:	e853 3f00 	ldrex	r3, [r3]
 800ce12:	60fb      	str	r3, [r7, #12]
   return(result);
 800ce14:	68fb      	ldr	r3, [r7, #12]
 800ce16:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800ce1a:	623b      	str	r3, [r7, #32]
 800ce1c:	687b      	ldr	r3, [r7, #4]
 800ce1e:	681b      	ldr	r3, [r3, #0]
 800ce20:	461a      	mov	r2, r3
 800ce22:	6a3b      	ldr	r3, [r7, #32]
 800ce24:	61fb      	str	r3, [r7, #28]
 800ce26:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800ce28:	69b9      	ldr	r1, [r7, #24]
 800ce2a:	69fa      	ldr	r2, [r7, #28]
 800ce2c:	e841 2300 	strex	r3, r2, [r1]
 800ce30:	617b      	str	r3, [r7, #20]
   return(result);
 800ce32:	697b      	ldr	r3, [r7, #20]
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	d1e6      	bne.n	800ce06 <UART_CheckIdleState+0x3e>

      huart->gState = HAL_UART_STATE_READY;
 800ce38:	687b      	ldr	r3, [r7, #4]
 800ce3a:	2220      	movs	r2, #32
 800ce3c:	67da      	str	r2, [r3, #124]	; 0x7c

      __HAL_UNLOCK(huart);
 800ce3e:	687b      	ldr	r3, [r7, #4]
 800ce40:	2200      	movs	r2, #0
 800ce42:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

      /* Timeout occurred */
      return HAL_TIMEOUT;
 800ce46:	2303      	movs	r3, #3
 800ce48:	e011      	b.n	800ce6e <UART_CheckIdleState+0xa6>
    }
  }
#endif /* USART_ISR_REACK */

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 800ce4a:	687b      	ldr	r3, [r7, #4]
 800ce4c:	2220      	movs	r2, #32
 800ce4e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800ce50:	687b      	ldr	r3, [r7, #4]
 800ce52:	2220      	movs	r2, #32
 800ce54:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800ce58:	687b      	ldr	r3, [r7, #4]
 800ce5a:	2200      	movs	r2, #0
 800ce5c:	661a      	str	r2, [r3, #96]	; 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800ce5e:	687b      	ldr	r3, [r7, #4]
 800ce60:	2200      	movs	r2, #0
 800ce62:	665a      	str	r2, [r3, #100]	; 0x64

  __HAL_UNLOCK(huart);
 800ce64:	687b      	ldr	r3, [r7, #4]
 800ce66:	2200      	movs	r2, #0
 800ce68:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

  return HAL_OK;
 800ce6c:	2300      	movs	r3, #0
}
 800ce6e:	4618      	mov	r0, r3
 800ce70:	3728      	adds	r7, #40	; 0x28
 800ce72:	46bd      	mov	sp, r7
 800ce74:	bd80      	pop	{r7, pc}

0800ce76 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 800ce76:	b580      	push	{r7, lr}
 800ce78:	b084      	sub	sp, #16
 800ce7a:	af00      	add	r7, sp, #0
 800ce7c:	60f8      	str	r0, [r7, #12]
 800ce7e:	60b9      	str	r1, [r7, #8]
 800ce80:	603b      	str	r3, [r7, #0]
 800ce82:	4613      	mov	r3, r2
 800ce84:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800ce86:	e04f      	b.n	800cf28 <UART_WaitOnFlagUntilTimeout+0xb2>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800ce88:	69bb      	ldr	r3, [r7, #24]
 800ce8a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ce8e:	d04b      	beq.n	800cf28 <UART_WaitOnFlagUntilTimeout+0xb2>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800ce90:	f7f6 f984 	bl	800319c <HAL_GetTick>
 800ce94:	4602      	mov	r2, r0
 800ce96:	683b      	ldr	r3, [r7, #0]
 800ce98:	1ad3      	subs	r3, r2, r3
 800ce9a:	69ba      	ldr	r2, [r7, #24]
 800ce9c:	429a      	cmp	r2, r3
 800ce9e:	d302      	bcc.n	800cea6 <UART_WaitOnFlagUntilTimeout+0x30>
 800cea0:	69bb      	ldr	r3, [r7, #24]
 800cea2:	2b00      	cmp	r3, #0
 800cea4:	d101      	bne.n	800ceaa <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800cea6:	2303      	movs	r3, #3
 800cea8:	e04e      	b.n	800cf48 <UART_WaitOnFlagUntilTimeout+0xd2>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800ceaa:	68fb      	ldr	r3, [r7, #12]
 800ceac:	681b      	ldr	r3, [r3, #0]
 800ceae:	681b      	ldr	r3, [r3, #0]
 800ceb0:	f003 0304 	and.w	r3, r3, #4
 800ceb4:	2b00      	cmp	r3, #0
 800ceb6:	d037      	beq.n	800cf28 <UART_WaitOnFlagUntilTimeout+0xb2>
 800ceb8:	68bb      	ldr	r3, [r7, #8]
 800ceba:	2b80      	cmp	r3, #128	; 0x80
 800cebc:	d034      	beq.n	800cf28 <UART_WaitOnFlagUntilTimeout+0xb2>
 800cebe:	68bb      	ldr	r3, [r7, #8]
 800cec0:	2b40      	cmp	r3, #64	; 0x40
 800cec2:	d031      	beq.n	800cf28 <UART_WaitOnFlagUntilTimeout+0xb2>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800cec4:	68fb      	ldr	r3, [r7, #12]
 800cec6:	681b      	ldr	r3, [r3, #0]
 800cec8:	69db      	ldr	r3, [r3, #28]
 800ceca:	f003 0308 	and.w	r3, r3, #8
 800cece:	2b08      	cmp	r3, #8
 800ced0:	d110      	bne.n	800cef4 <UART_WaitOnFlagUntilTimeout+0x7e>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 800ced2:	68fb      	ldr	r3, [r7, #12]
 800ced4:	681b      	ldr	r3, [r3, #0]
 800ced6:	2208      	movs	r2, #8
 800ced8:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800ceda:	68f8      	ldr	r0, [r7, #12]
 800cedc:	f000 f9c4 	bl	800d268 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 800cee0:	68fb      	ldr	r3, [r7, #12]
 800cee2:	2208      	movs	r2, #8
 800cee4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cee8:	68fb      	ldr	r3, [r7, #12]
 800ceea:	2200      	movs	r2, #0
 800ceec:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_ERROR;
 800cef0:	2301      	movs	r3, #1
 800cef2:	e029      	b.n	800cf48 <UART_WaitOnFlagUntilTimeout+0xd2>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 800cef4:	68fb      	ldr	r3, [r7, #12]
 800cef6:	681b      	ldr	r3, [r3, #0]
 800cef8:	69db      	ldr	r3, [r3, #28]
 800cefa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800cefe:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800cf02:	d111      	bne.n	800cf28 <UART_WaitOnFlagUntilTimeout+0xb2>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 800cf04:	68fb      	ldr	r3, [r7, #12]
 800cf06:	681b      	ldr	r3, [r3, #0]
 800cf08:	f44f 6200 	mov.w	r2, #2048	; 0x800
 800cf0c:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800cf0e:	68f8      	ldr	r0, [r7, #12]
 800cf10:	f000 f9aa 	bl	800d268 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 800cf14:	68fb      	ldr	r3, [r7, #12]
 800cf16:	2220      	movs	r2, #32
 800cf18:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800cf1c:	68fb      	ldr	r3, [r7, #12]
 800cf1e:	2200      	movs	r2, #0
 800cf20:	f883 2078 	strb.w	r2, [r3, #120]	; 0x78

          return HAL_TIMEOUT;
 800cf24:	2303      	movs	r3, #3
 800cf26:	e00f      	b.n	800cf48 <UART_WaitOnFlagUntilTimeout+0xd2>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800cf28:	68fb      	ldr	r3, [r7, #12]
 800cf2a:	681b      	ldr	r3, [r3, #0]
 800cf2c:	69da      	ldr	r2, [r3, #28]
 800cf2e:	68bb      	ldr	r3, [r7, #8]
 800cf30:	4013      	ands	r3, r2
 800cf32:	68ba      	ldr	r2, [r7, #8]
 800cf34:	429a      	cmp	r2, r3
 800cf36:	bf0c      	ite	eq
 800cf38:	2301      	moveq	r3, #1
 800cf3a:	2300      	movne	r3, #0
 800cf3c:	b2db      	uxtb	r3, r3
 800cf3e:	461a      	mov	r2, r3
 800cf40:	79fb      	ldrb	r3, [r7, #7]
 800cf42:	429a      	cmp	r2, r3
 800cf44:	d0a0      	beq.n	800ce88 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800cf46:	2300      	movs	r3, #0
}
 800cf48:	4618      	mov	r0, r3
 800cf4a:	3710      	adds	r7, #16
 800cf4c:	46bd      	mov	sp, r7
 800cf4e:	bd80      	pop	{r7, pc}

0800cf50 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800cf50:	b480      	push	{r7}
 800cf52:	b097      	sub	sp, #92	; 0x5c
 800cf54:	af00      	add	r7, sp, #0
 800cf56:	60f8      	str	r0, [r7, #12]
 800cf58:	60b9      	str	r1, [r7, #8]
 800cf5a:	4613      	mov	r3, r2
 800cf5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr  = pData;
 800cf5e:	68fb      	ldr	r3, [r7, #12]
 800cf60:	68ba      	ldr	r2, [r7, #8]
 800cf62:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize  = Size;
 800cf64:	68fb      	ldr	r3, [r7, #12]
 800cf66:	88fa      	ldrh	r2, [r7, #6]
 800cf68:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58
  huart->RxXferCount = Size;
 800cf6c:	68fb      	ldr	r3, [r7, #12]
 800cf6e:	88fa      	ldrh	r2, [r7, #6]
 800cf70:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->RxISR       = NULL;
 800cf74:	68fb      	ldr	r3, [r7, #12]
 800cf76:	2200      	movs	r2, #0
 800cf78:	669a      	str	r2, [r3, #104]	; 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 800cf7a:	68fb      	ldr	r3, [r7, #12]
 800cf7c:	689b      	ldr	r3, [r3, #8]
 800cf7e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800cf82:	d10e      	bne.n	800cfa2 <UART_Start_Receive_IT+0x52>
 800cf84:	68fb      	ldr	r3, [r7, #12]
 800cf86:	691b      	ldr	r3, [r3, #16]
 800cf88:	2b00      	cmp	r3, #0
 800cf8a:	d105      	bne.n	800cf98 <UART_Start_Receive_IT+0x48>
 800cf8c:	68fb      	ldr	r3, [r7, #12]
 800cf8e:	f240 12ff 	movw	r2, #511	; 0x1ff
 800cf92:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800cf96:	e02d      	b.n	800cff4 <UART_Start_Receive_IT+0xa4>
 800cf98:	68fb      	ldr	r3, [r7, #12]
 800cf9a:	22ff      	movs	r2, #255	; 0xff
 800cf9c:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800cfa0:	e028      	b.n	800cff4 <UART_Start_Receive_IT+0xa4>
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	689b      	ldr	r3, [r3, #8]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	d10d      	bne.n	800cfc6 <UART_Start_Receive_IT+0x76>
 800cfaa:	68fb      	ldr	r3, [r7, #12]
 800cfac:	691b      	ldr	r3, [r3, #16]
 800cfae:	2b00      	cmp	r3, #0
 800cfb0:	d104      	bne.n	800cfbc <UART_Start_Receive_IT+0x6c>
 800cfb2:	68fb      	ldr	r3, [r7, #12]
 800cfb4:	22ff      	movs	r2, #255	; 0xff
 800cfb6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800cfba:	e01b      	b.n	800cff4 <UART_Start_Receive_IT+0xa4>
 800cfbc:	68fb      	ldr	r3, [r7, #12]
 800cfbe:	227f      	movs	r2, #127	; 0x7f
 800cfc0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800cfc4:	e016      	b.n	800cff4 <UART_Start_Receive_IT+0xa4>
 800cfc6:	68fb      	ldr	r3, [r7, #12]
 800cfc8:	689b      	ldr	r3, [r3, #8]
 800cfca:	f1b3 5f80 	cmp.w	r3, #268435456	; 0x10000000
 800cfce:	d10d      	bne.n	800cfec <UART_Start_Receive_IT+0x9c>
 800cfd0:	68fb      	ldr	r3, [r7, #12]
 800cfd2:	691b      	ldr	r3, [r3, #16]
 800cfd4:	2b00      	cmp	r3, #0
 800cfd6:	d104      	bne.n	800cfe2 <UART_Start_Receive_IT+0x92>
 800cfd8:	68fb      	ldr	r3, [r7, #12]
 800cfda:	227f      	movs	r2, #127	; 0x7f
 800cfdc:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800cfe0:	e008      	b.n	800cff4 <UART_Start_Receive_IT+0xa4>
 800cfe2:	68fb      	ldr	r3, [r7, #12]
 800cfe4:	223f      	movs	r2, #63	; 0x3f
 800cfe6:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c
 800cfea:	e003      	b.n	800cff4 <UART_Start_Receive_IT+0xa4>
 800cfec:	68fb      	ldr	r3, [r7, #12]
 800cfee:	2200      	movs	r2, #0
 800cff0:	f8a3 205c 	strh.w	r2, [r3, #92]	; 0x5c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	2200      	movs	r2, #0
 800cff8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800cffc:	68fb      	ldr	r3, [r7, #12]
 800cffe:	2222      	movs	r2, #34	; 0x22
 800d000:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	681b      	ldr	r3, [r3, #0]
 800d008:	3308      	adds	r3, #8
 800d00a:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d00c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d00e:	e853 3f00 	ldrex	r3, [r3]
 800d012:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d014:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d016:	f043 0301 	orr.w	r3, r3, #1
 800d01a:	657b      	str	r3, [r7, #84]	; 0x54
 800d01c:	68fb      	ldr	r3, [r7, #12]
 800d01e:	681b      	ldr	r3, [r3, #0]
 800d020:	3308      	adds	r3, #8
 800d022:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800d024:	64ba      	str	r2, [r7, #72]	; 0x48
 800d026:	647b      	str	r3, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d028:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d02a:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d02c:	e841 2300 	strex	r3, r2, [r1]
 800d030:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d032:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d034:	2b00      	cmp	r3, #0
 800d036:	d1e5      	bne.n	800d004 <UART_Start_Receive_IT+0xb4>

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	689b      	ldr	r3, [r3, #8]
 800d03c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800d040:	d107      	bne.n	800d052 <UART_Start_Receive_IT+0x102>
 800d042:	68fb      	ldr	r3, [r7, #12]
 800d044:	691b      	ldr	r3, [r3, #16]
 800d046:	2b00      	cmp	r3, #0
 800d048:	d103      	bne.n	800d052 <UART_Start_Receive_IT+0x102>
  {
    huart->RxISR = UART_RxISR_16BIT;
 800d04a:	68fb      	ldr	r3, [r7, #12]
 800d04c:	4a21      	ldr	r2, [pc, #132]	; (800d0d4 <UART_Start_Receive_IT+0x184>)
 800d04e:	669a      	str	r2, [r3, #104]	; 0x68
 800d050:	e002      	b.n	800d058 <UART_Start_Receive_IT+0x108>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 800d052:	68fb      	ldr	r3, [r7, #12]
 800d054:	4a20      	ldr	r2, [pc, #128]	; (800d0d8 <UART_Start_Receive_IT+0x188>)
 800d056:	669a      	str	r2, [r3, #104]	; 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d058:	68fb      	ldr	r3, [r7, #12]
 800d05a:	691b      	ldr	r3, [r3, #16]
 800d05c:	2b00      	cmp	r3, #0
 800d05e:	d019      	beq.n	800d094 <UART_Start_Receive_IT+0x144>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 800d060:	68fb      	ldr	r3, [r7, #12]
 800d062:	681b      	ldr	r3, [r3, #0]
 800d064:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d066:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d068:	e853 3f00 	ldrex	r3, [r3]
 800d06c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d06e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d070:	f443 7390 	orr.w	r3, r3, #288	; 0x120
 800d074:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d076:	68fb      	ldr	r3, [r7, #12]
 800d078:	681b      	ldr	r3, [r3, #0]
 800d07a:	461a      	mov	r2, r3
 800d07c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d07e:	637b      	str	r3, [r7, #52]	; 0x34
 800d080:	633a      	str	r2, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d082:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d084:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d086:	e841 2300 	strex	r3, r2, [r1]
 800d08a:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d08c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d08e:	2b00      	cmp	r3, #0
 800d090:	d1e6      	bne.n	800d060 <UART_Start_Receive_IT+0x110>
 800d092:	e018      	b.n	800d0c6 <UART_Start_Receive_IT+0x176>
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 800d094:	68fb      	ldr	r3, [r7, #12]
 800d096:	681b      	ldr	r3, [r3, #0]
 800d098:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d09a:	697b      	ldr	r3, [r7, #20]
 800d09c:	e853 3f00 	ldrex	r3, [r3]
 800d0a0:	613b      	str	r3, [r7, #16]
   return(result);
 800d0a2:	693b      	ldr	r3, [r7, #16]
 800d0a4:	f043 0320 	orr.w	r3, r3, #32
 800d0a8:	653b      	str	r3, [r7, #80]	; 0x50
 800d0aa:	68fb      	ldr	r3, [r7, #12]
 800d0ac:	681b      	ldr	r3, [r3, #0]
 800d0ae:	461a      	mov	r2, r3
 800d0b0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d0b2:	623b      	str	r3, [r7, #32]
 800d0b4:	61fa      	str	r2, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d0b6:	69f9      	ldr	r1, [r7, #28]
 800d0b8:	6a3a      	ldr	r2, [r7, #32]
 800d0ba:	e841 2300 	strex	r3, r2, [r1]
 800d0be:	61bb      	str	r3, [r7, #24]
   return(result);
 800d0c0:	69bb      	ldr	r3, [r7, #24]
 800d0c2:	2b00      	cmp	r3, #0
 800d0c4:	d1e6      	bne.n	800d094 <UART_Start_Receive_IT+0x144>
  }
  return HAL_OK;
 800d0c6:	2300      	movs	r3, #0
}
 800d0c8:	4618      	mov	r0, r3
 800d0ca:	375c      	adds	r7, #92	; 0x5c
 800d0cc:	46bd      	mov	sp, r7
 800d0ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d0d2:	4770      	bx	lr
 800d0d4:	0800da4d 	.word	0x0800da4d
 800d0d8:	0800d8a5 	.word	0x0800d8a5

0800d0dc <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800d0dc:	b580      	push	{r7, lr}
 800d0de:	b096      	sub	sp, #88	; 0x58
 800d0e0:	af00      	add	r7, sp, #0
 800d0e2:	60f8      	str	r0, [r7, #12]
 800d0e4:	60b9      	str	r1, [r7, #8]
 800d0e6:	4613      	mov	r3, r2
 800d0e8:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800d0ea:	68fb      	ldr	r3, [r7, #12]
 800d0ec:	68ba      	ldr	r2, [r7, #8]
 800d0ee:	655a      	str	r2, [r3, #84]	; 0x54
  huart->RxXferSize = Size;
 800d0f0:	68fb      	ldr	r3, [r7, #12]
 800d0f2:	88fa      	ldrh	r2, [r7, #6]
 800d0f4:	f8a3 2058 	strh.w	r2, [r3, #88]	; 0x58

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d0f8:	68fb      	ldr	r3, [r7, #12]
 800d0fa:	2200      	movs	r2, #0
 800d0fc:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800d100:	68fb      	ldr	r3, [r7, #12]
 800d102:	2222      	movs	r2, #34	; 0x22
 800d104:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

  if (huart->hdmarx != NULL)
 800d108:	68fb      	ldr	r3, [r7, #12]
 800d10a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d10c:	2b00      	cmp	r3, #0
 800d10e:	d028      	beq.n	800d162 <UART_Start_Receive_DMA+0x86>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 800d110:	68fb      	ldr	r3, [r7, #12]
 800d112:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d114:	4a3e      	ldr	r2, [pc, #248]	; (800d210 <UART_Start_Receive_DMA+0x134>)
 800d116:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 800d118:	68fb      	ldr	r3, [r7, #12]
 800d11a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d11c:	4a3d      	ldr	r2, [pc, #244]	; (800d214 <UART_Start_Receive_DMA+0x138>)
 800d11e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d124:	4a3c      	ldr	r2, [pc, #240]	; (800d218 <UART_Start_Receive_DMA+0x13c>)
 800d126:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 800d128:	68fb      	ldr	r3, [r7, #12]
 800d12a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d12c:	2200      	movs	r2, #0
 800d12e:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 800d130:	68fb      	ldr	r3, [r7, #12]
 800d132:	6f58      	ldr	r0, [r3, #116]	; 0x74
 800d134:	68fb      	ldr	r3, [r7, #12]
 800d136:	681b      	ldr	r3, [r3, #0]
 800d138:	3324      	adds	r3, #36	; 0x24
 800d13a:	4619      	mov	r1, r3
 800d13c:	68fb      	ldr	r3, [r7, #12]
 800d13e:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d140:	461a      	mov	r2, r3
 800d142:	88fb      	ldrh	r3, [r7, #6]
 800d144:	f7f6 fe86 	bl	8003e54 <HAL_DMA_Start_IT>
 800d148:	4603      	mov	r3, r0
 800d14a:	2b00      	cmp	r3, #0
 800d14c:	d009      	beq.n	800d162 <UART_Start_Receive_DMA+0x86>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 800d14e:	68fb      	ldr	r3, [r7, #12]
 800d150:	2210      	movs	r2, #16
 800d152:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d156:	68fb      	ldr	r3, [r7, #12]
 800d158:	2220      	movs	r2, #32
 800d15a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      return HAL_ERROR;
 800d15e:	2301      	movs	r3, #1
 800d160:	e051      	b.n	800d206 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 800d162:	68fb      	ldr	r3, [r7, #12]
 800d164:	691b      	ldr	r3, [r3, #16]
 800d166:	2b00      	cmp	r3, #0
 800d168:	d018      	beq.n	800d19c <UART_Start_Receive_DMA+0xc0>
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d16a:	68fb      	ldr	r3, [r7, #12]
 800d16c:	681b      	ldr	r3, [r3, #0]
 800d16e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d170:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d172:	e853 3f00 	ldrex	r3, [r3]
 800d176:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d178:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d17a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800d17e:	657b      	str	r3, [r7, #84]	; 0x54
 800d180:	68fb      	ldr	r3, [r7, #12]
 800d182:	681b      	ldr	r3, [r3, #0]
 800d184:	461a      	mov	r2, r3
 800d186:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 800d188:	64bb      	str	r3, [r7, #72]	; 0x48
 800d18a:	647a      	str	r2, [r7, #68]	; 0x44
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d18c:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800d18e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d190:	e841 2300 	strex	r3, r2, [r1]
 800d194:	643b      	str	r3, [r7, #64]	; 0x40
   return(result);
 800d196:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800d198:	2b00      	cmp	r3, #0
 800d19a:	d1e6      	bne.n	800d16a <UART_Start_Receive_DMA+0x8e>
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d19c:	68fb      	ldr	r3, [r7, #12]
 800d19e:	681b      	ldr	r3, [r3, #0]
 800d1a0:	3308      	adds	r3, #8
 800d1a2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1a4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d1a6:	e853 3f00 	ldrex	r3, [r3]
 800d1aa:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d1ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d1ae:	f043 0301 	orr.w	r3, r3, #1
 800d1b2:	653b      	str	r3, [r7, #80]	; 0x50
 800d1b4:	68fb      	ldr	r3, [r7, #12]
 800d1b6:	681b      	ldr	r3, [r3, #0]
 800d1b8:	3308      	adds	r3, #8
 800d1ba:	6d3a      	ldr	r2, [r7, #80]	; 0x50
 800d1bc:	637a      	str	r2, [r7, #52]	; 0x34
 800d1be:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1c0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800d1c2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800d1c4:	e841 2300 	strex	r3, r2, [r1]
 800d1c8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800d1ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800d1cc:	2b00      	cmp	r3, #0
 800d1ce:	d1e5      	bne.n	800d19c <UART_Start_Receive_DMA+0xc0>

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d1d0:	68fb      	ldr	r3, [r7, #12]
 800d1d2:	681b      	ldr	r3, [r3, #0]
 800d1d4:	3308      	adds	r3, #8
 800d1d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d1d8:	697b      	ldr	r3, [r7, #20]
 800d1da:	e853 3f00 	ldrex	r3, [r3]
 800d1de:	613b      	str	r3, [r7, #16]
   return(result);
 800d1e0:	693b      	ldr	r3, [r7, #16]
 800d1e2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d1e6:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d1e8:	68fb      	ldr	r3, [r7, #12]
 800d1ea:	681b      	ldr	r3, [r3, #0]
 800d1ec:	3308      	adds	r3, #8
 800d1ee:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800d1f0:	623a      	str	r2, [r7, #32]
 800d1f2:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d1f4:	69f9      	ldr	r1, [r7, #28]
 800d1f6:	6a3a      	ldr	r2, [r7, #32]
 800d1f8:	e841 2300 	strex	r3, r2, [r1]
 800d1fc:	61bb      	str	r3, [r7, #24]
   return(result);
 800d1fe:	69bb      	ldr	r3, [r7, #24]
 800d200:	2b00      	cmp	r3, #0
 800d202:	d1e5      	bne.n	800d1d0 <UART_Start_Receive_DMA+0xf4>

  return HAL_OK;
 800d204:	2300      	movs	r3, #0
}
 800d206:	4618      	mov	r0, r3
 800d208:	3758      	adds	r7, #88	; 0x58
 800d20a:	46bd      	mov	sp, r7
 800d20c:	bd80      	pop	{r7, pc}
 800d20e:	bf00      	nop
 800d210:	0800d3e3 	.word	0x0800d3e3
 800d214:	0800d50b 	.word	0x0800d50b
 800d218:	0800d549 	.word	0x0800d549

0800d21c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800d21c:	b480      	push	{r7}
 800d21e:	b089      	sub	sp, #36	; 0x24
 800d220:	af00      	add	r7, sp, #0
 800d222:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 800d224:	687b      	ldr	r3, [r7, #4]
 800d226:	681b      	ldr	r3, [r3, #0]
 800d228:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d22a:	68fb      	ldr	r3, [r7, #12]
 800d22c:	e853 3f00 	ldrex	r3, [r3]
 800d230:	60bb      	str	r3, [r7, #8]
   return(result);
 800d232:	68bb      	ldr	r3, [r7, #8]
 800d234:	f023 03c0 	bic.w	r3, r3, #192	; 0xc0
 800d238:	61fb      	str	r3, [r7, #28]
 800d23a:	687b      	ldr	r3, [r7, #4]
 800d23c:	681b      	ldr	r3, [r3, #0]
 800d23e:	461a      	mov	r2, r3
 800d240:	69fb      	ldr	r3, [r7, #28]
 800d242:	61bb      	str	r3, [r7, #24]
 800d244:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d246:	6979      	ldr	r1, [r7, #20]
 800d248:	69ba      	ldr	r2, [r7, #24]
 800d24a:	e841 2300 	strex	r3, r2, [r1]
 800d24e:	613b      	str	r3, [r7, #16]
   return(result);
 800d250:	693b      	ldr	r3, [r7, #16]
 800d252:	2b00      	cmp	r3, #0
 800d254:	d1e6      	bne.n	800d224 <UART_EndTxTransfer+0x8>

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d256:	687b      	ldr	r3, [r7, #4]
 800d258:	2220      	movs	r2, #32
 800d25a:	67da      	str	r2, [r3, #124]	; 0x7c
}
 800d25c:	bf00      	nop
 800d25e:	3724      	adds	r7, #36	; 0x24
 800d260:	46bd      	mov	sp, r7
 800d262:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d266:	4770      	bx	lr

0800d268 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800d268:	b480      	push	{r7}
 800d26a:	b095      	sub	sp, #84	; 0x54
 800d26c:	af00      	add	r7, sp, #0
 800d26e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d270:	687b      	ldr	r3, [r7, #4]
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d276:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d278:	e853 3f00 	ldrex	r3, [r3]
 800d27c:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800d27e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d280:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d284:	64fb      	str	r3, [r7, #76]	; 0x4c
 800d286:	687b      	ldr	r3, [r7, #4]
 800d288:	681b      	ldr	r3, [r3, #0]
 800d28a:	461a      	mov	r2, r3
 800d28c:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d28e:	643b      	str	r3, [r7, #64]	; 0x40
 800d290:	63fa      	str	r2, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d292:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800d294:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800d296:	e841 2300 	strex	r3, r2, [r1]
 800d29a:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800d29c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d29e:	2b00      	cmp	r3, #0
 800d2a0:	d1e6      	bne.n	800d270 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	681b      	ldr	r3, [r3, #0]
 800d2a6:	3308      	adds	r3, #8
 800d2a8:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2aa:	6a3b      	ldr	r3, [r7, #32]
 800d2ac:	e853 3f00 	ldrex	r3, [r3]
 800d2b0:	61fb      	str	r3, [r7, #28]
   return(result);
 800d2b2:	69fb      	ldr	r3, [r7, #28]
 800d2b4:	f023 0301 	bic.w	r3, r3, #1
 800d2b8:	64bb      	str	r3, [r7, #72]	; 0x48
 800d2ba:	687b      	ldr	r3, [r7, #4]
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	3308      	adds	r3, #8
 800d2c0:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800d2c2:	62fa      	str	r2, [r7, #44]	; 0x2c
 800d2c4:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d2c6:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d2c8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d2ca:	e841 2300 	strex	r3, r2, [r1]
 800d2ce:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d2d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d1e5      	bne.n	800d2a2 <UART_EndRxTransfer+0x3a>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d2da:	2b01      	cmp	r3, #1
 800d2dc:	d118      	bne.n	800d310 <UART_EndRxTransfer+0xa8>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d2de:	687b      	ldr	r3, [r7, #4]
 800d2e0:	681b      	ldr	r3, [r3, #0]
 800d2e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d2e4:	68fb      	ldr	r3, [r7, #12]
 800d2e6:	e853 3f00 	ldrex	r3, [r3]
 800d2ea:	60bb      	str	r3, [r7, #8]
   return(result);
 800d2ec:	68bb      	ldr	r3, [r7, #8]
 800d2ee:	f023 0310 	bic.w	r3, r3, #16
 800d2f2:	647b      	str	r3, [r7, #68]	; 0x44
 800d2f4:	687b      	ldr	r3, [r7, #4]
 800d2f6:	681b      	ldr	r3, [r3, #0]
 800d2f8:	461a      	mov	r2, r3
 800d2fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800d2fc:	61bb      	str	r3, [r7, #24]
 800d2fe:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d300:	6979      	ldr	r1, [r7, #20]
 800d302:	69ba      	ldr	r2, [r7, #24]
 800d304:	e841 2300 	strex	r3, r2, [r1]
 800d308:	613b      	str	r3, [r7, #16]
   return(result);
 800d30a:	693b      	ldr	r3, [r7, #16]
 800d30c:	2b00      	cmp	r3, #0
 800d30e:	d1e6      	bne.n	800d2de <UART_EndRxTransfer+0x76>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800d310:	687b      	ldr	r3, [r7, #4]
 800d312:	2220      	movs	r2, #32
 800d314:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d318:	687b      	ldr	r3, [r7, #4]
 800d31a:	2200      	movs	r2, #0
 800d31c:	661a      	str	r2, [r3, #96]	; 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 800d31e:	687b      	ldr	r3, [r7, #4]
 800d320:	2200      	movs	r2, #0
 800d322:	669a      	str	r2, [r3, #104]	; 0x68
}
 800d324:	bf00      	nop
 800d326:	3754      	adds	r7, #84	; 0x54
 800d328:	46bd      	mov	sp, r7
 800d32a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d32e:	4770      	bx	lr

0800d330 <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 800d330:	b580      	push	{r7, lr}
 800d332:	b090      	sub	sp, #64	; 0x40
 800d334:	af00      	add	r7, sp, #0
 800d336:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d338:	687b      	ldr	r3, [r7, #4]
 800d33a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d33c:	63fb      	str	r3, [r7, #60]	; 0x3c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d33e:	687b      	ldr	r3, [r7, #4]
 800d340:	69db      	ldr	r3, [r3, #28]
 800d342:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d346:	d037      	beq.n	800d3b8 <UART_DMATransmitCplt+0x88>
  {
    huart->TxXferCount = 0U;
 800d348:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d34a:	2200      	movs	r2, #0
 800d34c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 800d350:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d352:	681b      	ldr	r3, [r3, #0]
 800d354:	3308      	adds	r3, #8
 800d356:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d358:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d35a:	e853 3f00 	ldrex	r3, [r3]
 800d35e:	623b      	str	r3, [r7, #32]
   return(result);
 800d360:	6a3b      	ldr	r3, [r7, #32]
 800d362:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d366:	63bb      	str	r3, [r7, #56]	; 0x38
 800d368:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d36a:	681b      	ldr	r3, [r3, #0]
 800d36c:	3308      	adds	r3, #8
 800d36e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800d370:	633a      	str	r2, [r7, #48]	; 0x30
 800d372:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d374:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d376:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d378:	e841 2300 	strex	r3, r2, [r1]
 800d37c:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d37e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d380:	2b00      	cmp	r3, #0
 800d382:	d1e5      	bne.n	800d350 <UART_DMATransmitCplt+0x20>

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d386:	681b      	ldr	r3, [r3, #0]
 800d388:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d38a:	693b      	ldr	r3, [r7, #16]
 800d38c:	e853 3f00 	ldrex	r3, [r3]
 800d390:	60fb      	str	r3, [r7, #12]
   return(result);
 800d392:	68fb      	ldr	r3, [r7, #12]
 800d394:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d398:	637b      	str	r3, [r7, #52]	; 0x34
 800d39a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d39c:	681b      	ldr	r3, [r3, #0]
 800d39e:	461a      	mov	r2, r3
 800d3a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d3a2:	61fb      	str	r3, [r7, #28]
 800d3a4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d3a6:	69b9      	ldr	r1, [r7, #24]
 800d3a8:	69fa      	ldr	r2, [r7, #28]
 800d3aa:	e841 2300 	strex	r3, r2, [r1]
 800d3ae:	617b      	str	r3, [r7, #20]
   return(result);
 800d3b0:	697b      	ldr	r3, [r7, #20]
 800d3b2:	2b00      	cmp	r3, #0
 800d3b4:	d1e6      	bne.n	800d384 <UART_DMATransmitCplt+0x54>
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d3b6:	e002      	b.n	800d3be <UART_DMATransmitCplt+0x8e>
    HAL_UART_TxCpltCallback(huart);
 800d3b8:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 800d3ba:	f7ff f9d5 	bl	800c768 <HAL_UART_TxCpltCallback>
}
 800d3be:	bf00      	nop
 800d3c0:	3740      	adds	r7, #64	; 0x40
 800d3c2:	46bd      	mov	sp, r7
 800d3c4:	bd80      	pop	{r7, pc}

0800d3c6 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d3c6:	b580      	push	{r7, lr}
 800d3c8:	b084      	sub	sp, #16
 800d3ca:	af00      	add	r7, sp, #0
 800d3cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3d2:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 800d3d4:	68f8      	ldr	r0, [r7, #12]
 800d3d6:	f7ff f9d1 	bl	800c77c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d3da:	bf00      	nop
 800d3dc:	3710      	adds	r7, #16
 800d3de:	46bd      	mov	sp, r7
 800d3e0:	bd80      	pop	{r7, pc}

0800d3e2 <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800d3e2:	b580      	push	{r7, lr}
 800d3e4:	b09c      	sub	sp, #112	; 0x70
 800d3e6:	af00      	add	r7, sp, #0
 800d3e8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d3ea:	687b      	ldr	r3, [r7, #4]
 800d3ec:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d3ee:	66fb      	str	r3, [r7, #108]	; 0x6c

  /* DMA Normal mode */
  if (hdma->Init.Mode != DMA_CIRCULAR)
 800d3f0:	687b      	ldr	r3, [r7, #4]
 800d3f2:	69db      	ldr	r3, [r3, #28]
 800d3f4:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800d3f8:	d071      	beq.n	800d4de <UART_DMAReceiveCplt+0xfc>
  {
    huart->RxXferCount = 0U;
 800d3fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d3fc:	2200      	movs	r2, #0
 800d3fe:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800d402:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d408:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d40a:	e853 3f00 	ldrex	r3, [r3]
 800d40e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d410:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d412:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800d416:	66bb      	str	r3, [r7, #104]	; 0x68
 800d418:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d41a:	681b      	ldr	r3, [r3, #0]
 800d41c:	461a      	mov	r2, r3
 800d41e:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d420:	65bb      	str	r3, [r7, #88]	; 0x58
 800d422:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d424:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d426:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d428:	e841 2300 	strex	r3, r2, [r1]
 800d42c:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d42e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d430:	2b00      	cmp	r3, #0
 800d432:	d1e6      	bne.n	800d402 <UART_DMAReceiveCplt+0x20>
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d434:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d436:	681b      	ldr	r3, [r3, #0]
 800d438:	3308      	adds	r3, #8
 800d43a:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d43c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d43e:	e853 3f00 	ldrex	r3, [r3]
 800d442:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d444:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d446:	f023 0301 	bic.w	r3, r3, #1
 800d44a:	667b      	str	r3, [r7, #100]	; 0x64
 800d44c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d44e:	681b      	ldr	r3, [r3, #0]
 800d450:	3308      	adds	r3, #8
 800d452:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d454:	647a      	str	r2, [r7, #68]	; 0x44
 800d456:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d458:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d45a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d45c:	e841 2300 	strex	r3, r2, [r1]
 800d460:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d462:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d464:	2b00      	cmp	r3, #0
 800d466:	d1e5      	bne.n	800d434 <UART_DMAReceiveCplt+0x52>

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800d468:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d46a:	681b      	ldr	r3, [r3, #0]
 800d46c:	3308      	adds	r3, #8
 800d46e:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d470:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d472:	e853 3f00 	ldrex	r3, [r3]
 800d476:	623b      	str	r3, [r7, #32]
   return(result);
 800d478:	6a3b      	ldr	r3, [r7, #32]
 800d47a:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d47e:	663b      	str	r3, [r7, #96]	; 0x60
 800d480:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d482:	681b      	ldr	r3, [r3, #0]
 800d484:	3308      	adds	r3, #8
 800d486:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800d488:	633a      	str	r2, [r7, #48]	; 0x30
 800d48a:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d48c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d48e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d490:	e841 2300 	strex	r3, r2, [r1]
 800d494:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d496:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d498:	2b00      	cmp	r3, #0
 800d49a:	d1e5      	bne.n	800d468 <UART_DMAReceiveCplt+0x86>

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 800d49c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d49e:	2220      	movs	r2, #32
 800d4a0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d4a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4a6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d4a8:	2b01      	cmp	r3, #1
 800d4aa:	d118      	bne.n	800d4de <UART_DMAReceiveCplt+0xfc>
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d4ac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4ae:	681b      	ldr	r3, [r3, #0]
 800d4b0:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d4b2:	693b      	ldr	r3, [r7, #16]
 800d4b4:	e853 3f00 	ldrex	r3, [r3]
 800d4b8:	60fb      	str	r3, [r7, #12]
   return(result);
 800d4ba:	68fb      	ldr	r3, [r7, #12]
 800d4bc:	f023 0310 	bic.w	r3, r3, #16
 800d4c0:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d4c2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4c4:	681b      	ldr	r3, [r3, #0]
 800d4c6:	461a      	mov	r2, r3
 800d4c8:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d4ca:	61fb      	str	r3, [r7, #28]
 800d4cc:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d4ce:	69b9      	ldr	r1, [r7, #24]
 800d4d0:	69fa      	ldr	r2, [r7, #28]
 800d4d2:	e841 2300 	strex	r3, r2, [r1]
 800d4d6:	617b      	str	r3, [r7, #20]
   return(result);
 800d4d8:	697b      	ldr	r3, [r7, #20]
 800d4da:	2b00      	cmp	r3, #0
 800d4dc:	d1e6      	bne.n	800d4ac <UART_DMAReceiveCplt+0xca>
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d4de:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4e0:	2200      	movs	r2, #0
 800d4e2:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d4e4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4e6:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d4e8:	2b01      	cmp	r3, #1
 800d4ea:	d107      	bne.n	800d4fc <UART_DMAReceiveCplt+0x11a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800d4ec:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800d4ee:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d4f2:	4619      	mov	r1, r3
 800d4f4:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d4f6:	f7ff f955 	bl	800c7a4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d4fa:	e002      	b.n	800d502 <UART_DMAReceiveCplt+0x120>
    HAL_UART_RxCpltCallback(huart);
 800d4fc:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800d4fe:	f00f fb4d 	bl	801cb9c <HAL_UART_RxCpltCallback>
}
 800d502:	bf00      	nop
 800d504:	3770      	adds	r7, #112	; 0x70
 800d506:	46bd      	mov	sp, r7
 800d508:	bd80      	pop	{r7, pc}

0800d50a <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800d50a:	b580      	push	{r7, lr}
 800d50c:	b084      	sub	sp, #16
 800d50e:	af00      	add	r7, sp, #0
 800d510:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d512:	687b      	ldr	r3, [r7, #4]
 800d514:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d516:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 800d518:	68fb      	ldr	r3, [r7, #12]
 800d51a:	2201      	movs	r2, #1
 800d51c:	665a      	str	r2, [r3, #100]	; 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d51e:	68fb      	ldr	r3, [r7, #12]
 800d520:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d522:	2b01      	cmp	r3, #1
 800d524:	d109      	bne.n	800d53a <UART_DMARxHalfCplt+0x30>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize / 2U);
 800d526:	68fb      	ldr	r3, [r7, #12]
 800d528:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800d52c:	085b      	lsrs	r3, r3, #1
 800d52e:	b29b      	uxth	r3, r3
 800d530:	4619      	mov	r1, r3
 800d532:	68f8      	ldr	r0, [r7, #12]
 800d534:	f7ff f936 	bl	800c7a4 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800d538:	e002      	b.n	800d540 <UART_DMARxHalfCplt+0x36>
    HAL_UART_RxHalfCpltCallback(huart);
 800d53a:	68f8      	ldr	r0, [r7, #12]
 800d53c:	f7ff f928 	bl	800c790 <HAL_UART_RxHalfCpltCallback>
}
 800d540:	bf00      	nop
 800d542:	3710      	adds	r7, #16
 800d544:	46bd      	mov	sp, r7
 800d546:	bd80      	pop	{r7, pc}

0800d548 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800d548:	b580      	push	{r7, lr}
 800d54a:	b086      	sub	sp, #24
 800d54c:	af00      	add	r7, sp, #0
 800d54e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d554:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d55a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 800d55c:	697b      	ldr	r3, [r7, #20]
 800d55e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d562:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 800d564:	697b      	ldr	r3, [r7, #20]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	689b      	ldr	r3, [r3, #8]
 800d56a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d56e:	2b80      	cmp	r3, #128	; 0x80
 800d570:	d109      	bne.n	800d586 <UART_DMAError+0x3e>
 800d572:	693b      	ldr	r3, [r7, #16]
 800d574:	2b21      	cmp	r3, #33	; 0x21
 800d576:	d106      	bne.n	800d586 <UART_DMAError+0x3e>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 800d578:	697b      	ldr	r3, [r7, #20]
 800d57a:	2200      	movs	r2, #0
 800d57c:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
    UART_EndTxTransfer(huart);
 800d580:	6978      	ldr	r0, [r7, #20]
 800d582:	f7ff fe4b 	bl	800d21c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 800d586:	697b      	ldr	r3, [r7, #20]
 800d588:	681b      	ldr	r3, [r3, #0]
 800d58a:	689b      	ldr	r3, [r3, #8]
 800d58c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800d590:	2b40      	cmp	r3, #64	; 0x40
 800d592:	d109      	bne.n	800d5a8 <UART_DMAError+0x60>
 800d594:	68fb      	ldr	r3, [r7, #12]
 800d596:	2b22      	cmp	r3, #34	; 0x22
 800d598:	d106      	bne.n	800d5a8 <UART_DMAError+0x60>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 800d59a:	697b      	ldr	r3, [r7, #20]
 800d59c:	2200      	movs	r2, #0
 800d59e:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
    UART_EndRxTransfer(huart);
 800d5a2:	6978      	ldr	r0, [r7, #20]
 800d5a4:	f7ff fe60 	bl	800d268 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 800d5a8:	697b      	ldr	r3, [r7, #20]
 800d5aa:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800d5ae:	f043 0210 	orr.w	r2, r3, #16
 800d5b2:	697b      	ldr	r3, [r7, #20]
 800d5b4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d5b8:	6978      	ldr	r0, [r7, #20]
 800d5ba:	f00f fb1f 	bl	801cbfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d5be:	bf00      	nop
 800d5c0:	3718      	adds	r7, #24
 800d5c2:	46bd      	mov	sp, r7
 800d5c4:	bd80      	pop	{r7, pc}

0800d5c6 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800d5c6:	b580      	push	{r7, lr}
 800d5c8:	b084      	sub	sp, #16
 800d5ca:	af00      	add	r7, sp, #0
 800d5cc:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d5ce:	687b      	ldr	r3, [r7, #4]
 800d5d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5d2:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 800d5d4:	68fb      	ldr	r3, [r7, #12]
 800d5d6:	2200      	movs	r2, #0
 800d5d8:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a
  huart->TxXferCount = 0U;
 800d5dc:	68fb      	ldr	r3, [r7, #12]
 800d5de:	2200      	movs	r2, #0
 800d5e0:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800d5e4:	68f8      	ldr	r0, [r7, #12]
 800d5e6:	f00f fb09 	bl	801cbfc <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d5ea:	bf00      	nop
 800d5ec:	3710      	adds	r7, #16
 800d5ee:	46bd      	mov	sp, r7
 800d5f0:	bd80      	pop	{r7, pc}

0800d5f2 <UART_DMATxAbortCallback>:
  *         Abort still ongoing for Rx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMATxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800d5f2:	b580      	push	{r7, lr}
 800d5f4:	b084      	sub	sp, #16
 800d5f6:	af00      	add	r7, sp, #0
 800d5f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d5fa:	687b      	ldr	r3, [r7, #4]
 800d5fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d5fe:	60fb      	str	r3, [r7, #12]

  huart->hdmatx->XferAbortCallback = NULL;
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d604:	2200      	movs	r2, #0
 800d606:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmarx != NULL)
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d60c:	2b00      	cmp	r3, #0
 800d60e:	d004      	beq.n	800d61a <UART_DMATxAbortCallback+0x28>
  {
    if (huart->hdmarx->XferAbortCallback != NULL)
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d614:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d616:	2b00      	cmp	r3, #0
 800d618:	d11d      	bne.n	800d656 <UART_DMATxAbortCallback+0x64>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 800d61a:	68fb      	ldr	r3, [r7, #12]
 800d61c:	2200      	movs	r2, #0
 800d61e:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 800d622:	68fb      	ldr	r3, [r7, #12]
 800d624:	2200      	movs	r2, #0
 800d626:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d62a:	68fb      	ldr	r3, [r7, #12]
 800d62c:	2200      	movs	r2, #0
 800d62e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800d632:	68fb      	ldr	r3, [r7, #12]
 800d634:	681b      	ldr	r3, [r3, #0]
 800d636:	220f      	movs	r2, #15
 800d638:	621a      	str	r2, [r3, #32]


  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800d63a:	68fb      	ldr	r3, [r7, #12]
 800d63c:	2220      	movs	r2, #32
 800d63e:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800d640:	68fb      	ldr	r3, [r7, #12]
 800d642:	2220      	movs	r2, #32
 800d644:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d648:	68fb      	ldr	r3, [r7, #12]
 800d64a:	2200      	movs	r2, #0
 800d64c:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800d64e:	68f8      	ldr	r0, [r7, #12]
 800d650:	f00f fb0e 	bl	801cc70 <HAL_UART_AbortCpltCallback>
 800d654:	e000      	b.n	800d658 <UART_DMATxAbortCallback+0x66>
      return;
 800d656:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d658:	3710      	adds	r7, #16
 800d65a:	46bd      	mov	sp, r7
 800d65c:	bd80      	pop	{r7, pc}

0800d65e <UART_DMARxAbortCallback>:
  *         Abort still ongoing for Tx DMA Handle.
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMARxAbortCallback(DMA_HandleTypeDef *hdma)
{
 800d65e:	b580      	push	{r7, lr}
 800d660:	b084      	sub	sp, #16
 800d662:	af00      	add	r7, sp, #0
 800d664:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 800d666:	687b      	ldr	r3, [r7, #4]
 800d668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800d66a:	60fb      	str	r3, [r7, #12]

  huart->hdmarx->XferAbortCallback = NULL;
 800d66c:	68fb      	ldr	r3, [r7, #12]
 800d66e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800d670:	2200      	movs	r2, #0
 800d672:	651a      	str	r2, [r3, #80]	; 0x50

  /* Check if an Abort process is still ongoing */
  if (huart->hdmatx != NULL)
 800d674:	68fb      	ldr	r3, [r7, #12]
 800d676:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d678:	2b00      	cmp	r3, #0
 800d67a:	d004      	beq.n	800d686 <UART_DMARxAbortCallback+0x28>
  {
    if (huart->hdmatx->XferAbortCallback != NULL)
 800d67c:	68fb      	ldr	r3, [r7, #12]
 800d67e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800d680:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800d682:	2b00      	cmp	r3, #0
 800d684:	d125      	bne.n	800d6d2 <UART_DMARxAbortCallback+0x74>
      return;
    }
  }

  /* No Abort process still ongoing : All DMA channels are aborted, call user Abort Complete callback */
  huart->TxXferCount = 0U;
 800d686:	68fb      	ldr	r3, [r7, #12]
 800d688:	2200      	movs	r2, #0
 800d68a:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
  huart->RxXferCount = 0U;
 800d68e:	68fb      	ldr	r3, [r7, #12]
 800d690:	2200      	movs	r2, #0
 800d692:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

  /* Reset errorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800d696:	68fb      	ldr	r3, [r7, #12]
 800d698:	2200      	movs	r2, #0
 800d69a:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  /* Clear the Error flags in the ICR register */
  __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF | UART_CLEAR_NEF | UART_CLEAR_PEF | UART_CLEAR_FEF);
 800d69e:	68fb      	ldr	r3, [r7, #12]
 800d6a0:	681b      	ldr	r3, [r3, #0]
 800d6a2:	220f      	movs	r2, #15
 800d6a4:	621a      	str	r2, [r3, #32]

  /* Discard the received data */
  __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800d6a6:	68fb      	ldr	r3, [r7, #12]
 800d6a8:	681b      	ldr	r3, [r3, #0]
 800d6aa:	699a      	ldr	r2, [r3, #24]
 800d6ac:	68fb      	ldr	r3, [r7, #12]
 800d6ae:	681b      	ldr	r3, [r3, #0]
 800d6b0:	f042 0208 	orr.w	r2, r2, #8
 800d6b4:	619a      	str	r2, [r3, #24]

  /* Restore huart->gState and huart->RxState to Ready */
  huart->gState  = HAL_UART_STATE_READY;
 800d6b6:	68fb      	ldr	r3, [r7, #12]
 800d6b8:	2220      	movs	r2, #32
 800d6ba:	67da      	str	r2, [r3, #124]	; 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 800d6bc:	68fb      	ldr	r3, [r7, #12]
 800d6be:	2220      	movs	r2, #32
 800d6c0:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d6c4:	68fb      	ldr	r3, [r7, #12]
 800d6c6:	2200      	movs	r2, #0
 800d6c8:	661a      	str	r2, [r3, #96]	; 0x60
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /* Call registered Abort complete callback */
  huart->AbortCpltCallback(huart);
#else
  /* Call legacy weak Abort complete callback */
  HAL_UART_AbortCpltCallback(huart);
 800d6ca:	68f8      	ldr	r0, [r7, #12]
 800d6cc:	f00f fad0 	bl	801cc70 <HAL_UART_AbortCpltCallback>
 800d6d0:	e000      	b.n	800d6d4 <UART_DMARxAbortCallback+0x76>
      return;
 800d6d2:	bf00      	nop
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d6d4:	3710      	adds	r7, #16
 800d6d6:	46bd      	mov	sp, r7
 800d6d8:	bd80      	pop	{r7, pc}

0800d6da <UART_TxISR_8BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d6da:	b480      	push	{r7}
 800d6dc:	b08f      	sub	sp, #60	; 0x3c
 800d6de:	af00      	add	r7, sp, #0
 800d6e0:	6078      	str	r0, [r7, #4]
  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d6e2:	687b      	ldr	r3, [r7, #4]
 800d6e4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d6e6:	2b21      	cmp	r3, #33	; 0x21
 800d6e8:	d14c      	bne.n	800d784 <UART_TxISR_8BIT+0xaa>
  {
    if (huart->TxXferCount == 0U)
 800d6ea:	687b      	ldr	r3, [r7, #4]
 800d6ec:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d6f0:	b29b      	uxth	r3, r3
 800d6f2:	2b00      	cmp	r3, #0
 800d6f4:	d132      	bne.n	800d75c <UART_TxISR_8BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800d6f6:	687b      	ldr	r3, [r7, #4]
 800d6f8:	681b      	ldr	r3, [r3, #0]
 800d6fa:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d6fc:	6a3b      	ldr	r3, [r7, #32]
 800d6fe:	e853 3f00 	ldrex	r3, [r3]
 800d702:	61fb      	str	r3, [r7, #28]
   return(result);
 800d704:	69fb      	ldr	r3, [r7, #28]
 800d706:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d70a:	637b      	str	r3, [r7, #52]	; 0x34
 800d70c:	687b      	ldr	r3, [r7, #4]
 800d70e:	681b      	ldr	r3, [r3, #0]
 800d710:	461a      	mov	r2, r3
 800d712:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d714:	62fb      	str	r3, [r7, #44]	; 0x2c
 800d716:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d718:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800d71a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800d71c:	e841 2300 	strex	r3, r2, [r1]
 800d720:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800d722:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d724:	2b00      	cmp	r3, #0
 800d726:	d1e6      	bne.n	800d6f6 <UART_TxISR_8BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d728:	687b      	ldr	r3, [r7, #4]
 800d72a:	681b      	ldr	r3, [r3, #0]
 800d72c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	e853 3f00 	ldrex	r3, [r3]
 800d734:	60bb      	str	r3, [r7, #8]
   return(result);
 800d736:	68bb      	ldr	r3, [r7, #8]
 800d738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d73c:	633b      	str	r3, [r7, #48]	; 0x30
 800d73e:	687b      	ldr	r3, [r7, #4]
 800d740:	681b      	ldr	r3, [r3, #0]
 800d742:	461a      	mov	r2, r3
 800d744:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800d746:	61bb      	str	r3, [r7, #24]
 800d748:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d74a:	6979      	ldr	r1, [r7, #20]
 800d74c:	69ba      	ldr	r2, [r7, #24]
 800d74e:	e841 2300 	strex	r3, r2, [r1]
 800d752:	613b      	str	r3, [r7, #16]
   return(result);
 800d754:	693b      	ldr	r3, [r7, #16]
 800d756:	2b00      	cmp	r3, #0
 800d758:	d1e6      	bne.n	800d728 <UART_TxISR_8BIT+0x4e>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
      huart->pTxBuffPtr++;
      huart->TxXferCount--;
    }
  }
}
 800d75a:	e013      	b.n	800d784 <UART_TxISR_8BIT+0xaa>
      huart->Instance->TDR = (uint8_t)(*huart->pTxBuffPtr & (uint8_t)0xFF);
 800d75c:	687b      	ldr	r3, [r7, #4]
 800d75e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d760:	781a      	ldrb	r2, [r3, #0]
 800d762:	687b      	ldr	r3, [r7, #4]
 800d764:	681b      	ldr	r3, [r3, #0]
 800d766:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr++;
 800d768:	687b      	ldr	r3, [r7, #4]
 800d76a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d76c:	1c5a      	adds	r2, r3, #1
 800d76e:	687b      	ldr	r3, [r7, #4]
 800d770:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800d772:	687b      	ldr	r3, [r7, #4]
 800d774:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d778:	b29b      	uxth	r3, r3
 800d77a:	3b01      	subs	r3, #1
 800d77c:	b29a      	uxth	r2, r3
 800d77e:	687b      	ldr	r3, [r7, #4]
 800d780:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800d784:	bf00      	nop
 800d786:	373c      	adds	r7, #60	; 0x3c
 800d788:	46bd      	mov	sp, r7
 800d78a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d78e:	4770      	bx	lr

0800d790 <UART_TxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Transmit_IT().
  * @param huart UART handle.
  * @retval None
  */
static void UART_TxISR_16BIT(UART_HandleTypeDef *huart)
{
 800d790:	b480      	push	{r7}
 800d792:	b091      	sub	sp, #68	; 0x44
 800d794:	af00      	add	r7, sp, #0
 800d796:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800d798:	687b      	ldr	r3, [r7, #4]
 800d79a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d79c:	2b21      	cmp	r3, #33	; 0x21
 800d79e:	d151      	bne.n	800d844 <UART_TxISR_16BIT+0xb4>
  {
    if (huart->TxXferCount == 0U)
 800d7a0:	687b      	ldr	r3, [r7, #4]
 800d7a2:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d7a6:	b29b      	uxth	r3, r3
 800d7a8:	2b00      	cmp	r3, #0
 800d7aa:	d132      	bne.n	800d812 <UART_TxISR_16BIT+0x82>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TXEIE);
 800d7ac:	687b      	ldr	r3, [r7, #4]
 800d7ae:	681b      	ldr	r3, [r3, #0]
 800d7b0:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d7b4:	e853 3f00 	ldrex	r3, [r3]
 800d7b8:	623b      	str	r3, [r7, #32]
   return(result);
 800d7ba:	6a3b      	ldr	r3, [r7, #32]
 800d7bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800d7c0:	63bb      	str	r3, [r7, #56]	; 0x38
 800d7c2:	687b      	ldr	r3, [r7, #4]
 800d7c4:	681b      	ldr	r3, [r3, #0]
 800d7c6:	461a      	mov	r2, r3
 800d7c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d7ca:	633b      	str	r3, [r7, #48]	; 0x30
 800d7cc:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d7ce:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d7d0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d7d2:	e841 2300 	strex	r3, r2, [r1]
 800d7d6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d7d8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d7da:	2b00      	cmp	r3, #0
 800d7dc:	d1e6      	bne.n	800d7ac <UART_TxISR_16BIT+0x1c>

      /* Enable the UART Transmit Complete Interrupt */
      ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d7de:	687b      	ldr	r3, [r7, #4]
 800d7e0:	681b      	ldr	r3, [r3, #0]
 800d7e2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d7e4:	693b      	ldr	r3, [r7, #16]
 800d7e6:	e853 3f00 	ldrex	r3, [r3]
 800d7ea:	60fb      	str	r3, [r7, #12]
   return(result);
 800d7ec:	68fb      	ldr	r3, [r7, #12]
 800d7ee:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d7f2:	637b      	str	r3, [r7, #52]	; 0x34
 800d7f4:	687b      	ldr	r3, [r7, #4]
 800d7f6:	681b      	ldr	r3, [r3, #0]
 800d7f8:	461a      	mov	r2, r3
 800d7fa:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d7fc:	61fb      	str	r3, [r7, #28]
 800d7fe:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d800:	69b9      	ldr	r1, [r7, #24]
 800d802:	69fa      	ldr	r2, [r7, #28]
 800d804:	e841 2300 	strex	r3, r2, [r1]
 800d808:	617b      	str	r3, [r7, #20]
   return(result);
 800d80a:	697b      	ldr	r3, [r7, #20]
 800d80c:	2b00      	cmp	r3, #0
 800d80e:	d1e6      	bne.n	800d7de <UART_TxISR_16BIT+0x4e>
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
      huart->pTxBuffPtr += 2U;
      huart->TxXferCount--;
    }
  }
}
 800d810:	e018      	b.n	800d844 <UART_TxISR_16BIT+0xb4>
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800d812:	687b      	ldr	r3, [r7, #4]
 800d814:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d816:	63fb      	str	r3, [r7, #60]	; 0x3c
      huart->Instance->TDR = (((uint32_t)(*tmp)) & 0x01FFUL);
 800d818:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d81a:	881b      	ldrh	r3, [r3, #0]
 800d81c:	461a      	mov	r2, r3
 800d81e:	687b      	ldr	r3, [r7, #4]
 800d820:	681b      	ldr	r3, [r3, #0]
 800d822:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800d826:	629a      	str	r2, [r3, #40]	; 0x28
      huart->pTxBuffPtr += 2U;
 800d828:	687b      	ldr	r3, [r7, #4]
 800d82a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800d82c:	1c9a      	adds	r2, r3, #2
 800d82e:	687b      	ldr	r3, [r7, #4]
 800d830:	64da      	str	r2, [r3, #76]	; 0x4c
      huart->TxXferCount--;
 800d832:	687b      	ldr	r3, [r7, #4]
 800d834:	f8b3 3052 	ldrh.w	r3, [r3, #82]	; 0x52
 800d838:	b29b      	uxth	r3, r3
 800d83a:	3b01      	subs	r3, #1
 800d83c:	b29a      	uxth	r2, r3
 800d83e:	687b      	ldr	r3, [r7, #4]
 800d840:	f8a3 2052 	strh.w	r2, [r3, #82]	; 0x52
}
 800d844:	bf00      	nop
 800d846:	3744      	adds	r7, #68	; 0x44
 800d848:	46bd      	mov	sp, r7
 800d84a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d84e:	4770      	bx	lr

0800d850 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800d850:	b580      	push	{r7, lr}
 800d852:	b088      	sub	sp, #32
 800d854:	af00      	add	r7, sp, #0
 800d856:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 800d858:	687b      	ldr	r3, [r7, #4]
 800d85a:	681b      	ldr	r3, [r3, #0]
 800d85c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	e853 3f00 	ldrex	r3, [r3]
 800d864:	60bb      	str	r3, [r7, #8]
   return(result);
 800d866:	68bb      	ldr	r3, [r7, #8]
 800d868:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800d86c:	61fb      	str	r3, [r7, #28]
 800d86e:	687b      	ldr	r3, [r7, #4]
 800d870:	681b      	ldr	r3, [r3, #0]
 800d872:	461a      	mov	r2, r3
 800d874:	69fb      	ldr	r3, [r7, #28]
 800d876:	61bb      	str	r3, [r7, #24]
 800d878:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d87a:	6979      	ldr	r1, [r7, #20]
 800d87c:	69ba      	ldr	r2, [r7, #24]
 800d87e:	e841 2300 	strex	r3, r2, [r1]
 800d882:	613b      	str	r3, [r7, #16]
   return(result);
 800d884:	693b      	ldr	r3, [r7, #16]
 800d886:	2b00      	cmp	r3, #0
 800d888:	d1e6      	bne.n	800d858 <UART_EndTransmit_IT+0x8>

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800d88a:	687b      	ldr	r3, [r7, #4]
 800d88c:	2220      	movs	r2, #32
 800d88e:	67da      	str	r2, [r3, #124]	; 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 800d890:	687b      	ldr	r3, [r7, #4]
 800d892:	2200      	movs	r2, #0
 800d894:	66da      	str	r2, [r3, #108]	; 0x6c
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800d896:	6878      	ldr	r0, [r7, #4]
 800d898:	f7fe ff66 	bl	800c768 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800d89c:	bf00      	nop
 800d89e:	3720      	adds	r7, #32
 800d8a0:	46bd      	mov	sp, r7
 800d8a2:	bd80      	pop	{r7, pc}

0800d8a4 <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 800d8a4:	b580      	push	{r7, lr}
 800d8a6:	b09c      	sub	sp, #112	; 0x70
 800d8a8:	af00      	add	r7, sp, #0
 800d8aa:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 800d8ac:	687b      	ldr	r3, [r7, #4]
 800d8ae:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800d8b2:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800d8b6:	687b      	ldr	r3, [r7, #4]
 800d8b8:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800d8bc:	2b22      	cmp	r3, #34	; 0x22
 800d8be:	f040 80b9 	bne.w	800da34 <UART_RxISR_8BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800d8c2:	687b      	ldr	r3, [r7, #4]
 800d8c4:	681b      	ldr	r3, [r3, #0]
 800d8c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800d8c8:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 800d8cc:	f8b7 306c 	ldrh.w	r3, [r7, #108]	; 0x6c
 800d8d0:	b2d9      	uxtb	r1, r3
 800d8d2:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800d8d6:	b2da      	uxtb	r2, r3
 800d8d8:	687b      	ldr	r3, [r7, #4]
 800d8da:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8dc:	400a      	ands	r2, r1
 800d8de:	b2d2      	uxtb	r2, r2
 800d8e0:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 800d8e2:	687b      	ldr	r3, [r7, #4]
 800d8e4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800d8e6:	1c5a      	adds	r2, r3, #1
 800d8e8:	687b      	ldr	r3, [r7, #4]
 800d8ea:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800d8ec:	687b      	ldr	r3, [r7, #4]
 800d8ee:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d8f2:	b29b      	uxth	r3, r3
 800d8f4:	3b01      	subs	r3, #1
 800d8f6:	b29a      	uxth	r2, r3
 800d8f8:	687b      	ldr	r3, [r7, #4]
 800d8fa:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800d8fe:	687b      	ldr	r3, [r7, #4]
 800d900:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800d904:	b29b      	uxth	r3, r3
 800d906:	2b00      	cmp	r3, #0
 800d908:	f040 809c 	bne.w	800da44 <UART_RxISR_8BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800d90c:	687b      	ldr	r3, [r7, #4]
 800d90e:	681b      	ldr	r3, [r3, #0]
 800d910:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d912:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800d914:	e853 3f00 	ldrex	r3, [r3]
 800d918:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800d91a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800d91c:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800d920:	66bb      	str	r3, [r7, #104]	; 0x68
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	461a      	mov	r2, r3
 800d928:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800d92a:	65bb      	str	r3, [r7, #88]	; 0x58
 800d92c:	657a      	str	r2, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d92e:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800d930:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800d932:	e841 2300 	strex	r3, r2, [r1]
 800d936:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800d938:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d1e6      	bne.n	800d90c <UART_RxISR_8BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	681b      	ldr	r3, [r3, #0]
 800d942:	3308      	adds	r3, #8
 800d944:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d946:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800d948:	e853 3f00 	ldrex	r3, [r3]
 800d94c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800d94e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800d950:	f023 0301 	bic.w	r3, r3, #1
 800d954:	667b      	str	r3, [r7, #100]	; 0x64
 800d956:	687b      	ldr	r3, [r7, #4]
 800d958:	681b      	ldr	r3, [r3, #0]
 800d95a:	3308      	adds	r3, #8
 800d95c:	6e7a      	ldr	r2, [r7, #100]	; 0x64
 800d95e:	647a      	str	r2, [r7, #68]	; 0x44
 800d960:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d962:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800d964:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800d966:	e841 2300 	strex	r3, r2, [r1]
 800d96a:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800d96c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800d96e:	2b00      	cmp	r3, #0
 800d970:	d1e5      	bne.n	800d93e <UART_RxISR_8BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800d972:	687b      	ldr	r3, [r7, #4]
 800d974:	2220      	movs	r2, #32
 800d976:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800d97a:	687b      	ldr	r3, [r7, #4]
 800d97c:	2200      	movs	r2, #0
 800d97e:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800d980:	687b      	ldr	r3, [r7, #4]
 800d982:	2200      	movs	r2, #0
 800d984:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800d986:	687b      	ldr	r3, [r7, #4]
 800d988:	681b      	ldr	r3, [r3, #0]
 800d98a:	685b      	ldr	r3, [r3, #4]
 800d98c:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800d990:	2b00      	cmp	r3, #0
 800d992:	d018      	beq.n	800d9c6 <UART_RxISR_8BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800d994:	687b      	ldr	r3, [r7, #4]
 800d996:	681b      	ldr	r3, [r3, #0]
 800d998:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d99a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800d99c:	e853 3f00 	ldrex	r3, [r3]
 800d9a0:	623b      	str	r3, [r7, #32]
   return(result);
 800d9a2:	6a3b      	ldr	r3, [r7, #32]
 800d9a4:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800d9a8:	663b      	str	r3, [r7, #96]	; 0x60
 800d9aa:	687b      	ldr	r3, [r7, #4]
 800d9ac:	681b      	ldr	r3, [r3, #0]
 800d9ae:	461a      	mov	r2, r3
 800d9b0:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800d9b2:	633b      	str	r3, [r7, #48]	; 0x30
 800d9b4:	62fa      	str	r2, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9b6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800d9b8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800d9ba:	e841 2300 	strex	r3, r2, [r1]
 800d9be:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800d9c0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800d9c2:	2b00      	cmp	r3, #0
 800d9c4:	d1e6      	bne.n	800d994 <UART_RxISR_8BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800d9c6:	687b      	ldr	r3, [r7, #4]
 800d9c8:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800d9ca:	2b01      	cmp	r3, #1
 800d9cc:	d12e      	bne.n	800da2c <UART_RxISR_8BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800d9ce:	687b      	ldr	r3, [r7, #4]
 800d9d0:	2200      	movs	r2, #0
 800d9d2:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800d9d4:	687b      	ldr	r3, [r7, #4]
 800d9d6:	681b      	ldr	r3, [r3, #0]
 800d9d8:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800d9da:	693b      	ldr	r3, [r7, #16]
 800d9dc:	e853 3f00 	ldrex	r3, [r3]
 800d9e0:	60fb      	str	r3, [r7, #12]
   return(result);
 800d9e2:	68fb      	ldr	r3, [r7, #12]
 800d9e4:	f023 0310 	bic.w	r3, r3, #16
 800d9e8:	65fb      	str	r3, [r7, #92]	; 0x5c
 800d9ea:	687b      	ldr	r3, [r7, #4]
 800d9ec:	681b      	ldr	r3, [r3, #0]
 800d9ee:	461a      	mov	r2, r3
 800d9f0:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800d9f2:	61fb      	str	r3, [r7, #28]
 800d9f4:	61ba      	str	r2, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800d9f6:	69b9      	ldr	r1, [r7, #24]
 800d9f8:	69fa      	ldr	r2, [r7, #28]
 800d9fa:	e841 2300 	strex	r3, r2, [r1]
 800d9fe:	617b      	str	r3, [r7, #20]
   return(result);
 800da00:	697b      	ldr	r3, [r7, #20]
 800da02:	2b00      	cmp	r3, #0
 800da04:	d1e6      	bne.n	800d9d4 <UART_RxISR_8BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800da06:	687b      	ldr	r3, [r7, #4]
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	69db      	ldr	r3, [r3, #28]
 800da0c:	f003 0310 	and.w	r3, r3, #16
 800da10:	2b10      	cmp	r3, #16
 800da12:	d103      	bne.n	800da1c <UART_RxISR_8BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800da14:	687b      	ldr	r3, [r7, #4]
 800da16:	681b      	ldr	r3, [r3, #0]
 800da18:	2210      	movs	r2, #16
 800da1a:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800da1c:	687b      	ldr	r3, [r7, #4]
 800da1e:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800da22:	4619      	mov	r1, r3
 800da24:	6878      	ldr	r0, [r7, #4]
 800da26:	f7fe febd 	bl	800c7a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800da2a:	e00b      	b.n	800da44 <UART_RxISR_8BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800da2c:	6878      	ldr	r0, [r7, #4]
 800da2e:	f00f f8b5 	bl	801cb9c <HAL_UART_RxCpltCallback>
}
 800da32:	e007      	b.n	800da44 <UART_RxISR_8BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800da34:	687b      	ldr	r3, [r7, #4]
 800da36:	681b      	ldr	r3, [r3, #0]
 800da38:	699a      	ldr	r2, [r3, #24]
 800da3a:	687b      	ldr	r3, [r7, #4]
 800da3c:	681b      	ldr	r3, [r3, #0]
 800da3e:	f042 0208 	orr.w	r2, r2, #8
 800da42:	619a      	str	r2, [r3, #24]
}
 800da44:	bf00      	nop
 800da46:	3770      	adds	r7, #112	; 0x70
 800da48:	46bd      	mov	sp, r7
 800da4a:	bd80      	pop	{r7, pc}

0800da4c <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 800da4c:	b580      	push	{r7, lr}
 800da4e:	b09c      	sub	sp, #112	; 0x70
 800da50:	af00      	add	r7, sp, #0
 800da52:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 800da54:	687b      	ldr	r3, [r7, #4]
 800da56:	f8b3 305c 	ldrh.w	r3, [r3, #92]	; 0x5c
 800da5a:	f8a7 306e 	strh.w	r3, [r7, #110]	; 0x6e
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800da5e:	687b      	ldr	r3, [r7, #4]
 800da60:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800da64:	2b22      	cmp	r3, #34	; 0x22
 800da66:	f040 80b9 	bne.w	800dbdc <UART_RxISR_16BIT+0x190>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 800da6a:	687b      	ldr	r3, [r7, #4]
 800da6c:	681b      	ldr	r3, [r3, #0]
 800da6e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800da70:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 800da74:	687b      	ldr	r3, [r7, #4]
 800da76:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da78:	66bb      	str	r3, [r7, #104]	; 0x68
    *tmp = (uint16_t)(uhdata & uhMask);
 800da7a:	f8b7 206c 	ldrh.w	r2, [r7, #108]	; 0x6c
 800da7e:	f8b7 306e 	ldrh.w	r3, [r7, #110]	; 0x6e
 800da82:	4013      	ands	r3, r2
 800da84:	b29a      	uxth	r2, r3
 800da86:	6ebb      	ldr	r3, [r7, #104]	; 0x68
 800da88:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 800da8a:	687b      	ldr	r3, [r7, #4]
 800da8c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800da8e:	1c9a      	adds	r2, r3, #2
 800da90:	687b      	ldr	r3, [r7, #4]
 800da92:	655a      	str	r2, [r3, #84]	; 0x54
    huart->RxXferCount--;
 800da94:	687b      	ldr	r3, [r7, #4]
 800da96:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800da9a:	b29b      	uxth	r3, r3
 800da9c:	3b01      	subs	r3, #1
 800da9e:	b29a      	uxth	r2, r3
 800daa0:	687b      	ldr	r3, [r7, #4]
 800daa2:	f8a3 205a 	strh.w	r2, [r3, #90]	; 0x5a

    if (huart->RxXferCount == 0U)
 800daa6:	687b      	ldr	r3, [r7, #4]
 800daa8:	f8b3 305a 	ldrh.w	r3, [r3, #90]	; 0x5a
 800daac:	b29b      	uxth	r3, r3
 800daae:	2b00      	cmp	r3, #0
 800dab0:	f040 809c 	bne.w	800dbec <UART_RxISR_16BIT+0x1a0>
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800dab4:	687b      	ldr	r3, [r7, #4]
 800dab6:	681b      	ldr	r3, [r3, #0]
 800dab8:	64bb      	str	r3, [r7, #72]	; 0x48
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daba:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800dabc:	e853 3f00 	ldrex	r3, [r3]
 800dac0:	647b      	str	r3, [r7, #68]	; 0x44
   return(result);
 800dac2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800dac4:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800dac8:	667b      	str	r3, [r7, #100]	; 0x64
 800daca:	687b      	ldr	r3, [r7, #4]
 800dacc:	681b      	ldr	r3, [r3, #0]
 800dace:	461a      	mov	r2, r3
 800dad0:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800dad2:	657b      	str	r3, [r7, #84]	; 0x54
 800dad4:	653a      	str	r2, [r7, #80]	; 0x50
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800dad6:	6d39      	ldr	r1, [r7, #80]	; 0x50
 800dad8:	6d7a      	ldr	r2, [r7, #84]	; 0x54
 800dada:	e841 2300 	strex	r3, r2, [r1]
 800dade:	64fb      	str	r3, [r7, #76]	; 0x4c
   return(result);
 800dae0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800dae2:	2b00      	cmp	r3, #0
 800dae4:	d1e6      	bne.n	800dab4 <UART_RxISR_16BIT+0x68>

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800dae6:	687b      	ldr	r3, [r7, #4]
 800dae8:	681b      	ldr	r3, [r3, #0]
 800daea:	3308      	adds	r3, #8
 800daec:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800daee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800daf0:	e853 3f00 	ldrex	r3, [r3]
 800daf4:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800daf6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800daf8:	f023 0301 	bic.w	r3, r3, #1
 800dafc:	663b      	str	r3, [r7, #96]	; 0x60
 800dafe:	687b      	ldr	r3, [r7, #4]
 800db00:	681b      	ldr	r3, [r3, #0]
 800db02:	3308      	adds	r3, #8
 800db04:	6e3a      	ldr	r2, [r7, #96]	; 0x60
 800db06:	643a      	str	r2, [r7, #64]	; 0x40
 800db08:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db0a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800db0c:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800db0e:	e841 2300 	strex	r3, r2, [r1]
 800db12:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800db14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800db16:	2b00      	cmp	r3, #0
 800db18:	d1e5      	bne.n	800dae6 <UART_RxISR_16BIT+0x9a>

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800db1a:	687b      	ldr	r3, [r7, #4]
 800db1c:	2220      	movs	r2, #32
 800db1e:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 800db22:	687b      	ldr	r3, [r7, #4]
 800db24:	2200      	movs	r2, #0
 800db26:	669a      	str	r2, [r3, #104]	; 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 800db28:	687b      	ldr	r3, [r7, #4]
 800db2a:	2200      	movs	r2, #0
 800db2c:	665a      	str	r2, [r3, #100]	; 0x64

      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 800db2e:	687b      	ldr	r3, [r7, #4]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	685b      	ldr	r3, [r3, #4]
 800db34:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 800db38:	2b00      	cmp	r3, #0
 800db3a:	d018      	beq.n	800db6e <UART_RxISR_16BIT+0x122>
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 800db3c:	687b      	ldr	r3, [r7, #4]
 800db3e:	681b      	ldr	r3, [r3, #0]
 800db40:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db42:	6a3b      	ldr	r3, [r7, #32]
 800db44:	e853 3f00 	ldrex	r3, [r3]
 800db48:	61fb      	str	r3, [r7, #28]
   return(result);
 800db4a:	69fb      	ldr	r3, [r7, #28]
 800db4c:	f023 6380 	bic.w	r3, r3, #67108864	; 0x4000000
 800db50:	65fb      	str	r3, [r7, #92]	; 0x5c
 800db52:	687b      	ldr	r3, [r7, #4]
 800db54:	681b      	ldr	r3, [r3, #0]
 800db56:	461a      	mov	r2, r3
 800db58:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800db5a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800db5c:	62ba      	str	r2, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db5e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800db60:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800db62:	e841 2300 	strex	r3, r2, [r1]
 800db66:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800db68:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800db6a:	2b00      	cmp	r3, #0
 800db6c:	d1e6      	bne.n	800db3c <UART_RxISR_16BIT+0xf0>
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800db6e:	687b      	ldr	r3, [r7, #4]
 800db70:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 800db72:	2b01      	cmp	r3, #1
 800db74:	d12e      	bne.n	800dbd4 <UART_RxISR_16BIT+0x188>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800db76:	687b      	ldr	r3, [r7, #4]
 800db78:	2200      	movs	r2, #0
 800db7a:	661a      	str	r2, [r3, #96]	; 0x60

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800db7c:	687b      	ldr	r3, [r7, #4]
 800db7e:	681b      	ldr	r3, [r3, #0]
 800db80:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800db82:	68fb      	ldr	r3, [r7, #12]
 800db84:	e853 3f00 	ldrex	r3, [r3]
 800db88:	60bb      	str	r3, [r7, #8]
   return(result);
 800db8a:	68bb      	ldr	r3, [r7, #8]
 800db8c:	f023 0310 	bic.w	r3, r3, #16
 800db90:	65bb      	str	r3, [r7, #88]	; 0x58
 800db92:	687b      	ldr	r3, [r7, #4]
 800db94:	681b      	ldr	r3, [r3, #0]
 800db96:	461a      	mov	r2, r3
 800db98:	6dbb      	ldr	r3, [r7, #88]	; 0x58
 800db9a:	61bb      	str	r3, [r7, #24]
 800db9c:	617a      	str	r2, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800db9e:	6979      	ldr	r1, [r7, #20]
 800dba0:	69ba      	ldr	r2, [r7, #24]
 800dba2:	e841 2300 	strex	r3, r2, [r1]
 800dba6:	613b      	str	r3, [r7, #16]
   return(result);
 800dba8:	693b      	ldr	r3, [r7, #16]
 800dbaa:	2b00      	cmp	r3, #0
 800dbac:	d1e6      	bne.n	800db7c <UART_RxISR_16BIT+0x130>

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 800dbae:	687b      	ldr	r3, [r7, #4]
 800dbb0:	681b      	ldr	r3, [r3, #0]
 800dbb2:	69db      	ldr	r3, [r3, #28]
 800dbb4:	f003 0310 	and.w	r3, r3, #16
 800dbb8:	2b10      	cmp	r3, #16
 800dbba:	d103      	bne.n	800dbc4 <UART_RxISR_16BIT+0x178>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 800dbbc:	687b      	ldr	r3, [r7, #4]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	2210      	movs	r2, #16
 800dbc2:	621a      	str	r2, [r3, #32]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800dbc4:	687b      	ldr	r3, [r7, #4]
 800dbc6:	f8b3 3058 	ldrh.w	r3, [r3, #88]	; 0x58
 800dbca:	4619      	mov	r1, r3
 800dbcc:	6878      	ldr	r0, [r7, #4]
 800dbce:	f7fe fde9 	bl	800c7a4 <HAL_UARTEx_RxEventCallback>
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 800dbd2:	e00b      	b.n	800dbec <UART_RxISR_16BIT+0x1a0>
        HAL_UART_RxCpltCallback(huart);
 800dbd4:	6878      	ldr	r0, [r7, #4]
 800dbd6:	f00e ffe1 	bl	801cb9c <HAL_UART_RxCpltCallback>
}
 800dbda:	e007      	b.n	800dbec <UART_RxISR_16BIT+0x1a0>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 800dbdc:	687b      	ldr	r3, [r7, #4]
 800dbde:	681b      	ldr	r3, [r3, #0]
 800dbe0:	699a      	ldr	r2, [r3, #24]
 800dbe2:	687b      	ldr	r3, [r7, #4]
 800dbe4:	681b      	ldr	r3, [r3, #0]
 800dbe6:	f042 0208 	orr.w	r2, r2, #8
 800dbea:	619a      	str	r2, [r3, #24]
}
 800dbec:	bf00      	nop
 800dbee:	3770      	adds	r7, #112	; 0x70
 800dbf0:	46bd      	mov	sp, r7
 800dbf2:	bd80      	pop	{r7, pc}

0800dbf4 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 800dbf4:	b5b0      	push	{r4, r5, r7, lr}
 800dbf6:	b08c      	sub	sp, #48	; 0x30
 800dbf8:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 800dbfa:	4b8f      	ldr	r3, [pc, #572]	; (800de38 <MX_LWIP_Init+0x244>)
 800dbfc:	22c0      	movs	r2, #192	; 0xc0
 800dbfe:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 800dc00:	4b8d      	ldr	r3, [pc, #564]	; (800de38 <MX_LWIP_Init+0x244>)
 800dc02:	22a8      	movs	r2, #168	; 0xa8
 800dc04:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 8;
 800dc06:	4b8c      	ldr	r3, [pc, #560]	; (800de38 <MX_LWIP_Init+0x244>)
 800dc08:	2208      	movs	r2, #8
 800dc0a:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 2;
 800dc0c:	4b8a      	ldr	r3, [pc, #552]	; (800de38 <MX_LWIP_Init+0x244>)
 800dc0e:	2202      	movs	r2, #2
 800dc10:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 800dc12:	4b8a      	ldr	r3, [pc, #552]	; (800de3c <MX_LWIP_Init+0x248>)
 800dc14:	22ff      	movs	r2, #255	; 0xff
 800dc16:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 800dc18:	4b88      	ldr	r3, [pc, #544]	; (800de3c <MX_LWIP_Init+0x248>)
 800dc1a:	22ff      	movs	r2, #255	; 0xff
 800dc1c:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 800dc1e:	4b87      	ldr	r3, [pc, #540]	; (800de3c <MX_LWIP_Init+0x248>)
 800dc20:	22ff      	movs	r2, #255	; 0xff
 800dc22:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 800dc24:	4b85      	ldr	r3, [pc, #532]	; (800de3c <MX_LWIP_Init+0x248>)
 800dc26:	2200      	movs	r2, #0
 800dc28:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 800dc2a:	4b85      	ldr	r3, [pc, #532]	; (800de40 <MX_LWIP_Init+0x24c>)
 800dc2c:	22c0      	movs	r2, #192	; 0xc0
 800dc2e:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 800dc30:	4b83      	ldr	r3, [pc, #524]	; (800de40 <MX_LWIP_Init+0x24c>)
 800dc32:	22a8      	movs	r2, #168	; 0xa8
 800dc34:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 8;
 800dc36:	4b82      	ldr	r3, [pc, #520]	; (800de40 <MX_LWIP_Init+0x24c>)
 800dc38:	2208      	movs	r2, #8
 800dc3a:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 800dc3c:	4b80      	ldr	r3, [pc, #512]	; (800de40 <MX_LWIP_Init+0x24c>)
 800dc3e:	2201      	movs	r2, #1
 800dc40:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 800dc42:	2100      	movs	r1, #0
 800dc44:	2000      	movs	r0, #0
 800dc46:	f003 fff3 	bl	8011c30 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 800dc4a:	4b7b      	ldr	r3, [pc, #492]	; (800de38 <MX_LWIP_Init+0x244>)
 800dc4c:	781b      	ldrb	r3, [r3, #0]
 800dc4e:	061a      	lsls	r2, r3, #24
 800dc50:	4b79      	ldr	r3, [pc, #484]	; (800de38 <MX_LWIP_Init+0x244>)
 800dc52:	785b      	ldrb	r3, [r3, #1]
 800dc54:	041b      	lsls	r3, r3, #16
 800dc56:	431a      	orrs	r2, r3
 800dc58:	4b77      	ldr	r3, [pc, #476]	; (800de38 <MX_LWIP_Init+0x244>)
 800dc5a:	789b      	ldrb	r3, [r3, #2]
 800dc5c:	021b      	lsls	r3, r3, #8
 800dc5e:	4313      	orrs	r3, r2
 800dc60:	4a75      	ldr	r2, [pc, #468]	; (800de38 <MX_LWIP_Init+0x244>)
 800dc62:	78d2      	ldrb	r2, [r2, #3]
 800dc64:	4313      	orrs	r3, r2
 800dc66:	061a      	lsls	r2, r3, #24
 800dc68:	4b73      	ldr	r3, [pc, #460]	; (800de38 <MX_LWIP_Init+0x244>)
 800dc6a:	781b      	ldrb	r3, [r3, #0]
 800dc6c:	0619      	lsls	r1, r3, #24
 800dc6e:	4b72      	ldr	r3, [pc, #456]	; (800de38 <MX_LWIP_Init+0x244>)
 800dc70:	785b      	ldrb	r3, [r3, #1]
 800dc72:	041b      	lsls	r3, r3, #16
 800dc74:	4319      	orrs	r1, r3
 800dc76:	4b70      	ldr	r3, [pc, #448]	; (800de38 <MX_LWIP_Init+0x244>)
 800dc78:	789b      	ldrb	r3, [r3, #2]
 800dc7a:	021b      	lsls	r3, r3, #8
 800dc7c:	430b      	orrs	r3, r1
 800dc7e:	496e      	ldr	r1, [pc, #440]	; (800de38 <MX_LWIP_Init+0x244>)
 800dc80:	78c9      	ldrb	r1, [r1, #3]
 800dc82:	430b      	orrs	r3, r1
 800dc84:	021b      	lsls	r3, r3, #8
 800dc86:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dc8a:	431a      	orrs	r2, r3
 800dc8c:	4b6a      	ldr	r3, [pc, #424]	; (800de38 <MX_LWIP_Init+0x244>)
 800dc8e:	781b      	ldrb	r3, [r3, #0]
 800dc90:	0619      	lsls	r1, r3, #24
 800dc92:	4b69      	ldr	r3, [pc, #420]	; (800de38 <MX_LWIP_Init+0x244>)
 800dc94:	785b      	ldrb	r3, [r3, #1]
 800dc96:	041b      	lsls	r3, r3, #16
 800dc98:	4319      	orrs	r1, r3
 800dc9a:	4b67      	ldr	r3, [pc, #412]	; (800de38 <MX_LWIP_Init+0x244>)
 800dc9c:	789b      	ldrb	r3, [r3, #2]
 800dc9e:	021b      	lsls	r3, r3, #8
 800dca0:	430b      	orrs	r3, r1
 800dca2:	4965      	ldr	r1, [pc, #404]	; (800de38 <MX_LWIP_Init+0x244>)
 800dca4:	78c9      	ldrb	r1, [r1, #3]
 800dca6:	430b      	orrs	r3, r1
 800dca8:	0a1b      	lsrs	r3, r3, #8
 800dcaa:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800dcae:	431a      	orrs	r2, r3
 800dcb0:	4b61      	ldr	r3, [pc, #388]	; (800de38 <MX_LWIP_Init+0x244>)
 800dcb2:	781b      	ldrb	r3, [r3, #0]
 800dcb4:	0619      	lsls	r1, r3, #24
 800dcb6:	4b60      	ldr	r3, [pc, #384]	; (800de38 <MX_LWIP_Init+0x244>)
 800dcb8:	785b      	ldrb	r3, [r3, #1]
 800dcba:	041b      	lsls	r3, r3, #16
 800dcbc:	4319      	orrs	r1, r3
 800dcbe:	4b5e      	ldr	r3, [pc, #376]	; (800de38 <MX_LWIP_Init+0x244>)
 800dcc0:	789b      	ldrb	r3, [r3, #2]
 800dcc2:	021b      	lsls	r3, r3, #8
 800dcc4:	430b      	orrs	r3, r1
 800dcc6:	495c      	ldr	r1, [pc, #368]	; (800de38 <MX_LWIP_Init+0x244>)
 800dcc8:	78c9      	ldrb	r1, [r1, #3]
 800dcca:	430b      	orrs	r3, r1
 800dccc:	0e1b      	lsrs	r3, r3, #24
 800dcce:	4313      	orrs	r3, r2
 800dcd0:	4a5c      	ldr	r2, [pc, #368]	; (800de44 <MX_LWIP_Init+0x250>)
 800dcd2:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 800dcd4:	4b59      	ldr	r3, [pc, #356]	; (800de3c <MX_LWIP_Init+0x248>)
 800dcd6:	781b      	ldrb	r3, [r3, #0]
 800dcd8:	061a      	lsls	r2, r3, #24
 800dcda:	4b58      	ldr	r3, [pc, #352]	; (800de3c <MX_LWIP_Init+0x248>)
 800dcdc:	785b      	ldrb	r3, [r3, #1]
 800dcde:	041b      	lsls	r3, r3, #16
 800dce0:	431a      	orrs	r2, r3
 800dce2:	4b56      	ldr	r3, [pc, #344]	; (800de3c <MX_LWIP_Init+0x248>)
 800dce4:	789b      	ldrb	r3, [r3, #2]
 800dce6:	021b      	lsls	r3, r3, #8
 800dce8:	4313      	orrs	r3, r2
 800dcea:	4a54      	ldr	r2, [pc, #336]	; (800de3c <MX_LWIP_Init+0x248>)
 800dcec:	78d2      	ldrb	r2, [r2, #3]
 800dcee:	4313      	orrs	r3, r2
 800dcf0:	061a      	lsls	r2, r3, #24
 800dcf2:	4b52      	ldr	r3, [pc, #328]	; (800de3c <MX_LWIP_Init+0x248>)
 800dcf4:	781b      	ldrb	r3, [r3, #0]
 800dcf6:	0619      	lsls	r1, r3, #24
 800dcf8:	4b50      	ldr	r3, [pc, #320]	; (800de3c <MX_LWIP_Init+0x248>)
 800dcfa:	785b      	ldrb	r3, [r3, #1]
 800dcfc:	041b      	lsls	r3, r3, #16
 800dcfe:	4319      	orrs	r1, r3
 800dd00:	4b4e      	ldr	r3, [pc, #312]	; (800de3c <MX_LWIP_Init+0x248>)
 800dd02:	789b      	ldrb	r3, [r3, #2]
 800dd04:	021b      	lsls	r3, r3, #8
 800dd06:	430b      	orrs	r3, r1
 800dd08:	494c      	ldr	r1, [pc, #304]	; (800de3c <MX_LWIP_Init+0x248>)
 800dd0a:	78c9      	ldrb	r1, [r1, #3]
 800dd0c:	430b      	orrs	r3, r1
 800dd0e:	021b      	lsls	r3, r3, #8
 800dd10:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dd14:	431a      	orrs	r2, r3
 800dd16:	4b49      	ldr	r3, [pc, #292]	; (800de3c <MX_LWIP_Init+0x248>)
 800dd18:	781b      	ldrb	r3, [r3, #0]
 800dd1a:	0619      	lsls	r1, r3, #24
 800dd1c:	4b47      	ldr	r3, [pc, #284]	; (800de3c <MX_LWIP_Init+0x248>)
 800dd1e:	785b      	ldrb	r3, [r3, #1]
 800dd20:	041b      	lsls	r3, r3, #16
 800dd22:	4319      	orrs	r1, r3
 800dd24:	4b45      	ldr	r3, [pc, #276]	; (800de3c <MX_LWIP_Init+0x248>)
 800dd26:	789b      	ldrb	r3, [r3, #2]
 800dd28:	021b      	lsls	r3, r3, #8
 800dd2a:	430b      	orrs	r3, r1
 800dd2c:	4943      	ldr	r1, [pc, #268]	; (800de3c <MX_LWIP_Init+0x248>)
 800dd2e:	78c9      	ldrb	r1, [r1, #3]
 800dd30:	430b      	orrs	r3, r1
 800dd32:	0a1b      	lsrs	r3, r3, #8
 800dd34:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800dd38:	431a      	orrs	r2, r3
 800dd3a:	4b40      	ldr	r3, [pc, #256]	; (800de3c <MX_LWIP_Init+0x248>)
 800dd3c:	781b      	ldrb	r3, [r3, #0]
 800dd3e:	0619      	lsls	r1, r3, #24
 800dd40:	4b3e      	ldr	r3, [pc, #248]	; (800de3c <MX_LWIP_Init+0x248>)
 800dd42:	785b      	ldrb	r3, [r3, #1]
 800dd44:	041b      	lsls	r3, r3, #16
 800dd46:	4319      	orrs	r1, r3
 800dd48:	4b3c      	ldr	r3, [pc, #240]	; (800de3c <MX_LWIP_Init+0x248>)
 800dd4a:	789b      	ldrb	r3, [r3, #2]
 800dd4c:	021b      	lsls	r3, r3, #8
 800dd4e:	430b      	orrs	r3, r1
 800dd50:	493a      	ldr	r1, [pc, #232]	; (800de3c <MX_LWIP_Init+0x248>)
 800dd52:	78c9      	ldrb	r1, [r1, #3]
 800dd54:	430b      	orrs	r3, r1
 800dd56:	0e1b      	lsrs	r3, r3, #24
 800dd58:	4313      	orrs	r3, r2
 800dd5a:	4a3b      	ldr	r2, [pc, #236]	; (800de48 <MX_LWIP_Init+0x254>)
 800dd5c:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 800dd5e:	4b38      	ldr	r3, [pc, #224]	; (800de40 <MX_LWIP_Init+0x24c>)
 800dd60:	781b      	ldrb	r3, [r3, #0]
 800dd62:	061a      	lsls	r2, r3, #24
 800dd64:	4b36      	ldr	r3, [pc, #216]	; (800de40 <MX_LWIP_Init+0x24c>)
 800dd66:	785b      	ldrb	r3, [r3, #1]
 800dd68:	041b      	lsls	r3, r3, #16
 800dd6a:	431a      	orrs	r2, r3
 800dd6c:	4b34      	ldr	r3, [pc, #208]	; (800de40 <MX_LWIP_Init+0x24c>)
 800dd6e:	789b      	ldrb	r3, [r3, #2]
 800dd70:	021b      	lsls	r3, r3, #8
 800dd72:	4313      	orrs	r3, r2
 800dd74:	4a32      	ldr	r2, [pc, #200]	; (800de40 <MX_LWIP_Init+0x24c>)
 800dd76:	78d2      	ldrb	r2, [r2, #3]
 800dd78:	4313      	orrs	r3, r2
 800dd7a:	061a      	lsls	r2, r3, #24
 800dd7c:	4b30      	ldr	r3, [pc, #192]	; (800de40 <MX_LWIP_Init+0x24c>)
 800dd7e:	781b      	ldrb	r3, [r3, #0]
 800dd80:	0619      	lsls	r1, r3, #24
 800dd82:	4b2f      	ldr	r3, [pc, #188]	; (800de40 <MX_LWIP_Init+0x24c>)
 800dd84:	785b      	ldrb	r3, [r3, #1]
 800dd86:	041b      	lsls	r3, r3, #16
 800dd88:	4319      	orrs	r1, r3
 800dd8a:	4b2d      	ldr	r3, [pc, #180]	; (800de40 <MX_LWIP_Init+0x24c>)
 800dd8c:	789b      	ldrb	r3, [r3, #2]
 800dd8e:	021b      	lsls	r3, r3, #8
 800dd90:	430b      	orrs	r3, r1
 800dd92:	492b      	ldr	r1, [pc, #172]	; (800de40 <MX_LWIP_Init+0x24c>)
 800dd94:	78c9      	ldrb	r1, [r1, #3]
 800dd96:	430b      	orrs	r3, r1
 800dd98:	021b      	lsls	r3, r3, #8
 800dd9a:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800dd9e:	431a      	orrs	r2, r3
 800dda0:	4b27      	ldr	r3, [pc, #156]	; (800de40 <MX_LWIP_Init+0x24c>)
 800dda2:	781b      	ldrb	r3, [r3, #0]
 800dda4:	0619      	lsls	r1, r3, #24
 800dda6:	4b26      	ldr	r3, [pc, #152]	; (800de40 <MX_LWIP_Init+0x24c>)
 800dda8:	785b      	ldrb	r3, [r3, #1]
 800ddaa:	041b      	lsls	r3, r3, #16
 800ddac:	4319      	orrs	r1, r3
 800ddae:	4b24      	ldr	r3, [pc, #144]	; (800de40 <MX_LWIP_Init+0x24c>)
 800ddb0:	789b      	ldrb	r3, [r3, #2]
 800ddb2:	021b      	lsls	r3, r3, #8
 800ddb4:	430b      	orrs	r3, r1
 800ddb6:	4922      	ldr	r1, [pc, #136]	; (800de40 <MX_LWIP_Init+0x24c>)
 800ddb8:	78c9      	ldrb	r1, [r1, #3]
 800ddba:	430b      	orrs	r3, r1
 800ddbc:	0a1b      	lsrs	r3, r3, #8
 800ddbe:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800ddc2:	431a      	orrs	r2, r3
 800ddc4:	4b1e      	ldr	r3, [pc, #120]	; (800de40 <MX_LWIP_Init+0x24c>)
 800ddc6:	781b      	ldrb	r3, [r3, #0]
 800ddc8:	0619      	lsls	r1, r3, #24
 800ddca:	4b1d      	ldr	r3, [pc, #116]	; (800de40 <MX_LWIP_Init+0x24c>)
 800ddcc:	785b      	ldrb	r3, [r3, #1]
 800ddce:	041b      	lsls	r3, r3, #16
 800ddd0:	4319      	orrs	r1, r3
 800ddd2:	4b1b      	ldr	r3, [pc, #108]	; (800de40 <MX_LWIP_Init+0x24c>)
 800ddd4:	789b      	ldrb	r3, [r3, #2]
 800ddd6:	021b      	lsls	r3, r3, #8
 800ddd8:	430b      	orrs	r3, r1
 800ddda:	4919      	ldr	r1, [pc, #100]	; (800de40 <MX_LWIP_Init+0x24c>)
 800dddc:	78c9      	ldrb	r1, [r1, #3]
 800ddde:	430b      	orrs	r3, r1
 800dde0:	0e1b      	lsrs	r3, r3, #24
 800dde2:	4313      	orrs	r3, r2
 800dde4:	4a19      	ldr	r2, [pc, #100]	; (800de4c <MX_LWIP_Init+0x258>)
 800dde6:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 800dde8:	4b19      	ldr	r3, [pc, #100]	; (800de50 <MX_LWIP_Init+0x25c>)
 800ddea:	9302      	str	r3, [sp, #8]
 800ddec:	4b19      	ldr	r3, [pc, #100]	; (800de54 <MX_LWIP_Init+0x260>)
 800ddee:	9301      	str	r3, [sp, #4]
 800ddf0:	2300      	movs	r3, #0
 800ddf2:	9300      	str	r3, [sp, #0]
 800ddf4:	4b15      	ldr	r3, [pc, #84]	; (800de4c <MX_LWIP_Init+0x258>)
 800ddf6:	4a14      	ldr	r2, [pc, #80]	; (800de48 <MX_LWIP_Init+0x254>)
 800ddf8:	4912      	ldr	r1, [pc, #72]	; (800de44 <MX_LWIP_Init+0x250>)
 800ddfa:	4817      	ldr	r0, [pc, #92]	; (800de58 <MX_LWIP_Init+0x264>)
 800ddfc:	f004 fcf2 	bl	80127e4 <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 800de00:	4815      	ldr	r0, [pc, #84]	; (800de58 <MX_LWIP_Init+0x264>)
 800de02:	f004 fea1 	bl	8012b48 <netif_set_default>

  /* We must always bring the network interface up connection or not... */
  netif_set_up(&gnetif);
 800de06:	4814      	ldr	r0, [pc, #80]	; (800de58 <MX_LWIP_Init+0x264>)
 800de08:	f004 feae 	bl	8012b68 <netif_set_up>

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 800de0c:	4913      	ldr	r1, [pc, #76]	; (800de5c <MX_LWIP_Init+0x268>)
 800de0e:	4812      	ldr	r0, [pc, #72]	; (800de58 <MX_LWIP_Init+0x264>)
 800de10:	f004 ffac 	bl	8012d6c <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthLink, ethernet_link_thread, osPriorityBelowNormal, 0, configMINIMAL_STACK_SIZE *2);
 800de14:	4b12      	ldr	r3, [pc, #72]	; (800de60 <MX_LWIP_Init+0x26c>)
 800de16:	1d3c      	adds	r4, r7, #4
 800de18:	461d      	mov	r5, r3
 800de1a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800de1c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800de1e:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800de22:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthLink), &gnetif);
 800de26:	1d3b      	adds	r3, r7, #4
 800de28:	490b      	ldr	r1, [pc, #44]	; (800de58 <MX_LWIP_Init+0x264>)
 800de2a:	4618      	mov	r0, r3
 800de2c:	f000 fdb7 	bl	800e99e <osThreadCreate>
/* USER CODE END H7_OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 800de30:	bf00      	nop
 800de32:	3720      	adds	r7, #32
 800de34:	46bd      	mov	sp, r7
 800de36:	bdb0      	pop	{r4, r5, r7, pc}
 800de38:	200014c4 	.word	0x200014c4
 800de3c:	200014c8 	.word	0x200014c8
 800de40:	200014cc 	.word	0x200014cc
 800de44:	200014b8 	.word	0x200014b8
 800de48:	200014bc 	.word	0x200014bc
 800de4c:	200014c0 	.word	0x200014c0
 800de50:	08011b6d 	.word	0x08011b6d
 800de54:	0800e3c5 	.word	0x0800e3c5
 800de58:	20001484 	.word	0x20001484
 800de5c:	0800de65 	.word	0x0800de65
 800de60:	0801e3c4 	.word	0x0801e3c4

0800de64 <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 800de64:	b480      	push	{r7}
 800de66:	b083      	sub	sp, #12
 800de68:	af00      	add	r7, sp, #0
 800de6a:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 800de6c:	bf00      	nop
 800de6e:	370c      	adds	r7, #12
 800de70:	46bd      	mov	sp, r7
 800de72:	f85d 7b04 	ldr.w	r7, [sp], #4
 800de76:	4770      	bx	lr

0800de78 <SCB_InvalidateDCache_by_Addr>:
  \details Invalidates D-Cache for the given address
  \param[in]   addr    address (aligned to 32-byte boundary)
  \param[in]   dsize   size of memory block (in number of bytes)
*/
__STATIC_INLINE void SCB_InvalidateDCache_by_Addr (uint32_t *addr, int32_t dsize)
{
 800de78:	b480      	push	{r7}
 800de7a:	b087      	sub	sp, #28
 800de7c:	af00      	add	r7, sp, #0
 800de7e:	6078      	str	r0, [r7, #4]
 800de80:	6039      	str	r1, [r7, #0]
  #if defined (__DCACHE_PRESENT) && (__DCACHE_PRESENT == 1U)
     int32_t op_size = dsize;
 800de82:	683b      	ldr	r3, [r7, #0]
 800de84:	617b      	str	r3, [r7, #20]
    uint32_t op_addr = (uint32_t)addr;
 800de86:	687b      	ldr	r3, [r7, #4]
 800de88:	613b      	str	r3, [r7, #16]
     int32_t linesize = 32;                /* in Cortex-M7 size of cache line is fixed to 8 words (32 bytes) */
 800de8a:	2320      	movs	r3, #32
 800de8c:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800de8e:	f3bf 8f4f 	dsb	sy
}
 800de92:	bf00      	nop

    __DSB();

    while (op_size > 0) {
 800de94:	e00b      	b.n	800deae <SCB_InvalidateDCache_by_Addr+0x36>
      SCB->DCIMVAC = op_addr;
 800de96:	4a0d      	ldr	r2, [pc, #52]	; (800decc <SCB_InvalidateDCache_by_Addr+0x54>)
 800de98:	693b      	ldr	r3, [r7, #16]
 800de9a:	f8c2 325c 	str.w	r3, [r2, #604]	; 0x25c
      op_addr += (uint32_t)linesize;
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	693a      	ldr	r2, [r7, #16]
 800dea2:	4413      	add	r3, r2
 800dea4:	613b      	str	r3, [r7, #16]
      op_size -=           linesize;
 800dea6:	697a      	ldr	r2, [r7, #20]
 800dea8:	68fb      	ldr	r3, [r7, #12]
 800deaa:	1ad3      	subs	r3, r2, r3
 800deac:	617b      	str	r3, [r7, #20]
    while (op_size > 0) {
 800deae:	697b      	ldr	r3, [r7, #20]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	dcf0      	bgt.n	800de96 <SCB_InvalidateDCache_by_Addr+0x1e>
  __ASM volatile ("dsb 0xF":::"memory");
 800deb4:	f3bf 8f4f 	dsb	sy
}
 800deb8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800deba:	f3bf 8f6f 	isb	sy
}
 800debe:	bf00      	nop
    }

    __DSB();
    __ISB();
  #endif
}
 800dec0:	bf00      	nop
 800dec2:	371c      	adds	r7, #28
 800dec4:	46bd      	mov	sp, r7
 800dec6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800deca:	4770      	bx	lr
 800decc:	e000ed00 	.word	0xe000ed00

0800ded0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800ded0:	b580      	push	{r7, lr}
 800ded2:	b082      	sub	sp, #8
 800ded4:	af00      	add	r7, sp, #0
 800ded6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 800ded8:	4b04      	ldr	r3, [pc, #16]	; (800deec <HAL_ETH_RxCpltCallback+0x1c>)
 800deda:	681b      	ldr	r3, [r3, #0]
 800dedc:	4618      	mov	r0, r3
 800dede:	f000 fee7 	bl	800ecb0 <osSemaphoreRelease>
}
 800dee2:	bf00      	nop
 800dee4:	3708      	adds	r7, #8
 800dee6:	46bd      	mov	sp, r7
 800dee8:	bd80      	pop	{r7, pc}
 800deea:	bf00      	nop
 800deec:	20005e5c 	.word	0x20005e5c

0800def0 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 800def0:	b580      	push	{r7, lr}
 800def2:	b082      	sub	sp, #8
 800def4:	af00      	add	r7, sp, #0
 800def6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 800def8:	4b04      	ldr	r3, [pc, #16]	; (800df0c <HAL_ETH_TxCpltCallback+0x1c>)
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	4618      	mov	r0, r3
 800defe:	f000 fed7 	bl	800ecb0 <osSemaphoreRelease>
}
 800df02:	bf00      	nop
 800df04:	3708      	adds	r7, #8
 800df06:	46bd      	mov	sp, r7
 800df08:	bd80      	pop	{r7, pc}
 800df0a:	bf00      	nop
 800df0c:	20005e60 	.word	0x20005e60

0800df10 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 800df10:	b580      	push	{r7, lr}
 800df12:	b082      	sub	sp, #8
 800df14:	af00      	add	r7, sp, #0
 800df16:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 800df18:	6878      	ldr	r0, [r7, #4]
 800df1a:	f7f7 f94d 	bl	80051b8 <HAL_ETH_GetDMAError>
 800df1e:	4603      	mov	r3, r0
 800df20:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800df24:	2b80      	cmp	r3, #128	; 0x80
 800df26:	d104      	bne.n	800df32 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 800df28:	4b04      	ldr	r3, [pc, #16]	; (800df3c <HAL_ETH_ErrorCallback+0x2c>)
 800df2a:	681b      	ldr	r3, [r3, #0]
 800df2c:	4618      	mov	r0, r3
 800df2e:	f000 febf 	bl	800ecb0 <osSemaphoreRelease>
  }
}
 800df32:	bf00      	nop
 800df34:	3708      	adds	r7, #8
 800df36:	46bd      	mov	sp, r7
 800df38:	bd80      	pop	{r7, pc}
 800df3a:	bf00      	nop
 800df3c:	20005e5c 	.word	0x20005e5c

0800df40 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 800df40:	b5b0      	push	{r4, r5, r7, lr}
 800df42:	b0b4      	sub	sp, #208	; 0xd0
 800df44:	af00      	add	r7, sp, #0
 800df46:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 800df48:	2300      	movs	r3, #0
 800df4a:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7
  uint32_t duplex, speed = 0;
 800df4e:	2300      	movs	r3, #0
 800df50:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
  int32_t PHYLinkState = 0;
 800df54:	2300      	movs	r3, #0
 800df56:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
  ETH_MACConfigTypeDef MACConf = {0};
 800df5a:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800df5e:	2264      	movs	r2, #100	; 0x64
 800df60:	2100      	movs	r1, #0
 800df62:	4618      	mov	r0, r3
 800df64:	f00f fb07 	bl	801d576 <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 800df68:	4b9b      	ldr	r3, [pc, #620]	; (800e1d8 <low_level_init+0x298>)
 800df6a:	4a9c      	ldr	r2, [pc, #624]	; (800e1dc <low_level_init+0x29c>)
 800df6c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 800df6e:	2300      	movs	r3, #0
 800df70:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  MACAddr[1] = 0x80;
 800df74:	2380      	movs	r3, #128	; 0x80
 800df76:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
  MACAddr[2] = 0xE1;
 800df7a:	23e1      	movs	r3, #225	; 0xe1
 800df7c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
  MACAddr[3] = 0x00;
 800df80:	2300      	movs	r3, #0
 800df82:	f887 3057 	strb.w	r3, [r7, #87]	; 0x57
  MACAddr[4] = 0x00;
 800df86:	2300      	movs	r3, #0
 800df88:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
  MACAddr[5] = 0x00;
 800df8c:	2300      	movs	r3, #0
 800df8e:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
  heth.Init.MACAddr = &MACAddr[0];
 800df92:	4a91      	ldr	r2, [pc, #580]	; (800e1d8 <low_level_init+0x298>)
 800df94:	f107 0354 	add.w	r3, r7, #84	; 0x54
 800df98:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 800df9a:	4b8f      	ldr	r3, [pc, #572]	; (800e1d8 <low_level_init+0x298>)
 800df9c:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 800dfa0:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 800dfa2:	4b8d      	ldr	r3, [pc, #564]	; (800e1d8 <low_level_init+0x298>)
 800dfa4:	4a8e      	ldr	r2, [pc, #568]	; (800e1e0 <low_level_init+0x2a0>)
 800dfa6:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 800dfa8:	4b8b      	ldr	r3, [pc, #556]	; (800e1d8 <low_level_init+0x298>)
 800dfaa:	4a8e      	ldr	r2, [pc, #568]	; (800e1e4 <low_level_init+0x2a4>)
 800dfac:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 800dfae:	4b8a      	ldr	r3, [pc, #552]	; (800e1d8 <low_level_init+0x298>)
 800dfb0:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800dfb4:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 800dfb6:	4888      	ldr	r0, [pc, #544]	; (800e1d8 <low_level_init+0x298>)
 800dfb8:	f7f6 fac2 	bl	8004540 <HAL_ETH_Init>
 800dfbc:	4603      	mov	r3, r0
 800dfbe:	f887 30c7 	strb.w	r3, [r7, #199]	; 0xc7

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 800dfc2:	2238      	movs	r2, #56	; 0x38
 800dfc4:	2100      	movs	r1, #0
 800dfc6:	4888      	ldr	r0, [pc, #544]	; (800e1e8 <low_level_init+0x2a8>)
 800dfc8:	f00f fad5 	bl	801d576 <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 800dfcc:	4b86      	ldr	r3, [pc, #536]	; (800e1e8 <low_level_init+0x2a8>)
 800dfce:	2221      	movs	r2, #33	; 0x21
 800dfd0:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 800dfd2:	4b85      	ldr	r3, [pc, #532]	; (800e1e8 <low_level_init+0x2a8>)
 800dfd4:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 800dfd8:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 800dfda:	4b83      	ldr	r3, [pc, #524]	; (800e1e8 <low_level_init+0x2a8>)
 800dfdc:	2200      	movs	r2, #0
 800dfde:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 800dfe0:	4882      	ldr	r0, [pc, #520]	; (800e1ec <low_level_init+0x2ac>)
 800dfe2:	f004 fab9 	bl	8012558 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	2206      	movs	r2, #6
 800dfea:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 800dfee:	4b7a      	ldr	r3, [pc, #488]	; (800e1d8 <low_level_init+0x298>)
 800dff0:	685b      	ldr	r3, [r3, #4]
 800dff2:	781a      	ldrb	r2, [r3, #0]
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 800dffa:	4b77      	ldr	r3, [pc, #476]	; (800e1d8 <low_level_init+0x298>)
 800dffc:	685b      	ldr	r3, [r3, #4]
 800dffe:	785a      	ldrb	r2, [r3, #1]
 800e000:	687b      	ldr	r3, [r7, #4]
 800e002:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 800e006:	4b74      	ldr	r3, [pc, #464]	; (800e1d8 <low_level_init+0x298>)
 800e008:	685b      	ldr	r3, [r3, #4]
 800e00a:	789a      	ldrb	r2, [r3, #2]
 800e00c:	687b      	ldr	r3, [r7, #4]
 800e00e:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 800e012:	4b71      	ldr	r3, [pc, #452]	; (800e1d8 <low_level_init+0x298>)
 800e014:	685b      	ldr	r3, [r3, #4]
 800e016:	78da      	ldrb	r2, [r3, #3]
 800e018:	687b      	ldr	r3, [r7, #4]
 800e01a:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 800e01e:	4b6e      	ldr	r3, [pc, #440]	; (800e1d8 <low_level_init+0x298>)
 800e020:	685b      	ldr	r3, [r3, #4]
 800e022:	791a      	ldrb	r2, [r3, #4]
 800e024:	687b      	ldr	r3, [r7, #4]
 800e026:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 800e02a:	4b6b      	ldr	r3, [pc, #428]	; (800e1d8 <low_level_init+0x298>)
 800e02c:	685b      	ldr	r3, [r3, #4]
 800e02e:	795a      	ldrb	r2, [r3, #5]
 800e030:	687b      	ldr	r3, [r7, #4]
 800e032:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 800e036:	687b      	ldr	r3, [r7, #4]
 800e038:	f240 52dc 	movw	r2, #1500	; 0x5dc
 800e03c:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 800e03e:	687b      	ldr	r3, [r7, #4]
 800e040:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e044:	f043 030a 	orr.w	r3, r3, #10
 800e048:	b2da      	uxtb	r2, r3
 800e04a:	687b      	ldr	r3, [r7, #4]
 800e04c:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  osSemaphoreDef(RxSem);
 800e050:	2300      	movs	r3, #0
 800e052:	64fb      	str	r3, [r7, #76]	; 0x4c
 800e054:	2300      	movs	r3, #0
 800e056:	653b      	str	r3, [r7, #80]	; 0x50
  RxPktSemaphore = osSemaphoreCreate(osSemaphore(RxSem), 1);
 800e058:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800e05c:	2101      	movs	r1, #1
 800e05e:	4618      	mov	r0, r3
 800e060:	f000 fda6 	bl	800ebb0 <osSemaphoreCreate>
 800e064:	4603      	mov	r3, r0
 800e066:	4a62      	ldr	r2, [pc, #392]	; (800e1f0 <low_level_init+0x2b0>)
 800e068:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  osSemaphoreDef(TxSem);
 800e06a:	2300      	movs	r3, #0
 800e06c:	647b      	str	r3, [r7, #68]	; 0x44
 800e06e:	2300      	movs	r3, #0
 800e070:	64bb      	str	r3, [r7, #72]	; 0x48
  TxPktSemaphore = osSemaphoreCreate(osSemaphore(TxSem), 1);
 800e072:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800e076:	2101      	movs	r1, #1
 800e078:	4618      	mov	r0, r3
 800e07a:	f000 fd99 	bl	800ebb0 <osSemaphoreCreate>
 800e07e:	4603      	mov	r3, r0
 800e080:	4a5c      	ldr	r2, [pc, #368]	; (800e1f4 <low_level_init+0x2b4>)
 800e082:	6013      	str	r3, [r2, #0]

  /* Decrease the semaphore's initial count from 1 to 0 */
  osSemaphoreWait(RxPktSemaphore, 0);
 800e084:	4b5a      	ldr	r3, [pc, #360]	; (800e1f0 <low_level_init+0x2b0>)
 800e086:	681b      	ldr	r3, [r3, #0]
 800e088:	2100      	movs	r1, #0
 800e08a:	4618      	mov	r0, r3
 800e08c:	f000 fdc2 	bl	800ec14 <osSemaphoreWait>
  osSemaphoreWait(TxPktSemaphore, 0);
 800e090:	4b58      	ldr	r3, [pc, #352]	; (800e1f4 <low_level_init+0x2b4>)
 800e092:	681b      	ldr	r3, [r3, #0]
 800e094:	2100      	movs	r1, #0
 800e096:	4618      	mov	r0, r3
 800e098:	f000 fdbc 	bl	800ec14 <osSemaphoreWait>

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_DEF_CREATE_CMSIS_RTOS_V1 */
  osThreadDef(EthIf, ethernetif_input, osPriorityRealtime, 0, INTERFACE_THREAD_STACK_SIZE);
 800e09c:	4b56      	ldr	r3, [pc, #344]	; (800e1f8 <low_level_init+0x2b8>)
 800e09e:	f107 0428 	add.w	r4, r7, #40	; 0x28
 800e0a2:	461d      	mov	r5, r3
 800e0a4:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e0a6:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e0a8:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e0ac:	e884 0007 	stmia.w	r4, {r0, r1, r2}
  osThreadCreate (osThread(EthIf), netif);
 800e0b0:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800e0b4:	6879      	ldr	r1, [r7, #4]
 800e0b6:	4618      	mov	r0, r3
 800e0b8:	f000 fc71 	bl	800e99e <osThreadCreate>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 800e0bc:	494f      	ldr	r1, [pc, #316]	; (800e1fc <low_level_init+0x2bc>)
 800e0be:	4850      	ldr	r0, [pc, #320]	; (800e200 <low_level_init+0x2c0>)
 800e0c0:	f7f4 ff45 	bl	8002f4e <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800e0c4:	484e      	ldr	r0, [pc, #312]	; (800e200 <low_level_init+0x2c0>)
 800e0c6:	f7f4 ff74 	bl	8002fb2 <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 800e0ca:	f897 30c7 	ldrb.w	r3, [r7, #199]	; 0xc7
 800e0ce:	2b00      	cmp	r3, #0
 800e0d0:	d165      	bne.n	800e19e <low_level_init+0x25e>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800e0d2:	484b      	ldr	r0, [pc, #300]	; (800e200 <low_level_init+0x2c0>)
 800e0d4:	f7f4 ffba 	bl	800304c <LAN8742_GetLinkState>
 800e0d8:	f8c7 00c0 	str.w	r0, [r7, #192]	; 0xc0

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 800e0dc:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e0e0:	2b01      	cmp	r3, #1
 800e0e2:	dc06      	bgt.n	800e0f2 <low_level_init+0x1b2>
    {
      netif_set_link_down(netif);
 800e0e4:	6878      	ldr	r0, [r7, #4]
 800e0e6:	f004 fe11 	bl	8012d0c <netif_set_link_down>
      netif_set_down(netif);
 800e0ea:	6878      	ldr	r0, [r7, #4]
 800e0ec:	f004 fda8 	bl	8012c40 <netif_set_down>
 800e0f0:	e057      	b.n	800e1a2 <low_level_init+0x262>
    }
    else
    {
      switch (PHYLinkState)
 800e0f2:	f8d7 30c0 	ldr.w	r3, [r7, #192]	; 0xc0
 800e0f6:	3b02      	subs	r3, #2
 800e0f8:	2b03      	cmp	r3, #3
 800e0fa:	d82b      	bhi.n	800e154 <low_level_init+0x214>
 800e0fc:	a201      	add	r2, pc, #4	; (adr r2, 800e104 <low_level_init+0x1c4>)
 800e0fe:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e102:	bf00      	nop
 800e104:	0800e115 	.word	0x0800e115
 800e108:	0800e127 	.word	0x0800e127
 800e10c:	0800e137 	.word	0x0800e137
 800e110:	0800e147 	.word	0x0800e147
      {
      case LAN8742_STATUS_100MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800e114:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e118:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        speed = ETH_SPEED_100M;
 800e11c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e120:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        break;
 800e124:	e01f      	b.n	800e166 <low_level_init+0x226>
      case LAN8742_STATUS_100MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800e126:	2300      	movs	r3, #0
 800e128:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        speed = ETH_SPEED_100M;
 800e12c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e130:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        break;
 800e134:	e017      	b.n	800e166 <low_level_init+0x226>
      case LAN8742_STATUS_10MBITS_FULLDUPLEX:
        duplex = ETH_FULLDUPLEX_MODE;
 800e136:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e13a:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        speed = ETH_SPEED_10M;
 800e13e:	2300      	movs	r3, #0
 800e140:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        break;
 800e144:	e00f      	b.n	800e166 <low_level_init+0x226>
      case LAN8742_STATUS_10MBITS_HALFDUPLEX:
        duplex = ETH_HALFDUPLEX_MODE;
 800e146:	2300      	movs	r3, #0
 800e148:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        speed = ETH_SPEED_10M;
 800e14c:	2300      	movs	r3, #0
 800e14e:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        break;
 800e152:	e008      	b.n	800e166 <low_level_init+0x226>
      default:
        duplex = ETH_FULLDUPLEX_MODE;
 800e154:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e158:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
        speed = ETH_SPEED_100M;
 800e15c:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e160:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
        break;
 800e164:	bf00      	nop
      }

    /* Get MAC Config MAC */
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800e166:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e16a:	4619      	mov	r1, r3
 800e16c:	481a      	ldr	r0, [pc, #104]	; (800e1d8 <low_level_init+0x298>)
 800e16e:	f7f6 fecf 	bl	8004f10 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 800e172:	f8d7 30cc 	ldr.w	r3, [r7, #204]	; 0xcc
 800e176:	677b      	str	r3, [r7, #116]	; 0x74
    MACConf.Speed = speed;
 800e178:	f8d7 30c8 	ldr.w	r3, [r7, #200]	; 0xc8
 800e17c:	673b      	str	r3, [r7, #112]	; 0x70
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 800e17e:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 800e182:	4619      	mov	r1, r3
 800e184:	4814      	ldr	r0, [pc, #80]	; (800e1d8 <low_level_init+0x298>)
 800e186:	f7f6 ffba 	bl	80050fe <HAL_ETH_SetMACConfig>

    HAL_ETH_Start_IT(&heth);
 800e18a:	4813      	ldr	r0, [pc, #76]	; (800e1d8 <low_level_init+0x298>)
 800e18c:	f7f6 fa72 	bl	8004674 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 800e190:	6878      	ldr	r0, [r7, #4]
 800e192:	f004 fce9 	bl	8012b68 <netif_set_up>
    netif_set_link_up(netif);
 800e196:	6878      	ldr	r0, [r7, #4]
 800e198:	f004 fd84 	bl	8012ca4 <netif_set_link_up>
 800e19c:	e001      	b.n	800e1a2 <low_level_init+0x262>
    }

  }
  else
  {
    Error_Handler();
 800e19e:	f7f3 f949 	bl	8001434 <Error_Handler>

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */

  if(HAL_GetREVID() == 0x1000)
 800e1a2:	f7f5 f82b 	bl	80031fc <HAL_GetREVID>
 800e1a6:	4603      	mov	r3, r0
 800e1a8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800e1ac:	d10f      	bne.n	800e1ce <low_level_init+0x28e>
  {
    /*
      This thread will keep resetting the RMII interface until good frames are received
    */
    osThreadDef(RMII_Watchdog, RMII_Thread, osPriorityRealtime, 0, configMINIMAL_STACK_SIZE);
 800e1ae:	4b15      	ldr	r3, [pc, #84]	; (800e204 <low_level_init+0x2c4>)
 800e1b0:	f107 040c 	add.w	r4, r7, #12
 800e1b4:	461d      	mov	r5, r3
 800e1b6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 800e1b8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 800e1ba:	e895 0007 	ldmia.w	r5, {r0, r1, r2}
 800e1be:	e884 0007 	stmia.w	r4, {r0, r1, r2}
    osThreadCreate (osThread(RMII_Watchdog), NULL);
 800e1c2:	f107 030c 	add.w	r3, r7, #12
 800e1c6:	2100      	movs	r1, #0
 800e1c8:	4618      	mov	r0, r3
 800e1ca:	f000 fbe8 	bl	800e99e <osThreadCreate>
  }
}
 800e1ce:	bf00      	nop
 800e1d0:	37d0      	adds	r7, #208	; 0xd0
 800e1d2:	46bd      	mov	sp, r7
 800e1d4:	bdb0      	pop	{r4, r5, r7, pc}
 800e1d6:	bf00      	nop
 800e1d8:	20005e64 	.word	0x20005e64
 800e1dc:	40028000 	.word	0x40028000
 800e1e0:	20000244 	.word	0x20000244
 800e1e4:	200001a4 	.word	0x200001a4
 800e1e8:	20005f14 	.word	0x20005f14
 800e1ec:	08020f60 	.word	0x08020f60
 800e1f0:	20005e5c 	.word	0x20005e5c
 800e1f4:	20005e60 	.word	0x20005e60
 800e1f8:	0801e3e8 	.word	0x0801e3e8
 800e1fc:	2000000c 	.word	0x2000000c
 800e200:	20005f4c 	.word	0x20005f4c
 800e204:	0801e414 	.word	0x0801e414

0800e208 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 800e208:	b580      	push	{r7, lr}
 800e20a:	b092      	sub	sp, #72	; 0x48
 800e20c:	af00      	add	r7, sp, #0
 800e20e:	6078      	str	r0, [r7, #4]
 800e210:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800e212:	2300      	movs	r3, #0
 800e214:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800e216:	2300      	movs	r3, #0
 800e218:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 800e21a:	2300      	movs	r3, #0
 800e21c:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 800e220:	f107 030c 	add.w	r3, r7, #12
 800e224:	2230      	movs	r2, #48	; 0x30
 800e226:	2100      	movs	r1, #0
 800e228:	4618      	mov	r0, r3
 800e22a:	f00f f9a4 	bl	801d576 <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 800e22e:	f107 030c 	add.w	r3, r7, #12
 800e232:	2230      	movs	r2, #48	; 0x30
 800e234:	2100      	movs	r1, #0
 800e236:	4618      	mov	r0, r3
 800e238:	f00f f99d 	bl	801d576 <memset>

  for(q = p; q != NULL; q = q->next)
 800e23c:	683b      	ldr	r3, [r7, #0]
 800e23e:	643b      	str	r3, [r7, #64]	; 0x40
 800e240:	e045      	b.n	800e2ce <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 800e242:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e244:	2b03      	cmp	r3, #3
 800e246:	d902      	bls.n	800e24e <low_level_output+0x46>
      return ERR_IF;
 800e248:	f06f 030b 	mvn.w	r3, #11
 800e24c:	e06c      	b.n	800e328 <low_level_output+0x120>

    Txbuffer[i].buffer = q->payload;
 800e24e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e250:	6859      	ldr	r1, [r3, #4]
 800e252:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e254:	4613      	mov	r3, r2
 800e256:	005b      	lsls	r3, r3, #1
 800e258:	4413      	add	r3, r2
 800e25a:	009b      	lsls	r3, r3, #2
 800e25c:	3348      	adds	r3, #72	; 0x48
 800e25e:	443b      	add	r3, r7
 800e260:	3b3c      	subs	r3, #60	; 0x3c
 800e262:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 800e264:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e266:	895b      	ldrh	r3, [r3, #10]
 800e268:	4619      	mov	r1, r3
 800e26a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e26c:	4613      	mov	r3, r2
 800e26e:	005b      	lsls	r3, r3, #1
 800e270:	4413      	add	r3, r2
 800e272:	009b      	lsls	r3, r3, #2
 800e274:	3348      	adds	r3, #72	; 0x48
 800e276:	443b      	add	r3, r7
 800e278:	3b38      	subs	r3, #56	; 0x38
 800e27a:	6019      	str	r1, [r3, #0]

    if(i>0)
 800e27c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e27e:	2b00      	cmp	r3, #0
 800e280:	d011      	beq.n	800e2a6 <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 800e282:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e284:	1e5a      	subs	r2, r3, #1
 800e286:	f107 000c 	add.w	r0, r7, #12
 800e28a:	6c79      	ldr	r1, [r7, #68]	; 0x44
 800e28c:	460b      	mov	r3, r1
 800e28e:	005b      	lsls	r3, r3, #1
 800e290:	440b      	add	r3, r1
 800e292:	009b      	lsls	r3, r3, #2
 800e294:	18c1      	adds	r1, r0, r3
 800e296:	4613      	mov	r3, r2
 800e298:	005b      	lsls	r3, r3, #1
 800e29a:	4413      	add	r3, r2
 800e29c:	009b      	lsls	r3, r3, #2
 800e29e:	3348      	adds	r3, #72	; 0x48
 800e2a0:	443b      	add	r3, r7
 800e2a2:	3b34      	subs	r3, #52	; 0x34
 800e2a4:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800e2a6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e2a8:	681b      	ldr	r3, [r3, #0]
 800e2aa:	2b00      	cmp	r3, #0
 800e2ac:	d109      	bne.n	800e2c2 <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 800e2ae:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800e2b0:	4613      	mov	r3, r2
 800e2b2:	005b      	lsls	r3, r3, #1
 800e2b4:	4413      	add	r3, r2
 800e2b6:	009b      	lsls	r3, r3, #2
 800e2b8:	3348      	adds	r3, #72	; 0x48
 800e2ba:	443b      	add	r3, r7
 800e2bc:	3b34      	subs	r3, #52	; 0x34
 800e2be:	2200      	movs	r2, #0
 800e2c0:	601a      	str	r2, [r3, #0]
    }

    i++;
 800e2c2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800e2c4:	3301      	adds	r3, #1
 800e2c6:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 800e2c8:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e2ca:	681b      	ldr	r3, [r3, #0]
 800e2cc:	643b      	str	r3, [r7, #64]	; 0x40
 800e2ce:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 800e2d0:	2b00      	cmp	r3, #0
 800e2d2:	d1b6      	bne.n	800e242 <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800e2d4:	683b      	ldr	r3, [r7, #0]
 800e2d6:	891b      	ldrh	r3, [r3, #8]
 800e2d8:	461a      	mov	r2, r3
 800e2da:	4b15      	ldr	r3, [pc, #84]	; (800e330 <low_level_output+0x128>)
 800e2dc:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 800e2de:	4a14      	ldr	r2, [pc, #80]	; (800e330 <low_level_output+0x128>)
 800e2e0:	f107 030c 	add.w	r3, r7, #12
 800e2e4:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800e2e6:	4a12      	ldr	r2, [pc, #72]	; (800e330 <low_level_output+0x128>)
 800e2e8:	683b      	ldr	r3, [r7, #0]
 800e2ea:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 800e2ec:	6838      	ldr	r0, [r7, #0]
 800e2ee:	f005 f991 	bl	8013614 <pbuf_ref>

  if (HAL_ETH_Transmit_IT(&heth, &TxConfig) == HAL_OK) {
 800e2f2:	490f      	ldr	r1, [pc, #60]	; (800e330 <low_level_output+0x128>)
 800e2f4:	480f      	ldr	r0, [pc, #60]	; (800e334 <low_level_output+0x12c>)
 800e2f6:	f7f6 faad 	bl	8004854 <HAL_ETH_Transmit_IT>
 800e2fa:	4603      	mov	r3, r0
 800e2fc:	2b00      	cmp	r3, #0
 800e2fe:	d10e      	bne.n	800e31e <low_level_output+0x116>
    while(osSemaphoreWait(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 800e300:	bf00      	nop
 800e302:	4b0d      	ldr	r3, [pc, #52]	; (800e338 <low_level_output+0x130>)
 800e304:	681b      	ldr	r3, [r3, #0]
 800e306:	f04f 31ff 	mov.w	r1, #4294967295
 800e30a:	4618      	mov	r0, r3
 800e30c:	f000 fc82 	bl	800ec14 <osSemaphoreWait>
 800e310:	4603      	mov	r3, r0
 800e312:	2b00      	cmp	r3, #0
 800e314:	d1f5      	bne.n	800e302 <low_level_output+0xfa>

    {
    }

    HAL_ETH_ReleaseTxPacket(&heth);
 800e316:	4807      	ldr	r0, [pc, #28]	; (800e334 <low_level_output+0x12c>)
 800e318:	f7f6 fc3c 	bl	8004b94 <HAL_ETH_ReleaseTxPacket>
 800e31c:	e002      	b.n	800e324 <low_level_output+0x11c>
  } else {
    pbuf_free(p);
 800e31e:	6838      	ldr	r0, [r7, #0]
 800e320:	f005 f8d2 	bl	80134c8 <pbuf_free>
  }

  return errval;
 800e324:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 800e328:	4618      	mov	r0, r3
 800e32a:	3748      	adds	r7, #72	; 0x48
 800e32c:	46bd      	mov	sp, r7
 800e32e:	bd80      	pop	{r7, pc}
 800e330:	20005f14 	.word	0x20005f14
 800e334:	20005e64 	.word	0x20005e64
 800e338:	20005e60 	.word	0x20005e60

0800e33c <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 800e33c:	b580      	push	{r7, lr}
 800e33e:	b084      	sub	sp, #16
 800e340:	af00      	add	r7, sp, #0
 800e342:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800e344:	2300      	movs	r3, #0
 800e346:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 800e348:	4b07      	ldr	r3, [pc, #28]	; (800e368 <low_level_input+0x2c>)
 800e34a:	781b      	ldrb	r3, [r3, #0]
 800e34c:	2b00      	cmp	r3, #0
 800e34e:	d105      	bne.n	800e35c <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 800e350:	f107 030c 	add.w	r3, r7, #12
 800e354:	4619      	mov	r1, r3
 800e356:	4805      	ldr	r0, [pc, #20]	; (800e36c <low_level_input+0x30>)
 800e358:	f7f6 fad8 	bl	800490c <HAL_ETH_ReadData>
  }

  return p;
 800e35c:	68fb      	ldr	r3, [r7, #12]
}
 800e35e:	4618      	mov	r0, r3
 800e360:	3710      	adds	r7, #16
 800e362:	46bd      	mov	sp, r7
 800e364:	bd80      	pop	{r7, pc}
 800e366:	bf00      	nop
 800e368:	20005e58 	.word	0x20005e58
 800e36c:	20005e64 	.word	0x20005e64

0800e370 <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
static void ethernetif_input(void const * argument)
{
 800e370:	b580      	push	{r7, lr}
 800e372:	b084      	sub	sp, #16
 800e374:	af00      	add	r7, sp, #0
 800e376:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 800e378:	2300      	movs	r3, #0
 800e37a:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 800e37c:	687b      	ldr	r3, [r7, #4]
 800e37e:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800e380:	4b0f      	ldr	r3, [pc, #60]	; (800e3c0 <ethernetif_input+0x50>)
 800e382:	681b      	ldr	r3, [r3, #0]
 800e384:	f04f 31ff 	mov.w	r1, #4294967295
 800e388:	4618      	mov	r0, r3
 800e38a:	f000 fc43 	bl	800ec14 <osSemaphoreWait>
 800e38e:	4603      	mov	r3, r0
 800e390:	2b00      	cmp	r3, #0
 800e392:	d1f5      	bne.n	800e380 <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 800e394:	68b8      	ldr	r0, [r7, #8]
 800e396:	f7ff ffd1 	bl	800e33c <low_level_input>
 800e39a:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 800e39c:	68fb      	ldr	r3, [r7, #12]
 800e39e:	2b00      	cmp	r3, #0
 800e3a0:	d00a      	beq.n	800e3b8 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800e3a2:	68bb      	ldr	r3, [r7, #8]
 800e3a4:	691b      	ldr	r3, [r3, #16]
 800e3a6:	68b9      	ldr	r1, [r7, #8]
 800e3a8:	68f8      	ldr	r0, [r7, #12]
 800e3aa:	4798      	blx	r3
 800e3ac:	4603      	mov	r3, r0
 800e3ae:	2b00      	cmp	r3, #0
 800e3b0:	d002      	beq.n	800e3b8 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800e3b2:	68f8      	ldr	r0, [r7, #12]
 800e3b4:	f005 f888 	bl	80134c8 <pbuf_free>
          }
        }
      } while(p!=NULL);
 800e3b8:	68fb      	ldr	r3, [r7, #12]
 800e3ba:	2b00      	cmp	r3, #0
 800e3bc:	d1ea      	bne.n	800e394 <ethernetif_input+0x24>
    if (osSemaphoreWait(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800e3be:	e7df      	b.n	800e380 <ethernetif_input+0x10>
 800e3c0:	20005e5c 	.word	0x20005e5c

0800e3c4 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 800e3c4:	b580      	push	{r7, lr}
 800e3c6:	b082      	sub	sp, #8
 800e3c8:	af00      	add	r7, sp, #0
 800e3ca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 800e3cc:	687b      	ldr	r3, [r7, #4]
 800e3ce:	2b00      	cmp	r3, #0
 800e3d0:	d106      	bne.n	800e3e0 <ethernetif_init+0x1c>
 800e3d2:	4b0e      	ldr	r3, [pc, #56]	; (800e40c <ethernetif_init+0x48>)
 800e3d4:	f240 2202 	movw	r2, #514	; 0x202
 800e3d8:	490d      	ldr	r1, [pc, #52]	; (800e410 <ethernetif_init+0x4c>)
 800e3da:	480e      	ldr	r0, [pc, #56]	; (800e414 <ethernetif_init+0x50>)
 800e3dc:	f00f f866 	bl	801d4ac <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800e3e0:	687b      	ldr	r3, [r7, #4]
 800e3e2:	2273      	movs	r2, #115	; 0x73
 800e3e4:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 800e3e8:	687b      	ldr	r3, [r7, #4]
 800e3ea:	2274      	movs	r2, #116	; 0x74
 800e3ec:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800e3f0:	687b      	ldr	r3, [r7, #4]
 800e3f2:	4a09      	ldr	r2, [pc, #36]	; (800e418 <ethernetif_init+0x54>)
 800e3f4:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 800e3f6:	687b      	ldr	r3, [r7, #4]
 800e3f8:	4a08      	ldr	r2, [pc, #32]	; (800e41c <ethernetif_init+0x58>)
 800e3fa:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 800e3fc:	6878      	ldr	r0, [r7, #4]
 800e3fe:	f7ff fd9f 	bl	800df40 <low_level_init>

  return ERR_OK;
 800e402:	2300      	movs	r3, #0
}
 800e404:	4618      	mov	r0, r3
 800e406:	3708      	adds	r7, #8
 800e408:	46bd      	mov	sp, r7
 800e40a:	bd80      	pop	{r7, pc}
 800e40c:	0801e430 	.word	0x0801e430
 800e410:	0801e44c 	.word	0x0801e44c
 800e414:	0801e45c 	.word	0x0801e45c
 800e418:	0801a1b5 	.word	0x0801a1b5
 800e41c:	0800e209 	.word	0x0800e209

0800e420 <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800e420:	b580      	push	{r7, lr}
 800e422:	b084      	sub	sp, #16
 800e424:	af00      	add	r7, sp, #0
 800e426:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 800e428:	687b      	ldr	r3, [r7, #4]
 800e42a:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 800e42c:	68f9      	ldr	r1, [r7, #12]
 800e42e:	4809      	ldr	r0, [pc, #36]	; (800e454 <pbuf_free_custom+0x34>)
 800e430:	f004 f982 	bl	8012738 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 800e434:	4b08      	ldr	r3, [pc, #32]	; (800e458 <pbuf_free_custom+0x38>)
 800e436:	781b      	ldrb	r3, [r3, #0]
 800e438:	2b01      	cmp	r3, #1
 800e43a:	d107      	bne.n	800e44c <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 800e43c:	4b06      	ldr	r3, [pc, #24]	; (800e458 <pbuf_free_custom+0x38>)
 800e43e:	2200      	movs	r2, #0
 800e440:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 800e442:	4b06      	ldr	r3, [pc, #24]	; (800e45c <pbuf_free_custom+0x3c>)
 800e444:	681b      	ldr	r3, [r3, #0]
 800e446:	4618      	mov	r0, r3
 800e448:	f000 fc32 	bl	800ecb0 <osSemaphoreRelease>
  }
}
 800e44c:	bf00      	nop
 800e44e:	3710      	adds	r7, #16
 800e450:	46bd      	mov	sp, r7
 800e452:	bd80      	pop	{r7, pc}
 800e454:	08020f60 	.word	0x08020f60
 800e458:	20005e58 	.word	0x20005e58
 800e45c:	20005e5c 	.word	0x20005e5c

0800e460 <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 800e460:	b580      	push	{r7, lr}
 800e462:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800e464:	f7f4 fe9a 	bl	800319c <HAL_GetTick>
 800e468:	4603      	mov	r3, r0
}
 800e46a:	4618      	mov	r0, r3
 800e46c:	bd80      	pop	{r7, pc}
	...

0800e470 <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 800e470:	b580      	push	{r7, lr}
 800e472:	b08e      	sub	sp, #56	; 0x38
 800e474:	af00      	add	r7, sp, #0
 800e476:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800e478:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e47c:	2200      	movs	r2, #0
 800e47e:	601a      	str	r2, [r3, #0]
 800e480:	605a      	str	r2, [r3, #4]
 800e482:	609a      	str	r2, [r3, #8]
 800e484:	60da      	str	r2, [r3, #12]
 800e486:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 800e488:	687b      	ldr	r3, [r7, #4]
 800e48a:	681b      	ldr	r3, [r3, #0]
 800e48c:	4a56      	ldr	r2, [pc, #344]	; (800e5e8 <HAL_ETH_MspInit+0x178>)
 800e48e:	4293      	cmp	r3, r2
 800e490:	f040 80a6 	bne.w	800e5e0 <HAL_ETH_MspInit+0x170>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 800e494:	4b55      	ldr	r3, [pc, #340]	; (800e5ec <HAL_ETH_MspInit+0x17c>)
 800e496:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e498:	4a54      	ldr	r2, [pc, #336]	; (800e5ec <HAL_ETH_MspInit+0x17c>)
 800e49a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800e49e:	6313      	str	r3, [r2, #48]	; 0x30
 800e4a0:	4b52      	ldr	r3, [pc, #328]	; (800e5ec <HAL_ETH_MspInit+0x17c>)
 800e4a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800e4a8:	623b      	str	r3, [r7, #32]
 800e4aa:	6a3b      	ldr	r3, [r7, #32]
 800e4ac:	4b4f      	ldr	r3, [pc, #316]	; (800e5ec <HAL_ETH_MspInit+0x17c>)
 800e4ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4b0:	4a4e      	ldr	r2, [pc, #312]	; (800e5ec <HAL_ETH_MspInit+0x17c>)
 800e4b2:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800e4b6:	6313      	str	r3, [r2, #48]	; 0x30
 800e4b8:	4b4c      	ldr	r3, [pc, #304]	; (800e5ec <HAL_ETH_MspInit+0x17c>)
 800e4ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4bc:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 800e4c0:	61fb      	str	r3, [r7, #28]
 800e4c2:	69fb      	ldr	r3, [r7, #28]
 800e4c4:	4b49      	ldr	r3, [pc, #292]	; (800e5ec <HAL_ETH_MspInit+0x17c>)
 800e4c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4c8:	4a48      	ldr	r2, [pc, #288]	; (800e5ec <HAL_ETH_MspInit+0x17c>)
 800e4ca:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 800e4ce:	6313      	str	r3, [r2, #48]	; 0x30
 800e4d0:	4b46      	ldr	r3, [pc, #280]	; (800e5ec <HAL_ETH_MspInit+0x17c>)
 800e4d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4d4:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 800e4d8:	61bb      	str	r3, [r7, #24]
 800e4da:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800e4dc:	4b43      	ldr	r3, [pc, #268]	; (800e5ec <HAL_ETH_MspInit+0x17c>)
 800e4de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4e0:	4a42      	ldr	r2, [pc, #264]	; (800e5ec <HAL_ETH_MspInit+0x17c>)
 800e4e2:	f043 0304 	orr.w	r3, r3, #4
 800e4e6:	6313      	str	r3, [r2, #48]	; 0x30
 800e4e8:	4b40      	ldr	r3, [pc, #256]	; (800e5ec <HAL_ETH_MspInit+0x17c>)
 800e4ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4ec:	f003 0304 	and.w	r3, r3, #4
 800e4f0:	617b      	str	r3, [r7, #20]
 800e4f2:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800e4f4:	4b3d      	ldr	r3, [pc, #244]	; (800e5ec <HAL_ETH_MspInit+0x17c>)
 800e4f6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e4f8:	4a3c      	ldr	r2, [pc, #240]	; (800e5ec <HAL_ETH_MspInit+0x17c>)
 800e4fa:	f043 0301 	orr.w	r3, r3, #1
 800e4fe:	6313      	str	r3, [r2, #48]	; 0x30
 800e500:	4b3a      	ldr	r3, [pc, #232]	; (800e5ec <HAL_ETH_MspInit+0x17c>)
 800e502:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e504:	f003 0301 	and.w	r3, r3, #1
 800e508:	613b      	str	r3, [r7, #16]
 800e50a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800e50c:	4b37      	ldr	r3, [pc, #220]	; (800e5ec <HAL_ETH_MspInit+0x17c>)
 800e50e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e510:	4a36      	ldr	r2, [pc, #216]	; (800e5ec <HAL_ETH_MspInit+0x17c>)
 800e512:	f043 0302 	orr.w	r3, r3, #2
 800e516:	6313      	str	r3, [r2, #48]	; 0x30
 800e518:	4b34      	ldr	r3, [pc, #208]	; (800e5ec <HAL_ETH_MspInit+0x17c>)
 800e51a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e51c:	f003 0302 	and.w	r3, r3, #2
 800e520:	60fb      	str	r3, [r7, #12]
 800e522:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 800e524:	4b31      	ldr	r3, [pc, #196]	; (800e5ec <HAL_ETH_MspInit+0x17c>)
 800e526:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e528:	4a30      	ldr	r2, [pc, #192]	; (800e5ec <HAL_ETH_MspInit+0x17c>)
 800e52a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e52e:	6313      	str	r3, [r2, #48]	; 0x30
 800e530:	4b2e      	ldr	r3, [pc, #184]	; (800e5ec <HAL_ETH_MspInit+0x17c>)
 800e532:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800e534:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800e538:	60bb      	str	r3, [r7, #8]
 800e53a:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 800e53c:	2332      	movs	r3, #50	; 0x32
 800e53e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e540:	2302      	movs	r3, #2
 800e542:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e544:	2300      	movs	r3, #0
 800e546:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e548:	2303      	movs	r3, #3
 800e54a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e54c:	230b      	movs	r3, #11
 800e54e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800e550:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e554:	4619      	mov	r1, r3
 800e556:	4826      	ldr	r0, [pc, #152]	; (800e5f0 <HAL_ETH_MspInit+0x180>)
 800e558:	f7f7 fdbe 	bl	80060d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 800e55c:	2386      	movs	r3, #134	; 0x86
 800e55e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e560:	2302      	movs	r3, #2
 800e562:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e564:	2300      	movs	r3, #0
 800e566:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e568:	2303      	movs	r3, #3
 800e56a:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e56c:	230b      	movs	r3, #11
 800e56e:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800e570:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e574:	4619      	mov	r1, r3
 800e576:	481f      	ldr	r0, [pc, #124]	; (800e5f4 <HAL_ETH_MspInit+0x184>)
 800e578:	f7f7 fdae 	bl	80060d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 800e57c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800e580:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e582:	2302      	movs	r3, #2
 800e584:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e586:	2300      	movs	r3, #0
 800e588:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e58a:	2303      	movs	r3, #3
 800e58c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e58e:	230b      	movs	r3, #11
 800e590:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800e592:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e596:	4619      	mov	r1, r3
 800e598:	4817      	ldr	r0, [pc, #92]	; (800e5f8 <HAL_ETH_MspInit+0x188>)
 800e59a:	f7f7 fd9d 	bl	80060d8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 800e59e:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800e5a2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800e5a4:	2302      	movs	r3, #2
 800e5a6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800e5a8:	2300      	movs	r3, #0
 800e5aa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800e5ac:	2303      	movs	r3, #3
 800e5ae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 800e5b0:	230b      	movs	r3, #11
 800e5b2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800e5b4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800e5b8:	4619      	mov	r1, r3
 800e5ba:	4810      	ldr	r0, [pc, #64]	; (800e5fc <HAL_ETH_MspInit+0x18c>)
 800e5bc:	f7f7 fd8c 	bl	80060d8 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 800e5c0:	2200      	movs	r2, #0
 800e5c2:	2105      	movs	r1, #5
 800e5c4:	203d      	movs	r0, #61	; 0x3d
 800e5c6:	f7f5 fa71 	bl	8003aac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 800e5ca:	203d      	movs	r0, #61	; 0x3d
 800e5cc:	f7f5 fa8a 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(ETH_WKUP_IRQn, 5, 0);
 800e5d0:	2200      	movs	r2, #0
 800e5d2:	2105      	movs	r1, #5
 800e5d4:	203e      	movs	r0, #62	; 0x3e
 800e5d6:	f7f5 fa69 	bl	8003aac <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_WKUP_IRQn);
 800e5da:	203e      	movs	r0, #62	; 0x3e
 800e5dc:	f7f5 fa82 	bl	8003ae4 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 800e5e0:	bf00      	nop
 800e5e2:	3738      	adds	r7, #56	; 0x38
 800e5e4:	46bd      	mov	sp, r7
 800e5e6:	bd80      	pop	{r7, pc}
 800e5e8:	40028000 	.word	0x40028000
 800e5ec:	40023800 	.word	0x40023800
 800e5f0:	40020800 	.word	0x40020800
 800e5f4:	40020000 	.word	0x40020000
 800e5f8:	40020400 	.word	0x40020400
 800e5fc:	40021800 	.word	0x40021800

0800e600 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 800e600:	b580      	push	{r7, lr}
 800e602:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800e604:	4802      	ldr	r0, [pc, #8]	; (800e610 <ETH_PHY_IO_Init+0x10>)
 800e606:	f7f6 fd95 	bl	8005134 <HAL_ETH_SetMDIOClockRange>

  return 0;
 800e60a:	2300      	movs	r3, #0
}
 800e60c:	4618      	mov	r0, r3
 800e60e:	bd80      	pop	{r7, pc}
 800e610:	20005e64 	.word	0x20005e64

0800e614 <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800e614:	b480      	push	{r7}
 800e616:	af00      	add	r7, sp, #0
  return 0;
 800e618:	2300      	movs	r3, #0
}
 800e61a:	4618      	mov	r0, r3
 800e61c:	46bd      	mov	sp, r7
 800e61e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e622:	4770      	bx	lr

0800e624 <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800e624:	b580      	push	{r7, lr}
 800e626:	b084      	sub	sp, #16
 800e628:	af00      	add	r7, sp, #0
 800e62a:	60f8      	str	r0, [r7, #12]
 800e62c:	60b9      	str	r1, [r7, #8]
 800e62e:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 800e630:	687b      	ldr	r3, [r7, #4]
 800e632:	68ba      	ldr	r2, [r7, #8]
 800e634:	68f9      	ldr	r1, [r7, #12]
 800e636:	4807      	ldr	r0, [pc, #28]	; (800e654 <ETH_PHY_IO_ReadReg+0x30>)
 800e638:	f7f6 fbd6 	bl	8004de8 <HAL_ETH_ReadPHYRegister>
 800e63c:	4603      	mov	r3, r0
 800e63e:	2b00      	cmp	r3, #0
 800e640:	d002      	beq.n	800e648 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 800e642:	f04f 33ff 	mov.w	r3, #4294967295
 800e646:	e000      	b.n	800e64a <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 800e648:	2300      	movs	r3, #0
}
 800e64a:	4618      	mov	r0, r3
 800e64c:	3710      	adds	r7, #16
 800e64e:	46bd      	mov	sp, r7
 800e650:	bd80      	pop	{r7, pc}
 800e652:	bf00      	nop
 800e654:	20005e64 	.word	0x20005e64

0800e658 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 800e658:	b580      	push	{r7, lr}
 800e65a:	b084      	sub	sp, #16
 800e65c:	af00      	add	r7, sp, #0
 800e65e:	60f8      	str	r0, [r7, #12]
 800e660:	60b9      	str	r1, [r7, #8]
 800e662:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 800e664:	687b      	ldr	r3, [r7, #4]
 800e666:	68ba      	ldr	r2, [r7, #8]
 800e668:	68f9      	ldr	r1, [r7, #12]
 800e66a:	4807      	ldr	r0, [pc, #28]	; (800e688 <ETH_PHY_IO_WriteReg+0x30>)
 800e66c:	f7f6 fc07 	bl	8004e7e <HAL_ETH_WritePHYRegister>
 800e670:	4603      	mov	r3, r0
 800e672:	2b00      	cmp	r3, #0
 800e674:	d002      	beq.n	800e67c <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 800e676:	f04f 33ff 	mov.w	r3, #4294967295
 800e67a:	e000      	b.n	800e67e <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 800e67c:	2300      	movs	r3, #0
}
 800e67e:	4618      	mov	r0, r3
 800e680:	3710      	adds	r7, #16
 800e682:	46bd      	mov	sp, r7
 800e684:	bd80      	pop	{r7, pc}
 800e686:	bf00      	nop
 800e688:	20005e64 	.word	0x20005e64

0800e68c <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 800e68c:	b580      	push	{r7, lr}
 800e68e:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800e690:	f7f4 fd84 	bl	800319c <HAL_GetTick>
 800e694:	4603      	mov	r3, r0
}
 800e696:	4618      	mov	r0, r3
 800e698:	bd80      	pop	{r7, pc}
	...

0800e69c <ethernet_link_thread>:
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */

void ethernet_link_thread(void const * argument)
{
 800e69c:	b580      	push	{r7, lr}
 800e69e:	b0a0      	sub	sp, #128	; 0x80
 800e6a0:	af00      	add	r7, sp, #0
 800e6a2:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800e6a4:	f107 0308 	add.w	r3, r7, #8
 800e6a8:	2264      	movs	r2, #100	; 0x64
 800e6aa:	2100      	movs	r1, #0
 800e6ac:	4618      	mov	r0, r3
 800e6ae:	f00e ff62 	bl	801d576 <memset>
  int32_t PHYLinkState = 0;
 800e6b2:	2300      	movs	r3, #0
 800e6b4:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800e6b6:	2300      	movs	r3, #0
 800e6b8:	67fb      	str	r3, [r7, #124]	; 0x7c
 800e6ba:	2300      	movs	r3, #0
 800e6bc:	67bb      	str	r3, [r7, #120]	; 0x78
 800e6be:	2300      	movs	r3, #0
 800e6c0:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800e6c2:	687b      	ldr	r3, [r7, #4]
 800e6c4:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800e6c6:	483a      	ldr	r0, [pc, #232]	; (800e7b0 <ethernet_link_thread+0x114>)
 800e6c8:	f7f4 fcc0 	bl	800304c <LAN8742_GetLinkState>
 800e6cc:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 800e6ce:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e6d0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e6d4:	089b      	lsrs	r3, r3, #2
 800e6d6:	f003 0301 	and.w	r3, r3, #1
 800e6da:	b2db      	uxtb	r3, r3
 800e6dc:	2b00      	cmp	r3, #0
 800e6de:	d00c      	beq.n	800e6fa <ethernet_link_thread+0x5e>
 800e6e0:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e6e2:	2b01      	cmp	r3, #1
 800e6e4:	dc09      	bgt.n	800e6fa <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800e6e6:	4833      	ldr	r0, [pc, #204]	; (800e7b4 <ethernet_link_thread+0x118>)
 800e6e8:	f7f6 f834 	bl	8004754 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 800e6ec:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e6ee:	f004 faa7 	bl	8012c40 <netif_set_down>
    netif_set_link_down(netif);
 800e6f2:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e6f4:	f004 fb0a 	bl	8012d0c <netif_set_link_down>
 800e6f8:	e055      	b.n	800e7a6 <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 800e6fa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800e6fc:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800e700:	f003 0304 	and.w	r3, r3, #4
 800e704:	2b00      	cmp	r3, #0
 800e706:	d14e      	bne.n	800e7a6 <ethernet_link_thread+0x10a>
 800e708:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e70a:	2b01      	cmp	r3, #1
 800e70c:	dd4b      	ble.n	800e7a6 <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 800e70e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800e710:	3b02      	subs	r3, #2
 800e712:	2b03      	cmp	r3, #3
 800e714:	d82a      	bhi.n	800e76c <ethernet_link_thread+0xd0>
 800e716:	a201      	add	r2, pc, #4	; (adr r2, 800e71c <ethernet_link_thread+0x80>)
 800e718:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800e71c:	0800e72d 	.word	0x0800e72d
 800e720:	0800e73f 	.word	0x0800e73f
 800e724:	0800e74f 	.word	0x0800e74f
 800e728:	0800e75f 	.word	0x0800e75f
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800e72c:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e730:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800e732:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e736:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800e738:	2301      	movs	r3, #1
 800e73a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800e73c:	e017      	b.n	800e76e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800e73e:	2300      	movs	r3, #0
 800e740:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 800e742:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 800e746:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800e748:	2301      	movs	r3, #1
 800e74a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800e74c:	e00f      	b.n	800e76e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 800e74e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 800e752:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800e754:	2300      	movs	r3, #0
 800e756:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800e758:	2301      	movs	r3, #1
 800e75a:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800e75c:	e007      	b.n	800e76e <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 800e75e:	2300      	movs	r3, #0
 800e760:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 800e762:	2300      	movs	r3, #0
 800e764:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 800e766:	2301      	movs	r3, #1
 800e768:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 800e76a:	e000      	b.n	800e76e <ethernet_link_thread+0xd2>
    default:
      break;
 800e76c:	bf00      	nop
    }

    if(linkchanged)
 800e76e:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 800e770:	2b00      	cmp	r3, #0
 800e772:	d018      	beq.n	800e7a6 <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 800e774:	f107 0308 	add.w	r3, r7, #8
 800e778:	4619      	mov	r1, r3
 800e77a:	480e      	ldr	r0, [pc, #56]	; (800e7b4 <ethernet_link_thread+0x118>)
 800e77c:	f7f6 fbc8 	bl	8004f10 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 800e780:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800e782:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 800e784:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800e786:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 800e788:	f107 0308 	add.w	r3, r7, #8
 800e78c:	4619      	mov	r1, r3
 800e78e:	4809      	ldr	r0, [pc, #36]	; (800e7b4 <ethernet_link_thread+0x118>)
 800e790:	f7f6 fcb5 	bl	80050fe <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800e794:	4807      	ldr	r0, [pc, #28]	; (800e7b4 <ethernet_link_thread+0x118>)
 800e796:	f7f5 ff6d 	bl	8004674 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 800e79a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e79c:	f004 f9e4 	bl	8012b68 <netif_set_up>
      netif_set_link_up(netif);
 800e7a0:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800e7a2:	f004 fa7f 	bl	8012ca4 <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800e7a6:	2064      	movs	r0, #100	; 0x64
 800e7a8:	f000 f951 	bl	800ea4e <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800e7ac:	e78b      	b.n	800e6c6 <ethernet_link_thread+0x2a>
 800e7ae:	bf00      	nop
 800e7b0:	20005f4c 	.word	0x20005f4c
 800e7b4:	20005e64 	.word	0x20005e64

0800e7b8 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 800e7b8:	b580      	push	{r7, lr}
 800e7ba:	b086      	sub	sp, #24
 800e7bc:	af02      	add	r7, sp, #8
 800e7be:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 800e7c0:	4812      	ldr	r0, [pc, #72]	; (800e80c <HAL_ETH_RxAllocateCallback+0x54>)
 800e7c2:	f003 ff45 	bl	8012650 <memp_malloc_pool>
 800e7c6:	60f8      	str	r0, [r7, #12]
  if (p)
 800e7c8:	68fb      	ldr	r3, [r7, #12]
 800e7ca:	2b00      	cmp	r3, #0
 800e7cc:	d014      	beq.n	800e7f8 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 800e7ce:	68fb      	ldr	r3, [r7, #12]
 800e7d0:	f103 0220 	add.w	r2, r3, #32
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 800e7d8:	68fb      	ldr	r3, [r7, #12]
 800e7da:	4a0d      	ldr	r2, [pc, #52]	; (800e810 <HAL_ETH_RxAllocateCallback+0x58>)
 800e7dc:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 800e7de:	687b      	ldr	r3, [r7, #4]
 800e7e0:	681b      	ldr	r3, [r3, #0]
 800e7e2:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800e7e6:	9201      	str	r2, [sp, #4]
 800e7e8:	9300      	str	r3, [sp, #0]
 800e7ea:	68fb      	ldr	r3, [r7, #12]
 800e7ec:	2241      	movs	r2, #65	; 0x41
 800e7ee:	2100      	movs	r1, #0
 800e7f0:	2000      	movs	r0, #0
 800e7f2:	f004 fcaf 	bl	8013154 <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800e7f6:	e005      	b.n	800e804 <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 800e7f8:	4b06      	ldr	r3, [pc, #24]	; (800e814 <HAL_ETH_RxAllocateCallback+0x5c>)
 800e7fa:	2201      	movs	r2, #1
 800e7fc:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	2200      	movs	r2, #0
 800e802:	601a      	str	r2, [r3, #0]
}
 800e804:	bf00      	nop
 800e806:	3710      	adds	r7, #16
 800e808:	46bd      	mov	sp, r7
 800e80a:	bd80      	pop	{r7, pc}
 800e80c:	08020f60 	.word	0x08020f60
 800e810:	0800e421 	.word	0x0800e421
 800e814:	20005e58 	.word	0x20005e58

0800e818 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 800e818:	b580      	push	{r7, lr}
 800e81a:	b088      	sub	sp, #32
 800e81c:	af00      	add	r7, sp, #0
 800e81e:	60f8      	str	r0, [r7, #12]
 800e820:	60b9      	str	r1, [r7, #8]
 800e822:	607a      	str	r2, [r7, #4]
 800e824:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800e826:	68fb      	ldr	r3, [r7, #12]
 800e828:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 800e82a:	68bb      	ldr	r3, [r7, #8]
 800e82c:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 800e82e:	2300      	movs	r3, #0
 800e830:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 800e832:	687b      	ldr	r3, [r7, #4]
 800e834:	3b20      	subs	r3, #32
 800e836:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 800e838:	69fb      	ldr	r3, [r7, #28]
 800e83a:	2200      	movs	r2, #0
 800e83c:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 800e83e:	69fb      	ldr	r3, [r7, #28]
 800e840:	2200      	movs	r2, #0
 800e842:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 800e844:	69fb      	ldr	r3, [r7, #28]
 800e846:	887a      	ldrh	r2, [r7, #2]
 800e848:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 800e84a:	69bb      	ldr	r3, [r7, #24]
 800e84c:	681b      	ldr	r3, [r3, #0]
 800e84e:	2b00      	cmp	r3, #0
 800e850:	d103      	bne.n	800e85a <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 800e852:	69bb      	ldr	r3, [r7, #24]
 800e854:	69fa      	ldr	r2, [r7, #28]
 800e856:	601a      	str	r2, [r3, #0]
 800e858:	e003      	b.n	800e862 <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 800e85a:	697b      	ldr	r3, [r7, #20]
 800e85c:	681b      	ldr	r3, [r3, #0]
 800e85e:	69fa      	ldr	r2, [r7, #28]
 800e860:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 800e862:	697b      	ldr	r3, [r7, #20]
 800e864:	69fa      	ldr	r2, [r7, #28]
 800e866:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 800e868:	69bb      	ldr	r3, [r7, #24]
 800e86a:	681b      	ldr	r3, [r3, #0]
 800e86c:	61fb      	str	r3, [r7, #28]
 800e86e:	e009      	b.n	800e884 <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 800e870:	69fb      	ldr	r3, [r7, #28]
 800e872:	891a      	ldrh	r2, [r3, #8]
 800e874:	887b      	ldrh	r3, [r7, #2]
 800e876:	4413      	add	r3, r2
 800e878:	b29a      	uxth	r2, r3
 800e87a:	69fb      	ldr	r3, [r7, #28]
 800e87c:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 800e87e:	69fb      	ldr	r3, [r7, #28]
 800e880:	681b      	ldr	r3, [r3, #0]
 800e882:	61fb      	str	r3, [r7, #28]
 800e884:	69fb      	ldr	r3, [r7, #28]
 800e886:	2b00      	cmp	r3, #0
 800e888:	d1f2      	bne.n	800e870 <HAL_ETH_RxLinkCallback+0x58>
  }

  /* Invalidate data cache because Rx DMA's writing to physical memory makes it stale. */
  SCB_InvalidateDCache_by_Addr((uint32_t *)buff, Length);
 800e88a:	887b      	ldrh	r3, [r7, #2]
 800e88c:	4619      	mov	r1, r3
 800e88e:	6878      	ldr	r0, [r7, #4]
 800e890:	f7ff faf2 	bl	800de78 <SCB_InvalidateDCache_by_Addr>

/* USER CODE END HAL ETH RxLinkCallback */
}
 800e894:	bf00      	nop
 800e896:	3720      	adds	r7, #32
 800e898:	46bd      	mov	sp, r7
 800e89a:	bd80      	pop	{r7, pc}

0800e89c <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 800e89c:	b580      	push	{r7, lr}
 800e89e:	b082      	sub	sp, #8
 800e8a0:	af00      	add	r7, sp, #0
 800e8a2:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 800e8a4:	6878      	ldr	r0, [r7, #4]
 800e8a6:	f004 fe0f 	bl	80134c8 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800e8aa:	bf00      	nop
 800e8ac:	3708      	adds	r7, #8
 800e8ae:	46bd      	mov	sp, r7
 800e8b0:	bd80      	pop	{r7, pc}
	...

0800e8b4 <RMII_Thread>:
/* USER CODE BEGIN 8 */

/* USER CODE END 8 */

void RMII_Thread( void const * argument )
{
 800e8b4:	b580      	push	{r7, lr}
 800e8b6:	b082      	sub	sp, #8
 800e8b8:	af00      	add	r7, sp, #0
 800e8ba:	6078      	str	r0, [r7, #4]
  (void) argument;

  for(;;)
  {
    /* some unicast good packets are received */
    if(heth.Instance->MMCRGUFCR > 0U)
 800e8bc:	4b15      	ldr	r3, [pc, #84]	; (800e914 <RMII_Thread+0x60>)
 800e8be:	681b      	ldr	r3, [r3, #0]
 800e8c0:	f8d3 31c4 	ldr.w	r3, [r3, #452]	; 0x1c4
 800e8c4:	2b00      	cmp	r3, #0
 800e8c6:	d003      	beq.n	800e8d0 <RMII_Thread+0x1c>
    {
      /* RMII Init is OK: Delete the Thread */
      osThreadTerminate(NULL);
 800e8c8:	2000      	movs	r0, #0
 800e8ca:	f000 f8b4 	bl	800ea36 <osThreadTerminate>
 800e8ce:	e7f5      	b.n	800e8bc <RMII_Thread+0x8>
    }
    else if(heth.Instance->MMCRFCECR > 10U)
 800e8d0:	4b10      	ldr	r3, [pc, #64]	; (800e914 <RMII_Thread+0x60>)
 800e8d2:	681b      	ldr	r3, [r3, #0]
 800e8d4:	f8d3 3194 	ldr.w	r3, [r3, #404]	; 0x194
 800e8d8:	2b0a      	cmp	r3, #10
 800e8da:	d916      	bls.n	800e90a <RMII_Thread+0x56>
    {
      /* ETH received too many packets with CRC errors, resetting RMII */
      SYSCFG->PMC &= ~SYSCFG_PMC_MII_RMII_SEL;
 800e8dc:	4b0e      	ldr	r3, [pc, #56]	; (800e918 <RMII_Thread+0x64>)
 800e8de:	685b      	ldr	r3, [r3, #4]
 800e8e0:	4a0d      	ldr	r2, [pc, #52]	; (800e918 <RMII_Thread+0x64>)
 800e8e2:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 800e8e6:	6053      	str	r3, [r2, #4]
      SYSCFG->PMC |= SYSCFG_PMC_MII_RMII_SEL;
 800e8e8:	4b0b      	ldr	r3, [pc, #44]	; (800e918 <RMII_Thread+0x64>)
 800e8ea:	685b      	ldr	r3, [r3, #4]
 800e8ec:	4a0a      	ldr	r2, [pc, #40]	; (800e918 <RMII_Thread+0x64>)
 800e8ee:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 800e8f2:	6053      	str	r3, [r2, #4]

      heth.Instance->MMCCR |= ETH_MMCCR_CR;
 800e8f4:	4b07      	ldr	r3, [pc, #28]	; (800e914 <RMII_Thread+0x60>)
 800e8f6:	681b      	ldr	r3, [r3, #0]
 800e8f8:	f8d3 2100 	ldr.w	r2, [r3, #256]	; 0x100
 800e8fc:	4b05      	ldr	r3, [pc, #20]	; (800e914 <RMII_Thread+0x60>)
 800e8fe:	681b      	ldr	r3, [r3, #0]
 800e900:	f042 0201 	orr.w	r2, r2, #1
 800e904:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
 800e908:	e7d8      	b.n	800e8bc <RMII_Thread+0x8>
    }
    else
    {
      /* Delay 200 ms */
      osDelay(200);
 800e90a:	20c8      	movs	r0, #200	; 0xc8
 800e90c:	f000 f89f 	bl	800ea4e <osDelay>
    if(heth.Instance->MMCRGUFCR > 0U)
 800e910:	e7d4      	b.n	800e8bc <RMII_Thread+0x8>
 800e912:	bf00      	nop
 800e914:	20005e64 	.word	0x20005e64
 800e918:	40013800 	.word	0x40013800

0800e91c <makeFreeRtosPriority>:

extern void xPortSysTickHandler(void);

/* Convert from CMSIS type osPriority to FreeRTOS priority number */
static unsigned portBASE_TYPE makeFreeRtosPriority (osPriority priority)
{
 800e91c:	b480      	push	{r7}
 800e91e:	b085      	sub	sp, #20
 800e920:	af00      	add	r7, sp, #0
 800e922:	4603      	mov	r3, r0
 800e924:	80fb      	strh	r3, [r7, #6]
  unsigned portBASE_TYPE fpriority = tskIDLE_PRIORITY;
 800e926:	2300      	movs	r3, #0
 800e928:	60fb      	str	r3, [r7, #12]
  
  if (priority != osPriorityError) {
 800e92a:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800e92e:	2b84      	cmp	r3, #132	; 0x84
 800e930:	d005      	beq.n	800e93e <makeFreeRtosPriority+0x22>
    fpriority += (priority - osPriorityIdle);
 800e932:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 800e936:	68fb      	ldr	r3, [r7, #12]
 800e938:	4413      	add	r3, r2
 800e93a:	3303      	adds	r3, #3
 800e93c:	60fb      	str	r3, [r7, #12]
  }
  
  return fpriority;
 800e93e:	68fb      	ldr	r3, [r7, #12]
}
 800e940:	4618      	mov	r0, r3
 800e942:	3714      	adds	r7, #20
 800e944:	46bd      	mov	sp, r7
 800e946:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e94a:	4770      	bx	lr

0800e94c <inHandlerMode>:
#endif


/* Determine whether we are in thread mode or handler mode. */
static int inHandlerMode (void)
{
 800e94c:	b480      	push	{r7}
 800e94e:	b083      	sub	sp, #12
 800e950:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800e952:	f3ef 8305 	mrs	r3, IPSR
 800e956:	607b      	str	r3, [r7, #4]
  return(result);
 800e958:	687b      	ldr	r3, [r7, #4]
  return __get_IPSR() != 0;
 800e95a:	2b00      	cmp	r3, #0
 800e95c:	bf14      	ite	ne
 800e95e:	2301      	movne	r3, #1
 800e960:	2300      	moveq	r3, #0
 800e962:	b2db      	uxtb	r3, r3
}
 800e964:	4618      	mov	r0, r3
 800e966:	370c      	adds	r7, #12
 800e968:	46bd      	mov	sp, r7
 800e96a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e96e:	4770      	bx	lr

0800e970 <osKernelStart>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval status code that indicates the execution status of the function
* @note   MUST REMAIN UNCHANGED: \b osKernelStart shall be consistent in every CMSIS-RTOS.
*/
osStatus osKernelStart (void)
{
 800e970:	b580      	push	{r7, lr}
 800e972:	af00      	add	r7, sp, #0
  vTaskStartScheduler();
 800e974:	f001 fd5a 	bl	801042c <vTaskStartScheduler>
  
  return osOK;
 800e978:	2300      	movs	r3, #0
}
 800e97a:	4618      	mov	r0, r3
 800e97c:	bd80      	pop	{r7, pc}

0800e97e <osKernelSysTick>:
* @param  None
* @retval None
* @note   MUST REMAIN UNCHANGED: \b osKernelSysTick shall be consistent in every CMSIS-RTOS.
*/
uint32_t osKernelSysTick(void)
{
 800e97e:	b580      	push	{r7, lr}
 800e980:	af00      	add	r7, sp, #0
  if (inHandlerMode()) {
 800e982:	f7ff ffe3 	bl	800e94c <inHandlerMode>
 800e986:	4603      	mov	r3, r0
 800e988:	2b00      	cmp	r3, #0
 800e98a:	d003      	beq.n	800e994 <osKernelSysTick+0x16>
    return xTaskGetTickCountFromISR();
 800e98c:	f001 fe78 	bl	8010680 <xTaskGetTickCountFromISR>
 800e990:	4603      	mov	r3, r0
 800e992:	e002      	b.n	800e99a <osKernelSysTick+0x1c>
  }
  else {
    return xTaskGetTickCount();
 800e994:	f001 fe64 	bl	8010660 <xTaskGetTickCount>
 800e998:	4603      	mov	r3, r0
  }
}
 800e99a:	4618      	mov	r0, r3
 800e99c:	bd80      	pop	{r7, pc}

0800e99e <osThreadCreate>:
* @param  argument      pointer that is passed to the thread function as start argument.
* @retval thread ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osThreadCreate shall be consistent in every CMSIS-RTOS.
*/
osThreadId osThreadCreate (const osThreadDef_t *thread_def, void *argument)
{
 800e99e:	b5f0      	push	{r4, r5, r6, r7, lr}
 800e9a0:	b089      	sub	sp, #36	; 0x24
 800e9a2:	af04      	add	r7, sp, #16
 800e9a4:	6078      	str	r0, [r7, #4]
 800e9a6:	6039      	str	r1, [r7, #0]
  TaskHandle_t handle;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) &&  ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
  if((thread_def->buffer != NULL) && (thread_def->controlblock != NULL)) {
 800e9a8:	687b      	ldr	r3, [r7, #4]
 800e9aa:	695b      	ldr	r3, [r3, #20]
 800e9ac:	2b00      	cmp	r3, #0
 800e9ae:	d020      	beq.n	800e9f2 <osThreadCreate+0x54>
 800e9b0:	687b      	ldr	r3, [r7, #4]
 800e9b2:	699b      	ldr	r3, [r3, #24]
 800e9b4:	2b00      	cmp	r3, #0
 800e9b6:	d01c      	beq.n	800e9f2 <osThreadCreate+0x54>
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e9b8:	687b      	ldr	r3, [r7, #4]
 800e9ba:	685c      	ldr	r4, [r3, #4]
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800e9c0:	687b      	ldr	r3, [r7, #4]
 800e9c2:	691e      	ldr	r6, [r3, #16]
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e9ca:	4618      	mov	r0, r3
 800e9cc:	f7ff ffa6 	bl	800e91c <makeFreeRtosPriority>
 800e9d0:	4601      	mov	r1, r0
              thread_def->buffer, thread_def->controlblock);
 800e9d2:	687b      	ldr	r3, [r7, #4]
 800e9d4:	695b      	ldr	r3, [r3, #20]
 800e9d6:	687a      	ldr	r2, [r7, #4]
 800e9d8:	6992      	ldr	r2, [r2, #24]
    handle = xTaskCreateStatic((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e9da:	9202      	str	r2, [sp, #8]
 800e9dc:	9301      	str	r3, [sp, #4]
 800e9de:	9100      	str	r1, [sp, #0]
 800e9e0:	683b      	ldr	r3, [r7, #0]
 800e9e2:	4632      	mov	r2, r6
 800e9e4:	4629      	mov	r1, r5
 800e9e6:	4620      	mov	r0, r4
 800e9e8:	f001 faa6 	bl	800ff38 <xTaskCreateStatic>
 800e9ec:	4603      	mov	r3, r0
 800e9ee:	60fb      	str	r3, [r7, #12]
 800e9f0:	e01c      	b.n	800ea2c <osThreadCreate+0x8e>
  }
  else {
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e9f2:	687b      	ldr	r3, [r7, #4]
 800e9f4:	685c      	ldr	r4, [r3, #4]
 800e9f6:	687b      	ldr	r3, [r7, #4]
 800e9f8:	681d      	ldr	r5, [r3, #0]
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	691b      	ldr	r3, [r3, #16]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800e9fe:	b29e      	uxth	r6, r3
              thread_def->stacksize, argument, makeFreeRtosPriority(thread_def->tpriority),
 800ea00:	687b      	ldr	r3, [r7, #4]
 800ea02:	f9b3 3008 	ldrsh.w	r3, [r3, #8]
    if (xTaskCreate((TaskFunction_t)thread_def->pthread,(const portCHAR *)thread_def->name,
 800ea06:	4618      	mov	r0, r3
 800ea08:	f7ff ff88 	bl	800e91c <makeFreeRtosPriority>
 800ea0c:	4602      	mov	r2, r0
 800ea0e:	f107 030c 	add.w	r3, r7, #12
 800ea12:	9301      	str	r3, [sp, #4]
 800ea14:	9200      	str	r2, [sp, #0]
 800ea16:	683b      	ldr	r3, [r7, #0]
 800ea18:	4632      	mov	r2, r6
 800ea1a:	4629      	mov	r1, r5
 800ea1c:	4620      	mov	r0, r4
 800ea1e:	f001 faee 	bl	800fffe <xTaskCreate>
 800ea22:	4603      	mov	r3, r0
 800ea24:	2b01      	cmp	r3, #1
 800ea26:	d001      	beq.n	800ea2c <osThreadCreate+0x8e>
              &handle) != pdPASS)  {
      return NULL;
 800ea28:	2300      	movs	r3, #0
 800ea2a:	e000      	b.n	800ea2e <osThreadCreate+0x90>
                   &handle) != pdPASS)  {
    return NULL;
  }     
#endif
  
  return handle;
 800ea2c:	68fb      	ldr	r3, [r7, #12]
}
 800ea2e:	4618      	mov	r0, r3
 800ea30:	3714      	adds	r7, #20
 800ea32:	46bd      	mov	sp, r7
 800ea34:	bdf0      	pop	{r4, r5, r6, r7, pc}

0800ea36 <osThreadTerminate>:
* @param   thread_id   thread ID obtained by \ref osThreadCreate or \ref osThreadGetId.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osThreadTerminate shall be consistent in every CMSIS-RTOS.
*/
osStatus osThreadTerminate (osThreadId thread_id)
{
 800ea36:	b580      	push	{r7, lr}
 800ea38:	b082      	sub	sp, #8
 800ea3a:	af00      	add	r7, sp, #0
 800ea3c:	6078      	str	r0, [r7, #4]
#if (INCLUDE_vTaskDelete == 1)
  vTaskDelete(thread_id);
 800ea3e:	6878      	ldr	r0, [r7, #4]
 800ea40:	f001 fc2c 	bl	801029c <vTaskDelete>
  return osOK;
 800ea44:	2300      	movs	r3, #0
#else
  return osErrorOS;
#endif
}
 800ea46:	4618      	mov	r0, r3
 800ea48:	3708      	adds	r7, #8
 800ea4a:	46bd      	mov	sp, r7
 800ea4c:	bd80      	pop	{r7, pc}

0800ea4e <osDelay>:
* @brief   Wait for Timeout (Time Delay)
* @param   millisec      time delay value
* @retval  status code that indicates the execution status of the function.
*/
osStatus osDelay (uint32_t millisec)
{
 800ea4e:	b580      	push	{r7, lr}
 800ea50:	b084      	sub	sp, #16
 800ea52:	af00      	add	r7, sp, #0
 800ea54:	6078      	str	r0, [r7, #4]
#if INCLUDE_vTaskDelay
  TickType_t ticks = millisec / portTICK_PERIOD_MS;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	60fb      	str	r3, [r7, #12]
  
  vTaskDelay(ticks ? ticks : 1);          /* Minimum delay = 1 tick */
 800ea5a:	68fb      	ldr	r3, [r7, #12]
 800ea5c:	2b00      	cmp	r3, #0
 800ea5e:	d001      	beq.n	800ea64 <osDelay+0x16>
 800ea60:	68fb      	ldr	r3, [r7, #12]
 800ea62:	e000      	b.n	800ea66 <osDelay+0x18>
 800ea64:	2301      	movs	r3, #1
 800ea66:	4618      	mov	r0, r3
 800ea68:	f001 fcaa 	bl	80103c0 <vTaskDelay>
  
  return osOK;
 800ea6c:	2300      	movs	r3, #0
#else
  (void) millisec;
  
  return osErrorResource;
#endif
}
 800ea6e:	4618      	mov	r0, r3
 800ea70:	3710      	adds	r7, #16
 800ea72:	46bd      	mov	sp, r7
 800ea74:	bd80      	pop	{r7, pc}

0800ea76 <osMutexCreate>:
* @param  mutex_def     mutex definition referenced with \ref osMutex.
* @retval  mutex ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMutexCreate shall be consistent in every CMSIS-RTOS.
*/
osMutexId osMutexCreate (const osMutexDef_t *mutex_def)
{
 800ea76:	b580      	push	{r7, lr}
 800ea78:	b082      	sub	sp, #8
 800ea7a:	af00      	add	r7, sp, #0
 800ea7c:	6078      	str	r0, [r7, #4]
#if ( configUSE_MUTEXES == 1)

#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if (mutex_def->controlblock != NULL) {
 800ea7e:	687b      	ldr	r3, [r7, #4]
 800ea80:	685b      	ldr	r3, [r3, #4]
 800ea82:	2b00      	cmp	r3, #0
 800ea84:	d007      	beq.n	800ea96 <osMutexCreate+0x20>
    return xSemaphoreCreateMutexStatic( mutex_def->controlblock );
 800ea86:	687b      	ldr	r3, [r7, #4]
 800ea88:	685b      	ldr	r3, [r3, #4]
 800ea8a:	4619      	mov	r1, r3
 800ea8c:	2001      	movs	r0, #1
 800ea8e:	f000 fc54 	bl	800f33a <xQueueCreateMutexStatic>
 800ea92:	4603      	mov	r3, r0
 800ea94:	e003      	b.n	800ea9e <osMutexCreate+0x28>
     }
  else {
    return xSemaphoreCreateMutex(); 
 800ea96:	2001      	movs	r0, #1
 800ea98:	f000 fc37 	bl	800f30a <xQueueCreateMutex>
 800ea9c:	4603      	mov	r3, r0
    return xSemaphoreCreateMutex(); 
#endif
#else
  return NULL;
#endif
}
 800ea9e:	4618      	mov	r0, r3
 800eaa0:	3708      	adds	r7, #8
 800eaa2:	46bd      	mov	sp, r7
 800eaa4:	bd80      	pop	{r7, pc}
	...

0800eaa8 <osMutexWait>:
* @param millisec      timeout value or 0 in case of no time-out.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexWait shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexWait (osMutexId mutex_id, uint32_t millisec)
{
 800eaa8:	b580      	push	{r7, lr}
 800eaaa:	b084      	sub	sp, #16
 800eaac:	af00      	add	r7, sp, #0
 800eaae:	6078      	str	r0, [r7, #4]
 800eab0:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800eab2:	2300      	movs	r3, #0
 800eab4:	60bb      	str	r3, [r7, #8]
  
  
  if (mutex_id == NULL) {
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	2b00      	cmp	r3, #0
 800eaba:	d101      	bne.n	800eac0 <osMutexWait+0x18>
    return osErrorParameter;
 800eabc:	2380      	movs	r3, #128	; 0x80
 800eabe:	e03a      	b.n	800eb36 <osMutexWait+0x8e>
  }
  
  ticks = 0;
 800eac0:	2300      	movs	r3, #0
 800eac2:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800eac4:	683b      	ldr	r3, [r7, #0]
 800eac6:	f1b3 3fff 	cmp.w	r3, #4294967295
 800eaca:	d103      	bne.n	800ead4 <osMutexWait+0x2c>
    ticks = portMAX_DELAY;
 800eacc:	f04f 33ff 	mov.w	r3, #4294967295
 800ead0:	60fb      	str	r3, [r7, #12]
 800ead2:	e009      	b.n	800eae8 <osMutexWait+0x40>
  }
  else if (millisec != 0) {
 800ead4:	683b      	ldr	r3, [r7, #0]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d006      	beq.n	800eae8 <osMutexWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800eada:	683b      	ldr	r3, [r7, #0]
 800eadc:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800eade:	68fb      	ldr	r3, [r7, #12]
 800eae0:	2b00      	cmp	r3, #0
 800eae2:	d101      	bne.n	800eae8 <osMutexWait+0x40>
      ticks = 1;
 800eae4:	2301      	movs	r3, #1
 800eae6:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800eae8:	f7ff ff30 	bl	800e94c <inHandlerMode>
 800eaec:	4603      	mov	r3, r0
 800eaee:	2b00      	cmp	r3, #0
 800eaf0:	d017      	beq.n	800eb22 <osMutexWait+0x7a>
    if (xSemaphoreTakeFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800eaf2:	f107 0308 	add.w	r3, r7, #8
 800eaf6:	461a      	mov	r2, r3
 800eaf8:	2100      	movs	r1, #0
 800eafa:	6878      	ldr	r0, [r7, #4]
 800eafc:	f001 f86e 	bl	800fbdc <xQueueReceiveFromISR>
 800eb00:	4603      	mov	r3, r0
 800eb02:	2b01      	cmp	r3, #1
 800eb04:	d001      	beq.n	800eb0a <osMutexWait+0x62>
      return osErrorOS;
 800eb06:	23ff      	movs	r3, #255	; 0xff
 800eb08:	e015      	b.n	800eb36 <osMutexWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800eb0a:	68bb      	ldr	r3, [r7, #8]
 800eb0c:	2b00      	cmp	r3, #0
 800eb0e:	d011      	beq.n	800eb34 <osMutexWait+0x8c>
 800eb10:	4b0b      	ldr	r3, [pc, #44]	; (800eb40 <osMutexWait+0x98>)
 800eb12:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb16:	601a      	str	r2, [r3, #0]
 800eb18:	f3bf 8f4f 	dsb	sy
 800eb1c:	f3bf 8f6f 	isb	sy
 800eb20:	e008      	b.n	800eb34 <osMutexWait+0x8c>
  } 
  else if (xSemaphoreTake(mutex_id, ticks) != pdTRUE) {
 800eb22:	68f9      	ldr	r1, [r7, #12]
 800eb24:	6878      	ldr	r0, [r7, #4]
 800eb26:	f000 ff45 	bl	800f9b4 <xQueueSemaphoreTake>
 800eb2a:	4603      	mov	r3, r0
 800eb2c:	2b01      	cmp	r3, #1
 800eb2e:	d001      	beq.n	800eb34 <osMutexWait+0x8c>
    return osErrorOS;
 800eb30:	23ff      	movs	r3, #255	; 0xff
 800eb32:	e000      	b.n	800eb36 <osMutexWait+0x8e>
  }
  
  return osOK;
 800eb34:	2300      	movs	r3, #0
}
 800eb36:	4618      	mov	r0, r3
 800eb38:	3710      	adds	r7, #16
 800eb3a:	46bd      	mov	sp, r7
 800eb3c:	bd80      	pop	{r7, pc}
 800eb3e:	bf00      	nop
 800eb40:	e000ed04 	.word	0xe000ed04

0800eb44 <osMutexRelease>:
* @param mutex_id      mutex ID obtained by \ref osMutexCreate.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMutexRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osMutexRelease (osMutexId mutex_id)
{
 800eb44:	b580      	push	{r7, lr}
 800eb46:	b084      	sub	sp, #16
 800eb48:	af00      	add	r7, sp, #0
 800eb4a:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800eb4c:	2300      	movs	r3, #0
 800eb4e:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800eb50:	2300      	movs	r3, #0
 800eb52:	60bb      	str	r3, [r7, #8]
  
  if (inHandlerMode()) {
 800eb54:	f7ff fefa 	bl	800e94c <inHandlerMode>
 800eb58:	4603      	mov	r3, r0
 800eb5a:	2b00      	cmp	r3, #0
 800eb5c:	d016      	beq.n	800eb8c <osMutexRelease+0x48>
    if (xSemaphoreGiveFromISR(mutex_id, &taskWoken) != pdTRUE) {
 800eb5e:	f107 0308 	add.w	r3, r7, #8
 800eb62:	4619      	mov	r1, r3
 800eb64:	6878      	ldr	r0, [r7, #4]
 800eb66:	f000 fda9 	bl	800f6bc <xQueueGiveFromISR>
 800eb6a:	4603      	mov	r3, r0
 800eb6c:	2b01      	cmp	r3, #1
 800eb6e:	d001      	beq.n	800eb74 <osMutexRelease+0x30>
      return osErrorOS;
 800eb70:	23ff      	movs	r3, #255	; 0xff
 800eb72:	e017      	b.n	800eba4 <osMutexRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800eb74:	68bb      	ldr	r3, [r7, #8]
 800eb76:	2b00      	cmp	r3, #0
 800eb78:	d013      	beq.n	800eba2 <osMutexRelease+0x5e>
 800eb7a:	4b0c      	ldr	r3, [pc, #48]	; (800ebac <osMutexRelease+0x68>)
 800eb7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800eb80:	601a      	str	r2, [r3, #0]
 800eb82:	f3bf 8f4f 	dsb	sy
 800eb86:	f3bf 8f6f 	isb	sy
 800eb8a:	e00a      	b.n	800eba2 <osMutexRelease+0x5e>
  }
  else if (xSemaphoreGive(mutex_id) != pdTRUE) 
 800eb8c:	2300      	movs	r3, #0
 800eb8e:	2200      	movs	r2, #0
 800eb90:	2100      	movs	r1, #0
 800eb92:	6878      	ldr	r0, [r7, #4]
 800eb94:	f000 fbec 	bl	800f370 <xQueueGenericSend>
 800eb98:	4603      	mov	r3, r0
 800eb9a:	2b01      	cmp	r3, #1
 800eb9c:	d001      	beq.n	800eba2 <osMutexRelease+0x5e>
  {
    result = osErrorOS;
 800eb9e:	23ff      	movs	r3, #255	; 0xff
 800eba0:	60fb      	str	r3, [r7, #12]
  }
  return result;
 800eba2:	68fb      	ldr	r3, [r7, #12]
}
 800eba4:	4618      	mov	r0, r3
 800eba6:	3710      	adds	r7, #16
 800eba8:	46bd      	mov	sp, r7
 800ebaa:	bd80      	pop	{r7, pc}
 800ebac:	e000ed04 	.word	0xe000ed04

0800ebb0 <osSemaphoreCreate>:
* @param count         number of available resources.
* @retval  semaphore ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreCreate shall be consistent in every CMSIS-RTOS.
*/
osSemaphoreId osSemaphoreCreate (const osSemaphoreDef_t *semaphore_def, int32_t count)
{ 
 800ebb0:	b580      	push	{r7, lr}
 800ebb2:	b086      	sub	sp, #24
 800ebb4:	af02      	add	r7, sp, #8
 800ebb6:	6078      	str	r0, [r7, #4]
 800ebb8:	6039      	str	r1, [r7, #0]
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  osSemaphoreId sema;
  
  if (semaphore_def->controlblock != NULL){
 800ebba:	687b      	ldr	r3, [r7, #4]
 800ebbc:	685b      	ldr	r3, [r3, #4]
 800ebbe:	2b00      	cmp	r3, #0
 800ebc0:	d00f      	beq.n	800ebe2 <osSemaphoreCreate+0x32>
    if (count == 1) {
 800ebc2:	683b      	ldr	r3, [r7, #0]
 800ebc4:	2b01      	cmp	r3, #1
 800ebc6:	d10a      	bne.n	800ebde <osSemaphoreCreate+0x2e>
      return xSemaphoreCreateBinaryStatic( semaphore_def->controlblock );
 800ebc8:	687b      	ldr	r3, [r7, #4]
 800ebca:	685b      	ldr	r3, [r3, #4]
 800ebcc:	2203      	movs	r2, #3
 800ebce:	9200      	str	r2, [sp, #0]
 800ebd0:	2200      	movs	r2, #0
 800ebd2:	2100      	movs	r1, #0
 800ebd4:	2001      	movs	r0, #1
 800ebd6:	f000 fa9b 	bl	800f110 <xQueueGenericCreateStatic>
 800ebda:	4603      	mov	r3, r0
 800ebdc:	e016      	b.n	800ec0c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )
      return xSemaphoreCreateCountingStatic( count, count, semaphore_def->controlblock );
#else
      return NULL;
 800ebde:	2300      	movs	r3, #0
 800ebe0:	e014      	b.n	800ec0c <osSemaphoreCreate+0x5c>
#endif
    }
  }
  else {
    if (count == 1) {
 800ebe2:	683b      	ldr	r3, [r7, #0]
 800ebe4:	2b01      	cmp	r3, #1
 800ebe6:	d110      	bne.n	800ec0a <osSemaphoreCreate+0x5a>
      vSemaphoreCreateBinary(sema);
 800ebe8:	2203      	movs	r2, #3
 800ebea:	2100      	movs	r1, #0
 800ebec:	2001      	movs	r0, #1
 800ebee:	f000 fb11 	bl	800f214 <xQueueGenericCreate>
 800ebf2:	60f8      	str	r0, [r7, #12]
 800ebf4:	68fb      	ldr	r3, [r7, #12]
 800ebf6:	2b00      	cmp	r3, #0
 800ebf8:	d005      	beq.n	800ec06 <osSemaphoreCreate+0x56>
 800ebfa:	2300      	movs	r3, #0
 800ebfc:	2200      	movs	r2, #0
 800ebfe:	2100      	movs	r1, #0
 800ec00:	68f8      	ldr	r0, [r7, #12]
 800ec02:	f000 fbb5 	bl	800f370 <xQueueGenericSend>
      return sema;
 800ec06:	68fb      	ldr	r3, [r7, #12]
 800ec08:	e000      	b.n	800ec0c <osSemaphoreCreate+0x5c>
    }
    else {
#if (configUSE_COUNTING_SEMAPHORES == 1 )	
      return xSemaphoreCreateCounting(count, count);
#else
      return NULL;
 800ec0a:	2300      	movs	r3, #0
#else
    return NULL;
#endif
  }
#endif
}
 800ec0c:	4618      	mov	r0, r3
 800ec0e:	3710      	adds	r7, #16
 800ec10:	46bd      	mov	sp, r7
 800ec12:	bd80      	pop	{r7, pc}

0800ec14 <osSemaphoreWait>:
* @param  millisec      timeout value or 0 in case of no time-out.
* @retval  number of available tokens, or -1 in case of incorrect parameters.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreWait shall be consistent in every CMSIS-RTOS.
*/
int32_t osSemaphoreWait (osSemaphoreId semaphore_id, uint32_t millisec)
{
 800ec14:	b580      	push	{r7, lr}
 800ec16:	b084      	sub	sp, #16
 800ec18:	af00      	add	r7, sp, #0
 800ec1a:	6078      	str	r0, [r7, #4]
 800ec1c:	6039      	str	r1, [r7, #0]
  TickType_t ticks;
  portBASE_TYPE taskWoken = pdFALSE;  
 800ec1e:	2300      	movs	r3, #0
 800ec20:	60bb      	str	r3, [r7, #8]
  
  
  if (semaphore_id == NULL) {
 800ec22:	687b      	ldr	r3, [r7, #4]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d101      	bne.n	800ec2c <osSemaphoreWait+0x18>
    return osErrorParameter;
 800ec28:	2380      	movs	r3, #128	; 0x80
 800ec2a:	e03a      	b.n	800eca2 <osSemaphoreWait+0x8e>
  }
  
  ticks = 0;
 800ec2c:	2300      	movs	r3, #0
 800ec2e:	60fb      	str	r3, [r7, #12]
  if (millisec == osWaitForever) {
 800ec30:	683b      	ldr	r3, [r7, #0]
 800ec32:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ec36:	d103      	bne.n	800ec40 <osSemaphoreWait+0x2c>
    ticks = portMAX_DELAY;
 800ec38:	f04f 33ff 	mov.w	r3, #4294967295
 800ec3c:	60fb      	str	r3, [r7, #12]
 800ec3e:	e009      	b.n	800ec54 <osSemaphoreWait+0x40>
  }
  else if (millisec != 0) {
 800ec40:	683b      	ldr	r3, [r7, #0]
 800ec42:	2b00      	cmp	r3, #0
 800ec44:	d006      	beq.n	800ec54 <osSemaphoreWait+0x40>
    ticks = millisec / portTICK_PERIOD_MS;
 800ec46:	683b      	ldr	r3, [r7, #0]
 800ec48:	60fb      	str	r3, [r7, #12]
    if (ticks == 0) {
 800ec4a:	68fb      	ldr	r3, [r7, #12]
 800ec4c:	2b00      	cmp	r3, #0
 800ec4e:	d101      	bne.n	800ec54 <osSemaphoreWait+0x40>
      ticks = 1;
 800ec50:	2301      	movs	r3, #1
 800ec52:	60fb      	str	r3, [r7, #12]
    }
  }
  
  if (inHandlerMode()) {
 800ec54:	f7ff fe7a 	bl	800e94c <inHandlerMode>
 800ec58:	4603      	mov	r3, r0
 800ec5a:	2b00      	cmp	r3, #0
 800ec5c:	d017      	beq.n	800ec8e <osSemaphoreWait+0x7a>
    if (xSemaphoreTakeFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ec5e:	f107 0308 	add.w	r3, r7, #8
 800ec62:	461a      	mov	r2, r3
 800ec64:	2100      	movs	r1, #0
 800ec66:	6878      	ldr	r0, [r7, #4]
 800ec68:	f000 ffb8 	bl	800fbdc <xQueueReceiveFromISR>
 800ec6c:	4603      	mov	r3, r0
 800ec6e:	2b01      	cmp	r3, #1
 800ec70:	d001      	beq.n	800ec76 <osSemaphoreWait+0x62>
      return osErrorOS;
 800ec72:	23ff      	movs	r3, #255	; 0xff
 800ec74:	e015      	b.n	800eca2 <osSemaphoreWait+0x8e>
    }
	portEND_SWITCHING_ISR(taskWoken);
 800ec76:	68bb      	ldr	r3, [r7, #8]
 800ec78:	2b00      	cmp	r3, #0
 800ec7a:	d011      	beq.n	800eca0 <osSemaphoreWait+0x8c>
 800ec7c:	4b0b      	ldr	r3, [pc, #44]	; (800ecac <osSemaphoreWait+0x98>)
 800ec7e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ec82:	601a      	str	r2, [r3, #0]
 800ec84:	f3bf 8f4f 	dsb	sy
 800ec88:	f3bf 8f6f 	isb	sy
 800ec8c:	e008      	b.n	800eca0 <osSemaphoreWait+0x8c>
  }  
  else if (xSemaphoreTake(semaphore_id, ticks) != pdTRUE) {
 800ec8e:	68f9      	ldr	r1, [r7, #12]
 800ec90:	6878      	ldr	r0, [r7, #4]
 800ec92:	f000 fe8f 	bl	800f9b4 <xQueueSemaphoreTake>
 800ec96:	4603      	mov	r3, r0
 800ec98:	2b01      	cmp	r3, #1
 800ec9a:	d001      	beq.n	800eca0 <osSemaphoreWait+0x8c>
    return osErrorOS;
 800ec9c:	23ff      	movs	r3, #255	; 0xff
 800ec9e:	e000      	b.n	800eca2 <osSemaphoreWait+0x8e>
  }
  
  return osOK;
 800eca0:	2300      	movs	r3, #0
}
 800eca2:	4618      	mov	r0, r3
 800eca4:	3710      	adds	r7, #16
 800eca6:	46bd      	mov	sp, r7
 800eca8:	bd80      	pop	{r7, pc}
 800ecaa:	bf00      	nop
 800ecac:	e000ed04 	.word	0xe000ed04

0800ecb0 <osSemaphoreRelease>:
* @param  semaphore_id  semaphore object referenced with \ref osSemaphore.
* @retval  status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osSemaphoreRelease shall be consistent in every CMSIS-RTOS.
*/
osStatus osSemaphoreRelease (osSemaphoreId semaphore_id)
{
 800ecb0:	b580      	push	{r7, lr}
 800ecb2:	b084      	sub	sp, #16
 800ecb4:	af00      	add	r7, sp, #0
 800ecb6:	6078      	str	r0, [r7, #4]
  osStatus result = osOK;
 800ecb8:	2300      	movs	r3, #0
 800ecba:	60fb      	str	r3, [r7, #12]
  portBASE_TYPE taskWoken = pdFALSE;
 800ecbc:	2300      	movs	r3, #0
 800ecbe:	60bb      	str	r3, [r7, #8]
  
  
  if (inHandlerMode()) {
 800ecc0:	f7ff fe44 	bl	800e94c <inHandlerMode>
 800ecc4:	4603      	mov	r3, r0
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d016      	beq.n	800ecf8 <osSemaphoreRelease+0x48>
    if (xSemaphoreGiveFromISR(semaphore_id, &taskWoken) != pdTRUE) {
 800ecca:	f107 0308 	add.w	r3, r7, #8
 800ecce:	4619      	mov	r1, r3
 800ecd0:	6878      	ldr	r0, [r7, #4]
 800ecd2:	f000 fcf3 	bl	800f6bc <xQueueGiveFromISR>
 800ecd6:	4603      	mov	r3, r0
 800ecd8:	2b01      	cmp	r3, #1
 800ecda:	d001      	beq.n	800ece0 <osSemaphoreRelease+0x30>
      return osErrorOS;
 800ecdc:	23ff      	movs	r3, #255	; 0xff
 800ecde:	e017      	b.n	800ed10 <osSemaphoreRelease+0x60>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ece0:	68bb      	ldr	r3, [r7, #8]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d013      	beq.n	800ed0e <osSemaphoreRelease+0x5e>
 800ece6:	4b0c      	ldr	r3, [pc, #48]	; (800ed18 <osSemaphoreRelease+0x68>)
 800ece8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ecec:	601a      	str	r2, [r3, #0]
 800ecee:	f3bf 8f4f 	dsb	sy
 800ecf2:	f3bf 8f6f 	isb	sy
 800ecf6:	e00a      	b.n	800ed0e <osSemaphoreRelease+0x5e>
  }
  else {
    if (xSemaphoreGive(semaphore_id) != pdTRUE) {
 800ecf8:	2300      	movs	r3, #0
 800ecfa:	2200      	movs	r2, #0
 800ecfc:	2100      	movs	r1, #0
 800ecfe:	6878      	ldr	r0, [r7, #4]
 800ed00:	f000 fb36 	bl	800f370 <xQueueGenericSend>
 800ed04:	4603      	mov	r3, r0
 800ed06:	2b01      	cmp	r3, #1
 800ed08:	d001      	beq.n	800ed0e <osSemaphoreRelease+0x5e>
      result = osErrorOS;
 800ed0a:	23ff      	movs	r3, #255	; 0xff
 800ed0c:	60fb      	str	r3, [r7, #12]
    }
  }
  
  return result;
 800ed0e:	68fb      	ldr	r3, [r7, #12]
}
 800ed10:	4618      	mov	r0, r3
 800ed12:	3710      	adds	r7, #16
 800ed14:	46bd      	mov	sp, r7
 800ed16:	bd80      	pop	{r7, pc}
 800ed18:	e000ed04 	.word	0xe000ed04

0800ed1c <osMessageCreate>:
* @param  thread_id     thread ID (obtained by \ref osThreadCreate or \ref osThreadGetId) or NULL.
* @retval  message queue ID for reference by other functions or NULL in case of error.
* @note   MUST REMAIN UNCHANGED: \b osMessageCreate shall be consistent in every CMSIS-RTOS.
*/
osMessageQId osMessageCreate (const osMessageQDef_t *queue_def, osThreadId thread_id)
{
 800ed1c:	b590      	push	{r4, r7, lr}
 800ed1e:	b085      	sub	sp, #20
 800ed20:	af02      	add	r7, sp, #8
 800ed22:	6078      	str	r0, [r7, #4]
 800ed24:	6039      	str	r1, [r7, #0]
  (void) thread_id;
  
#if( configSUPPORT_STATIC_ALLOCATION == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

  if ((queue_def->buffer != NULL) && (queue_def->controlblock != NULL)) {
 800ed26:	687b      	ldr	r3, [r7, #4]
 800ed28:	689b      	ldr	r3, [r3, #8]
 800ed2a:	2b00      	cmp	r3, #0
 800ed2c:	d011      	beq.n	800ed52 <osMessageCreate+0x36>
 800ed2e:	687b      	ldr	r3, [r7, #4]
 800ed30:	68db      	ldr	r3, [r3, #12]
 800ed32:	2b00      	cmp	r3, #0
 800ed34:	d00d      	beq.n	800ed52 <osMessageCreate+0x36>
    return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
 800ed36:	687b      	ldr	r3, [r7, #4]
 800ed38:	6818      	ldr	r0, [r3, #0]
 800ed3a:	687b      	ldr	r3, [r7, #4]
 800ed3c:	6859      	ldr	r1, [r3, #4]
 800ed3e:	687b      	ldr	r3, [r7, #4]
 800ed40:	689a      	ldr	r2, [r3, #8]
 800ed42:	687b      	ldr	r3, [r7, #4]
 800ed44:	68db      	ldr	r3, [r3, #12]
 800ed46:	2400      	movs	r4, #0
 800ed48:	9400      	str	r4, [sp, #0]
 800ed4a:	f000 f9e1 	bl	800f110 <xQueueGenericCreateStatic>
 800ed4e:	4603      	mov	r3, r0
 800ed50:	e008      	b.n	800ed64 <osMessageCreate+0x48>
  }
  else {
    return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	6818      	ldr	r0, [r3, #0]
 800ed56:	687b      	ldr	r3, [r7, #4]
 800ed58:	685b      	ldr	r3, [r3, #4]
 800ed5a:	2200      	movs	r2, #0
 800ed5c:	4619      	mov	r1, r3
 800ed5e:	f000 fa59 	bl	800f214 <xQueueGenericCreate>
 800ed62:	4603      	mov	r3, r0
#elif ( configSUPPORT_STATIC_ALLOCATION == 1 )
  return xQueueCreateStatic(queue_def->queue_sz, queue_def->item_sz, queue_def->buffer, queue_def->controlblock);
#else  
  return xQueueCreate(queue_def->queue_sz, queue_def->item_sz);
#endif
}
 800ed64:	4618      	mov	r0, r3
 800ed66:	370c      	adds	r7, #12
 800ed68:	46bd      	mov	sp, r7
 800ed6a:	bd90      	pop	{r4, r7, pc}

0800ed6c <osMessagePut>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval status code that indicates the execution status of the function.
* @note   MUST REMAIN UNCHANGED: \b osMessagePut shall be consistent in every CMSIS-RTOS.
*/
osStatus osMessagePut (osMessageQId queue_id, uint32_t info, uint32_t millisec)
{
 800ed6c:	b580      	push	{r7, lr}
 800ed6e:	b086      	sub	sp, #24
 800ed70:	af00      	add	r7, sp, #0
 800ed72:	60f8      	str	r0, [r7, #12]
 800ed74:	60b9      	str	r1, [r7, #8]
 800ed76:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken = pdFALSE;
 800ed78:	2300      	movs	r3, #0
 800ed7a:	613b      	str	r3, [r7, #16]
  TickType_t ticks;
  
  ticks = millisec / portTICK_PERIOD_MS;
 800ed7c:	687b      	ldr	r3, [r7, #4]
 800ed7e:	617b      	str	r3, [r7, #20]
  if (ticks == 0) {
 800ed80:	697b      	ldr	r3, [r7, #20]
 800ed82:	2b00      	cmp	r3, #0
 800ed84:	d101      	bne.n	800ed8a <osMessagePut+0x1e>
    ticks = 1;
 800ed86:	2301      	movs	r3, #1
 800ed88:	617b      	str	r3, [r7, #20]
  }
  
  if (inHandlerMode()) {
 800ed8a:	f7ff fddf 	bl	800e94c <inHandlerMode>
 800ed8e:	4603      	mov	r3, r0
 800ed90:	2b00      	cmp	r3, #0
 800ed92:	d018      	beq.n	800edc6 <osMessagePut+0x5a>
    if (xQueueSendFromISR(queue_id, &info, &taskWoken) != pdTRUE) {
 800ed94:	f107 0210 	add.w	r2, r7, #16
 800ed98:	f107 0108 	add.w	r1, r7, #8
 800ed9c:	2300      	movs	r3, #0
 800ed9e:	68f8      	ldr	r0, [r7, #12]
 800eda0:	f000 fbec 	bl	800f57c <xQueueGenericSendFromISR>
 800eda4:	4603      	mov	r3, r0
 800eda6:	2b01      	cmp	r3, #1
 800eda8:	d001      	beq.n	800edae <osMessagePut+0x42>
      return osErrorOS;
 800edaa:	23ff      	movs	r3, #255	; 0xff
 800edac:	e018      	b.n	800ede0 <osMessagePut+0x74>
    }
    portEND_SWITCHING_ISR(taskWoken);
 800edae:	693b      	ldr	r3, [r7, #16]
 800edb0:	2b00      	cmp	r3, #0
 800edb2:	d014      	beq.n	800edde <osMessagePut+0x72>
 800edb4:	4b0c      	ldr	r3, [pc, #48]	; (800ede8 <osMessagePut+0x7c>)
 800edb6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800edba:	601a      	str	r2, [r3, #0]
 800edbc:	f3bf 8f4f 	dsb	sy
 800edc0:	f3bf 8f6f 	isb	sy
 800edc4:	e00b      	b.n	800edde <osMessagePut+0x72>
  }
  else {
    if (xQueueSend(queue_id, &info, ticks) != pdTRUE) {
 800edc6:	f107 0108 	add.w	r1, r7, #8
 800edca:	2300      	movs	r3, #0
 800edcc:	697a      	ldr	r2, [r7, #20]
 800edce:	68f8      	ldr	r0, [r7, #12]
 800edd0:	f000 face 	bl	800f370 <xQueueGenericSend>
 800edd4:	4603      	mov	r3, r0
 800edd6:	2b01      	cmp	r3, #1
 800edd8:	d001      	beq.n	800edde <osMessagePut+0x72>
      return osErrorOS;
 800edda:	23ff      	movs	r3, #255	; 0xff
 800eddc:	e000      	b.n	800ede0 <osMessagePut+0x74>
    }
  }
  
  return osOK;
 800edde:	2300      	movs	r3, #0
}
 800ede0:	4618      	mov	r0, r3
 800ede2:	3718      	adds	r7, #24
 800ede4:	46bd      	mov	sp, r7
 800ede6:	bd80      	pop	{r7, pc}
 800ede8:	e000ed04 	.word	0xe000ed04

0800edec <osMessageGet>:
* @param  millisec  timeout value or 0 in case of no time-out.
* @retval event information that includes status code.
* @note   MUST REMAIN UNCHANGED: \b osMessageGet shall be consistent in every CMSIS-RTOS.
*/
osEvent osMessageGet (osMessageQId queue_id, uint32_t millisec)
{
 800edec:	b590      	push	{r4, r7, lr}
 800edee:	b08b      	sub	sp, #44	; 0x2c
 800edf0:	af00      	add	r7, sp, #0
 800edf2:	60f8      	str	r0, [r7, #12]
 800edf4:	60b9      	str	r1, [r7, #8]
 800edf6:	607a      	str	r2, [r7, #4]
  portBASE_TYPE taskWoken;
  TickType_t ticks;
  osEvent event;
  
  event.def.message_id = queue_id;
 800edf8:	68bb      	ldr	r3, [r7, #8]
 800edfa:	61fb      	str	r3, [r7, #28]
  event.value.v = 0;
 800edfc:	2300      	movs	r3, #0
 800edfe:	61bb      	str	r3, [r7, #24]
  
  if (queue_id == NULL) {
 800ee00:	68bb      	ldr	r3, [r7, #8]
 800ee02:	2b00      	cmp	r3, #0
 800ee04:	d10a      	bne.n	800ee1c <osMessageGet+0x30>
    event.status = osErrorParameter;
 800ee06:	2380      	movs	r3, #128	; 0x80
 800ee08:	617b      	str	r3, [r7, #20]
    return event;
 800ee0a:	68fb      	ldr	r3, [r7, #12]
 800ee0c:	461c      	mov	r4, r3
 800ee0e:	f107 0314 	add.w	r3, r7, #20
 800ee12:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800ee16:	e884 0007 	stmia.w	r4, {r0, r1, r2}
 800ee1a:	e054      	b.n	800eec6 <osMessageGet+0xda>
  }
  
  taskWoken = pdFALSE;
 800ee1c:	2300      	movs	r3, #0
 800ee1e:	623b      	str	r3, [r7, #32]
  
  ticks = 0;
 800ee20:	2300      	movs	r3, #0
 800ee22:	627b      	str	r3, [r7, #36]	; 0x24
  if (millisec == osWaitForever) {
 800ee24:	687b      	ldr	r3, [r7, #4]
 800ee26:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ee2a:	d103      	bne.n	800ee34 <osMessageGet+0x48>
    ticks = portMAX_DELAY;
 800ee2c:	f04f 33ff 	mov.w	r3, #4294967295
 800ee30:	627b      	str	r3, [r7, #36]	; 0x24
 800ee32:	e009      	b.n	800ee48 <osMessageGet+0x5c>
  }
  else if (millisec != 0) {
 800ee34:	687b      	ldr	r3, [r7, #4]
 800ee36:	2b00      	cmp	r3, #0
 800ee38:	d006      	beq.n	800ee48 <osMessageGet+0x5c>
    ticks = millisec / portTICK_PERIOD_MS;
 800ee3a:	687b      	ldr	r3, [r7, #4]
 800ee3c:	627b      	str	r3, [r7, #36]	; 0x24
    if (ticks == 0) {
 800ee3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ee40:	2b00      	cmp	r3, #0
 800ee42:	d101      	bne.n	800ee48 <osMessageGet+0x5c>
      ticks = 1;
 800ee44:	2301      	movs	r3, #1
 800ee46:	627b      	str	r3, [r7, #36]	; 0x24
    }
  }
  
  if (inHandlerMode()) {
 800ee48:	f7ff fd80 	bl	800e94c <inHandlerMode>
 800ee4c:	4603      	mov	r3, r0
 800ee4e:	2b00      	cmp	r3, #0
 800ee50:	d01c      	beq.n	800ee8c <osMessageGet+0xa0>
    if (xQueueReceiveFromISR(queue_id, &event.value.v, &taskWoken) == pdTRUE) {
 800ee52:	f107 0220 	add.w	r2, r7, #32
 800ee56:	f107 0314 	add.w	r3, r7, #20
 800ee5a:	3304      	adds	r3, #4
 800ee5c:	4619      	mov	r1, r3
 800ee5e:	68b8      	ldr	r0, [r7, #8]
 800ee60:	f000 febc 	bl	800fbdc <xQueueReceiveFromISR>
 800ee64:	4603      	mov	r3, r0
 800ee66:	2b01      	cmp	r3, #1
 800ee68:	d102      	bne.n	800ee70 <osMessageGet+0x84>
      /* We have mail */
      event.status = osEventMessage;
 800ee6a:	2310      	movs	r3, #16
 800ee6c:	617b      	str	r3, [r7, #20]
 800ee6e:	e001      	b.n	800ee74 <osMessageGet+0x88>
    }
    else {
      event.status = osOK;
 800ee70:	2300      	movs	r3, #0
 800ee72:	617b      	str	r3, [r7, #20]
    }
    portEND_SWITCHING_ISR(taskWoken);
 800ee74:	6a3b      	ldr	r3, [r7, #32]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d01d      	beq.n	800eeb6 <osMessageGet+0xca>
 800ee7a:	4b15      	ldr	r3, [pc, #84]	; (800eed0 <osMessageGet+0xe4>)
 800ee7c:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800ee80:	601a      	str	r2, [r3, #0]
 800ee82:	f3bf 8f4f 	dsb	sy
 800ee86:	f3bf 8f6f 	isb	sy
 800ee8a:	e014      	b.n	800eeb6 <osMessageGet+0xca>
  }
  else {
    if (xQueueReceive(queue_id, &event.value.v, ticks) == pdTRUE) {
 800ee8c:	f107 0314 	add.w	r3, r7, #20
 800ee90:	3304      	adds	r3, #4
 800ee92:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ee94:	4619      	mov	r1, r3
 800ee96:	68b8      	ldr	r0, [r7, #8]
 800ee98:	f000 fca6 	bl	800f7e8 <xQueueReceive>
 800ee9c:	4603      	mov	r3, r0
 800ee9e:	2b01      	cmp	r3, #1
 800eea0:	d102      	bne.n	800eea8 <osMessageGet+0xbc>
      /* We have mail */
      event.status = osEventMessage;
 800eea2:	2310      	movs	r3, #16
 800eea4:	617b      	str	r3, [r7, #20]
 800eea6:	e006      	b.n	800eeb6 <osMessageGet+0xca>
    }
    else {
      event.status = (ticks == 0) ? osOK : osEventTimeout;
 800eea8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800eeaa:	2b00      	cmp	r3, #0
 800eeac:	d101      	bne.n	800eeb2 <osMessageGet+0xc6>
 800eeae:	2300      	movs	r3, #0
 800eeb0:	e000      	b.n	800eeb4 <osMessageGet+0xc8>
 800eeb2:	2340      	movs	r3, #64	; 0x40
 800eeb4:	617b      	str	r3, [r7, #20]
    }
  }
  
  return event;
 800eeb6:	68fb      	ldr	r3, [r7, #12]
 800eeb8:	461c      	mov	r4, r3
 800eeba:	f107 0314 	add.w	r3, r7, #20
 800eebe:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
 800eec2:	e884 0007 	stmia.w	r4, {r0, r1, r2}
}
 800eec6:	68f8      	ldr	r0, [r7, #12]
 800eec8:	372c      	adds	r7, #44	; 0x2c
 800eeca:	46bd      	mov	sp, r7
 800eecc:	bd90      	pop	{r4, r7, pc}
 800eece:	bf00      	nop
 800eed0:	e000ed04 	.word	0xe000ed04

0800eed4 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 800eed4:	b480      	push	{r7}
 800eed6:	b083      	sub	sp, #12
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	f103 0208 	add.w	r2, r3, #8
 800eee2:	687b      	ldr	r3, [r7, #4]
 800eee4:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 800eee6:	687b      	ldr	r3, [r7, #4]
 800eee8:	f04f 32ff 	mov.w	r2, #4294967295
 800eeec:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eeee:	687b      	ldr	r3, [r7, #4]
 800eef0:	f103 0208 	add.w	r2, r3, #8
 800eef4:	687b      	ldr	r3, [r7, #4]
 800eef6:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 800eef8:	687b      	ldr	r3, [r7, #4]
 800eefa:	f103 0208 	add.w	r2, r3, #8
 800eefe:	687b      	ldr	r3, [r7, #4]
 800ef00:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 800ef02:	687b      	ldr	r3, [r7, #4]
 800ef04:	2200      	movs	r2, #0
 800ef06:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 800ef08:	bf00      	nop
 800ef0a:	370c      	adds	r7, #12
 800ef0c:	46bd      	mov	sp, r7
 800ef0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef12:	4770      	bx	lr

0800ef14 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 800ef14:	b480      	push	{r7}
 800ef16:	b083      	sub	sp, #12
 800ef18:	af00      	add	r7, sp, #0
 800ef1a:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 800ef1c:	687b      	ldr	r3, [r7, #4]
 800ef1e:	2200      	movs	r2, #0
 800ef20:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800ef22:	bf00      	nop
 800ef24:	370c      	adds	r7, #12
 800ef26:	46bd      	mov	sp, r7
 800ef28:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef2c:	4770      	bx	lr

0800ef2e <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ef2e:	b480      	push	{r7}
 800ef30:	b085      	sub	sp, #20
 800ef32:	af00      	add	r7, sp, #0
 800ef34:	6078      	str	r0, [r7, #4]
 800ef36:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 800ef38:	687b      	ldr	r3, [r7, #4]
 800ef3a:	685b      	ldr	r3, [r3, #4]
 800ef3c:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800ef3e:	683b      	ldr	r3, [r7, #0]
 800ef40:	68fa      	ldr	r2, [r7, #12]
 800ef42:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	689a      	ldr	r2, [r3, #8]
 800ef48:	683b      	ldr	r3, [r7, #0]
 800ef4a:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 800ef4c:	68fb      	ldr	r3, [r7, #12]
 800ef4e:	689b      	ldr	r3, [r3, #8]
 800ef50:	683a      	ldr	r2, [r7, #0]
 800ef52:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 800ef54:	68fb      	ldr	r3, [r7, #12]
 800ef56:	683a      	ldr	r2, [r7, #0]
 800ef58:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 800ef5a:	683b      	ldr	r3, [r7, #0]
 800ef5c:	687a      	ldr	r2, [r7, #4]
 800ef5e:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800ef60:	687b      	ldr	r3, [r7, #4]
 800ef62:	681b      	ldr	r3, [r3, #0]
 800ef64:	1c5a      	adds	r2, r3, #1
 800ef66:	687b      	ldr	r3, [r7, #4]
 800ef68:	601a      	str	r2, [r3, #0]
}
 800ef6a:	bf00      	nop
 800ef6c:	3714      	adds	r7, #20
 800ef6e:	46bd      	mov	sp, r7
 800ef70:	f85d 7b04 	ldr.w	r7, [sp], #4
 800ef74:	4770      	bx	lr

0800ef76 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800ef76:	b480      	push	{r7}
 800ef78:	b085      	sub	sp, #20
 800ef7a:	af00      	add	r7, sp, #0
 800ef7c:	6078      	str	r0, [r7, #4]
 800ef7e:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800ef80:	683b      	ldr	r3, [r7, #0]
 800ef82:	681b      	ldr	r3, [r3, #0]
 800ef84:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 800ef86:	68bb      	ldr	r3, [r7, #8]
 800ef88:	f1b3 3fff 	cmp.w	r3, #4294967295
 800ef8c:	d103      	bne.n	800ef96 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800ef8e:	687b      	ldr	r3, [r7, #4]
 800ef90:	691b      	ldr	r3, [r3, #16]
 800ef92:	60fb      	str	r3, [r7, #12]
 800ef94:	e00c      	b.n	800efb0 <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 800ef96:	687b      	ldr	r3, [r7, #4]
 800ef98:	3308      	adds	r3, #8
 800ef9a:	60fb      	str	r3, [r7, #12]
 800ef9c:	e002      	b.n	800efa4 <vListInsert+0x2e>
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	685b      	ldr	r3, [r3, #4]
 800efa2:	60fb      	str	r3, [r7, #12]
 800efa4:	68fb      	ldr	r3, [r7, #12]
 800efa6:	685b      	ldr	r3, [r3, #4]
 800efa8:	681b      	ldr	r3, [r3, #0]
 800efaa:	68ba      	ldr	r2, [r7, #8]
 800efac:	429a      	cmp	r2, r3
 800efae:	d2f6      	bcs.n	800ef9e <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800efb0:	68fb      	ldr	r3, [r7, #12]
 800efb2:	685a      	ldr	r2, [r3, #4]
 800efb4:	683b      	ldr	r3, [r7, #0]
 800efb6:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 800efb8:	683b      	ldr	r3, [r7, #0]
 800efba:	685b      	ldr	r3, [r3, #4]
 800efbc:	683a      	ldr	r2, [r7, #0]
 800efbe:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 800efc0:	683b      	ldr	r3, [r7, #0]
 800efc2:	68fa      	ldr	r2, [r7, #12]
 800efc4:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 800efc6:	68fb      	ldr	r3, [r7, #12]
 800efc8:	683a      	ldr	r2, [r7, #0]
 800efca:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 800efcc:	683b      	ldr	r3, [r7, #0]
 800efce:	687a      	ldr	r2, [r7, #4]
 800efd0:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800efd2:	687b      	ldr	r3, [r7, #4]
 800efd4:	681b      	ldr	r3, [r3, #0]
 800efd6:	1c5a      	adds	r2, r3, #1
 800efd8:	687b      	ldr	r3, [r7, #4]
 800efda:	601a      	str	r2, [r3, #0]
}
 800efdc:	bf00      	nop
 800efde:	3714      	adds	r7, #20
 800efe0:	46bd      	mov	sp, r7
 800efe2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800efe6:	4770      	bx	lr

0800efe8 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 800efe8:	b480      	push	{r7}
 800efea:	b085      	sub	sp, #20
 800efec:	af00      	add	r7, sp, #0
 800efee:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 800eff0:	687b      	ldr	r3, [r7, #4]
 800eff2:	691b      	ldr	r3, [r3, #16]
 800eff4:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 800eff6:	687b      	ldr	r3, [r7, #4]
 800eff8:	685b      	ldr	r3, [r3, #4]
 800effa:	687a      	ldr	r2, [r7, #4]
 800effc:	6892      	ldr	r2, [r2, #8]
 800effe:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 800f000:	687b      	ldr	r3, [r7, #4]
 800f002:	689b      	ldr	r3, [r3, #8]
 800f004:	687a      	ldr	r2, [r7, #4]
 800f006:	6852      	ldr	r2, [r2, #4]
 800f008:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 800f00a:	68fb      	ldr	r3, [r7, #12]
 800f00c:	685b      	ldr	r3, [r3, #4]
 800f00e:	687a      	ldr	r2, [r7, #4]
 800f010:	429a      	cmp	r2, r3
 800f012:	d103      	bne.n	800f01c <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 800f014:	687b      	ldr	r3, [r7, #4]
 800f016:	689a      	ldr	r2, [r3, #8]
 800f018:	68fb      	ldr	r3, [r7, #12]
 800f01a:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 800f01c:	687b      	ldr	r3, [r7, #4]
 800f01e:	2200      	movs	r2, #0
 800f020:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800f022:	68fb      	ldr	r3, [r7, #12]
 800f024:	681b      	ldr	r3, [r3, #0]
 800f026:	1e5a      	subs	r2, r3, #1
 800f028:	68fb      	ldr	r3, [r7, #12]
 800f02a:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 800f02c:	68fb      	ldr	r3, [r7, #12]
 800f02e:	681b      	ldr	r3, [r3, #0]
}
 800f030:	4618      	mov	r0, r3
 800f032:	3714      	adds	r7, #20
 800f034:	46bd      	mov	sp, r7
 800f036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f03a:	4770      	bx	lr

0800f03c <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 800f03c:	b580      	push	{r7, lr}
 800f03e:	b084      	sub	sp, #16
 800f040:	af00      	add	r7, sp, #0
 800f042:	6078      	str	r0, [r7, #4]
 800f044:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 800f046:	687b      	ldr	r3, [r7, #4]
 800f048:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800f04a:	68fb      	ldr	r3, [r7, #12]
 800f04c:	2b00      	cmp	r3, #0
 800f04e:	d10c      	bne.n	800f06a <xQueueGenericReset+0x2e>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800f050:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f054:	b672      	cpsid	i
 800f056:	f383 8811 	msr	BASEPRI, r3
 800f05a:	f3bf 8f6f 	isb	sy
 800f05e:	f3bf 8f4f 	dsb	sy
 800f062:	b662      	cpsie	i
 800f064:	60bb      	str	r3, [r7, #8]
		"	isb														\n" \
		"	dsb														\n" \
		"	cpsie i													\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800f066:	bf00      	nop
 800f068:	e7fe      	b.n	800f068 <xQueueGenericReset+0x2c>

	taskENTER_CRITICAL();
 800f06a:	f002 f977 	bl	801135c <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f06e:	68fb      	ldr	r3, [r7, #12]
 800f070:	681a      	ldr	r2, [r3, #0]
 800f072:	68fb      	ldr	r3, [r7, #12]
 800f074:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f076:	68f9      	ldr	r1, [r7, #12]
 800f078:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f07a:	fb01 f303 	mul.w	r3, r1, r3
 800f07e:	441a      	add	r2, r3
 800f080:	68fb      	ldr	r3, [r7, #12]
 800f082:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800f084:	68fb      	ldr	r3, [r7, #12]
 800f086:	2200      	movs	r2, #0
 800f088:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 800f08a:	68fb      	ldr	r3, [r7, #12]
 800f08c:	681a      	ldr	r2, [r3, #0]
 800f08e:	68fb      	ldr	r3, [r7, #12]
 800f090:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	681a      	ldr	r2, [r3, #0]
 800f096:	68fb      	ldr	r3, [r7, #12]
 800f098:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f09a:	3b01      	subs	r3, #1
 800f09c:	68f9      	ldr	r1, [r7, #12]
 800f09e:	6c09      	ldr	r1, [r1, #64]	; 0x40
 800f0a0:	fb01 f303 	mul.w	r3, r1, r3
 800f0a4:	441a      	add	r2, r3
 800f0a6:	68fb      	ldr	r3, [r7, #12]
 800f0a8:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 800f0aa:	68fb      	ldr	r3, [r7, #12]
 800f0ac:	22ff      	movs	r2, #255	; 0xff
 800f0ae:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800f0b2:	68fb      	ldr	r3, [r7, #12]
 800f0b4:	22ff      	movs	r2, #255	; 0xff
 800f0b6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 800f0ba:	683b      	ldr	r3, [r7, #0]
 800f0bc:	2b00      	cmp	r3, #0
 800f0be:	d114      	bne.n	800f0ea <xQueueGenericReset+0xae>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f0c0:	68fb      	ldr	r3, [r7, #12]
 800f0c2:	691b      	ldr	r3, [r3, #16]
 800f0c4:	2b00      	cmp	r3, #0
 800f0c6:	d01a      	beq.n	800f0fe <xQueueGenericReset+0xc2>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f0c8:	68fb      	ldr	r3, [r7, #12]
 800f0ca:	3310      	adds	r3, #16
 800f0cc:	4618      	mov	r0, r3
 800f0ce:	f001 fc2d 	bl	801092c <xTaskRemoveFromEventList>
 800f0d2:	4603      	mov	r3, r0
 800f0d4:	2b00      	cmp	r3, #0
 800f0d6:	d012      	beq.n	800f0fe <xQueueGenericReset+0xc2>
				{
					queueYIELD_IF_USING_PREEMPTION();
 800f0d8:	4b0c      	ldr	r3, [pc, #48]	; (800f10c <xQueueGenericReset+0xd0>)
 800f0da:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f0de:	601a      	str	r2, [r3, #0]
 800f0e0:	f3bf 8f4f 	dsb	sy
 800f0e4:	f3bf 8f6f 	isb	sy
 800f0e8:	e009      	b.n	800f0fe <xQueueGenericReset+0xc2>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	3310      	adds	r3, #16
 800f0ee:	4618      	mov	r0, r3
 800f0f0:	f7ff fef0 	bl	800eed4 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 800f0f4:	68fb      	ldr	r3, [r7, #12]
 800f0f6:	3324      	adds	r3, #36	; 0x24
 800f0f8:	4618      	mov	r0, r3
 800f0fa:	f7ff feeb 	bl	800eed4 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 800f0fe:	f002 f961 	bl	80113c4 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 800f102:	2301      	movs	r3, #1
}
 800f104:	4618      	mov	r0, r3
 800f106:	3710      	adds	r7, #16
 800f108:	46bd      	mov	sp, r7
 800f10a:	bd80      	pop	{r7, pc}
 800f10c:	e000ed04 	.word	0xe000ed04

0800f110 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 800f110:	b580      	push	{r7, lr}
 800f112:	b08e      	sub	sp, #56	; 0x38
 800f114:	af02      	add	r7, sp, #8
 800f116:	60f8      	str	r0, [r7, #12]
 800f118:	60b9      	str	r1, [r7, #8]
 800f11a:	607a      	str	r2, [r7, #4]
 800f11c:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	2b00      	cmp	r3, #0
 800f122:	d10c      	bne.n	800f13e <xQueueGenericCreateStatic+0x2e>
	__asm volatile
 800f124:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f128:	b672      	cpsid	i
 800f12a:	f383 8811 	msr	BASEPRI, r3
 800f12e:	f3bf 8f6f 	isb	sy
 800f132:	f3bf 8f4f 	dsb	sy
 800f136:	b662      	cpsie	i
 800f138:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f13a:	bf00      	nop
 800f13c:	e7fe      	b.n	800f13c <xQueueGenericCreateStatic+0x2c>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 800f13e:	683b      	ldr	r3, [r7, #0]
 800f140:	2b00      	cmp	r3, #0
 800f142:	d10c      	bne.n	800f15e <xQueueGenericCreateStatic+0x4e>
	__asm volatile
 800f144:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f148:	b672      	cpsid	i
 800f14a:	f383 8811 	msr	BASEPRI, r3
 800f14e:	f3bf 8f6f 	isb	sy
 800f152:	f3bf 8f4f 	dsb	sy
 800f156:	b662      	cpsie	i
 800f158:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f15a:	bf00      	nop
 800f15c:	e7fe      	b.n	800f15c <xQueueGenericCreateStatic+0x4c>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800f15e:	687b      	ldr	r3, [r7, #4]
 800f160:	2b00      	cmp	r3, #0
 800f162:	d002      	beq.n	800f16a <xQueueGenericCreateStatic+0x5a>
 800f164:	68bb      	ldr	r3, [r7, #8]
 800f166:	2b00      	cmp	r3, #0
 800f168:	d001      	beq.n	800f16e <xQueueGenericCreateStatic+0x5e>
 800f16a:	2301      	movs	r3, #1
 800f16c:	e000      	b.n	800f170 <xQueueGenericCreateStatic+0x60>
 800f16e:	2300      	movs	r3, #0
 800f170:	2b00      	cmp	r3, #0
 800f172:	d10c      	bne.n	800f18e <xQueueGenericCreateStatic+0x7e>
	__asm volatile
 800f174:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f178:	b672      	cpsid	i
 800f17a:	f383 8811 	msr	BASEPRI, r3
 800f17e:	f3bf 8f6f 	isb	sy
 800f182:	f3bf 8f4f 	dsb	sy
 800f186:	b662      	cpsie	i
 800f188:	623b      	str	r3, [r7, #32]
}
 800f18a:	bf00      	nop
 800f18c:	e7fe      	b.n	800f18c <xQueueGenericCreateStatic+0x7c>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800f18e:	687b      	ldr	r3, [r7, #4]
 800f190:	2b00      	cmp	r3, #0
 800f192:	d102      	bne.n	800f19a <xQueueGenericCreateStatic+0x8a>
 800f194:	68bb      	ldr	r3, [r7, #8]
 800f196:	2b00      	cmp	r3, #0
 800f198:	d101      	bne.n	800f19e <xQueueGenericCreateStatic+0x8e>
 800f19a:	2301      	movs	r3, #1
 800f19c:	e000      	b.n	800f1a0 <xQueueGenericCreateStatic+0x90>
 800f19e:	2300      	movs	r3, #0
 800f1a0:	2b00      	cmp	r3, #0
 800f1a2:	d10c      	bne.n	800f1be <xQueueGenericCreateStatic+0xae>
	__asm volatile
 800f1a4:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1a8:	b672      	cpsid	i
 800f1aa:	f383 8811 	msr	BASEPRI, r3
 800f1ae:	f3bf 8f6f 	isb	sy
 800f1b2:	f3bf 8f4f 	dsb	sy
 800f1b6:	b662      	cpsie	i
 800f1b8:	61fb      	str	r3, [r7, #28]
}
 800f1ba:	bf00      	nop
 800f1bc:	e7fe      	b.n	800f1bc <xQueueGenericCreateStatic+0xac>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 800f1be:	2348      	movs	r3, #72	; 0x48
 800f1c0:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800f1c2:	697b      	ldr	r3, [r7, #20]
 800f1c4:	2b48      	cmp	r3, #72	; 0x48
 800f1c6:	d00c      	beq.n	800f1e2 <xQueueGenericCreateStatic+0xd2>
	__asm volatile
 800f1c8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f1cc:	b672      	cpsid	i
 800f1ce:	f383 8811 	msr	BASEPRI, r3
 800f1d2:	f3bf 8f6f 	isb	sy
 800f1d6:	f3bf 8f4f 	dsb	sy
 800f1da:	b662      	cpsie	i
 800f1dc:	61bb      	str	r3, [r7, #24]
}
 800f1de:	bf00      	nop
 800f1e0:	e7fe      	b.n	800f1e0 <xQueueGenericCreateStatic+0xd0>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 800f1e2:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800f1e4:	683b      	ldr	r3, [r7, #0]
 800f1e6:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 800f1e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1ea:	2b00      	cmp	r3, #0
 800f1ec:	d00d      	beq.n	800f20a <xQueueGenericCreateStatic+0xfa>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 800f1ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1f0:	2201      	movs	r2, #1
 800f1f2:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f1f6:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 800f1fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f1fc:	9300      	str	r3, [sp, #0]
 800f1fe:	4613      	mov	r3, r2
 800f200:	687a      	ldr	r2, [r7, #4]
 800f202:	68b9      	ldr	r1, [r7, #8]
 800f204:	68f8      	ldr	r0, [r7, #12]
 800f206:	f000 f847 	bl	800f298 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f20a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 800f20c:	4618      	mov	r0, r3
 800f20e:	3730      	adds	r7, #48	; 0x30
 800f210:	46bd      	mov	sp, r7
 800f212:	bd80      	pop	{r7, pc}

0800f214 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 800f214:	b580      	push	{r7, lr}
 800f216:	b08a      	sub	sp, #40	; 0x28
 800f218:	af02      	add	r7, sp, #8
 800f21a:	60f8      	str	r0, [r7, #12]
 800f21c:	60b9      	str	r1, [r7, #8]
 800f21e:	4613      	mov	r3, r2
 800f220:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 800f222:	68fb      	ldr	r3, [r7, #12]
 800f224:	2b00      	cmp	r3, #0
 800f226:	d10c      	bne.n	800f242 <xQueueGenericCreate+0x2e>
	__asm volatile
 800f228:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f22c:	b672      	cpsid	i
 800f22e:	f383 8811 	msr	BASEPRI, r3
 800f232:	f3bf 8f6f 	isb	sy
 800f236:	f3bf 8f4f 	dsb	sy
 800f23a:	b662      	cpsie	i
 800f23c:	613b      	str	r3, [r7, #16]
}
 800f23e:	bf00      	nop
 800f240:	e7fe      	b.n	800f240 <xQueueGenericCreate+0x2c>

		if( uxItemSize == ( UBaseType_t ) 0 )
 800f242:	68bb      	ldr	r3, [r7, #8]
 800f244:	2b00      	cmp	r3, #0
 800f246:	d102      	bne.n	800f24e <xQueueGenericCreate+0x3a>
		{
			/* There is not going to be a queue storage area. */
			xQueueSizeInBytes = ( size_t ) 0;
 800f248:	2300      	movs	r3, #0
 800f24a:	61fb      	str	r3, [r7, #28]
 800f24c:	e004      	b.n	800f258 <xQueueGenericCreate+0x44>
		}
		else
		{
			/* Allocate enough space to hold the maximum number of items that
			can be in the queue at any time. */
			xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 800f24e:	68fb      	ldr	r3, [r7, #12]
 800f250:	68ba      	ldr	r2, [r7, #8]
 800f252:	fb02 f303 	mul.w	r3, r2, r3
 800f256:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800f258:	69fb      	ldr	r3, [r7, #28]
 800f25a:	3348      	adds	r3, #72	; 0x48
 800f25c:	4618      	mov	r0, r3
 800f25e:	f002 f9a9 	bl	80115b4 <pvPortMalloc>
 800f262:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 800f264:	69bb      	ldr	r3, [r7, #24]
 800f266:	2b00      	cmp	r3, #0
 800f268:	d011      	beq.n	800f28e <xQueueGenericCreate+0x7a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800f26a:	69bb      	ldr	r3, [r7, #24]
 800f26c:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800f26e:	697b      	ldr	r3, [r7, #20]
 800f270:	3348      	adds	r3, #72	; 0x48
 800f272:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 800f274:	69bb      	ldr	r3, [r7, #24]
 800f276:	2200      	movs	r2, #0
 800f278:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 800f27c:	79fa      	ldrb	r2, [r7, #7]
 800f27e:	69bb      	ldr	r3, [r7, #24]
 800f280:	9300      	str	r3, [sp, #0]
 800f282:	4613      	mov	r3, r2
 800f284:	697a      	ldr	r2, [r7, #20]
 800f286:	68b9      	ldr	r1, [r7, #8]
 800f288:	68f8      	ldr	r0, [r7, #12]
 800f28a:	f000 f805 	bl	800f298 <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 800f28e:	69bb      	ldr	r3, [r7, #24]
	}
 800f290:	4618      	mov	r0, r3
 800f292:	3720      	adds	r7, #32
 800f294:	46bd      	mov	sp, r7
 800f296:	bd80      	pop	{r7, pc}

0800f298 <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800f298:	b580      	push	{r7, lr}
 800f29a:	b084      	sub	sp, #16
 800f29c:	af00      	add	r7, sp, #0
 800f29e:	60f8      	str	r0, [r7, #12]
 800f2a0:	60b9      	str	r1, [r7, #8]
 800f2a2:	607a      	str	r2, [r7, #4]
 800f2a4:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800f2a6:	68bb      	ldr	r3, [r7, #8]
 800f2a8:	2b00      	cmp	r3, #0
 800f2aa:	d103      	bne.n	800f2b4 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 800f2ac:	69bb      	ldr	r3, [r7, #24]
 800f2ae:	69ba      	ldr	r2, [r7, #24]
 800f2b0:	601a      	str	r2, [r3, #0]
 800f2b2:	e002      	b.n	800f2ba <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 800f2b4:	69bb      	ldr	r3, [r7, #24]
 800f2b6:	687a      	ldr	r2, [r7, #4]
 800f2b8:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800f2ba:	69bb      	ldr	r3, [r7, #24]
 800f2bc:	68fa      	ldr	r2, [r7, #12]
 800f2be:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 800f2c0:	69bb      	ldr	r3, [r7, #24]
 800f2c2:	68ba      	ldr	r2, [r7, #8]
 800f2c4:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800f2c6:	2101      	movs	r1, #1
 800f2c8:	69b8      	ldr	r0, [r7, #24]
 800f2ca:	f7ff feb7 	bl	800f03c <xQueueGenericReset>
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800f2ce:	bf00      	nop
 800f2d0:	3710      	adds	r7, #16
 800f2d2:	46bd      	mov	sp, r7
 800f2d4:	bd80      	pop	{r7, pc}

0800f2d6 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 800f2d6:	b580      	push	{r7, lr}
 800f2d8:	b082      	sub	sp, #8
 800f2da:	af00      	add	r7, sp, #0
 800f2dc:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d00e      	beq.n	800f302 <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 800f2e4:	687b      	ldr	r3, [r7, #4]
 800f2e6:	2200      	movs	r2, #0
 800f2e8:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	2200      	movs	r2, #0
 800f2ee:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 800f2f0:	687b      	ldr	r3, [r7, #4]
 800f2f2:	2200      	movs	r2, #0
 800f2f4:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 800f2f6:	2300      	movs	r3, #0
 800f2f8:	2200      	movs	r2, #0
 800f2fa:	2100      	movs	r1, #0
 800f2fc:	6878      	ldr	r0, [r7, #4]
 800f2fe:	f000 f837 	bl	800f370 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 800f302:	bf00      	nop
 800f304:	3708      	adds	r7, #8
 800f306:	46bd      	mov	sp, r7
 800f308:	bd80      	pop	{r7, pc}

0800f30a <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 800f30a:	b580      	push	{r7, lr}
 800f30c:	b086      	sub	sp, #24
 800f30e:	af00      	add	r7, sp, #0
 800f310:	4603      	mov	r3, r0
 800f312:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f314:	2301      	movs	r3, #1
 800f316:	617b      	str	r3, [r7, #20]
 800f318:	2300      	movs	r3, #0
 800f31a:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 800f31c:	79fb      	ldrb	r3, [r7, #7]
 800f31e:	461a      	mov	r2, r3
 800f320:	6939      	ldr	r1, [r7, #16]
 800f322:	6978      	ldr	r0, [r7, #20]
 800f324:	f7ff ff76 	bl	800f214 <xQueueGenericCreate>
 800f328:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f32a:	68f8      	ldr	r0, [r7, #12]
 800f32c:	f7ff ffd3 	bl	800f2d6 <prvInitialiseMutex>

		return xNewQueue;
 800f330:	68fb      	ldr	r3, [r7, #12]
	}
 800f332:	4618      	mov	r0, r3
 800f334:	3718      	adds	r7, #24
 800f336:	46bd      	mov	sp, r7
 800f338:	bd80      	pop	{r7, pc}

0800f33a <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 800f33a:	b580      	push	{r7, lr}
 800f33c:	b088      	sub	sp, #32
 800f33e:	af02      	add	r7, sp, #8
 800f340:	4603      	mov	r3, r0
 800f342:	6039      	str	r1, [r7, #0]
 800f344:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 800f346:	2301      	movs	r3, #1
 800f348:	617b      	str	r3, [r7, #20]
 800f34a:	2300      	movs	r3, #0
 800f34c:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800f34e:	79fb      	ldrb	r3, [r7, #7]
 800f350:	9300      	str	r3, [sp, #0]
 800f352:	683b      	ldr	r3, [r7, #0]
 800f354:	2200      	movs	r2, #0
 800f356:	6939      	ldr	r1, [r7, #16]
 800f358:	6978      	ldr	r0, [r7, #20]
 800f35a:	f7ff fed9 	bl	800f110 <xQueueGenericCreateStatic>
 800f35e:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800f360:	68f8      	ldr	r0, [r7, #12]
 800f362:	f7ff ffb8 	bl	800f2d6 <prvInitialiseMutex>

		return xNewQueue;
 800f366:	68fb      	ldr	r3, [r7, #12]
	}
 800f368:	4618      	mov	r0, r3
 800f36a:	3718      	adds	r7, #24
 800f36c:	46bd      	mov	sp, r7
 800f36e:	bd80      	pop	{r7, pc}

0800f370 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 800f370:	b580      	push	{r7, lr}
 800f372:	b08e      	sub	sp, #56	; 0x38
 800f374:	af00      	add	r7, sp, #0
 800f376:	60f8      	str	r0, [r7, #12]
 800f378:	60b9      	str	r1, [r7, #8]
 800f37a:	607a      	str	r2, [r7, #4]
 800f37c:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 800f37e:	2300      	movs	r3, #0
 800f380:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f382:	68fb      	ldr	r3, [r7, #12]
 800f384:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f386:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f388:	2b00      	cmp	r3, #0
 800f38a:	d10c      	bne.n	800f3a6 <xQueueGenericSend+0x36>
	__asm volatile
 800f38c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f390:	b672      	cpsid	i
 800f392:	f383 8811 	msr	BASEPRI, r3
 800f396:	f3bf 8f6f 	isb	sy
 800f39a:	f3bf 8f4f 	dsb	sy
 800f39e:	b662      	cpsie	i
 800f3a0:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800f3a2:	bf00      	nop
 800f3a4:	e7fe      	b.n	800f3a4 <xQueueGenericSend+0x34>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f3a6:	68bb      	ldr	r3, [r7, #8]
 800f3a8:	2b00      	cmp	r3, #0
 800f3aa:	d103      	bne.n	800f3b4 <xQueueGenericSend+0x44>
 800f3ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f3b0:	2b00      	cmp	r3, #0
 800f3b2:	d101      	bne.n	800f3b8 <xQueueGenericSend+0x48>
 800f3b4:	2301      	movs	r3, #1
 800f3b6:	e000      	b.n	800f3ba <xQueueGenericSend+0x4a>
 800f3b8:	2300      	movs	r3, #0
 800f3ba:	2b00      	cmp	r3, #0
 800f3bc:	d10c      	bne.n	800f3d8 <xQueueGenericSend+0x68>
	__asm volatile
 800f3be:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3c2:	b672      	cpsid	i
 800f3c4:	f383 8811 	msr	BASEPRI, r3
 800f3c8:	f3bf 8f6f 	isb	sy
 800f3cc:	f3bf 8f4f 	dsb	sy
 800f3d0:	b662      	cpsie	i
 800f3d2:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f3d4:	bf00      	nop
 800f3d6:	e7fe      	b.n	800f3d6 <xQueueGenericSend+0x66>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f3d8:	683b      	ldr	r3, [r7, #0]
 800f3da:	2b02      	cmp	r3, #2
 800f3dc:	d103      	bne.n	800f3e6 <xQueueGenericSend+0x76>
 800f3de:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f3e0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f3e2:	2b01      	cmp	r3, #1
 800f3e4:	d101      	bne.n	800f3ea <xQueueGenericSend+0x7a>
 800f3e6:	2301      	movs	r3, #1
 800f3e8:	e000      	b.n	800f3ec <xQueueGenericSend+0x7c>
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	2b00      	cmp	r3, #0
 800f3ee:	d10c      	bne.n	800f40a <xQueueGenericSend+0x9a>
	__asm volatile
 800f3f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f3f4:	b672      	cpsid	i
 800f3f6:	f383 8811 	msr	BASEPRI, r3
 800f3fa:	f3bf 8f6f 	isb	sy
 800f3fe:	f3bf 8f4f 	dsb	sy
 800f402:	b662      	cpsie	i
 800f404:	623b      	str	r3, [r7, #32]
}
 800f406:	bf00      	nop
 800f408:	e7fe      	b.n	800f408 <xQueueGenericSend+0x98>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f40a:	f001 fc57 	bl	8010cbc <xTaskGetSchedulerState>
 800f40e:	4603      	mov	r3, r0
 800f410:	2b00      	cmp	r3, #0
 800f412:	d102      	bne.n	800f41a <xQueueGenericSend+0xaa>
 800f414:	687b      	ldr	r3, [r7, #4]
 800f416:	2b00      	cmp	r3, #0
 800f418:	d101      	bne.n	800f41e <xQueueGenericSend+0xae>
 800f41a:	2301      	movs	r3, #1
 800f41c:	e000      	b.n	800f420 <xQueueGenericSend+0xb0>
 800f41e:	2300      	movs	r3, #0
 800f420:	2b00      	cmp	r3, #0
 800f422:	d10c      	bne.n	800f43e <xQueueGenericSend+0xce>
	__asm volatile
 800f424:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f428:	b672      	cpsid	i
 800f42a:	f383 8811 	msr	BASEPRI, r3
 800f42e:	f3bf 8f6f 	isb	sy
 800f432:	f3bf 8f4f 	dsb	sy
 800f436:	b662      	cpsie	i
 800f438:	61fb      	str	r3, [r7, #28]
}
 800f43a:	bf00      	nop
 800f43c:	e7fe      	b.n	800f43c <xQueueGenericSend+0xcc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f43e:	f001 ff8d 	bl	801135c <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f442:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f444:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f446:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f448:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f44a:	429a      	cmp	r2, r3
 800f44c:	d302      	bcc.n	800f454 <xQueueGenericSend+0xe4>
 800f44e:	683b      	ldr	r3, [r7, #0]
 800f450:	2b02      	cmp	r3, #2
 800f452:	d129      	bne.n	800f4a8 <xQueueGenericSend+0x138>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f454:	683a      	ldr	r2, [r7, #0]
 800f456:	68b9      	ldr	r1, [r7, #8]
 800f458:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f45a:	f000 fc5d 	bl	800fd18 <prvCopyDataToQueue>
 800f45e:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f460:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f464:	2b00      	cmp	r3, #0
 800f466:	d010      	beq.n	800f48a <xQueueGenericSend+0x11a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f468:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f46a:	3324      	adds	r3, #36	; 0x24
 800f46c:	4618      	mov	r0, r3
 800f46e:	f001 fa5d 	bl	801092c <xTaskRemoveFromEventList>
 800f472:	4603      	mov	r3, r0
 800f474:	2b00      	cmp	r3, #0
 800f476:	d013      	beq.n	800f4a0 <xQueueGenericSend+0x130>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 800f478:	4b3f      	ldr	r3, [pc, #252]	; (800f578 <xQueueGenericSend+0x208>)
 800f47a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f47e:	601a      	str	r2, [r3, #0]
 800f480:	f3bf 8f4f 	dsb	sy
 800f484:	f3bf 8f6f 	isb	sy
 800f488:	e00a      	b.n	800f4a0 <xQueueGenericSend+0x130>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 800f48a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f48c:	2b00      	cmp	r3, #0
 800f48e:	d007      	beq.n	800f4a0 <xQueueGenericSend+0x130>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 800f490:	4b39      	ldr	r3, [pc, #228]	; (800f578 <xQueueGenericSend+0x208>)
 800f492:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f496:	601a      	str	r2, [r3, #0]
 800f498:	f3bf 8f4f 	dsb	sy
 800f49c:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 800f4a0:	f001 ff90 	bl	80113c4 <vPortExitCritical>
				return pdPASS;
 800f4a4:	2301      	movs	r3, #1
 800f4a6:	e063      	b.n	800f570 <xQueueGenericSend+0x200>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f4a8:	687b      	ldr	r3, [r7, #4]
 800f4aa:	2b00      	cmp	r3, #0
 800f4ac:	d103      	bne.n	800f4b6 <xQueueGenericSend+0x146>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f4ae:	f001 ff89 	bl	80113c4 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 800f4b2:	2300      	movs	r3, #0
 800f4b4:	e05c      	b.n	800f570 <xQueueGenericSend+0x200>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f4b6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800f4b8:	2b00      	cmp	r3, #0
 800f4ba:	d106      	bne.n	800f4ca <xQueueGenericSend+0x15a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f4bc:	f107 0314 	add.w	r3, r7, #20
 800f4c0:	4618      	mov	r0, r3
 800f4c2:	f001 fa97 	bl	80109f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f4c6:	2301      	movs	r3, #1
 800f4c8:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f4ca:	f001 ff7b 	bl	80113c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f4ce:	f001 f81b 	bl	8010508 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f4d2:	f001 ff43 	bl	801135c <vPortEnterCritical>
 800f4d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4d8:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f4dc:	b25b      	sxtb	r3, r3
 800f4de:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4e2:	d103      	bne.n	800f4ec <xQueueGenericSend+0x17c>
 800f4e4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4e6:	2200      	movs	r2, #0
 800f4e8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f4ec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4ee:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f4f2:	b25b      	sxtb	r3, r3
 800f4f4:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f4f8:	d103      	bne.n	800f502 <xQueueGenericSend+0x192>
 800f4fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f4fc:	2200      	movs	r2, #0
 800f4fe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f502:	f001 ff5f 	bl	80113c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f506:	1d3a      	adds	r2, r7, #4
 800f508:	f107 0314 	add.w	r3, r7, #20
 800f50c:	4611      	mov	r1, r2
 800f50e:	4618      	mov	r0, r3
 800f510:	f001 fa86 	bl	8010a20 <xTaskCheckForTimeOut>
 800f514:	4603      	mov	r3, r0
 800f516:	2b00      	cmp	r3, #0
 800f518:	d124      	bne.n	800f564 <xQueueGenericSend+0x1f4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 800f51a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f51c:	f000 fcf4 	bl	800ff08 <prvIsQueueFull>
 800f520:	4603      	mov	r3, r0
 800f522:	2b00      	cmp	r3, #0
 800f524:	d018      	beq.n	800f558 <xQueueGenericSend+0x1e8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 800f526:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f528:	3310      	adds	r3, #16
 800f52a:	687a      	ldr	r2, [r7, #4]
 800f52c:	4611      	mov	r1, r2
 800f52e:	4618      	mov	r0, r3
 800f530:	f001 f9d6 	bl	80108e0 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 800f534:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f536:	f000 fc7f 	bl	800fe38 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 800f53a:	f000 fff3 	bl	8010524 <xTaskResumeAll>
 800f53e:	4603      	mov	r3, r0
 800f540:	2b00      	cmp	r3, #0
 800f542:	f47f af7c 	bne.w	800f43e <xQueueGenericSend+0xce>
				{
					portYIELD_WITHIN_API();
 800f546:	4b0c      	ldr	r3, [pc, #48]	; (800f578 <xQueueGenericSend+0x208>)
 800f548:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f54c:	601a      	str	r2, [r3, #0]
 800f54e:	f3bf 8f4f 	dsb	sy
 800f552:	f3bf 8f6f 	isb	sy
 800f556:	e772      	b.n	800f43e <xQueueGenericSend+0xce>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 800f558:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f55a:	f000 fc6d 	bl	800fe38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f55e:	f000 ffe1 	bl	8010524 <xTaskResumeAll>
 800f562:	e76c      	b.n	800f43e <xQueueGenericSend+0xce>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 800f564:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f566:	f000 fc67 	bl	800fe38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f56a:	f000 ffdb 	bl	8010524 <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 800f56e:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 800f570:	4618      	mov	r0, r3
 800f572:	3738      	adds	r7, #56	; 0x38
 800f574:	46bd      	mov	sp, r7
 800f576:	bd80      	pop	{r7, pc}
 800f578:	e000ed04 	.word	0xe000ed04

0800f57c <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 800f57c:	b580      	push	{r7, lr}
 800f57e:	b08e      	sub	sp, #56	; 0x38
 800f580:	af00      	add	r7, sp, #0
 800f582:	60f8      	str	r0, [r7, #12]
 800f584:	60b9      	str	r1, [r7, #8]
 800f586:	607a      	str	r2, [r7, #4]
 800f588:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f58a:	68fb      	ldr	r3, [r7, #12]
 800f58c:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800f58e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f590:	2b00      	cmp	r3, #0
 800f592:	d10c      	bne.n	800f5ae <xQueueGenericSendFromISR+0x32>
	__asm volatile
 800f594:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f598:	b672      	cpsid	i
 800f59a:	f383 8811 	msr	BASEPRI, r3
 800f59e:	f3bf 8f6f 	isb	sy
 800f5a2:	f3bf 8f4f 	dsb	sy
 800f5a6:	b662      	cpsie	i
 800f5a8:	627b      	str	r3, [r7, #36]	; 0x24
}
 800f5aa:	bf00      	nop
 800f5ac:	e7fe      	b.n	800f5ac <xQueueGenericSendFromISR+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f5ae:	68bb      	ldr	r3, [r7, #8]
 800f5b0:	2b00      	cmp	r3, #0
 800f5b2:	d103      	bne.n	800f5bc <xQueueGenericSendFromISR+0x40>
 800f5b4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f5b8:	2b00      	cmp	r3, #0
 800f5ba:	d101      	bne.n	800f5c0 <xQueueGenericSendFromISR+0x44>
 800f5bc:	2301      	movs	r3, #1
 800f5be:	e000      	b.n	800f5c2 <xQueueGenericSendFromISR+0x46>
 800f5c0:	2300      	movs	r3, #0
 800f5c2:	2b00      	cmp	r3, #0
 800f5c4:	d10c      	bne.n	800f5e0 <xQueueGenericSendFromISR+0x64>
	__asm volatile
 800f5c6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5ca:	b672      	cpsid	i
 800f5cc:	f383 8811 	msr	BASEPRI, r3
 800f5d0:	f3bf 8f6f 	isb	sy
 800f5d4:	f3bf 8f4f 	dsb	sy
 800f5d8:	b662      	cpsie	i
 800f5da:	623b      	str	r3, [r7, #32]
}
 800f5dc:	bf00      	nop
 800f5de:	e7fe      	b.n	800f5de <xQueueGenericSendFromISR+0x62>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 800f5e0:	683b      	ldr	r3, [r7, #0]
 800f5e2:	2b02      	cmp	r3, #2
 800f5e4:	d103      	bne.n	800f5ee <xQueueGenericSendFromISR+0x72>
 800f5e6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f5e8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f5ea:	2b01      	cmp	r3, #1
 800f5ec:	d101      	bne.n	800f5f2 <xQueueGenericSendFromISR+0x76>
 800f5ee:	2301      	movs	r3, #1
 800f5f0:	e000      	b.n	800f5f4 <xQueueGenericSendFromISR+0x78>
 800f5f2:	2300      	movs	r3, #0
 800f5f4:	2b00      	cmp	r3, #0
 800f5f6:	d10c      	bne.n	800f612 <xQueueGenericSendFromISR+0x96>
	__asm volatile
 800f5f8:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f5fc:	b672      	cpsid	i
 800f5fe:	f383 8811 	msr	BASEPRI, r3
 800f602:	f3bf 8f6f 	isb	sy
 800f606:	f3bf 8f4f 	dsb	sy
 800f60a:	b662      	cpsie	i
 800f60c:	61fb      	str	r3, [r7, #28]
}
 800f60e:	bf00      	nop
 800f610:	e7fe      	b.n	800f610 <xQueueGenericSendFromISR+0x94>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f612:	f001 ff8b 	bl	801152c <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 800f616:	f3ef 8211 	mrs	r2, BASEPRI
 800f61a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f61e:	b672      	cpsid	i
 800f620:	f383 8811 	msr	BASEPRI, r3
 800f624:	f3bf 8f6f 	isb	sy
 800f628:	f3bf 8f4f 	dsb	sy
 800f62c:	b662      	cpsie	i
 800f62e:	61ba      	str	r2, [r7, #24]
 800f630:	617b      	str	r3, [r7, #20]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 800f632:	69bb      	ldr	r3, [r7, #24]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f634:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 800f636:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f638:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800f63a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f63c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f63e:	429a      	cmp	r2, r3
 800f640:	d302      	bcc.n	800f648 <xQueueGenericSendFromISR+0xcc>
 800f642:	683b      	ldr	r3, [r7, #0]
 800f644:	2b02      	cmp	r3, #2
 800f646:	d12c      	bne.n	800f6a2 <xQueueGenericSendFromISR+0x126>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f648:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f64a:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f64e:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 800f652:	683a      	ldr	r2, [r7, #0]
 800f654:	68b9      	ldr	r1, [r7, #8]
 800f656:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800f658:	f000 fb5e 	bl	800fd18 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f65c:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 800f660:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f664:	d112      	bne.n	800f68c <xQueueGenericSendFromISR+0x110>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f666:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f668:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f66a:	2b00      	cmp	r3, #0
 800f66c:	d016      	beq.n	800f69c <xQueueGenericSendFromISR+0x120>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f66e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f670:	3324      	adds	r3, #36	; 0x24
 800f672:	4618      	mov	r0, r3
 800f674:	f001 f95a 	bl	801092c <xTaskRemoveFromEventList>
 800f678:	4603      	mov	r3, r0
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	d00e      	beq.n	800f69c <xQueueGenericSendFromISR+0x120>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f67e:	687b      	ldr	r3, [r7, #4]
 800f680:	2b00      	cmp	r3, #0
 800f682:	d00b      	beq.n	800f69c <xQueueGenericSendFromISR+0x120>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f684:	687b      	ldr	r3, [r7, #4]
 800f686:	2201      	movs	r2, #1
 800f688:	601a      	str	r2, [r3, #0]
 800f68a:	e007      	b.n	800f69c <xQueueGenericSendFromISR+0x120>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f68c:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
 800f690:	3301      	adds	r3, #1
 800f692:	b2db      	uxtb	r3, r3
 800f694:	b25a      	sxtb	r2, r3
 800f696:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f698:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f69c:	2301      	movs	r3, #1
 800f69e:	637b      	str	r3, [r7, #52]	; 0x34
		{
 800f6a0:	e001      	b.n	800f6a6 <xQueueGenericSendFromISR+0x12a>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f6a2:	2300      	movs	r3, #0
 800f6a4:	637b      	str	r3, [r7, #52]	; 0x34
 800f6a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f6a8:	613b      	str	r3, [r7, #16]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 800f6aa:	693b      	ldr	r3, [r7, #16]
 800f6ac:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 800f6b0:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f6b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f6b4:	4618      	mov	r0, r3
 800f6b6:	3738      	adds	r7, #56	; 0x38
 800f6b8:	46bd      	mov	sp, r7
 800f6ba:	bd80      	pop	{r7, pc}

0800f6bc <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800f6bc:	b580      	push	{r7, lr}
 800f6be:	b08e      	sub	sp, #56	; 0x38
 800f6c0:	af00      	add	r7, sp, #0
 800f6c2:	6078      	str	r0, [r7, #4]
 800f6c4:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800f6c6:	687b      	ldr	r3, [r7, #4]
 800f6c8:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 800f6ca:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d10c      	bne.n	800f6ea <xQueueGiveFromISR+0x2e>
	__asm volatile
 800f6d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6d4:	b672      	cpsid	i
 800f6d6:	f383 8811 	msr	BASEPRI, r3
 800f6da:	f3bf 8f6f 	isb	sy
 800f6de:	f3bf 8f4f 	dsb	sy
 800f6e2:	b662      	cpsie	i
 800f6e4:	623b      	str	r3, [r7, #32]
}
 800f6e6:	bf00      	nop
 800f6e8:	e7fe      	b.n	800f6e8 <xQueueGiveFromISR+0x2c>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f6ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f6ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f6ee:	2b00      	cmp	r3, #0
 800f6f0:	d00c      	beq.n	800f70c <xQueueGiveFromISR+0x50>
	__asm volatile
 800f6f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f6f6:	b672      	cpsid	i
 800f6f8:	f383 8811 	msr	BASEPRI, r3
 800f6fc:	f3bf 8f6f 	isb	sy
 800f700:	f3bf 8f4f 	dsb	sy
 800f704:	b662      	cpsie	i
 800f706:	61fb      	str	r3, [r7, #28]
}
 800f708:	bf00      	nop
 800f70a:	e7fe      	b.n	800f70a <xQueueGiveFromISR+0x4e>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 800f70c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f70e:	681b      	ldr	r3, [r3, #0]
 800f710:	2b00      	cmp	r3, #0
 800f712:	d103      	bne.n	800f71c <xQueueGiveFromISR+0x60>
 800f714:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f716:	689b      	ldr	r3, [r3, #8]
 800f718:	2b00      	cmp	r3, #0
 800f71a:	d101      	bne.n	800f720 <xQueueGiveFromISR+0x64>
 800f71c:	2301      	movs	r3, #1
 800f71e:	e000      	b.n	800f722 <xQueueGiveFromISR+0x66>
 800f720:	2300      	movs	r3, #0
 800f722:	2b00      	cmp	r3, #0
 800f724:	d10c      	bne.n	800f740 <xQueueGiveFromISR+0x84>
	__asm volatile
 800f726:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f72a:	b672      	cpsid	i
 800f72c:	f383 8811 	msr	BASEPRI, r3
 800f730:	f3bf 8f6f 	isb	sy
 800f734:	f3bf 8f4f 	dsb	sy
 800f738:	b662      	cpsie	i
 800f73a:	61bb      	str	r3, [r7, #24]
}
 800f73c:	bf00      	nop
 800f73e:	e7fe      	b.n	800f73e <xQueueGiveFromISR+0x82>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800f740:	f001 fef4 	bl	801152c <vPortValidateInterruptPriority>
	__asm volatile
 800f744:	f3ef 8211 	mrs	r2, BASEPRI
 800f748:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f74c:	b672      	cpsid	i
 800f74e:	f383 8811 	msr	BASEPRI, r3
 800f752:	f3bf 8f6f 	isb	sy
 800f756:	f3bf 8f4f 	dsb	sy
 800f75a:	b662      	cpsie	i
 800f75c:	617a      	str	r2, [r7, #20]
 800f75e:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 800f760:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800f762:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f766:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f768:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 800f76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f76c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800f76e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800f770:	429a      	cmp	r2, r3
 800f772:	d22b      	bcs.n	800f7cc <xQueueGiveFromISR+0x110>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 800f774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f776:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f77a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800f77e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f780:	1c5a      	adds	r2, r3, #1
 800f782:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f784:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 800f786:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800f78a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f78e:	d112      	bne.n	800f7b6 <xQueueGiveFromISR+0xfa>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800f790:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f792:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800f794:	2b00      	cmp	r3, #0
 800f796:	d016      	beq.n	800f7c6 <xQueueGiveFromISR+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800f798:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f79a:	3324      	adds	r3, #36	; 0x24
 800f79c:	4618      	mov	r0, r3
 800f79e:	f001 f8c5 	bl	801092c <xTaskRemoveFromEventList>
 800f7a2:	4603      	mov	r3, r0
 800f7a4:	2b00      	cmp	r3, #0
 800f7a6:	d00e      	beq.n	800f7c6 <xQueueGiveFromISR+0x10a>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 800f7a8:	683b      	ldr	r3, [r7, #0]
 800f7aa:	2b00      	cmp	r3, #0
 800f7ac:	d00b      	beq.n	800f7c6 <xQueueGiveFromISR+0x10a>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 800f7ae:	683b      	ldr	r3, [r7, #0]
 800f7b0:	2201      	movs	r2, #1
 800f7b2:	601a      	str	r2, [r3, #0]
 800f7b4:	e007      	b.n	800f7c6 <xQueueGiveFromISR+0x10a>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 800f7b6:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800f7ba:	3301      	adds	r3, #1
 800f7bc:	b2db      	uxtb	r3, r3
 800f7be:	b25a      	sxtb	r2, r3
 800f7c0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800f7c2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 800f7c6:	2301      	movs	r3, #1
 800f7c8:	637b      	str	r3, [r7, #52]	; 0x34
 800f7ca:	e001      	b.n	800f7d0 <xQueueGiveFromISR+0x114>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 800f7cc:	2300      	movs	r3, #0
 800f7ce:	637b      	str	r3, [r7, #52]	; 0x34
 800f7d0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f7d2:	60fb      	str	r3, [r7, #12]
	__asm volatile
 800f7d4:	68fb      	ldr	r3, [r7, #12]
 800f7d6:	f383 8811 	msr	BASEPRI, r3
}
 800f7da:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800f7dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800f7de:	4618      	mov	r0, r3
 800f7e0:	3738      	adds	r7, #56	; 0x38
 800f7e2:	46bd      	mov	sp, r7
 800f7e4:	bd80      	pop	{r7, pc}
	...

0800f7e8 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 800f7e8:	b580      	push	{r7, lr}
 800f7ea:	b08c      	sub	sp, #48	; 0x30
 800f7ec:	af00      	add	r7, sp, #0
 800f7ee:	60f8      	str	r0, [r7, #12]
 800f7f0:	60b9      	str	r1, [r7, #8]
 800f7f2:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 800f7f4:	2300      	movs	r3, #0
 800f7f6:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f7f8:	68fb      	ldr	r3, [r7, #12]
 800f7fa:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f7fc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f7fe:	2b00      	cmp	r3, #0
 800f800:	d10c      	bne.n	800f81c <xQueueReceive+0x34>
	__asm volatile
 800f802:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f806:	b672      	cpsid	i
 800f808:	f383 8811 	msr	BASEPRI, r3
 800f80c:	f3bf 8f6f 	isb	sy
 800f810:	f3bf 8f4f 	dsb	sy
 800f814:	b662      	cpsie	i
 800f816:	623b      	str	r3, [r7, #32]
}
 800f818:	bf00      	nop
 800f81a:	e7fe      	b.n	800f81a <xQueueReceive+0x32>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800f81c:	68bb      	ldr	r3, [r7, #8]
 800f81e:	2b00      	cmp	r3, #0
 800f820:	d103      	bne.n	800f82a <xQueueReceive+0x42>
 800f822:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f824:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f826:	2b00      	cmp	r3, #0
 800f828:	d101      	bne.n	800f82e <xQueueReceive+0x46>
 800f82a:	2301      	movs	r3, #1
 800f82c:	e000      	b.n	800f830 <xQueueReceive+0x48>
 800f82e:	2300      	movs	r3, #0
 800f830:	2b00      	cmp	r3, #0
 800f832:	d10c      	bne.n	800f84e <xQueueReceive+0x66>
	__asm volatile
 800f834:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f838:	b672      	cpsid	i
 800f83a:	f383 8811 	msr	BASEPRI, r3
 800f83e:	f3bf 8f6f 	isb	sy
 800f842:	f3bf 8f4f 	dsb	sy
 800f846:	b662      	cpsie	i
 800f848:	61fb      	str	r3, [r7, #28]
}
 800f84a:	bf00      	nop
 800f84c:	e7fe      	b.n	800f84c <xQueueReceive+0x64>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800f84e:	f001 fa35 	bl	8010cbc <xTaskGetSchedulerState>
 800f852:	4603      	mov	r3, r0
 800f854:	2b00      	cmp	r3, #0
 800f856:	d102      	bne.n	800f85e <xQueueReceive+0x76>
 800f858:	687b      	ldr	r3, [r7, #4]
 800f85a:	2b00      	cmp	r3, #0
 800f85c:	d101      	bne.n	800f862 <xQueueReceive+0x7a>
 800f85e:	2301      	movs	r3, #1
 800f860:	e000      	b.n	800f864 <xQueueReceive+0x7c>
 800f862:	2300      	movs	r3, #0
 800f864:	2b00      	cmp	r3, #0
 800f866:	d10c      	bne.n	800f882 <xQueueReceive+0x9a>
	__asm volatile
 800f868:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f86c:	b672      	cpsid	i
 800f86e:	f383 8811 	msr	BASEPRI, r3
 800f872:	f3bf 8f6f 	isb	sy
 800f876:	f3bf 8f4f 	dsb	sy
 800f87a:	b662      	cpsie	i
 800f87c:	61bb      	str	r3, [r7, #24]
}
 800f87e:	bf00      	nop
 800f880:	e7fe      	b.n	800f880 <xQueueReceive+0x98>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800f882:	f001 fd6b 	bl	801135c <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800f886:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f888:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800f88a:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800f88c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f88e:	2b00      	cmp	r3, #0
 800f890:	d01f      	beq.n	800f8d2 <xQueueReceive+0xea>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 800f892:	68b9      	ldr	r1, [r7, #8]
 800f894:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f896:	f000 faa9 	bl	800fdec <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800f89a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800f89c:	1e5a      	subs	r2, r3, #1
 800f89e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8a0:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800f8a2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8a4:	691b      	ldr	r3, [r3, #16]
 800f8a6:	2b00      	cmp	r3, #0
 800f8a8:	d00f      	beq.n	800f8ca <xQueueReceive+0xe2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800f8aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f8ac:	3310      	adds	r3, #16
 800f8ae:	4618      	mov	r0, r3
 800f8b0:	f001 f83c 	bl	801092c <xTaskRemoveFromEventList>
 800f8b4:	4603      	mov	r3, r0
 800f8b6:	2b00      	cmp	r3, #0
 800f8b8:	d007      	beq.n	800f8ca <xQueueReceive+0xe2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800f8ba:	4b3d      	ldr	r3, [pc, #244]	; (800f9b0 <xQueueReceive+0x1c8>)
 800f8bc:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f8c0:	601a      	str	r2, [r3, #0]
 800f8c2:	f3bf 8f4f 	dsb	sy
 800f8c6:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800f8ca:	f001 fd7b 	bl	80113c4 <vPortExitCritical>
				return pdPASS;
 800f8ce:	2301      	movs	r3, #1
 800f8d0:	e069      	b.n	800f9a6 <xQueueReceive+0x1be>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800f8d2:	687b      	ldr	r3, [r7, #4]
 800f8d4:	2b00      	cmp	r3, #0
 800f8d6:	d103      	bne.n	800f8e0 <xQueueReceive+0xf8>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 800f8d8:	f001 fd74 	bl	80113c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800f8dc:	2300      	movs	r3, #0
 800f8de:	e062      	b.n	800f9a6 <xQueueReceive+0x1be>
				}
				else if( xEntryTimeSet == pdFALSE )
 800f8e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f8e2:	2b00      	cmp	r3, #0
 800f8e4:	d106      	bne.n	800f8f4 <xQueueReceive+0x10c>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800f8e6:	f107 0310 	add.w	r3, r7, #16
 800f8ea:	4618      	mov	r0, r3
 800f8ec:	f001 f882 	bl	80109f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800f8f0:	2301      	movs	r3, #1
 800f8f2:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800f8f4:	f001 fd66 	bl	80113c4 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 800f8f8:	f000 fe06 	bl	8010508 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800f8fc:	f001 fd2e 	bl	801135c <vPortEnterCritical>
 800f900:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f902:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800f906:	b25b      	sxtb	r3, r3
 800f908:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f90c:	d103      	bne.n	800f916 <xQueueReceive+0x12e>
 800f90e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f910:	2200      	movs	r2, #0
 800f912:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800f916:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f918:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800f91c:	b25b      	sxtb	r3, r3
 800f91e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800f922:	d103      	bne.n	800f92c <xQueueReceive+0x144>
 800f924:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f926:	2200      	movs	r2, #0
 800f928:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800f92c:	f001 fd4a 	bl	80113c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800f930:	1d3a      	adds	r2, r7, #4
 800f932:	f107 0310 	add.w	r3, r7, #16
 800f936:	4611      	mov	r1, r2
 800f938:	4618      	mov	r0, r3
 800f93a:	f001 f871 	bl	8010a20 <xTaskCheckForTimeOut>
 800f93e:	4603      	mov	r3, r0
 800f940:	2b00      	cmp	r3, #0
 800f942:	d123      	bne.n	800f98c <xQueueReceive+0x1a4>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f944:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f946:	f000 fac9 	bl	800fedc <prvIsQueueEmpty>
 800f94a:	4603      	mov	r3, r0
 800f94c:	2b00      	cmp	r3, #0
 800f94e:	d017      	beq.n	800f980 <xQueueReceive+0x198>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800f950:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800f952:	3324      	adds	r3, #36	; 0x24
 800f954:	687a      	ldr	r2, [r7, #4]
 800f956:	4611      	mov	r1, r2
 800f958:	4618      	mov	r0, r3
 800f95a:	f000 ffc1 	bl	80108e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800f95e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f960:	f000 fa6a 	bl	800fe38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800f964:	f000 fdde 	bl	8010524 <xTaskResumeAll>
 800f968:	4603      	mov	r3, r0
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d189      	bne.n	800f882 <xQueueReceive+0x9a>
				{
					portYIELD_WITHIN_API();
 800f96e:	4b10      	ldr	r3, [pc, #64]	; (800f9b0 <xQueueReceive+0x1c8>)
 800f970:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800f974:	601a      	str	r2, [r3, #0]
 800f976:	f3bf 8f4f 	dsb	sy
 800f97a:	f3bf 8f6f 	isb	sy
 800f97e:	e780      	b.n	800f882 <xQueueReceive+0x9a>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 800f980:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f982:	f000 fa59 	bl	800fe38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800f986:	f000 fdcd 	bl	8010524 <xTaskResumeAll>
 800f98a:	e77a      	b.n	800f882 <xQueueReceive+0x9a>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 800f98c:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f98e:	f000 fa53 	bl	800fe38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800f992:	f000 fdc7 	bl	8010524 <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800f996:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800f998:	f000 faa0 	bl	800fedc <prvIsQueueEmpty>
 800f99c:	4603      	mov	r3, r0
 800f99e:	2b00      	cmp	r3, #0
 800f9a0:	f43f af6f 	beq.w	800f882 <xQueueReceive+0x9a>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800f9a4:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800f9a6:	4618      	mov	r0, r3
 800f9a8:	3730      	adds	r7, #48	; 0x30
 800f9aa:	46bd      	mov	sp, r7
 800f9ac:	bd80      	pop	{r7, pc}
 800f9ae:	bf00      	nop
 800f9b0:	e000ed04 	.word	0xe000ed04

0800f9b4 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 800f9b4:	b580      	push	{r7, lr}
 800f9b6:	b08e      	sub	sp, #56	; 0x38
 800f9b8:	af00      	add	r7, sp, #0
 800f9ba:	6078      	str	r0, [r7, #4]
 800f9bc:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 800f9be:	2300      	movs	r3, #0
 800f9c0:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 800f9c2:	687b      	ldr	r3, [r7, #4]
 800f9c4:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 800f9c6:	2300      	movs	r3, #0
 800f9c8:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 800f9ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9cc:	2b00      	cmp	r3, #0
 800f9ce:	d10c      	bne.n	800f9ea <xQueueSemaphoreTake+0x36>
	__asm volatile
 800f9d0:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9d4:	b672      	cpsid	i
 800f9d6:	f383 8811 	msr	BASEPRI, r3
 800f9da:	f3bf 8f6f 	isb	sy
 800f9de:	f3bf 8f4f 	dsb	sy
 800f9e2:	b662      	cpsie	i
 800f9e4:	623b      	str	r3, [r7, #32]
}
 800f9e6:	bf00      	nop
 800f9e8:	e7fe      	b.n	800f9e8 <xQueueSemaphoreTake+0x34>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 800f9ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800f9ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800f9ee:	2b00      	cmp	r3, #0
 800f9f0:	d00c      	beq.n	800fa0c <xQueueSemaphoreTake+0x58>
	__asm volatile
 800f9f2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800f9f6:	b672      	cpsid	i
 800f9f8:	f383 8811 	msr	BASEPRI, r3
 800f9fc:	f3bf 8f6f 	isb	sy
 800fa00:	f3bf 8f4f 	dsb	sy
 800fa04:	b662      	cpsie	i
 800fa06:	61fb      	str	r3, [r7, #28]
}
 800fa08:	bf00      	nop
 800fa0a:	e7fe      	b.n	800fa0a <xQueueSemaphoreTake+0x56>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 800fa0c:	f001 f956 	bl	8010cbc <xTaskGetSchedulerState>
 800fa10:	4603      	mov	r3, r0
 800fa12:	2b00      	cmp	r3, #0
 800fa14:	d102      	bne.n	800fa1c <xQueueSemaphoreTake+0x68>
 800fa16:	683b      	ldr	r3, [r7, #0]
 800fa18:	2b00      	cmp	r3, #0
 800fa1a:	d101      	bne.n	800fa20 <xQueueSemaphoreTake+0x6c>
 800fa1c:	2301      	movs	r3, #1
 800fa1e:	e000      	b.n	800fa22 <xQueueSemaphoreTake+0x6e>
 800fa20:	2300      	movs	r3, #0
 800fa22:	2b00      	cmp	r3, #0
 800fa24:	d10c      	bne.n	800fa40 <xQueueSemaphoreTake+0x8c>
	__asm volatile
 800fa26:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fa2a:	b672      	cpsid	i
 800fa2c:	f383 8811 	msr	BASEPRI, r3
 800fa30:	f3bf 8f6f 	isb	sy
 800fa34:	f3bf 8f4f 	dsb	sy
 800fa38:	b662      	cpsie	i
 800fa3a:	61bb      	str	r3, [r7, #24]
}
 800fa3c:	bf00      	nop
 800fa3e:	e7fe      	b.n	800fa3e <xQueueSemaphoreTake+0x8a>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 800fa40:	f001 fc8c 	bl	801135c <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 800fa44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa46:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fa48:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 800fa4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa4c:	2b00      	cmp	r3, #0
 800fa4e:	d024      	beq.n	800fa9a <xQueueSemaphoreTake+0xe6>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 800fa50:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fa52:	1e5a      	subs	r2, r3, #1
 800fa54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa56:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fa58:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa5a:	681b      	ldr	r3, [r3, #0]
 800fa5c:	2b00      	cmp	r3, #0
 800fa5e:	d104      	bne.n	800fa6a <xQueueSemaphoreTake+0xb6>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 800fa60:	f001 faf2 	bl	8011048 <pvTaskIncrementMutexHeldCount>
 800fa64:	4602      	mov	r2, r0
 800fa66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa68:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fa6a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa6c:	691b      	ldr	r3, [r3, #16]
 800fa6e:	2b00      	cmp	r3, #0
 800fa70:	d00f      	beq.n	800fa92 <xQueueSemaphoreTake+0xde>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fa72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fa74:	3310      	adds	r3, #16
 800fa76:	4618      	mov	r0, r3
 800fa78:	f000 ff58 	bl	801092c <xTaskRemoveFromEventList>
 800fa7c:	4603      	mov	r3, r0
 800fa7e:	2b00      	cmp	r3, #0
 800fa80:	d007      	beq.n	800fa92 <xQueueSemaphoreTake+0xde>
					{
						queueYIELD_IF_USING_PREEMPTION();
 800fa82:	4b55      	ldr	r3, [pc, #340]	; (800fbd8 <xQueueSemaphoreTake+0x224>)
 800fa84:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fa88:	601a      	str	r2, [r3, #0]
 800fa8a:	f3bf 8f4f 	dsb	sy
 800fa8e:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 800fa92:	f001 fc97 	bl	80113c4 <vPortExitCritical>
				return pdPASS;
 800fa96:	2301      	movs	r3, #1
 800fa98:	e099      	b.n	800fbce <xQueueSemaphoreTake+0x21a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 800fa9a:	683b      	ldr	r3, [r7, #0]
 800fa9c:	2b00      	cmp	r3, #0
 800fa9e:	d113      	bne.n	800fac8 <xQueueSemaphoreTake+0x114>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 800faa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800faa2:	2b00      	cmp	r3, #0
 800faa4:	d00c      	beq.n	800fac0 <xQueueSemaphoreTake+0x10c>
	__asm volatile
 800faa6:	f04f 0350 	mov.w	r3, #80	; 0x50
 800faaa:	b672      	cpsid	i
 800faac:	f383 8811 	msr	BASEPRI, r3
 800fab0:	f3bf 8f6f 	isb	sy
 800fab4:	f3bf 8f4f 	dsb	sy
 800fab8:	b662      	cpsie	i
 800faba:	617b      	str	r3, [r7, #20]
}
 800fabc:	bf00      	nop
 800fabe:	e7fe      	b.n	800fabe <xQueueSemaphoreTake+0x10a>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 800fac0:	f001 fc80 	bl	80113c4 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 800fac4:	2300      	movs	r3, #0
 800fac6:	e082      	b.n	800fbce <xQueueSemaphoreTake+0x21a>
				}
				else if( xEntryTimeSet == pdFALSE )
 800fac8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800faca:	2b00      	cmp	r3, #0
 800facc:	d106      	bne.n	800fadc <xQueueSemaphoreTake+0x128>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 800face:	f107 030c 	add.w	r3, r7, #12
 800fad2:	4618      	mov	r0, r3
 800fad4:	f000 ff8e 	bl	80109f4 <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 800fad8:	2301      	movs	r3, #1
 800fada:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 800fadc:	f001 fc72 	bl	80113c4 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800fae0:	f000 fd12 	bl	8010508 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 800fae4:	f001 fc3a 	bl	801135c <vPortEnterCritical>
 800fae8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faea:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800faee:	b25b      	sxtb	r3, r3
 800faf0:	f1b3 3fff 	cmp.w	r3, #4294967295
 800faf4:	d103      	bne.n	800fafe <xQueueSemaphoreTake+0x14a>
 800faf6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800faf8:	2200      	movs	r2, #0
 800fafa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800fafe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb00:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fb04:	b25b      	sxtb	r3, r3
 800fb06:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fb0a:	d103      	bne.n	800fb14 <xQueueSemaphoreTake+0x160>
 800fb0c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb0e:	2200      	movs	r2, #0
 800fb10:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 800fb14:	f001 fc56 	bl	80113c4 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 800fb18:	463a      	mov	r2, r7
 800fb1a:	f107 030c 	add.w	r3, r7, #12
 800fb1e:	4611      	mov	r1, r2
 800fb20:	4618      	mov	r0, r3
 800fb22:	f000 ff7d 	bl	8010a20 <xTaskCheckForTimeOut>
 800fb26:	4603      	mov	r3, r0
 800fb28:	2b00      	cmp	r3, #0
 800fb2a:	d132      	bne.n	800fb92 <xQueueSemaphoreTake+0x1de>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fb2c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb2e:	f000 f9d5 	bl	800fedc <prvIsQueueEmpty>
 800fb32:	4603      	mov	r3, r0
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d026      	beq.n	800fb86 <xQueueSemaphoreTake+0x1d2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fb38:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	2b00      	cmp	r3, #0
 800fb3e:	d109      	bne.n	800fb54 <xQueueSemaphoreTake+0x1a0>
					{
						taskENTER_CRITICAL();
 800fb40:	f001 fc0c 	bl	801135c <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fb44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb46:	689b      	ldr	r3, [r3, #8]
 800fb48:	4618      	mov	r0, r3
 800fb4a:	f001 f8d5 	bl	8010cf8 <xTaskPriorityInherit>
 800fb4e:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800fb50:	f001 fc38 	bl	80113c4 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 800fb54:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fb56:	3324      	adds	r3, #36	; 0x24
 800fb58:	683a      	ldr	r2, [r7, #0]
 800fb5a:	4611      	mov	r1, r2
 800fb5c:	4618      	mov	r0, r3
 800fb5e:	f000 febf 	bl	80108e0 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800fb62:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb64:	f000 f968 	bl	800fe38 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 800fb68:	f000 fcdc 	bl	8010524 <xTaskResumeAll>
 800fb6c:	4603      	mov	r3, r0
 800fb6e:	2b00      	cmp	r3, #0
 800fb70:	f47f af66 	bne.w	800fa40 <xQueueSemaphoreTake+0x8c>
				{
					portYIELD_WITHIN_API();
 800fb74:	4b18      	ldr	r3, [pc, #96]	; (800fbd8 <xQueueSemaphoreTake+0x224>)
 800fb76:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800fb7a:	601a      	str	r2, [r3, #0]
 800fb7c:	f3bf 8f4f 	dsb	sy
 800fb80:	f3bf 8f6f 	isb	sy
 800fb84:	e75c      	b.n	800fa40 <xQueueSemaphoreTake+0x8c>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 800fb86:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb88:	f000 f956 	bl	800fe38 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 800fb8c:	f000 fcca 	bl	8010524 <xTaskResumeAll>
 800fb90:	e756      	b.n	800fa40 <xQueueSemaphoreTake+0x8c>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 800fb92:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb94:	f000 f950 	bl	800fe38 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 800fb98:	f000 fcc4 	bl	8010524 <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 800fb9c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fb9e:	f000 f99d 	bl	800fedc <prvIsQueueEmpty>
 800fba2:	4603      	mov	r3, r0
 800fba4:	2b00      	cmp	r3, #0
 800fba6:	f43f af4b 	beq.w	800fa40 <xQueueSemaphoreTake+0x8c>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 800fbaa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbac:	2b00      	cmp	r3, #0
 800fbae:	d00d      	beq.n	800fbcc <xQueueSemaphoreTake+0x218>
					{
						taskENTER_CRITICAL();
 800fbb0:	f001 fbd4 	bl	801135c <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 800fbb4:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800fbb6:	f000 f897 	bl	800fce8 <prvGetDisinheritPriorityAfterTimeout>
 800fbba:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 800fbbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fbbe:	689b      	ldr	r3, [r3, #8]
 800fbc0:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800fbc2:	4618      	mov	r0, r3
 800fbc4:	f001 f9a2 	bl	8010f0c <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 800fbc8:	f001 fbfc 	bl	80113c4 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 800fbcc:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 800fbce:	4618      	mov	r0, r3
 800fbd0:	3738      	adds	r7, #56	; 0x38
 800fbd2:	46bd      	mov	sp, r7
 800fbd4:	bd80      	pop	{r7, pc}
 800fbd6:	bf00      	nop
 800fbd8:	e000ed04 	.word	0xe000ed04

0800fbdc <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b08e      	sub	sp, #56	; 0x38
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	60f8      	str	r0, [r7, #12]
 800fbe4:	60b9      	str	r1, [r7, #8]
 800fbe6:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 800fbe8:	68fb      	ldr	r3, [r7, #12]
 800fbea:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 800fbec:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fbee:	2b00      	cmp	r3, #0
 800fbf0:	d10c      	bne.n	800fc0c <xQueueReceiveFromISR+0x30>
	__asm volatile
 800fbf2:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fbf6:	b672      	cpsid	i
 800fbf8:	f383 8811 	msr	BASEPRI, r3
 800fbfc:	f3bf 8f6f 	isb	sy
 800fc00:	f3bf 8f4f 	dsb	sy
 800fc04:	b662      	cpsie	i
 800fc06:	623b      	str	r3, [r7, #32]
}
 800fc08:	bf00      	nop
 800fc0a:	e7fe      	b.n	800fc0a <xQueueReceiveFromISR+0x2e>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 800fc0c:	68bb      	ldr	r3, [r7, #8]
 800fc0e:	2b00      	cmp	r3, #0
 800fc10:	d103      	bne.n	800fc1a <xQueueReceiveFromISR+0x3e>
 800fc12:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d101      	bne.n	800fc1e <xQueueReceiveFromISR+0x42>
 800fc1a:	2301      	movs	r3, #1
 800fc1c:	e000      	b.n	800fc20 <xQueueReceiveFromISR+0x44>
 800fc1e:	2300      	movs	r3, #0
 800fc20:	2b00      	cmp	r3, #0
 800fc22:	d10c      	bne.n	800fc3e <xQueueReceiveFromISR+0x62>
	__asm volatile
 800fc24:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc28:	b672      	cpsid	i
 800fc2a:	f383 8811 	msr	BASEPRI, r3
 800fc2e:	f3bf 8f6f 	isb	sy
 800fc32:	f3bf 8f4f 	dsb	sy
 800fc36:	b662      	cpsie	i
 800fc38:	61fb      	str	r3, [r7, #28]
}
 800fc3a:	bf00      	nop
 800fc3c:	e7fe      	b.n	800fc3c <xQueueReceiveFromISR+0x60>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 800fc3e:	f001 fc75 	bl	801152c <vPortValidateInterruptPriority>
	__asm volatile
 800fc42:	f3ef 8211 	mrs	r2, BASEPRI
 800fc46:	f04f 0350 	mov.w	r3, #80	; 0x50
 800fc4a:	b672      	cpsid	i
 800fc4c:	f383 8811 	msr	BASEPRI, r3
 800fc50:	f3bf 8f6f 	isb	sy
 800fc54:	f3bf 8f4f 	dsb	sy
 800fc58:	b662      	cpsie	i
 800fc5a:	61ba      	str	r2, [r7, #24]
 800fc5c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800fc5e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 800fc60:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fc62:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fc66:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fc68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc6a:	2b00      	cmp	r3, #0
 800fc6c:	d02f      	beq.n	800fcce <xQueueReceiveFromISR+0xf2>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800fc6e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc70:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fc74:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 800fc78:	68b9      	ldr	r1, [r7, #8]
 800fc7a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800fc7c:	f000 f8b6 	bl	800fdec <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 800fc80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800fc82:	1e5a      	subs	r2, r3, #1
 800fc84:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc86:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 800fc88:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 800fc8c:	f1b3 3fff 	cmp.w	r3, #4294967295
 800fc90:	d112      	bne.n	800fcb8 <xQueueReceiveFromISR+0xdc>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fc92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc94:	691b      	ldr	r3, [r3, #16]
 800fc96:	2b00      	cmp	r3, #0
 800fc98:	d016      	beq.n	800fcc8 <xQueueReceiveFromISR+0xec>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fc9a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fc9c:	3310      	adds	r3, #16
 800fc9e:	4618      	mov	r0, r3
 800fca0:	f000 fe44 	bl	801092c <xTaskRemoveFromEventList>
 800fca4:	4603      	mov	r3, r0
 800fca6:	2b00      	cmp	r3, #0
 800fca8:	d00e      	beq.n	800fcc8 <xQueueReceiveFromISR+0xec>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 800fcaa:	687b      	ldr	r3, [r7, #4]
 800fcac:	2b00      	cmp	r3, #0
 800fcae:	d00b      	beq.n	800fcc8 <xQueueReceiveFromISR+0xec>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	2201      	movs	r2, #1
 800fcb4:	601a      	str	r2, [r3, #0]
 800fcb6:	e007      	b.n	800fcc8 <xQueueReceiveFromISR+0xec>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 800fcb8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800fcbc:	3301      	adds	r3, #1
 800fcbe:	b2db      	uxtb	r3, r3
 800fcc0:	b25a      	sxtb	r2, r3
 800fcc2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800fcc4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 800fcc8:	2301      	movs	r3, #1
 800fcca:	637b      	str	r3, [r7, #52]	; 0x34
 800fccc:	e001      	b.n	800fcd2 <xQueueReceiveFromISR+0xf6>
		}
		else
		{
			xReturn = pdFAIL;
 800fcce:	2300      	movs	r3, #0
 800fcd0:	637b      	str	r3, [r7, #52]	; 0x34
 800fcd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800fcd4:	613b      	str	r3, [r7, #16]
	__asm volatile
 800fcd6:	693b      	ldr	r3, [r7, #16]
 800fcd8:	f383 8811 	msr	BASEPRI, r3
}
 800fcdc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 800fcde:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 800fce0:	4618      	mov	r0, r3
 800fce2:	3738      	adds	r7, #56	; 0x38
 800fce4:	46bd      	mov	sp, r7
 800fce6:	bd80      	pop	{r7, pc}

0800fce8 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 800fce8:	b480      	push	{r7}
 800fcea:	b085      	sub	sp, #20
 800fcec:	af00      	add	r7, sp, #0
 800fcee:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fcf4:	2b00      	cmp	r3, #0
 800fcf6:	d006      	beq.n	800fd06 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 800fcf8:	687b      	ldr	r3, [r7, #4]
 800fcfa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800fcfc:	681b      	ldr	r3, [r3, #0]
 800fcfe:	f1c3 0307 	rsb	r3, r3, #7
 800fd02:	60fb      	str	r3, [r7, #12]
 800fd04:	e001      	b.n	800fd0a <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 800fd06:	2300      	movs	r3, #0
 800fd08:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 800fd0a:	68fb      	ldr	r3, [r7, #12]
	}
 800fd0c:	4618      	mov	r0, r3
 800fd0e:	3714      	adds	r7, #20
 800fd10:	46bd      	mov	sp, r7
 800fd12:	f85d 7b04 	ldr.w	r7, [sp], #4
 800fd16:	4770      	bx	lr

0800fd18 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 800fd18:	b580      	push	{r7, lr}
 800fd1a:	b086      	sub	sp, #24
 800fd1c:	af00      	add	r7, sp, #0
 800fd1e:	60f8      	str	r0, [r7, #12]
 800fd20:	60b9      	str	r1, [r7, #8]
 800fd22:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 800fd24:	2300      	movs	r3, #0
 800fd26:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 800fd28:	68fb      	ldr	r3, [r7, #12]
 800fd2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800fd2c:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800fd2e:	68fb      	ldr	r3, [r7, #12]
 800fd30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd32:	2b00      	cmp	r3, #0
 800fd34:	d10d      	bne.n	800fd52 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 800fd36:	68fb      	ldr	r3, [r7, #12]
 800fd38:	681b      	ldr	r3, [r3, #0]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d14d      	bne.n	800fdda <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800fd3e:	68fb      	ldr	r3, [r7, #12]
 800fd40:	689b      	ldr	r3, [r3, #8]
 800fd42:	4618      	mov	r0, r3
 800fd44:	f001 f858 	bl	8010df8 <xTaskPriorityDisinherit>
 800fd48:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 800fd4a:	68fb      	ldr	r3, [r7, #12]
 800fd4c:	2200      	movs	r2, #0
 800fd4e:	609a      	str	r2, [r3, #8]
 800fd50:	e043      	b.n	800fdda <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d119      	bne.n	800fd8c <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fd58:	68fb      	ldr	r3, [r7, #12]
 800fd5a:	6858      	ldr	r0, [r3, #4]
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd60:	461a      	mov	r2, r3
 800fd62:	68b9      	ldr	r1, [r7, #8]
 800fd64:	f00d fcd3 	bl	801d70e <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fd68:	68fb      	ldr	r3, [r7, #12]
 800fd6a:	685a      	ldr	r2, [r3, #4]
 800fd6c:	68fb      	ldr	r3, [r7, #12]
 800fd6e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd70:	441a      	add	r2, r3
 800fd72:	68fb      	ldr	r3, [r7, #12]
 800fd74:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fd76:	68fb      	ldr	r3, [r7, #12]
 800fd78:	685a      	ldr	r2, [r3, #4]
 800fd7a:	68fb      	ldr	r3, [r7, #12]
 800fd7c:	689b      	ldr	r3, [r3, #8]
 800fd7e:	429a      	cmp	r2, r3
 800fd80:	d32b      	bcc.n	800fdda <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 800fd82:	68fb      	ldr	r3, [r7, #12]
 800fd84:	681a      	ldr	r2, [r3, #0]
 800fd86:	68fb      	ldr	r3, [r7, #12]
 800fd88:	605a      	str	r2, [r3, #4]
 800fd8a:	e026      	b.n	800fdda <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800fd8c:	68fb      	ldr	r3, [r7, #12]
 800fd8e:	68d8      	ldr	r0, [r3, #12]
 800fd90:	68fb      	ldr	r3, [r7, #12]
 800fd92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fd94:	461a      	mov	r2, r3
 800fd96:	68b9      	ldr	r1, [r7, #8]
 800fd98:	f00d fcb9 	bl	801d70e <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800fd9c:	68fb      	ldr	r3, [r7, #12]
 800fd9e:	68da      	ldr	r2, [r3, #12]
 800fda0:	68fb      	ldr	r3, [r7, #12]
 800fda2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fda4:	425b      	negs	r3, r3
 800fda6:	441a      	add	r2, r3
 800fda8:	68fb      	ldr	r3, [r7, #12]
 800fdaa:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800fdac:	68fb      	ldr	r3, [r7, #12]
 800fdae:	68da      	ldr	r2, [r3, #12]
 800fdb0:	68fb      	ldr	r3, [r7, #12]
 800fdb2:	681b      	ldr	r3, [r3, #0]
 800fdb4:	429a      	cmp	r2, r3
 800fdb6:	d207      	bcs.n	800fdc8 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 800fdb8:	68fb      	ldr	r3, [r7, #12]
 800fdba:	689a      	ldr	r2, [r3, #8]
 800fdbc:	68fb      	ldr	r3, [r7, #12]
 800fdbe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdc0:	425b      	negs	r3, r3
 800fdc2:	441a      	add	r2, r3
 800fdc4:	68fb      	ldr	r3, [r7, #12]
 800fdc6:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 800fdc8:	687b      	ldr	r3, [r7, #4]
 800fdca:	2b02      	cmp	r3, #2
 800fdcc:	d105      	bne.n	800fdda <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 800fdce:	693b      	ldr	r3, [r7, #16]
 800fdd0:	2b00      	cmp	r3, #0
 800fdd2:	d002      	beq.n	800fdda <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 800fdd4:	693b      	ldr	r3, [r7, #16]
 800fdd6:	3b01      	subs	r3, #1
 800fdd8:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 800fdda:	693b      	ldr	r3, [r7, #16]
 800fddc:	1c5a      	adds	r2, r3, #1
 800fdde:	68fb      	ldr	r3, [r7, #12]
 800fde0:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 800fde2:	697b      	ldr	r3, [r7, #20]
}
 800fde4:	4618      	mov	r0, r3
 800fde6:	3718      	adds	r7, #24
 800fde8:	46bd      	mov	sp, r7
 800fdea:	bd80      	pop	{r7, pc}

0800fdec <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 800fdec:	b580      	push	{r7, lr}
 800fdee:	b082      	sub	sp, #8
 800fdf0:	af00      	add	r7, sp, #0
 800fdf2:	6078      	str	r0, [r7, #4]
 800fdf4:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 800fdf6:	687b      	ldr	r3, [r7, #4]
 800fdf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fdfa:	2b00      	cmp	r3, #0
 800fdfc:	d018      	beq.n	800fe30 <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 800fdfe:	687b      	ldr	r3, [r7, #4]
 800fe00:	68da      	ldr	r2, [r3, #12]
 800fe02:	687b      	ldr	r3, [r7, #4]
 800fe04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe06:	441a      	add	r2, r3
 800fe08:	687b      	ldr	r3, [r7, #4]
 800fe0a:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 800fe0c:	687b      	ldr	r3, [r7, #4]
 800fe0e:	68da      	ldr	r2, [r3, #12]
 800fe10:	687b      	ldr	r3, [r7, #4]
 800fe12:	689b      	ldr	r3, [r3, #8]
 800fe14:	429a      	cmp	r2, r3
 800fe16:	d303      	bcc.n	800fe20 <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 800fe18:	687b      	ldr	r3, [r7, #4]
 800fe1a:	681a      	ldr	r2, [r3, #0]
 800fe1c:	687b      	ldr	r3, [r7, #4]
 800fe1e:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 800fe20:	687b      	ldr	r3, [r7, #4]
 800fe22:	68d9      	ldr	r1, [r3, #12]
 800fe24:	687b      	ldr	r3, [r7, #4]
 800fe26:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800fe28:	461a      	mov	r2, r3
 800fe2a:	6838      	ldr	r0, [r7, #0]
 800fe2c:	f00d fc6f 	bl	801d70e <memcpy>
	}
}
 800fe30:	bf00      	nop
 800fe32:	3708      	adds	r7, #8
 800fe34:	46bd      	mov	sp, r7
 800fe36:	bd80      	pop	{r7, pc}

0800fe38 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 800fe38:	b580      	push	{r7, lr}
 800fe3a:	b084      	sub	sp, #16
 800fe3c:	af00      	add	r7, sp, #0
 800fe3e:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800fe40:	f001 fa8c 	bl	801135c <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 800fe44:	687b      	ldr	r3, [r7, #4]
 800fe46:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 800fe4a:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fe4c:	e011      	b.n	800fe72 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800fe4e:	687b      	ldr	r3, [r7, #4]
 800fe50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fe52:	2b00      	cmp	r3, #0
 800fe54:	d012      	beq.n	800fe7c <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 800fe56:	687b      	ldr	r3, [r7, #4]
 800fe58:	3324      	adds	r3, #36	; 0x24
 800fe5a:	4618      	mov	r0, r3
 800fe5c:	f000 fd66 	bl	801092c <xTaskRemoveFromEventList>
 800fe60:	4603      	mov	r3, r0
 800fe62:	2b00      	cmp	r3, #0
 800fe64:	d001      	beq.n	800fe6a <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 800fe66:	f000 fe41 	bl	8010aec <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 800fe6a:	7bfb      	ldrb	r3, [r7, #15]
 800fe6c:	3b01      	subs	r3, #1
 800fe6e:	b2db      	uxtb	r3, r3
 800fe70:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800fe72:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800fe76:	2b00      	cmp	r3, #0
 800fe78:	dce9      	bgt.n	800fe4e <prvUnlockQueue+0x16>
 800fe7a:	e000      	b.n	800fe7e <prvUnlockQueue+0x46>
					break;
 800fe7c:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800fe7e:	687b      	ldr	r3, [r7, #4]
 800fe80:	22ff      	movs	r2, #255	; 0xff
 800fe82:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 800fe86:	f001 fa9d 	bl	80113c4 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 800fe8a:	f001 fa67 	bl	801135c <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800fe8e:	687b      	ldr	r3, [r7, #4]
 800fe90:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800fe94:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 800fe96:	e011      	b.n	800febc <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 800fe98:	687b      	ldr	r3, [r7, #4]
 800fe9a:	691b      	ldr	r3, [r3, #16]
 800fe9c:	2b00      	cmp	r3, #0
 800fe9e:	d012      	beq.n	800fec6 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800fea0:	687b      	ldr	r3, [r7, #4]
 800fea2:	3310      	adds	r3, #16
 800fea4:	4618      	mov	r0, r3
 800fea6:	f000 fd41 	bl	801092c <xTaskRemoveFromEventList>
 800feaa:	4603      	mov	r3, r0
 800feac:	2b00      	cmp	r3, #0
 800feae:	d001      	beq.n	800feb4 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800feb0:	f000 fe1c 	bl	8010aec <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 800feb4:	7bbb      	ldrb	r3, [r7, #14]
 800feb6:	3b01      	subs	r3, #1
 800feb8:	b2db      	uxtb	r3, r3
 800feba:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800febc:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800fec0:	2b00      	cmp	r3, #0
 800fec2:	dce9      	bgt.n	800fe98 <prvUnlockQueue+0x60>
 800fec4:	e000      	b.n	800fec8 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 800fec6:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 800fec8:	687b      	ldr	r3, [r7, #4]
 800feca:	22ff      	movs	r2, #255	; 0xff
 800fecc:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 800fed0:	f001 fa78 	bl	80113c4 <vPortExitCritical>
}
 800fed4:	bf00      	nop
 800fed6:	3710      	adds	r7, #16
 800fed8:	46bd      	mov	sp, r7
 800feda:	bd80      	pop	{r7, pc}

0800fedc <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 800fedc:	b580      	push	{r7, lr}
 800fede:	b084      	sub	sp, #16
 800fee0:	af00      	add	r7, sp, #0
 800fee2:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800fee4:	f001 fa3a 	bl	801135c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 800fee8:	687b      	ldr	r3, [r7, #4]
 800feea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800feec:	2b00      	cmp	r3, #0
 800feee:	d102      	bne.n	800fef6 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 800fef0:	2301      	movs	r3, #1
 800fef2:	60fb      	str	r3, [r7, #12]
 800fef4:	e001      	b.n	800fefa <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 800fef6:	2300      	movs	r3, #0
 800fef8:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800fefa:	f001 fa63 	bl	80113c4 <vPortExitCritical>

	return xReturn;
 800fefe:	68fb      	ldr	r3, [r7, #12]
}
 800ff00:	4618      	mov	r0, r3
 800ff02:	3710      	adds	r7, #16
 800ff04:	46bd      	mov	sp, r7
 800ff06:	bd80      	pop	{r7, pc}

0800ff08 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 800ff08:	b580      	push	{r7, lr}
 800ff0a:	b084      	sub	sp, #16
 800ff0c:	af00      	add	r7, sp, #0
 800ff0e:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 800ff10:	f001 fa24 	bl	801135c <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 800ff14:	687b      	ldr	r3, [r7, #4]
 800ff16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 800ff18:	687b      	ldr	r3, [r7, #4]
 800ff1a:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800ff1c:	429a      	cmp	r2, r3
 800ff1e:	d102      	bne.n	800ff26 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 800ff20:	2301      	movs	r3, #1
 800ff22:	60fb      	str	r3, [r7, #12]
 800ff24:	e001      	b.n	800ff2a <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 800ff26:	2300      	movs	r3, #0
 800ff28:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 800ff2a:	f001 fa4b 	bl	80113c4 <vPortExitCritical>

	return xReturn;
 800ff2e:	68fb      	ldr	r3, [r7, #12]
}
 800ff30:	4618      	mov	r0, r3
 800ff32:	3710      	adds	r7, #16
 800ff34:	46bd      	mov	sp, r7
 800ff36:	bd80      	pop	{r7, pc}

0800ff38 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 800ff38:	b580      	push	{r7, lr}
 800ff3a:	b08e      	sub	sp, #56	; 0x38
 800ff3c:	af04      	add	r7, sp, #16
 800ff3e:	60f8      	str	r0, [r7, #12]
 800ff40:	60b9      	str	r1, [r7, #8]
 800ff42:	607a      	str	r2, [r7, #4]
 800ff44:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 800ff46:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ff48:	2b00      	cmp	r3, #0
 800ff4a:	d10c      	bne.n	800ff66 <xTaskCreateStatic+0x2e>
	__asm volatile
 800ff4c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff50:	b672      	cpsid	i
 800ff52:	f383 8811 	msr	BASEPRI, r3
 800ff56:	f3bf 8f6f 	isb	sy
 800ff5a:	f3bf 8f4f 	dsb	sy
 800ff5e:	b662      	cpsie	i
 800ff60:	623b      	str	r3, [r7, #32]
}
 800ff62:	bf00      	nop
 800ff64:	e7fe      	b.n	800ff64 <xTaskCreateStatic+0x2c>
		configASSERT( pxTaskBuffer != NULL );
 800ff66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ff68:	2b00      	cmp	r3, #0
 800ff6a:	d10c      	bne.n	800ff86 <xTaskCreateStatic+0x4e>
	__asm volatile
 800ff6c:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff70:	b672      	cpsid	i
 800ff72:	f383 8811 	msr	BASEPRI, r3
 800ff76:	f3bf 8f6f 	isb	sy
 800ff7a:	f3bf 8f4f 	dsb	sy
 800ff7e:	b662      	cpsie	i
 800ff80:	61fb      	str	r3, [r7, #28]
}
 800ff82:	bf00      	nop
 800ff84:	e7fe      	b.n	800ff84 <xTaskCreateStatic+0x4c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800ff86:	23a0      	movs	r3, #160	; 0xa0
 800ff88:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 800ff8a:	693b      	ldr	r3, [r7, #16]
 800ff8c:	2ba0      	cmp	r3, #160	; 0xa0
 800ff8e:	d00c      	beq.n	800ffaa <xTaskCreateStatic+0x72>
	__asm volatile
 800ff90:	f04f 0350 	mov.w	r3, #80	; 0x50
 800ff94:	b672      	cpsid	i
 800ff96:	f383 8811 	msr	BASEPRI, r3
 800ff9a:	f3bf 8f6f 	isb	sy
 800ff9e:	f3bf 8f4f 	dsb	sy
 800ffa2:	b662      	cpsie	i
 800ffa4:	61bb      	str	r3, [r7, #24]
}
 800ffa6:	bf00      	nop
 800ffa8:	e7fe      	b.n	800ffa8 <xTaskCreateStatic+0x70>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800ffaa:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 800ffac:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffae:	2b00      	cmp	r3, #0
 800ffb0:	d01e      	beq.n	800fff0 <xTaskCreateStatic+0xb8>
 800ffb2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800ffb4:	2b00      	cmp	r3, #0
 800ffb6:	d01b      	beq.n	800fff0 <xTaskCreateStatic+0xb8>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800ffb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800ffba:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 800ffbc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffbe:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800ffc0:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 800ffc2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffc4:	2202      	movs	r2, #2
 800ffc6:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 800ffca:	2300      	movs	r3, #0
 800ffcc:	9303      	str	r3, [sp, #12]
 800ffce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ffd0:	9302      	str	r3, [sp, #8]
 800ffd2:	f107 0314 	add.w	r3, r7, #20
 800ffd6:	9301      	str	r3, [sp, #4]
 800ffd8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800ffda:	9300      	str	r3, [sp, #0]
 800ffdc:	683b      	ldr	r3, [r7, #0]
 800ffde:	687a      	ldr	r2, [r7, #4]
 800ffe0:	68b9      	ldr	r1, [r7, #8]
 800ffe2:	68f8      	ldr	r0, [r7, #12]
 800ffe4:	f000 f850 	bl	8010088 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 800ffe8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ffea:	f000 f8ed 	bl	80101c8 <prvAddNewTaskToReadyList>
 800ffee:	e001      	b.n	800fff4 <xTaskCreateStatic+0xbc>
		}
		else
		{
			xReturn = NULL;
 800fff0:	2300      	movs	r3, #0
 800fff2:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 800fff4:	697b      	ldr	r3, [r7, #20]
	}
 800fff6:	4618      	mov	r0, r3
 800fff8:	3728      	adds	r7, #40	; 0x28
 800fffa:	46bd      	mov	sp, r7
 800fffc:	bd80      	pop	{r7, pc}

0800fffe <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 800fffe:	b580      	push	{r7, lr}
 8010000:	b08c      	sub	sp, #48	; 0x30
 8010002:	af04      	add	r7, sp, #16
 8010004:	60f8      	str	r0, [r7, #12]
 8010006:	60b9      	str	r1, [r7, #8]
 8010008:	603b      	str	r3, [r7, #0]
 801000a:	4613      	mov	r3, r2
 801000c:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 801000e:	88fb      	ldrh	r3, [r7, #6]
 8010010:	009b      	lsls	r3, r3, #2
 8010012:	4618      	mov	r0, r3
 8010014:	f001 face 	bl	80115b4 <pvPortMalloc>
 8010018:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 801001a:	697b      	ldr	r3, [r7, #20]
 801001c:	2b00      	cmp	r3, #0
 801001e:	d00e      	beq.n	801003e <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8010020:	20a0      	movs	r0, #160	; 0xa0
 8010022:	f001 fac7 	bl	80115b4 <pvPortMalloc>
 8010026:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 8010028:	69fb      	ldr	r3, [r7, #28]
 801002a:	2b00      	cmp	r3, #0
 801002c:	d003      	beq.n	8010036 <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 801002e:	69fb      	ldr	r3, [r7, #28]
 8010030:	697a      	ldr	r2, [r7, #20]
 8010032:	631a      	str	r2, [r3, #48]	; 0x30
 8010034:	e005      	b.n	8010042 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 8010036:	6978      	ldr	r0, [r7, #20]
 8010038:	f001 fb86 	bl	8011748 <vPortFree>
 801003c:	e001      	b.n	8010042 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 801003e:	2300      	movs	r3, #0
 8010040:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8010042:	69fb      	ldr	r3, [r7, #28]
 8010044:	2b00      	cmp	r3, #0
 8010046:	d017      	beq.n	8010078 <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 8010048:	69fb      	ldr	r3, [r7, #28]
 801004a:	2200      	movs	r2, #0
 801004c:	f883 209d 	strb.w	r2, [r3, #157]	; 0x9d
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8010050:	88fa      	ldrh	r2, [r7, #6]
 8010052:	2300      	movs	r3, #0
 8010054:	9303      	str	r3, [sp, #12]
 8010056:	69fb      	ldr	r3, [r7, #28]
 8010058:	9302      	str	r3, [sp, #8]
 801005a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801005c:	9301      	str	r3, [sp, #4]
 801005e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010060:	9300      	str	r3, [sp, #0]
 8010062:	683b      	ldr	r3, [r7, #0]
 8010064:	68b9      	ldr	r1, [r7, #8]
 8010066:	68f8      	ldr	r0, [r7, #12]
 8010068:	f000 f80e 	bl	8010088 <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 801006c:	69f8      	ldr	r0, [r7, #28]
 801006e:	f000 f8ab 	bl	80101c8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8010072:	2301      	movs	r3, #1
 8010074:	61bb      	str	r3, [r7, #24]
 8010076:	e002      	b.n	801007e <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 8010078:	f04f 33ff 	mov.w	r3, #4294967295
 801007c:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 801007e:	69bb      	ldr	r3, [r7, #24]
	}
 8010080:	4618      	mov	r0, r3
 8010082:	3720      	adds	r7, #32
 8010084:	46bd      	mov	sp, r7
 8010086:	bd80      	pop	{r7, pc}

08010088 <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 8010088:	b580      	push	{r7, lr}
 801008a:	b088      	sub	sp, #32
 801008c:	af00      	add	r7, sp, #0
 801008e:	60f8      	str	r0, [r7, #12]
 8010090:	60b9      	str	r1, [r7, #8]
 8010092:	607a      	str	r2, [r7, #4]
 8010094:	603b      	str	r3, [r7, #0]
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 8010096:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010098:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 801009a:	6879      	ldr	r1, [r7, #4]
 801009c:	f06f 4340 	mvn.w	r3, #3221225472	; 0xc0000000
 80100a0:	440b      	add	r3, r1
 80100a2:	009b      	lsls	r3, r3, #2
 80100a4:	4413      	add	r3, r2
 80100a6:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 80100a8:	69bb      	ldr	r3, [r7, #24]
 80100aa:	f023 0307 	bic.w	r3, r3, #7
 80100ae:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80100b0:	69bb      	ldr	r3, [r7, #24]
 80100b2:	f003 0307 	and.w	r3, r3, #7
 80100b6:	2b00      	cmp	r3, #0
 80100b8:	d00c      	beq.n	80100d4 <prvInitialiseNewTask+0x4c>
	__asm volatile
 80100ba:	f04f 0350 	mov.w	r3, #80	; 0x50
 80100be:	b672      	cpsid	i
 80100c0:	f383 8811 	msr	BASEPRI, r3
 80100c4:	f3bf 8f6f 	isb	sy
 80100c8:	f3bf 8f4f 	dsb	sy
 80100cc:	b662      	cpsie	i
 80100ce:	617b      	str	r3, [r7, #20]
}
 80100d0:	bf00      	nop
 80100d2:	e7fe      	b.n	80100d2 <prvInitialiseNewTask+0x4a>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80100d4:	68bb      	ldr	r3, [r7, #8]
 80100d6:	2b00      	cmp	r3, #0
 80100d8:	d01f      	beq.n	801011a <prvInitialiseNewTask+0x92>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80100da:	2300      	movs	r3, #0
 80100dc:	61fb      	str	r3, [r7, #28]
 80100de:	e012      	b.n	8010106 <prvInitialiseNewTask+0x7e>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80100e0:	68ba      	ldr	r2, [r7, #8]
 80100e2:	69fb      	ldr	r3, [r7, #28]
 80100e4:	4413      	add	r3, r2
 80100e6:	7819      	ldrb	r1, [r3, #0]
 80100e8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80100ea:	69fb      	ldr	r3, [r7, #28]
 80100ec:	4413      	add	r3, r2
 80100ee:	3334      	adds	r3, #52	; 0x34
 80100f0:	460a      	mov	r2, r1
 80100f2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80100f4:	68ba      	ldr	r2, [r7, #8]
 80100f6:	69fb      	ldr	r3, [r7, #28]
 80100f8:	4413      	add	r3, r2
 80100fa:	781b      	ldrb	r3, [r3, #0]
 80100fc:	2b00      	cmp	r3, #0
 80100fe:	d006      	beq.n	801010e <prvInitialiseNewTask+0x86>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 8010100:	69fb      	ldr	r3, [r7, #28]
 8010102:	3301      	adds	r3, #1
 8010104:	61fb      	str	r3, [r7, #28]
 8010106:	69fb      	ldr	r3, [r7, #28]
 8010108:	2b0f      	cmp	r3, #15
 801010a:	d9e9      	bls.n	80100e0 <prvInitialiseNewTask+0x58>
 801010c:	e000      	b.n	8010110 <prvInitialiseNewTask+0x88>
			{
				break;
 801010e:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8010110:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010112:	2200      	movs	r2, #0
 8010114:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010118:	e003      	b.n	8010122 <prvInitialiseNewTask+0x9a>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 801011a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801011c:	2200      	movs	r2, #0
 801011e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8010122:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8010124:	2b06      	cmp	r3, #6
 8010126:	d901      	bls.n	801012c <prvInitialiseNewTask+0xa4>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8010128:	2306      	movs	r3, #6
 801012a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 801012c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801012e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010130:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8010132:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010134:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8010136:	645a      	str	r2, [r3, #68]	; 0x44
		pxNewTCB->uxMutexesHeld = 0;
 8010138:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801013a:	2200      	movs	r2, #0
 801013c:	649a      	str	r2, [r3, #72]	; 0x48
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 801013e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010140:	3304      	adds	r3, #4
 8010142:	4618      	mov	r0, r3
 8010144:	f7fe fee6 	bl	800ef14 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8010148:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801014a:	3318      	adds	r3, #24
 801014c:	4618      	mov	r0, r3
 801014e:	f7fe fee1 	bl	800ef14 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8010152:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010154:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010156:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010158:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801015a:	f1c3 0207 	rsb	r2, r3, #7
 801015e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010160:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8010162:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010164:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010166:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8010168:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801016a:	2200      	movs	r2, #0
 801016c:	f8c3 2098 	str.w	r2, [r3, #152]	; 0x98
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8010170:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010172:	2200      	movs	r2, #0
 8010174:	f883 209c 	strb.w	r2, [r3, #156]	; 0x9c
	#endif

	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8010178:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801017a:	334c      	adds	r3, #76	; 0x4c
 801017c:	224c      	movs	r2, #76	; 0x4c
 801017e:	2100      	movs	r1, #0
 8010180:	4618      	mov	r0, r3
 8010182:	f00d f9f8 	bl	801d576 <memset>
 8010186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010188:	4a0c      	ldr	r2, [pc, #48]	; (80101bc <prvInitialiseNewTask+0x134>)
 801018a:	651a      	str	r2, [r3, #80]	; 0x50
 801018c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801018e:	4a0c      	ldr	r2, [pc, #48]	; (80101c0 <prvInitialiseNewTask+0x138>)
 8010190:	655a      	str	r2, [r3, #84]	; 0x54
 8010192:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8010194:	4a0b      	ldr	r2, [pc, #44]	; (80101c4 <prvInitialiseNewTask+0x13c>)
 8010196:	659a      	str	r2, [r3, #88]	; 0x58
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8010198:	683a      	ldr	r2, [r7, #0]
 801019a:	68f9      	ldr	r1, [r7, #12]
 801019c:	69b8      	ldr	r0, [r7, #24]
 801019e:	f000 ffcd 	bl	801113c <pxPortInitialiseStack>
 80101a2:	4602      	mov	r2, r0
 80101a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80101a6:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 80101a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101aa:	2b00      	cmp	r3, #0
 80101ac:	d002      	beq.n	80101b4 <prvInitialiseNewTask+0x12c>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 80101ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80101b0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80101b2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80101b4:	bf00      	nop
 80101b6:	3720      	adds	r7, #32
 80101b8:	46bd      	mov	sp, r7
 80101ba:	bd80      	pop	{r7, pc}
 80101bc:	200241d0 	.word	0x200241d0
 80101c0:	20024238 	.word	0x20024238
 80101c4:	200242a0 	.word	0x200242a0

080101c8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80101c8:	b580      	push	{r7, lr}
 80101ca:	b082      	sub	sp, #8
 80101cc:	af00      	add	r7, sp, #0
 80101ce:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80101d0:	f001 f8c4 	bl	801135c <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80101d4:	4b2a      	ldr	r3, [pc, #168]	; (8010280 <prvAddNewTaskToReadyList+0xb8>)
 80101d6:	681b      	ldr	r3, [r3, #0]
 80101d8:	3301      	adds	r3, #1
 80101da:	4a29      	ldr	r2, [pc, #164]	; (8010280 <prvAddNewTaskToReadyList+0xb8>)
 80101dc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80101de:	4b29      	ldr	r3, [pc, #164]	; (8010284 <prvAddNewTaskToReadyList+0xbc>)
 80101e0:	681b      	ldr	r3, [r3, #0]
 80101e2:	2b00      	cmp	r3, #0
 80101e4:	d109      	bne.n	80101fa <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80101e6:	4a27      	ldr	r2, [pc, #156]	; (8010284 <prvAddNewTaskToReadyList+0xbc>)
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80101ec:	4b24      	ldr	r3, [pc, #144]	; (8010280 <prvAddNewTaskToReadyList+0xb8>)
 80101ee:	681b      	ldr	r3, [r3, #0]
 80101f0:	2b01      	cmp	r3, #1
 80101f2:	d110      	bne.n	8010216 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80101f4:	f000 fc9e 	bl	8010b34 <prvInitialiseTaskLists>
 80101f8:	e00d      	b.n	8010216 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80101fa:	4b23      	ldr	r3, [pc, #140]	; (8010288 <prvAddNewTaskToReadyList+0xc0>)
 80101fc:	681b      	ldr	r3, [r3, #0]
 80101fe:	2b00      	cmp	r3, #0
 8010200:	d109      	bne.n	8010216 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 8010202:	4b20      	ldr	r3, [pc, #128]	; (8010284 <prvAddNewTaskToReadyList+0xbc>)
 8010204:	681b      	ldr	r3, [r3, #0]
 8010206:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010208:	687b      	ldr	r3, [r7, #4]
 801020a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801020c:	429a      	cmp	r2, r3
 801020e:	d802      	bhi.n	8010216 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8010210:	4a1c      	ldr	r2, [pc, #112]	; (8010284 <prvAddNewTaskToReadyList+0xbc>)
 8010212:	687b      	ldr	r3, [r7, #4]
 8010214:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8010216:	4b1d      	ldr	r3, [pc, #116]	; (801028c <prvAddNewTaskToReadyList+0xc4>)
 8010218:	681b      	ldr	r3, [r3, #0]
 801021a:	3301      	adds	r3, #1
 801021c:	4a1b      	ldr	r2, [pc, #108]	; (801028c <prvAddNewTaskToReadyList+0xc4>)
 801021e:	6013      	str	r3, [r2, #0]
			pxNewTCB->uxTCBNumber = uxTaskNumber;
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010224:	2201      	movs	r2, #1
 8010226:	409a      	lsls	r2, r3
 8010228:	4b19      	ldr	r3, [pc, #100]	; (8010290 <prvAddNewTaskToReadyList+0xc8>)
 801022a:	681b      	ldr	r3, [r3, #0]
 801022c:	4313      	orrs	r3, r2
 801022e:	4a18      	ldr	r2, [pc, #96]	; (8010290 <prvAddNewTaskToReadyList+0xc8>)
 8010230:	6013      	str	r3, [r2, #0]
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010236:	4613      	mov	r3, r2
 8010238:	009b      	lsls	r3, r3, #2
 801023a:	4413      	add	r3, r2
 801023c:	009b      	lsls	r3, r3, #2
 801023e:	4a15      	ldr	r2, [pc, #84]	; (8010294 <prvAddNewTaskToReadyList+0xcc>)
 8010240:	441a      	add	r2, r3
 8010242:	687b      	ldr	r3, [r7, #4]
 8010244:	3304      	adds	r3, #4
 8010246:	4619      	mov	r1, r3
 8010248:	4610      	mov	r0, r2
 801024a:	f7fe fe70 	bl	800ef2e <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 801024e:	f001 f8b9 	bl	80113c4 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 8010252:	4b0d      	ldr	r3, [pc, #52]	; (8010288 <prvAddNewTaskToReadyList+0xc0>)
 8010254:	681b      	ldr	r3, [r3, #0]
 8010256:	2b00      	cmp	r3, #0
 8010258:	d00e      	beq.n	8010278 <prvAddNewTaskToReadyList+0xb0>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 801025a:	4b0a      	ldr	r3, [pc, #40]	; (8010284 <prvAddNewTaskToReadyList+0xbc>)
 801025c:	681b      	ldr	r3, [r3, #0]
 801025e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010260:	687b      	ldr	r3, [r7, #4]
 8010262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010264:	429a      	cmp	r2, r3
 8010266:	d207      	bcs.n	8010278 <prvAddNewTaskToReadyList+0xb0>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8010268:	4b0b      	ldr	r3, [pc, #44]	; (8010298 <prvAddNewTaskToReadyList+0xd0>)
 801026a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 801026e:	601a      	str	r2, [r3, #0]
 8010270:	f3bf 8f4f 	dsb	sy
 8010274:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8010278:	bf00      	nop
 801027a:	3708      	adds	r7, #8
 801027c:	46bd      	mov	sp, r7
 801027e:	bd80      	pop	{r7, pc}
 8010280:	2000606c 	.word	0x2000606c
 8010284:	20005f6c 	.word	0x20005f6c
 8010288:	20006078 	.word	0x20006078
 801028c:	20006088 	.word	0x20006088
 8010290:	20006074 	.word	0x20006074
 8010294:	20005f70 	.word	0x20005f70
 8010298:	e000ed04 	.word	0xe000ed04

0801029c <vTaskDelete>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	void vTaskDelete( TaskHandle_t xTaskToDelete )
	{
 801029c:	b580      	push	{r7, lr}
 801029e:	b084      	sub	sp, #16
 80102a0:	af00      	add	r7, sp, #0
 80102a2:	6078      	str	r0, [r7, #4]
	TCB_t *pxTCB;

		taskENTER_CRITICAL();
 80102a4:	f001 f85a 	bl	801135c <vPortEnterCritical>
		{
			/* If null is passed in here then it is the calling task that is
			being deleted. */
			pxTCB = prvGetTCBFromHandle( xTaskToDelete );
 80102a8:	687b      	ldr	r3, [r7, #4]
 80102aa:	2b00      	cmp	r3, #0
 80102ac:	d102      	bne.n	80102b4 <vTaskDelete+0x18>
 80102ae:	4b3a      	ldr	r3, [pc, #232]	; (8010398 <vTaskDelete+0xfc>)
 80102b0:	681b      	ldr	r3, [r3, #0]
 80102b2:	e000      	b.n	80102b6 <vTaskDelete+0x1a>
 80102b4:	687b      	ldr	r3, [r7, #4]
 80102b6:	60fb      	str	r3, [r7, #12]

			/* Remove task from the ready list. */
			if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80102b8:	68fb      	ldr	r3, [r7, #12]
 80102ba:	3304      	adds	r3, #4
 80102bc:	4618      	mov	r0, r3
 80102be:	f7fe fe93 	bl	800efe8 <uxListRemove>
 80102c2:	4603      	mov	r3, r0
 80102c4:	2b00      	cmp	r3, #0
 80102c6:	d115      	bne.n	80102f4 <vTaskDelete+0x58>
			{
				taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 80102c8:	68fb      	ldr	r3, [r7, #12]
 80102ca:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80102cc:	4933      	ldr	r1, [pc, #204]	; (801039c <vTaskDelete+0x100>)
 80102ce:	4613      	mov	r3, r2
 80102d0:	009b      	lsls	r3, r3, #2
 80102d2:	4413      	add	r3, r2
 80102d4:	009b      	lsls	r3, r3, #2
 80102d6:	440b      	add	r3, r1
 80102d8:	681b      	ldr	r3, [r3, #0]
 80102da:	2b00      	cmp	r3, #0
 80102dc:	d10a      	bne.n	80102f4 <vTaskDelete+0x58>
 80102de:	68fb      	ldr	r3, [r7, #12]
 80102e0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80102e2:	2201      	movs	r2, #1
 80102e4:	fa02 f303 	lsl.w	r3, r2, r3
 80102e8:	43da      	mvns	r2, r3
 80102ea:	4b2d      	ldr	r3, [pc, #180]	; (80103a0 <vTaskDelete+0x104>)
 80102ec:	681b      	ldr	r3, [r3, #0]
 80102ee:	4013      	ands	r3, r2
 80102f0:	4a2b      	ldr	r2, [pc, #172]	; (80103a0 <vTaskDelete+0x104>)
 80102f2:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}

			/* Is the task waiting on an event also? */
			if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 80102f4:	68fb      	ldr	r3, [r7, #12]
 80102f6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80102f8:	2b00      	cmp	r3, #0
 80102fa:	d004      	beq.n	8010306 <vTaskDelete+0x6a>
			{
				( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 80102fc:	68fb      	ldr	r3, [r7, #12]
 80102fe:	3318      	adds	r3, #24
 8010300:	4618      	mov	r0, r3
 8010302:	f7fe fe71 	bl	800efe8 <uxListRemove>

			/* Increment the uxTaskNumber also so kernel aware debuggers can
			detect that the task lists need re-generating.  This is done before
			portPRE_TASK_DELETE_HOOK() as in the Windows port that macro will
			not return. */
			uxTaskNumber++;
 8010306:	4b27      	ldr	r3, [pc, #156]	; (80103a4 <vTaskDelete+0x108>)
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	3301      	adds	r3, #1
 801030c:	4a25      	ldr	r2, [pc, #148]	; (80103a4 <vTaskDelete+0x108>)
 801030e:	6013      	str	r3, [r2, #0]

			if( pxTCB == pxCurrentTCB )
 8010310:	4b21      	ldr	r3, [pc, #132]	; (8010398 <vTaskDelete+0xfc>)
 8010312:	681b      	ldr	r3, [r3, #0]
 8010314:	68fa      	ldr	r2, [r7, #12]
 8010316:	429a      	cmp	r2, r3
 8010318:	d10b      	bne.n	8010332 <vTaskDelete+0x96>
				/* A task is deleting itself.  This cannot complete within the
				task itself, as a context switch to another task is required.
				Place the task in the termination list.  The idle task will
				check the termination list and free up any memory allocated by
				the scheduler for the TCB and stack of the deleted task. */
				vListInsertEnd( &xTasksWaitingTermination, &( pxTCB->xStateListItem ) );
 801031a:	68fb      	ldr	r3, [r7, #12]
 801031c:	3304      	adds	r3, #4
 801031e:	4619      	mov	r1, r3
 8010320:	4821      	ldr	r0, [pc, #132]	; (80103a8 <vTaskDelete+0x10c>)
 8010322:	f7fe fe04 	bl	800ef2e <vListInsertEnd>

				/* Increment the ucTasksDeleted variable so the idle task knows
				there is a task that has been deleted and that it should therefore
				check the xTasksWaitingTermination list. */
				++uxDeletedTasksWaitingCleanUp;
 8010326:	4b21      	ldr	r3, [pc, #132]	; (80103ac <vTaskDelete+0x110>)
 8010328:	681b      	ldr	r3, [r3, #0]
 801032a:	3301      	adds	r3, #1
 801032c:	4a1f      	ldr	r2, [pc, #124]	; (80103ac <vTaskDelete+0x110>)
 801032e:	6013      	str	r3, [r2, #0]
 8010330:	e009      	b.n	8010346 <vTaskDelete+0xaa>
				required. */
				portPRE_TASK_DELETE_HOOK( pxTCB, &xYieldPending );
			}
			else
			{
				--uxCurrentNumberOfTasks;
 8010332:	4b1f      	ldr	r3, [pc, #124]	; (80103b0 <vTaskDelete+0x114>)
 8010334:	681b      	ldr	r3, [r3, #0]
 8010336:	3b01      	subs	r3, #1
 8010338:	4a1d      	ldr	r2, [pc, #116]	; (80103b0 <vTaskDelete+0x114>)
 801033a:	6013      	str	r3, [r2, #0]
				prvDeleteTCB( pxTCB );
 801033c:	68f8      	ldr	r0, [r7, #12]
 801033e:	f000 fc67 	bl	8010c10 <prvDeleteTCB>

				/* Reset the next expected unblock time in case it referred to
				the task that has just been deleted. */
				prvResetNextTaskUnblockTime();
 8010342:	f000 fc9b 	bl	8010c7c <prvResetNextTaskUnblockTime>
			}

			traceTASK_DELETE( pxTCB );
		}
		taskEXIT_CRITICAL();
 8010346:	f001 f83d 	bl	80113c4 <vPortExitCritical>

		/* Force a reschedule if it is the currently running task that has just
		been deleted. */
		if( xSchedulerRunning != pdFALSE )
 801034a:	4b1a      	ldr	r3, [pc, #104]	; (80103b4 <vTaskDelete+0x118>)
 801034c:	681b      	ldr	r3, [r3, #0]
 801034e:	2b00      	cmp	r3, #0
 8010350:	d01d      	beq.n	801038e <vTaskDelete+0xf2>
		{
			if( pxTCB == pxCurrentTCB )
 8010352:	4b11      	ldr	r3, [pc, #68]	; (8010398 <vTaskDelete+0xfc>)
 8010354:	681b      	ldr	r3, [r3, #0]
 8010356:	68fa      	ldr	r2, [r7, #12]
 8010358:	429a      	cmp	r2, r3
 801035a:	d118      	bne.n	801038e <vTaskDelete+0xf2>
			{
				configASSERT( uxSchedulerSuspended == 0 );
 801035c:	4b16      	ldr	r3, [pc, #88]	; (80103b8 <vTaskDelete+0x11c>)
 801035e:	681b      	ldr	r3, [r3, #0]
 8010360:	2b00      	cmp	r3, #0
 8010362:	d00c      	beq.n	801037e <vTaskDelete+0xe2>
	__asm volatile
 8010364:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010368:	b672      	cpsid	i
 801036a:	f383 8811 	msr	BASEPRI, r3
 801036e:	f3bf 8f6f 	isb	sy
 8010372:	f3bf 8f4f 	dsb	sy
 8010376:	b662      	cpsie	i
 8010378:	60bb      	str	r3, [r7, #8]
}
 801037a:	bf00      	nop
 801037c:	e7fe      	b.n	801037c <vTaskDelete+0xe0>
				portYIELD_WITHIN_API();
 801037e:	4b0f      	ldr	r3, [pc, #60]	; (80103bc <vTaskDelete+0x120>)
 8010380:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010384:	601a      	str	r2, [r3, #0]
 8010386:	f3bf 8f4f 	dsb	sy
 801038a:	f3bf 8f6f 	isb	sy
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 801038e:	bf00      	nop
 8010390:	3710      	adds	r7, #16
 8010392:	46bd      	mov	sp, r7
 8010394:	bd80      	pop	{r7, pc}
 8010396:	bf00      	nop
 8010398:	20005f6c 	.word	0x20005f6c
 801039c:	20005f70 	.word	0x20005f70
 80103a0:	20006074 	.word	0x20006074
 80103a4:	20006088 	.word	0x20006088
 80103a8:	20006040 	.word	0x20006040
 80103ac:	20006054 	.word	0x20006054
 80103b0:	2000606c 	.word	0x2000606c
 80103b4:	20006078 	.word	0x20006078
 80103b8:	20006094 	.word	0x20006094
 80103bc:	e000ed04 	.word	0xe000ed04

080103c0 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 80103c0:	b580      	push	{r7, lr}
 80103c2:	b084      	sub	sp, #16
 80103c4:	af00      	add	r7, sp, #0
 80103c6:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80103c8:	2300      	movs	r3, #0
 80103ca:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80103cc:	687b      	ldr	r3, [r7, #4]
 80103ce:	2b00      	cmp	r3, #0
 80103d0:	d019      	beq.n	8010406 <vTaskDelay+0x46>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80103d2:	4b14      	ldr	r3, [pc, #80]	; (8010424 <vTaskDelay+0x64>)
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	d00c      	beq.n	80103f4 <vTaskDelay+0x34>
	__asm volatile
 80103da:	f04f 0350 	mov.w	r3, #80	; 0x50
 80103de:	b672      	cpsid	i
 80103e0:	f383 8811 	msr	BASEPRI, r3
 80103e4:	f3bf 8f6f 	isb	sy
 80103e8:	f3bf 8f4f 	dsb	sy
 80103ec:	b662      	cpsie	i
 80103ee:	60bb      	str	r3, [r7, #8]
}
 80103f0:	bf00      	nop
 80103f2:	e7fe      	b.n	80103f2 <vTaskDelay+0x32>
			vTaskSuspendAll();
 80103f4:	f000 f888 	bl	8010508 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80103f8:	2100      	movs	r1, #0
 80103fa:	6878      	ldr	r0, [r7, #4]
 80103fc:	f000 fe38 	bl	8011070 <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 8010400:	f000 f890 	bl	8010524 <xTaskResumeAll>
 8010404:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 8010406:	68fb      	ldr	r3, [r7, #12]
 8010408:	2b00      	cmp	r3, #0
 801040a:	d107      	bne.n	801041c <vTaskDelay+0x5c>
		{
			portYIELD_WITHIN_API();
 801040c:	4b06      	ldr	r3, [pc, #24]	; (8010428 <vTaskDelay+0x68>)
 801040e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010412:	601a      	str	r2, [r3, #0]
 8010414:	f3bf 8f4f 	dsb	sy
 8010418:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 801041c:	bf00      	nop
 801041e:	3710      	adds	r7, #16
 8010420:	46bd      	mov	sp, r7
 8010422:	bd80      	pop	{r7, pc}
 8010424:	20006094 	.word	0x20006094
 8010428:	e000ed04 	.word	0xe000ed04

0801042c <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 801042c:	b580      	push	{r7, lr}
 801042e:	b08a      	sub	sp, #40	; 0x28
 8010430:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8010432:	2300      	movs	r3, #0
 8010434:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8010436:	2300      	movs	r3, #0
 8010438:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 801043a:	463a      	mov	r2, r7
 801043c:	1d39      	adds	r1, r7, #4
 801043e:	f107 0308 	add.w	r3, r7, #8
 8010442:	4618      	mov	r0, r3
 8010444:	f7f0 fb4e 	bl	8000ae4 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8010448:	6839      	ldr	r1, [r7, #0]
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	68ba      	ldr	r2, [r7, #8]
 801044e:	9202      	str	r2, [sp, #8]
 8010450:	9301      	str	r3, [sp, #4]
 8010452:	2300      	movs	r3, #0
 8010454:	9300      	str	r3, [sp, #0]
 8010456:	2300      	movs	r3, #0
 8010458:	460a      	mov	r2, r1
 801045a:	4923      	ldr	r1, [pc, #140]	; (80104e8 <vTaskStartScheduler+0xbc>)
 801045c:	4823      	ldr	r0, [pc, #140]	; (80104ec <vTaskStartScheduler+0xc0>)
 801045e:	f7ff fd6b 	bl	800ff38 <xTaskCreateStatic>
 8010462:	4603      	mov	r3, r0
 8010464:	4a22      	ldr	r2, [pc, #136]	; (80104f0 <vTaskStartScheduler+0xc4>)
 8010466:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8010468:	4b21      	ldr	r3, [pc, #132]	; (80104f0 <vTaskStartScheduler+0xc4>)
 801046a:	681b      	ldr	r3, [r3, #0]
 801046c:	2b00      	cmp	r3, #0
 801046e:	d002      	beq.n	8010476 <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8010470:	2301      	movs	r3, #1
 8010472:	617b      	str	r3, [r7, #20]
 8010474:	e001      	b.n	801047a <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8010476:	2300      	movs	r3, #0
 8010478:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 801047a:	697b      	ldr	r3, [r7, #20]
 801047c:	2b01      	cmp	r3, #1
 801047e:	d11d      	bne.n	80104bc <vTaskStartScheduler+0x90>
	__asm volatile
 8010480:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010484:	b672      	cpsid	i
 8010486:	f383 8811 	msr	BASEPRI, r3
 801048a:	f3bf 8f6f 	isb	sy
 801048e:	f3bf 8f4f 	dsb	sy
 8010492:	b662      	cpsie	i
 8010494:	613b      	str	r3, [r7, #16]
}
 8010496:	bf00      	nop

		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8010498:	4b16      	ldr	r3, [pc, #88]	; (80104f4 <vTaskStartScheduler+0xc8>)
 801049a:	681b      	ldr	r3, [r3, #0]
 801049c:	334c      	adds	r3, #76	; 0x4c
 801049e:	4a16      	ldr	r2, [pc, #88]	; (80104f8 <vTaskStartScheduler+0xcc>)
 80104a0:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 80104a2:	4b16      	ldr	r3, [pc, #88]	; (80104fc <vTaskStartScheduler+0xd0>)
 80104a4:	f04f 32ff 	mov.w	r2, #4294967295
 80104a8:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 80104aa:	4b15      	ldr	r3, [pc, #84]	; (8010500 <vTaskStartScheduler+0xd4>)
 80104ac:	2201      	movs	r2, #1
 80104ae:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 80104b0:	4b14      	ldr	r3, [pc, #80]	; (8010504 <vTaskStartScheduler+0xd8>)
 80104b2:	2200      	movs	r2, #0
 80104b4:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 80104b6:	f000 fed3 	bl	8011260 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 80104ba:	e010      	b.n	80104de <vTaskStartScheduler+0xb2>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 80104bc:	697b      	ldr	r3, [r7, #20]
 80104be:	f1b3 3fff 	cmp.w	r3, #4294967295
 80104c2:	d10c      	bne.n	80104de <vTaskStartScheduler+0xb2>
	__asm volatile
 80104c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80104c8:	b672      	cpsid	i
 80104ca:	f383 8811 	msr	BASEPRI, r3
 80104ce:	f3bf 8f6f 	isb	sy
 80104d2:	f3bf 8f4f 	dsb	sy
 80104d6:	b662      	cpsie	i
 80104d8:	60fb      	str	r3, [r7, #12]
}
 80104da:	bf00      	nop
 80104dc:	e7fe      	b.n	80104dc <vTaskStartScheduler+0xb0>
}
 80104de:	bf00      	nop
 80104e0:	3718      	adds	r7, #24
 80104e2:	46bd      	mov	sp, r7
 80104e4:	bd80      	pop	{r7, pc}
 80104e6:	bf00      	nop
 80104e8:	0801e484 	.word	0x0801e484
 80104ec:	08010b05 	.word	0x08010b05
 80104f0:	20006090 	.word	0x20006090
 80104f4:	20005f6c 	.word	0x20005f6c
 80104f8:	200001a0 	.word	0x200001a0
 80104fc:	2000608c 	.word	0x2000608c
 8010500:	20006078 	.word	0x20006078
 8010504:	20006070 	.word	0x20006070

08010508 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8010508:	b480      	push	{r7}
 801050a:	af00      	add	r7, sp, #0
	/* A critical section is not required as the variable is of type
	BaseType_t.  Please read Richard Barry's reply in the following link to a
	post in the FreeRTOS support forum before reporting this as a bug! -
	http://goo.gl/wu4acr */
	++uxSchedulerSuspended;
 801050c:	4b04      	ldr	r3, [pc, #16]	; (8010520 <vTaskSuspendAll+0x18>)
 801050e:	681b      	ldr	r3, [r3, #0]
 8010510:	3301      	adds	r3, #1
 8010512:	4a03      	ldr	r2, [pc, #12]	; (8010520 <vTaskSuspendAll+0x18>)
 8010514:	6013      	str	r3, [r2, #0]
	portMEMORY_BARRIER();
}
 8010516:	bf00      	nop
 8010518:	46bd      	mov	sp, r7
 801051a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801051e:	4770      	bx	lr
 8010520:	20006094 	.word	0x20006094

08010524 <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8010524:	b580      	push	{r7, lr}
 8010526:	b084      	sub	sp, #16
 8010528:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 801052a:	2300      	movs	r3, #0
 801052c:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 801052e:	2300      	movs	r3, #0
 8010530:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8010532:	4b42      	ldr	r3, [pc, #264]	; (801063c <xTaskResumeAll+0x118>)
 8010534:	681b      	ldr	r3, [r3, #0]
 8010536:	2b00      	cmp	r3, #0
 8010538:	d10c      	bne.n	8010554 <xTaskResumeAll+0x30>
	__asm volatile
 801053a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801053e:	b672      	cpsid	i
 8010540:	f383 8811 	msr	BASEPRI, r3
 8010544:	f3bf 8f6f 	isb	sy
 8010548:	f3bf 8f4f 	dsb	sy
 801054c:	b662      	cpsie	i
 801054e:	603b      	str	r3, [r7, #0]
}
 8010550:	bf00      	nop
 8010552:	e7fe      	b.n	8010552 <xTaskResumeAll+0x2e>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8010554:	f000 ff02 	bl	801135c <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8010558:	4b38      	ldr	r3, [pc, #224]	; (801063c <xTaskResumeAll+0x118>)
 801055a:	681b      	ldr	r3, [r3, #0]
 801055c:	3b01      	subs	r3, #1
 801055e:	4a37      	ldr	r2, [pc, #220]	; (801063c <xTaskResumeAll+0x118>)
 8010560:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010562:	4b36      	ldr	r3, [pc, #216]	; (801063c <xTaskResumeAll+0x118>)
 8010564:	681b      	ldr	r3, [r3, #0]
 8010566:	2b00      	cmp	r3, #0
 8010568:	d161      	bne.n	801062e <xTaskResumeAll+0x10a>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 801056a:	4b35      	ldr	r3, [pc, #212]	; (8010640 <xTaskResumeAll+0x11c>)
 801056c:	681b      	ldr	r3, [r3, #0]
 801056e:	2b00      	cmp	r3, #0
 8010570:	d05d      	beq.n	801062e <xTaskResumeAll+0x10a>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8010572:	e02e      	b.n	80105d2 <xTaskResumeAll+0xae>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010574:	4b33      	ldr	r3, [pc, #204]	; (8010644 <xTaskResumeAll+0x120>)
 8010576:	68db      	ldr	r3, [r3, #12]
 8010578:	68db      	ldr	r3, [r3, #12]
 801057a:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 801057c:	68fb      	ldr	r3, [r7, #12]
 801057e:	3318      	adds	r3, #24
 8010580:	4618      	mov	r0, r3
 8010582:	f7fe fd31 	bl	800efe8 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010586:	68fb      	ldr	r3, [r7, #12]
 8010588:	3304      	adds	r3, #4
 801058a:	4618      	mov	r0, r3
 801058c:	f7fe fd2c 	bl	800efe8 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8010590:	68fb      	ldr	r3, [r7, #12]
 8010592:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010594:	2201      	movs	r2, #1
 8010596:	409a      	lsls	r2, r3
 8010598:	4b2b      	ldr	r3, [pc, #172]	; (8010648 <xTaskResumeAll+0x124>)
 801059a:	681b      	ldr	r3, [r3, #0]
 801059c:	4313      	orrs	r3, r2
 801059e:	4a2a      	ldr	r2, [pc, #168]	; (8010648 <xTaskResumeAll+0x124>)
 80105a0:	6013      	str	r3, [r2, #0]
 80105a2:	68fb      	ldr	r3, [r7, #12]
 80105a4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105a6:	4613      	mov	r3, r2
 80105a8:	009b      	lsls	r3, r3, #2
 80105aa:	4413      	add	r3, r2
 80105ac:	009b      	lsls	r3, r3, #2
 80105ae:	4a27      	ldr	r2, [pc, #156]	; (801064c <xTaskResumeAll+0x128>)
 80105b0:	441a      	add	r2, r3
 80105b2:	68fb      	ldr	r3, [r7, #12]
 80105b4:	3304      	adds	r3, #4
 80105b6:	4619      	mov	r1, r3
 80105b8:	4610      	mov	r0, r2
 80105ba:	f7fe fcb8 	bl	800ef2e <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 80105be:	68fb      	ldr	r3, [r7, #12]
 80105c0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80105c2:	4b23      	ldr	r3, [pc, #140]	; (8010650 <xTaskResumeAll+0x12c>)
 80105c4:	681b      	ldr	r3, [r3, #0]
 80105c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80105c8:	429a      	cmp	r2, r3
 80105ca:	d302      	bcc.n	80105d2 <xTaskResumeAll+0xae>
					{
						xYieldPending = pdTRUE;
 80105cc:	4b21      	ldr	r3, [pc, #132]	; (8010654 <xTaskResumeAll+0x130>)
 80105ce:	2201      	movs	r2, #1
 80105d0:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 80105d2:	4b1c      	ldr	r3, [pc, #112]	; (8010644 <xTaskResumeAll+0x120>)
 80105d4:	681b      	ldr	r3, [r3, #0]
 80105d6:	2b00      	cmp	r3, #0
 80105d8:	d1cc      	bne.n	8010574 <xTaskResumeAll+0x50>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 80105da:	68fb      	ldr	r3, [r7, #12]
 80105dc:	2b00      	cmp	r3, #0
 80105de:	d001      	beq.n	80105e4 <xTaskResumeAll+0xc0>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 80105e0:	f000 fb4c 	bl	8010c7c <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					UBaseType_t uxPendedCounts = uxPendedTicks; /* Non-volatile copy. */
 80105e4:	4b1c      	ldr	r3, [pc, #112]	; (8010658 <xTaskResumeAll+0x134>)
 80105e6:	681b      	ldr	r3, [r3, #0]
 80105e8:	607b      	str	r3, [r7, #4]

					if( uxPendedCounts > ( UBaseType_t ) 0U )
 80105ea:	687b      	ldr	r3, [r7, #4]
 80105ec:	2b00      	cmp	r3, #0
 80105ee:	d010      	beq.n	8010612 <xTaskResumeAll+0xee>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 80105f0:	f000 f858 	bl	80106a4 <xTaskIncrementTick>
 80105f4:	4603      	mov	r3, r0
 80105f6:	2b00      	cmp	r3, #0
 80105f8:	d002      	beq.n	8010600 <xTaskResumeAll+0xdc>
							{
								xYieldPending = pdTRUE;
 80105fa:	4b16      	ldr	r3, [pc, #88]	; (8010654 <xTaskResumeAll+0x130>)
 80105fc:	2201      	movs	r2, #1
 80105fe:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--uxPendedCounts;
 8010600:	687b      	ldr	r3, [r7, #4]
 8010602:	3b01      	subs	r3, #1
 8010604:	607b      	str	r3, [r7, #4]
						} while( uxPendedCounts > ( UBaseType_t ) 0U );
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	2b00      	cmp	r3, #0
 801060a:	d1f1      	bne.n	80105f0 <xTaskResumeAll+0xcc>

						uxPendedTicks = 0;
 801060c:	4b12      	ldr	r3, [pc, #72]	; (8010658 <xTaskResumeAll+0x134>)
 801060e:	2200      	movs	r2, #0
 8010610:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8010612:	4b10      	ldr	r3, [pc, #64]	; (8010654 <xTaskResumeAll+0x130>)
 8010614:	681b      	ldr	r3, [r3, #0]
 8010616:	2b00      	cmp	r3, #0
 8010618:	d009      	beq.n	801062e <xTaskResumeAll+0x10a>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 801061a:	2301      	movs	r3, #1
 801061c:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 801061e:	4b0f      	ldr	r3, [pc, #60]	; (801065c <xTaskResumeAll+0x138>)
 8010620:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010624:	601a      	str	r2, [r3, #0]
 8010626:	f3bf 8f4f 	dsb	sy
 801062a:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 801062e:	f000 fec9 	bl	80113c4 <vPortExitCritical>

	return xAlreadyYielded;
 8010632:	68bb      	ldr	r3, [r7, #8]
}
 8010634:	4618      	mov	r0, r3
 8010636:	3710      	adds	r7, #16
 8010638:	46bd      	mov	sp, r7
 801063a:	bd80      	pop	{r7, pc}
 801063c:	20006094 	.word	0x20006094
 8010640:	2000606c 	.word	0x2000606c
 8010644:	2000602c 	.word	0x2000602c
 8010648:	20006074 	.word	0x20006074
 801064c:	20005f70 	.word	0x20005f70
 8010650:	20005f6c 	.word	0x20005f6c
 8010654:	20006080 	.word	0x20006080
 8010658:	2000607c 	.word	0x2000607c
 801065c:	e000ed04 	.word	0xe000ed04

08010660 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8010660:	b480      	push	{r7}
 8010662:	b083      	sub	sp, #12
 8010664:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8010666:	4b05      	ldr	r3, [pc, #20]	; (801067c <xTaskGetTickCount+0x1c>)
 8010668:	681b      	ldr	r3, [r3, #0]
 801066a:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 801066c:	687b      	ldr	r3, [r7, #4]
}
 801066e:	4618      	mov	r0, r3
 8010670:	370c      	adds	r7, #12
 8010672:	46bd      	mov	sp, r7
 8010674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010678:	4770      	bx	lr
 801067a:	bf00      	nop
 801067c:	20006070 	.word	0x20006070

08010680 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8010680:	b580      	push	{r7, lr}
 8010682:	b082      	sub	sp, #8
 8010684:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8010686:	f000 ff51 	bl	801152c <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 801068a:	2300      	movs	r3, #0
 801068c:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 801068e:	4b04      	ldr	r3, [pc, #16]	; (80106a0 <xTaskGetTickCountFromISR+0x20>)
 8010690:	681b      	ldr	r3, [r3, #0]
 8010692:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8010694:	683b      	ldr	r3, [r7, #0]
}
 8010696:	4618      	mov	r0, r3
 8010698:	3708      	adds	r7, #8
 801069a:	46bd      	mov	sp, r7
 801069c:	bd80      	pop	{r7, pc}
 801069e:	bf00      	nop
 80106a0:	20006070 	.word	0x20006070

080106a4 <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 80106a4:	b580      	push	{r7, lr}
 80106a6:	b086      	sub	sp, #24
 80106a8:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 80106aa:	2300      	movs	r3, #0
 80106ac:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 80106ae:	4b4f      	ldr	r3, [pc, #316]	; (80107ec <xTaskIncrementTick+0x148>)
 80106b0:	681b      	ldr	r3, [r3, #0]
 80106b2:	2b00      	cmp	r3, #0
 80106b4:	f040 808a 	bne.w	80107cc <xTaskIncrementTick+0x128>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 80106b8:	4b4d      	ldr	r3, [pc, #308]	; (80107f0 <xTaskIncrementTick+0x14c>)
 80106ba:	681b      	ldr	r3, [r3, #0]
 80106bc:	3301      	adds	r3, #1
 80106be:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 80106c0:	4a4b      	ldr	r2, [pc, #300]	; (80107f0 <xTaskIncrementTick+0x14c>)
 80106c2:	693b      	ldr	r3, [r7, #16]
 80106c4:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 80106c6:	693b      	ldr	r3, [r7, #16]
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	d122      	bne.n	8010712 <xTaskIncrementTick+0x6e>
		{
			taskSWITCH_DELAYED_LISTS();
 80106cc:	4b49      	ldr	r3, [pc, #292]	; (80107f4 <xTaskIncrementTick+0x150>)
 80106ce:	681b      	ldr	r3, [r3, #0]
 80106d0:	681b      	ldr	r3, [r3, #0]
 80106d2:	2b00      	cmp	r3, #0
 80106d4:	d00c      	beq.n	80106f0 <xTaskIncrementTick+0x4c>
	__asm volatile
 80106d6:	f04f 0350 	mov.w	r3, #80	; 0x50
 80106da:	b672      	cpsid	i
 80106dc:	f383 8811 	msr	BASEPRI, r3
 80106e0:	f3bf 8f6f 	isb	sy
 80106e4:	f3bf 8f4f 	dsb	sy
 80106e8:	b662      	cpsie	i
 80106ea:	603b      	str	r3, [r7, #0]
}
 80106ec:	bf00      	nop
 80106ee:	e7fe      	b.n	80106ee <xTaskIncrementTick+0x4a>
 80106f0:	4b40      	ldr	r3, [pc, #256]	; (80107f4 <xTaskIncrementTick+0x150>)
 80106f2:	681b      	ldr	r3, [r3, #0]
 80106f4:	60fb      	str	r3, [r7, #12]
 80106f6:	4b40      	ldr	r3, [pc, #256]	; (80107f8 <xTaskIncrementTick+0x154>)
 80106f8:	681b      	ldr	r3, [r3, #0]
 80106fa:	4a3e      	ldr	r2, [pc, #248]	; (80107f4 <xTaskIncrementTick+0x150>)
 80106fc:	6013      	str	r3, [r2, #0]
 80106fe:	4a3e      	ldr	r2, [pc, #248]	; (80107f8 <xTaskIncrementTick+0x154>)
 8010700:	68fb      	ldr	r3, [r7, #12]
 8010702:	6013      	str	r3, [r2, #0]
 8010704:	4b3d      	ldr	r3, [pc, #244]	; (80107fc <xTaskIncrementTick+0x158>)
 8010706:	681b      	ldr	r3, [r3, #0]
 8010708:	3301      	adds	r3, #1
 801070a:	4a3c      	ldr	r2, [pc, #240]	; (80107fc <xTaskIncrementTick+0x158>)
 801070c:	6013      	str	r3, [r2, #0]
 801070e:	f000 fab5 	bl	8010c7c <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8010712:	4b3b      	ldr	r3, [pc, #236]	; (8010800 <xTaskIncrementTick+0x15c>)
 8010714:	681b      	ldr	r3, [r3, #0]
 8010716:	693a      	ldr	r2, [r7, #16]
 8010718:	429a      	cmp	r2, r3
 801071a:	d348      	bcc.n	80107ae <xTaskIncrementTick+0x10a>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 801071c:	4b35      	ldr	r3, [pc, #212]	; (80107f4 <xTaskIncrementTick+0x150>)
 801071e:	681b      	ldr	r3, [r3, #0]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	2b00      	cmp	r3, #0
 8010724:	d104      	bne.n	8010730 <xTaskIncrementTick+0x8c>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010726:	4b36      	ldr	r3, [pc, #216]	; (8010800 <xTaskIncrementTick+0x15c>)
 8010728:	f04f 32ff 	mov.w	r2, #4294967295
 801072c:	601a      	str	r2, [r3, #0]
					break;
 801072e:	e03e      	b.n	80107ae <xTaskIncrementTick+0x10a>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010730:	4b30      	ldr	r3, [pc, #192]	; (80107f4 <xTaskIncrementTick+0x150>)
 8010732:	681b      	ldr	r3, [r3, #0]
 8010734:	68db      	ldr	r3, [r3, #12]
 8010736:	68db      	ldr	r3, [r3, #12]
 8010738:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 801073a:	68bb      	ldr	r3, [r7, #8]
 801073c:	685b      	ldr	r3, [r3, #4]
 801073e:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8010740:	693a      	ldr	r2, [r7, #16]
 8010742:	687b      	ldr	r3, [r7, #4]
 8010744:	429a      	cmp	r2, r3
 8010746:	d203      	bcs.n	8010750 <xTaskIncrementTick+0xac>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8010748:	4a2d      	ldr	r2, [pc, #180]	; (8010800 <xTaskIncrementTick+0x15c>)
 801074a:	687b      	ldr	r3, [r7, #4]
 801074c:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 801074e:	e02e      	b.n	80107ae <xTaskIncrementTick+0x10a>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010750:	68bb      	ldr	r3, [r7, #8]
 8010752:	3304      	adds	r3, #4
 8010754:	4618      	mov	r0, r3
 8010756:	f7fe fc47 	bl	800efe8 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 801075a:	68bb      	ldr	r3, [r7, #8]
 801075c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 801075e:	2b00      	cmp	r3, #0
 8010760:	d004      	beq.n	801076c <xTaskIncrementTick+0xc8>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8010762:	68bb      	ldr	r3, [r7, #8]
 8010764:	3318      	adds	r3, #24
 8010766:	4618      	mov	r0, r3
 8010768:	f7fe fc3e 	bl	800efe8 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 801076c:	68bb      	ldr	r3, [r7, #8]
 801076e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010770:	2201      	movs	r2, #1
 8010772:	409a      	lsls	r2, r3
 8010774:	4b23      	ldr	r3, [pc, #140]	; (8010804 <xTaskIncrementTick+0x160>)
 8010776:	681b      	ldr	r3, [r3, #0]
 8010778:	4313      	orrs	r3, r2
 801077a:	4a22      	ldr	r2, [pc, #136]	; (8010804 <xTaskIncrementTick+0x160>)
 801077c:	6013      	str	r3, [r2, #0]
 801077e:	68bb      	ldr	r3, [r7, #8]
 8010780:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010782:	4613      	mov	r3, r2
 8010784:	009b      	lsls	r3, r3, #2
 8010786:	4413      	add	r3, r2
 8010788:	009b      	lsls	r3, r3, #2
 801078a:	4a1f      	ldr	r2, [pc, #124]	; (8010808 <xTaskIncrementTick+0x164>)
 801078c:	441a      	add	r2, r3
 801078e:	68bb      	ldr	r3, [r7, #8]
 8010790:	3304      	adds	r3, #4
 8010792:	4619      	mov	r1, r3
 8010794:	4610      	mov	r0, r2
 8010796:	f7fe fbca 	bl	800ef2e <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 801079a:	68bb      	ldr	r3, [r7, #8]
 801079c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801079e:	4b1b      	ldr	r3, [pc, #108]	; (801080c <xTaskIncrementTick+0x168>)
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80107a4:	429a      	cmp	r2, r3
 80107a6:	d3b9      	bcc.n	801071c <xTaskIncrementTick+0x78>
						{
							xSwitchRequired = pdTRUE;
 80107a8:	2301      	movs	r3, #1
 80107aa:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80107ac:	e7b6      	b.n	801071c <xTaskIncrementTick+0x78>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 80107ae:	4b17      	ldr	r3, [pc, #92]	; (801080c <xTaskIncrementTick+0x168>)
 80107b0:	681b      	ldr	r3, [r3, #0]
 80107b2:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80107b4:	4914      	ldr	r1, [pc, #80]	; (8010808 <xTaskIncrementTick+0x164>)
 80107b6:	4613      	mov	r3, r2
 80107b8:	009b      	lsls	r3, r3, #2
 80107ba:	4413      	add	r3, r2
 80107bc:	009b      	lsls	r3, r3, #2
 80107be:	440b      	add	r3, r1
 80107c0:	681b      	ldr	r3, [r3, #0]
 80107c2:	2b01      	cmp	r3, #1
 80107c4:	d907      	bls.n	80107d6 <xTaskIncrementTick+0x132>
			{
				xSwitchRequired = pdTRUE;
 80107c6:	2301      	movs	r3, #1
 80107c8:	617b      	str	r3, [r7, #20]
 80107ca:	e004      	b.n	80107d6 <xTaskIncrementTick+0x132>
		}
		#endif /* configUSE_TICK_HOOK */
	}
	else
	{
		++uxPendedTicks;
 80107cc:	4b10      	ldr	r3, [pc, #64]	; (8010810 <xTaskIncrementTick+0x16c>)
 80107ce:	681b      	ldr	r3, [r3, #0]
 80107d0:	3301      	adds	r3, #1
 80107d2:	4a0f      	ldr	r2, [pc, #60]	; (8010810 <xTaskIncrementTick+0x16c>)
 80107d4:	6013      	str	r3, [r2, #0]
		#endif
	}

	#if ( configUSE_PREEMPTION == 1 )
	{
		if( xYieldPending != pdFALSE )
 80107d6:	4b0f      	ldr	r3, [pc, #60]	; (8010814 <xTaskIncrementTick+0x170>)
 80107d8:	681b      	ldr	r3, [r3, #0]
 80107da:	2b00      	cmp	r3, #0
 80107dc:	d001      	beq.n	80107e2 <xTaskIncrementTick+0x13e>
		{
			xSwitchRequired = pdTRUE;
 80107de:	2301      	movs	r3, #1
 80107e0:	617b      	str	r3, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_PREEMPTION */

	return xSwitchRequired;
 80107e2:	697b      	ldr	r3, [r7, #20]
}
 80107e4:	4618      	mov	r0, r3
 80107e6:	3718      	adds	r7, #24
 80107e8:	46bd      	mov	sp, r7
 80107ea:	bd80      	pop	{r7, pc}
 80107ec:	20006094 	.word	0x20006094
 80107f0:	20006070 	.word	0x20006070
 80107f4:	20006024 	.word	0x20006024
 80107f8:	20006028 	.word	0x20006028
 80107fc:	20006084 	.word	0x20006084
 8010800:	2000608c 	.word	0x2000608c
 8010804:	20006074 	.word	0x20006074
 8010808:	20005f70 	.word	0x20005f70
 801080c:	20005f6c 	.word	0x20005f6c
 8010810:	2000607c 	.word	0x2000607c
 8010814:	20006080 	.word	0x20006080

08010818 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8010818:	b480      	push	{r7}
 801081a:	b087      	sub	sp, #28
 801081c:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 801081e:	4b2a      	ldr	r3, [pc, #168]	; (80108c8 <vTaskSwitchContext+0xb0>)
 8010820:	681b      	ldr	r3, [r3, #0]
 8010822:	2b00      	cmp	r3, #0
 8010824:	d003      	beq.n	801082e <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8010826:	4b29      	ldr	r3, [pc, #164]	; (80108cc <vTaskSwitchContext+0xb4>)
 8010828:	2201      	movs	r2, #1
 801082a:	601a      	str	r2, [r3, #0]
			structure specific to this task. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 801082c:	e046      	b.n	80108bc <vTaskSwitchContext+0xa4>
		xYieldPending = pdFALSE;
 801082e:	4b27      	ldr	r3, [pc, #156]	; (80108cc <vTaskSwitchContext+0xb4>)
 8010830:	2200      	movs	r2, #0
 8010832:	601a      	str	r2, [r3, #0]
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010834:	4b26      	ldr	r3, [pc, #152]	; (80108d0 <vTaskSwitchContext+0xb8>)
 8010836:	681b      	ldr	r3, [r3, #0]
 8010838:	60fb      	str	r3, [r7, #12]
		__asm volatile ( "clz %0, %1" : "=r" ( ucReturn ) : "r" ( ulBitmap ) : "memory" );
 801083a:	68fb      	ldr	r3, [r7, #12]
 801083c:	fab3 f383 	clz	r3, r3
 8010840:	72fb      	strb	r3, [r7, #11]
		return ucReturn;
 8010842:	7afb      	ldrb	r3, [r7, #11]
 8010844:	f1c3 031f 	rsb	r3, r3, #31
 8010848:	617b      	str	r3, [r7, #20]
 801084a:	4922      	ldr	r1, [pc, #136]	; (80108d4 <vTaskSwitchContext+0xbc>)
 801084c:	697a      	ldr	r2, [r7, #20]
 801084e:	4613      	mov	r3, r2
 8010850:	009b      	lsls	r3, r3, #2
 8010852:	4413      	add	r3, r2
 8010854:	009b      	lsls	r3, r3, #2
 8010856:	440b      	add	r3, r1
 8010858:	681b      	ldr	r3, [r3, #0]
 801085a:	2b00      	cmp	r3, #0
 801085c:	d10c      	bne.n	8010878 <vTaskSwitchContext+0x60>
	__asm volatile
 801085e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010862:	b672      	cpsid	i
 8010864:	f383 8811 	msr	BASEPRI, r3
 8010868:	f3bf 8f6f 	isb	sy
 801086c:	f3bf 8f4f 	dsb	sy
 8010870:	b662      	cpsie	i
 8010872:	607b      	str	r3, [r7, #4]
}
 8010874:	bf00      	nop
 8010876:	e7fe      	b.n	8010876 <vTaskSwitchContext+0x5e>
 8010878:	697a      	ldr	r2, [r7, #20]
 801087a:	4613      	mov	r3, r2
 801087c:	009b      	lsls	r3, r3, #2
 801087e:	4413      	add	r3, r2
 8010880:	009b      	lsls	r3, r3, #2
 8010882:	4a14      	ldr	r2, [pc, #80]	; (80108d4 <vTaskSwitchContext+0xbc>)
 8010884:	4413      	add	r3, r2
 8010886:	613b      	str	r3, [r7, #16]
 8010888:	693b      	ldr	r3, [r7, #16]
 801088a:	685b      	ldr	r3, [r3, #4]
 801088c:	685a      	ldr	r2, [r3, #4]
 801088e:	693b      	ldr	r3, [r7, #16]
 8010890:	605a      	str	r2, [r3, #4]
 8010892:	693b      	ldr	r3, [r7, #16]
 8010894:	685a      	ldr	r2, [r3, #4]
 8010896:	693b      	ldr	r3, [r7, #16]
 8010898:	3308      	adds	r3, #8
 801089a:	429a      	cmp	r2, r3
 801089c:	d104      	bne.n	80108a8 <vTaskSwitchContext+0x90>
 801089e:	693b      	ldr	r3, [r7, #16]
 80108a0:	685b      	ldr	r3, [r3, #4]
 80108a2:	685a      	ldr	r2, [r3, #4]
 80108a4:	693b      	ldr	r3, [r7, #16]
 80108a6:	605a      	str	r2, [r3, #4]
 80108a8:	693b      	ldr	r3, [r7, #16]
 80108aa:	685b      	ldr	r3, [r3, #4]
 80108ac:	68db      	ldr	r3, [r3, #12]
 80108ae:	4a0a      	ldr	r2, [pc, #40]	; (80108d8 <vTaskSwitchContext+0xc0>)
 80108b0:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 80108b2:	4b09      	ldr	r3, [pc, #36]	; (80108d8 <vTaskSwitchContext+0xc0>)
 80108b4:	681b      	ldr	r3, [r3, #0]
 80108b6:	334c      	adds	r3, #76	; 0x4c
 80108b8:	4a08      	ldr	r2, [pc, #32]	; (80108dc <vTaskSwitchContext+0xc4>)
 80108ba:	6013      	str	r3, [r2, #0]
}
 80108bc:	bf00      	nop
 80108be:	371c      	adds	r7, #28
 80108c0:	46bd      	mov	sp, r7
 80108c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80108c6:	4770      	bx	lr
 80108c8:	20006094 	.word	0x20006094
 80108cc:	20006080 	.word	0x20006080
 80108d0:	20006074 	.word	0x20006074
 80108d4:	20005f70 	.word	0x20005f70
 80108d8:	20005f6c 	.word	0x20005f6c
 80108dc:	200001a0 	.word	0x200001a0

080108e0 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 80108e0:	b580      	push	{r7, lr}
 80108e2:	b084      	sub	sp, #16
 80108e4:	af00      	add	r7, sp, #0
 80108e6:	6078      	str	r0, [r7, #4]
 80108e8:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 80108ea:	687b      	ldr	r3, [r7, #4]
 80108ec:	2b00      	cmp	r3, #0
 80108ee:	d10c      	bne.n	801090a <vTaskPlaceOnEventList+0x2a>
	__asm volatile
 80108f0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80108f4:	b672      	cpsid	i
 80108f6:	f383 8811 	msr	BASEPRI, r3
 80108fa:	f3bf 8f6f 	isb	sy
 80108fe:	f3bf 8f4f 	dsb	sy
 8010902:	b662      	cpsie	i
 8010904:	60fb      	str	r3, [r7, #12]
}
 8010906:	bf00      	nop
 8010908:	e7fe      	b.n	8010908 <vTaskPlaceOnEventList+0x28>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 801090a:	4b07      	ldr	r3, [pc, #28]	; (8010928 <vTaskPlaceOnEventList+0x48>)
 801090c:	681b      	ldr	r3, [r3, #0]
 801090e:	3318      	adds	r3, #24
 8010910:	4619      	mov	r1, r3
 8010912:	6878      	ldr	r0, [r7, #4]
 8010914:	f7fe fb2f 	bl	800ef76 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8010918:	2101      	movs	r1, #1
 801091a:	6838      	ldr	r0, [r7, #0]
 801091c:	f000 fba8 	bl	8011070 <prvAddCurrentTaskToDelayedList>
}
 8010920:	bf00      	nop
 8010922:	3710      	adds	r7, #16
 8010924:	46bd      	mov	sp, r7
 8010926:	bd80      	pop	{r7, pc}
 8010928:	20005f6c 	.word	0x20005f6c

0801092c <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 801092c:	b580      	push	{r7, lr}
 801092e:	b086      	sub	sp, #24
 8010930:	af00      	add	r7, sp, #0
 8010932:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	68db      	ldr	r3, [r3, #12]
 8010938:	68db      	ldr	r3, [r3, #12]
 801093a:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 801093c:	693b      	ldr	r3, [r7, #16]
 801093e:	2b00      	cmp	r3, #0
 8010940:	d10c      	bne.n	801095c <xTaskRemoveFromEventList+0x30>
	__asm volatile
 8010942:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010946:	b672      	cpsid	i
 8010948:	f383 8811 	msr	BASEPRI, r3
 801094c:	f3bf 8f6f 	isb	sy
 8010950:	f3bf 8f4f 	dsb	sy
 8010954:	b662      	cpsie	i
 8010956:	60fb      	str	r3, [r7, #12]
}
 8010958:	bf00      	nop
 801095a:	e7fe      	b.n	801095a <xTaskRemoveFromEventList+0x2e>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 801095c:	693b      	ldr	r3, [r7, #16]
 801095e:	3318      	adds	r3, #24
 8010960:	4618      	mov	r0, r3
 8010962:	f7fe fb41 	bl	800efe8 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010966:	4b1d      	ldr	r3, [pc, #116]	; (80109dc <xTaskRemoveFromEventList+0xb0>)
 8010968:	681b      	ldr	r3, [r3, #0]
 801096a:	2b00      	cmp	r3, #0
 801096c:	d11c      	bne.n	80109a8 <xTaskRemoveFromEventList+0x7c>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 801096e:	693b      	ldr	r3, [r7, #16]
 8010970:	3304      	adds	r3, #4
 8010972:	4618      	mov	r0, r3
 8010974:	f7fe fb38 	bl	800efe8 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8010978:	693b      	ldr	r3, [r7, #16]
 801097a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801097c:	2201      	movs	r2, #1
 801097e:	409a      	lsls	r2, r3
 8010980:	4b17      	ldr	r3, [pc, #92]	; (80109e0 <xTaskRemoveFromEventList+0xb4>)
 8010982:	681b      	ldr	r3, [r3, #0]
 8010984:	4313      	orrs	r3, r2
 8010986:	4a16      	ldr	r2, [pc, #88]	; (80109e0 <xTaskRemoveFromEventList+0xb4>)
 8010988:	6013      	str	r3, [r2, #0]
 801098a:	693b      	ldr	r3, [r7, #16]
 801098c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801098e:	4613      	mov	r3, r2
 8010990:	009b      	lsls	r3, r3, #2
 8010992:	4413      	add	r3, r2
 8010994:	009b      	lsls	r3, r3, #2
 8010996:	4a13      	ldr	r2, [pc, #76]	; (80109e4 <xTaskRemoveFromEventList+0xb8>)
 8010998:	441a      	add	r2, r3
 801099a:	693b      	ldr	r3, [r7, #16]
 801099c:	3304      	adds	r3, #4
 801099e:	4619      	mov	r1, r3
 80109a0:	4610      	mov	r0, r2
 80109a2:	f7fe fac4 	bl	800ef2e <vListInsertEnd>
 80109a6:	e005      	b.n	80109b4 <xTaskRemoveFromEventList+0x88>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 80109a8:	693b      	ldr	r3, [r7, #16]
 80109aa:	3318      	adds	r3, #24
 80109ac:	4619      	mov	r1, r3
 80109ae:	480e      	ldr	r0, [pc, #56]	; (80109e8 <xTaskRemoveFromEventList+0xbc>)
 80109b0:	f7fe fabd 	bl	800ef2e <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 80109b4:	693b      	ldr	r3, [r7, #16]
 80109b6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80109b8:	4b0c      	ldr	r3, [pc, #48]	; (80109ec <xTaskRemoveFromEventList+0xc0>)
 80109ba:	681b      	ldr	r3, [r3, #0]
 80109bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80109be:	429a      	cmp	r2, r3
 80109c0:	d905      	bls.n	80109ce <xTaskRemoveFromEventList+0xa2>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 80109c2:	2301      	movs	r3, #1
 80109c4:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 80109c6:	4b0a      	ldr	r3, [pc, #40]	; (80109f0 <xTaskRemoveFromEventList+0xc4>)
 80109c8:	2201      	movs	r2, #1
 80109ca:	601a      	str	r2, [r3, #0]
 80109cc:	e001      	b.n	80109d2 <xTaskRemoveFromEventList+0xa6>
	}
	else
	{
		xReturn = pdFALSE;
 80109ce:	2300      	movs	r3, #0
 80109d0:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 80109d2:	697b      	ldr	r3, [r7, #20]
}
 80109d4:	4618      	mov	r0, r3
 80109d6:	3718      	adds	r7, #24
 80109d8:	46bd      	mov	sp, r7
 80109da:	bd80      	pop	{r7, pc}
 80109dc:	20006094 	.word	0x20006094
 80109e0:	20006074 	.word	0x20006074
 80109e4:	20005f70 	.word	0x20005f70
 80109e8:	2000602c 	.word	0x2000602c
 80109ec:	20005f6c 	.word	0x20005f6c
 80109f0:	20006080 	.word	0x20006080

080109f4 <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 80109f4:	b480      	push	{r7}
 80109f6:	b083      	sub	sp, #12
 80109f8:	af00      	add	r7, sp, #0
 80109fa:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 80109fc:	4b06      	ldr	r3, [pc, #24]	; (8010a18 <vTaskInternalSetTimeOutState+0x24>)
 80109fe:	681a      	ldr	r2, [r3, #0]
 8010a00:	687b      	ldr	r3, [r7, #4]
 8010a02:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 8010a04:	4b05      	ldr	r3, [pc, #20]	; (8010a1c <vTaskInternalSetTimeOutState+0x28>)
 8010a06:	681a      	ldr	r2, [r3, #0]
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	605a      	str	r2, [r3, #4]
}
 8010a0c:	bf00      	nop
 8010a0e:	370c      	adds	r7, #12
 8010a10:	46bd      	mov	sp, r7
 8010a12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010a16:	4770      	bx	lr
 8010a18:	20006084 	.word	0x20006084
 8010a1c:	20006070 	.word	0x20006070

08010a20 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8010a20:	b580      	push	{r7, lr}
 8010a22:	b088      	sub	sp, #32
 8010a24:	af00      	add	r7, sp, #0
 8010a26:	6078      	str	r0, [r7, #4]
 8010a28:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 8010a2a:	687b      	ldr	r3, [r7, #4]
 8010a2c:	2b00      	cmp	r3, #0
 8010a2e:	d10c      	bne.n	8010a4a <xTaskCheckForTimeOut+0x2a>
	__asm volatile
 8010a30:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a34:	b672      	cpsid	i
 8010a36:	f383 8811 	msr	BASEPRI, r3
 8010a3a:	f3bf 8f6f 	isb	sy
 8010a3e:	f3bf 8f4f 	dsb	sy
 8010a42:	b662      	cpsie	i
 8010a44:	613b      	str	r3, [r7, #16]
}
 8010a46:	bf00      	nop
 8010a48:	e7fe      	b.n	8010a48 <xTaskCheckForTimeOut+0x28>
	configASSERT( pxTicksToWait );
 8010a4a:	683b      	ldr	r3, [r7, #0]
 8010a4c:	2b00      	cmp	r3, #0
 8010a4e:	d10c      	bne.n	8010a6a <xTaskCheckForTimeOut+0x4a>
	__asm volatile
 8010a50:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010a54:	b672      	cpsid	i
 8010a56:	f383 8811 	msr	BASEPRI, r3
 8010a5a:	f3bf 8f6f 	isb	sy
 8010a5e:	f3bf 8f4f 	dsb	sy
 8010a62:	b662      	cpsie	i
 8010a64:	60fb      	str	r3, [r7, #12]
}
 8010a66:	bf00      	nop
 8010a68:	e7fe      	b.n	8010a68 <xTaskCheckForTimeOut+0x48>

	taskENTER_CRITICAL();
 8010a6a:	f000 fc77 	bl	801135c <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 8010a6e:	4b1d      	ldr	r3, [pc, #116]	; (8010ae4 <xTaskCheckForTimeOut+0xc4>)
 8010a70:	681b      	ldr	r3, [r3, #0]
 8010a72:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 8010a74:	687b      	ldr	r3, [r7, #4]
 8010a76:	685b      	ldr	r3, [r3, #4]
 8010a78:	69ba      	ldr	r2, [r7, #24]
 8010a7a:	1ad3      	subs	r3, r2, r3
 8010a7c:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 8010a7e:	683b      	ldr	r3, [r7, #0]
 8010a80:	681b      	ldr	r3, [r3, #0]
 8010a82:	f1b3 3fff 	cmp.w	r3, #4294967295
 8010a86:	d102      	bne.n	8010a8e <xTaskCheckForTimeOut+0x6e>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 8010a88:	2300      	movs	r3, #0
 8010a8a:	61fb      	str	r3, [r7, #28]
 8010a8c:	e023      	b.n	8010ad6 <xTaskCheckForTimeOut+0xb6>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 8010a8e:	687b      	ldr	r3, [r7, #4]
 8010a90:	681a      	ldr	r2, [r3, #0]
 8010a92:	4b15      	ldr	r3, [pc, #84]	; (8010ae8 <xTaskCheckForTimeOut+0xc8>)
 8010a94:	681b      	ldr	r3, [r3, #0]
 8010a96:	429a      	cmp	r2, r3
 8010a98:	d007      	beq.n	8010aaa <xTaskCheckForTimeOut+0x8a>
 8010a9a:	687b      	ldr	r3, [r7, #4]
 8010a9c:	685b      	ldr	r3, [r3, #4]
 8010a9e:	69ba      	ldr	r2, [r7, #24]
 8010aa0:	429a      	cmp	r2, r3
 8010aa2:	d302      	bcc.n	8010aaa <xTaskCheckForTimeOut+0x8a>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8010aa4:	2301      	movs	r3, #1
 8010aa6:	61fb      	str	r3, [r7, #28]
 8010aa8:	e015      	b.n	8010ad6 <xTaskCheckForTimeOut+0xb6>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 8010aaa:	683b      	ldr	r3, [r7, #0]
 8010aac:	681b      	ldr	r3, [r3, #0]
 8010aae:	697a      	ldr	r2, [r7, #20]
 8010ab0:	429a      	cmp	r2, r3
 8010ab2:	d20b      	bcs.n	8010acc <xTaskCheckForTimeOut+0xac>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8010ab4:	683b      	ldr	r3, [r7, #0]
 8010ab6:	681a      	ldr	r2, [r3, #0]
 8010ab8:	697b      	ldr	r3, [r7, #20]
 8010aba:	1ad2      	subs	r2, r2, r3
 8010abc:	683b      	ldr	r3, [r7, #0]
 8010abe:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8010ac0:	6878      	ldr	r0, [r7, #4]
 8010ac2:	f7ff ff97 	bl	80109f4 <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8010ac6:	2300      	movs	r3, #0
 8010ac8:	61fb      	str	r3, [r7, #28]
 8010aca:	e004      	b.n	8010ad6 <xTaskCheckForTimeOut+0xb6>
		}
		else
		{
			*pxTicksToWait = 0;
 8010acc:	683b      	ldr	r3, [r7, #0]
 8010ace:	2200      	movs	r2, #0
 8010ad0:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8010ad2:	2301      	movs	r3, #1
 8010ad4:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8010ad6:	f000 fc75 	bl	80113c4 <vPortExitCritical>

	return xReturn;
 8010ada:	69fb      	ldr	r3, [r7, #28]
}
 8010adc:	4618      	mov	r0, r3
 8010ade:	3720      	adds	r7, #32
 8010ae0:	46bd      	mov	sp, r7
 8010ae2:	bd80      	pop	{r7, pc}
 8010ae4:	20006070 	.word	0x20006070
 8010ae8:	20006084 	.word	0x20006084

08010aec <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 8010aec:	b480      	push	{r7}
 8010aee:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8010af0:	4b03      	ldr	r3, [pc, #12]	; (8010b00 <vTaskMissedYield+0x14>)
 8010af2:	2201      	movs	r2, #1
 8010af4:	601a      	str	r2, [r3, #0]
}
 8010af6:	bf00      	nop
 8010af8:	46bd      	mov	sp, r7
 8010afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010afe:	4770      	bx	lr
 8010b00:	20006080 	.word	0x20006080

08010b04 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8010b04:	b580      	push	{r7, lr}
 8010b06:	b082      	sub	sp, #8
 8010b08:	af00      	add	r7, sp, #0
 8010b0a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 8010b0c:	f000 f852 	bl	8010bb4 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8010b10:	4b06      	ldr	r3, [pc, #24]	; (8010b2c <prvIdleTask+0x28>)
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	2b01      	cmp	r3, #1
 8010b16:	d9f9      	bls.n	8010b0c <prvIdleTask+0x8>
			{
				taskYIELD();
 8010b18:	4b05      	ldr	r3, [pc, #20]	; (8010b30 <prvIdleTask+0x2c>)
 8010b1a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8010b1e:	601a      	str	r2, [r3, #0]
 8010b20:	f3bf 8f4f 	dsb	sy
 8010b24:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8010b28:	e7f0      	b.n	8010b0c <prvIdleTask+0x8>
 8010b2a:	bf00      	nop
 8010b2c:	20005f70 	.word	0x20005f70
 8010b30:	e000ed04 	.word	0xe000ed04

08010b34 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 8010b34:	b580      	push	{r7, lr}
 8010b36:	b082      	sub	sp, #8
 8010b38:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010b3a:	2300      	movs	r3, #0
 8010b3c:	607b      	str	r3, [r7, #4]
 8010b3e:	e00c      	b.n	8010b5a <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 8010b40:	687a      	ldr	r2, [r7, #4]
 8010b42:	4613      	mov	r3, r2
 8010b44:	009b      	lsls	r3, r3, #2
 8010b46:	4413      	add	r3, r2
 8010b48:	009b      	lsls	r3, r3, #2
 8010b4a:	4a12      	ldr	r2, [pc, #72]	; (8010b94 <prvInitialiseTaskLists+0x60>)
 8010b4c:	4413      	add	r3, r2
 8010b4e:	4618      	mov	r0, r3
 8010b50:	f7fe f9c0 	bl	800eed4 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 8010b54:	687b      	ldr	r3, [r7, #4]
 8010b56:	3301      	adds	r3, #1
 8010b58:	607b      	str	r3, [r7, #4]
 8010b5a:	687b      	ldr	r3, [r7, #4]
 8010b5c:	2b06      	cmp	r3, #6
 8010b5e:	d9ef      	bls.n	8010b40 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 8010b60:	480d      	ldr	r0, [pc, #52]	; (8010b98 <prvInitialiseTaskLists+0x64>)
 8010b62:	f7fe f9b7 	bl	800eed4 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 8010b66:	480d      	ldr	r0, [pc, #52]	; (8010b9c <prvInitialiseTaskLists+0x68>)
 8010b68:	f7fe f9b4 	bl	800eed4 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 8010b6c:	480c      	ldr	r0, [pc, #48]	; (8010ba0 <prvInitialiseTaskLists+0x6c>)
 8010b6e:	f7fe f9b1 	bl	800eed4 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 8010b72:	480c      	ldr	r0, [pc, #48]	; (8010ba4 <prvInitialiseTaskLists+0x70>)
 8010b74:	f7fe f9ae 	bl	800eed4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 8010b78:	480b      	ldr	r0, [pc, #44]	; (8010ba8 <prvInitialiseTaskLists+0x74>)
 8010b7a:	f7fe f9ab 	bl	800eed4 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 8010b7e:	4b0b      	ldr	r3, [pc, #44]	; (8010bac <prvInitialiseTaskLists+0x78>)
 8010b80:	4a05      	ldr	r2, [pc, #20]	; (8010b98 <prvInitialiseTaskLists+0x64>)
 8010b82:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 8010b84:	4b0a      	ldr	r3, [pc, #40]	; (8010bb0 <prvInitialiseTaskLists+0x7c>)
 8010b86:	4a05      	ldr	r2, [pc, #20]	; (8010b9c <prvInitialiseTaskLists+0x68>)
 8010b88:	601a      	str	r2, [r3, #0]
}
 8010b8a:	bf00      	nop
 8010b8c:	3708      	adds	r7, #8
 8010b8e:	46bd      	mov	sp, r7
 8010b90:	bd80      	pop	{r7, pc}
 8010b92:	bf00      	nop
 8010b94:	20005f70 	.word	0x20005f70
 8010b98:	20005ffc 	.word	0x20005ffc
 8010b9c:	20006010 	.word	0x20006010
 8010ba0:	2000602c 	.word	0x2000602c
 8010ba4:	20006040 	.word	0x20006040
 8010ba8:	20006058 	.word	0x20006058
 8010bac:	20006024 	.word	0x20006024
 8010bb0:	20006028 	.word	0x20006028

08010bb4 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8010bb4:	b580      	push	{r7, lr}
 8010bb6:	b082      	sub	sp, #8
 8010bb8:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010bba:	e019      	b.n	8010bf0 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 8010bbc:	f000 fbce 	bl	801135c <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010bc0:	4b10      	ldr	r3, [pc, #64]	; (8010c04 <prvCheckTasksWaitingTermination+0x50>)
 8010bc2:	68db      	ldr	r3, [r3, #12]
 8010bc4:	68db      	ldr	r3, [r3, #12]
 8010bc6:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	3304      	adds	r3, #4
 8010bcc:	4618      	mov	r0, r3
 8010bce:	f7fe fa0b 	bl	800efe8 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8010bd2:	4b0d      	ldr	r3, [pc, #52]	; (8010c08 <prvCheckTasksWaitingTermination+0x54>)
 8010bd4:	681b      	ldr	r3, [r3, #0]
 8010bd6:	3b01      	subs	r3, #1
 8010bd8:	4a0b      	ldr	r2, [pc, #44]	; (8010c08 <prvCheckTasksWaitingTermination+0x54>)
 8010bda:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 8010bdc:	4b0b      	ldr	r3, [pc, #44]	; (8010c0c <prvCheckTasksWaitingTermination+0x58>)
 8010bde:	681b      	ldr	r3, [r3, #0]
 8010be0:	3b01      	subs	r3, #1
 8010be2:	4a0a      	ldr	r2, [pc, #40]	; (8010c0c <prvCheckTasksWaitingTermination+0x58>)
 8010be4:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8010be6:	f000 fbed 	bl	80113c4 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 8010bea:	6878      	ldr	r0, [r7, #4]
 8010bec:	f000 f810 	bl	8010c10 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8010bf0:	4b06      	ldr	r3, [pc, #24]	; (8010c0c <prvCheckTasksWaitingTermination+0x58>)
 8010bf2:	681b      	ldr	r3, [r3, #0]
 8010bf4:	2b00      	cmp	r3, #0
 8010bf6:	d1e1      	bne.n	8010bbc <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8010bf8:	bf00      	nop
 8010bfa:	bf00      	nop
 8010bfc:	3708      	adds	r7, #8
 8010bfe:	46bd      	mov	sp, r7
 8010c00:	bd80      	pop	{r7, pc}
 8010c02:	bf00      	nop
 8010c04:	20006040 	.word	0x20006040
 8010c08:	2000606c 	.word	0x2000606c
 8010c0c:	20006054 	.word	0x20006054

08010c10 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8010c10:	b580      	push	{r7, lr}
 8010c12:	b084      	sub	sp, #16
 8010c14:	af00      	add	r7, sp, #0
 8010c16:	6078      	str	r0, [r7, #4]

		/* Free up the memory allocated by the scheduler for the task.  It is up
		to the task to free any memory allocated at the application level. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8010c18:	687b      	ldr	r3, [r7, #4]
 8010c1a:	334c      	adds	r3, #76	; 0x4c
 8010c1c:	4618      	mov	r0, r3
 8010c1e:	f00c fcc3 	bl	801d5a8 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8010c22:	687b      	ldr	r3, [r7, #4]
 8010c24:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	d108      	bne.n	8010c3e <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 8010c2c:	687b      	ldr	r3, [r7, #4]
 8010c2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8010c30:	4618      	mov	r0, r3
 8010c32:	f000 fd89 	bl	8011748 <vPortFree>
				vPortFree( pxTCB );
 8010c36:	6878      	ldr	r0, [r7, #4]
 8010c38:	f000 fd86 	bl	8011748 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 8010c3c:	e01a      	b.n	8010c74 <prvDeleteTCB+0x64>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8010c44:	2b01      	cmp	r3, #1
 8010c46:	d103      	bne.n	8010c50 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 8010c48:	6878      	ldr	r0, [r7, #4]
 8010c4a:	f000 fd7d 	bl	8011748 <vPortFree>
	}
 8010c4e:	e011      	b.n	8010c74 <prvDeleteTCB+0x64>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 8010c50:	687b      	ldr	r3, [r7, #4]
 8010c52:	f893 309d 	ldrb.w	r3, [r3, #157]	; 0x9d
 8010c56:	2b02      	cmp	r3, #2
 8010c58:	d00c      	beq.n	8010c74 <prvDeleteTCB+0x64>
	__asm volatile
 8010c5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010c5e:	b672      	cpsid	i
 8010c60:	f383 8811 	msr	BASEPRI, r3
 8010c64:	f3bf 8f6f 	isb	sy
 8010c68:	f3bf 8f4f 	dsb	sy
 8010c6c:	b662      	cpsie	i
 8010c6e:	60fb      	str	r3, [r7, #12]
}
 8010c70:	bf00      	nop
 8010c72:	e7fe      	b.n	8010c72 <prvDeleteTCB+0x62>
	}
 8010c74:	bf00      	nop
 8010c76:	3710      	adds	r7, #16
 8010c78:	46bd      	mov	sp, r7
 8010c7a:	bd80      	pop	{r7, pc}

08010c7c <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 8010c7c:	b480      	push	{r7}
 8010c7e:	b083      	sub	sp, #12
 8010c80:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8010c82:	4b0c      	ldr	r3, [pc, #48]	; (8010cb4 <prvResetNextTaskUnblockTime+0x38>)
 8010c84:	681b      	ldr	r3, [r3, #0]
 8010c86:	681b      	ldr	r3, [r3, #0]
 8010c88:	2b00      	cmp	r3, #0
 8010c8a:	d104      	bne.n	8010c96 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 8010c8c:	4b0a      	ldr	r3, [pc, #40]	; (8010cb8 <prvResetNextTaskUnblockTime+0x3c>)
 8010c8e:	f04f 32ff 	mov.w	r2, #4294967295
 8010c92:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8010c94:	e008      	b.n	8010ca8 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8010c96:	4b07      	ldr	r3, [pc, #28]	; (8010cb4 <prvResetNextTaskUnblockTime+0x38>)
 8010c98:	681b      	ldr	r3, [r3, #0]
 8010c9a:	68db      	ldr	r3, [r3, #12]
 8010c9c:	68db      	ldr	r3, [r3, #12]
 8010c9e:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 8010ca0:	687b      	ldr	r3, [r7, #4]
 8010ca2:	685b      	ldr	r3, [r3, #4]
 8010ca4:	4a04      	ldr	r2, [pc, #16]	; (8010cb8 <prvResetNextTaskUnblockTime+0x3c>)
 8010ca6:	6013      	str	r3, [r2, #0]
}
 8010ca8:	bf00      	nop
 8010caa:	370c      	adds	r7, #12
 8010cac:	46bd      	mov	sp, r7
 8010cae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cb2:	4770      	bx	lr
 8010cb4:	20006024 	.word	0x20006024
 8010cb8:	2000608c 	.word	0x2000608c

08010cbc <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8010cbc:	b480      	push	{r7}
 8010cbe:	b083      	sub	sp, #12
 8010cc0:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 8010cc2:	4b0b      	ldr	r3, [pc, #44]	; (8010cf0 <xTaskGetSchedulerState+0x34>)
 8010cc4:	681b      	ldr	r3, [r3, #0]
 8010cc6:	2b00      	cmp	r3, #0
 8010cc8:	d102      	bne.n	8010cd0 <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8010cca:	2301      	movs	r3, #1
 8010ccc:	607b      	str	r3, [r7, #4]
 8010cce:	e008      	b.n	8010ce2 <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8010cd0:	4b08      	ldr	r3, [pc, #32]	; (8010cf4 <xTaskGetSchedulerState+0x38>)
 8010cd2:	681b      	ldr	r3, [r3, #0]
 8010cd4:	2b00      	cmp	r3, #0
 8010cd6:	d102      	bne.n	8010cde <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8010cd8:	2302      	movs	r3, #2
 8010cda:	607b      	str	r3, [r7, #4]
 8010cdc:	e001      	b.n	8010ce2 <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 8010cde:	2300      	movs	r3, #0
 8010ce0:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 8010ce2:	687b      	ldr	r3, [r7, #4]
	}
 8010ce4:	4618      	mov	r0, r3
 8010ce6:	370c      	adds	r7, #12
 8010ce8:	46bd      	mov	sp, r7
 8010cea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8010cee:	4770      	bx	lr
 8010cf0:	20006078 	.word	0x20006078
 8010cf4:	20006094 	.word	0x20006094

08010cf8 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8010cf8:	b580      	push	{r7, lr}
 8010cfa:	b084      	sub	sp, #16
 8010cfc:	af00      	add	r7, sp, #0
 8010cfe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 8010d00:	687b      	ldr	r3, [r7, #4]
 8010d02:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8010d04:	2300      	movs	r3, #0
 8010d06:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8010d08:	687b      	ldr	r3, [r7, #4]
 8010d0a:	2b00      	cmp	r3, #0
 8010d0c:	d069      	beq.n	8010de2 <xTaskPriorityInherit+0xea>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 8010d0e:	68bb      	ldr	r3, [r7, #8]
 8010d10:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d12:	4b36      	ldr	r3, [pc, #216]	; (8010dec <xTaskPriorityInherit+0xf4>)
 8010d14:	681b      	ldr	r3, [r3, #0]
 8010d16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d18:	429a      	cmp	r2, r3
 8010d1a:	d259      	bcs.n	8010dd0 <xTaskPriorityInherit+0xd8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010d1c:	68bb      	ldr	r3, [r7, #8]
 8010d1e:	699b      	ldr	r3, [r3, #24]
 8010d20:	2b00      	cmp	r3, #0
 8010d22:	db06      	blt.n	8010d32 <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010d24:	4b31      	ldr	r3, [pc, #196]	; (8010dec <xTaskPriorityInherit+0xf4>)
 8010d26:	681b      	ldr	r3, [r3, #0]
 8010d28:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d2a:	f1c3 0207 	rsb	r2, r3, #7
 8010d2e:	68bb      	ldr	r3, [r7, #8]
 8010d30:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 8010d32:	68bb      	ldr	r3, [r7, #8]
 8010d34:	6959      	ldr	r1, [r3, #20]
 8010d36:	68bb      	ldr	r3, [r7, #8]
 8010d38:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d3a:	4613      	mov	r3, r2
 8010d3c:	009b      	lsls	r3, r3, #2
 8010d3e:	4413      	add	r3, r2
 8010d40:	009b      	lsls	r3, r3, #2
 8010d42:	4a2b      	ldr	r2, [pc, #172]	; (8010df0 <xTaskPriorityInherit+0xf8>)
 8010d44:	4413      	add	r3, r2
 8010d46:	4299      	cmp	r1, r3
 8010d48:	d13a      	bne.n	8010dc0 <xTaskPriorityInherit+0xc8>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010d4a:	68bb      	ldr	r3, [r7, #8]
 8010d4c:	3304      	adds	r3, #4
 8010d4e:	4618      	mov	r0, r3
 8010d50:	f7fe f94a 	bl	800efe8 <uxListRemove>
 8010d54:	4603      	mov	r3, r0
 8010d56:	2b00      	cmp	r3, #0
 8010d58:	d115      	bne.n	8010d86 <xTaskPriorityInherit+0x8e>
					{
						taskRESET_READY_PRIORITY( pxMutexHolderTCB->uxPriority );
 8010d5a:	68bb      	ldr	r3, [r7, #8]
 8010d5c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d5e:	4924      	ldr	r1, [pc, #144]	; (8010df0 <xTaskPriorityInherit+0xf8>)
 8010d60:	4613      	mov	r3, r2
 8010d62:	009b      	lsls	r3, r3, #2
 8010d64:	4413      	add	r3, r2
 8010d66:	009b      	lsls	r3, r3, #2
 8010d68:	440b      	add	r3, r1
 8010d6a:	681b      	ldr	r3, [r3, #0]
 8010d6c:	2b00      	cmp	r3, #0
 8010d6e:	d10a      	bne.n	8010d86 <xTaskPriorityInherit+0x8e>
 8010d70:	68bb      	ldr	r3, [r7, #8]
 8010d72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d74:	2201      	movs	r2, #1
 8010d76:	fa02 f303 	lsl.w	r3, r2, r3
 8010d7a:	43da      	mvns	r2, r3
 8010d7c:	4b1d      	ldr	r3, [pc, #116]	; (8010df4 <xTaskPriorityInherit+0xfc>)
 8010d7e:	681b      	ldr	r3, [r3, #0]
 8010d80:	4013      	ands	r3, r2
 8010d82:	4a1c      	ldr	r2, [pc, #112]	; (8010df4 <xTaskPriorityInherit+0xfc>)
 8010d84:	6013      	str	r3, [r2, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010d86:	4b19      	ldr	r3, [pc, #100]	; (8010dec <xTaskPriorityInherit+0xf4>)
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010d8c:	68bb      	ldr	r3, [r7, #8]
 8010d8e:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 8010d90:	68bb      	ldr	r3, [r7, #8]
 8010d92:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010d94:	2201      	movs	r2, #1
 8010d96:	409a      	lsls	r2, r3
 8010d98:	4b16      	ldr	r3, [pc, #88]	; (8010df4 <xTaskPriorityInherit+0xfc>)
 8010d9a:	681b      	ldr	r3, [r3, #0]
 8010d9c:	4313      	orrs	r3, r2
 8010d9e:	4a15      	ldr	r2, [pc, #84]	; (8010df4 <xTaskPriorityInherit+0xfc>)
 8010da0:	6013      	str	r3, [r2, #0]
 8010da2:	68bb      	ldr	r3, [r7, #8]
 8010da4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010da6:	4613      	mov	r3, r2
 8010da8:	009b      	lsls	r3, r3, #2
 8010daa:	4413      	add	r3, r2
 8010dac:	009b      	lsls	r3, r3, #2
 8010dae:	4a10      	ldr	r2, [pc, #64]	; (8010df0 <xTaskPriorityInherit+0xf8>)
 8010db0:	441a      	add	r2, r3
 8010db2:	68bb      	ldr	r3, [r7, #8]
 8010db4:	3304      	adds	r3, #4
 8010db6:	4619      	mov	r1, r3
 8010db8:	4610      	mov	r0, r2
 8010dba:	f7fe f8b8 	bl	800ef2e <vListInsertEnd>
 8010dbe:	e004      	b.n	8010dca <xTaskPriorityInherit+0xd2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 8010dc0:	4b0a      	ldr	r3, [pc, #40]	; (8010dec <xTaskPriorityInherit+0xf4>)
 8010dc2:	681b      	ldr	r3, [r3, #0]
 8010dc4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010dc6:	68bb      	ldr	r3, [r7, #8]
 8010dc8:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8010dca:	2301      	movs	r3, #1
 8010dcc:	60fb      	str	r3, [r7, #12]
 8010dce:	e008      	b.n	8010de2 <xTaskPriorityInherit+0xea>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 8010dd0:	68bb      	ldr	r3, [r7, #8]
 8010dd2:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010dd4:	4b05      	ldr	r3, [pc, #20]	; (8010dec <xTaskPriorityInherit+0xf4>)
 8010dd6:	681b      	ldr	r3, [r3, #0]
 8010dd8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010dda:	429a      	cmp	r2, r3
 8010ddc:	d201      	bcs.n	8010de2 <xTaskPriorityInherit+0xea>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 8010dde:	2301      	movs	r3, #1
 8010de0:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010de2:	68fb      	ldr	r3, [r7, #12]
	}
 8010de4:	4618      	mov	r0, r3
 8010de6:	3710      	adds	r7, #16
 8010de8:	46bd      	mov	sp, r7
 8010dea:	bd80      	pop	{r7, pc}
 8010dec:	20005f6c 	.word	0x20005f6c
 8010df0:	20005f70 	.word	0x20005f70
 8010df4:	20006074 	.word	0x20006074

08010df8 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8010df8:	b580      	push	{r7, lr}
 8010dfa:	b086      	sub	sp, #24
 8010dfc:	af00      	add	r7, sp, #0
 8010dfe:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 8010e00:	687b      	ldr	r3, [r7, #4]
 8010e02:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8010e04:	2300      	movs	r3, #0
 8010e06:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010e08:	687b      	ldr	r3, [r7, #4]
 8010e0a:	2b00      	cmp	r3, #0
 8010e0c:	d072      	beq.n	8010ef4 <xTaskPriorityDisinherit+0xfc>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 8010e0e:	4b3c      	ldr	r3, [pc, #240]	; (8010f00 <xTaskPriorityDisinherit+0x108>)
 8010e10:	681b      	ldr	r3, [r3, #0]
 8010e12:	693a      	ldr	r2, [r7, #16]
 8010e14:	429a      	cmp	r2, r3
 8010e16:	d00c      	beq.n	8010e32 <xTaskPriorityDisinherit+0x3a>
	__asm volatile
 8010e18:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e1c:	b672      	cpsid	i
 8010e1e:	f383 8811 	msr	BASEPRI, r3
 8010e22:	f3bf 8f6f 	isb	sy
 8010e26:	f3bf 8f4f 	dsb	sy
 8010e2a:	b662      	cpsie	i
 8010e2c:	60fb      	str	r3, [r7, #12]
}
 8010e2e:	bf00      	nop
 8010e30:	e7fe      	b.n	8010e30 <xTaskPriorityDisinherit+0x38>
			configASSERT( pxTCB->uxMutexesHeld );
 8010e32:	693b      	ldr	r3, [r7, #16]
 8010e34:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010e36:	2b00      	cmp	r3, #0
 8010e38:	d10c      	bne.n	8010e54 <xTaskPriorityDisinherit+0x5c>
	__asm volatile
 8010e3a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010e3e:	b672      	cpsid	i
 8010e40:	f383 8811 	msr	BASEPRI, r3
 8010e44:	f3bf 8f6f 	isb	sy
 8010e48:	f3bf 8f4f 	dsb	sy
 8010e4c:	b662      	cpsie	i
 8010e4e:	60bb      	str	r3, [r7, #8]
}
 8010e50:	bf00      	nop
 8010e52:	e7fe      	b.n	8010e52 <xTaskPriorityDisinherit+0x5a>
			( pxTCB->uxMutexesHeld )--;
 8010e54:	693b      	ldr	r3, [r7, #16]
 8010e56:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010e58:	1e5a      	subs	r2, r3, #1
 8010e5a:	693b      	ldr	r3, [r7, #16]
 8010e5c:	649a      	str	r2, [r3, #72]	; 0x48

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 8010e5e:	693b      	ldr	r3, [r7, #16]
 8010e60:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e62:	693b      	ldr	r3, [r7, #16]
 8010e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010e66:	429a      	cmp	r2, r3
 8010e68:	d044      	beq.n	8010ef4 <xTaskPriorityDisinherit+0xfc>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 8010e6a:	693b      	ldr	r3, [r7, #16]
 8010e6c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010e6e:	2b00      	cmp	r3, #0
 8010e70:	d140      	bne.n	8010ef4 <xTaskPriorityDisinherit+0xfc>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010e72:	693b      	ldr	r3, [r7, #16]
 8010e74:	3304      	adds	r3, #4
 8010e76:	4618      	mov	r0, r3
 8010e78:	f7fe f8b6 	bl	800efe8 <uxListRemove>
 8010e7c:	4603      	mov	r3, r0
 8010e7e:	2b00      	cmp	r3, #0
 8010e80:	d115      	bne.n	8010eae <xTaskPriorityDisinherit+0xb6>
					{
						taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010e82:	693b      	ldr	r3, [r7, #16]
 8010e84:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010e86:	491f      	ldr	r1, [pc, #124]	; (8010f04 <xTaskPriorityDisinherit+0x10c>)
 8010e88:	4613      	mov	r3, r2
 8010e8a:	009b      	lsls	r3, r3, #2
 8010e8c:	4413      	add	r3, r2
 8010e8e:	009b      	lsls	r3, r3, #2
 8010e90:	440b      	add	r3, r1
 8010e92:	681b      	ldr	r3, [r3, #0]
 8010e94:	2b00      	cmp	r3, #0
 8010e96:	d10a      	bne.n	8010eae <xTaskPriorityDisinherit+0xb6>
 8010e98:	693b      	ldr	r3, [r7, #16]
 8010e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010e9c:	2201      	movs	r2, #1
 8010e9e:	fa02 f303 	lsl.w	r3, r2, r3
 8010ea2:	43da      	mvns	r2, r3
 8010ea4:	4b18      	ldr	r3, [pc, #96]	; (8010f08 <xTaskPriorityDisinherit+0x110>)
 8010ea6:	681b      	ldr	r3, [r3, #0]
 8010ea8:	4013      	ands	r3, r2
 8010eaa:	4a17      	ldr	r2, [pc, #92]	; (8010f08 <xTaskPriorityDisinherit+0x110>)
 8010eac:	6013      	str	r3, [r2, #0]
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 8010eae:	693b      	ldr	r3, [r7, #16]
 8010eb0:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010eb2:	693b      	ldr	r3, [r7, #16]
 8010eb4:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010eb6:	693b      	ldr	r3, [r7, #16]
 8010eb8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010eba:	f1c3 0207 	rsb	r2, r3, #7
 8010ebe:	693b      	ldr	r3, [r7, #16]
 8010ec0:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 8010ec2:	693b      	ldr	r3, [r7, #16]
 8010ec4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ec6:	2201      	movs	r2, #1
 8010ec8:	409a      	lsls	r2, r3
 8010eca:	4b0f      	ldr	r3, [pc, #60]	; (8010f08 <xTaskPriorityDisinherit+0x110>)
 8010ecc:	681b      	ldr	r3, [r3, #0]
 8010ece:	4313      	orrs	r3, r2
 8010ed0:	4a0d      	ldr	r2, [pc, #52]	; (8010f08 <xTaskPriorityDisinherit+0x110>)
 8010ed2:	6013      	str	r3, [r2, #0]
 8010ed4:	693b      	ldr	r3, [r7, #16]
 8010ed6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010ed8:	4613      	mov	r3, r2
 8010eda:	009b      	lsls	r3, r3, #2
 8010edc:	4413      	add	r3, r2
 8010ede:	009b      	lsls	r3, r3, #2
 8010ee0:	4a08      	ldr	r2, [pc, #32]	; (8010f04 <xTaskPriorityDisinherit+0x10c>)
 8010ee2:	441a      	add	r2, r3
 8010ee4:	693b      	ldr	r3, [r7, #16]
 8010ee6:	3304      	adds	r3, #4
 8010ee8:	4619      	mov	r1, r3
 8010eea:	4610      	mov	r0, r2
 8010eec:	f7fe f81f 	bl	800ef2e <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8010ef0:	2301      	movs	r3, #1
 8010ef2:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8010ef4:	697b      	ldr	r3, [r7, #20]
	}
 8010ef6:	4618      	mov	r0, r3
 8010ef8:	3718      	adds	r7, #24
 8010efa:	46bd      	mov	sp, r7
 8010efc:	bd80      	pop	{r7, pc}
 8010efe:	bf00      	nop
 8010f00:	20005f6c 	.word	0x20005f6c
 8010f04:	20005f70 	.word	0x20005f70
 8010f08:	20006074 	.word	0x20006074

08010f0c <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8010f0c:	b580      	push	{r7, lr}
 8010f0e:	b088      	sub	sp, #32
 8010f10:	af00      	add	r7, sp, #0
 8010f12:	6078      	str	r0, [r7, #4]
 8010f14:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 8010f1a:	2301      	movs	r3, #1
 8010f1c:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8010f1e:	687b      	ldr	r3, [r7, #4]
 8010f20:	2b00      	cmp	r3, #0
 8010f22:	f000 8087 	beq.w	8011034 <vTaskPriorityDisinheritAfterTimeout+0x128>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8010f26:	69bb      	ldr	r3, [r7, #24]
 8010f28:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010f2a:	2b00      	cmp	r3, #0
 8010f2c:	d10c      	bne.n	8010f48 <vTaskPriorityDisinheritAfterTimeout+0x3c>
	__asm volatile
 8010f2e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f32:	b672      	cpsid	i
 8010f34:	f383 8811 	msr	BASEPRI, r3
 8010f38:	f3bf 8f6f 	isb	sy
 8010f3c:	f3bf 8f4f 	dsb	sy
 8010f40:	b662      	cpsie	i
 8010f42:	60fb      	str	r3, [r7, #12]
}
 8010f44:	bf00      	nop
 8010f46:	e7fe      	b.n	8010f46 <vTaskPriorityDisinheritAfterTimeout+0x3a>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8010f48:	69bb      	ldr	r3, [r7, #24]
 8010f4a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f4c:	683a      	ldr	r2, [r7, #0]
 8010f4e:	429a      	cmp	r2, r3
 8010f50:	d902      	bls.n	8010f58 <vTaskPriorityDisinheritAfterTimeout+0x4c>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8010f52:	683b      	ldr	r3, [r7, #0]
 8010f54:	61fb      	str	r3, [r7, #28]
 8010f56:	e002      	b.n	8010f5e <vTaskPriorityDisinheritAfterTimeout+0x52>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8010f58:	69bb      	ldr	r3, [r7, #24]
 8010f5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010f5c:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 8010f5e:	69bb      	ldr	r3, [r7, #24]
 8010f60:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f62:	69fa      	ldr	r2, [r7, #28]
 8010f64:	429a      	cmp	r2, r3
 8010f66:	d065      	beq.n	8011034 <vTaskPriorityDisinheritAfterTimeout+0x128>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8010f68:	69bb      	ldr	r3, [r7, #24]
 8010f6a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8010f6c:	697a      	ldr	r2, [r7, #20]
 8010f6e:	429a      	cmp	r2, r3
 8010f70:	d160      	bne.n	8011034 <vTaskPriorityDisinheritAfterTimeout+0x128>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8010f72:	4b32      	ldr	r3, [pc, #200]	; (801103c <vTaskPriorityDisinheritAfterTimeout+0x130>)
 8010f74:	681b      	ldr	r3, [r3, #0]
 8010f76:	69ba      	ldr	r2, [r7, #24]
 8010f78:	429a      	cmp	r2, r3
 8010f7a:	d10c      	bne.n	8010f96 <vTaskPriorityDisinheritAfterTimeout+0x8a>
	__asm volatile
 8010f7c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8010f80:	b672      	cpsid	i
 8010f82:	f383 8811 	msr	BASEPRI, r3
 8010f86:	f3bf 8f6f 	isb	sy
 8010f8a:	f3bf 8f4f 	dsb	sy
 8010f8e:	b662      	cpsie	i
 8010f90:	60bb      	str	r3, [r7, #8]
}
 8010f92:	bf00      	nop
 8010f94:	e7fe      	b.n	8010f94 <vTaskPriorityDisinheritAfterTimeout+0x88>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 8010f96:	69bb      	ldr	r3, [r7, #24]
 8010f98:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010f9a:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 8010f9c:	69bb      	ldr	r3, [r7, #24]
 8010f9e:	69fa      	ldr	r2, [r7, #28]
 8010fa0:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 8010fa2:	69bb      	ldr	r3, [r7, #24]
 8010fa4:	699b      	ldr	r3, [r3, #24]
 8010fa6:	2b00      	cmp	r3, #0
 8010fa8:	db04      	blt.n	8010fb4 <vTaskPriorityDisinheritAfterTimeout+0xa8>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8010faa:	69fb      	ldr	r3, [r7, #28]
 8010fac:	f1c3 0207 	rsb	r2, r3, #7
 8010fb0:	69bb      	ldr	r3, [r7, #24]
 8010fb2:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 8010fb4:	69bb      	ldr	r3, [r7, #24]
 8010fb6:	6959      	ldr	r1, [r3, #20]
 8010fb8:	693a      	ldr	r2, [r7, #16]
 8010fba:	4613      	mov	r3, r2
 8010fbc:	009b      	lsls	r3, r3, #2
 8010fbe:	4413      	add	r3, r2
 8010fc0:	009b      	lsls	r3, r3, #2
 8010fc2:	4a1f      	ldr	r2, [pc, #124]	; (8011040 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8010fc4:	4413      	add	r3, r2
 8010fc6:	4299      	cmp	r1, r3
 8010fc8:	d134      	bne.n	8011034 <vTaskPriorityDisinheritAfterTimeout+0x128>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8010fca:	69bb      	ldr	r3, [r7, #24]
 8010fcc:	3304      	adds	r3, #4
 8010fce:	4618      	mov	r0, r3
 8010fd0:	f7fe f80a 	bl	800efe8 <uxListRemove>
 8010fd4:	4603      	mov	r3, r0
 8010fd6:	2b00      	cmp	r3, #0
 8010fd8:	d115      	bne.n	8011006 <vTaskPriorityDisinheritAfterTimeout+0xfa>
						{
							taskRESET_READY_PRIORITY( pxTCB->uxPriority );
 8010fda:	69bb      	ldr	r3, [r7, #24]
 8010fdc:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8010fde:	4918      	ldr	r1, [pc, #96]	; (8011040 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8010fe0:	4613      	mov	r3, r2
 8010fe2:	009b      	lsls	r3, r3, #2
 8010fe4:	4413      	add	r3, r2
 8010fe6:	009b      	lsls	r3, r3, #2
 8010fe8:	440b      	add	r3, r1
 8010fea:	681b      	ldr	r3, [r3, #0]
 8010fec:	2b00      	cmp	r3, #0
 8010fee:	d10a      	bne.n	8011006 <vTaskPriorityDisinheritAfterTimeout+0xfa>
 8010ff0:	69bb      	ldr	r3, [r7, #24]
 8010ff2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8010ff4:	2201      	movs	r2, #1
 8010ff6:	fa02 f303 	lsl.w	r3, r2, r3
 8010ffa:	43da      	mvns	r2, r3
 8010ffc:	4b11      	ldr	r3, [pc, #68]	; (8011044 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8010ffe:	681b      	ldr	r3, [r3, #0]
 8011000:	4013      	ands	r3, r2
 8011002:	4a10      	ldr	r2, [pc, #64]	; (8011044 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8011004:	6013      	str	r3, [r2, #0]
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 8011006:	69bb      	ldr	r3, [r7, #24]
 8011008:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801100a:	2201      	movs	r2, #1
 801100c:	409a      	lsls	r2, r3
 801100e:	4b0d      	ldr	r3, [pc, #52]	; (8011044 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8011010:	681b      	ldr	r3, [r3, #0]
 8011012:	4313      	orrs	r3, r2
 8011014:	4a0b      	ldr	r2, [pc, #44]	; (8011044 <vTaskPriorityDisinheritAfterTimeout+0x138>)
 8011016:	6013      	str	r3, [r2, #0]
 8011018:	69bb      	ldr	r3, [r7, #24]
 801101a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801101c:	4613      	mov	r3, r2
 801101e:	009b      	lsls	r3, r3, #2
 8011020:	4413      	add	r3, r2
 8011022:	009b      	lsls	r3, r3, #2
 8011024:	4a06      	ldr	r2, [pc, #24]	; (8011040 <vTaskPriorityDisinheritAfterTimeout+0x134>)
 8011026:	441a      	add	r2, r3
 8011028:	69bb      	ldr	r3, [r7, #24]
 801102a:	3304      	adds	r3, #4
 801102c:	4619      	mov	r1, r3
 801102e:	4610      	mov	r0, r2
 8011030:	f7fd ff7d 	bl	800ef2e <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 8011034:	bf00      	nop
 8011036:	3720      	adds	r7, #32
 8011038:	46bd      	mov	sp, r7
 801103a:	bd80      	pop	{r7, pc}
 801103c:	20005f6c 	.word	0x20005f6c
 8011040:	20005f70 	.word	0x20005f70
 8011044:	20006074 	.word	0x20006074

08011048 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8011048:	b480      	push	{r7}
 801104a:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 801104c:	4b07      	ldr	r3, [pc, #28]	; (801106c <pvTaskIncrementMutexHeldCount+0x24>)
 801104e:	681b      	ldr	r3, [r3, #0]
 8011050:	2b00      	cmp	r3, #0
 8011052:	d004      	beq.n	801105e <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8011054:	4b05      	ldr	r3, [pc, #20]	; (801106c <pvTaskIncrementMutexHeldCount+0x24>)
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	6c9a      	ldr	r2, [r3, #72]	; 0x48
 801105a:	3201      	adds	r2, #1
 801105c:	649a      	str	r2, [r3, #72]	; 0x48
		}

		return pxCurrentTCB;
 801105e:	4b03      	ldr	r3, [pc, #12]	; (801106c <pvTaskIncrementMutexHeldCount+0x24>)
 8011060:	681b      	ldr	r3, [r3, #0]
	}
 8011062:	4618      	mov	r0, r3
 8011064:	46bd      	mov	sp, r7
 8011066:	f85d 7b04 	ldr.w	r7, [sp], #4
 801106a:	4770      	bx	lr
 801106c:	20005f6c 	.word	0x20005f6c

08011070 <prvAddCurrentTaskToDelayedList>:
	}
#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 8011070:	b580      	push	{r7, lr}
 8011072:	b084      	sub	sp, #16
 8011074:	af00      	add	r7, sp, #0
 8011076:	6078      	str	r0, [r7, #4]
 8011078:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 801107a:	4b29      	ldr	r3, [pc, #164]	; (8011120 <prvAddCurrentTaskToDelayedList+0xb0>)
 801107c:	681b      	ldr	r3, [r3, #0]
 801107e:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 8011080:	4b28      	ldr	r3, [pc, #160]	; (8011124 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011082:	681b      	ldr	r3, [r3, #0]
 8011084:	3304      	adds	r3, #4
 8011086:	4618      	mov	r0, r3
 8011088:	f7fd ffae 	bl	800efe8 <uxListRemove>
 801108c:	4603      	mov	r3, r0
 801108e:	2b00      	cmp	r3, #0
 8011090:	d10b      	bne.n	80110aa <prvAddCurrentTaskToDelayedList+0x3a>
	{
		/* The current task must be in a ready list, so there is no need to
		check, and the port reset macro can be called directly. */
		portRESET_READY_PRIORITY( pxCurrentTCB->uxPriority, uxTopReadyPriority ); /*lint !e931 pxCurrentTCB cannot change as it is the calling task.  pxCurrentTCB->uxPriority and uxTopReadyPriority cannot change as called with scheduler suspended or in a critical section. */
 8011092:	4b24      	ldr	r3, [pc, #144]	; (8011124 <prvAddCurrentTaskToDelayedList+0xb4>)
 8011094:	681b      	ldr	r3, [r3, #0]
 8011096:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8011098:	2201      	movs	r2, #1
 801109a:	fa02 f303 	lsl.w	r3, r2, r3
 801109e:	43da      	mvns	r2, r3
 80110a0:	4b21      	ldr	r3, [pc, #132]	; (8011128 <prvAddCurrentTaskToDelayedList+0xb8>)
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	4013      	ands	r3, r2
 80110a6:	4a20      	ldr	r2, [pc, #128]	; (8011128 <prvAddCurrentTaskToDelayedList+0xb8>)
 80110a8:	6013      	str	r3, [r2, #0]
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 80110aa:	687b      	ldr	r3, [r7, #4]
 80110ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80110b0:	d10a      	bne.n	80110c8 <prvAddCurrentTaskToDelayedList+0x58>
 80110b2:	683b      	ldr	r3, [r7, #0]
 80110b4:	2b00      	cmp	r3, #0
 80110b6:	d007      	beq.n	80110c8 <prvAddCurrentTaskToDelayedList+0x58>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80110b8:	4b1a      	ldr	r3, [pc, #104]	; (8011124 <prvAddCurrentTaskToDelayedList+0xb4>)
 80110ba:	681b      	ldr	r3, [r3, #0]
 80110bc:	3304      	adds	r3, #4
 80110be:	4619      	mov	r1, r3
 80110c0:	481a      	ldr	r0, [pc, #104]	; (801112c <prvAddCurrentTaskToDelayedList+0xbc>)
 80110c2:	f7fd ff34 	bl	800ef2e <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 80110c6:	e026      	b.n	8011116 <prvAddCurrentTaskToDelayedList+0xa6>
			xTimeToWake = xConstTickCount + xTicksToWait;
 80110c8:	68fa      	ldr	r2, [r7, #12]
 80110ca:	687b      	ldr	r3, [r7, #4]
 80110cc:	4413      	add	r3, r2
 80110ce:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 80110d0:	4b14      	ldr	r3, [pc, #80]	; (8011124 <prvAddCurrentTaskToDelayedList+0xb4>)
 80110d2:	681b      	ldr	r3, [r3, #0]
 80110d4:	68ba      	ldr	r2, [r7, #8]
 80110d6:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80110d8:	68ba      	ldr	r2, [r7, #8]
 80110da:	68fb      	ldr	r3, [r7, #12]
 80110dc:	429a      	cmp	r2, r3
 80110de:	d209      	bcs.n	80110f4 <prvAddCurrentTaskToDelayedList+0x84>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80110e0:	4b13      	ldr	r3, [pc, #76]	; (8011130 <prvAddCurrentTaskToDelayedList+0xc0>)
 80110e2:	681a      	ldr	r2, [r3, #0]
 80110e4:	4b0f      	ldr	r3, [pc, #60]	; (8011124 <prvAddCurrentTaskToDelayedList+0xb4>)
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	3304      	adds	r3, #4
 80110ea:	4619      	mov	r1, r3
 80110ec:	4610      	mov	r0, r2
 80110ee:	f7fd ff42 	bl	800ef76 <vListInsert>
}
 80110f2:	e010      	b.n	8011116 <prvAddCurrentTaskToDelayedList+0xa6>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80110f4:	4b0f      	ldr	r3, [pc, #60]	; (8011134 <prvAddCurrentTaskToDelayedList+0xc4>)
 80110f6:	681a      	ldr	r2, [r3, #0]
 80110f8:	4b0a      	ldr	r3, [pc, #40]	; (8011124 <prvAddCurrentTaskToDelayedList+0xb4>)
 80110fa:	681b      	ldr	r3, [r3, #0]
 80110fc:	3304      	adds	r3, #4
 80110fe:	4619      	mov	r1, r3
 8011100:	4610      	mov	r0, r2
 8011102:	f7fd ff38 	bl	800ef76 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 8011106:	4b0c      	ldr	r3, [pc, #48]	; (8011138 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011108:	681b      	ldr	r3, [r3, #0]
 801110a:	68ba      	ldr	r2, [r7, #8]
 801110c:	429a      	cmp	r2, r3
 801110e:	d202      	bcs.n	8011116 <prvAddCurrentTaskToDelayedList+0xa6>
					xNextTaskUnblockTime = xTimeToWake;
 8011110:	4a09      	ldr	r2, [pc, #36]	; (8011138 <prvAddCurrentTaskToDelayedList+0xc8>)
 8011112:	68bb      	ldr	r3, [r7, #8]
 8011114:	6013      	str	r3, [r2, #0]
}
 8011116:	bf00      	nop
 8011118:	3710      	adds	r7, #16
 801111a:	46bd      	mov	sp, r7
 801111c:	bd80      	pop	{r7, pc}
 801111e:	bf00      	nop
 8011120:	20006070 	.word	0x20006070
 8011124:	20005f6c 	.word	0x20005f6c
 8011128:	20006074 	.word	0x20006074
 801112c:	20006058 	.word	0x20006058
 8011130:	20006028 	.word	0x20006028
 8011134:	20006024 	.word	0x20006024
 8011138:	2000608c 	.word	0x2000608c

0801113c <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 801113c:	b480      	push	{r7}
 801113e:	b085      	sub	sp, #20
 8011140:	af00      	add	r7, sp, #0
 8011142:	60f8      	str	r0, [r7, #12]
 8011144:	60b9      	str	r1, [r7, #8]
 8011146:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8011148:	68fb      	ldr	r3, [r7, #12]
 801114a:	3b04      	subs	r3, #4
 801114c:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 801114e:	68fb      	ldr	r3, [r7, #12]
 8011150:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8011154:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	3b04      	subs	r3, #4
 801115a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 801115c:	68bb      	ldr	r3, [r7, #8]
 801115e:	f023 0201 	bic.w	r2, r3, #1
 8011162:	68fb      	ldr	r3, [r7, #12]
 8011164:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8011166:	68fb      	ldr	r3, [r7, #12]
 8011168:	3b04      	subs	r3, #4
 801116a:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 801116c:	4a0c      	ldr	r2, [pc, #48]	; (80111a0 <pxPortInitialiseStack+0x64>)
 801116e:	68fb      	ldr	r3, [r7, #12]
 8011170:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8011172:	68fb      	ldr	r3, [r7, #12]
 8011174:	3b14      	subs	r3, #20
 8011176:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8011178:	687a      	ldr	r2, [r7, #4]
 801117a:	68fb      	ldr	r3, [r7, #12]
 801117c:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 801117e:	68fb      	ldr	r3, [r7, #12]
 8011180:	3b04      	subs	r3, #4
 8011182:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8011184:	68fb      	ldr	r3, [r7, #12]
 8011186:	f06f 0202 	mvn.w	r2, #2
 801118a:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 801118c:	68fb      	ldr	r3, [r7, #12]
 801118e:	3b20      	subs	r3, #32
 8011190:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8011192:	68fb      	ldr	r3, [r7, #12]
}
 8011194:	4618      	mov	r0, r3
 8011196:	3714      	adds	r7, #20
 8011198:	46bd      	mov	sp, r7
 801119a:	f85d 7b04 	ldr.w	r7, [sp], #4
 801119e:	4770      	bx	lr
 80111a0:	080111a5 	.word	0x080111a5

080111a4 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 80111a4:	b480      	push	{r7}
 80111a6:	b085      	sub	sp, #20
 80111a8:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 80111aa:	2300      	movs	r3, #0
 80111ac:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 80111ae:	4b14      	ldr	r3, [pc, #80]	; (8011200 <prvTaskExitError+0x5c>)
 80111b0:	681b      	ldr	r3, [r3, #0]
 80111b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80111b6:	d00c      	beq.n	80111d2 <prvTaskExitError+0x2e>
	__asm volatile
 80111b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111bc:	b672      	cpsid	i
 80111be:	f383 8811 	msr	BASEPRI, r3
 80111c2:	f3bf 8f6f 	isb	sy
 80111c6:	f3bf 8f4f 	dsb	sy
 80111ca:	b662      	cpsie	i
 80111cc:	60fb      	str	r3, [r7, #12]
}
 80111ce:	bf00      	nop
 80111d0:	e7fe      	b.n	80111d0 <prvTaskExitError+0x2c>
	__asm volatile
 80111d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80111d6:	b672      	cpsid	i
 80111d8:	f383 8811 	msr	BASEPRI, r3
 80111dc:	f3bf 8f6f 	isb	sy
 80111e0:	f3bf 8f4f 	dsb	sy
 80111e4:	b662      	cpsie	i
 80111e6:	60bb      	str	r3, [r7, #8]
}
 80111e8:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 80111ea:	bf00      	nop
 80111ec:	687b      	ldr	r3, [r7, #4]
 80111ee:	2b00      	cmp	r3, #0
 80111f0:	d0fc      	beq.n	80111ec <prvTaskExitError+0x48>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 80111f2:	bf00      	nop
 80111f4:	bf00      	nop
 80111f6:	3714      	adds	r7, #20
 80111f8:	46bd      	mov	sp, r7
 80111fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80111fe:	4770      	bx	lr
 8011200:	20000020 	.word	0x20000020
	...

08011210 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8011210:	4b07      	ldr	r3, [pc, #28]	; (8011230 <pxCurrentTCBConst2>)
 8011212:	6819      	ldr	r1, [r3, #0]
 8011214:	6808      	ldr	r0, [r1, #0]
 8011216:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801121a:	f380 8809 	msr	PSP, r0
 801121e:	f3bf 8f6f 	isb	sy
 8011222:	f04f 0000 	mov.w	r0, #0
 8011226:	f380 8811 	msr	BASEPRI, r0
 801122a:	4770      	bx	lr
 801122c:	f3af 8000 	nop.w

08011230 <pxCurrentTCBConst2>:
 8011230:	20005f6c 	.word	0x20005f6c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8011234:	bf00      	nop
 8011236:	bf00      	nop

08011238 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8011238:	4808      	ldr	r0, [pc, #32]	; (801125c <prvPortStartFirstTask+0x24>)
 801123a:	6800      	ldr	r0, [r0, #0]
 801123c:	6800      	ldr	r0, [r0, #0]
 801123e:	f380 8808 	msr	MSP, r0
 8011242:	f04f 0000 	mov.w	r0, #0
 8011246:	f380 8814 	msr	CONTROL, r0
 801124a:	b662      	cpsie	i
 801124c:	b661      	cpsie	f
 801124e:	f3bf 8f4f 	dsb	sy
 8011252:	f3bf 8f6f 	isb	sy
 8011256:	df00      	svc	0
 8011258:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 801125a:	bf00      	nop
 801125c:	e000ed08 	.word	0xe000ed08

08011260 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8011260:	b580      	push	{r7, lr}
 8011262:	b084      	sub	sp, #16
 8011264:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8011266:	4b37      	ldr	r3, [pc, #220]	; (8011344 <xPortStartScheduler+0xe4>)
 8011268:	60fb      	str	r3, [r7, #12]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 801126a:	68fb      	ldr	r3, [r7, #12]
 801126c:	781b      	ldrb	r3, [r3, #0]
 801126e:	b2db      	uxtb	r3, r3
 8011270:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8011272:	68fb      	ldr	r3, [r7, #12]
 8011274:	22ff      	movs	r2, #255	; 0xff
 8011276:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8011278:	68fb      	ldr	r3, [r7, #12]
 801127a:	781b      	ldrb	r3, [r3, #0]
 801127c:	b2db      	uxtb	r3, r3
 801127e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8011280:	78fb      	ldrb	r3, [r7, #3]
 8011282:	b2db      	uxtb	r3, r3
 8011284:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8011288:	b2da      	uxtb	r2, r3
 801128a:	4b2f      	ldr	r3, [pc, #188]	; (8011348 <xPortStartScheduler+0xe8>)
 801128c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 801128e:	4b2f      	ldr	r3, [pc, #188]	; (801134c <xPortStartScheduler+0xec>)
 8011290:	2207      	movs	r2, #7
 8011292:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8011294:	e009      	b.n	80112aa <xPortStartScheduler+0x4a>
		{
			ulMaxPRIGROUPValue--;
 8011296:	4b2d      	ldr	r3, [pc, #180]	; (801134c <xPortStartScheduler+0xec>)
 8011298:	681b      	ldr	r3, [r3, #0]
 801129a:	3b01      	subs	r3, #1
 801129c:	4a2b      	ldr	r2, [pc, #172]	; (801134c <xPortStartScheduler+0xec>)
 801129e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 80112a0:	78fb      	ldrb	r3, [r7, #3]
 80112a2:	b2db      	uxtb	r3, r3
 80112a4:	005b      	lsls	r3, r3, #1
 80112a6:	b2db      	uxtb	r3, r3
 80112a8:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 80112aa:	78fb      	ldrb	r3, [r7, #3]
 80112ac:	b2db      	uxtb	r3, r3
 80112ae:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80112b2:	2b80      	cmp	r3, #128	; 0x80
 80112b4:	d0ef      	beq.n	8011296 <xPortStartScheduler+0x36>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 80112b6:	4b25      	ldr	r3, [pc, #148]	; (801134c <xPortStartScheduler+0xec>)
 80112b8:	681b      	ldr	r3, [r3, #0]
 80112ba:	f1c3 0307 	rsb	r3, r3, #7
 80112be:	2b04      	cmp	r3, #4
 80112c0:	d00c      	beq.n	80112dc <xPortStartScheduler+0x7c>
	__asm volatile
 80112c2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80112c6:	b672      	cpsid	i
 80112c8:	f383 8811 	msr	BASEPRI, r3
 80112cc:	f3bf 8f6f 	isb	sy
 80112d0:	f3bf 8f4f 	dsb	sy
 80112d4:	b662      	cpsie	i
 80112d6:	60bb      	str	r3, [r7, #8]
}
 80112d8:	bf00      	nop
 80112da:	e7fe      	b.n	80112da <xPortStartScheduler+0x7a>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 80112dc:	4b1b      	ldr	r3, [pc, #108]	; (801134c <xPortStartScheduler+0xec>)
 80112de:	681b      	ldr	r3, [r3, #0]
 80112e0:	021b      	lsls	r3, r3, #8
 80112e2:	4a1a      	ldr	r2, [pc, #104]	; (801134c <xPortStartScheduler+0xec>)
 80112e4:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 80112e6:	4b19      	ldr	r3, [pc, #100]	; (801134c <xPortStartScheduler+0xec>)
 80112e8:	681b      	ldr	r3, [r3, #0]
 80112ea:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 80112ee:	4a17      	ldr	r2, [pc, #92]	; (801134c <xPortStartScheduler+0xec>)
 80112f0:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 80112f2:	687b      	ldr	r3, [r7, #4]
 80112f4:	b2da      	uxtb	r2, r3
 80112f6:	68fb      	ldr	r3, [r7, #12]
 80112f8:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 80112fa:	4b15      	ldr	r3, [pc, #84]	; (8011350 <xPortStartScheduler+0xf0>)
 80112fc:	681b      	ldr	r3, [r3, #0]
 80112fe:	4a14      	ldr	r2, [pc, #80]	; (8011350 <xPortStartScheduler+0xf0>)
 8011300:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8011304:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8011306:	4b12      	ldr	r3, [pc, #72]	; (8011350 <xPortStartScheduler+0xf0>)
 8011308:	681b      	ldr	r3, [r3, #0]
 801130a:	4a11      	ldr	r2, [pc, #68]	; (8011350 <xPortStartScheduler+0xf0>)
 801130c:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8011310:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8011312:	f000 f8dd 	bl	80114d0 <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8011316:	4b0f      	ldr	r3, [pc, #60]	; (8011354 <xPortStartScheduler+0xf4>)
 8011318:	2200      	movs	r2, #0
 801131a:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 801131c:	f000 f8fc 	bl	8011518 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8011320:	4b0d      	ldr	r3, [pc, #52]	; (8011358 <xPortStartScheduler+0xf8>)
 8011322:	681b      	ldr	r3, [r3, #0]
 8011324:	4a0c      	ldr	r2, [pc, #48]	; (8011358 <xPortStartScheduler+0xf8>)
 8011326:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 801132a:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 801132c:	f7ff ff84 	bl	8011238 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8011330:	f7ff fa72 	bl	8010818 <vTaskSwitchContext>
	prvTaskExitError();
 8011334:	f7ff ff36 	bl	80111a4 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8011338:	2300      	movs	r3, #0
}
 801133a:	4618      	mov	r0, r3
 801133c:	3710      	adds	r7, #16
 801133e:	46bd      	mov	sp, r7
 8011340:	bd80      	pop	{r7, pc}
 8011342:	bf00      	nop
 8011344:	e000e400 	.word	0xe000e400
 8011348:	20006098 	.word	0x20006098
 801134c:	2000609c 	.word	0x2000609c
 8011350:	e000ed20 	.word	0xe000ed20
 8011354:	20000020 	.word	0x20000020
 8011358:	e000ef34 	.word	0xe000ef34

0801135c <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 801135c:	b480      	push	{r7}
 801135e:	b083      	sub	sp, #12
 8011360:	af00      	add	r7, sp, #0
	__asm volatile
 8011362:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011366:	b672      	cpsid	i
 8011368:	f383 8811 	msr	BASEPRI, r3
 801136c:	f3bf 8f6f 	isb	sy
 8011370:	f3bf 8f4f 	dsb	sy
 8011374:	b662      	cpsie	i
 8011376:	607b      	str	r3, [r7, #4]
}
 8011378:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 801137a:	4b10      	ldr	r3, [pc, #64]	; (80113bc <vPortEnterCritical+0x60>)
 801137c:	681b      	ldr	r3, [r3, #0]
 801137e:	3301      	adds	r3, #1
 8011380:	4a0e      	ldr	r2, [pc, #56]	; (80113bc <vPortEnterCritical+0x60>)
 8011382:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8011384:	4b0d      	ldr	r3, [pc, #52]	; (80113bc <vPortEnterCritical+0x60>)
 8011386:	681b      	ldr	r3, [r3, #0]
 8011388:	2b01      	cmp	r3, #1
 801138a:	d111      	bne.n	80113b0 <vPortEnterCritical+0x54>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 801138c:	4b0c      	ldr	r3, [pc, #48]	; (80113c0 <vPortEnterCritical+0x64>)
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	b2db      	uxtb	r3, r3
 8011392:	2b00      	cmp	r3, #0
 8011394:	d00c      	beq.n	80113b0 <vPortEnterCritical+0x54>
	__asm volatile
 8011396:	f04f 0350 	mov.w	r3, #80	; 0x50
 801139a:	b672      	cpsid	i
 801139c:	f383 8811 	msr	BASEPRI, r3
 80113a0:	f3bf 8f6f 	isb	sy
 80113a4:	f3bf 8f4f 	dsb	sy
 80113a8:	b662      	cpsie	i
 80113aa:	603b      	str	r3, [r7, #0]
}
 80113ac:	bf00      	nop
 80113ae:	e7fe      	b.n	80113ae <vPortEnterCritical+0x52>
	}
}
 80113b0:	bf00      	nop
 80113b2:	370c      	adds	r7, #12
 80113b4:	46bd      	mov	sp, r7
 80113b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80113ba:	4770      	bx	lr
 80113bc:	20000020 	.word	0x20000020
 80113c0:	e000ed04 	.word	0xe000ed04

080113c4 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 80113c4:	b480      	push	{r7}
 80113c6:	b083      	sub	sp, #12
 80113c8:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 80113ca:	4b13      	ldr	r3, [pc, #76]	; (8011418 <vPortExitCritical+0x54>)
 80113cc:	681b      	ldr	r3, [r3, #0]
 80113ce:	2b00      	cmp	r3, #0
 80113d0:	d10c      	bne.n	80113ec <vPortExitCritical+0x28>
	__asm volatile
 80113d2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80113d6:	b672      	cpsid	i
 80113d8:	f383 8811 	msr	BASEPRI, r3
 80113dc:	f3bf 8f6f 	isb	sy
 80113e0:	f3bf 8f4f 	dsb	sy
 80113e4:	b662      	cpsie	i
 80113e6:	607b      	str	r3, [r7, #4]
}
 80113e8:	bf00      	nop
 80113ea:	e7fe      	b.n	80113ea <vPortExitCritical+0x26>
	uxCriticalNesting--;
 80113ec:	4b0a      	ldr	r3, [pc, #40]	; (8011418 <vPortExitCritical+0x54>)
 80113ee:	681b      	ldr	r3, [r3, #0]
 80113f0:	3b01      	subs	r3, #1
 80113f2:	4a09      	ldr	r2, [pc, #36]	; (8011418 <vPortExitCritical+0x54>)
 80113f4:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 80113f6:	4b08      	ldr	r3, [pc, #32]	; (8011418 <vPortExitCritical+0x54>)
 80113f8:	681b      	ldr	r3, [r3, #0]
 80113fa:	2b00      	cmp	r3, #0
 80113fc:	d105      	bne.n	801140a <vPortExitCritical+0x46>
 80113fe:	2300      	movs	r3, #0
 8011400:	603b      	str	r3, [r7, #0]
	__asm volatile
 8011402:	683b      	ldr	r3, [r7, #0]
 8011404:	f383 8811 	msr	BASEPRI, r3
}
 8011408:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 801140a:	bf00      	nop
 801140c:	370c      	adds	r7, #12
 801140e:	46bd      	mov	sp, r7
 8011410:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011414:	4770      	bx	lr
 8011416:	bf00      	nop
 8011418:	20000020 	.word	0x20000020
 801141c:	00000000 	.word	0x00000000

08011420 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 8011420:	f3ef 8009 	mrs	r0, PSP
 8011424:	f3bf 8f6f 	isb	sy
 8011428:	4b15      	ldr	r3, [pc, #84]	; (8011480 <pxCurrentTCBConst>)
 801142a:	681a      	ldr	r2, [r3, #0]
 801142c:	f01e 0f10 	tst.w	lr, #16
 8011430:	bf08      	it	eq
 8011432:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 8011436:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801143a:	6010      	str	r0, [r2, #0]
 801143c:	e92d 0009 	stmdb	sp!, {r0, r3}
 8011440:	f04f 0050 	mov.w	r0, #80	; 0x50
 8011444:	b672      	cpsid	i
 8011446:	f380 8811 	msr	BASEPRI, r0
 801144a:	f3bf 8f4f 	dsb	sy
 801144e:	f3bf 8f6f 	isb	sy
 8011452:	b662      	cpsie	i
 8011454:	f7ff f9e0 	bl	8010818 <vTaskSwitchContext>
 8011458:	f04f 0000 	mov.w	r0, #0
 801145c:	f380 8811 	msr	BASEPRI, r0
 8011460:	bc09      	pop	{r0, r3}
 8011462:	6819      	ldr	r1, [r3, #0]
 8011464:	6808      	ldr	r0, [r1, #0]
 8011466:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801146a:	f01e 0f10 	tst.w	lr, #16
 801146e:	bf08      	it	eq
 8011470:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8011474:	f380 8809 	msr	PSP, r0
 8011478:	f3bf 8f6f 	isb	sy
 801147c:	4770      	bx	lr
 801147e:	bf00      	nop

08011480 <pxCurrentTCBConst>:
 8011480:	20005f6c 	.word	0x20005f6c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8011484:	bf00      	nop
 8011486:	bf00      	nop

08011488 <SysTick_Handler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8011488:	b580      	push	{r7, lr}
 801148a:	b082      	sub	sp, #8
 801148c:	af00      	add	r7, sp, #0
	__asm volatile
 801148e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011492:	b672      	cpsid	i
 8011494:	f383 8811 	msr	BASEPRI, r3
 8011498:	f3bf 8f6f 	isb	sy
 801149c:	f3bf 8f4f 	dsb	sy
 80114a0:	b662      	cpsie	i
 80114a2:	607b      	str	r3, [r7, #4]
}
 80114a4:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 80114a6:	f7ff f8fd 	bl	80106a4 <xTaskIncrementTick>
 80114aa:	4603      	mov	r3, r0
 80114ac:	2b00      	cmp	r3, #0
 80114ae:	d003      	beq.n	80114b8 <SysTick_Handler+0x30>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 80114b0:	4b06      	ldr	r3, [pc, #24]	; (80114cc <SysTick_Handler+0x44>)
 80114b2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80114b6:	601a      	str	r2, [r3, #0]
 80114b8:	2300      	movs	r3, #0
 80114ba:	603b      	str	r3, [r7, #0]
	__asm volatile
 80114bc:	683b      	ldr	r3, [r7, #0]
 80114be:	f383 8811 	msr	BASEPRI, r3
}
 80114c2:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 80114c4:	bf00      	nop
 80114c6:	3708      	adds	r7, #8
 80114c8:	46bd      	mov	sp, r7
 80114ca:	bd80      	pop	{r7, pc}
 80114cc:	e000ed04 	.word	0xe000ed04

080114d0 <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 80114d0:	b480      	push	{r7}
 80114d2:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 80114d4:	4b0b      	ldr	r3, [pc, #44]	; (8011504 <vPortSetupTimerInterrupt+0x34>)
 80114d6:	2200      	movs	r2, #0
 80114d8:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 80114da:	4b0b      	ldr	r3, [pc, #44]	; (8011508 <vPortSetupTimerInterrupt+0x38>)
 80114dc:	2200      	movs	r2, #0
 80114de:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 80114e0:	4b0a      	ldr	r3, [pc, #40]	; (801150c <vPortSetupTimerInterrupt+0x3c>)
 80114e2:	681b      	ldr	r3, [r3, #0]
 80114e4:	4a0a      	ldr	r2, [pc, #40]	; (8011510 <vPortSetupTimerInterrupt+0x40>)
 80114e6:	fba2 2303 	umull	r2, r3, r2, r3
 80114ea:	099b      	lsrs	r3, r3, #6
 80114ec:	4a09      	ldr	r2, [pc, #36]	; (8011514 <vPortSetupTimerInterrupt+0x44>)
 80114ee:	3b01      	subs	r3, #1
 80114f0:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 80114f2:	4b04      	ldr	r3, [pc, #16]	; (8011504 <vPortSetupTimerInterrupt+0x34>)
 80114f4:	2207      	movs	r2, #7
 80114f6:	601a      	str	r2, [r3, #0]
}
 80114f8:	bf00      	nop
 80114fa:	46bd      	mov	sp, r7
 80114fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011500:	4770      	bx	lr
 8011502:	bf00      	nop
 8011504:	e000e010 	.word	0xe000e010
 8011508:	e000e018 	.word	0xe000e018
 801150c:	20000000 	.word	0x20000000
 8011510:	10624dd3 	.word	0x10624dd3
 8011514:	e000e014 	.word	0xe000e014

08011518 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 8011518:	f8df 000c 	ldr.w	r0, [pc, #12]	; 8011528 <vPortEnableVFP+0x10>
 801151c:	6801      	ldr	r1, [r0, #0]
 801151e:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8011522:	6001      	str	r1, [r0, #0]
 8011524:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 8011526:	bf00      	nop
 8011528:	e000ed88 	.word	0xe000ed88

0801152c <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 801152c:	b480      	push	{r7}
 801152e:	b085      	sub	sp, #20
 8011530:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 8011532:	f3ef 8305 	mrs	r3, IPSR
 8011536:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 8011538:	68fb      	ldr	r3, [r7, #12]
 801153a:	2b0f      	cmp	r3, #15
 801153c:	d916      	bls.n	801156c <vPortValidateInterruptPriority+0x40>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 801153e:	4a19      	ldr	r2, [pc, #100]	; (80115a4 <vPortValidateInterruptPriority+0x78>)
 8011540:	68fb      	ldr	r3, [r7, #12]
 8011542:	4413      	add	r3, r2
 8011544:	781b      	ldrb	r3, [r3, #0]
 8011546:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 8011548:	4b17      	ldr	r3, [pc, #92]	; (80115a8 <vPortValidateInterruptPriority+0x7c>)
 801154a:	781b      	ldrb	r3, [r3, #0]
 801154c:	7afa      	ldrb	r2, [r7, #11]
 801154e:	429a      	cmp	r2, r3
 8011550:	d20c      	bcs.n	801156c <vPortValidateInterruptPriority+0x40>
	__asm volatile
 8011552:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011556:	b672      	cpsid	i
 8011558:	f383 8811 	msr	BASEPRI, r3
 801155c:	f3bf 8f6f 	isb	sy
 8011560:	f3bf 8f4f 	dsb	sy
 8011564:	b662      	cpsie	i
 8011566:	607b      	str	r3, [r7, #4]
}
 8011568:	bf00      	nop
 801156a:	e7fe      	b.n	801156a <vPortValidateInterruptPriority+0x3e>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 801156c:	4b0f      	ldr	r3, [pc, #60]	; (80115ac <vPortValidateInterruptPriority+0x80>)
 801156e:	681b      	ldr	r3, [r3, #0]
 8011570:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 8011574:	4b0e      	ldr	r3, [pc, #56]	; (80115b0 <vPortValidateInterruptPriority+0x84>)
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	429a      	cmp	r2, r3
 801157a:	d90c      	bls.n	8011596 <vPortValidateInterruptPriority+0x6a>
	__asm volatile
 801157c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011580:	b672      	cpsid	i
 8011582:	f383 8811 	msr	BASEPRI, r3
 8011586:	f3bf 8f6f 	isb	sy
 801158a:	f3bf 8f4f 	dsb	sy
 801158e:	b662      	cpsie	i
 8011590:	603b      	str	r3, [r7, #0]
}
 8011592:	bf00      	nop
 8011594:	e7fe      	b.n	8011594 <vPortValidateInterruptPriority+0x68>
	}
 8011596:	bf00      	nop
 8011598:	3714      	adds	r7, #20
 801159a:	46bd      	mov	sp, r7
 801159c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80115a0:	4770      	bx	lr
 80115a2:	bf00      	nop
 80115a4:	e000e3f0 	.word	0xe000e3f0
 80115a8:	20006098 	.word	0x20006098
 80115ac:	e000ed0c 	.word	0xe000ed0c
 80115b0:	2000609c 	.word	0x2000609c

080115b4 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 80115b4:	b580      	push	{r7, lr}
 80115b6:	b08a      	sub	sp, #40	; 0x28
 80115b8:	af00      	add	r7, sp, #0
 80115ba:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 80115bc:	2300      	movs	r3, #0
 80115be:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 80115c0:	f7fe ffa2 	bl	8010508 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 80115c4:	4b5b      	ldr	r3, [pc, #364]	; (8011734 <pvPortMalloc+0x180>)
 80115c6:	681b      	ldr	r3, [r3, #0]
 80115c8:	2b00      	cmp	r3, #0
 80115ca:	d101      	bne.n	80115d0 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 80115cc:	f000 f91a 	bl	8011804 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 80115d0:	4b59      	ldr	r3, [pc, #356]	; (8011738 <pvPortMalloc+0x184>)
 80115d2:	681a      	ldr	r2, [r3, #0]
 80115d4:	687b      	ldr	r3, [r7, #4]
 80115d6:	4013      	ands	r3, r2
 80115d8:	2b00      	cmp	r3, #0
 80115da:	f040 8092 	bne.w	8011702 <pvPortMalloc+0x14e>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 80115de:	687b      	ldr	r3, [r7, #4]
 80115e0:	2b00      	cmp	r3, #0
 80115e2:	d01f      	beq.n	8011624 <pvPortMalloc+0x70>
			{
				xWantedSize += xHeapStructSize;
 80115e4:	2208      	movs	r2, #8
 80115e6:	687b      	ldr	r3, [r7, #4]
 80115e8:	4413      	add	r3, r2
 80115ea:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 80115ec:	687b      	ldr	r3, [r7, #4]
 80115ee:	f003 0307 	and.w	r3, r3, #7
 80115f2:	2b00      	cmp	r3, #0
 80115f4:	d016      	beq.n	8011624 <pvPortMalloc+0x70>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	f023 0307 	bic.w	r3, r3, #7
 80115fc:	3308      	adds	r3, #8
 80115fe:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	f003 0307 	and.w	r3, r3, #7
 8011606:	2b00      	cmp	r3, #0
 8011608:	d00c      	beq.n	8011624 <pvPortMalloc+0x70>
	__asm volatile
 801160a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801160e:	b672      	cpsid	i
 8011610:	f383 8811 	msr	BASEPRI, r3
 8011614:	f3bf 8f6f 	isb	sy
 8011618:	f3bf 8f4f 	dsb	sy
 801161c:	b662      	cpsie	i
 801161e:	617b      	str	r3, [r7, #20]
}
 8011620:	bf00      	nop
 8011622:	e7fe      	b.n	8011622 <pvPortMalloc+0x6e>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	2b00      	cmp	r3, #0
 8011628:	d06b      	beq.n	8011702 <pvPortMalloc+0x14e>
 801162a:	4b44      	ldr	r3, [pc, #272]	; (801173c <pvPortMalloc+0x188>)
 801162c:	681b      	ldr	r3, [r3, #0]
 801162e:	687a      	ldr	r2, [r7, #4]
 8011630:	429a      	cmp	r2, r3
 8011632:	d866      	bhi.n	8011702 <pvPortMalloc+0x14e>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 8011634:	4b42      	ldr	r3, [pc, #264]	; (8011740 <pvPortMalloc+0x18c>)
 8011636:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 8011638:	4b41      	ldr	r3, [pc, #260]	; (8011740 <pvPortMalloc+0x18c>)
 801163a:	681b      	ldr	r3, [r3, #0]
 801163c:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801163e:	e004      	b.n	801164a <pvPortMalloc+0x96>
				{
					pxPreviousBlock = pxBlock;
 8011640:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011642:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 8011644:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011646:	681b      	ldr	r3, [r3, #0]
 8011648:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 801164a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801164c:	685b      	ldr	r3, [r3, #4]
 801164e:	687a      	ldr	r2, [r7, #4]
 8011650:	429a      	cmp	r2, r3
 8011652:	d903      	bls.n	801165c <pvPortMalloc+0xa8>
 8011654:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011656:	681b      	ldr	r3, [r3, #0]
 8011658:	2b00      	cmp	r3, #0
 801165a:	d1f1      	bne.n	8011640 <pvPortMalloc+0x8c>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 801165c:	4b35      	ldr	r3, [pc, #212]	; (8011734 <pvPortMalloc+0x180>)
 801165e:	681b      	ldr	r3, [r3, #0]
 8011660:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8011662:	429a      	cmp	r2, r3
 8011664:	d04d      	beq.n	8011702 <pvPortMalloc+0x14e>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 8011666:	6a3b      	ldr	r3, [r7, #32]
 8011668:	681b      	ldr	r3, [r3, #0]
 801166a:	2208      	movs	r2, #8
 801166c:	4413      	add	r3, r2
 801166e:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 8011670:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011672:	681a      	ldr	r2, [r3, #0]
 8011674:	6a3b      	ldr	r3, [r7, #32]
 8011676:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 8011678:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801167a:	685a      	ldr	r2, [r3, #4]
 801167c:	687b      	ldr	r3, [r7, #4]
 801167e:	1ad2      	subs	r2, r2, r3
 8011680:	2308      	movs	r3, #8
 8011682:	005b      	lsls	r3, r3, #1
 8011684:	429a      	cmp	r2, r3
 8011686:	d921      	bls.n	80116cc <pvPortMalloc+0x118>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8011688:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801168a:	687b      	ldr	r3, [r7, #4]
 801168c:	4413      	add	r3, r2
 801168e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8011690:	69bb      	ldr	r3, [r7, #24]
 8011692:	f003 0307 	and.w	r3, r3, #7
 8011696:	2b00      	cmp	r3, #0
 8011698:	d00c      	beq.n	80116b4 <pvPortMalloc+0x100>
	__asm volatile
 801169a:	f04f 0350 	mov.w	r3, #80	; 0x50
 801169e:	b672      	cpsid	i
 80116a0:	f383 8811 	msr	BASEPRI, r3
 80116a4:	f3bf 8f6f 	isb	sy
 80116a8:	f3bf 8f4f 	dsb	sy
 80116ac:	b662      	cpsie	i
 80116ae:	613b      	str	r3, [r7, #16]
}
 80116b0:	bf00      	nop
 80116b2:	e7fe      	b.n	80116b2 <pvPortMalloc+0xfe>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 80116b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116b6:	685a      	ldr	r2, [r3, #4]
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	1ad2      	subs	r2, r2, r3
 80116bc:	69bb      	ldr	r3, [r7, #24]
 80116be:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 80116c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116c2:	687a      	ldr	r2, [r7, #4]
 80116c4:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 80116c6:	69b8      	ldr	r0, [r7, #24]
 80116c8:	f000 f900 	bl	80118cc <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 80116cc:	4b1b      	ldr	r3, [pc, #108]	; (801173c <pvPortMalloc+0x188>)
 80116ce:	681a      	ldr	r2, [r3, #0]
 80116d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116d2:	685b      	ldr	r3, [r3, #4]
 80116d4:	1ad3      	subs	r3, r2, r3
 80116d6:	4a19      	ldr	r2, [pc, #100]	; (801173c <pvPortMalloc+0x188>)
 80116d8:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 80116da:	4b18      	ldr	r3, [pc, #96]	; (801173c <pvPortMalloc+0x188>)
 80116dc:	681a      	ldr	r2, [r3, #0]
 80116de:	4b19      	ldr	r3, [pc, #100]	; (8011744 <pvPortMalloc+0x190>)
 80116e0:	681b      	ldr	r3, [r3, #0]
 80116e2:	429a      	cmp	r2, r3
 80116e4:	d203      	bcs.n	80116ee <pvPortMalloc+0x13a>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 80116e6:	4b15      	ldr	r3, [pc, #84]	; (801173c <pvPortMalloc+0x188>)
 80116e8:	681b      	ldr	r3, [r3, #0]
 80116ea:	4a16      	ldr	r2, [pc, #88]	; (8011744 <pvPortMalloc+0x190>)
 80116ec:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 80116ee:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116f0:	685a      	ldr	r2, [r3, #4]
 80116f2:	4b11      	ldr	r3, [pc, #68]	; (8011738 <pvPortMalloc+0x184>)
 80116f4:	681b      	ldr	r3, [r3, #0]
 80116f6:	431a      	orrs	r2, r3
 80116f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116fa:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 80116fc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80116fe:	2200      	movs	r2, #0
 8011700:	601a      	str	r2, [r3, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8011702:	f7fe ff0f 	bl	8010524 <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 8011706:	69fb      	ldr	r3, [r7, #28]
 8011708:	f003 0307 	and.w	r3, r3, #7
 801170c:	2b00      	cmp	r3, #0
 801170e:	d00c      	beq.n	801172a <pvPortMalloc+0x176>
	__asm volatile
 8011710:	f04f 0350 	mov.w	r3, #80	; 0x50
 8011714:	b672      	cpsid	i
 8011716:	f383 8811 	msr	BASEPRI, r3
 801171a:	f3bf 8f6f 	isb	sy
 801171e:	f3bf 8f4f 	dsb	sy
 8011722:	b662      	cpsie	i
 8011724:	60fb      	str	r3, [r7, #12]
}
 8011726:	bf00      	nop
 8011728:	e7fe      	b.n	8011728 <pvPortMalloc+0x174>
	return pvReturn;
 801172a:	69fb      	ldr	r3, [r7, #28]
}
 801172c:	4618      	mov	r0, r3
 801172e:	3728      	adds	r7, #40	; 0x28
 8011730:	46bd      	mov	sp, r7
 8011732:	bd80      	pop	{r7, pc}
 8011734:	2001e748 	.word	0x2001e748
 8011738:	2001e754 	.word	0x2001e754
 801173c:	2001e74c 	.word	0x2001e74c
 8011740:	2001e740 	.word	0x2001e740
 8011744:	2001e750 	.word	0x2001e750

08011748 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 8011748:	b580      	push	{r7, lr}
 801174a:	b086      	sub	sp, #24
 801174c:	af00      	add	r7, sp, #0
 801174e:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 8011750:	687b      	ldr	r3, [r7, #4]
 8011752:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 8011754:	687b      	ldr	r3, [r7, #4]
 8011756:	2b00      	cmp	r3, #0
 8011758:	d04c      	beq.n	80117f4 <vPortFree+0xac>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 801175a:	2308      	movs	r3, #8
 801175c:	425b      	negs	r3, r3
 801175e:	697a      	ldr	r2, [r7, #20]
 8011760:	4413      	add	r3, r2
 8011762:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 8011764:	697b      	ldr	r3, [r7, #20]
 8011766:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 8011768:	693b      	ldr	r3, [r7, #16]
 801176a:	685a      	ldr	r2, [r3, #4]
 801176c:	4b23      	ldr	r3, [pc, #140]	; (80117fc <vPortFree+0xb4>)
 801176e:	681b      	ldr	r3, [r3, #0]
 8011770:	4013      	ands	r3, r2
 8011772:	2b00      	cmp	r3, #0
 8011774:	d10c      	bne.n	8011790 <vPortFree+0x48>
	__asm volatile
 8011776:	f04f 0350 	mov.w	r3, #80	; 0x50
 801177a:	b672      	cpsid	i
 801177c:	f383 8811 	msr	BASEPRI, r3
 8011780:	f3bf 8f6f 	isb	sy
 8011784:	f3bf 8f4f 	dsb	sy
 8011788:	b662      	cpsie	i
 801178a:	60fb      	str	r3, [r7, #12]
}
 801178c:	bf00      	nop
 801178e:	e7fe      	b.n	801178e <vPortFree+0x46>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8011790:	693b      	ldr	r3, [r7, #16]
 8011792:	681b      	ldr	r3, [r3, #0]
 8011794:	2b00      	cmp	r3, #0
 8011796:	d00c      	beq.n	80117b2 <vPortFree+0x6a>
	__asm volatile
 8011798:	f04f 0350 	mov.w	r3, #80	; 0x50
 801179c:	b672      	cpsid	i
 801179e:	f383 8811 	msr	BASEPRI, r3
 80117a2:	f3bf 8f6f 	isb	sy
 80117a6:	f3bf 8f4f 	dsb	sy
 80117aa:	b662      	cpsie	i
 80117ac:	60bb      	str	r3, [r7, #8]
}
 80117ae:	bf00      	nop
 80117b0:	e7fe      	b.n	80117b0 <vPortFree+0x68>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 80117b2:	693b      	ldr	r3, [r7, #16]
 80117b4:	685a      	ldr	r2, [r3, #4]
 80117b6:	4b11      	ldr	r3, [pc, #68]	; (80117fc <vPortFree+0xb4>)
 80117b8:	681b      	ldr	r3, [r3, #0]
 80117ba:	4013      	ands	r3, r2
 80117bc:	2b00      	cmp	r3, #0
 80117be:	d019      	beq.n	80117f4 <vPortFree+0xac>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 80117c0:	693b      	ldr	r3, [r7, #16]
 80117c2:	681b      	ldr	r3, [r3, #0]
 80117c4:	2b00      	cmp	r3, #0
 80117c6:	d115      	bne.n	80117f4 <vPortFree+0xac>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 80117c8:	693b      	ldr	r3, [r7, #16]
 80117ca:	685a      	ldr	r2, [r3, #4]
 80117cc:	4b0b      	ldr	r3, [pc, #44]	; (80117fc <vPortFree+0xb4>)
 80117ce:	681b      	ldr	r3, [r3, #0]
 80117d0:	43db      	mvns	r3, r3
 80117d2:	401a      	ands	r2, r3
 80117d4:	693b      	ldr	r3, [r7, #16]
 80117d6:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 80117d8:	f7fe fe96 	bl	8010508 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 80117dc:	693b      	ldr	r3, [r7, #16]
 80117de:	685a      	ldr	r2, [r3, #4]
 80117e0:	4b07      	ldr	r3, [pc, #28]	; (8011800 <vPortFree+0xb8>)
 80117e2:	681b      	ldr	r3, [r3, #0]
 80117e4:	4413      	add	r3, r2
 80117e6:	4a06      	ldr	r2, [pc, #24]	; (8011800 <vPortFree+0xb8>)
 80117e8:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 80117ea:	6938      	ldr	r0, [r7, #16]
 80117ec:	f000 f86e 	bl	80118cc <prvInsertBlockIntoFreeList>
				}
				( void ) xTaskResumeAll();
 80117f0:	f7fe fe98 	bl	8010524 <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 80117f4:	bf00      	nop
 80117f6:	3718      	adds	r7, #24
 80117f8:	46bd      	mov	sp, r7
 80117fa:	bd80      	pop	{r7, pc}
 80117fc:	2001e754 	.word	0x2001e754
 8011800:	2001e74c 	.word	0x2001e74c

08011804 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8011804:	b480      	push	{r7}
 8011806:	b085      	sub	sp, #20
 8011808:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 801180a:	4b29      	ldr	r3, [pc, #164]	; (80118b0 <prvHeapInit+0xac>)
 801180c:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 801180e:	4b29      	ldr	r3, [pc, #164]	; (80118b4 <prvHeapInit+0xb0>)
 8011810:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 8011812:	68fb      	ldr	r3, [r7, #12]
 8011814:	f003 0307 	and.w	r3, r3, #7
 8011818:	2b00      	cmp	r3, #0
 801181a:	d00c      	beq.n	8011836 <prvHeapInit+0x32>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 801181c:	68fb      	ldr	r3, [r7, #12]
 801181e:	3307      	adds	r3, #7
 8011820:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011822:	68fb      	ldr	r3, [r7, #12]
 8011824:	f023 0307 	bic.w	r3, r3, #7
 8011828:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 801182a:	68ba      	ldr	r2, [r7, #8]
 801182c:	68fb      	ldr	r3, [r7, #12]
 801182e:	1ad3      	subs	r3, r2, r3
 8011830:	4a20      	ldr	r2, [pc, #128]	; (80118b4 <prvHeapInit+0xb0>)
 8011832:	4413      	add	r3, r2
 8011834:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 8011836:	68fb      	ldr	r3, [r7, #12]
 8011838:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 801183a:	4a1f      	ldr	r2, [pc, #124]	; (80118b8 <prvHeapInit+0xb4>)
 801183c:	687b      	ldr	r3, [r7, #4]
 801183e:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 8011840:	4b1d      	ldr	r3, [pc, #116]	; (80118b8 <prvHeapInit+0xb4>)
 8011842:	2200      	movs	r2, #0
 8011844:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 8011846:	687b      	ldr	r3, [r7, #4]
 8011848:	68ba      	ldr	r2, [r7, #8]
 801184a:	4413      	add	r3, r2
 801184c:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 801184e:	2208      	movs	r2, #8
 8011850:	68fb      	ldr	r3, [r7, #12]
 8011852:	1a9b      	subs	r3, r3, r2
 8011854:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 8011856:	68fb      	ldr	r3, [r7, #12]
 8011858:	f023 0307 	bic.w	r3, r3, #7
 801185c:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 801185e:	68fb      	ldr	r3, [r7, #12]
 8011860:	4a16      	ldr	r2, [pc, #88]	; (80118bc <prvHeapInit+0xb8>)
 8011862:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 8011864:	4b15      	ldr	r3, [pc, #84]	; (80118bc <prvHeapInit+0xb8>)
 8011866:	681b      	ldr	r3, [r3, #0]
 8011868:	2200      	movs	r2, #0
 801186a:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 801186c:	4b13      	ldr	r3, [pc, #76]	; (80118bc <prvHeapInit+0xb8>)
 801186e:	681b      	ldr	r3, [r3, #0]
 8011870:	2200      	movs	r2, #0
 8011872:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8011874:	687b      	ldr	r3, [r7, #4]
 8011876:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 8011878:	683b      	ldr	r3, [r7, #0]
 801187a:	68fa      	ldr	r2, [r7, #12]
 801187c:	1ad2      	subs	r2, r2, r3
 801187e:	683b      	ldr	r3, [r7, #0]
 8011880:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8011882:	4b0e      	ldr	r3, [pc, #56]	; (80118bc <prvHeapInit+0xb8>)
 8011884:	681a      	ldr	r2, [r3, #0]
 8011886:	683b      	ldr	r3, [r7, #0]
 8011888:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 801188a:	683b      	ldr	r3, [r7, #0]
 801188c:	685b      	ldr	r3, [r3, #4]
 801188e:	4a0c      	ldr	r2, [pc, #48]	; (80118c0 <prvHeapInit+0xbc>)
 8011890:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8011892:	683b      	ldr	r3, [r7, #0]
 8011894:	685b      	ldr	r3, [r3, #4]
 8011896:	4a0b      	ldr	r2, [pc, #44]	; (80118c4 <prvHeapInit+0xc0>)
 8011898:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 801189a:	4b0b      	ldr	r3, [pc, #44]	; (80118c8 <prvHeapInit+0xc4>)
 801189c:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 80118a0:	601a      	str	r2, [r3, #0]
}
 80118a2:	bf00      	nop
 80118a4:	3714      	adds	r7, #20
 80118a6:	46bd      	mov	sp, r7
 80118a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80118ac:	4770      	bx	lr
 80118ae:	bf00      	nop
 80118b0:	000186a0 	.word	0x000186a0
 80118b4:	200060a0 	.word	0x200060a0
 80118b8:	2001e740 	.word	0x2001e740
 80118bc:	2001e748 	.word	0x2001e748
 80118c0:	2001e750 	.word	0x2001e750
 80118c4:	2001e74c 	.word	0x2001e74c
 80118c8:	2001e754 	.word	0x2001e754

080118cc <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 80118cc:	b480      	push	{r7}
 80118ce:	b085      	sub	sp, #20
 80118d0:	af00      	add	r7, sp, #0
 80118d2:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 80118d4:	4b28      	ldr	r3, [pc, #160]	; (8011978 <prvInsertBlockIntoFreeList+0xac>)
 80118d6:	60fb      	str	r3, [r7, #12]
 80118d8:	e002      	b.n	80118e0 <prvInsertBlockIntoFreeList+0x14>
 80118da:	68fb      	ldr	r3, [r7, #12]
 80118dc:	681b      	ldr	r3, [r3, #0]
 80118de:	60fb      	str	r3, [r7, #12]
 80118e0:	68fb      	ldr	r3, [r7, #12]
 80118e2:	681b      	ldr	r3, [r3, #0]
 80118e4:	687a      	ldr	r2, [r7, #4]
 80118e6:	429a      	cmp	r2, r3
 80118e8:	d8f7      	bhi.n	80118da <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 80118ea:	68fb      	ldr	r3, [r7, #12]
 80118ec:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 80118ee:	68fb      	ldr	r3, [r7, #12]
 80118f0:	685b      	ldr	r3, [r3, #4]
 80118f2:	68ba      	ldr	r2, [r7, #8]
 80118f4:	4413      	add	r3, r2
 80118f6:	687a      	ldr	r2, [r7, #4]
 80118f8:	429a      	cmp	r2, r3
 80118fa:	d108      	bne.n	801190e <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 80118fc:	68fb      	ldr	r3, [r7, #12]
 80118fe:	685a      	ldr	r2, [r3, #4]
 8011900:	687b      	ldr	r3, [r7, #4]
 8011902:	685b      	ldr	r3, [r3, #4]
 8011904:	441a      	add	r2, r3
 8011906:	68fb      	ldr	r3, [r7, #12]
 8011908:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 801190a:	68fb      	ldr	r3, [r7, #12]
 801190c:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 801190e:	687b      	ldr	r3, [r7, #4]
 8011910:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 8011912:	687b      	ldr	r3, [r7, #4]
 8011914:	685b      	ldr	r3, [r3, #4]
 8011916:	68ba      	ldr	r2, [r7, #8]
 8011918:	441a      	add	r2, r3
 801191a:	68fb      	ldr	r3, [r7, #12]
 801191c:	681b      	ldr	r3, [r3, #0]
 801191e:	429a      	cmp	r2, r3
 8011920:	d118      	bne.n	8011954 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 8011922:	68fb      	ldr	r3, [r7, #12]
 8011924:	681a      	ldr	r2, [r3, #0]
 8011926:	4b15      	ldr	r3, [pc, #84]	; (801197c <prvInsertBlockIntoFreeList+0xb0>)
 8011928:	681b      	ldr	r3, [r3, #0]
 801192a:	429a      	cmp	r2, r3
 801192c:	d00d      	beq.n	801194a <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 801192e:	687b      	ldr	r3, [r7, #4]
 8011930:	685a      	ldr	r2, [r3, #4]
 8011932:	68fb      	ldr	r3, [r7, #12]
 8011934:	681b      	ldr	r3, [r3, #0]
 8011936:	685b      	ldr	r3, [r3, #4]
 8011938:	441a      	add	r2, r3
 801193a:	687b      	ldr	r3, [r7, #4]
 801193c:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 801193e:	68fb      	ldr	r3, [r7, #12]
 8011940:	681b      	ldr	r3, [r3, #0]
 8011942:	681a      	ldr	r2, [r3, #0]
 8011944:	687b      	ldr	r3, [r7, #4]
 8011946:	601a      	str	r2, [r3, #0]
 8011948:	e008      	b.n	801195c <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 801194a:	4b0c      	ldr	r3, [pc, #48]	; (801197c <prvInsertBlockIntoFreeList+0xb0>)
 801194c:	681a      	ldr	r2, [r3, #0]
 801194e:	687b      	ldr	r3, [r7, #4]
 8011950:	601a      	str	r2, [r3, #0]
 8011952:	e003      	b.n	801195c <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 8011954:	68fb      	ldr	r3, [r7, #12]
 8011956:	681a      	ldr	r2, [r3, #0]
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 801195c:	68fa      	ldr	r2, [r7, #12]
 801195e:	687b      	ldr	r3, [r7, #4]
 8011960:	429a      	cmp	r2, r3
 8011962:	d002      	beq.n	801196a <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 8011964:	68fb      	ldr	r3, [r7, #12]
 8011966:	687a      	ldr	r2, [r7, #4]
 8011968:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 801196a:	bf00      	nop
 801196c:	3714      	adds	r7, #20
 801196e:	46bd      	mov	sp, r7
 8011970:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011974:	4770      	bx	lr
 8011976:	bf00      	nop
 8011978:	2001e740 	.word	0x2001e740
 801197c:	2001e748 	.word	0x2001e748

08011980 <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 8011980:	b580      	push	{r7, lr}
 8011982:	b084      	sub	sp, #16
 8011984:	af00      	add	r7, sp, #0
 8011986:	6078      	str	r0, [r7, #4]
 8011988:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 801198a:	f007 fae5 	bl	8018f58 <sys_timeouts_sleeptime>
 801198e:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 8011990:	68fb      	ldr	r3, [r7, #12]
 8011992:	f1b3 3fff 	cmp.w	r3, #4294967295
 8011996:	d10b      	bne.n	80119b0 <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 8011998:	4813      	ldr	r0, [pc, #76]	; (80119e8 <tcpip_timeouts_mbox_fetch+0x68>)
 801199a:	f00a fb4a 	bl	801c032 <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 801199e:	2200      	movs	r2, #0
 80119a0:	6839      	ldr	r1, [r7, #0]
 80119a2:	6878      	ldr	r0, [r7, #4]
 80119a4:	f00a fabc 	bl	801bf20 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 80119a8:	480f      	ldr	r0, [pc, #60]	; (80119e8 <tcpip_timeouts_mbox_fetch+0x68>)
 80119aa:	f00a fb33 	bl	801c014 <sys_mutex_lock>
    return;
 80119ae:	e018      	b.n	80119e2 <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 80119b0:	68fb      	ldr	r3, [r7, #12]
 80119b2:	2b00      	cmp	r3, #0
 80119b4:	d102      	bne.n	80119bc <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 80119b6:	f007 fa95 	bl	8018ee4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80119ba:	e7e6      	b.n	801198a <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 80119bc:	480a      	ldr	r0, [pc, #40]	; (80119e8 <tcpip_timeouts_mbox_fetch+0x68>)
 80119be:	f00a fb38 	bl	801c032 <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 80119c2:	68fa      	ldr	r2, [r7, #12]
 80119c4:	6839      	ldr	r1, [r7, #0]
 80119c6:	6878      	ldr	r0, [r7, #4]
 80119c8:	f00a faaa 	bl	801bf20 <sys_arch_mbox_fetch>
 80119cc:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 80119ce:	4806      	ldr	r0, [pc, #24]	; (80119e8 <tcpip_timeouts_mbox_fetch+0x68>)
 80119d0:	f00a fb20 	bl	801c014 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 80119d4:	68bb      	ldr	r3, [r7, #8]
 80119d6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80119da:	d102      	bne.n	80119e2 <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 80119dc:	f007 fa82 	bl	8018ee4 <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 80119e0:	e7d3      	b.n	801198a <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 80119e2:	3710      	adds	r7, #16
 80119e4:	46bd      	mov	sp, r7
 80119e6:	bd80      	pop	{r7, pc}
 80119e8:	2001e764 	.word	0x2001e764

080119ec <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 80119ec:	b580      	push	{r7, lr}
 80119ee:	b084      	sub	sp, #16
 80119f0:	af00      	add	r7, sp, #0
 80119f2:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 80119f4:	4810      	ldr	r0, [pc, #64]	; (8011a38 <tcpip_thread+0x4c>)
 80119f6:	f00a fb0d 	bl	801c014 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 80119fa:	4b10      	ldr	r3, [pc, #64]	; (8011a3c <tcpip_thread+0x50>)
 80119fc:	681b      	ldr	r3, [r3, #0]
 80119fe:	2b00      	cmp	r3, #0
 8011a00:	d005      	beq.n	8011a0e <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 8011a02:	4b0e      	ldr	r3, [pc, #56]	; (8011a3c <tcpip_thread+0x50>)
 8011a04:	681b      	ldr	r3, [r3, #0]
 8011a06:	4a0e      	ldr	r2, [pc, #56]	; (8011a40 <tcpip_thread+0x54>)
 8011a08:	6812      	ldr	r2, [r2, #0]
 8011a0a:	4610      	mov	r0, r2
 8011a0c:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8011a0e:	f107 030c 	add.w	r3, r7, #12
 8011a12:	4619      	mov	r1, r3
 8011a14:	480b      	ldr	r0, [pc, #44]	; (8011a44 <tcpip_thread+0x58>)
 8011a16:	f7ff ffb3 	bl	8011980 <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 8011a1a:	68fb      	ldr	r3, [r7, #12]
 8011a1c:	2b00      	cmp	r3, #0
 8011a1e:	d106      	bne.n	8011a2e <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8011a20:	4b09      	ldr	r3, [pc, #36]	; (8011a48 <tcpip_thread+0x5c>)
 8011a22:	2291      	movs	r2, #145	; 0x91
 8011a24:	4909      	ldr	r1, [pc, #36]	; (8011a4c <tcpip_thread+0x60>)
 8011a26:	480a      	ldr	r0, [pc, #40]	; (8011a50 <tcpip_thread+0x64>)
 8011a28:	f00b fd40 	bl	801d4ac <iprintf>
      continue;
 8011a2c:	e003      	b.n	8011a36 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 8011a2e:	68fb      	ldr	r3, [r7, #12]
 8011a30:	4618      	mov	r0, r3
 8011a32:	f000 f80f 	bl	8011a54 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 8011a36:	e7ea      	b.n	8011a0e <tcpip_thread+0x22>
 8011a38:	2001e764 	.word	0x2001e764
 8011a3c:	2001e758 	.word	0x2001e758
 8011a40:	2001e75c 	.word	0x2001e75c
 8011a44:	2001e760 	.word	0x2001e760
 8011a48:	0801e48c 	.word	0x0801e48c
 8011a4c:	0801e4bc 	.word	0x0801e4bc
 8011a50:	0801e4dc 	.word	0x0801e4dc

08011a54 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 8011a54:	b580      	push	{r7, lr}
 8011a56:	b082      	sub	sp, #8
 8011a58:	af00      	add	r7, sp, #0
 8011a5a:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 8011a5c:	687b      	ldr	r3, [r7, #4]
 8011a5e:	781b      	ldrb	r3, [r3, #0]
 8011a60:	2b02      	cmp	r3, #2
 8011a62:	d026      	beq.n	8011ab2 <tcpip_thread_handle_msg+0x5e>
 8011a64:	2b02      	cmp	r3, #2
 8011a66:	dc2b      	bgt.n	8011ac0 <tcpip_thread_handle_msg+0x6c>
 8011a68:	2b00      	cmp	r3, #0
 8011a6a:	d002      	beq.n	8011a72 <tcpip_thread_handle_msg+0x1e>
 8011a6c:	2b01      	cmp	r3, #1
 8011a6e:	d015      	beq.n	8011a9c <tcpip_thread_handle_msg+0x48>
 8011a70:	e026      	b.n	8011ac0 <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 8011a72:	687b      	ldr	r3, [r7, #4]
 8011a74:	68db      	ldr	r3, [r3, #12]
 8011a76:	687a      	ldr	r2, [r7, #4]
 8011a78:	6850      	ldr	r0, [r2, #4]
 8011a7a:	687a      	ldr	r2, [r7, #4]
 8011a7c:	6892      	ldr	r2, [r2, #8]
 8011a7e:	4611      	mov	r1, r2
 8011a80:	4798      	blx	r3
 8011a82:	4603      	mov	r3, r0
 8011a84:	2b00      	cmp	r3, #0
 8011a86:	d004      	beq.n	8011a92 <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 8011a88:	687b      	ldr	r3, [r7, #4]
 8011a8a:	685b      	ldr	r3, [r3, #4]
 8011a8c:	4618      	mov	r0, r3
 8011a8e:	f001 fd1b 	bl	80134c8 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8011a92:	6879      	ldr	r1, [r7, #4]
 8011a94:	2009      	movs	r0, #9
 8011a96:	f000 fe73 	bl	8012780 <memp_free>
      break;
 8011a9a:	e018      	b.n	8011ace <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8011a9c:	687b      	ldr	r3, [r7, #4]
 8011a9e:	685b      	ldr	r3, [r3, #4]
 8011aa0:	687a      	ldr	r2, [r7, #4]
 8011aa2:	6892      	ldr	r2, [r2, #8]
 8011aa4:	4610      	mov	r0, r2
 8011aa6:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 8011aa8:	6879      	ldr	r1, [r7, #4]
 8011aaa:	2008      	movs	r0, #8
 8011aac:	f000 fe68 	bl	8012780 <memp_free>
      break;
 8011ab0:	e00d      	b.n	8011ace <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 8011ab2:	687b      	ldr	r3, [r7, #4]
 8011ab4:	685b      	ldr	r3, [r3, #4]
 8011ab6:	687a      	ldr	r2, [r7, #4]
 8011ab8:	6892      	ldr	r2, [r2, #8]
 8011aba:	4610      	mov	r0, r2
 8011abc:	4798      	blx	r3
      break;
 8011abe:	e006      	b.n	8011ace <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 8011ac0:	4b05      	ldr	r3, [pc, #20]	; (8011ad8 <tcpip_thread_handle_msg+0x84>)
 8011ac2:	22cf      	movs	r2, #207	; 0xcf
 8011ac4:	4905      	ldr	r1, [pc, #20]	; (8011adc <tcpip_thread_handle_msg+0x88>)
 8011ac6:	4806      	ldr	r0, [pc, #24]	; (8011ae0 <tcpip_thread_handle_msg+0x8c>)
 8011ac8:	f00b fcf0 	bl	801d4ac <iprintf>
      break;
 8011acc:	bf00      	nop
  }
}
 8011ace:	bf00      	nop
 8011ad0:	3708      	adds	r7, #8
 8011ad2:	46bd      	mov	sp, r7
 8011ad4:	bd80      	pop	{r7, pc}
 8011ad6:	bf00      	nop
 8011ad8:	0801e48c 	.word	0x0801e48c
 8011adc:	0801e4bc 	.word	0x0801e4bc
 8011ae0:	0801e4dc 	.word	0x0801e4dc

08011ae4 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 8011ae4:	b580      	push	{r7, lr}
 8011ae6:	b086      	sub	sp, #24
 8011ae8:	af00      	add	r7, sp, #0
 8011aea:	60f8      	str	r0, [r7, #12]
 8011aec:	60b9      	str	r1, [r7, #8]
 8011aee:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8011af0:	481a      	ldr	r0, [pc, #104]	; (8011b5c <tcpip_inpkt+0x78>)
 8011af2:	f00a fa54 	bl	801bf9e <sys_mbox_valid>
 8011af6:	4603      	mov	r3, r0
 8011af8:	2b00      	cmp	r3, #0
 8011afa:	d105      	bne.n	8011b08 <tcpip_inpkt+0x24>
 8011afc:	4b18      	ldr	r3, [pc, #96]	; (8011b60 <tcpip_inpkt+0x7c>)
 8011afe:	22fc      	movs	r2, #252	; 0xfc
 8011b00:	4918      	ldr	r1, [pc, #96]	; (8011b64 <tcpip_inpkt+0x80>)
 8011b02:	4819      	ldr	r0, [pc, #100]	; (8011b68 <tcpip_inpkt+0x84>)
 8011b04:	f00b fcd2 	bl	801d4ac <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 8011b08:	2009      	movs	r0, #9
 8011b0a:	f000 fdc3 	bl	8012694 <memp_malloc>
 8011b0e:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 8011b10:	697b      	ldr	r3, [r7, #20]
 8011b12:	2b00      	cmp	r3, #0
 8011b14:	d102      	bne.n	8011b1c <tcpip_inpkt+0x38>
    return ERR_MEM;
 8011b16:	f04f 33ff 	mov.w	r3, #4294967295
 8011b1a:	e01a      	b.n	8011b52 <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 8011b1c:	697b      	ldr	r3, [r7, #20]
 8011b1e:	2200      	movs	r2, #0
 8011b20:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 8011b22:	697b      	ldr	r3, [r7, #20]
 8011b24:	68fa      	ldr	r2, [r7, #12]
 8011b26:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 8011b28:	697b      	ldr	r3, [r7, #20]
 8011b2a:	68ba      	ldr	r2, [r7, #8]
 8011b2c:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 8011b2e:	697b      	ldr	r3, [r7, #20]
 8011b30:	687a      	ldr	r2, [r7, #4]
 8011b32:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8011b34:	6979      	ldr	r1, [r7, #20]
 8011b36:	4809      	ldr	r0, [pc, #36]	; (8011b5c <tcpip_inpkt+0x78>)
 8011b38:	f00a f9d8 	bl	801beec <sys_mbox_trypost>
 8011b3c:	4603      	mov	r3, r0
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d006      	beq.n	8011b50 <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 8011b42:	6979      	ldr	r1, [r7, #20]
 8011b44:	2009      	movs	r0, #9
 8011b46:	f000 fe1b 	bl	8012780 <memp_free>
    return ERR_MEM;
 8011b4a:	f04f 33ff 	mov.w	r3, #4294967295
 8011b4e:	e000      	b.n	8011b52 <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 8011b50:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 8011b52:	4618      	mov	r0, r3
 8011b54:	3718      	adds	r7, #24
 8011b56:	46bd      	mov	sp, r7
 8011b58:	bd80      	pop	{r7, pc}
 8011b5a:	bf00      	nop
 8011b5c:	2001e760 	.word	0x2001e760
 8011b60:	0801e48c 	.word	0x0801e48c
 8011b64:	0801e504 	.word	0x0801e504
 8011b68:	0801e4dc 	.word	0x0801e4dc

08011b6c <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 8011b6c:	b580      	push	{r7, lr}
 8011b6e:	b082      	sub	sp, #8
 8011b70:	af00      	add	r7, sp, #0
 8011b72:	6078      	str	r0, [r7, #4]
 8011b74:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 8011b76:	683b      	ldr	r3, [r7, #0]
 8011b78:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8011b7c:	f003 0318 	and.w	r3, r3, #24
 8011b80:	2b00      	cmp	r3, #0
 8011b82:	d006      	beq.n	8011b92 <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 8011b84:	4a08      	ldr	r2, [pc, #32]	; (8011ba8 <tcpip_input+0x3c>)
 8011b86:	6839      	ldr	r1, [r7, #0]
 8011b88:	6878      	ldr	r0, [r7, #4]
 8011b8a:	f7ff ffab 	bl	8011ae4 <tcpip_inpkt>
 8011b8e:	4603      	mov	r3, r0
 8011b90:	e005      	b.n	8011b9e <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 8011b92:	4a06      	ldr	r2, [pc, #24]	; (8011bac <tcpip_input+0x40>)
 8011b94:	6839      	ldr	r1, [r7, #0]
 8011b96:	6878      	ldr	r0, [r7, #4]
 8011b98:	f7ff ffa4 	bl	8011ae4 <tcpip_inpkt>
 8011b9c:	4603      	mov	r3, r0
}
 8011b9e:	4618      	mov	r0, r3
 8011ba0:	3708      	adds	r7, #8
 8011ba2:	46bd      	mov	sp, r7
 8011ba4:	bd80      	pop	{r7, pc}
 8011ba6:	bf00      	nop
 8011ba8:	0801bcfd 	.word	0x0801bcfd
 8011bac:	0801ac05 	.word	0x0801ac05

08011bb0 <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 8011bb0:	b580      	push	{r7, lr}
 8011bb2:	b084      	sub	sp, #16
 8011bb4:	af00      	add	r7, sp, #0
 8011bb6:	6078      	str	r0, [r7, #4]
 8011bb8:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 8011bba:	4819      	ldr	r0, [pc, #100]	; (8011c20 <tcpip_try_callback+0x70>)
 8011bbc:	f00a f9ef 	bl	801bf9e <sys_mbox_valid>
 8011bc0:	4603      	mov	r3, r0
 8011bc2:	2b00      	cmp	r3, #0
 8011bc4:	d106      	bne.n	8011bd4 <tcpip_try_callback+0x24>
 8011bc6:	4b17      	ldr	r3, [pc, #92]	; (8011c24 <tcpip_try_callback+0x74>)
 8011bc8:	f240 125d 	movw	r2, #349	; 0x15d
 8011bcc:	4916      	ldr	r1, [pc, #88]	; (8011c28 <tcpip_try_callback+0x78>)
 8011bce:	4817      	ldr	r0, [pc, #92]	; (8011c2c <tcpip_try_callback+0x7c>)
 8011bd0:	f00b fc6c 	bl	801d4ac <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 8011bd4:	2008      	movs	r0, #8
 8011bd6:	f000 fd5d 	bl	8012694 <memp_malloc>
 8011bda:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 8011bdc:	68fb      	ldr	r3, [r7, #12]
 8011bde:	2b00      	cmp	r3, #0
 8011be0:	d102      	bne.n	8011be8 <tcpip_try_callback+0x38>
    return ERR_MEM;
 8011be2:	f04f 33ff 	mov.w	r3, #4294967295
 8011be6:	e017      	b.n	8011c18 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 8011be8:	68fb      	ldr	r3, [r7, #12]
 8011bea:	2201      	movs	r2, #1
 8011bec:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 8011bee:	68fb      	ldr	r3, [r7, #12]
 8011bf0:	687a      	ldr	r2, [r7, #4]
 8011bf2:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 8011bf4:	68fb      	ldr	r3, [r7, #12]
 8011bf6:	683a      	ldr	r2, [r7, #0]
 8011bf8:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 8011bfa:	68f9      	ldr	r1, [r7, #12]
 8011bfc:	4808      	ldr	r0, [pc, #32]	; (8011c20 <tcpip_try_callback+0x70>)
 8011bfe:	f00a f975 	bl	801beec <sys_mbox_trypost>
 8011c02:	4603      	mov	r3, r0
 8011c04:	2b00      	cmp	r3, #0
 8011c06:	d006      	beq.n	8011c16 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 8011c08:	68f9      	ldr	r1, [r7, #12]
 8011c0a:	2008      	movs	r0, #8
 8011c0c:	f000 fdb8 	bl	8012780 <memp_free>
    return ERR_MEM;
 8011c10:	f04f 33ff 	mov.w	r3, #4294967295
 8011c14:	e000      	b.n	8011c18 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 8011c16:	2300      	movs	r3, #0
}
 8011c18:	4618      	mov	r0, r3
 8011c1a:	3710      	adds	r7, #16
 8011c1c:	46bd      	mov	sp, r7
 8011c1e:	bd80      	pop	{r7, pc}
 8011c20:	2001e760 	.word	0x2001e760
 8011c24:	0801e48c 	.word	0x0801e48c
 8011c28:	0801e504 	.word	0x0801e504
 8011c2c:	0801e4dc 	.word	0x0801e4dc

08011c30 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 8011c30:	b580      	push	{r7, lr}
 8011c32:	b084      	sub	sp, #16
 8011c34:	af02      	add	r7, sp, #8
 8011c36:	6078      	str	r0, [r7, #4]
 8011c38:	6039      	str	r1, [r7, #0]
  lwip_init();
 8011c3a:	f000 f871 	bl	8011d20 <lwip_init>

  tcpip_init_done = initfunc;
 8011c3e:	4a17      	ldr	r2, [pc, #92]	; (8011c9c <tcpip_init+0x6c>)
 8011c40:	687b      	ldr	r3, [r7, #4]
 8011c42:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 8011c44:	4a16      	ldr	r2, [pc, #88]	; (8011ca0 <tcpip_init+0x70>)
 8011c46:	683b      	ldr	r3, [r7, #0]
 8011c48:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 8011c4a:	2106      	movs	r1, #6
 8011c4c:	4815      	ldr	r0, [pc, #84]	; (8011ca4 <tcpip_init+0x74>)
 8011c4e:	f00a f92b 	bl	801bea8 <sys_mbox_new>
 8011c52:	4603      	mov	r3, r0
 8011c54:	2b00      	cmp	r3, #0
 8011c56:	d006      	beq.n	8011c66 <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 8011c58:	4b13      	ldr	r3, [pc, #76]	; (8011ca8 <tcpip_init+0x78>)
 8011c5a:	f240 2261 	movw	r2, #609	; 0x261
 8011c5e:	4913      	ldr	r1, [pc, #76]	; (8011cac <tcpip_init+0x7c>)
 8011c60:	4813      	ldr	r0, [pc, #76]	; (8011cb0 <tcpip_init+0x80>)
 8011c62:	f00b fc23 	bl	801d4ac <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 8011c66:	4813      	ldr	r0, [pc, #76]	; (8011cb4 <tcpip_init+0x84>)
 8011c68:	f00a f9b8 	bl	801bfdc <sys_mutex_new>
 8011c6c:	4603      	mov	r3, r0
 8011c6e:	2b00      	cmp	r3, #0
 8011c70:	d006      	beq.n	8011c80 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 8011c72:	4b0d      	ldr	r3, [pc, #52]	; (8011ca8 <tcpip_init+0x78>)
 8011c74:	f240 2265 	movw	r2, #613	; 0x265
 8011c78:	490f      	ldr	r1, [pc, #60]	; (8011cb8 <tcpip_init+0x88>)
 8011c7a:	480d      	ldr	r0, [pc, #52]	; (8011cb0 <tcpip_init+0x80>)
 8011c7c:	f00b fc16 	bl	801d4ac <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 8011c80:	2300      	movs	r3, #0
 8011c82:	9300      	str	r3, [sp, #0]
 8011c84:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8011c88:	2200      	movs	r2, #0
 8011c8a:	490c      	ldr	r1, [pc, #48]	; (8011cbc <tcpip_init+0x8c>)
 8011c8c:	480c      	ldr	r0, [pc, #48]	; (8011cc0 <tcpip_init+0x90>)
 8011c8e:	f00a f9dd 	bl	801c04c <sys_thread_new>
}
 8011c92:	bf00      	nop
 8011c94:	3708      	adds	r7, #8
 8011c96:	46bd      	mov	sp, r7
 8011c98:	bd80      	pop	{r7, pc}
 8011c9a:	bf00      	nop
 8011c9c:	2001e758 	.word	0x2001e758
 8011ca0:	2001e75c 	.word	0x2001e75c
 8011ca4:	2001e760 	.word	0x2001e760
 8011ca8:	0801e48c 	.word	0x0801e48c
 8011cac:	0801e514 	.word	0x0801e514
 8011cb0:	0801e4dc 	.word	0x0801e4dc
 8011cb4:	2001e764 	.word	0x2001e764
 8011cb8:	0801e538 	.word	0x0801e538
 8011cbc:	080119ed 	.word	0x080119ed
 8011cc0:	0801e55c 	.word	0x0801e55c

08011cc4 <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 8011cc4:	b480      	push	{r7}
 8011cc6:	b083      	sub	sp, #12
 8011cc8:	af00      	add	r7, sp, #0
 8011cca:	4603      	mov	r3, r0
 8011ccc:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 8011cce:	88fb      	ldrh	r3, [r7, #6]
 8011cd0:	021b      	lsls	r3, r3, #8
 8011cd2:	b21a      	sxth	r2, r3
 8011cd4:	88fb      	ldrh	r3, [r7, #6]
 8011cd6:	0a1b      	lsrs	r3, r3, #8
 8011cd8:	b29b      	uxth	r3, r3
 8011cda:	b21b      	sxth	r3, r3
 8011cdc:	4313      	orrs	r3, r2
 8011cde:	b21b      	sxth	r3, r3
 8011ce0:	b29b      	uxth	r3, r3
}
 8011ce2:	4618      	mov	r0, r3
 8011ce4:	370c      	adds	r7, #12
 8011ce6:	46bd      	mov	sp, r7
 8011ce8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011cec:	4770      	bx	lr

08011cee <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 8011cee:	b480      	push	{r7}
 8011cf0:	b083      	sub	sp, #12
 8011cf2:	af00      	add	r7, sp, #0
 8011cf4:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 8011cf6:	687b      	ldr	r3, [r7, #4]
 8011cf8:	061a      	lsls	r2, r3, #24
 8011cfa:	687b      	ldr	r3, [r7, #4]
 8011cfc:	021b      	lsls	r3, r3, #8
 8011cfe:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8011d02:	431a      	orrs	r2, r3
 8011d04:	687b      	ldr	r3, [r7, #4]
 8011d06:	0a1b      	lsrs	r3, r3, #8
 8011d08:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8011d0c:	431a      	orrs	r2, r3
 8011d0e:	687b      	ldr	r3, [r7, #4]
 8011d10:	0e1b      	lsrs	r3, r3, #24
 8011d12:	4313      	orrs	r3, r2
}
 8011d14:	4618      	mov	r0, r3
 8011d16:	370c      	adds	r7, #12
 8011d18:	46bd      	mov	sp, r7
 8011d1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d1e:	4770      	bx	lr

08011d20 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 8011d20:	b580      	push	{r7, lr}
 8011d22:	b082      	sub	sp, #8
 8011d24:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 8011d26:	2300      	movs	r3, #0
 8011d28:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 8011d2a:	f00a f949 	bl	801bfc0 <sys_init>
#endif /* !NO_SYS */
  mem_init();
 8011d2e:	f000 f8d9 	bl	8011ee4 <mem_init>
  memp_init();
 8011d32:	f000 fc41 	bl	80125b8 <memp_init>
  pbuf_init();
  netif_init();
 8011d36:	f000 fd4d 	bl	80127d4 <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 8011d3a:	f007 f945 	bl	8018fc8 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 8011d3e:	f001 fe6d 	bl	8013a1c <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 8011d42:	f007 f887 	bl	8018e54 <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 8011d46:	bf00      	nop
 8011d48:	3708      	adds	r7, #8
 8011d4a:	46bd      	mov	sp, r7
 8011d4c:	bd80      	pop	{r7, pc}
	...

08011d50 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 8011d50:	b480      	push	{r7}
 8011d52:	b083      	sub	sp, #12
 8011d54:	af00      	add	r7, sp, #0
 8011d56:	4603      	mov	r3, r0
 8011d58:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 8011d5a:	4b05      	ldr	r3, [pc, #20]	; (8011d70 <ptr_to_mem+0x20>)
 8011d5c:	681a      	ldr	r2, [r3, #0]
 8011d5e:	88fb      	ldrh	r3, [r7, #6]
 8011d60:	4413      	add	r3, r2
}
 8011d62:	4618      	mov	r0, r3
 8011d64:	370c      	adds	r7, #12
 8011d66:	46bd      	mov	sp, r7
 8011d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d6c:	4770      	bx	lr
 8011d6e:	bf00      	nop
 8011d70:	20020ea4 	.word	0x20020ea4

08011d74 <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 8011d74:	b480      	push	{r7}
 8011d76:	b083      	sub	sp, #12
 8011d78:	af00      	add	r7, sp, #0
 8011d7a:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 8011d7c:	4b05      	ldr	r3, [pc, #20]	; (8011d94 <mem_to_ptr+0x20>)
 8011d7e:	681b      	ldr	r3, [r3, #0]
 8011d80:	687a      	ldr	r2, [r7, #4]
 8011d82:	1ad3      	subs	r3, r2, r3
 8011d84:	b29b      	uxth	r3, r3
}
 8011d86:	4618      	mov	r0, r3
 8011d88:	370c      	adds	r7, #12
 8011d8a:	46bd      	mov	sp, r7
 8011d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011d90:	4770      	bx	lr
 8011d92:	bf00      	nop
 8011d94:	20020ea4 	.word	0x20020ea4

08011d98 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 8011d98:	b590      	push	{r4, r7, lr}
 8011d9a:	b085      	sub	sp, #20
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 8011da0:	4b47      	ldr	r3, [pc, #284]	; (8011ec0 <plug_holes+0x128>)
 8011da2:	681b      	ldr	r3, [r3, #0]
 8011da4:	687a      	ldr	r2, [r7, #4]
 8011da6:	429a      	cmp	r2, r3
 8011da8:	d206      	bcs.n	8011db8 <plug_holes+0x20>
 8011daa:	4b46      	ldr	r3, [pc, #280]	; (8011ec4 <plug_holes+0x12c>)
 8011dac:	f240 12df 	movw	r2, #479	; 0x1df
 8011db0:	4945      	ldr	r1, [pc, #276]	; (8011ec8 <plug_holes+0x130>)
 8011db2:	4846      	ldr	r0, [pc, #280]	; (8011ecc <plug_holes+0x134>)
 8011db4:	f00b fb7a 	bl	801d4ac <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 8011db8:	4b45      	ldr	r3, [pc, #276]	; (8011ed0 <plug_holes+0x138>)
 8011dba:	681b      	ldr	r3, [r3, #0]
 8011dbc:	687a      	ldr	r2, [r7, #4]
 8011dbe:	429a      	cmp	r2, r3
 8011dc0:	d306      	bcc.n	8011dd0 <plug_holes+0x38>
 8011dc2:	4b40      	ldr	r3, [pc, #256]	; (8011ec4 <plug_holes+0x12c>)
 8011dc4:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 8011dc8:	4942      	ldr	r1, [pc, #264]	; (8011ed4 <plug_holes+0x13c>)
 8011dca:	4840      	ldr	r0, [pc, #256]	; (8011ecc <plug_holes+0x134>)
 8011dcc:	f00b fb6e 	bl	801d4ac <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	791b      	ldrb	r3, [r3, #4]
 8011dd4:	2b00      	cmp	r3, #0
 8011dd6:	d006      	beq.n	8011de6 <plug_holes+0x4e>
 8011dd8:	4b3a      	ldr	r3, [pc, #232]	; (8011ec4 <plug_holes+0x12c>)
 8011dda:	f240 12e1 	movw	r2, #481	; 0x1e1
 8011dde:	493e      	ldr	r1, [pc, #248]	; (8011ed8 <plug_holes+0x140>)
 8011de0:	483a      	ldr	r0, [pc, #232]	; (8011ecc <plug_holes+0x134>)
 8011de2:	f00b fb63 	bl	801d4ac <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 8011de6:	687b      	ldr	r3, [r7, #4]
 8011de8:	881b      	ldrh	r3, [r3, #0]
 8011dea:	f242 7210 	movw	r2, #10000	; 0x2710
 8011dee:	4293      	cmp	r3, r2
 8011df0:	d906      	bls.n	8011e00 <plug_holes+0x68>
 8011df2:	4b34      	ldr	r3, [pc, #208]	; (8011ec4 <plug_holes+0x12c>)
 8011df4:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8011df8:	4938      	ldr	r1, [pc, #224]	; (8011edc <plug_holes+0x144>)
 8011dfa:	4834      	ldr	r0, [pc, #208]	; (8011ecc <plug_holes+0x134>)
 8011dfc:	f00b fb56 	bl	801d4ac <iprintf>

  nmem = ptr_to_mem(mem->next);
 8011e00:	687b      	ldr	r3, [r7, #4]
 8011e02:	881b      	ldrh	r3, [r3, #0]
 8011e04:	4618      	mov	r0, r3
 8011e06:	f7ff ffa3 	bl	8011d50 <ptr_to_mem>
 8011e0a:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 8011e0c:	687a      	ldr	r2, [r7, #4]
 8011e0e:	68fb      	ldr	r3, [r7, #12]
 8011e10:	429a      	cmp	r2, r3
 8011e12:	d025      	beq.n	8011e60 <plug_holes+0xc8>
 8011e14:	68fb      	ldr	r3, [r7, #12]
 8011e16:	791b      	ldrb	r3, [r3, #4]
 8011e18:	2b00      	cmp	r3, #0
 8011e1a:	d121      	bne.n	8011e60 <plug_holes+0xc8>
 8011e1c:	4b2c      	ldr	r3, [pc, #176]	; (8011ed0 <plug_holes+0x138>)
 8011e1e:	681b      	ldr	r3, [r3, #0]
 8011e20:	68fa      	ldr	r2, [r7, #12]
 8011e22:	429a      	cmp	r2, r3
 8011e24:	d01c      	beq.n	8011e60 <plug_holes+0xc8>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 8011e26:	4b2e      	ldr	r3, [pc, #184]	; (8011ee0 <plug_holes+0x148>)
 8011e28:	681b      	ldr	r3, [r3, #0]
 8011e2a:	68fa      	ldr	r2, [r7, #12]
 8011e2c:	429a      	cmp	r2, r3
 8011e2e:	d102      	bne.n	8011e36 <plug_holes+0x9e>
      lfree = mem;
 8011e30:	4a2b      	ldr	r2, [pc, #172]	; (8011ee0 <plug_holes+0x148>)
 8011e32:	687b      	ldr	r3, [r7, #4]
 8011e34:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 8011e36:	68fb      	ldr	r3, [r7, #12]
 8011e38:	881a      	ldrh	r2, [r3, #0]
 8011e3a:	687b      	ldr	r3, [r7, #4]
 8011e3c:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 8011e3e:	68fb      	ldr	r3, [r7, #12]
 8011e40:	881b      	ldrh	r3, [r3, #0]
 8011e42:	f242 7210 	movw	r2, #10000	; 0x2710
 8011e46:	4293      	cmp	r3, r2
 8011e48:	d00a      	beq.n	8011e60 <plug_holes+0xc8>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 8011e4a:	68fb      	ldr	r3, [r7, #12]
 8011e4c:	881b      	ldrh	r3, [r3, #0]
 8011e4e:	4618      	mov	r0, r3
 8011e50:	f7ff ff7e 	bl	8011d50 <ptr_to_mem>
 8011e54:	4604      	mov	r4, r0
 8011e56:	6878      	ldr	r0, [r7, #4]
 8011e58:	f7ff ff8c 	bl	8011d74 <mem_to_ptr>
 8011e5c:	4603      	mov	r3, r0
 8011e5e:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 8011e60:	687b      	ldr	r3, [r7, #4]
 8011e62:	885b      	ldrh	r3, [r3, #2]
 8011e64:	4618      	mov	r0, r3
 8011e66:	f7ff ff73 	bl	8011d50 <ptr_to_mem>
 8011e6a:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 8011e6c:	68ba      	ldr	r2, [r7, #8]
 8011e6e:	687b      	ldr	r3, [r7, #4]
 8011e70:	429a      	cmp	r2, r3
 8011e72:	d020      	beq.n	8011eb6 <plug_holes+0x11e>
 8011e74:	68bb      	ldr	r3, [r7, #8]
 8011e76:	791b      	ldrb	r3, [r3, #4]
 8011e78:	2b00      	cmp	r3, #0
 8011e7a:	d11c      	bne.n	8011eb6 <plug_holes+0x11e>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 8011e7c:	4b18      	ldr	r3, [pc, #96]	; (8011ee0 <plug_holes+0x148>)
 8011e7e:	681b      	ldr	r3, [r3, #0]
 8011e80:	687a      	ldr	r2, [r7, #4]
 8011e82:	429a      	cmp	r2, r3
 8011e84:	d102      	bne.n	8011e8c <plug_holes+0xf4>
      lfree = pmem;
 8011e86:	4a16      	ldr	r2, [pc, #88]	; (8011ee0 <plug_holes+0x148>)
 8011e88:	68bb      	ldr	r3, [r7, #8]
 8011e8a:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 8011e8c:	687b      	ldr	r3, [r7, #4]
 8011e8e:	881a      	ldrh	r2, [r3, #0]
 8011e90:	68bb      	ldr	r3, [r7, #8]
 8011e92:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 8011e94:	687b      	ldr	r3, [r7, #4]
 8011e96:	881b      	ldrh	r3, [r3, #0]
 8011e98:	f242 7210 	movw	r2, #10000	; 0x2710
 8011e9c:	4293      	cmp	r3, r2
 8011e9e:	d00a      	beq.n	8011eb6 <plug_holes+0x11e>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 8011ea0:	687b      	ldr	r3, [r7, #4]
 8011ea2:	881b      	ldrh	r3, [r3, #0]
 8011ea4:	4618      	mov	r0, r3
 8011ea6:	f7ff ff53 	bl	8011d50 <ptr_to_mem>
 8011eaa:	4604      	mov	r4, r0
 8011eac:	68b8      	ldr	r0, [r7, #8]
 8011eae:	f7ff ff61 	bl	8011d74 <mem_to_ptr>
 8011eb2:	4603      	mov	r3, r0
 8011eb4:	8063      	strh	r3, [r4, #2]
    }
  }
}
 8011eb6:	bf00      	nop
 8011eb8:	3714      	adds	r7, #20
 8011eba:	46bd      	mov	sp, r7
 8011ebc:	bd90      	pop	{r4, r7, pc}
 8011ebe:	bf00      	nop
 8011ec0:	20020ea4 	.word	0x20020ea4
 8011ec4:	0801e56c 	.word	0x0801e56c
 8011ec8:	0801e59c 	.word	0x0801e59c
 8011ecc:	0801e5b4 	.word	0x0801e5b4
 8011ed0:	20020ea8 	.word	0x20020ea8
 8011ed4:	0801e5dc 	.word	0x0801e5dc
 8011ed8:	0801e5f8 	.word	0x0801e5f8
 8011edc:	0801e614 	.word	0x0801e614
 8011ee0:	20020eb0 	.word	0x20020eb0

08011ee4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 8011ee4:	b580      	push	{r7, lr}
 8011ee6:	b082      	sub	sp, #8
 8011ee8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 8011eea:	4b1f      	ldr	r3, [pc, #124]	; (8011f68 <mem_init+0x84>)
 8011eec:	3303      	adds	r3, #3
 8011eee:	f023 0303 	bic.w	r3, r3, #3
 8011ef2:	461a      	mov	r2, r3
 8011ef4:	4b1d      	ldr	r3, [pc, #116]	; (8011f6c <mem_init+0x88>)
 8011ef6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 8011ef8:	4b1c      	ldr	r3, [pc, #112]	; (8011f6c <mem_init+0x88>)
 8011efa:	681b      	ldr	r3, [r3, #0]
 8011efc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 8011efe:	687b      	ldr	r3, [r7, #4]
 8011f00:	f242 7210 	movw	r2, #10000	; 0x2710
 8011f04:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 8011f06:	687b      	ldr	r3, [r7, #4]
 8011f08:	2200      	movs	r2, #0
 8011f0a:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 8011f0c:	687b      	ldr	r3, [r7, #4]
 8011f0e:	2200      	movs	r2, #0
 8011f10:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 8011f12:	f242 7010 	movw	r0, #10000	; 0x2710
 8011f16:	f7ff ff1b 	bl	8011d50 <ptr_to_mem>
 8011f1a:	4603      	mov	r3, r0
 8011f1c:	4a14      	ldr	r2, [pc, #80]	; (8011f70 <mem_init+0x8c>)
 8011f1e:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 8011f20:	4b13      	ldr	r3, [pc, #76]	; (8011f70 <mem_init+0x8c>)
 8011f22:	681b      	ldr	r3, [r3, #0]
 8011f24:	2201      	movs	r2, #1
 8011f26:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 8011f28:	4b11      	ldr	r3, [pc, #68]	; (8011f70 <mem_init+0x8c>)
 8011f2a:	681b      	ldr	r3, [r3, #0]
 8011f2c:	f242 7210 	movw	r2, #10000	; 0x2710
 8011f30:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 8011f32:	4b0f      	ldr	r3, [pc, #60]	; (8011f70 <mem_init+0x8c>)
 8011f34:	681b      	ldr	r3, [r3, #0]
 8011f36:	f242 7210 	movw	r2, #10000	; 0x2710
 8011f3a:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 8011f3c:	4b0b      	ldr	r3, [pc, #44]	; (8011f6c <mem_init+0x88>)
 8011f3e:	681b      	ldr	r3, [r3, #0]
 8011f40:	4a0c      	ldr	r2, [pc, #48]	; (8011f74 <mem_init+0x90>)
 8011f42:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 8011f44:	480c      	ldr	r0, [pc, #48]	; (8011f78 <mem_init+0x94>)
 8011f46:	f00a f849 	bl	801bfdc <sys_mutex_new>
 8011f4a:	4603      	mov	r3, r0
 8011f4c:	2b00      	cmp	r3, #0
 8011f4e:	d006      	beq.n	8011f5e <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 8011f50:	4b0a      	ldr	r3, [pc, #40]	; (8011f7c <mem_init+0x98>)
 8011f52:	f240 221f 	movw	r2, #543	; 0x21f
 8011f56:	490a      	ldr	r1, [pc, #40]	; (8011f80 <mem_init+0x9c>)
 8011f58:	480a      	ldr	r0, [pc, #40]	; (8011f84 <mem_init+0xa0>)
 8011f5a:	f00b faa7 	bl	801d4ac <iprintf>
  }
}
 8011f5e:	bf00      	nop
 8011f60:	3708      	adds	r7, #8
 8011f62:	46bd      	mov	sp, r7
 8011f64:	bd80      	pop	{r7, pc}
 8011f66:	bf00      	nop
 8011f68:	2001e780 	.word	0x2001e780
 8011f6c:	20020ea4 	.word	0x20020ea4
 8011f70:	20020ea8 	.word	0x20020ea8
 8011f74:	20020eb0 	.word	0x20020eb0
 8011f78:	20020eac 	.word	0x20020eac
 8011f7c:	0801e56c 	.word	0x0801e56c
 8011f80:	0801e640 	.word	0x0801e640
 8011f84:	0801e5b4 	.word	0x0801e5b4

08011f88 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 8011f88:	b580      	push	{r7, lr}
 8011f8a:	b086      	sub	sp, #24
 8011f8c:	af00      	add	r7, sp, #0
 8011f8e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 8011f90:	6878      	ldr	r0, [r7, #4]
 8011f92:	f7ff feef 	bl	8011d74 <mem_to_ptr>
 8011f96:	4603      	mov	r3, r0
 8011f98:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 8011f9a:	687b      	ldr	r3, [r7, #4]
 8011f9c:	881b      	ldrh	r3, [r3, #0]
 8011f9e:	4618      	mov	r0, r3
 8011fa0:	f7ff fed6 	bl	8011d50 <ptr_to_mem>
 8011fa4:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 8011fa6:	687b      	ldr	r3, [r7, #4]
 8011fa8:	885b      	ldrh	r3, [r3, #2]
 8011faa:	4618      	mov	r0, r3
 8011fac:	f7ff fed0 	bl	8011d50 <ptr_to_mem>
 8011fb0:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8011fb2:	687b      	ldr	r3, [r7, #4]
 8011fb4:	881b      	ldrh	r3, [r3, #0]
 8011fb6:	f242 7210 	movw	r2, #10000	; 0x2710
 8011fba:	4293      	cmp	r3, r2
 8011fbc:	d819      	bhi.n	8011ff2 <mem_link_valid+0x6a>
 8011fbe:	687b      	ldr	r3, [r7, #4]
 8011fc0:	885b      	ldrh	r3, [r3, #2]
 8011fc2:	f242 7210 	movw	r2, #10000	; 0x2710
 8011fc6:	4293      	cmp	r3, r2
 8011fc8:	d813      	bhi.n	8011ff2 <mem_link_valid+0x6a>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011fca:	687b      	ldr	r3, [r7, #4]
 8011fcc:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 8011fce:	8afa      	ldrh	r2, [r7, #22]
 8011fd0:	429a      	cmp	r2, r3
 8011fd2:	d004      	beq.n	8011fde <mem_link_valid+0x56>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011fd4:	68fb      	ldr	r3, [r7, #12]
 8011fd6:	881b      	ldrh	r3, [r3, #0]
 8011fd8:	8afa      	ldrh	r2, [r7, #22]
 8011fda:	429a      	cmp	r2, r3
 8011fdc:	d109      	bne.n	8011ff2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8011fde:	4b08      	ldr	r3, [pc, #32]	; (8012000 <mem_link_valid+0x78>)
 8011fe0:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 8011fe2:	693a      	ldr	r2, [r7, #16]
 8011fe4:	429a      	cmp	r2, r3
 8011fe6:	d006      	beq.n	8011ff6 <mem_link_valid+0x6e>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 8011fe8:	693b      	ldr	r3, [r7, #16]
 8011fea:	885b      	ldrh	r3, [r3, #2]
 8011fec:	8afa      	ldrh	r2, [r7, #22]
 8011fee:	429a      	cmp	r2, r3
 8011ff0:	d001      	beq.n	8011ff6 <mem_link_valid+0x6e>
    return 0;
 8011ff2:	2300      	movs	r3, #0
 8011ff4:	e000      	b.n	8011ff8 <mem_link_valid+0x70>
  }
  return 1;
 8011ff6:	2301      	movs	r3, #1
}
 8011ff8:	4618      	mov	r0, r3
 8011ffa:	3718      	adds	r7, #24
 8011ffc:	46bd      	mov	sp, r7
 8011ffe:	bd80      	pop	{r7, pc}
 8012000:	20020ea8 	.word	0x20020ea8

08012004 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 8012004:	b580      	push	{r7, lr}
 8012006:	b088      	sub	sp, #32
 8012008:	af00      	add	r7, sp, #0
 801200a:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 801200c:	687b      	ldr	r3, [r7, #4]
 801200e:	2b00      	cmp	r3, #0
 8012010:	d070      	beq.n	80120f4 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 8012012:	687b      	ldr	r3, [r7, #4]
 8012014:	f003 0303 	and.w	r3, r3, #3
 8012018:	2b00      	cmp	r3, #0
 801201a:	d00d      	beq.n	8012038 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 801201c:	4b37      	ldr	r3, [pc, #220]	; (80120fc <mem_free+0xf8>)
 801201e:	f240 2273 	movw	r2, #627	; 0x273
 8012022:	4937      	ldr	r1, [pc, #220]	; (8012100 <mem_free+0xfc>)
 8012024:	4837      	ldr	r0, [pc, #220]	; (8012104 <mem_free+0x100>)
 8012026:	f00b fa41 	bl	801d4ac <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 801202a:	f00a f835 	bl	801c098 <sys_arch_protect>
 801202e:	60f8      	str	r0, [r7, #12]
 8012030:	68f8      	ldr	r0, [r7, #12]
 8012032:	f00a f83f 	bl	801c0b4 <sys_arch_unprotect>
    return;
 8012036:	e05e      	b.n	80120f6 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 8012038:	687b      	ldr	r3, [r7, #4]
 801203a:	3b08      	subs	r3, #8
 801203c:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 801203e:	4b32      	ldr	r3, [pc, #200]	; (8012108 <mem_free+0x104>)
 8012040:	681b      	ldr	r3, [r3, #0]
 8012042:	69fa      	ldr	r2, [r7, #28]
 8012044:	429a      	cmp	r2, r3
 8012046:	d306      	bcc.n	8012056 <mem_free+0x52>
 8012048:	687b      	ldr	r3, [r7, #4]
 801204a:	f103 020c 	add.w	r2, r3, #12
 801204e:	4b2f      	ldr	r3, [pc, #188]	; (801210c <mem_free+0x108>)
 8012050:	681b      	ldr	r3, [r3, #0]
 8012052:	429a      	cmp	r2, r3
 8012054:	d90d      	bls.n	8012072 <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 8012056:	4b29      	ldr	r3, [pc, #164]	; (80120fc <mem_free+0xf8>)
 8012058:	f240 227f 	movw	r2, #639	; 0x27f
 801205c:	492c      	ldr	r1, [pc, #176]	; (8012110 <mem_free+0x10c>)
 801205e:	4829      	ldr	r0, [pc, #164]	; (8012104 <mem_free+0x100>)
 8012060:	f00b fa24 	bl	801d4ac <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012064:	f00a f818 	bl	801c098 <sys_arch_protect>
 8012068:	6138      	str	r0, [r7, #16]
 801206a:	6938      	ldr	r0, [r7, #16]
 801206c:	f00a f822 	bl	801c0b4 <sys_arch_unprotect>
    return;
 8012070:	e041      	b.n	80120f6 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 8012072:	4828      	ldr	r0, [pc, #160]	; (8012114 <mem_free+0x110>)
 8012074:	f009 ffce 	bl	801c014 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 8012078:	69fb      	ldr	r3, [r7, #28]
 801207a:	791b      	ldrb	r3, [r3, #4]
 801207c:	2b00      	cmp	r3, #0
 801207e:	d110      	bne.n	80120a2 <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 8012080:	4b1e      	ldr	r3, [pc, #120]	; (80120fc <mem_free+0xf8>)
 8012082:	f44f 7223 	mov.w	r2, #652	; 0x28c
 8012086:	4924      	ldr	r1, [pc, #144]	; (8012118 <mem_free+0x114>)
 8012088:	481e      	ldr	r0, [pc, #120]	; (8012104 <mem_free+0x100>)
 801208a:	f00b fa0f 	bl	801d4ac <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 801208e:	4821      	ldr	r0, [pc, #132]	; (8012114 <mem_free+0x110>)
 8012090:	f009 ffcf 	bl	801c032 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012094:	f00a f800 	bl	801c098 <sys_arch_protect>
 8012098:	6178      	str	r0, [r7, #20]
 801209a:	6978      	ldr	r0, [r7, #20]
 801209c:	f00a f80a 	bl	801c0b4 <sys_arch_unprotect>
    return;
 80120a0:	e029      	b.n	80120f6 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 80120a2:	69f8      	ldr	r0, [r7, #28]
 80120a4:	f7ff ff70 	bl	8011f88 <mem_link_valid>
 80120a8:	4603      	mov	r3, r0
 80120aa:	2b00      	cmp	r3, #0
 80120ac:	d110      	bne.n	80120d0 <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 80120ae:	4b13      	ldr	r3, [pc, #76]	; (80120fc <mem_free+0xf8>)
 80120b0:	f240 2295 	movw	r2, #661	; 0x295
 80120b4:	4919      	ldr	r1, [pc, #100]	; (801211c <mem_free+0x118>)
 80120b6:	4813      	ldr	r0, [pc, #76]	; (8012104 <mem_free+0x100>)
 80120b8:	f00b f9f8 	bl	801d4ac <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 80120bc:	4815      	ldr	r0, [pc, #84]	; (8012114 <mem_free+0x110>)
 80120be:	f009 ffb8 	bl	801c032 <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 80120c2:	f009 ffe9 	bl	801c098 <sys_arch_protect>
 80120c6:	61b8      	str	r0, [r7, #24]
 80120c8:	69b8      	ldr	r0, [r7, #24]
 80120ca:	f009 fff3 	bl	801c0b4 <sys_arch_unprotect>
    return;
 80120ce:	e012      	b.n	80120f6 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 80120d0:	69fb      	ldr	r3, [r7, #28]
 80120d2:	2200      	movs	r2, #0
 80120d4:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 80120d6:	4b12      	ldr	r3, [pc, #72]	; (8012120 <mem_free+0x11c>)
 80120d8:	681b      	ldr	r3, [r3, #0]
 80120da:	69fa      	ldr	r2, [r7, #28]
 80120dc:	429a      	cmp	r2, r3
 80120de:	d202      	bcs.n	80120e6 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 80120e0:	4a0f      	ldr	r2, [pc, #60]	; (8012120 <mem_free+0x11c>)
 80120e2:	69fb      	ldr	r3, [r7, #28]
 80120e4:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 80120e6:	69f8      	ldr	r0, [r7, #28]
 80120e8:	f7ff fe56 	bl	8011d98 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 80120ec:	4809      	ldr	r0, [pc, #36]	; (8012114 <mem_free+0x110>)
 80120ee:	f009 ffa0 	bl	801c032 <sys_mutex_unlock>
 80120f2:	e000      	b.n	80120f6 <mem_free+0xf2>
    return;
 80120f4:	bf00      	nop
}
 80120f6:	3720      	adds	r7, #32
 80120f8:	46bd      	mov	sp, r7
 80120fa:	bd80      	pop	{r7, pc}
 80120fc:	0801e56c 	.word	0x0801e56c
 8012100:	0801e65c 	.word	0x0801e65c
 8012104:	0801e5b4 	.word	0x0801e5b4
 8012108:	20020ea4 	.word	0x20020ea4
 801210c:	20020ea8 	.word	0x20020ea8
 8012110:	0801e680 	.word	0x0801e680
 8012114:	20020eac 	.word	0x20020eac
 8012118:	0801e69c 	.word	0x0801e69c
 801211c:	0801e6c4 	.word	0x0801e6c4
 8012120:	20020eb0 	.word	0x20020eb0

08012124 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 8012124:	b580      	push	{r7, lr}
 8012126:	b088      	sub	sp, #32
 8012128:	af00      	add	r7, sp, #0
 801212a:	6078      	str	r0, [r7, #4]
 801212c:	460b      	mov	r3, r1
 801212e:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 8012130:	887b      	ldrh	r3, [r7, #2]
 8012132:	3303      	adds	r3, #3
 8012134:	b29b      	uxth	r3, r3
 8012136:	f023 0303 	bic.w	r3, r3, #3
 801213a:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 801213c:	8bfb      	ldrh	r3, [r7, #30]
 801213e:	2b0b      	cmp	r3, #11
 8012140:	d801      	bhi.n	8012146 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 8012142:	230c      	movs	r3, #12
 8012144:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 8012146:	8bfb      	ldrh	r3, [r7, #30]
 8012148:	f242 7210 	movw	r2, #10000	; 0x2710
 801214c:	4293      	cmp	r3, r2
 801214e:	d803      	bhi.n	8012158 <mem_trim+0x34>
 8012150:	8bfa      	ldrh	r2, [r7, #30]
 8012152:	887b      	ldrh	r3, [r7, #2]
 8012154:	429a      	cmp	r2, r3
 8012156:	d201      	bcs.n	801215c <mem_trim+0x38>
    return NULL;
 8012158:	2300      	movs	r3, #0
 801215a:	e0dc      	b.n	8012316 <mem_trim+0x1f2>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 801215c:	4b70      	ldr	r3, [pc, #448]	; (8012320 <mem_trim+0x1fc>)
 801215e:	681b      	ldr	r3, [r3, #0]
 8012160:	687a      	ldr	r2, [r7, #4]
 8012162:	429a      	cmp	r2, r3
 8012164:	d304      	bcc.n	8012170 <mem_trim+0x4c>
 8012166:	4b6f      	ldr	r3, [pc, #444]	; (8012324 <mem_trim+0x200>)
 8012168:	681b      	ldr	r3, [r3, #0]
 801216a:	687a      	ldr	r2, [r7, #4]
 801216c:	429a      	cmp	r2, r3
 801216e:	d306      	bcc.n	801217e <mem_trim+0x5a>
 8012170:	4b6d      	ldr	r3, [pc, #436]	; (8012328 <mem_trim+0x204>)
 8012172:	f240 22d1 	movw	r2, #721	; 0x2d1
 8012176:	496d      	ldr	r1, [pc, #436]	; (801232c <mem_trim+0x208>)
 8012178:	486d      	ldr	r0, [pc, #436]	; (8012330 <mem_trim+0x20c>)
 801217a:	f00b f997 	bl	801d4ac <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 801217e:	4b68      	ldr	r3, [pc, #416]	; (8012320 <mem_trim+0x1fc>)
 8012180:	681b      	ldr	r3, [r3, #0]
 8012182:	687a      	ldr	r2, [r7, #4]
 8012184:	429a      	cmp	r2, r3
 8012186:	d304      	bcc.n	8012192 <mem_trim+0x6e>
 8012188:	4b66      	ldr	r3, [pc, #408]	; (8012324 <mem_trim+0x200>)
 801218a:	681b      	ldr	r3, [r3, #0]
 801218c:	687a      	ldr	r2, [r7, #4]
 801218e:	429a      	cmp	r2, r3
 8012190:	d307      	bcc.n	80121a2 <mem_trim+0x7e>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 8012192:	f009 ff81 	bl	801c098 <sys_arch_protect>
 8012196:	60b8      	str	r0, [r7, #8]
 8012198:	68b8      	ldr	r0, [r7, #8]
 801219a:	f009 ff8b 	bl	801c0b4 <sys_arch_unprotect>
    return rmem;
 801219e:	687b      	ldr	r3, [r7, #4]
 80121a0:	e0b9      	b.n	8012316 <mem_trim+0x1f2>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 80121a2:	687b      	ldr	r3, [r7, #4]
 80121a4:	3b08      	subs	r3, #8
 80121a6:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 80121a8:	69b8      	ldr	r0, [r7, #24]
 80121aa:	f7ff fde3 	bl	8011d74 <mem_to_ptr>
 80121ae:	4603      	mov	r3, r0
 80121b0:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 80121b2:	69bb      	ldr	r3, [r7, #24]
 80121b4:	881a      	ldrh	r2, [r3, #0]
 80121b6:	8afb      	ldrh	r3, [r7, #22]
 80121b8:	1ad3      	subs	r3, r2, r3
 80121ba:	b29b      	uxth	r3, r3
 80121bc:	3b08      	subs	r3, #8
 80121be:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 80121c0:	8bfa      	ldrh	r2, [r7, #30]
 80121c2:	8abb      	ldrh	r3, [r7, #20]
 80121c4:	429a      	cmp	r2, r3
 80121c6:	d906      	bls.n	80121d6 <mem_trim+0xb2>
 80121c8:	4b57      	ldr	r3, [pc, #348]	; (8012328 <mem_trim+0x204>)
 80121ca:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 80121ce:	4959      	ldr	r1, [pc, #356]	; (8012334 <mem_trim+0x210>)
 80121d0:	4857      	ldr	r0, [pc, #348]	; (8012330 <mem_trim+0x20c>)
 80121d2:	f00b f96b 	bl	801d4ac <iprintf>
  if (newsize > size) {
 80121d6:	8bfa      	ldrh	r2, [r7, #30]
 80121d8:	8abb      	ldrh	r3, [r7, #20]
 80121da:	429a      	cmp	r2, r3
 80121dc:	d901      	bls.n	80121e2 <mem_trim+0xbe>
    /* not supported */
    return NULL;
 80121de:	2300      	movs	r3, #0
 80121e0:	e099      	b.n	8012316 <mem_trim+0x1f2>
  }
  if (newsize == size) {
 80121e2:	8bfa      	ldrh	r2, [r7, #30]
 80121e4:	8abb      	ldrh	r3, [r7, #20]
 80121e6:	429a      	cmp	r2, r3
 80121e8:	d101      	bne.n	80121ee <mem_trim+0xca>
    /* No change in size, simply return */
    return rmem;
 80121ea:	687b      	ldr	r3, [r7, #4]
 80121ec:	e093      	b.n	8012316 <mem_trim+0x1f2>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 80121ee:	4852      	ldr	r0, [pc, #328]	; (8012338 <mem_trim+0x214>)
 80121f0:	f009 ff10 	bl	801c014 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 80121f4:	69bb      	ldr	r3, [r7, #24]
 80121f6:	881b      	ldrh	r3, [r3, #0]
 80121f8:	4618      	mov	r0, r3
 80121fa:	f7ff fda9 	bl	8011d50 <ptr_to_mem>
 80121fe:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 8012200:	693b      	ldr	r3, [r7, #16]
 8012202:	791b      	ldrb	r3, [r3, #4]
 8012204:	2b00      	cmp	r3, #0
 8012206:	d141      	bne.n	801228c <mem_trim+0x168>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 8012208:	69bb      	ldr	r3, [r7, #24]
 801220a:	881b      	ldrh	r3, [r3, #0]
 801220c:	f242 7210 	movw	r2, #10000	; 0x2710
 8012210:	4293      	cmp	r3, r2
 8012212:	d106      	bne.n	8012222 <mem_trim+0xfe>
 8012214:	4b44      	ldr	r3, [pc, #272]	; (8012328 <mem_trim+0x204>)
 8012216:	f240 22f5 	movw	r2, #757	; 0x2f5
 801221a:	4948      	ldr	r1, [pc, #288]	; (801233c <mem_trim+0x218>)
 801221c:	4844      	ldr	r0, [pc, #272]	; (8012330 <mem_trim+0x20c>)
 801221e:	f00b f945 	bl	801d4ac <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 8012222:	693b      	ldr	r3, [r7, #16]
 8012224:	881b      	ldrh	r3, [r3, #0]
 8012226:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8012228:	8afa      	ldrh	r2, [r7, #22]
 801222a:	8bfb      	ldrh	r3, [r7, #30]
 801222c:	4413      	add	r3, r2
 801222e:	b29b      	uxth	r3, r3
 8012230:	3308      	adds	r3, #8
 8012232:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 8012234:	4b42      	ldr	r3, [pc, #264]	; (8012340 <mem_trim+0x21c>)
 8012236:	681b      	ldr	r3, [r3, #0]
 8012238:	693a      	ldr	r2, [r7, #16]
 801223a:	429a      	cmp	r2, r3
 801223c:	d106      	bne.n	801224c <mem_trim+0x128>
      lfree = ptr_to_mem(ptr2);
 801223e:	89fb      	ldrh	r3, [r7, #14]
 8012240:	4618      	mov	r0, r3
 8012242:	f7ff fd85 	bl	8011d50 <ptr_to_mem>
 8012246:	4603      	mov	r3, r0
 8012248:	4a3d      	ldr	r2, [pc, #244]	; (8012340 <mem_trim+0x21c>)
 801224a:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 801224c:	89fb      	ldrh	r3, [r7, #14]
 801224e:	4618      	mov	r0, r3
 8012250:	f7ff fd7e 	bl	8011d50 <ptr_to_mem>
 8012254:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 8012256:	693b      	ldr	r3, [r7, #16]
 8012258:	2200      	movs	r2, #0
 801225a:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 801225c:	693b      	ldr	r3, [r7, #16]
 801225e:	89ba      	ldrh	r2, [r7, #12]
 8012260:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 8012262:	693b      	ldr	r3, [r7, #16]
 8012264:	8afa      	ldrh	r2, [r7, #22]
 8012266:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 8012268:	69bb      	ldr	r3, [r7, #24]
 801226a:	89fa      	ldrh	r2, [r7, #14]
 801226c:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 801226e:	693b      	ldr	r3, [r7, #16]
 8012270:	881b      	ldrh	r3, [r3, #0]
 8012272:	f242 7210 	movw	r2, #10000	; 0x2710
 8012276:	4293      	cmp	r3, r2
 8012278:	d049      	beq.n	801230e <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 801227a:	693b      	ldr	r3, [r7, #16]
 801227c:	881b      	ldrh	r3, [r3, #0]
 801227e:	4618      	mov	r0, r3
 8012280:	f7ff fd66 	bl	8011d50 <ptr_to_mem>
 8012284:	4602      	mov	r2, r0
 8012286:	89fb      	ldrh	r3, [r7, #14]
 8012288:	8053      	strh	r3, [r2, #2]
 801228a:	e040      	b.n	801230e <mem_trim+0x1ea>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 801228c:	8bfb      	ldrh	r3, [r7, #30]
 801228e:	f103 0214 	add.w	r2, r3, #20
 8012292:	8abb      	ldrh	r3, [r7, #20]
 8012294:	429a      	cmp	r2, r3
 8012296:	d83a      	bhi.n	801230e <mem_trim+0x1ea>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 8012298:	8afa      	ldrh	r2, [r7, #22]
 801229a:	8bfb      	ldrh	r3, [r7, #30]
 801229c:	4413      	add	r3, r2
 801229e:	b29b      	uxth	r3, r3
 80122a0:	3308      	adds	r3, #8
 80122a2:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 80122a4:	69bb      	ldr	r3, [r7, #24]
 80122a6:	881b      	ldrh	r3, [r3, #0]
 80122a8:	f242 7210 	movw	r2, #10000	; 0x2710
 80122ac:	4293      	cmp	r3, r2
 80122ae:	d106      	bne.n	80122be <mem_trim+0x19a>
 80122b0:	4b1d      	ldr	r3, [pc, #116]	; (8012328 <mem_trim+0x204>)
 80122b2:	f240 3216 	movw	r2, #790	; 0x316
 80122b6:	4921      	ldr	r1, [pc, #132]	; (801233c <mem_trim+0x218>)
 80122b8:	481d      	ldr	r0, [pc, #116]	; (8012330 <mem_trim+0x20c>)
 80122ba:	f00b f8f7 	bl	801d4ac <iprintf>
    mem2 = ptr_to_mem(ptr2);
 80122be:	89fb      	ldrh	r3, [r7, #14]
 80122c0:	4618      	mov	r0, r3
 80122c2:	f7ff fd45 	bl	8011d50 <ptr_to_mem>
 80122c6:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 80122c8:	4b1d      	ldr	r3, [pc, #116]	; (8012340 <mem_trim+0x21c>)
 80122ca:	681b      	ldr	r3, [r3, #0]
 80122cc:	693a      	ldr	r2, [r7, #16]
 80122ce:	429a      	cmp	r2, r3
 80122d0:	d202      	bcs.n	80122d8 <mem_trim+0x1b4>
      lfree = mem2;
 80122d2:	4a1b      	ldr	r2, [pc, #108]	; (8012340 <mem_trim+0x21c>)
 80122d4:	693b      	ldr	r3, [r7, #16]
 80122d6:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 80122d8:	693b      	ldr	r3, [r7, #16]
 80122da:	2200      	movs	r2, #0
 80122dc:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 80122de:	69bb      	ldr	r3, [r7, #24]
 80122e0:	881a      	ldrh	r2, [r3, #0]
 80122e2:	693b      	ldr	r3, [r7, #16]
 80122e4:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 80122e6:	693b      	ldr	r3, [r7, #16]
 80122e8:	8afa      	ldrh	r2, [r7, #22]
 80122ea:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 80122ec:	69bb      	ldr	r3, [r7, #24]
 80122ee:	89fa      	ldrh	r2, [r7, #14]
 80122f0:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 80122f2:	693b      	ldr	r3, [r7, #16]
 80122f4:	881b      	ldrh	r3, [r3, #0]
 80122f6:	f242 7210 	movw	r2, #10000	; 0x2710
 80122fa:	4293      	cmp	r3, r2
 80122fc:	d007      	beq.n	801230e <mem_trim+0x1ea>
      ptr_to_mem(mem2->next)->prev = ptr2;
 80122fe:	693b      	ldr	r3, [r7, #16]
 8012300:	881b      	ldrh	r3, [r3, #0]
 8012302:	4618      	mov	r0, r3
 8012304:	f7ff fd24 	bl	8011d50 <ptr_to_mem>
 8012308:	4602      	mov	r2, r0
 801230a:	89fb      	ldrh	r3, [r7, #14]
 801230c:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 801230e:	480a      	ldr	r0, [pc, #40]	; (8012338 <mem_trim+0x214>)
 8012310:	f009 fe8f 	bl	801c032 <sys_mutex_unlock>
  return rmem;
 8012314:	687b      	ldr	r3, [r7, #4]
}
 8012316:	4618      	mov	r0, r3
 8012318:	3720      	adds	r7, #32
 801231a:	46bd      	mov	sp, r7
 801231c:	bd80      	pop	{r7, pc}
 801231e:	bf00      	nop
 8012320:	20020ea4 	.word	0x20020ea4
 8012324:	20020ea8 	.word	0x20020ea8
 8012328:	0801e56c 	.word	0x0801e56c
 801232c:	0801e6f8 	.word	0x0801e6f8
 8012330:	0801e5b4 	.word	0x0801e5b4
 8012334:	0801e710 	.word	0x0801e710
 8012338:	20020eac 	.word	0x20020eac
 801233c:	0801e730 	.word	0x0801e730
 8012340:	20020eb0 	.word	0x20020eb0

08012344 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 8012344:	b580      	push	{r7, lr}
 8012346:	b088      	sub	sp, #32
 8012348:	af00      	add	r7, sp, #0
 801234a:	4603      	mov	r3, r0
 801234c:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 801234e:	88fb      	ldrh	r3, [r7, #6]
 8012350:	2b00      	cmp	r3, #0
 8012352:	d101      	bne.n	8012358 <mem_malloc+0x14>
    return NULL;
 8012354:	2300      	movs	r3, #0
 8012356:	e0e6      	b.n	8012526 <mem_malloc+0x1e2>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 8012358:	88fb      	ldrh	r3, [r7, #6]
 801235a:	3303      	adds	r3, #3
 801235c:	b29b      	uxth	r3, r3
 801235e:	f023 0303 	bic.w	r3, r3, #3
 8012362:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 8012364:	8bbb      	ldrh	r3, [r7, #28]
 8012366:	2b0b      	cmp	r3, #11
 8012368:	d801      	bhi.n	801236e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 801236a:	230c      	movs	r3, #12
 801236c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 801236e:	8bbb      	ldrh	r3, [r7, #28]
 8012370:	f242 7210 	movw	r2, #10000	; 0x2710
 8012374:	4293      	cmp	r3, r2
 8012376:	d803      	bhi.n	8012380 <mem_malloc+0x3c>
 8012378:	8bba      	ldrh	r2, [r7, #28]
 801237a:	88fb      	ldrh	r3, [r7, #6]
 801237c:	429a      	cmp	r2, r3
 801237e:	d201      	bcs.n	8012384 <mem_malloc+0x40>
    return NULL;
 8012380:	2300      	movs	r3, #0
 8012382:	e0d0      	b.n	8012526 <mem_malloc+0x1e2>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 8012384:	486a      	ldr	r0, [pc, #424]	; (8012530 <mem_malloc+0x1ec>)
 8012386:	f009 fe45 	bl	801c014 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801238a:	4b6a      	ldr	r3, [pc, #424]	; (8012534 <mem_malloc+0x1f0>)
 801238c:	681b      	ldr	r3, [r3, #0]
 801238e:	4618      	mov	r0, r3
 8012390:	f7ff fcf0 	bl	8011d74 <mem_to_ptr>
 8012394:	4603      	mov	r3, r0
 8012396:	83fb      	strh	r3, [r7, #30]
 8012398:	e0b9      	b.n	801250e <mem_malloc+0x1ca>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 801239a:	8bfb      	ldrh	r3, [r7, #30]
 801239c:	4618      	mov	r0, r3
 801239e:	f7ff fcd7 	bl	8011d50 <ptr_to_mem>
 80123a2:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 80123a4:	697b      	ldr	r3, [r7, #20]
 80123a6:	791b      	ldrb	r3, [r3, #4]
 80123a8:	2b00      	cmp	r3, #0
 80123aa:	f040 80a9 	bne.w	8012500 <mem_malloc+0x1bc>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 80123ae:	697b      	ldr	r3, [r7, #20]
 80123b0:	881b      	ldrh	r3, [r3, #0]
 80123b2:	461a      	mov	r2, r3
 80123b4:	8bfb      	ldrh	r3, [r7, #30]
 80123b6:	1ad3      	subs	r3, r2, r3
 80123b8:	f1a3 0208 	sub.w	r2, r3, #8
 80123bc:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 80123be:	429a      	cmp	r2, r3
 80123c0:	f0c0 809e 	bcc.w	8012500 <mem_malloc+0x1bc>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 80123c4:	697b      	ldr	r3, [r7, #20]
 80123c6:	881b      	ldrh	r3, [r3, #0]
 80123c8:	461a      	mov	r2, r3
 80123ca:	8bfb      	ldrh	r3, [r7, #30]
 80123cc:	1ad3      	subs	r3, r2, r3
 80123ce:	f1a3 0208 	sub.w	r2, r3, #8
 80123d2:	8bbb      	ldrh	r3, [r7, #28]
 80123d4:	3314      	adds	r3, #20
 80123d6:	429a      	cmp	r2, r3
 80123d8:	d335      	bcc.n	8012446 <mem_malloc+0x102>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 80123da:	8bfa      	ldrh	r2, [r7, #30]
 80123dc:	8bbb      	ldrh	r3, [r7, #28]
 80123de:	4413      	add	r3, r2
 80123e0:	b29b      	uxth	r3, r3
 80123e2:	3308      	adds	r3, #8
 80123e4:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 80123e6:	8a7b      	ldrh	r3, [r7, #18]
 80123e8:	f242 7210 	movw	r2, #10000	; 0x2710
 80123ec:	4293      	cmp	r3, r2
 80123ee:	d106      	bne.n	80123fe <mem_malloc+0xba>
 80123f0:	4b51      	ldr	r3, [pc, #324]	; (8012538 <mem_malloc+0x1f4>)
 80123f2:	f240 3287 	movw	r2, #903	; 0x387
 80123f6:	4951      	ldr	r1, [pc, #324]	; (801253c <mem_malloc+0x1f8>)
 80123f8:	4851      	ldr	r0, [pc, #324]	; (8012540 <mem_malloc+0x1fc>)
 80123fa:	f00b f857 	bl	801d4ac <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 80123fe:	8a7b      	ldrh	r3, [r7, #18]
 8012400:	4618      	mov	r0, r3
 8012402:	f7ff fca5 	bl	8011d50 <ptr_to_mem>
 8012406:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 8012408:	68fb      	ldr	r3, [r7, #12]
 801240a:	2200      	movs	r2, #0
 801240c:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 801240e:	697b      	ldr	r3, [r7, #20]
 8012410:	881a      	ldrh	r2, [r3, #0]
 8012412:	68fb      	ldr	r3, [r7, #12]
 8012414:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 8012416:	68fb      	ldr	r3, [r7, #12]
 8012418:	8bfa      	ldrh	r2, [r7, #30]
 801241a:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 801241c:	697b      	ldr	r3, [r7, #20]
 801241e:	8a7a      	ldrh	r2, [r7, #18]
 8012420:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 8012422:	697b      	ldr	r3, [r7, #20]
 8012424:	2201      	movs	r2, #1
 8012426:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	881b      	ldrh	r3, [r3, #0]
 801242c:	f242 7210 	movw	r2, #10000	; 0x2710
 8012430:	4293      	cmp	r3, r2
 8012432:	d00b      	beq.n	801244c <mem_malloc+0x108>
            ptr_to_mem(mem2->next)->prev = ptr2;
 8012434:	68fb      	ldr	r3, [r7, #12]
 8012436:	881b      	ldrh	r3, [r3, #0]
 8012438:	4618      	mov	r0, r3
 801243a:	f7ff fc89 	bl	8011d50 <ptr_to_mem>
 801243e:	4602      	mov	r2, r0
 8012440:	8a7b      	ldrh	r3, [r7, #18]
 8012442:	8053      	strh	r3, [r2, #2]
 8012444:	e002      	b.n	801244c <mem_malloc+0x108>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 8012446:	697b      	ldr	r3, [r7, #20]
 8012448:	2201      	movs	r2, #1
 801244a:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 801244c:	4b39      	ldr	r3, [pc, #228]	; (8012534 <mem_malloc+0x1f0>)
 801244e:	681b      	ldr	r3, [r3, #0]
 8012450:	697a      	ldr	r2, [r7, #20]
 8012452:	429a      	cmp	r2, r3
 8012454:	d127      	bne.n	80124a6 <mem_malloc+0x162>
          struct mem *cur = lfree;
 8012456:	4b37      	ldr	r3, [pc, #220]	; (8012534 <mem_malloc+0x1f0>)
 8012458:	681b      	ldr	r3, [r3, #0]
 801245a:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 801245c:	e005      	b.n	801246a <mem_malloc+0x126>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 801245e:	69bb      	ldr	r3, [r7, #24]
 8012460:	881b      	ldrh	r3, [r3, #0]
 8012462:	4618      	mov	r0, r3
 8012464:	f7ff fc74 	bl	8011d50 <ptr_to_mem>
 8012468:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 801246a:	69bb      	ldr	r3, [r7, #24]
 801246c:	791b      	ldrb	r3, [r3, #4]
 801246e:	2b00      	cmp	r3, #0
 8012470:	d004      	beq.n	801247c <mem_malloc+0x138>
 8012472:	4b34      	ldr	r3, [pc, #208]	; (8012544 <mem_malloc+0x200>)
 8012474:	681b      	ldr	r3, [r3, #0]
 8012476:	69ba      	ldr	r2, [r7, #24]
 8012478:	429a      	cmp	r2, r3
 801247a:	d1f0      	bne.n	801245e <mem_malloc+0x11a>
          }
          lfree = cur;
 801247c:	4a2d      	ldr	r2, [pc, #180]	; (8012534 <mem_malloc+0x1f0>)
 801247e:	69bb      	ldr	r3, [r7, #24]
 8012480:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 8012482:	4b2c      	ldr	r3, [pc, #176]	; (8012534 <mem_malloc+0x1f0>)
 8012484:	681a      	ldr	r2, [r3, #0]
 8012486:	4b2f      	ldr	r3, [pc, #188]	; (8012544 <mem_malloc+0x200>)
 8012488:	681b      	ldr	r3, [r3, #0]
 801248a:	429a      	cmp	r2, r3
 801248c:	d00b      	beq.n	80124a6 <mem_malloc+0x162>
 801248e:	4b29      	ldr	r3, [pc, #164]	; (8012534 <mem_malloc+0x1f0>)
 8012490:	681b      	ldr	r3, [r3, #0]
 8012492:	791b      	ldrb	r3, [r3, #4]
 8012494:	2b00      	cmp	r3, #0
 8012496:	d006      	beq.n	80124a6 <mem_malloc+0x162>
 8012498:	4b27      	ldr	r3, [pc, #156]	; (8012538 <mem_malloc+0x1f4>)
 801249a:	f240 32b5 	movw	r2, #949	; 0x3b5
 801249e:	492a      	ldr	r1, [pc, #168]	; (8012548 <mem_malloc+0x204>)
 80124a0:	4827      	ldr	r0, [pc, #156]	; (8012540 <mem_malloc+0x1fc>)
 80124a2:	f00b f803 	bl	801d4ac <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 80124a6:	4822      	ldr	r0, [pc, #136]	; (8012530 <mem_malloc+0x1ec>)
 80124a8:	f009 fdc3 	bl	801c032 <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 80124ac:	8bba      	ldrh	r2, [r7, #28]
 80124ae:	697b      	ldr	r3, [r7, #20]
 80124b0:	4413      	add	r3, r2
 80124b2:	3308      	adds	r3, #8
 80124b4:	4a23      	ldr	r2, [pc, #140]	; (8012544 <mem_malloc+0x200>)
 80124b6:	6812      	ldr	r2, [r2, #0]
 80124b8:	4293      	cmp	r3, r2
 80124ba:	d906      	bls.n	80124ca <mem_malloc+0x186>
 80124bc:	4b1e      	ldr	r3, [pc, #120]	; (8012538 <mem_malloc+0x1f4>)
 80124be:	f240 32b9 	movw	r2, #953	; 0x3b9
 80124c2:	4922      	ldr	r1, [pc, #136]	; (801254c <mem_malloc+0x208>)
 80124c4:	481e      	ldr	r0, [pc, #120]	; (8012540 <mem_malloc+0x1fc>)
 80124c6:	f00a fff1 	bl	801d4ac <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 80124ca:	697b      	ldr	r3, [r7, #20]
 80124cc:	f003 0303 	and.w	r3, r3, #3
 80124d0:	2b00      	cmp	r3, #0
 80124d2:	d006      	beq.n	80124e2 <mem_malloc+0x19e>
 80124d4:	4b18      	ldr	r3, [pc, #96]	; (8012538 <mem_malloc+0x1f4>)
 80124d6:	f240 32bb 	movw	r2, #955	; 0x3bb
 80124da:	491d      	ldr	r1, [pc, #116]	; (8012550 <mem_malloc+0x20c>)
 80124dc:	4818      	ldr	r0, [pc, #96]	; (8012540 <mem_malloc+0x1fc>)
 80124de:	f00a ffe5 	bl	801d4ac <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 80124e2:	697b      	ldr	r3, [r7, #20]
 80124e4:	f003 0303 	and.w	r3, r3, #3
 80124e8:	2b00      	cmp	r3, #0
 80124ea:	d006      	beq.n	80124fa <mem_malloc+0x1b6>
 80124ec:	4b12      	ldr	r3, [pc, #72]	; (8012538 <mem_malloc+0x1f4>)
 80124ee:	f240 32bd 	movw	r2, #957	; 0x3bd
 80124f2:	4918      	ldr	r1, [pc, #96]	; (8012554 <mem_malloc+0x210>)
 80124f4:	4812      	ldr	r0, [pc, #72]	; (8012540 <mem_malloc+0x1fc>)
 80124f6:	f00a ffd9 	bl	801d4ac <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 80124fa:	697b      	ldr	r3, [r7, #20]
 80124fc:	3308      	adds	r3, #8
 80124fe:	e012      	b.n	8012526 <mem_malloc+0x1e2>
         ptr = ptr_to_mem(ptr)->next) {
 8012500:	8bfb      	ldrh	r3, [r7, #30]
 8012502:	4618      	mov	r0, r3
 8012504:	f7ff fc24 	bl	8011d50 <ptr_to_mem>
 8012508:	4603      	mov	r3, r0
 801250a:	881b      	ldrh	r3, [r3, #0]
 801250c:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 801250e:	8bfa      	ldrh	r2, [r7, #30]
 8012510:	8bb9      	ldrh	r1, [r7, #28]
 8012512:	f242 7310 	movw	r3, #10000	; 0x2710
 8012516:	1a5b      	subs	r3, r3, r1
 8012518:	429a      	cmp	r2, r3
 801251a:	f4ff af3e 	bcc.w	801239a <mem_malloc+0x56>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 801251e:	4804      	ldr	r0, [pc, #16]	; (8012530 <mem_malloc+0x1ec>)
 8012520:	f009 fd87 	bl	801c032 <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 8012524:	2300      	movs	r3, #0
}
 8012526:	4618      	mov	r0, r3
 8012528:	3720      	adds	r7, #32
 801252a:	46bd      	mov	sp, r7
 801252c:	bd80      	pop	{r7, pc}
 801252e:	bf00      	nop
 8012530:	20020eac 	.word	0x20020eac
 8012534:	20020eb0 	.word	0x20020eb0
 8012538:	0801e56c 	.word	0x0801e56c
 801253c:	0801e730 	.word	0x0801e730
 8012540:	0801e5b4 	.word	0x0801e5b4
 8012544:	20020ea8 	.word	0x20020ea8
 8012548:	0801e744 	.word	0x0801e744
 801254c:	0801e760 	.word	0x0801e760
 8012550:	0801e790 	.word	0x0801e790
 8012554:	0801e7c0 	.word	0x0801e7c0

08012558 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 8012558:	b480      	push	{r7}
 801255a:	b085      	sub	sp, #20
 801255c:	af00      	add	r7, sp, #0
 801255e:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 8012560:	687b      	ldr	r3, [r7, #4]
 8012562:	689b      	ldr	r3, [r3, #8]
 8012564:	2200      	movs	r2, #0
 8012566:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 8012568:	687b      	ldr	r3, [r7, #4]
 801256a:	685b      	ldr	r3, [r3, #4]
 801256c:	3303      	adds	r3, #3
 801256e:	f023 0303 	bic.w	r3, r3, #3
 8012572:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 8012574:	2300      	movs	r3, #0
 8012576:	60fb      	str	r3, [r7, #12]
 8012578:	e011      	b.n	801259e <memp_init_pool+0x46>
    memp->next = *desc->tab;
 801257a:	687b      	ldr	r3, [r7, #4]
 801257c:	689b      	ldr	r3, [r3, #8]
 801257e:	681a      	ldr	r2, [r3, #0]
 8012580:	68bb      	ldr	r3, [r7, #8]
 8012582:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	689b      	ldr	r3, [r3, #8]
 8012588:	68ba      	ldr	r2, [r7, #8]
 801258a:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 801258c:	687b      	ldr	r3, [r7, #4]
 801258e:	881b      	ldrh	r3, [r3, #0]
 8012590:	461a      	mov	r2, r3
 8012592:	68bb      	ldr	r3, [r7, #8]
 8012594:	4413      	add	r3, r2
 8012596:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 8012598:	68fb      	ldr	r3, [r7, #12]
 801259a:	3301      	adds	r3, #1
 801259c:	60fb      	str	r3, [r7, #12]
 801259e:	687b      	ldr	r3, [r7, #4]
 80125a0:	885b      	ldrh	r3, [r3, #2]
 80125a2:	461a      	mov	r2, r3
 80125a4:	68fb      	ldr	r3, [r7, #12]
 80125a6:	4293      	cmp	r3, r2
 80125a8:	dbe7      	blt.n	801257a <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 80125aa:	bf00      	nop
 80125ac:	bf00      	nop
 80125ae:	3714      	adds	r7, #20
 80125b0:	46bd      	mov	sp, r7
 80125b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80125b6:	4770      	bx	lr

080125b8 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 80125b8:	b580      	push	{r7, lr}
 80125ba:	b082      	sub	sp, #8
 80125bc:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80125be:	2300      	movs	r3, #0
 80125c0:	80fb      	strh	r3, [r7, #6]
 80125c2:	e009      	b.n	80125d8 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 80125c4:	88fb      	ldrh	r3, [r7, #6]
 80125c6:	4a08      	ldr	r2, [pc, #32]	; (80125e8 <memp_init+0x30>)
 80125c8:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80125cc:	4618      	mov	r0, r3
 80125ce:	f7ff ffc3 	bl	8012558 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 80125d2:	88fb      	ldrh	r3, [r7, #6]
 80125d4:	3301      	adds	r3, #1
 80125d6:	80fb      	strh	r3, [r7, #6]
 80125d8:	88fb      	ldrh	r3, [r7, #6]
 80125da:	2b0c      	cmp	r3, #12
 80125dc:	d9f2      	bls.n	80125c4 <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 80125de:	bf00      	nop
 80125e0:	bf00      	nop
 80125e2:	3708      	adds	r7, #8
 80125e4:	46bd      	mov	sp, r7
 80125e6:	bd80      	pop	{r7, pc}
 80125e8:	08021008 	.word	0x08021008

080125ec <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 80125ec:	b580      	push	{r7, lr}
 80125ee:	b084      	sub	sp, #16
 80125f0:	af00      	add	r7, sp, #0
 80125f2:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 80125f4:	f009 fd50 	bl	801c098 <sys_arch_protect>
 80125f8:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	689b      	ldr	r3, [r3, #8]
 80125fe:	681b      	ldr	r3, [r3, #0]
 8012600:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 8012602:	68bb      	ldr	r3, [r7, #8]
 8012604:	2b00      	cmp	r3, #0
 8012606:	d015      	beq.n	8012634 <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 8012608:	687b      	ldr	r3, [r7, #4]
 801260a:	689b      	ldr	r3, [r3, #8]
 801260c:	68ba      	ldr	r2, [r7, #8]
 801260e:	6812      	ldr	r2, [r2, #0]
 8012610:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 8012612:	68bb      	ldr	r3, [r7, #8]
 8012614:	f003 0303 	and.w	r3, r3, #3
 8012618:	2b00      	cmp	r3, #0
 801261a:	d006      	beq.n	801262a <do_memp_malloc_pool+0x3e>
 801261c:	4b09      	ldr	r3, [pc, #36]	; (8012644 <do_memp_malloc_pool+0x58>)
 801261e:	f44f 728c 	mov.w	r2, #280	; 0x118
 8012622:	4909      	ldr	r1, [pc, #36]	; (8012648 <do_memp_malloc_pool+0x5c>)
 8012624:	4809      	ldr	r0, [pc, #36]	; (801264c <do_memp_malloc_pool+0x60>)
 8012626:	f00a ff41 	bl	801d4ac <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 801262a:	68f8      	ldr	r0, [r7, #12]
 801262c:	f009 fd42 	bl	801c0b4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 8012630:	68bb      	ldr	r3, [r7, #8]
 8012632:	e003      	b.n	801263c <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 8012634:	68f8      	ldr	r0, [r7, #12]
 8012636:	f009 fd3d 	bl	801c0b4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 801263a:	2300      	movs	r3, #0
}
 801263c:	4618      	mov	r0, r3
 801263e:	3710      	adds	r7, #16
 8012640:	46bd      	mov	sp, r7
 8012642:	bd80      	pop	{r7, pc}
 8012644:	0801e7e4 	.word	0x0801e7e4
 8012648:	0801e814 	.word	0x0801e814
 801264c:	0801e838 	.word	0x0801e838

08012650 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 8012650:	b580      	push	{r7, lr}
 8012652:	b082      	sub	sp, #8
 8012654:	af00      	add	r7, sp, #0
 8012656:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8012658:	687b      	ldr	r3, [r7, #4]
 801265a:	2b00      	cmp	r3, #0
 801265c:	d106      	bne.n	801266c <memp_malloc_pool+0x1c>
 801265e:	4b0a      	ldr	r3, [pc, #40]	; (8012688 <memp_malloc_pool+0x38>)
 8012660:	f44f 729e 	mov.w	r2, #316	; 0x13c
 8012664:	4909      	ldr	r1, [pc, #36]	; (801268c <memp_malloc_pool+0x3c>)
 8012666:	480a      	ldr	r0, [pc, #40]	; (8012690 <memp_malloc_pool+0x40>)
 8012668:	f00a ff20 	bl	801d4ac <iprintf>
  if (desc == NULL) {
 801266c:	687b      	ldr	r3, [r7, #4]
 801266e:	2b00      	cmp	r3, #0
 8012670:	d101      	bne.n	8012676 <memp_malloc_pool+0x26>
    return NULL;
 8012672:	2300      	movs	r3, #0
 8012674:	e003      	b.n	801267e <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 8012676:	6878      	ldr	r0, [r7, #4]
 8012678:	f7ff ffb8 	bl	80125ec <do_memp_malloc_pool>
 801267c:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 801267e:	4618      	mov	r0, r3
 8012680:	3708      	adds	r7, #8
 8012682:	46bd      	mov	sp, r7
 8012684:	bd80      	pop	{r7, pc}
 8012686:	bf00      	nop
 8012688:	0801e7e4 	.word	0x0801e7e4
 801268c:	0801e860 	.word	0x0801e860
 8012690:	0801e838 	.word	0x0801e838

08012694 <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 8012694:	b580      	push	{r7, lr}
 8012696:	b084      	sub	sp, #16
 8012698:	af00      	add	r7, sp, #0
 801269a:	4603      	mov	r3, r0
 801269c:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 801269e:	79fb      	ldrb	r3, [r7, #7]
 80126a0:	2b0c      	cmp	r3, #12
 80126a2:	d908      	bls.n	80126b6 <memp_malloc+0x22>
 80126a4:	4b0a      	ldr	r3, [pc, #40]	; (80126d0 <memp_malloc+0x3c>)
 80126a6:	f240 1257 	movw	r2, #343	; 0x157
 80126aa:	490a      	ldr	r1, [pc, #40]	; (80126d4 <memp_malloc+0x40>)
 80126ac:	480a      	ldr	r0, [pc, #40]	; (80126d8 <memp_malloc+0x44>)
 80126ae:	f00a fefd 	bl	801d4ac <iprintf>
 80126b2:	2300      	movs	r3, #0
 80126b4:	e008      	b.n	80126c8 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 80126b6:	79fb      	ldrb	r3, [r7, #7]
 80126b8:	4a08      	ldr	r2, [pc, #32]	; (80126dc <memp_malloc+0x48>)
 80126ba:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80126be:	4618      	mov	r0, r3
 80126c0:	f7ff ff94 	bl	80125ec <do_memp_malloc_pool>
 80126c4:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 80126c6:	68fb      	ldr	r3, [r7, #12]
}
 80126c8:	4618      	mov	r0, r3
 80126ca:	3710      	adds	r7, #16
 80126cc:	46bd      	mov	sp, r7
 80126ce:	bd80      	pop	{r7, pc}
 80126d0:	0801e7e4 	.word	0x0801e7e4
 80126d4:	0801e874 	.word	0x0801e874
 80126d8:	0801e838 	.word	0x0801e838
 80126dc:	08021008 	.word	0x08021008

080126e0 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 80126e0:	b580      	push	{r7, lr}
 80126e2:	b084      	sub	sp, #16
 80126e4:	af00      	add	r7, sp, #0
 80126e6:	6078      	str	r0, [r7, #4]
 80126e8:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 80126ea:	683b      	ldr	r3, [r7, #0]
 80126ec:	f003 0303 	and.w	r3, r3, #3
 80126f0:	2b00      	cmp	r3, #0
 80126f2:	d006      	beq.n	8012702 <do_memp_free_pool+0x22>
 80126f4:	4b0d      	ldr	r3, [pc, #52]	; (801272c <do_memp_free_pool+0x4c>)
 80126f6:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 80126fa:	490d      	ldr	r1, [pc, #52]	; (8012730 <do_memp_free_pool+0x50>)
 80126fc:	480d      	ldr	r0, [pc, #52]	; (8012734 <do_memp_free_pool+0x54>)
 80126fe:	f00a fed5 	bl	801d4ac <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 8012702:	683b      	ldr	r3, [r7, #0]
 8012704:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 8012706:	f009 fcc7 	bl	801c098 <sys_arch_protect>
 801270a:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 801270c:	687b      	ldr	r3, [r7, #4]
 801270e:	689b      	ldr	r3, [r3, #8]
 8012710:	681a      	ldr	r2, [r3, #0]
 8012712:	68fb      	ldr	r3, [r7, #12]
 8012714:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 8012716:	687b      	ldr	r3, [r7, #4]
 8012718:	689b      	ldr	r3, [r3, #8]
 801271a:	68fa      	ldr	r2, [r7, #12]
 801271c:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 801271e:	68b8      	ldr	r0, [r7, #8]
 8012720:	f009 fcc8 	bl	801c0b4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 8012724:	bf00      	nop
 8012726:	3710      	adds	r7, #16
 8012728:	46bd      	mov	sp, r7
 801272a:	bd80      	pop	{r7, pc}
 801272c:	0801e7e4 	.word	0x0801e7e4
 8012730:	0801e894 	.word	0x0801e894
 8012734:	0801e838 	.word	0x0801e838

08012738 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 8012738:	b580      	push	{r7, lr}
 801273a:	b082      	sub	sp, #8
 801273c:	af00      	add	r7, sp, #0
 801273e:	6078      	str	r0, [r7, #4]
 8012740:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	2b00      	cmp	r3, #0
 8012746:	d106      	bne.n	8012756 <memp_free_pool+0x1e>
 8012748:	4b0a      	ldr	r3, [pc, #40]	; (8012774 <memp_free_pool+0x3c>)
 801274a:	f240 1295 	movw	r2, #405	; 0x195
 801274e:	490a      	ldr	r1, [pc, #40]	; (8012778 <memp_free_pool+0x40>)
 8012750:	480a      	ldr	r0, [pc, #40]	; (801277c <memp_free_pool+0x44>)
 8012752:	f00a feab 	bl	801d4ac <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 8012756:	687b      	ldr	r3, [r7, #4]
 8012758:	2b00      	cmp	r3, #0
 801275a:	d007      	beq.n	801276c <memp_free_pool+0x34>
 801275c:	683b      	ldr	r3, [r7, #0]
 801275e:	2b00      	cmp	r3, #0
 8012760:	d004      	beq.n	801276c <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 8012762:	6839      	ldr	r1, [r7, #0]
 8012764:	6878      	ldr	r0, [r7, #4]
 8012766:	f7ff ffbb 	bl	80126e0 <do_memp_free_pool>
 801276a:	e000      	b.n	801276e <memp_free_pool+0x36>
    return;
 801276c:	bf00      	nop
}
 801276e:	3708      	adds	r7, #8
 8012770:	46bd      	mov	sp, r7
 8012772:	bd80      	pop	{r7, pc}
 8012774:	0801e7e4 	.word	0x0801e7e4
 8012778:	0801e860 	.word	0x0801e860
 801277c:	0801e838 	.word	0x0801e838

08012780 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 8012780:	b580      	push	{r7, lr}
 8012782:	b082      	sub	sp, #8
 8012784:	af00      	add	r7, sp, #0
 8012786:	4603      	mov	r3, r0
 8012788:	6039      	str	r1, [r7, #0]
 801278a:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 801278c:	79fb      	ldrb	r3, [r7, #7]
 801278e:	2b0c      	cmp	r3, #12
 8012790:	d907      	bls.n	80127a2 <memp_free+0x22>
 8012792:	4b0c      	ldr	r3, [pc, #48]	; (80127c4 <memp_free+0x44>)
 8012794:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 8012798:	490b      	ldr	r1, [pc, #44]	; (80127c8 <memp_free+0x48>)
 801279a:	480c      	ldr	r0, [pc, #48]	; (80127cc <memp_free+0x4c>)
 801279c:	f00a fe86 	bl	801d4ac <iprintf>
 80127a0:	e00c      	b.n	80127bc <memp_free+0x3c>

  if (mem == NULL) {
 80127a2:	683b      	ldr	r3, [r7, #0]
 80127a4:	2b00      	cmp	r3, #0
 80127a6:	d008      	beq.n	80127ba <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 80127a8:	79fb      	ldrb	r3, [r7, #7]
 80127aa:	4a09      	ldr	r2, [pc, #36]	; (80127d0 <memp_free+0x50>)
 80127ac:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80127b0:	6839      	ldr	r1, [r7, #0]
 80127b2:	4618      	mov	r0, r3
 80127b4:	f7ff ff94 	bl	80126e0 <do_memp_free_pool>
 80127b8:	e000      	b.n	80127bc <memp_free+0x3c>
    return;
 80127ba:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 80127bc:	3708      	adds	r7, #8
 80127be:	46bd      	mov	sp, r7
 80127c0:	bd80      	pop	{r7, pc}
 80127c2:	bf00      	nop
 80127c4:	0801e7e4 	.word	0x0801e7e4
 80127c8:	0801e8b4 	.word	0x0801e8b4
 80127cc:	0801e838 	.word	0x0801e838
 80127d0:	08021008 	.word	0x08021008

080127d4 <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 80127d4:	b480      	push	{r7}
 80127d6:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 80127d8:	bf00      	nop
 80127da:	46bd      	mov	sp, r7
 80127dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80127e0:	4770      	bx	lr
	...

080127e4 <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 80127e4:	b580      	push	{r7, lr}
 80127e6:	b086      	sub	sp, #24
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	60f8      	str	r0, [r7, #12]
 80127ec:	60b9      	str	r1, [r7, #8]
 80127ee:	607a      	str	r2, [r7, #4]
 80127f0:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 80127f2:	68fb      	ldr	r3, [r7, #12]
 80127f4:	2b00      	cmp	r3, #0
 80127f6:	d108      	bne.n	801280a <netif_add+0x26>
 80127f8:	4b57      	ldr	r3, [pc, #348]	; (8012958 <netif_add+0x174>)
 80127fa:	f240 1227 	movw	r2, #295	; 0x127
 80127fe:	4957      	ldr	r1, [pc, #348]	; (801295c <netif_add+0x178>)
 8012800:	4857      	ldr	r0, [pc, #348]	; (8012960 <netif_add+0x17c>)
 8012802:	f00a fe53 	bl	801d4ac <iprintf>
 8012806:	2300      	movs	r3, #0
 8012808:	e0a2      	b.n	8012950 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 801280a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801280c:	2b00      	cmp	r3, #0
 801280e:	d108      	bne.n	8012822 <netif_add+0x3e>
 8012810:	4b51      	ldr	r3, [pc, #324]	; (8012958 <netif_add+0x174>)
 8012812:	f44f 7294 	mov.w	r2, #296	; 0x128
 8012816:	4953      	ldr	r1, [pc, #332]	; (8012964 <netif_add+0x180>)
 8012818:	4851      	ldr	r0, [pc, #324]	; (8012960 <netif_add+0x17c>)
 801281a:	f00a fe47 	bl	801d4ac <iprintf>
 801281e:	2300      	movs	r3, #0
 8012820:	e096      	b.n	8012950 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 8012822:	68bb      	ldr	r3, [r7, #8]
 8012824:	2b00      	cmp	r3, #0
 8012826:	d101      	bne.n	801282c <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 8012828:	4b4f      	ldr	r3, [pc, #316]	; (8012968 <netif_add+0x184>)
 801282a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 801282c:	687b      	ldr	r3, [r7, #4]
 801282e:	2b00      	cmp	r3, #0
 8012830:	d101      	bne.n	8012836 <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 8012832:	4b4d      	ldr	r3, [pc, #308]	; (8012968 <netif_add+0x184>)
 8012834:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8012836:	683b      	ldr	r3, [r7, #0]
 8012838:	2b00      	cmp	r3, #0
 801283a:	d101      	bne.n	8012840 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 801283c:	4b4a      	ldr	r3, [pc, #296]	; (8012968 <netif_add+0x184>)
 801283e:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 8012840:	68fb      	ldr	r3, [r7, #12]
 8012842:	2200      	movs	r2, #0
 8012844:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 8012846:	68fb      	ldr	r3, [r7, #12]
 8012848:	2200      	movs	r2, #0
 801284a:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 801284c:	68fb      	ldr	r3, [r7, #12]
 801284e:	2200      	movs	r2, #0
 8012850:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 8012852:	68fb      	ldr	r3, [r7, #12]
 8012854:	4a45      	ldr	r2, [pc, #276]	; (801296c <netif_add+0x188>)
 8012856:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 8012858:	68fb      	ldr	r3, [r7, #12]
 801285a:	2200      	movs	r2, #0
 801285c:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	2200      	movs	r2, #0
 8012862:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	2200      	movs	r2, #0
 801286a:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 801286c:	68fb      	ldr	r3, [r7, #12]
 801286e:	6a3a      	ldr	r2, [r7, #32]
 8012870:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 8012872:	4b3f      	ldr	r3, [pc, #252]	; (8012970 <netif_add+0x18c>)
 8012874:	781a      	ldrb	r2, [r3, #0]
 8012876:	68fb      	ldr	r3, [r7, #12]
 8012878:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 801287c:	68fb      	ldr	r3, [r7, #12]
 801287e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8012880:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 8012882:	683b      	ldr	r3, [r7, #0]
 8012884:	687a      	ldr	r2, [r7, #4]
 8012886:	68b9      	ldr	r1, [r7, #8]
 8012888:	68f8      	ldr	r0, [r7, #12]
 801288a:	f000 f913 	bl	8012ab4 <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 801288e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012890:	68f8      	ldr	r0, [r7, #12]
 8012892:	4798      	blx	r3
 8012894:	4603      	mov	r3, r0
 8012896:	2b00      	cmp	r3, #0
 8012898:	d001      	beq.n	801289e <netif_add+0xba>
    return NULL;
 801289a:	2300      	movs	r3, #0
 801289c:	e058      	b.n	8012950 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 801289e:	68fb      	ldr	r3, [r7, #12]
 80128a0:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80128a4:	2bff      	cmp	r3, #255	; 0xff
 80128a6:	d103      	bne.n	80128b0 <netif_add+0xcc>
        netif->num = 0;
 80128a8:	68fb      	ldr	r3, [r7, #12]
 80128aa:	2200      	movs	r2, #0
 80128ac:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 80128b0:	2300      	movs	r3, #0
 80128b2:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 80128b4:	4b2f      	ldr	r3, [pc, #188]	; (8012974 <netif_add+0x190>)
 80128b6:	681b      	ldr	r3, [r3, #0]
 80128b8:	617b      	str	r3, [r7, #20]
 80128ba:	e02b      	b.n	8012914 <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 80128bc:	697a      	ldr	r2, [r7, #20]
 80128be:	68fb      	ldr	r3, [r7, #12]
 80128c0:	429a      	cmp	r2, r3
 80128c2:	d106      	bne.n	80128d2 <netif_add+0xee>
 80128c4:	4b24      	ldr	r3, [pc, #144]	; (8012958 <netif_add+0x174>)
 80128c6:	f240 128b 	movw	r2, #395	; 0x18b
 80128ca:	492b      	ldr	r1, [pc, #172]	; (8012978 <netif_add+0x194>)
 80128cc:	4824      	ldr	r0, [pc, #144]	; (8012960 <netif_add+0x17c>)
 80128ce:	f00a fded 	bl	801d4ac <iprintf>
        num_netifs++;
 80128d2:	693b      	ldr	r3, [r7, #16]
 80128d4:	3301      	adds	r3, #1
 80128d6:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 80128d8:	693b      	ldr	r3, [r7, #16]
 80128da:	2bff      	cmp	r3, #255	; 0xff
 80128dc:	dd06      	ble.n	80128ec <netif_add+0x108>
 80128de:	4b1e      	ldr	r3, [pc, #120]	; (8012958 <netif_add+0x174>)
 80128e0:	f240 128d 	movw	r2, #397	; 0x18d
 80128e4:	4925      	ldr	r1, [pc, #148]	; (801297c <netif_add+0x198>)
 80128e6:	481e      	ldr	r0, [pc, #120]	; (8012960 <netif_add+0x17c>)
 80128e8:	f00a fde0 	bl	801d4ac <iprintf>
        if (netif2->num == netif->num) {
 80128ec:	697b      	ldr	r3, [r7, #20]
 80128ee:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 80128f2:	68fb      	ldr	r3, [r7, #12]
 80128f4:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80128f8:	429a      	cmp	r2, r3
 80128fa:	d108      	bne.n	801290e <netif_add+0x12a>
          netif->num++;
 80128fc:	68fb      	ldr	r3, [r7, #12]
 80128fe:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012902:	3301      	adds	r3, #1
 8012904:	b2da      	uxtb	r2, r3
 8012906:	68fb      	ldr	r3, [r7, #12]
 8012908:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 801290c:	e005      	b.n	801291a <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 801290e:	697b      	ldr	r3, [r7, #20]
 8012910:	681b      	ldr	r3, [r3, #0]
 8012912:	617b      	str	r3, [r7, #20]
 8012914:	697b      	ldr	r3, [r7, #20]
 8012916:	2b00      	cmp	r3, #0
 8012918:	d1d0      	bne.n	80128bc <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 801291a:	697b      	ldr	r3, [r7, #20]
 801291c:	2b00      	cmp	r3, #0
 801291e:	d1be      	bne.n	801289e <netif_add+0xba>
  }
  if (netif->num == 254) {
 8012920:	68fb      	ldr	r3, [r7, #12]
 8012922:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012926:	2bfe      	cmp	r3, #254	; 0xfe
 8012928:	d103      	bne.n	8012932 <netif_add+0x14e>
    netif_num = 0;
 801292a:	4b11      	ldr	r3, [pc, #68]	; (8012970 <netif_add+0x18c>)
 801292c:	2200      	movs	r2, #0
 801292e:	701a      	strb	r2, [r3, #0]
 8012930:	e006      	b.n	8012940 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 8012932:	68fb      	ldr	r3, [r7, #12]
 8012934:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012938:	3301      	adds	r3, #1
 801293a:	b2da      	uxtb	r2, r3
 801293c:	4b0c      	ldr	r3, [pc, #48]	; (8012970 <netif_add+0x18c>)
 801293e:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 8012940:	4b0c      	ldr	r3, [pc, #48]	; (8012974 <netif_add+0x190>)
 8012942:	681a      	ldr	r2, [r3, #0]
 8012944:	68fb      	ldr	r3, [r7, #12]
 8012946:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 8012948:	4a0a      	ldr	r2, [pc, #40]	; (8012974 <netif_add+0x190>)
 801294a:	68fb      	ldr	r3, [r7, #12]
 801294c:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 801294e:	68fb      	ldr	r3, [r7, #12]
}
 8012950:	4618      	mov	r0, r3
 8012952:	3718      	adds	r7, #24
 8012954:	46bd      	mov	sp, r7
 8012956:	bd80      	pop	{r7, pc}
 8012958:	0801e8d0 	.word	0x0801e8d0
 801295c:	0801e964 	.word	0x0801e964
 8012960:	0801e920 	.word	0x0801e920
 8012964:	0801e980 	.word	0x0801e980
 8012968:	0802107c 	.word	0x0802107c
 801296c:	08012d8f 	.word	0x08012d8f
 8012970:	20024048 	.word	0x20024048
 8012974:	20024040 	.word	0x20024040
 8012978:	0801e9a4 	.word	0x0801e9a4
 801297c:	0801e9b8 	.word	0x0801e9b8

08012980 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 8012980:	b580      	push	{r7, lr}
 8012982:	b082      	sub	sp, #8
 8012984:	af00      	add	r7, sp, #0
 8012986:	6078      	str	r0, [r7, #4]
 8012988:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 801298a:	6839      	ldr	r1, [r7, #0]
 801298c:	6878      	ldr	r0, [r7, #4]
 801298e:	f002 fb8d 	bl	80150ac <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 8012992:	6839      	ldr	r1, [r7, #0]
 8012994:	6878      	ldr	r0, [r7, #4]
 8012996:	f006 ff91 	bl	80198bc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 801299a:	bf00      	nop
 801299c:	3708      	adds	r7, #8
 801299e:	46bd      	mov	sp, r7
 80129a0:	bd80      	pop	{r7, pc}
	...

080129a4 <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 80129a4:	b580      	push	{r7, lr}
 80129a6:	b086      	sub	sp, #24
 80129a8:	af00      	add	r7, sp, #0
 80129aa:	60f8      	str	r0, [r7, #12]
 80129ac:	60b9      	str	r1, [r7, #8]
 80129ae:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 80129b0:	68bb      	ldr	r3, [r7, #8]
 80129b2:	2b00      	cmp	r3, #0
 80129b4:	d106      	bne.n	80129c4 <netif_do_set_ipaddr+0x20>
 80129b6:	4b1d      	ldr	r3, [pc, #116]	; (8012a2c <netif_do_set_ipaddr+0x88>)
 80129b8:	f240 12cb 	movw	r2, #459	; 0x1cb
 80129bc:	491c      	ldr	r1, [pc, #112]	; (8012a30 <netif_do_set_ipaddr+0x8c>)
 80129be:	481d      	ldr	r0, [pc, #116]	; (8012a34 <netif_do_set_ipaddr+0x90>)
 80129c0:	f00a fd74 	bl	801d4ac <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 80129c4:	687b      	ldr	r3, [r7, #4]
 80129c6:	2b00      	cmp	r3, #0
 80129c8:	d106      	bne.n	80129d8 <netif_do_set_ipaddr+0x34>
 80129ca:	4b18      	ldr	r3, [pc, #96]	; (8012a2c <netif_do_set_ipaddr+0x88>)
 80129cc:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 80129d0:	4917      	ldr	r1, [pc, #92]	; (8012a30 <netif_do_set_ipaddr+0x8c>)
 80129d2:	4818      	ldr	r0, [pc, #96]	; (8012a34 <netif_do_set_ipaddr+0x90>)
 80129d4:	f00a fd6a 	bl	801d4ac <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 80129d8:	68bb      	ldr	r3, [r7, #8]
 80129da:	681a      	ldr	r2, [r3, #0]
 80129dc:	68fb      	ldr	r3, [r7, #12]
 80129de:	3304      	adds	r3, #4
 80129e0:	681b      	ldr	r3, [r3, #0]
 80129e2:	429a      	cmp	r2, r3
 80129e4:	d01c      	beq.n	8012a20 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 80129e6:	68bb      	ldr	r3, [r7, #8]
 80129e8:	681b      	ldr	r3, [r3, #0]
 80129ea:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 80129ec:	68fb      	ldr	r3, [r7, #12]
 80129ee:	3304      	adds	r3, #4
 80129f0:	681a      	ldr	r2, [r3, #0]
 80129f2:	687b      	ldr	r3, [r7, #4]
 80129f4:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 80129f6:	f107 0314 	add.w	r3, r7, #20
 80129fa:	4619      	mov	r1, r3
 80129fc:	6878      	ldr	r0, [r7, #4]
 80129fe:	f7ff ffbf 	bl	8012980 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 8012a02:	68bb      	ldr	r3, [r7, #8]
 8012a04:	2b00      	cmp	r3, #0
 8012a06:	d002      	beq.n	8012a0e <netif_do_set_ipaddr+0x6a>
 8012a08:	68bb      	ldr	r3, [r7, #8]
 8012a0a:	681b      	ldr	r3, [r3, #0]
 8012a0c:	e000      	b.n	8012a10 <netif_do_set_ipaddr+0x6c>
 8012a0e:	2300      	movs	r3, #0
 8012a10:	68fa      	ldr	r2, [r7, #12]
 8012a12:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 8012a14:	2101      	movs	r1, #1
 8012a16:	68f8      	ldr	r0, [r7, #12]
 8012a18:	f000 f8d2 	bl	8012bc0 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 8012a1c:	2301      	movs	r3, #1
 8012a1e:	e000      	b.n	8012a22 <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 8012a20:	2300      	movs	r3, #0
}
 8012a22:	4618      	mov	r0, r3
 8012a24:	3718      	adds	r7, #24
 8012a26:	46bd      	mov	sp, r7
 8012a28:	bd80      	pop	{r7, pc}
 8012a2a:	bf00      	nop
 8012a2c:	0801e8d0 	.word	0x0801e8d0
 8012a30:	0801e9e8 	.word	0x0801e9e8
 8012a34:	0801e920 	.word	0x0801e920

08012a38 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 8012a38:	b480      	push	{r7}
 8012a3a:	b085      	sub	sp, #20
 8012a3c:	af00      	add	r7, sp, #0
 8012a3e:	60f8      	str	r0, [r7, #12]
 8012a40:	60b9      	str	r1, [r7, #8]
 8012a42:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 8012a44:	68bb      	ldr	r3, [r7, #8]
 8012a46:	681a      	ldr	r2, [r3, #0]
 8012a48:	68fb      	ldr	r3, [r7, #12]
 8012a4a:	3308      	adds	r3, #8
 8012a4c:	681b      	ldr	r3, [r3, #0]
 8012a4e:	429a      	cmp	r2, r3
 8012a50:	d00a      	beq.n	8012a68 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 8012a52:	68bb      	ldr	r3, [r7, #8]
 8012a54:	2b00      	cmp	r3, #0
 8012a56:	d002      	beq.n	8012a5e <netif_do_set_netmask+0x26>
 8012a58:	68bb      	ldr	r3, [r7, #8]
 8012a5a:	681b      	ldr	r3, [r3, #0]
 8012a5c:	e000      	b.n	8012a60 <netif_do_set_netmask+0x28>
 8012a5e:	2300      	movs	r3, #0
 8012a60:	68fa      	ldr	r2, [r7, #12]
 8012a62:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 8012a64:	2301      	movs	r3, #1
 8012a66:	e000      	b.n	8012a6a <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 8012a68:	2300      	movs	r3, #0
}
 8012a6a:	4618      	mov	r0, r3
 8012a6c:	3714      	adds	r7, #20
 8012a6e:	46bd      	mov	sp, r7
 8012a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012a74:	4770      	bx	lr

08012a76 <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 8012a76:	b480      	push	{r7}
 8012a78:	b085      	sub	sp, #20
 8012a7a:	af00      	add	r7, sp, #0
 8012a7c:	60f8      	str	r0, [r7, #12]
 8012a7e:	60b9      	str	r1, [r7, #8]
 8012a80:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 8012a82:	68bb      	ldr	r3, [r7, #8]
 8012a84:	681a      	ldr	r2, [r3, #0]
 8012a86:	68fb      	ldr	r3, [r7, #12]
 8012a88:	330c      	adds	r3, #12
 8012a8a:	681b      	ldr	r3, [r3, #0]
 8012a8c:	429a      	cmp	r2, r3
 8012a8e:	d00a      	beq.n	8012aa6 <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 8012a90:	68bb      	ldr	r3, [r7, #8]
 8012a92:	2b00      	cmp	r3, #0
 8012a94:	d002      	beq.n	8012a9c <netif_do_set_gw+0x26>
 8012a96:	68bb      	ldr	r3, [r7, #8]
 8012a98:	681b      	ldr	r3, [r3, #0]
 8012a9a:	e000      	b.n	8012a9e <netif_do_set_gw+0x28>
 8012a9c:	2300      	movs	r3, #0
 8012a9e:	68fa      	ldr	r2, [r7, #12]
 8012aa0:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 8012aa2:	2301      	movs	r3, #1
 8012aa4:	e000      	b.n	8012aa8 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 8012aa6:	2300      	movs	r3, #0
}
 8012aa8:	4618      	mov	r0, r3
 8012aaa:	3714      	adds	r7, #20
 8012aac:	46bd      	mov	sp, r7
 8012aae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012ab2:	4770      	bx	lr

08012ab4 <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 8012ab4:	b580      	push	{r7, lr}
 8012ab6:	b088      	sub	sp, #32
 8012ab8:	af00      	add	r7, sp, #0
 8012aba:	60f8      	str	r0, [r7, #12]
 8012abc:	60b9      	str	r1, [r7, #8]
 8012abe:	607a      	str	r2, [r7, #4]
 8012ac0:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 8012ac2:	2300      	movs	r3, #0
 8012ac4:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 8012ac6:	2300      	movs	r3, #0
 8012ac8:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8012aca:	68bb      	ldr	r3, [r7, #8]
 8012acc:	2b00      	cmp	r3, #0
 8012ace:	d101      	bne.n	8012ad4 <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 8012ad0:	4b1c      	ldr	r3, [pc, #112]	; (8012b44 <netif_set_addr+0x90>)
 8012ad2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 8012ad4:	687b      	ldr	r3, [r7, #4]
 8012ad6:	2b00      	cmp	r3, #0
 8012ad8:	d101      	bne.n	8012ade <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 8012ada:	4b1a      	ldr	r3, [pc, #104]	; (8012b44 <netif_set_addr+0x90>)
 8012adc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 8012ade:	683b      	ldr	r3, [r7, #0]
 8012ae0:	2b00      	cmp	r3, #0
 8012ae2:	d101      	bne.n	8012ae8 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 8012ae4:	4b17      	ldr	r3, [pc, #92]	; (8012b44 <netif_set_addr+0x90>)
 8012ae6:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 8012ae8:	68bb      	ldr	r3, [r7, #8]
 8012aea:	2b00      	cmp	r3, #0
 8012aec:	d003      	beq.n	8012af6 <netif_set_addr+0x42>
 8012aee:	68bb      	ldr	r3, [r7, #8]
 8012af0:	681b      	ldr	r3, [r3, #0]
 8012af2:	2b00      	cmp	r3, #0
 8012af4:	d101      	bne.n	8012afa <netif_set_addr+0x46>
 8012af6:	2301      	movs	r3, #1
 8012af8:	e000      	b.n	8012afc <netif_set_addr+0x48>
 8012afa:	2300      	movs	r3, #0
 8012afc:	617b      	str	r3, [r7, #20]
  if (remove) {
 8012afe:	697b      	ldr	r3, [r7, #20]
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d006      	beq.n	8012b12 <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8012b04:	f107 0310 	add.w	r3, r7, #16
 8012b08:	461a      	mov	r2, r3
 8012b0a:	68b9      	ldr	r1, [r7, #8]
 8012b0c:	68f8      	ldr	r0, [r7, #12]
 8012b0e:	f7ff ff49 	bl	80129a4 <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 8012b12:	69fa      	ldr	r2, [r7, #28]
 8012b14:	6879      	ldr	r1, [r7, #4]
 8012b16:	68f8      	ldr	r0, [r7, #12]
 8012b18:	f7ff ff8e 	bl	8012a38 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 8012b1c:	69ba      	ldr	r2, [r7, #24]
 8012b1e:	6839      	ldr	r1, [r7, #0]
 8012b20:	68f8      	ldr	r0, [r7, #12]
 8012b22:	f7ff ffa8 	bl	8012a76 <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 8012b26:	697b      	ldr	r3, [r7, #20]
 8012b28:	2b00      	cmp	r3, #0
 8012b2a:	d106      	bne.n	8012b3a <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 8012b2c:	f107 0310 	add.w	r3, r7, #16
 8012b30:	461a      	mov	r2, r3
 8012b32:	68b9      	ldr	r1, [r7, #8]
 8012b34:	68f8      	ldr	r0, [r7, #12]
 8012b36:	f7ff ff35 	bl	80129a4 <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 8012b3a:	bf00      	nop
 8012b3c:	3720      	adds	r7, #32
 8012b3e:	46bd      	mov	sp, r7
 8012b40:	bd80      	pop	{r7, pc}
 8012b42:	bf00      	nop
 8012b44:	0802107c 	.word	0x0802107c

08012b48 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 8012b48:	b480      	push	{r7}
 8012b4a:	b083      	sub	sp, #12
 8012b4c:	af00      	add	r7, sp, #0
 8012b4e:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 8012b50:	4a04      	ldr	r2, [pc, #16]	; (8012b64 <netif_set_default+0x1c>)
 8012b52:	687b      	ldr	r3, [r7, #4]
 8012b54:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 8012b56:	bf00      	nop
 8012b58:	370c      	adds	r7, #12
 8012b5a:	46bd      	mov	sp, r7
 8012b5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012b60:	4770      	bx	lr
 8012b62:	bf00      	nop
 8012b64:	20024044 	.word	0x20024044

08012b68 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 8012b68:	b580      	push	{r7, lr}
 8012b6a:	b082      	sub	sp, #8
 8012b6c:	af00      	add	r7, sp, #0
 8012b6e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	2b00      	cmp	r3, #0
 8012b74:	d107      	bne.n	8012b86 <netif_set_up+0x1e>
 8012b76:	4b0f      	ldr	r3, [pc, #60]	; (8012bb4 <netif_set_up+0x4c>)
 8012b78:	f44f 7254 	mov.w	r2, #848	; 0x350
 8012b7c:	490e      	ldr	r1, [pc, #56]	; (8012bb8 <netif_set_up+0x50>)
 8012b7e:	480f      	ldr	r0, [pc, #60]	; (8012bbc <netif_set_up+0x54>)
 8012b80:	f00a fc94 	bl	801d4ac <iprintf>
 8012b84:	e013      	b.n	8012bae <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 8012b86:	687b      	ldr	r3, [r7, #4]
 8012b88:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012b8c:	f003 0301 	and.w	r3, r3, #1
 8012b90:	2b00      	cmp	r3, #0
 8012b92:	d10c      	bne.n	8012bae <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 8012b94:	687b      	ldr	r3, [r7, #4]
 8012b96:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012b9a:	f043 0301 	orr.w	r3, r3, #1
 8012b9e:	b2da      	uxtb	r2, r3
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8012ba6:	2103      	movs	r1, #3
 8012ba8:	6878      	ldr	r0, [r7, #4]
 8012baa:	f000 f809 	bl	8012bc0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 8012bae:	3708      	adds	r7, #8
 8012bb0:	46bd      	mov	sp, r7
 8012bb2:	bd80      	pop	{r7, pc}
 8012bb4:	0801e8d0 	.word	0x0801e8d0
 8012bb8:	0801ea58 	.word	0x0801ea58
 8012bbc:	0801e920 	.word	0x0801e920

08012bc0 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 8012bc0:	b580      	push	{r7, lr}
 8012bc2:	b082      	sub	sp, #8
 8012bc4:	af00      	add	r7, sp, #0
 8012bc6:	6078      	str	r0, [r7, #4]
 8012bc8:	460b      	mov	r3, r1
 8012bca:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 8012bcc:	687b      	ldr	r3, [r7, #4]
 8012bce:	2b00      	cmp	r3, #0
 8012bd0:	d106      	bne.n	8012be0 <netif_issue_reports+0x20>
 8012bd2:	4b18      	ldr	r3, [pc, #96]	; (8012c34 <netif_issue_reports+0x74>)
 8012bd4:	f240 326d 	movw	r2, #877	; 0x36d
 8012bd8:	4917      	ldr	r1, [pc, #92]	; (8012c38 <netif_issue_reports+0x78>)
 8012bda:	4818      	ldr	r0, [pc, #96]	; (8012c3c <netif_issue_reports+0x7c>)
 8012bdc:	f00a fc66 	bl	801d4ac <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8012be0:	687b      	ldr	r3, [r7, #4]
 8012be2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012be6:	f003 0304 	and.w	r3, r3, #4
 8012bea:	2b00      	cmp	r3, #0
 8012bec:	d01e      	beq.n	8012c2c <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 8012bee:	687b      	ldr	r3, [r7, #4]
 8012bf0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012bf4:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d017      	beq.n	8012c2c <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8012bfc:	78fb      	ldrb	r3, [r7, #3]
 8012bfe:	f003 0301 	and.w	r3, r3, #1
 8012c02:	2b00      	cmp	r3, #0
 8012c04:	d013      	beq.n	8012c2e <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8012c06:	687b      	ldr	r3, [r7, #4]
 8012c08:	3304      	adds	r3, #4
 8012c0a:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 8012c0c:	2b00      	cmp	r3, #0
 8012c0e:	d00e      	beq.n	8012c2e <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 8012c10:	687b      	ldr	r3, [r7, #4]
 8012c12:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012c16:	f003 0308 	and.w	r3, r3, #8
 8012c1a:	2b00      	cmp	r3, #0
 8012c1c:	d007      	beq.n	8012c2e <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 8012c1e:	687b      	ldr	r3, [r7, #4]
 8012c20:	3304      	adds	r3, #4
 8012c22:	4619      	mov	r1, r3
 8012c24:	6878      	ldr	r0, [r7, #4]
 8012c26:	f007 fdb3 	bl	801a790 <etharp_request>
 8012c2a:	e000      	b.n	8012c2e <netif_issue_reports+0x6e>
    return;
 8012c2c:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 8012c2e:	3708      	adds	r7, #8
 8012c30:	46bd      	mov	sp, r7
 8012c32:	bd80      	pop	{r7, pc}
 8012c34:	0801e8d0 	.word	0x0801e8d0
 8012c38:	0801ea74 	.word	0x0801ea74
 8012c3c:	0801e920 	.word	0x0801e920

08012c40 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 8012c40:	b580      	push	{r7, lr}
 8012c42:	b082      	sub	sp, #8
 8012c44:	af00      	add	r7, sp, #0
 8012c46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	2b00      	cmp	r3, #0
 8012c4c:	d107      	bne.n	8012c5e <netif_set_down+0x1e>
 8012c4e:	4b12      	ldr	r3, [pc, #72]	; (8012c98 <netif_set_down+0x58>)
 8012c50:	f240 329b 	movw	r2, #923	; 0x39b
 8012c54:	4911      	ldr	r1, [pc, #68]	; (8012c9c <netif_set_down+0x5c>)
 8012c56:	4812      	ldr	r0, [pc, #72]	; (8012ca0 <netif_set_down+0x60>)
 8012c58:	f00a fc28 	bl	801d4ac <iprintf>
 8012c5c:	e019      	b.n	8012c92 <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 8012c5e:	687b      	ldr	r3, [r7, #4]
 8012c60:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012c64:	f003 0301 	and.w	r3, r3, #1
 8012c68:	2b00      	cmp	r3, #0
 8012c6a:	d012      	beq.n	8012c92 <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 8012c6c:	687b      	ldr	r3, [r7, #4]
 8012c6e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012c72:	f023 0301 	bic.w	r3, r3, #1
 8012c76:	b2da      	uxtb	r2, r3
 8012c78:	687b      	ldr	r3, [r7, #4]
 8012c7a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 8012c7e:	687b      	ldr	r3, [r7, #4]
 8012c80:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012c84:	f003 0308 	and.w	r3, r3, #8
 8012c88:	2b00      	cmp	r3, #0
 8012c8a:	d002      	beq.n	8012c92 <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 8012c8c:	6878      	ldr	r0, [r7, #4]
 8012c8e:	f007 f93d 	bl	8019f0c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 8012c92:	3708      	adds	r7, #8
 8012c94:	46bd      	mov	sp, r7
 8012c96:	bd80      	pop	{r7, pc}
 8012c98:	0801e8d0 	.word	0x0801e8d0
 8012c9c:	0801ea98 	.word	0x0801ea98
 8012ca0:	0801e920 	.word	0x0801e920

08012ca4 <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 8012ca4:	b580      	push	{r7, lr}
 8012ca6:	b082      	sub	sp, #8
 8012ca8:	af00      	add	r7, sp, #0
 8012caa:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 8012cac:	687b      	ldr	r3, [r7, #4]
 8012cae:	2b00      	cmp	r3, #0
 8012cb0:	d107      	bne.n	8012cc2 <netif_set_link_up+0x1e>
 8012cb2:	4b13      	ldr	r3, [pc, #76]	; (8012d00 <netif_set_link_up+0x5c>)
 8012cb4:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 8012cb8:	4912      	ldr	r1, [pc, #72]	; (8012d04 <netif_set_link_up+0x60>)
 8012cba:	4813      	ldr	r0, [pc, #76]	; (8012d08 <netif_set_link_up+0x64>)
 8012cbc:	f00a fbf6 	bl	801d4ac <iprintf>
 8012cc0:	e01b      	b.n	8012cfa <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 8012cc2:	687b      	ldr	r3, [r7, #4]
 8012cc4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012cc8:	f003 0304 	and.w	r3, r3, #4
 8012ccc:	2b00      	cmp	r3, #0
 8012cce:	d114      	bne.n	8012cfa <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 8012cd0:	687b      	ldr	r3, [r7, #4]
 8012cd2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012cd6:	f043 0304 	orr.w	r3, r3, #4
 8012cda:	b2da      	uxtb	r2, r3
 8012cdc:	687b      	ldr	r3, [r7, #4]
 8012cde:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 8012ce2:	2103      	movs	r1, #3
 8012ce4:	6878      	ldr	r0, [r7, #4]
 8012ce6:	f7ff ff6b 	bl	8012bc0 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 8012cea:	687b      	ldr	r3, [r7, #4]
 8012cec:	69db      	ldr	r3, [r3, #28]
 8012cee:	2b00      	cmp	r3, #0
 8012cf0:	d003      	beq.n	8012cfa <netif_set_link_up+0x56>
 8012cf2:	687b      	ldr	r3, [r7, #4]
 8012cf4:	69db      	ldr	r3, [r3, #28]
 8012cf6:	6878      	ldr	r0, [r7, #4]
 8012cf8:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8012cfa:	3708      	adds	r7, #8
 8012cfc:	46bd      	mov	sp, r7
 8012cfe:	bd80      	pop	{r7, pc}
 8012d00:	0801e8d0 	.word	0x0801e8d0
 8012d04:	0801eab8 	.word	0x0801eab8
 8012d08:	0801e920 	.word	0x0801e920

08012d0c <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 8012d0c:	b580      	push	{r7, lr}
 8012d0e:	b082      	sub	sp, #8
 8012d10:	af00      	add	r7, sp, #0
 8012d12:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	2b00      	cmp	r3, #0
 8012d18:	d107      	bne.n	8012d2a <netif_set_link_down+0x1e>
 8012d1a:	4b11      	ldr	r3, [pc, #68]	; (8012d60 <netif_set_link_down+0x54>)
 8012d1c:	f240 4206 	movw	r2, #1030	; 0x406
 8012d20:	4910      	ldr	r1, [pc, #64]	; (8012d64 <netif_set_link_down+0x58>)
 8012d22:	4811      	ldr	r0, [pc, #68]	; (8012d68 <netif_set_link_down+0x5c>)
 8012d24:	f00a fbc2 	bl	801d4ac <iprintf>
 8012d28:	e017      	b.n	8012d5a <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 8012d2a:	687b      	ldr	r3, [r7, #4]
 8012d2c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012d30:	f003 0304 	and.w	r3, r3, #4
 8012d34:	2b00      	cmp	r3, #0
 8012d36:	d010      	beq.n	8012d5a <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 8012d38:	687b      	ldr	r3, [r7, #4]
 8012d3a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8012d3e:	f023 0304 	bic.w	r3, r3, #4
 8012d42:	b2da      	uxtb	r2, r3
 8012d44:	687b      	ldr	r3, [r7, #4]
 8012d46:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	69db      	ldr	r3, [r3, #28]
 8012d4e:	2b00      	cmp	r3, #0
 8012d50:	d003      	beq.n	8012d5a <netif_set_link_down+0x4e>
 8012d52:	687b      	ldr	r3, [r7, #4]
 8012d54:	69db      	ldr	r3, [r3, #28]
 8012d56:	6878      	ldr	r0, [r7, #4]
 8012d58:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 8012d5a:	3708      	adds	r7, #8
 8012d5c:	46bd      	mov	sp, r7
 8012d5e:	bd80      	pop	{r7, pc}
 8012d60:	0801e8d0 	.word	0x0801e8d0
 8012d64:	0801eadc 	.word	0x0801eadc
 8012d68:	0801e920 	.word	0x0801e920

08012d6c <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 8012d6c:	b480      	push	{r7}
 8012d6e:	b083      	sub	sp, #12
 8012d70:	af00      	add	r7, sp, #0
 8012d72:	6078      	str	r0, [r7, #4]
 8012d74:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	2b00      	cmp	r3, #0
 8012d7a:	d002      	beq.n	8012d82 <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 8012d7c:	687b      	ldr	r3, [r7, #4]
 8012d7e:	683a      	ldr	r2, [r7, #0]
 8012d80:	61da      	str	r2, [r3, #28]
  }
}
 8012d82:	bf00      	nop
 8012d84:	370c      	adds	r7, #12
 8012d86:	46bd      	mov	sp, r7
 8012d88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012d8c:	4770      	bx	lr

08012d8e <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 8012d8e:	b480      	push	{r7}
 8012d90:	b085      	sub	sp, #20
 8012d92:	af00      	add	r7, sp, #0
 8012d94:	60f8      	str	r0, [r7, #12]
 8012d96:	60b9      	str	r1, [r7, #8]
 8012d98:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 8012d9a:	f06f 030b 	mvn.w	r3, #11
}
 8012d9e:	4618      	mov	r0, r3
 8012da0:	3714      	adds	r7, #20
 8012da2:	46bd      	mov	sp, r7
 8012da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012da8:	4770      	bx	lr
	...

08012dac <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 8012dac:	b480      	push	{r7}
 8012dae:	b085      	sub	sp, #20
 8012db0:	af00      	add	r7, sp, #0
 8012db2:	4603      	mov	r3, r0
 8012db4:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 8012db6:	79fb      	ldrb	r3, [r7, #7]
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	d013      	beq.n	8012de4 <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 8012dbc:	4b0d      	ldr	r3, [pc, #52]	; (8012df4 <netif_get_by_index+0x48>)
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	60fb      	str	r3, [r7, #12]
 8012dc2:	e00c      	b.n	8012dde <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 8012dc4:	68fb      	ldr	r3, [r7, #12]
 8012dc6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8012dca:	3301      	adds	r3, #1
 8012dcc:	b2db      	uxtb	r3, r3
 8012dce:	79fa      	ldrb	r2, [r7, #7]
 8012dd0:	429a      	cmp	r2, r3
 8012dd2:	d101      	bne.n	8012dd8 <netif_get_by_index+0x2c>
        return netif; /* found! */
 8012dd4:	68fb      	ldr	r3, [r7, #12]
 8012dd6:	e006      	b.n	8012de6 <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 8012dd8:	68fb      	ldr	r3, [r7, #12]
 8012dda:	681b      	ldr	r3, [r3, #0]
 8012ddc:	60fb      	str	r3, [r7, #12]
 8012dde:	68fb      	ldr	r3, [r7, #12]
 8012de0:	2b00      	cmp	r3, #0
 8012de2:	d1ef      	bne.n	8012dc4 <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 8012de4:	2300      	movs	r3, #0
}
 8012de6:	4618      	mov	r0, r3
 8012de8:	3714      	adds	r7, #20
 8012dea:	46bd      	mov	sp, r7
 8012dec:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012df0:	4770      	bx	lr
 8012df2:	bf00      	nop
 8012df4:	20024040 	.word	0x20024040

08012df8 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 8012df8:	b580      	push	{r7, lr}
 8012dfa:	b082      	sub	sp, #8
 8012dfc:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 8012dfe:	f009 f94b 	bl	801c098 <sys_arch_protect>
 8012e02:	6038      	str	r0, [r7, #0]
 8012e04:	4b0d      	ldr	r3, [pc, #52]	; (8012e3c <pbuf_free_ooseq+0x44>)
 8012e06:	2200      	movs	r2, #0
 8012e08:	701a      	strb	r2, [r3, #0]
 8012e0a:	6838      	ldr	r0, [r7, #0]
 8012e0c:	f009 f952 	bl	801c0b4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8012e10:	4b0b      	ldr	r3, [pc, #44]	; (8012e40 <pbuf_free_ooseq+0x48>)
 8012e12:	681b      	ldr	r3, [r3, #0]
 8012e14:	607b      	str	r3, [r7, #4]
 8012e16:	e00a      	b.n	8012e2e <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 8012e18:	687b      	ldr	r3, [r7, #4]
 8012e1a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8012e1c:	2b00      	cmp	r3, #0
 8012e1e:	d003      	beq.n	8012e28 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 8012e20:	6878      	ldr	r0, [r7, #4]
 8012e22:	f002 f981 	bl	8015128 <tcp_free_ooseq>
      return;
 8012e26:	e005      	b.n	8012e34 <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 8012e28:	687b      	ldr	r3, [r7, #4]
 8012e2a:	68db      	ldr	r3, [r3, #12]
 8012e2c:	607b      	str	r3, [r7, #4]
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	2b00      	cmp	r3, #0
 8012e32:	d1f1      	bne.n	8012e18 <pbuf_free_ooseq+0x20>
    }
  }
}
 8012e34:	3708      	adds	r7, #8
 8012e36:	46bd      	mov	sp, r7
 8012e38:	bd80      	pop	{r7, pc}
 8012e3a:	bf00      	nop
 8012e3c:	20024049 	.word	0x20024049
 8012e40:	20024058 	.word	0x20024058

08012e44 <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 8012e44:	b580      	push	{r7, lr}
 8012e46:	b082      	sub	sp, #8
 8012e48:	af00      	add	r7, sp, #0
 8012e4a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 8012e4c:	f7ff ffd4 	bl	8012df8 <pbuf_free_ooseq>
}
 8012e50:	bf00      	nop
 8012e52:	3708      	adds	r7, #8
 8012e54:	46bd      	mov	sp, r7
 8012e56:	bd80      	pop	{r7, pc}

08012e58 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 8012e58:	b580      	push	{r7, lr}
 8012e5a:	b082      	sub	sp, #8
 8012e5c:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 8012e5e:	f009 f91b 	bl	801c098 <sys_arch_protect>
 8012e62:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 8012e64:	4b0f      	ldr	r3, [pc, #60]	; (8012ea4 <pbuf_pool_is_empty+0x4c>)
 8012e66:	781b      	ldrb	r3, [r3, #0]
 8012e68:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 8012e6a:	4b0e      	ldr	r3, [pc, #56]	; (8012ea4 <pbuf_pool_is_empty+0x4c>)
 8012e6c:	2201      	movs	r2, #1
 8012e6e:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 8012e70:	6878      	ldr	r0, [r7, #4]
 8012e72:	f009 f91f 	bl	801c0b4 <sys_arch_unprotect>

  if (!queued) {
 8012e76:	78fb      	ldrb	r3, [r7, #3]
 8012e78:	2b00      	cmp	r3, #0
 8012e7a:	d10f      	bne.n	8012e9c <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 8012e7c:	2100      	movs	r1, #0
 8012e7e:	480a      	ldr	r0, [pc, #40]	; (8012ea8 <pbuf_pool_is_empty+0x50>)
 8012e80:	f7fe fe96 	bl	8011bb0 <tcpip_try_callback>
 8012e84:	4603      	mov	r3, r0
 8012e86:	2b00      	cmp	r3, #0
 8012e88:	d008      	beq.n	8012e9c <pbuf_pool_is_empty+0x44>
 8012e8a:	f009 f905 	bl	801c098 <sys_arch_protect>
 8012e8e:	6078      	str	r0, [r7, #4]
 8012e90:	4b04      	ldr	r3, [pc, #16]	; (8012ea4 <pbuf_pool_is_empty+0x4c>)
 8012e92:	2200      	movs	r2, #0
 8012e94:	701a      	strb	r2, [r3, #0]
 8012e96:	6878      	ldr	r0, [r7, #4]
 8012e98:	f009 f90c 	bl	801c0b4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 8012e9c:	bf00      	nop
 8012e9e:	3708      	adds	r7, #8
 8012ea0:	46bd      	mov	sp, r7
 8012ea2:	bd80      	pop	{r7, pc}
 8012ea4:	20024049 	.word	0x20024049
 8012ea8:	08012e45 	.word	0x08012e45

08012eac <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 8012eac:	b480      	push	{r7}
 8012eae:	b085      	sub	sp, #20
 8012eb0:	af00      	add	r7, sp, #0
 8012eb2:	60f8      	str	r0, [r7, #12]
 8012eb4:	60b9      	str	r1, [r7, #8]
 8012eb6:	4611      	mov	r1, r2
 8012eb8:	461a      	mov	r2, r3
 8012eba:	460b      	mov	r3, r1
 8012ebc:	80fb      	strh	r3, [r7, #6]
 8012ebe:	4613      	mov	r3, r2
 8012ec0:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 8012ec2:	68fb      	ldr	r3, [r7, #12]
 8012ec4:	2200      	movs	r2, #0
 8012ec6:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 8012ec8:	68fb      	ldr	r3, [r7, #12]
 8012eca:	68ba      	ldr	r2, [r7, #8]
 8012ecc:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 8012ece:	68fb      	ldr	r3, [r7, #12]
 8012ed0:	88fa      	ldrh	r2, [r7, #6]
 8012ed2:	811a      	strh	r2, [r3, #8]
  p->len = len;
 8012ed4:	68fb      	ldr	r3, [r7, #12]
 8012ed6:	88ba      	ldrh	r2, [r7, #4]
 8012ed8:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 8012eda:	8b3b      	ldrh	r3, [r7, #24]
 8012edc:	b2da      	uxtb	r2, r3
 8012ede:	68fb      	ldr	r3, [r7, #12]
 8012ee0:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 8012ee2:	68fb      	ldr	r3, [r7, #12]
 8012ee4:	7f3a      	ldrb	r2, [r7, #28]
 8012ee6:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 8012ee8:	68fb      	ldr	r3, [r7, #12]
 8012eea:	2201      	movs	r2, #1
 8012eec:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 8012eee:	68fb      	ldr	r3, [r7, #12]
 8012ef0:	2200      	movs	r2, #0
 8012ef2:	73da      	strb	r2, [r3, #15]
}
 8012ef4:	bf00      	nop
 8012ef6:	3714      	adds	r7, #20
 8012ef8:	46bd      	mov	sp, r7
 8012efa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8012efe:	4770      	bx	lr

08012f00 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 8012f00:	b580      	push	{r7, lr}
 8012f02:	b08c      	sub	sp, #48	; 0x30
 8012f04:	af02      	add	r7, sp, #8
 8012f06:	4603      	mov	r3, r0
 8012f08:	71fb      	strb	r3, [r7, #7]
 8012f0a:	460b      	mov	r3, r1
 8012f0c:	80bb      	strh	r3, [r7, #4]
 8012f0e:	4613      	mov	r3, r2
 8012f10:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 8012f12:	79fb      	ldrb	r3, [r7, #7]
 8012f14:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 8012f16:	887b      	ldrh	r3, [r7, #2]
 8012f18:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8012f1c:	d07f      	beq.n	801301e <pbuf_alloc+0x11e>
 8012f1e:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 8012f22:	f300 80c8 	bgt.w	80130b6 <pbuf_alloc+0x1b6>
 8012f26:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8012f2a:	d010      	beq.n	8012f4e <pbuf_alloc+0x4e>
 8012f2c:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 8012f30:	f300 80c1 	bgt.w	80130b6 <pbuf_alloc+0x1b6>
 8012f34:	2b01      	cmp	r3, #1
 8012f36:	d002      	beq.n	8012f3e <pbuf_alloc+0x3e>
 8012f38:	2b41      	cmp	r3, #65	; 0x41
 8012f3a:	f040 80bc 	bne.w	80130b6 <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 8012f3e:	887a      	ldrh	r2, [r7, #2]
 8012f40:	88bb      	ldrh	r3, [r7, #4]
 8012f42:	4619      	mov	r1, r3
 8012f44:	2000      	movs	r0, #0
 8012f46:	f000 f8d1 	bl	80130ec <pbuf_alloc_reference>
 8012f4a:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 8012f4c:	e0bd      	b.n	80130ca <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 8012f4e:	2300      	movs	r3, #0
 8012f50:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 8012f52:	2300      	movs	r3, #0
 8012f54:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 8012f56:	88bb      	ldrh	r3, [r7, #4]
 8012f58:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 8012f5a:	200c      	movs	r0, #12
 8012f5c:	f7ff fb9a 	bl	8012694 <memp_malloc>
 8012f60:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 8012f62:	693b      	ldr	r3, [r7, #16]
 8012f64:	2b00      	cmp	r3, #0
 8012f66:	d109      	bne.n	8012f7c <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 8012f68:	f7ff ff76 	bl	8012e58 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 8012f6c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012f6e:	2b00      	cmp	r3, #0
 8012f70:	d002      	beq.n	8012f78 <pbuf_alloc+0x78>
            pbuf_free(p);
 8012f72:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012f74:	f000 faa8 	bl	80134c8 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 8012f78:	2300      	movs	r3, #0
 8012f7a:	e0a7      	b.n	80130cc <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 8012f7c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012f7e:	3303      	adds	r3, #3
 8012f80:	b29b      	uxth	r3, r3
 8012f82:	f023 0303 	bic.w	r3, r3, #3
 8012f86:	b29b      	uxth	r3, r3
 8012f88:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 8012f8c:	b29b      	uxth	r3, r3
 8012f8e:	8b7a      	ldrh	r2, [r7, #26]
 8012f90:	4293      	cmp	r3, r2
 8012f92:	bf28      	it	cs
 8012f94:	4613      	movcs	r3, r2
 8012f96:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 8012f98:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012f9a:	3310      	adds	r3, #16
 8012f9c:	693a      	ldr	r2, [r7, #16]
 8012f9e:	4413      	add	r3, r2
 8012fa0:	3303      	adds	r3, #3
 8012fa2:	f023 0303 	bic.w	r3, r3, #3
 8012fa6:	4618      	mov	r0, r3
 8012fa8:	89f9      	ldrh	r1, [r7, #14]
 8012faa:	8b7a      	ldrh	r2, [r7, #26]
 8012fac:	2300      	movs	r3, #0
 8012fae:	9301      	str	r3, [sp, #4]
 8012fb0:	887b      	ldrh	r3, [r7, #2]
 8012fb2:	9300      	str	r3, [sp, #0]
 8012fb4:	460b      	mov	r3, r1
 8012fb6:	4601      	mov	r1, r0
 8012fb8:	6938      	ldr	r0, [r7, #16]
 8012fba:	f7ff ff77 	bl	8012eac <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 8012fbe:	693b      	ldr	r3, [r7, #16]
 8012fc0:	685b      	ldr	r3, [r3, #4]
 8012fc2:	f003 0303 	and.w	r3, r3, #3
 8012fc6:	2b00      	cmp	r3, #0
 8012fc8:	d006      	beq.n	8012fd8 <pbuf_alloc+0xd8>
 8012fca:	4b42      	ldr	r3, [pc, #264]	; (80130d4 <pbuf_alloc+0x1d4>)
 8012fcc:	f44f 7280 	mov.w	r2, #256	; 0x100
 8012fd0:	4941      	ldr	r1, [pc, #260]	; (80130d8 <pbuf_alloc+0x1d8>)
 8012fd2:	4842      	ldr	r0, [pc, #264]	; (80130dc <pbuf_alloc+0x1dc>)
 8012fd4:	f00a fa6a 	bl	801d4ac <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 8012fd8:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8012fda:	3303      	adds	r3, #3
 8012fdc:	f023 0303 	bic.w	r3, r3, #3
 8012fe0:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 8012fe4:	d106      	bne.n	8012ff4 <pbuf_alloc+0xf4>
 8012fe6:	4b3b      	ldr	r3, [pc, #236]	; (80130d4 <pbuf_alloc+0x1d4>)
 8012fe8:	f44f 7281 	mov.w	r2, #258	; 0x102
 8012fec:	493c      	ldr	r1, [pc, #240]	; (80130e0 <pbuf_alloc+0x1e0>)
 8012fee:	483b      	ldr	r0, [pc, #236]	; (80130dc <pbuf_alloc+0x1dc>)
 8012ff0:	f00a fa5c 	bl	801d4ac <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 8012ff4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ff6:	2b00      	cmp	r3, #0
 8012ff8:	d102      	bne.n	8013000 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 8012ffa:	693b      	ldr	r3, [r7, #16]
 8012ffc:	627b      	str	r3, [r7, #36]	; 0x24
 8012ffe:	e002      	b.n	8013006 <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 8013000:	69fb      	ldr	r3, [r7, #28]
 8013002:	693a      	ldr	r2, [r7, #16]
 8013004:	601a      	str	r2, [r3, #0]
        }
        last = q;
 8013006:	693b      	ldr	r3, [r7, #16]
 8013008:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 801300a:	8b7a      	ldrh	r2, [r7, #26]
 801300c:	89fb      	ldrh	r3, [r7, #14]
 801300e:	1ad3      	subs	r3, r2, r3
 8013010:	837b      	strh	r3, [r7, #26]
        offset = 0;
 8013012:	2300      	movs	r3, #0
 8013014:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 8013016:	8b7b      	ldrh	r3, [r7, #26]
 8013018:	2b00      	cmp	r3, #0
 801301a:	d19e      	bne.n	8012f5a <pbuf_alloc+0x5a>
      break;
 801301c:	e055      	b.n	80130ca <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 801301e:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013020:	3303      	adds	r3, #3
 8013022:	b29b      	uxth	r3, r3
 8013024:	f023 0303 	bic.w	r3, r3, #3
 8013028:	b29a      	uxth	r2, r3
 801302a:	88bb      	ldrh	r3, [r7, #4]
 801302c:	3303      	adds	r3, #3
 801302e:	b29b      	uxth	r3, r3
 8013030:	f023 0303 	bic.w	r3, r3, #3
 8013034:	b29b      	uxth	r3, r3
 8013036:	4413      	add	r3, r2
 8013038:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 801303a:	8b3b      	ldrh	r3, [r7, #24]
 801303c:	3310      	adds	r3, #16
 801303e:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8013040:	8b3a      	ldrh	r2, [r7, #24]
 8013042:	88bb      	ldrh	r3, [r7, #4]
 8013044:	3303      	adds	r3, #3
 8013046:	f023 0303 	bic.w	r3, r3, #3
 801304a:	429a      	cmp	r2, r3
 801304c:	d306      	bcc.n	801305c <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 801304e:	8afa      	ldrh	r2, [r7, #22]
 8013050:	88bb      	ldrh	r3, [r7, #4]
 8013052:	3303      	adds	r3, #3
 8013054:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 8013058:	429a      	cmp	r2, r3
 801305a:	d201      	bcs.n	8013060 <pbuf_alloc+0x160>
        return NULL;
 801305c:	2300      	movs	r3, #0
 801305e:	e035      	b.n	80130cc <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 8013060:	8afb      	ldrh	r3, [r7, #22]
 8013062:	4618      	mov	r0, r3
 8013064:	f7ff f96e 	bl	8012344 <mem_malloc>
 8013068:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 801306a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801306c:	2b00      	cmp	r3, #0
 801306e:	d101      	bne.n	8013074 <pbuf_alloc+0x174>
        return NULL;
 8013070:	2300      	movs	r3, #0
 8013072:	e02b      	b.n	80130cc <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 8013074:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8013076:	3310      	adds	r3, #16
 8013078:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801307a:	4413      	add	r3, r2
 801307c:	3303      	adds	r3, #3
 801307e:	f023 0303 	bic.w	r3, r3, #3
 8013082:	4618      	mov	r0, r3
 8013084:	88b9      	ldrh	r1, [r7, #4]
 8013086:	88ba      	ldrh	r2, [r7, #4]
 8013088:	2300      	movs	r3, #0
 801308a:	9301      	str	r3, [sp, #4]
 801308c:	887b      	ldrh	r3, [r7, #2]
 801308e:	9300      	str	r3, [sp, #0]
 8013090:	460b      	mov	r3, r1
 8013092:	4601      	mov	r1, r0
 8013094:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013096:	f7ff ff09 	bl	8012eac <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 801309a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801309c:	685b      	ldr	r3, [r3, #4]
 801309e:	f003 0303 	and.w	r3, r3, #3
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d010      	beq.n	80130c8 <pbuf_alloc+0x1c8>
 80130a6:	4b0b      	ldr	r3, [pc, #44]	; (80130d4 <pbuf_alloc+0x1d4>)
 80130a8:	f44f 7291 	mov.w	r2, #290	; 0x122
 80130ac:	490d      	ldr	r1, [pc, #52]	; (80130e4 <pbuf_alloc+0x1e4>)
 80130ae:	480b      	ldr	r0, [pc, #44]	; (80130dc <pbuf_alloc+0x1dc>)
 80130b0:	f00a f9fc 	bl	801d4ac <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 80130b4:	e008      	b.n	80130c8 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 80130b6:	4b07      	ldr	r3, [pc, #28]	; (80130d4 <pbuf_alloc+0x1d4>)
 80130b8:	f240 1227 	movw	r2, #295	; 0x127
 80130bc:	490a      	ldr	r1, [pc, #40]	; (80130e8 <pbuf_alloc+0x1e8>)
 80130be:	4807      	ldr	r0, [pc, #28]	; (80130dc <pbuf_alloc+0x1dc>)
 80130c0:	f00a f9f4 	bl	801d4ac <iprintf>
      return NULL;
 80130c4:	2300      	movs	r3, #0
 80130c6:	e001      	b.n	80130cc <pbuf_alloc+0x1cc>
      break;
 80130c8:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 80130ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 80130cc:	4618      	mov	r0, r3
 80130ce:	3728      	adds	r7, #40	; 0x28
 80130d0:	46bd      	mov	sp, r7
 80130d2:	bd80      	pop	{r7, pc}
 80130d4:	0801eb00 	.word	0x0801eb00
 80130d8:	0801eb30 	.word	0x0801eb30
 80130dc:	0801eb60 	.word	0x0801eb60
 80130e0:	0801eb88 	.word	0x0801eb88
 80130e4:	0801ebbc 	.word	0x0801ebbc
 80130e8:	0801ebe8 	.word	0x0801ebe8

080130ec <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 80130ec:	b580      	push	{r7, lr}
 80130ee:	b086      	sub	sp, #24
 80130f0:	af02      	add	r7, sp, #8
 80130f2:	6078      	str	r0, [r7, #4]
 80130f4:	460b      	mov	r3, r1
 80130f6:	807b      	strh	r3, [r7, #2]
 80130f8:	4613      	mov	r3, r2
 80130fa:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 80130fc:	883b      	ldrh	r3, [r7, #0]
 80130fe:	2b41      	cmp	r3, #65	; 0x41
 8013100:	d009      	beq.n	8013116 <pbuf_alloc_reference+0x2a>
 8013102:	883b      	ldrh	r3, [r7, #0]
 8013104:	2b01      	cmp	r3, #1
 8013106:	d006      	beq.n	8013116 <pbuf_alloc_reference+0x2a>
 8013108:	4b0f      	ldr	r3, [pc, #60]	; (8013148 <pbuf_alloc_reference+0x5c>)
 801310a:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 801310e:	490f      	ldr	r1, [pc, #60]	; (801314c <pbuf_alloc_reference+0x60>)
 8013110:	480f      	ldr	r0, [pc, #60]	; (8013150 <pbuf_alloc_reference+0x64>)
 8013112:	f00a f9cb 	bl	801d4ac <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 8013116:	200b      	movs	r0, #11
 8013118:	f7ff fabc 	bl	8012694 <memp_malloc>
 801311c:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 801311e:	68fb      	ldr	r3, [r7, #12]
 8013120:	2b00      	cmp	r3, #0
 8013122:	d101      	bne.n	8013128 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 8013124:	2300      	movs	r3, #0
 8013126:	e00b      	b.n	8013140 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 8013128:	8879      	ldrh	r1, [r7, #2]
 801312a:	887a      	ldrh	r2, [r7, #2]
 801312c:	2300      	movs	r3, #0
 801312e:	9301      	str	r3, [sp, #4]
 8013130:	883b      	ldrh	r3, [r7, #0]
 8013132:	9300      	str	r3, [sp, #0]
 8013134:	460b      	mov	r3, r1
 8013136:	6879      	ldr	r1, [r7, #4]
 8013138:	68f8      	ldr	r0, [r7, #12]
 801313a:	f7ff feb7 	bl	8012eac <pbuf_init_alloced_pbuf>
  return p;
 801313e:	68fb      	ldr	r3, [r7, #12]
}
 8013140:	4618      	mov	r0, r3
 8013142:	3710      	adds	r7, #16
 8013144:	46bd      	mov	sp, r7
 8013146:	bd80      	pop	{r7, pc}
 8013148:	0801eb00 	.word	0x0801eb00
 801314c:	0801ec04 	.word	0x0801ec04
 8013150:	0801eb60 	.word	0x0801eb60

08013154 <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 8013154:	b580      	push	{r7, lr}
 8013156:	b088      	sub	sp, #32
 8013158:	af02      	add	r7, sp, #8
 801315a:	607b      	str	r3, [r7, #4]
 801315c:	4603      	mov	r3, r0
 801315e:	73fb      	strb	r3, [r7, #15]
 8013160:	460b      	mov	r3, r1
 8013162:	81bb      	strh	r3, [r7, #12]
 8013164:	4613      	mov	r3, r2
 8013166:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 8013168:	7bfb      	ldrb	r3, [r7, #15]
 801316a:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 801316c:	8a7b      	ldrh	r3, [r7, #18]
 801316e:	3303      	adds	r3, #3
 8013170:	f023 0203 	bic.w	r2, r3, #3
 8013174:	89bb      	ldrh	r3, [r7, #12]
 8013176:	441a      	add	r2, r3
 8013178:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801317a:	429a      	cmp	r2, r3
 801317c:	d901      	bls.n	8013182 <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 801317e:	2300      	movs	r3, #0
 8013180:	e018      	b.n	80131b4 <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 8013182:	6a3b      	ldr	r3, [r7, #32]
 8013184:	2b00      	cmp	r3, #0
 8013186:	d007      	beq.n	8013198 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 8013188:	8a7b      	ldrh	r3, [r7, #18]
 801318a:	3303      	adds	r3, #3
 801318c:	f023 0303 	bic.w	r3, r3, #3
 8013190:	6a3a      	ldr	r2, [r7, #32]
 8013192:	4413      	add	r3, r2
 8013194:	617b      	str	r3, [r7, #20]
 8013196:	e001      	b.n	801319c <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 8013198:	2300      	movs	r3, #0
 801319a:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 801319c:	6878      	ldr	r0, [r7, #4]
 801319e:	89b9      	ldrh	r1, [r7, #12]
 80131a0:	89ba      	ldrh	r2, [r7, #12]
 80131a2:	2302      	movs	r3, #2
 80131a4:	9301      	str	r3, [sp, #4]
 80131a6:	897b      	ldrh	r3, [r7, #10]
 80131a8:	9300      	str	r3, [sp, #0]
 80131aa:	460b      	mov	r3, r1
 80131ac:	6979      	ldr	r1, [r7, #20]
 80131ae:	f7ff fe7d 	bl	8012eac <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 80131b2:	687b      	ldr	r3, [r7, #4]
}
 80131b4:	4618      	mov	r0, r3
 80131b6:	3718      	adds	r7, #24
 80131b8:	46bd      	mov	sp, r7
 80131ba:	bd80      	pop	{r7, pc}

080131bc <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 80131bc:	b580      	push	{r7, lr}
 80131be:	b084      	sub	sp, #16
 80131c0:	af00      	add	r7, sp, #0
 80131c2:	6078      	str	r0, [r7, #4]
 80131c4:	460b      	mov	r3, r1
 80131c6:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 80131c8:	687b      	ldr	r3, [r7, #4]
 80131ca:	2b00      	cmp	r3, #0
 80131cc:	d106      	bne.n	80131dc <pbuf_realloc+0x20>
 80131ce:	4b3a      	ldr	r3, [pc, #232]	; (80132b8 <pbuf_realloc+0xfc>)
 80131d0:	f44f 72cc 	mov.w	r2, #408	; 0x198
 80131d4:	4939      	ldr	r1, [pc, #228]	; (80132bc <pbuf_realloc+0x100>)
 80131d6:	483a      	ldr	r0, [pc, #232]	; (80132c0 <pbuf_realloc+0x104>)
 80131d8:	f00a f968 	bl	801d4ac <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 80131dc:	687b      	ldr	r3, [r7, #4]
 80131de:	891b      	ldrh	r3, [r3, #8]
 80131e0:	887a      	ldrh	r2, [r7, #2]
 80131e2:	429a      	cmp	r2, r3
 80131e4:	d263      	bcs.n	80132ae <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	891a      	ldrh	r2, [r3, #8]
 80131ea:	887b      	ldrh	r3, [r7, #2]
 80131ec:	1ad3      	subs	r3, r2, r3
 80131ee:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 80131f0:	887b      	ldrh	r3, [r7, #2]
 80131f2:	817b      	strh	r3, [r7, #10]
  q = p;
 80131f4:	687b      	ldr	r3, [r7, #4]
 80131f6:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 80131f8:	e018      	b.n	801322c <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 80131fa:	68fb      	ldr	r3, [r7, #12]
 80131fc:	895b      	ldrh	r3, [r3, #10]
 80131fe:	897a      	ldrh	r2, [r7, #10]
 8013200:	1ad3      	subs	r3, r2, r3
 8013202:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 8013204:	68fb      	ldr	r3, [r7, #12]
 8013206:	891a      	ldrh	r2, [r3, #8]
 8013208:	893b      	ldrh	r3, [r7, #8]
 801320a:	1ad3      	subs	r3, r2, r3
 801320c:	b29a      	uxth	r2, r3
 801320e:	68fb      	ldr	r3, [r7, #12]
 8013210:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 8013212:	68fb      	ldr	r3, [r7, #12]
 8013214:	681b      	ldr	r3, [r3, #0]
 8013216:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 8013218:	68fb      	ldr	r3, [r7, #12]
 801321a:	2b00      	cmp	r3, #0
 801321c:	d106      	bne.n	801322c <pbuf_realloc+0x70>
 801321e:	4b26      	ldr	r3, [pc, #152]	; (80132b8 <pbuf_realloc+0xfc>)
 8013220:	f240 12af 	movw	r2, #431	; 0x1af
 8013224:	4927      	ldr	r1, [pc, #156]	; (80132c4 <pbuf_realloc+0x108>)
 8013226:	4826      	ldr	r0, [pc, #152]	; (80132c0 <pbuf_realloc+0x104>)
 8013228:	f00a f940 	bl	801d4ac <iprintf>
  while (rem_len > q->len) {
 801322c:	68fb      	ldr	r3, [r7, #12]
 801322e:	895b      	ldrh	r3, [r3, #10]
 8013230:	897a      	ldrh	r2, [r7, #10]
 8013232:	429a      	cmp	r2, r3
 8013234:	d8e1      	bhi.n	80131fa <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 8013236:	68fb      	ldr	r3, [r7, #12]
 8013238:	7b1b      	ldrb	r3, [r3, #12]
 801323a:	f003 030f 	and.w	r3, r3, #15
 801323e:	2b00      	cmp	r3, #0
 8013240:	d121      	bne.n	8013286 <pbuf_realloc+0xca>
 8013242:	68fb      	ldr	r3, [r7, #12]
 8013244:	895b      	ldrh	r3, [r3, #10]
 8013246:	897a      	ldrh	r2, [r7, #10]
 8013248:	429a      	cmp	r2, r3
 801324a:	d01c      	beq.n	8013286 <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 801324c:	68fb      	ldr	r3, [r7, #12]
 801324e:	7b5b      	ldrb	r3, [r3, #13]
 8013250:	f003 0302 	and.w	r3, r3, #2
 8013254:	2b00      	cmp	r3, #0
 8013256:	d116      	bne.n	8013286 <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 8013258:	68fb      	ldr	r3, [r7, #12]
 801325a:	685a      	ldr	r2, [r3, #4]
 801325c:	68fb      	ldr	r3, [r7, #12]
 801325e:	1ad3      	subs	r3, r2, r3
 8013260:	b29a      	uxth	r2, r3
 8013262:	897b      	ldrh	r3, [r7, #10]
 8013264:	4413      	add	r3, r2
 8013266:	b29b      	uxth	r3, r3
 8013268:	4619      	mov	r1, r3
 801326a:	68f8      	ldr	r0, [r7, #12]
 801326c:	f7fe ff5a 	bl	8012124 <mem_trim>
 8013270:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 8013272:	68fb      	ldr	r3, [r7, #12]
 8013274:	2b00      	cmp	r3, #0
 8013276:	d106      	bne.n	8013286 <pbuf_realloc+0xca>
 8013278:	4b0f      	ldr	r3, [pc, #60]	; (80132b8 <pbuf_realloc+0xfc>)
 801327a:	f240 12bd 	movw	r2, #445	; 0x1bd
 801327e:	4912      	ldr	r1, [pc, #72]	; (80132c8 <pbuf_realloc+0x10c>)
 8013280:	480f      	ldr	r0, [pc, #60]	; (80132c0 <pbuf_realloc+0x104>)
 8013282:	f00a f913 	bl	801d4ac <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 8013286:	68fb      	ldr	r3, [r7, #12]
 8013288:	897a      	ldrh	r2, [r7, #10]
 801328a:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 801328c:	68fb      	ldr	r3, [r7, #12]
 801328e:	895a      	ldrh	r2, [r3, #10]
 8013290:	68fb      	ldr	r3, [r7, #12]
 8013292:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 8013294:	68fb      	ldr	r3, [r7, #12]
 8013296:	681b      	ldr	r3, [r3, #0]
 8013298:	2b00      	cmp	r3, #0
 801329a:	d004      	beq.n	80132a6 <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 801329c:	68fb      	ldr	r3, [r7, #12]
 801329e:	681b      	ldr	r3, [r3, #0]
 80132a0:	4618      	mov	r0, r3
 80132a2:	f000 f911 	bl	80134c8 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 80132a6:	68fb      	ldr	r3, [r7, #12]
 80132a8:	2200      	movs	r2, #0
 80132aa:	601a      	str	r2, [r3, #0]
 80132ac:	e000      	b.n	80132b0 <pbuf_realloc+0xf4>
    return;
 80132ae:	bf00      	nop

}
 80132b0:	3710      	adds	r7, #16
 80132b2:	46bd      	mov	sp, r7
 80132b4:	bd80      	pop	{r7, pc}
 80132b6:	bf00      	nop
 80132b8:	0801eb00 	.word	0x0801eb00
 80132bc:	0801ec18 	.word	0x0801ec18
 80132c0:	0801eb60 	.word	0x0801eb60
 80132c4:	0801ec30 	.word	0x0801ec30
 80132c8:	0801ec48 	.word	0x0801ec48

080132cc <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 80132cc:	b580      	push	{r7, lr}
 80132ce:	b086      	sub	sp, #24
 80132d0:	af00      	add	r7, sp, #0
 80132d2:	60f8      	str	r0, [r7, #12]
 80132d4:	60b9      	str	r1, [r7, #8]
 80132d6:	4613      	mov	r3, r2
 80132d8:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80132da:	68fb      	ldr	r3, [r7, #12]
 80132dc:	2b00      	cmp	r3, #0
 80132de:	d106      	bne.n	80132ee <pbuf_add_header_impl+0x22>
 80132e0:	4b2b      	ldr	r3, [pc, #172]	; (8013390 <pbuf_add_header_impl+0xc4>)
 80132e2:	f240 12df 	movw	r2, #479	; 0x1df
 80132e6:	492b      	ldr	r1, [pc, #172]	; (8013394 <pbuf_add_header_impl+0xc8>)
 80132e8:	482b      	ldr	r0, [pc, #172]	; (8013398 <pbuf_add_header_impl+0xcc>)
 80132ea:	f00a f8df 	bl	801d4ac <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	2b00      	cmp	r3, #0
 80132f2:	d003      	beq.n	80132fc <pbuf_add_header_impl+0x30>
 80132f4:	68bb      	ldr	r3, [r7, #8]
 80132f6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80132fa:	d301      	bcc.n	8013300 <pbuf_add_header_impl+0x34>
    return 1;
 80132fc:	2301      	movs	r3, #1
 80132fe:	e043      	b.n	8013388 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 8013300:	68bb      	ldr	r3, [r7, #8]
 8013302:	2b00      	cmp	r3, #0
 8013304:	d101      	bne.n	801330a <pbuf_add_header_impl+0x3e>
    return 0;
 8013306:	2300      	movs	r3, #0
 8013308:	e03e      	b.n	8013388 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 801330a:	68bb      	ldr	r3, [r7, #8]
 801330c:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 801330e:	68fb      	ldr	r3, [r7, #12]
 8013310:	891a      	ldrh	r2, [r3, #8]
 8013312:	8a7b      	ldrh	r3, [r7, #18]
 8013314:	4413      	add	r3, r2
 8013316:	b29b      	uxth	r3, r3
 8013318:	8a7a      	ldrh	r2, [r7, #18]
 801331a:	429a      	cmp	r2, r3
 801331c:	d901      	bls.n	8013322 <pbuf_add_header_impl+0x56>
    return 1;
 801331e:	2301      	movs	r3, #1
 8013320:	e032      	b.n	8013388 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 8013322:	68fb      	ldr	r3, [r7, #12]
 8013324:	7b1b      	ldrb	r3, [r3, #12]
 8013326:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 8013328:	8a3b      	ldrh	r3, [r7, #16]
 801332a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 801332e:	2b00      	cmp	r3, #0
 8013330:	d00c      	beq.n	801334c <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 8013332:	68fb      	ldr	r3, [r7, #12]
 8013334:	685a      	ldr	r2, [r3, #4]
 8013336:	68bb      	ldr	r3, [r7, #8]
 8013338:	425b      	negs	r3, r3
 801333a:	4413      	add	r3, r2
 801333c:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 801333e:	68fb      	ldr	r3, [r7, #12]
 8013340:	3310      	adds	r3, #16
 8013342:	697a      	ldr	r2, [r7, #20]
 8013344:	429a      	cmp	r2, r3
 8013346:	d20d      	bcs.n	8013364 <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 8013348:	2301      	movs	r3, #1
 801334a:	e01d      	b.n	8013388 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 801334c:	79fb      	ldrb	r3, [r7, #7]
 801334e:	2b00      	cmp	r3, #0
 8013350:	d006      	beq.n	8013360 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 8013352:	68fb      	ldr	r3, [r7, #12]
 8013354:	685a      	ldr	r2, [r3, #4]
 8013356:	68bb      	ldr	r3, [r7, #8]
 8013358:	425b      	negs	r3, r3
 801335a:	4413      	add	r3, r2
 801335c:	617b      	str	r3, [r7, #20]
 801335e:	e001      	b.n	8013364 <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 8013360:	2301      	movs	r3, #1
 8013362:	e011      	b.n	8013388 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 8013364:	68fb      	ldr	r3, [r7, #12]
 8013366:	697a      	ldr	r2, [r7, #20]
 8013368:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 801336a:	68fb      	ldr	r3, [r7, #12]
 801336c:	895a      	ldrh	r2, [r3, #10]
 801336e:	8a7b      	ldrh	r3, [r7, #18]
 8013370:	4413      	add	r3, r2
 8013372:	b29a      	uxth	r2, r3
 8013374:	68fb      	ldr	r3, [r7, #12]
 8013376:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	891a      	ldrh	r2, [r3, #8]
 801337c:	8a7b      	ldrh	r3, [r7, #18]
 801337e:	4413      	add	r3, r2
 8013380:	b29a      	uxth	r2, r3
 8013382:	68fb      	ldr	r3, [r7, #12]
 8013384:	811a      	strh	r2, [r3, #8]


  return 0;
 8013386:	2300      	movs	r3, #0
}
 8013388:	4618      	mov	r0, r3
 801338a:	3718      	adds	r7, #24
 801338c:	46bd      	mov	sp, r7
 801338e:	bd80      	pop	{r7, pc}
 8013390:	0801eb00 	.word	0x0801eb00
 8013394:	0801ec64 	.word	0x0801ec64
 8013398:	0801eb60 	.word	0x0801eb60

0801339c <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 801339c:	b580      	push	{r7, lr}
 801339e:	b082      	sub	sp, #8
 80133a0:	af00      	add	r7, sp, #0
 80133a2:	6078      	str	r0, [r7, #4]
 80133a4:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 80133a6:	2200      	movs	r2, #0
 80133a8:	6839      	ldr	r1, [r7, #0]
 80133aa:	6878      	ldr	r0, [r7, #4]
 80133ac:	f7ff ff8e 	bl	80132cc <pbuf_add_header_impl>
 80133b0:	4603      	mov	r3, r0
}
 80133b2:	4618      	mov	r0, r3
 80133b4:	3708      	adds	r7, #8
 80133b6:	46bd      	mov	sp, r7
 80133b8:	bd80      	pop	{r7, pc}
	...

080133bc <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 80133bc:	b580      	push	{r7, lr}
 80133be:	b084      	sub	sp, #16
 80133c0:	af00      	add	r7, sp, #0
 80133c2:	6078      	str	r0, [r7, #4]
 80133c4:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 80133c6:	687b      	ldr	r3, [r7, #4]
 80133c8:	2b00      	cmp	r3, #0
 80133ca:	d106      	bne.n	80133da <pbuf_remove_header+0x1e>
 80133cc:	4b20      	ldr	r3, [pc, #128]	; (8013450 <pbuf_remove_header+0x94>)
 80133ce:	f240 224b 	movw	r2, #587	; 0x24b
 80133d2:	4920      	ldr	r1, [pc, #128]	; (8013454 <pbuf_remove_header+0x98>)
 80133d4:	4820      	ldr	r0, [pc, #128]	; (8013458 <pbuf_remove_header+0x9c>)
 80133d6:	f00a f869 	bl	801d4ac <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	2b00      	cmp	r3, #0
 80133de:	d003      	beq.n	80133e8 <pbuf_remove_header+0x2c>
 80133e0:	683b      	ldr	r3, [r7, #0]
 80133e2:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80133e6:	d301      	bcc.n	80133ec <pbuf_remove_header+0x30>
    return 1;
 80133e8:	2301      	movs	r3, #1
 80133ea:	e02c      	b.n	8013446 <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 80133ec:	683b      	ldr	r3, [r7, #0]
 80133ee:	2b00      	cmp	r3, #0
 80133f0:	d101      	bne.n	80133f6 <pbuf_remove_header+0x3a>
    return 0;
 80133f2:	2300      	movs	r3, #0
 80133f4:	e027      	b.n	8013446 <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 80133f6:	683b      	ldr	r3, [r7, #0]
 80133f8:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 80133fa:	687b      	ldr	r3, [r7, #4]
 80133fc:	895b      	ldrh	r3, [r3, #10]
 80133fe:	89fa      	ldrh	r2, [r7, #14]
 8013400:	429a      	cmp	r2, r3
 8013402:	d908      	bls.n	8013416 <pbuf_remove_header+0x5a>
 8013404:	4b12      	ldr	r3, [pc, #72]	; (8013450 <pbuf_remove_header+0x94>)
 8013406:	f240 2255 	movw	r2, #597	; 0x255
 801340a:	4914      	ldr	r1, [pc, #80]	; (801345c <pbuf_remove_header+0xa0>)
 801340c:	4812      	ldr	r0, [pc, #72]	; (8013458 <pbuf_remove_header+0x9c>)
 801340e:	f00a f84d 	bl	801d4ac <iprintf>
 8013412:	2301      	movs	r3, #1
 8013414:	e017      	b.n	8013446 <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 8013416:	687b      	ldr	r3, [r7, #4]
 8013418:	685b      	ldr	r3, [r3, #4]
 801341a:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 801341c:	687b      	ldr	r3, [r7, #4]
 801341e:	685a      	ldr	r2, [r3, #4]
 8013420:	683b      	ldr	r3, [r7, #0]
 8013422:	441a      	add	r2, r3
 8013424:	687b      	ldr	r3, [r7, #4]
 8013426:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 8013428:	687b      	ldr	r3, [r7, #4]
 801342a:	895a      	ldrh	r2, [r3, #10]
 801342c:	89fb      	ldrh	r3, [r7, #14]
 801342e:	1ad3      	subs	r3, r2, r3
 8013430:	b29a      	uxth	r2, r3
 8013432:	687b      	ldr	r3, [r7, #4]
 8013434:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 8013436:	687b      	ldr	r3, [r7, #4]
 8013438:	891a      	ldrh	r2, [r3, #8]
 801343a:	89fb      	ldrh	r3, [r7, #14]
 801343c:	1ad3      	subs	r3, r2, r3
 801343e:	b29a      	uxth	r2, r3
 8013440:	687b      	ldr	r3, [r7, #4]
 8013442:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 8013444:	2300      	movs	r3, #0
}
 8013446:	4618      	mov	r0, r3
 8013448:	3710      	adds	r7, #16
 801344a:	46bd      	mov	sp, r7
 801344c:	bd80      	pop	{r7, pc}
 801344e:	bf00      	nop
 8013450:	0801eb00 	.word	0x0801eb00
 8013454:	0801ec64 	.word	0x0801ec64
 8013458:	0801eb60 	.word	0x0801eb60
 801345c:	0801ec70 	.word	0x0801ec70

08013460 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 8013460:	b580      	push	{r7, lr}
 8013462:	b082      	sub	sp, #8
 8013464:	af00      	add	r7, sp, #0
 8013466:	6078      	str	r0, [r7, #4]
 8013468:	460b      	mov	r3, r1
 801346a:	807b      	strh	r3, [r7, #2]
 801346c:	4613      	mov	r3, r2
 801346e:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 8013470:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 8013474:	2b00      	cmp	r3, #0
 8013476:	da08      	bge.n	801348a <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 8013478:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801347c:	425b      	negs	r3, r3
 801347e:	4619      	mov	r1, r3
 8013480:	6878      	ldr	r0, [r7, #4]
 8013482:	f7ff ff9b 	bl	80133bc <pbuf_remove_header>
 8013486:	4603      	mov	r3, r0
 8013488:	e007      	b.n	801349a <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 801348a:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 801348e:	787a      	ldrb	r2, [r7, #1]
 8013490:	4619      	mov	r1, r3
 8013492:	6878      	ldr	r0, [r7, #4]
 8013494:	f7ff ff1a 	bl	80132cc <pbuf_add_header_impl>
 8013498:	4603      	mov	r3, r0
  }
}
 801349a:	4618      	mov	r0, r3
 801349c:	3708      	adds	r7, #8
 801349e:	46bd      	mov	sp, r7
 80134a0:	bd80      	pop	{r7, pc}

080134a2 <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 80134a2:	b580      	push	{r7, lr}
 80134a4:	b082      	sub	sp, #8
 80134a6:	af00      	add	r7, sp, #0
 80134a8:	6078      	str	r0, [r7, #4]
 80134aa:	460b      	mov	r3, r1
 80134ac:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 80134ae:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 80134b2:	2201      	movs	r2, #1
 80134b4:	4619      	mov	r1, r3
 80134b6:	6878      	ldr	r0, [r7, #4]
 80134b8:	f7ff ffd2 	bl	8013460 <pbuf_header_impl>
 80134bc:	4603      	mov	r3, r0
}
 80134be:	4618      	mov	r0, r3
 80134c0:	3708      	adds	r7, #8
 80134c2:	46bd      	mov	sp, r7
 80134c4:	bd80      	pop	{r7, pc}
	...

080134c8 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 80134c8:	b580      	push	{r7, lr}
 80134ca:	b088      	sub	sp, #32
 80134cc:	af00      	add	r7, sp, #0
 80134ce:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 80134d0:	687b      	ldr	r3, [r7, #4]
 80134d2:	2b00      	cmp	r3, #0
 80134d4:	d10b      	bne.n	80134ee <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 80134d6:	687b      	ldr	r3, [r7, #4]
 80134d8:	2b00      	cmp	r3, #0
 80134da:	d106      	bne.n	80134ea <pbuf_free+0x22>
 80134dc:	4b3b      	ldr	r3, [pc, #236]	; (80135cc <pbuf_free+0x104>)
 80134de:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 80134e2:	493b      	ldr	r1, [pc, #236]	; (80135d0 <pbuf_free+0x108>)
 80134e4:	483b      	ldr	r0, [pc, #236]	; (80135d4 <pbuf_free+0x10c>)
 80134e6:	f009 ffe1 	bl	801d4ac <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 80134ea:	2300      	movs	r3, #0
 80134ec:	e069      	b.n	80135c2 <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 80134ee:	2300      	movs	r3, #0
 80134f0:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 80134f2:	e062      	b.n	80135ba <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 80134f4:	f008 fdd0 	bl	801c098 <sys_arch_protect>
 80134f8:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	7b9b      	ldrb	r3, [r3, #14]
 80134fe:	2b00      	cmp	r3, #0
 8013500:	d106      	bne.n	8013510 <pbuf_free+0x48>
 8013502:	4b32      	ldr	r3, [pc, #200]	; (80135cc <pbuf_free+0x104>)
 8013504:	f240 22f1 	movw	r2, #753	; 0x2f1
 8013508:	4933      	ldr	r1, [pc, #204]	; (80135d8 <pbuf_free+0x110>)
 801350a:	4832      	ldr	r0, [pc, #200]	; (80135d4 <pbuf_free+0x10c>)
 801350c:	f009 ffce 	bl	801d4ac <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 8013510:	687b      	ldr	r3, [r7, #4]
 8013512:	7b9b      	ldrb	r3, [r3, #14]
 8013514:	3b01      	subs	r3, #1
 8013516:	b2da      	uxtb	r2, r3
 8013518:	687b      	ldr	r3, [r7, #4]
 801351a:	739a      	strb	r2, [r3, #14]
 801351c:	687b      	ldr	r3, [r7, #4]
 801351e:	7b9b      	ldrb	r3, [r3, #14]
 8013520:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 8013522:	69b8      	ldr	r0, [r7, #24]
 8013524:	f008 fdc6 	bl	801c0b4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 8013528:	7dfb      	ldrb	r3, [r7, #23]
 801352a:	2b00      	cmp	r3, #0
 801352c:	d143      	bne.n	80135b6 <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 801352e:	687b      	ldr	r3, [r7, #4]
 8013530:	681b      	ldr	r3, [r3, #0]
 8013532:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 8013534:	687b      	ldr	r3, [r7, #4]
 8013536:	7b1b      	ldrb	r3, [r3, #12]
 8013538:	f003 030f 	and.w	r3, r3, #15
 801353c:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 801353e:	687b      	ldr	r3, [r7, #4]
 8013540:	7b5b      	ldrb	r3, [r3, #13]
 8013542:	f003 0302 	and.w	r3, r3, #2
 8013546:	2b00      	cmp	r3, #0
 8013548:	d011      	beq.n	801356e <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 801354a:	687b      	ldr	r3, [r7, #4]
 801354c:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 801354e:	68bb      	ldr	r3, [r7, #8]
 8013550:	691b      	ldr	r3, [r3, #16]
 8013552:	2b00      	cmp	r3, #0
 8013554:	d106      	bne.n	8013564 <pbuf_free+0x9c>
 8013556:	4b1d      	ldr	r3, [pc, #116]	; (80135cc <pbuf_free+0x104>)
 8013558:	f240 22ff 	movw	r2, #767	; 0x2ff
 801355c:	491f      	ldr	r1, [pc, #124]	; (80135dc <pbuf_free+0x114>)
 801355e:	481d      	ldr	r0, [pc, #116]	; (80135d4 <pbuf_free+0x10c>)
 8013560:	f009 ffa4 	bl	801d4ac <iprintf>
        pc->custom_free_function(p);
 8013564:	68bb      	ldr	r3, [r7, #8]
 8013566:	691b      	ldr	r3, [r3, #16]
 8013568:	6878      	ldr	r0, [r7, #4]
 801356a:	4798      	blx	r3
 801356c:	e01d      	b.n	80135aa <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 801356e:	7bfb      	ldrb	r3, [r7, #15]
 8013570:	2b02      	cmp	r3, #2
 8013572:	d104      	bne.n	801357e <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 8013574:	6879      	ldr	r1, [r7, #4]
 8013576:	200c      	movs	r0, #12
 8013578:	f7ff f902 	bl	8012780 <memp_free>
 801357c:	e015      	b.n	80135aa <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 801357e:	7bfb      	ldrb	r3, [r7, #15]
 8013580:	2b01      	cmp	r3, #1
 8013582:	d104      	bne.n	801358e <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 8013584:	6879      	ldr	r1, [r7, #4]
 8013586:	200b      	movs	r0, #11
 8013588:	f7ff f8fa 	bl	8012780 <memp_free>
 801358c:	e00d      	b.n	80135aa <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 801358e:	7bfb      	ldrb	r3, [r7, #15]
 8013590:	2b00      	cmp	r3, #0
 8013592:	d103      	bne.n	801359c <pbuf_free+0xd4>
          mem_free(p);
 8013594:	6878      	ldr	r0, [r7, #4]
 8013596:	f7fe fd35 	bl	8012004 <mem_free>
 801359a:	e006      	b.n	80135aa <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 801359c:	4b0b      	ldr	r3, [pc, #44]	; (80135cc <pbuf_free+0x104>)
 801359e:	f240 320f 	movw	r2, #783	; 0x30f
 80135a2:	490f      	ldr	r1, [pc, #60]	; (80135e0 <pbuf_free+0x118>)
 80135a4:	480b      	ldr	r0, [pc, #44]	; (80135d4 <pbuf_free+0x10c>)
 80135a6:	f009 ff81 	bl	801d4ac <iprintf>
        }
      }
      count++;
 80135aa:	7ffb      	ldrb	r3, [r7, #31]
 80135ac:	3301      	adds	r3, #1
 80135ae:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 80135b0:	693b      	ldr	r3, [r7, #16]
 80135b2:	607b      	str	r3, [r7, #4]
 80135b4:	e001      	b.n	80135ba <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 80135b6:	2300      	movs	r3, #0
 80135b8:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80135ba:	687b      	ldr	r3, [r7, #4]
 80135bc:	2b00      	cmp	r3, #0
 80135be:	d199      	bne.n	80134f4 <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 80135c0:	7ffb      	ldrb	r3, [r7, #31]
}
 80135c2:	4618      	mov	r0, r3
 80135c4:	3720      	adds	r7, #32
 80135c6:	46bd      	mov	sp, r7
 80135c8:	bd80      	pop	{r7, pc}
 80135ca:	bf00      	nop
 80135cc:	0801eb00 	.word	0x0801eb00
 80135d0:	0801ec64 	.word	0x0801ec64
 80135d4:	0801eb60 	.word	0x0801eb60
 80135d8:	0801ec90 	.word	0x0801ec90
 80135dc:	0801eca8 	.word	0x0801eca8
 80135e0:	0801eccc 	.word	0x0801eccc

080135e4 <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 80135e4:	b480      	push	{r7}
 80135e6:	b085      	sub	sp, #20
 80135e8:	af00      	add	r7, sp, #0
 80135ea:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 80135ec:	2300      	movs	r3, #0
 80135ee:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 80135f0:	e005      	b.n	80135fe <pbuf_clen+0x1a>
    ++len;
 80135f2:	89fb      	ldrh	r3, [r7, #14]
 80135f4:	3301      	adds	r3, #1
 80135f6:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 80135f8:	687b      	ldr	r3, [r7, #4]
 80135fa:	681b      	ldr	r3, [r3, #0]
 80135fc:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 80135fe:	687b      	ldr	r3, [r7, #4]
 8013600:	2b00      	cmp	r3, #0
 8013602:	d1f6      	bne.n	80135f2 <pbuf_clen+0xe>
  }
  return len;
 8013604:	89fb      	ldrh	r3, [r7, #14]
}
 8013606:	4618      	mov	r0, r3
 8013608:	3714      	adds	r7, #20
 801360a:	46bd      	mov	sp, r7
 801360c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013610:	4770      	bx	lr
	...

08013614 <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 8013614:	b580      	push	{r7, lr}
 8013616:	b084      	sub	sp, #16
 8013618:	af00      	add	r7, sp, #0
 801361a:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 801361c:	687b      	ldr	r3, [r7, #4]
 801361e:	2b00      	cmp	r3, #0
 8013620:	d016      	beq.n	8013650 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 8013622:	f008 fd39 	bl	801c098 <sys_arch_protect>
 8013626:	60f8      	str	r0, [r7, #12]
 8013628:	687b      	ldr	r3, [r7, #4]
 801362a:	7b9b      	ldrb	r3, [r3, #14]
 801362c:	3301      	adds	r3, #1
 801362e:	b2da      	uxtb	r2, r3
 8013630:	687b      	ldr	r3, [r7, #4]
 8013632:	739a      	strb	r2, [r3, #14]
 8013634:	68f8      	ldr	r0, [r7, #12]
 8013636:	f008 fd3d 	bl	801c0b4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	7b9b      	ldrb	r3, [r3, #14]
 801363e:	2b00      	cmp	r3, #0
 8013640:	d106      	bne.n	8013650 <pbuf_ref+0x3c>
 8013642:	4b05      	ldr	r3, [pc, #20]	; (8013658 <pbuf_ref+0x44>)
 8013644:	f240 3242 	movw	r2, #834	; 0x342
 8013648:	4904      	ldr	r1, [pc, #16]	; (801365c <pbuf_ref+0x48>)
 801364a:	4805      	ldr	r0, [pc, #20]	; (8013660 <pbuf_ref+0x4c>)
 801364c:	f009 ff2e 	bl	801d4ac <iprintf>
  }
}
 8013650:	bf00      	nop
 8013652:	3710      	adds	r7, #16
 8013654:	46bd      	mov	sp, r7
 8013656:	bd80      	pop	{r7, pc}
 8013658:	0801eb00 	.word	0x0801eb00
 801365c:	0801ece0 	.word	0x0801ece0
 8013660:	0801eb60 	.word	0x0801eb60

08013664 <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 8013664:	b580      	push	{r7, lr}
 8013666:	b084      	sub	sp, #16
 8013668:	af00      	add	r7, sp, #0
 801366a:	6078      	str	r0, [r7, #4]
 801366c:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 801366e:	687b      	ldr	r3, [r7, #4]
 8013670:	2b00      	cmp	r3, #0
 8013672:	d002      	beq.n	801367a <pbuf_cat+0x16>
 8013674:	683b      	ldr	r3, [r7, #0]
 8013676:	2b00      	cmp	r3, #0
 8013678:	d107      	bne.n	801368a <pbuf_cat+0x26>
 801367a:	4b20      	ldr	r3, [pc, #128]	; (80136fc <pbuf_cat+0x98>)
 801367c:	f240 3259 	movw	r2, #857	; 0x359
 8013680:	491f      	ldr	r1, [pc, #124]	; (8013700 <pbuf_cat+0x9c>)
 8013682:	4820      	ldr	r0, [pc, #128]	; (8013704 <pbuf_cat+0xa0>)
 8013684:	f009 ff12 	bl	801d4ac <iprintf>
 8013688:	e034      	b.n	80136f4 <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 801368a:	687b      	ldr	r3, [r7, #4]
 801368c:	60fb      	str	r3, [r7, #12]
 801368e:	e00a      	b.n	80136a6 <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 8013690:	68fb      	ldr	r3, [r7, #12]
 8013692:	891a      	ldrh	r2, [r3, #8]
 8013694:	683b      	ldr	r3, [r7, #0]
 8013696:	891b      	ldrh	r3, [r3, #8]
 8013698:	4413      	add	r3, r2
 801369a:	b29a      	uxth	r2, r3
 801369c:	68fb      	ldr	r3, [r7, #12]
 801369e:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 80136a0:	68fb      	ldr	r3, [r7, #12]
 80136a2:	681b      	ldr	r3, [r3, #0]
 80136a4:	60fb      	str	r3, [r7, #12]
 80136a6:	68fb      	ldr	r3, [r7, #12]
 80136a8:	681b      	ldr	r3, [r3, #0]
 80136aa:	2b00      	cmp	r3, #0
 80136ac:	d1f0      	bne.n	8013690 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 80136ae:	68fb      	ldr	r3, [r7, #12]
 80136b0:	891a      	ldrh	r2, [r3, #8]
 80136b2:	68fb      	ldr	r3, [r7, #12]
 80136b4:	895b      	ldrh	r3, [r3, #10]
 80136b6:	429a      	cmp	r2, r3
 80136b8:	d006      	beq.n	80136c8 <pbuf_cat+0x64>
 80136ba:	4b10      	ldr	r3, [pc, #64]	; (80136fc <pbuf_cat+0x98>)
 80136bc:	f240 3262 	movw	r2, #866	; 0x362
 80136c0:	4911      	ldr	r1, [pc, #68]	; (8013708 <pbuf_cat+0xa4>)
 80136c2:	4810      	ldr	r0, [pc, #64]	; (8013704 <pbuf_cat+0xa0>)
 80136c4:	f009 fef2 	bl	801d4ac <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 80136c8:	68fb      	ldr	r3, [r7, #12]
 80136ca:	681b      	ldr	r3, [r3, #0]
 80136cc:	2b00      	cmp	r3, #0
 80136ce:	d006      	beq.n	80136de <pbuf_cat+0x7a>
 80136d0:	4b0a      	ldr	r3, [pc, #40]	; (80136fc <pbuf_cat+0x98>)
 80136d2:	f240 3263 	movw	r2, #867	; 0x363
 80136d6:	490d      	ldr	r1, [pc, #52]	; (801370c <pbuf_cat+0xa8>)
 80136d8:	480a      	ldr	r0, [pc, #40]	; (8013704 <pbuf_cat+0xa0>)
 80136da:	f009 fee7 	bl	801d4ac <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 80136de:	68fb      	ldr	r3, [r7, #12]
 80136e0:	891a      	ldrh	r2, [r3, #8]
 80136e2:	683b      	ldr	r3, [r7, #0]
 80136e4:	891b      	ldrh	r3, [r3, #8]
 80136e6:	4413      	add	r3, r2
 80136e8:	b29a      	uxth	r2, r3
 80136ea:	68fb      	ldr	r3, [r7, #12]
 80136ec:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 80136ee:	68fb      	ldr	r3, [r7, #12]
 80136f0:	683a      	ldr	r2, [r7, #0]
 80136f2:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 80136f4:	3710      	adds	r7, #16
 80136f6:	46bd      	mov	sp, r7
 80136f8:	bd80      	pop	{r7, pc}
 80136fa:	bf00      	nop
 80136fc:	0801eb00 	.word	0x0801eb00
 8013700:	0801ecf4 	.word	0x0801ecf4
 8013704:	0801eb60 	.word	0x0801eb60
 8013708:	0801ed2c 	.word	0x0801ed2c
 801370c:	0801ed5c 	.word	0x0801ed5c

08013710 <pbuf_chain>:
 * The ->ref field of the first pbuf of the tail chain is adjusted.
 *
 */
void
pbuf_chain(struct pbuf *h, struct pbuf *t)
{
 8013710:	b580      	push	{r7, lr}
 8013712:	b082      	sub	sp, #8
 8013714:	af00      	add	r7, sp, #0
 8013716:	6078      	str	r0, [r7, #4]
 8013718:	6039      	str	r1, [r7, #0]
  pbuf_cat(h, t);
 801371a:	6839      	ldr	r1, [r7, #0]
 801371c:	6878      	ldr	r0, [r7, #4]
 801371e:	f7ff ffa1 	bl	8013664 <pbuf_cat>
  /* t is now referenced by h */
  pbuf_ref(t);
 8013722:	6838      	ldr	r0, [r7, #0]
 8013724:	f7ff ff76 	bl	8013614 <pbuf_ref>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_chain: %p references %p\n", (void *)h, (void *)t));
}
 8013728:	bf00      	nop
 801372a:	3708      	adds	r7, #8
 801372c:	46bd      	mov	sp, r7
 801372e:	bd80      	pop	{r7, pc}

08013730 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 8013730:	b580      	push	{r7, lr}
 8013732:	b086      	sub	sp, #24
 8013734:	af00      	add	r7, sp, #0
 8013736:	6078      	str	r0, [r7, #4]
 8013738:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 801373a:	2300      	movs	r3, #0
 801373c:	617b      	str	r3, [r7, #20]
 801373e:	2300      	movs	r3, #0
 8013740:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 8013742:	687b      	ldr	r3, [r7, #4]
 8013744:	2b00      	cmp	r3, #0
 8013746:	d008      	beq.n	801375a <pbuf_copy+0x2a>
 8013748:	683b      	ldr	r3, [r7, #0]
 801374a:	2b00      	cmp	r3, #0
 801374c:	d005      	beq.n	801375a <pbuf_copy+0x2a>
 801374e:	687b      	ldr	r3, [r7, #4]
 8013750:	891a      	ldrh	r2, [r3, #8]
 8013752:	683b      	ldr	r3, [r7, #0]
 8013754:	891b      	ldrh	r3, [r3, #8]
 8013756:	429a      	cmp	r2, r3
 8013758:	d209      	bcs.n	801376e <pbuf_copy+0x3e>
 801375a:	4b57      	ldr	r3, [pc, #348]	; (80138b8 <pbuf_copy+0x188>)
 801375c:	f240 32c9 	movw	r2, #969	; 0x3c9
 8013760:	4956      	ldr	r1, [pc, #344]	; (80138bc <pbuf_copy+0x18c>)
 8013762:	4857      	ldr	r0, [pc, #348]	; (80138c0 <pbuf_copy+0x190>)
 8013764:	f009 fea2 	bl	801d4ac <iprintf>
 8013768:	f06f 030f 	mvn.w	r3, #15
 801376c:	e09f      	b.n	80138ae <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 801376e:	687b      	ldr	r3, [r7, #4]
 8013770:	895b      	ldrh	r3, [r3, #10]
 8013772:	461a      	mov	r2, r3
 8013774:	697b      	ldr	r3, [r7, #20]
 8013776:	1ad2      	subs	r2, r2, r3
 8013778:	683b      	ldr	r3, [r7, #0]
 801377a:	895b      	ldrh	r3, [r3, #10]
 801377c:	4619      	mov	r1, r3
 801377e:	693b      	ldr	r3, [r7, #16]
 8013780:	1acb      	subs	r3, r1, r3
 8013782:	429a      	cmp	r2, r3
 8013784:	d306      	bcc.n	8013794 <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 8013786:	683b      	ldr	r3, [r7, #0]
 8013788:	895b      	ldrh	r3, [r3, #10]
 801378a:	461a      	mov	r2, r3
 801378c:	693b      	ldr	r3, [r7, #16]
 801378e:	1ad3      	subs	r3, r2, r3
 8013790:	60fb      	str	r3, [r7, #12]
 8013792:	e005      	b.n	80137a0 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 8013794:	687b      	ldr	r3, [r7, #4]
 8013796:	895b      	ldrh	r3, [r3, #10]
 8013798:	461a      	mov	r2, r3
 801379a:	697b      	ldr	r3, [r7, #20]
 801379c:	1ad3      	subs	r3, r2, r3
 801379e:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 80137a0:	687b      	ldr	r3, [r7, #4]
 80137a2:	685a      	ldr	r2, [r3, #4]
 80137a4:	697b      	ldr	r3, [r7, #20]
 80137a6:	18d0      	adds	r0, r2, r3
 80137a8:	683b      	ldr	r3, [r7, #0]
 80137aa:	685a      	ldr	r2, [r3, #4]
 80137ac:	693b      	ldr	r3, [r7, #16]
 80137ae:	4413      	add	r3, r2
 80137b0:	68fa      	ldr	r2, [r7, #12]
 80137b2:	4619      	mov	r1, r3
 80137b4:	f009 ffab 	bl	801d70e <memcpy>
    offset_to += len;
 80137b8:	697a      	ldr	r2, [r7, #20]
 80137ba:	68fb      	ldr	r3, [r7, #12]
 80137bc:	4413      	add	r3, r2
 80137be:	617b      	str	r3, [r7, #20]
    offset_from += len;
 80137c0:	693a      	ldr	r2, [r7, #16]
 80137c2:	68fb      	ldr	r3, [r7, #12]
 80137c4:	4413      	add	r3, r2
 80137c6:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 80137c8:	687b      	ldr	r3, [r7, #4]
 80137ca:	895b      	ldrh	r3, [r3, #10]
 80137cc:	461a      	mov	r2, r3
 80137ce:	697b      	ldr	r3, [r7, #20]
 80137d0:	4293      	cmp	r3, r2
 80137d2:	d906      	bls.n	80137e2 <pbuf_copy+0xb2>
 80137d4:	4b38      	ldr	r3, [pc, #224]	; (80138b8 <pbuf_copy+0x188>)
 80137d6:	f240 32d9 	movw	r2, #985	; 0x3d9
 80137da:	493a      	ldr	r1, [pc, #232]	; (80138c4 <pbuf_copy+0x194>)
 80137dc:	4838      	ldr	r0, [pc, #224]	; (80138c0 <pbuf_copy+0x190>)
 80137de:	f009 fe65 	bl	801d4ac <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 80137e2:	683b      	ldr	r3, [r7, #0]
 80137e4:	895b      	ldrh	r3, [r3, #10]
 80137e6:	461a      	mov	r2, r3
 80137e8:	693b      	ldr	r3, [r7, #16]
 80137ea:	4293      	cmp	r3, r2
 80137ec:	d906      	bls.n	80137fc <pbuf_copy+0xcc>
 80137ee:	4b32      	ldr	r3, [pc, #200]	; (80138b8 <pbuf_copy+0x188>)
 80137f0:	f240 32da 	movw	r2, #986	; 0x3da
 80137f4:	4934      	ldr	r1, [pc, #208]	; (80138c8 <pbuf_copy+0x198>)
 80137f6:	4832      	ldr	r0, [pc, #200]	; (80138c0 <pbuf_copy+0x190>)
 80137f8:	f009 fe58 	bl	801d4ac <iprintf>
    if (offset_from >= p_from->len) {
 80137fc:	683b      	ldr	r3, [r7, #0]
 80137fe:	895b      	ldrh	r3, [r3, #10]
 8013800:	461a      	mov	r2, r3
 8013802:	693b      	ldr	r3, [r7, #16]
 8013804:	4293      	cmp	r3, r2
 8013806:	d304      	bcc.n	8013812 <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 8013808:	2300      	movs	r3, #0
 801380a:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 801380c:	683b      	ldr	r3, [r7, #0]
 801380e:	681b      	ldr	r3, [r3, #0]
 8013810:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 8013812:	687b      	ldr	r3, [r7, #4]
 8013814:	895b      	ldrh	r3, [r3, #10]
 8013816:	461a      	mov	r2, r3
 8013818:	697b      	ldr	r3, [r7, #20]
 801381a:	4293      	cmp	r3, r2
 801381c:	d114      	bne.n	8013848 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 801381e:	2300      	movs	r3, #0
 8013820:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 8013822:	687b      	ldr	r3, [r7, #4]
 8013824:	681b      	ldr	r3, [r3, #0]
 8013826:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 8013828:	687b      	ldr	r3, [r7, #4]
 801382a:	2b00      	cmp	r3, #0
 801382c:	d10c      	bne.n	8013848 <pbuf_copy+0x118>
 801382e:	683b      	ldr	r3, [r7, #0]
 8013830:	2b00      	cmp	r3, #0
 8013832:	d009      	beq.n	8013848 <pbuf_copy+0x118>
 8013834:	4b20      	ldr	r3, [pc, #128]	; (80138b8 <pbuf_copy+0x188>)
 8013836:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 801383a:	4924      	ldr	r1, [pc, #144]	; (80138cc <pbuf_copy+0x19c>)
 801383c:	4820      	ldr	r0, [pc, #128]	; (80138c0 <pbuf_copy+0x190>)
 801383e:	f009 fe35 	bl	801d4ac <iprintf>
 8013842:	f06f 030f 	mvn.w	r3, #15
 8013846:	e032      	b.n	80138ae <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 8013848:	683b      	ldr	r3, [r7, #0]
 801384a:	2b00      	cmp	r3, #0
 801384c:	d013      	beq.n	8013876 <pbuf_copy+0x146>
 801384e:	683b      	ldr	r3, [r7, #0]
 8013850:	895a      	ldrh	r2, [r3, #10]
 8013852:	683b      	ldr	r3, [r7, #0]
 8013854:	891b      	ldrh	r3, [r3, #8]
 8013856:	429a      	cmp	r2, r3
 8013858:	d10d      	bne.n	8013876 <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 801385a:	683b      	ldr	r3, [r7, #0]
 801385c:	681b      	ldr	r3, [r3, #0]
 801385e:	2b00      	cmp	r3, #0
 8013860:	d009      	beq.n	8013876 <pbuf_copy+0x146>
 8013862:	4b15      	ldr	r3, [pc, #84]	; (80138b8 <pbuf_copy+0x188>)
 8013864:	f240 32e9 	movw	r2, #1001	; 0x3e9
 8013868:	4919      	ldr	r1, [pc, #100]	; (80138d0 <pbuf_copy+0x1a0>)
 801386a:	4815      	ldr	r0, [pc, #84]	; (80138c0 <pbuf_copy+0x190>)
 801386c:	f009 fe1e 	bl	801d4ac <iprintf>
 8013870:	f06f 0305 	mvn.w	r3, #5
 8013874:	e01b      	b.n	80138ae <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 8013876:	687b      	ldr	r3, [r7, #4]
 8013878:	2b00      	cmp	r3, #0
 801387a:	d013      	beq.n	80138a4 <pbuf_copy+0x174>
 801387c:	687b      	ldr	r3, [r7, #4]
 801387e:	895a      	ldrh	r2, [r3, #10]
 8013880:	687b      	ldr	r3, [r7, #4]
 8013882:	891b      	ldrh	r3, [r3, #8]
 8013884:	429a      	cmp	r2, r3
 8013886:	d10d      	bne.n	80138a4 <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 8013888:	687b      	ldr	r3, [r7, #4]
 801388a:	681b      	ldr	r3, [r3, #0]
 801388c:	2b00      	cmp	r3, #0
 801388e:	d009      	beq.n	80138a4 <pbuf_copy+0x174>
 8013890:	4b09      	ldr	r3, [pc, #36]	; (80138b8 <pbuf_copy+0x188>)
 8013892:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8013896:	490e      	ldr	r1, [pc, #56]	; (80138d0 <pbuf_copy+0x1a0>)
 8013898:	4809      	ldr	r0, [pc, #36]	; (80138c0 <pbuf_copy+0x190>)
 801389a:	f009 fe07 	bl	801d4ac <iprintf>
 801389e:	f06f 0305 	mvn.w	r3, #5
 80138a2:	e004      	b.n	80138ae <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 80138a4:	683b      	ldr	r3, [r7, #0]
 80138a6:	2b00      	cmp	r3, #0
 80138a8:	f47f af61 	bne.w	801376e <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 80138ac:	2300      	movs	r3, #0
}
 80138ae:	4618      	mov	r0, r3
 80138b0:	3718      	adds	r7, #24
 80138b2:	46bd      	mov	sp, r7
 80138b4:	bd80      	pop	{r7, pc}
 80138b6:	bf00      	nop
 80138b8:	0801eb00 	.word	0x0801eb00
 80138bc:	0801eda8 	.word	0x0801eda8
 80138c0:	0801eb60 	.word	0x0801eb60
 80138c4:	0801edd8 	.word	0x0801edd8
 80138c8:	0801edf0 	.word	0x0801edf0
 80138cc:	0801ee0c 	.word	0x0801ee0c
 80138d0:	0801ee1c 	.word	0x0801ee1c

080138d4 <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 80138d4:	b580      	push	{r7, lr}
 80138d6:	b088      	sub	sp, #32
 80138d8:	af00      	add	r7, sp, #0
 80138da:	60f8      	str	r0, [r7, #12]
 80138dc:	60b9      	str	r1, [r7, #8]
 80138de:	4611      	mov	r1, r2
 80138e0:	461a      	mov	r2, r3
 80138e2:	460b      	mov	r3, r1
 80138e4:	80fb      	strh	r3, [r7, #6]
 80138e6:	4613      	mov	r3, r2
 80138e8:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 80138ea:	2300      	movs	r3, #0
 80138ec:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 80138ee:	2300      	movs	r3, #0
 80138f0:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 80138f2:	68fb      	ldr	r3, [r7, #12]
 80138f4:	2b00      	cmp	r3, #0
 80138f6:	d108      	bne.n	801390a <pbuf_copy_partial+0x36>
 80138f8:	4b2b      	ldr	r3, [pc, #172]	; (80139a8 <pbuf_copy_partial+0xd4>)
 80138fa:	f240 420a 	movw	r2, #1034	; 0x40a
 80138fe:	492b      	ldr	r1, [pc, #172]	; (80139ac <pbuf_copy_partial+0xd8>)
 8013900:	482b      	ldr	r0, [pc, #172]	; (80139b0 <pbuf_copy_partial+0xdc>)
 8013902:	f009 fdd3 	bl	801d4ac <iprintf>
 8013906:	2300      	movs	r3, #0
 8013908:	e04a      	b.n	80139a0 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 801390a:	68bb      	ldr	r3, [r7, #8]
 801390c:	2b00      	cmp	r3, #0
 801390e:	d108      	bne.n	8013922 <pbuf_copy_partial+0x4e>
 8013910:	4b25      	ldr	r3, [pc, #148]	; (80139a8 <pbuf_copy_partial+0xd4>)
 8013912:	f240 420b 	movw	r2, #1035	; 0x40b
 8013916:	4927      	ldr	r1, [pc, #156]	; (80139b4 <pbuf_copy_partial+0xe0>)
 8013918:	4825      	ldr	r0, [pc, #148]	; (80139b0 <pbuf_copy_partial+0xdc>)
 801391a:	f009 fdc7 	bl	801d4ac <iprintf>
 801391e:	2300      	movs	r3, #0
 8013920:	e03e      	b.n	80139a0 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 8013922:	68fb      	ldr	r3, [r7, #12]
 8013924:	61fb      	str	r3, [r7, #28]
 8013926:	e034      	b.n	8013992 <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 8013928:	88bb      	ldrh	r3, [r7, #4]
 801392a:	2b00      	cmp	r3, #0
 801392c:	d00a      	beq.n	8013944 <pbuf_copy_partial+0x70>
 801392e:	69fb      	ldr	r3, [r7, #28]
 8013930:	895b      	ldrh	r3, [r3, #10]
 8013932:	88ba      	ldrh	r2, [r7, #4]
 8013934:	429a      	cmp	r2, r3
 8013936:	d305      	bcc.n	8013944 <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 8013938:	69fb      	ldr	r3, [r7, #28]
 801393a:	895b      	ldrh	r3, [r3, #10]
 801393c:	88ba      	ldrh	r2, [r7, #4]
 801393e:	1ad3      	subs	r3, r2, r3
 8013940:	80bb      	strh	r3, [r7, #4]
 8013942:	e023      	b.n	801398c <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 8013944:	69fb      	ldr	r3, [r7, #28]
 8013946:	895a      	ldrh	r2, [r3, #10]
 8013948:	88bb      	ldrh	r3, [r7, #4]
 801394a:	1ad3      	subs	r3, r2, r3
 801394c:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 801394e:	8b3a      	ldrh	r2, [r7, #24]
 8013950:	88fb      	ldrh	r3, [r7, #6]
 8013952:	429a      	cmp	r2, r3
 8013954:	d901      	bls.n	801395a <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 8013956:	88fb      	ldrh	r3, [r7, #6]
 8013958:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 801395a:	8b7b      	ldrh	r3, [r7, #26]
 801395c:	68ba      	ldr	r2, [r7, #8]
 801395e:	18d0      	adds	r0, r2, r3
 8013960:	69fb      	ldr	r3, [r7, #28]
 8013962:	685a      	ldr	r2, [r3, #4]
 8013964:	88bb      	ldrh	r3, [r7, #4]
 8013966:	4413      	add	r3, r2
 8013968:	8b3a      	ldrh	r2, [r7, #24]
 801396a:	4619      	mov	r1, r3
 801396c:	f009 fecf 	bl	801d70e <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 8013970:	8afa      	ldrh	r2, [r7, #22]
 8013972:	8b3b      	ldrh	r3, [r7, #24]
 8013974:	4413      	add	r3, r2
 8013976:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 8013978:	8b7a      	ldrh	r2, [r7, #26]
 801397a:	8b3b      	ldrh	r3, [r7, #24]
 801397c:	4413      	add	r3, r2
 801397e:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 8013980:	88fa      	ldrh	r2, [r7, #6]
 8013982:	8b3b      	ldrh	r3, [r7, #24]
 8013984:	1ad3      	subs	r3, r2, r3
 8013986:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 8013988:	2300      	movs	r3, #0
 801398a:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 801398c:	69fb      	ldr	r3, [r7, #28]
 801398e:	681b      	ldr	r3, [r3, #0]
 8013990:	61fb      	str	r3, [r7, #28]
 8013992:	88fb      	ldrh	r3, [r7, #6]
 8013994:	2b00      	cmp	r3, #0
 8013996:	d002      	beq.n	801399e <pbuf_copy_partial+0xca>
 8013998:	69fb      	ldr	r3, [r7, #28]
 801399a:	2b00      	cmp	r3, #0
 801399c:	d1c4      	bne.n	8013928 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 801399e:	8afb      	ldrh	r3, [r7, #22]
}
 80139a0:	4618      	mov	r0, r3
 80139a2:	3720      	adds	r7, #32
 80139a4:	46bd      	mov	sp, r7
 80139a6:	bd80      	pop	{r7, pc}
 80139a8:	0801eb00 	.word	0x0801eb00
 80139ac:	0801ee48 	.word	0x0801ee48
 80139b0:	0801eb60 	.word	0x0801eb60
 80139b4:	0801ee68 	.word	0x0801ee68

080139b8 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 80139b8:	b580      	push	{r7, lr}
 80139ba:	b084      	sub	sp, #16
 80139bc:	af00      	add	r7, sp, #0
 80139be:	4603      	mov	r3, r0
 80139c0:	603a      	str	r2, [r7, #0]
 80139c2:	71fb      	strb	r3, [r7, #7]
 80139c4:	460b      	mov	r3, r1
 80139c6:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 80139c8:	683b      	ldr	r3, [r7, #0]
 80139ca:	8919      	ldrh	r1, [r3, #8]
 80139cc:	88ba      	ldrh	r2, [r7, #4]
 80139ce:	79fb      	ldrb	r3, [r7, #7]
 80139d0:	4618      	mov	r0, r3
 80139d2:	f7ff fa95 	bl	8012f00 <pbuf_alloc>
 80139d6:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 80139d8:	68fb      	ldr	r3, [r7, #12]
 80139da:	2b00      	cmp	r3, #0
 80139dc:	d101      	bne.n	80139e2 <pbuf_clone+0x2a>
    return NULL;
 80139de:	2300      	movs	r3, #0
 80139e0:	e011      	b.n	8013a06 <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 80139e2:	6839      	ldr	r1, [r7, #0]
 80139e4:	68f8      	ldr	r0, [r7, #12]
 80139e6:	f7ff fea3 	bl	8013730 <pbuf_copy>
 80139ea:	4603      	mov	r3, r0
 80139ec:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 80139ee:	f997 300b 	ldrsb.w	r3, [r7, #11]
 80139f2:	2b00      	cmp	r3, #0
 80139f4:	d006      	beq.n	8013a04 <pbuf_clone+0x4c>
 80139f6:	4b06      	ldr	r3, [pc, #24]	; (8013a10 <pbuf_clone+0x58>)
 80139f8:	f240 5224 	movw	r2, #1316	; 0x524
 80139fc:	4905      	ldr	r1, [pc, #20]	; (8013a14 <pbuf_clone+0x5c>)
 80139fe:	4806      	ldr	r0, [pc, #24]	; (8013a18 <pbuf_clone+0x60>)
 8013a00:	f009 fd54 	bl	801d4ac <iprintf>
  return q;
 8013a04:	68fb      	ldr	r3, [r7, #12]
}
 8013a06:	4618      	mov	r0, r3
 8013a08:	3710      	adds	r7, #16
 8013a0a:	46bd      	mov	sp, r7
 8013a0c:	bd80      	pop	{r7, pc}
 8013a0e:	bf00      	nop
 8013a10:	0801eb00 	.word	0x0801eb00
 8013a14:	0801ef74 	.word	0x0801ef74
 8013a18:	0801eb60 	.word	0x0801eb60

08013a1c <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 8013a1c:	b580      	push	{r7, lr}
 8013a1e:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013a20:	f009 fc44 	bl	801d2ac <rand>
 8013a24:	4603      	mov	r3, r0
 8013a26:	b29b      	uxth	r3, r3
 8013a28:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013a2c:	b29b      	uxth	r3, r3
 8013a2e:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8013a32:	b29a      	uxth	r2, r3
 8013a34:	4b01      	ldr	r3, [pc, #4]	; (8013a3c <tcp_init+0x20>)
 8013a36:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013a38:	bf00      	nop
 8013a3a:	bd80      	pop	{r7, pc}
 8013a3c:	20000024 	.word	0x20000024

08013a40 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 8013a40:	b580      	push	{r7, lr}
 8013a42:	b082      	sub	sp, #8
 8013a44:	af00      	add	r7, sp, #0
 8013a46:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 8013a48:	687b      	ldr	r3, [r7, #4]
 8013a4a:	7d1b      	ldrb	r3, [r3, #20]
 8013a4c:	2b01      	cmp	r3, #1
 8013a4e:	d105      	bne.n	8013a5c <tcp_free+0x1c>
 8013a50:	4b06      	ldr	r3, [pc, #24]	; (8013a6c <tcp_free+0x2c>)
 8013a52:	22d4      	movs	r2, #212	; 0xd4
 8013a54:	4906      	ldr	r1, [pc, #24]	; (8013a70 <tcp_free+0x30>)
 8013a56:	4807      	ldr	r0, [pc, #28]	; (8013a74 <tcp_free+0x34>)
 8013a58:	f009 fd28 	bl	801d4ac <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 8013a5c:	6879      	ldr	r1, [r7, #4]
 8013a5e:	2001      	movs	r0, #1
 8013a60:	f7fe fe8e 	bl	8012780 <memp_free>
}
 8013a64:	bf00      	nop
 8013a66:	3708      	adds	r7, #8
 8013a68:	46bd      	mov	sp, r7
 8013a6a:	bd80      	pop	{r7, pc}
 8013a6c:	0801f000 	.word	0x0801f000
 8013a70:	0801f030 	.word	0x0801f030
 8013a74:	0801f044 	.word	0x0801f044

08013a78 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 8013a78:	b580      	push	{r7, lr}
 8013a7a:	b082      	sub	sp, #8
 8013a7c:	af00      	add	r7, sp, #0
 8013a7e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 8013a80:	687b      	ldr	r3, [r7, #4]
 8013a82:	7d1b      	ldrb	r3, [r3, #20]
 8013a84:	2b01      	cmp	r3, #1
 8013a86:	d105      	bne.n	8013a94 <tcp_free_listen+0x1c>
 8013a88:	4b06      	ldr	r3, [pc, #24]	; (8013aa4 <tcp_free_listen+0x2c>)
 8013a8a:	22df      	movs	r2, #223	; 0xdf
 8013a8c:	4906      	ldr	r1, [pc, #24]	; (8013aa8 <tcp_free_listen+0x30>)
 8013a8e:	4807      	ldr	r0, [pc, #28]	; (8013aac <tcp_free_listen+0x34>)
 8013a90:	f009 fd0c 	bl	801d4ac <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 8013a94:	6879      	ldr	r1, [r7, #4]
 8013a96:	2002      	movs	r0, #2
 8013a98:	f7fe fe72 	bl	8012780 <memp_free>
}
 8013a9c:	bf00      	nop
 8013a9e:	3708      	adds	r7, #8
 8013aa0:	46bd      	mov	sp, r7
 8013aa2:	bd80      	pop	{r7, pc}
 8013aa4:	0801f000 	.word	0x0801f000
 8013aa8:	0801f06c 	.word	0x0801f06c
 8013aac:	0801f044 	.word	0x0801f044

08013ab0 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 8013ab0:	b580      	push	{r7, lr}
 8013ab2:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 8013ab4:	f000 fea2 	bl	80147fc <tcp_fasttmr>

  if (++tcp_timer & 1) {
 8013ab8:	4b07      	ldr	r3, [pc, #28]	; (8013ad8 <tcp_tmr+0x28>)
 8013aba:	781b      	ldrb	r3, [r3, #0]
 8013abc:	3301      	adds	r3, #1
 8013abe:	b2da      	uxtb	r2, r3
 8013ac0:	4b05      	ldr	r3, [pc, #20]	; (8013ad8 <tcp_tmr+0x28>)
 8013ac2:	701a      	strb	r2, [r3, #0]
 8013ac4:	4b04      	ldr	r3, [pc, #16]	; (8013ad8 <tcp_tmr+0x28>)
 8013ac6:	781b      	ldrb	r3, [r3, #0]
 8013ac8:	f003 0301 	and.w	r3, r3, #1
 8013acc:	2b00      	cmp	r3, #0
 8013ace:	d001      	beq.n	8013ad4 <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 8013ad0:	f000 fb54 	bl	801417c <tcp_slowtmr>
  }
}
 8013ad4:	bf00      	nop
 8013ad6:	bd80      	pop	{r7, pc}
 8013ad8:	20024061 	.word	0x20024061

08013adc <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 8013adc:	b580      	push	{r7, lr}
 8013ade:	b084      	sub	sp, #16
 8013ae0:	af00      	add	r7, sp, #0
 8013ae2:	6078      	str	r0, [r7, #4]
 8013ae4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 8013ae6:	683b      	ldr	r3, [r7, #0]
 8013ae8:	2b00      	cmp	r3, #0
 8013aea:	d105      	bne.n	8013af8 <tcp_remove_listener+0x1c>
 8013aec:	4b0d      	ldr	r3, [pc, #52]	; (8013b24 <tcp_remove_listener+0x48>)
 8013aee:	22ff      	movs	r2, #255	; 0xff
 8013af0:	490d      	ldr	r1, [pc, #52]	; (8013b28 <tcp_remove_listener+0x4c>)
 8013af2:	480e      	ldr	r0, [pc, #56]	; (8013b2c <tcp_remove_listener+0x50>)
 8013af4:	f009 fcda 	bl	801d4ac <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	60fb      	str	r3, [r7, #12]
 8013afc:	e00a      	b.n	8013b14 <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 8013afe:	68fb      	ldr	r3, [r7, #12]
 8013b00:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8013b02:	683a      	ldr	r2, [r7, #0]
 8013b04:	429a      	cmp	r2, r3
 8013b06:	d102      	bne.n	8013b0e <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 8013b08:	68fb      	ldr	r3, [r7, #12]
 8013b0a:	2200      	movs	r2, #0
 8013b0c:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 8013b0e:	68fb      	ldr	r3, [r7, #12]
 8013b10:	68db      	ldr	r3, [r3, #12]
 8013b12:	60fb      	str	r3, [r7, #12]
 8013b14:	68fb      	ldr	r3, [r7, #12]
 8013b16:	2b00      	cmp	r3, #0
 8013b18:	d1f1      	bne.n	8013afe <tcp_remove_listener+0x22>
    }
  }
}
 8013b1a:	bf00      	nop
 8013b1c:	bf00      	nop
 8013b1e:	3710      	adds	r7, #16
 8013b20:	46bd      	mov	sp, r7
 8013b22:	bd80      	pop	{r7, pc}
 8013b24:	0801f000 	.word	0x0801f000
 8013b28:	0801f088 	.word	0x0801f088
 8013b2c:	0801f044 	.word	0x0801f044

08013b30 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 8013b30:	b580      	push	{r7, lr}
 8013b32:	b084      	sub	sp, #16
 8013b34:	af00      	add	r7, sp, #0
 8013b36:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8013b38:	687b      	ldr	r3, [r7, #4]
 8013b3a:	2b00      	cmp	r3, #0
 8013b3c:	d106      	bne.n	8013b4c <tcp_listen_closed+0x1c>
 8013b3e:	4b14      	ldr	r3, [pc, #80]	; (8013b90 <tcp_listen_closed+0x60>)
 8013b40:	f240 1211 	movw	r2, #273	; 0x111
 8013b44:	4913      	ldr	r1, [pc, #76]	; (8013b94 <tcp_listen_closed+0x64>)
 8013b46:	4814      	ldr	r0, [pc, #80]	; (8013b98 <tcp_listen_closed+0x68>)
 8013b48:	f009 fcb0 	bl	801d4ac <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 8013b4c:	687b      	ldr	r3, [r7, #4]
 8013b4e:	7d1b      	ldrb	r3, [r3, #20]
 8013b50:	2b01      	cmp	r3, #1
 8013b52:	d006      	beq.n	8013b62 <tcp_listen_closed+0x32>
 8013b54:	4b0e      	ldr	r3, [pc, #56]	; (8013b90 <tcp_listen_closed+0x60>)
 8013b56:	f44f 7289 	mov.w	r2, #274	; 0x112
 8013b5a:	4910      	ldr	r1, [pc, #64]	; (8013b9c <tcp_listen_closed+0x6c>)
 8013b5c:	480e      	ldr	r0, [pc, #56]	; (8013b98 <tcp_listen_closed+0x68>)
 8013b5e:	f009 fca5 	bl	801d4ac <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8013b62:	2301      	movs	r3, #1
 8013b64:	60fb      	str	r3, [r7, #12]
 8013b66:	e00b      	b.n	8013b80 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 8013b68:	4a0d      	ldr	r2, [pc, #52]	; (8013ba0 <tcp_listen_closed+0x70>)
 8013b6a:	68fb      	ldr	r3, [r7, #12]
 8013b6c:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8013b70:	681b      	ldr	r3, [r3, #0]
 8013b72:	6879      	ldr	r1, [r7, #4]
 8013b74:	4618      	mov	r0, r3
 8013b76:	f7ff ffb1 	bl	8013adc <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 8013b7a:	68fb      	ldr	r3, [r7, #12]
 8013b7c:	3301      	adds	r3, #1
 8013b7e:	60fb      	str	r3, [r7, #12]
 8013b80:	68fb      	ldr	r3, [r7, #12]
 8013b82:	2b03      	cmp	r3, #3
 8013b84:	d9f0      	bls.n	8013b68 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 8013b86:	bf00      	nop
 8013b88:	bf00      	nop
 8013b8a:	3710      	adds	r7, #16
 8013b8c:	46bd      	mov	sp, r7
 8013b8e:	bd80      	pop	{r7, pc}
 8013b90:	0801f000 	.word	0x0801f000
 8013b94:	0801f0b0 	.word	0x0801f0b0
 8013b98:	0801f044 	.word	0x0801f044
 8013b9c:	0801f0bc 	.word	0x0801f0bc
 8013ba0:	08021054 	.word	0x08021054

08013ba4 <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 8013ba4:	b5b0      	push	{r4, r5, r7, lr}
 8013ba6:	b088      	sub	sp, #32
 8013ba8:	af04      	add	r7, sp, #16
 8013baa:	6078      	str	r0, [r7, #4]
 8013bac:	460b      	mov	r3, r1
 8013bae:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 8013bb0:	687b      	ldr	r3, [r7, #4]
 8013bb2:	2b00      	cmp	r3, #0
 8013bb4:	d106      	bne.n	8013bc4 <tcp_close_shutdown+0x20>
 8013bb6:	4b63      	ldr	r3, [pc, #396]	; (8013d44 <tcp_close_shutdown+0x1a0>)
 8013bb8:	f44f 72af 	mov.w	r2, #350	; 0x15e
 8013bbc:	4962      	ldr	r1, [pc, #392]	; (8013d48 <tcp_close_shutdown+0x1a4>)
 8013bbe:	4863      	ldr	r0, [pc, #396]	; (8013d4c <tcp_close_shutdown+0x1a8>)
 8013bc0:	f009 fc74 	bl	801d4ac <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 8013bc4:	78fb      	ldrb	r3, [r7, #3]
 8013bc6:	2b00      	cmp	r3, #0
 8013bc8:	d066      	beq.n	8013c98 <tcp_close_shutdown+0xf4>
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	7d1b      	ldrb	r3, [r3, #20]
 8013bce:	2b04      	cmp	r3, #4
 8013bd0:	d003      	beq.n	8013bda <tcp_close_shutdown+0x36>
 8013bd2:	687b      	ldr	r3, [r7, #4]
 8013bd4:	7d1b      	ldrb	r3, [r3, #20]
 8013bd6:	2b07      	cmp	r3, #7
 8013bd8:	d15e      	bne.n	8013c98 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 8013bda:	687b      	ldr	r3, [r7, #4]
 8013bdc:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8013bde:	2b00      	cmp	r3, #0
 8013be0:	d104      	bne.n	8013bec <tcp_close_shutdown+0x48>
 8013be2:	687b      	ldr	r3, [r7, #4]
 8013be4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8013be6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8013bea:	d055      	beq.n	8013c98 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 8013bec:	687b      	ldr	r3, [r7, #4]
 8013bee:	8b5b      	ldrh	r3, [r3, #26]
 8013bf0:	f003 0310 	and.w	r3, r3, #16
 8013bf4:	2b00      	cmp	r3, #0
 8013bf6:	d106      	bne.n	8013c06 <tcp_close_shutdown+0x62>
 8013bf8:	4b52      	ldr	r3, [pc, #328]	; (8013d44 <tcp_close_shutdown+0x1a0>)
 8013bfa:	f44f 72b2 	mov.w	r2, #356	; 0x164
 8013bfe:	4954      	ldr	r1, [pc, #336]	; (8013d50 <tcp_close_shutdown+0x1ac>)
 8013c00:	4852      	ldr	r0, [pc, #328]	; (8013d4c <tcp_close_shutdown+0x1a8>)
 8013c02:	f009 fc53 	bl	801d4ac <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 8013c0e:	687d      	ldr	r5, [r7, #4]
 8013c10:	687b      	ldr	r3, [r7, #4]
 8013c12:	3304      	adds	r3, #4
 8013c14:	687a      	ldr	r2, [r7, #4]
 8013c16:	8ad2      	ldrh	r2, [r2, #22]
 8013c18:	6879      	ldr	r1, [r7, #4]
 8013c1a:	8b09      	ldrh	r1, [r1, #24]
 8013c1c:	9102      	str	r1, [sp, #8]
 8013c1e:	9201      	str	r2, [sp, #4]
 8013c20:	9300      	str	r3, [sp, #0]
 8013c22:	462b      	mov	r3, r5
 8013c24:	4622      	mov	r2, r4
 8013c26:	4601      	mov	r1, r0
 8013c28:	6878      	ldr	r0, [r7, #4]
 8013c2a:	f004 fe91 	bl	8018950 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 8013c2e:	6878      	ldr	r0, [r7, #4]
 8013c30:	f001 f8c6 	bl	8014dc0 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 8013c34:	4b47      	ldr	r3, [pc, #284]	; (8013d54 <tcp_close_shutdown+0x1b0>)
 8013c36:	681b      	ldr	r3, [r3, #0]
 8013c38:	687a      	ldr	r2, [r7, #4]
 8013c3a:	429a      	cmp	r2, r3
 8013c3c:	d105      	bne.n	8013c4a <tcp_close_shutdown+0xa6>
 8013c3e:	4b45      	ldr	r3, [pc, #276]	; (8013d54 <tcp_close_shutdown+0x1b0>)
 8013c40:	681b      	ldr	r3, [r3, #0]
 8013c42:	68db      	ldr	r3, [r3, #12]
 8013c44:	4a43      	ldr	r2, [pc, #268]	; (8013d54 <tcp_close_shutdown+0x1b0>)
 8013c46:	6013      	str	r3, [r2, #0]
 8013c48:	e013      	b.n	8013c72 <tcp_close_shutdown+0xce>
 8013c4a:	4b42      	ldr	r3, [pc, #264]	; (8013d54 <tcp_close_shutdown+0x1b0>)
 8013c4c:	681b      	ldr	r3, [r3, #0]
 8013c4e:	60fb      	str	r3, [r7, #12]
 8013c50:	e00c      	b.n	8013c6c <tcp_close_shutdown+0xc8>
 8013c52:	68fb      	ldr	r3, [r7, #12]
 8013c54:	68db      	ldr	r3, [r3, #12]
 8013c56:	687a      	ldr	r2, [r7, #4]
 8013c58:	429a      	cmp	r2, r3
 8013c5a:	d104      	bne.n	8013c66 <tcp_close_shutdown+0xc2>
 8013c5c:	687b      	ldr	r3, [r7, #4]
 8013c5e:	68da      	ldr	r2, [r3, #12]
 8013c60:	68fb      	ldr	r3, [r7, #12]
 8013c62:	60da      	str	r2, [r3, #12]
 8013c64:	e005      	b.n	8013c72 <tcp_close_shutdown+0xce>
 8013c66:	68fb      	ldr	r3, [r7, #12]
 8013c68:	68db      	ldr	r3, [r3, #12]
 8013c6a:	60fb      	str	r3, [r7, #12]
 8013c6c:	68fb      	ldr	r3, [r7, #12]
 8013c6e:	2b00      	cmp	r3, #0
 8013c70:	d1ef      	bne.n	8013c52 <tcp_close_shutdown+0xae>
 8013c72:	687b      	ldr	r3, [r7, #4]
 8013c74:	2200      	movs	r2, #0
 8013c76:	60da      	str	r2, [r3, #12]
 8013c78:	4b37      	ldr	r3, [pc, #220]	; (8013d58 <tcp_close_shutdown+0x1b4>)
 8013c7a:	2201      	movs	r2, #1
 8013c7c:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 8013c7e:	4b37      	ldr	r3, [pc, #220]	; (8013d5c <tcp_close_shutdown+0x1b8>)
 8013c80:	681b      	ldr	r3, [r3, #0]
 8013c82:	687a      	ldr	r2, [r7, #4]
 8013c84:	429a      	cmp	r2, r3
 8013c86:	d102      	bne.n	8013c8e <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 8013c88:	f003 fd5e 	bl	8017748 <tcp_trigger_input_pcb_close>
 8013c8c:	e002      	b.n	8013c94 <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 8013c8e:	6878      	ldr	r0, [r7, #4]
 8013c90:	f7ff fed6 	bl	8013a40 <tcp_free>
      }
      return ERR_OK;
 8013c94:	2300      	movs	r3, #0
 8013c96:	e050      	b.n	8013d3a <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 8013c98:	687b      	ldr	r3, [r7, #4]
 8013c9a:	7d1b      	ldrb	r3, [r3, #20]
 8013c9c:	2b02      	cmp	r3, #2
 8013c9e:	d03b      	beq.n	8013d18 <tcp_close_shutdown+0x174>
 8013ca0:	2b02      	cmp	r3, #2
 8013ca2:	dc44      	bgt.n	8013d2e <tcp_close_shutdown+0x18a>
 8013ca4:	2b00      	cmp	r3, #0
 8013ca6:	d002      	beq.n	8013cae <tcp_close_shutdown+0x10a>
 8013ca8:	2b01      	cmp	r3, #1
 8013caa:	d02a      	beq.n	8013d02 <tcp_close_shutdown+0x15e>
 8013cac:	e03f      	b.n	8013d2e <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 8013cae:	687b      	ldr	r3, [r7, #4]
 8013cb0:	8adb      	ldrh	r3, [r3, #22]
 8013cb2:	2b00      	cmp	r3, #0
 8013cb4:	d021      	beq.n	8013cfa <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8013cb6:	4b2a      	ldr	r3, [pc, #168]	; (8013d60 <tcp_close_shutdown+0x1bc>)
 8013cb8:	681b      	ldr	r3, [r3, #0]
 8013cba:	687a      	ldr	r2, [r7, #4]
 8013cbc:	429a      	cmp	r2, r3
 8013cbe:	d105      	bne.n	8013ccc <tcp_close_shutdown+0x128>
 8013cc0:	4b27      	ldr	r3, [pc, #156]	; (8013d60 <tcp_close_shutdown+0x1bc>)
 8013cc2:	681b      	ldr	r3, [r3, #0]
 8013cc4:	68db      	ldr	r3, [r3, #12]
 8013cc6:	4a26      	ldr	r2, [pc, #152]	; (8013d60 <tcp_close_shutdown+0x1bc>)
 8013cc8:	6013      	str	r3, [r2, #0]
 8013cca:	e013      	b.n	8013cf4 <tcp_close_shutdown+0x150>
 8013ccc:	4b24      	ldr	r3, [pc, #144]	; (8013d60 <tcp_close_shutdown+0x1bc>)
 8013cce:	681b      	ldr	r3, [r3, #0]
 8013cd0:	60bb      	str	r3, [r7, #8]
 8013cd2:	e00c      	b.n	8013cee <tcp_close_shutdown+0x14a>
 8013cd4:	68bb      	ldr	r3, [r7, #8]
 8013cd6:	68db      	ldr	r3, [r3, #12]
 8013cd8:	687a      	ldr	r2, [r7, #4]
 8013cda:	429a      	cmp	r2, r3
 8013cdc:	d104      	bne.n	8013ce8 <tcp_close_shutdown+0x144>
 8013cde:	687b      	ldr	r3, [r7, #4]
 8013ce0:	68da      	ldr	r2, [r3, #12]
 8013ce2:	68bb      	ldr	r3, [r7, #8]
 8013ce4:	60da      	str	r2, [r3, #12]
 8013ce6:	e005      	b.n	8013cf4 <tcp_close_shutdown+0x150>
 8013ce8:	68bb      	ldr	r3, [r7, #8]
 8013cea:	68db      	ldr	r3, [r3, #12]
 8013cec:	60bb      	str	r3, [r7, #8]
 8013cee:	68bb      	ldr	r3, [r7, #8]
 8013cf0:	2b00      	cmp	r3, #0
 8013cf2:	d1ef      	bne.n	8013cd4 <tcp_close_shutdown+0x130>
 8013cf4:	687b      	ldr	r3, [r7, #4]
 8013cf6:	2200      	movs	r2, #0
 8013cf8:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 8013cfa:	6878      	ldr	r0, [r7, #4]
 8013cfc:	f7ff fea0 	bl	8013a40 <tcp_free>
      break;
 8013d00:	e01a      	b.n	8013d38 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 8013d02:	6878      	ldr	r0, [r7, #4]
 8013d04:	f7ff ff14 	bl	8013b30 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 8013d08:	6879      	ldr	r1, [r7, #4]
 8013d0a:	4816      	ldr	r0, [pc, #88]	; (8013d64 <tcp_close_shutdown+0x1c0>)
 8013d0c:	f001 f8a8 	bl	8014e60 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 8013d10:	6878      	ldr	r0, [r7, #4]
 8013d12:	f7ff feb1 	bl	8013a78 <tcp_free_listen>
      break;
 8013d16:	e00f      	b.n	8013d38 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8013d18:	6879      	ldr	r1, [r7, #4]
 8013d1a:	480e      	ldr	r0, [pc, #56]	; (8013d54 <tcp_close_shutdown+0x1b0>)
 8013d1c:	f001 f8a0 	bl	8014e60 <tcp_pcb_remove>
 8013d20:	4b0d      	ldr	r3, [pc, #52]	; (8013d58 <tcp_close_shutdown+0x1b4>)
 8013d22:	2201      	movs	r2, #1
 8013d24:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 8013d26:	6878      	ldr	r0, [r7, #4]
 8013d28:	f7ff fe8a 	bl	8013a40 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 8013d2c:	e004      	b.n	8013d38 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 8013d2e:	6878      	ldr	r0, [r7, #4]
 8013d30:	f000 f81a 	bl	8013d68 <tcp_close_shutdown_fin>
 8013d34:	4603      	mov	r3, r0
 8013d36:	e000      	b.n	8013d3a <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 8013d38:	2300      	movs	r3, #0
}
 8013d3a:	4618      	mov	r0, r3
 8013d3c:	3710      	adds	r7, #16
 8013d3e:	46bd      	mov	sp, r7
 8013d40:	bdb0      	pop	{r4, r5, r7, pc}
 8013d42:	bf00      	nop
 8013d44:	0801f000 	.word	0x0801f000
 8013d48:	0801f0d4 	.word	0x0801f0d4
 8013d4c:	0801f044 	.word	0x0801f044
 8013d50:	0801f0f4 	.word	0x0801f0f4
 8013d54:	20024058 	.word	0x20024058
 8013d58:	20024060 	.word	0x20024060
 8013d5c:	20024098 	.word	0x20024098
 8013d60:	20024050 	.word	0x20024050
 8013d64:	20024054 	.word	0x20024054

08013d68 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 8013d68:	b580      	push	{r7, lr}
 8013d6a:	b084      	sub	sp, #16
 8013d6c:	af00      	add	r7, sp, #0
 8013d6e:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 8013d70:	687b      	ldr	r3, [r7, #4]
 8013d72:	2b00      	cmp	r3, #0
 8013d74:	d106      	bne.n	8013d84 <tcp_close_shutdown_fin+0x1c>
 8013d76:	4b2e      	ldr	r3, [pc, #184]	; (8013e30 <tcp_close_shutdown_fin+0xc8>)
 8013d78:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 8013d7c:	492d      	ldr	r1, [pc, #180]	; (8013e34 <tcp_close_shutdown_fin+0xcc>)
 8013d7e:	482e      	ldr	r0, [pc, #184]	; (8013e38 <tcp_close_shutdown_fin+0xd0>)
 8013d80:	f009 fb94 	bl	801d4ac <iprintf>

  switch (pcb->state) {
 8013d84:	687b      	ldr	r3, [r7, #4]
 8013d86:	7d1b      	ldrb	r3, [r3, #20]
 8013d88:	2b07      	cmp	r3, #7
 8013d8a:	d020      	beq.n	8013dce <tcp_close_shutdown_fin+0x66>
 8013d8c:	2b07      	cmp	r3, #7
 8013d8e:	dc2b      	bgt.n	8013de8 <tcp_close_shutdown_fin+0x80>
 8013d90:	2b03      	cmp	r3, #3
 8013d92:	d002      	beq.n	8013d9a <tcp_close_shutdown_fin+0x32>
 8013d94:	2b04      	cmp	r3, #4
 8013d96:	d00d      	beq.n	8013db4 <tcp_close_shutdown_fin+0x4c>
 8013d98:	e026      	b.n	8013de8 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 8013d9a:	6878      	ldr	r0, [r7, #4]
 8013d9c:	f003 fee6 	bl	8017b6c <tcp_send_fin>
 8013da0:	4603      	mov	r3, r0
 8013da2:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8013da4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013da8:	2b00      	cmp	r3, #0
 8013daa:	d11f      	bne.n	8013dec <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 8013dac:	687b      	ldr	r3, [r7, #4]
 8013dae:	2205      	movs	r2, #5
 8013db0:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013db2:	e01b      	b.n	8013dec <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 8013db4:	6878      	ldr	r0, [r7, #4]
 8013db6:	f003 fed9 	bl	8017b6c <tcp_send_fin>
 8013dba:	4603      	mov	r3, r0
 8013dbc:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8013dbe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013dc2:	2b00      	cmp	r3, #0
 8013dc4:	d114      	bne.n	8013df0 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 8013dc6:	687b      	ldr	r3, [r7, #4]
 8013dc8:	2205      	movs	r2, #5
 8013dca:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013dcc:	e010      	b.n	8013df0 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 8013dce:	6878      	ldr	r0, [r7, #4]
 8013dd0:	f003 fecc 	bl	8017b6c <tcp_send_fin>
 8013dd4:	4603      	mov	r3, r0
 8013dd6:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 8013dd8:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013ddc:	2b00      	cmp	r3, #0
 8013dde:	d109      	bne.n	8013df4 <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	2209      	movs	r2, #9
 8013de4:	751a      	strb	r2, [r3, #20]
      }
      break;
 8013de6:	e005      	b.n	8013df4 <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 8013de8:	2300      	movs	r3, #0
 8013dea:	e01c      	b.n	8013e26 <tcp_close_shutdown_fin+0xbe>
      break;
 8013dec:	bf00      	nop
 8013dee:	e002      	b.n	8013df6 <tcp_close_shutdown_fin+0x8e>
      break;
 8013df0:	bf00      	nop
 8013df2:	e000      	b.n	8013df6 <tcp_close_shutdown_fin+0x8e>
      break;
 8013df4:	bf00      	nop
  }

  if (err == ERR_OK) {
 8013df6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013dfa:	2b00      	cmp	r3, #0
 8013dfc:	d103      	bne.n	8013e06 <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 8013dfe:	6878      	ldr	r0, [r7, #4]
 8013e00:	f003 fff2 	bl	8017de8 <tcp_output>
 8013e04:	e00d      	b.n	8013e22 <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 8013e06:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8013e0a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e0e:	d108      	bne.n	8013e22 <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 8013e10:	687b      	ldr	r3, [r7, #4]
 8013e12:	8b5b      	ldrh	r3, [r3, #26]
 8013e14:	f043 0308 	orr.w	r3, r3, #8
 8013e18:	b29a      	uxth	r2, r3
 8013e1a:	687b      	ldr	r3, [r7, #4]
 8013e1c:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 8013e1e:	2300      	movs	r3, #0
 8013e20:	e001      	b.n	8013e26 <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 8013e22:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8013e26:	4618      	mov	r0, r3
 8013e28:	3710      	adds	r7, #16
 8013e2a:	46bd      	mov	sp, r7
 8013e2c:	bd80      	pop	{r7, pc}
 8013e2e:	bf00      	nop
 8013e30:	0801f000 	.word	0x0801f000
 8013e34:	0801f0b0 	.word	0x0801f0b0
 8013e38:	0801f044 	.word	0x0801f044

08013e3c <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 8013e3c:	b580      	push	{r7, lr}
 8013e3e:	b082      	sub	sp, #8
 8013e40:	af00      	add	r7, sp, #0
 8013e42:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 8013e44:	687b      	ldr	r3, [r7, #4]
 8013e46:	2b00      	cmp	r3, #0
 8013e48:	d109      	bne.n	8013e5e <tcp_close+0x22>
 8013e4a:	4b0f      	ldr	r3, [pc, #60]	; (8013e88 <tcp_close+0x4c>)
 8013e4c:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 8013e50:	490e      	ldr	r1, [pc, #56]	; (8013e8c <tcp_close+0x50>)
 8013e52:	480f      	ldr	r0, [pc, #60]	; (8013e90 <tcp_close+0x54>)
 8013e54:	f009 fb2a 	bl	801d4ac <iprintf>
 8013e58:	f06f 030f 	mvn.w	r3, #15
 8013e5c:	e00f      	b.n	8013e7e <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 8013e5e:	687b      	ldr	r3, [r7, #4]
 8013e60:	7d1b      	ldrb	r3, [r3, #20]
 8013e62:	2b01      	cmp	r3, #1
 8013e64:	d006      	beq.n	8013e74 <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 8013e66:	687b      	ldr	r3, [r7, #4]
 8013e68:	8b5b      	ldrh	r3, [r3, #26]
 8013e6a:	f043 0310 	orr.w	r3, r3, #16
 8013e6e:	b29a      	uxth	r2, r3
 8013e70:	687b      	ldr	r3, [r7, #4]
 8013e72:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 8013e74:	2101      	movs	r1, #1
 8013e76:	6878      	ldr	r0, [r7, #4]
 8013e78:	f7ff fe94 	bl	8013ba4 <tcp_close_shutdown>
 8013e7c:	4603      	mov	r3, r0
}
 8013e7e:	4618      	mov	r0, r3
 8013e80:	3708      	adds	r7, #8
 8013e82:	46bd      	mov	sp, r7
 8013e84:	bd80      	pop	{r7, pc}
 8013e86:	bf00      	nop
 8013e88:	0801f000 	.word	0x0801f000
 8013e8c:	0801f110 	.word	0x0801f110
 8013e90:	0801f044 	.word	0x0801f044

08013e94 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 8013e94:	b580      	push	{r7, lr}
 8013e96:	b08e      	sub	sp, #56	; 0x38
 8013e98:	af04      	add	r7, sp, #16
 8013e9a:	6078      	str	r0, [r7, #4]
 8013e9c:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 8013e9e:	687b      	ldr	r3, [r7, #4]
 8013ea0:	2b00      	cmp	r3, #0
 8013ea2:	d107      	bne.n	8013eb4 <tcp_abandon+0x20>
 8013ea4:	4b52      	ldr	r3, [pc, #328]	; (8013ff0 <tcp_abandon+0x15c>)
 8013ea6:	f240 223d 	movw	r2, #573	; 0x23d
 8013eaa:	4952      	ldr	r1, [pc, #328]	; (8013ff4 <tcp_abandon+0x160>)
 8013eac:	4852      	ldr	r0, [pc, #328]	; (8013ff8 <tcp_abandon+0x164>)
 8013eae:	f009 fafd 	bl	801d4ac <iprintf>
 8013eb2:	e099      	b.n	8013fe8 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	7d1b      	ldrb	r3, [r3, #20]
 8013eb8:	2b01      	cmp	r3, #1
 8013eba:	d106      	bne.n	8013eca <tcp_abandon+0x36>
 8013ebc:	4b4c      	ldr	r3, [pc, #304]	; (8013ff0 <tcp_abandon+0x15c>)
 8013ebe:	f44f 7210 	mov.w	r2, #576	; 0x240
 8013ec2:	494e      	ldr	r1, [pc, #312]	; (8013ffc <tcp_abandon+0x168>)
 8013ec4:	484c      	ldr	r0, [pc, #304]	; (8013ff8 <tcp_abandon+0x164>)
 8013ec6:	f009 faf1 	bl	801d4ac <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 8013eca:	687b      	ldr	r3, [r7, #4]
 8013ecc:	7d1b      	ldrb	r3, [r3, #20]
 8013ece:	2b0a      	cmp	r3, #10
 8013ed0:	d107      	bne.n	8013ee2 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 8013ed2:	6879      	ldr	r1, [r7, #4]
 8013ed4:	484a      	ldr	r0, [pc, #296]	; (8014000 <tcp_abandon+0x16c>)
 8013ed6:	f000 ffc3 	bl	8014e60 <tcp_pcb_remove>
    tcp_free(pcb);
 8013eda:	6878      	ldr	r0, [r7, #4]
 8013edc:	f7ff fdb0 	bl	8013a40 <tcp_free>
 8013ee0:	e082      	b.n	8013fe8 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 8013ee2:	2300      	movs	r3, #0
 8013ee4:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 8013ee6:	2300      	movs	r3, #0
 8013ee8:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 8013eea:	687b      	ldr	r3, [r7, #4]
 8013eec:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013eee:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 8013ef0:	687b      	ldr	r3, [r7, #4]
 8013ef2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013ef4:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 8013ef6:	687b      	ldr	r3, [r7, #4]
 8013ef8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 8013efc:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 8013efe:	687b      	ldr	r3, [r7, #4]
 8013f00:	691b      	ldr	r3, [r3, #16]
 8013f02:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 8013f04:	687b      	ldr	r3, [r7, #4]
 8013f06:	7d1b      	ldrb	r3, [r3, #20]
 8013f08:	2b00      	cmp	r3, #0
 8013f0a:	d126      	bne.n	8013f5a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 8013f0c:	687b      	ldr	r3, [r7, #4]
 8013f0e:	8adb      	ldrh	r3, [r3, #22]
 8013f10:	2b00      	cmp	r3, #0
 8013f12:	d02e      	beq.n	8013f72 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 8013f14:	4b3b      	ldr	r3, [pc, #236]	; (8014004 <tcp_abandon+0x170>)
 8013f16:	681b      	ldr	r3, [r3, #0]
 8013f18:	687a      	ldr	r2, [r7, #4]
 8013f1a:	429a      	cmp	r2, r3
 8013f1c:	d105      	bne.n	8013f2a <tcp_abandon+0x96>
 8013f1e:	4b39      	ldr	r3, [pc, #228]	; (8014004 <tcp_abandon+0x170>)
 8013f20:	681b      	ldr	r3, [r3, #0]
 8013f22:	68db      	ldr	r3, [r3, #12]
 8013f24:	4a37      	ldr	r2, [pc, #220]	; (8014004 <tcp_abandon+0x170>)
 8013f26:	6013      	str	r3, [r2, #0]
 8013f28:	e013      	b.n	8013f52 <tcp_abandon+0xbe>
 8013f2a:	4b36      	ldr	r3, [pc, #216]	; (8014004 <tcp_abandon+0x170>)
 8013f2c:	681b      	ldr	r3, [r3, #0]
 8013f2e:	61fb      	str	r3, [r7, #28]
 8013f30:	e00c      	b.n	8013f4c <tcp_abandon+0xb8>
 8013f32:	69fb      	ldr	r3, [r7, #28]
 8013f34:	68db      	ldr	r3, [r3, #12]
 8013f36:	687a      	ldr	r2, [r7, #4]
 8013f38:	429a      	cmp	r2, r3
 8013f3a:	d104      	bne.n	8013f46 <tcp_abandon+0xb2>
 8013f3c:	687b      	ldr	r3, [r7, #4]
 8013f3e:	68da      	ldr	r2, [r3, #12]
 8013f40:	69fb      	ldr	r3, [r7, #28]
 8013f42:	60da      	str	r2, [r3, #12]
 8013f44:	e005      	b.n	8013f52 <tcp_abandon+0xbe>
 8013f46:	69fb      	ldr	r3, [r7, #28]
 8013f48:	68db      	ldr	r3, [r3, #12]
 8013f4a:	61fb      	str	r3, [r7, #28]
 8013f4c:	69fb      	ldr	r3, [r7, #28]
 8013f4e:	2b00      	cmp	r3, #0
 8013f50:	d1ef      	bne.n	8013f32 <tcp_abandon+0x9e>
 8013f52:	687b      	ldr	r3, [r7, #4]
 8013f54:	2200      	movs	r2, #0
 8013f56:	60da      	str	r2, [r3, #12]
 8013f58:	e00b      	b.n	8013f72 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 8013f5a:	683b      	ldr	r3, [r7, #0]
 8013f5c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 8013f5e:	687b      	ldr	r3, [r7, #4]
 8013f60:	8adb      	ldrh	r3, [r3, #22]
 8013f62:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 8013f64:	6879      	ldr	r1, [r7, #4]
 8013f66:	4828      	ldr	r0, [pc, #160]	; (8014008 <tcp_abandon+0x174>)
 8013f68:	f000 ff7a 	bl	8014e60 <tcp_pcb_remove>
 8013f6c:	4b27      	ldr	r3, [pc, #156]	; (801400c <tcp_abandon+0x178>)
 8013f6e:	2201      	movs	r2, #1
 8013f70:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 8013f72:	687b      	ldr	r3, [r7, #4]
 8013f74:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f76:	2b00      	cmp	r3, #0
 8013f78:	d004      	beq.n	8013f84 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 8013f7a:	687b      	ldr	r3, [r7, #4]
 8013f7c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013f7e:	4618      	mov	r0, r3
 8013f80:	f000 fd1c 	bl	80149bc <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 8013f84:	687b      	ldr	r3, [r7, #4]
 8013f86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f88:	2b00      	cmp	r3, #0
 8013f8a:	d004      	beq.n	8013f96 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 8013f8c:	687b      	ldr	r3, [r7, #4]
 8013f8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8013f90:	4618      	mov	r0, r3
 8013f92:	f000 fd13 	bl	80149bc <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8013f96:	687b      	ldr	r3, [r7, #4]
 8013f98:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013f9a:	2b00      	cmp	r3, #0
 8013f9c:	d004      	beq.n	8013fa8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 8013f9e:	687b      	ldr	r3, [r7, #4]
 8013fa0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8013fa2:	4618      	mov	r0, r3
 8013fa4:	f000 fd0a 	bl	80149bc <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 8013fa8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013faa:	2b00      	cmp	r3, #0
 8013fac:	d00e      	beq.n	8013fcc <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 8013fae:	6879      	ldr	r1, [r7, #4]
 8013fb0:	687b      	ldr	r3, [r7, #4]
 8013fb2:	3304      	adds	r3, #4
 8013fb4:	687a      	ldr	r2, [r7, #4]
 8013fb6:	8b12      	ldrh	r2, [r2, #24]
 8013fb8:	9202      	str	r2, [sp, #8]
 8013fba:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8013fbc:	9201      	str	r2, [sp, #4]
 8013fbe:	9300      	str	r3, [sp, #0]
 8013fc0:	460b      	mov	r3, r1
 8013fc2:	697a      	ldr	r2, [r7, #20]
 8013fc4:	69b9      	ldr	r1, [r7, #24]
 8013fc6:	6878      	ldr	r0, [r7, #4]
 8013fc8:	f004 fcc2 	bl	8018950 <tcp_rst>
    }
    last_state = pcb->state;
 8013fcc:	687b      	ldr	r3, [r7, #4]
 8013fce:	7d1b      	ldrb	r3, [r3, #20]
 8013fd0:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 8013fd2:	6878      	ldr	r0, [r7, #4]
 8013fd4:	f7ff fd34 	bl	8013a40 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 8013fd8:	693b      	ldr	r3, [r7, #16]
 8013fda:	2b00      	cmp	r3, #0
 8013fdc:	d004      	beq.n	8013fe8 <tcp_abandon+0x154>
 8013fde:	693b      	ldr	r3, [r7, #16]
 8013fe0:	f06f 010c 	mvn.w	r1, #12
 8013fe4:	68f8      	ldr	r0, [r7, #12]
 8013fe6:	4798      	blx	r3
  }
}
 8013fe8:	3728      	adds	r7, #40	; 0x28
 8013fea:	46bd      	mov	sp, r7
 8013fec:	bd80      	pop	{r7, pc}
 8013fee:	bf00      	nop
 8013ff0:	0801f000 	.word	0x0801f000
 8013ff4:	0801f144 	.word	0x0801f144
 8013ff8:	0801f044 	.word	0x0801f044
 8013ffc:	0801f160 	.word	0x0801f160
 8014000:	2002405c 	.word	0x2002405c
 8014004:	20024050 	.word	0x20024050
 8014008:	20024058 	.word	0x20024058
 801400c:	20024060 	.word	0x20024060

08014010 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 8014010:	b580      	push	{r7, lr}
 8014012:	b082      	sub	sp, #8
 8014014:	af00      	add	r7, sp, #0
 8014016:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 8014018:	2101      	movs	r1, #1
 801401a:	6878      	ldr	r0, [r7, #4]
 801401c:	f7ff ff3a 	bl	8013e94 <tcp_abandon>
}
 8014020:	bf00      	nop
 8014022:	3708      	adds	r7, #8
 8014024:	46bd      	mov	sp, r7
 8014026:	bd80      	pop	{r7, pc}

08014028 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 8014028:	b580      	push	{r7, lr}
 801402a:	b084      	sub	sp, #16
 801402c:	af00      	add	r7, sp, #0
 801402e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 8014030:	687b      	ldr	r3, [r7, #4]
 8014032:	2b00      	cmp	r3, #0
 8014034:	d106      	bne.n	8014044 <tcp_update_rcv_ann_wnd+0x1c>
 8014036:	4b25      	ldr	r3, [pc, #148]	; (80140cc <tcp_update_rcv_ann_wnd+0xa4>)
 8014038:	f240 32a6 	movw	r2, #934	; 0x3a6
 801403c:	4924      	ldr	r1, [pc, #144]	; (80140d0 <tcp_update_rcv_ann_wnd+0xa8>)
 801403e:	4825      	ldr	r0, [pc, #148]	; (80140d4 <tcp_update_rcv_ann_wnd+0xac>)
 8014040:	f009 fa34 	bl	801d4ac <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 8014044:	687b      	ldr	r3, [r7, #4]
 8014046:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8014048:	687a      	ldr	r2, [r7, #4]
 801404a:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 801404c:	4413      	add	r3, r2
 801404e:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 8014050:	687b      	ldr	r3, [r7, #4]
 8014052:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014054:	687a      	ldr	r2, [r7, #4]
 8014056:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 8014058:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 801405c:	bf28      	it	cs
 801405e:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 8014062:	b292      	uxth	r2, r2
 8014064:	4413      	add	r3, r2
 8014066:	68fa      	ldr	r2, [r7, #12]
 8014068:	1ad3      	subs	r3, r2, r3
 801406a:	2b00      	cmp	r3, #0
 801406c:	db08      	blt.n	8014080 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 801406e:	687b      	ldr	r3, [r7, #4]
 8014070:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014072:	687b      	ldr	r3, [r7, #4]
 8014074:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 8014076:	687b      	ldr	r3, [r7, #4]
 8014078:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801407a:	68fa      	ldr	r2, [r7, #12]
 801407c:	1ad3      	subs	r3, r2, r3
 801407e:	e020      	b.n	80140c2 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 8014080:	687b      	ldr	r3, [r7, #4]
 8014082:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8014084:	687b      	ldr	r3, [r7, #4]
 8014086:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8014088:	1ad3      	subs	r3, r2, r3
 801408a:	2b00      	cmp	r3, #0
 801408c:	dd03      	ble.n	8014096 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 801408e:	687b      	ldr	r3, [r7, #4]
 8014090:	2200      	movs	r2, #0
 8014092:	855a      	strh	r2, [r3, #42]	; 0x2a
 8014094:	e014      	b.n	80140c0 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 8014096:	687b      	ldr	r3, [r7, #4]
 8014098:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 801409a:	687b      	ldr	r3, [r7, #4]
 801409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801409e:	1ad3      	subs	r3, r2, r3
 80140a0:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 80140a2:	68bb      	ldr	r3, [r7, #8]
 80140a4:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80140a8:	d306      	bcc.n	80140b8 <tcp_update_rcv_ann_wnd+0x90>
 80140aa:	4b08      	ldr	r3, [pc, #32]	; (80140cc <tcp_update_rcv_ann_wnd+0xa4>)
 80140ac:	f240 32b6 	movw	r2, #950	; 0x3b6
 80140b0:	4909      	ldr	r1, [pc, #36]	; (80140d8 <tcp_update_rcv_ann_wnd+0xb0>)
 80140b2:	4808      	ldr	r0, [pc, #32]	; (80140d4 <tcp_update_rcv_ann_wnd+0xac>)
 80140b4:	f009 f9fa 	bl	801d4ac <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 80140b8:	68bb      	ldr	r3, [r7, #8]
 80140ba:	b29a      	uxth	r2, r3
 80140bc:	687b      	ldr	r3, [r7, #4]
 80140be:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 80140c0:	2300      	movs	r3, #0
  }
}
 80140c2:	4618      	mov	r0, r3
 80140c4:	3710      	adds	r7, #16
 80140c6:	46bd      	mov	sp, r7
 80140c8:	bd80      	pop	{r7, pc}
 80140ca:	bf00      	nop
 80140cc:	0801f000 	.word	0x0801f000
 80140d0:	0801f25c 	.word	0x0801f25c
 80140d4:	0801f044 	.word	0x0801f044
 80140d8:	0801f280 	.word	0x0801f280

080140dc <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 80140dc:	b580      	push	{r7, lr}
 80140de:	b084      	sub	sp, #16
 80140e0:	af00      	add	r7, sp, #0
 80140e2:	6078      	str	r0, [r7, #4]
 80140e4:	460b      	mov	r3, r1
 80140e6:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 80140e8:	687b      	ldr	r3, [r7, #4]
 80140ea:	2b00      	cmp	r3, #0
 80140ec:	d107      	bne.n	80140fe <tcp_recved+0x22>
 80140ee:	4b1f      	ldr	r3, [pc, #124]	; (801416c <tcp_recved+0x90>)
 80140f0:	f240 32cf 	movw	r2, #975	; 0x3cf
 80140f4:	491e      	ldr	r1, [pc, #120]	; (8014170 <tcp_recved+0x94>)
 80140f6:	481f      	ldr	r0, [pc, #124]	; (8014174 <tcp_recved+0x98>)
 80140f8:	f009 f9d8 	bl	801d4ac <iprintf>
 80140fc:	e032      	b.n	8014164 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 80140fe:	687b      	ldr	r3, [r7, #4]
 8014100:	7d1b      	ldrb	r3, [r3, #20]
 8014102:	2b01      	cmp	r3, #1
 8014104:	d106      	bne.n	8014114 <tcp_recved+0x38>
 8014106:	4b19      	ldr	r3, [pc, #100]	; (801416c <tcp_recved+0x90>)
 8014108:	f240 32d2 	movw	r2, #978	; 0x3d2
 801410c:	491a      	ldr	r1, [pc, #104]	; (8014178 <tcp_recved+0x9c>)
 801410e:	4819      	ldr	r0, [pc, #100]	; (8014174 <tcp_recved+0x98>)
 8014110:	f009 f9cc 	bl	801d4ac <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 8014114:	687b      	ldr	r3, [r7, #4]
 8014116:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8014118:	887b      	ldrh	r3, [r7, #2]
 801411a:	4413      	add	r3, r2
 801411c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 801411e:	89fb      	ldrh	r3, [r7, #14]
 8014120:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8014124:	d804      	bhi.n	8014130 <tcp_recved+0x54>
 8014126:	687b      	ldr	r3, [r7, #4]
 8014128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801412a:	89fa      	ldrh	r2, [r7, #14]
 801412c:	429a      	cmp	r2, r3
 801412e:	d204      	bcs.n	801413a <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 8014130:	687b      	ldr	r3, [r7, #4]
 8014132:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8014136:	851a      	strh	r2, [r3, #40]	; 0x28
 8014138:	e002      	b.n	8014140 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 801413a:	687b      	ldr	r3, [r7, #4]
 801413c:	89fa      	ldrh	r2, [r7, #14]
 801413e:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 8014140:	6878      	ldr	r0, [r7, #4]
 8014142:	f7ff ff71 	bl	8014028 <tcp_update_rcv_ann_wnd>
 8014146:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 8014148:	68bb      	ldr	r3, [r7, #8]
 801414a:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 801414e:	d309      	bcc.n	8014164 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 8014150:	687b      	ldr	r3, [r7, #4]
 8014152:	8b5b      	ldrh	r3, [r3, #26]
 8014154:	f043 0302 	orr.w	r3, r3, #2
 8014158:	b29a      	uxth	r2, r3
 801415a:	687b      	ldr	r3, [r7, #4]
 801415c:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 801415e:	6878      	ldr	r0, [r7, #4]
 8014160:	f003 fe42 	bl	8017de8 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 8014164:	3710      	adds	r7, #16
 8014166:	46bd      	mov	sp, r7
 8014168:	bd80      	pop	{r7, pc}
 801416a:	bf00      	nop
 801416c:	0801f000 	.word	0x0801f000
 8014170:	0801f29c 	.word	0x0801f29c
 8014174:	0801f044 	.word	0x0801f044
 8014178:	0801f2b4 	.word	0x0801f2b4

0801417c <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 801417c:	b5b0      	push	{r4, r5, r7, lr}
 801417e:	b090      	sub	sp, #64	; 0x40
 8014180:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 8014182:	2300      	movs	r3, #0
 8014184:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 8014188:	4b94      	ldr	r3, [pc, #592]	; (80143dc <tcp_slowtmr+0x260>)
 801418a:	681b      	ldr	r3, [r3, #0]
 801418c:	3301      	adds	r3, #1
 801418e:	4a93      	ldr	r2, [pc, #588]	; (80143dc <tcp_slowtmr+0x260>)
 8014190:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 8014192:	4b93      	ldr	r3, [pc, #588]	; (80143e0 <tcp_slowtmr+0x264>)
 8014194:	781b      	ldrb	r3, [r3, #0]
 8014196:	3301      	adds	r3, #1
 8014198:	b2da      	uxtb	r2, r3
 801419a:	4b91      	ldr	r3, [pc, #580]	; (80143e0 <tcp_slowtmr+0x264>)
 801419c:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 801419e:	2300      	movs	r3, #0
 80141a0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 80141a2:	4b90      	ldr	r3, [pc, #576]	; (80143e4 <tcp_slowtmr+0x268>)
 80141a4:	681b      	ldr	r3, [r3, #0]
 80141a6:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 80141a8:	e29d      	b.n	80146e6 <tcp_slowtmr+0x56a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 80141aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141ac:	7d1b      	ldrb	r3, [r3, #20]
 80141ae:	2b00      	cmp	r3, #0
 80141b0:	d106      	bne.n	80141c0 <tcp_slowtmr+0x44>
 80141b2:	4b8d      	ldr	r3, [pc, #564]	; (80143e8 <tcp_slowtmr+0x26c>)
 80141b4:	f240 42be 	movw	r2, #1214	; 0x4be
 80141b8:	498c      	ldr	r1, [pc, #560]	; (80143ec <tcp_slowtmr+0x270>)
 80141ba:	488d      	ldr	r0, [pc, #564]	; (80143f0 <tcp_slowtmr+0x274>)
 80141bc:	f009 f976 	bl	801d4ac <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 80141c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141c2:	7d1b      	ldrb	r3, [r3, #20]
 80141c4:	2b01      	cmp	r3, #1
 80141c6:	d106      	bne.n	80141d6 <tcp_slowtmr+0x5a>
 80141c8:	4b87      	ldr	r3, [pc, #540]	; (80143e8 <tcp_slowtmr+0x26c>)
 80141ca:	f240 42bf 	movw	r2, #1215	; 0x4bf
 80141ce:	4989      	ldr	r1, [pc, #548]	; (80143f4 <tcp_slowtmr+0x278>)
 80141d0:	4887      	ldr	r0, [pc, #540]	; (80143f0 <tcp_slowtmr+0x274>)
 80141d2:	f009 f96b 	bl	801d4ac <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 80141d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141d8:	7d1b      	ldrb	r3, [r3, #20]
 80141da:	2b0a      	cmp	r3, #10
 80141dc:	d106      	bne.n	80141ec <tcp_slowtmr+0x70>
 80141de:	4b82      	ldr	r3, [pc, #520]	; (80143e8 <tcp_slowtmr+0x26c>)
 80141e0:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 80141e4:	4984      	ldr	r1, [pc, #528]	; (80143f8 <tcp_slowtmr+0x27c>)
 80141e6:	4882      	ldr	r0, [pc, #520]	; (80143f0 <tcp_slowtmr+0x274>)
 80141e8:	f009 f960 	bl	801d4ac <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 80141ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141ee:	7f9a      	ldrb	r2, [r3, #30]
 80141f0:	4b7b      	ldr	r3, [pc, #492]	; (80143e0 <tcp_slowtmr+0x264>)
 80141f2:	781b      	ldrb	r3, [r3, #0]
 80141f4:	429a      	cmp	r2, r3
 80141f6:	d105      	bne.n	8014204 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 80141f8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141fa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80141fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80141fe:	68db      	ldr	r3, [r3, #12]
 8014200:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 8014202:	e270      	b.n	80146e6 <tcp_slowtmr+0x56a>
    }
    pcb->last_timer = tcp_timer_ctr;
 8014204:	4b76      	ldr	r3, [pc, #472]	; (80143e0 <tcp_slowtmr+0x264>)
 8014206:	781a      	ldrb	r2, [r3, #0]
 8014208:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801420a:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 801420c:	2300      	movs	r3, #0
 801420e:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 8014212:	2300      	movs	r3, #0
 8014214:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 8014218:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801421a:	7d1b      	ldrb	r3, [r3, #20]
 801421c:	2b02      	cmp	r3, #2
 801421e:	d10a      	bne.n	8014236 <tcp_slowtmr+0xba>
 8014220:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014222:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8014226:	2b05      	cmp	r3, #5
 8014228:	d905      	bls.n	8014236 <tcp_slowtmr+0xba>
      ++pcb_remove;
 801422a:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801422e:	3301      	adds	r3, #1
 8014230:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014234:	e11e      	b.n	8014474 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 8014236:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014238:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801423c:	2b0b      	cmp	r3, #11
 801423e:	d905      	bls.n	801424c <tcp_slowtmr+0xd0>
      ++pcb_remove;
 8014240:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014244:	3301      	adds	r3, #1
 8014246:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801424a:	e113      	b.n	8014474 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 801424c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801424e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014252:	2b00      	cmp	r3, #0
 8014254:	d075      	beq.n	8014342 <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 8014256:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014258:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801425a:	2b00      	cmp	r3, #0
 801425c:	d006      	beq.n	801426c <tcp_slowtmr+0xf0>
 801425e:	4b62      	ldr	r3, [pc, #392]	; (80143e8 <tcp_slowtmr+0x26c>)
 8014260:	f240 42d4 	movw	r2, #1236	; 0x4d4
 8014264:	4965      	ldr	r1, [pc, #404]	; (80143fc <tcp_slowtmr+0x280>)
 8014266:	4862      	ldr	r0, [pc, #392]	; (80143f0 <tcp_slowtmr+0x274>)
 8014268:	f009 f920 	bl	801d4ac <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 801426c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801426e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014270:	2b00      	cmp	r3, #0
 8014272:	d106      	bne.n	8014282 <tcp_slowtmr+0x106>
 8014274:	4b5c      	ldr	r3, [pc, #368]	; (80143e8 <tcp_slowtmr+0x26c>)
 8014276:	f240 42d5 	movw	r2, #1237	; 0x4d5
 801427a:	4961      	ldr	r1, [pc, #388]	; (8014400 <tcp_slowtmr+0x284>)
 801427c:	485c      	ldr	r0, [pc, #368]	; (80143f0 <tcp_slowtmr+0x274>)
 801427e:	f009 f915 	bl	801d4ac <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 8014282:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014284:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8014288:	2b0b      	cmp	r3, #11
 801428a:	d905      	bls.n	8014298 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 801428c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014290:	3301      	adds	r3, #1
 8014292:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014296:	e0ed      	b.n	8014474 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 8014298:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801429a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801429e:	3b01      	subs	r3, #1
 80142a0:	4a58      	ldr	r2, [pc, #352]	; (8014404 <tcp_slowtmr+0x288>)
 80142a2:	5cd3      	ldrb	r3, [r2, r3]
 80142a4:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 80142a6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142a8:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80142ac:	7c7a      	ldrb	r2, [r7, #17]
 80142ae:	429a      	cmp	r2, r3
 80142b0:	d907      	bls.n	80142c2 <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 80142b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142b4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80142b8:	3301      	adds	r3, #1
 80142ba:	b2da      	uxtb	r2, r3
 80142bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142be:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 80142c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142c4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 80142c8:	7c7a      	ldrb	r2, [r7, #17]
 80142ca:	429a      	cmp	r2, r3
 80142cc:	f200 80d2 	bhi.w	8014474 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 80142d0:	2301      	movs	r3, #1
 80142d2:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 80142d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142d6:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d108      	bne.n	80142f0 <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 80142de:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80142e0:	f004 fc2a 	bl	8018b38 <tcp_zero_window_probe>
 80142e4:	4603      	mov	r3, r0
 80142e6:	2b00      	cmp	r3, #0
 80142e8:	d014      	beq.n	8014314 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 80142ea:	2300      	movs	r3, #0
 80142ec:	623b      	str	r3, [r7, #32]
 80142ee:	e011      	b.n	8014314 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 80142f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80142f2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 80142f6:	4619      	mov	r1, r3
 80142f8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80142fa:	f003 faef 	bl	80178dc <tcp_split_unsent_seg>
 80142fe:	4603      	mov	r3, r0
 8014300:	2b00      	cmp	r3, #0
 8014302:	d107      	bne.n	8014314 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 8014304:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014306:	f003 fd6f 	bl	8017de8 <tcp_output>
 801430a:	4603      	mov	r3, r0
 801430c:	2b00      	cmp	r3, #0
 801430e:	d101      	bne.n	8014314 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 8014310:	2300      	movs	r3, #0
 8014312:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 8014314:	6a3b      	ldr	r3, [r7, #32]
 8014316:	2b00      	cmp	r3, #0
 8014318:	f000 80ac 	beq.w	8014474 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 801431c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801431e:	2200      	movs	r2, #0
 8014320:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 8014324:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014326:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 801432a:	2b06      	cmp	r3, #6
 801432c:	f200 80a2 	bhi.w	8014474 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 8014330:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014332:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8014336:	3301      	adds	r3, #1
 8014338:	b2da      	uxtb	r2, r3
 801433a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801433c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 8014340:	e098      	b.n	8014474 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 8014342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014344:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014348:	2b00      	cmp	r3, #0
 801434a:	db0f      	blt.n	801436c <tcp_slowtmr+0x1f0>
 801434c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801434e:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014352:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8014356:	4293      	cmp	r3, r2
 8014358:	d008      	beq.n	801436c <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 801435a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801435c:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8014360:	b29b      	uxth	r3, r3
 8014362:	3301      	adds	r3, #1
 8014364:	b29b      	uxth	r3, r3
 8014366:	b21a      	sxth	r2, r3
 8014368:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801436a:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 801436c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801436e:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 8014372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014374:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 8014378:	429a      	cmp	r2, r3
 801437a:	db7b      	blt.n	8014474 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 801437c:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801437e:	f004 f827 	bl	80183d0 <tcp_rexmit_rto_prepare>
 8014382:	4603      	mov	r3, r0
 8014384:	2b00      	cmp	r3, #0
 8014386:	d007      	beq.n	8014398 <tcp_slowtmr+0x21c>
 8014388:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801438a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801438c:	2b00      	cmp	r3, #0
 801438e:	d171      	bne.n	8014474 <tcp_slowtmr+0x2f8>
 8014390:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014392:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014394:	2b00      	cmp	r3, #0
 8014396:	d06d      	beq.n	8014474 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 8014398:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801439a:	7d1b      	ldrb	r3, [r3, #20]
 801439c:	2b02      	cmp	r3, #2
 801439e:	d03a      	beq.n	8014416 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 80143a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143a2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80143a6:	2b0c      	cmp	r3, #12
 80143a8:	bf28      	it	cs
 80143aa:	230c      	movcs	r3, #12
 80143ac:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 80143ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143b0:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80143b4:	10db      	asrs	r3, r3, #3
 80143b6:	b21b      	sxth	r3, r3
 80143b8:	461a      	mov	r2, r3
 80143ba:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80143bc:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80143c0:	4413      	add	r3, r2
 80143c2:	7efa      	ldrb	r2, [r7, #27]
 80143c4:	4910      	ldr	r1, [pc, #64]	; (8014408 <tcp_slowtmr+0x28c>)
 80143c6:	5c8a      	ldrb	r2, [r1, r2]
 80143c8:	4093      	lsls	r3, r2
 80143ca:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 80143cc:	697b      	ldr	r3, [r7, #20]
 80143ce:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 80143d2:	4293      	cmp	r3, r2
 80143d4:	dc1a      	bgt.n	801440c <tcp_slowtmr+0x290>
 80143d6:	697b      	ldr	r3, [r7, #20]
 80143d8:	b21a      	sxth	r2, r3
 80143da:	e019      	b.n	8014410 <tcp_slowtmr+0x294>
 80143dc:	2002404c 	.word	0x2002404c
 80143e0:	20024062 	.word	0x20024062
 80143e4:	20024058 	.word	0x20024058
 80143e8:	0801f000 	.word	0x0801f000
 80143ec:	0801f344 	.word	0x0801f344
 80143f0:	0801f044 	.word	0x0801f044
 80143f4:	0801f370 	.word	0x0801f370
 80143f8:	0801f39c 	.word	0x0801f39c
 80143fc:	0801f3cc 	.word	0x0801f3cc
 8014400:	0801f400 	.word	0x0801f400
 8014404:	0802104c 	.word	0x0802104c
 8014408:	0802103c 	.word	0x0802103c
 801440c:	f647 72ff 	movw	r2, #32767	; 0x7fff
 8014410:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014412:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 8014416:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014418:	2200      	movs	r2, #0
 801441a:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 801441c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801441e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8014422:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014424:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8014428:	4293      	cmp	r3, r2
 801442a:	bf28      	it	cs
 801442c:	4613      	movcs	r3, r2
 801442e:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 8014430:	8a7b      	ldrh	r3, [r7, #18]
 8014432:	085b      	lsrs	r3, r3, #1
 8014434:	b29a      	uxth	r2, r3
 8014436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014438:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 801443c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801443e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8014442:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014444:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014446:	005b      	lsls	r3, r3, #1
 8014448:	b29b      	uxth	r3, r3
 801444a:	429a      	cmp	r2, r3
 801444c:	d206      	bcs.n	801445c <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 801444e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014450:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8014452:	005b      	lsls	r3, r3, #1
 8014454:	b29a      	uxth	r2, r3
 8014456:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014458:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 801445c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801445e:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 8014460:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014462:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 8014466:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014468:	2200      	movs	r2, #0
 801446a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 801446e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014470:	f004 f81e 	bl	80184b0 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 8014474:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014476:	7d1b      	ldrb	r3, [r3, #20]
 8014478:	2b06      	cmp	r3, #6
 801447a:	d111      	bne.n	80144a0 <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 801447c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801447e:	8b5b      	ldrh	r3, [r3, #26]
 8014480:	f003 0310 	and.w	r3, r3, #16
 8014484:	2b00      	cmp	r3, #0
 8014486:	d00b      	beq.n	80144a0 <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014488:	4b9c      	ldr	r3, [pc, #624]	; (80146fc <tcp_slowtmr+0x580>)
 801448a:	681a      	ldr	r2, [r3, #0]
 801448c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801448e:	6a1b      	ldr	r3, [r3, #32]
 8014490:	1ad3      	subs	r3, r2, r3
 8014492:	2b28      	cmp	r3, #40	; 0x28
 8014494:	d904      	bls.n	80144a0 <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 8014496:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801449a:	3301      	adds	r3, #1
 801449c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80144a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144a2:	7a5b      	ldrb	r3, [r3, #9]
 80144a4:	f003 0308 	and.w	r3, r3, #8
 80144a8:	2b00      	cmp	r3, #0
 80144aa:	d04a      	beq.n	8014542 <tcp_slowtmr+0x3c6>
        ((pcb->state == ESTABLISHED) ||
 80144ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144ae:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 80144b0:	2b04      	cmp	r3, #4
 80144b2:	d003      	beq.n	80144bc <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 80144b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144b6:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 80144b8:	2b07      	cmp	r3, #7
 80144ba:	d142      	bne.n	8014542 <tcp_slowtmr+0x3c6>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80144bc:	4b8f      	ldr	r3, [pc, #572]	; (80146fc <tcp_slowtmr+0x580>)
 80144be:	681a      	ldr	r2, [r3, #0]
 80144c0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144c2:	6a1b      	ldr	r3, [r3, #32]
 80144c4:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 80144c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144c8:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 80144cc:	4b8c      	ldr	r3, [pc, #560]	; (8014700 <tcp_slowtmr+0x584>)
 80144ce:	440b      	add	r3, r1
 80144d0:	498c      	ldr	r1, [pc, #560]	; (8014704 <tcp_slowtmr+0x588>)
 80144d2:	fba1 1303 	umull	r1, r3, r1, r3
 80144d6:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 80144d8:	429a      	cmp	r2, r3
 80144da:	d90a      	bls.n	80144f2 <tcp_slowtmr+0x376>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 80144dc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80144e0:	3301      	adds	r3, #1
 80144e2:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 80144e6:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 80144ea:	3301      	adds	r3, #1
 80144ec:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 80144f0:	e027      	b.n	8014542 <tcp_slowtmr+0x3c6>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 80144f2:	4b82      	ldr	r3, [pc, #520]	; (80146fc <tcp_slowtmr+0x580>)
 80144f4:	681a      	ldr	r2, [r3, #0]
 80144f6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144f8:	6a1b      	ldr	r3, [r3, #32]
 80144fa:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 80144fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80144fe:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 8014502:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014504:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8014508:	4618      	mov	r0, r3
 801450a:	4b7f      	ldr	r3, [pc, #508]	; (8014708 <tcp_slowtmr+0x58c>)
 801450c:	fb00 f303 	mul.w	r3, r0, r3
 8014510:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 8014512:	497c      	ldr	r1, [pc, #496]	; (8014704 <tcp_slowtmr+0x588>)
 8014514:	fba1 1303 	umull	r1, r3, r1, r3
 8014518:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 801451a:	429a      	cmp	r2, r3
 801451c:	d911      	bls.n	8014542 <tcp_slowtmr+0x3c6>
        err = tcp_keepalive(pcb);
 801451e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014520:	f004 faca 	bl	8018ab8 <tcp_keepalive>
 8014524:	4603      	mov	r3, r0
 8014526:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 801452a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 801452e:	2b00      	cmp	r3, #0
 8014530:	d107      	bne.n	8014542 <tcp_slowtmr+0x3c6>
          pcb->keep_cnt_sent++;
 8014532:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014534:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 8014538:	3301      	adds	r3, #1
 801453a:	b2da      	uxtb	r2, r3
 801453c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801453e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 8014542:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014544:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014546:	2b00      	cmp	r3, #0
 8014548:	d011      	beq.n	801456e <tcp_slowtmr+0x3f2>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 801454a:	4b6c      	ldr	r3, [pc, #432]	; (80146fc <tcp_slowtmr+0x580>)
 801454c:	681a      	ldr	r2, [r3, #0]
 801454e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014550:	6a1b      	ldr	r3, [r3, #32]
 8014552:	1ad2      	subs	r2, r2, r3
 8014554:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014556:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 801455a:	4619      	mov	r1, r3
 801455c:	460b      	mov	r3, r1
 801455e:	005b      	lsls	r3, r3, #1
 8014560:	440b      	add	r3, r1
 8014562:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 8014564:	429a      	cmp	r2, r3
 8014566:	d302      	bcc.n	801456e <tcp_slowtmr+0x3f2>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 8014568:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 801456a:	f000 fddd 	bl	8015128 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 801456e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014570:	7d1b      	ldrb	r3, [r3, #20]
 8014572:	2b03      	cmp	r3, #3
 8014574:	d10b      	bne.n	801458e <tcp_slowtmr+0x412>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 8014576:	4b61      	ldr	r3, [pc, #388]	; (80146fc <tcp_slowtmr+0x580>)
 8014578:	681a      	ldr	r2, [r3, #0]
 801457a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801457c:	6a1b      	ldr	r3, [r3, #32]
 801457e:	1ad3      	subs	r3, r2, r3
 8014580:	2b28      	cmp	r3, #40	; 0x28
 8014582:	d904      	bls.n	801458e <tcp_slowtmr+0x412>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 8014584:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014588:	3301      	adds	r3, #1
 801458a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 801458e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014590:	7d1b      	ldrb	r3, [r3, #20]
 8014592:	2b09      	cmp	r3, #9
 8014594:	d10b      	bne.n	80145ae <tcp_slowtmr+0x432>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8014596:	4b59      	ldr	r3, [pc, #356]	; (80146fc <tcp_slowtmr+0x580>)
 8014598:	681a      	ldr	r2, [r3, #0]
 801459a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801459c:	6a1b      	ldr	r3, [r3, #32]
 801459e:	1ad3      	subs	r3, r2, r3
 80145a0:	2bf0      	cmp	r3, #240	; 0xf0
 80145a2:	d904      	bls.n	80145ae <tcp_slowtmr+0x432>
        ++pcb_remove;
 80145a4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80145a8:	3301      	adds	r3, #1
 80145aa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 80145ae:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80145b2:	2b00      	cmp	r3, #0
 80145b4:	d060      	beq.n	8014678 <tcp_slowtmr+0x4fc>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 80145b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145b8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80145bc:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 80145be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80145c0:	f000 fbfe 	bl	8014dc0 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 80145c4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145c6:	2b00      	cmp	r3, #0
 80145c8:	d010      	beq.n	80145ec <tcp_slowtmr+0x470>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 80145ca:	4b50      	ldr	r3, [pc, #320]	; (801470c <tcp_slowtmr+0x590>)
 80145cc:	681b      	ldr	r3, [r3, #0]
 80145ce:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80145d0:	429a      	cmp	r2, r3
 80145d2:	d106      	bne.n	80145e2 <tcp_slowtmr+0x466>
 80145d4:	4b4e      	ldr	r3, [pc, #312]	; (8014710 <tcp_slowtmr+0x594>)
 80145d6:	f240 526d 	movw	r2, #1389	; 0x56d
 80145da:	494e      	ldr	r1, [pc, #312]	; (8014714 <tcp_slowtmr+0x598>)
 80145dc:	484e      	ldr	r0, [pc, #312]	; (8014718 <tcp_slowtmr+0x59c>)
 80145de:	f008 ff65 	bl	801d4ac <iprintf>
        prev->next = pcb->next;
 80145e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80145e4:	68da      	ldr	r2, [r3, #12]
 80145e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80145e8:	60da      	str	r2, [r3, #12]
 80145ea:	e00f      	b.n	801460c <tcp_slowtmr+0x490>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 80145ec:	4b47      	ldr	r3, [pc, #284]	; (801470c <tcp_slowtmr+0x590>)
 80145ee:	681b      	ldr	r3, [r3, #0]
 80145f0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80145f2:	429a      	cmp	r2, r3
 80145f4:	d006      	beq.n	8014604 <tcp_slowtmr+0x488>
 80145f6:	4b46      	ldr	r3, [pc, #280]	; (8014710 <tcp_slowtmr+0x594>)
 80145f8:	f240 5271 	movw	r2, #1393	; 0x571
 80145fc:	4947      	ldr	r1, [pc, #284]	; (801471c <tcp_slowtmr+0x5a0>)
 80145fe:	4846      	ldr	r0, [pc, #280]	; (8014718 <tcp_slowtmr+0x59c>)
 8014600:	f008 ff54 	bl	801d4ac <iprintf>
        tcp_active_pcbs = pcb->next;
 8014604:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014606:	68db      	ldr	r3, [r3, #12]
 8014608:	4a40      	ldr	r2, [pc, #256]	; (801470c <tcp_slowtmr+0x590>)
 801460a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 801460c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 8014610:	2b00      	cmp	r3, #0
 8014612:	d013      	beq.n	801463c <tcp_slowtmr+0x4c0>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 8014614:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014616:	6d18      	ldr	r0, [r3, #80]	; 0x50
 8014618:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801461a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 801461c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 801461e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014620:	3304      	adds	r3, #4
 8014622:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014624:	8ad2      	ldrh	r2, [r2, #22]
 8014626:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8014628:	8b09      	ldrh	r1, [r1, #24]
 801462a:	9102      	str	r1, [sp, #8]
 801462c:	9201      	str	r2, [sp, #4]
 801462e:	9300      	str	r3, [sp, #0]
 8014630:	462b      	mov	r3, r5
 8014632:	4622      	mov	r2, r4
 8014634:	4601      	mov	r1, r0
 8014636:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014638:	f004 f98a 	bl	8018950 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 801463c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801463e:	691b      	ldr	r3, [r3, #16]
 8014640:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 8014642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8014644:	7d1b      	ldrb	r3, [r3, #20]
 8014646:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 8014648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801464a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 801464c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801464e:	68db      	ldr	r3, [r3, #12]
 8014650:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 8014652:	6838      	ldr	r0, [r7, #0]
 8014654:	f7ff f9f4 	bl	8013a40 <tcp_free>

      tcp_active_pcbs_changed = 0;
 8014658:	4b31      	ldr	r3, [pc, #196]	; (8014720 <tcp_slowtmr+0x5a4>)
 801465a:	2200      	movs	r2, #0
 801465c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 801465e:	68fb      	ldr	r3, [r7, #12]
 8014660:	2b00      	cmp	r3, #0
 8014662:	d004      	beq.n	801466e <tcp_slowtmr+0x4f2>
 8014664:	68fb      	ldr	r3, [r7, #12]
 8014666:	f06f 010c 	mvn.w	r1, #12
 801466a:	68b8      	ldr	r0, [r7, #8]
 801466c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 801466e:	4b2c      	ldr	r3, [pc, #176]	; (8014720 <tcp_slowtmr+0x5a4>)
 8014670:	781b      	ldrb	r3, [r3, #0]
 8014672:	2b00      	cmp	r3, #0
 8014674:	d037      	beq.n	80146e6 <tcp_slowtmr+0x56a>
        goto tcp_slowtmr_start;
 8014676:	e592      	b.n	801419e <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 8014678:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801467a:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 801467c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801467e:	68db      	ldr	r3, [r3, #12]
 8014680:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 8014682:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014684:	7f1b      	ldrb	r3, [r3, #28]
 8014686:	3301      	adds	r3, #1
 8014688:	b2da      	uxtb	r2, r3
 801468a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801468c:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 801468e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014690:	7f1a      	ldrb	r2, [r3, #28]
 8014692:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8014694:	7f5b      	ldrb	r3, [r3, #29]
 8014696:	429a      	cmp	r2, r3
 8014698:	d325      	bcc.n	80146e6 <tcp_slowtmr+0x56a>
        prev->polltmr = 0;
 801469a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801469c:	2200      	movs	r2, #0
 801469e:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 80146a0:	4b1f      	ldr	r3, [pc, #124]	; (8014720 <tcp_slowtmr+0x5a4>)
 80146a2:	2200      	movs	r2, #0
 80146a4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 80146a6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146a8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80146ac:	2b00      	cmp	r3, #0
 80146ae:	d00b      	beq.n	80146c8 <tcp_slowtmr+0x54c>
 80146b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80146b2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 80146b6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80146b8:	6912      	ldr	r2, [r2, #16]
 80146ba:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80146bc:	4610      	mov	r0, r2
 80146be:	4798      	blx	r3
 80146c0:	4603      	mov	r3, r0
 80146c2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 80146c6:	e002      	b.n	80146ce <tcp_slowtmr+0x552>
 80146c8:	2300      	movs	r3, #0
 80146ca:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 80146ce:	4b14      	ldr	r3, [pc, #80]	; (8014720 <tcp_slowtmr+0x5a4>)
 80146d0:	781b      	ldrb	r3, [r3, #0]
 80146d2:	2b00      	cmp	r3, #0
 80146d4:	d000      	beq.n	80146d8 <tcp_slowtmr+0x55c>
          goto tcp_slowtmr_start;
 80146d6:	e562      	b.n	801419e <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 80146d8:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 80146dc:	2b00      	cmp	r3, #0
 80146de:	d102      	bne.n	80146e6 <tcp_slowtmr+0x56a>
          tcp_output(prev);
 80146e0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 80146e2:	f003 fb81 	bl	8017de8 <tcp_output>
  while (pcb != NULL) {
 80146e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80146e8:	2b00      	cmp	r3, #0
 80146ea:	f47f ad5e 	bne.w	80141aa <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 80146ee:	2300      	movs	r3, #0
 80146f0:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 80146f2:	4b0c      	ldr	r3, [pc, #48]	; (8014724 <tcp_slowtmr+0x5a8>)
 80146f4:	681b      	ldr	r3, [r3, #0]
 80146f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80146f8:	e069      	b.n	80147ce <tcp_slowtmr+0x652>
 80146fa:	bf00      	nop
 80146fc:	2002404c 	.word	0x2002404c
 8014700:	000a4cb8 	.word	0x000a4cb8
 8014704:	10624dd3 	.word	0x10624dd3
 8014708:	000124f8 	.word	0x000124f8
 801470c:	20024058 	.word	0x20024058
 8014710:	0801f000 	.word	0x0801f000
 8014714:	0801f438 	.word	0x0801f438
 8014718:	0801f044 	.word	0x0801f044
 801471c:	0801f464 	.word	0x0801f464
 8014720:	20024060 	.word	0x20024060
 8014724:	2002405c 	.word	0x2002405c
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 8014728:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801472a:	7d1b      	ldrb	r3, [r3, #20]
 801472c:	2b0a      	cmp	r3, #10
 801472e:	d006      	beq.n	801473e <tcp_slowtmr+0x5c2>
 8014730:	4b2b      	ldr	r3, [pc, #172]	; (80147e0 <tcp_slowtmr+0x664>)
 8014732:	f240 52a1 	movw	r2, #1441	; 0x5a1
 8014736:	492b      	ldr	r1, [pc, #172]	; (80147e4 <tcp_slowtmr+0x668>)
 8014738:	482b      	ldr	r0, [pc, #172]	; (80147e8 <tcp_slowtmr+0x66c>)
 801473a:	f008 feb7 	bl	801d4ac <iprintf>
    pcb_remove = 0;
 801473e:	2300      	movs	r3, #0
 8014740:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 8014744:	4b29      	ldr	r3, [pc, #164]	; (80147ec <tcp_slowtmr+0x670>)
 8014746:	681a      	ldr	r2, [r3, #0]
 8014748:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801474a:	6a1b      	ldr	r3, [r3, #32]
 801474c:	1ad3      	subs	r3, r2, r3
 801474e:	2bf0      	cmp	r3, #240	; 0xf0
 8014750:	d904      	bls.n	801475c <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 8014752:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014756:	3301      	adds	r3, #1
 8014758:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 801475c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8014760:	2b00      	cmp	r3, #0
 8014762:	d02f      	beq.n	80147c4 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 8014764:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8014766:	f000 fb2b 	bl	8014dc0 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 801476a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801476c:	2b00      	cmp	r3, #0
 801476e:	d010      	beq.n	8014792 <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 8014770:	4b1f      	ldr	r3, [pc, #124]	; (80147f0 <tcp_slowtmr+0x674>)
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014776:	429a      	cmp	r2, r3
 8014778:	d106      	bne.n	8014788 <tcp_slowtmr+0x60c>
 801477a:	4b19      	ldr	r3, [pc, #100]	; (80147e0 <tcp_slowtmr+0x664>)
 801477c:	f240 52af 	movw	r2, #1455	; 0x5af
 8014780:	491c      	ldr	r1, [pc, #112]	; (80147f4 <tcp_slowtmr+0x678>)
 8014782:	4819      	ldr	r0, [pc, #100]	; (80147e8 <tcp_slowtmr+0x66c>)
 8014784:	f008 fe92 	bl	801d4ac <iprintf>
        prev->next = pcb->next;
 8014788:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801478a:	68da      	ldr	r2, [r3, #12]
 801478c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801478e:	60da      	str	r2, [r3, #12]
 8014790:	e00f      	b.n	80147b2 <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 8014792:	4b17      	ldr	r3, [pc, #92]	; (80147f0 <tcp_slowtmr+0x674>)
 8014794:	681b      	ldr	r3, [r3, #0]
 8014796:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8014798:	429a      	cmp	r2, r3
 801479a:	d006      	beq.n	80147aa <tcp_slowtmr+0x62e>
 801479c:	4b10      	ldr	r3, [pc, #64]	; (80147e0 <tcp_slowtmr+0x664>)
 801479e:	f240 52b3 	movw	r2, #1459	; 0x5b3
 80147a2:	4915      	ldr	r1, [pc, #84]	; (80147f8 <tcp_slowtmr+0x67c>)
 80147a4:	4810      	ldr	r0, [pc, #64]	; (80147e8 <tcp_slowtmr+0x66c>)
 80147a6:	f008 fe81 	bl	801d4ac <iprintf>
        tcp_tw_pcbs = pcb->next;
 80147aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147ac:	68db      	ldr	r3, [r3, #12]
 80147ae:	4a10      	ldr	r2, [pc, #64]	; (80147f0 <tcp_slowtmr+0x674>)
 80147b0:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 80147b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147b4:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 80147b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147b8:	68db      	ldr	r3, [r3, #12]
 80147ba:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 80147bc:	69f8      	ldr	r0, [r7, #28]
 80147be:	f7ff f93f 	bl	8013a40 <tcp_free>
 80147c2:	e004      	b.n	80147ce <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 80147c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147c6:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 80147c8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147ca:	68db      	ldr	r3, [r3, #12]
 80147cc:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 80147ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80147d0:	2b00      	cmp	r3, #0
 80147d2:	d1a9      	bne.n	8014728 <tcp_slowtmr+0x5ac>
    }
  }
}
 80147d4:	bf00      	nop
 80147d6:	bf00      	nop
 80147d8:	3730      	adds	r7, #48	; 0x30
 80147da:	46bd      	mov	sp, r7
 80147dc:	bdb0      	pop	{r4, r5, r7, pc}
 80147de:	bf00      	nop
 80147e0:	0801f000 	.word	0x0801f000
 80147e4:	0801f490 	.word	0x0801f490
 80147e8:	0801f044 	.word	0x0801f044
 80147ec:	2002404c 	.word	0x2002404c
 80147f0:	2002405c 	.word	0x2002405c
 80147f4:	0801f4c0 	.word	0x0801f4c0
 80147f8:	0801f4e8 	.word	0x0801f4e8

080147fc <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 80147fc:	b580      	push	{r7, lr}
 80147fe:	b082      	sub	sp, #8
 8014800:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 8014802:	4b2d      	ldr	r3, [pc, #180]	; (80148b8 <tcp_fasttmr+0xbc>)
 8014804:	781b      	ldrb	r3, [r3, #0]
 8014806:	3301      	adds	r3, #1
 8014808:	b2da      	uxtb	r2, r3
 801480a:	4b2b      	ldr	r3, [pc, #172]	; (80148b8 <tcp_fasttmr+0xbc>)
 801480c:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 801480e:	4b2b      	ldr	r3, [pc, #172]	; (80148bc <tcp_fasttmr+0xc0>)
 8014810:	681b      	ldr	r3, [r3, #0]
 8014812:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8014814:	e048      	b.n	80148a8 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 8014816:	687b      	ldr	r3, [r7, #4]
 8014818:	7f9a      	ldrb	r2, [r3, #30]
 801481a:	4b27      	ldr	r3, [pc, #156]	; (80148b8 <tcp_fasttmr+0xbc>)
 801481c:	781b      	ldrb	r3, [r3, #0]
 801481e:	429a      	cmp	r2, r3
 8014820:	d03f      	beq.n	80148a2 <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 8014822:	4b25      	ldr	r3, [pc, #148]	; (80148b8 <tcp_fasttmr+0xbc>)
 8014824:	781a      	ldrb	r2, [r3, #0]
 8014826:	687b      	ldr	r3, [r7, #4]
 8014828:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 801482a:	687b      	ldr	r3, [r7, #4]
 801482c:	8b5b      	ldrh	r3, [r3, #26]
 801482e:	f003 0301 	and.w	r3, r3, #1
 8014832:	2b00      	cmp	r3, #0
 8014834:	d010      	beq.n	8014858 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 8014836:	687b      	ldr	r3, [r7, #4]
 8014838:	8b5b      	ldrh	r3, [r3, #26]
 801483a:	f043 0302 	orr.w	r3, r3, #2
 801483e:	b29a      	uxth	r2, r3
 8014840:	687b      	ldr	r3, [r7, #4]
 8014842:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 8014844:	6878      	ldr	r0, [r7, #4]
 8014846:	f003 facf 	bl	8017de8 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 801484a:	687b      	ldr	r3, [r7, #4]
 801484c:	8b5b      	ldrh	r3, [r3, #26]
 801484e:	f023 0303 	bic.w	r3, r3, #3
 8014852:	b29a      	uxth	r2, r3
 8014854:	687b      	ldr	r3, [r7, #4]
 8014856:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 8014858:	687b      	ldr	r3, [r7, #4]
 801485a:	8b5b      	ldrh	r3, [r3, #26]
 801485c:	f003 0308 	and.w	r3, r3, #8
 8014860:	2b00      	cmp	r3, #0
 8014862:	d009      	beq.n	8014878 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 8014864:	687b      	ldr	r3, [r7, #4]
 8014866:	8b5b      	ldrh	r3, [r3, #26]
 8014868:	f023 0308 	bic.w	r3, r3, #8
 801486c:	b29a      	uxth	r2, r3
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 8014872:	6878      	ldr	r0, [r7, #4]
 8014874:	f7ff fa78 	bl	8013d68 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 8014878:	687b      	ldr	r3, [r7, #4]
 801487a:	68db      	ldr	r3, [r3, #12]
 801487c:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 801487e:	687b      	ldr	r3, [r7, #4]
 8014880:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014882:	2b00      	cmp	r3, #0
 8014884:	d00a      	beq.n	801489c <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 8014886:	4b0e      	ldr	r3, [pc, #56]	; (80148c0 <tcp_fasttmr+0xc4>)
 8014888:	2200      	movs	r2, #0
 801488a:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 801488c:	6878      	ldr	r0, [r7, #4]
 801488e:	f000 f819 	bl	80148c4 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 8014892:	4b0b      	ldr	r3, [pc, #44]	; (80148c0 <tcp_fasttmr+0xc4>)
 8014894:	781b      	ldrb	r3, [r3, #0]
 8014896:	2b00      	cmp	r3, #0
 8014898:	d000      	beq.n	801489c <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 801489a:	e7b8      	b.n	801480e <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 801489c:	683b      	ldr	r3, [r7, #0]
 801489e:	607b      	str	r3, [r7, #4]
 80148a0:	e002      	b.n	80148a8 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 80148a2:	687b      	ldr	r3, [r7, #4]
 80148a4:	68db      	ldr	r3, [r3, #12]
 80148a6:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 80148a8:	687b      	ldr	r3, [r7, #4]
 80148aa:	2b00      	cmp	r3, #0
 80148ac:	d1b3      	bne.n	8014816 <tcp_fasttmr+0x1a>
    }
  }
}
 80148ae:	bf00      	nop
 80148b0:	bf00      	nop
 80148b2:	3708      	adds	r7, #8
 80148b4:	46bd      	mov	sp, r7
 80148b6:	bd80      	pop	{r7, pc}
 80148b8:	20024062 	.word	0x20024062
 80148bc:	20024058 	.word	0x20024058
 80148c0:	20024060 	.word	0x20024060

080148c4 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 80148c4:	b590      	push	{r4, r7, lr}
 80148c6:	b085      	sub	sp, #20
 80148c8:	af00      	add	r7, sp, #0
 80148ca:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 80148cc:	687b      	ldr	r3, [r7, #4]
 80148ce:	2b00      	cmp	r3, #0
 80148d0:	d109      	bne.n	80148e6 <tcp_process_refused_data+0x22>
 80148d2:	4b37      	ldr	r3, [pc, #220]	; (80149b0 <tcp_process_refused_data+0xec>)
 80148d4:	f240 6209 	movw	r2, #1545	; 0x609
 80148d8:	4936      	ldr	r1, [pc, #216]	; (80149b4 <tcp_process_refused_data+0xf0>)
 80148da:	4837      	ldr	r0, [pc, #220]	; (80149b8 <tcp_process_refused_data+0xf4>)
 80148dc:	f008 fde6 	bl	801d4ac <iprintf>
 80148e0:	f06f 030f 	mvn.w	r3, #15
 80148e4:	e060      	b.n	80149a8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 80148e6:	687b      	ldr	r3, [r7, #4]
 80148e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80148ea:	7b5b      	ldrb	r3, [r3, #13]
 80148ec:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 80148ee:	687b      	ldr	r3, [r7, #4]
 80148f0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80148f2:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 80148f4:	687b      	ldr	r3, [r7, #4]
 80148f6:	2200      	movs	r2, #0
 80148f8:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 80148fa:	687b      	ldr	r3, [r7, #4]
 80148fc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8014900:	2b00      	cmp	r3, #0
 8014902:	d00b      	beq.n	801491c <tcp_process_refused_data+0x58>
 8014904:	687b      	ldr	r3, [r7, #4]
 8014906:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 801490a:	687b      	ldr	r3, [r7, #4]
 801490c:	6918      	ldr	r0, [r3, #16]
 801490e:	2300      	movs	r3, #0
 8014910:	68ba      	ldr	r2, [r7, #8]
 8014912:	6879      	ldr	r1, [r7, #4]
 8014914:	47a0      	blx	r4
 8014916:	4603      	mov	r3, r0
 8014918:	73fb      	strb	r3, [r7, #15]
 801491a:	e007      	b.n	801492c <tcp_process_refused_data+0x68>
 801491c:	2300      	movs	r3, #0
 801491e:	68ba      	ldr	r2, [r7, #8]
 8014920:	6879      	ldr	r1, [r7, #4]
 8014922:	2000      	movs	r0, #0
 8014924:	f000 f8a4 	bl	8014a70 <tcp_recv_null>
 8014928:	4603      	mov	r3, r0
 801492a:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 801492c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8014930:	2b00      	cmp	r3, #0
 8014932:	d12a      	bne.n	801498a <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 8014934:	7bbb      	ldrb	r3, [r7, #14]
 8014936:	f003 0320 	and.w	r3, r3, #32
 801493a:	2b00      	cmp	r3, #0
 801493c:	d033      	beq.n	80149a6 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 801493e:	687b      	ldr	r3, [r7, #4]
 8014940:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8014942:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8014946:	d005      	beq.n	8014954 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 8014948:	687b      	ldr	r3, [r7, #4]
 801494a:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801494c:	3301      	adds	r3, #1
 801494e:	b29a      	uxth	r2, r3
 8014950:	687b      	ldr	r3, [r7, #4]
 8014952:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 8014954:	687b      	ldr	r3, [r7, #4]
 8014956:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 801495a:	2b00      	cmp	r3, #0
 801495c:	d00b      	beq.n	8014976 <tcp_process_refused_data+0xb2>
 801495e:	687b      	ldr	r3, [r7, #4]
 8014960:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8014964:	687b      	ldr	r3, [r7, #4]
 8014966:	6918      	ldr	r0, [r3, #16]
 8014968:	2300      	movs	r3, #0
 801496a:	2200      	movs	r2, #0
 801496c:	6879      	ldr	r1, [r7, #4]
 801496e:	47a0      	blx	r4
 8014970:	4603      	mov	r3, r0
 8014972:	73fb      	strb	r3, [r7, #15]
 8014974:	e001      	b.n	801497a <tcp_process_refused_data+0xb6>
 8014976:	2300      	movs	r3, #0
 8014978:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 801497a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801497e:	f113 0f0d 	cmn.w	r3, #13
 8014982:	d110      	bne.n	80149a6 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 8014984:	f06f 030c 	mvn.w	r3, #12
 8014988:	e00e      	b.n	80149a8 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 801498a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801498e:	f113 0f0d 	cmn.w	r3, #13
 8014992:	d102      	bne.n	801499a <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 8014994:	f06f 030c 	mvn.w	r3, #12
 8014998:	e006      	b.n	80149a8 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 801499a:	687b      	ldr	r3, [r7, #4]
 801499c:	68ba      	ldr	r2, [r7, #8]
 801499e:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 80149a0:	f06f 0304 	mvn.w	r3, #4
 80149a4:	e000      	b.n	80149a8 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 80149a6:	2300      	movs	r3, #0
}
 80149a8:	4618      	mov	r0, r3
 80149aa:	3714      	adds	r7, #20
 80149ac:	46bd      	mov	sp, r7
 80149ae:	bd90      	pop	{r4, r7, pc}
 80149b0:	0801f000 	.word	0x0801f000
 80149b4:	0801f510 	.word	0x0801f510
 80149b8:	0801f044 	.word	0x0801f044

080149bc <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 80149bc:	b580      	push	{r7, lr}
 80149be:	b084      	sub	sp, #16
 80149c0:	af00      	add	r7, sp, #0
 80149c2:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 80149c4:	e007      	b.n	80149d6 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 80149c6:	687b      	ldr	r3, [r7, #4]
 80149c8:	681b      	ldr	r3, [r3, #0]
 80149ca:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 80149cc:	6878      	ldr	r0, [r7, #4]
 80149ce:	f000 f80a 	bl	80149e6 <tcp_seg_free>
    seg = next;
 80149d2:	68fb      	ldr	r3, [r7, #12]
 80149d4:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 80149d6:	687b      	ldr	r3, [r7, #4]
 80149d8:	2b00      	cmp	r3, #0
 80149da:	d1f4      	bne.n	80149c6 <tcp_segs_free+0xa>
  }
}
 80149dc:	bf00      	nop
 80149de:	bf00      	nop
 80149e0:	3710      	adds	r7, #16
 80149e2:	46bd      	mov	sp, r7
 80149e4:	bd80      	pop	{r7, pc}

080149e6 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 80149e6:	b580      	push	{r7, lr}
 80149e8:	b082      	sub	sp, #8
 80149ea:	af00      	add	r7, sp, #0
 80149ec:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 80149ee:	687b      	ldr	r3, [r7, #4]
 80149f0:	2b00      	cmp	r3, #0
 80149f2:	d00c      	beq.n	8014a0e <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 80149f4:	687b      	ldr	r3, [r7, #4]
 80149f6:	685b      	ldr	r3, [r3, #4]
 80149f8:	2b00      	cmp	r3, #0
 80149fa:	d004      	beq.n	8014a06 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 80149fc:	687b      	ldr	r3, [r7, #4]
 80149fe:	685b      	ldr	r3, [r3, #4]
 8014a00:	4618      	mov	r0, r3
 8014a02:	f7fe fd61 	bl	80134c8 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 8014a06:	6879      	ldr	r1, [r7, #4]
 8014a08:	2003      	movs	r0, #3
 8014a0a:	f7fd feb9 	bl	8012780 <memp_free>
  }
}
 8014a0e:	bf00      	nop
 8014a10:	3708      	adds	r7, #8
 8014a12:	46bd      	mov	sp, r7
 8014a14:	bd80      	pop	{r7, pc}
	...

08014a18 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 8014a18:	b580      	push	{r7, lr}
 8014a1a:	b084      	sub	sp, #16
 8014a1c:	af00      	add	r7, sp, #0
 8014a1e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 8014a20:	687b      	ldr	r3, [r7, #4]
 8014a22:	2b00      	cmp	r3, #0
 8014a24:	d106      	bne.n	8014a34 <tcp_seg_copy+0x1c>
 8014a26:	4b0f      	ldr	r3, [pc, #60]	; (8014a64 <tcp_seg_copy+0x4c>)
 8014a28:	f240 6282 	movw	r2, #1666	; 0x682
 8014a2c:	490e      	ldr	r1, [pc, #56]	; (8014a68 <tcp_seg_copy+0x50>)
 8014a2e:	480f      	ldr	r0, [pc, #60]	; (8014a6c <tcp_seg_copy+0x54>)
 8014a30:	f008 fd3c 	bl	801d4ac <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 8014a34:	2003      	movs	r0, #3
 8014a36:	f7fd fe2d 	bl	8012694 <memp_malloc>
 8014a3a:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 8014a3c:	68fb      	ldr	r3, [r7, #12]
 8014a3e:	2b00      	cmp	r3, #0
 8014a40:	d101      	bne.n	8014a46 <tcp_seg_copy+0x2e>
    return NULL;
 8014a42:	2300      	movs	r3, #0
 8014a44:	e00a      	b.n	8014a5c <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 8014a46:	2210      	movs	r2, #16
 8014a48:	6879      	ldr	r1, [r7, #4]
 8014a4a:	68f8      	ldr	r0, [r7, #12]
 8014a4c:	f008 fe5f 	bl	801d70e <memcpy>
  pbuf_ref(cseg->p);
 8014a50:	68fb      	ldr	r3, [r7, #12]
 8014a52:	685b      	ldr	r3, [r3, #4]
 8014a54:	4618      	mov	r0, r3
 8014a56:	f7fe fddd 	bl	8013614 <pbuf_ref>
  return cseg;
 8014a5a:	68fb      	ldr	r3, [r7, #12]
}
 8014a5c:	4618      	mov	r0, r3
 8014a5e:	3710      	adds	r7, #16
 8014a60:	46bd      	mov	sp, r7
 8014a62:	bd80      	pop	{r7, pc}
 8014a64:	0801f000 	.word	0x0801f000
 8014a68:	0801f554 	.word	0x0801f554
 8014a6c:	0801f044 	.word	0x0801f044

08014a70 <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 8014a70:	b580      	push	{r7, lr}
 8014a72:	b084      	sub	sp, #16
 8014a74:	af00      	add	r7, sp, #0
 8014a76:	60f8      	str	r0, [r7, #12]
 8014a78:	60b9      	str	r1, [r7, #8]
 8014a7a:	607a      	str	r2, [r7, #4]
 8014a7c:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 8014a7e:	68bb      	ldr	r3, [r7, #8]
 8014a80:	2b00      	cmp	r3, #0
 8014a82:	d109      	bne.n	8014a98 <tcp_recv_null+0x28>
 8014a84:	4b12      	ldr	r3, [pc, #72]	; (8014ad0 <tcp_recv_null+0x60>)
 8014a86:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 8014a8a:	4912      	ldr	r1, [pc, #72]	; (8014ad4 <tcp_recv_null+0x64>)
 8014a8c:	4812      	ldr	r0, [pc, #72]	; (8014ad8 <tcp_recv_null+0x68>)
 8014a8e:	f008 fd0d 	bl	801d4ac <iprintf>
 8014a92:	f06f 030f 	mvn.w	r3, #15
 8014a96:	e016      	b.n	8014ac6 <tcp_recv_null+0x56>

  if (p != NULL) {
 8014a98:	687b      	ldr	r3, [r7, #4]
 8014a9a:	2b00      	cmp	r3, #0
 8014a9c:	d009      	beq.n	8014ab2 <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 8014a9e:	687b      	ldr	r3, [r7, #4]
 8014aa0:	891b      	ldrh	r3, [r3, #8]
 8014aa2:	4619      	mov	r1, r3
 8014aa4:	68b8      	ldr	r0, [r7, #8]
 8014aa6:	f7ff fb19 	bl	80140dc <tcp_recved>
    pbuf_free(p);
 8014aaa:	6878      	ldr	r0, [r7, #4]
 8014aac:	f7fe fd0c 	bl	80134c8 <pbuf_free>
 8014ab0:	e008      	b.n	8014ac4 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 8014ab2:	f997 3003 	ldrsb.w	r3, [r7, #3]
 8014ab6:	2b00      	cmp	r3, #0
 8014ab8:	d104      	bne.n	8014ac4 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 8014aba:	68b8      	ldr	r0, [r7, #8]
 8014abc:	f7ff f9be 	bl	8013e3c <tcp_close>
 8014ac0:	4603      	mov	r3, r0
 8014ac2:	e000      	b.n	8014ac6 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 8014ac4:	2300      	movs	r3, #0
}
 8014ac6:	4618      	mov	r0, r3
 8014ac8:	3710      	adds	r7, #16
 8014aca:	46bd      	mov	sp, r7
 8014acc:	bd80      	pop	{r7, pc}
 8014ace:	bf00      	nop
 8014ad0:	0801f000 	.word	0x0801f000
 8014ad4:	0801f570 	.word	0x0801f570
 8014ad8:	0801f044 	.word	0x0801f044

08014adc <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 8014adc:	b580      	push	{r7, lr}
 8014ade:	b086      	sub	sp, #24
 8014ae0:	af00      	add	r7, sp, #0
 8014ae2:	4603      	mov	r3, r0
 8014ae4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 8014ae6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	db01      	blt.n	8014af2 <tcp_kill_prio+0x16>
 8014aee:	79fb      	ldrb	r3, [r7, #7]
 8014af0:	e000      	b.n	8014af4 <tcp_kill_prio+0x18>
 8014af2:	237f      	movs	r3, #127	; 0x7f
 8014af4:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 8014af6:	7afb      	ldrb	r3, [r7, #11]
 8014af8:	2b00      	cmp	r3, #0
 8014afa:	d034      	beq.n	8014b66 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 8014afc:	7afb      	ldrb	r3, [r7, #11]
 8014afe:	3b01      	subs	r3, #1
 8014b00:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 8014b02:	2300      	movs	r3, #0
 8014b04:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8014b06:	2300      	movs	r3, #0
 8014b08:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014b0a:	4b19      	ldr	r3, [pc, #100]	; (8014b70 <tcp_kill_prio+0x94>)
 8014b0c:	681b      	ldr	r3, [r3, #0]
 8014b0e:	617b      	str	r3, [r7, #20]
 8014b10:	e01f      	b.n	8014b52 <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 8014b12:	697b      	ldr	r3, [r7, #20]
 8014b14:	7d5b      	ldrb	r3, [r3, #21]
 8014b16:	7afa      	ldrb	r2, [r7, #11]
 8014b18:	429a      	cmp	r2, r3
 8014b1a:	d80c      	bhi.n	8014b36 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8014b1c:	697b      	ldr	r3, [r7, #20]
 8014b1e:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 8014b20:	7afa      	ldrb	r2, [r7, #11]
 8014b22:	429a      	cmp	r2, r3
 8014b24:	d112      	bne.n	8014b4c <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 8014b26:	4b13      	ldr	r3, [pc, #76]	; (8014b74 <tcp_kill_prio+0x98>)
 8014b28:	681a      	ldr	r2, [r3, #0]
 8014b2a:	697b      	ldr	r3, [r7, #20]
 8014b2c:	6a1b      	ldr	r3, [r3, #32]
 8014b2e:	1ad3      	subs	r3, r2, r3
 8014b30:	68fa      	ldr	r2, [r7, #12]
 8014b32:	429a      	cmp	r2, r3
 8014b34:	d80a      	bhi.n	8014b4c <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 8014b36:	4b0f      	ldr	r3, [pc, #60]	; (8014b74 <tcp_kill_prio+0x98>)
 8014b38:	681a      	ldr	r2, [r3, #0]
 8014b3a:	697b      	ldr	r3, [r7, #20]
 8014b3c:	6a1b      	ldr	r3, [r3, #32]
 8014b3e:	1ad3      	subs	r3, r2, r3
 8014b40:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 8014b42:	697b      	ldr	r3, [r7, #20]
 8014b44:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 8014b46:	697b      	ldr	r3, [r7, #20]
 8014b48:	7d5b      	ldrb	r3, [r3, #21]
 8014b4a:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014b4c:	697b      	ldr	r3, [r7, #20]
 8014b4e:	68db      	ldr	r3, [r3, #12]
 8014b50:	617b      	str	r3, [r7, #20]
 8014b52:	697b      	ldr	r3, [r7, #20]
 8014b54:	2b00      	cmp	r3, #0
 8014b56:	d1dc      	bne.n	8014b12 <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 8014b58:	693b      	ldr	r3, [r7, #16]
 8014b5a:	2b00      	cmp	r3, #0
 8014b5c:	d004      	beq.n	8014b68 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8014b5e:	6938      	ldr	r0, [r7, #16]
 8014b60:	f7ff fa56 	bl	8014010 <tcp_abort>
 8014b64:	e000      	b.n	8014b68 <tcp_kill_prio+0x8c>
    return;
 8014b66:	bf00      	nop
  }
}
 8014b68:	3718      	adds	r7, #24
 8014b6a:	46bd      	mov	sp, r7
 8014b6c:	bd80      	pop	{r7, pc}
 8014b6e:	bf00      	nop
 8014b70:	20024058 	.word	0x20024058
 8014b74:	2002404c 	.word	0x2002404c

08014b78 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 8014b78:	b580      	push	{r7, lr}
 8014b7a:	b086      	sub	sp, #24
 8014b7c:	af00      	add	r7, sp, #0
 8014b7e:	4603      	mov	r3, r0
 8014b80:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 8014b82:	79fb      	ldrb	r3, [r7, #7]
 8014b84:	2b08      	cmp	r3, #8
 8014b86:	d009      	beq.n	8014b9c <tcp_kill_state+0x24>
 8014b88:	79fb      	ldrb	r3, [r7, #7]
 8014b8a:	2b09      	cmp	r3, #9
 8014b8c:	d006      	beq.n	8014b9c <tcp_kill_state+0x24>
 8014b8e:	4b1a      	ldr	r3, [pc, #104]	; (8014bf8 <tcp_kill_state+0x80>)
 8014b90:	f240 62dd 	movw	r2, #1757	; 0x6dd
 8014b94:	4919      	ldr	r1, [pc, #100]	; (8014bfc <tcp_kill_state+0x84>)
 8014b96:	481a      	ldr	r0, [pc, #104]	; (8014c00 <tcp_kill_state+0x88>)
 8014b98:	f008 fc88 	bl	801d4ac <iprintf>

  inactivity = 0;
 8014b9c:	2300      	movs	r3, #0
 8014b9e:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 8014ba0:	2300      	movs	r3, #0
 8014ba2:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014ba4:	4b17      	ldr	r3, [pc, #92]	; (8014c04 <tcp_kill_state+0x8c>)
 8014ba6:	681b      	ldr	r3, [r3, #0]
 8014ba8:	617b      	str	r3, [r7, #20]
 8014baa:	e017      	b.n	8014bdc <tcp_kill_state+0x64>
    if (pcb->state == state) {
 8014bac:	697b      	ldr	r3, [r7, #20]
 8014bae:	7d1b      	ldrb	r3, [r3, #20]
 8014bb0:	79fa      	ldrb	r2, [r7, #7]
 8014bb2:	429a      	cmp	r2, r3
 8014bb4:	d10f      	bne.n	8014bd6 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8014bb6:	4b14      	ldr	r3, [pc, #80]	; (8014c08 <tcp_kill_state+0x90>)
 8014bb8:	681a      	ldr	r2, [r3, #0]
 8014bba:	697b      	ldr	r3, [r7, #20]
 8014bbc:	6a1b      	ldr	r3, [r3, #32]
 8014bbe:	1ad3      	subs	r3, r2, r3
 8014bc0:	68fa      	ldr	r2, [r7, #12]
 8014bc2:	429a      	cmp	r2, r3
 8014bc4:	d807      	bhi.n	8014bd6 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 8014bc6:	4b10      	ldr	r3, [pc, #64]	; (8014c08 <tcp_kill_state+0x90>)
 8014bc8:	681a      	ldr	r2, [r3, #0]
 8014bca:	697b      	ldr	r3, [r7, #20]
 8014bcc:	6a1b      	ldr	r3, [r3, #32]
 8014bce:	1ad3      	subs	r3, r2, r3
 8014bd0:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 8014bd2:	697b      	ldr	r3, [r7, #20]
 8014bd4:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8014bd6:	697b      	ldr	r3, [r7, #20]
 8014bd8:	68db      	ldr	r3, [r3, #12]
 8014bda:	617b      	str	r3, [r7, #20]
 8014bdc:	697b      	ldr	r3, [r7, #20]
 8014bde:	2b00      	cmp	r3, #0
 8014be0:	d1e4      	bne.n	8014bac <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 8014be2:	693b      	ldr	r3, [r7, #16]
 8014be4:	2b00      	cmp	r3, #0
 8014be6:	d003      	beq.n	8014bf0 <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 8014be8:	2100      	movs	r1, #0
 8014bea:	6938      	ldr	r0, [r7, #16]
 8014bec:	f7ff f952 	bl	8013e94 <tcp_abandon>
  }
}
 8014bf0:	bf00      	nop
 8014bf2:	3718      	adds	r7, #24
 8014bf4:	46bd      	mov	sp, r7
 8014bf6:	bd80      	pop	{r7, pc}
 8014bf8:	0801f000 	.word	0x0801f000
 8014bfc:	0801f58c 	.word	0x0801f58c
 8014c00:	0801f044 	.word	0x0801f044
 8014c04:	20024058 	.word	0x20024058
 8014c08:	2002404c 	.word	0x2002404c

08014c0c <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 8014c0c:	b580      	push	{r7, lr}
 8014c0e:	b084      	sub	sp, #16
 8014c10:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 8014c12:	2300      	movs	r3, #0
 8014c14:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 8014c16:	2300      	movs	r3, #0
 8014c18:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014c1a:	4b12      	ldr	r3, [pc, #72]	; (8014c64 <tcp_kill_timewait+0x58>)
 8014c1c:	681b      	ldr	r3, [r3, #0]
 8014c1e:	60fb      	str	r3, [r7, #12]
 8014c20:	e012      	b.n	8014c48 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 8014c22:	4b11      	ldr	r3, [pc, #68]	; (8014c68 <tcp_kill_timewait+0x5c>)
 8014c24:	681a      	ldr	r2, [r3, #0]
 8014c26:	68fb      	ldr	r3, [r7, #12]
 8014c28:	6a1b      	ldr	r3, [r3, #32]
 8014c2a:	1ad3      	subs	r3, r2, r3
 8014c2c:	687a      	ldr	r2, [r7, #4]
 8014c2e:	429a      	cmp	r2, r3
 8014c30:	d807      	bhi.n	8014c42 <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 8014c32:	4b0d      	ldr	r3, [pc, #52]	; (8014c68 <tcp_kill_timewait+0x5c>)
 8014c34:	681a      	ldr	r2, [r3, #0]
 8014c36:	68fb      	ldr	r3, [r7, #12]
 8014c38:	6a1b      	ldr	r3, [r3, #32]
 8014c3a:	1ad3      	subs	r3, r2, r3
 8014c3c:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 8014c3e:	68fb      	ldr	r3, [r7, #12]
 8014c40:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8014c42:	68fb      	ldr	r3, [r7, #12]
 8014c44:	68db      	ldr	r3, [r3, #12]
 8014c46:	60fb      	str	r3, [r7, #12]
 8014c48:	68fb      	ldr	r3, [r7, #12]
 8014c4a:	2b00      	cmp	r3, #0
 8014c4c:	d1e9      	bne.n	8014c22 <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 8014c4e:	68bb      	ldr	r3, [r7, #8]
 8014c50:	2b00      	cmp	r3, #0
 8014c52:	d002      	beq.n	8014c5a <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 8014c54:	68b8      	ldr	r0, [r7, #8]
 8014c56:	f7ff f9db 	bl	8014010 <tcp_abort>
  }
}
 8014c5a:	bf00      	nop
 8014c5c:	3710      	adds	r7, #16
 8014c5e:	46bd      	mov	sp, r7
 8014c60:	bd80      	pop	{r7, pc}
 8014c62:	bf00      	nop
 8014c64:	2002405c 	.word	0x2002405c
 8014c68:	2002404c 	.word	0x2002404c

08014c6c <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 8014c6c:	b580      	push	{r7, lr}
 8014c6e:	b082      	sub	sp, #8
 8014c70:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 8014c72:	4b10      	ldr	r3, [pc, #64]	; (8014cb4 <tcp_handle_closepend+0x48>)
 8014c74:	681b      	ldr	r3, [r3, #0]
 8014c76:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 8014c78:	e014      	b.n	8014ca4 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 8014c7a:	687b      	ldr	r3, [r7, #4]
 8014c7c:	68db      	ldr	r3, [r3, #12]
 8014c7e:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 8014c80:	687b      	ldr	r3, [r7, #4]
 8014c82:	8b5b      	ldrh	r3, [r3, #26]
 8014c84:	f003 0308 	and.w	r3, r3, #8
 8014c88:	2b00      	cmp	r3, #0
 8014c8a:	d009      	beq.n	8014ca0 <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 8014c8c:	687b      	ldr	r3, [r7, #4]
 8014c8e:	8b5b      	ldrh	r3, [r3, #26]
 8014c90:	f023 0308 	bic.w	r3, r3, #8
 8014c94:	b29a      	uxth	r2, r3
 8014c96:	687b      	ldr	r3, [r7, #4]
 8014c98:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 8014c9a:	6878      	ldr	r0, [r7, #4]
 8014c9c:	f7ff f864 	bl	8013d68 <tcp_close_shutdown_fin>
    }
    pcb = next;
 8014ca0:	683b      	ldr	r3, [r7, #0]
 8014ca2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 8014ca4:	687b      	ldr	r3, [r7, #4]
 8014ca6:	2b00      	cmp	r3, #0
 8014ca8:	d1e7      	bne.n	8014c7a <tcp_handle_closepend+0xe>
  }
}
 8014caa:	bf00      	nop
 8014cac:	bf00      	nop
 8014cae:	3708      	adds	r7, #8
 8014cb0:	46bd      	mov	sp, r7
 8014cb2:	bd80      	pop	{r7, pc}
 8014cb4:	20024058 	.word	0x20024058

08014cb8 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 8014cb8:	b580      	push	{r7, lr}
 8014cba:	b084      	sub	sp, #16
 8014cbc:	af00      	add	r7, sp, #0
 8014cbe:	4603      	mov	r3, r0
 8014cc0:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014cc2:	2001      	movs	r0, #1
 8014cc4:	f7fd fce6 	bl	8012694 <memp_malloc>
 8014cc8:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 8014cca:	68fb      	ldr	r3, [r7, #12]
 8014ccc:	2b00      	cmp	r3, #0
 8014cce:	d126      	bne.n	8014d1e <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 8014cd0:	f7ff ffcc 	bl	8014c6c <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 8014cd4:	f7ff ff9a 	bl	8014c0c <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014cd8:	2001      	movs	r0, #1
 8014cda:	f7fd fcdb 	bl	8012694 <memp_malloc>
 8014cde:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 8014ce0:	68fb      	ldr	r3, [r7, #12]
 8014ce2:	2b00      	cmp	r3, #0
 8014ce4:	d11b      	bne.n	8014d1e <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 8014ce6:	2009      	movs	r0, #9
 8014ce8:	f7ff ff46 	bl	8014b78 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014cec:	2001      	movs	r0, #1
 8014cee:	f7fd fcd1 	bl	8012694 <memp_malloc>
 8014cf2:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 8014cf4:	68fb      	ldr	r3, [r7, #12]
 8014cf6:	2b00      	cmp	r3, #0
 8014cf8:	d111      	bne.n	8014d1e <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 8014cfa:	2008      	movs	r0, #8
 8014cfc:	f7ff ff3c 	bl	8014b78 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014d00:	2001      	movs	r0, #1
 8014d02:	f7fd fcc7 	bl	8012694 <memp_malloc>
 8014d06:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 8014d08:	68fb      	ldr	r3, [r7, #12]
 8014d0a:	2b00      	cmp	r3, #0
 8014d0c:	d107      	bne.n	8014d1e <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 8014d0e:	79fb      	ldrb	r3, [r7, #7]
 8014d10:	4618      	mov	r0, r3
 8014d12:	f7ff fee3 	bl	8014adc <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 8014d16:	2001      	movs	r0, #1
 8014d18:	f7fd fcbc 	bl	8012694 <memp_malloc>
 8014d1c:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 8014d1e:	68fb      	ldr	r3, [r7, #12]
 8014d20:	2b00      	cmp	r3, #0
 8014d22:	d03f      	beq.n	8014da4 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 8014d24:	229c      	movs	r2, #156	; 0x9c
 8014d26:	2100      	movs	r1, #0
 8014d28:	68f8      	ldr	r0, [r7, #12]
 8014d2a:	f008 fc24 	bl	801d576 <memset>
    pcb->prio = prio;
 8014d2e:	68fb      	ldr	r3, [r7, #12]
 8014d30:	79fa      	ldrb	r2, [r7, #7]
 8014d32:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 8014d34:	68fb      	ldr	r3, [r7, #12]
 8014d36:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8014d3a:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 8014d3e:	68fb      	ldr	r3, [r7, #12]
 8014d40:	f44f 6206 	mov.w	r2, #2144	; 0x860
 8014d44:	855a      	strh	r2, [r3, #42]	; 0x2a
 8014d46:	68fb      	ldr	r3, [r7, #12]
 8014d48:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8014d4a:	68fb      	ldr	r3, [r7, #12]
 8014d4c:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 8014d4e:	68fb      	ldr	r3, [r7, #12]
 8014d50:	22ff      	movs	r2, #255	; 0xff
 8014d52:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 8014d54:	68fb      	ldr	r3, [r7, #12]
 8014d56:	f44f 7206 	mov.w	r2, #536	; 0x218
 8014d5a:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 8014d5c:	68fb      	ldr	r3, [r7, #12]
 8014d5e:	2206      	movs	r2, #6
 8014d60:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 8014d64:	68fb      	ldr	r3, [r7, #12]
 8014d66:	2206      	movs	r2, #6
 8014d68:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 8014d6a:	68fb      	ldr	r3, [r7, #12]
 8014d6c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014d70:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 8014d72:	68fb      	ldr	r3, [r7, #12]
 8014d74:	2201      	movs	r2, #1
 8014d76:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 8014d7a:	4b0d      	ldr	r3, [pc, #52]	; (8014db0 <tcp_alloc+0xf8>)
 8014d7c:	681a      	ldr	r2, [r3, #0]
 8014d7e:	68fb      	ldr	r3, [r7, #12]
 8014d80:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 8014d82:	4b0c      	ldr	r3, [pc, #48]	; (8014db4 <tcp_alloc+0xfc>)
 8014d84:	781a      	ldrb	r2, [r3, #0]
 8014d86:	68fb      	ldr	r3, [r7, #12]
 8014d88:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 8014d8a:	68fb      	ldr	r3, [r7, #12]
 8014d8c:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8014d90:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 8014d94:	68fb      	ldr	r3, [r7, #12]
 8014d96:	4a08      	ldr	r2, [pc, #32]	; (8014db8 <tcp_alloc+0x100>)
 8014d98:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 8014d9c:	68fb      	ldr	r3, [r7, #12]
 8014d9e:	4a07      	ldr	r2, [pc, #28]	; (8014dbc <tcp_alloc+0x104>)
 8014da0:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 8014da4:	68fb      	ldr	r3, [r7, #12]
}
 8014da6:	4618      	mov	r0, r3
 8014da8:	3710      	adds	r7, #16
 8014daa:	46bd      	mov	sp, r7
 8014dac:	bd80      	pop	{r7, pc}
 8014dae:	bf00      	nop
 8014db0:	2002404c 	.word	0x2002404c
 8014db4:	20024062 	.word	0x20024062
 8014db8:	08014a71 	.word	0x08014a71
 8014dbc:	006ddd00 	.word	0x006ddd00

08014dc0 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 8014dc0:	b580      	push	{r7, lr}
 8014dc2:	b082      	sub	sp, #8
 8014dc4:	af00      	add	r7, sp, #0
 8014dc6:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 8014dc8:	687b      	ldr	r3, [r7, #4]
 8014dca:	2b00      	cmp	r3, #0
 8014dcc:	d107      	bne.n	8014dde <tcp_pcb_purge+0x1e>
 8014dce:	4b21      	ldr	r3, [pc, #132]	; (8014e54 <tcp_pcb_purge+0x94>)
 8014dd0:	f640 0251 	movw	r2, #2129	; 0x851
 8014dd4:	4920      	ldr	r1, [pc, #128]	; (8014e58 <tcp_pcb_purge+0x98>)
 8014dd6:	4821      	ldr	r0, [pc, #132]	; (8014e5c <tcp_pcb_purge+0x9c>)
 8014dd8:	f008 fb68 	bl	801d4ac <iprintf>
 8014ddc:	e037      	b.n	8014e4e <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 8014dde:	687b      	ldr	r3, [r7, #4]
 8014de0:	7d1b      	ldrb	r3, [r3, #20]
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d033      	beq.n	8014e4e <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 8014de6:	687b      	ldr	r3, [r7, #4]
 8014de8:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 8014dea:	2b0a      	cmp	r3, #10
 8014dec:	d02f      	beq.n	8014e4e <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 8014dee:	687b      	ldr	r3, [r7, #4]
 8014df0:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 8014df2:	2b01      	cmp	r3, #1
 8014df4:	d02b      	beq.n	8014e4e <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 8014df6:	687b      	ldr	r3, [r7, #4]
 8014df8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014dfa:	2b00      	cmp	r3, #0
 8014dfc:	d007      	beq.n	8014e0e <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 8014dfe:	687b      	ldr	r3, [r7, #4]
 8014e00:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8014e02:	4618      	mov	r0, r3
 8014e04:	f7fe fb60 	bl	80134c8 <pbuf_free>
      pcb->refused_data = NULL;
 8014e08:	687b      	ldr	r3, [r7, #4]
 8014e0a:	2200      	movs	r2, #0
 8014e0c:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 8014e0e:	687b      	ldr	r3, [r7, #4]
 8014e10:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014e12:	2b00      	cmp	r3, #0
 8014e14:	d002      	beq.n	8014e1c <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 8014e16:	6878      	ldr	r0, [r7, #4]
 8014e18:	f000 f986 	bl	8015128 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 8014e1c:	687b      	ldr	r3, [r7, #4]
 8014e1e:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8014e22:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 8014e24:	687b      	ldr	r3, [r7, #4]
 8014e26:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014e28:	4618      	mov	r0, r3
 8014e2a:	f7ff fdc7 	bl	80149bc <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 8014e2e:	687b      	ldr	r3, [r7, #4]
 8014e30:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014e32:	4618      	mov	r0, r3
 8014e34:	f7ff fdc2 	bl	80149bc <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 8014e38:	687b      	ldr	r3, [r7, #4]
 8014e3a:	2200      	movs	r2, #0
 8014e3c:	66da      	str	r2, [r3, #108]	; 0x6c
 8014e3e:	687b      	ldr	r3, [r7, #4]
 8014e40:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8014e42:	687b      	ldr	r3, [r7, #4]
 8014e44:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 8014e46:	687b      	ldr	r3, [r7, #4]
 8014e48:	2200      	movs	r2, #0
 8014e4a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 8014e4e:	3708      	adds	r7, #8
 8014e50:	46bd      	mov	sp, r7
 8014e52:	bd80      	pop	{r7, pc}
 8014e54:	0801f000 	.word	0x0801f000
 8014e58:	0801f64c 	.word	0x0801f64c
 8014e5c:	0801f044 	.word	0x0801f044

08014e60 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 8014e60:	b580      	push	{r7, lr}
 8014e62:	b084      	sub	sp, #16
 8014e64:	af00      	add	r7, sp, #0
 8014e66:	6078      	str	r0, [r7, #4]
 8014e68:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 8014e6a:	683b      	ldr	r3, [r7, #0]
 8014e6c:	2b00      	cmp	r3, #0
 8014e6e:	d106      	bne.n	8014e7e <tcp_pcb_remove+0x1e>
 8014e70:	4b3e      	ldr	r3, [pc, #248]	; (8014f6c <tcp_pcb_remove+0x10c>)
 8014e72:	f640 0283 	movw	r2, #2179	; 0x883
 8014e76:	493e      	ldr	r1, [pc, #248]	; (8014f70 <tcp_pcb_remove+0x110>)
 8014e78:	483e      	ldr	r0, [pc, #248]	; (8014f74 <tcp_pcb_remove+0x114>)
 8014e7a:	f008 fb17 	bl	801d4ac <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 8014e7e:	687b      	ldr	r3, [r7, #4]
 8014e80:	2b00      	cmp	r3, #0
 8014e82:	d106      	bne.n	8014e92 <tcp_pcb_remove+0x32>
 8014e84:	4b39      	ldr	r3, [pc, #228]	; (8014f6c <tcp_pcb_remove+0x10c>)
 8014e86:	f640 0284 	movw	r2, #2180	; 0x884
 8014e8a:	493b      	ldr	r1, [pc, #236]	; (8014f78 <tcp_pcb_remove+0x118>)
 8014e8c:	4839      	ldr	r0, [pc, #228]	; (8014f74 <tcp_pcb_remove+0x114>)
 8014e8e:	f008 fb0d 	bl	801d4ac <iprintf>

  TCP_RMV(pcblist, pcb);
 8014e92:	687b      	ldr	r3, [r7, #4]
 8014e94:	681b      	ldr	r3, [r3, #0]
 8014e96:	683a      	ldr	r2, [r7, #0]
 8014e98:	429a      	cmp	r2, r3
 8014e9a:	d105      	bne.n	8014ea8 <tcp_pcb_remove+0x48>
 8014e9c:	687b      	ldr	r3, [r7, #4]
 8014e9e:	681b      	ldr	r3, [r3, #0]
 8014ea0:	68da      	ldr	r2, [r3, #12]
 8014ea2:	687b      	ldr	r3, [r7, #4]
 8014ea4:	601a      	str	r2, [r3, #0]
 8014ea6:	e013      	b.n	8014ed0 <tcp_pcb_remove+0x70>
 8014ea8:	687b      	ldr	r3, [r7, #4]
 8014eaa:	681b      	ldr	r3, [r3, #0]
 8014eac:	60fb      	str	r3, [r7, #12]
 8014eae:	e00c      	b.n	8014eca <tcp_pcb_remove+0x6a>
 8014eb0:	68fb      	ldr	r3, [r7, #12]
 8014eb2:	68db      	ldr	r3, [r3, #12]
 8014eb4:	683a      	ldr	r2, [r7, #0]
 8014eb6:	429a      	cmp	r2, r3
 8014eb8:	d104      	bne.n	8014ec4 <tcp_pcb_remove+0x64>
 8014eba:	683b      	ldr	r3, [r7, #0]
 8014ebc:	68da      	ldr	r2, [r3, #12]
 8014ebe:	68fb      	ldr	r3, [r7, #12]
 8014ec0:	60da      	str	r2, [r3, #12]
 8014ec2:	e005      	b.n	8014ed0 <tcp_pcb_remove+0x70>
 8014ec4:	68fb      	ldr	r3, [r7, #12]
 8014ec6:	68db      	ldr	r3, [r3, #12]
 8014ec8:	60fb      	str	r3, [r7, #12]
 8014eca:	68fb      	ldr	r3, [r7, #12]
 8014ecc:	2b00      	cmp	r3, #0
 8014ece:	d1ef      	bne.n	8014eb0 <tcp_pcb_remove+0x50>
 8014ed0:	683b      	ldr	r3, [r7, #0]
 8014ed2:	2200      	movs	r2, #0
 8014ed4:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 8014ed6:	6838      	ldr	r0, [r7, #0]
 8014ed8:	f7ff ff72 	bl	8014dc0 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 8014edc:	683b      	ldr	r3, [r7, #0]
 8014ede:	7d1b      	ldrb	r3, [r3, #20]
 8014ee0:	2b0a      	cmp	r3, #10
 8014ee2:	d013      	beq.n	8014f0c <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 8014ee4:	683b      	ldr	r3, [r7, #0]
 8014ee6:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 8014ee8:	2b01      	cmp	r3, #1
 8014eea:	d00f      	beq.n	8014f0c <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 8014eec:	683b      	ldr	r3, [r7, #0]
 8014eee:	8b5b      	ldrh	r3, [r3, #26]
 8014ef0:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 8014ef4:	2b00      	cmp	r3, #0
 8014ef6:	d009      	beq.n	8014f0c <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 8014ef8:	683b      	ldr	r3, [r7, #0]
 8014efa:	8b5b      	ldrh	r3, [r3, #26]
 8014efc:	f043 0302 	orr.w	r3, r3, #2
 8014f00:	b29a      	uxth	r2, r3
 8014f02:	683b      	ldr	r3, [r7, #0]
 8014f04:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8014f06:	6838      	ldr	r0, [r7, #0]
 8014f08:	f002 ff6e 	bl	8017de8 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 8014f0c:	683b      	ldr	r3, [r7, #0]
 8014f0e:	7d1b      	ldrb	r3, [r3, #20]
 8014f10:	2b01      	cmp	r3, #1
 8014f12:	d020      	beq.n	8014f56 <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 8014f14:	683b      	ldr	r3, [r7, #0]
 8014f16:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8014f18:	2b00      	cmp	r3, #0
 8014f1a:	d006      	beq.n	8014f2a <tcp_pcb_remove+0xca>
 8014f1c:	4b13      	ldr	r3, [pc, #76]	; (8014f6c <tcp_pcb_remove+0x10c>)
 8014f1e:	f640 0293 	movw	r2, #2195	; 0x893
 8014f22:	4916      	ldr	r1, [pc, #88]	; (8014f7c <tcp_pcb_remove+0x11c>)
 8014f24:	4813      	ldr	r0, [pc, #76]	; (8014f74 <tcp_pcb_remove+0x114>)
 8014f26:	f008 fac1 	bl	801d4ac <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 8014f2a:	683b      	ldr	r3, [r7, #0]
 8014f2c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8014f2e:	2b00      	cmp	r3, #0
 8014f30:	d006      	beq.n	8014f40 <tcp_pcb_remove+0xe0>
 8014f32:	4b0e      	ldr	r3, [pc, #56]	; (8014f6c <tcp_pcb_remove+0x10c>)
 8014f34:	f640 0294 	movw	r2, #2196	; 0x894
 8014f38:	4911      	ldr	r1, [pc, #68]	; (8014f80 <tcp_pcb_remove+0x120>)
 8014f3a:	480e      	ldr	r0, [pc, #56]	; (8014f74 <tcp_pcb_remove+0x114>)
 8014f3c:	f008 fab6 	bl	801d4ac <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 8014f40:	683b      	ldr	r3, [r7, #0]
 8014f42:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8014f44:	2b00      	cmp	r3, #0
 8014f46:	d006      	beq.n	8014f56 <tcp_pcb_remove+0xf6>
 8014f48:	4b08      	ldr	r3, [pc, #32]	; (8014f6c <tcp_pcb_remove+0x10c>)
 8014f4a:	f640 0296 	movw	r2, #2198	; 0x896
 8014f4e:	490d      	ldr	r1, [pc, #52]	; (8014f84 <tcp_pcb_remove+0x124>)
 8014f50:	4808      	ldr	r0, [pc, #32]	; (8014f74 <tcp_pcb_remove+0x114>)
 8014f52:	f008 faab 	bl	801d4ac <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 8014f56:	683b      	ldr	r3, [r7, #0]
 8014f58:	2200      	movs	r2, #0
 8014f5a:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 8014f5c:	683b      	ldr	r3, [r7, #0]
 8014f5e:	2200      	movs	r2, #0
 8014f60:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 8014f62:	bf00      	nop
 8014f64:	3710      	adds	r7, #16
 8014f66:	46bd      	mov	sp, r7
 8014f68:	bd80      	pop	{r7, pc}
 8014f6a:	bf00      	nop
 8014f6c:	0801f000 	.word	0x0801f000
 8014f70:	0801f668 	.word	0x0801f668
 8014f74:	0801f044 	.word	0x0801f044
 8014f78:	0801f684 	.word	0x0801f684
 8014f7c:	0801f6a4 	.word	0x0801f6a4
 8014f80:	0801f6bc 	.word	0x0801f6bc
 8014f84:	0801f6d8 	.word	0x0801f6d8

08014f88 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 8014f88:	b580      	push	{r7, lr}
 8014f8a:	b082      	sub	sp, #8
 8014f8c:	af00      	add	r7, sp, #0
 8014f8e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 8014f90:	687b      	ldr	r3, [r7, #4]
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d106      	bne.n	8014fa4 <tcp_next_iss+0x1c>
 8014f96:	4b0a      	ldr	r3, [pc, #40]	; (8014fc0 <tcp_next_iss+0x38>)
 8014f98:	f640 02af 	movw	r2, #2223	; 0x8af
 8014f9c:	4909      	ldr	r1, [pc, #36]	; (8014fc4 <tcp_next_iss+0x3c>)
 8014f9e:	480a      	ldr	r0, [pc, #40]	; (8014fc8 <tcp_next_iss+0x40>)
 8014fa0:	f008 fa84 	bl	801d4ac <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 8014fa4:	4b09      	ldr	r3, [pc, #36]	; (8014fcc <tcp_next_iss+0x44>)
 8014fa6:	681a      	ldr	r2, [r3, #0]
 8014fa8:	4b09      	ldr	r3, [pc, #36]	; (8014fd0 <tcp_next_iss+0x48>)
 8014faa:	681b      	ldr	r3, [r3, #0]
 8014fac:	4413      	add	r3, r2
 8014fae:	4a07      	ldr	r2, [pc, #28]	; (8014fcc <tcp_next_iss+0x44>)
 8014fb0:	6013      	str	r3, [r2, #0]
  return iss;
 8014fb2:	4b06      	ldr	r3, [pc, #24]	; (8014fcc <tcp_next_iss+0x44>)
 8014fb4:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 8014fb6:	4618      	mov	r0, r3
 8014fb8:	3708      	adds	r7, #8
 8014fba:	46bd      	mov	sp, r7
 8014fbc:	bd80      	pop	{r7, pc}
 8014fbe:	bf00      	nop
 8014fc0:	0801f000 	.word	0x0801f000
 8014fc4:	0801f6f0 	.word	0x0801f6f0
 8014fc8:	0801f044 	.word	0x0801f044
 8014fcc:	20000028 	.word	0x20000028
 8014fd0:	2002404c 	.word	0x2002404c

08014fd4 <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 8014fd4:	b580      	push	{r7, lr}
 8014fd6:	b086      	sub	sp, #24
 8014fd8:	af00      	add	r7, sp, #0
 8014fda:	4603      	mov	r3, r0
 8014fdc:	60b9      	str	r1, [r7, #8]
 8014fde:	607a      	str	r2, [r7, #4]
 8014fe0:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 8014fe2:	687b      	ldr	r3, [r7, #4]
 8014fe4:	2b00      	cmp	r3, #0
 8014fe6:	d106      	bne.n	8014ff6 <tcp_eff_send_mss_netif+0x22>
 8014fe8:	4b14      	ldr	r3, [pc, #80]	; (801503c <tcp_eff_send_mss_netif+0x68>)
 8014fea:	f640 02c5 	movw	r2, #2245	; 0x8c5
 8014fee:	4914      	ldr	r1, [pc, #80]	; (8015040 <tcp_eff_send_mss_netif+0x6c>)
 8014ff0:	4814      	ldr	r0, [pc, #80]	; (8015044 <tcp_eff_send_mss_netif+0x70>)
 8014ff2:	f008 fa5b 	bl	801d4ac <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 8014ff6:	68bb      	ldr	r3, [r7, #8]
 8014ff8:	2b00      	cmp	r3, #0
 8014ffa:	d101      	bne.n	8015000 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 8014ffc:	89fb      	ldrh	r3, [r7, #14]
 8014ffe:	e019      	b.n	8015034 <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 8015000:	68bb      	ldr	r3, [r7, #8]
 8015002:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8015004:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 8015006:	8afb      	ldrh	r3, [r7, #22]
 8015008:	2b00      	cmp	r3, #0
 801500a:	d012      	beq.n	8015032 <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 801500c:	2328      	movs	r3, #40	; 0x28
 801500e:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 8015010:	8afa      	ldrh	r2, [r7, #22]
 8015012:	8abb      	ldrh	r3, [r7, #20]
 8015014:	429a      	cmp	r2, r3
 8015016:	d904      	bls.n	8015022 <tcp_eff_send_mss_netif+0x4e>
 8015018:	8afa      	ldrh	r2, [r7, #22]
 801501a:	8abb      	ldrh	r3, [r7, #20]
 801501c:	1ad3      	subs	r3, r2, r3
 801501e:	b29b      	uxth	r3, r3
 8015020:	e000      	b.n	8015024 <tcp_eff_send_mss_netif+0x50>
 8015022:	2300      	movs	r3, #0
 8015024:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 8015026:	8a7a      	ldrh	r2, [r7, #18]
 8015028:	89fb      	ldrh	r3, [r7, #14]
 801502a:	4293      	cmp	r3, r2
 801502c:	bf28      	it	cs
 801502e:	4613      	movcs	r3, r2
 8015030:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 8015032:	89fb      	ldrh	r3, [r7, #14]
}
 8015034:	4618      	mov	r0, r3
 8015036:	3718      	adds	r7, #24
 8015038:	46bd      	mov	sp, r7
 801503a:	bd80      	pop	{r7, pc}
 801503c:	0801f000 	.word	0x0801f000
 8015040:	0801f70c 	.word	0x0801f70c
 8015044:	0801f044 	.word	0x0801f044

08015048 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 8015048:	b580      	push	{r7, lr}
 801504a:	b084      	sub	sp, #16
 801504c:	af00      	add	r7, sp, #0
 801504e:	6078      	str	r0, [r7, #4]
 8015050:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 8015052:	683b      	ldr	r3, [r7, #0]
 8015054:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 8015056:	687b      	ldr	r3, [r7, #4]
 8015058:	2b00      	cmp	r3, #0
 801505a:	d119      	bne.n	8015090 <tcp_netif_ip_addr_changed_pcblist+0x48>
 801505c:	4b10      	ldr	r3, [pc, #64]	; (80150a0 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 801505e:	f44f 6210 	mov.w	r2, #2304	; 0x900
 8015062:	4910      	ldr	r1, [pc, #64]	; (80150a4 <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 8015064:	4810      	ldr	r0, [pc, #64]	; (80150a8 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 8015066:	f008 fa21 	bl	801d4ac <iprintf>

  while (pcb != NULL) {
 801506a:	e011      	b.n	8015090 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 801506c:	68fb      	ldr	r3, [r7, #12]
 801506e:	681a      	ldr	r2, [r3, #0]
 8015070:	687b      	ldr	r3, [r7, #4]
 8015072:	681b      	ldr	r3, [r3, #0]
 8015074:	429a      	cmp	r2, r3
 8015076:	d108      	bne.n	801508a <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 8015078:	68fb      	ldr	r3, [r7, #12]
 801507a:	68db      	ldr	r3, [r3, #12]
 801507c:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 801507e:	68f8      	ldr	r0, [r7, #12]
 8015080:	f7fe ffc6 	bl	8014010 <tcp_abort>
      pcb = next;
 8015084:	68bb      	ldr	r3, [r7, #8]
 8015086:	60fb      	str	r3, [r7, #12]
 8015088:	e002      	b.n	8015090 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 801508a:	68fb      	ldr	r3, [r7, #12]
 801508c:	68db      	ldr	r3, [r3, #12]
 801508e:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 8015090:	68fb      	ldr	r3, [r7, #12]
 8015092:	2b00      	cmp	r3, #0
 8015094:	d1ea      	bne.n	801506c <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 8015096:	bf00      	nop
 8015098:	bf00      	nop
 801509a:	3710      	adds	r7, #16
 801509c:	46bd      	mov	sp, r7
 801509e:	bd80      	pop	{r7, pc}
 80150a0:	0801f000 	.word	0x0801f000
 80150a4:	0801f734 	.word	0x0801f734
 80150a8:	0801f044 	.word	0x0801f044

080150ac <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80150ac:	b580      	push	{r7, lr}
 80150ae:	b084      	sub	sp, #16
 80150b0:	af00      	add	r7, sp, #0
 80150b2:	6078      	str	r0, [r7, #4]
 80150b4:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 80150b6:	687b      	ldr	r3, [r7, #4]
 80150b8:	2b00      	cmp	r3, #0
 80150ba:	d02a      	beq.n	8015112 <tcp_netif_ip_addr_changed+0x66>
 80150bc:	687b      	ldr	r3, [r7, #4]
 80150be:	681b      	ldr	r3, [r3, #0]
 80150c0:	2b00      	cmp	r3, #0
 80150c2:	d026      	beq.n	8015112 <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 80150c4:	4b15      	ldr	r3, [pc, #84]	; (801511c <tcp_netif_ip_addr_changed+0x70>)
 80150c6:	681b      	ldr	r3, [r3, #0]
 80150c8:	4619      	mov	r1, r3
 80150ca:	6878      	ldr	r0, [r7, #4]
 80150cc:	f7ff ffbc 	bl	8015048 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 80150d0:	4b13      	ldr	r3, [pc, #76]	; (8015120 <tcp_netif_ip_addr_changed+0x74>)
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	4619      	mov	r1, r3
 80150d6:	6878      	ldr	r0, [r7, #4]
 80150d8:	f7ff ffb6 	bl	8015048 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 80150dc:	683b      	ldr	r3, [r7, #0]
 80150de:	2b00      	cmp	r3, #0
 80150e0:	d017      	beq.n	8015112 <tcp_netif_ip_addr_changed+0x66>
 80150e2:	683b      	ldr	r3, [r7, #0]
 80150e4:	681b      	ldr	r3, [r3, #0]
 80150e6:	2b00      	cmp	r3, #0
 80150e8:	d013      	beq.n	8015112 <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80150ea:	4b0e      	ldr	r3, [pc, #56]	; (8015124 <tcp_netif_ip_addr_changed+0x78>)
 80150ec:	681b      	ldr	r3, [r3, #0]
 80150ee:	60fb      	str	r3, [r7, #12]
 80150f0:	e00c      	b.n	801510c <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 80150f2:	68fb      	ldr	r3, [r7, #12]
 80150f4:	681a      	ldr	r2, [r3, #0]
 80150f6:	687b      	ldr	r3, [r7, #4]
 80150f8:	681b      	ldr	r3, [r3, #0]
 80150fa:	429a      	cmp	r2, r3
 80150fc:	d103      	bne.n	8015106 <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 80150fe:	683b      	ldr	r3, [r7, #0]
 8015100:	681a      	ldr	r2, [r3, #0]
 8015102:	68fb      	ldr	r3, [r7, #12]
 8015104:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8015106:	68fb      	ldr	r3, [r7, #12]
 8015108:	68db      	ldr	r3, [r3, #12]
 801510a:	60fb      	str	r3, [r7, #12]
 801510c:	68fb      	ldr	r3, [r7, #12]
 801510e:	2b00      	cmp	r3, #0
 8015110:	d1ef      	bne.n	80150f2 <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 8015112:	bf00      	nop
 8015114:	3710      	adds	r7, #16
 8015116:	46bd      	mov	sp, r7
 8015118:	bd80      	pop	{r7, pc}
 801511a:	bf00      	nop
 801511c:	20024058 	.word	0x20024058
 8015120:	20024050 	.word	0x20024050
 8015124:	20024054 	.word	0x20024054

08015128 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 8015128:	b580      	push	{r7, lr}
 801512a:	b082      	sub	sp, #8
 801512c:	af00      	add	r7, sp, #0
 801512e:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 8015130:	687b      	ldr	r3, [r7, #4]
 8015132:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8015134:	2b00      	cmp	r3, #0
 8015136:	d007      	beq.n	8015148 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 8015138:	687b      	ldr	r3, [r7, #4]
 801513a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801513c:	4618      	mov	r0, r3
 801513e:	f7ff fc3d 	bl	80149bc <tcp_segs_free>
    pcb->ooseq = NULL;
 8015142:	687b      	ldr	r3, [r7, #4]
 8015144:	2200      	movs	r2, #0
 8015146:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 8015148:	bf00      	nop
 801514a:	3708      	adds	r7, #8
 801514c:	46bd      	mov	sp, r7
 801514e:	bd80      	pop	{r7, pc}

08015150 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 8015150:	b590      	push	{r4, r7, lr}
 8015152:	b08d      	sub	sp, #52	; 0x34
 8015154:	af04      	add	r7, sp, #16
 8015156:	6078      	str	r0, [r7, #4]
 8015158:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 801515a:	687b      	ldr	r3, [r7, #4]
 801515c:	2b00      	cmp	r3, #0
 801515e:	d105      	bne.n	801516c <tcp_input+0x1c>
 8015160:	4b9b      	ldr	r3, [pc, #620]	; (80153d0 <tcp_input+0x280>)
 8015162:	2283      	movs	r2, #131	; 0x83
 8015164:	499b      	ldr	r1, [pc, #620]	; (80153d4 <tcp_input+0x284>)
 8015166:	489c      	ldr	r0, [pc, #624]	; (80153d8 <tcp_input+0x288>)
 8015168:	f008 f9a0 	bl	801d4ac <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 801516c:	687b      	ldr	r3, [r7, #4]
 801516e:	685b      	ldr	r3, [r3, #4]
 8015170:	4a9a      	ldr	r2, [pc, #616]	; (80153dc <tcp_input+0x28c>)
 8015172:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 8015174:	687b      	ldr	r3, [r7, #4]
 8015176:	895b      	ldrh	r3, [r3, #10]
 8015178:	2b13      	cmp	r3, #19
 801517a:	f240 83d1 	bls.w	8015920 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801517e:	4b98      	ldr	r3, [pc, #608]	; (80153e0 <tcp_input+0x290>)
 8015180:	695b      	ldr	r3, [r3, #20]
 8015182:	4a97      	ldr	r2, [pc, #604]	; (80153e0 <tcp_input+0x290>)
 8015184:	6812      	ldr	r2, [r2, #0]
 8015186:	4611      	mov	r1, r2
 8015188:	4618      	mov	r0, r3
 801518a:	f005 ff37 	bl	801affc <ip4_addr_isbroadcast_u32>
 801518e:	4603      	mov	r3, r0
 8015190:	2b00      	cmp	r3, #0
 8015192:	f040 83c7 	bne.w	8015924 <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 8015196:	4b92      	ldr	r3, [pc, #584]	; (80153e0 <tcp_input+0x290>)
 8015198:	695b      	ldr	r3, [r3, #20]
 801519a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 801519e:	2be0      	cmp	r3, #224	; 0xe0
 80151a0:	f000 83c0 	beq.w	8015924 <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 80151a4:	4b8d      	ldr	r3, [pc, #564]	; (80153dc <tcp_input+0x28c>)
 80151a6:	681b      	ldr	r3, [r3, #0]
 80151a8:	899b      	ldrh	r3, [r3, #12]
 80151aa:	b29b      	uxth	r3, r3
 80151ac:	4618      	mov	r0, r3
 80151ae:	f7fc fd89 	bl	8011cc4 <lwip_htons>
 80151b2:	4603      	mov	r3, r0
 80151b4:	0b1b      	lsrs	r3, r3, #12
 80151b6:	b29b      	uxth	r3, r3
 80151b8:	b2db      	uxtb	r3, r3
 80151ba:	009b      	lsls	r3, r3, #2
 80151bc:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 80151be:	7cbb      	ldrb	r3, [r7, #18]
 80151c0:	2b13      	cmp	r3, #19
 80151c2:	f240 83b1 	bls.w	8015928 <tcp_input+0x7d8>
 80151c6:	7cbb      	ldrb	r3, [r7, #18]
 80151c8:	b29a      	uxth	r2, r3
 80151ca:	687b      	ldr	r3, [r7, #4]
 80151cc:	891b      	ldrh	r3, [r3, #8]
 80151ce:	429a      	cmp	r2, r3
 80151d0:	f200 83aa 	bhi.w	8015928 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 80151d4:	7cbb      	ldrb	r3, [r7, #18]
 80151d6:	b29b      	uxth	r3, r3
 80151d8:	3b14      	subs	r3, #20
 80151da:	b29a      	uxth	r2, r3
 80151dc:	4b81      	ldr	r3, [pc, #516]	; (80153e4 <tcp_input+0x294>)
 80151de:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 80151e0:	4b81      	ldr	r3, [pc, #516]	; (80153e8 <tcp_input+0x298>)
 80151e2:	2200      	movs	r2, #0
 80151e4:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	895a      	ldrh	r2, [r3, #10]
 80151ea:	7cbb      	ldrb	r3, [r7, #18]
 80151ec:	b29b      	uxth	r3, r3
 80151ee:	429a      	cmp	r2, r3
 80151f0:	d309      	bcc.n	8015206 <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 80151f2:	4b7c      	ldr	r3, [pc, #496]	; (80153e4 <tcp_input+0x294>)
 80151f4:	881a      	ldrh	r2, [r3, #0]
 80151f6:	4b7d      	ldr	r3, [pc, #500]	; (80153ec <tcp_input+0x29c>)
 80151f8:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 80151fa:	7cbb      	ldrb	r3, [r7, #18]
 80151fc:	4619      	mov	r1, r3
 80151fe:	6878      	ldr	r0, [r7, #4]
 8015200:	f7fe f8dc 	bl	80133bc <pbuf_remove_header>
 8015204:	e04e      	b.n	80152a4 <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 8015206:	687b      	ldr	r3, [r7, #4]
 8015208:	681b      	ldr	r3, [r3, #0]
 801520a:	2b00      	cmp	r3, #0
 801520c:	d105      	bne.n	801521a <tcp_input+0xca>
 801520e:	4b70      	ldr	r3, [pc, #448]	; (80153d0 <tcp_input+0x280>)
 8015210:	22c2      	movs	r2, #194	; 0xc2
 8015212:	4977      	ldr	r1, [pc, #476]	; (80153f0 <tcp_input+0x2a0>)
 8015214:	4870      	ldr	r0, [pc, #448]	; (80153d8 <tcp_input+0x288>)
 8015216:	f008 f949 	bl	801d4ac <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 801521a:	2114      	movs	r1, #20
 801521c:	6878      	ldr	r0, [r7, #4]
 801521e:	f7fe f8cd 	bl	80133bc <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 8015222:	687b      	ldr	r3, [r7, #4]
 8015224:	895a      	ldrh	r2, [r3, #10]
 8015226:	4b71      	ldr	r3, [pc, #452]	; (80153ec <tcp_input+0x29c>)
 8015228:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 801522a:	4b6e      	ldr	r3, [pc, #440]	; (80153e4 <tcp_input+0x294>)
 801522c:	881a      	ldrh	r2, [r3, #0]
 801522e:	4b6f      	ldr	r3, [pc, #444]	; (80153ec <tcp_input+0x29c>)
 8015230:	881b      	ldrh	r3, [r3, #0]
 8015232:	1ad3      	subs	r3, r2, r3
 8015234:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 8015236:	4b6d      	ldr	r3, [pc, #436]	; (80153ec <tcp_input+0x29c>)
 8015238:	881b      	ldrh	r3, [r3, #0]
 801523a:	4619      	mov	r1, r3
 801523c:	6878      	ldr	r0, [r7, #4]
 801523e:	f7fe f8bd 	bl	80133bc <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	681b      	ldr	r3, [r3, #0]
 8015246:	895b      	ldrh	r3, [r3, #10]
 8015248:	8a3a      	ldrh	r2, [r7, #16]
 801524a:	429a      	cmp	r2, r3
 801524c:	f200 836e 	bhi.w	801592c <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	681b      	ldr	r3, [r3, #0]
 8015254:	685b      	ldr	r3, [r3, #4]
 8015256:	4a64      	ldr	r2, [pc, #400]	; (80153e8 <tcp_input+0x298>)
 8015258:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 801525a:	687b      	ldr	r3, [r7, #4]
 801525c:	681b      	ldr	r3, [r3, #0]
 801525e:	8a3a      	ldrh	r2, [r7, #16]
 8015260:	4611      	mov	r1, r2
 8015262:	4618      	mov	r0, r3
 8015264:	f7fe f8aa 	bl	80133bc <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 8015268:	687b      	ldr	r3, [r7, #4]
 801526a:	891a      	ldrh	r2, [r3, #8]
 801526c:	8a3b      	ldrh	r3, [r7, #16]
 801526e:	1ad3      	subs	r3, r2, r3
 8015270:	b29a      	uxth	r2, r3
 8015272:	687b      	ldr	r3, [r7, #4]
 8015274:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 8015276:	687b      	ldr	r3, [r7, #4]
 8015278:	895b      	ldrh	r3, [r3, #10]
 801527a:	2b00      	cmp	r3, #0
 801527c:	d005      	beq.n	801528a <tcp_input+0x13a>
 801527e:	4b54      	ldr	r3, [pc, #336]	; (80153d0 <tcp_input+0x280>)
 8015280:	22df      	movs	r2, #223	; 0xdf
 8015282:	495c      	ldr	r1, [pc, #368]	; (80153f4 <tcp_input+0x2a4>)
 8015284:	4854      	ldr	r0, [pc, #336]	; (80153d8 <tcp_input+0x288>)
 8015286:	f008 f911 	bl	801d4ac <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 801528a:	687b      	ldr	r3, [r7, #4]
 801528c:	891a      	ldrh	r2, [r3, #8]
 801528e:	687b      	ldr	r3, [r7, #4]
 8015290:	681b      	ldr	r3, [r3, #0]
 8015292:	891b      	ldrh	r3, [r3, #8]
 8015294:	429a      	cmp	r2, r3
 8015296:	d005      	beq.n	80152a4 <tcp_input+0x154>
 8015298:	4b4d      	ldr	r3, [pc, #308]	; (80153d0 <tcp_input+0x280>)
 801529a:	22e0      	movs	r2, #224	; 0xe0
 801529c:	4956      	ldr	r1, [pc, #344]	; (80153f8 <tcp_input+0x2a8>)
 801529e:	484e      	ldr	r0, [pc, #312]	; (80153d8 <tcp_input+0x288>)
 80152a0:	f008 f904 	bl	801d4ac <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 80152a4:	4b4d      	ldr	r3, [pc, #308]	; (80153dc <tcp_input+0x28c>)
 80152a6:	681b      	ldr	r3, [r3, #0]
 80152a8:	881b      	ldrh	r3, [r3, #0]
 80152aa:	b29b      	uxth	r3, r3
 80152ac:	4a4b      	ldr	r2, [pc, #300]	; (80153dc <tcp_input+0x28c>)
 80152ae:	6814      	ldr	r4, [r2, #0]
 80152b0:	4618      	mov	r0, r3
 80152b2:	f7fc fd07 	bl	8011cc4 <lwip_htons>
 80152b6:	4603      	mov	r3, r0
 80152b8:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 80152ba:	4b48      	ldr	r3, [pc, #288]	; (80153dc <tcp_input+0x28c>)
 80152bc:	681b      	ldr	r3, [r3, #0]
 80152be:	885b      	ldrh	r3, [r3, #2]
 80152c0:	b29b      	uxth	r3, r3
 80152c2:	4a46      	ldr	r2, [pc, #280]	; (80153dc <tcp_input+0x28c>)
 80152c4:	6814      	ldr	r4, [r2, #0]
 80152c6:	4618      	mov	r0, r3
 80152c8:	f7fc fcfc 	bl	8011cc4 <lwip_htons>
 80152cc:	4603      	mov	r3, r0
 80152ce:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 80152d0:	4b42      	ldr	r3, [pc, #264]	; (80153dc <tcp_input+0x28c>)
 80152d2:	681b      	ldr	r3, [r3, #0]
 80152d4:	685b      	ldr	r3, [r3, #4]
 80152d6:	4a41      	ldr	r2, [pc, #260]	; (80153dc <tcp_input+0x28c>)
 80152d8:	6814      	ldr	r4, [r2, #0]
 80152da:	4618      	mov	r0, r3
 80152dc:	f7fc fd07 	bl	8011cee <lwip_htonl>
 80152e0:	4603      	mov	r3, r0
 80152e2:	6063      	str	r3, [r4, #4]
 80152e4:	6863      	ldr	r3, [r4, #4]
 80152e6:	4a45      	ldr	r2, [pc, #276]	; (80153fc <tcp_input+0x2ac>)
 80152e8:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 80152ea:	4b3c      	ldr	r3, [pc, #240]	; (80153dc <tcp_input+0x28c>)
 80152ec:	681b      	ldr	r3, [r3, #0]
 80152ee:	689b      	ldr	r3, [r3, #8]
 80152f0:	4a3a      	ldr	r2, [pc, #232]	; (80153dc <tcp_input+0x28c>)
 80152f2:	6814      	ldr	r4, [r2, #0]
 80152f4:	4618      	mov	r0, r3
 80152f6:	f7fc fcfa 	bl	8011cee <lwip_htonl>
 80152fa:	4603      	mov	r3, r0
 80152fc:	60a3      	str	r3, [r4, #8]
 80152fe:	68a3      	ldr	r3, [r4, #8]
 8015300:	4a3f      	ldr	r2, [pc, #252]	; (8015400 <tcp_input+0x2b0>)
 8015302:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 8015304:	4b35      	ldr	r3, [pc, #212]	; (80153dc <tcp_input+0x28c>)
 8015306:	681b      	ldr	r3, [r3, #0]
 8015308:	89db      	ldrh	r3, [r3, #14]
 801530a:	b29b      	uxth	r3, r3
 801530c:	4a33      	ldr	r2, [pc, #204]	; (80153dc <tcp_input+0x28c>)
 801530e:	6814      	ldr	r4, [r2, #0]
 8015310:	4618      	mov	r0, r3
 8015312:	f7fc fcd7 	bl	8011cc4 <lwip_htons>
 8015316:	4603      	mov	r3, r0
 8015318:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 801531a:	4b30      	ldr	r3, [pc, #192]	; (80153dc <tcp_input+0x28c>)
 801531c:	681b      	ldr	r3, [r3, #0]
 801531e:	899b      	ldrh	r3, [r3, #12]
 8015320:	b29b      	uxth	r3, r3
 8015322:	4618      	mov	r0, r3
 8015324:	f7fc fcce 	bl	8011cc4 <lwip_htons>
 8015328:	4603      	mov	r3, r0
 801532a:	b2db      	uxtb	r3, r3
 801532c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8015330:	b2da      	uxtb	r2, r3
 8015332:	4b34      	ldr	r3, [pc, #208]	; (8015404 <tcp_input+0x2b4>)
 8015334:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	891a      	ldrh	r2, [r3, #8]
 801533a:	4b33      	ldr	r3, [pc, #204]	; (8015408 <tcp_input+0x2b8>)
 801533c:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 801533e:	4b31      	ldr	r3, [pc, #196]	; (8015404 <tcp_input+0x2b4>)
 8015340:	781b      	ldrb	r3, [r3, #0]
 8015342:	f003 0303 	and.w	r3, r3, #3
 8015346:	2b00      	cmp	r3, #0
 8015348:	d00c      	beq.n	8015364 <tcp_input+0x214>
    tcplen++;
 801534a:	4b2f      	ldr	r3, [pc, #188]	; (8015408 <tcp_input+0x2b8>)
 801534c:	881b      	ldrh	r3, [r3, #0]
 801534e:	3301      	adds	r3, #1
 8015350:	b29a      	uxth	r2, r3
 8015352:	4b2d      	ldr	r3, [pc, #180]	; (8015408 <tcp_input+0x2b8>)
 8015354:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 8015356:	687b      	ldr	r3, [r7, #4]
 8015358:	891a      	ldrh	r2, [r3, #8]
 801535a:	4b2b      	ldr	r3, [pc, #172]	; (8015408 <tcp_input+0x2b8>)
 801535c:	881b      	ldrh	r3, [r3, #0]
 801535e:	429a      	cmp	r2, r3
 8015360:	f200 82e6 	bhi.w	8015930 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 8015364:	2300      	movs	r3, #0
 8015366:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 8015368:	4b28      	ldr	r3, [pc, #160]	; (801540c <tcp_input+0x2bc>)
 801536a:	681b      	ldr	r3, [r3, #0]
 801536c:	61fb      	str	r3, [r7, #28]
 801536e:	e09d      	b.n	80154ac <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 8015370:	69fb      	ldr	r3, [r7, #28]
 8015372:	7d1b      	ldrb	r3, [r3, #20]
 8015374:	2b00      	cmp	r3, #0
 8015376:	d105      	bne.n	8015384 <tcp_input+0x234>
 8015378:	4b15      	ldr	r3, [pc, #84]	; (80153d0 <tcp_input+0x280>)
 801537a:	22fb      	movs	r2, #251	; 0xfb
 801537c:	4924      	ldr	r1, [pc, #144]	; (8015410 <tcp_input+0x2c0>)
 801537e:	4816      	ldr	r0, [pc, #88]	; (80153d8 <tcp_input+0x288>)
 8015380:	f008 f894 	bl	801d4ac <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 8015384:	69fb      	ldr	r3, [r7, #28]
 8015386:	7d1b      	ldrb	r3, [r3, #20]
 8015388:	2b0a      	cmp	r3, #10
 801538a:	d105      	bne.n	8015398 <tcp_input+0x248>
 801538c:	4b10      	ldr	r3, [pc, #64]	; (80153d0 <tcp_input+0x280>)
 801538e:	22fc      	movs	r2, #252	; 0xfc
 8015390:	4920      	ldr	r1, [pc, #128]	; (8015414 <tcp_input+0x2c4>)
 8015392:	4811      	ldr	r0, [pc, #68]	; (80153d8 <tcp_input+0x288>)
 8015394:	f008 f88a 	bl	801d4ac <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 8015398:	69fb      	ldr	r3, [r7, #28]
 801539a:	7d1b      	ldrb	r3, [r3, #20]
 801539c:	2b01      	cmp	r3, #1
 801539e:	d105      	bne.n	80153ac <tcp_input+0x25c>
 80153a0:	4b0b      	ldr	r3, [pc, #44]	; (80153d0 <tcp_input+0x280>)
 80153a2:	22fd      	movs	r2, #253	; 0xfd
 80153a4:	491c      	ldr	r1, [pc, #112]	; (8015418 <tcp_input+0x2c8>)
 80153a6:	480c      	ldr	r0, [pc, #48]	; (80153d8 <tcp_input+0x288>)
 80153a8:	f008 f880 	bl	801d4ac <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80153ac:	69fb      	ldr	r3, [r7, #28]
 80153ae:	7a1b      	ldrb	r3, [r3, #8]
 80153b0:	2b00      	cmp	r3, #0
 80153b2:	d033      	beq.n	801541c <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80153b4:	69fb      	ldr	r3, [r7, #28]
 80153b6:	7a1a      	ldrb	r2, [r3, #8]
 80153b8:	4b09      	ldr	r3, [pc, #36]	; (80153e0 <tcp_input+0x290>)
 80153ba:	685b      	ldr	r3, [r3, #4]
 80153bc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80153c0:	3301      	adds	r3, #1
 80153c2:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80153c4:	429a      	cmp	r2, r3
 80153c6:	d029      	beq.n	801541c <tcp_input+0x2cc>
      prev = pcb;
 80153c8:	69fb      	ldr	r3, [r7, #28]
 80153ca:	61bb      	str	r3, [r7, #24]
      continue;
 80153cc:	e06b      	b.n	80154a6 <tcp_input+0x356>
 80153ce:	bf00      	nop
 80153d0:	0801f768 	.word	0x0801f768
 80153d4:	0801f79c 	.word	0x0801f79c
 80153d8:	0801f7b4 	.word	0x0801f7b4
 80153dc:	20024074 	.word	0x20024074
 80153e0:	2001e768 	.word	0x2001e768
 80153e4:	20024078 	.word	0x20024078
 80153e8:	2002407c 	.word	0x2002407c
 80153ec:	2002407a 	.word	0x2002407a
 80153f0:	0801f7dc 	.word	0x0801f7dc
 80153f4:	0801f7ec 	.word	0x0801f7ec
 80153f8:	0801f7f8 	.word	0x0801f7f8
 80153fc:	20024084 	.word	0x20024084
 8015400:	20024088 	.word	0x20024088
 8015404:	20024090 	.word	0x20024090
 8015408:	2002408e 	.word	0x2002408e
 801540c:	20024058 	.word	0x20024058
 8015410:	0801f818 	.word	0x0801f818
 8015414:	0801f840 	.word	0x0801f840
 8015418:	0801f86c 	.word	0x0801f86c
    }

    if (pcb->remote_port == tcphdr->src &&
 801541c:	69fb      	ldr	r3, [r7, #28]
 801541e:	8b1a      	ldrh	r2, [r3, #24]
 8015420:	4b72      	ldr	r3, [pc, #456]	; (80155ec <tcp_input+0x49c>)
 8015422:	681b      	ldr	r3, [r3, #0]
 8015424:	881b      	ldrh	r3, [r3, #0]
 8015426:	b29b      	uxth	r3, r3
 8015428:	429a      	cmp	r2, r3
 801542a:	d13a      	bne.n	80154a2 <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 801542c:	69fb      	ldr	r3, [r7, #28]
 801542e:	8ada      	ldrh	r2, [r3, #22]
 8015430:	4b6e      	ldr	r3, [pc, #440]	; (80155ec <tcp_input+0x49c>)
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	885b      	ldrh	r3, [r3, #2]
 8015436:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 8015438:	429a      	cmp	r2, r3
 801543a:	d132      	bne.n	80154a2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801543c:	69fb      	ldr	r3, [r7, #28]
 801543e:	685a      	ldr	r2, [r3, #4]
 8015440:	4b6b      	ldr	r3, [pc, #428]	; (80155f0 <tcp_input+0x4a0>)
 8015442:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 8015444:	429a      	cmp	r2, r3
 8015446:	d12c      	bne.n	80154a2 <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015448:	69fb      	ldr	r3, [r7, #28]
 801544a:	681a      	ldr	r2, [r3, #0]
 801544c:	4b68      	ldr	r3, [pc, #416]	; (80155f0 <tcp_input+0x4a0>)
 801544e:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 8015450:	429a      	cmp	r2, r3
 8015452:	d126      	bne.n	80154a2 <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 8015454:	69fb      	ldr	r3, [r7, #28]
 8015456:	68db      	ldr	r3, [r3, #12]
 8015458:	69fa      	ldr	r2, [r7, #28]
 801545a:	429a      	cmp	r2, r3
 801545c:	d106      	bne.n	801546c <tcp_input+0x31c>
 801545e:	4b65      	ldr	r3, [pc, #404]	; (80155f4 <tcp_input+0x4a4>)
 8015460:	f240 120d 	movw	r2, #269	; 0x10d
 8015464:	4964      	ldr	r1, [pc, #400]	; (80155f8 <tcp_input+0x4a8>)
 8015466:	4865      	ldr	r0, [pc, #404]	; (80155fc <tcp_input+0x4ac>)
 8015468:	f008 f820 	bl	801d4ac <iprintf>
      if (prev != NULL) {
 801546c:	69bb      	ldr	r3, [r7, #24]
 801546e:	2b00      	cmp	r3, #0
 8015470:	d00a      	beq.n	8015488 <tcp_input+0x338>
        prev->next = pcb->next;
 8015472:	69fb      	ldr	r3, [r7, #28]
 8015474:	68da      	ldr	r2, [r3, #12]
 8015476:	69bb      	ldr	r3, [r7, #24]
 8015478:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 801547a:	4b61      	ldr	r3, [pc, #388]	; (8015600 <tcp_input+0x4b0>)
 801547c:	681a      	ldr	r2, [r3, #0]
 801547e:	69fb      	ldr	r3, [r7, #28]
 8015480:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 8015482:	4a5f      	ldr	r2, [pc, #380]	; (8015600 <tcp_input+0x4b0>)
 8015484:	69fb      	ldr	r3, [r7, #28]
 8015486:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 8015488:	69fb      	ldr	r3, [r7, #28]
 801548a:	68db      	ldr	r3, [r3, #12]
 801548c:	69fa      	ldr	r2, [r7, #28]
 801548e:	429a      	cmp	r2, r3
 8015490:	d111      	bne.n	80154b6 <tcp_input+0x366>
 8015492:	4b58      	ldr	r3, [pc, #352]	; (80155f4 <tcp_input+0x4a4>)
 8015494:	f240 1215 	movw	r2, #277	; 0x115
 8015498:	495a      	ldr	r1, [pc, #360]	; (8015604 <tcp_input+0x4b4>)
 801549a:	4858      	ldr	r0, [pc, #352]	; (80155fc <tcp_input+0x4ac>)
 801549c:	f008 f806 	bl	801d4ac <iprintf>
      break;
 80154a0:	e009      	b.n	80154b6 <tcp_input+0x366>
    }
    prev = pcb;
 80154a2:	69fb      	ldr	r3, [r7, #28]
 80154a4:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 80154a6:	69fb      	ldr	r3, [r7, #28]
 80154a8:	68db      	ldr	r3, [r3, #12]
 80154aa:	61fb      	str	r3, [r7, #28]
 80154ac:	69fb      	ldr	r3, [r7, #28]
 80154ae:	2b00      	cmp	r3, #0
 80154b0:	f47f af5e 	bne.w	8015370 <tcp_input+0x220>
 80154b4:	e000      	b.n	80154b8 <tcp_input+0x368>
      break;
 80154b6:	bf00      	nop
  }

  if (pcb == NULL) {
 80154b8:	69fb      	ldr	r3, [r7, #28]
 80154ba:	2b00      	cmp	r3, #0
 80154bc:	f040 80aa 	bne.w	8015614 <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 80154c0:	4b51      	ldr	r3, [pc, #324]	; (8015608 <tcp_input+0x4b8>)
 80154c2:	681b      	ldr	r3, [r3, #0]
 80154c4:	61fb      	str	r3, [r7, #28]
 80154c6:	e03f      	b.n	8015548 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 80154c8:	69fb      	ldr	r3, [r7, #28]
 80154ca:	7d1b      	ldrb	r3, [r3, #20]
 80154cc:	2b0a      	cmp	r3, #10
 80154ce:	d006      	beq.n	80154de <tcp_input+0x38e>
 80154d0:	4b48      	ldr	r3, [pc, #288]	; (80155f4 <tcp_input+0x4a4>)
 80154d2:	f240 121f 	movw	r2, #287	; 0x11f
 80154d6:	494d      	ldr	r1, [pc, #308]	; (801560c <tcp_input+0x4bc>)
 80154d8:	4848      	ldr	r0, [pc, #288]	; (80155fc <tcp_input+0x4ac>)
 80154da:	f007 ffe7 	bl	801d4ac <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80154de:	69fb      	ldr	r3, [r7, #28]
 80154e0:	7a1b      	ldrb	r3, [r3, #8]
 80154e2:	2b00      	cmp	r3, #0
 80154e4:	d009      	beq.n	80154fa <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 80154e6:	69fb      	ldr	r3, [r7, #28]
 80154e8:	7a1a      	ldrb	r2, [r3, #8]
 80154ea:	4b41      	ldr	r3, [pc, #260]	; (80155f0 <tcp_input+0x4a0>)
 80154ec:	685b      	ldr	r3, [r3, #4]
 80154ee:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80154f2:	3301      	adds	r3, #1
 80154f4:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80154f6:	429a      	cmp	r2, r3
 80154f8:	d122      	bne.n	8015540 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 80154fa:	69fb      	ldr	r3, [r7, #28]
 80154fc:	8b1a      	ldrh	r2, [r3, #24]
 80154fe:	4b3b      	ldr	r3, [pc, #236]	; (80155ec <tcp_input+0x49c>)
 8015500:	681b      	ldr	r3, [r3, #0]
 8015502:	881b      	ldrh	r3, [r3, #0]
 8015504:	b29b      	uxth	r3, r3
 8015506:	429a      	cmp	r2, r3
 8015508:	d11b      	bne.n	8015542 <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 801550a:	69fb      	ldr	r3, [r7, #28]
 801550c:	8ada      	ldrh	r2, [r3, #22]
 801550e:	4b37      	ldr	r3, [pc, #220]	; (80155ec <tcp_input+0x49c>)
 8015510:	681b      	ldr	r3, [r3, #0]
 8015512:	885b      	ldrh	r3, [r3, #2]
 8015514:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 8015516:	429a      	cmp	r2, r3
 8015518:	d113      	bne.n	8015542 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801551a:	69fb      	ldr	r3, [r7, #28]
 801551c:	685a      	ldr	r2, [r3, #4]
 801551e:	4b34      	ldr	r3, [pc, #208]	; (80155f0 <tcp_input+0x4a0>)
 8015520:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 8015522:	429a      	cmp	r2, r3
 8015524:	d10d      	bne.n	8015542 <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8015526:	69fb      	ldr	r3, [r7, #28]
 8015528:	681a      	ldr	r2, [r3, #0]
 801552a:	4b31      	ldr	r3, [pc, #196]	; (80155f0 <tcp_input+0x4a0>)
 801552c:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 801552e:	429a      	cmp	r2, r3
 8015530:	d107      	bne.n	8015542 <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 8015532:	69f8      	ldr	r0, [r7, #28]
 8015534:	f000 fb56 	bl	8015be4 <tcp_timewait_input>
        }
        pbuf_free(p);
 8015538:	6878      	ldr	r0, [r7, #4]
 801553a:	f7fd ffc5 	bl	80134c8 <pbuf_free>
        return;
 801553e:	e1fd      	b.n	801593c <tcp_input+0x7ec>
        continue;
 8015540:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 8015542:	69fb      	ldr	r3, [r7, #28]
 8015544:	68db      	ldr	r3, [r3, #12]
 8015546:	61fb      	str	r3, [r7, #28]
 8015548:	69fb      	ldr	r3, [r7, #28]
 801554a:	2b00      	cmp	r3, #0
 801554c:	d1bc      	bne.n	80154c8 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 801554e:	2300      	movs	r3, #0
 8015550:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 8015552:	4b2f      	ldr	r3, [pc, #188]	; (8015610 <tcp_input+0x4c0>)
 8015554:	681b      	ldr	r3, [r3, #0]
 8015556:	617b      	str	r3, [r7, #20]
 8015558:	e02a      	b.n	80155b0 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 801555a:	697b      	ldr	r3, [r7, #20]
 801555c:	7a1b      	ldrb	r3, [r3, #8]
 801555e:	2b00      	cmp	r3, #0
 8015560:	d00c      	beq.n	801557c <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8015562:	697b      	ldr	r3, [r7, #20]
 8015564:	7a1a      	ldrb	r2, [r3, #8]
 8015566:	4b22      	ldr	r3, [pc, #136]	; (80155f0 <tcp_input+0x4a0>)
 8015568:	685b      	ldr	r3, [r3, #4]
 801556a:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801556e:	3301      	adds	r3, #1
 8015570:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 8015572:	429a      	cmp	r2, r3
 8015574:	d002      	beq.n	801557c <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 8015576:	697b      	ldr	r3, [r7, #20]
 8015578:	61bb      	str	r3, [r7, #24]
        continue;
 801557a:	e016      	b.n	80155aa <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 801557c:	697b      	ldr	r3, [r7, #20]
 801557e:	8ada      	ldrh	r2, [r3, #22]
 8015580:	4b1a      	ldr	r3, [pc, #104]	; (80155ec <tcp_input+0x49c>)
 8015582:	681b      	ldr	r3, [r3, #0]
 8015584:	885b      	ldrh	r3, [r3, #2]
 8015586:	b29b      	uxth	r3, r3
 8015588:	429a      	cmp	r2, r3
 801558a:	d10c      	bne.n	80155a6 <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 801558c:	697b      	ldr	r3, [r7, #20]
 801558e:	681a      	ldr	r2, [r3, #0]
 8015590:	4b17      	ldr	r3, [pc, #92]	; (80155f0 <tcp_input+0x4a0>)
 8015592:	695b      	ldr	r3, [r3, #20]
 8015594:	429a      	cmp	r2, r3
 8015596:	d00f      	beq.n	80155b8 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 8015598:	697b      	ldr	r3, [r7, #20]
 801559a:	2b00      	cmp	r3, #0
 801559c:	d00d      	beq.n	80155ba <tcp_input+0x46a>
 801559e:	697b      	ldr	r3, [r7, #20]
 80155a0:	681b      	ldr	r3, [r3, #0]
 80155a2:	2b00      	cmp	r3, #0
 80155a4:	d009      	beq.n	80155ba <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 80155a6:	697b      	ldr	r3, [r7, #20]
 80155a8:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 80155aa:	697b      	ldr	r3, [r7, #20]
 80155ac:	68db      	ldr	r3, [r3, #12]
 80155ae:	617b      	str	r3, [r7, #20]
 80155b0:	697b      	ldr	r3, [r7, #20]
 80155b2:	2b00      	cmp	r3, #0
 80155b4:	d1d1      	bne.n	801555a <tcp_input+0x40a>
 80155b6:	e000      	b.n	80155ba <tcp_input+0x46a>
            break;
 80155b8:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 80155ba:	697b      	ldr	r3, [r7, #20]
 80155bc:	2b00      	cmp	r3, #0
 80155be:	d029      	beq.n	8015614 <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 80155c0:	69bb      	ldr	r3, [r7, #24]
 80155c2:	2b00      	cmp	r3, #0
 80155c4:	d00a      	beq.n	80155dc <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 80155c6:	697b      	ldr	r3, [r7, #20]
 80155c8:	68da      	ldr	r2, [r3, #12]
 80155ca:	69bb      	ldr	r3, [r7, #24]
 80155cc:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 80155ce:	4b10      	ldr	r3, [pc, #64]	; (8015610 <tcp_input+0x4c0>)
 80155d0:	681a      	ldr	r2, [r3, #0]
 80155d2:	697b      	ldr	r3, [r7, #20]
 80155d4:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 80155d6:	4a0e      	ldr	r2, [pc, #56]	; (8015610 <tcp_input+0x4c0>)
 80155d8:	697b      	ldr	r3, [r7, #20]
 80155da:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 80155dc:	6978      	ldr	r0, [r7, #20]
 80155de:	f000 fa03 	bl	80159e8 <tcp_listen_input>
      }
      pbuf_free(p);
 80155e2:	6878      	ldr	r0, [r7, #4]
 80155e4:	f7fd ff70 	bl	80134c8 <pbuf_free>
      return;
 80155e8:	e1a8      	b.n	801593c <tcp_input+0x7ec>
 80155ea:	bf00      	nop
 80155ec:	20024074 	.word	0x20024074
 80155f0:	2001e768 	.word	0x2001e768
 80155f4:	0801f768 	.word	0x0801f768
 80155f8:	0801f894 	.word	0x0801f894
 80155fc:	0801f7b4 	.word	0x0801f7b4
 8015600:	20024058 	.word	0x20024058
 8015604:	0801f8c0 	.word	0x0801f8c0
 8015608:	2002405c 	.word	0x2002405c
 801560c:	0801f8ec 	.word	0x0801f8ec
 8015610:	20024054 	.word	0x20024054
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 8015614:	69fb      	ldr	r3, [r7, #28]
 8015616:	2b00      	cmp	r3, #0
 8015618:	f000 8158 	beq.w	80158cc <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 801561c:	4b95      	ldr	r3, [pc, #596]	; (8015874 <tcp_input+0x724>)
 801561e:	2200      	movs	r2, #0
 8015620:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 8015622:	687b      	ldr	r3, [r7, #4]
 8015624:	891a      	ldrh	r2, [r3, #8]
 8015626:	4b93      	ldr	r3, [pc, #588]	; (8015874 <tcp_input+0x724>)
 8015628:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 801562a:	4a92      	ldr	r2, [pc, #584]	; (8015874 <tcp_input+0x724>)
 801562c:	687b      	ldr	r3, [r7, #4]
 801562e:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 8015630:	4b91      	ldr	r3, [pc, #580]	; (8015878 <tcp_input+0x728>)
 8015632:	681b      	ldr	r3, [r3, #0]
 8015634:	4a8f      	ldr	r2, [pc, #572]	; (8015874 <tcp_input+0x724>)
 8015636:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 8015638:	4b90      	ldr	r3, [pc, #576]	; (801587c <tcp_input+0x72c>)
 801563a:	2200      	movs	r2, #0
 801563c:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 801563e:	4b90      	ldr	r3, [pc, #576]	; (8015880 <tcp_input+0x730>)
 8015640:	2200      	movs	r2, #0
 8015642:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 8015644:	4b8f      	ldr	r3, [pc, #572]	; (8015884 <tcp_input+0x734>)
 8015646:	2200      	movs	r2, #0
 8015648:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 801564a:	4b8f      	ldr	r3, [pc, #572]	; (8015888 <tcp_input+0x738>)
 801564c:	781b      	ldrb	r3, [r3, #0]
 801564e:	f003 0308 	and.w	r3, r3, #8
 8015652:	2b00      	cmp	r3, #0
 8015654:	d006      	beq.n	8015664 <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 8015656:	687b      	ldr	r3, [r7, #4]
 8015658:	7b5b      	ldrb	r3, [r3, #13]
 801565a:	f043 0301 	orr.w	r3, r3, #1
 801565e:	b2da      	uxtb	r2, r3
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 8015664:	69fb      	ldr	r3, [r7, #28]
 8015666:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015668:	2b00      	cmp	r3, #0
 801566a:	d017      	beq.n	801569c <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801566c:	69f8      	ldr	r0, [r7, #28]
 801566e:	f7ff f929 	bl	80148c4 <tcp_process_refused_data>
 8015672:	4603      	mov	r3, r0
 8015674:	f113 0f0d 	cmn.w	r3, #13
 8015678:	d007      	beq.n	801568a <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 801567a:	69fb      	ldr	r3, [r7, #28]
 801567c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 801567e:	2b00      	cmp	r3, #0
 8015680:	d00c      	beq.n	801569c <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 8015682:	4b82      	ldr	r3, [pc, #520]	; (801588c <tcp_input+0x73c>)
 8015684:	881b      	ldrh	r3, [r3, #0]
 8015686:	2b00      	cmp	r3, #0
 8015688:	d008      	beq.n	801569c <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 801568a:	69fb      	ldr	r3, [r7, #28]
 801568c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 801568e:	2b00      	cmp	r3, #0
 8015690:	f040 80e3 	bne.w	801585a <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 8015694:	69f8      	ldr	r0, [r7, #28]
 8015696:	f003 f9ad 	bl	80189f4 <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 801569a:	e0de      	b.n	801585a <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 801569c:	4a7c      	ldr	r2, [pc, #496]	; (8015890 <tcp_input+0x740>)
 801569e:	69fb      	ldr	r3, [r7, #28]
 80156a0:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 80156a2:	69f8      	ldr	r0, [r7, #28]
 80156a4:	f000 fb18 	bl	8015cd8 <tcp_process>
 80156a8:	4603      	mov	r3, r0
 80156aa:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 80156ac:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80156b0:	f113 0f0d 	cmn.w	r3, #13
 80156b4:	f000 80d3 	beq.w	801585e <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 80156b8:	4b71      	ldr	r3, [pc, #452]	; (8015880 <tcp_input+0x730>)
 80156ba:	781b      	ldrb	r3, [r3, #0]
 80156bc:	f003 0308 	and.w	r3, r3, #8
 80156c0:	2b00      	cmp	r3, #0
 80156c2:	d015      	beq.n	80156f0 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 80156c4:	69fb      	ldr	r3, [r7, #28]
 80156c6:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80156ca:	2b00      	cmp	r3, #0
 80156cc:	d008      	beq.n	80156e0 <tcp_input+0x590>
 80156ce:	69fb      	ldr	r3, [r7, #28]
 80156d0:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80156d4:	69fa      	ldr	r2, [r7, #28]
 80156d6:	6912      	ldr	r2, [r2, #16]
 80156d8:	f06f 010d 	mvn.w	r1, #13
 80156dc:	4610      	mov	r0, r2
 80156de:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80156e0:	69f9      	ldr	r1, [r7, #28]
 80156e2:	486c      	ldr	r0, [pc, #432]	; (8015894 <tcp_input+0x744>)
 80156e4:	f7ff fbbc 	bl	8014e60 <tcp_pcb_remove>
        tcp_free(pcb);
 80156e8:	69f8      	ldr	r0, [r7, #28]
 80156ea:	f7fe f9a9 	bl	8013a40 <tcp_free>
 80156ee:	e0da      	b.n	80158a6 <tcp_input+0x756>
      } else {
        err = ERR_OK;
 80156f0:	2300      	movs	r3, #0
 80156f2:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 80156f4:	4b63      	ldr	r3, [pc, #396]	; (8015884 <tcp_input+0x734>)
 80156f6:	881b      	ldrh	r3, [r3, #0]
 80156f8:	2b00      	cmp	r3, #0
 80156fa:	d01d      	beq.n	8015738 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 80156fc:	4b61      	ldr	r3, [pc, #388]	; (8015884 <tcp_input+0x734>)
 80156fe:	881b      	ldrh	r3, [r3, #0]
 8015700:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 8015702:	69fb      	ldr	r3, [r7, #28]
 8015704:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015708:	2b00      	cmp	r3, #0
 801570a:	d00a      	beq.n	8015722 <tcp_input+0x5d2>
 801570c:	69fb      	ldr	r3, [r7, #28]
 801570e:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 8015712:	69fa      	ldr	r2, [r7, #28]
 8015714:	6910      	ldr	r0, [r2, #16]
 8015716:	89fa      	ldrh	r2, [r7, #14]
 8015718:	69f9      	ldr	r1, [r7, #28]
 801571a:	4798      	blx	r3
 801571c:	4603      	mov	r3, r0
 801571e:	74fb      	strb	r3, [r7, #19]
 8015720:	e001      	b.n	8015726 <tcp_input+0x5d6>
 8015722:	2300      	movs	r3, #0
 8015724:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8015726:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801572a:	f113 0f0d 	cmn.w	r3, #13
 801572e:	f000 8098 	beq.w	8015862 <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 8015732:	4b54      	ldr	r3, [pc, #336]	; (8015884 <tcp_input+0x734>)
 8015734:	2200      	movs	r2, #0
 8015736:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 8015738:	69f8      	ldr	r0, [r7, #28]
 801573a:	f000 f915 	bl	8015968 <tcp_input_delayed_close>
 801573e:	4603      	mov	r3, r0
 8015740:	2b00      	cmp	r3, #0
 8015742:	f040 8090 	bne.w	8015866 <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 8015746:	4b4d      	ldr	r3, [pc, #308]	; (801587c <tcp_input+0x72c>)
 8015748:	681b      	ldr	r3, [r3, #0]
 801574a:	2b00      	cmp	r3, #0
 801574c:	d041      	beq.n	80157d2 <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 801574e:	69fb      	ldr	r3, [r7, #28]
 8015750:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 8015752:	2b00      	cmp	r3, #0
 8015754:	d006      	beq.n	8015764 <tcp_input+0x614>
 8015756:	4b50      	ldr	r3, [pc, #320]	; (8015898 <tcp_input+0x748>)
 8015758:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 801575c:	494f      	ldr	r1, [pc, #316]	; (801589c <tcp_input+0x74c>)
 801575e:	4850      	ldr	r0, [pc, #320]	; (80158a0 <tcp_input+0x750>)
 8015760:	f007 fea4 	bl	801d4ac <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 8015764:	69fb      	ldr	r3, [r7, #28]
 8015766:	8b5b      	ldrh	r3, [r3, #26]
 8015768:	f003 0310 	and.w	r3, r3, #16
 801576c:	2b00      	cmp	r3, #0
 801576e:	d008      	beq.n	8015782 <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 8015770:	4b42      	ldr	r3, [pc, #264]	; (801587c <tcp_input+0x72c>)
 8015772:	681b      	ldr	r3, [r3, #0]
 8015774:	4618      	mov	r0, r3
 8015776:	f7fd fea7 	bl	80134c8 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 801577a:	69f8      	ldr	r0, [r7, #28]
 801577c:	f7fe fc48 	bl	8014010 <tcp_abort>
            goto aborted;
 8015780:	e091      	b.n	80158a6 <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 8015782:	69fb      	ldr	r3, [r7, #28]
 8015784:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015788:	2b00      	cmp	r3, #0
 801578a:	d00c      	beq.n	80157a6 <tcp_input+0x656>
 801578c:	69fb      	ldr	r3, [r7, #28]
 801578e:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8015792:	69fb      	ldr	r3, [r7, #28]
 8015794:	6918      	ldr	r0, [r3, #16]
 8015796:	4b39      	ldr	r3, [pc, #228]	; (801587c <tcp_input+0x72c>)
 8015798:	681a      	ldr	r2, [r3, #0]
 801579a:	2300      	movs	r3, #0
 801579c:	69f9      	ldr	r1, [r7, #28]
 801579e:	47a0      	blx	r4
 80157a0:	4603      	mov	r3, r0
 80157a2:	74fb      	strb	r3, [r7, #19]
 80157a4:	e008      	b.n	80157b8 <tcp_input+0x668>
 80157a6:	4b35      	ldr	r3, [pc, #212]	; (801587c <tcp_input+0x72c>)
 80157a8:	681a      	ldr	r2, [r3, #0]
 80157aa:	2300      	movs	r3, #0
 80157ac:	69f9      	ldr	r1, [r7, #28]
 80157ae:	2000      	movs	r0, #0
 80157b0:	f7ff f95e 	bl	8014a70 <tcp_recv_null>
 80157b4:	4603      	mov	r3, r0
 80157b6:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 80157b8:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80157bc:	f113 0f0d 	cmn.w	r3, #13
 80157c0:	d053      	beq.n	801586a <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 80157c2:	f997 3013 	ldrsb.w	r3, [r7, #19]
 80157c6:	2b00      	cmp	r3, #0
 80157c8:	d003      	beq.n	80157d2 <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 80157ca:	4b2c      	ldr	r3, [pc, #176]	; (801587c <tcp_input+0x72c>)
 80157cc:	681a      	ldr	r2, [r3, #0]
 80157ce:	69fb      	ldr	r3, [r7, #28]
 80157d0:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 80157d2:	4b2b      	ldr	r3, [pc, #172]	; (8015880 <tcp_input+0x730>)
 80157d4:	781b      	ldrb	r3, [r3, #0]
 80157d6:	f003 0320 	and.w	r3, r3, #32
 80157da:	2b00      	cmp	r3, #0
 80157dc:	d030      	beq.n	8015840 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 80157de:	69fb      	ldr	r3, [r7, #28]
 80157e0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80157e2:	2b00      	cmp	r3, #0
 80157e4:	d009      	beq.n	80157fa <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 80157e6:	69fb      	ldr	r3, [r7, #28]
 80157e8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80157ea:	7b5a      	ldrb	r2, [r3, #13]
 80157ec:	69fb      	ldr	r3, [r7, #28]
 80157ee:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 80157f0:	f042 0220 	orr.w	r2, r2, #32
 80157f4:	b2d2      	uxtb	r2, r2
 80157f6:	735a      	strb	r2, [r3, #13]
 80157f8:	e022      	b.n	8015840 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 80157fa:	69fb      	ldr	r3, [r7, #28]
 80157fc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80157fe:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 8015802:	d005      	beq.n	8015810 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 8015804:	69fb      	ldr	r3, [r7, #28]
 8015806:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8015808:	3301      	adds	r3, #1
 801580a:	b29a      	uxth	r2, r3
 801580c:	69fb      	ldr	r3, [r7, #28]
 801580e:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 8015810:	69fb      	ldr	r3, [r7, #28]
 8015812:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8015816:	2b00      	cmp	r3, #0
 8015818:	d00b      	beq.n	8015832 <tcp_input+0x6e2>
 801581a:	69fb      	ldr	r3, [r7, #28]
 801581c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 8015820:	69fb      	ldr	r3, [r7, #28]
 8015822:	6918      	ldr	r0, [r3, #16]
 8015824:	2300      	movs	r3, #0
 8015826:	2200      	movs	r2, #0
 8015828:	69f9      	ldr	r1, [r7, #28]
 801582a:	47a0      	blx	r4
 801582c:	4603      	mov	r3, r0
 801582e:	74fb      	strb	r3, [r7, #19]
 8015830:	e001      	b.n	8015836 <tcp_input+0x6e6>
 8015832:	2300      	movs	r3, #0
 8015834:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 8015836:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801583a:	f113 0f0d 	cmn.w	r3, #13
 801583e:	d016      	beq.n	801586e <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 8015840:	4b13      	ldr	r3, [pc, #76]	; (8015890 <tcp_input+0x740>)
 8015842:	2200      	movs	r2, #0
 8015844:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 8015846:	69f8      	ldr	r0, [r7, #28]
 8015848:	f000 f88e 	bl	8015968 <tcp_input_delayed_close>
 801584c:	4603      	mov	r3, r0
 801584e:	2b00      	cmp	r3, #0
 8015850:	d128      	bne.n	80158a4 <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 8015852:	69f8      	ldr	r0, [r7, #28]
 8015854:	f002 fac8 	bl	8017de8 <tcp_output>
 8015858:	e025      	b.n	80158a6 <tcp_input+0x756>
        goto aborted;
 801585a:	bf00      	nop
 801585c:	e023      	b.n	80158a6 <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 801585e:	bf00      	nop
 8015860:	e021      	b.n	80158a6 <tcp_input+0x756>
              goto aborted;
 8015862:	bf00      	nop
 8015864:	e01f      	b.n	80158a6 <tcp_input+0x756>
          goto aborted;
 8015866:	bf00      	nop
 8015868:	e01d      	b.n	80158a6 <tcp_input+0x756>
            goto aborted;
 801586a:	bf00      	nop
 801586c:	e01b      	b.n	80158a6 <tcp_input+0x756>
              goto aborted;
 801586e:	bf00      	nop
 8015870:	e019      	b.n	80158a6 <tcp_input+0x756>
 8015872:	bf00      	nop
 8015874:	20024064 	.word	0x20024064
 8015878:	20024074 	.word	0x20024074
 801587c:	20024094 	.word	0x20024094
 8015880:	20024091 	.word	0x20024091
 8015884:	2002408c 	.word	0x2002408c
 8015888:	20024090 	.word	0x20024090
 801588c:	2002408e 	.word	0x2002408e
 8015890:	20024098 	.word	0x20024098
 8015894:	20024058 	.word	0x20024058
 8015898:	0801f768 	.word	0x0801f768
 801589c:	0801f91c 	.word	0x0801f91c
 80158a0:	0801f7b4 	.word	0x0801f7b4
          goto aborted;
 80158a4:	bf00      	nop
    tcp_input_pcb = NULL;
 80158a6:	4b27      	ldr	r3, [pc, #156]	; (8015944 <tcp_input+0x7f4>)
 80158a8:	2200      	movs	r2, #0
 80158aa:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 80158ac:	4b26      	ldr	r3, [pc, #152]	; (8015948 <tcp_input+0x7f8>)
 80158ae:	2200      	movs	r2, #0
 80158b0:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 80158b2:	4b26      	ldr	r3, [pc, #152]	; (801594c <tcp_input+0x7fc>)
 80158b4:	685b      	ldr	r3, [r3, #4]
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d03f      	beq.n	801593a <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 80158ba:	4b24      	ldr	r3, [pc, #144]	; (801594c <tcp_input+0x7fc>)
 80158bc:	685b      	ldr	r3, [r3, #4]
 80158be:	4618      	mov	r0, r3
 80158c0:	f7fd fe02 	bl	80134c8 <pbuf_free>
      inseg.p = NULL;
 80158c4:	4b21      	ldr	r3, [pc, #132]	; (801594c <tcp_input+0x7fc>)
 80158c6:	2200      	movs	r2, #0
 80158c8:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 80158ca:	e036      	b.n	801593a <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 80158cc:	4b20      	ldr	r3, [pc, #128]	; (8015950 <tcp_input+0x800>)
 80158ce:	681b      	ldr	r3, [r3, #0]
 80158d0:	899b      	ldrh	r3, [r3, #12]
 80158d2:	b29b      	uxth	r3, r3
 80158d4:	4618      	mov	r0, r3
 80158d6:	f7fc f9f5 	bl	8011cc4 <lwip_htons>
 80158da:	4603      	mov	r3, r0
 80158dc:	b2db      	uxtb	r3, r3
 80158de:	f003 0304 	and.w	r3, r3, #4
 80158e2:	2b00      	cmp	r3, #0
 80158e4:	d118      	bne.n	8015918 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80158e6:	4b1b      	ldr	r3, [pc, #108]	; (8015954 <tcp_input+0x804>)
 80158e8:	6819      	ldr	r1, [r3, #0]
 80158ea:	4b1b      	ldr	r3, [pc, #108]	; (8015958 <tcp_input+0x808>)
 80158ec:	881b      	ldrh	r3, [r3, #0]
 80158ee:	461a      	mov	r2, r3
 80158f0:	4b1a      	ldr	r3, [pc, #104]	; (801595c <tcp_input+0x80c>)
 80158f2:	681b      	ldr	r3, [r3, #0]
 80158f4:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80158f6:	4b16      	ldr	r3, [pc, #88]	; (8015950 <tcp_input+0x800>)
 80158f8:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 80158fa:	885b      	ldrh	r3, [r3, #2]
 80158fc:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80158fe:	4a14      	ldr	r2, [pc, #80]	; (8015950 <tcp_input+0x800>)
 8015900:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015902:	8812      	ldrh	r2, [r2, #0]
 8015904:	b292      	uxth	r2, r2
 8015906:	9202      	str	r2, [sp, #8]
 8015908:	9301      	str	r3, [sp, #4]
 801590a:	4b15      	ldr	r3, [pc, #84]	; (8015960 <tcp_input+0x810>)
 801590c:	9300      	str	r3, [sp, #0]
 801590e:	4b15      	ldr	r3, [pc, #84]	; (8015964 <tcp_input+0x814>)
 8015910:	4602      	mov	r2, r0
 8015912:	2000      	movs	r0, #0
 8015914:	f003 f81c 	bl	8018950 <tcp_rst>
    pbuf_free(p);
 8015918:	6878      	ldr	r0, [r7, #4]
 801591a:	f7fd fdd5 	bl	80134c8 <pbuf_free>
  return;
 801591e:	e00c      	b.n	801593a <tcp_input+0x7ea>
    goto dropped;
 8015920:	bf00      	nop
 8015922:	e006      	b.n	8015932 <tcp_input+0x7e2>
    goto dropped;
 8015924:	bf00      	nop
 8015926:	e004      	b.n	8015932 <tcp_input+0x7e2>
    goto dropped;
 8015928:	bf00      	nop
 801592a:	e002      	b.n	8015932 <tcp_input+0x7e2>
      goto dropped;
 801592c:	bf00      	nop
 801592e:	e000      	b.n	8015932 <tcp_input+0x7e2>
      goto dropped;
 8015930:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 8015932:	6878      	ldr	r0, [r7, #4]
 8015934:	f7fd fdc8 	bl	80134c8 <pbuf_free>
 8015938:	e000      	b.n	801593c <tcp_input+0x7ec>
  return;
 801593a:	bf00      	nop
}
 801593c:	3724      	adds	r7, #36	; 0x24
 801593e:	46bd      	mov	sp, r7
 8015940:	bd90      	pop	{r4, r7, pc}
 8015942:	bf00      	nop
 8015944:	20024098 	.word	0x20024098
 8015948:	20024094 	.word	0x20024094
 801594c:	20024064 	.word	0x20024064
 8015950:	20024074 	.word	0x20024074
 8015954:	20024088 	.word	0x20024088
 8015958:	2002408e 	.word	0x2002408e
 801595c:	20024084 	.word	0x20024084
 8015960:	2001e778 	.word	0x2001e778
 8015964:	2001e77c 	.word	0x2001e77c

08015968 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 8015968:	b580      	push	{r7, lr}
 801596a:	b082      	sub	sp, #8
 801596c:	af00      	add	r7, sp, #0
 801596e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 8015970:	687b      	ldr	r3, [r7, #4]
 8015972:	2b00      	cmp	r3, #0
 8015974:	d106      	bne.n	8015984 <tcp_input_delayed_close+0x1c>
 8015976:	4b17      	ldr	r3, [pc, #92]	; (80159d4 <tcp_input_delayed_close+0x6c>)
 8015978:	f240 225a 	movw	r2, #602	; 0x25a
 801597c:	4916      	ldr	r1, [pc, #88]	; (80159d8 <tcp_input_delayed_close+0x70>)
 801597e:	4817      	ldr	r0, [pc, #92]	; (80159dc <tcp_input_delayed_close+0x74>)
 8015980:	f007 fd94 	bl	801d4ac <iprintf>

  if (recv_flags & TF_CLOSED) {
 8015984:	4b16      	ldr	r3, [pc, #88]	; (80159e0 <tcp_input_delayed_close+0x78>)
 8015986:	781b      	ldrb	r3, [r3, #0]
 8015988:	f003 0310 	and.w	r3, r3, #16
 801598c:	2b00      	cmp	r3, #0
 801598e:	d01c      	beq.n	80159ca <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 8015990:	687b      	ldr	r3, [r7, #4]
 8015992:	8b5b      	ldrh	r3, [r3, #26]
 8015994:	f003 0310 	and.w	r3, r3, #16
 8015998:	2b00      	cmp	r3, #0
 801599a:	d10d      	bne.n	80159b8 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 801599c:	687b      	ldr	r3, [r7, #4]
 801599e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80159a2:	2b00      	cmp	r3, #0
 80159a4:	d008      	beq.n	80159b8 <tcp_input_delayed_close+0x50>
 80159a6:	687b      	ldr	r3, [r7, #4]
 80159a8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 80159ac:	687a      	ldr	r2, [r7, #4]
 80159ae:	6912      	ldr	r2, [r2, #16]
 80159b0:	f06f 010e 	mvn.w	r1, #14
 80159b4:	4610      	mov	r0, r2
 80159b6:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 80159b8:	6879      	ldr	r1, [r7, #4]
 80159ba:	480a      	ldr	r0, [pc, #40]	; (80159e4 <tcp_input_delayed_close+0x7c>)
 80159bc:	f7ff fa50 	bl	8014e60 <tcp_pcb_remove>
    tcp_free(pcb);
 80159c0:	6878      	ldr	r0, [r7, #4]
 80159c2:	f7fe f83d 	bl	8013a40 <tcp_free>
    return 1;
 80159c6:	2301      	movs	r3, #1
 80159c8:	e000      	b.n	80159cc <tcp_input_delayed_close+0x64>
  }
  return 0;
 80159ca:	2300      	movs	r3, #0
}
 80159cc:	4618      	mov	r0, r3
 80159ce:	3708      	adds	r7, #8
 80159d0:	46bd      	mov	sp, r7
 80159d2:	bd80      	pop	{r7, pc}
 80159d4:	0801f768 	.word	0x0801f768
 80159d8:	0801f938 	.word	0x0801f938
 80159dc:	0801f7b4 	.word	0x0801f7b4
 80159e0:	20024091 	.word	0x20024091
 80159e4:	20024058 	.word	0x20024058

080159e8 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 80159e8:	b590      	push	{r4, r7, lr}
 80159ea:	b08b      	sub	sp, #44	; 0x2c
 80159ec:	af04      	add	r7, sp, #16
 80159ee:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 80159f0:	4b6f      	ldr	r3, [pc, #444]	; (8015bb0 <tcp_listen_input+0x1c8>)
 80159f2:	781b      	ldrb	r3, [r3, #0]
 80159f4:	f003 0304 	and.w	r3, r3, #4
 80159f8:	2b00      	cmp	r3, #0
 80159fa:	f040 80d2 	bne.w	8015ba2 <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 80159fe:	687b      	ldr	r3, [r7, #4]
 8015a00:	2b00      	cmp	r3, #0
 8015a02:	d106      	bne.n	8015a12 <tcp_listen_input+0x2a>
 8015a04:	4b6b      	ldr	r3, [pc, #428]	; (8015bb4 <tcp_listen_input+0x1cc>)
 8015a06:	f240 2281 	movw	r2, #641	; 0x281
 8015a0a:	496b      	ldr	r1, [pc, #428]	; (8015bb8 <tcp_listen_input+0x1d0>)
 8015a0c:	486b      	ldr	r0, [pc, #428]	; (8015bbc <tcp_listen_input+0x1d4>)
 8015a0e:	f007 fd4d 	bl	801d4ac <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 8015a12:	4b67      	ldr	r3, [pc, #412]	; (8015bb0 <tcp_listen_input+0x1c8>)
 8015a14:	781b      	ldrb	r3, [r3, #0]
 8015a16:	f003 0310 	and.w	r3, r3, #16
 8015a1a:	2b00      	cmp	r3, #0
 8015a1c:	d019      	beq.n	8015a52 <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015a1e:	4b68      	ldr	r3, [pc, #416]	; (8015bc0 <tcp_listen_input+0x1d8>)
 8015a20:	6819      	ldr	r1, [r3, #0]
 8015a22:	4b68      	ldr	r3, [pc, #416]	; (8015bc4 <tcp_listen_input+0x1dc>)
 8015a24:	881b      	ldrh	r3, [r3, #0]
 8015a26:	461a      	mov	r2, r3
 8015a28:	4b67      	ldr	r3, [pc, #412]	; (8015bc8 <tcp_listen_input+0x1e0>)
 8015a2a:	681b      	ldr	r3, [r3, #0]
 8015a2c:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015a2e:	4b67      	ldr	r3, [pc, #412]	; (8015bcc <tcp_listen_input+0x1e4>)
 8015a30:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015a32:	885b      	ldrh	r3, [r3, #2]
 8015a34:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015a36:	4a65      	ldr	r2, [pc, #404]	; (8015bcc <tcp_listen_input+0x1e4>)
 8015a38:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015a3a:	8812      	ldrh	r2, [r2, #0]
 8015a3c:	b292      	uxth	r2, r2
 8015a3e:	9202      	str	r2, [sp, #8]
 8015a40:	9301      	str	r3, [sp, #4]
 8015a42:	4b63      	ldr	r3, [pc, #396]	; (8015bd0 <tcp_listen_input+0x1e8>)
 8015a44:	9300      	str	r3, [sp, #0]
 8015a46:	4b63      	ldr	r3, [pc, #396]	; (8015bd4 <tcp_listen_input+0x1ec>)
 8015a48:	4602      	mov	r2, r0
 8015a4a:	6878      	ldr	r0, [r7, #4]
 8015a4c:	f002 ff80 	bl	8018950 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 8015a50:	e0a9      	b.n	8015ba6 <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 8015a52:	4b57      	ldr	r3, [pc, #348]	; (8015bb0 <tcp_listen_input+0x1c8>)
 8015a54:	781b      	ldrb	r3, [r3, #0]
 8015a56:	f003 0302 	and.w	r3, r3, #2
 8015a5a:	2b00      	cmp	r3, #0
 8015a5c:	f000 80a3 	beq.w	8015ba6 <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 8015a60:	687b      	ldr	r3, [r7, #4]
 8015a62:	7d5b      	ldrb	r3, [r3, #21]
 8015a64:	4618      	mov	r0, r3
 8015a66:	f7ff f927 	bl	8014cb8 <tcp_alloc>
 8015a6a:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 8015a6c:	697b      	ldr	r3, [r7, #20]
 8015a6e:	2b00      	cmp	r3, #0
 8015a70:	d111      	bne.n	8015a96 <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8015a72:	687b      	ldr	r3, [r7, #4]
 8015a74:	699b      	ldr	r3, [r3, #24]
 8015a76:	2b00      	cmp	r3, #0
 8015a78:	d00a      	beq.n	8015a90 <tcp_listen_input+0xa8>
 8015a7a:	687b      	ldr	r3, [r7, #4]
 8015a7c:	699b      	ldr	r3, [r3, #24]
 8015a7e:	687a      	ldr	r2, [r7, #4]
 8015a80:	6910      	ldr	r0, [r2, #16]
 8015a82:	f04f 32ff 	mov.w	r2, #4294967295
 8015a86:	2100      	movs	r1, #0
 8015a88:	4798      	blx	r3
 8015a8a:	4603      	mov	r3, r0
 8015a8c:	73bb      	strb	r3, [r7, #14]
      return;
 8015a8e:	e08b      	b.n	8015ba8 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 8015a90:	23f0      	movs	r3, #240	; 0xf0
 8015a92:	73bb      	strb	r3, [r7, #14]
      return;
 8015a94:	e088      	b.n	8015ba8 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 8015a96:	4b50      	ldr	r3, [pc, #320]	; (8015bd8 <tcp_listen_input+0x1f0>)
 8015a98:	695a      	ldr	r2, [r3, #20]
 8015a9a:	697b      	ldr	r3, [r7, #20]
 8015a9c:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 8015a9e:	4b4e      	ldr	r3, [pc, #312]	; (8015bd8 <tcp_listen_input+0x1f0>)
 8015aa0:	691a      	ldr	r2, [r3, #16]
 8015aa2:	697b      	ldr	r3, [r7, #20]
 8015aa4:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 8015aa6:	687b      	ldr	r3, [r7, #4]
 8015aa8:	8ada      	ldrh	r2, [r3, #22]
 8015aaa:	697b      	ldr	r3, [r7, #20]
 8015aac:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 8015aae:	4b47      	ldr	r3, [pc, #284]	; (8015bcc <tcp_listen_input+0x1e4>)
 8015ab0:	681b      	ldr	r3, [r3, #0]
 8015ab2:	881b      	ldrh	r3, [r3, #0]
 8015ab4:	b29a      	uxth	r2, r3
 8015ab6:	697b      	ldr	r3, [r7, #20]
 8015ab8:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 8015aba:	697b      	ldr	r3, [r7, #20]
 8015abc:	2203      	movs	r2, #3
 8015abe:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 8015ac0:	4b41      	ldr	r3, [pc, #260]	; (8015bc8 <tcp_listen_input+0x1e0>)
 8015ac2:	681b      	ldr	r3, [r3, #0]
 8015ac4:	1c5a      	adds	r2, r3, #1
 8015ac6:	697b      	ldr	r3, [r7, #20]
 8015ac8:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 8015aca:	697b      	ldr	r3, [r7, #20]
 8015acc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015ace:	697b      	ldr	r3, [r7, #20]
 8015ad0:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 8015ad2:	6978      	ldr	r0, [r7, #20]
 8015ad4:	f7ff fa58 	bl	8014f88 <tcp_next_iss>
 8015ad8:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 8015ada:	697b      	ldr	r3, [r7, #20]
 8015adc:	693a      	ldr	r2, [r7, #16]
 8015ade:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 8015ae0:	697b      	ldr	r3, [r7, #20]
 8015ae2:	693a      	ldr	r2, [r7, #16]
 8015ae4:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 8015ae6:	697b      	ldr	r3, [r7, #20]
 8015ae8:	693a      	ldr	r2, [r7, #16]
 8015aea:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 8015aec:	697b      	ldr	r3, [r7, #20]
 8015aee:	693a      	ldr	r2, [r7, #16]
 8015af0:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 8015af2:	4b35      	ldr	r3, [pc, #212]	; (8015bc8 <tcp_listen_input+0x1e0>)
 8015af4:	681b      	ldr	r3, [r3, #0]
 8015af6:	1e5a      	subs	r2, r3, #1
 8015af8:	697b      	ldr	r3, [r7, #20]
 8015afa:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 8015afc:	687b      	ldr	r3, [r7, #4]
 8015afe:	691a      	ldr	r2, [r3, #16]
 8015b00:	697b      	ldr	r3, [r7, #20]
 8015b02:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 8015b04:	697b      	ldr	r3, [r7, #20]
 8015b06:	687a      	ldr	r2, [r7, #4]
 8015b08:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 8015b0a:	687b      	ldr	r3, [r7, #4]
 8015b0c:	7a5b      	ldrb	r3, [r3, #9]
 8015b0e:	f003 030c 	and.w	r3, r3, #12
 8015b12:	b2da      	uxtb	r2, r3
 8015b14:	697b      	ldr	r3, [r7, #20]
 8015b16:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 8015b18:	687b      	ldr	r3, [r7, #4]
 8015b1a:	7a1a      	ldrb	r2, [r3, #8]
 8015b1c:	697b      	ldr	r3, [r7, #20]
 8015b1e:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 8015b20:	4b2e      	ldr	r3, [pc, #184]	; (8015bdc <tcp_listen_input+0x1f4>)
 8015b22:	681a      	ldr	r2, [r3, #0]
 8015b24:	697b      	ldr	r3, [r7, #20]
 8015b26:	60da      	str	r2, [r3, #12]
 8015b28:	4a2c      	ldr	r2, [pc, #176]	; (8015bdc <tcp_listen_input+0x1f4>)
 8015b2a:	697b      	ldr	r3, [r7, #20]
 8015b2c:	6013      	str	r3, [r2, #0]
 8015b2e:	f003 f8d1 	bl	8018cd4 <tcp_timer_needed>
 8015b32:	4b2b      	ldr	r3, [pc, #172]	; (8015be0 <tcp_listen_input+0x1f8>)
 8015b34:	2201      	movs	r2, #1
 8015b36:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 8015b38:	6978      	ldr	r0, [r7, #20]
 8015b3a:	f001 fd8f 	bl	801765c <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 8015b3e:	4b23      	ldr	r3, [pc, #140]	; (8015bcc <tcp_listen_input+0x1e4>)
 8015b40:	681b      	ldr	r3, [r3, #0]
 8015b42:	89db      	ldrh	r3, [r3, #14]
 8015b44:	b29a      	uxth	r2, r3
 8015b46:	697b      	ldr	r3, [r7, #20]
 8015b48:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 8015b4c:	697b      	ldr	r3, [r7, #20]
 8015b4e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015b52:	697b      	ldr	r3, [r7, #20]
 8015b54:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 8015b58:	697b      	ldr	r3, [r7, #20]
 8015b5a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8015b5c:	697b      	ldr	r3, [r7, #20]
 8015b5e:	3304      	adds	r3, #4
 8015b60:	4618      	mov	r0, r3
 8015b62:	f004 ffb5 	bl	801aad0 <ip4_route>
 8015b66:	4601      	mov	r1, r0
 8015b68:	697b      	ldr	r3, [r7, #20]
 8015b6a:	3304      	adds	r3, #4
 8015b6c:	461a      	mov	r2, r3
 8015b6e:	4620      	mov	r0, r4
 8015b70:	f7ff fa30 	bl	8014fd4 <tcp_eff_send_mss_netif>
 8015b74:	4603      	mov	r3, r0
 8015b76:	461a      	mov	r2, r3
 8015b78:	697b      	ldr	r3, [r7, #20]
 8015b7a:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 8015b7c:	2112      	movs	r1, #18
 8015b7e:	6978      	ldr	r0, [r7, #20]
 8015b80:	f002 f844 	bl	8017c0c <tcp_enqueue_flags>
 8015b84:	4603      	mov	r3, r0
 8015b86:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 8015b88:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8015b8c:	2b00      	cmp	r3, #0
 8015b8e:	d004      	beq.n	8015b9a <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 8015b90:	2100      	movs	r1, #0
 8015b92:	6978      	ldr	r0, [r7, #20]
 8015b94:	f7fe f97e 	bl	8013e94 <tcp_abandon>
      return;
 8015b98:	e006      	b.n	8015ba8 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 8015b9a:	6978      	ldr	r0, [r7, #20]
 8015b9c:	f002 f924 	bl	8017de8 <tcp_output>
  return;
 8015ba0:	e001      	b.n	8015ba6 <tcp_listen_input+0x1be>
    return;
 8015ba2:	bf00      	nop
 8015ba4:	e000      	b.n	8015ba8 <tcp_listen_input+0x1c0>
  return;
 8015ba6:	bf00      	nop
}
 8015ba8:	371c      	adds	r7, #28
 8015baa:	46bd      	mov	sp, r7
 8015bac:	bd90      	pop	{r4, r7, pc}
 8015bae:	bf00      	nop
 8015bb0:	20024090 	.word	0x20024090
 8015bb4:	0801f768 	.word	0x0801f768
 8015bb8:	0801f960 	.word	0x0801f960
 8015bbc:	0801f7b4 	.word	0x0801f7b4
 8015bc0:	20024088 	.word	0x20024088
 8015bc4:	2002408e 	.word	0x2002408e
 8015bc8:	20024084 	.word	0x20024084
 8015bcc:	20024074 	.word	0x20024074
 8015bd0:	2001e778 	.word	0x2001e778
 8015bd4:	2001e77c 	.word	0x2001e77c
 8015bd8:	2001e768 	.word	0x2001e768
 8015bdc:	20024058 	.word	0x20024058
 8015be0:	20024060 	.word	0x20024060

08015be4 <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 8015be4:	b580      	push	{r7, lr}
 8015be6:	b086      	sub	sp, #24
 8015be8:	af04      	add	r7, sp, #16
 8015bea:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 8015bec:	4b2f      	ldr	r3, [pc, #188]	; (8015cac <tcp_timewait_input+0xc8>)
 8015bee:	781b      	ldrb	r3, [r3, #0]
 8015bf0:	f003 0304 	and.w	r3, r3, #4
 8015bf4:	2b00      	cmp	r3, #0
 8015bf6:	d153      	bne.n	8015ca0 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 8015bf8:	687b      	ldr	r3, [r7, #4]
 8015bfa:	2b00      	cmp	r3, #0
 8015bfc:	d106      	bne.n	8015c0c <tcp_timewait_input+0x28>
 8015bfe:	4b2c      	ldr	r3, [pc, #176]	; (8015cb0 <tcp_timewait_input+0xcc>)
 8015c00:	f240 22ee 	movw	r2, #750	; 0x2ee
 8015c04:	492b      	ldr	r1, [pc, #172]	; (8015cb4 <tcp_timewait_input+0xd0>)
 8015c06:	482c      	ldr	r0, [pc, #176]	; (8015cb8 <tcp_timewait_input+0xd4>)
 8015c08:	f007 fc50 	bl	801d4ac <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 8015c0c:	4b27      	ldr	r3, [pc, #156]	; (8015cac <tcp_timewait_input+0xc8>)
 8015c0e:	781b      	ldrb	r3, [r3, #0]
 8015c10:	f003 0302 	and.w	r3, r3, #2
 8015c14:	2b00      	cmp	r3, #0
 8015c16:	d02a      	beq.n	8015c6e <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 8015c18:	4b28      	ldr	r3, [pc, #160]	; (8015cbc <tcp_timewait_input+0xd8>)
 8015c1a:	681a      	ldr	r2, [r3, #0]
 8015c1c:	687b      	ldr	r3, [r7, #4]
 8015c1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c20:	1ad3      	subs	r3, r2, r3
 8015c22:	2b00      	cmp	r3, #0
 8015c24:	db2d      	blt.n	8015c82 <tcp_timewait_input+0x9e>
 8015c26:	4b25      	ldr	r3, [pc, #148]	; (8015cbc <tcp_timewait_input+0xd8>)
 8015c28:	681a      	ldr	r2, [r3, #0]
 8015c2a:	687b      	ldr	r3, [r7, #4]
 8015c2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015c2e:	6879      	ldr	r1, [r7, #4]
 8015c30:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015c32:	440b      	add	r3, r1
 8015c34:	1ad3      	subs	r3, r2, r3
 8015c36:	2b00      	cmp	r3, #0
 8015c38:	dc23      	bgt.n	8015c82 <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015c3a:	4b21      	ldr	r3, [pc, #132]	; (8015cc0 <tcp_timewait_input+0xdc>)
 8015c3c:	6819      	ldr	r1, [r3, #0]
 8015c3e:	4b21      	ldr	r3, [pc, #132]	; (8015cc4 <tcp_timewait_input+0xe0>)
 8015c40:	881b      	ldrh	r3, [r3, #0]
 8015c42:	461a      	mov	r2, r3
 8015c44:	4b1d      	ldr	r3, [pc, #116]	; (8015cbc <tcp_timewait_input+0xd8>)
 8015c46:	681b      	ldr	r3, [r3, #0]
 8015c48:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015c4a:	4b1f      	ldr	r3, [pc, #124]	; (8015cc8 <tcp_timewait_input+0xe4>)
 8015c4c:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015c4e:	885b      	ldrh	r3, [r3, #2]
 8015c50:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8015c52:	4a1d      	ldr	r2, [pc, #116]	; (8015cc8 <tcp_timewait_input+0xe4>)
 8015c54:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8015c56:	8812      	ldrh	r2, [r2, #0]
 8015c58:	b292      	uxth	r2, r2
 8015c5a:	9202      	str	r2, [sp, #8]
 8015c5c:	9301      	str	r3, [sp, #4]
 8015c5e:	4b1b      	ldr	r3, [pc, #108]	; (8015ccc <tcp_timewait_input+0xe8>)
 8015c60:	9300      	str	r3, [sp, #0]
 8015c62:	4b1b      	ldr	r3, [pc, #108]	; (8015cd0 <tcp_timewait_input+0xec>)
 8015c64:	4602      	mov	r2, r0
 8015c66:	6878      	ldr	r0, [r7, #4]
 8015c68:	f002 fe72 	bl	8018950 <tcp_rst>
      return;
 8015c6c:	e01b      	b.n	8015ca6 <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8015c6e:	4b0f      	ldr	r3, [pc, #60]	; (8015cac <tcp_timewait_input+0xc8>)
 8015c70:	781b      	ldrb	r3, [r3, #0]
 8015c72:	f003 0301 	and.w	r3, r3, #1
 8015c76:	2b00      	cmp	r3, #0
 8015c78:	d003      	beq.n	8015c82 <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8015c7a:	4b16      	ldr	r3, [pc, #88]	; (8015cd4 <tcp_timewait_input+0xf0>)
 8015c7c:	681a      	ldr	r2, [r3, #0]
 8015c7e:	687b      	ldr	r3, [r7, #4]
 8015c80:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 8015c82:	4b10      	ldr	r3, [pc, #64]	; (8015cc4 <tcp_timewait_input+0xe0>)
 8015c84:	881b      	ldrh	r3, [r3, #0]
 8015c86:	2b00      	cmp	r3, #0
 8015c88:	d00c      	beq.n	8015ca4 <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8015c8a:	687b      	ldr	r3, [r7, #4]
 8015c8c:	8b5b      	ldrh	r3, [r3, #26]
 8015c8e:	f043 0302 	orr.w	r3, r3, #2
 8015c92:	b29a      	uxth	r2, r3
 8015c94:	687b      	ldr	r3, [r7, #4]
 8015c96:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8015c98:	6878      	ldr	r0, [r7, #4]
 8015c9a:	f002 f8a5 	bl	8017de8 <tcp_output>
  }
  return;
 8015c9e:	e001      	b.n	8015ca4 <tcp_timewait_input+0xc0>
    return;
 8015ca0:	bf00      	nop
 8015ca2:	e000      	b.n	8015ca6 <tcp_timewait_input+0xc2>
  return;
 8015ca4:	bf00      	nop
}
 8015ca6:	3708      	adds	r7, #8
 8015ca8:	46bd      	mov	sp, r7
 8015caa:	bd80      	pop	{r7, pc}
 8015cac:	20024090 	.word	0x20024090
 8015cb0:	0801f768 	.word	0x0801f768
 8015cb4:	0801f980 	.word	0x0801f980
 8015cb8:	0801f7b4 	.word	0x0801f7b4
 8015cbc:	20024084 	.word	0x20024084
 8015cc0:	20024088 	.word	0x20024088
 8015cc4:	2002408e 	.word	0x2002408e
 8015cc8:	20024074 	.word	0x20024074
 8015ccc:	2001e778 	.word	0x2001e778
 8015cd0:	2001e77c 	.word	0x2001e77c
 8015cd4:	2002404c 	.word	0x2002404c

08015cd8 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 8015cd8:	b590      	push	{r4, r7, lr}
 8015cda:	b08d      	sub	sp, #52	; 0x34
 8015cdc:	af04      	add	r7, sp, #16
 8015cde:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 8015ce0:	2300      	movs	r3, #0
 8015ce2:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 8015ce4:	2300      	movs	r3, #0
 8015ce6:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 8015ce8:	687b      	ldr	r3, [r7, #4]
 8015cea:	2b00      	cmp	r3, #0
 8015cec:	d106      	bne.n	8015cfc <tcp_process+0x24>
 8015cee:	4b9d      	ldr	r3, [pc, #628]	; (8015f64 <tcp_process+0x28c>)
 8015cf0:	f44f 7247 	mov.w	r2, #796	; 0x31c
 8015cf4:	499c      	ldr	r1, [pc, #624]	; (8015f68 <tcp_process+0x290>)
 8015cf6:	489d      	ldr	r0, [pc, #628]	; (8015f6c <tcp_process+0x294>)
 8015cf8:	f007 fbd8 	bl	801d4ac <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 8015cfc:	4b9c      	ldr	r3, [pc, #624]	; (8015f70 <tcp_process+0x298>)
 8015cfe:	781b      	ldrb	r3, [r3, #0]
 8015d00:	f003 0304 	and.w	r3, r3, #4
 8015d04:	2b00      	cmp	r3, #0
 8015d06:	d04e      	beq.n	8015da6 <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 8015d08:	687b      	ldr	r3, [r7, #4]
 8015d0a:	7d1b      	ldrb	r3, [r3, #20]
 8015d0c:	2b02      	cmp	r3, #2
 8015d0e:	d108      	bne.n	8015d22 <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 8015d10:	687b      	ldr	r3, [r7, #4]
 8015d12:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8015d14:	4b97      	ldr	r3, [pc, #604]	; (8015f74 <tcp_process+0x29c>)
 8015d16:	681b      	ldr	r3, [r3, #0]
 8015d18:	429a      	cmp	r2, r3
 8015d1a:	d123      	bne.n	8015d64 <tcp_process+0x8c>
        acceptable = 1;
 8015d1c:	2301      	movs	r3, #1
 8015d1e:	76fb      	strb	r3, [r7, #27]
 8015d20:	e020      	b.n	8015d64 <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 8015d22:	687b      	ldr	r3, [r7, #4]
 8015d24:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015d26:	4b94      	ldr	r3, [pc, #592]	; (8015f78 <tcp_process+0x2a0>)
 8015d28:	681b      	ldr	r3, [r3, #0]
 8015d2a:	429a      	cmp	r2, r3
 8015d2c:	d102      	bne.n	8015d34 <tcp_process+0x5c>
        acceptable = 1;
 8015d2e:	2301      	movs	r3, #1
 8015d30:	76fb      	strb	r3, [r7, #27]
 8015d32:	e017      	b.n	8015d64 <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8015d34:	4b90      	ldr	r3, [pc, #576]	; (8015f78 <tcp_process+0x2a0>)
 8015d36:	681a      	ldr	r2, [r3, #0]
 8015d38:	687b      	ldr	r3, [r7, #4]
 8015d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d3c:	1ad3      	subs	r3, r2, r3
 8015d3e:	2b00      	cmp	r3, #0
 8015d40:	db10      	blt.n	8015d64 <tcp_process+0x8c>
 8015d42:	4b8d      	ldr	r3, [pc, #564]	; (8015f78 <tcp_process+0x2a0>)
 8015d44:	681a      	ldr	r2, [r3, #0]
 8015d46:	687b      	ldr	r3, [r7, #4]
 8015d48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8015d4a:	6879      	ldr	r1, [r7, #4]
 8015d4c:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8015d4e:	440b      	add	r3, r1
 8015d50:	1ad3      	subs	r3, r2, r3
 8015d52:	2b00      	cmp	r3, #0
 8015d54:	dc06      	bgt.n	8015d64 <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 8015d56:	687b      	ldr	r3, [r7, #4]
 8015d58:	8b5b      	ldrh	r3, [r3, #26]
 8015d5a:	f043 0302 	orr.w	r3, r3, #2
 8015d5e:	b29a      	uxth	r2, r3
 8015d60:	687b      	ldr	r3, [r7, #4]
 8015d62:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 8015d64:	7efb      	ldrb	r3, [r7, #27]
 8015d66:	2b00      	cmp	r3, #0
 8015d68:	d01b      	beq.n	8015da2 <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8015d6a:	687b      	ldr	r3, [r7, #4]
 8015d6c:	7d1b      	ldrb	r3, [r3, #20]
 8015d6e:	2b00      	cmp	r3, #0
 8015d70:	d106      	bne.n	8015d80 <tcp_process+0xa8>
 8015d72:	4b7c      	ldr	r3, [pc, #496]	; (8015f64 <tcp_process+0x28c>)
 8015d74:	f44f 724e 	mov.w	r2, #824	; 0x338
 8015d78:	4980      	ldr	r1, [pc, #512]	; (8015f7c <tcp_process+0x2a4>)
 8015d7a:	487c      	ldr	r0, [pc, #496]	; (8015f6c <tcp_process+0x294>)
 8015d7c:	f007 fb96 	bl	801d4ac <iprintf>
      recv_flags |= TF_RESET;
 8015d80:	4b7f      	ldr	r3, [pc, #508]	; (8015f80 <tcp_process+0x2a8>)
 8015d82:	781b      	ldrb	r3, [r3, #0]
 8015d84:	f043 0308 	orr.w	r3, r3, #8
 8015d88:	b2da      	uxtb	r2, r3
 8015d8a:	4b7d      	ldr	r3, [pc, #500]	; (8015f80 <tcp_process+0x2a8>)
 8015d8c:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8015d8e:	687b      	ldr	r3, [r7, #4]
 8015d90:	8b5b      	ldrh	r3, [r3, #26]
 8015d92:	f023 0301 	bic.w	r3, r3, #1
 8015d96:	b29a      	uxth	r2, r3
 8015d98:	687b      	ldr	r3, [r7, #4]
 8015d9a:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8015d9c:	f06f 030d 	mvn.w	r3, #13
 8015da0:	e37a      	b.n	8016498 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 8015da2:	2300      	movs	r3, #0
 8015da4:	e378      	b.n	8016498 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 8015da6:	4b72      	ldr	r3, [pc, #456]	; (8015f70 <tcp_process+0x298>)
 8015da8:	781b      	ldrb	r3, [r3, #0]
 8015daa:	f003 0302 	and.w	r3, r3, #2
 8015dae:	2b00      	cmp	r3, #0
 8015db0:	d010      	beq.n	8015dd4 <tcp_process+0xfc>
 8015db2:	687b      	ldr	r3, [r7, #4]
 8015db4:	7d1b      	ldrb	r3, [r3, #20]
 8015db6:	2b02      	cmp	r3, #2
 8015db8:	d00c      	beq.n	8015dd4 <tcp_process+0xfc>
 8015dba:	687b      	ldr	r3, [r7, #4]
 8015dbc:	7d1b      	ldrb	r3, [r3, #20]
 8015dbe:	2b03      	cmp	r3, #3
 8015dc0:	d008      	beq.n	8015dd4 <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 8015dc2:	687b      	ldr	r3, [r7, #4]
 8015dc4:	8b5b      	ldrh	r3, [r3, #26]
 8015dc6:	f043 0302 	orr.w	r3, r3, #2
 8015dca:	b29a      	uxth	r2, r3
 8015dcc:	687b      	ldr	r3, [r7, #4]
 8015dce:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8015dd0:	2300      	movs	r3, #0
 8015dd2:	e361      	b.n	8016498 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 8015dd4:	687b      	ldr	r3, [r7, #4]
 8015dd6:	8b5b      	ldrh	r3, [r3, #26]
 8015dd8:	f003 0310 	and.w	r3, r3, #16
 8015ddc:	2b00      	cmp	r3, #0
 8015dde:	d103      	bne.n	8015de8 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 8015de0:	4b68      	ldr	r3, [pc, #416]	; (8015f84 <tcp_process+0x2ac>)
 8015de2:	681a      	ldr	r2, [r3, #0]
 8015de4:	687b      	ldr	r3, [r7, #4]
 8015de6:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 8015de8:	687b      	ldr	r3, [r7, #4]
 8015dea:	2200      	movs	r2, #0
 8015dec:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 8015df0:	687b      	ldr	r3, [r7, #4]
 8015df2:	2200      	movs	r2, #0
 8015df4:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 8015df8:	6878      	ldr	r0, [r7, #4]
 8015dfa:	f001 fc2f 	bl	801765c <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 8015dfe:	687b      	ldr	r3, [r7, #4]
 8015e00:	7d1b      	ldrb	r3, [r3, #20]
 8015e02:	3b02      	subs	r3, #2
 8015e04:	2b07      	cmp	r3, #7
 8015e06:	f200 8337 	bhi.w	8016478 <tcp_process+0x7a0>
 8015e0a:	a201      	add	r2, pc, #4	; (adr r2, 8015e10 <tcp_process+0x138>)
 8015e0c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8015e10:	08015e31 	.word	0x08015e31
 8015e14:	08016061 	.word	0x08016061
 8015e18:	080161d9 	.word	0x080161d9
 8015e1c:	08016203 	.word	0x08016203
 8015e20:	08016327 	.word	0x08016327
 8015e24:	080161d9 	.word	0x080161d9
 8015e28:	080163b3 	.word	0x080163b3
 8015e2c:	08016443 	.word	0x08016443
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 8015e30:	4b4f      	ldr	r3, [pc, #316]	; (8015f70 <tcp_process+0x298>)
 8015e32:	781b      	ldrb	r3, [r3, #0]
 8015e34:	f003 0310 	and.w	r3, r3, #16
 8015e38:	2b00      	cmp	r3, #0
 8015e3a:	f000 80e4 	beq.w	8016006 <tcp_process+0x32e>
 8015e3e:	4b4c      	ldr	r3, [pc, #304]	; (8015f70 <tcp_process+0x298>)
 8015e40:	781b      	ldrb	r3, [r3, #0]
 8015e42:	f003 0302 	and.w	r3, r3, #2
 8015e46:	2b00      	cmp	r3, #0
 8015e48:	f000 80dd 	beq.w	8016006 <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8015e4c:	687b      	ldr	r3, [r7, #4]
 8015e4e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8015e50:	1c5a      	adds	r2, r3, #1
 8015e52:	4b48      	ldr	r3, [pc, #288]	; (8015f74 <tcp_process+0x29c>)
 8015e54:	681b      	ldr	r3, [r3, #0]
 8015e56:	429a      	cmp	r2, r3
 8015e58:	f040 80d5 	bne.w	8016006 <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8015e5c:	4b46      	ldr	r3, [pc, #280]	; (8015f78 <tcp_process+0x2a0>)
 8015e5e:	681b      	ldr	r3, [r3, #0]
 8015e60:	1c5a      	adds	r2, r3, #1
 8015e62:	687b      	ldr	r3, [r7, #4]
 8015e64:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 8015e66:	687b      	ldr	r3, [r7, #4]
 8015e68:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8015e6a:	687b      	ldr	r3, [r7, #4]
 8015e6c:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8015e6e:	4b41      	ldr	r3, [pc, #260]	; (8015f74 <tcp_process+0x29c>)
 8015e70:	681a      	ldr	r2, [r3, #0]
 8015e72:	687b      	ldr	r3, [r7, #4]
 8015e74:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 8015e76:	4b44      	ldr	r3, [pc, #272]	; (8015f88 <tcp_process+0x2b0>)
 8015e78:	681b      	ldr	r3, [r3, #0]
 8015e7a:	89db      	ldrh	r3, [r3, #14]
 8015e7c:	b29a      	uxth	r2, r3
 8015e7e:	687b      	ldr	r3, [r7, #4]
 8015e80:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 8015e84:	687b      	ldr	r3, [r7, #4]
 8015e86:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8015e8a:	687b      	ldr	r3, [r7, #4]
 8015e8c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8015e90:	4b39      	ldr	r3, [pc, #228]	; (8015f78 <tcp_process+0x2a0>)
 8015e92:	681b      	ldr	r3, [r3, #0]
 8015e94:	1e5a      	subs	r2, r3, #1
 8015e96:	687b      	ldr	r3, [r7, #4]
 8015e98:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8015e9a:	687b      	ldr	r3, [r7, #4]
 8015e9c:	2204      	movs	r2, #4
 8015e9e:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8015ea0:	687b      	ldr	r3, [r7, #4]
 8015ea2:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 8015ea4:	687b      	ldr	r3, [r7, #4]
 8015ea6:	3304      	adds	r3, #4
 8015ea8:	4618      	mov	r0, r3
 8015eaa:	f004 fe11 	bl	801aad0 <ip4_route>
 8015eae:	4601      	mov	r1, r0
 8015eb0:	687b      	ldr	r3, [r7, #4]
 8015eb2:	3304      	adds	r3, #4
 8015eb4:	461a      	mov	r2, r3
 8015eb6:	4620      	mov	r0, r4
 8015eb8:	f7ff f88c 	bl	8014fd4 <tcp_eff_send_mss_netif>
 8015ebc:	4603      	mov	r3, r0
 8015ebe:	461a      	mov	r2, r3
 8015ec0:	687b      	ldr	r3, [r7, #4]
 8015ec2:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8015ec4:	687b      	ldr	r3, [r7, #4]
 8015ec6:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015ec8:	009a      	lsls	r2, r3, #2
 8015eca:	687b      	ldr	r3, [r7, #4]
 8015ecc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015ece:	005b      	lsls	r3, r3, #1
 8015ed0:	f241 111c 	movw	r1, #4380	; 0x111c
 8015ed4:	428b      	cmp	r3, r1
 8015ed6:	bf38      	it	cc
 8015ed8:	460b      	movcc	r3, r1
 8015eda:	429a      	cmp	r2, r3
 8015edc:	d204      	bcs.n	8015ee8 <tcp_process+0x210>
 8015ede:	687b      	ldr	r3, [r7, #4]
 8015ee0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015ee2:	009b      	lsls	r3, r3, #2
 8015ee4:	b29b      	uxth	r3, r3
 8015ee6:	e00d      	b.n	8015f04 <tcp_process+0x22c>
 8015ee8:	687b      	ldr	r3, [r7, #4]
 8015eea:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015eec:	005b      	lsls	r3, r3, #1
 8015eee:	f241 121c 	movw	r2, #4380	; 0x111c
 8015ef2:	4293      	cmp	r3, r2
 8015ef4:	d904      	bls.n	8015f00 <tcp_process+0x228>
 8015ef6:	687b      	ldr	r3, [r7, #4]
 8015ef8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8015efa:	005b      	lsls	r3, r3, #1
 8015efc:	b29b      	uxth	r3, r3
 8015efe:	e001      	b.n	8015f04 <tcp_process+0x22c>
 8015f00:	f241 131c 	movw	r3, #4380	; 0x111c
 8015f04:	687a      	ldr	r2, [r7, #4]
 8015f06:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 8015f0a:	687b      	ldr	r3, [r7, #4]
 8015f0c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015f10:	2b00      	cmp	r3, #0
 8015f12:	d106      	bne.n	8015f22 <tcp_process+0x24a>
 8015f14:	4b13      	ldr	r3, [pc, #76]	; (8015f64 <tcp_process+0x28c>)
 8015f16:	f44f 725b 	mov.w	r2, #876	; 0x36c
 8015f1a:	491c      	ldr	r1, [pc, #112]	; (8015f8c <tcp_process+0x2b4>)
 8015f1c:	4813      	ldr	r0, [pc, #76]	; (8015f6c <tcp_process+0x294>)
 8015f1e:	f007 fac5 	bl	801d4ac <iprintf>
        --pcb->snd_queuelen;
 8015f22:	687b      	ldr	r3, [r7, #4]
 8015f24:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8015f28:	3b01      	subs	r3, #1
 8015f2a:	b29a      	uxth	r2, r3
 8015f2c:	687b      	ldr	r3, [r7, #4]
 8015f2e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 8015f32:	687b      	ldr	r3, [r7, #4]
 8015f34:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015f36:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8015f38:	69fb      	ldr	r3, [r7, #28]
 8015f3a:	2b00      	cmp	r3, #0
 8015f3c:	d12a      	bne.n	8015f94 <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8015f3e:	687b      	ldr	r3, [r7, #4]
 8015f40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8015f42:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 8015f44:	69fb      	ldr	r3, [r7, #28]
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d106      	bne.n	8015f58 <tcp_process+0x280>
 8015f4a:	4b06      	ldr	r3, [pc, #24]	; (8015f64 <tcp_process+0x28c>)
 8015f4c:	f44f 725d 	mov.w	r2, #884	; 0x374
 8015f50:	490f      	ldr	r1, [pc, #60]	; (8015f90 <tcp_process+0x2b8>)
 8015f52:	4806      	ldr	r0, [pc, #24]	; (8015f6c <tcp_process+0x294>)
 8015f54:	f007 faaa 	bl	801d4ac <iprintf>
          pcb->unsent = rseg->next;
 8015f58:	69fb      	ldr	r3, [r7, #28]
 8015f5a:	681a      	ldr	r2, [r3, #0]
 8015f5c:	687b      	ldr	r3, [r7, #4]
 8015f5e:	66da      	str	r2, [r3, #108]	; 0x6c
 8015f60:	e01c      	b.n	8015f9c <tcp_process+0x2c4>
 8015f62:	bf00      	nop
 8015f64:	0801f768 	.word	0x0801f768
 8015f68:	0801f9a0 	.word	0x0801f9a0
 8015f6c:	0801f7b4 	.word	0x0801f7b4
 8015f70:	20024090 	.word	0x20024090
 8015f74:	20024088 	.word	0x20024088
 8015f78:	20024084 	.word	0x20024084
 8015f7c:	0801f9bc 	.word	0x0801f9bc
 8015f80:	20024091 	.word	0x20024091
 8015f84:	2002404c 	.word	0x2002404c
 8015f88:	20024074 	.word	0x20024074
 8015f8c:	0801f9dc 	.word	0x0801f9dc
 8015f90:	0801f9f4 	.word	0x0801f9f4
        } else {
          pcb->unacked = rseg->next;
 8015f94:	69fb      	ldr	r3, [r7, #28]
 8015f96:	681a      	ldr	r2, [r3, #0]
 8015f98:	687b      	ldr	r3, [r7, #4]
 8015f9a:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8015f9c:	69f8      	ldr	r0, [r7, #28]
 8015f9e:	f7fe fd22 	bl	80149e6 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 8015fa2:	687b      	ldr	r3, [r7, #4]
 8015fa4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8015fa6:	2b00      	cmp	r3, #0
 8015fa8:	d104      	bne.n	8015fb4 <tcp_process+0x2dc>
          pcb->rtime = -1;
 8015faa:	687b      	ldr	r3, [r7, #4]
 8015fac:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8015fb0:	861a      	strh	r2, [r3, #48]	; 0x30
 8015fb2:	e006      	b.n	8015fc2 <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 8015fb4:	687b      	ldr	r3, [r7, #4]
 8015fb6:	2200      	movs	r2, #0
 8015fb8:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8015fba:	687b      	ldr	r3, [r7, #4]
 8015fbc:	2200      	movs	r2, #0
 8015fbe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 8015fc2:	687b      	ldr	r3, [r7, #4]
 8015fc4:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015fc8:	2b00      	cmp	r3, #0
 8015fca:	d00a      	beq.n	8015fe2 <tcp_process+0x30a>
 8015fcc:	687b      	ldr	r3, [r7, #4]
 8015fce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8015fd2:	687a      	ldr	r2, [r7, #4]
 8015fd4:	6910      	ldr	r0, [r2, #16]
 8015fd6:	2200      	movs	r2, #0
 8015fd8:	6879      	ldr	r1, [r7, #4]
 8015fda:	4798      	blx	r3
 8015fdc:	4603      	mov	r3, r0
 8015fde:	76bb      	strb	r3, [r7, #26]
 8015fe0:	e001      	b.n	8015fe6 <tcp_process+0x30e>
 8015fe2:	2300      	movs	r3, #0
 8015fe4:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 8015fe6:	f997 301a 	ldrsb.w	r3, [r7, #26]
 8015fea:	f113 0f0d 	cmn.w	r3, #13
 8015fee:	d102      	bne.n	8015ff6 <tcp_process+0x31e>
          return ERR_ABRT;
 8015ff0:	f06f 030c 	mvn.w	r3, #12
 8015ff4:	e250      	b.n	8016498 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 8015ff6:	687b      	ldr	r3, [r7, #4]
 8015ff8:	8b5b      	ldrh	r3, [r3, #26]
 8015ffa:	f043 0302 	orr.w	r3, r3, #2
 8015ffe:	b29a      	uxth	r2, r3
 8016000:	687b      	ldr	r3, [r7, #4]
 8016002:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 8016004:	e23a      	b.n	801647c <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 8016006:	4b98      	ldr	r3, [pc, #608]	; (8016268 <tcp_process+0x590>)
 8016008:	781b      	ldrb	r3, [r3, #0]
 801600a:	f003 0310 	and.w	r3, r3, #16
 801600e:	2b00      	cmp	r3, #0
 8016010:	f000 8234 	beq.w	801647c <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016014:	4b95      	ldr	r3, [pc, #596]	; (801626c <tcp_process+0x594>)
 8016016:	6819      	ldr	r1, [r3, #0]
 8016018:	4b95      	ldr	r3, [pc, #596]	; (8016270 <tcp_process+0x598>)
 801601a:	881b      	ldrh	r3, [r3, #0]
 801601c:	461a      	mov	r2, r3
 801601e:	4b95      	ldr	r3, [pc, #596]	; (8016274 <tcp_process+0x59c>)
 8016020:	681b      	ldr	r3, [r3, #0]
 8016022:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016024:	4b94      	ldr	r3, [pc, #592]	; (8016278 <tcp_process+0x5a0>)
 8016026:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016028:	885b      	ldrh	r3, [r3, #2]
 801602a:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801602c:	4a92      	ldr	r2, [pc, #584]	; (8016278 <tcp_process+0x5a0>)
 801602e:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016030:	8812      	ldrh	r2, [r2, #0]
 8016032:	b292      	uxth	r2, r2
 8016034:	9202      	str	r2, [sp, #8]
 8016036:	9301      	str	r3, [sp, #4]
 8016038:	4b90      	ldr	r3, [pc, #576]	; (801627c <tcp_process+0x5a4>)
 801603a:	9300      	str	r3, [sp, #0]
 801603c:	4b90      	ldr	r3, [pc, #576]	; (8016280 <tcp_process+0x5a8>)
 801603e:	4602      	mov	r2, r0
 8016040:	6878      	ldr	r0, [r7, #4]
 8016042:	f002 fc85 	bl	8018950 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 8016046:	687b      	ldr	r3, [r7, #4]
 8016048:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801604c:	2b05      	cmp	r3, #5
 801604e:	f200 8215 	bhi.w	801647c <tcp_process+0x7a4>
          pcb->rtime = 0;
 8016052:	687b      	ldr	r3, [r7, #4]
 8016054:	2200      	movs	r2, #0
 8016056:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8016058:	6878      	ldr	r0, [r7, #4]
 801605a:	f002 fa51 	bl	8018500 <tcp_rexmit_rto>
      break;
 801605e:	e20d      	b.n	801647c <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8016060:	4b81      	ldr	r3, [pc, #516]	; (8016268 <tcp_process+0x590>)
 8016062:	781b      	ldrb	r3, [r3, #0]
 8016064:	f003 0310 	and.w	r3, r3, #16
 8016068:	2b00      	cmp	r3, #0
 801606a:	f000 80a1 	beq.w	80161b0 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 801606e:	4b7f      	ldr	r3, [pc, #508]	; (801626c <tcp_process+0x594>)
 8016070:	681a      	ldr	r2, [r3, #0]
 8016072:	687b      	ldr	r3, [r7, #4]
 8016074:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8016076:	1ad3      	subs	r3, r2, r3
 8016078:	3b01      	subs	r3, #1
 801607a:	2b00      	cmp	r3, #0
 801607c:	db7e      	blt.n	801617c <tcp_process+0x4a4>
 801607e:	4b7b      	ldr	r3, [pc, #492]	; (801626c <tcp_process+0x594>)
 8016080:	681a      	ldr	r2, [r3, #0]
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8016086:	1ad3      	subs	r3, r2, r3
 8016088:	2b00      	cmp	r3, #0
 801608a:	dc77      	bgt.n	801617c <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 801608c:	687b      	ldr	r3, [r7, #4]
 801608e:	2204      	movs	r2, #4
 8016090:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 8016092:	687b      	ldr	r3, [r7, #4]
 8016094:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8016096:	2b00      	cmp	r3, #0
 8016098:	d102      	bne.n	80160a0 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 801609a:	23fa      	movs	r3, #250	; 0xfa
 801609c:	76bb      	strb	r3, [r7, #26]
 801609e:	e01d      	b.n	80160dc <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 80160a0:	687b      	ldr	r3, [r7, #4]
 80160a2:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80160a4:	699b      	ldr	r3, [r3, #24]
 80160a6:	2b00      	cmp	r3, #0
 80160a8:	d106      	bne.n	80160b8 <tcp_process+0x3e0>
 80160aa:	4b76      	ldr	r3, [pc, #472]	; (8016284 <tcp_process+0x5ac>)
 80160ac:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 80160b0:	4975      	ldr	r1, [pc, #468]	; (8016288 <tcp_process+0x5b0>)
 80160b2:	4876      	ldr	r0, [pc, #472]	; (801628c <tcp_process+0x5b4>)
 80160b4:	f007 f9fa 	bl	801d4ac <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 80160b8:	687b      	ldr	r3, [r7, #4]
 80160ba:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80160bc:	699b      	ldr	r3, [r3, #24]
 80160be:	2b00      	cmp	r3, #0
 80160c0:	d00a      	beq.n	80160d8 <tcp_process+0x400>
 80160c2:	687b      	ldr	r3, [r7, #4]
 80160c4:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 80160c6:	699b      	ldr	r3, [r3, #24]
 80160c8:	687a      	ldr	r2, [r7, #4]
 80160ca:	6910      	ldr	r0, [r2, #16]
 80160cc:	2200      	movs	r2, #0
 80160ce:	6879      	ldr	r1, [r7, #4]
 80160d0:	4798      	blx	r3
 80160d2:	4603      	mov	r3, r0
 80160d4:	76bb      	strb	r3, [r7, #26]
 80160d6:	e001      	b.n	80160dc <tcp_process+0x404>
 80160d8:	23f0      	movs	r3, #240	; 0xf0
 80160da:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80160dc:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80160e0:	2b00      	cmp	r3, #0
 80160e2:	d00a      	beq.n	80160fa <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80160e4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80160e8:	f113 0f0d 	cmn.w	r3, #13
 80160ec:	d002      	beq.n	80160f4 <tcp_process+0x41c>
              tcp_abort(pcb);
 80160ee:	6878      	ldr	r0, [r7, #4]
 80160f0:	f7fd ff8e 	bl	8014010 <tcp_abort>
            }
            return ERR_ABRT;
 80160f4:	f06f 030c 	mvn.w	r3, #12
 80160f8:	e1ce      	b.n	8016498 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80160fa:	6878      	ldr	r0, [r7, #4]
 80160fc:	f000 fae0 	bl	80166c0 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 8016100:	4b63      	ldr	r3, [pc, #396]	; (8016290 <tcp_process+0x5b8>)
 8016102:	881b      	ldrh	r3, [r3, #0]
 8016104:	2b00      	cmp	r3, #0
 8016106:	d005      	beq.n	8016114 <tcp_process+0x43c>
            recv_acked--;
 8016108:	4b61      	ldr	r3, [pc, #388]	; (8016290 <tcp_process+0x5b8>)
 801610a:	881b      	ldrh	r3, [r3, #0]
 801610c:	3b01      	subs	r3, #1
 801610e:	b29a      	uxth	r2, r3
 8016110:	4b5f      	ldr	r3, [pc, #380]	; (8016290 <tcp_process+0x5b8>)
 8016112:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 8016114:	687b      	ldr	r3, [r7, #4]
 8016116:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016118:	009a      	lsls	r2, r3, #2
 801611a:	687b      	ldr	r3, [r7, #4]
 801611c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801611e:	005b      	lsls	r3, r3, #1
 8016120:	f241 111c 	movw	r1, #4380	; 0x111c
 8016124:	428b      	cmp	r3, r1
 8016126:	bf38      	it	cc
 8016128:	460b      	movcc	r3, r1
 801612a:	429a      	cmp	r2, r3
 801612c:	d204      	bcs.n	8016138 <tcp_process+0x460>
 801612e:	687b      	ldr	r3, [r7, #4]
 8016130:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016132:	009b      	lsls	r3, r3, #2
 8016134:	b29b      	uxth	r3, r3
 8016136:	e00d      	b.n	8016154 <tcp_process+0x47c>
 8016138:	687b      	ldr	r3, [r7, #4]
 801613a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801613c:	005b      	lsls	r3, r3, #1
 801613e:	f241 121c 	movw	r2, #4380	; 0x111c
 8016142:	4293      	cmp	r3, r2
 8016144:	d904      	bls.n	8016150 <tcp_process+0x478>
 8016146:	687b      	ldr	r3, [r7, #4]
 8016148:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801614a:	005b      	lsls	r3, r3, #1
 801614c:	b29b      	uxth	r3, r3
 801614e:	e001      	b.n	8016154 <tcp_process+0x47c>
 8016150:	f241 131c 	movw	r3, #4380	; 0x111c
 8016154:	687a      	ldr	r2, [r7, #4]
 8016156:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 801615a:	4b4e      	ldr	r3, [pc, #312]	; (8016294 <tcp_process+0x5bc>)
 801615c:	781b      	ldrb	r3, [r3, #0]
 801615e:	f003 0320 	and.w	r3, r3, #32
 8016162:	2b00      	cmp	r3, #0
 8016164:	d037      	beq.n	80161d6 <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 8016166:	687b      	ldr	r3, [r7, #4]
 8016168:	8b5b      	ldrh	r3, [r3, #26]
 801616a:	f043 0302 	orr.w	r3, r3, #2
 801616e:	b29a      	uxth	r2, r3
 8016170:	687b      	ldr	r3, [r7, #4]
 8016172:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 8016174:	687b      	ldr	r3, [r7, #4]
 8016176:	2207      	movs	r2, #7
 8016178:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 801617a:	e02c      	b.n	80161d6 <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801617c:	4b3b      	ldr	r3, [pc, #236]	; (801626c <tcp_process+0x594>)
 801617e:	6819      	ldr	r1, [r3, #0]
 8016180:	4b3b      	ldr	r3, [pc, #236]	; (8016270 <tcp_process+0x598>)
 8016182:	881b      	ldrh	r3, [r3, #0]
 8016184:	461a      	mov	r2, r3
 8016186:	4b3b      	ldr	r3, [pc, #236]	; (8016274 <tcp_process+0x59c>)
 8016188:	681b      	ldr	r3, [r3, #0]
 801618a:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801618c:	4b3a      	ldr	r3, [pc, #232]	; (8016278 <tcp_process+0x5a0>)
 801618e:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016190:	885b      	ldrh	r3, [r3, #2]
 8016192:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8016194:	4a38      	ldr	r2, [pc, #224]	; (8016278 <tcp_process+0x5a0>)
 8016196:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8016198:	8812      	ldrh	r2, [r2, #0]
 801619a:	b292      	uxth	r2, r2
 801619c:	9202      	str	r2, [sp, #8]
 801619e:	9301      	str	r3, [sp, #4]
 80161a0:	4b36      	ldr	r3, [pc, #216]	; (801627c <tcp_process+0x5a4>)
 80161a2:	9300      	str	r3, [sp, #0]
 80161a4:	4b36      	ldr	r3, [pc, #216]	; (8016280 <tcp_process+0x5a8>)
 80161a6:	4602      	mov	r2, r0
 80161a8:	6878      	ldr	r0, [r7, #4]
 80161aa:	f002 fbd1 	bl	8018950 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 80161ae:	e167      	b.n	8016480 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 80161b0:	4b2d      	ldr	r3, [pc, #180]	; (8016268 <tcp_process+0x590>)
 80161b2:	781b      	ldrb	r3, [r3, #0]
 80161b4:	f003 0302 	and.w	r3, r3, #2
 80161b8:	2b00      	cmp	r3, #0
 80161ba:	f000 8161 	beq.w	8016480 <tcp_process+0x7a8>
 80161be:	687b      	ldr	r3, [r7, #4]
 80161c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80161c2:	1e5a      	subs	r2, r3, #1
 80161c4:	4b2b      	ldr	r3, [pc, #172]	; (8016274 <tcp_process+0x59c>)
 80161c6:	681b      	ldr	r3, [r3, #0]
 80161c8:	429a      	cmp	r2, r3
 80161ca:	f040 8159 	bne.w	8016480 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 80161ce:	6878      	ldr	r0, [r7, #4]
 80161d0:	f002 f9b8 	bl	8018544 <tcp_rexmit>
      break;
 80161d4:	e154      	b.n	8016480 <tcp_process+0x7a8>
 80161d6:	e153      	b.n	8016480 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80161d8:	6878      	ldr	r0, [r7, #4]
 80161da:	f000 fa71 	bl	80166c0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80161de:	4b2d      	ldr	r3, [pc, #180]	; (8016294 <tcp_process+0x5bc>)
 80161e0:	781b      	ldrb	r3, [r3, #0]
 80161e2:	f003 0320 	and.w	r3, r3, #32
 80161e6:	2b00      	cmp	r3, #0
 80161e8:	f000 814c 	beq.w	8016484 <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80161ec:	687b      	ldr	r3, [r7, #4]
 80161ee:	8b5b      	ldrh	r3, [r3, #26]
 80161f0:	f043 0302 	orr.w	r3, r3, #2
 80161f4:	b29a      	uxth	r2, r3
 80161f6:	687b      	ldr	r3, [r7, #4]
 80161f8:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80161fa:	687b      	ldr	r3, [r7, #4]
 80161fc:	2207      	movs	r2, #7
 80161fe:	751a      	strb	r2, [r3, #20]
      }
      break;
 8016200:	e140      	b.n	8016484 <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 8016202:	6878      	ldr	r0, [r7, #4]
 8016204:	f000 fa5c 	bl	80166c0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 8016208:	4b22      	ldr	r3, [pc, #136]	; (8016294 <tcp_process+0x5bc>)
 801620a:	781b      	ldrb	r3, [r3, #0]
 801620c:	f003 0320 	and.w	r3, r3, #32
 8016210:	2b00      	cmp	r3, #0
 8016212:	d071      	beq.n	80162f8 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016214:	4b14      	ldr	r3, [pc, #80]	; (8016268 <tcp_process+0x590>)
 8016216:	781b      	ldrb	r3, [r3, #0]
 8016218:	f003 0310 	and.w	r3, r3, #16
 801621c:	2b00      	cmp	r3, #0
 801621e:	d060      	beq.n	80162e2 <tcp_process+0x60a>
 8016220:	687b      	ldr	r3, [r7, #4]
 8016222:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016224:	4b11      	ldr	r3, [pc, #68]	; (801626c <tcp_process+0x594>)
 8016226:	681b      	ldr	r3, [r3, #0]
 8016228:	429a      	cmp	r2, r3
 801622a:	d15a      	bne.n	80162e2 <tcp_process+0x60a>
            pcb->unsent == NULL) {
 801622c:	687b      	ldr	r3, [r7, #4]
 801622e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016230:	2b00      	cmp	r3, #0
 8016232:	d156      	bne.n	80162e2 <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 8016234:	687b      	ldr	r3, [r7, #4]
 8016236:	8b5b      	ldrh	r3, [r3, #26]
 8016238:	f043 0302 	orr.w	r3, r3, #2
 801623c:	b29a      	uxth	r2, r3
 801623e:	687b      	ldr	r3, [r7, #4]
 8016240:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 8016242:	6878      	ldr	r0, [r7, #4]
 8016244:	f7fe fdbc 	bl	8014dc0 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8016248:	4b13      	ldr	r3, [pc, #76]	; (8016298 <tcp_process+0x5c0>)
 801624a:	681b      	ldr	r3, [r3, #0]
 801624c:	687a      	ldr	r2, [r7, #4]
 801624e:	429a      	cmp	r2, r3
 8016250:	d105      	bne.n	801625e <tcp_process+0x586>
 8016252:	4b11      	ldr	r3, [pc, #68]	; (8016298 <tcp_process+0x5c0>)
 8016254:	681b      	ldr	r3, [r3, #0]
 8016256:	68db      	ldr	r3, [r3, #12]
 8016258:	4a0f      	ldr	r2, [pc, #60]	; (8016298 <tcp_process+0x5c0>)
 801625a:	6013      	str	r3, [r2, #0]
 801625c:	e02e      	b.n	80162bc <tcp_process+0x5e4>
 801625e:	4b0e      	ldr	r3, [pc, #56]	; (8016298 <tcp_process+0x5c0>)
 8016260:	681b      	ldr	r3, [r3, #0]
 8016262:	617b      	str	r3, [r7, #20]
 8016264:	e027      	b.n	80162b6 <tcp_process+0x5de>
 8016266:	bf00      	nop
 8016268:	20024090 	.word	0x20024090
 801626c:	20024088 	.word	0x20024088
 8016270:	2002408e 	.word	0x2002408e
 8016274:	20024084 	.word	0x20024084
 8016278:	20024074 	.word	0x20024074
 801627c:	2001e778 	.word	0x2001e778
 8016280:	2001e77c 	.word	0x2001e77c
 8016284:	0801f768 	.word	0x0801f768
 8016288:	0801fa08 	.word	0x0801fa08
 801628c:	0801f7b4 	.word	0x0801f7b4
 8016290:	2002408c 	.word	0x2002408c
 8016294:	20024091 	.word	0x20024091
 8016298:	20024058 	.word	0x20024058
 801629c:	697b      	ldr	r3, [r7, #20]
 801629e:	68db      	ldr	r3, [r3, #12]
 80162a0:	687a      	ldr	r2, [r7, #4]
 80162a2:	429a      	cmp	r2, r3
 80162a4:	d104      	bne.n	80162b0 <tcp_process+0x5d8>
 80162a6:	687b      	ldr	r3, [r7, #4]
 80162a8:	68da      	ldr	r2, [r3, #12]
 80162aa:	697b      	ldr	r3, [r7, #20]
 80162ac:	60da      	str	r2, [r3, #12]
 80162ae:	e005      	b.n	80162bc <tcp_process+0x5e4>
 80162b0:	697b      	ldr	r3, [r7, #20]
 80162b2:	68db      	ldr	r3, [r3, #12]
 80162b4:	617b      	str	r3, [r7, #20]
 80162b6:	697b      	ldr	r3, [r7, #20]
 80162b8:	2b00      	cmp	r3, #0
 80162ba:	d1ef      	bne.n	801629c <tcp_process+0x5c4>
 80162bc:	687b      	ldr	r3, [r7, #4]
 80162be:	2200      	movs	r2, #0
 80162c0:	60da      	str	r2, [r3, #12]
 80162c2:	4b77      	ldr	r3, [pc, #476]	; (80164a0 <tcp_process+0x7c8>)
 80162c4:	2201      	movs	r2, #1
 80162c6:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 80162c8:	687b      	ldr	r3, [r7, #4]
 80162ca:	220a      	movs	r2, #10
 80162cc:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 80162ce:	4b75      	ldr	r3, [pc, #468]	; (80164a4 <tcp_process+0x7cc>)
 80162d0:	681a      	ldr	r2, [r3, #0]
 80162d2:	687b      	ldr	r3, [r7, #4]
 80162d4:	60da      	str	r2, [r3, #12]
 80162d6:	4a73      	ldr	r2, [pc, #460]	; (80164a4 <tcp_process+0x7cc>)
 80162d8:	687b      	ldr	r3, [r7, #4]
 80162da:	6013      	str	r3, [r2, #0]
 80162dc:	f002 fcfa 	bl	8018cd4 <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80162e0:	e0d2      	b.n	8016488 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80162e2:	687b      	ldr	r3, [r7, #4]
 80162e4:	8b5b      	ldrh	r3, [r3, #26]
 80162e6:	f043 0302 	orr.w	r3, r3, #2
 80162ea:	b29a      	uxth	r2, r3
 80162ec:	687b      	ldr	r3, [r7, #4]
 80162ee:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80162f0:	687b      	ldr	r3, [r7, #4]
 80162f2:	2208      	movs	r2, #8
 80162f4:	751a      	strb	r2, [r3, #20]
      break;
 80162f6:	e0c7      	b.n	8016488 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80162f8:	4b6b      	ldr	r3, [pc, #428]	; (80164a8 <tcp_process+0x7d0>)
 80162fa:	781b      	ldrb	r3, [r3, #0]
 80162fc:	f003 0310 	and.w	r3, r3, #16
 8016300:	2b00      	cmp	r3, #0
 8016302:	f000 80c1 	beq.w	8016488 <tcp_process+0x7b0>
 8016306:	687b      	ldr	r3, [r7, #4]
 8016308:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 801630a:	4b68      	ldr	r3, [pc, #416]	; (80164ac <tcp_process+0x7d4>)
 801630c:	681b      	ldr	r3, [r3, #0]
 801630e:	429a      	cmp	r2, r3
 8016310:	f040 80ba 	bne.w	8016488 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 8016314:	687b      	ldr	r3, [r7, #4]
 8016316:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 8016318:	2b00      	cmp	r3, #0
 801631a:	f040 80b5 	bne.w	8016488 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 801631e:	687b      	ldr	r3, [r7, #4]
 8016320:	2206      	movs	r2, #6
 8016322:	751a      	strb	r2, [r3, #20]
      break;
 8016324:	e0b0      	b.n	8016488 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 8016326:	6878      	ldr	r0, [r7, #4]
 8016328:	f000 f9ca 	bl	80166c0 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 801632c:	4b60      	ldr	r3, [pc, #384]	; (80164b0 <tcp_process+0x7d8>)
 801632e:	781b      	ldrb	r3, [r3, #0]
 8016330:	f003 0320 	and.w	r3, r3, #32
 8016334:	2b00      	cmp	r3, #0
 8016336:	f000 80a9 	beq.w	801648c <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 801633a:	687b      	ldr	r3, [r7, #4]
 801633c:	8b5b      	ldrh	r3, [r3, #26]
 801633e:	f043 0302 	orr.w	r3, r3, #2
 8016342:	b29a      	uxth	r2, r3
 8016344:	687b      	ldr	r3, [r7, #4]
 8016346:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8016348:	6878      	ldr	r0, [r7, #4]
 801634a:	f7fe fd39 	bl	8014dc0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 801634e:	4b59      	ldr	r3, [pc, #356]	; (80164b4 <tcp_process+0x7dc>)
 8016350:	681b      	ldr	r3, [r3, #0]
 8016352:	687a      	ldr	r2, [r7, #4]
 8016354:	429a      	cmp	r2, r3
 8016356:	d105      	bne.n	8016364 <tcp_process+0x68c>
 8016358:	4b56      	ldr	r3, [pc, #344]	; (80164b4 <tcp_process+0x7dc>)
 801635a:	681b      	ldr	r3, [r3, #0]
 801635c:	68db      	ldr	r3, [r3, #12]
 801635e:	4a55      	ldr	r2, [pc, #340]	; (80164b4 <tcp_process+0x7dc>)
 8016360:	6013      	str	r3, [r2, #0]
 8016362:	e013      	b.n	801638c <tcp_process+0x6b4>
 8016364:	4b53      	ldr	r3, [pc, #332]	; (80164b4 <tcp_process+0x7dc>)
 8016366:	681b      	ldr	r3, [r3, #0]
 8016368:	613b      	str	r3, [r7, #16]
 801636a:	e00c      	b.n	8016386 <tcp_process+0x6ae>
 801636c:	693b      	ldr	r3, [r7, #16]
 801636e:	68db      	ldr	r3, [r3, #12]
 8016370:	687a      	ldr	r2, [r7, #4]
 8016372:	429a      	cmp	r2, r3
 8016374:	d104      	bne.n	8016380 <tcp_process+0x6a8>
 8016376:	687b      	ldr	r3, [r7, #4]
 8016378:	68da      	ldr	r2, [r3, #12]
 801637a:	693b      	ldr	r3, [r7, #16]
 801637c:	60da      	str	r2, [r3, #12]
 801637e:	e005      	b.n	801638c <tcp_process+0x6b4>
 8016380:	693b      	ldr	r3, [r7, #16]
 8016382:	68db      	ldr	r3, [r3, #12]
 8016384:	613b      	str	r3, [r7, #16]
 8016386:	693b      	ldr	r3, [r7, #16]
 8016388:	2b00      	cmp	r3, #0
 801638a:	d1ef      	bne.n	801636c <tcp_process+0x694>
 801638c:	687b      	ldr	r3, [r7, #4]
 801638e:	2200      	movs	r2, #0
 8016390:	60da      	str	r2, [r3, #12]
 8016392:	4b43      	ldr	r3, [pc, #268]	; (80164a0 <tcp_process+0x7c8>)
 8016394:	2201      	movs	r2, #1
 8016396:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8016398:	687b      	ldr	r3, [r7, #4]
 801639a:	220a      	movs	r2, #10
 801639c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801639e:	4b41      	ldr	r3, [pc, #260]	; (80164a4 <tcp_process+0x7cc>)
 80163a0:	681a      	ldr	r2, [r3, #0]
 80163a2:	687b      	ldr	r3, [r7, #4]
 80163a4:	60da      	str	r2, [r3, #12]
 80163a6:	4a3f      	ldr	r2, [pc, #252]	; (80164a4 <tcp_process+0x7cc>)
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	6013      	str	r3, [r2, #0]
 80163ac:	f002 fc92 	bl	8018cd4 <tcp_timer_needed>
      }
      break;
 80163b0:	e06c      	b.n	801648c <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 80163b2:	6878      	ldr	r0, [r7, #4]
 80163b4:	f000 f984 	bl	80166c0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 80163b8:	4b3b      	ldr	r3, [pc, #236]	; (80164a8 <tcp_process+0x7d0>)
 80163ba:	781b      	ldrb	r3, [r3, #0]
 80163bc:	f003 0310 	and.w	r3, r3, #16
 80163c0:	2b00      	cmp	r3, #0
 80163c2:	d065      	beq.n	8016490 <tcp_process+0x7b8>
 80163c4:	687b      	ldr	r3, [r7, #4]
 80163c6:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80163c8:	4b38      	ldr	r3, [pc, #224]	; (80164ac <tcp_process+0x7d4>)
 80163ca:	681b      	ldr	r3, [r3, #0]
 80163cc:	429a      	cmp	r2, r3
 80163ce:	d15f      	bne.n	8016490 <tcp_process+0x7b8>
 80163d0:	687b      	ldr	r3, [r7, #4]
 80163d2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80163d4:	2b00      	cmp	r3, #0
 80163d6:	d15b      	bne.n	8016490 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80163d8:	6878      	ldr	r0, [r7, #4]
 80163da:	f7fe fcf1 	bl	8014dc0 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80163de:	4b35      	ldr	r3, [pc, #212]	; (80164b4 <tcp_process+0x7dc>)
 80163e0:	681b      	ldr	r3, [r3, #0]
 80163e2:	687a      	ldr	r2, [r7, #4]
 80163e4:	429a      	cmp	r2, r3
 80163e6:	d105      	bne.n	80163f4 <tcp_process+0x71c>
 80163e8:	4b32      	ldr	r3, [pc, #200]	; (80164b4 <tcp_process+0x7dc>)
 80163ea:	681b      	ldr	r3, [r3, #0]
 80163ec:	68db      	ldr	r3, [r3, #12]
 80163ee:	4a31      	ldr	r2, [pc, #196]	; (80164b4 <tcp_process+0x7dc>)
 80163f0:	6013      	str	r3, [r2, #0]
 80163f2:	e013      	b.n	801641c <tcp_process+0x744>
 80163f4:	4b2f      	ldr	r3, [pc, #188]	; (80164b4 <tcp_process+0x7dc>)
 80163f6:	681b      	ldr	r3, [r3, #0]
 80163f8:	60fb      	str	r3, [r7, #12]
 80163fa:	e00c      	b.n	8016416 <tcp_process+0x73e>
 80163fc:	68fb      	ldr	r3, [r7, #12]
 80163fe:	68db      	ldr	r3, [r3, #12]
 8016400:	687a      	ldr	r2, [r7, #4]
 8016402:	429a      	cmp	r2, r3
 8016404:	d104      	bne.n	8016410 <tcp_process+0x738>
 8016406:	687b      	ldr	r3, [r7, #4]
 8016408:	68da      	ldr	r2, [r3, #12]
 801640a:	68fb      	ldr	r3, [r7, #12]
 801640c:	60da      	str	r2, [r3, #12]
 801640e:	e005      	b.n	801641c <tcp_process+0x744>
 8016410:	68fb      	ldr	r3, [r7, #12]
 8016412:	68db      	ldr	r3, [r3, #12]
 8016414:	60fb      	str	r3, [r7, #12]
 8016416:	68fb      	ldr	r3, [r7, #12]
 8016418:	2b00      	cmp	r3, #0
 801641a:	d1ef      	bne.n	80163fc <tcp_process+0x724>
 801641c:	687b      	ldr	r3, [r7, #4]
 801641e:	2200      	movs	r2, #0
 8016420:	60da      	str	r2, [r3, #12]
 8016422:	4b1f      	ldr	r3, [pc, #124]	; (80164a0 <tcp_process+0x7c8>)
 8016424:	2201      	movs	r2, #1
 8016426:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8016428:	687b      	ldr	r3, [r7, #4]
 801642a:	220a      	movs	r2, #10
 801642c:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 801642e:	4b1d      	ldr	r3, [pc, #116]	; (80164a4 <tcp_process+0x7cc>)
 8016430:	681a      	ldr	r2, [r3, #0]
 8016432:	687b      	ldr	r3, [r7, #4]
 8016434:	60da      	str	r2, [r3, #12]
 8016436:	4a1b      	ldr	r2, [pc, #108]	; (80164a4 <tcp_process+0x7cc>)
 8016438:	687b      	ldr	r3, [r7, #4]
 801643a:	6013      	str	r3, [r2, #0]
 801643c:	f002 fc4a 	bl	8018cd4 <tcp_timer_needed>
      }
      break;
 8016440:	e026      	b.n	8016490 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 8016442:	6878      	ldr	r0, [r7, #4]
 8016444:	f000 f93c 	bl	80166c0 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8016448:	4b17      	ldr	r3, [pc, #92]	; (80164a8 <tcp_process+0x7d0>)
 801644a:	781b      	ldrb	r3, [r3, #0]
 801644c:	f003 0310 	and.w	r3, r3, #16
 8016450:	2b00      	cmp	r3, #0
 8016452:	d01f      	beq.n	8016494 <tcp_process+0x7bc>
 8016454:	687b      	ldr	r3, [r7, #4]
 8016456:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8016458:	4b14      	ldr	r3, [pc, #80]	; (80164ac <tcp_process+0x7d4>)
 801645a:	681b      	ldr	r3, [r3, #0]
 801645c:	429a      	cmp	r2, r3
 801645e:	d119      	bne.n	8016494 <tcp_process+0x7bc>
 8016460:	687b      	ldr	r3, [r7, #4]
 8016462:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016464:	2b00      	cmp	r3, #0
 8016466:	d115      	bne.n	8016494 <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8016468:	4b11      	ldr	r3, [pc, #68]	; (80164b0 <tcp_process+0x7d8>)
 801646a:	781b      	ldrb	r3, [r3, #0]
 801646c:	f043 0310 	orr.w	r3, r3, #16
 8016470:	b2da      	uxtb	r2, r3
 8016472:	4b0f      	ldr	r3, [pc, #60]	; (80164b0 <tcp_process+0x7d8>)
 8016474:	701a      	strb	r2, [r3, #0]
      }
      break;
 8016476:	e00d      	b.n	8016494 <tcp_process+0x7bc>
    default:
      break;
 8016478:	bf00      	nop
 801647a:	e00c      	b.n	8016496 <tcp_process+0x7be>
      break;
 801647c:	bf00      	nop
 801647e:	e00a      	b.n	8016496 <tcp_process+0x7be>
      break;
 8016480:	bf00      	nop
 8016482:	e008      	b.n	8016496 <tcp_process+0x7be>
      break;
 8016484:	bf00      	nop
 8016486:	e006      	b.n	8016496 <tcp_process+0x7be>
      break;
 8016488:	bf00      	nop
 801648a:	e004      	b.n	8016496 <tcp_process+0x7be>
      break;
 801648c:	bf00      	nop
 801648e:	e002      	b.n	8016496 <tcp_process+0x7be>
      break;
 8016490:	bf00      	nop
 8016492:	e000      	b.n	8016496 <tcp_process+0x7be>
      break;
 8016494:	bf00      	nop
  }
  return ERR_OK;
 8016496:	2300      	movs	r3, #0
}
 8016498:	4618      	mov	r0, r3
 801649a:	3724      	adds	r7, #36	; 0x24
 801649c:	46bd      	mov	sp, r7
 801649e:	bd90      	pop	{r4, r7, pc}
 80164a0:	20024060 	.word	0x20024060
 80164a4:	2002405c 	.word	0x2002405c
 80164a8:	20024090 	.word	0x20024090
 80164ac:	20024088 	.word	0x20024088
 80164b0:	20024091 	.word	0x20024091
 80164b4:	20024058 	.word	0x20024058

080164b8 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 80164b8:	b590      	push	{r4, r7, lr}
 80164ba:	b085      	sub	sp, #20
 80164bc:	af00      	add	r7, sp, #0
 80164be:	6078      	str	r0, [r7, #4]
 80164c0:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 80164c2:	687b      	ldr	r3, [r7, #4]
 80164c4:	2b00      	cmp	r3, #0
 80164c6:	d106      	bne.n	80164d6 <tcp_oos_insert_segment+0x1e>
 80164c8:	4b3b      	ldr	r3, [pc, #236]	; (80165b8 <tcp_oos_insert_segment+0x100>)
 80164ca:	f240 421f 	movw	r2, #1055	; 0x41f
 80164ce:	493b      	ldr	r1, [pc, #236]	; (80165bc <tcp_oos_insert_segment+0x104>)
 80164d0:	483b      	ldr	r0, [pc, #236]	; (80165c0 <tcp_oos_insert_segment+0x108>)
 80164d2:	f006 ffeb 	bl	801d4ac <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80164d6:	687b      	ldr	r3, [r7, #4]
 80164d8:	68db      	ldr	r3, [r3, #12]
 80164da:	899b      	ldrh	r3, [r3, #12]
 80164dc:	b29b      	uxth	r3, r3
 80164de:	4618      	mov	r0, r3
 80164e0:	f7fb fbf0 	bl	8011cc4 <lwip_htons>
 80164e4:	4603      	mov	r3, r0
 80164e6:	b2db      	uxtb	r3, r3
 80164e8:	f003 0301 	and.w	r3, r3, #1
 80164ec:	2b00      	cmp	r3, #0
 80164ee:	d028      	beq.n	8016542 <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80164f0:	6838      	ldr	r0, [r7, #0]
 80164f2:	f7fe fa63 	bl	80149bc <tcp_segs_free>
    next = NULL;
 80164f6:	2300      	movs	r3, #0
 80164f8:	603b      	str	r3, [r7, #0]
 80164fa:	e056      	b.n	80165aa <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80164fc:	683b      	ldr	r3, [r7, #0]
 80164fe:	68db      	ldr	r3, [r3, #12]
 8016500:	899b      	ldrh	r3, [r3, #12]
 8016502:	b29b      	uxth	r3, r3
 8016504:	4618      	mov	r0, r3
 8016506:	f7fb fbdd 	bl	8011cc4 <lwip_htons>
 801650a:	4603      	mov	r3, r0
 801650c:	b2db      	uxtb	r3, r3
 801650e:	f003 0301 	and.w	r3, r3, #1
 8016512:	2b00      	cmp	r3, #0
 8016514:	d00d      	beq.n	8016532 <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 8016516:	687b      	ldr	r3, [r7, #4]
 8016518:	68db      	ldr	r3, [r3, #12]
 801651a:	899b      	ldrh	r3, [r3, #12]
 801651c:	b29c      	uxth	r4, r3
 801651e:	2001      	movs	r0, #1
 8016520:	f7fb fbd0 	bl	8011cc4 <lwip_htons>
 8016524:	4603      	mov	r3, r0
 8016526:	461a      	mov	r2, r3
 8016528:	687b      	ldr	r3, [r7, #4]
 801652a:	68db      	ldr	r3, [r3, #12]
 801652c:	4322      	orrs	r2, r4
 801652e:	b292      	uxth	r2, r2
 8016530:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 8016532:	683b      	ldr	r3, [r7, #0]
 8016534:	60fb      	str	r3, [r7, #12]
      next = next->next;
 8016536:	683b      	ldr	r3, [r7, #0]
 8016538:	681b      	ldr	r3, [r3, #0]
 801653a:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 801653c:	68f8      	ldr	r0, [r7, #12]
 801653e:	f7fe fa52 	bl	80149e6 <tcp_seg_free>
    while (next &&
 8016542:	683b      	ldr	r3, [r7, #0]
 8016544:	2b00      	cmp	r3, #0
 8016546:	d00e      	beq.n	8016566 <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8016548:	687b      	ldr	r3, [r7, #4]
 801654a:	891b      	ldrh	r3, [r3, #8]
 801654c:	461a      	mov	r2, r3
 801654e:	4b1d      	ldr	r3, [pc, #116]	; (80165c4 <tcp_oos_insert_segment+0x10c>)
 8016550:	681b      	ldr	r3, [r3, #0]
 8016552:	441a      	add	r2, r3
 8016554:	683b      	ldr	r3, [r7, #0]
 8016556:	68db      	ldr	r3, [r3, #12]
 8016558:	685b      	ldr	r3, [r3, #4]
 801655a:	6839      	ldr	r1, [r7, #0]
 801655c:	8909      	ldrh	r1, [r1, #8]
 801655e:	440b      	add	r3, r1
 8016560:	1ad3      	subs	r3, r2, r3
    while (next &&
 8016562:	2b00      	cmp	r3, #0
 8016564:	daca      	bge.n	80164fc <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 8016566:	683b      	ldr	r3, [r7, #0]
 8016568:	2b00      	cmp	r3, #0
 801656a:	d01e      	beq.n	80165aa <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 801656c:	687b      	ldr	r3, [r7, #4]
 801656e:	891b      	ldrh	r3, [r3, #8]
 8016570:	461a      	mov	r2, r3
 8016572:	4b14      	ldr	r3, [pc, #80]	; (80165c4 <tcp_oos_insert_segment+0x10c>)
 8016574:	681b      	ldr	r3, [r3, #0]
 8016576:	441a      	add	r2, r3
 8016578:	683b      	ldr	r3, [r7, #0]
 801657a:	68db      	ldr	r3, [r3, #12]
 801657c:	685b      	ldr	r3, [r3, #4]
 801657e:	1ad3      	subs	r3, r2, r3
    if (next &&
 8016580:	2b00      	cmp	r3, #0
 8016582:	dd12      	ble.n	80165aa <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 8016584:	683b      	ldr	r3, [r7, #0]
 8016586:	68db      	ldr	r3, [r3, #12]
 8016588:	685b      	ldr	r3, [r3, #4]
 801658a:	b29a      	uxth	r2, r3
 801658c:	4b0d      	ldr	r3, [pc, #52]	; (80165c4 <tcp_oos_insert_segment+0x10c>)
 801658e:	681b      	ldr	r3, [r3, #0]
 8016590:	b29b      	uxth	r3, r3
 8016592:	1ad3      	subs	r3, r2, r3
 8016594:	b29a      	uxth	r2, r3
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 801659a:	687b      	ldr	r3, [r7, #4]
 801659c:	685a      	ldr	r2, [r3, #4]
 801659e:	687b      	ldr	r3, [r7, #4]
 80165a0:	891b      	ldrh	r3, [r3, #8]
 80165a2:	4619      	mov	r1, r3
 80165a4:	4610      	mov	r0, r2
 80165a6:	f7fc fe09 	bl	80131bc <pbuf_realloc>
    }
  }
  cseg->next = next;
 80165aa:	687b      	ldr	r3, [r7, #4]
 80165ac:	683a      	ldr	r2, [r7, #0]
 80165ae:	601a      	str	r2, [r3, #0]
}
 80165b0:	bf00      	nop
 80165b2:	3714      	adds	r7, #20
 80165b4:	46bd      	mov	sp, r7
 80165b6:	bd90      	pop	{r4, r7, pc}
 80165b8:	0801f768 	.word	0x0801f768
 80165bc:	0801fa28 	.word	0x0801fa28
 80165c0:	0801f7b4 	.word	0x0801f7b4
 80165c4:	20024084 	.word	0x20024084

080165c8 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 80165c8:	b5b0      	push	{r4, r5, r7, lr}
 80165ca:	b086      	sub	sp, #24
 80165cc:	af00      	add	r7, sp, #0
 80165ce:	60f8      	str	r0, [r7, #12]
 80165d0:	60b9      	str	r1, [r7, #8]
 80165d2:	607a      	str	r2, [r7, #4]
 80165d4:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 80165d6:	e03e      	b.n	8016656 <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80165d8:	68bb      	ldr	r3, [r7, #8]
 80165da:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80165dc:	68bb      	ldr	r3, [r7, #8]
 80165de:	681b      	ldr	r3, [r3, #0]
 80165e0:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80165e2:	697b      	ldr	r3, [r7, #20]
 80165e4:	685b      	ldr	r3, [r3, #4]
 80165e6:	4618      	mov	r0, r3
 80165e8:	f7fc fffc 	bl	80135e4 <pbuf_clen>
 80165ec:	4603      	mov	r3, r0
 80165ee:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80165f0:	68fb      	ldr	r3, [r7, #12]
 80165f2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80165f6:	8a7a      	ldrh	r2, [r7, #18]
 80165f8:	429a      	cmp	r2, r3
 80165fa:	d906      	bls.n	801660a <tcp_free_acked_segments+0x42>
 80165fc:	4b2a      	ldr	r3, [pc, #168]	; (80166a8 <tcp_free_acked_segments+0xe0>)
 80165fe:	f240 4257 	movw	r2, #1111	; 0x457
 8016602:	492a      	ldr	r1, [pc, #168]	; (80166ac <tcp_free_acked_segments+0xe4>)
 8016604:	482a      	ldr	r0, [pc, #168]	; (80166b0 <tcp_free_acked_segments+0xe8>)
 8016606:	f006 ff51 	bl	801d4ac <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 801660a:	68fb      	ldr	r3, [r7, #12]
 801660c:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 8016610:	8a7b      	ldrh	r3, [r7, #18]
 8016612:	1ad3      	subs	r3, r2, r3
 8016614:	b29a      	uxth	r2, r3
 8016616:	68fb      	ldr	r3, [r7, #12]
 8016618:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 801661c:	697b      	ldr	r3, [r7, #20]
 801661e:	891a      	ldrh	r2, [r3, #8]
 8016620:	4b24      	ldr	r3, [pc, #144]	; (80166b4 <tcp_free_acked_segments+0xec>)
 8016622:	881b      	ldrh	r3, [r3, #0]
 8016624:	4413      	add	r3, r2
 8016626:	b29a      	uxth	r2, r3
 8016628:	4b22      	ldr	r3, [pc, #136]	; (80166b4 <tcp_free_acked_segments+0xec>)
 801662a:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 801662c:	6978      	ldr	r0, [r7, #20]
 801662e:	f7fe f9da 	bl	80149e6 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 8016632:	68fb      	ldr	r3, [r7, #12]
 8016634:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8016638:	2b00      	cmp	r3, #0
 801663a:	d00c      	beq.n	8016656 <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 801663c:	68bb      	ldr	r3, [r7, #8]
 801663e:	2b00      	cmp	r3, #0
 8016640:	d109      	bne.n	8016656 <tcp_free_acked_segments+0x8e>
 8016642:	683b      	ldr	r3, [r7, #0]
 8016644:	2b00      	cmp	r3, #0
 8016646:	d106      	bne.n	8016656 <tcp_free_acked_segments+0x8e>
 8016648:	4b17      	ldr	r3, [pc, #92]	; (80166a8 <tcp_free_acked_segments+0xe0>)
 801664a:	f240 4261 	movw	r2, #1121	; 0x461
 801664e:	491a      	ldr	r1, [pc, #104]	; (80166b8 <tcp_free_acked_segments+0xf0>)
 8016650:	4817      	ldr	r0, [pc, #92]	; (80166b0 <tcp_free_acked_segments+0xe8>)
 8016652:	f006 ff2b 	bl	801d4ac <iprintf>
  while (seg_list != NULL &&
 8016656:	68bb      	ldr	r3, [r7, #8]
 8016658:	2b00      	cmp	r3, #0
 801665a:	d020      	beq.n	801669e <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 801665c:	68bb      	ldr	r3, [r7, #8]
 801665e:	68db      	ldr	r3, [r3, #12]
 8016660:	685b      	ldr	r3, [r3, #4]
 8016662:	4618      	mov	r0, r3
 8016664:	f7fb fb43 	bl	8011cee <lwip_htonl>
 8016668:	4604      	mov	r4, r0
 801666a:	68bb      	ldr	r3, [r7, #8]
 801666c:	891b      	ldrh	r3, [r3, #8]
 801666e:	461d      	mov	r5, r3
 8016670:	68bb      	ldr	r3, [r7, #8]
 8016672:	68db      	ldr	r3, [r3, #12]
 8016674:	899b      	ldrh	r3, [r3, #12]
 8016676:	b29b      	uxth	r3, r3
 8016678:	4618      	mov	r0, r3
 801667a:	f7fb fb23 	bl	8011cc4 <lwip_htons>
 801667e:	4603      	mov	r3, r0
 8016680:	b2db      	uxtb	r3, r3
 8016682:	f003 0303 	and.w	r3, r3, #3
 8016686:	2b00      	cmp	r3, #0
 8016688:	d001      	beq.n	801668e <tcp_free_acked_segments+0xc6>
 801668a:	2301      	movs	r3, #1
 801668c:	e000      	b.n	8016690 <tcp_free_acked_segments+0xc8>
 801668e:	2300      	movs	r3, #0
 8016690:	442b      	add	r3, r5
 8016692:	18e2      	adds	r2, r4, r3
 8016694:	4b09      	ldr	r3, [pc, #36]	; (80166bc <tcp_free_acked_segments+0xf4>)
 8016696:	681b      	ldr	r3, [r3, #0]
 8016698:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 801669a:	2b00      	cmp	r3, #0
 801669c:	dd9c      	ble.n	80165d8 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 801669e:	68bb      	ldr	r3, [r7, #8]
}
 80166a0:	4618      	mov	r0, r3
 80166a2:	3718      	adds	r7, #24
 80166a4:	46bd      	mov	sp, r7
 80166a6:	bdb0      	pop	{r4, r5, r7, pc}
 80166a8:	0801f768 	.word	0x0801f768
 80166ac:	0801fa50 	.word	0x0801fa50
 80166b0:	0801f7b4 	.word	0x0801f7b4
 80166b4:	2002408c 	.word	0x2002408c
 80166b8:	0801fa78 	.word	0x0801fa78
 80166bc:	20024088 	.word	0x20024088

080166c0 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 80166c0:	b5b0      	push	{r4, r5, r7, lr}
 80166c2:	b094      	sub	sp, #80	; 0x50
 80166c4:	af00      	add	r7, sp, #0
 80166c6:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 80166c8:	2300      	movs	r3, #0
 80166ca:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 80166cc:	687b      	ldr	r3, [r7, #4]
 80166ce:	2b00      	cmp	r3, #0
 80166d0:	d106      	bne.n	80166e0 <tcp_receive+0x20>
 80166d2:	4b91      	ldr	r3, [pc, #580]	; (8016918 <tcp_receive+0x258>)
 80166d4:	f240 427b 	movw	r2, #1147	; 0x47b
 80166d8:	4990      	ldr	r1, [pc, #576]	; (801691c <tcp_receive+0x25c>)
 80166da:	4891      	ldr	r0, [pc, #580]	; (8016920 <tcp_receive+0x260>)
 80166dc:	f006 fee6 	bl	801d4ac <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 80166e0:	687b      	ldr	r3, [r7, #4]
 80166e2:	7d1b      	ldrb	r3, [r3, #20]
 80166e4:	2b03      	cmp	r3, #3
 80166e6:	d806      	bhi.n	80166f6 <tcp_receive+0x36>
 80166e8:	4b8b      	ldr	r3, [pc, #556]	; (8016918 <tcp_receive+0x258>)
 80166ea:	f240 427c 	movw	r2, #1148	; 0x47c
 80166ee:	498d      	ldr	r1, [pc, #564]	; (8016924 <tcp_receive+0x264>)
 80166f0:	488b      	ldr	r0, [pc, #556]	; (8016920 <tcp_receive+0x260>)
 80166f2:	f006 fedb 	bl	801d4ac <iprintf>

  if (flags & TCP_ACK) {
 80166f6:	4b8c      	ldr	r3, [pc, #560]	; (8016928 <tcp_receive+0x268>)
 80166f8:	781b      	ldrb	r3, [r3, #0]
 80166fa:	f003 0310 	and.w	r3, r3, #16
 80166fe:	2b00      	cmp	r3, #0
 8016700:	f000 8264 	beq.w	8016bcc <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8016704:	687b      	ldr	r3, [r7, #4]
 8016706:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 801670a:	461a      	mov	r2, r3
 801670c:	687b      	ldr	r3, [r7, #4]
 801670e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8016710:	4413      	add	r3, r2
 8016712:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8016714:	687b      	ldr	r3, [r7, #4]
 8016716:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8016718:	4b84      	ldr	r3, [pc, #528]	; (801692c <tcp_receive+0x26c>)
 801671a:	681b      	ldr	r3, [r3, #0]
 801671c:	1ad3      	subs	r3, r2, r3
 801671e:	2b00      	cmp	r3, #0
 8016720:	db1b      	blt.n	801675a <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8016722:	687b      	ldr	r3, [r7, #4]
 8016724:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8016726:	4b81      	ldr	r3, [pc, #516]	; (801692c <tcp_receive+0x26c>)
 8016728:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 801672a:	429a      	cmp	r2, r3
 801672c:	d106      	bne.n	801673c <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 801672e:	687b      	ldr	r3, [r7, #4]
 8016730:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8016732:	4b7f      	ldr	r3, [pc, #508]	; (8016930 <tcp_receive+0x270>)
 8016734:	681b      	ldr	r3, [r3, #0]
 8016736:	1ad3      	subs	r3, r2, r3
 8016738:	2b00      	cmp	r3, #0
 801673a:	db0e      	blt.n	801675a <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 801673c:	687b      	ldr	r3, [r7, #4]
 801673e:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8016740:	4b7b      	ldr	r3, [pc, #492]	; (8016930 <tcp_receive+0x270>)
 8016742:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8016744:	429a      	cmp	r2, r3
 8016746:	d125      	bne.n	8016794 <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8016748:	4b7a      	ldr	r3, [pc, #488]	; (8016934 <tcp_receive+0x274>)
 801674a:	681b      	ldr	r3, [r3, #0]
 801674c:	89db      	ldrh	r3, [r3, #14]
 801674e:	b29a      	uxth	r2, r3
 8016750:	687b      	ldr	r3, [r7, #4]
 8016752:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016756:	429a      	cmp	r2, r3
 8016758:	d91c      	bls.n	8016794 <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 801675a:	4b76      	ldr	r3, [pc, #472]	; (8016934 <tcp_receive+0x274>)
 801675c:	681b      	ldr	r3, [r3, #0]
 801675e:	89db      	ldrh	r3, [r3, #14]
 8016760:	b29a      	uxth	r2, r3
 8016762:	687b      	ldr	r3, [r7, #4]
 8016764:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 801676e:	687b      	ldr	r3, [r7, #4]
 8016770:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8016774:	429a      	cmp	r2, r3
 8016776:	d205      	bcs.n	8016784 <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8016778:	687b      	ldr	r3, [r7, #4]
 801677a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801677e:	687b      	ldr	r3, [r7, #4]
 8016780:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8016784:	4b69      	ldr	r3, [pc, #420]	; (801692c <tcp_receive+0x26c>)
 8016786:	681a      	ldr	r2, [r3, #0]
 8016788:	687b      	ldr	r3, [r7, #4]
 801678a:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 801678c:	4b68      	ldr	r3, [pc, #416]	; (8016930 <tcp_receive+0x270>)
 801678e:	681a      	ldr	r2, [r3, #0]
 8016790:	687b      	ldr	r3, [r7, #4]
 8016792:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8016794:	4b66      	ldr	r3, [pc, #408]	; (8016930 <tcp_receive+0x270>)
 8016796:	681a      	ldr	r2, [r3, #0]
 8016798:	687b      	ldr	r3, [r7, #4]
 801679a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801679c:	1ad3      	subs	r3, r2, r3
 801679e:	2b00      	cmp	r3, #0
 80167a0:	dc58      	bgt.n	8016854 <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 80167a2:	4b65      	ldr	r3, [pc, #404]	; (8016938 <tcp_receive+0x278>)
 80167a4:	881b      	ldrh	r3, [r3, #0]
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	d14b      	bne.n	8016842 <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 80167aa:	687b      	ldr	r3, [r7, #4]
 80167ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80167ae:	687a      	ldr	r2, [r7, #4]
 80167b0:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 80167b4:	4413      	add	r3, r2
 80167b6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80167b8:	429a      	cmp	r2, r3
 80167ba:	d142      	bne.n	8016842 <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 80167bc:	687b      	ldr	r3, [r7, #4]
 80167be:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80167c2:	2b00      	cmp	r3, #0
 80167c4:	db3d      	blt.n	8016842 <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 80167c6:	687b      	ldr	r3, [r7, #4]
 80167c8:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 80167ca:	4b59      	ldr	r3, [pc, #356]	; (8016930 <tcp_receive+0x270>)
 80167cc:	681b      	ldr	r3, [r3, #0]
 80167ce:	429a      	cmp	r2, r3
 80167d0:	d137      	bne.n	8016842 <tcp_receive+0x182>
              found_dupack = 1;
 80167d2:	2301      	movs	r3, #1
 80167d4:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 80167d6:	687b      	ldr	r3, [r7, #4]
 80167d8:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80167dc:	2bff      	cmp	r3, #255	; 0xff
 80167de:	d007      	beq.n	80167f0 <tcp_receive+0x130>
                ++pcb->dupacks;
 80167e0:	687b      	ldr	r3, [r7, #4]
 80167e2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80167e6:	3301      	adds	r3, #1
 80167e8:	b2da      	uxtb	r2, r3
 80167ea:	687b      	ldr	r3, [r7, #4]
 80167ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 80167f0:	687b      	ldr	r3, [r7, #4]
 80167f2:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 80167f6:	2b03      	cmp	r3, #3
 80167f8:	d91b      	bls.n	8016832 <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 80167fa:	687b      	ldr	r3, [r7, #4]
 80167fc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016800:	687b      	ldr	r3, [r7, #4]
 8016802:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016804:	4413      	add	r3, r2
 8016806:	b29a      	uxth	r2, r3
 8016808:	687b      	ldr	r3, [r7, #4]
 801680a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801680e:	429a      	cmp	r2, r3
 8016810:	d30a      	bcc.n	8016828 <tcp_receive+0x168>
 8016812:	687b      	ldr	r3, [r7, #4]
 8016814:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016818:	687b      	ldr	r3, [r7, #4]
 801681a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801681c:	4413      	add	r3, r2
 801681e:	b29a      	uxth	r2, r3
 8016820:	687b      	ldr	r3, [r7, #4]
 8016822:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8016826:	e004      	b.n	8016832 <tcp_receive+0x172>
 8016828:	687b      	ldr	r3, [r7, #4]
 801682a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801682e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8016832:	687b      	ldr	r3, [r7, #4]
 8016834:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8016838:	2b02      	cmp	r3, #2
 801683a:	d902      	bls.n	8016842 <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 801683c:	6878      	ldr	r0, [r7, #4]
 801683e:	f001 feed 	bl	801861c <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8016842:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8016844:	2b00      	cmp	r3, #0
 8016846:	f040 8161 	bne.w	8016b0c <tcp_receive+0x44c>
        pcb->dupacks = 0;
 801684a:	687b      	ldr	r3, [r7, #4]
 801684c:	2200      	movs	r2, #0
 801684e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8016852:	e15b      	b.n	8016b0c <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016854:	4b36      	ldr	r3, [pc, #216]	; (8016930 <tcp_receive+0x270>)
 8016856:	681a      	ldr	r2, [r3, #0]
 8016858:	687b      	ldr	r3, [r7, #4]
 801685a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801685c:	1ad3      	subs	r3, r2, r3
 801685e:	3b01      	subs	r3, #1
 8016860:	2b00      	cmp	r3, #0
 8016862:	f2c0 814e 	blt.w	8016b02 <tcp_receive+0x442>
 8016866:	4b32      	ldr	r3, [pc, #200]	; (8016930 <tcp_receive+0x270>)
 8016868:	681a      	ldr	r2, [r3, #0]
 801686a:	687b      	ldr	r3, [r7, #4]
 801686c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801686e:	1ad3      	subs	r3, r2, r3
 8016870:	2b00      	cmp	r3, #0
 8016872:	f300 8146 	bgt.w	8016b02 <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8016876:	687b      	ldr	r3, [r7, #4]
 8016878:	8b5b      	ldrh	r3, [r3, #26]
 801687a:	f003 0304 	and.w	r3, r3, #4
 801687e:	2b00      	cmp	r3, #0
 8016880:	d010      	beq.n	80168a4 <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8016882:	687b      	ldr	r3, [r7, #4]
 8016884:	8b5b      	ldrh	r3, [r3, #26]
 8016886:	f023 0304 	bic.w	r3, r3, #4
 801688a:	b29a      	uxth	r2, r3
 801688c:	687b      	ldr	r3, [r7, #4]
 801688e:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8016890:	687b      	ldr	r3, [r7, #4]
 8016892:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8016896:	687b      	ldr	r3, [r7, #4]
 8016898:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 801689c:	687b      	ldr	r3, [r7, #4]
 801689e:	2200      	movs	r2, #0
 80168a0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	2200      	movs	r2, #0
 80168a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 80168ac:	687b      	ldr	r3, [r7, #4]
 80168ae:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 80168b2:	10db      	asrs	r3, r3, #3
 80168b4:	b21b      	sxth	r3, r3
 80168b6:	b29a      	uxth	r2, r3
 80168b8:	687b      	ldr	r3, [r7, #4]
 80168ba:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 80168be:	b29b      	uxth	r3, r3
 80168c0:	4413      	add	r3, r2
 80168c2:	b29b      	uxth	r3, r3
 80168c4:	b21a      	sxth	r2, r3
 80168c6:	687b      	ldr	r3, [r7, #4]
 80168c8:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 80168cc:	4b18      	ldr	r3, [pc, #96]	; (8016930 <tcp_receive+0x270>)
 80168ce:	681b      	ldr	r3, [r3, #0]
 80168d0:	b29a      	uxth	r2, r3
 80168d2:	687b      	ldr	r3, [r7, #4]
 80168d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80168d6:	b29b      	uxth	r3, r3
 80168d8:	1ad3      	subs	r3, r2, r3
 80168da:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 80168dc:	687b      	ldr	r3, [r7, #4]
 80168de:	2200      	movs	r2, #0
 80168e0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 80168e4:	4b12      	ldr	r3, [pc, #72]	; (8016930 <tcp_receive+0x270>)
 80168e6:	681a      	ldr	r2, [r3, #0]
 80168e8:	687b      	ldr	r3, [r7, #4]
 80168ea:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 80168ec:	687b      	ldr	r3, [r7, #4]
 80168ee:	7d1b      	ldrb	r3, [r3, #20]
 80168f0:	2b03      	cmp	r3, #3
 80168f2:	f240 8097 	bls.w	8016a24 <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 80168f6:	687b      	ldr	r3, [r7, #4]
 80168f8:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80168fc:	687b      	ldr	r3, [r7, #4]
 80168fe:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8016902:	429a      	cmp	r2, r3
 8016904:	d245      	bcs.n	8016992 <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8016906:	687b      	ldr	r3, [r7, #4]
 8016908:	8b5b      	ldrh	r3, [r3, #26]
 801690a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 801690e:	2b00      	cmp	r3, #0
 8016910:	d014      	beq.n	801693c <tcp_receive+0x27c>
 8016912:	2301      	movs	r3, #1
 8016914:	e013      	b.n	801693e <tcp_receive+0x27e>
 8016916:	bf00      	nop
 8016918:	0801f768 	.word	0x0801f768
 801691c:	0801fa98 	.word	0x0801fa98
 8016920:	0801f7b4 	.word	0x0801f7b4
 8016924:	0801fab4 	.word	0x0801fab4
 8016928:	20024090 	.word	0x20024090
 801692c:	20024084 	.word	0x20024084
 8016930:	20024088 	.word	0x20024088
 8016934:	20024074 	.word	0x20024074
 8016938:	2002408e 	.word	0x2002408e
 801693c:	2302      	movs	r3, #2
 801693e:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8016942:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8016946:	b29a      	uxth	r2, r3
 8016948:	687b      	ldr	r3, [r7, #4]
 801694a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801694c:	fb12 f303 	smulbb	r3, r2, r3
 8016950:	b29b      	uxth	r3, r3
 8016952:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8016954:	4293      	cmp	r3, r2
 8016956:	bf28      	it	cs
 8016958:	4613      	movcs	r3, r2
 801695a:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 801695c:	687b      	ldr	r3, [r7, #4]
 801695e:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016962:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016964:	4413      	add	r3, r2
 8016966:	b29a      	uxth	r2, r3
 8016968:	687b      	ldr	r3, [r7, #4]
 801696a:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 801696e:	429a      	cmp	r2, r3
 8016970:	d309      	bcc.n	8016986 <tcp_receive+0x2c6>
 8016972:	687b      	ldr	r3, [r7, #4]
 8016974:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016978:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801697a:	4413      	add	r3, r2
 801697c:	b29a      	uxth	r2, r3
 801697e:	687b      	ldr	r3, [r7, #4]
 8016980:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8016984:	e04e      	b.n	8016a24 <tcp_receive+0x364>
 8016986:	687b      	ldr	r3, [r7, #4]
 8016988:	f64f 72ff 	movw	r2, #65535	; 0xffff
 801698c:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8016990:	e048      	b.n	8016a24 <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8016992:	687b      	ldr	r3, [r7, #4]
 8016994:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8016998:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 801699a:	4413      	add	r3, r2
 801699c:	b29a      	uxth	r2, r3
 801699e:	687b      	ldr	r3, [r7, #4]
 80169a0:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 80169a4:	429a      	cmp	r2, r3
 80169a6:	d309      	bcc.n	80169bc <tcp_receive+0x2fc>
 80169a8:	687b      	ldr	r3, [r7, #4]
 80169aa:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80169ae:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 80169b0:	4413      	add	r3, r2
 80169b2:	b29a      	uxth	r2, r3
 80169b4:	687b      	ldr	r3, [r7, #4]
 80169b6:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 80169ba:	e004      	b.n	80169c6 <tcp_receive+0x306>
 80169bc:	687b      	ldr	r3, [r7, #4]
 80169be:	f64f 72ff 	movw	r2, #65535	; 0xffff
 80169c2:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 80169c6:	687b      	ldr	r3, [r7, #4]
 80169c8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80169d2:	429a      	cmp	r2, r3
 80169d4:	d326      	bcc.n	8016a24 <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 80169d6:	687b      	ldr	r3, [r7, #4]
 80169d8:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 80169dc:	687b      	ldr	r3, [r7, #4]
 80169de:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80169e2:	1ad3      	subs	r3, r2, r3
 80169e4:	b29a      	uxth	r2, r3
 80169e6:	687b      	ldr	r3, [r7, #4]
 80169e8:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 80169ec:	687b      	ldr	r3, [r7, #4]
 80169ee:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80169f6:	4413      	add	r3, r2
 80169f8:	b29a      	uxth	r2, r3
 80169fa:	687b      	ldr	r3, [r7, #4]
 80169fc:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8016a00:	429a      	cmp	r2, r3
 8016a02:	d30a      	bcc.n	8016a1a <tcp_receive+0x35a>
 8016a04:	687b      	ldr	r3, [r7, #4]
 8016a06:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8016a0a:	687b      	ldr	r3, [r7, #4]
 8016a0c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8016a0e:	4413      	add	r3, r2
 8016a10:	b29a      	uxth	r2, r3
 8016a12:	687b      	ldr	r3, [r7, #4]
 8016a14:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8016a18:	e004      	b.n	8016a24 <tcp_receive+0x364>
 8016a1a:	687b      	ldr	r3, [r7, #4]
 8016a1c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016a20:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8016a24:	687b      	ldr	r3, [r7, #4]
 8016a26:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8016a28:	687b      	ldr	r3, [r7, #4]
 8016a2a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016a2c:	4a98      	ldr	r2, [pc, #608]	; (8016c90 <tcp_receive+0x5d0>)
 8016a2e:	6878      	ldr	r0, [r7, #4]
 8016a30:	f7ff fdca 	bl	80165c8 <tcp_free_acked_segments>
 8016a34:	4602      	mov	r2, r0
 8016a36:	687b      	ldr	r3, [r7, #4]
 8016a38:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8016a3a:	687b      	ldr	r3, [r7, #4]
 8016a3c:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8016a3e:	687b      	ldr	r3, [r7, #4]
 8016a40:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016a42:	4a94      	ldr	r2, [pc, #592]	; (8016c94 <tcp_receive+0x5d4>)
 8016a44:	6878      	ldr	r0, [r7, #4]
 8016a46:	f7ff fdbf 	bl	80165c8 <tcp_free_acked_segments>
 8016a4a:	4602      	mov	r2, r0
 8016a4c:	687b      	ldr	r3, [r7, #4]
 8016a4e:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8016a50:	687b      	ldr	r3, [r7, #4]
 8016a52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016a54:	2b00      	cmp	r3, #0
 8016a56:	d104      	bne.n	8016a62 <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8016a58:	687b      	ldr	r3, [r7, #4]
 8016a5a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8016a5e:	861a      	strh	r2, [r3, #48]	; 0x30
 8016a60:	e002      	b.n	8016a68 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8016a62:	687b      	ldr	r3, [r7, #4]
 8016a64:	2200      	movs	r2, #0
 8016a66:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8016a68:	687b      	ldr	r3, [r7, #4]
 8016a6a:	2200      	movs	r2, #0
 8016a6c:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8016a6e:	687b      	ldr	r3, [r7, #4]
 8016a70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016a72:	2b00      	cmp	r3, #0
 8016a74:	d103      	bne.n	8016a7e <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8016a76:	687b      	ldr	r3, [r7, #4]
 8016a78:	2200      	movs	r2, #0
 8016a7a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8016a7e:	687b      	ldr	r3, [r7, #4]
 8016a80:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8016a84:	4b84      	ldr	r3, [pc, #528]	; (8016c98 <tcp_receive+0x5d8>)
 8016a86:	881b      	ldrh	r3, [r3, #0]
 8016a88:	4413      	add	r3, r2
 8016a8a:	b29a      	uxth	r2, r3
 8016a8c:	687b      	ldr	r3, [r7, #4]
 8016a8e:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8016a92:	687b      	ldr	r3, [r7, #4]
 8016a94:	8b5b      	ldrh	r3, [r3, #26]
 8016a96:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8016a9a:	2b00      	cmp	r3, #0
 8016a9c:	d035      	beq.n	8016b0a <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8016a9e:	687b      	ldr	r3, [r7, #4]
 8016aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016aa2:	2b00      	cmp	r3, #0
 8016aa4:	d118      	bne.n	8016ad8 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8016aa6:	687b      	ldr	r3, [r7, #4]
 8016aa8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016aaa:	2b00      	cmp	r3, #0
 8016aac:	d00c      	beq.n	8016ac8 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8016aae:	687b      	ldr	r3, [r7, #4]
 8016ab0:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8016ab2:	687b      	ldr	r3, [r7, #4]
 8016ab4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8016ab6:	68db      	ldr	r3, [r3, #12]
 8016ab8:	685b      	ldr	r3, [r3, #4]
 8016aba:	4618      	mov	r0, r3
 8016abc:	f7fb f917 	bl	8011cee <lwip_htonl>
 8016ac0:	4603      	mov	r3, r0
 8016ac2:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8016ac4:	2b00      	cmp	r3, #0
 8016ac6:	dc20      	bgt.n	8016b0a <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8016ac8:	687b      	ldr	r3, [r7, #4]
 8016aca:	8b5b      	ldrh	r3, [r3, #26]
 8016acc:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8016ad0:	b29a      	uxth	r2, r3
 8016ad2:	687b      	ldr	r3, [r7, #4]
 8016ad4:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016ad6:	e018      	b.n	8016b0a <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8016ad8:	687b      	ldr	r3, [r7, #4]
 8016ada:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8016adc:	687b      	ldr	r3, [r7, #4]
 8016ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8016ae0:	68db      	ldr	r3, [r3, #12]
 8016ae2:	685b      	ldr	r3, [r3, #4]
 8016ae4:	4618      	mov	r0, r3
 8016ae6:	f7fb f902 	bl	8011cee <lwip_htonl>
 8016aea:	4603      	mov	r3, r0
 8016aec:	1ae3      	subs	r3, r4, r3
 8016aee:	2b00      	cmp	r3, #0
 8016af0:	dc0b      	bgt.n	8016b0a <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8016af2:	687b      	ldr	r3, [r7, #4]
 8016af4:	8b5b      	ldrh	r3, [r3, #26]
 8016af6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8016afa:	b29a      	uxth	r2, r3
 8016afc:	687b      	ldr	r3, [r7, #4]
 8016afe:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016b00:	e003      	b.n	8016b0a <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8016b02:	6878      	ldr	r0, [r7, #4]
 8016b04:	f001 ff76 	bl	80189f4 <tcp_send_empty_ack>
 8016b08:	e000      	b.n	8016b0c <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8016b0a:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8016b0c:	687b      	ldr	r3, [r7, #4]
 8016b0e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016b10:	2b00      	cmp	r3, #0
 8016b12:	d05b      	beq.n	8016bcc <tcp_receive+0x50c>
 8016b14:	687b      	ldr	r3, [r7, #4]
 8016b16:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8016b18:	4b60      	ldr	r3, [pc, #384]	; (8016c9c <tcp_receive+0x5dc>)
 8016b1a:	681b      	ldr	r3, [r3, #0]
 8016b1c:	1ad3      	subs	r3, r2, r3
 8016b1e:	2b00      	cmp	r3, #0
 8016b20:	da54      	bge.n	8016bcc <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8016b22:	4b5f      	ldr	r3, [pc, #380]	; (8016ca0 <tcp_receive+0x5e0>)
 8016b24:	681b      	ldr	r3, [r3, #0]
 8016b26:	b29a      	uxth	r2, r3
 8016b28:	687b      	ldr	r3, [r7, #4]
 8016b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8016b2c:	b29b      	uxth	r3, r3
 8016b2e:	1ad3      	subs	r3, r2, r3
 8016b30:	b29b      	uxth	r3, r3
 8016b32:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8016b36:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8016b3a:	687b      	ldr	r3, [r7, #4]
 8016b3c:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016b40:	10db      	asrs	r3, r3, #3
 8016b42:	b21b      	sxth	r3, r3
 8016b44:	b29b      	uxth	r3, r3
 8016b46:	1ad3      	subs	r3, r2, r3
 8016b48:	b29b      	uxth	r3, r3
 8016b4a:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8016b4e:	687b      	ldr	r3, [r7, #4]
 8016b50:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016b54:	b29a      	uxth	r2, r3
 8016b56:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8016b5a:	4413      	add	r3, r2
 8016b5c:	b29b      	uxth	r3, r3
 8016b5e:	b21a      	sxth	r2, r3
 8016b60:	687b      	ldr	r3, [r7, #4]
 8016b62:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8016b64:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8016b68:	2b00      	cmp	r3, #0
 8016b6a:	da05      	bge.n	8016b78 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8016b6c:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8016b70:	425b      	negs	r3, r3
 8016b72:	b29b      	uxth	r3, r3
 8016b74:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8016b78:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8016b7c:	687b      	ldr	r3, [r7, #4]
 8016b7e:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016b82:	109b      	asrs	r3, r3, #2
 8016b84:	b21b      	sxth	r3, r3
 8016b86:	b29b      	uxth	r3, r3
 8016b88:	1ad3      	subs	r3, r2, r3
 8016b8a:	b29b      	uxth	r3, r3
 8016b8c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8016b90:	687b      	ldr	r3, [r7, #4]
 8016b92:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016b96:	b29a      	uxth	r2, r3
 8016b98:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8016b9c:	4413      	add	r3, r2
 8016b9e:	b29b      	uxth	r3, r3
 8016ba0:	b21a      	sxth	r2, r3
 8016ba2:	687b      	ldr	r3, [r7, #4]
 8016ba4:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8016ba6:	687b      	ldr	r3, [r7, #4]
 8016ba8:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8016bac:	10db      	asrs	r3, r3, #3
 8016bae:	b21b      	sxth	r3, r3
 8016bb0:	b29a      	uxth	r2, r3
 8016bb2:	687b      	ldr	r3, [r7, #4]
 8016bb4:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8016bb8:	b29b      	uxth	r3, r3
 8016bba:	4413      	add	r3, r2
 8016bbc:	b29b      	uxth	r3, r3
 8016bbe:	b21a      	sxth	r2, r3
 8016bc0:	687b      	ldr	r3, [r7, #4]
 8016bc2:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8016bc6:	687b      	ldr	r3, [r7, #4]
 8016bc8:	2200      	movs	r2, #0
 8016bca:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8016bcc:	4b35      	ldr	r3, [pc, #212]	; (8016ca4 <tcp_receive+0x5e4>)
 8016bce:	881b      	ldrh	r3, [r3, #0]
 8016bd0:	2b00      	cmp	r3, #0
 8016bd2:	f000 84e2 	beq.w	801759a <tcp_receive+0xeda>
 8016bd6:	687b      	ldr	r3, [r7, #4]
 8016bd8:	7d1b      	ldrb	r3, [r3, #20]
 8016bda:	2b06      	cmp	r3, #6
 8016bdc:	f200 84dd 	bhi.w	801759a <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8016be0:	687b      	ldr	r3, [r7, #4]
 8016be2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016be4:	4b30      	ldr	r3, [pc, #192]	; (8016ca8 <tcp_receive+0x5e8>)
 8016be6:	681b      	ldr	r3, [r3, #0]
 8016be8:	1ad3      	subs	r3, r2, r3
 8016bea:	3b01      	subs	r3, #1
 8016bec:	2b00      	cmp	r3, #0
 8016bee:	f2c0 808f 	blt.w	8016d10 <tcp_receive+0x650>
 8016bf2:	687b      	ldr	r3, [r7, #4]
 8016bf4:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016bf6:	4b2b      	ldr	r3, [pc, #172]	; (8016ca4 <tcp_receive+0x5e4>)
 8016bf8:	881b      	ldrh	r3, [r3, #0]
 8016bfa:	4619      	mov	r1, r3
 8016bfc:	4b2a      	ldr	r3, [pc, #168]	; (8016ca8 <tcp_receive+0x5e8>)
 8016bfe:	681b      	ldr	r3, [r3, #0]
 8016c00:	440b      	add	r3, r1
 8016c02:	1ad3      	subs	r3, r2, r3
 8016c04:	3301      	adds	r3, #1
 8016c06:	2b00      	cmp	r3, #0
 8016c08:	f300 8082 	bgt.w	8016d10 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8016c0c:	4b27      	ldr	r3, [pc, #156]	; (8016cac <tcp_receive+0x5ec>)
 8016c0e:	685b      	ldr	r3, [r3, #4]
 8016c10:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016c16:	4b24      	ldr	r3, [pc, #144]	; (8016ca8 <tcp_receive+0x5e8>)
 8016c18:	681b      	ldr	r3, [r3, #0]
 8016c1a:	1ad3      	subs	r3, r2, r3
 8016c1c:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8016c1e:	4b23      	ldr	r3, [pc, #140]	; (8016cac <tcp_receive+0x5ec>)
 8016c20:	685b      	ldr	r3, [r3, #4]
 8016c22:	2b00      	cmp	r3, #0
 8016c24:	d106      	bne.n	8016c34 <tcp_receive+0x574>
 8016c26:	4b22      	ldr	r3, [pc, #136]	; (8016cb0 <tcp_receive+0x5f0>)
 8016c28:	f240 5294 	movw	r2, #1428	; 0x594
 8016c2c:	4921      	ldr	r1, [pc, #132]	; (8016cb4 <tcp_receive+0x5f4>)
 8016c2e:	4822      	ldr	r0, [pc, #136]	; (8016cb8 <tcp_receive+0x5f8>)
 8016c30:	f006 fc3c 	bl	801d4ac <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8016c34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c36:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8016c3a:	4293      	cmp	r3, r2
 8016c3c:	d906      	bls.n	8016c4c <tcp_receive+0x58c>
 8016c3e:	4b1c      	ldr	r3, [pc, #112]	; (8016cb0 <tcp_receive+0x5f0>)
 8016c40:	f240 5295 	movw	r2, #1429	; 0x595
 8016c44:	491d      	ldr	r1, [pc, #116]	; (8016cbc <tcp_receive+0x5fc>)
 8016c46:	481c      	ldr	r0, [pc, #112]	; (8016cb8 <tcp_receive+0x5f8>)
 8016c48:	f006 fc30 	bl	801d4ac <iprintf>
      off = (u16_t)off32;
 8016c4c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016c4e:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 8016c52:	4b16      	ldr	r3, [pc, #88]	; (8016cac <tcp_receive+0x5ec>)
 8016c54:	685b      	ldr	r3, [r3, #4]
 8016c56:	891b      	ldrh	r3, [r3, #8]
 8016c58:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016c5c:	429a      	cmp	r2, r3
 8016c5e:	d906      	bls.n	8016c6e <tcp_receive+0x5ae>
 8016c60:	4b13      	ldr	r3, [pc, #76]	; (8016cb0 <tcp_receive+0x5f0>)
 8016c62:	f240 5297 	movw	r2, #1431	; 0x597
 8016c66:	4916      	ldr	r1, [pc, #88]	; (8016cc0 <tcp_receive+0x600>)
 8016c68:	4813      	ldr	r0, [pc, #76]	; (8016cb8 <tcp_receive+0x5f8>)
 8016c6a:	f006 fc1f 	bl	801d4ac <iprintf>
      inseg.len -= off;
 8016c6e:	4b0f      	ldr	r3, [pc, #60]	; (8016cac <tcp_receive+0x5ec>)
 8016c70:	891a      	ldrh	r2, [r3, #8]
 8016c72:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016c76:	1ad3      	subs	r3, r2, r3
 8016c78:	b29a      	uxth	r2, r3
 8016c7a:	4b0c      	ldr	r3, [pc, #48]	; (8016cac <tcp_receive+0x5ec>)
 8016c7c:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8016c7e:	4b0b      	ldr	r3, [pc, #44]	; (8016cac <tcp_receive+0x5ec>)
 8016c80:	685b      	ldr	r3, [r3, #4]
 8016c82:	891a      	ldrh	r2, [r3, #8]
 8016c84:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016c88:	1ad3      	subs	r3, r2, r3
 8016c8a:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8016c8c:	e02a      	b.n	8016ce4 <tcp_receive+0x624>
 8016c8e:	bf00      	nop
 8016c90:	0801fad0 	.word	0x0801fad0
 8016c94:	0801fad8 	.word	0x0801fad8
 8016c98:	2002408c 	.word	0x2002408c
 8016c9c:	20024088 	.word	0x20024088
 8016ca0:	2002404c 	.word	0x2002404c
 8016ca4:	2002408e 	.word	0x2002408e
 8016ca8:	20024084 	.word	0x20024084
 8016cac:	20024064 	.word	0x20024064
 8016cb0:	0801f768 	.word	0x0801f768
 8016cb4:	0801fae0 	.word	0x0801fae0
 8016cb8:	0801f7b4 	.word	0x0801f7b4
 8016cbc:	0801faf0 	.word	0x0801faf0
 8016cc0:	0801fb00 	.word	0x0801fb00
        off -= p->len;
 8016cc4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016cc6:	895b      	ldrh	r3, [r3, #10]
 8016cc8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016ccc:	1ad3      	subs	r3, r2, r3
 8016cce:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 8016cd2:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016cd4:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8016cd6:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 8016cd8:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016cda:	2200      	movs	r2, #0
 8016cdc:	815a      	strh	r2, [r3, #10]
        p = p->next;
 8016cde:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016ce0:	681b      	ldr	r3, [r3, #0]
 8016ce2:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 8016ce4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8016ce6:	895b      	ldrh	r3, [r3, #10]
 8016ce8:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8016cec:	429a      	cmp	r2, r3
 8016cee:	d8e9      	bhi.n	8016cc4 <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 8016cf0:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016cf4:	4619      	mov	r1, r3
 8016cf6:	6c78      	ldr	r0, [r7, #68]	; 0x44
 8016cf8:	f7fc fb60 	bl	80133bc <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 8016cfc:	687b      	ldr	r3, [r7, #4]
 8016cfe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d00:	4a91      	ldr	r2, [pc, #580]	; (8016f48 <tcp_receive+0x888>)
 8016d02:	6013      	str	r3, [r2, #0]
 8016d04:	4b91      	ldr	r3, [pc, #580]	; (8016f4c <tcp_receive+0x88c>)
 8016d06:	68db      	ldr	r3, [r3, #12]
 8016d08:	4a8f      	ldr	r2, [pc, #572]	; (8016f48 <tcp_receive+0x888>)
 8016d0a:	6812      	ldr	r2, [r2, #0]
 8016d0c:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8016d0e:	e00d      	b.n	8016d2c <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 8016d10:	4b8d      	ldr	r3, [pc, #564]	; (8016f48 <tcp_receive+0x888>)
 8016d12:	681a      	ldr	r2, [r3, #0]
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d18:	1ad3      	subs	r3, r2, r3
 8016d1a:	2b00      	cmp	r3, #0
 8016d1c:	da06      	bge.n	8016d2c <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 8016d1e:	687b      	ldr	r3, [r7, #4]
 8016d20:	8b5b      	ldrh	r3, [r3, #26]
 8016d22:	f043 0302 	orr.w	r3, r3, #2
 8016d26:	b29a      	uxth	r2, r3
 8016d28:	687b      	ldr	r3, [r7, #4]
 8016d2a:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8016d2c:	4b86      	ldr	r3, [pc, #536]	; (8016f48 <tcp_receive+0x888>)
 8016d2e:	681a      	ldr	r2, [r3, #0]
 8016d30:	687b      	ldr	r3, [r7, #4]
 8016d32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d34:	1ad3      	subs	r3, r2, r3
 8016d36:	2b00      	cmp	r3, #0
 8016d38:	f2c0 842a 	blt.w	8017590 <tcp_receive+0xed0>
 8016d3c:	4b82      	ldr	r3, [pc, #520]	; (8016f48 <tcp_receive+0x888>)
 8016d3e:	681a      	ldr	r2, [r3, #0]
 8016d40:	687b      	ldr	r3, [r7, #4]
 8016d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016d44:	6879      	ldr	r1, [r7, #4]
 8016d46:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016d48:	440b      	add	r3, r1
 8016d4a:	1ad3      	subs	r3, r2, r3
 8016d4c:	3301      	adds	r3, #1
 8016d4e:	2b00      	cmp	r3, #0
 8016d50:	f300 841e 	bgt.w	8017590 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 8016d54:	687b      	ldr	r3, [r7, #4]
 8016d56:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8016d58:	4b7b      	ldr	r3, [pc, #492]	; (8016f48 <tcp_receive+0x888>)
 8016d5a:	681b      	ldr	r3, [r3, #0]
 8016d5c:	429a      	cmp	r2, r3
 8016d5e:	f040 829a 	bne.w	8017296 <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 8016d62:	4b7a      	ldr	r3, [pc, #488]	; (8016f4c <tcp_receive+0x88c>)
 8016d64:	891c      	ldrh	r4, [r3, #8]
 8016d66:	4b79      	ldr	r3, [pc, #484]	; (8016f4c <tcp_receive+0x88c>)
 8016d68:	68db      	ldr	r3, [r3, #12]
 8016d6a:	899b      	ldrh	r3, [r3, #12]
 8016d6c:	b29b      	uxth	r3, r3
 8016d6e:	4618      	mov	r0, r3
 8016d70:	f7fa ffa8 	bl	8011cc4 <lwip_htons>
 8016d74:	4603      	mov	r3, r0
 8016d76:	b2db      	uxtb	r3, r3
 8016d78:	f003 0303 	and.w	r3, r3, #3
 8016d7c:	2b00      	cmp	r3, #0
 8016d7e:	d001      	beq.n	8016d84 <tcp_receive+0x6c4>
 8016d80:	2301      	movs	r3, #1
 8016d82:	e000      	b.n	8016d86 <tcp_receive+0x6c6>
 8016d84:	2300      	movs	r3, #0
 8016d86:	4423      	add	r3, r4
 8016d88:	b29a      	uxth	r2, r3
 8016d8a:	4b71      	ldr	r3, [pc, #452]	; (8016f50 <tcp_receive+0x890>)
 8016d8c:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8016d8e:	687b      	ldr	r3, [r7, #4]
 8016d90:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016d92:	4b6f      	ldr	r3, [pc, #444]	; (8016f50 <tcp_receive+0x890>)
 8016d94:	881b      	ldrh	r3, [r3, #0]
 8016d96:	429a      	cmp	r2, r3
 8016d98:	d275      	bcs.n	8016e86 <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016d9a:	4b6c      	ldr	r3, [pc, #432]	; (8016f4c <tcp_receive+0x88c>)
 8016d9c:	68db      	ldr	r3, [r3, #12]
 8016d9e:	899b      	ldrh	r3, [r3, #12]
 8016da0:	b29b      	uxth	r3, r3
 8016da2:	4618      	mov	r0, r3
 8016da4:	f7fa ff8e 	bl	8011cc4 <lwip_htons>
 8016da8:	4603      	mov	r3, r0
 8016daa:	b2db      	uxtb	r3, r3
 8016dac:	f003 0301 	and.w	r3, r3, #1
 8016db0:	2b00      	cmp	r3, #0
 8016db2:	d01f      	beq.n	8016df4 <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 8016db4:	4b65      	ldr	r3, [pc, #404]	; (8016f4c <tcp_receive+0x88c>)
 8016db6:	68db      	ldr	r3, [r3, #12]
 8016db8:	899b      	ldrh	r3, [r3, #12]
 8016dba:	b29b      	uxth	r3, r3
 8016dbc:	b21b      	sxth	r3, r3
 8016dbe:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8016dc2:	b21c      	sxth	r4, r3
 8016dc4:	4b61      	ldr	r3, [pc, #388]	; (8016f4c <tcp_receive+0x88c>)
 8016dc6:	68db      	ldr	r3, [r3, #12]
 8016dc8:	899b      	ldrh	r3, [r3, #12]
 8016dca:	b29b      	uxth	r3, r3
 8016dcc:	4618      	mov	r0, r3
 8016dce:	f7fa ff79 	bl	8011cc4 <lwip_htons>
 8016dd2:	4603      	mov	r3, r0
 8016dd4:	b2db      	uxtb	r3, r3
 8016dd6:	b29b      	uxth	r3, r3
 8016dd8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8016ddc:	b29b      	uxth	r3, r3
 8016dde:	4618      	mov	r0, r3
 8016de0:	f7fa ff70 	bl	8011cc4 <lwip_htons>
 8016de4:	4603      	mov	r3, r0
 8016de6:	b21b      	sxth	r3, r3
 8016de8:	4323      	orrs	r3, r4
 8016dea:	b21a      	sxth	r2, r3
 8016dec:	4b57      	ldr	r3, [pc, #348]	; (8016f4c <tcp_receive+0x88c>)
 8016dee:	68db      	ldr	r3, [r3, #12]
 8016df0:	b292      	uxth	r2, r2
 8016df2:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 8016df4:	687b      	ldr	r3, [r7, #4]
 8016df6:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8016df8:	4b54      	ldr	r3, [pc, #336]	; (8016f4c <tcp_receive+0x88c>)
 8016dfa:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016dfc:	4b53      	ldr	r3, [pc, #332]	; (8016f4c <tcp_receive+0x88c>)
 8016dfe:	68db      	ldr	r3, [r3, #12]
 8016e00:	899b      	ldrh	r3, [r3, #12]
 8016e02:	b29b      	uxth	r3, r3
 8016e04:	4618      	mov	r0, r3
 8016e06:	f7fa ff5d 	bl	8011cc4 <lwip_htons>
 8016e0a:	4603      	mov	r3, r0
 8016e0c:	b2db      	uxtb	r3, r3
 8016e0e:	f003 0302 	and.w	r3, r3, #2
 8016e12:	2b00      	cmp	r3, #0
 8016e14:	d005      	beq.n	8016e22 <tcp_receive+0x762>
            inseg.len -= 1;
 8016e16:	4b4d      	ldr	r3, [pc, #308]	; (8016f4c <tcp_receive+0x88c>)
 8016e18:	891b      	ldrh	r3, [r3, #8]
 8016e1a:	3b01      	subs	r3, #1
 8016e1c:	b29a      	uxth	r2, r3
 8016e1e:	4b4b      	ldr	r3, [pc, #300]	; (8016f4c <tcp_receive+0x88c>)
 8016e20:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 8016e22:	4b4a      	ldr	r3, [pc, #296]	; (8016f4c <tcp_receive+0x88c>)
 8016e24:	685b      	ldr	r3, [r3, #4]
 8016e26:	4a49      	ldr	r2, [pc, #292]	; (8016f4c <tcp_receive+0x88c>)
 8016e28:	8912      	ldrh	r2, [r2, #8]
 8016e2a:	4611      	mov	r1, r2
 8016e2c:	4618      	mov	r0, r3
 8016e2e:	f7fc f9c5 	bl	80131bc <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 8016e32:	4b46      	ldr	r3, [pc, #280]	; (8016f4c <tcp_receive+0x88c>)
 8016e34:	891c      	ldrh	r4, [r3, #8]
 8016e36:	4b45      	ldr	r3, [pc, #276]	; (8016f4c <tcp_receive+0x88c>)
 8016e38:	68db      	ldr	r3, [r3, #12]
 8016e3a:	899b      	ldrh	r3, [r3, #12]
 8016e3c:	b29b      	uxth	r3, r3
 8016e3e:	4618      	mov	r0, r3
 8016e40:	f7fa ff40 	bl	8011cc4 <lwip_htons>
 8016e44:	4603      	mov	r3, r0
 8016e46:	b2db      	uxtb	r3, r3
 8016e48:	f003 0303 	and.w	r3, r3, #3
 8016e4c:	2b00      	cmp	r3, #0
 8016e4e:	d001      	beq.n	8016e54 <tcp_receive+0x794>
 8016e50:	2301      	movs	r3, #1
 8016e52:	e000      	b.n	8016e56 <tcp_receive+0x796>
 8016e54:	2300      	movs	r3, #0
 8016e56:	4423      	add	r3, r4
 8016e58:	b29a      	uxth	r2, r3
 8016e5a:	4b3d      	ldr	r3, [pc, #244]	; (8016f50 <tcp_receive+0x890>)
 8016e5c:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8016e5e:	4b3c      	ldr	r3, [pc, #240]	; (8016f50 <tcp_receive+0x890>)
 8016e60:	881b      	ldrh	r3, [r3, #0]
 8016e62:	461a      	mov	r2, r3
 8016e64:	4b38      	ldr	r3, [pc, #224]	; (8016f48 <tcp_receive+0x888>)
 8016e66:	681b      	ldr	r3, [r3, #0]
 8016e68:	441a      	add	r2, r3
 8016e6a:	687b      	ldr	r3, [r7, #4]
 8016e6c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8016e6e:	6879      	ldr	r1, [r7, #4]
 8016e70:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8016e72:	440b      	add	r3, r1
 8016e74:	429a      	cmp	r2, r3
 8016e76:	d006      	beq.n	8016e86 <tcp_receive+0x7c6>
 8016e78:	4b36      	ldr	r3, [pc, #216]	; (8016f54 <tcp_receive+0x894>)
 8016e7a:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8016e7e:	4936      	ldr	r1, [pc, #216]	; (8016f58 <tcp_receive+0x898>)
 8016e80:	4836      	ldr	r0, [pc, #216]	; (8016f5c <tcp_receive+0x89c>)
 8016e82:	f006 fb13 	bl	801d4ac <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 8016e86:	687b      	ldr	r3, [r7, #4]
 8016e88:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016e8a:	2b00      	cmp	r3, #0
 8016e8c:	f000 80e7 	beq.w	801705e <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8016e90:	4b2e      	ldr	r3, [pc, #184]	; (8016f4c <tcp_receive+0x88c>)
 8016e92:	68db      	ldr	r3, [r3, #12]
 8016e94:	899b      	ldrh	r3, [r3, #12]
 8016e96:	b29b      	uxth	r3, r3
 8016e98:	4618      	mov	r0, r3
 8016e9a:	f7fa ff13 	bl	8011cc4 <lwip_htons>
 8016e9e:	4603      	mov	r3, r0
 8016ea0:	b2db      	uxtb	r3, r3
 8016ea2:	f003 0301 	and.w	r3, r3, #1
 8016ea6:	2b00      	cmp	r3, #0
 8016ea8:	d010      	beq.n	8016ecc <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8016eaa:	e00a      	b.n	8016ec2 <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8016eac:	687b      	ldr	r3, [r7, #4]
 8016eae:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016eb0:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 8016eb2:	687b      	ldr	r3, [r7, #4]
 8016eb4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016eb6:	681a      	ldr	r2, [r3, #0]
 8016eb8:	687b      	ldr	r3, [r7, #4]
 8016eba:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8016ebc:	68f8      	ldr	r0, [r7, #12]
 8016ebe:	f7fd fd92 	bl	80149e6 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 8016ec2:	687b      	ldr	r3, [r7, #4]
 8016ec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016ec6:	2b00      	cmp	r3, #0
 8016ec8:	d1f0      	bne.n	8016eac <tcp_receive+0x7ec>
 8016eca:	e0c8      	b.n	801705e <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8016ecc:	687b      	ldr	r3, [r7, #4]
 8016ece:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8016ed0:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 8016ed2:	e052      	b.n	8016f7a <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016ed4:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016ed6:	68db      	ldr	r3, [r3, #12]
 8016ed8:	899b      	ldrh	r3, [r3, #12]
 8016eda:	b29b      	uxth	r3, r3
 8016edc:	4618      	mov	r0, r3
 8016ede:	f7fa fef1 	bl	8011cc4 <lwip_htons>
 8016ee2:	4603      	mov	r3, r0
 8016ee4:	b2db      	uxtb	r3, r3
 8016ee6:	f003 0301 	and.w	r3, r3, #1
 8016eea:	2b00      	cmp	r3, #0
 8016eec:	d03d      	beq.n	8016f6a <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 8016eee:	4b17      	ldr	r3, [pc, #92]	; (8016f4c <tcp_receive+0x88c>)
 8016ef0:	68db      	ldr	r3, [r3, #12]
 8016ef2:	899b      	ldrh	r3, [r3, #12]
 8016ef4:	b29b      	uxth	r3, r3
 8016ef6:	4618      	mov	r0, r3
 8016ef8:	f7fa fee4 	bl	8011cc4 <lwip_htons>
 8016efc:	4603      	mov	r3, r0
 8016efe:	b2db      	uxtb	r3, r3
 8016f00:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 8016f04:	2b00      	cmp	r3, #0
 8016f06:	d130      	bne.n	8016f6a <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 8016f08:	4b10      	ldr	r3, [pc, #64]	; (8016f4c <tcp_receive+0x88c>)
 8016f0a:	68db      	ldr	r3, [r3, #12]
 8016f0c:	899b      	ldrh	r3, [r3, #12]
 8016f0e:	b29c      	uxth	r4, r3
 8016f10:	2001      	movs	r0, #1
 8016f12:	f7fa fed7 	bl	8011cc4 <lwip_htons>
 8016f16:	4603      	mov	r3, r0
 8016f18:	461a      	mov	r2, r3
 8016f1a:	4b0c      	ldr	r3, [pc, #48]	; (8016f4c <tcp_receive+0x88c>)
 8016f1c:	68db      	ldr	r3, [r3, #12]
 8016f1e:	4322      	orrs	r2, r4
 8016f20:	b292      	uxth	r2, r2
 8016f22:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 8016f24:	4b09      	ldr	r3, [pc, #36]	; (8016f4c <tcp_receive+0x88c>)
 8016f26:	891c      	ldrh	r4, [r3, #8]
 8016f28:	4b08      	ldr	r3, [pc, #32]	; (8016f4c <tcp_receive+0x88c>)
 8016f2a:	68db      	ldr	r3, [r3, #12]
 8016f2c:	899b      	ldrh	r3, [r3, #12]
 8016f2e:	b29b      	uxth	r3, r3
 8016f30:	4618      	mov	r0, r3
 8016f32:	f7fa fec7 	bl	8011cc4 <lwip_htons>
 8016f36:	4603      	mov	r3, r0
 8016f38:	b2db      	uxtb	r3, r3
 8016f3a:	f003 0303 	and.w	r3, r3, #3
 8016f3e:	2b00      	cmp	r3, #0
 8016f40:	d00e      	beq.n	8016f60 <tcp_receive+0x8a0>
 8016f42:	2301      	movs	r3, #1
 8016f44:	e00d      	b.n	8016f62 <tcp_receive+0x8a2>
 8016f46:	bf00      	nop
 8016f48:	20024084 	.word	0x20024084
 8016f4c:	20024064 	.word	0x20024064
 8016f50:	2002408e 	.word	0x2002408e
 8016f54:	0801f768 	.word	0x0801f768
 8016f58:	0801fb10 	.word	0x0801fb10
 8016f5c:	0801f7b4 	.word	0x0801f7b4
 8016f60:	2300      	movs	r3, #0
 8016f62:	4423      	add	r3, r4
 8016f64:	b29a      	uxth	r2, r3
 8016f66:	4b98      	ldr	r3, [pc, #608]	; (80171c8 <tcp_receive+0xb08>)
 8016f68:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8016f6a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016f6c:	613b      	str	r3, [r7, #16]
              next = next->next;
 8016f6e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016f70:	681b      	ldr	r3, [r3, #0]
 8016f72:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 8016f74:	6938      	ldr	r0, [r7, #16]
 8016f76:	f7fd fd36 	bl	80149e6 <tcp_seg_free>
            while (next &&
 8016f7a:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016f7c:	2b00      	cmp	r3, #0
 8016f7e:	d00e      	beq.n	8016f9e <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8016f80:	4b91      	ldr	r3, [pc, #580]	; (80171c8 <tcp_receive+0xb08>)
 8016f82:	881b      	ldrh	r3, [r3, #0]
 8016f84:	461a      	mov	r2, r3
 8016f86:	4b91      	ldr	r3, [pc, #580]	; (80171cc <tcp_receive+0xb0c>)
 8016f88:	681b      	ldr	r3, [r3, #0]
 8016f8a:	441a      	add	r2, r3
 8016f8c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016f8e:	68db      	ldr	r3, [r3, #12]
 8016f90:	685b      	ldr	r3, [r3, #4]
 8016f92:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8016f94:	8909      	ldrh	r1, [r1, #8]
 8016f96:	440b      	add	r3, r1
 8016f98:	1ad3      	subs	r3, r2, r3
            while (next &&
 8016f9a:	2b00      	cmp	r3, #0
 8016f9c:	da9a      	bge.n	8016ed4 <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8016f9e:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016fa0:	2b00      	cmp	r3, #0
 8016fa2:	d059      	beq.n	8017058 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 8016fa4:	4b88      	ldr	r3, [pc, #544]	; (80171c8 <tcp_receive+0xb08>)
 8016fa6:	881b      	ldrh	r3, [r3, #0]
 8016fa8:	461a      	mov	r2, r3
 8016faa:	4b88      	ldr	r3, [pc, #544]	; (80171cc <tcp_receive+0xb0c>)
 8016fac:	681b      	ldr	r3, [r3, #0]
 8016fae:	441a      	add	r2, r3
 8016fb0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016fb2:	68db      	ldr	r3, [r3, #12]
 8016fb4:	685b      	ldr	r3, [r3, #4]
 8016fb6:	1ad3      	subs	r3, r2, r3
            if (next &&
 8016fb8:	2b00      	cmp	r3, #0
 8016fba:	dd4d      	ble.n	8017058 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8016fbc:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8016fbe:	68db      	ldr	r3, [r3, #12]
 8016fc0:	685b      	ldr	r3, [r3, #4]
 8016fc2:	b29a      	uxth	r2, r3
 8016fc4:	4b81      	ldr	r3, [pc, #516]	; (80171cc <tcp_receive+0xb0c>)
 8016fc6:	681b      	ldr	r3, [r3, #0]
 8016fc8:	b29b      	uxth	r3, r3
 8016fca:	1ad3      	subs	r3, r2, r3
 8016fcc:	b29a      	uxth	r2, r3
 8016fce:	4b80      	ldr	r3, [pc, #512]	; (80171d0 <tcp_receive+0xb10>)
 8016fd0:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 8016fd2:	4b7f      	ldr	r3, [pc, #508]	; (80171d0 <tcp_receive+0xb10>)
 8016fd4:	68db      	ldr	r3, [r3, #12]
 8016fd6:	899b      	ldrh	r3, [r3, #12]
 8016fd8:	b29b      	uxth	r3, r3
 8016fda:	4618      	mov	r0, r3
 8016fdc:	f7fa fe72 	bl	8011cc4 <lwip_htons>
 8016fe0:	4603      	mov	r3, r0
 8016fe2:	b2db      	uxtb	r3, r3
 8016fe4:	f003 0302 	and.w	r3, r3, #2
 8016fe8:	2b00      	cmp	r3, #0
 8016fea:	d005      	beq.n	8016ff8 <tcp_receive+0x938>
                inseg.len -= 1;
 8016fec:	4b78      	ldr	r3, [pc, #480]	; (80171d0 <tcp_receive+0xb10>)
 8016fee:	891b      	ldrh	r3, [r3, #8]
 8016ff0:	3b01      	subs	r3, #1
 8016ff2:	b29a      	uxth	r2, r3
 8016ff4:	4b76      	ldr	r3, [pc, #472]	; (80171d0 <tcp_receive+0xb10>)
 8016ff6:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 8016ff8:	4b75      	ldr	r3, [pc, #468]	; (80171d0 <tcp_receive+0xb10>)
 8016ffa:	685b      	ldr	r3, [r3, #4]
 8016ffc:	4a74      	ldr	r2, [pc, #464]	; (80171d0 <tcp_receive+0xb10>)
 8016ffe:	8912      	ldrh	r2, [r2, #8]
 8017000:	4611      	mov	r1, r2
 8017002:	4618      	mov	r0, r3
 8017004:	f7fc f8da 	bl	80131bc <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 8017008:	4b71      	ldr	r3, [pc, #452]	; (80171d0 <tcp_receive+0xb10>)
 801700a:	891c      	ldrh	r4, [r3, #8]
 801700c:	4b70      	ldr	r3, [pc, #448]	; (80171d0 <tcp_receive+0xb10>)
 801700e:	68db      	ldr	r3, [r3, #12]
 8017010:	899b      	ldrh	r3, [r3, #12]
 8017012:	b29b      	uxth	r3, r3
 8017014:	4618      	mov	r0, r3
 8017016:	f7fa fe55 	bl	8011cc4 <lwip_htons>
 801701a:	4603      	mov	r3, r0
 801701c:	b2db      	uxtb	r3, r3
 801701e:	f003 0303 	and.w	r3, r3, #3
 8017022:	2b00      	cmp	r3, #0
 8017024:	d001      	beq.n	801702a <tcp_receive+0x96a>
 8017026:	2301      	movs	r3, #1
 8017028:	e000      	b.n	801702c <tcp_receive+0x96c>
 801702a:	2300      	movs	r3, #0
 801702c:	4423      	add	r3, r4
 801702e:	b29a      	uxth	r2, r3
 8017030:	4b65      	ldr	r3, [pc, #404]	; (80171c8 <tcp_receive+0xb08>)
 8017032:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 8017034:	4b64      	ldr	r3, [pc, #400]	; (80171c8 <tcp_receive+0xb08>)
 8017036:	881b      	ldrh	r3, [r3, #0]
 8017038:	461a      	mov	r2, r3
 801703a:	4b64      	ldr	r3, [pc, #400]	; (80171cc <tcp_receive+0xb0c>)
 801703c:	681b      	ldr	r3, [r3, #0]
 801703e:	441a      	add	r2, r3
 8017040:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8017042:	68db      	ldr	r3, [r3, #12]
 8017044:	685b      	ldr	r3, [r3, #4]
 8017046:	429a      	cmp	r2, r3
 8017048:	d006      	beq.n	8017058 <tcp_receive+0x998>
 801704a:	4b62      	ldr	r3, [pc, #392]	; (80171d4 <tcp_receive+0xb14>)
 801704c:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8017050:	4961      	ldr	r1, [pc, #388]	; (80171d8 <tcp_receive+0xb18>)
 8017052:	4862      	ldr	r0, [pc, #392]	; (80171dc <tcp_receive+0xb1c>)
 8017054:	f006 fa2a 	bl	801d4ac <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8017058:	687b      	ldr	r3, [r7, #4]
 801705a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 801705c:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 801705e:	4b5a      	ldr	r3, [pc, #360]	; (80171c8 <tcp_receive+0xb08>)
 8017060:	881b      	ldrh	r3, [r3, #0]
 8017062:	461a      	mov	r2, r3
 8017064:	4b59      	ldr	r3, [pc, #356]	; (80171cc <tcp_receive+0xb0c>)
 8017066:	681b      	ldr	r3, [r3, #0]
 8017068:	441a      	add	r2, r3
 801706a:	687b      	ldr	r3, [r7, #4]
 801706c:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 801706e:	687b      	ldr	r3, [r7, #4]
 8017070:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8017072:	4b55      	ldr	r3, [pc, #340]	; (80171c8 <tcp_receive+0xb08>)
 8017074:	881b      	ldrh	r3, [r3, #0]
 8017076:	429a      	cmp	r2, r3
 8017078:	d206      	bcs.n	8017088 <tcp_receive+0x9c8>
 801707a:	4b56      	ldr	r3, [pc, #344]	; (80171d4 <tcp_receive+0xb14>)
 801707c:	f240 6207 	movw	r2, #1543	; 0x607
 8017080:	4957      	ldr	r1, [pc, #348]	; (80171e0 <tcp_receive+0xb20>)
 8017082:	4856      	ldr	r0, [pc, #344]	; (80171dc <tcp_receive+0xb1c>)
 8017084:	f006 fa12 	bl	801d4ac <iprintf>
        pcb->rcv_wnd -= tcplen;
 8017088:	687b      	ldr	r3, [r7, #4]
 801708a:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801708c:	4b4e      	ldr	r3, [pc, #312]	; (80171c8 <tcp_receive+0xb08>)
 801708e:	881b      	ldrh	r3, [r3, #0]
 8017090:	1ad3      	subs	r3, r2, r3
 8017092:	b29a      	uxth	r2, r3
 8017094:	687b      	ldr	r3, [r7, #4]
 8017096:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8017098:	6878      	ldr	r0, [r7, #4]
 801709a:	f7fc ffc5 	bl	8014028 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 801709e:	4b4c      	ldr	r3, [pc, #304]	; (80171d0 <tcp_receive+0xb10>)
 80170a0:	685b      	ldr	r3, [r3, #4]
 80170a2:	891b      	ldrh	r3, [r3, #8]
 80170a4:	2b00      	cmp	r3, #0
 80170a6:	d006      	beq.n	80170b6 <tcp_receive+0x9f6>
          recv_data = inseg.p;
 80170a8:	4b49      	ldr	r3, [pc, #292]	; (80171d0 <tcp_receive+0xb10>)
 80170aa:	685b      	ldr	r3, [r3, #4]
 80170ac:	4a4d      	ldr	r2, [pc, #308]	; (80171e4 <tcp_receive+0xb24>)
 80170ae:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 80170b0:	4b47      	ldr	r3, [pc, #284]	; (80171d0 <tcp_receive+0xb10>)
 80170b2:	2200      	movs	r2, #0
 80170b4:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 80170b6:	4b46      	ldr	r3, [pc, #280]	; (80171d0 <tcp_receive+0xb10>)
 80170b8:	68db      	ldr	r3, [r3, #12]
 80170ba:	899b      	ldrh	r3, [r3, #12]
 80170bc:	b29b      	uxth	r3, r3
 80170be:	4618      	mov	r0, r3
 80170c0:	f7fa fe00 	bl	8011cc4 <lwip_htons>
 80170c4:	4603      	mov	r3, r0
 80170c6:	b2db      	uxtb	r3, r3
 80170c8:	f003 0301 	and.w	r3, r3, #1
 80170cc:	2b00      	cmp	r3, #0
 80170ce:	f000 80b8 	beq.w	8017242 <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 80170d2:	4b45      	ldr	r3, [pc, #276]	; (80171e8 <tcp_receive+0xb28>)
 80170d4:	781b      	ldrb	r3, [r3, #0]
 80170d6:	f043 0320 	orr.w	r3, r3, #32
 80170da:	b2da      	uxtb	r2, r3
 80170dc:	4b42      	ldr	r3, [pc, #264]	; (80171e8 <tcp_receive+0xb28>)
 80170de:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80170e0:	e0af      	b.n	8017242 <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80170e2:	687b      	ldr	r3, [r7, #4]
 80170e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80170e6:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80170e8:	687b      	ldr	r3, [r7, #4]
 80170ea:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80170ec:	68db      	ldr	r3, [r3, #12]
 80170ee:	685b      	ldr	r3, [r3, #4]
 80170f0:	4a36      	ldr	r2, [pc, #216]	; (80171cc <tcp_receive+0xb0c>)
 80170f2:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80170f4:	68bb      	ldr	r3, [r7, #8]
 80170f6:	891b      	ldrh	r3, [r3, #8]
 80170f8:	461c      	mov	r4, r3
 80170fa:	68bb      	ldr	r3, [r7, #8]
 80170fc:	68db      	ldr	r3, [r3, #12]
 80170fe:	899b      	ldrh	r3, [r3, #12]
 8017100:	b29b      	uxth	r3, r3
 8017102:	4618      	mov	r0, r3
 8017104:	f7fa fdde 	bl	8011cc4 <lwip_htons>
 8017108:	4603      	mov	r3, r0
 801710a:	b2db      	uxtb	r3, r3
 801710c:	f003 0303 	and.w	r3, r3, #3
 8017110:	2b00      	cmp	r3, #0
 8017112:	d001      	beq.n	8017118 <tcp_receive+0xa58>
 8017114:	2301      	movs	r3, #1
 8017116:	e000      	b.n	801711a <tcp_receive+0xa5a>
 8017118:	2300      	movs	r3, #0
 801711a:	191a      	adds	r2, r3, r4
 801711c:	687b      	ldr	r3, [r7, #4]
 801711e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017120:	441a      	add	r2, r3
 8017122:	687b      	ldr	r3, [r7, #4]
 8017124:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 8017126:	687b      	ldr	r3, [r7, #4]
 8017128:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 801712a:	461c      	mov	r4, r3
 801712c:	68bb      	ldr	r3, [r7, #8]
 801712e:	891b      	ldrh	r3, [r3, #8]
 8017130:	461d      	mov	r5, r3
 8017132:	68bb      	ldr	r3, [r7, #8]
 8017134:	68db      	ldr	r3, [r3, #12]
 8017136:	899b      	ldrh	r3, [r3, #12]
 8017138:	b29b      	uxth	r3, r3
 801713a:	4618      	mov	r0, r3
 801713c:	f7fa fdc2 	bl	8011cc4 <lwip_htons>
 8017140:	4603      	mov	r3, r0
 8017142:	b2db      	uxtb	r3, r3
 8017144:	f003 0303 	and.w	r3, r3, #3
 8017148:	2b00      	cmp	r3, #0
 801714a:	d001      	beq.n	8017150 <tcp_receive+0xa90>
 801714c:	2301      	movs	r3, #1
 801714e:	e000      	b.n	8017152 <tcp_receive+0xa92>
 8017150:	2300      	movs	r3, #0
 8017152:	442b      	add	r3, r5
 8017154:	429c      	cmp	r4, r3
 8017156:	d206      	bcs.n	8017166 <tcp_receive+0xaa6>
 8017158:	4b1e      	ldr	r3, [pc, #120]	; (80171d4 <tcp_receive+0xb14>)
 801715a:	f240 622b 	movw	r2, #1579	; 0x62b
 801715e:	4923      	ldr	r1, [pc, #140]	; (80171ec <tcp_receive+0xb2c>)
 8017160:	481e      	ldr	r0, [pc, #120]	; (80171dc <tcp_receive+0xb1c>)
 8017162:	f006 f9a3 	bl	801d4ac <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 8017166:	68bb      	ldr	r3, [r7, #8]
 8017168:	891b      	ldrh	r3, [r3, #8]
 801716a:	461c      	mov	r4, r3
 801716c:	68bb      	ldr	r3, [r7, #8]
 801716e:	68db      	ldr	r3, [r3, #12]
 8017170:	899b      	ldrh	r3, [r3, #12]
 8017172:	b29b      	uxth	r3, r3
 8017174:	4618      	mov	r0, r3
 8017176:	f7fa fda5 	bl	8011cc4 <lwip_htons>
 801717a:	4603      	mov	r3, r0
 801717c:	b2db      	uxtb	r3, r3
 801717e:	f003 0303 	and.w	r3, r3, #3
 8017182:	2b00      	cmp	r3, #0
 8017184:	d001      	beq.n	801718a <tcp_receive+0xaca>
 8017186:	2301      	movs	r3, #1
 8017188:	e000      	b.n	801718c <tcp_receive+0xacc>
 801718a:	2300      	movs	r3, #0
 801718c:	1919      	adds	r1, r3, r4
 801718e:	687b      	ldr	r3, [r7, #4]
 8017190:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8017192:	b28b      	uxth	r3, r1
 8017194:	1ad3      	subs	r3, r2, r3
 8017196:	b29a      	uxth	r2, r3
 8017198:	687b      	ldr	r3, [r7, #4]
 801719a:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 801719c:	6878      	ldr	r0, [r7, #4]
 801719e:	f7fc ff43 	bl	8014028 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 80171a2:	68bb      	ldr	r3, [r7, #8]
 80171a4:	685b      	ldr	r3, [r3, #4]
 80171a6:	891b      	ldrh	r3, [r3, #8]
 80171a8:	2b00      	cmp	r3, #0
 80171aa:	d028      	beq.n	80171fe <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 80171ac:	4b0d      	ldr	r3, [pc, #52]	; (80171e4 <tcp_receive+0xb24>)
 80171ae:	681b      	ldr	r3, [r3, #0]
 80171b0:	2b00      	cmp	r3, #0
 80171b2:	d01d      	beq.n	80171f0 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 80171b4:	4b0b      	ldr	r3, [pc, #44]	; (80171e4 <tcp_receive+0xb24>)
 80171b6:	681a      	ldr	r2, [r3, #0]
 80171b8:	68bb      	ldr	r3, [r7, #8]
 80171ba:	685b      	ldr	r3, [r3, #4]
 80171bc:	4619      	mov	r1, r3
 80171be:	4610      	mov	r0, r2
 80171c0:	f7fc fa50 	bl	8013664 <pbuf_cat>
 80171c4:	e018      	b.n	80171f8 <tcp_receive+0xb38>
 80171c6:	bf00      	nop
 80171c8:	2002408e 	.word	0x2002408e
 80171cc:	20024084 	.word	0x20024084
 80171d0:	20024064 	.word	0x20024064
 80171d4:	0801f768 	.word	0x0801f768
 80171d8:	0801fb48 	.word	0x0801fb48
 80171dc:	0801f7b4 	.word	0x0801f7b4
 80171e0:	0801fb84 	.word	0x0801fb84
 80171e4:	20024094 	.word	0x20024094
 80171e8:	20024091 	.word	0x20024091
 80171ec:	0801fba4 	.word	0x0801fba4
            } else {
              recv_data = cseg->p;
 80171f0:	68bb      	ldr	r3, [r7, #8]
 80171f2:	685b      	ldr	r3, [r3, #4]
 80171f4:	4a70      	ldr	r2, [pc, #448]	; (80173b8 <tcp_receive+0xcf8>)
 80171f6:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80171f8:	68bb      	ldr	r3, [r7, #8]
 80171fa:	2200      	movs	r2, #0
 80171fc:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80171fe:	68bb      	ldr	r3, [r7, #8]
 8017200:	68db      	ldr	r3, [r3, #12]
 8017202:	899b      	ldrh	r3, [r3, #12]
 8017204:	b29b      	uxth	r3, r3
 8017206:	4618      	mov	r0, r3
 8017208:	f7fa fd5c 	bl	8011cc4 <lwip_htons>
 801720c:	4603      	mov	r3, r0
 801720e:	b2db      	uxtb	r3, r3
 8017210:	f003 0301 	and.w	r3, r3, #1
 8017214:	2b00      	cmp	r3, #0
 8017216:	d00d      	beq.n	8017234 <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 8017218:	4b68      	ldr	r3, [pc, #416]	; (80173bc <tcp_receive+0xcfc>)
 801721a:	781b      	ldrb	r3, [r3, #0]
 801721c:	f043 0320 	orr.w	r3, r3, #32
 8017220:	b2da      	uxtb	r2, r3
 8017222:	4b66      	ldr	r3, [pc, #408]	; (80173bc <tcp_receive+0xcfc>)
 8017224:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 8017226:	687b      	ldr	r3, [r7, #4]
 8017228:	7d1b      	ldrb	r3, [r3, #20]
 801722a:	2b04      	cmp	r3, #4
 801722c:	d102      	bne.n	8017234 <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 801722e:	687b      	ldr	r3, [r7, #4]
 8017230:	2207      	movs	r2, #7
 8017232:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 8017234:	68bb      	ldr	r3, [r7, #8]
 8017236:	681a      	ldr	r2, [r3, #0]
 8017238:	687b      	ldr	r3, [r7, #4]
 801723a:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 801723c:	68b8      	ldr	r0, [r7, #8]
 801723e:	f7fd fbd2 	bl	80149e6 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 8017242:	687b      	ldr	r3, [r7, #4]
 8017244:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8017246:	2b00      	cmp	r3, #0
 8017248:	d008      	beq.n	801725c <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 801724a:	687b      	ldr	r3, [r7, #4]
 801724c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801724e:	68db      	ldr	r3, [r3, #12]
 8017250:	685a      	ldr	r2, [r3, #4]
 8017252:	687b      	ldr	r3, [r7, #4]
 8017254:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 8017256:	429a      	cmp	r2, r3
 8017258:	f43f af43 	beq.w	80170e2 <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 801725c:	687b      	ldr	r3, [r7, #4]
 801725e:	8b5b      	ldrh	r3, [r3, #26]
 8017260:	f003 0301 	and.w	r3, r3, #1
 8017264:	2b00      	cmp	r3, #0
 8017266:	d00e      	beq.n	8017286 <tcp_receive+0xbc6>
 8017268:	687b      	ldr	r3, [r7, #4]
 801726a:	8b5b      	ldrh	r3, [r3, #26]
 801726c:	f023 0301 	bic.w	r3, r3, #1
 8017270:	b29a      	uxth	r2, r3
 8017272:	687b      	ldr	r3, [r7, #4]
 8017274:	835a      	strh	r2, [r3, #26]
 8017276:	687b      	ldr	r3, [r7, #4]
 8017278:	8b5b      	ldrh	r3, [r3, #26]
 801727a:	f043 0302 	orr.w	r3, r3, #2
 801727e:	b29a      	uxth	r2, r3
 8017280:	687b      	ldr	r3, [r7, #4]
 8017282:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8017284:	e188      	b.n	8017598 <tcp_receive+0xed8>
        tcp_ack(pcb);
 8017286:	687b      	ldr	r3, [r7, #4]
 8017288:	8b5b      	ldrh	r3, [r3, #26]
 801728a:	f043 0301 	orr.w	r3, r3, #1
 801728e:	b29a      	uxth	r2, r3
 8017290:	687b      	ldr	r3, [r7, #4]
 8017292:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 8017294:	e180      	b.n	8017598 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 8017296:	687b      	ldr	r3, [r7, #4]
 8017298:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801729a:	2b00      	cmp	r3, #0
 801729c:	d106      	bne.n	80172ac <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 801729e:	4848      	ldr	r0, [pc, #288]	; (80173c0 <tcp_receive+0xd00>)
 80172a0:	f7fd fbba 	bl	8014a18 <tcp_seg_copy>
 80172a4:	4602      	mov	r2, r0
 80172a6:	687b      	ldr	r3, [r7, #4]
 80172a8:	675a      	str	r2, [r3, #116]	; 0x74
 80172aa:	e16d      	b.n	8017588 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 80172ac:	2300      	movs	r3, #0
 80172ae:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 80172b0:	687b      	ldr	r3, [r7, #4]
 80172b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80172b4:	63bb      	str	r3, [r7, #56]	; 0x38
 80172b6:	e157      	b.n	8017568 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 80172b8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172ba:	68db      	ldr	r3, [r3, #12]
 80172bc:	685a      	ldr	r2, [r3, #4]
 80172be:	4b41      	ldr	r3, [pc, #260]	; (80173c4 <tcp_receive+0xd04>)
 80172c0:	681b      	ldr	r3, [r3, #0]
 80172c2:	429a      	cmp	r2, r3
 80172c4:	d11d      	bne.n	8017302 <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 80172c6:	4b3e      	ldr	r3, [pc, #248]	; (80173c0 <tcp_receive+0xd00>)
 80172c8:	891a      	ldrh	r2, [r3, #8]
 80172ca:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80172cc:	891b      	ldrh	r3, [r3, #8]
 80172ce:	429a      	cmp	r2, r3
 80172d0:	f240 814f 	bls.w	8017572 <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80172d4:	483a      	ldr	r0, [pc, #232]	; (80173c0 <tcp_receive+0xd00>)
 80172d6:	f7fd fb9f 	bl	8014a18 <tcp_seg_copy>
 80172da:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80172dc:	697b      	ldr	r3, [r7, #20]
 80172de:	2b00      	cmp	r3, #0
 80172e0:	f000 8149 	beq.w	8017576 <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80172e4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80172e6:	2b00      	cmp	r3, #0
 80172e8:	d003      	beq.n	80172f2 <tcp_receive+0xc32>
                    prev->next = cseg;
 80172ea:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80172ec:	697a      	ldr	r2, [r7, #20]
 80172ee:	601a      	str	r2, [r3, #0]
 80172f0:	e002      	b.n	80172f8 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80172f2:	687b      	ldr	r3, [r7, #4]
 80172f4:	697a      	ldr	r2, [r7, #20]
 80172f6:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80172f8:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80172fa:	6978      	ldr	r0, [r7, #20]
 80172fc:	f7ff f8dc 	bl	80164b8 <tcp_oos_insert_segment>
                }
                break;
 8017300:	e139      	b.n	8017576 <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 8017302:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017304:	2b00      	cmp	r3, #0
 8017306:	d117      	bne.n	8017338 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 8017308:	4b2e      	ldr	r3, [pc, #184]	; (80173c4 <tcp_receive+0xd04>)
 801730a:	681a      	ldr	r2, [r3, #0]
 801730c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801730e:	68db      	ldr	r3, [r3, #12]
 8017310:	685b      	ldr	r3, [r3, #4]
 8017312:	1ad3      	subs	r3, r2, r3
 8017314:	2b00      	cmp	r3, #0
 8017316:	da57      	bge.n	80173c8 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8017318:	4829      	ldr	r0, [pc, #164]	; (80173c0 <tcp_receive+0xd00>)
 801731a:	f7fd fb7d 	bl	8014a18 <tcp_seg_copy>
 801731e:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 8017320:	69bb      	ldr	r3, [r7, #24]
 8017322:	2b00      	cmp	r3, #0
 8017324:	f000 8129 	beq.w	801757a <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 8017328:	687b      	ldr	r3, [r7, #4]
 801732a:	69ba      	ldr	r2, [r7, #24]
 801732c:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 801732e:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8017330:	69b8      	ldr	r0, [r7, #24]
 8017332:	f7ff f8c1 	bl	80164b8 <tcp_oos_insert_segment>
                  }
                  break;
 8017336:	e120      	b.n	801757a <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8017338:	4b22      	ldr	r3, [pc, #136]	; (80173c4 <tcp_receive+0xd04>)
 801733a:	681a      	ldr	r2, [r3, #0]
 801733c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801733e:	68db      	ldr	r3, [r3, #12]
 8017340:	685b      	ldr	r3, [r3, #4]
 8017342:	1ad3      	subs	r3, r2, r3
 8017344:	3b01      	subs	r3, #1
 8017346:	2b00      	cmp	r3, #0
 8017348:	db3e      	blt.n	80173c8 <tcp_receive+0xd08>
 801734a:	4b1e      	ldr	r3, [pc, #120]	; (80173c4 <tcp_receive+0xd04>)
 801734c:	681a      	ldr	r2, [r3, #0]
 801734e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017350:	68db      	ldr	r3, [r3, #12]
 8017352:	685b      	ldr	r3, [r3, #4]
 8017354:	1ad3      	subs	r3, r2, r3
 8017356:	3301      	adds	r3, #1
 8017358:	2b00      	cmp	r3, #0
 801735a:	dc35      	bgt.n	80173c8 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801735c:	4818      	ldr	r0, [pc, #96]	; (80173c0 <tcp_receive+0xd00>)
 801735e:	f7fd fb5b 	bl	8014a18 <tcp_seg_copy>
 8017362:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 8017364:	69fb      	ldr	r3, [r7, #28]
 8017366:	2b00      	cmp	r3, #0
 8017368:	f000 8109 	beq.w	801757e <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 801736c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801736e:	68db      	ldr	r3, [r3, #12]
 8017370:	685b      	ldr	r3, [r3, #4]
 8017372:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8017374:	8912      	ldrh	r2, [r2, #8]
 8017376:	441a      	add	r2, r3
 8017378:	4b12      	ldr	r3, [pc, #72]	; (80173c4 <tcp_receive+0xd04>)
 801737a:	681b      	ldr	r3, [r3, #0]
 801737c:	1ad3      	subs	r3, r2, r3
 801737e:	2b00      	cmp	r3, #0
 8017380:	dd12      	ble.n	80173a8 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 8017382:	4b10      	ldr	r3, [pc, #64]	; (80173c4 <tcp_receive+0xd04>)
 8017384:	681b      	ldr	r3, [r3, #0]
 8017386:	b29a      	uxth	r2, r3
 8017388:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801738a:	68db      	ldr	r3, [r3, #12]
 801738c:	685b      	ldr	r3, [r3, #4]
 801738e:	b29b      	uxth	r3, r3
 8017390:	1ad3      	subs	r3, r2, r3
 8017392:	b29a      	uxth	r2, r3
 8017394:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8017396:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8017398:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801739a:	685a      	ldr	r2, [r3, #4]
 801739c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801739e:	891b      	ldrh	r3, [r3, #8]
 80173a0:	4619      	mov	r1, r3
 80173a2:	4610      	mov	r0, r2
 80173a4:	f7fb ff0a 	bl	80131bc <pbuf_realloc>
                    }
                    prev->next = cseg;
 80173a8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80173aa:	69fa      	ldr	r2, [r7, #28]
 80173ac:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 80173ae:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80173b0:	69f8      	ldr	r0, [r7, #28]
 80173b2:	f7ff f881 	bl	80164b8 <tcp_oos_insert_segment>
                  }
                  break;
 80173b6:	e0e2      	b.n	801757e <tcp_receive+0xebe>
 80173b8:	20024094 	.word	0x20024094
 80173bc:	20024091 	.word	0x20024091
 80173c0:	20024064 	.word	0x20024064
 80173c4:	20024084 	.word	0x20024084
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 80173c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80173ca:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 80173cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80173ce:	681b      	ldr	r3, [r3, #0]
 80173d0:	2b00      	cmp	r3, #0
 80173d2:	f040 80c6 	bne.w	8017562 <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 80173d6:	4b80      	ldr	r3, [pc, #512]	; (80175d8 <tcp_receive+0xf18>)
 80173d8:	681a      	ldr	r2, [r3, #0]
 80173da:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80173dc:	68db      	ldr	r3, [r3, #12]
 80173de:	685b      	ldr	r3, [r3, #4]
 80173e0:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80173e2:	2b00      	cmp	r3, #0
 80173e4:	f340 80bd 	ble.w	8017562 <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80173e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80173ea:	68db      	ldr	r3, [r3, #12]
 80173ec:	899b      	ldrh	r3, [r3, #12]
 80173ee:	b29b      	uxth	r3, r3
 80173f0:	4618      	mov	r0, r3
 80173f2:	f7fa fc67 	bl	8011cc4 <lwip_htons>
 80173f6:	4603      	mov	r3, r0
 80173f8:	b2db      	uxtb	r3, r3
 80173fa:	f003 0301 	and.w	r3, r3, #1
 80173fe:	2b00      	cmp	r3, #0
 8017400:	f040 80bf 	bne.w	8017582 <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 8017404:	4875      	ldr	r0, [pc, #468]	; (80175dc <tcp_receive+0xf1c>)
 8017406:	f7fd fb07 	bl	8014a18 <tcp_seg_copy>
 801740a:	4602      	mov	r2, r0
 801740c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801740e:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 8017410:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017412:	681b      	ldr	r3, [r3, #0]
 8017414:	2b00      	cmp	r3, #0
 8017416:	f000 80b6 	beq.w	8017586 <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 801741a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801741c:	68db      	ldr	r3, [r3, #12]
 801741e:	685b      	ldr	r3, [r3, #4]
 8017420:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8017422:	8912      	ldrh	r2, [r2, #8]
 8017424:	441a      	add	r2, r3
 8017426:	4b6c      	ldr	r3, [pc, #432]	; (80175d8 <tcp_receive+0xf18>)
 8017428:	681b      	ldr	r3, [r3, #0]
 801742a:	1ad3      	subs	r3, r2, r3
 801742c:	2b00      	cmp	r3, #0
 801742e:	dd12      	ble.n	8017456 <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 8017430:	4b69      	ldr	r3, [pc, #420]	; (80175d8 <tcp_receive+0xf18>)
 8017432:	681b      	ldr	r3, [r3, #0]
 8017434:	b29a      	uxth	r2, r3
 8017436:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017438:	68db      	ldr	r3, [r3, #12]
 801743a:	685b      	ldr	r3, [r3, #4]
 801743c:	b29b      	uxth	r3, r3
 801743e:	1ad3      	subs	r3, r2, r3
 8017440:	b29a      	uxth	r2, r3
 8017442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017444:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 8017446:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017448:	685a      	ldr	r2, [r3, #4]
 801744a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801744c:	891b      	ldrh	r3, [r3, #8]
 801744e:	4619      	mov	r1, r3
 8017450:	4610      	mov	r0, r2
 8017452:	f7fb feb3 	bl	80131bc <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 8017456:	4b62      	ldr	r3, [pc, #392]	; (80175e0 <tcp_receive+0xf20>)
 8017458:	881b      	ldrh	r3, [r3, #0]
 801745a:	461a      	mov	r2, r3
 801745c:	4b5e      	ldr	r3, [pc, #376]	; (80175d8 <tcp_receive+0xf18>)
 801745e:	681b      	ldr	r3, [r3, #0]
 8017460:	441a      	add	r2, r3
 8017462:	687b      	ldr	r3, [r7, #4]
 8017464:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017466:	6879      	ldr	r1, [r7, #4]
 8017468:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801746a:	440b      	add	r3, r1
 801746c:	1ad3      	subs	r3, r2, r3
 801746e:	2b00      	cmp	r3, #0
 8017470:	f340 8089 	ble.w	8017586 <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 8017474:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017476:	681b      	ldr	r3, [r3, #0]
 8017478:	68db      	ldr	r3, [r3, #12]
 801747a:	899b      	ldrh	r3, [r3, #12]
 801747c:	b29b      	uxth	r3, r3
 801747e:	4618      	mov	r0, r3
 8017480:	f7fa fc20 	bl	8011cc4 <lwip_htons>
 8017484:	4603      	mov	r3, r0
 8017486:	b2db      	uxtb	r3, r3
 8017488:	f003 0301 	and.w	r3, r3, #1
 801748c:	2b00      	cmp	r3, #0
 801748e:	d022      	beq.n	80174d6 <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8017490:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017492:	681b      	ldr	r3, [r3, #0]
 8017494:	68db      	ldr	r3, [r3, #12]
 8017496:	899b      	ldrh	r3, [r3, #12]
 8017498:	b29b      	uxth	r3, r3
 801749a:	b21b      	sxth	r3, r3
 801749c:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 80174a0:	b21c      	sxth	r4, r3
 80174a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174a4:	681b      	ldr	r3, [r3, #0]
 80174a6:	68db      	ldr	r3, [r3, #12]
 80174a8:	899b      	ldrh	r3, [r3, #12]
 80174aa:	b29b      	uxth	r3, r3
 80174ac:	4618      	mov	r0, r3
 80174ae:	f7fa fc09 	bl	8011cc4 <lwip_htons>
 80174b2:	4603      	mov	r3, r0
 80174b4:	b2db      	uxtb	r3, r3
 80174b6:	b29b      	uxth	r3, r3
 80174b8:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80174bc:	b29b      	uxth	r3, r3
 80174be:	4618      	mov	r0, r3
 80174c0:	f7fa fc00 	bl	8011cc4 <lwip_htons>
 80174c4:	4603      	mov	r3, r0
 80174c6:	b21b      	sxth	r3, r3
 80174c8:	4323      	orrs	r3, r4
 80174ca:	b21a      	sxth	r2, r3
 80174cc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174ce:	681b      	ldr	r3, [r3, #0]
 80174d0:	68db      	ldr	r3, [r3, #12]
 80174d2:	b292      	uxth	r2, r2
 80174d4:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 80174d6:	687b      	ldr	r3, [r7, #4]
 80174d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80174da:	b29a      	uxth	r2, r3
 80174dc:	687b      	ldr	r3, [r7, #4]
 80174de:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80174e0:	4413      	add	r3, r2
 80174e2:	b299      	uxth	r1, r3
 80174e4:	4b3c      	ldr	r3, [pc, #240]	; (80175d8 <tcp_receive+0xf18>)
 80174e6:	681b      	ldr	r3, [r3, #0]
 80174e8:	b29a      	uxth	r2, r3
 80174ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174ec:	681b      	ldr	r3, [r3, #0]
 80174ee:	1a8a      	subs	r2, r1, r2
 80174f0:	b292      	uxth	r2, r2
 80174f2:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80174f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174f6:	681b      	ldr	r3, [r3, #0]
 80174f8:	685a      	ldr	r2, [r3, #4]
 80174fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80174fc:	681b      	ldr	r3, [r3, #0]
 80174fe:	891b      	ldrh	r3, [r3, #8]
 8017500:	4619      	mov	r1, r3
 8017502:	4610      	mov	r0, r2
 8017504:	f7fb fe5a 	bl	80131bc <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 8017508:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801750a:	681b      	ldr	r3, [r3, #0]
 801750c:	891c      	ldrh	r4, [r3, #8]
 801750e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017510:	681b      	ldr	r3, [r3, #0]
 8017512:	68db      	ldr	r3, [r3, #12]
 8017514:	899b      	ldrh	r3, [r3, #12]
 8017516:	b29b      	uxth	r3, r3
 8017518:	4618      	mov	r0, r3
 801751a:	f7fa fbd3 	bl	8011cc4 <lwip_htons>
 801751e:	4603      	mov	r3, r0
 8017520:	b2db      	uxtb	r3, r3
 8017522:	f003 0303 	and.w	r3, r3, #3
 8017526:	2b00      	cmp	r3, #0
 8017528:	d001      	beq.n	801752e <tcp_receive+0xe6e>
 801752a:	2301      	movs	r3, #1
 801752c:	e000      	b.n	8017530 <tcp_receive+0xe70>
 801752e:	2300      	movs	r3, #0
 8017530:	4423      	add	r3, r4
 8017532:	b29a      	uxth	r2, r3
 8017534:	4b2a      	ldr	r3, [pc, #168]	; (80175e0 <tcp_receive+0xf20>)
 8017536:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8017538:	4b29      	ldr	r3, [pc, #164]	; (80175e0 <tcp_receive+0xf20>)
 801753a:	881b      	ldrh	r3, [r3, #0]
 801753c:	461a      	mov	r2, r3
 801753e:	4b26      	ldr	r3, [pc, #152]	; (80175d8 <tcp_receive+0xf18>)
 8017540:	681b      	ldr	r3, [r3, #0]
 8017542:	441a      	add	r2, r3
 8017544:	687b      	ldr	r3, [r7, #4]
 8017546:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8017548:	6879      	ldr	r1, [r7, #4]
 801754a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801754c:	440b      	add	r3, r1
 801754e:	429a      	cmp	r2, r3
 8017550:	d019      	beq.n	8017586 <tcp_receive+0xec6>
 8017552:	4b24      	ldr	r3, [pc, #144]	; (80175e4 <tcp_receive+0xf24>)
 8017554:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8017558:	4923      	ldr	r1, [pc, #140]	; (80175e8 <tcp_receive+0xf28>)
 801755a:	4824      	ldr	r0, [pc, #144]	; (80175ec <tcp_receive+0xf2c>)
 801755c:	f005 ffa6 	bl	801d4ac <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8017560:	e011      	b.n	8017586 <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8017562:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8017564:	681b      	ldr	r3, [r3, #0]
 8017566:	63bb      	str	r3, [r7, #56]	; 0x38
 8017568:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801756a:	2b00      	cmp	r3, #0
 801756c:	f47f aea4 	bne.w	80172b8 <tcp_receive+0xbf8>
 8017570:	e00a      	b.n	8017588 <tcp_receive+0xec8>
                break;
 8017572:	bf00      	nop
 8017574:	e008      	b.n	8017588 <tcp_receive+0xec8>
                break;
 8017576:	bf00      	nop
 8017578:	e006      	b.n	8017588 <tcp_receive+0xec8>
                  break;
 801757a:	bf00      	nop
 801757c:	e004      	b.n	8017588 <tcp_receive+0xec8>
                  break;
 801757e:	bf00      	nop
 8017580:	e002      	b.n	8017588 <tcp_receive+0xec8>
                  break;
 8017582:	bf00      	nop
 8017584:	e000      	b.n	8017588 <tcp_receive+0xec8>
                break;
 8017586:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8017588:	6878      	ldr	r0, [r7, #4]
 801758a:	f001 fa33 	bl	80189f4 <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 801758e:	e003      	b.n	8017598 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8017590:	6878      	ldr	r0, [r7, #4]
 8017592:	f001 fa2f 	bl	80189f4 <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 8017596:	e01a      	b.n	80175ce <tcp_receive+0xf0e>
 8017598:	e019      	b.n	80175ce <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 801759a:	4b0f      	ldr	r3, [pc, #60]	; (80175d8 <tcp_receive+0xf18>)
 801759c:	681a      	ldr	r2, [r3, #0]
 801759e:	687b      	ldr	r3, [r7, #4]
 80175a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80175a2:	1ad3      	subs	r3, r2, r3
 80175a4:	2b00      	cmp	r3, #0
 80175a6:	db0a      	blt.n	80175be <tcp_receive+0xefe>
 80175a8:	4b0b      	ldr	r3, [pc, #44]	; (80175d8 <tcp_receive+0xf18>)
 80175aa:	681a      	ldr	r2, [r3, #0]
 80175ac:	687b      	ldr	r3, [r7, #4]
 80175ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80175b0:	6879      	ldr	r1, [r7, #4]
 80175b2:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 80175b4:	440b      	add	r3, r1
 80175b6:	1ad3      	subs	r3, r2, r3
 80175b8:	3301      	adds	r3, #1
 80175ba:	2b00      	cmp	r3, #0
 80175bc:	dd07      	ble.n	80175ce <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 80175be:	687b      	ldr	r3, [r7, #4]
 80175c0:	8b5b      	ldrh	r3, [r3, #26]
 80175c2:	f043 0302 	orr.w	r3, r3, #2
 80175c6:	b29a      	uxth	r2, r3
 80175c8:	687b      	ldr	r3, [r7, #4]
 80175ca:	835a      	strh	r2, [r3, #26]
    }
  }
}
 80175cc:	e7ff      	b.n	80175ce <tcp_receive+0xf0e>
 80175ce:	bf00      	nop
 80175d0:	3750      	adds	r7, #80	; 0x50
 80175d2:	46bd      	mov	sp, r7
 80175d4:	bdb0      	pop	{r4, r5, r7, pc}
 80175d6:	bf00      	nop
 80175d8:	20024084 	.word	0x20024084
 80175dc:	20024064 	.word	0x20024064
 80175e0:	2002408e 	.word	0x2002408e
 80175e4:	0801f768 	.word	0x0801f768
 80175e8:	0801fb10 	.word	0x0801fb10
 80175ec:	0801f7b4 	.word	0x0801f7b4

080175f0 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80175f0:	b480      	push	{r7}
 80175f2:	b083      	sub	sp, #12
 80175f4:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80175f6:	4b15      	ldr	r3, [pc, #84]	; (801764c <tcp_get_next_optbyte+0x5c>)
 80175f8:	881b      	ldrh	r3, [r3, #0]
 80175fa:	1c5a      	adds	r2, r3, #1
 80175fc:	b291      	uxth	r1, r2
 80175fe:	4a13      	ldr	r2, [pc, #76]	; (801764c <tcp_get_next_optbyte+0x5c>)
 8017600:	8011      	strh	r1, [r2, #0]
 8017602:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 8017604:	4b12      	ldr	r3, [pc, #72]	; (8017650 <tcp_get_next_optbyte+0x60>)
 8017606:	681b      	ldr	r3, [r3, #0]
 8017608:	2b00      	cmp	r3, #0
 801760a:	d004      	beq.n	8017616 <tcp_get_next_optbyte+0x26>
 801760c:	4b11      	ldr	r3, [pc, #68]	; (8017654 <tcp_get_next_optbyte+0x64>)
 801760e:	881b      	ldrh	r3, [r3, #0]
 8017610:	88fa      	ldrh	r2, [r7, #6]
 8017612:	429a      	cmp	r2, r3
 8017614:	d208      	bcs.n	8017628 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 8017616:	4b10      	ldr	r3, [pc, #64]	; (8017658 <tcp_get_next_optbyte+0x68>)
 8017618:	681b      	ldr	r3, [r3, #0]
 801761a:	3314      	adds	r3, #20
 801761c:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 801761e:	88fb      	ldrh	r3, [r7, #6]
 8017620:	683a      	ldr	r2, [r7, #0]
 8017622:	4413      	add	r3, r2
 8017624:	781b      	ldrb	r3, [r3, #0]
 8017626:	e00b      	b.n	8017640 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 8017628:	88fb      	ldrh	r3, [r7, #6]
 801762a:	b2da      	uxtb	r2, r3
 801762c:	4b09      	ldr	r3, [pc, #36]	; (8017654 <tcp_get_next_optbyte+0x64>)
 801762e:	881b      	ldrh	r3, [r3, #0]
 8017630:	b2db      	uxtb	r3, r3
 8017632:	1ad3      	subs	r3, r2, r3
 8017634:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 8017636:	4b06      	ldr	r3, [pc, #24]	; (8017650 <tcp_get_next_optbyte+0x60>)
 8017638:	681a      	ldr	r2, [r3, #0]
 801763a:	797b      	ldrb	r3, [r7, #5]
 801763c:	4413      	add	r3, r2
 801763e:	781b      	ldrb	r3, [r3, #0]
  }
}
 8017640:	4618      	mov	r0, r3
 8017642:	370c      	adds	r7, #12
 8017644:	46bd      	mov	sp, r7
 8017646:	f85d 7b04 	ldr.w	r7, [sp], #4
 801764a:	4770      	bx	lr
 801764c:	20024080 	.word	0x20024080
 8017650:	2002407c 	.word	0x2002407c
 8017654:	2002407a 	.word	0x2002407a
 8017658:	20024074 	.word	0x20024074

0801765c <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 801765c:	b580      	push	{r7, lr}
 801765e:	b084      	sub	sp, #16
 8017660:	af00      	add	r7, sp, #0
 8017662:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8017664:	687b      	ldr	r3, [r7, #4]
 8017666:	2b00      	cmp	r3, #0
 8017668:	d106      	bne.n	8017678 <tcp_parseopt+0x1c>
 801766a:	4b32      	ldr	r3, [pc, #200]	; (8017734 <tcp_parseopt+0xd8>)
 801766c:	f240 727d 	movw	r2, #1917	; 0x77d
 8017670:	4931      	ldr	r1, [pc, #196]	; (8017738 <tcp_parseopt+0xdc>)
 8017672:	4832      	ldr	r0, [pc, #200]	; (801773c <tcp_parseopt+0xe0>)
 8017674:	f005 ff1a 	bl	801d4ac <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8017678:	4b31      	ldr	r3, [pc, #196]	; (8017740 <tcp_parseopt+0xe4>)
 801767a:	881b      	ldrh	r3, [r3, #0]
 801767c:	2b00      	cmp	r3, #0
 801767e:	d055      	beq.n	801772c <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8017680:	4b30      	ldr	r3, [pc, #192]	; (8017744 <tcp_parseopt+0xe8>)
 8017682:	2200      	movs	r2, #0
 8017684:	801a      	strh	r2, [r3, #0]
 8017686:	e045      	b.n	8017714 <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8017688:	f7ff ffb2 	bl	80175f0 <tcp_get_next_optbyte>
 801768c:	4603      	mov	r3, r0
 801768e:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8017690:	7bfb      	ldrb	r3, [r7, #15]
 8017692:	2b02      	cmp	r3, #2
 8017694:	d006      	beq.n	80176a4 <tcp_parseopt+0x48>
 8017696:	2b02      	cmp	r3, #2
 8017698:	dc2b      	bgt.n	80176f2 <tcp_parseopt+0x96>
 801769a:	2b00      	cmp	r3, #0
 801769c:	d041      	beq.n	8017722 <tcp_parseopt+0xc6>
 801769e:	2b01      	cmp	r3, #1
 80176a0:	d127      	bne.n	80176f2 <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 80176a2:	e037      	b.n	8017714 <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 80176a4:	f7ff ffa4 	bl	80175f0 <tcp_get_next_optbyte>
 80176a8:	4603      	mov	r3, r0
 80176aa:	2b04      	cmp	r3, #4
 80176ac:	d13b      	bne.n	8017726 <tcp_parseopt+0xca>
 80176ae:	4b25      	ldr	r3, [pc, #148]	; (8017744 <tcp_parseopt+0xe8>)
 80176b0:	881b      	ldrh	r3, [r3, #0]
 80176b2:	3301      	adds	r3, #1
 80176b4:	4a22      	ldr	r2, [pc, #136]	; (8017740 <tcp_parseopt+0xe4>)
 80176b6:	8812      	ldrh	r2, [r2, #0]
 80176b8:	4293      	cmp	r3, r2
 80176ba:	da34      	bge.n	8017726 <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 80176bc:	f7ff ff98 	bl	80175f0 <tcp_get_next_optbyte>
 80176c0:	4603      	mov	r3, r0
 80176c2:	b29b      	uxth	r3, r3
 80176c4:	021b      	lsls	r3, r3, #8
 80176c6:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 80176c8:	f7ff ff92 	bl	80175f0 <tcp_get_next_optbyte>
 80176cc:	4603      	mov	r3, r0
 80176ce:	b29a      	uxth	r2, r3
 80176d0:	89bb      	ldrh	r3, [r7, #12]
 80176d2:	4313      	orrs	r3, r2
 80176d4:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 80176d6:	89bb      	ldrh	r3, [r7, #12]
 80176d8:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 80176dc:	d804      	bhi.n	80176e8 <tcp_parseopt+0x8c>
 80176de:	89bb      	ldrh	r3, [r7, #12]
 80176e0:	2b00      	cmp	r3, #0
 80176e2:	d001      	beq.n	80176e8 <tcp_parseopt+0x8c>
 80176e4:	89ba      	ldrh	r2, [r7, #12]
 80176e6:	e001      	b.n	80176ec <tcp_parseopt+0x90>
 80176e8:	f44f 7206 	mov.w	r2, #536	; 0x218
 80176ec:	687b      	ldr	r3, [r7, #4]
 80176ee:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 80176f0:	e010      	b.n	8017714 <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 80176f2:	f7ff ff7d 	bl	80175f0 <tcp_get_next_optbyte>
 80176f6:	4603      	mov	r3, r0
 80176f8:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 80176fa:	7afb      	ldrb	r3, [r7, #11]
 80176fc:	2b01      	cmp	r3, #1
 80176fe:	d914      	bls.n	801772a <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8017700:	7afb      	ldrb	r3, [r7, #11]
 8017702:	b29a      	uxth	r2, r3
 8017704:	4b0f      	ldr	r3, [pc, #60]	; (8017744 <tcp_parseopt+0xe8>)
 8017706:	881b      	ldrh	r3, [r3, #0]
 8017708:	4413      	add	r3, r2
 801770a:	b29b      	uxth	r3, r3
 801770c:	3b02      	subs	r3, #2
 801770e:	b29a      	uxth	r2, r3
 8017710:	4b0c      	ldr	r3, [pc, #48]	; (8017744 <tcp_parseopt+0xe8>)
 8017712:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8017714:	4b0b      	ldr	r3, [pc, #44]	; (8017744 <tcp_parseopt+0xe8>)
 8017716:	881a      	ldrh	r2, [r3, #0]
 8017718:	4b09      	ldr	r3, [pc, #36]	; (8017740 <tcp_parseopt+0xe4>)
 801771a:	881b      	ldrh	r3, [r3, #0]
 801771c:	429a      	cmp	r2, r3
 801771e:	d3b3      	bcc.n	8017688 <tcp_parseopt+0x2c>
 8017720:	e004      	b.n	801772c <tcp_parseopt+0xd0>
          return;
 8017722:	bf00      	nop
 8017724:	e002      	b.n	801772c <tcp_parseopt+0xd0>
            return;
 8017726:	bf00      	nop
 8017728:	e000      	b.n	801772c <tcp_parseopt+0xd0>
            return;
 801772a:	bf00      	nop
      }
    }
  }
}
 801772c:	3710      	adds	r7, #16
 801772e:	46bd      	mov	sp, r7
 8017730:	bd80      	pop	{r7, pc}
 8017732:	bf00      	nop
 8017734:	0801f768 	.word	0x0801f768
 8017738:	0801fbcc 	.word	0x0801fbcc
 801773c:	0801f7b4 	.word	0x0801f7b4
 8017740:	20024078 	.word	0x20024078
 8017744:	20024080 	.word	0x20024080

08017748 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8017748:	b480      	push	{r7}
 801774a:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 801774c:	4b05      	ldr	r3, [pc, #20]	; (8017764 <tcp_trigger_input_pcb_close+0x1c>)
 801774e:	781b      	ldrb	r3, [r3, #0]
 8017750:	f043 0310 	orr.w	r3, r3, #16
 8017754:	b2da      	uxtb	r2, r3
 8017756:	4b03      	ldr	r3, [pc, #12]	; (8017764 <tcp_trigger_input_pcb_close+0x1c>)
 8017758:	701a      	strb	r2, [r3, #0]
}
 801775a:	bf00      	nop
 801775c:	46bd      	mov	sp, r7
 801775e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8017762:	4770      	bx	lr
 8017764:	20024091 	.word	0x20024091

08017768 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8017768:	b580      	push	{r7, lr}
 801776a:	b084      	sub	sp, #16
 801776c:	af00      	add	r7, sp, #0
 801776e:	60f8      	str	r0, [r7, #12]
 8017770:	60b9      	str	r1, [r7, #8]
 8017772:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8017774:	68fb      	ldr	r3, [r7, #12]
 8017776:	2b00      	cmp	r3, #0
 8017778:	d00a      	beq.n	8017790 <tcp_route+0x28>
 801777a:	68fb      	ldr	r3, [r7, #12]
 801777c:	7a1b      	ldrb	r3, [r3, #8]
 801777e:	2b00      	cmp	r3, #0
 8017780:	d006      	beq.n	8017790 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8017782:	68fb      	ldr	r3, [r7, #12]
 8017784:	7a1b      	ldrb	r3, [r3, #8]
 8017786:	4618      	mov	r0, r3
 8017788:	f7fb fb10 	bl	8012dac <netif_get_by_index>
 801778c:	4603      	mov	r3, r0
 801778e:	e003      	b.n	8017798 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8017790:	6878      	ldr	r0, [r7, #4]
 8017792:	f003 f99d 	bl	801aad0 <ip4_route>
 8017796:	4603      	mov	r3, r0
  }
}
 8017798:	4618      	mov	r0, r3
 801779a:	3710      	adds	r7, #16
 801779c:	46bd      	mov	sp, r7
 801779e:	bd80      	pop	{r7, pc}

080177a0 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 80177a0:	b590      	push	{r4, r7, lr}
 80177a2:	b087      	sub	sp, #28
 80177a4:	af00      	add	r7, sp, #0
 80177a6:	60f8      	str	r0, [r7, #12]
 80177a8:	60b9      	str	r1, [r7, #8]
 80177aa:	603b      	str	r3, [r7, #0]
 80177ac:	4613      	mov	r3, r2
 80177ae:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 80177b0:	68fb      	ldr	r3, [r7, #12]
 80177b2:	2b00      	cmp	r3, #0
 80177b4:	d105      	bne.n	80177c2 <tcp_create_segment+0x22>
 80177b6:	4b44      	ldr	r3, [pc, #272]	; (80178c8 <tcp_create_segment+0x128>)
 80177b8:	22a3      	movs	r2, #163	; 0xa3
 80177ba:	4944      	ldr	r1, [pc, #272]	; (80178cc <tcp_create_segment+0x12c>)
 80177bc:	4844      	ldr	r0, [pc, #272]	; (80178d0 <tcp_create_segment+0x130>)
 80177be:	f005 fe75 	bl	801d4ac <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 80177c2:	68bb      	ldr	r3, [r7, #8]
 80177c4:	2b00      	cmp	r3, #0
 80177c6:	d105      	bne.n	80177d4 <tcp_create_segment+0x34>
 80177c8:	4b3f      	ldr	r3, [pc, #252]	; (80178c8 <tcp_create_segment+0x128>)
 80177ca:	22a4      	movs	r2, #164	; 0xa4
 80177cc:	4941      	ldr	r1, [pc, #260]	; (80178d4 <tcp_create_segment+0x134>)
 80177ce:	4840      	ldr	r0, [pc, #256]	; (80178d0 <tcp_create_segment+0x130>)
 80177d0:	f005 fe6c 	bl	801d4ac <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80177d4:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80177d8:	009b      	lsls	r3, r3, #2
 80177da:	b2db      	uxtb	r3, r3
 80177dc:	f003 0304 	and.w	r3, r3, #4
 80177e0:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 80177e2:	2003      	movs	r0, #3
 80177e4:	f7fa ff56 	bl	8012694 <memp_malloc>
 80177e8:	6138      	str	r0, [r7, #16]
 80177ea:	693b      	ldr	r3, [r7, #16]
 80177ec:	2b00      	cmp	r3, #0
 80177ee:	d104      	bne.n	80177fa <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 80177f0:	68b8      	ldr	r0, [r7, #8]
 80177f2:	f7fb fe69 	bl	80134c8 <pbuf_free>
    return NULL;
 80177f6:	2300      	movs	r3, #0
 80177f8:	e061      	b.n	80178be <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 80177fa:	693b      	ldr	r3, [r7, #16]
 80177fc:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8017800:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8017802:	693b      	ldr	r3, [r7, #16]
 8017804:	2200      	movs	r2, #0
 8017806:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8017808:	693b      	ldr	r3, [r7, #16]
 801780a:	68ba      	ldr	r2, [r7, #8]
 801780c:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 801780e:	68bb      	ldr	r3, [r7, #8]
 8017810:	891a      	ldrh	r2, [r3, #8]
 8017812:	7dfb      	ldrb	r3, [r7, #23]
 8017814:	b29b      	uxth	r3, r3
 8017816:	429a      	cmp	r2, r3
 8017818:	d205      	bcs.n	8017826 <tcp_create_segment+0x86>
 801781a:	4b2b      	ldr	r3, [pc, #172]	; (80178c8 <tcp_create_segment+0x128>)
 801781c:	22b0      	movs	r2, #176	; 0xb0
 801781e:	492e      	ldr	r1, [pc, #184]	; (80178d8 <tcp_create_segment+0x138>)
 8017820:	482b      	ldr	r0, [pc, #172]	; (80178d0 <tcp_create_segment+0x130>)
 8017822:	f005 fe43 	bl	801d4ac <iprintf>
  seg->len = p->tot_len - optlen;
 8017826:	68bb      	ldr	r3, [r7, #8]
 8017828:	891a      	ldrh	r2, [r3, #8]
 801782a:	7dfb      	ldrb	r3, [r7, #23]
 801782c:	b29b      	uxth	r3, r3
 801782e:	1ad3      	subs	r3, r2, r3
 8017830:	b29a      	uxth	r2, r3
 8017832:	693b      	ldr	r3, [r7, #16]
 8017834:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8017836:	2114      	movs	r1, #20
 8017838:	68b8      	ldr	r0, [r7, #8]
 801783a:	f7fb fdaf 	bl	801339c <pbuf_add_header>
 801783e:	4603      	mov	r3, r0
 8017840:	2b00      	cmp	r3, #0
 8017842:	d004      	beq.n	801784e <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8017844:	6938      	ldr	r0, [r7, #16]
 8017846:	f7fd f8ce 	bl	80149e6 <tcp_seg_free>
    return NULL;
 801784a:	2300      	movs	r3, #0
 801784c:	e037      	b.n	80178be <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 801784e:	693b      	ldr	r3, [r7, #16]
 8017850:	685b      	ldr	r3, [r3, #4]
 8017852:	685a      	ldr	r2, [r3, #4]
 8017854:	693b      	ldr	r3, [r7, #16]
 8017856:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8017858:	68fb      	ldr	r3, [r7, #12]
 801785a:	8ada      	ldrh	r2, [r3, #22]
 801785c:	693b      	ldr	r3, [r7, #16]
 801785e:	68dc      	ldr	r4, [r3, #12]
 8017860:	4610      	mov	r0, r2
 8017862:	f7fa fa2f 	bl	8011cc4 <lwip_htons>
 8017866:	4603      	mov	r3, r0
 8017868:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 801786a:	68fb      	ldr	r3, [r7, #12]
 801786c:	8b1a      	ldrh	r2, [r3, #24]
 801786e:	693b      	ldr	r3, [r7, #16]
 8017870:	68dc      	ldr	r4, [r3, #12]
 8017872:	4610      	mov	r0, r2
 8017874:	f7fa fa26 	bl	8011cc4 <lwip_htons>
 8017878:	4603      	mov	r3, r0
 801787a:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 801787c:	693b      	ldr	r3, [r7, #16]
 801787e:	68dc      	ldr	r4, [r3, #12]
 8017880:	6838      	ldr	r0, [r7, #0]
 8017882:	f7fa fa34 	bl	8011cee <lwip_htonl>
 8017886:	4603      	mov	r3, r0
 8017888:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 801788a:	7dfb      	ldrb	r3, [r7, #23]
 801788c:	089b      	lsrs	r3, r3, #2
 801788e:	b2db      	uxtb	r3, r3
 8017890:	b29b      	uxth	r3, r3
 8017892:	3305      	adds	r3, #5
 8017894:	b29b      	uxth	r3, r3
 8017896:	031b      	lsls	r3, r3, #12
 8017898:	b29a      	uxth	r2, r3
 801789a:	79fb      	ldrb	r3, [r7, #7]
 801789c:	b29b      	uxth	r3, r3
 801789e:	4313      	orrs	r3, r2
 80178a0:	b29a      	uxth	r2, r3
 80178a2:	693b      	ldr	r3, [r7, #16]
 80178a4:	68dc      	ldr	r4, [r3, #12]
 80178a6:	4610      	mov	r0, r2
 80178a8:	f7fa fa0c 	bl	8011cc4 <lwip_htons>
 80178ac:	4603      	mov	r3, r0
 80178ae:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 80178b0:	693b      	ldr	r3, [r7, #16]
 80178b2:	68db      	ldr	r3, [r3, #12]
 80178b4:	2200      	movs	r2, #0
 80178b6:	749a      	strb	r2, [r3, #18]
 80178b8:	2200      	movs	r2, #0
 80178ba:	74da      	strb	r2, [r3, #19]
  return seg;
 80178bc:	693b      	ldr	r3, [r7, #16]
}
 80178be:	4618      	mov	r0, r3
 80178c0:	371c      	adds	r7, #28
 80178c2:	46bd      	mov	sp, r7
 80178c4:	bd90      	pop	{r4, r7, pc}
 80178c6:	bf00      	nop
 80178c8:	0801fbe8 	.word	0x0801fbe8
 80178cc:	0801fc1c 	.word	0x0801fc1c
 80178d0:	0801fc3c 	.word	0x0801fc3c
 80178d4:	0801fc64 	.word	0x0801fc64
 80178d8:	0801fc88 	.word	0x0801fc88

080178dc <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 80178dc:	b590      	push	{r4, r7, lr}
 80178de:	b08b      	sub	sp, #44	; 0x2c
 80178e0:	af02      	add	r7, sp, #8
 80178e2:	6078      	str	r0, [r7, #4]
 80178e4:	460b      	mov	r3, r1
 80178e6:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 80178e8:	2300      	movs	r3, #0
 80178ea:	61fb      	str	r3, [r7, #28]
 80178ec:	2300      	movs	r3, #0
 80178ee:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80178f0:	2300      	movs	r3, #0
 80178f2:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	2b00      	cmp	r3, #0
 80178f8:	d106      	bne.n	8017908 <tcp_split_unsent_seg+0x2c>
 80178fa:	4b95      	ldr	r3, [pc, #596]	; (8017b50 <tcp_split_unsent_seg+0x274>)
 80178fc:	f240 324b 	movw	r2, #843	; 0x34b
 8017900:	4994      	ldr	r1, [pc, #592]	; (8017b54 <tcp_split_unsent_seg+0x278>)
 8017902:	4895      	ldr	r0, [pc, #596]	; (8017b58 <tcp_split_unsent_seg+0x27c>)
 8017904:	f005 fdd2 	bl	801d4ac <iprintf>

  useg = pcb->unsent;
 8017908:	687b      	ldr	r3, [r7, #4]
 801790a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801790c:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 801790e:	697b      	ldr	r3, [r7, #20]
 8017910:	2b00      	cmp	r3, #0
 8017912:	d102      	bne.n	801791a <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 8017914:	f04f 33ff 	mov.w	r3, #4294967295
 8017918:	e116      	b.n	8017b48 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 801791a:	887b      	ldrh	r3, [r7, #2]
 801791c:	2b00      	cmp	r3, #0
 801791e:	d109      	bne.n	8017934 <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8017920:	4b8b      	ldr	r3, [pc, #556]	; (8017b50 <tcp_split_unsent_seg+0x274>)
 8017922:	f240 3253 	movw	r2, #851	; 0x353
 8017926:	498d      	ldr	r1, [pc, #564]	; (8017b5c <tcp_split_unsent_seg+0x280>)
 8017928:	488b      	ldr	r0, [pc, #556]	; (8017b58 <tcp_split_unsent_seg+0x27c>)
 801792a:	f005 fdbf 	bl	801d4ac <iprintf>
    return ERR_VAL;
 801792e:	f06f 0305 	mvn.w	r3, #5
 8017932:	e109      	b.n	8017b48 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 8017934:	697b      	ldr	r3, [r7, #20]
 8017936:	891b      	ldrh	r3, [r3, #8]
 8017938:	887a      	ldrh	r2, [r7, #2]
 801793a:	429a      	cmp	r2, r3
 801793c:	d301      	bcc.n	8017942 <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 801793e:	2300      	movs	r3, #0
 8017940:	e102      	b.n	8017b48 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 8017942:	687b      	ldr	r3, [r7, #4]
 8017944:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017946:	887a      	ldrh	r2, [r7, #2]
 8017948:	429a      	cmp	r2, r3
 801794a:	d906      	bls.n	801795a <tcp_split_unsent_seg+0x7e>
 801794c:	4b80      	ldr	r3, [pc, #512]	; (8017b50 <tcp_split_unsent_seg+0x274>)
 801794e:	f240 325b 	movw	r2, #859	; 0x35b
 8017952:	4983      	ldr	r1, [pc, #524]	; (8017b60 <tcp_split_unsent_seg+0x284>)
 8017954:	4880      	ldr	r0, [pc, #512]	; (8017b58 <tcp_split_unsent_seg+0x27c>)
 8017956:	f005 fda9 	bl	801d4ac <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 801795a:	697b      	ldr	r3, [r7, #20]
 801795c:	891b      	ldrh	r3, [r3, #8]
 801795e:	2b00      	cmp	r3, #0
 8017960:	d106      	bne.n	8017970 <tcp_split_unsent_seg+0x94>
 8017962:	4b7b      	ldr	r3, [pc, #492]	; (8017b50 <tcp_split_unsent_seg+0x274>)
 8017964:	f44f 7257 	mov.w	r2, #860	; 0x35c
 8017968:	497e      	ldr	r1, [pc, #504]	; (8017b64 <tcp_split_unsent_seg+0x288>)
 801796a:	487b      	ldr	r0, [pc, #492]	; (8017b58 <tcp_split_unsent_seg+0x27c>)
 801796c:	f005 fd9e 	bl	801d4ac <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 8017970:	697b      	ldr	r3, [r7, #20]
 8017972:	7a9b      	ldrb	r3, [r3, #10]
 8017974:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 8017976:	7bfb      	ldrb	r3, [r7, #15]
 8017978:	009b      	lsls	r3, r3, #2
 801797a:	b2db      	uxtb	r3, r3
 801797c:	f003 0304 	and.w	r3, r3, #4
 8017980:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 8017982:	697b      	ldr	r3, [r7, #20]
 8017984:	891a      	ldrh	r2, [r3, #8]
 8017986:	887b      	ldrh	r3, [r7, #2]
 8017988:	1ad3      	subs	r3, r2, r3
 801798a:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 801798c:	7bbb      	ldrb	r3, [r7, #14]
 801798e:	b29a      	uxth	r2, r3
 8017990:	89bb      	ldrh	r3, [r7, #12]
 8017992:	4413      	add	r3, r2
 8017994:	b29b      	uxth	r3, r3
 8017996:	f44f 7220 	mov.w	r2, #640	; 0x280
 801799a:	4619      	mov	r1, r3
 801799c:	2036      	movs	r0, #54	; 0x36
 801799e:	f7fb faaf 	bl	8012f00 <pbuf_alloc>
 80179a2:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80179a4:	693b      	ldr	r3, [r7, #16]
 80179a6:	2b00      	cmp	r3, #0
 80179a8:	f000 80b7 	beq.w	8017b1a <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 80179ac:	697b      	ldr	r3, [r7, #20]
 80179ae:	685b      	ldr	r3, [r3, #4]
 80179b0:	891a      	ldrh	r2, [r3, #8]
 80179b2:	697b      	ldr	r3, [r7, #20]
 80179b4:	891b      	ldrh	r3, [r3, #8]
 80179b6:	1ad3      	subs	r3, r2, r3
 80179b8:	b29a      	uxth	r2, r3
 80179ba:	887b      	ldrh	r3, [r7, #2]
 80179bc:	4413      	add	r3, r2
 80179be:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 80179c0:	697b      	ldr	r3, [r7, #20]
 80179c2:	6858      	ldr	r0, [r3, #4]
 80179c4:	693b      	ldr	r3, [r7, #16]
 80179c6:	685a      	ldr	r2, [r3, #4]
 80179c8:	7bbb      	ldrb	r3, [r7, #14]
 80179ca:	18d1      	adds	r1, r2, r3
 80179cc:	897b      	ldrh	r3, [r7, #10]
 80179ce:	89ba      	ldrh	r2, [r7, #12]
 80179d0:	f7fb ff80 	bl	80138d4 <pbuf_copy_partial>
 80179d4:	4603      	mov	r3, r0
 80179d6:	461a      	mov	r2, r3
 80179d8:	89bb      	ldrh	r3, [r7, #12]
 80179da:	4293      	cmp	r3, r2
 80179dc:	f040 809f 	bne.w	8017b1e <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 80179e0:	697b      	ldr	r3, [r7, #20]
 80179e2:	68db      	ldr	r3, [r3, #12]
 80179e4:	899b      	ldrh	r3, [r3, #12]
 80179e6:	b29b      	uxth	r3, r3
 80179e8:	4618      	mov	r0, r3
 80179ea:	f7fa f96b 	bl	8011cc4 <lwip_htons>
 80179ee:	4603      	mov	r3, r0
 80179f0:	b2db      	uxtb	r3, r3
 80179f2:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80179f6:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 80179f8:	2300      	movs	r3, #0
 80179fa:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 80179fc:	7efb      	ldrb	r3, [r7, #27]
 80179fe:	f003 0308 	and.w	r3, r3, #8
 8017a02:	2b00      	cmp	r3, #0
 8017a04:	d007      	beq.n	8017a16 <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 8017a06:	7efb      	ldrb	r3, [r7, #27]
 8017a08:	f023 0308 	bic.w	r3, r3, #8
 8017a0c:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8017a0e:	7ebb      	ldrb	r3, [r7, #26]
 8017a10:	f043 0308 	orr.w	r3, r3, #8
 8017a14:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 8017a16:	7efb      	ldrb	r3, [r7, #27]
 8017a18:	f003 0301 	and.w	r3, r3, #1
 8017a1c:	2b00      	cmp	r3, #0
 8017a1e:	d007      	beq.n	8017a30 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8017a20:	7efb      	ldrb	r3, [r7, #27]
 8017a22:	f023 0301 	bic.w	r3, r3, #1
 8017a26:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 8017a28:	7ebb      	ldrb	r3, [r7, #26]
 8017a2a:	f043 0301 	orr.w	r3, r3, #1
 8017a2e:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 8017a30:	697b      	ldr	r3, [r7, #20]
 8017a32:	68db      	ldr	r3, [r3, #12]
 8017a34:	685b      	ldr	r3, [r3, #4]
 8017a36:	4618      	mov	r0, r3
 8017a38:	f7fa f959 	bl	8011cee <lwip_htonl>
 8017a3c:	4602      	mov	r2, r0
 8017a3e:	887b      	ldrh	r3, [r7, #2]
 8017a40:	18d1      	adds	r1, r2, r3
 8017a42:	7eba      	ldrb	r2, [r7, #26]
 8017a44:	7bfb      	ldrb	r3, [r7, #15]
 8017a46:	9300      	str	r3, [sp, #0]
 8017a48:	460b      	mov	r3, r1
 8017a4a:	6939      	ldr	r1, [r7, #16]
 8017a4c:	6878      	ldr	r0, [r7, #4]
 8017a4e:	f7ff fea7 	bl	80177a0 <tcp_create_segment>
 8017a52:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 8017a54:	69fb      	ldr	r3, [r7, #28]
 8017a56:	2b00      	cmp	r3, #0
 8017a58:	d063      	beq.n	8017b22 <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 8017a5a:	697b      	ldr	r3, [r7, #20]
 8017a5c:	685b      	ldr	r3, [r3, #4]
 8017a5e:	4618      	mov	r0, r3
 8017a60:	f7fb fdc0 	bl	80135e4 <pbuf_clen>
 8017a64:	4603      	mov	r3, r0
 8017a66:	461a      	mov	r2, r3
 8017a68:	687b      	ldr	r3, [r7, #4]
 8017a6a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017a6e:	1a9b      	subs	r3, r3, r2
 8017a70:	b29a      	uxth	r2, r3
 8017a72:	687b      	ldr	r3, [r7, #4]
 8017a74:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 8017a78:	697b      	ldr	r3, [r7, #20]
 8017a7a:	6858      	ldr	r0, [r3, #4]
 8017a7c:	697b      	ldr	r3, [r7, #20]
 8017a7e:	685b      	ldr	r3, [r3, #4]
 8017a80:	891a      	ldrh	r2, [r3, #8]
 8017a82:	89bb      	ldrh	r3, [r7, #12]
 8017a84:	1ad3      	subs	r3, r2, r3
 8017a86:	b29b      	uxth	r3, r3
 8017a88:	4619      	mov	r1, r3
 8017a8a:	f7fb fb97 	bl	80131bc <pbuf_realloc>
  useg->len -= remainder;
 8017a8e:	697b      	ldr	r3, [r7, #20]
 8017a90:	891a      	ldrh	r2, [r3, #8]
 8017a92:	89bb      	ldrh	r3, [r7, #12]
 8017a94:	1ad3      	subs	r3, r2, r3
 8017a96:	b29a      	uxth	r2, r3
 8017a98:	697b      	ldr	r3, [r7, #20]
 8017a9a:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8017a9c:	697b      	ldr	r3, [r7, #20]
 8017a9e:	68db      	ldr	r3, [r3, #12]
 8017aa0:	899b      	ldrh	r3, [r3, #12]
 8017aa2:	b29c      	uxth	r4, r3
 8017aa4:	7efb      	ldrb	r3, [r7, #27]
 8017aa6:	b29b      	uxth	r3, r3
 8017aa8:	4618      	mov	r0, r3
 8017aaa:	f7fa f90b 	bl	8011cc4 <lwip_htons>
 8017aae:	4603      	mov	r3, r0
 8017ab0:	461a      	mov	r2, r3
 8017ab2:	697b      	ldr	r3, [r7, #20]
 8017ab4:	68db      	ldr	r3, [r3, #12]
 8017ab6:	4322      	orrs	r2, r4
 8017ab8:	b292      	uxth	r2, r2
 8017aba:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8017abc:	697b      	ldr	r3, [r7, #20]
 8017abe:	685b      	ldr	r3, [r3, #4]
 8017ac0:	4618      	mov	r0, r3
 8017ac2:	f7fb fd8f 	bl	80135e4 <pbuf_clen>
 8017ac6:	4603      	mov	r3, r0
 8017ac8:	461a      	mov	r2, r3
 8017aca:	687b      	ldr	r3, [r7, #4]
 8017acc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017ad0:	4413      	add	r3, r2
 8017ad2:	b29a      	uxth	r2, r3
 8017ad4:	687b      	ldr	r3, [r7, #4]
 8017ad6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8017ada:	69fb      	ldr	r3, [r7, #28]
 8017adc:	685b      	ldr	r3, [r3, #4]
 8017ade:	4618      	mov	r0, r3
 8017ae0:	f7fb fd80 	bl	80135e4 <pbuf_clen>
 8017ae4:	4603      	mov	r3, r0
 8017ae6:	461a      	mov	r2, r3
 8017ae8:	687b      	ldr	r3, [r7, #4]
 8017aea:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017aee:	4413      	add	r3, r2
 8017af0:	b29a      	uxth	r2, r3
 8017af2:	687b      	ldr	r3, [r7, #4]
 8017af4:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8017af8:	697b      	ldr	r3, [r7, #20]
 8017afa:	681a      	ldr	r2, [r3, #0]
 8017afc:	69fb      	ldr	r3, [r7, #28]
 8017afe:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8017b00:	697b      	ldr	r3, [r7, #20]
 8017b02:	69fa      	ldr	r2, [r7, #28]
 8017b04:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 8017b06:	69fb      	ldr	r3, [r7, #28]
 8017b08:	681b      	ldr	r3, [r3, #0]
 8017b0a:	2b00      	cmp	r3, #0
 8017b0c:	d103      	bne.n	8017b16 <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8017b0e:	687b      	ldr	r3, [r7, #4]
 8017b10:	2200      	movs	r2, #0
 8017b12:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 8017b16:	2300      	movs	r3, #0
 8017b18:	e016      	b.n	8017b48 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8017b1a:	bf00      	nop
 8017b1c:	e002      	b.n	8017b24 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8017b1e:	bf00      	nop
 8017b20:	e000      	b.n	8017b24 <tcp_split_unsent_seg+0x248>
    goto memerr;
 8017b22:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 8017b24:	69fb      	ldr	r3, [r7, #28]
 8017b26:	2b00      	cmp	r3, #0
 8017b28:	d006      	beq.n	8017b38 <tcp_split_unsent_seg+0x25c>
 8017b2a:	4b09      	ldr	r3, [pc, #36]	; (8017b50 <tcp_split_unsent_seg+0x274>)
 8017b2c:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 8017b30:	490d      	ldr	r1, [pc, #52]	; (8017b68 <tcp_split_unsent_seg+0x28c>)
 8017b32:	4809      	ldr	r0, [pc, #36]	; (8017b58 <tcp_split_unsent_seg+0x27c>)
 8017b34:	f005 fcba 	bl	801d4ac <iprintf>
  if (p != NULL) {
 8017b38:	693b      	ldr	r3, [r7, #16]
 8017b3a:	2b00      	cmp	r3, #0
 8017b3c:	d002      	beq.n	8017b44 <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 8017b3e:	6938      	ldr	r0, [r7, #16]
 8017b40:	f7fb fcc2 	bl	80134c8 <pbuf_free>
  }

  return ERR_MEM;
 8017b44:	f04f 33ff 	mov.w	r3, #4294967295
}
 8017b48:	4618      	mov	r0, r3
 8017b4a:	3724      	adds	r7, #36	; 0x24
 8017b4c:	46bd      	mov	sp, r7
 8017b4e:	bd90      	pop	{r4, r7, pc}
 8017b50:	0801fbe8 	.word	0x0801fbe8
 8017b54:	0801ff7c 	.word	0x0801ff7c
 8017b58:	0801fc3c 	.word	0x0801fc3c
 8017b5c:	0801ffa0 	.word	0x0801ffa0
 8017b60:	0801ffc4 	.word	0x0801ffc4
 8017b64:	0801ffd4 	.word	0x0801ffd4
 8017b68:	0801ffe4 	.word	0x0801ffe4

08017b6c <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 8017b6c:	b590      	push	{r4, r7, lr}
 8017b6e:	b085      	sub	sp, #20
 8017b70:	af00      	add	r7, sp, #0
 8017b72:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 8017b74:	687b      	ldr	r3, [r7, #4]
 8017b76:	2b00      	cmp	r3, #0
 8017b78:	d106      	bne.n	8017b88 <tcp_send_fin+0x1c>
 8017b7a:	4b21      	ldr	r3, [pc, #132]	; (8017c00 <tcp_send_fin+0x94>)
 8017b7c:	f240 32eb 	movw	r2, #1003	; 0x3eb
 8017b80:	4920      	ldr	r1, [pc, #128]	; (8017c04 <tcp_send_fin+0x98>)
 8017b82:	4821      	ldr	r0, [pc, #132]	; (8017c08 <tcp_send_fin+0x9c>)
 8017b84:	f005 fc92 	bl	801d4ac <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8017b88:	687b      	ldr	r3, [r7, #4]
 8017b8a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017b8c:	2b00      	cmp	r3, #0
 8017b8e:	d02e      	beq.n	8017bee <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017b90:	687b      	ldr	r3, [r7, #4]
 8017b92:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017b94:	60fb      	str	r3, [r7, #12]
 8017b96:	e002      	b.n	8017b9e <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8017b98:	68fb      	ldr	r3, [r7, #12]
 8017b9a:	681b      	ldr	r3, [r3, #0]
 8017b9c:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8017b9e:	68fb      	ldr	r3, [r7, #12]
 8017ba0:	681b      	ldr	r3, [r3, #0]
 8017ba2:	2b00      	cmp	r3, #0
 8017ba4:	d1f8      	bne.n	8017b98 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 8017ba6:	68fb      	ldr	r3, [r7, #12]
 8017ba8:	68db      	ldr	r3, [r3, #12]
 8017baa:	899b      	ldrh	r3, [r3, #12]
 8017bac:	b29b      	uxth	r3, r3
 8017bae:	4618      	mov	r0, r3
 8017bb0:	f7fa f888 	bl	8011cc4 <lwip_htons>
 8017bb4:	4603      	mov	r3, r0
 8017bb6:	b2db      	uxtb	r3, r3
 8017bb8:	f003 0307 	and.w	r3, r3, #7
 8017bbc:	2b00      	cmp	r3, #0
 8017bbe:	d116      	bne.n	8017bee <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8017bc0:	68fb      	ldr	r3, [r7, #12]
 8017bc2:	68db      	ldr	r3, [r3, #12]
 8017bc4:	899b      	ldrh	r3, [r3, #12]
 8017bc6:	b29c      	uxth	r4, r3
 8017bc8:	2001      	movs	r0, #1
 8017bca:	f7fa f87b 	bl	8011cc4 <lwip_htons>
 8017bce:	4603      	mov	r3, r0
 8017bd0:	461a      	mov	r2, r3
 8017bd2:	68fb      	ldr	r3, [r7, #12]
 8017bd4:	68db      	ldr	r3, [r3, #12]
 8017bd6:	4322      	orrs	r2, r4
 8017bd8:	b292      	uxth	r2, r2
 8017bda:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8017bdc:	687b      	ldr	r3, [r7, #4]
 8017bde:	8b5b      	ldrh	r3, [r3, #26]
 8017be0:	f043 0320 	orr.w	r3, r3, #32
 8017be4:	b29a      	uxth	r2, r3
 8017be6:	687b      	ldr	r3, [r7, #4]
 8017be8:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8017bea:	2300      	movs	r3, #0
 8017bec:	e004      	b.n	8017bf8 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8017bee:	2101      	movs	r1, #1
 8017bf0:	6878      	ldr	r0, [r7, #4]
 8017bf2:	f000 f80b 	bl	8017c0c <tcp_enqueue_flags>
 8017bf6:	4603      	mov	r3, r0
}
 8017bf8:	4618      	mov	r0, r3
 8017bfa:	3714      	adds	r7, #20
 8017bfc:	46bd      	mov	sp, r7
 8017bfe:	bd90      	pop	{r4, r7, pc}
 8017c00:	0801fbe8 	.word	0x0801fbe8
 8017c04:	0801fff0 	.word	0x0801fff0
 8017c08:	0801fc3c 	.word	0x0801fc3c

08017c0c <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8017c0c:	b580      	push	{r7, lr}
 8017c0e:	b08a      	sub	sp, #40	; 0x28
 8017c10:	af02      	add	r7, sp, #8
 8017c12:	6078      	str	r0, [r7, #4]
 8017c14:	460b      	mov	r3, r1
 8017c16:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8017c18:	2300      	movs	r3, #0
 8017c1a:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8017c1c:	2300      	movs	r3, #0
 8017c1e:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8017c20:	78fb      	ldrb	r3, [r7, #3]
 8017c22:	f003 0303 	and.w	r3, r3, #3
 8017c26:	2b00      	cmp	r3, #0
 8017c28:	d106      	bne.n	8017c38 <tcp_enqueue_flags+0x2c>
 8017c2a:	4b67      	ldr	r3, [pc, #412]	; (8017dc8 <tcp_enqueue_flags+0x1bc>)
 8017c2c:	f240 4211 	movw	r2, #1041	; 0x411
 8017c30:	4966      	ldr	r1, [pc, #408]	; (8017dcc <tcp_enqueue_flags+0x1c0>)
 8017c32:	4867      	ldr	r0, [pc, #412]	; (8017dd0 <tcp_enqueue_flags+0x1c4>)
 8017c34:	f005 fc3a 	bl	801d4ac <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 8017c38:	687b      	ldr	r3, [r7, #4]
 8017c3a:	2b00      	cmp	r3, #0
 8017c3c:	d106      	bne.n	8017c4c <tcp_enqueue_flags+0x40>
 8017c3e:	4b62      	ldr	r3, [pc, #392]	; (8017dc8 <tcp_enqueue_flags+0x1bc>)
 8017c40:	f240 4213 	movw	r2, #1043	; 0x413
 8017c44:	4963      	ldr	r1, [pc, #396]	; (8017dd4 <tcp_enqueue_flags+0x1c8>)
 8017c46:	4862      	ldr	r0, [pc, #392]	; (8017dd0 <tcp_enqueue_flags+0x1c4>)
 8017c48:	f005 fc30 	bl	801d4ac <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 8017c4c:	78fb      	ldrb	r3, [r7, #3]
 8017c4e:	f003 0302 	and.w	r3, r3, #2
 8017c52:	2b00      	cmp	r3, #0
 8017c54:	d001      	beq.n	8017c5a <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 8017c56:	2301      	movs	r3, #1
 8017c58:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8017c5a:	7ffb      	ldrb	r3, [r7, #31]
 8017c5c:	009b      	lsls	r3, r3, #2
 8017c5e:	b2db      	uxtb	r3, r3
 8017c60:	f003 0304 	and.w	r3, r3, #4
 8017c64:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 8017c66:	7dfb      	ldrb	r3, [r7, #23]
 8017c68:	b29b      	uxth	r3, r3
 8017c6a:	f44f 7220 	mov.w	r2, #640	; 0x280
 8017c6e:	4619      	mov	r1, r3
 8017c70:	2036      	movs	r0, #54	; 0x36
 8017c72:	f7fb f945 	bl	8012f00 <pbuf_alloc>
 8017c76:	6138      	str	r0, [r7, #16]
 8017c78:	693b      	ldr	r3, [r7, #16]
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	d109      	bne.n	8017c92 <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017c7e:	687b      	ldr	r3, [r7, #4]
 8017c80:	8b5b      	ldrh	r3, [r3, #26]
 8017c82:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017c86:	b29a      	uxth	r2, r3
 8017c88:	687b      	ldr	r3, [r7, #4]
 8017c8a:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8017c8c:	f04f 33ff 	mov.w	r3, #4294967295
 8017c90:	e095      	b.n	8017dbe <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 8017c92:	693b      	ldr	r3, [r7, #16]
 8017c94:	895a      	ldrh	r2, [r3, #10]
 8017c96:	7dfb      	ldrb	r3, [r7, #23]
 8017c98:	b29b      	uxth	r3, r3
 8017c9a:	429a      	cmp	r2, r3
 8017c9c:	d206      	bcs.n	8017cac <tcp_enqueue_flags+0xa0>
 8017c9e:	4b4a      	ldr	r3, [pc, #296]	; (8017dc8 <tcp_enqueue_flags+0x1bc>)
 8017ca0:	f240 4239 	movw	r2, #1081	; 0x439
 8017ca4:	494c      	ldr	r1, [pc, #304]	; (8017dd8 <tcp_enqueue_flags+0x1cc>)
 8017ca6:	484a      	ldr	r0, [pc, #296]	; (8017dd0 <tcp_enqueue_flags+0x1c4>)
 8017ca8:	f005 fc00 	bl	801d4ac <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8017cac:	687b      	ldr	r3, [r7, #4]
 8017cae:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8017cb0:	78fa      	ldrb	r2, [r7, #3]
 8017cb2:	7ffb      	ldrb	r3, [r7, #31]
 8017cb4:	9300      	str	r3, [sp, #0]
 8017cb6:	460b      	mov	r3, r1
 8017cb8:	6939      	ldr	r1, [r7, #16]
 8017cba:	6878      	ldr	r0, [r7, #4]
 8017cbc:	f7ff fd70 	bl	80177a0 <tcp_create_segment>
 8017cc0:	60f8      	str	r0, [r7, #12]
 8017cc2:	68fb      	ldr	r3, [r7, #12]
 8017cc4:	2b00      	cmp	r3, #0
 8017cc6:	d109      	bne.n	8017cdc <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8017cc8:	687b      	ldr	r3, [r7, #4]
 8017cca:	8b5b      	ldrh	r3, [r3, #26]
 8017ccc:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017cd0:	b29a      	uxth	r2, r3
 8017cd2:	687b      	ldr	r3, [r7, #4]
 8017cd4:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8017cd6:	f04f 33ff 	mov.w	r3, #4294967295
 8017cda:	e070      	b.n	8017dbe <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8017cdc:	68fb      	ldr	r3, [r7, #12]
 8017cde:	68db      	ldr	r3, [r3, #12]
 8017ce0:	f003 0303 	and.w	r3, r3, #3
 8017ce4:	2b00      	cmp	r3, #0
 8017ce6:	d006      	beq.n	8017cf6 <tcp_enqueue_flags+0xea>
 8017ce8:	4b37      	ldr	r3, [pc, #220]	; (8017dc8 <tcp_enqueue_flags+0x1bc>)
 8017cea:	f240 4242 	movw	r2, #1090	; 0x442
 8017cee:	493b      	ldr	r1, [pc, #236]	; (8017ddc <tcp_enqueue_flags+0x1d0>)
 8017cf0:	4837      	ldr	r0, [pc, #220]	; (8017dd0 <tcp_enqueue_flags+0x1c4>)
 8017cf2:	f005 fbdb 	bl	801d4ac <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 8017cf6:	68fb      	ldr	r3, [r7, #12]
 8017cf8:	891b      	ldrh	r3, [r3, #8]
 8017cfa:	2b00      	cmp	r3, #0
 8017cfc:	d006      	beq.n	8017d0c <tcp_enqueue_flags+0x100>
 8017cfe:	4b32      	ldr	r3, [pc, #200]	; (8017dc8 <tcp_enqueue_flags+0x1bc>)
 8017d00:	f240 4243 	movw	r2, #1091	; 0x443
 8017d04:	4936      	ldr	r1, [pc, #216]	; (8017de0 <tcp_enqueue_flags+0x1d4>)
 8017d06:	4832      	ldr	r0, [pc, #200]	; (8017dd0 <tcp_enqueue_flags+0x1c4>)
 8017d08:	f005 fbd0 	bl	801d4ac <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8017d0c:	687b      	ldr	r3, [r7, #4]
 8017d0e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017d10:	2b00      	cmp	r3, #0
 8017d12:	d103      	bne.n	8017d1c <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 8017d14:	687b      	ldr	r3, [r7, #4]
 8017d16:	68fa      	ldr	r2, [r7, #12]
 8017d18:	66da      	str	r2, [r3, #108]	; 0x6c
 8017d1a:	e00d      	b.n	8017d38 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8017d1c:	687b      	ldr	r3, [r7, #4]
 8017d1e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017d20:	61bb      	str	r3, [r7, #24]
 8017d22:	e002      	b.n	8017d2a <tcp_enqueue_flags+0x11e>
 8017d24:	69bb      	ldr	r3, [r7, #24]
 8017d26:	681b      	ldr	r3, [r3, #0]
 8017d28:	61bb      	str	r3, [r7, #24]
 8017d2a:	69bb      	ldr	r3, [r7, #24]
 8017d2c:	681b      	ldr	r3, [r3, #0]
 8017d2e:	2b00      	cmp	r3, #0
 8017d30:	d1f8      	bne.n	8017d24 <tcp_enqueue_flags+0x118>
    useg->next = seg;
 8017d32:	69bb      	ldr	r3, [r7, #24]
 8017d34:	68fa      	ldr	r2, [r7, #12]
 8017d36:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 8017d38:	687b      	ldr	r3, [r7, #4]
 8017d3a:	2200      	movs	r2, #0
 8017d3c:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 8017d40:	78fb      	ldrb	r3, [r7, #3]
 8017d42:	f003 0302 	and.w	r3, r3, #2
 8017d46:	2b00      	cmp	r3, #0
 8017d48:	d104      	bne.n	8017d54 <tcp_enqueue_flags+0x148>
 8017d4a:	78fb      	ldrb	r3, [r7, #3]
 8017d4c:	f003 0301 	and.w	r3, r3, #1
 8017d50:	2b00      	cmp	r3, #0
 8017d52:	d004      	beq.n	8017d5e <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 8017d54:	687b      	ldr	r3, [r7, #4]
 8017d56:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8017d58:	1c5a      	adds	r2, r3, #1
 8017d5a:	687b      	ldr	r3, [r7, #4]
 8017d5c:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 8017d5e:	78fb      	ldrb	r3, [r7, #3]
 8017d60:	f003 0301 	and.w	r3, r3, #1
 8017d64:	2b00      	cmp	r3, #0
 8017d66:	d006      	beq.n	8017d76 <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 8017d68:	687b      	ldr	r3, [r7, #4]
 8017d6a:	8b5b      	ldrh	r3, [r3, #26]
 8017d6c:	f043 0320 	orr.w	r3, r3, #32
 8017d70:	b29a      	uxth	r2, r3
 8017d72:	687b      	ldr	r3, [r7, #4]
 8017d74:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8017d76:	68fb      	ldr	r3, [r7, #12]
 8017d78:	685b      	ldr	r3, [r3, #4]
 8017d7a:	4618      	mov	r0, r3
 8017d7c:	f7fb fc32 	bl	80135e4 <pbuf_clen>
 8017d80:	4603      	mov	r3, r0
 8017d82:	461a      	mov	r2, r3
 8017d84:	687b      	ldr	r3, [r7, #4]
 8017d86:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017d8a:	4413      	add	r3, r2
 8017d8c:	b29a      	uxth	r2, r3
 8017d8e:	687b      	ldr	r3, [r7, #4]
 8017d90:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8017d94:	687b      	ldr	r3, [r7, #4]
 8017d96:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017d9a:	2b00      	cmp	r3, #0
 8017d9c:	d00e      	beq.n	8017dbc <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8017d9e:	687b      	ldr	r3, [r7, #4]
 8017da0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017da2:	2b00      	cmp	r3, #0
 8017da4:	d10a      	bne.n	8017dbc <tcp_enqueue_flags+0x1b0>
 8017da6:	687b      	ldr	r3, [r7, #4]
 8017da8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017daa:	2b00      	cmp	r3, #0
 8017dac:	d106      	bne.n	8017dbc <tcp_enqueue_flags+0x1b0>
 8017dae:	4b06      	ldr	r3, [pc, #24]	; (8017dc8 <tcp_enqueue_flags+0x1bc>)
 8017db0:	f240 4265 	movw	r2, #1125	; 0x465
 8017db4:	490b      	ldr	r1, [pc, #44]	; (8017de4 <tcp_enqueue_flags+0x1d8>)
 8017db6:	4806      	ldr	r0, [pc, #24]	; (8017dd0 <tcp_enqueue_flags+0x1c4>)
 8017db8:	f005 fb78 	bl	801d4ac <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8017dbc:	2300      	movs	r3, #0
}
 8017dbe:	4618      	mov	r0, r3
 8017dc0:	3720      	adds	r7, #32
 8017dc2:	46bd      	mov	sp, r7
 8017dc4:	bd80      	pop	{r7, pc}
 8017dc6:	bf00      	nop
 8017dc8:	0801fbe8 	.word	0x0801fbe8
 8017dcc:	0802000c 	.word	0x0802000c
 8017dd0:	0801fc3c 	.word	0x0801fc3c
 8017dd4:	08020064 	.word	0x08020064
 8017dd8:	08020084 	.word	0x08020084
 8017ddc:	080200c0 	.word	0x080200c0
 8017de0:	080200d8 	.word	0x080200d8
 8017de4:	08020104 	.word	0x08020104

08017de8 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8017de8:	b5b0      	push	{r4, r5, r7, lr}
 8017dea:	b08a      	sub	sp, #40	; 0x28
 8017dec:	af00      	add	r7, sp, #0
 8017dee:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8017df0:	687b      	ldr	r3, [r7, #4]
 8017df2:	2b00      	cmp	r3, #0
 8017df4:	d106      	bne.n	8017e04 <tcp_output+0x1c>
 8017df6:	4b8a      	ldr	r3, [pc, #552]	; (8018020 <tcp_output+0x238>)
 8017df8:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8017dfc:	4989      	ldr	r1, [pc, #548]	; (8018024 <tcp_output+0x23c>)
 8017dfe:	488a      	ldr	r0, [pc, #552]	; (8018028 <tcp_output+0x240>)
 8017e00:	f005 fb54 	bl	801d4ac <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8017e04:	687b      	ldr	r3, [r7, #4]
 8017e06:	7d1b      	ldrb	r3, [r3, #20]
 8017e08:	2b01      	cmp	r3, #1
 8017e0a:	d106      	bne.n	8017e1a <tcp_output+0x32>
 8017e0c:	4b84      	ldr	r3, [pc, #528]	; (8018020 <tcp_output+0x238>)
 8017e0e:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8017e12:	4986      	ldr	r1, [pc, #536]	; (801802c <tcp_output+0x244>)
 8017e14:	4884      	ldr	r0, [pc, #528]	; (8018028 <tcp_output+0x240>)
 8017e16:	f005 fb49 	bl	801d4ac <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8017e1a:	4b85      	ldr	r3, [pc, #532]	; (8018030 <tcp_output+0x248>)
 8017e1c:	681b      	ldr	r3, [r3, #0]
 8017e1e:	687a      	ldr	r2, [r7, #4]
 8017e20:	429a      	cmp	r2, r3
 8017e22:	d101      	bne.n	8017e28 <tcp_output+0x40>
    return ERR_OK;
 8017e24:	2300      	movs	r3, #0
 8017e26:	e1ce      	b.n	80181c6 <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8017e28:	687b      	ldr	r3, [r7, #4]
 8017e2a:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8017e2e:	687b      	ldr	r3, [r7, #4]
 8017e30:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017e34:	4293      	cmp	r3, r2
 8017e36:	bf28      	it	cs
 8017e38:	4613      	movcs	r3, r2
 8017e3a:	b29b      	uxth	r3, r3
 8017e3c:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8017e3e:	687b      	ldr	r3, [r7, #4]
 8017e40:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017e42:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8017e44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017e46:	2b00      	cmp	r3, #0
 8017e48:	d10b      	bne.n	8017e62 <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8017e4a:	687b      	ldr	r3, [r7, #4]
 8017e4c:	8b5b      	ldrh	r3, [r3, #26]
 8017e4e:	f003 0302 	and.w	r3, r3, #2
 8017e52:	2b00      	cmp	r3, #0
 8017e54:	f000 81aa 	beq.w	80181ac <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8017e58:	6878      	ldr	r0, [r7, #4]
 8017e5a:	f000 fdcb 	bl	80189f4 <tcp_send_empty_ack>
 8017e5e:	4603      	mov	r3, r0
 8017e60:	e1b1      	b.n	80181c6 <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8017e62:	6879      	ldr	r1, [r7, #4]
 8017e64:	687b      	ldr	r3, [r7, #4]
 8017e66:	3304      	adds	r3, #4
 8017e68:	461a      	mov	r2, r3
 8017e6a:	6878      	ldr	r0, [r7, #4]
 8017e6c:	f7ff fc7c 	bl	8017768 <tcp_route>
 8017e70:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8017e72:	697b      	ldr	r3, [r7, #20]
 8017e74:	2b00      	cmp	r3, #0
 8017e76:	d102      	bne.n	8017e7e <tcp_output+0x96>
    return ERR_RTE;
 8017e78:	f06f 0303 	mvn.w	r3, #3
 8017e7c:	e1a3      	b.n	80181c6 <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8017e7e:	687b      	ldr	r3, [r7, #4]
 8017e80:	2b00      	cmp	r3, #0
 8017e82:	d003      	beq.n	8017e8c <tcp_output+0xa4>
 8017e84:	687b      	ldr	r3, [r7, #4]
 8017e86:	681b      	ldr	r3, [r3, #0]
 8017e88:	2b00      	cmp	r3, #0
 8017e8a:	d111      	bne.n	8017eb0 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8017e8c:	697b      	ldr	r3, [r7, #20]
 8017e8e:	2b00      	cmp	r3, #0
 8017e90:	d002      	beq.n	8017e98 <tcp_output+0xb0>
 8017e92:	697b      	ldr	r3, [r7, #20]
 8017e94:	3304      	adds	r3, #4
 8017e96:	e000      	b.n	8017e9a <tcp_output+0xb2>
 8017e98:	2300      	movs	r3, #0
 8017e9a:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8017e9c:	693b      	ldr	r3, [r7, #16]
 8017e9e:	2b00      	cmp	r3, #0
 8017ea0:	d102      	bne.n	8017ea8 <tcp_output+0xc0>
      return ERR_RTE;
 8017ea2:	f06f 0303 	mvn.w	r3, #3
 8017ea6:	e18e      	b.n	80181c6 <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8017ea8:	693b      	ldr	r3, [r7, #16]
 8017eaa:	681a      	ldr	r2, [r3, #0]
 8017eac:	687b      	ldr	r3, [r7, #4]
 8017eae:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8017eb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017eb2:	68db      	ldr	r3, [r3, #12]
 8017eb4:	685b      	ldr	r3, [r3, #4]
 8017eb6:	4618      	mov	r0, r3
 8017eb8:	f7f9 ff19 	bl	8011cee <lwip_htonl>
 8017ebc:	4602      	mov	r2, r0
 8017ebe:	687b      	ldr	r3, [r7, #4]
 8017ec0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8017ec2:	1ad3      	subs	r3, r2, r3
 8017ec4:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8017ec6:	8912      	ldrh	r2, [r2, #8]
 8017ec8:	4413      	add	r3, r2
 8017eca:	69ba      	ldr	r2, [r7, #24]
 8017ecc:	429a      	cmp	r2, r3
 8017ece:	d227      	bcs.n	8017f20 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8017ed0:	687b      	ldr	r3, [r7, #4]
 8017ed2:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8017ed6:	461a      	mov	r2, r3
 8017ed8:	69bb      	ldr	r3, [r7, #24]
 8017eda:	4293      	cmp	r3, r2
 8017edc:	d114      	bne.n	8017f08 <tcp_output+0x120>
 8017ede:	687b      	ldr	r3, [r7, #4]
 8017ee0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017ee2:	2b00      	cmp	r3, #0
 8017ee4:	d110      	bne.n	8017f08 <tcp_output+0x120>
 8017ee6:	687b      	ldr	r3, [r7, #4]
 8017ee8:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8017eec:	2b00      	cmp	r3, #0
 8017eee:	d10b      	bne.n	8017f08 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8017ef0:	687b      	ldr	r3, [r7, #4]
 8017ef2:	2200      	movs	r2, #0
 8017ef4:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8017ef8:	687b      	ldr	r3, [r7, #4]
 8017efa:	2201      	movs	r2, #1
 8017efc:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8017f00:	687b      	ldr	r3, [r7, #4]
 8017f02:	2200      	movs	r2, #0
 8017f04:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8017f08:	687b      	ldr	r3, [r7, #4]
 8017f0a:	8b5b      	ldrh	r3, [r3, #26]
 8017f0c:	f003 0302 	and.w	r3, r3, #2
 8017f10:	2b00      	cmp	r3, #0
 8017f12:	f000 814d 	beq.w	80181b0 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8017f16:	6878      	ldr	r0, [r7, #4]
 8017f18:	f000 fd6c 	bl	80189f4 <tcp_send_empty_ack>
 8017f1c:	4603      	mov	r3, r0
 8017f1e:	e152      	b.n	80181c6 <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8017f20:	687b      	ldr	r3, [r7, #4]
 8017f22:	2200      	movs	r2, #0
 8017f24:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8017f28:	687b      	ldr	r3, [r7, #4]
 8017f2a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017f2c:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8017f2e:	6a3b      	ldr	r3, [r7, #32]
 8017f30:	2b00      	cmp	r3, #0
 8017f32:	f000 811c 	beq.w	801816e <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8017f36:	e002      	b.n	8017f3e <tcp_output+0x156>
 8017f38:	6a3b      	ldr	r3, [r7, #32]
 8017f3a:	681b      	ldr	r3, [r3, #0]
 8017f3c:	623b      	str	r3, [r7, #32]
 8017f3e:	6a3b      	ldr	r3, [r7, #32]
 8017f40:	681b      	ldr	r3, [r3, #0]
 8017f42:	2b00      	cmp	r3, #0
 8017f44:	d1f8      	bne.n	8017f38 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8017f46:	e112      	b.n	801816e <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8017f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017f4a:	68db      	ldr	r3, [r3, #12]
 8017f4c:	899b      	ldrh	r3, [r3, #12]
 8017f4e:	b29b      	uxth	r3, r3
 8017f50:	4618      	mov	r0, r3
 8017f52:	f7f9 feb7 	bl	8011cc4 <lwip_htons>
 8017f56:	4603      	mov	r3, r0
 8017f58:	b2db      	uxtb	r3, r3
 8017f5a:	f003 0304 	and.w	r3, r3, #4
 8017f5e:	2b00      	cmp	r3, #0
 8017f60:	d006      	beq.n	8017f70 <tcp_output+0x188>
 8017f62:	4b2f      	ldr	r3, [pc, #188]	; (8018020 <tcp_output+0x238>)
 8017f64:	f240 5236 	movw	r2, #1334	; 0x536
 8017f68:	4932      	ldr	r1, [pc, #200]	; (8018034 <tcp_output+0x24c>)
 8017f6a:	482f      	ldr	r0, [pc, #188]	; (8018028 <tcp_output+0x240>)
 8017f6c:	f005 fa9e 	bl	801d4ac <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8017f70:	687b      	ldr	r3, [r7, #4]
 8017f72:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8017f74:	2b00      	cmp	r3, #0
 8017f76:	d01f      	beq.n	8017fb8 <tcp_output+0x1d0>
 8017f78:	687b      	ldr	r3, [r7, #4]
 8017f7a:	8b5b      	ldrh	r3, [r3, #26]
 8017f7c:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8017f80:	2b00      	cmp	r3, #0
 8017f82:	d119      	bne.n	8017fb8 <tcp_output+0x1d0>
 8017f84:	687b      	ldr	r3, [r7, #4]
 8017f86:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017f88:	2b00      	cmp	r3, #0
 8017f8a:	d00b      	beq.n	8017fa4 <tcp_output+0x1bc>
 8017f8c:	687b      	ldr	r3, [r7, #4]
 8017f8e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017f90:	681b      	ldr	r3, [r3, #0]
 8017f92:	2b00      	cmp	r3, #0
 8017f94:	d110      	bne.n	8017fb8 <tcp_output+0x1d0>
 8017f96:	687b      	ldr	r3, [r7, #4]
 8017f98:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8017f9a:	891a      	ldrh	r2, [r3, #8]
 8017f9c:	687b      	ldr	r3, [r7, #4]
 8017f9e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8017fa0:	429a      	cmp	r2, r3
 8017fa2:	d209      	bcs.n	8017fb8 <tcp_output+0x1d0>
 8017fa4:	687b      	ldr	r3, [r7, #4]
 8017fa6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8017faa:	2b00      	cmp	r3, #0
 8017fac:	d004      	beq.n	8017fb8 <tcp_output+0x1d0>
 8017fae:	687b      	ldr	r3, [r7, #4]
 8017fb0:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8017fb4:	2b08      	cmp	r3, #8
 8017fb6:	d901      	bls.n	8017fbc <tcp_output+0x1d4>
 8017fb8:	2301      	movs	r3, #1
 8017fba:	e000      	b.n	8017fbe <tcp_output+0x1d6>
 8017fbc:	2300      	movs	r3, #0
 8017fbe:	2b00      	cmp	r3, #0
 8017fc0:	d106      	bne.n	8017fd0 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8017fc2:	687b      	ldr	r3, [r7, #4]
 8017fc4:	8b5b      	ldrh	r3, [r3, #26]
 8017fc6:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8017fca:	2b00      	cmp	r3, #0
 8017fcc:	f000 80e4 	beq.w	8018198 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8017fd0:	687b      	ldr	r3, [r7, #4]
 8017fd2:	7d1b      	ldrb	r3, [r3, #20]
 8017fd4:	2b02      	cmp	r3, #2
 8017fd6:	d00d      	beq.n	8017ff4 <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8017fd8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fda:	68db      	ldr	r3, [r3, #12]
 8017fdc:	899b      	ldrh	r3, [r3, #12]
 8017fde:	b29c      	uxth	r4, r3
 8017fe0:	2010      	movs	r0, #16
 8017fe2:	f7f9 fe6f 	bl	8011cc4 <lwip_htons>
 8017fe6:	4603      	mov	r3, r0
 8017fe8:	461a      	mov	r2, r3
 8017fea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8017fec:	68db      	ldr	r3, [r3, #12]
 8017fee:	4322      	orrs	r2, r4
 8017ff0:	b292      	uxth	r2, r2
 8017ff2:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8017ff4:	697a      	ldr	r2, [r7, #20]
 8017ff6:	6879      	ldr	r1, [r7, #4]
 8017ff8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8017ffa:	f000 f909 	bl	8018210 <tcp_output_segment>
 8017ffe:	4603      	mov	r3, r0
 8018000:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8018002:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018006:	2b00      	cmp	r3, #0
 8018008:	d016      	beq.n	8018038 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 801800a:	687b      	ldr	r3, [r7, #4]
 801800c:	8b5b      	ldrh	r3, [r3, #26]
 801800e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8018012:	b29a      	uxth	r2, r3
 8018014:	687b      	ldr	r3, [r7, #4]
 8018016:	835a      	strh	r2, [r3, #26]
      return err;
 8018018:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801801c:	e0d3      	b.n	80181c6 <tcp_output+0x3de>
 801801e:	bf00      	nop
 8018020:	0801fbe8 	.word	0x0801fbe8
 8018024:	0802012c 	.word	0x0802012c
 8018028:	0801fc3c 	.word	0x0801fc3c
 801802c:	08020144 	.word	0x08020144
 8018030:	20024098 	.word	0x20024098
 8018034:	0802016c 	.word	0x0802016c
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8018038:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801803a:	681a      	ldr	r2, [r3, #0]
 801803c:	687b      	ldr	r3, [r7, #4]
 801803e:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8018040:	687b      	ldr	r3, [r7, #4]
 8018042:	7d1b      	ldrb	r3, [r3, #20]
 8018044:	2b02      	cmp	r3, #2
 8018046:	d006      	beq.n	8018056 <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018048:	687b      	ldr	r3, [r7, #4]
 801804a:	8b5b      	ldrh	r3, [r3, #26]
 801804c:	f023 0303 	bic.w	r3, r3, #3
 8018050:	b29a      	uxth	r2, r3
 8018052:	687b      	ldr	r3, [r7, #4]
 8018054:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018056:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018058:	68db      	ldr	r3, [r3, #12]
 801805a:	685b      	ldr	r3, [r3, #4]
 801805c:	4618      	mov	r0, r3
 801805e:	f7f9 fe46 	bl	8011cee <lwip_htonl>
 8018062:	4604      	mov	r4, r0
 8018064:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018066:	891b      	ldrh	r3, [r3, #8]
 8018068:	461d      	mov	r5, r3
 801806a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801806c:	68db      	ldr	r3, [r3, #12]
 801806e:	899b      	ldrh	r3, [r3, #12]
 8018070:	b29b      	uxth	r3, r3
 8018072:	4618      	mov	r0, r3
 8018074:	f7f9 fe26 	bl	8011cc4 <lwip_htons>
 8018078:	4603      	mov	r3, r0
 801807a:	b2db      	uxtb	r3, r3
 801807c:	f003 0303 	and.w	r3, r3, #3
 8018080:	2b00      	cmp	r3, #0
 8018082:	d001      	beq.n	8018088 <tcp_output+0x2a0>
 8018084:	2301      	movs	r3, #1
 8018086:	e000      	b.n	801808a <tcp_output+0x2a2>
 8018088:	2300      	movs	r3, #0
 801808a:	442b      	add	r3, r5
 801808c:	4423      	add	r3, r4
 801808e:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8018090:	687b      	ldr	r3, [r7, #4]
 8018092:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018094:	68bb      	ldr	r3, [r7, #8]
 8018096:	1ad3      	subs	r3, r2, r3
 8018098:	2b00      	cmp	r3, #0
 801809a:	da02      	bge.n	80180a2 <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 801809c:	687b      	ldr	r3, [r7, #4]
 801809e:	68ba      	ldr	r2, [r7, #8]
 80180a0:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 80180a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180a4:	891b      	ldrh	r3, [r3, #8]
 80180a6:	461c      	mov	r4, r3
 80180a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180aa:	68db      	ldr	r3, [r3, #12]
 80180ac:	899b      	ldrh	r3, [r3, #12]
 80180ae:	b29b      	uxth	r3, r3
 80180b0:	4618      	mov	r0, r3
 80180b2:	f7f9 fe07 	bl	8011cc4 <lwip_htons>
 80180b6:	4603      	mov	r3, r0
 80180b8:	b2db      	uxtb	r3, r3
 80180ba:	f003 0303 	and.w	r3, r3, #3
 80180be:	2b00      	cmp	r3, #0
 80180c0:	d001      	beq.n	80180c6 <tcp_output+0x2de>
 80180c2:	2301      	movs	r3, #1
 80180c4:	e000      	b.n	80180c8 <tcp_output+0x2e0>
 80180c6:	2300      	movs	r3, #0
 80180c8:	4423      	add	r3, r4
 80180ca:	2b00      	cmp	r3, #0
 80180cc:	d049      	beq.n	8018162 <tcp_output+0x37a>
      seg->next = NULL;
 80180ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180d0:	2200      	movs	r2, #0
 80180d2:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 80180d4:	687b      	ldr	r3, [r7, #4]
 80180d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80180d8:	2b00      	cmp	r3, #0
 80180da:	d105      	bne.n	80180e8 <tcp_output+0x300>
        pcb->unacked = seg;
 80180dc:	687b      	ldr	r3, [r7, #4]
 80180de:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80180e0:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 80180e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180e4:	623b      	str	r3, [r7, #32]
 80180e6:	e03f      	b.n	8018168 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 80180e8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80180ea:	68db      	ldr	r3, [r3, #12]
 80180ec:	685b      	ldr	r3, [r3, #4]
 80180ee:	4618      	mov	r0, r3
 80180f0:	f7f9 fdfd 	bl	8011cee <lwip_htonl>
 80180f4:	4604      	mov	r4, r0
 80180f6:	6a3b      	ldr	r3, [r7, #32]
 80180f8:	68db      	ldr	r3, [r3, #12]
 80180fa:	685b      	ldr	r3, [r3, #4]
 80180fc:	4618      	mov	r0, r3
 80180fe:	f7f9 fdf6 	bl	8011cee <lwip_htonl>
 8018102:	4603      	mov	r3, r0
 8018104:	1ae3      	subs	r3, r4, r3
 8018106:	2b00      	cmp	r3, #0
 8018108:	da24      	bge.n	8018154 <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 801810a:	687b      	ldr	r3, [r7, #4]
 801810c:	3370      	adds	r3, #112	; 0x70
 801810e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8018110:	e002      	b.n	8018118 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8018112:	69fb      	ldr	r3, [r7, #28]
 8018114:	681b      	ldr	r3, [r3, #0]
 8018116:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8018118:	69fb      	ldr	r3, [r7, #28]
 801811a:	681b      	ldr	r3, [r3, #0]
 801811c:	2b00      	cmp	r3, #0
 801811e:	d011      	beq.n	8018144 <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8018120:	69fb      	ldr	r3, [r7, #28]
 8018122:	681b      	ldr	r3, [r3, #0]
 8018124:	68db      	ldr	r3, [r3, #12]
 8018126:	685b      	ldr	r3, [r3, #4]
 8018128:	4618      	mov	r0, r3
 801812a:	f7f9 fde0 	bl	8011cee <lwip_htonl>
 801812e:	4604      	mov	r4, r0
 8018130:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018132:	68db      	ldr	r3, [r3, #12]
 8018134:	685b      	ldr	r3, [r3, #4]
 8018136:	4618      	mov	r0, r3
 8018138:	f7f9 fdd9 	bl	8011cee <lwip_htonl>
 801813c:	4603      	mov	r3, r0
 801813e:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8018140:	2b00      	cmp	r3, #0
 8018142:	dbe6      	blt.n	8018112 <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8018144:	69fb      	ldr	r3, [r7, #28]
 8018146:	681a      	ldr	r2, [r3, #0]
 8018148:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801814a:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 801814c:	69fb      	ldr	r3, [r7, #28]
 801814e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018150:	601a      	str	r2, [r3, #0]
 8018152:	e009      	b.n	8018168 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8018154:	6a3b      	ldr	r3, [r7, #32]
 8018156:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8018158:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 801815a:	6a3b      	ldr	r3, [r7, #32]
 801815c:	681b      	ldr	r3, [r3, #0]
 801815e:	623b      	str	r3, [r7, #32]
 8018160:	e002      	b.n	8018168 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8018162:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8018164:	f7fc fc3f 	bl	80149e6 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8018168:	687b      	ldr	r3, [r7, #4]
 801816a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801816c:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 801816e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018170:	2b00      	cmp	r3, #0
 8018172:	d012      	beq.n	801819a <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8018174:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8018176:	68db      	ldr	r3, [r3, #12]
 8018178:	685b      	ldr	r3, [r3, #4]
 801817a:	4618      	mov	r0, r3
 801817c:	f7f9 fdb7 	bl	8011cee <lwip_htonl>
 8018180:	4602      	mov	r2, r0
 8018182:	687b      	ldr	r3, [r7, #4]
 8018184:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8018186:	1ad3      	subs	r3, r2, r3
 8018188:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801818a:	8912      	ldrh	r2, [r2, #8]
 801818c:	4413      	add	r3, r2
  while (seg != NULL &&
 801818e:	69ba      	ldr	r2, [r7, #24]
 8018190:	429a      	cmp	r2, r3
 8018192:	f4bf aed9 	bcs.w	8017f48 <tcp_output+0x160>
 8018196:	e000      	b.n	801819a <tcp_output+0x3b2>
      break;
 8018198:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 801819a:	687b      	ldr	r3, [r7, #4]
 801819c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801819e:	2b00      	cmp	r3, #0
 80181a0:	d108      	bne.n	80181b4 <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80181a2:	687b      	ldr	r3, [r7, #4]
 80181a4:	2200      	movs	r2, #0
 80181a6:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 80181aa:	e004      	b.n	80181b6 <tcp_output+0x3ce>
    goto output_done;
 80181ac:	bf00      	nop
 80181ae:	e002      	b.n	80181b6 <tcp_output+0x3ce>
    goto output_done;
 80181b0:	bf00      	nop
 80181b2:	e000      	b.n	80181b6 <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 80181b4:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 80181b6:	687b      	ldr	r3, [r7, #4]
 80181b8:	8b5b      	ldrh	r3, [r3, #26]
 80181ba:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80181be:	b29a      	uxth	r2, r3
 80181c0:	687b      	ldr	r3, [r7, #4]
 80181c2:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 80181c4:	2300      	movs	r3, #0
}
 80181c6:	4618      	mov	r0, r3
 80181c8:	3728      	adds	r7, #40	; 0x28
 80181ca:	46bd      	mov	sp, r7
 80181cc:	bdb0      	pop	{r4, r5, r7, pc}
 80181ce:	bf00      	nop

080181d0 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 80181d0:	b580      	push	{r7, lr}
 80181d2:	b082      	sub	sp, #8
 80181d4:	af00      	add	r7, sp, #0
 80181d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 80181d8:	687b      	ldr	r3, [r7, #4]
 80181da:	2b00      	cmp	r3, #0
 80181dc:	d106      	bne.n	80181ec <tcp_output_segment_busy+0x1c>
 80181de:	4b09      	ldr	r3, [pc, #36]	; (8018204 <tcp_output_segment_busy+0x34>)
 80181e0:	f240 529a 	movw	r2, #1434	; 0x59a
 80181e4:	4908      	ldr	r1, [pc, #32]	; (8018208 <tcp_output_segment_busy+0x38>)
 80181e6:	4809      	ldr	r0, [pc, #36]	; (801820c <tcp_output_segment_busy+0x3c>)
 80181e8:	f005 f960 	bl	801d4ac <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 80181ec:	687b      	ldr	r3, [r7, #4]
 80181ee:	685b      	ldr	r3, [r3, #4]
 80181f0:	7b9b      	ldrb	r3, [r3, #14]
 80181f2:	2b01      	cmp	r3, #1
 80181f4:	d001      	beq.n	80181fa <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 80181f6:	2301      	movs	r3, #1
 80181f8:	e000      	b.n	80181fc <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 80181fa:	2300      	movs	r3, #0
}
 80181fc:	4618      	mov	r0, r3
 80181fe:	3708      	adds	r7, #8
 8018200:	46bd      	mov	sp, r7
 8018202:	bd80      	pop	{r7, pc}
 8018204:	0801fbe8 	.word	0x0801fbe8
 8018208:	08020184 	.word	0x08020184
 801820c:	0801fc3c 	.word	0x0801fc3c

08018210 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8018210:	b5b0      	push	{r4, r5, r7, lr}
 8018212:	b08c      	sub	sp, #48	; 0x30
 8018214:	af04      	add	r7, sp, #16
 8018216:	60f8      	str	r0, [r7, #12]
 8018218:	60b9      	str	r1, [r7, #8]
 801821a:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 801821c:	68fb      	ldr	r3, [r7, #12]
 801821e:	2b00      	cmp	r3, #0
 8018220:	d106      	bne.n	8018230 <tcp_output_segment+0x20>
 8018222:	4b64      	ldr	r3, [pc, #400]	; (80183b4 <tcp_output_segment+0x1a4>)
 8018224:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8018228:	4963      	ldr	r1, [pc, #396]	; (80183b8 <tcp_output_segment+0x1a8>)
 801822a:	4864      	ldr	r0, [pc, #400]	; (80183bc <tcp_output_segment+0x1ac>)
 801822c:	f005 f93e 	bl	801d4ac <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8018230:	68bb      	ldr	r3, [r7, #8]
 8018232:	2b00      	cmp	r3, #0
 8018234:	d106      	bne.n	8018244 <tcp_output_segment+0x34>
 8018236:	4b5f      	ldr	r3, [pc, #380]	; (80183b4 <tcp_output_segment+0x1a4>)
 8018238:	f240 52b9 	movw	r2, #1465	; 0x5b9
 801823c:	4960      	ldr	r1, [pc, #384]	; (80183c0 <tcp_output_segment+0x1b0>)
 801823e:	485f      	ldr	r0, [pc, #380]	; (80183bc <tcp_output_segment+0x1ac>)
 8018240:	f005 f934 	bl	801d4ac <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8018244:	687b      	ldr	r3, [r7, #4]
 8018246:	2b00      	cmp	r3, #0
 8018248:	d106      	bne.n	8018258 <tcp_output_segment+0x48>
 801824a:	4b5a      	ldr	r3, [pc, #360]	; (80183b4 <tcp_output_segment+0x1a4>)
 801824c:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8018250:	495c      	ldr	r1, [pc, #368]	; (80183c4 <tcp_output_segment+0x1b4>)
 8018252:	485a      	ldr	r0, [pc, #360]	; (80183bc <tcp_output_segment+0x1ac>)
 8018254:	f005 f92a 	bl	801d4ac <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8018258:	68f8      	ldr	r0, [r7, #12]
 801825a:	f7ff ffb9 	bl	80181d0 <tcp_output_segment_busy>
 801825e:	4603      	mov	r3, r0
 8018260:	2b00      	cmp	r3, #0
 8018262:	d001      	beq.n	8018268 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8018264:	2300      	movs	r3, #0
 8018266:	e0a1      	b.n	80183ac <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8018268:	68bb      	ldr	r3, [r7, #8]
 801826a:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 801826c:	68fb      	ldr	r3, [r7, #12]
 801826e:	68dc      	ldr	r4, [r3, #12]
 8018270:	4610      	mov	r0, r2
 8018272:	f7f9 fd3c 	bl	8011cee <lwip_htonl>
 8018276:	4603      	mov	r3, r0
 8018278:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 801827a:	68bb      	ldr	r3, [r7, #8]
 801827c:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 801827e:	68fb      	ldr	r3, [r7, #12]
 8018280:	68dc      	ldr	r4, [r3, #12]
 8018282:	4610      	mov	r0, r2
 8018284:	f7f9 fd1e 	bl	8011cc4 <lwip_htons>
 8018288:	4603      	mov	r3, r0
 801828a:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801828c:	68bb      	ldr	r3, [r7, #8]
 801828e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8018290:	68ba      	ldr	r2, [r7, #8]
 8018292:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8018294:	441a      	add	r2, r3
 8018296:	68bb      	ldr	r3, [r7, #8]
 8018298:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 801829a:	68fb      	ldr	r3, [r7, #12]
 801829c:	68db      	ldr	r3, [r3, #12]
 801829e:	3314      	adds	r3, #20
 80182a0:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 80182a2:	68fb      	ldr	r3, [r7, #12]
 80182a4:	7a9b      	ldrb	r3, [r3, #10]
 80182a6:	f003 0301 	and.w	r3, r3, #1
 80182aa:	2b00      	cmp	r3, #0
 80182ac:	d015      	beq.n	80182da <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 80182ae:	68bb      	ldr	r3, [r7, #8]
 80182b0:	3304      	adds	r3, #4
 80182b2:	461a      	mov	r2, r3
 80182b4:	6879      	ldr	r1, [r7, #4]
 80182b6:	f44f 7006 	mov.w	r0, #536	; 0x218
 80182ba:	f7fc fe8b 	bl	8014fd4 <tcp_eff_send_mss_netif>
 80182be:	4603      	mov	r3, r0
 80182c0:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 80182c2:	8b7b      	ldrh	r3, [r7, #26]
 80182c4:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 80182c8:	4618      	mov	r0, r3
 80182ca:	f7f9 fd10 	bl	8011cee <lwip_htonl>
 80182ce:	4602      	mov	r2, r0
 80182d0:	69fb      	ldr	r3, [r7, #28]
 80182d2:	601a      	str	r2, [r3, #0]
    opts += 1;
 80182d4:	69fb      	ldr	r3, [r7, #28]
 80182d6:	3304      	adds	r3, #4
 80182d8:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 80182da:	68bb      	ldr	r3, [r7, #8]
 80182dc:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 80182e0:	2b00      	cmp	r3, #0
 80182e2:	da02      	bge.n	80182ea <tcp_output_segment+0xda>
    pcb->rtime = 0;
 80182e4:	68bb      	ldr	r3, [r7, #8]
 80182e6:	2200      	movs	r2, #0
 80182e8:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 80182ea:	68bb      	ldr	r3, [r7, #8]
 80182ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80182ee:	2b00      	cmp	r3, #0
 80182f0:	d10c      	bne.n	801830c <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 80182f2:	4b35      	ldr	r3, [pc, #212]	; (80183c8 <tcp_output_segment+0x1b8>)
 80182f4:	681a      	ldr	r2, [r3, #0]
 80182f6:	68bb      	ldr	r3, [r7, #8]
 80182f8:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 80182fa:	68fb      	ldr	r3, [r7, #12]
 80182fc:	68db      	ldr	r3, [r3, #12]
 80182fe:	685b      	ldr	r3, [r3, #4]
 8018300:	4618      	mov	r0, r3
 8018302:	f7f9 fcf4 	bl	8011cee <lwip_htonl>
 8018306:	4602      	mov	r2, r0
 8018308:	68bb      	ldr	r3, [r7, #8]
 801830a:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 801830c:	68fb      	ldr	r3, [r7, #12]
 801830e:	68da      	ldr	r2, [r3, #12]
 8018310:	68fb      	ldr	r3, [r7, #12]
 8018312:	685b      	ldr	r3, [r3, #4]
 8018314:	685b      	ldr	r3, [r3, #4]
 8018316:	1ad3      	subs	r3, r2, r3
 8018318:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 801831a:	68fb      	ldr	r3, [r7, #12]
 801831c:	685b      	ldr	r3, [r3, #4]
 801831e:	8959      	ldrh	r1, [r3, #10]
 8018320:	68fb      	ldr	r3, [r7, #12]
 8018322:	685b      	ldr	r3, [r3, #4]
 8018324:	8b3a      	ldrh	r2, [r7, #24]
 8018326:	1a8a      	subs	r2, r1, r2
 8018328:	b292      	uxth	r2, r2
 801832a:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 801832c:	68fb      	ldr	r3, [r7, #12]
 801832e:	685b      	ldr	r3, [r3, #4]
 8018330:	8919      	ldrh	r1, [r3, #8]
 8018332:	68fb      	ldr	r3, [r7, #12]
 8018334:	685b      	ldr	r3, [r3, #4]
 8018336:	8b3a      	ldrh	r2, [r7, #24]
 8018338:	1a8a      	subs	r2, r1, r2
 801833a:	b292      	uxth	r2, r2
 801833c:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 801833e:	68fb      	ldr	r3, [r7, #12]
 8018340:	685b      	ldr	r3, [r3, #4]
 8018342:	68fa      	ldr	r2, [r7, #12]
 8018344:	68d2      	ldr	r2, [r2, #12]
 8018346:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8018348:	68fb      	ldr	r3, [r7, #12]
 801834a:	68db      	ldr	r3, [r3, #12]
 801834c:	2200      	movs	r2, #0
 801834e:	741a      	strb	r2, [r3, #16]
 8018350:	2200      	movs	r2, #0
 8018352:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8018354:	68fb      	ldr	r3, [r7, #12]
 8018356:	68da      	ldr	r2, [r3, #12]
 8018358:	68fb      	ldr	r3, [r7, #12]
 801835a:	7a9b      	ldrb	r3, [r3, #10]
 801835c:	f003 0301 	and.w	r3, r3, #1
 8018360:	2b00      	cmp	r3, #0
 8018362:	d001      	beq.n	8018368 <tcp_output_segment+0x158>
 8018364:	2318      	movs	r3, #24
 8018366:	e000      	b.n	801836a <tcp_output_segment+0x15a>
 8018368:	2314      	movs	r3, #20
 801836a:	4413      	add	r3, r2
 801836c:	69fa      	ldr	r2, [r7, #28]
 801836e:	429a      	cmp	r2, r3
 8018370:	d006      	beq.n	8018380 <tcp_output_segment+0x170>
 8018372:	4b10      	ldr	r3, [pc, #64]	; (80183b4 <tcp_output_segment+0x1a4>)
 8018374:	f240 621c 	movw	r2, #1564	; 0x61c
 8018378:	4914      	ldr	r1, [pc, #80]	; (80183cc <tcp_output_segment+0x1bc>)
 801837a:	4810      	ldr	r0, [pc, #64]	; (80183bc <tcp_output_segment+0x1ac>)
 801837c:	f005 f896 	bl	801d4ac <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8018380:	68fb      	ldr	r3, [r7, #12]
 8018382:	6858      	ldr	r0, [r3, #4]
 8018384:	68b9      	ldr	r1, [r7, #8]
 8018386:	68bb      	ldr	r3, [r7, #8]
 8018388:	1d1c      	adds	r4, r3, #4
 801838a:	68bb      	ldr	r3, [r7, #8]
 801838c:	7add      	ldrb	r5, [r3, #11]
 801838e:	68bb      	ldr	r3, [r7, #8]
 8018390:	7a9b      	ldrb	r3, [r3, #10]
 8018392:	687a      	ldr	r2, [r7, #4]
 8018394:	9202      	str	r2, [sp, #8]
 8018396:	2206      	movs	r2, #6
 8018398:	9201      	str	r2, [sp, #4]
 801839a:	9300      	str	r3, [sp, #0]
 801839c:	462b      	mov	r3, r5
 801839e:	4622      	mov	r2, r4
 80183a0:	f002 fd54 	bl	801ae4c <ip4_output_if>
 80183a4:	4603      	mov	r3, r0
 80183a6:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 80183a8:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80183ac:	4618      	mov	r0, r3
 80183ae:	3720      	adds	r7, #32
 80183b0:	46bd      	mov	sp, r7
 80183b2:	bdb0      	pop	{r4, r5, r7, pc}
 80183b4:	0801fbe8 	.word	0x0801fbe8
 80183b8:	080201ac 	.word	0x080201ac
 80183bc:	0801fc3c 	.word	0x0801fc3c
 80183c0:	080201cc 	.word	0x080201cc
 80183c4:	080201ec 	.word	0x080201ec
 80183c8:	2002404c 	.word	0x2002404c
 80183cc:	08020210 	.word	0x08020210

080183d0 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 80183d0:	b5b0      	push	{r4, r5, r7, lr}
 80183d2:	b084      	sub	sp, #16
 80183d4:	af00      	add	r7, sp, #0
 80183d6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 80183d8:	687b      	ldr	r3, [r7, #4]
 80183da:	2b00      	cmp	r3, #0
 80183dc:	d106      	bne.n	80183ec <tcp_rexmit_rto_prepare+0x1c>
 80183de:	4b31      	ldr	r3, [pc, #196]	; (80184a4 <tcp_rexmit_rto_prepare+0xd4>)
 80183e0:	f240 6263 	movw	r2, #1635	; 0x663
 80183e4:	4930      	ldr	r1, [pc, #192]	; (80184a8 <tcp_rexmit_rto_prepare+0xd8>)
 80183e6:	4831      	ldr	r0, [pc, #196]	; (80184ac <tcp_rexmit_rto_prepare+0xdc>)
 80183e8:	f005 f860 	bl	801d4ac <iprintf>

  if (pcb->unacked == NULL) {
 80183ec:	687b      	ldr	r3, [r7, #4]
 80183ee:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80183f0:	2b00      	cmp	r3, #0
 80183f2:	d102      	bne.n	80183fa <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 80183f4:	f06f 0305 	mvn.w	r3, #5
 80183f8:	e050      	b.n	801849c <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 80183fa:	687b      	ldr	r3, [r7, #4]
 80183fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80183fe:	60fb      	str	r3, [r7, #12]
 8018400:	e00b      	b.n	801841a <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 8018402:	68f8      	ldr	r0, [r7, #12]
 8018404:	f7ff fee4 	bl	80181d0 <tcp_output_segment_busy>
 8018408:	4603      	mov	r3, r0
 801840a:	2b00      	cmp	r3, #0
 801840c:	d002      	beq.n	8018414 <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 801840e:	f06f 0305 	mvn.w	r3, #5
 8018412:	e043      	b.n	801849c <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8018414:	68fb      	ldr	r3, [r7, #12]
 8018416:	681b      	ldr	r3, [r3, #0]
 8018418:	60fb      	str	r3, [r7, #12]
 801841a:	68fb      	ldr	r3, [r7, #12]
 801841c:	681b      	ldr	r3, [r3, #0]
 801841e:	2b00      	cmp	r3, #0
 8018420:	d1ef      	bne.n	8018402 <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 8018422:	68f8      	ldr	r0, [r7, #12]
 8018424:	f7ff fed4 	bl	80181d0 <tcp_output_segment_busy>
 8018428:	4603      	mov	r3, r0
 801842a:	2b00      	cmp	r3, #0
 801842c:	d002      	beq.n	8018434 <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 801842e:	f06f 0305 	mvn.w	r3, #5
 8018432:	e033      	b.n	801849c <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 8018434:	687b      	ldr	r3, [r7, #4]
 8018436:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8018438:	68fb      	ldr	r3, [r7, #12]
 801843a:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 801843c:	687b      	ldr	r3, [r7, #4]
 801843e:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 8018440:	687b      	ldr	r3, [r7, #4]
 8018442:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 8018444:	687b      	ldr	r3, [r7, #4]
 8018446:	2200      	movs	r2, #0
 8018448:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 801844a:	687b      	ldr	r3, [r7, #4]
 801844c:	8b5b      	ldrh	r3, [r3, #26]
 801844e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8018452:	b29a      	uxth	r2, r3
 8018454:	687b      	ldr	r3, [r7, #4]
 8018456:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8018458:	68fb      	ldr	r3, [r7, #12]
 801845a:	68db      	ldr	r3, [r3, #12]
 801845c:	685b      	ldr	r3, [r3, #4]
 801845e:	4618      	mov	r0, r3
 8018460:	f7f9 fc45 	bl	8011cee <lwip_htonl>
 8018464:	4604      	mov	r4, r0
 8018466:	68fb      	ldr	r3, [r7, #12]
 8018468:	891b      	ldrh	r3, [r3, #8]
 801846a:	461d      	mov	r5, r3
 801846c:	68fb      	ldr	r3, [r7, #12]
 801846e:	68db      	ldr	r3, [r3, #12]
 8018470:	899b      	ldrh	r3, [r3, #12]
 8018472:	b29b      	uxth	r3, r3
 8018474:	4618      	mov	r0, r3
 8018476:	f7f9 fc25 	bl	8011cc4 <lwip_htons>
 801847a:	4603      	mov	r3, r0
 801847c:	b2db      	uxtb	r3, r3
 801847e:	f003 0303 	and.w	r3, r3, #3
 8018482:	2b00      	cmp	r3, #0
 8018484:	d001      	beq.n	801848a <tcp_rexmit_rto_prepare+0xba>
 8018486:	2301      	movs	r3, #1
 8018488:	e000      	b.n	801848c <tcp_rexmit_rto_prepare+0xbc>
 801848a:	2300      	movs	r3, #0
 801848c:	442b      	add	r3, r5
 801848e:	18e2      	adds	r2, r4, r3
 8018490:	687b      	ldr	r3, [r7, #4]
 8018492:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 8018494:	687b      	ldr	r3, [r7, #4]
 8018496:	2200      	movs	r2, #0
 8018498:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 801849a:	2300      	movs	r3, #0
}
 801849c:	4618      	mov	r0, r3
 801849e:	3710      	adds	r7, #16
 80184a0:	46bd      	mov	sp, r7
 80184a2:	bdb0      	pop	{r4, r5, r7, pc}
 80184a4:	0801fbe8 	.word	0x0801fbe8
 80184a8:	08020224 	.word	0x08020224
 80184ac:	0801fc3c 	.word	0x0801fc3c

080184b0 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 80184b0:	b580      	push	{r7, lr}
 80184b2:	b082      	sub	sp, #8
 80184b4:	af00      	add	r7, sp, #0
 80184b6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 80184b8:	687b      	ldr	r3, [r7, #4]
 80184ba:	2b00      	cmp	r3, #0
 80184bc:	d106      	bne.n	80184cc <tcp_rexmit_rto_commit+0x1c>
 80184be:	4b0d      	ldr	r3, [pc, #52]	; (80184f4 <tcp_rexmit_rto_commit+0x44>)
 80184c0:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 80184c4:	490c      	ldr	r1, [pc, #48]	; (80184f8 <tcp_rexmit_rto_commit+0x48>)
 80184c6:	480d      	ldr	r0, [pc, #52]	; (80184fc <tcp_rexmit_rto_commit+0x4c>)
 80184c8:	f004 fff0 	bl	801d4ac <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 80184cc:	687b      	ldr	r3, [r7, #4]
 80184ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80184d2:	2bff      	cmp	r3, #255	; 0xff
 80184d4:	d007      	beq.n	80184e6 <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 80184d6:	687b      	ldr	r3, [r7, #4]
 80184d8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80184dc:	3301      	adds	r3, #1
 80184de:	b2da      	uxtb	r2, r3
 80184e0:	687b      	ldr	r3, [r7, #4]
 80184e2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 80184e6:	6878      	ldr	r0, [r7, #4]
 80184e8:	f7ff fc7e 	bl	8017de8 <tcp_output>
}
 80184ec:	bf00      	nop
 80184ee:	3708      	adds	r7, #8
 80184f0:	46bd      	mov	sp, r7
 80184f2:	bd80      	pop	{r7, pc}
 80184f4:	0801fbe8 	.word	0x0801fbe8
 80184f8:	08020248 	.word	0x08020248
 80184fc:	0801fc3c 	.word	0x0801fc3c

08018500 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8018500:	b580      	push	{r7, lr}
 8018502:	b082      	sub	sp, #8
 8018504:	af00      	add	r7, sp, #0
 8018506:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8018508:	687b      	ldr	r3, [r7, #4]
 801850a:	2b00      	cmp	r3, #0
 801850c:	d106      	bne.n	801851c <tcp_rexmit_rto+0x1c>
 801850e:	4b0a      	ldr	r3, [pc, #40]	; (8018538 <tcp_rexmit_rto+0x38>)
 8018510:	f240 62ad 	movw	r2, #1709	; 0x6ad
 8018514:	4909      	ldr	r1, [pc, #36]	; (801853c <tcp_rexmit_rto+0x3c>)
 8018516:	480a      	ldr	r0, [pc, #40]	; (8018540 <tcp_rexmit_rto+0x40>)
 8018518:	f004 ffc8 	bl	801d4ac <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 801851c:	6878      	ldr	r0, [r7, #4]
 801851e:	f7ff ff57 	bl	80183d0 <tcp_rexmit_rto_prepare>
 8018522:	4603      	mov	r3, r0
 8018524:	2b00      	cmp	r3, #0
 8018526:	d102      	bne.n	801852e <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 8018528:	6878      	ldr	r0, [r7, #4]
 801852a:	f7ff ffc1 	bl	80184b0 <tcp_rexmit_rto_commit>
  }
}
 801852e:	bf00      	nop
 8018530:	3708      	adds	r7, #8
 8018532:	46bd      	mov	sp, r7
 8018534:	bd80      	pop	{r7, pc}
 8018536:	bf00      	nop
 8018538:	0801fbe8 	.word	0x0801fbe8
 801853c:	0802026c 	.word	0x0802026c
 8018540:	0801fc3c 	.word	0x0801fc3c

08018544 <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 8018544:	b590      	push	{r4, r7, lr}
 8018546:	b085      	sub	sp, #20
 8018548:	af00      	add	r7, sp, #0
 801854a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 801854c:	687b      	ldr	r3, [r7, #4]
 801854e:	2b00      	cmp	r3, #0
 8018550:	d106      	bne.n	8018560 <tcp_rexmit+0x1c>
 8018552:	4b2f      	ldr	r3, [pc, #188]	; (8018610 <tcp_rexmit+0xcc>)
 8018554:	f240 62c1 	movw	r2, #1729	; 0x6c1
 8018558:	492e      	ldr	r1, [pc, #184]	; (8018614 <tcp_rexmit+0xd0>)
 801855a:	482f      	ldr	r0, [pc, #188]	; (8018618 <tcp_rexmit+0xd4>)
 801855c:	f004 ffa6 	bl	801d4ac <iprintf>

  if (pcb->unacked == NULL) {
 8018560:	687b      	ldr	r3, [r7, #4]
 8018562:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018564:	2b00      	cmp	r3, #0
 8018566:	d102      	bne.n	801856e <tcp_rexmit+0x2a>
    return ERR_VAL;
 8018568:	f06f 0305 	mvn.w	r3, #5
 801856c:	e04c      	b.n	8018608 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 801856e:	687b      	ldr	r3, [r7, #4]
 8018570:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8018572:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 8018574:	68b8      	ldr	r0, [r7, #8]
 8018576:	f7ff fe2b 	bl	80181d0 <tcp_output_segment_busy>
 801857a:	4603      	mov	r3, r0
 801857c:	2b00      	cmp	r3, #0
 801857e:	d002      	beq.n	8018586 <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 8018580:	f06f 0305 	mvn.w	r3, #5
 8018584:	e040      	b.n	8018608 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 8018586:	68bb      	ldr	r3, [r7, #8]
 8018588:	681a      	ldr	r2, [r3, #0]
 801858a:	687b      	ldr	r3, [r7, #4]
 801858c:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 801858e:	687b      	ldr	r3, [r7, #4]
 8018590:	336c      	adds	r3, #108	; 0x6c
 8018592:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8018594:	e002      	b.n	801859c <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 8018596:	68fb      	ldr	r3, [r7, #12]
 8018598:	681b      	ldr	r3, [r3, #0]
 801859a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801859c:	68fb      	ldr	r3, [r7, #12]
 801859e:	681b      	ldr	r3, [r3, #0]
 80185a0:	2b00      	cmp	r3, #0
 80185a2:	d011      	beq.n	80185c8 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 80185a4:	68fb      	ldr	r3, [r7, #12]
 80185a6:	681b      	ldr	r3, [r3, #0]
 80185a8:	68db      	ldr	r3, [r3, #12]
 80185aa:	685b      	ldr	r3, [r3, #4]
 80185ac:	4618      	mov	r0, r3
 80185ae:	f7f9 fb9e 	bl	8011cee <lwip_htonl>
 80185b2:	4604      	mov	r4, r0
 80185b4:	68bb      	ldr	r3, [r7, #8]
 80185b6:	68db      	ldr	r3, [r3, #12]
 80185b8:	685b      	ldr	r3, [r3, #4]
 80185ba:	4618      	mov	r0, r3
 80185bc:	f7f9 fb97 	bl	8011cee <lwip_htonl>
 80185c0:	4603      	mov	r3, r0
 80185c2:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 80185c4:	2b00      	cmp	r3, #0
 80185c6:	dbe6      	blt.n	8018596 <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 80185c8:	68fb      	ldr	r3, [r7, #12]
 80185ca:	681a      	ldr	r2, [r3, #0]
 80185cc:	68bb      	ldr	r3, [r7, #8]
 80185ce:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 80185d0:	68fb      	ldr	r3, [r7, #12]
 80185d2:	68ba      	ldr	r2, [r7, #8]
 80185d4:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 80185d6:	68bb      	ldr	r3, [r7, #8]
 80185d8:	681b      	ldr	r3, [r3, #0]
 80185da:	2b00      	cmp	r3, #0
 80185dc:	d103      	bne.n	80185e6 <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 80185de:	687b      	ldr	r3, [r7, #4]
 80185e0:	2200      	movs	r2, #0
 80185e2:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 80185e6:	687b      	ldr	r3, [r7, #4]
 80185e8:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80185ec:	2bff      	cmp	r3, #255	; 0xff
 80185ee:	d007      	beq.n	8018600 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 80185f0:	687b      	ldr	r3, [r7, #4]
 80185f2:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 80185f6:	3301      	adds	r3, #1
 80185f8:	b2da      	uxtb	r2, r3
 80185fa:	687b      	ldr	r3, [r7, #4]
 80185fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8018600:	687b      	ldr	r3, [r7, #4]
 8018602:	2200      	movs	r2, #0
 8018604:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 8018606:	2300      	movs	r3, #0
}
 8018608:	4618      	mov	r0, r3
 801860a:	3714      	adds	r7, #20
 801860c:	46bd      	mov	sp, r7
 801860e:	bd90      	pop	{r4, r7, pc}
 8018610:	0801fbe8 	.word	0x0801fbe8
 8018614:	08020288 	.word	0x08020288
 8018618:	0801fc3c 	.word	0x0801fc3c

0801861c <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 801861c:	b580      	push	{r7, lr}
 801861e:	b082      	sub	sp, #8
 8018620:	af00      	add	r7, sp, #0
 8018622:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 8018624:	687b      	ldr	r3, [r7, #4]
 8018626:	2b00      	cmp	r3, #0
 8018628:	d106      	bne.n	8018638 <tcp_rexmit_fast+0x1c>
 801862a:	4b2a      	ldr	r3, [pc, #168]	; (80186d4 <tcp_rexmit_fast+0xb8>)
 801862c:	f240 62f9 	movw	r2, #1785	; 0x6f9
 8018630:	4929      	ldr	r1, [pc, #164]	; (80186d8 <tcp_rexmit_fast+0xbc>)
 8018632:	482a      	ldr	r0, [pc, #168]	; (80186dc <tcp_rexmit_fast+0xc0>)
 8018634:	f004 ff3a 	bl	801d4ac <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 8018638:	687b      	ldr	r3, [r7, #4]
 801863a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801863c:	2b00      	cmp	r3, #0
 801863e:	d045      	beq.n	80186cc <tcp_rexmit_fast+0xb0>
 8018640:	687b      	ldr	r3, [r7, #4]
 8018642:	8b5b      	ldrh	r3, [r3, #26]
 8018644:	f003 0304 	and.w	r3, r3, #4
 8018648:	2b00      	cmp	r3, #0
 801864a:	d13f      	bne.n	80186cc <tcp_rexmit_fast+0xb0>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 801864c:	6878      	ldr	r0, [r7, #4]
 801864e:	f7ff ff79 	bl	8018544 <tcp_rexmit>
 8018652:	4603      	mov	r3, r0
 8018654:	2b00      	cmp	r3, #0
 8018656:	d139      	bne.n	80186cc <tcp_rexmit_fast+0xb0>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 8018658:	687b      	ldr	r3, [r7, #4]
 801865a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 801865e:	687b      	ldr	r3, [r7, #4]
 8018660:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8018664:	4293      	cmp	r3, r2
 8018666:	bf28      	it	cs
 8018668:	4613      	movcs	r3, r2
 801866a:	b29b      	uxth	r3, r3
 801866c:	2b00      	cmp	r3, #0
 801866e:	da00      	bge.n	8018672 <tcp_rexmit_fast+0x56>
 8018670:	3301      	adds	r3, #1
 8018672:	105b      	asrs	r3, r3, #1
 8018674:	b29a      	uxth	r2, r3
 8018676:	687b      	ldr	r3, [r7, #4]
 8018678:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 801867c:	687b      	ldr	r3, [r7, #4]
 801867e:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8018682:	461a      	mov	r2, r3
 8018684:	687b      	ldr	r3, [r7, #4]
 8018686:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018688:	005b      	lsls	r3, r3, #1
 801868a:	429a      	cmp	r2, r3
 801868c:	d206      	bcs.n	801869c <tcp_rexmit_fast+0x80>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 801868e:	687b      	ldr	r3, [r7, #4]
 8018690:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8018692:	005b      	lsls	r3, r3, #1
 8018694:	b29a      	uxth	r2, r3
 8018696:	687b      	ldr	r3, [r7, #4]
 8018698:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 801869c:	687b      	ldr	r3, [r7, #4]
 801869e:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 80186a2:	687b      	ldr	r3, [r7, #4]
 80186a4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80186a6:	4619      	mov	r1, r3
 80186a8:	0049      	lsls	r1, r1, #1
 80186aa:	440b      	add	r3, r1
 80186ac:	b29b      	uxth	r3, r3
 80186ae:	4413      	add	r3, r2
 80186b0:	b29a      	uxth	r2, r3
 80186b2:	687b      	ldr	r3, [r7, #4]
 80186b4:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 80186b8:	687b      	ldr	r3, [r7, #4]
 80186ba:	8b5b      	ldrh	r3, [r3, #26]
 80186bc:	f043 0304 	orr.w	r3, r3, #4
 80186c0:	b29a      	uxth	r2, r3
 80186c2:	687b      	ldr	r3, [r7, #4]
 80186c4:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 80186c6:	687b      	ldr	r3, [r7, #4]
 80186c8:	2200      	movs	r2, #0
 80186ca:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 80186cc:	bf00      	nop
 80186ce:	3708      	adds	r7, #8
 80186d0:	46bd      	mov	sp, r7
 80186d2:	bd80      	pop	{r7, pc}
 80186d4:	0801fbe8 	.word	0x0801fbe8
 80186d8:	080202a0 	.word	0x080202a0
 80186dc:	0801fc3c 	.word	0x0801fc3c

080186e0 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 80186e0:	b580      	push	{r7, lr}
 80186e2:	b086      	sub	sp, #24
 80186e4:	af00      	add	r7, sp, #0
 80186e6:	60f8      	str	r0, [r7, #12]
 80186e8:	607b      	str	r3, [r7, #4]
 80186ea:	460b      	mov	r3, r1
 80186ec:	817b      	strh	r3, [r7, #10]
 80186ee:	4613      	mov	r3, r2
 80186f0:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 80186f2:	897a      	ldrh	r2, [r7, #10]
 80186f4:	893b      	ldrh	r3, [r7, #8]
 80186f6:	4413      	add	r3, r2
 80186f8:	b29b      	uxth	r3, r3
 80186fa:	3314      	adds	r3, #20
 80186fc:	b29b      	uxth	r3, r3
 80186fe:	f44f 7220 	mov.w	r2, #640	; 0x280
 8018702:	4619      	mov	r1, r3
 8018704:	2022      	movs	r0, #34	; 0x22
 8018706:	f7fa fbfb 	bl	8012f00 <pbuf_alloc>
 801870a:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 801870c:	697b      	ldr	r3, [r7, #20]
 801870e:	2b00      	cmp	r3, #0
 8018710:	d04d      	beq.n	80187ae <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 8018712:	897b      	ldrh	r3, [r7, #10]
 8018714:	3313      	adds	r3, #19
 8018716:	697a      	ldr	r2, [r7, #20]
 8018718:	8952      	ldrh	r2, [r2, #10]
 801871a:	4293      	cmp	r3, r2
 801871c:	db06      	blt.n	801872c <tcp_output_alloc_header_common+0x4c>
 801871e:	4b26      	ldr	r3, [pc, #152]	; (80187b8 <tcp_output_alloc_header_common+0xd8>)
 8018720:	f240 7223 	movw	r2, #1827	; 0x723
 8018724:	4925      	ldr	r1, [pc, #148]	; (80187bc <tcp_output_alloc_header_common+0xdc>)
 8018726:	4826      	ldr	r0, [pc, #152]	; (80187c0 <tcp_output_alloc_header_common+0xe0>)
 8018728:	f004 fec0 	bl	801d4ac <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 801872c:	697b      	ldr	r3, [r7, #20]
 801872e:	685b      	ldr	r3, [r3, #4]
 8018730:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 8018732:	8c3b      	ldrh	r3, [r7, #32]
 8018734:	4618      	mov	r0, r3
 8018736:	f7f9 fac5 	bl	8011cc4 <lwip_htons>
 801873a:	4603      	mov	r3, r0
 801873c:	461a      	mov	r2, r3
 801873e:	693b      	ldr	r3, [r7, #16]
 8018740:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 8018742:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8018744:	4618      	mov	r0, r3
 8018746:	f7f9 fabd 	bl	8011cc4 <lwip_htons>
 801874a:	4603      	mov	r3, r0
 801874c:	461a      	mov	r2, r3
 801874e:	693b      	ldr	r3, [r7, #16]
 8018750:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 8018752:	693b      	ldr	r3, [r7, #16]
 8018754:	687a      	ldr	r2, [r7, #4]
 8018756:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 8018758:	68f8      	ldr	r0, [r7, #12]
 801875a:	f7f9 fac8 	bl	8011cee <lwip_htonl>
 801875e:	4602      	mov	r2, r0
 8018760:	693b      	ldr	r3, [r7, #16]
 8018762:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 8018764:	897b      	ldrh	r3, [r7, #10]
 8018766:	089b      	lsrs	r3, r3, #2
 8018768:	b29b      	uxth	r3, r3
 801876a:	3305      	adds	r3, #5
 801876c:	b29b      	uxth	r3, r3
 801876e:	031b      	lsls	r3, r3, #12
 8018770:	b29a      	uxth	r2, r3
 8018772:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8018776:	b29b      	uxth	r3, r3
 8018778:	4313      	orrs	r3, r2
 801877a:	b29b      	uxth	r3, r3
 801877c:	4618      	mov	r0, r3
 801877e:	f7f9 faa1 	bl	8011cc4 <lwip_htons>
 8018782:	4603      	mov	r3, r0
 8018784:	461a      	mov	r2, r3
 8018786:	693b      	ldr	r3, [r7, #16]
 8018788:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 801878a:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 801878c:	4618      	mov	r0, r3
 801878e:	f7f9 fa99 	bl	8011cc4 <lwip_htons>
 8018792:	4603      	mov	r3, r0
 8018794:	461a      	mov	r2, r3
 8018796:	693b      	ldr	r3, [r7, #16]
 8018798:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 801879a:	693b      	ldr	r3, [r7, #16]
 801879c:	2200      	movs	r2, #0
 801879e:	741a      	strb	r2, [r3, #16]
 80187a0:	2200      	movs	r2, #0
 80187a2:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 80187a4:	693b      	ldr	r3, [r7, #16]
 80187a6:	2200      	movs	r2, #0
 80187a8:	749a      	strb	r2, [r3, #18]
 80187aa:	2200      	movs	r2, #0
 80187ac:	74da      	strb	r2, [r3, #19]
  }
  return p;
 80187ae:	697b      	ldr	r3, [r7, #20]
}
 80187b0:	4618      	mov	r0, r3
 80187b2:	3718      	adds	r7, #24
 80187b4:	46bd      	mov	sp, r7
 80187b6:	bd80      	pop	{r7, pc}
 80187b8:	0801fbe8 	.word	0x0801fbe8
 80187bc:	080202c0 	.word	0x080202c0
 80187c0:	0801fc3c 	.word	0x0801fc3c

080187c4 <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 80187c4:	b5b0      	push	{r4, r5, r7, lr}
 80187c6:	b08a      	sub	sp, #40	; 0x28
 80187c8:	af04      	add	r7, sp, #16
 80187ca:	60f8      	str	r0, [r7, #12]
 80187cc:	607b      	str	r3, [r7, #4]
 80187ce:	460b      	mov	r3, r1
 80187d0:	817b      	strh	r3, [r7, #10]
 80187d2:	4613      	mov	r3, r2
 80187d4:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 80187d6:	68fb      	ldr	r3, [r7, #12]
 80187d8:	2b00      	cmp	r3, #0
 80187da:	d106      	bne.n	80187ea <tcp_output_alloc_header+0x26>
 80187dc:	4b15      	ldr	r3, [pc, #84]	; (8018834 <tcp_output_alloc_header+0x70>)
 80187de:	f240 7242 	movw	r2, #1858	; 0x742
 80187e2:	4915      	ldr	r1, [pc, #84]	; (8018838 <tcp_output_alloc_header+0x74>)
 80187e4:	4815      	ldr	r0, [pc, #84]	; (801883c <tcp_output_alloc_header+0x78>)
 80187e6:	f004 fe61 	bl	801d4ac <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 80187ea:	68fb      	ldr	r3, [r7, #12]
 80187ec:	6a58      	ldr	r0, [r3, #36]	; 0x24
 80187ee:	68fb      	ldr	r3, [r7, #12]
 80187f0:	8adb      	ldrh	r3, [r3, #22]
 80187f2:	68fa      	ldr	r2, [r7, #12]
 80187f4:	8b12      	ldrh	r2, [r2, #24]
 80187f6:	68f9      	ldr	r1, [r7, #12]
 80187f8:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 80187fa:	893d      	ldrh	r5, [r7, #8]
 80187fc:	897c      	ldrh	r4, [r7, #10]
 80187fe:	9103      	str	r1, [sp, #12]
 8018800:	2110      	movs	r1, #16
 8018802:	9102      	str	r1, [sp, #8]
 8018804:	9201      	str	r2, [sp, #4]
 8018806:	9300      	str	r3, [sp, #0]
 8018808:	687b      	ldr	r3, [r7, #4]
 801880a:	462a      	mov	r2, r5
 801880c:	4621      	mov	r1, r4
 801880e:	f7ff ff67 	bl	80186e0 <tcp_output_alloc_header_common>
 8018812:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 8018814:	697b      	ldr	r3, [r7, #20]
 8018816:	2b00      	cmp	r3, #0
 8018818:	d006      	beq.n	8018828 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 801881a:	68fb      	ldr	r3, [r7, #12]
 801881c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801881e:	68fa      	ldr	r2, [r7, #12]
 8018820:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8018822:	441a      	add	r2, r3
 8018824:	68fb      	ldr	r3, [r7, #12]
 8018826:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 8018828:	697b      	ldr	r3, [r7, #20]
}
 801882a:	4618      	mov	r0, r3
 801882c:	3718      	adds	r7, #24
 801882e:	46bd      	mov	sp, r7
 8018830:	bdb0      	pop	{r4, r5, r7, pc}
 8018832:	bf00      	nop
 8018834:	0801fbe8 	.word	0x0801fbe8
 8018838:	080202f0 	.word	0x080202f0
 801883c:	0801fc3c 	.word	0x0801fc3c

08018840 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 8018840:	b580      	push	{r7, lr}
 8018842:	b088      	sub	sp, #32
 8018844:	af00      	add	r7, sp, #0
 8018846:	60f8      	str	r0, [r7, #12]
 8018848:	60b9      	str	r1, [r7, #8]
 801884a:	4611      	mov	r1, r2
 801884c:	461a      	mov	r2, r3
 801884e:	460b      	mov	r3, r1
 8018850:	71fb      	strb	r3, [r7, #7]
 8018852:	4613      	mov	r3, r2
 8018854:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 8018856:	2300      	movs	r3, #0
 8018858:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 801885a:	68bb      	ldr	r3, [r7, #8]
 801885c:	2b00      	cmp	r3, #0
 801885e:	d106      	bne.n	801886e <tcp_output_fill_options+0x2e>
 8018860:	4b12      	ldr	r3, [pc, #72]	; (80188ac <tcp_output_fill_options+0x6c>)
 8018862:	f240 7256 	movw	r2, #1878	; 0x756
 8018866:	4912      	ldr	r1, [pc, #72]	; (80188b0 <tcp_output_fill_options+0x70>)
 8018868:	4812      	ldr	r0, [pc, #72]	; (80188b4 <tcp_output_fill_options+0x74>)
 801886a:	f004 fe1f 	bl	801d4ac <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 801886e:	68bb      	ldr	r3, [r7, #8]
 8018870:	685b      	ldr	r3, [r3, #4]
 8018872:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 8018874:	69bb      	ldr	r3, [r7, #24]
 8018876:	3314      	adds	r3, #20
 8018878:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 801887a:	8bfb      	ldrh	r3, [r7, #30]
 801887c:	009b      	lsls	r3, r3, #2
 801887e:	461a      	mov	r2, r3
 8018880:	79fb      	ldrb	r3, [r7, #7]
 8018882:	009b      	lsls	r3, r3, #2
 8018884:	f003 0304 	and.w	r3, r3, #4
 8018888:	4413      	add	r3, r2
 801888a:	3314      	adds	r3, #20
 801888c:	69ba      	ldr	r2, [r7, #24]
 801888e:	4413      	add	r3, r2
 8018890:	697a      	ldr	r2, [r7, #20]
 8018892:	429a      	cmp	r2, r3
 8018894:	d006      	beq.n	80188a4 <tcp_output_fill_options+0x64>
 8018896:	4b05      	ldr	r3, [pc, #20]	; (80188ac <tcp_output_fill_options+0x6c>)
 8018898:	f240 7275 	movw	r2, #1909	; 0x775
 801889c:	4906      	ldr	r1, [pc, #24]	; (80188b8 <tcp_output_fill_options+0x78>)
 801889e:	4805      	ldr	r0, [pc, #20]	; (80188b4 <tcp_output_fill_options+0x74>)
 80188a0:	f004 fe04 	bl	801d4ac <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 80188a4:	bf00      	nop
 80188a6:	3720      	adds	r7, #32
 80188a8:	46bd      	mov	sp, r7
 80188aa:	bd80      	pop	{r7, pc}
 80188ac:	0801fbe8 	.word	0x0801fbe8
 80188b0:	08020318 	.word	0x08020318
 80188b4:	0801fc3c 	.word	0x0801fc3c
 80188b8:	08020210 	.word	0x08020210

080188bc <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 80188bc:	b580      	push	{r7, lr}
 80188be:	b08a      	sub	sp, #40	; 0x28
 80188c0:	af04      	add	r7, sp, #16
 80188c2:	60f8      	str	r0, [r7, #12]
 80188c4:	60b9      	str	r1, [r7, #8]
 80188c6:	607a      	str	r2, [r7, #4]
 80188c8:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 80188ca:	68bb      	ldr	r3, [r7, #8]
 80188cc:	2b00      	cmp	r3, #0
 80188ce:	d106      	bne.n	80188de <tcp_output_control_segment+0x22>
 80188d0:	4b1c      	ldr	r3, [pc, #112]	; (8018944 <tcp_output_control_segment+0x88>)
 80188d2:	f240 7287 	movw	r2, #1927	; 0x787
 80188d6:	491c      	ldr	r1, [pc, #112]	; (8018948 <tcp_output_control_segment+0x8c>)
 80188d8:	481c      	ldr	r0, [pc, #112]	; (801894c <tcp_output_control_segment+0x90>)
 80188da:	f004 fde7 	bl	801d4ac <iprintf>

  netif = tcp_route(pcb, src, dst);
 80188de:	683a      	ldr	r2, [r7, #0]
 80188e0:	6879      	ldr	r1, [r7, #4]
 80188e2:	68f8      	ldr	r0, [r7, #12]
 80188e4:	f7fe ff40 	bl	8017768 <tcp_route>
 80188e8:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 80188ea:	693b      	ldr	r3, [r7, #16]
 80188ec:	2b00      	cmp	r3, #0
 80188ee:	d102      	bne.n	80188f6 <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 80188f0:	23fc      	movs	r3, #252	; 0xfc
 80188f2:	75fb      	strb	r3, [r7, #23]
 80188f4:	e01c      	b.n	8018930 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 80188f6:	68fb      	ldr	r3, [r7, #12]
 80188f8:	2b00      	cmp	r3, #0
 80188fa:	d006      	beq.n	801890a <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 80188fc:	68fb      	ldr	r3, [r7, #12]
 80188fe:	7adb      	ldrb	r3, [r3, #11]
 8018900:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 8018902:	68fb      	ldr	r3, [r7, #12]
 8018904:	7a9b      	ldrb	r3, [r3, #10]
 8018906:	757b      	strb	r3, [r7, #21]
 8018908:	e003      	b.n	8018912 <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 801890a:	23ff      	movs	r3, #255	; 0xff
 801890c:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 801890e:	2300      	movs	r3, #0
 8018910:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 8018912:	7dba      	ldrb	r2, [r7, #22]
 8018914:	693b      	ldr	r3, [r7, #16]
 8018916:	9302      	str	r3, [sp, #8]
 8018918:	2306      	movs	r3, #6
 801891a:	9301      	str	r3, [sp, #4]
 801891c:	7d7b      	ldrb	r3, [r7, #21]
 801891e:	9300      	str	r3, [sp, #0]
 8018920:	4613      	mov	r3, r2
 8018922:	683a      	ldr	r2, [r7, #0]
 8018924:	6879      	ldr	r1, [r7, #4]
 8018926:	68b8      	ldr	r0, [r7, #8]
 8018928:	f002 fa90 	bl	801ae4c <ip4_output_if>
 801892c:	4603      	mov	r3, r0
 801892e:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 8018930:	68b8      	ldr	r0, [r7, #8]
 8018932:	f7fa fdc9 	bl	80134c8 <pbuf_free>
  return err;
 8018936:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 801893a:	4618      	mov	r0, r3
 801893c:	3718      	adds	r7, #24
 801893e:	46bd      	mov	sp, r7
 8018940:	bd80      	pop	{r7, pc}
 8018942:	bf00      	nop
 8018944:	0801fbe8 	.word	0x0801fbe8
 8018948:	08020340 	.word	0x08020340
 801894c:	0801fc3c 	.word	0x0801fc3c

08018950 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 8018950:	b590      	push	{r4, r7, lr}
 8018952:	b08b      	sub	sp, #44	; 0x2c
 8018954:	af04      	add	r7, sp, #16
 8018956:	60f8      	str	r0, [r7, #12]
 8018958:	60b9      	str	r1, [r7, #8]
 801895a:	607a      	str	r2, [r7, #4]
 801895c:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 801895e:	683b      	ldr	r3, [r7, #0]
 8018960:	2b00      	cmp	r3, #0
 8018962:	d106      	bne.n	8018972 <tcp_rst+0x22>
 8018964:	4b1f      	ldr	r3, [pc, #124]	; (80189e4 <tcp_rst+0x94>)
 8018966:	f240 72c4 	movw	r2, #1988	; 0x7c4
 801896a:	491f      	ldr	r1, [pc, #124]	; (80189e8 <tcp_rst+0x98>)
 801896c:	481f      	ldr	r0, [pc, #124]	; (80189ec <tcp_rst+0x9c>)
 801896e:	f004 fd9d 	bl	801d4ac <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 8018972:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8018974:	2b00      	cmp	r3, #0
 8018976:	d106      	bne.n	8018986 <tcp_rst+0x36>
 8018978:	4b1a      	ldr	r3, [pc, #104]	; (80189e4 <tcp_rst+0x94>)
 801897a:	f240 72c5 	movw	r2, #1989	; 0x7c5
 801897e:	491c      	ldr	r1, [pc, #112]	; (80189f0 <tcp_rst+0xa0>)
 8018980:	481a      	ldr	r0, [pc, #104]	; (80189ec <tcp_rst+0x9c>)
 8018982:	f004 fd93 	bl	801d4ac <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018986:	2300      	movs	r3, #0
 8018988:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 801898a:	f246 0308 	movw	r3, #24584	; 0x6008
 801898e:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8018990:	7dfb      	ldrb	r3, [r7, #23]
 8018992:	b29c      	uxth	r4, r3
 8018994:	68b8      	ldr	r0, [r7, #8]
 8018996:	f7f9 f9aa 	bl	8011cee <lwip_htonl>
 801899a:	4602      	mov	r2, r0
 801899c:	8abb      	ldrh	r3, [r7, #20]
 801899e:	9303      	str	r3, [sp, #12]
 80189a0:	2314      	movs	r3, #20
 80189a2:	9302      	str	r3, [sp, #8]
 80189a4:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 80189a6:	9301      	str	r3, [sp, #4]
 80189a8:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 80189aa:	9300      	str	r3, [sp, #0]
 80189ac:	4613      	mov	r3, r2
 80189ae:	2200      	movs	r2, #0
 80189b0:	4621      	mov	r1, r4
 80189b2:	6878      	ldr	r0, [r7, #4]
 80189b4:	f7ff fe94 	bl	80186e0 <tcp_output_alloc_header_common>
 80189b8:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 80189ba:	693b      	ldr	r3, [r7, #16]
 80189bc:	2b00      	cmp	r3, #0
 80189be:	d00c      	beq.n	80189da <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80189c0:	7dfb      	ldrb	r3, [r7, #23]
 80189c2:	2200      	movs	r2, #0
 80189c4:	6939      	ldr	r1, [r7, #16]
 80189c6:	68f8      	ldr	r0, [r7, #12]
 80189c8:	f7ff ff3a 	bl	8018840 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 80189cc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80189ce:	683a      	ldr	r2, [r7, #0]
 80189d0:	6939      	ldr	r1, [r7, #16]
 80189d2:	68f8      	ldr	r0, [r7, #12]
 80189d4:	f7ff ff72 	bl	80188bc <tcp_output_control_segment>
 80189d8:	e000      	b.n	80189dc <tcp_rst+0x8c>
    return;
 80189da:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 80189dc:	371c      	adds	r7, #28
 80189de:	46bd      	mov	sp, r7
 80189e0:	bd90      	pop	{r4, r7, pc}
 80189e2:	bf00      	nop
 80189e4:	0801fbe8 	.word	0x0801fbe8
 80189e8:	0802036c 	.word	0x0802036c
 80189ec:	0801fc3c 	.word	0x0801fc3c
 80189f0:	08020388 	.word	0x08020388

080189f4 <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 80189f4:	b590      	push	{r4, r7, lr}
 80189f6:	b087      	sub	sp, #28
 80189f8:	af00      	add	r7, sp, #0
 80189fa:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 80189fc:	2300      	movs	r3, #0
 80189fe:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8018a00:	2300      	movs	r3, #0
 8018a02:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 8018a04:	687b      	ldr	r3, [r7, #4]
 8018a06:	2b00      	cmp	r3, #0
 8018a08:	d106      	bne.n	8018a18 <tcp_send_empty_ack+0x24>
 8018a0a:	4b28      	ldr	r3, [pc, #160]	; (8018aac <tcp_send_empty_ack+0xb8>)
 8018a0c:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8018a10:	4927      	ldr	r1, [pc, #156]	; (8018ab0 <tcp_send_empty_ack+0xbc>)
 8018a12:	4828      	ldr	r0, [pc, #160]	; (8018ab4 <tcp_send_empty_ack+0xc0>)
 8018a14:	f004 fd4a 	bl	801d4ac <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8018a18:	7dfb      	ldrb	r3, [r7, #23]
 8018a1a:	009b      	lsls	r3, r3, #2
 8018a1c:	b2db      	uxtb	r3, r3
 8018a1e:	f003 0304 	and.w	r3, r3, #4
 8018a22:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 8018a24:	7d7b      	ldrb	r3, [r7, #21]
 8018a26:	b29c      	uxth	r4, r3
 8018a28:	687b      	ldr	r3, [r7, #4]
 8018a2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018a2c:	4618      	mov	r0, r3
 8018a2e:	f7f9 f95e 	bl	8011cee <lwip_htonl>
 8018a32:	4603      	mov	r3, r0
 8018a34:	2200      	movs	r2, #0
 8018a36:	4621      	mov	r1, r4
 8018a38:	6878      	ldr	r0, [r7, #4]
 8018a3a:	f7ff fec3 	bl	80187c4 <tcp_output_alloc_header>
 8018a3e:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018a40:	693b      	ldr	r3, [r7, #16]
 8018a42:	2b00      	cmp	r3, #0
 8018a44:	d109      	bne.n	8018a5a <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018a46:	687b      	ldr	r3, [r7, #4]
 8018a48:	8b5b      	ldrh	r3, [r3, #26]
 8018a4a:	f043 0303 	orr.w	r3, r3, #3
 8018a4e:	b29a      	uxth	r2, r3
 8018a50:	687b      	ldr	r3, [r7, #4]
 8018a52:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 8018a54:	f06f 0301 	mvn.w	r3, #1
 8018a58:	e023      	b.n	8018aa2 <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 8018a5a:	7dbb      	ldrb	r3, [r7, #22]
 8018a5c:	7dfa      	ldrb	r2, [r7, #23]
 8018a5e:	6939      	ldr	r1, [r7, #16]
 8018a60:	6878      	ldr	r0, [r7, #4]
 8018a62:	f7ff feed 	bl	8018840 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8018a66:	687a      	ldr	r2, [r7, #4]
 8018a68:	687b      	ldr	r3, [r7, #4]
 8018a6a:	3304      	adds	r3, #4
 8018a6c:	6939      	ldr	r1, [r7, #16]
 8018a6e:	6878      	ldr	r0, [r7, #4]
 8018a70:	f7ff ff24 	bl	80188bc <tcp_output_control_segment>
 8018a74:	4603      	mov	r3, r0
 8018a76:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 8018a78:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8018a7c:	2b00      	cmp	r3, #0
 8018a7e:	d007      	beq.n	8018a90 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018a80:	687b      	ldr	r3, [r7, #4]
 8018a82:	8b5b      	ldrh	r3, [r3, #26]
 8018a84:	f043 0303 	orr.w	r3, r3, #3
 8018a88:	b29a      	uxth	r2, r3
 8018a8a:	687b      	ldr	r3, [r7, #4]
 8018a8c:	835a      	strh	r2, [r3, #26]
 8018a8e:	e006      	b.n	8018a9e <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8018a90:	687b      	ldr	r3, [r7, #4]
 8018a92:	8b5b      	ldrh	r3, [r3, #26]
 8018a94:	f023 0303 	bic.w	r3, r3, #3
 8018a98:	b29a      	uxth	r2, r3
 8018a9a:	687b      	ldr	r3, [r7, #4]
 8018a9c:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8018a9e:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018aa2:	4618      	mov	r0, r3
 8018aa4:	371c      	adds	r7, #28
 8018aa6:	46bd      	mov	sp, r7
 8018aa8:	bd90      	pop	{r4, r7, pc}
 8018aaa:	bf00      	nop
 8018aac:	0801fbe8 	.word	0x0801fbe8
 8018ab0:	080203a4 	.word	0x080203a4
 8018ab4:	0801fc3c 	.word	0x0801fc3c

08018ab8 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8018ab8:	b590      	push	{r4, r7, lr}
 8018aba:	b087      	sub	sp, #28
 8018abc:	af00      	add	r7, sp, #0
 8018abe:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018ac0:	2300      	movs	r3, #0
 8018ac2:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 8018ac4:	687b      	ldr	r3, [r7, #4]
 8018ac6:	2b00      	cmp	r3, #0
 8018ac8:	d106      	bne.n	8018ad8 <tcp_keepalive+0x20>
 8018aca:	4b18      	ldr	r3, [pc, #96]	; (8018b2c <tcp_keepalive+0x74>)
 8018acc:	f640 0224 	movw	r2, #2084	; 0x824
 8018ad0:	4917      	ldr	r1, [pc, #92]	; (8018b30 <tcp_keepalive+0x78>)
 8018ad2:	4818      	ldr	r0, [pc, #96]	; (8018b34 <tcp_keepalive+0x7c>)
 8018ad4:	f004 fcea 	bl	801d4ac <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8018ad8:	7dfb      	ldrb	r3, [r7, #23]
 8018ada:	b29c      	uxth	r4, r3
 8018adc:	687b      	ldr	r3, [r7, #4]
 8018ade:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8018ae0:	3b01      	subs	r3, #1
 8018ae2:	4618      	mov	r0, r3
 8018ae4:	f7f9 f903 	bl	8011cee <lwip_htonl>
 8018ae8:	4603      	mov	r3, r0
 8018aea:	2200      	movs	r2, #0
 8018aec:	4621      	mov	r1, r4
 8018aee:	6878      	ldr	r0, [r7, #4]
 8018af0:	f7ff fe68 	bl	80187c4 <tcp_output_alloc_header>
 8018af4:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8018af6:	693b      	ldr	r3, [r7, #16]
 8018af8:	2b00      	cmp	r3, #0
 8018afa:	d102      	bne.n	8018b02 <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8018afc:	f04f 33ff 	mov.w	r3, #4294967295
 8018b00:	e010      	b.n	8018b24 <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8018b02:	7dfb      	ldrb	r3, [r7, #23]
 8018b04:	2200      	movs	r2, #0
 8018b06:	6939      	ldr	r1, [r7, #16]
 8018b08:	6878      	ldr	r0, [r7, #4]
 8018b0a:	f7ff fe99 	bl	8018840 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8018b0e:	687a      	ldr	r2, [r7, #4]
 8018b10:	687b      	ldr	r3, [r7, #4]
 8018b12:	3304      	adds	r3, #4
 8018b14:	6939      	ldr	r1, [r7, #16]
 8018b16:	6878      	ldr	r0, [r7, #4]
 8018b18:	f7ff fed0 	bl	80188bc <tcp_output_control_segment>
 8018b1c:	4603      	mov	r3, r0
 8018b1e:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8018b20:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 8018b24:	4618      	mov	r0, r3
 8018b26:	371c      	adds	r7, #28
 8018b28:	46bd      	mov	sp, r7
 8018b2a:	bd90      	pop	{r4, r7, pc}
 8018b2c:	0801fbe8 	.word	0x0801fbe8
 8018b30:	080203c4 	.word	0x080203c4
 8018b34:	0801fc3c 	.word	0x0801fc3c

08018b38 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 8018b38:	b590      	push	{r4, r7, lr}
 8018b3a:	b08b      	sub	sp, #44	; 0x2c
 8018b3c:	af00      	add	r7, sp, #0
 8018b3e:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8018b40:	2300      	movs	r3, #0
 8018b42:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 8018b46:	687b      	ldr	r3, [r7, #4]
 8018b48:	2b00      	cmp	r3, #0
 8018b4a:	d106      	bne.n	8018b5a <tcp_zero_window_probe+0x22>
 8018b4c:	4b4c      	ldr	r3, [pc, #304]	; (8018c80 <tcp_zero_window_probe+0x148>)
 8018b4e:	f640 024f 	movw	r2, #2127	; 0x84f
 8018b52:	494c      	ldr	r1, [pc, #304]	; (8018c84 <tcp_zero_window_probe+0x14c>)
 8018b54:	484c      	ldr	r0, [pc, #304]	; (8018c88 <tcp_zero_window_probe+0x150>)
 8018b56:	f004 fca9 	bl	801d4ac <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 8018b5a:	687b      	ldr	r3, [r7, #4]
 8018b5c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8018b5e:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 8018b60:	6a3b      	ldr	r3, [r7, #32]
 8018b62:	2b00      	cmp	r3, #0
 8018b64:	d101      	bne.n	8018b6a <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 8018b66:	2300      	movs	r3, #0
 8018b68:	e086      	b.n	8018c78 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 8018b6a:	687b      	ldr	r3, [r7, #4]
 8018b6c:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8018b70:	2bff      	cmp	r3, #255	; 0xff
 8018b72:	d007      	beq.n	8018b84 <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 8018b74:	687b      	ldr	r3, [r7, #4]
 8018b76:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 8018b7a:	3301      	adds	r3, #1
 8018b7c:	b2da      	uxtb	r2, r3
 8018b7e:	687b      	ldr	r3, [r7, #4]
 8018b80:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 8018b84:	6a3b      	ldr	r3, [r7, #32]
 8018b86:	68db      	ldr	r3, [r3, #12]
 8018b88:	899b      	ldrh	r3, [r3, #12]
 8018b8a:	b29b      	uxth	r3, r3
 8018b8c:	4618      	mov	r0, r3
 8018b8e:	f7f9 f899 	bl	8011cc4 <lwip_htons>
 8018b92:	4603      	mov	r3, r0
 8018b94:	b2db      	uxtb	r3, r3
 8018b96:	f003 0301 	and.w	r3, r3, #1
 8018b9a:	2b00      	cmp	r3, #0
 8018b9c:	d005      	beq.n	8018baa <tcp_zero_window_probe+0x72>
 8018b9e:	6a3b      	ldr	r3, [r7, #32]
 8018ba0:	891b      	ldrh	r3, [r3, #8]
 8018ba2:	2b00      	cmp	r3, #0
 8018ba4:	d101      	bne.n	8018baa <tcp_zero_window_probe+0x72>
 8018ba6:	2301      	movs	r3, #1
 8018ba8:	e000      	b.n	8018bac <tcp_zero_window_probe+0x74>
 8018baa:	2300      	movs	r3, #0
 8018bac:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8018bae:	7ffb      	ldrb	r3, [r7, #31]
 8018bb0:	2b00      	cmp	r3, #0
 8018bb2:	bf0c      	ite	eq
 8018bb4:	2301      	moveq	r3, #1
 8018bb6:	2300      	movne	r3, #0
 8018bb8:	b2db      	uxtb	r3, r3
 8018bba:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8018bbc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018bc0:	b299      	uxth	r1, r3
 8018bc2:	6a3b      	ldr	r3, [r7, #32]
 8018bc4:	68db      	ldr	r3, [r3, #12]
 8018bc6:	685b      	ldr	r3, [r3, #4]
 8018bc8:	8bba      	ldrh	r2, [r7, #28]
 8018bca:	6878      	ldr	r0, [r7, #4]
 8018bcc:	f7ff fdfa 	bl	80187c4 <tcp_output_alloc_header>
 8018bd0:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 8018bd2:	69bb      	ldr	r3, [r7, #24]
 8018bd4:	2b00      	cmp	r3, #0
 8018bd6:	d102      	bne.n	8018bde <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8018bd8:	f04f 33ff 	mov.w	r3, #4294967295
 8018bdc:	e04c      	b.n	8018c78 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8018bde:	69bb      	ldr	r3, [r7, #24]
 8018be0:	685b      	ldr	r3, [r3, #4]
 8018be2:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 8018be4:	7ffb      	ldrb	r3, [r7, #31]
 8018be6:	2b00      	cmp	r3, #0
 8018be8:	d011      	beq.n	8018c0e <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8018bea:	697b      	ldr	r3, [r7, #20]
 8018bec:	899b      	ldrh	r3, [r3, #12]
 8018bee:	b29b      	uxth	r3, r3
 8018bf0:	b21b      	sxth	r3, r3
 8018bf2:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8018bf6:	b21c      	sxth	r4, r3
 8018bf8:	2011      	movs	r0, #17
 8018bfa:	f7f9 f863 	bl	8011cc4 <lwip_htons>
 8018bfe:	4603      	mov	r3, r0
 8018c00:	b21b      	sxth	r3, r3
 8018c02:	4323      	orrs	r3, r4
 8018c04:	b21b      	sxth	r3, r3
 8018c06:	b29a      	uxth	r2, r3
 8018c08:	697b      	ldr	r3, [r7, #20]
 8018c0a:	819a      	strh	r2, [r3, #12]
 8018c0c:	e010      	b.n	8018c30 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8018c0e:	69bb      	ldr	r3, [r7, #24]
 8018c10:	685b      	ldr	r3, [r3, #4]
 8018c12:	3314      	adds	r3, #20
 8018c14:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 8018c16:	6a3b      	ldr	r3, [r7, #32]
 8018c18:	6858      	ldr	r0, [r3, #4]
 8018c1a:	6a3b      	ldr	r3, [r7, #32]
 8018c1c:	685b      	ldr	r3, [r3, #4]
 8018c1e:	891a      	ldrh	r2, [r3, #8]
 8018c20:	6a3b      	ldr	r3, [r7, #32]
 8018c22:	891b      	ldrh	r3, [r3, #8]
 8018c24:	1ad3      	subs	r3, r2, r3
 8018c26:	b29b      	uxth	r3, r3
 8018c28:	2201      	movs	r2, #1
 8018c2a:	6939      	ldr	r1, [r7, #16]
 8018c2c:	f7fa fe52 	bl	80138d4 <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 8018c30:	6a3b      	ldr	r3, [r7, #32]
 8018c32:	68db      	ldr	r3, [r3, #12]
 8018c34:	685b      	ldr	r3, [r3, #4]
 8018c36:	4618      	mov	r0, r3
 8018c38:	f7f9 f859 	bl	8011cee <lwip_htonl>
 8018c3c:	4603      	mov	r3, r0
 8018c3e:	3301      	adds	r3, #1
 8018c40:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8018c42:	687b      	ldr	r3, [r7, #4]
 8018c44:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8018c46:	68fb      	ldr	r3, [r7, #12]
 8018c48:	1ad3      	subs	r3, r2, r3
 8018c4a:	2b00      	cmp	r3, #0
 8018c4c:	da02      	bge.n	8018c54 <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 8018c4e:	687b      	ldr	r3, [r7, #4]
 8018c50:	68fa      	ldr	r2, [r7, #12]
 8018c52:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8018c54:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8018c58:	2200      	movs	r2, #0
 8018c5a:	69b9      	ldr	r1, [r7, #24]
 8018c5c:	6878      	ldr	r0, [r7, #4]
 8018c5e:	f7ff fdef 	bl	8018840 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8018c62:	687a      	ldr	r2, [r7, #4]
 8018c64:	687b      	ldr	r3, [r7, #4]
 8018c66:	3304      	adds	r3, #4
 8018c68:	69b9      	ldr	r1, [r7, #24]
 8018c6a:	6878      	ldr	r0, [r7, #4]
 8018c6c:	f7ff fe26 	bl	80188bc <tcp_output_control_segment>
 8018c70:	4603      	mov	r3, r0
 8018c72:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8018c74:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8018c78:	4618      	mov	r0, r3
 8018c7a:	372c      	adds	r7, #44	; 0x2c
 8018c7c:	46bd      	mov	sp, r7
 8018c7e:	bd90      	pop	{r4, r7, pc}
 8018c80:	0801fbe8 	.word	0x0801fbe8
 8018c84:	080203e0 	.word	0x080203e0
 8018c88:	0801fc3c 	.word	0x0801fc3c

08018c8c <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8018c8c:	b580      	push	{r7, lr}
 8018c8e:	b082      	sub	sp, #8
 8018c90:	af00      	add	r7, sp, #0
 8018c92:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 8018c94:	f7fa ff0c 	bl	8013ab0 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8018c98:	4b0a      	ldr	r3, [pc, #40]	; (8018cc4 <tcpip_tcp_timer+0x38>)
 8018c9a:	681b      	ldr	r3, [r3, #0]
 8018c9c:	2b00      	cmp	r3, #0
 8018c9e:	d103      	bne.n	8018ca8 <tcpip_tcp_timer+0x1c>
 8018ca0:	4b09      	ldr	r3, [pc, #36]	; (8018cc8 <tcpip_tcp_timer+0x3c>)
 8018ca2:	681b      	ldr	r3, [r3, #0]
 8018ca4:	2b00      	cmp	r3, #0
 8018ca6:	d005      	beq.n	8018cb4 <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8018ca8:	2200      	movs	r2, #0
 8018caa:	4908      	ldr	r1, [pc, #32]	; (8018ccc <tcpip_tcp_timer+0x40>)
 8018cac:	20fa      	movs	r0, #250	; 0xfa
 8018cae:	f000 f8f3 	bl	8018e98 <sys_timeout>
 8018cb2:	e003      	b.n	8018cbc <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 8018cb4:	4b06      	ldr	r3, [pc, #24]	; (8018cd0 <tcpip_tcp_timer+0x44>)
 8018cb6:	2200      	movs	r2, #0
 8018cb8:	601a      	str	r2, [r3, #0]
  }
}
 8018cba:	bf00      	nop
 8018cbc:	bf00      	nop
 8018cbe:	3708      	adds	r7, #8
 8018cc0:	46bd      	mov	sp, r7
 8018cc2:	bd80      	pop	{r7, pc}
 8018cc4:	20024058 	.word	0x20024058
 8018cc8:	2002405c 	.word	0x2002405c
 8018ccc:	08018c8d 	.word	0x08018c8d
 8018cd0:	200240a4 	.word	0x200240a4

08018cd4 <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 8018cd4:	b580      	push	{r7, lr}
 8018cd6:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8018cd8:	4b0a      	ldr	r3, [pc, #40]	; (8018d04 <tcp_timer_needed+0x30>)
 8018cda:	681b      	ldr	r3, [r3, #0]
 8018cdc:	2b00      	cmp	r3, #0
 8018cde:	d10f      	bne.n	8018d00 <tcp_timer_needed+0x2c>
 8018ce0:	4b09      	ldr	r3, [pc, #36]	; (8018d08 <tcp_timer_needed+0x34>)
 8018ce2:	681b      	ldr	r3, [r3, #0]
 8018ce4:	2b00      	cmp	r3, #0
 8018ce6:	d103      	bne.n	8018cf0 <tcp_timer_needed+0x1c>
 8018ce8:	4b08      	ldr	r3, [pc, #32]	; (8018d0c <tcp_timer_needed+0x38>)
 8018cea:	681b      	ldr	r3, [r3, #0]
 8018cec:	2b00      	cmp	r3, #0
 8018cee:	d007      	beq.n	8018d00 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8018cf0:	4b04      	ldr	r3, [pc, #16]	; (8018d04 <tcp_timer_needed+0x30>)
 8018cf2:	2201      	movs	r2, #1
 8018cf4:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8018cf6:	2200      	movs	r2, #0
 8018cf8:	4905      	ldr	r1, [pc, #20]	; (8018d10 <tcp_timer_needed+0x3c>)
 8018cfa:	20fa      	movs	r0, #250	; 0xfa
 8018cfc:	f000 f8cc 	bl	8018e98 <sys_timeout>
  }
}
 8018d00:	bf00      	nop
 8018d02:	bd80      	pop	{r7, pc}
 8018d04:	200240a4 	.word	0x200240a4
 8018d08:	20024058 	.word	0x20024058
 8018d0c:	2002405c 	.word	0x2002405c
 8018d10:	08018c8d 	.word	0x08018c8d

08018d14 <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 8018d14:	b580      	push	{r7, lr}
 8018d16:	b086      	sub	sp, #24
 8018d18:	af00      	add	r7, sp, #0
 8018d1a:	60f8      	str	r0, [r7, #12]
 8018d1c:	60b9      	str	r1, [r7, #8]
 8018d1e:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8018d20:	200a      	movs	r0, #10
 8018d22:	f7f9 fcb7 	bl	8012694 <memp_malloc>
 8018d26:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 8018d28:	693b      	ldr	r3, [r7, #16]
 8018d2a:	2b00      	cmp	r3, #0
 8018d2c:	d109      	bne.n	8018d42 <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 8018d2e:	693b      	ldr	r3, [r7, #16]
 8018d30:	2b00      	cmp	r3, #0
 8018d32:	d151      	bne.n	8018dd8 <sys_timeout_abs+0xc4>
 8018d34:	4b2a      	ldr	r3, [pc, #168]	; (8018de0 <sys_timeout_abs+0xcc>)
 8018d36:	22be      	movs	r2, #190	; 0xbe
 8018d38:	492a      	ldr	r1, [pc, #168]	; (8018de4 <sys_timeout_abs+0xd0>)
 8018d3a:	482b      	ldr	r0, [pc, #172]	; (8018de8 <sys_timeout_abs+0xd4>)
 8018d3c:	f004 fbb6 	bl	801d4ac <iprintf>
    return;
 8018d40:	e04a      	b.n	8018dd8 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 8018d42:	693b      	ldr	r3, [r7, #16]
 8018d44:	2200      	movs	r2, #0
 8018d46:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 8018d48:	693b      	ldr	r3, [r7, #16]
 8018d4a:	68ba      	ldr	r2, [r7, #8]
 8018d4c:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 8018d4e:	693b      	ldr	r3, [r7, #16]
 8018d50:	687a      	ldr	r2, [r7, #4]
 8018d52:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 8018d54:	693b      	ldr	r3, [r7, #16]
 8018d56:	68fa      	ldr	r2, [r7, #12]
 8018d58:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 8018d5a:	4b24      	ldr	r3, [pc, #144]	; (8018dec <sys_timeout_abs+0xd8>)
 8018d5c:	681b      	ldr	r3, [r3, #0]
 8018d5e:	2b00      	cmp	r3, #0
 8018d60:	d103      	bne.n	8018d6a <sys_timeout_abs+0x56>
    next_timeout = timeout;
 8018d62:	4a22      	ldr	r2, [pc, #136]	; (8018dec <sys_timeout_abs+0xd8>)
 8018d64:	693b      	ldr	r3, [r7, #16]
 8018d66:	6013      	str	r3, [r2, #0]
    return;
 8018d68:	e037      	b.n	8018dda <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 8018d6a:	693b      	ldr	r3, [r7, #16]
 8018d6c:	685a      	ldr	r2, [r3, #4]
 8018d6e:	4b1f      	ldr	r3, [pc, #124]	; (8018dec <sys_timeout_abs+0xd8>)
 8018d70:	681b      	ldr	r3, [r3, #0]
 8018d72:	685b      	ldr	r3, [r3, #4]
 8018d74:	1ad3      	subs	r3, r2, r3
 8018d76:	0fdb      	lsrs	r3, r3, #31
 8018d78:	f003 0301 	and.w	r3, r3, #1
 8018d7c:	b2db      	uxtb	r3, r3
 8018d7e:	2b00      	cmp	r3, #0
 8018d80:	d007      	beq.n	8018d92 <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 8018d82:	4b1a      	ldr	r3, [pc, #104]	; (8018dec <sys_timeout_abs+0xd8>)
 8018d84:	681a      	ldr	r2, [r3, #0]
 8018d86:	693b      	ldr	r3, [r7, #16]
 8018d88:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8018d8a:	4a18      	ldr	r2, [pc, #96]	; (8018dec <sys_timeout_abs+0xd8>)
 8018d8c:	693b      	ldr	r3, [r7, #16]
 8018d8e:	6013      	str	r3, [r2, #0]
 8018d90:	e023      	b.n	8018dda <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8018d92:	4b16      	ldr	r3, [pc, #88]	; (8018dec <sys_timeout_abs+0xd8>)
 8018d94:	681b      	ldr	r3, [r3, #0]
 8018d96:	617b      	str	r3, [r7, #20]
 8018d98:	e01a      	b.n	8018dd0 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8018d9a:	697b      	ldr	r3, [r7, #20]
 8018d9c:	681b      	ldr	r3, [r3, #0]
 8018d9e:	2b00      	cmp	r3, #0
 8018da0:	d00b      	beq.n	8018dba <sys_timeout_abs+0xa6>
 8018da2:	693b      	ldr	r3, [r7, #16]
 8018da4:	685a      	ldr	r2, [r3, #4]
 8018da6:	697b      	ldr	r3, [r7, #20]
 8018da8:	681b      	ldr	r3, [r3, #0]
 8018daa:	685b      	ldr	r3, [r3, #4]
 8018dac:	1ad3      	subs	r3, r2, r3
 8018dae:	0fdb      	lsrs	r3, r3, #31
 8018db0:	f003 0301 	and.w	r3, r3, #1
 8018db4:	b2db      	uxtb	r3, r3
 8018db6:	2b00      	cmp	r3, #0
 8018db8:	d007      	beq.n	8018dca <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8018dba:	697b      	ldr	r3, [r7, #20]
 8018dbc:	681a      	ldr	r2, [r3, #0]
 8018dbe:	693b      	ldr	r3, [r7, #16]
 8018dc0:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8018dc2:	697b      	ldr	r3, [r7, #20]
 8018dc4:	693a      	ldr	r2, [r7, #16]
 8018dc6:	601a      	str	r2, [r3, #0]
        break;
 8018dc8:	e007      	b.n	8018dda <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8018dca:	697b      	ldr	r3, [r7, #20]
 8018dcc:	681b      	ldr	r3, [r3, #0]
 8018dce:	617b      	str	r3, [r7, #20]
 8018dd0:	697b      	ldr	r3, [r7, #20]
 8018dd2:	2b00      	cmp	r3, #0
 8018dd4:	d1e1      	bne.n	8018d9a <sys_timeout_abs+0x86>
 8018dd6:	e000      	b.n	8018dda <sys_timeout_abs+0xc6>
    return;
 8018dd8:	bf00      	nop
      }
    }
  }
}
 8018dda:	3718      	adds	r7, #24
 8018ddc:	46bd      	mov	sp, r7
 8018dde:	bd80      	pop	{r7, pc}
 8018de0:	08020404 	.word	0x08020404
 8018de4:	08020438 	.word	0x08020438
 8018de8:	08020478 	.word	0x08020478
 8018dec:	2002409c 	.word	0x2002409c

08018df0 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8018df0:	b580      	push	{r7, lr}
 8018df2:	b086      	sub	sp, #24
 8018df4:	af00      	add	r7, sp, #0
 8018df6:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8018df8:	687b      	ldr	r3, [r7, #4]
 8018dfa:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8018dfc:	697b      	ldr	r3, [r7, #20]
 8018dfe:	685b      	ldr	r3, [r3, #4]
 8018e00:	4798      	blx	r3

  now = sys_now();
 8018e02:	f7f5 fb2d 	bl	800e460 <sys_now>
 8018e06:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8018e08:	697b      	ldr	r3, [r7, #20]
 8018e0a:	681a      	ldr	r2, [r3, #0]
 8018e0c:	4b0f      	ldr	r3, [pc, #60]	; (8018e4c <lwip_cyclic_timer+0x5c>)
 8018e0e:	681b      	ldr	r3, [r3, #0]
 8018e10:	4413      	add	r3, r2
 8018e12:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8018e14:	68fa      	ldr	r2, [r7, #12]
 8018e16:	693b      	ldr	r3, [r7, #16]
 8018e18:	1ad3      	subs	r3, r2, r3
 8018e1a:	0fdb      	lsrs	r3, r3, #31
 8018e1c:	f003 0301 	and.w	r3, r3, #1
 8018e20:	b2db      	uxtb	r3, r3
 8018e22:	2b00      	cmp	r3, #0
 8018e24:	d009      	beq.n	8018e3a <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8018e26:	697b      	ldr	r3, [r7, #20]
 8018e28:	681a      	ldr	r2, [r3, #0]
 8018e2a:	693b      	ldr	r3, [r7, #16]
 8018e2c:	4413      	add	r3, r2
 8018e2e:	687a      	ldr	r2, [r7, #4]
 8018e30:	4907      	ldr	r1, [pc, #28]	; (8018e50 <lwip_cyclic_timer+0x60>)
 8018e32:	4618      	mov	r0, r3
 8018e34:	f7ff ff6e 	bl	8018d14 <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8018e38:	e004      	b.n	8018e44 <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8018e3a:	687a      	ldr	r2, [r7, #4]
 8018e3c:	4904      	ldr	r1, [pc, #16]	; (8018e50 <lwip_cyclic_timer+0x60>)
 8018e3e:	68f8      	ldr	r0, [r7, #12]
 8018e40:	f7ff ff68 	bl	8018d14 <sys_timeout_abs>
}
 8018e44:	bf00      	nop
 8018e46:	3718      	adds	r7, #24
 8018e48:	46bd      	mov	sp, r7
 8018e4a:	bd80      	pop	{r7, pc}
 8018e4c:	200240a0 	.word	0x200240a0
 8018e50:	08018df1 	.word	0x08018df1

08018e54 <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8018e54:	b580      	push	{r7, lr}
 8018e56:	b082      	sub	sp, #8
 8018e58:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8018e5a:	2301      	movs	r3, #1
 8018e5c:	607b      	str	r3, [r7, #4]
 8018e5e:	e00e      	b.n	8018e7e <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8018e60:	4a0b      	ldr	r2, [pc, #44]	; (8018e90 <sys_timeouts_init+0x3c>)
 8018e62:	687b      	ldr	r3, [r7, #4]
 8018e64:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8018e68:	687b      	ldr	r3, [r7, #4]
 8018e6a:	00db      	lsls	r3, r3, #3
 8018e6c:	4a08      	ldr	r2, [pc, #32]	; (8018e90 <sys_timeouts_init+0x3c>)
 8018e6e:	4413      	add	r3, r2
 8018e70:	461a      	mov	r2, r3
 8018e72:	4908      	ldr	r1, [pc, #32]	; (8018e94 <sys_timeouts_init+0x40>)
 8018e74:	f000 f810 	bl	8018e98 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8018e78:	687b      	ldr	r3, [r7, #4]
 8018e7a:	3301      	adds	r3, #1
 8018e7c:	607b      	str	r3, [r7, #4]
 8018e7e:	687b      	ldr	r3, [r7, #4]
 8018e80:	2b02      	cmp	r3, #2
 8018e82:	d9ed      	bls.n	8018e60 <sys_timeouts_init+0xc>
  }
}
 8018e84:	bf00      	nop
 8018e86:	bf00      	nop
 8018e88:	3708      	adds	r7, #8
 8018e8a:	46bd      	mov	sp, r7
 8018e8c:	bd80      	pop	{r7, pc}
 8018e8e:	bf00      	nop
 8018e90:	08021064 	.word	0x08021064
 8018e94:	08018df1 	.word	0x08018df1

08018e98 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8018e98:	b580      	push	{r7, lr}
 8018e9a:	b086      	sub	sp, #24
 8018e9c:	af00      	add	r7, sp, #0
 8018e9e:	60f8      	str	r0, [r7, #12]
 8018ea0:	60b9      	str	r1, [r7, #8]
 8018ea2:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8018ea4:	68fb      	ldr	r3, [r7, #12]
 8018ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8018eaa:	d306      	bcc.n	8018eba <sys_timeout+0x22>
 8018eac:	4b0a      	ldr	r3, [pc, #40]	; (8018ed8 <sys_timeout+0x40>)
 8018eae:	f240 1229 	movw	r2, #297	; 0x129
 8018eb2:	490a      	ldr	r1, [pc, #40]	; (8018edc <sys_timeout+0x44>)
 8018eb4:	480a      	ldr	r0, [pc, #40]	; (8018ee0 <sys_timeout+0x48>)
 8018eb6:	f004 faf9 	bl	801d4ac <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8018eba:	f7f5 fad1 	bl	800e460 <sys_now>
 8018ebe:	4602      	mov	r2, r0
 8018ec0:	68fb      	ldr	r3, [r7, #12]
 8018ec2:	4413      	add	r3, r2
 8018ec4:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8018ec6:	687a      	ldr	r2, [r7, #4]
 8018ec8:	68b9      	ldr	r1, [r7, #8]
 8018eca:	6978      	ldr	r0, [r7, #20]
 8018ecc:	f7ff ff22 	bl	8018d14 <sys_timeout_abs>
#endif
}
 8018ed0:	bf00      	nop
 8018ed2:	3718      	adds	r7, #24
 8018ed4:	46bd      	mov	sp, r7
 8018ed6:	bd80      	pop	{r7, pc}
 8018ed8:	08020404 	.word	0x08020404
 8018edc:	080204a0 	.word	0x080204a0
 8018ee0:	08020478 	.word	0x08020478

08018ee4 <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8018ee4:	b580      	push	{r7, lr}
 8018ee6:	b084      	sub	sp, #16
 8018ee8:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8018eea:	f7f5 fab9 	bl	800e460 <sys_now>
 8018eee:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8018ef0:	4b17      	ldr	r3, [pc, #92]	; (8018f50 <sys_check_timeouts+0x6c>)
 8018ef2:	681b      	ldr	r3, [r3, #0]
 8018ef4:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8018ef6:	68bb      	ldr	r3, [r7, #8]
 8018ef8:	2b00      	cmp	r3, #0
 8018efa:	d022      	beq.n	8018f42 <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8018efc:	68bb      	ldr	r3, [r7, #8]
 8018efe:	685b      	ldr	r3, [r3, #4]
 8018f00:	68fa      	ldr	r2, [r7, #12]
 8018f02:	1ad3      	subs	r3, r2, r3
 8018f04:	0fdb      	lsrs	r3, r3, #31
 8018f06:	f003 0301 	and.w	r3, r3, #1
 8018f0a:	b2db      	uxtb	r3, r3
 8018f0c:	2b00      	cmp	r3, #0
 8018f0e:	d11a      	bne.n	8018f46 <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8018f10:	68bb      	ldr	r3, [r7, #8]
 8018f12:	681b      	ldr	r3, [r3, #0]
 8018f14:	4a0e      	ldr	r2, [pc, #56]	; (8018f50 <sys_check_timeouts+0x6c>)
 8018f16:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8018f18:	68bb      	ldr	r3, [r7, #8]
 8018f1a:	689b      	ldr	r3, [r3, #8]
 8018f1c:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8018f1e:	68bb      	ldr	r3, [r7, #8]
 8018f20:	68db      	ldr	r3, [r3, #12]
 8018f22:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8018f24:	68bb      	ldr	r3, [r7, #8]
 8018f26:	685b      	ldr	r3, [r3, #4]
 8018f28:	4a0a      	ldr	r2, [pc, #40]	; (8018f54 <sys_check_timeouts+0x70>)
 8018f2a:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8018f2c:	68b9      	ldr	r1, [r7, #8]
 8018f2e:	200a      	movs	r0, #10
 8018f30:	f7f9 fc26 	bl	8012780 <memp_free>
    if (handler != NULL) {
 8018f34:	687b      	ldr	r3, [r7, #4]
 8018f36:	2b00      	cmp	r3, #0
 8018f38:	d0da      	beq.n	8018ef0 <sys_check_timeouts+0xc>
      handler(arg);
 8018f3a:	687b      	ldr	r3, [r7, #4]
 8018f3c:	6838      	ldr	r0, [r7, #0]
 8018f3e:	4798      	blx	r3
  do {
 8018f40:	e7d6      	b.n	8018ef0 <sys_check_timeouts+0xc>
      return;
 8018f42:	bf00      	nop
 8018f44:	e000      	b.n	8018f48 <sys_check_timeouts+0x64>
      return;
 8018f46:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8018f48:	3710      	adds	r7, #16
 8018f4a:	46bd      	mov	sp, r7
 8018f4c:	bd80      	pop	{r7, pc}
 8018f4e:	bf00      	nop
 8018f50:	2002409c 	.word	0x2002409c
 8018f54:	200240a0 	.word	0x200240a0

08018f58 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8018f58:	b580      	push	{r7, lr}
 8018f5a:	b082      	sub	sp, #8
 8018f5c:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8018f5e:	4b16      	ldr	r3, [pc, #88]	; (8018fb8 <sys_timeouts_sleeptime+0x60>)
 8018f60:	681b      	ldr	r3, [r3, #0]
 8018f62:	2b00      	cmp	r3, #0
 8018f64:	d102      	bne.n	8018f6c <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8018f66:	f04f 33ff 	mov.w	r3, #4294967295
 8018f6a:	e020      	b.n	8018fae <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8018f6c:	f7f5 fa78 	bl	800e460 <sys_now>
 8018f70:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8018f72:	4b11      	ldr	r3, [pc, #68]	; (8018fb8 <sys_timeouts_sleeptime+0x60>)
 8018f74:	681b      	ldr	r3, [r3, #0]
 8018f76:	685a      	ldr	r2, [r3, #4]
 8018f78:	687b      	ldr	r3, [r7, #4]
 8018f7a:	1ad3      	subs	r3, r2, r3
 8018f7c:	0fdb      	lsrs	r3, r3, #31
 8018f7e:	f003 0301 	and.w	r3, r3, #1
 8018f82:	b2db      	uxtb	r3, r3
 8018f84:	2b00      	cmp	r3, #0
 8018f86:	d001      	beq.n	8018f8c <sys_timeouts_sleeptime+0x34>
    return 0;
 8018f88:	2300      	movs	r3, #0
 8018f8a:	e010      	b.n	8018fae <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8018f8c:	4b0a      	ldr	r3, [pc, #40]	; (8018fb8 <sys_timeouts_sleeptime+0x60>)
 8018f8e:	681b      	ldr	r3, [r3, #0]
 8018f90:	685a      	ldr	r2, [r3, #4]
 8018f92:	687b      	ldr	r3, [r7, #4]
 8018f94:	1ad3      	subs	r3, r2, r3
 8018f96:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8018f98:	683b      	ldr	r3, [r7, #0]
 8018f9a:	2b00      	cmp	r3, #0
 8018f9c:	da06      	bge.n	8018fac <sys_timeouts_sleeptime+0x54>
 8018f9e:	4b07      	ldr	r3, [pc, #28]	; (8018fbc <sys_timeouts_sleeptime+0x64>)
 8018fa0:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8018fa4:	4906      	ldr	r1, [pc, #24]	; (8018fc0 <sys_timeouts_sleeptime+0x68>)
 8018fa6:	4807      	ldr	r0, [pc, #28]	; (8018fc4 <sys_timeouts_sleeptime+0x6c>)
 8018fa8:	f004 fa80 	bl	801d4ac <iprintf>
    return ret;
 8018fac:	683b      	ldr	r3, [r7, #0]
  }
}
 8018fae:	4618      	mov	r0, r3
 8018fb0:	3708      	adds	r7, #8
 8018fb2:	46bd      	mov	sp, r7
 8018fb4:	bd80      	pop	{r7, pc}
 8018fb6:	bf00      	nop
 8018fb8:	2002409c 	.word	0x2002409c
 8018fbc:	08020404 	.word	0x08020404
 8018fc0:	080204d8 	.word	0x080204d8
 8018fc4:	08020478 	.word	0x08020478

08018fc8 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8018fc8:	b580      	push	{r7, lr}
 8018fca:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8018fcc:	f004 f96e 	bl	801d2ac <rand>
 8018fd0:	4603      	mov	r3, r0
 8018fd2:	b29b      	uxth	r3, r3
 8018fd4:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8018fd8:	b29b      	uxth	r3, r3
 8018fda:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8018fde:	b29a      	uxth	r2, r3
 8018fe0:	4b01      	ldr	r3, [pc, #4]	; (8018fe8 <udp_init+0x20>)
 8018fe2:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8018fe4:	bf00      	nop
 8018fe6:	bd80      	pop	{r7, pc}
 8018fe8:	2000002c 	.word	0x2000002c

08018fec <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8018fec:	b480      	push	{r7}
 8018fee:	b083      	sub	sp, #12
 8018ff0:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8018ff2:	2300      	movs	r3, #0
 8018ff4:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8018ff6:	4b17      	ldr	r3, [pc, #92]	; (8019054 <udp_new_port+0x68>)
 8018ff8:	881b      	ldrh	r3, [r3, #0]
 8018ffa:	1c5a      	adds	r2, r3, #1
 8018ffc:	b291      	uxth	r1, r2
 8018ffe:	4a15      	ldr	r2, [pc, #84]	; (8019054 <udp_new_port+0x68>)
 8019000:	8011      	strh	r1, [r2, #0]
 8019002:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8019006:	4293      	cmp	r3, r2
 8019008:	d103      	bne.n	8019012 <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 801900a:	4b12      	ldr	r3, [pc, #72]	; (8019054 <udp_new_port+0x68>)
 801900c:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8019010:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019012:	4b11      	ldr	r3, [pc, #68]	; (8019058 <udp_new_port+0x6c>)
 8019014:	681b      	ldr	r3, [r3, #0]
 8019016:	603b      	str	r3, [r7, #0]
 8019018:	e011      	b.n	801903e <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 801901a:	683b      	ldr	r3, [r7, #0]
 801901c:	8a5a      	ldrh	r2, [r3, #18]
 801901e:	4b0d      	ldr	r3, [pc, #52]	; (8019054 <udp_new_port+0x68>)
 8019020:	881b      	ldrh	r3, [r3, #0]
 8019022:	429a      	cmp	r2, r3
 8019024:	d108      	bne.n	8019038 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8019026:	88fb      	ldrh	r3, [r7, #6]
 8019028:	3301      	adds	r3, #1
 801902a:	80fb      	strh	r3, [r7, #6]
 801902c:	88fb      	ldrh	r3, [r7, #6]
 801902e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8019032:	d3e0      	bcc.n	8018ff6 <udp_new_port+0xa>
        return 0;
 8019034:	2300      	movs	r3, #0
 8019036:	e007      	b.n	8019048 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019038:	683b      	ldr	r3, [r7, #0]
 801903a:	68db      	ldr	r3, [r3, #12]
 801903c:	603b      	str	r3, [r7, #0]
 801903e:	683b      	ldr	r3, [r7, #0]
 8019040:	2b00      	cmp	r3, #0
 8019042:	d1ea      	bne.n	801901a <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8019044:	4b03      	ldr	r3, [pc, #12]	; (8019054 <udp_new_port+0x68>)
 8019046:	881b      	ldrh	r3, [r3, #0]
}
 8019048:	4618      	mov	r0, r3
 801904a:	370c      	adds	r7, #12
 801904c:	46bd      	mov	sp, r7
 801904e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019052:	4770      	bx	lr
 8019054:	2000002c 	.word	0x2000002c
 8019058:	200240a8 	.word	0x200240a8

0801905c <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 801905c:	b580      	push	{r7, lr}
 801905e:	b084      	sub	sp, #16
 8019060:	af00      	add	r7, sp, #0
 8019062:	60f8      	str	r0, [r7, #12]
 8019064:	60b9      	str	r1, [r7, #8]
 8019066:	4613      	mov	r3, r2
 8019068:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 801906a:	68fb      	ldr	r3, [r7, #12]
 801906c:	2b00      	cmp	r3, #0
 801906e:	d105      	bne.n	801907c <udp_input_local_match+0x20>
 8019070:	4b27      	ldr	r3, [pc, #156]	; (8019110 <udp_input_local_match+0xb4>)
 8019072:	2287      	movs	r2, #135	; 0x87
 8019074:	4927      	ldr	r1, [pc, #156]	; (8019114 <udp_input_local_match+0xb8>)
 8019076:	4828      	ldr	r0, [pc, #160]	; (8019118 <udp_input_local_match+0xbc>)
 8019078:	f004 fa18 	bl	801d4ac <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 801907c:	68bb      	ldr	r3, [r7, #8]
 801907e:	2b00      	cmp	r3, #0
 8019080:	d105      	bne.n	801908e <udp_input_local_match+0x32>
 8019082:	4b23      	ldr	r3, [pc, #140]	; (8019110 <udp_input_local_match+0xb4>)
 8019084:	2288      	movs	r2, #136	; 0x88
 8019086:	4925      	ldr	r1, [pc, #148]	; (801911c <udp_input_local_match+0xc0>)
 8019088:	4823      	ldr	r0, [pc, #140]	; (8019118 <udp_input_local_match+0xbc>)
 801908a:	f004 fa0f 	bl	801d4ac <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 801908e:	68fb      	ldr	r3, [r7, #12]
 8019090:	7a1b      	ldrb	r3, [r3, #8]
 8019092:	2b00      	cmp	r3, #0
 8019094:	d00b      	beq.n	80190ae <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8019096:	68fb      	ldr	r3, [r7, #12]
 8019098:	7a1a      	ldrb	r2, [r3, #8]
 801909a:	4b21      	ldr	r3, [pc, #132]	; (8019120 <udp_input_local_match+0xc4>)
 801909c:	685b      	ldr	r3, [r3, #4]
 801909e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 80190a2:	3301      	adds	r3, #1
 80190a4:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 80190a6:	429a      	cmp	r2, r3
 80190a8:	d001      	beq.n	80190ae <udp_input_local_match+0x52>
    return 0;
 80190aa:	2300      	movs	r3, #0
 80190ac:	e02b      	b.n	8019106 <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 80190ae:	79fb      	ldrb	r3, [r7, #7]
 80190b0:	2b00      	cmp	r3, #0
 80190b2:	d018      	beq.n	80190e6 <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80190b4:	68fb      	ldr	r3, [r7, #12]
 80190b6:	2b00      	cmp	r3, #0
 80190b8:	d013      	beq.n	80190e2 <udp_input_local_match+0x86>
 80190ba:	68fb      	ldr	r3, [r7, #12]
 80190bc:	681b      	ldr	r3, [r3, #0]
 80190be:	2b00      	cmp	r3, #0
 80190c0:	d00f      	beq.n	80190e2 <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80190c2:	4b17      	ldr	r3, [pc, #92]	; (8019120 <udp_input_local_match+0xc4>)
 80190c4:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 80190c6:	f1b3 3fff 	cmp.w	r3, #4294967295
 80190ca:	d00a      	beq.n	80190e2 <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 80190cc:	68fb      	ldr	r3, [r7, #12]
 80190ce:	681a      	ldr	r2, [r3, #0]
 80190d0:	4b13      	ldr	r3, [pc, #76]	; (8019120 <udp_input_local_match+0xc4>)
 80190d2:	695b      	ldr	r3, [r3, #20]
 80190d4:	405a      	eors	r2, r3
 80190d6:	68bb      	ldr	r3, [r7, #8]
 80190d8:	3308      	adds	r3, #8
 80190da:	681b      	ldr	r3, [r3, #0]
 80190dc:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 80190de:	2b00      	cmp	r3, #0
 80190e0:	d110      	bne.n	8019104 <udp_input_local_match+0xa8>
          return 1;
 80190e2:	2301      	movs	r3, #1
 80190e4:	e00f      	b.n	8019106 <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 80190e6:	68fb      	ldr	r3, [r7, #12]
 80190e8:	2b00      	cmp	r3, #0
 80190ea:	d009      	beq.n	8019100 <udp_input_local_match+0xa4>
 80190ec:	68fb      	ldr	r3, [r7, #12]
 80190ee:	681b      	ldr	r3, [r3, #0]
 80190f0:	2b00      	cmp	r3, #0
 80190f2:	d005      	beq.n	8019100 <udp_input_local_match+0xa4>
 80190f4:	68fb      	ldr	r3, [r7, #12]
 80190f6:	681a      	ldr	r2, [r3, #0]
 80190f8:	4b09      	ldr	r3, [pc, #36]	; (8019120 <udp_input_local_match+0xc4>)
 80190fa:	695b      	ldr	r3, [r3, #20]
 80190fc:	429a      	cmp	r2, r3
 80190fe:	d101      	bne.n	8019104 <udp_input_local_match+0xa8>
        return 1;
 8019100:	2301      	movs	r3, #1
 8019102:	e000      	b.n	8019106 <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8019104:	2300      	movs	r3, #0
}
 8019106:	4618      	mov	r0, r3
 8019108:	3710      	adds	r7, #16
 801910a:	46bd      	mov	sp, r7
 801910c:	bd80      	pop	{r7, pc}
 801910e:	bf00      	nop
 8019110:	080204ec 	.word	0x080204ec
 8019114:	0802051c 	.word	0x0802051c
 8019118:	08020540 	.word	0x08020540
 801911c:	08020568 	.word	0x08020568
 8019120:	2001e768 	.word	0x2001e768

08019124 <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8019124:	b590      	push	{r4, r7, lr}
 8019126:	b08d      	sub	sp, #52	; 0x34
 8019128:	af02      	add	r7, sp, #8
 801912a:	6078      	str	r0, [r7, #4]
 801912c:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 801912e:	2300      	movs	r3, #0
 8019130:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8019132:	687b      	ldr	r3, [r7, #4]
 8019134:	2b00      	cmp	r3, #0
 8019136:	d105      	bne.n	8019144 <udp_input+0x20>
 8019138:	4b7c      	ldr	r3, [pc, #496]	; (801932c <udp_input+0x208>)
 801913a:	22cf      	movs	r2, #207	; 0xcf
 801913c:	497c      	ldr	r1, [pc, #496]	; (8019330 <udp_input+0x20c>)
 801913e:	487d      	ldr	r0, [pc, #500]	; (8019334 <udp_input+0x210>)
 8019140:	f004 f9b4 	bl	801d4ac <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8019144:	683b      	ldr	r3, [r7, #0]
 8019146:	2b00      	cmp	r3, #0
 8019148:	d105      	bne.n	8019156 <udp_input+0x32>
 801914a:	4b78      	ldr	r3, [pc, #480]	; (801932c <udp_input+0x208>)
 801914c:	22d0      	movs	r2, #208	; 0xd0
 801914e:	497a      	ldr	r1, [pc, #488]	; (8019338 <udp_input+0x214>)
 8019150:	4878      	ldr	r0, [pc, #480]	; (8019334 <udp_input+0x210>)
 8019152:	f004 f9ab 	bl	801d4ac <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8019156:	687b      	ldr	r3, [r7, #4]
 8019158:	895b      	ldrh	r3, [r3, #10]
 801915a:	2b07      	cmp	r3, #7
 801915c:	d803      	bhi.n	8019166 <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 801915e:	6878      	ldr	r0, [r7, #4]
 8019160:	f7fa f9b2 	bl	80134c8 <pbuf_free>
    goto end;
 8019164:	e0de      	b.n	8019324 <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8019166:	687b      	ldr	r3, [r7, #4]
 8019168:	685b      	ldr	r3, [r3, #4]
 801916a:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 801916c:	4b73      	ldr	r3, [pc, #460]	; (801933c <udp_input+0x218>)
 801916e:	695b      	ldr	r3, [r3, #20]
 8019170:	4a72      	ldr	r2, [pc, #456]	; (801933c <udp_input+0x218>)
 8019172:	6812      	ldr	r2, [r2, #0]
 8019174:	4611      	mov	r1, r2
 8019176:	4618      	mov	r0, r3
 8019178:	f001 ff40 	bl	801affc <ip4_addr_isbroadcast_u32>
 801917c:	4603      	mov	r3, r0
 801917e:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8019180:	697b      	ldr	r3, [r7, #20]
 8019182:	881b      	ldrh	r3, [r3, #0]
 8019184:	b29b      	uxth	r3, r3
 8019186:	4618      	mov	r0, r3
 8019188:	f7f8 fd9c 	bl	8011cc4 <lwip_htons>
 801918c:	4603      	mov	r3, r0
 801918e:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8019190:	697b      	ldr	r3, [r7, #20]
 8019192:	885b      	ldrh	r3, [r3, #2]
 8019194:	b29b      	uxth	r3, r3
 8019196:	4618      	mov	r0, r3
 8019198:	f7f8 fd94 	bl	8011cc4 <lwip_htons>
 801919c:	4603      	mov	r3, r0
 801919e:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 80191a0:	2300      	movs	r3, #0
 80191a2:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 80191a4:	2300      	movs	r3, #0
 80191a6:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 80191a8:	2300      	movs	r3, #0
 80191aa:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 80191ac:	4b64      	ldr	r3, [pc, #400]	; (8019340 <udp_input+0x21c>)
 80191ae:	681b      	ldr	r3, [r3, #0]
 80191b0:	627b      	str	r3, [r7, #36]	; 0x24
 80191b2:	e054      	b.n	801925e <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 80191b4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191b6:	8a5b      	ldrh	r3, [r3, #18]
 80191b8:	89fa      	ldrh	r2, [r7, #14]
 80191ba:	429a      	cmp	r2, r3
 80191bc:	d14a      	bne.n	8019254 <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 80191be:	7cfb      	ldrb	r3, [r7, #19]
 80191c0:	461a      	mov	r2, r3
 80191c2:	6839      	ldr	r1, [r7, #0]
 80191c4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80191c6:	f7ff ff49 	bl	801905c <udp_input_local_match>
 80191ca:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 80191cc:	2b00      	cmp	r3, #0
 80191ce:	d041      	beq.n	8019254 <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 80191d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191d2:	7c1b      	ldrb	r3, [r3, #16]
 80191d4:	f003 0304 	and.w	r3, r3, #4
 80191d8:	2b00      	cmp	r3, #0
 80191da:	d11d      	bne.n	8019218 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 80191dc:	69fb      	ldr	r3, [r7, #28]
 80191de:	2b00      	cmp	r3, #0
 80191e0:	d102      	bne.n	80191e8 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 80191e2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80191e4:	61fb      	str	r3, [r7, #28]
 80191e6:	e017      	b.n	8019218 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 80191e8:	7cfb      	ldrb	r3, [r7, #19]
 80191ea:	2b00      	cmp	r3, #0
 80191ec:	d014      	beq.n	8019218 <udp_input+0xf4>
 80191ee:	4b53      	ldr	r3, [pc, #332]	; (801933c <udp_input+0x218>)
 80191f0:	695b      	ldr	r3, [r3, #20]
 80191f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80191f6:	d10f      	bne.n	8019218 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 80191f8:	69fb      	ldr	r3, [r7, #28]
 80191fa:	681a      	ldr	r2, [r3, #0]
 80191fc:	683b      	ldr	r3, [r7, #0]
 80191fe:	3304      	adds	r3, #4
 8019200:	681b      	ldr	r3, [r3, #0]
 8019202:	429a      	cmp	r2, r3
 8019204:	d008      	beq.n	8019218 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8019206:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019208:	681a      	ldr	r2, [r3, #0]
 801920a:	683b      	ldr	r3, [r7, #0]
 801920c:	3304      	adds	r3, #4
 801920e:	681b      	ldr	r3, [r3, #0]
 8019210:	429a      	cmp	r2, r3
 8019212:	d101      	bne.n	8019218 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8019214:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019216:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8019218:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801921a:	8a9b      	ldrh	r3, [r3, #20]
 801921c:	8a3a      	ldrh	r2, [r7, #16]
 801921e:	429a      	cmp	r2, r3
 8019220:	d118      	bne.n	8019254 <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8019222:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019224:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8019226:	2b00      	cmp	r3, #0
 8019228:	d005      	beq.n	8019236 <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 801922a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801922c:	685a      	ldr	r2, [r3, #4]
 801922e:	4b43      	ldr	r3, [pc, #268]	; (801933c <udp_input+0x218>)
 8019230:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8019232:	429a      	cmp	r2, r3
 8019234:	d10e      	bne.n	8019254 <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8019236:	6a3b      	ldr	r3, [r7, #32]
 8019238:	2b00      	cmp	r3, #0
 801923a:	d014      	beq.n	8019266 <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 801923c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801923e:	68da      	ldr	r2, [r3, #12]
 8019240:	6a3b      	ldr	r3, [r7, #32]
 8019242:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8019244:	4b3e      	ldr	r3, [pc, #248]	; (8019340 <udp_input+0x21c>)
 8019246:	681a      	ldr	r2, [r3, #0]
 8019248:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801924a:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 801924c:	4a3c      	ldr	r2, [pc, #240]	; (8019340 <udp_input+0x21c>)
 801924e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019250:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8019252:	e008      	b.n	8019266 <udp_input+0x142>
      }
    }

    prev = pcb;
 8019254:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019256:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8019258:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801925a:	68db      	ldr	r3, [r3, #12]
 801925c:	627b      	str	r3, [r7, #36]	; 0x24
 801925e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019260:	2b00      	cmp	r3, #0
 8019262:	d1a7      	bne.n	80191b4 <udp_input+0x90>
 8019264:	e000      	b.n	8019268 <udp_input+0x144>
        break;
 8019266:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8019268:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801926a:	2b00      	cmp	r3, #0
 801926c:	d101      	bne.n	8019272 <udp_input+0x14e>
    pcb = uncon_pcb;
 801926e:	69fb      	ldr	r3, [r7, #28]
 8019270:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8019272:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8019274:	2b00      	cmp	r3, #0
 8019276:	d002      	beq.n	801927e <udp_input+0x15a>
    for_us = 1;
 8019278:	2301      	movs	r3, #1
 801927a:	76fb      	strb	r3, [r7, #27]
 801927c:	e00a      	b.n	8019294 <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 801927e:	683b      	ldr	r3, [r7, #0]
 8019280:	3304      	adds	r3, #4
 8019282:	681a      	ldr	r2, [r3, #0]
 8019284:	4b2d      	ldr	r3, [pc, #180]	; (801933c <udp_input+0x218>)
 8019286:	695b      	ldr	r3, [r3, #20]
 8019288:	429a      	cmp	r2, r3
 801928a:	bf0c      	ite	eq
 801928c:	2301      	moveq	r3, #1
 801928e:	2300      	movne	r3, #0
 8019290:	b2db      	uxtb	r3, r3
 8019292:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8019294:	7efb      	ldrb	r3, [r7, #27]
 8019296:	2b00      	cmp	r3, #0
 8019298:	d041      	beq.n	801931e <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 801929a:	2108      	movs	r1, #8
 801929c:	6878      	ldr	r0, [r7, #4]
 801929e:	f7fa f88d 	bl	80133bc <pbuf_remove_header>
 80192a2:	4603      	mov	r3, r0
 80192a4:	2b00      	cmp	r3, #0
 80192a6:	d00a      	beq.n	80192be <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 80192a8:	4b20      	ldr	r3, [pc, #128]	; (801932c <udp_input+0x208>)
 80192aa:	f44f 72b8 	mov.w	r2, #368	; 0x170
 80192ae:	4925      	ldr	r1, [pc, #148]	; (8019344 <udp_input+0x220>)
 80192b0:	4820      	ldr	r0, [pc, #128]	; (8019334 <udp_input+0x210>)
 80192b2:	f004 f8fb 	bl	801d4ac <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 80192b6:	6878      	ldr	r0, [r7, #4]
 80192b8:	f7fa f906 	bl	80134c8 <pbuf_free>
      goto end;
 80192bc:	e032      	b.n	8019324 <udp_input+0x200>
    }

    if (pcb != NULL) {
 80192be:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192c0:	2b00      	cmp	r3, #0
 80192c2:	d012      	beq.n	80192ea <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 80192c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192c6:	699b      	ldr	r3, [r3, #24]
 80192c8:	2b00      	cmp	r3, #0
 80192ca:	d00a      	beq.n	80192e2 <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 80192cc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192ce:	699c      	ldr	r4, [r3, #24]
 80192d0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80192d2:	69d8      	ldr	r0, [r3, #28]
 80192d4:	8a3b      	ldrh	r3, [r7, #16]
 80192d6:	9300      	str	r3, [sp, #0]
 80192d8:	4b1b      	ldr	r3, [pc, #108]	; (8019348 <udp_input+0x224>)
 80192da:	687a      	ldr	r2, [r7, #4]
 80192dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80192de:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 80192e0:	e021      	b.n	8019326 <udp_input+0x202>
        pbuf_free(p);
 80192e2:	6878      	ldr	r0, [r7, #4]
 80192e4:	f7fa f8f0 	bl	80134c8 <pbuf_free>
        goto end;
 80192e8:	e01c      	b.n	8019324 <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 80192ea:	7cfb      	ldrb	r3, [r7, #19]
 80192ec:	2b00      	cmp	r3, #0
 80192ee:	d112      	bne.n	8019316 <udp_input+0x1f2>
 80192f0:	4b12      	ldr	r3, [pc, #72]	; (801933c <udp_input+0x218>)
 80192f2:	695b      	ldr	r3, [r3, #20]
 80192f4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80192f8:	2be0      	cmp	r3, #224	; 0xe0
 80192fa:	d00c      	beq.n	8019316 <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 80192fc:	4b0f      	ldr	r3, [pc, #60]	; (801933c <udp_input+0x218>)
 80192fe:	899b      	ldrh	r3, [r3, #12]
 8019300:	3308      	adds	r3, #8
 8019302:	b29b      	uxth	r3, r3
 8019304:	b21b      	sxth	r3, r3
 8019306:	4619      	mov	r1, r3
 8019308:	6878      	ldr	r0, [r7, #4]
 801930a:	f7fa f8ca 	bl	80134a2 <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 801930e:	2103      	movs	r1, #3
 8019310:	6878      	ldr	r0, [r7, #4]
 8019312:	f001 fb53 	bl	801a9bc <icmp_dest_unreach>
      pbuf_free(p);
 8019316:	6878      	ldr	r0, [r7, #4]
 8019318:	f7fa f8d6 	bl	80134c8 <pbuf_free>
  return;
 801931c:	e003      	b.n	8019326 <udp_input+0x202>
    pbuf_free(p);
 801931e:	6878      	ldr	r0, [r7, #4]
 8019320:	f7fa f8d2 	bl	80134c8 <pbuf_free>
  return;
 8019324:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8019326:	372c      	adds	r7, #44	; 0x2c
 8019328:	46bd      	mov	sp, r7
 801932a:	bd90      	pop	{r4, r7, pc}
 801932c:	080204ec 	.word	0x080204ec
 8019330:	08020590 	.word	0x08020590
 8019334:	08020540 	.word	0x08020540
 8019338:	080205a8 	.word	0x080205a8
 801933c:	2001e768 	.word	0x2001e768
 8019340:	200240a8 	.word	0x200240a8
 8019344:	080205c4 	.word	0x080205c4
 8019348:	2001e778 	.word	0x2001e778

0801934c <udp_sendto>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto(struct udp_pcb *pcb, struct pbuf *p,
           const ip_addr_t *dst_ip, u16_t dst_port)
{
 801934c:	b580      	push	{r7, lr}
 801934e:	b088      	sub	sp, #32
 8019350:	af02      	add	r7, sp, #8
 8019352:	60f8      	str	r0, [r7, #12]
 8019354:	60b9      	str	r1, [r7, #8]
 8019356:	607a      	str	r2, [r7, #4]
 8019358:	807b      	strh	r3, [r7, #2]
                  u16_t dst_port, u8_t have_chksum, u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  struct netif *netif;

  LWIP_ERROR("udp_sendto: invalid pcb", pcb != NULL, return ERR_ARG);
 801935a:	68fb      	ldr	r3, [r7, #12]
 801935c:	2b00      	cmp	r3, #0
 801935e:	d109      	bne.n	8019374 <udp_sendto+0x28>
 8019360:	4b23      	ldr	r3, [pc, #140]	; (80193f0 <udp_sendto+0xa4>)
 8019362:	f44f 7206 	mov.w	r2, #536	; 0x218
 8019366:	4923      	ldr	r1, [pc, #140]	; (80193f4 <udp_sendto+0xa8>)
 8019368:	4823      	ldr	r0, [pc, #140]	; (80193f8 <udp_sendto+0xac>)
 801936a:	f004 f89f 	bl	801d4ac <iprintf>
 801936e:	f06f 030f 	mvn.w	r3, #15
 8019372:	e038      	b.n	80193e6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid pbuf", p != NULL, return ERR_ARG);
 8019374:	68bb      	ldr	r3, [r7, #8]
 8019376:	2b00      	cmp	r3, #0
 8019378:	d109      	bne.n	801938e <udp_sendto+0x42>
 801937a:	4b1d      	ldr	r3, [pc, #116]	; (80193f0 <udp_sendto+0xa4>)
 801937c:	f240 2219 	movw	r2, #537	; 0x219
 8019380:	491e      	ldr	r1, [pc, #120]	; (80193fc <udp_sendto+0xb0>)
 8019382:	481d      	ldr	r0, [pc, #116]	; (80193f8 <udp_sendto+0xac>)
 8019384:	f004 f892 	bl	801d4ac <iprintf>
 8019388:	f06f 030f 	mvn.w	r3, #15
 801938c:	e02b      	b.n	80193e6 <udp_sendto+0x9a>
  LWIP_ERROR("udp_sendto: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801938e:	687b      	ldr	r3, [r7, #4]
 8019390:	2b00      	cmp	r3, #0
 8019392:	d109      	bne.n	80193a8 <udp_sendto+0x5c>
 8019394:	4b16      	ldr	r3, [pc, #88]	; (80193f0 <udp_sendto+0xa4>)
 8019396:	f240 221a 	movw	r2, #538	; 0x21a
 801939a:	4919      	ldr	r1, [pc, #100]	; (8019400 <udp_sendto+0xb4>)
 801939c:	4816      	ldr	r0, [pc, #88]	; (80193f8 <udp_sendto+0xac>)
 801939e:	f004 f885 	bl	801d4ac <iprintf>
 80193a2:	f06f 030f 	mvn.w	r3, #15
 80193a6:	e01e      	b.n	80193e6 <udp_sendto+0x9a>
    return ERR_VAL;
  }

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send\n"));

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 80193a8:	68fb      	ldr	r3, [r7, #12]
 80193aa:	7a1b      	ldrb	r3, [r3, #8]
 80193ac:	2b00      	cmp	r3, #0
 80193ae:	d006      	beq.n	80193be <udp_sendto+0x72>
    netif = netif_get_by_index(pcb->netif_idx);
 80193b0:	68fb      	ldr	r3, [r7, #12]
 80193b2:	7a1b      	ldrb	r3, [r3, #8]
 80193b4:	4618      	mov	r0, r3
 80193b6:	f7f9 fcf9 	bl	8012dac <netif_get_by_index>
 80193ba:	6178      	str	r0, [r7, #20]
 80193bc:	e003      	b.n	80193c6 <udp_sendto+0x7a>

    if (netif == NULL)
#endif /* LWIP_MULTICAST_TX_OPTIONS */
    {
      /* find the outgoing network interface for this packet */
      netif = ip_route(&pcb->local_ip, dst_ip);
 80193be:	6878      	ldr	r0, [r7, #4]
 80193c0:	f001 fb86 	bl	801aad0 <ip4_route>
 80193c4:	6178      	str	r0, [r7, #20]
    }
  }

  /* no outgoing network interface could be found? */
  if (netif == NULL) {
 80193c6:	697b      	ldr	r3, [r7, #20]
 80193c8:	2b00      	cmp	r3, #0
 80193ca:	d102      	bne.n	80193d2 <udp_sendto+0x86>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: No route to "));
    ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, dst_ip);
    LWIP_DEBUGF(UDP_DEBUG, ("\n"));
    UDP_STATS_INC(udp.rterr);
    return ERR_RTE;
 80193cc:	f06f 0303 	mvn.w	r3, #3
 80193d0:	e009      	b.n	80193e6 <udp_sendto+0x9a>
  }
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if(pcb, p, dst_ip, dst_port, netif);
 80193d2:	887a      	ldrh	r2, [r7, #2]
 80193d4:	697b      	ldr	r3, [r7, #20]
 80193d6:	9300      	str	r3, [sp, #0]
 80193d8:	4613      	mov	r3, r2
 80193da:	687a      	ldr	r2, [r7, #4]
 80193dc:	68b9      	ldr	r1, [r7, #8]
 80193de:	68f8      	ldr	r0, [r7, #12]
 80193e0:	f000 f810 	bl	8019404 <udp_sendto_if>
 80193e4:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80193e6:	4618      	mov	r0, r3
 80193e8:	3718      	adds	r7, #24
 80193ea:	46bd      	mov	sp, r7
 80193ec:	bd80      	pop	{r7, pc}
 80193ee:	bf00      	nop
 80193f0:	080204ec 	.word	0x080204ec
 80193f4:	08020610 	.word	0x08020610
 80193f8:	08020540 	.word	0x08020540
 80193fc:	08020628 	.word	0x08020628
 8019400:	08020644 	.word	0x08020644

08019404 <udp_sendto_if>:
 * @see udp_disconnect() udp_send()
 */
err_t
udp_sendto_if(struct udp_pcb *pcb, struct pbuf *p,
              const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif)
{
 8019404:	b580      	push	{r7, lr}
 8019406:	b088      	sub	sp, #32
 8019408:	af02      	add	r7, sp, #8
 801940a:	60f8      	str	r0, [r7, #12]
 801940c:	60b9      	str	r1, [r7, #8]
 801940e:	607a      	str	r2, [r7, #4]
 8019410:	807b      	strh	r3, [r7, #2]
                     u16_t chksum)
{
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  const ip_addr_t *src_ip;

  LWIP_ERROR("udp_sendto_if: invalid pcb", pcb != NULL, return ERR_ARG);
 8019412:	68fb      	ldr	r3, [r7, #12]
 8019414:	2b00      	cmp	r3, #0
 8019416:	d109      	bne.n	801942c <udp_sendto_if+0x28>
 8019418:	4b2e      	ldr	r3, [pc, #184]	; (80194d4 <udp_sendto_if+0xd0>)
 801941a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801941e:	492e      	ldr	r1, [pc, #184]	; (80194d8 <udp_sendto_if+0xd4>)
 8019420:	482e      	ldr	r0, [pc, #184]	; (80194dc <udp_sendto_if+0xd8>)
 8019422:	f004 f843 	bl	801d4ac <iprintf>
 8019426:	f06f 030f 	mvn.w	r3, #15
 801942a:	e04f      	b.n	80194cc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid pbuf", p != NULL, return ERR_ARG);
 801942c:	68bb      	ldr	r3, [r7, #8]
 801942e:	2b00      	cmp	r3, #0
 8019430:	d109      	bne.n	8019446 <udp_sendto_if+0x42>
 8019432:	4b28      	ldr	r3, [pc, #160]	; (80194d4 <udp_sendto_if+0xd0>)
 8019434:	f240 2281 	movw	r2, #641	; 0x281
 8019438:	4929      	ldr	r1, [pc, #164]	; (80194e0 <udp_sendto_if+0xdc>)
 801943a:	4828      	ldr	r0, [pc, #160]	; (80194dc <udp_sendto_if+0xd8>)
 801943c:	f004 f836 	bl	801d4ac <iprintf>
 8019440:	f06f 030f 	mvn.w	r3, #15
 8019444:	e042      	b.n	80194cc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 8019446:	687b      	ldr	r3, [r7, #4]
 8019448:	2b00      	cmp	r3, #0
 801944a:	d109      	bne.n	8019460 <udp_sendto_if+0x5c>
 801944c:	4b21      	ldr	r3, [pc, #132]	; (80194d4 <udp_sendto_if+0xd0>)
 801944e:	f240 2282 	movw	r2, #642	; 0x282
 8019452:	4924      	ldr	r1, [pc, #144]	; (80194e4 <udp_sendto_if+0xe0>)
 8019454:	4821      	ldr	r0, [pc, #132]	; (80194dc <udp_sendto_if+0xd8>)
 8019456:	f004 f829 	bl	801d4ac <iprintf>
 801945a:	f06f 030f 	mvn.w	r3, #15
 801945e:	e035      	b.n	80194cc <udp_sendto_if+0xc8>
  LWIP_ERROR("udp_sendto_if: invalid netif", netif != NULL, return ERR_ARG);
 8019460:	6a3b      	ldr	r3, [r7, #32]
 8019462:	2b00      	cmp	r3, #0
 8019464:	d109      	bne.n	801947a <udp_sendto_if+0x76>
 8019466:	4b1b      	ldr	r3, [pc, #108]	; (80194d4 <udp_sendto_if+0xd0>)
 8019468:	f240 2283 	movw	r2, #643	; 0x283
 801946c:	491e      	ldr	r1, [pc, #120]	; (80194e8 <udp_sendto_if+0xe4>)
 801946e:	481b      	ldr	r0, [pc, #108]	; (80194dc <udp_sendto_if+0xd8>)
 8019470:	f004 f81c 	bl	801d4ac <iprintf>
 8019474:	f06f 030f 	mvn.w	r3, #15
 8019478:	e028      	b.n	80194cc <udp_sendto_if+0xc8>
#endif /* LWIP_IPV6 */
#if LWIP_IPV4 && LWIP_IPV6
  else
#endif /* LWIP_IPV4 && LWIP_IPV6 */
#if LWIP_IPV4
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 801947a:	68fb      	ldr	r3, [r7, #12]
 801947c:	2b00      	cmp	r3, #0
 801947e:	d009      	beq.n	8019494 <udp_sendto_if+0x90>
 8019480:	68fb      	ldr	r3, [r7, #12]
 8019482:	681b      	ldr	r3, [r3, #0]
 8019484:	2b00      	cmp	r3, #0
 8019486:	d005      	beq.n	8019494 <udp_sendto_if+0x90>
        ip4_addr_ismulticast(ip_2_ip4(&pcb->local_ip))) {
 8019488:	68fb      	ldr	r3, [r7, #12]
 801948a:	681b      	ldr	r3, [r3, #0]
 801948c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8019490:	2be0      	cmp	r3, #224	; 0xe0
 8019492:	d103      	bne.n	801949c <udp_sendto_if+0x98>
      /* if the local_ip is any or multicast
       * use the outgoing network interface IP address as source address */
      src_ip = netif_ip_addr4(netif);
 8019494:	6a3b      	ldr	r3, [r7, #32]
 8019496:	3304      	adds	r3, #4
 8019498:	617b      	str	r3, [r7, #20]
 801949a:	e00b      	b.n	80194b4 <udp_sendto_if+0xb0>
    } else {
      /* check if UDP PCB local IP address is correct
       * this could be an old address if netif->ip_addr has changed */
      if (!ip4_addr_cmp(ip_2_ip4(&(pcb->local_ip)), netif_ip4_addr(netif))) {
 801949c:	68fb      	ldr	r3, [r7, #12]
 801949e:	681a      	ldr	r2, [r3, #0]
 80194a0:	6a3b      	ldr	r3, [r7, #32]
 80194a2:	3304      	adds	r3, #4
 80194a4:	681b      	ldr	r3, [r3, #0]
 80194a6:	429a      	cmp	r2, r3
 80194a8:	d002      	beq.n	80194b0 <udp_sendto_if+0xac>
        /* local_ip doesn't match, drop the packet */
        return ERR_RTE;
 80194aa:	f06f 0303 	mvn.w	r3, #3
 80194ae:	e00d      	b.n	80194cc <udp_sendto_if+0xc8>
      }
      /* use UDP PCB local IP address as source address */
      src_ip = &pcb->local_ip;
 80194b0:	68fb      	ldr	r3, [r7, #12]
 80194b2:	617b      	str	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
#if LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP
  return udp_sendto_if_src_chksum(pcb, p, dst_ip, dst_port, netif, have_chksum, chksum, src_ip);
#else /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
  return udp_sendto_if_src(pcb, p, dst_ip, dst_port, netif, src_ip);
 80194b4:	887a      	ldrh	r2, [r7, #2]
 80194b6:	697b      	ldr	r3, [r7, #20]
 80194b8:	9301      	str	r3, [sp, #4]
 80194ba:	6a3b      	ldr	r3, [r7, #32]
 80194bc:	9300      	str	r3, [sp, #0]
 80194be:	4613      	mov	r3, r2
 80194c0:	687a      	ldr	r2, [r7, #4]
 80194c2:	68b9      	ldr	r1, [r7, #8]
 80194c4:	68f8      	ldr	r0, [r7, #12]
 80194c6:	f000 f811 	bl	80194ec <udp_sendto_if_src>
 80194ca:	4603      	mov	r3, r0
#endif /* LWIP_CHECKSUM_ON_COPY && CHECKSUM_GEN_UDP */
}
 80194cc:	4618      	mov	r0, r3
 80194ce:	3718      	adds	r7, #24
 80194d0:	46bd      	mov	sp, r7
 80194d2:	bd80      	pop	{r7, pc}
 80194d4:	080204ec 	.word	0x080204ec
 80194d8:	08020660 	.word	0x08020660
 80194dc:	08020540 	.word	0x08020540
 80194e0:	0802067c 	.word	0x0802067c
 80194e4:	08020698 	.word	0x08020698
 80194e8:	080206b8 	.word	0x080206b8

080194ec <udp_sendto_if_src>:
/** @ingroup udp_raw
 * Same as @ref udp_sendto_if, but with source address */
err_t
udp_sendto_if_src(struct udp_pcb *pcb, struct pbuf *p,
                  const ip_addr_t *dst_ip, u16_t dst_port, struct netif *netif, const ip_addr_t *src_ip)
{
 80194ec:	b580      	push	{r7, lr}
 80194ee:	b08c      	sub	sp, #48	; 0x30
 80194f0:	af04      	add	r7, sp, #16
 80194f2:	60f8      	str	r0, [r7, #12]
 80194f4:	60b9      	str	r1, [r7, #8]
 80194f6:	607a      	str	r2, [r7, #4]
 80194f8:	807b      	strh	r3, [r7, #2]
  u8_t ip_proto;
  u8_t ttl;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_sendto_if_src: invalid pcb", pcb != NULL, return ERR_ARG);
 80194fa:	68fb      	ldr	r3, [r7, #12]
 80194fc:	2b00      	cmp	r3, #0
 80194fe:	d109      	bne.n	8019514 <udp_sendto_if_src+0x28>
 8019500:	4b65      	ldr	r3, [pc, #404]	; (8019698 <udp_sendto_if_src+0x1ac>)
 8019502:	f240 22d1 	movw	r2, #721	; 0x2d1
 8019506:	4965      	ldr	r1, [pc, #404]	; (801969c <udp_sendto_if_src+0x1b0>)
 8019508:	4865      	ldr	r0, [pc, #404]	; (80196a0 <udp_sendto_if_src+0x1b4>)
 801950a:	f003 ffcf 	bl	801d4ac <iprintf>
 801950e:	f06f 030f 	mvn.w	r3, #15
 8019512:	e0bc      	b.n	801968e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid pbuf", p != NULL, return ERR_ARG);
 8019514:	68bb      	ldr	r3, [r7, #8]
 8019516:	2b00      	cmp	r3, #0
 8019518:	d109      	bne.n	801952e <udp_sendto_if_src+0x42>
 801951a:	4b5f      	ldr	r3, [pc, #380]	; (8019698 <udp_sendto_if_src+0x1ac>)
 801951c:	f240 22d2 	movw	r2, #722	; 0x2d2
 8019520:	4960      	ldr	r1, [pc, #384]	; (80196a4 <udp_sendto_if_src+0x1b8>)
 8019522:	485f      	ldr	r0, [pc, #380]	; (80196a0 <udp_sendto_if_src+0x1b4>)
 8019524:	f003 ffc2 	bl	801d4ac <iprintf>
 8019528:	f06f 030f 	mvn.w	r3, #15
 801952c:	e0af      	b.n	801968e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid dst_ip", dst_ip != NULL, return ERR_ARG);
 801952e:	687b      	ldr	r3, [r7, #4]
 8019530:	2b00      	cmp	r3, #0
 8019532:	d109      	bne.n	8019548 <udp_sendto_if_src+0x5c>
 8019534:	4b58      	ldr	r3, [pc, #352]	; (8019698 <udp_sendto_if_src+0x1ac>)
 8019536:	f240 22d3 	movw	r2, #723	; 0x2d3
 801953a:	495b      	ldr	r1, [pc, #364]	; (80196a8 <udp_sendto_if_src+0x1bc>)
 801953c:	4858      	ldr	r0, [pc, #352]	; (80196a0 <udp_sendto_if_src+0x1b4>)
 801953e:	f003 ffb5 	bl	801d4ac <iprintf>
 8019542:	f06f 030f 	mvn.w	r3, #15
 8019546:	e0a2      	b.n	801968e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid src_ip", src_ip != NULL, return ERR_ARG);
 8019548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801954a:	2b00      	cmp	r3, #0
 801954c:	d109      	bne.n	8019562 <udp_sendto_if_src+0x76>
 801954e:	4b52      	ldr	r3, [pc, #328]	; (8019698 <udp_sendto_if_src+0x1ac>)
 8019550:	f44f 7235 	mov.w	r2, #724	; 0x2d4
 8019554:	4955      	ldr	r1, [pc, #340]	; (80196ac <udp_sendto_if_src+0x1c0>)
 8019556:	4852      	ldr	r0, [pc, #328]	; (80196a0 <udp_sendto_if_src+0x1b4>)
 8019558:	f003 ffa8 	bl	801d4ac <iprintf>
 801955c:	f06f 030f 	mvn.w	r3, #15
 8019560:	e095      	b.n	801968e <udp_sendto_if_src+0x1a2>
  LWIP_ERROR("udp_sendto_if_src: invalid netif", netif != NULL, return ERR_ARG);
 8019562:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8019564:	2b00      	cmp	r3, #0
 8019566:	d109      	bne.n	801957c <udp_sendto_if_src+0x90>
 8019568:	4b4b      	ldr	r3, [pc, #300]	; (8019698 <udp_sendto_if_src+0x1ac>)
 801956a:	f240 22d5 	movw	r2, #725	; 0x2d5
 801956e:	4950      	ldr	r1, [pc, #320]	; (80196b0 <udp_sendto_if_src+0x1c4>)
 8019570:	484b      	ldr	r0, [pc, #300]	; (80196a0 <udp_sendto_if_src+0x1b4>)
 8019572:	f003 ff9b 	bl	801d4ac <iprintf>
 8019576:	f06f 030f 	mvn.w	r3, #15
 801957a:	e088      	b.n	801968e <udp_sendto_if_src+0x1a2>
    return ERR_VAL;
  }
#endif /* LWIP_IPV4 && IP_SOF_BROADCAST */

  /* if the PCB is not yet bound to a port, bind it here */
  if (pcb->local_port == 0) {
 801957c:	68fb      	ldr	r3, [r7, #12]
 801957e:	8a5b      	ldrh	r3, [r3, #18]
 8019580:	2b00      	cmp	r3, #0
 8019582:	d10f      	bne.n	80195a4 <udp_sendto_if_src+0xb8>
    LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_send: not yet bound to a port, binding now\n"));
    err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 8019584:	68f9      	ldr	r1, [r7, #12]
 8019586:	68fb      	ldr	r3, [r7, #12]
 8019588:	8a5b      	ldrh	r3, [r3, #18]
 801958a:	461a      	mov	r2, r3
 801958c:	68f8      	ldr	r0, [r7, #12]
 801958e:	f000 f893 	bl	80196b8 <udp_bind>
 8019592:	4603      	mov	r3, r0
 8019594:	76fb      	strb	r3, [r7, #27]
    if (err != ERR_OK) {
 8019596:	f997 301b 	ldrsb.w	r3, [r7, #27]
 801959a:	2b00      	cmp	r3, #0
 801959c:	d002      	beq.n	80195a4 <udp_sendto_if_src+0xb8>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: forced port bind failed\n"));
      return err;
 801959e:	f997 301b 	ldrsb.w	r3, [r7, #27]
 80195a2:	e074      	b.n	801968e <udp_sendto_if_src+0x1a2>
    }
  }

  /* packet too large to add a UDP header without causing an overflow? */
  if ((u16_t)(p->tot_len + UDP_HLEN) < p->tot_len) {
 80195a4:	68bb      	ldr	r3, [r7, #8]
 80195a6:	891b      	ldrh	r3, [r3, #8]
 80195a8:	f64f 72f7 	movw	r2, #65527	; 0xfff7
 80195ac:	4293      	cmp	r3, r2
 80195ae:	d902      	bls.n	80195b6 <udp_sendto_if_src+0xca>
    return ERR_MEM;
 80195b0:	f04f 33ff 	mov.w	r3, #4294967295
 80195b4:	e06b      	b.n	801968e <udp_sendto_if_src+0x1a2>
  }
  /* not enough space to add an UDP header to first pbuf in given p chain? */
  if (pbuf_add_header(p, UDP_HLEN)) {
 80195b6:	2108      	movs	r1, #8
 80195b8:	68b8      	ldr	r0, [r7, #8]
 80195ba:	f7f9 feef 	bl	801339c <pbuf_add_header>
 80195be:	4603      	mov	r3, r0
 80195c0:	2b00      	cmp	r3, #0
 80195c2:	d015      	beq.n	80195f0 <udp_sendto_if_src+0x104>
    /* allocate header in a separate new pbuf */
    q = pbuf_alloc(PBUF_IP, UDP_HLEN, PBUF_RAM);
 80195c4:	f44f 7220 	mov.w	r2, #640	; 0x280
 80195c8:	2108      	movs	r1, #8
 80195ca:	2022      	movs	r0, #34	; 0x22
 80195cc:	f7f9 fc98 	bl	8012f00 <pbuf_alloc>
 80195d0:	61f8      	str	r0, [r7, #28]
    /* new header pbuf could not be allocated? */
    if (q == NULL) {
 80195d2:	69fb      	ldr	r3, [r7, #28]
 80195d4:	2b00      	cmp	r3, #0
 80195d6:	d102      	bne.n	80195de <udp_sendto_if_src+0xf2>
      LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("udp_send: could not allocate header\n"));
      return ERR_MEM;
 80195d8:	f04f 33ff 	mov.w	r3, #4294967295
 80195dc:	e057      	b.n	801968e <udp_sendto_if_src+0x1a2>
    }
    if (p->tot_len != 0) {
 80195de:	68bb      	ldr	r3, [r7, #8]
 80195e0:	891b      	ldrh	r3, [r3, #8]
 80195e2:	2b00      	cmp	r3, #0
 80195e4:	d006      	beq.n	80195f4 <udp_sendto_if_src+0x108>
      /* chain header q in front of given pbuf p (only if p contains data) */
      pbuf_chain(q, p);
 80195e6:	68b9      	ldr	r1, [r7, #8]
 80195e8:	69f8      	ldr	r0, [r7, #28]
 80195ea:	f7fa f891 	bl	8013710 <pbuf_chain>
 80195ee:	e001      	b.n	80195f4 <udp_sendto_if_src+0x108>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_send: added header pbuf %p before given pbuf %p\n", (void *)q, (void *)p));
  } else {
    /* adding space for header within p succeeded */
    /* first pbuf q equals given pbuf */
    q = p;
 80195f0:	68bb      	ldr	r3, [r7, #8]
 80195f2:	61fb      	str	r3, [r7, #28]
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: added header in given pbuf %p\n", (void *)p));
  }
  LWIP_ASSERT("check that first pbuf can hold struct udp_hdr",
 80195f4:	69fb      	ldr	r3, [r7, #28]
 80195f6:	895b      	ldrh	r3, [r3, #10]
 80195f8:	2b07      	cmp	r3, #7
 80195fa:	d806      	bhi.n	801960a <udp_sendto_if_src+0x11e>
 80195fc:	4b26      	ldr	r3, [pc, #152]	; (8019698 <udp_sendto_if_src+0x1ac>)
 80195fe:	f240 320d 	movw	r2, #781	; 0x30d
 8019602:	492c      	ldr	r1, [pc, #176]	; (80196b4 <udp_sendto_if_src+0x1c8>)
 8019604:	4826      	ldr	r0, [pc, #152]	; (80196a0 <udp_sendto_if_src+0x1b4>)
 8019606:	f003 ff51 	bl	801d4ac <iprintf>
              (q->len >= sizeof(struct udp_hdr)));
  /* q now represents the packet to be sent */
  udphdr = (struct udp_hdr *)q->payload;
 801960a:	69fb      	ldr	r3, [r7, #28]
 801960c:	685b      	ldr	r3, [r3, #4]
 801960e:	617b      	str	r3, [r7, #20]
  udphdr->src = lwip_htons(pcb->local_port);
 8019610:	68fb      	ldr	r3, [r7, #12]
 8019612:	8a5b      	ldrh	r3, [r3, #18]
 8019614:	4618      	mov	r0, r3
 8019616:	f7f8 fb55 	bl	8011cc4 <lwip_htons>
 801961a:	4603      	mov	r3, r0
 801961c:	461a      	mov	r2, r3
 801961e:	697b      	ldr	r3, [r7, #20]
 8019620:	801a      	strh	r2, [r3, #0]
  udphdr->dest = lwip_htons(dst_port);
 8019622:	887b      	ldrh	r3, [r7, #2]
 8019624:	4618      	mov	r0, r3
 8019626:	f7f8 fb4d 	bl	8011cc4 <lwip_htons>
 801962a:	4603      	mov	r3, r0
 801962c:	461a      	mov	r2, r3
 801962e:	697b      	ldr	r3, [r7, #20]
 8019630:	805a      	strh	r2, [r3, #2]
  /* in UDP, 0 checksum means 'no checksum' */
  udphdr->chksum = 0x0000;
 8019632:	697b      	ldr	r3, [r7, #20]
 8019634:	2200      	movs	r2, #0
 8019636:	719a      	strb	r2, [r3, #6]
 8019638:	2200      	movs	r2, #0
 801963a:	71da      	strb	r2, [r3, #7]
    ip_proto = IP_PROTO_UDPLITE;
  } else
#endif /* LWIP_UDPLITE */
  {      /* UDP */
    LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP packet length %"U16_F"\n", q->tot_len));
    udphdr->len = lwip_htons(q->tot_len);
 801963c:	69fb      	ldr	r3, [r7, #28]
 801963e:	891b      	ldrh	r3, [r3, #8]
 8019640:	4618      	mov	r0, r3
 8019642:	f7f8 fb3f 	bl	8011cc4 <lwip_htons>
 8019646:	4603      	mov	r3, r0
 8019648:	461a      	mov	r2, r3
 801964a:	697b      	ldr	r3, [r7, #20]
 801964c:	809a      	strh	r2, [r3, #4]
        }
        udphdr->chksum = udpchksum;
      }
    }
#endif /* CHECKSUM_GEN_UDP */
    ip_proto = IP_PROTO_UDP;
 801964e:	2311      	movs	r3, #17
 8019650:	74fb      	strb	r3, [r7, #19]

  /* Determine TTL to use */
#if LWIP_MULTICAST_TX_OPTIONS
  ttl = (ip_addr_ismulticast(dst_ip) ? udp_get_multicast_ttl(pcb) : pcb->ttl);
#else /* LWIP_MULTICAST_TX_OPTIONS */
  ttl = pcb->ttl;
 8019652:	68fb      	ldr	r3, [r7, #12]
 8019654:	7adb      	ldrb	r3, [r3, #11]
 8019656:	74bb      	strb	r3, [r7, #18]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: UDP checksum 0x%04"X16_F"\n", udphdr->chksum));
  LWIP_DEBUGF(UDP_DEBUG, ("udp_send: ip_output_if (,,,,0x%02"X16_F",)\n", (u16_t)ip_proto));
  /* output to IP */
  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if_src(q, src_ip, dst_ip, ttl, pcb->tos, ip_proto, netif);
 8019658:	68fb      	ldr	r3, [r7, #12]
 801965a:	7a9b      	ldrb	r3, [r3, #10]
 801965c:	7cb9      	ldrb	r1, [r7, #18]
 801965e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8019660:	9202      	str	r2, [sp, #8]
 8019662:	7cfa      	ldrb	r2, [r7, #19]
 8019664:	9201      	str	r2, [sp, #4]
 8019666:	9300      	str	r3, [sp, #0]
 8019668:	460b      	mov	r3, r1
 801966a:	687a      	ldr	r2, [r7, #4]
 801966c:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801966e:	69f8      	ldr	r0, [r7, #28]
 8019670:	f001 fc16 	bl	801aea0 <ip4_output_if_src>
 8019674:	4603      	mov	r3, r0
 8019676:	76fb      	strb	r3, [r7, #27]

  /* @todo: must this be increased even if error occurred? */
  MIB2_STATS_INC(mib2.udpoutdatagrams);

  /* did we chain a separate header pbuf earlier? */
  if (q != p) {
 8019678:	69fa      	ldr	r2, [r7, #28]
 801967a:	68bb      	ldr	r3, [r7, #8]
 801967c:	429a      	cmp	r2, r3
 801967e:	d004      	beq.n	801968a <udp_sendto_if_src+0x19e>
    /* free the header pbuf */
    pbuf_free(q);
 8019680:	69f8      	ldr	r0, [r7, #28]
 8019682:	f7f9 ff21 	bl	80134c8 <pbuf_free>
    q = NULL;
 8019686:	2300      	movs	r3, #0
 8019688:	61fb      	str	r3, [r7, #28]
    /* p is still referenced by the caller, and will live on */
  }

  UDP_STATS_INC(udp.xmit);
  return err;
 801968a:	f997 301b 	ldrsb.w	r3, [r7, #27]
}
 801968e:	4618      	mov	r0, r3
 8019690:	3720      	adds	r7, #32
 8019692:	46bd      	mov	sp, r7
 8019694:	bd80      	pop	{r7, pc}
 8019696:	bf00      	nop
 8019698:	080204ec 	.word	0x080204ec
 801969c:	080206d8 	.word	0x080206d8
 80196a0:	08020540 	.word	0x08020540
 80196a4:	080206f8 	.word	0x080206f8
 80196a8:	08020718 	.word	0x08020718
 80196ac:	0802073c 	.word	0x0802073c
 80196b0:	08020760 	.word	0x08020760
 80196b4:	08020784 	.word	0x08020784

080196b8 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80196b8:	b580      	push	{r7, lr}
 80196ba:	b086      	sub	sp, #24
 80196bc:	af00      	add	r7, sp, #0
 80196be:	60f8      	str	r0, [r7, #12]
 80196c0:	60b9      	str	r1, [r7, #8]
 80196c2:	4613      	mov	r3, r2
 80196c4:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 80196c6:	68bb      	ldr	r3, [r7, #8]
 80196c8:	2b00      	cmp	r3, #0
 80196ca:	d101      	bne.n	80196d0 <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 80196cc:	4b39      	ldr	r3, [pc, #228]	; (80197b4 <udp_bind+0xfc>)
 80196ce:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 80196d0:	68fb      	ldr	r3, [r7, #12]
 80196d2:	2b00      	cmp	r3, #0
 80196d4:	d109      	bne.n	80196ea <udp_bind+0x32>
 80196d6:	4b38      	ldr	r3, [pc, #224]	; (80197b8 <udp_bind+0x100>)
 80196d8:	f240 32b7 	movw	r2, #951	; 0x3b7
 80196dc:	4937      	ldr	r1, [pc, #220]	; (80197bc <udp_bind+0x104>)
 80196de:	4838      	ldr	r0, [pc, #224]	; (80197c0 <udp_bind+0x108>)
 80196e0:	f003 fee4 	bl	801d4ac <iprintf>
 80196e4:	f06f 030f 	mvn.w	r3, #15
 80196e8:	e060      	b.n	80197ac <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 80196ea:	2300      	movs	r3, #0
 80196ec:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 80196ee:	4b35      	ldr	r3, [pc, #212]	; (80197c4 <udp_bind+0x10c>)
 80196f0:	681b      	ldr	r3, [r3, #0]
 80196f2:	617b      	str	r3, [r7, #20]
 80196f4:	e009      	b.n	801970a <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 80196f6:	68fa      	ldr	r2, [r7, #12]
 80196f8:	697b      	ldr	r3, [r7, #20]
 80196fa:	429a      	cmp	r2, r3
 80196fc:	d102      	bne.n	8019704 <udp_bind+0x4c>
      rebind = 1;
 80196fe:	2301      	movs	r3, #1
 8019700:	74fb      	strb	r3, [r7, #19]
      break;
 8019702:	e005      	b.n	8019710 <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019704:	697b      	ldr	r3, [r7, #20]
 8019706:	68db      	ldr	r3, [r3, #12]
 8019708:	617b      	str	r3, [r7, #20]
 801970a:	697b      	ldr	r3, [r7, #20]
 801970c:	2b00      	cmp	r3, #0
 801970e:	d1f2      	bne.n	80196f6 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 8019710:	88fb      	ldrh	r3, [r7, #6]
 8019712:	2b00      	cmp	r3, #0
 8019714:	d109      	bne.n	801972a <udp_bind+0x72>
    port = udp_new_port();
 8019716:	f7ff fc69 	bl	8018fec <udp_new_port>
 801971a:	4603      	mov	r3, r0
 801971c:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801971e:	88fb      	ldrh	r3, [r7, #6]
 8019720:	2b00      	cmp	r3, #0
 8019722:	d12c      	bne.n	801977e <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8019724:	f06f 0307 	mvn.w	r3, #7
 8019728:	e040      	b.n	80197ac <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801972a:	4b26      	ldr	r3, [pc, #152]	; (80197c4 <udp_bind+0x10c>)
 801972c:	681b      	ldr	r3, [r3, #0]
 801972e:	617b      	str	r3, [r7, #20]
 8019730:	e022      	b.n	8019778 <udp_bind+0xc0>
      if (pcb != ipcb) {
 8019732:	68fa      	ldr	r2, [r7, #12]
 8019734:	697b      	ldr	r3, [r7, #20]
 8019736:	429a      	cmp	r2, r3
 8019738:	d01b      	beq.n	8019772 <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 801973a:	697b      	ldr	r3, [r7, #20]
 801973c:	8a5b      	ldrh	r3, [r3, #18]
 801973e:	88fa      	ldrh	r2, [r7, #6]
 8019740:	429a      	cmp	r2, r3
 8019742:	d116      	bne.n	8019772 <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019744:	697b      	ldr	r3, [r7, #20]
 8019746:	681a      	ldr	r2, [r3, #0]
 8019748:	68bb      	ldr	r3, [r7, #8]
 801974a:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 801974c:	429a      	cmp	r2, r3
 801974e:	d00d      	beq.n	801976c <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019750:	68bb      	ldr	r3, [r7, #8]
 8019752:	2b00      	cmp	r3, #0
 8019754:	d00a      	beq.n	801976c <udp_bind+0xb4>
 8019756:	68bb      	ldr	r3, [r7, #8]
 8019758:	681b      	ldr	r3, [r3, #0]
 801975a:	2b00      	cmp	r3, #0
 801975c:	d006      	beq.n	801976c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801975e:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8019760:	2b00      	cmp	r3, #0
 8019762:	d003      	beq.n	801976c <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8019764:	697b      	ldr	r3, [r7, #20]
 8019766:	681b      	ldr	r3, [r3, #0]
 8019768:	2b00      	cmp	r3, #0
 801976a:	d102      	bne.n	8019772 <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 801976c:	f06f 0307 	mvn.w	r3, #7
 8019770:	e01c      	b.n	80197ac <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8019772:	697b      	ldr	r3, [r7, #20]
 8019774:	68db      	ldr	r3, [r3, #12]
 8019776:	617b      	str	r3, [r7, #20]
 8019778:	697b      	ldr	r3, [r7, #20]
 801977a:	2b00      	cmp	r3, #0
 801977c:	d1d9      	bne.n	8019732 <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801977e:	68bb      	ldr	r3, [r7, #8]
 8019780:	2b00      	cmp	r3, #0
 8019782:	d002      	beq.n	801978a <udp_bind+0xd2>
 8019784:	68bb      	ldr	r3, [r7, #8]
 8019786:	681b      	ldr	r3, [r3, #0]
 8019788:	e000      	b.n	801978c <udp_bind+0xd4>
 801978a:	2300      	movs	r3, #0
 801978c:	68fa      	ldr	r2, [r7, #12]
 801978e:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 8019790:	68fb      	ldr	r3, [r7, #12]
 8019792:	88fa      	ldrh	r2, [r7, #6]
 8019794:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 8019796:	7cfb      	ldrb	r3, [r7, #19]
 8019798:	2b00      	cmp	r3, #0
 801979a:	d106      	bne.n	80197aa <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 801979c:	4b09      	ldr	r3, [pc, #36]	; (80197c4 <udp_bind+0x10c>)
 801979e:	681a      	ldr	r2, [r3, #0]
 80197a0:	68fb      	ldr	r3, [r7, #12]
 80197a2:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80197a4:	4a07      	ldr	r2, [pc, #28]	; (80197c4 <udp_bind+0x10c>)
 80197a6:	68fb      	ldr	r3, [r7, #12]
 80197a8:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80197aa:	2300      	movs	r3, #0
}
 80197ac:	4618      	mov	r0, r3
 80197ae:	3718      	adds	r7, #24
 80197b0:	46bd      	mov	sp, r7
 80197b2:	bd80      	pop	{r7, pc}
 80197b4:	0802107c 	.word	0x0802107c
 80197b8:	080204ec 	.word	0x080204ec
 80197bc:	080207b4 	.word	0x080207b4
 80197c0:	08020540 	.word	0x08020540
 80197c4:	200240a8 	.word	0x200240a8

080197c8 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80197c8:	b580      	push	{r7, lr}
 80197ca:	b084      	sub	sp, #16
 80197cc:	af00      	add	r7, sp, #0
 80197ce:	60f8      	str	r0, [r7, #12]
 80197d0:	60b9      	str	r1, [r7, #8]
 80197d2:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80197d4:	68fb      	ldr	r3, [r7, #12]
 80197d6:	2b00      	cmp	r3, #0
 80197d8:	d107      	bne.n	80197ea <udp_recv+0x22>
 80197da:	4b08      	ldr	r3, [pc, #32]	; (80197fc <udp_recv+0x34>)
 80197dc:	f240 428a 	movw	r2, #1162	; 0x48a
 80197e0:	4907      	ldr	r1, [pc, #28]	; (8019800 <udp_recv+0x38>)
 80197e2:	4808      	ldr	r0, [pc, #32]	; (8019804 <udp_recv+0x3c>)
 80197e4:	f003 fe62 	bl	801d4ac <iprintf>
 80197e8:	e005      	b.n	80197f6 <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80197ea:	68fb      	ldr	r3, [r7, #12]
 80197ec:	68ba      	ldr	r2, [r7, #8]
 80197ee:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80197f0:	68fb      	ldr	r3, [r7, #12]
 80197f2:	687a      	ldr	r2, [r7, #4]
 80197f4:	61da      	str	r2, [r3, #28]
}
 80197f6:	3710      	adds	r7, #16
 80197f8:	46bd      	mov	sp, r7
 80197fa:	bd80      	pop	{r7, pc}
 80197fc:	080204ec 	.word	0x080204ec
 8019800:	08020820 	.word	0x08020820
 8019804:	08020540 	.word	0x08020540

08019808 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 8019808:	b580      	push	{r7, lr}
 801980a:	b084      	sub	sp, #16
 801980c:	af00      	add	r7, sp, #0
 801980e:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 8019810:	687b      	ldr	r3, [r7, #4]
 8019812:	2b00      	cmp	r3, #0
 8019814:	d107      	bne.n	8019826 <udp_remove+0x1e>
 8019816:	4b19      	ldr	r3, [pc, #100]	; (801987c <udp_remove+0x74>)
 8019818:	f240 42a1 	movw	r2, #1185	; 0x4a1
 801981c:	4918      	ldr	r1, [pc, #96]	; (8019880 <udp_remove+0x78>)
 801981e:	4819      	ldr	r0, [pc, #100]	; (8019884 <udp_remove+0x7c>)
 8019820:	f003 fe44 	bl	801d4ac <iprintf>
 8019824:	e026      	b.n	8019874 <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 8019826:	4b18      	ldr	r3, [pc, #96]	; (8019888 <udp_remove+0x80>)
 8019828:	681b      	ldr	r3, [r3, #0]
 801982a:	687a      	ldr	r2, [r7, #4]
 801982c:	429a      	cmp	r2, r3
 801982e:	d105      	bne.n	801983c <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8019830:	4b15      	ldr	r3, [pc, #84]	; (8019888 <udp_remove+0x80>)
 8019832:	681b      	ldr	r3, [r3, #0]
 8019834:	68db      	ldr	r3, [r3, #12]
 8019836:	4a14      	ldr	r2, [pc, #80]	; (8019888 <udp_remove+0x80>)
 8019838:	6013      	str	r3, [r2, #0]
 801983a:	e017      	b.n	801986c <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 801983c:	4b12      	ldr	r3, [pc, #72]	; (8019888 <udp_remove+0x80>)
 801983e:	681b      	ldr	r3, [r3, #0]
 8019840:	60fb      	str	r3, [r7, #12]
 8019842:	e010      	b.n	8019866 <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 8019844:	68fb      	ldr	r3, [r7, #12]
 8019846:	68db      	ldr	r3, [r3, #12]
 8019848:	2b00      	cmp	r3, #0
 801984a:	d009      	beq.n	8019860 <udp_remove+0x58>
 801984c:	68fb      	ldr	r3, [r7, #12]
 801984e:	68db      	ldr	r3, [r3, #12]
 8019850:	687a      	ldr	r2, [r7, #4]
 8019852:	429a      	cmp	r2, r3
 8019854:	d104      	bne.n	8019860 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 8019856:	687b      	ldr	r3, [r7, #4]
 8019858:	68da      	ldr	r2, [r3, #12]
 801985a:	68fb      	ldr	r3, [r7, #12]
 801985c:	60da      	str	r2, [r3, #12]
        break;
 801985e:	e005      	b.n	801986c <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8019860:	68fb      	ldr	r3, [r7, #12]
 8019862:	68db      	ldr	r3, [r3, #12]
 8019864:	60fb      	str	r3, [r7, #12]
 8019866:	68fb      	ldr	r3, [r7, #12]
 8019868:	2b00      	cmp	r3, #0
 801986a:	d1eb      	bne.n	8019844 <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 801986c:	6879      	ldr	r1, [r7, #4]
 801986e:	2000      	movs	r0, #0
 8019870:	f7f8 ff86 	bl	8012780 <memp_free>
}
 8019874:	3710      	adds	r7, #16
 8019876:	46bd      	mov	sp, r7
 8019878:	bd80      	pop	{r7, pc}
 801987a:	bf00      	nop
 801987c:	080204ec 	.word	0x080204ec
 8019880:	08020838 	.word	0x08020838
 8019884:	08020540 	.word	0x08020540
 8019888:	200240a8 	.word	0x200240a8

0801988c <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 801988c:	b580      	push	{r7, lr}
 801988e:	b082      	sub	sp, #8
 8019890:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 8019892:	2000      	movs	r0, #0
 8019894:	f7f8 fefe 	bl	8012694 <memp_malloc>
 8019898:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 801989a:	687b      	ldr	r3, [r7, #4]
 801989c:	2b00      	cmp	r3, #0
 801989e:	d007      	beq.n	80198b0 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 80198a0:	2220      	movs	r2, #32
 80198a2:	2100      	movs	r1, #0
 80198a4:	6878      	ldr	r0, [r7, #4]
 80198a6:	f003 fe66 	bl	801d576 <memset>
    pcb->ttl = UDP_TTL;
 80198aa:	687b      	ldr	r3, [r7, #4]
 80198ac:	22ff      	movs	r2, #255	; 0xff
 80198ae:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 80198b0:	687b      	ldr	r3, [r7, #4]
}
 80198b2:	4618      	mov	r0, r3
 80198b4:	3708      	adds	r7, #8
 80198b6:	46bd      	mov	sp, r7
 80198b8:	bd80      	pop	{r7, pc}
	...

080198bc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80198bc:	b480      	push	{r7}
 80198be:	b085      	sub	sp, #20
 80198c0:	af00      	add	r7, sp, #0
 80198c2:	6078      	str	r0, [r7, #4]
 80198c4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80198c6:	687b      	ldr	r3, [r7, #4]
 80198c8:	2b00      	cmp	r3, #0
 80198ca:	d01e      	beq.n	801990a <udp_netif_ip_addr_changed+0x4e>
 80198cc:	687b      	ldr	r3, [r7, #4]
 80198ce:	681b      	ldr	r3, [r3, #0]
 80198d0:	2b00      	cmp	r3, #0
 80198d2:	d01a      	beq.n	801990a <udp_netif_ip_addr_changed+0x4e>
 80198d4:	683b      	ldr	r3, [r7, #0]
 80198d6:	2b00      	cmp	r3, #0
 80198d8:	d017      	beq.n	801990a <udp_netif_ip_addr_changed+0x4e>
 80198da:	683b      	ldr	r3, [r7, #0]
 80198dc:	681b      	ldr	r3, [r3, #0]
 80198de:	2b00      	cmp	r3, #0
 80198e0:	d013      	beq.n	801990a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80198e2:	4b0d      	ldr	r3, [pc, #52]	; (8019918 <udp_netif_ip_addr_changed+0x5c>)
 80198e4:	681b      	ldr	r3, [r3, #0]
 80198e6:	60fb      	str	r3, [r7, #12]
 80198e8:	e00c      	b.n	8019904 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80198ea:	68fb      	ldr	r3, [r7, #12]
 80198ec:	681a      	ldr	r2, [r3, #0]
 80198ee:	687b      	ldr	r3, [r7, #4]
 80198f0:	681b      	ldr	r3, [r3, #0]
 80198f2:	429a      	cmp	r2, r3
 80198f4:	d103      	bne.n	80198fe <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80198f6:	683b      	ldr	r3, [r7, #0]
 80198f8:	681a      	ldr	r2, [r3, #0]
 80198fa:	68fb      	ldr	r3, [r7, #12]
 80198fc:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80198fe:	68fb      	ldr	r3, [r7, #12]
 8019900:	68db      	ldr	r3, [r3, #12]
 8019902:	60fb      	str	r3, [r7, #12]
 8019904:	68fb      	ldr	r3, [r7, #12]
 8019906:	2b00      	cmp	r3, #0
 8019908:	d1ef      	bne.n	80198ea <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801990a:	bf00      	nop
 801990c:	3714      	adds	r7, #20
 801990e:	46bd      	mov	sp, r7
 8019910:	f85d 7b04 	ldr.w	r7, [sp], #4
 8019914:	4770      	bx	lr
 8019916:	bf00      	nop
 8019918:	200240a8 	.word	0x200240a8

0801991c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801991c:	b580      	push	{r7, lr}
 801991e:	b082      	sub	sp, #8
 8019920:	af00      	add	r7, sp, #0
 8019922:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8019924:	4915      	ldr	r1, [pc, #84]	; (801997c <etharp_free_entry+0x60>)
 8019926:	687a      	ldr	r2, [r7, #4]
 8019928:	4613      	mov	r3, r2
 801992a:	005b      	lsls	r3, r3, #1
 801992c:	4413      	add	r3, r2
 801992e:	00db      	lsls	r3, r3, #3
 8019930:	440b      	add	r3, r1
 8019932:	681b      	ldr	r3, [r3, #0]
 8019934:	2b00      	cmp	r3, #0
 8019936:	d013      	beq.n	8019960 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8019938:	4910      	ldr	r1, [pc, #64]	; (801997c <etharp_free_entry+0x60>)
 801993a:	687a      	ldr	r2, [r7, #4]
 801993c:	4613      	mov	r3, r2
 801993e:	005b      	lsls	r3, r3, #1
 8019940:	4413      	add	r3, r2
 8019942:	00db      	lsls	r3, r3, #3
 8019944:	440b      	add	r3, r1
 8019946:	681b      	ldr	r3, [r3, #0]
 8019948:	4618      	mov	r0, r3
 801994a:	f7f9 fdbd 	bl	80134c8 <pbuf_free>
    arp_table[i].q = NULL;
 801994e:	490b      	ldr	r1, [pc, #44]	; (801997c <etharp_free_entry+0x60>)
 8019950:	687a      	ldr	r2, [r7, #4]
 8019952:	4613      	mov	r3, r2
 8019954:	005b      	lsls	r3, r3, #1
 8019956:	4413      	add	r3, r2
 8019958:	00db      	lsls	r3, r3, #3
 801995a:	440b      	add	r3, r1
 801995c:	2200      	movs	r2, #0
 801995e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8019960:	4906      	ldr	r1, [pc, #24]	; (801997c <etharp_free_entry+0x60>)
 8019962:	687a      	ldr	r2, [r7, #4]
 8019964:	4613      	mov	r3, r2
 8019966:	005b      	lsls	r3, r3, #1
 8019968:	4413      	add	r3, r2
 801996a:	00db      	lsls	r3, r3, #3
 801996c:	440b      	add	r3, r1
 801996e:	3314      	adds	r3, #20
 8019970:	2200      	movs	r2, #0
 8019972:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8019974:	bf00      	nop
 8019976:	3708      	adds	r7, #8
 8019978:	46bd      	mov	sp, r7
 801997a:	bd80      	pop	{r7, pc}
 801997c:	200240ac 	.word	0x200240ac

08019980 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8019980:	b580      	push	{r7, lr}
 8019982:	b082      	sub	sp, #8
 8019984:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019986:	2300      	movs	r3, #0
 8019988:	607b      	str	r3, [r7, #4]
 801998a:	e096      	b.n	8019aba <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801998c:	494f      	ldr	r1, [pc, #316]	; (8019acc <etharp_tmr+0x14c>)
 801998e:	687a      	ldr	r2, [r7, #4]
 8019990:	4613      	mov	r3, r2
 8019992:	005b      	lsls	r3, r3, #1
 8019994:	4413      	add	r3, r2
 8019996:	00db      	lsls	r3, r3, #3
 8019998:	440b      	add	r3, r1
 801999a:	3314      	adds	r3, #20
 801999c:	781b      	ldrb	r3, [r3, #0]
 801999e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80199a0:	78fb      	ldrb	r3, [r7, #3]
 80199a2:	2b00      	cmp	r3, #0
 80199a4:	f000 8086 	beq.w	8019ab4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80199a8:	4948      	ldr	r1, [pc, #288]	; (8019acc <etharp_tmr+0x14c>)
 80199aa:	687a      	ldr	r2, [r7, #4]
 80199ac:	4613      	mov	r3, r2
 80199ae:	005b      	lsls	r3, r3, #1
 80199b0:	4413      	add	r3, r2
 80199b2:	00db      	lsls	r3, r3, #3
 80199b4:	440b      	add	r3, r1
 80199b6:	3312      	adds	r3, #18
 80199b8:	881b      	ldrh	r3, [r3, #0]
 80199ba:	3301      	adds	r3, #1
 80199bc:	b298      	uxth	r0, r3
 80199be:	4943      	ldr	r1, [pc, #268]	; (8019acc <etharp_tmr+0x14c>)
 80199c0:	687a      	ldr	r2, [r7, #4]
 80199c2:	4613      	mov	r3, r2
 80199c4:	005b      	lsls	r3, r3, #1
 80199c6:	4413      	add	r3, r2
 80199c8:	00db      	lsls	r3, r3, #3
 80199ca:	440b      	add	r3, r1
 80199cc:	3312      	adds	r3, #18
 80199ce:	4602      	mov	r2, r0
 80199d0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80199d2:	493e      	ldr	r1, [pc, #248]	; (8019acc <etharp_tmr+0x14c>)
 80199d4:	687a      	ldr	r2, [r7, #4]
 80199d6:	4613      	mov	r3, r2
 80199d8:	005b      	lsls	r3, r3, #1
 80199da:	4413      	add	r3, r2
 80199dc:	00db      	lsls	r3, r3, #3
 80199de:	440b      	add	r3, r1
 80199e0:	3312      	adds	r3, #18
 80199e2:	881b      	ldrh	r3, [r3, #0]
 80199e4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80199e8:	d215      	bcs.n	8019a16 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80199ea:	4938      	ldr	r1, [pc, #224]	; (8019acc <etharp_tmr+0x14c>)
 80199ec:	687a      	ldr	r2, [r7, #4]
 80199ee:	4613      	mov	r3, r2
 80199f0:	005b      	lsls	r3, r3, #1
 80199f2:	4413      	add	r3, r2
 80199f4:	00db      	lsls	r3, r3, #3
 80199f6:	440b      	add	r3, r1
 80199f8:	3314      	adds	r3, #20
 80199fa:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80199fc:	2b01      	cmp	r3, #1
 80199fe:	d10e      	bne.n	8019a1e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8019a00:	4932      	ldr	r1, [pc, #200]	; (8019acc <etharp_tmr+0x14c>)
 8019a02:	687a      	ldr	r2, [r7, #4]
 8019a04:	4613      	mov	r3, r2
 8019a06:	005b      	lsls	r3, r3, #1
 8019a08:	4413      	add	r3, r2
 8019a0a:	00db      	lsls	r3, r3, #3
 8019a0c:	440b      	add	r3, r1
 8019a0e:	3312      	adds	r3, #18
 8019a10:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8019a12:	2b04      	cmp	r3, #4
 8019a14:	d903      	bls.n	8019a1e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8019a16:	6878      	ldr	r0, [r7, #4]
 8019a18:	f7ff ff80 	bl	801991c <etharp_free_entry>
 8019a1c:	e04a      	b.n	8019ab4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 8019a1e:	492b      	ldr	r1, [pc, #172]	; (8019acc <etharp_tmr+0x14c>)
 8019a20:	687a      	ldr	r2, [r7, #4]
 8019a22:	4613      	mov	r3, r2
 8019a24:	005b      	lsls	r3, r3, #1
 8019a26:	4413      	add	r3, r2
 8019a28:	00db      	lsls	r3, r3, #3
 8019a2a:	440b      	add	r3, r1
 8019a2c:	3314      	adds	r3, #20
 8019a2e:	781b      	ldrb	r3, [r3, #0]
 8019a30:	2b03      	cmp	r3, #3
 8019a32:	d10a      	bne.n	8019a4a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8019a34:	4925      	ldr	r1, [pc, #148]	; (8019acc <etharp_tmr+0x14c>)
 8019a36:	687a      	ldr	r2, [r7, #4]
 8019a38:	4613      	mov	r3, r2
 8019a3a:	005b      	lsls	r3, r3, #1
 8019a3c:	4413      	add	r3, r2
 8019a3e:	00db      	lsls	r3, r3, #3
 8019a40:	440b      	add	r3, r1
 8019a42:	3314      	adds	r3, #20
 8019a44:	2204      	movs	r2, #4
 8019a46:	701a      	strb	r2, [r3, #0]
 8019a48:	e034      	b.n	8019ab4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 8019a4a:	4920      	ldr	r1, [pc, #128]	; (8019acc <etharp_tmr+0x14c>)
 8019a4c:	687a      	ldr	r2, [r7, #4]
 8019a4e:	4613      	mov	r3, r2
 8019a50:	005b      	lsls	r3, r3, #1
 8019a52:	4413      	add	r3, r2
 8019a54:	00db      	lsls	r3, r3, #3
 8019a56:	440b      	add	r3, r1
 8019a58:	3314      	adds	r3, #20
 8019a5a:	781b      	ldrb	r3, [r3, #0]
 8019a5c:	2b04      	cmp	r3, #4
 8019a5e:	d10a      	bne.n	8019a76 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8019a60:	491a      	ldr	r1, [pc, #104]	; (8019acc <etharp_tmr+0x14c>)
 8019a62:	687a      	ldr	r2, [r7, #4]
 8019a64:	4613      	mov	r3, r2
 8019a66:	005b      	lsls	r3, r3, #1
 8019a68:	4413      	add	r3, r2
 8019a6a:	00db      	lsls	r3, r3, #3
 8019a6c:	440b      	add	r3, r1
 8019a6e:	3314      	adds	r3, #20
 8019a70:	2202      	movs	r2, #2
 8019a72:	701a      	strb	r2, [r3, #0]
 8019a74:	e01e      	b.n	8019ab4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8019a76:	4915      	ldr	r1, [pc, #84]	; (8019acc <etharp_tmr+0x14c>)
 8019a78:	687a      	ldr	r2, [r7, #4]
 8019a7a:	4613      	mov	r3, r2
 8019a7c:	005b      	lsls	r3, r3, #1
 8019a7e:	4413      	add	r3, r2
 8019a80:	00db      	lsls	r3, r3, #3
 8019a82:	440b      	add	r3, r1
 8019a84:	3314      	adds	r3, #20
 8019a86:	781b      	ldrb	r3, [r3, #0]
 8019a88:	2b01      	cmp	r3, #1
 8019a8a:	d113      	bne.n	8019ab4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 8019a8c:	490f      	ldr	r1, [pc, #60]	; (8019acc <etharp_tmr+0x14c>)
 8019a8e:	687a      	ldr	r2, [r7, #4]
 8019a90:	4613      	mov	r3, r2
 8019a92:	005b      	lsls	r3, r3, #1
 8019a94:	4413      	add	r3, r2
 8019a96:	00db      	lsls	r3, r3, #3
 8019a98:	440b      	add	r3, r1
 8019a9a:	3308      	adds	r3, #8
 8019a9c:	6818      	ldr	r0, [r3, #0]
 8019a9e:	687a      	ldr	r2, [r7, #4]
 8019aa0:	4613      	mov	r3, r2
 8019aa2:	005b      	lsls	r3, r3, #1
 8019aa4:	4413      	add	r3, r2
 8019aa6:	00db      	lsls	r3, r3, #3
 8019aa8:	4a08      	ldr	r2, [pc, #32]	; (8019acc <etharp_tmr+0x14c>)
 8019aaa:	4413      	add	r3, r2
 8019aac:	3304      	adds	r3, #4
 8019aae:	4619      	mov	r1, r3
 8019ab0:	f000 fe6e 	bl	801a790 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019ab4:	687b      	ldr	r3, [r7, #4]
 8019ab6:	3301      	adds	r3, #1
 8019ab8:	607b      	str	r3, [r7, #4]
 8019aba:	687b      	ldr	r3, [r7, #4]
 8019abc:	2b09      	cmp	r3, #9
 8019abe:	f77f af65 	ble.w	801998c <etharp_tmr+0xc>
      }
    }
  }
}
 8019ac2:	bf00      	nop
 8019ac4:	bf00      	nop
 8019ac6:	3708      	adds	r7, #8
 8019ac8:	46bd      	mov	sp, r7
 8019aca:	bd80      	pop	{r7, pc}
 8019acc:	200240ac 	.word	0x200240ac

08019ad0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 8019ad0:	b580      	push	{r7, lr}
 8019ad2:	b08a      	sub	sp, #40	; 0x28
 8019ad4:	af00      	add	r7, sp, #0
 8019ad6:	60f8      	str	r0, [r7, #12]
 8019ad8:	460b      	mov	r3, r1
 8019ada:	607a      	str	r2, [r7, #4]
 8019adc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 8019ade:	230a      	movs	r3, #10
 8019ae0:	84fb      	strh	r3, [r7, #38]	; 0x26
 8019ae2:	230a      	movs	r3, #10
 8019ae4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 8019ae6:	230a      	movs	r3, #10
 8019ae8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 8019aea:	2300      	movs	r3, #0
 8019aec:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 8019aee:	230a      	movs	r3, #10
 8019af0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 8019af2:	2300      	movs	r3, #0
 8019af4:	83bb      	strh	r3, [r7, #28]
 8019af6:	2300      	movs	r3, #0
 8019af8:	837b      	strh	r3, [r7, #26]
 8019afa:	2300      	movs	r3, #0
 8019afc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019afe:	2300      	movs	r3, #0
 8019b00:	843b      	strh	r3, [r7, #32]
 8019b02:	e0ae      	b.n	8019c62 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8019b04:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019b08:	49a6      	ldr	r1, [pc, #664]	; (8019da4 <etharp_find_entry+0x2d4>)
 8019b0a:	4613      	mov	r3, r2
 8019b0c:	005b      	lsls	r3, r3, #1
 8019b0e:	4413      	add	r3, r2
 8019b10:	00db      	lsls	r3, r3, #3
 8019b12:	440b      	add	r3, r1
 8019b14:	3314      	adds	r3, #20
 8019b16:	781b      	ldrb	r3, [r3, #0]
 8019b18:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 8019b1a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8019b1e:	2b0a      	cmp	r3, #10
 8019b20:	d105      	bne.n	8019b2e <etharp_find_entry+0x5e>
 8019b22:	7dfb      	ldrb	r3, [r7, #23]
 8019b24:	2b00      	cmp	r3, #0
 8019b26:	d102      	bne.n	8019b2e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8019b28:	8c3b      	ldrh	r3, [r7, #32]
 8019b2a:	847b      	strh	r3, [r7, #34]	; 0x22
 8019b2c:	e095      	b.n	8019c5a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 8019b2e:	7dfb      	ldrb	r3, [r7, #23]
 8019b30:	2b00      	cmp	r3, #0
 8019b32:	f000 8092 	beq.w	8019c5a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8019b36:	7dfb      	ldrb	r3, [r7, #23]
 8019b38:	2b01      	cmp	r3, #1
 8019b3a:	d009      	beq.n	8019b50 <etharp_find_entry+0x80>
 8019b3c:	7dfb      	ldrb	r3, [r7, #23]
 8019b3e:	2b01      	cmp	r3, #1
 8019b40:	d806      	bhi.n	8019b50 <etharp_find_entry+0x80>
 8019b42:	4b99      	ldr	r3, [pc, #612]	; (8019da8 <etharp_find_entry+0x2d8>)
 8019b44:	f240 1223 	movw	r2, #291	; 0x123
 8019b48:	4998      	ldr	r1, [pc, #608]	; (8019dac <etharp_find_entry+0x2dc>)
 8019b4a:	4899      	ldr	r0, [pc, #612]	; (8019db0 <etharp_find_entry+0x2e0>)
 8019b4c:	f003 fcae 	bl	801d4ac <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8019b50:	68fb      	ldr	r3, [r7, #12]
 8019b52:	2b00      	cmp	r3, #0
 8019b54:	d020      	beq.n	8019b98 <etharp_find_entry+0xc8>
 8019b56:	68fb      	ldr	r3, [r7, #12]
 8019b58:	6819      	ldr	r1, [r3, #0]
 8019b5a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019b5e:	4891      	ldr	r0, [pc, #580]	; (8019da4 <etharp_find_entry+0x2d4>)
 8019b60:	4613      	mov	r3, r2
 8019b62:	005b      	lsls	r3, r3, #1
 8019b64:	4413      	add	r3, r2
 8019b66:	00db      	lsls	r3, r3, #3
 8019b68:	4403      	add	r3, r0
 8019b6a:	3304      	adds	r3, #4
 8019b6c:	681b      	ldr	r3, [r3, #0]
 8019b6e:	4299      	cmp	r1, r3
 8019b70:	d112      	bne.n	8019b98 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8019b72:	687b      	ldr	r3, [r7, #4]
 8019b74:	2b00      	cmp	r3, #0
 8019b76:	d00c      	beq.n	8019b92 <etharp_find_entry+0xc2>
 8019b78:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019b7c:	4989      	ldr	r1, [pc, #548]	; (8019da4 <etharp_find_entry+0x2d4>)
 8019b7e:	4613      	mov	r3, r2
 8019b80:	005b      	lsls	r3, r3, #1
 8019b82:	4413      	add	r3, r2
 8019b84:	00db      	lsls	r3, r3, #3
 8019b86:	440b      	add	r3, r1
 8019b88:	3308      	adds	r3, #8
 8019b8a:	681b      	ldr	r3, [r3, #0]
 8019b8c:	687a      	ldr	r2, [r7, #4]
 8019b8e:	429a      	cmp	r2, r3
 8019b90:	d102      	bne.n	8019b98 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8019b92:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019b96:	e100      	b.n	8019d9a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8019b98:	7dfb      	ldrb	r3, [r7, #23]
 8019b9a:	2b01      	cmp	r3, #1
 8019b9c:	d140      	bne.n	8019c20 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 8019b9e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019ba2:	4980      	ldr	r1, [pc, #512]	; (8019da4 <etharp_find_entry+0x2d4>)
 8019ba4:	4613      	mov	r3, r2
 8019ba6:	005b      	lsls	r3, r3, #1
 8019ba8:	4413      	add	r3, r2
 8019baa:	00db      	lsls	r3, r3, #3
 8019bac:	440b      	add	r3, r1
 8019bae:	681b      	ldr	r3, [r3, #0]
 8019bb0:	2b00      	cmp	r3, #0
 8019bb2:	d01a      	beq.n	8019bea <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 8019bb4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019bb8:	497a      	ldr	r1, [pc, #488]	; (8019da4 <etharp_find_entry+0x2d4>)
 8019bba:	4613      	mov	r3, r2
 8019bbc:	005b      	lsls	r3, r3, #1
 8019bbe:	4413      	add	r3, r2
 8019bc0:	00db      	lsls	r3, r3, #3
 8019bc2:	440b      	add	r3, r1
 8019bc4:	3312      	adds	r3, #18
 8019bc6:	881b      	ldrh	r3, [r3, #0]
 8019bc8:	8bba      	ldrh	r2, [r7, #28]
 8019bca:	429a      	cmp	r2, r3
 8019bcc:	d845      	bhi.n	8019c5a <etharp_find_entry+0x18a>
            old_queue = i;
 8019bce:	8c3b      	ldrh	r3, [r7, #32]
 8019bd0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 8019bd2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019bd6:	4973      	ldr	r1, [pc, #460]	; (8019da4 <etharp_find_entry+0x2d4>)
 8019bd8:	4613      	mov	r3, r2
 8019bda:	005b      	lsls	r3, r3, #1
 8019bdc:	4413      	add	r3, r2
 8019bde:	00db      	lsls	r3, r3, #3
 8019be0:	440b      	add	r3, r1
 8019be2:	3312      	adds	r3, #18
 8019be4:	881b      	ldrh	r3, [r3, #0]
 8019be6:	83bb      	strh	r3, [r7, #28]
 8019be8:	e037      	b.n	8019c5a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 8019bea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019bee:	496d      	ldr	r1, [pc, #436]	; (8019da4 <etharp_find_entry+0x2d4>)
 8019bf0:	4613      	mov	r3, r2
 8019bf2:	005b      	lsls	r3, r3, #1
 8019bf4:	4413      	add	r3, r2
 8019bf6:	00db      	lsls	r3, r3, #3
 8019bf8:	440b      	add	r3, r1
 8019bfa:	3312      	adds	r3, #18
 8019bfc:	881b      	ldrh	r3, [r3, #0]
 8019bfe:	8b7a      	ldrh	r2, [r7, #26]
 8019c00:	429a      	cmp	r2, r3
 8019c02:	d82a      	bhi.n	8019c5a <etharp_find_entry+0x18a>
            old_pending = i;
 8019c04:	8c3b      	ldrh	r3, [r7, #32]
 8019c06:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8019c08:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019c0c:	4965      	ldr	r1, [pc, #404]	; (8019da4 <etharp_find_entry+0x2d4>)
 8019c0e:	4613      	mov	r3, r2
 8019c10:	005b      	lsls	r3, r3, #1
 8019c12:	4413      	add	r3, r2
 8019c14:	00db      	lsls	r3, r3, #3
 8019c16:	440b      	add	r3, r1
 8019c18:	3312      	adds	r3, #18
 8019c1a:	881b      	ldrh	r3, [r3, #0]
 8019c1c:	837b      	strh	r3, [r7, #26]
 8019c1e:	e01c      	b.n	8019c5a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8019c20:	7dfb      	ldrb	r3, [r7, #23]
 8019c22:	2b01      	cmp	r3, #1
 8019c24:	d919      	bls.n	8019c5a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8019c26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019c2a:	495e      	ldr	r1, [pc, #376]	; (8019da4 <etharp_find_entry+0x2d4>)
 8019c2c:	4613      	mov	r3, r2
 8019c2e:	005b      	lsls	r3, r3, #1
 8019c30:	4413      	add	r3, r2
 8019c32:	00db      	lsls	r3, r3, #3
 8019c34:	440b      	add	r3, r1
 8019c36:	3312      	adds	r3, #18
 8019c38:	881b      	ldrh	r3, [r3, #0]
 8019c3a:	8b3a      	ldrh	r2, [r7, #24]
 8019c3c:	429a      	cmp	r2, r3
 8019c3e:	d80c      	bhi.n	8019c5a <etharp_find_entry+0x18a>
            old_stable = i;
 8019c40:	8c3b      	ldrh	r3, [r7, #32]
 8019c42:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8019c44:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019c48:	4956      	ldr	r1, [pc, #344]	; (8019da4 <etharp_find_entry+0x2d4>)
 8019c4a:	4613      	mov	r3, r2
 8019c4c:	005b      	lsls	r3, r3, #1
 8019c4e:	4413      	add	r3, r2
 8019c50:	00db      	lsls	r3, r3, #3
 8019c52:	440b      	add	r3, r1
 8019c54:	3312      	adds	r3, #18
 8019c56:	881b      	ldrh	r3, [r3, #0]
 8019c58:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019c5a:	8c3b      	ldrh	r3, [r7, #32]
 8019c5c:	3301      	adds	r3, #1
 8019c5e:	b29b      	uxth	r3, r3
 8019c60:	843b      	strh	r3, [r7, #32]
 8019c62:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019c66:	2b09      	cmp	r3, #9
 8019c68:	f77f af4c 	ble.w	8019b04 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 8019c6c:	7afb      	ldrb	r3, [r7, #11]
 8019c6e:	f003 0302 	and.w	r3, r3, #2
 8019c72:	2b00      	cmp	r3, #0
 8019c74:	d108      	bne.n	8019c88 <etharp_find_entry+0x1b8>
 8019c76:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8019c7a:	2b0a      	cmp	r3, #10
 8019c7c:	d107      	bne.n	8019c8e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 8019c7e:	7afb      	ldrb	r3, [r7, #11]
 8019c80:	f003 0301 	and.w	r3, r3, #1
 8019c84:	2b00      	cmp	r3, #0
 8019c86:	d102      	bne.n	8019c8e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8019c88:	f04f 33ff 	mov.w	r3, #4294967295
 8019c8c:	e085      	b.n	8019d9a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 8019c8e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8019c92:	2b09      	cmp	r3, #9
 8019c94:	dc02      	bgt.n	8019c9c <etharp_find_entry+0x1cc>
    i = empty;
 8019c96:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8019c98:	843b      	strh	r3, [r7, #32]
 8019c9a:	e039      	b.n	8019d10 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 8019c9c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 8019ca0:	2b09      	cmp	r3, #9
 8019ca2:	dc14      	bgt.n	8019cce <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 8019ca4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8019ca6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 8019ca8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019cac:	493d      	ldr	r1, [pc, #244]	; (8019da4 <etharp_find_entry+0x2d4>)
 8019cae:	4613      	mov	r3, r2
 8019cb0:	005b      	lsls	r3, r3, #1
 8019cb2:	4413      	add	r3, r2
 8019cb4:	00db      	lsls	r3, r3, #3
 8019cb6:	440b      	add	r3, r1
 8019cb8:	681b      	ldr	r3, [r3, #0]
 8019cba:	2b00      	cmp	r3, #0
 8019cbc:	d018      	beq.n	8019cf0 <etharp_find_entry+0x220>
 8019cbe:	4b3a      	ldr	r3, [pc, #232]	; (8019da8 <etharp_find_entry+0x2d8>)
 8019cc0:	f240 126d 	movw	r2, #365	; 0x16d
 8019cc4:	493b      	ldr	r1, [pc, #236]	; (8019db4 <etharp_find_entry+0x2e4>)
 8019cc6:	483a      	ldr	r0, [pc, #232]	; (8019db0 <etharp_find_entry+0x2e0>)
 8019cc8:	f003 fbf0 	bl	801d4ac <iprintf>
 8019ccc:	e010      	b.n	8019cf0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 8019cce:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 8019cd2:	2b09      	cmp	r3, #9
 8019cd4:	dc02      	bgt.n	8019cdc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 8019cd6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 8019cd8:	843b      	strh	r3, [r7, #32]
 8019cda:	e009      	b.n	8019cf0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 8019cdc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 8019ce0:	2b09      	cmp	r3, #9
 8019ce2:	dc02      	bgt.n	8019cea <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 8019ce4:	8bfb      	ldrh	r3, [r7, #30]
 8019ce6:	843b      	strh	r3, [r7, #32]
 8019ce8:	e002      	b.n	8019cf0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 8019cea:	f04f 33ff 	mov.w	r3, #4294967295
 8019cee:	e054      	b.n	8019d9a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8019cf0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019cf4:	2b09      	cmp	r3, #9
 8019cf6:	dd06      	ble.n	8019d06 <etharp_find_entry+0x236>
 8019cf8:	4b2b      	ldr	r3, [pc, #172]	; (8019da8 <etharp_find_entry+0x2d8>)
 8019cfa:	f240 127f 	movw	r2, #383	; 0x17f
 8019cfe:	492e      	ldr	r1, [pc, #184]	; (8019db8 <etharp_find_entry+0x2e8>)
 8019d00:	482b      	ldr	r0, [pc, #172]	; (8019db0 <etharp_find_entry+0x2e0>)
 8019d02:	f003 fbd3 	bl	801d4ac <iprintf>
    etharp_free_entry(i);
 8019d06:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019d0a:	4618      	mov	r0, r3
 8019d0c:	f7ff fe06 	bl	801991c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8019d10:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8019d14:	2b09      	cmp	r3, #9
 8019d16:	dd06      	ble.n	8019d26 <etharp_find_entry+0x256>
 8019d18:	4b23      	ldr	r3, [pc, #140]	; (8019da8 <etharp_find_entry+0x2d8>)
 8019d1a:	f240 1283 	movw	r2, #387	; 0x183
 8019d1e:	4926      	ldr	r1, [pc, #152]	; (8019db8 <etharp_find_entry+0x2e8>)
 8019d20:	4823      	ldr	r0, [pc, #140]	; (8019db0 <etharp_find_entry+0x2e0>)
 8019d22:	f003 fbc3 	bl	801d4ac <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8019d26:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019d2a:	491e      	ldr	r1, [pc, #120]	; (8019da4 <etharp_find_entry+0x2d4>)
 8019d2c:	4613      	mov	r3, r2
 8019d2e:	005b      	lsls	r3, r3, #1
 8019d30:	4413      	add	r3, r2
 8019d32:	00db      	lsls	r3, r3, #3
 8019d34:	440b      	add	r3, r1
 8019d36:	3314      	adds	r3, #20
 8019d38:	781b      	ldrb	r3, [r3, #0]
 8019d3a:	2b00      	cmp	r3, #0
 8019d3c:	d006      	beq.n	8019d4c <etharp_find_entry+0x27c>
 8019d3e:	4b1a      	ldr	r3, [pc, #104]	; (8019da8 <etharp_find_entry+0x2d8>)
 8019d40:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8019d44:	491d      	ldr	r1, [pc, #116]	; (8019dbc <etharp_find_entry+0x2ec>)
 8019d46:	481a      	ldr	r0, [pc, #104]	; (8019db0 <etharp_find_entry+0x2e0>)
 8019d48:	f003 fbb0 	bl	801d4ac <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 8019d4c:	68fb      	ldr	r3, [r7, #12]
 8019d4e:	2b00      	cmp	r3, #0
 8019d50:	d00b      	beq.n	8019d6a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8019d52:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019d56:	68fb      	ldr	r3, [r7, #12]
 8019d58:	6819      	ldr	r1, [r3, #0]
 8019d5a:	4812      	ldr	r0, [pc, #72]	; (8019da4 <etharp_find_entry+0x2d4>)
 8019d5c:	4613      	mov	r3, r2
 8019d5e:	005b      	lsls	r3, r3, #1
 8019d60:	4413      	add	r3, r2
 8019d62:	00db      	lsls	r3, r3, #3
 8019d64:	4403      	add	r3, r0
 8019d66:	3304      	adds	r3, #4
 8019d68:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 8019d6a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019d6e:	490d      	ldr	r1, [pc, #52]	; (8019da4 <etharp_find_entry+0x2d4>)
 8019d70:	4613      	mov	r3, r2
 8019d72:	005b      	lsls	r3, r3, #1
 8019d74:	4413      	add	r3, r2
 8019d76:	00db      	lsls	r3, r3, #3
 8019d78:	440b      	add	r3, r1
 8019d7a:	3312      	adds	r3, #18
 8019d7c:	2200      	movs	r2, #0
 8019d7e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8019d80:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8019d84:	4907      	ldr	r1, [pc, #28]	; (8019da4 <etharp_find_entry+0x2d4>)
 8019d86:	4613      	mov	r3, r2
 8019d88:	005b      	lsls	r3, r3, #1
 8019d8a:	4413      	add	r3, r2
 8019d8c:	00db      	lsls	r3, r3, #3
 8019d8e:	440b      	add	r3, r1
 8019d90:	3308      	adds	r3, #8
 8019d92:	687a      	ldr	r2, [r7, #4]
 8019d94:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8019d96:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 8019d9a:	4618      	mov	r0, r3
 8019d9c:	3728      	adds	r7, #40	; 0x28
 8019d9e:	46bd      	mov	sp, r7
 8019da0:	bd80      	pop	{r7, pc}
 8019da2:	bf00      	nop
 8019da4:	200240ac 	.word	0x200240ac
 8019da8:	08020850 	.word	0x08020850
 8019dac:	08020888 	.word	0x08020888
 8019db0:	080208c8 	.word	0x080208c8
 8019db4:	080208f0 	.word	0x080208f0
 8019db8:	08020908 	.word	0x08020908
 8019dbc:	0802091c 	.word	0x0802091c

08019dc0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 8019dc0:	b580      	push	{r7, lr}
 8019dc2:	b088      	sub	sp, #32
 8019dc4:	af02      	add	r7, sp, #8
 8019dc6:	60f8      	str	r0, [r7, #12]
 8019dc8:	60b9      	str	r1, [r7, #8]
 8019dca:	607a      	str	r2, [r7, #4]
 8019dcc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 8019dce:	68fb      	ldr	r3, [r7, #12]
 8019dd0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 8019dd4:	2b06      	cmp	r3, #6
 8019dd6:	d006      	beq.n	8019de6 <etharp_update_arp_entry+0x26>
 8019dd8:	4b48      	ldr	r3, [pc, #288]	; (8019efc <etharp_update_arp_entry+0x13c>)
 8019dda:	f240 12a9 	movw	r2, #425	; 0x1a9
 8019dde:	4948      	ldr	r1, [pc, #288]	; (8019f00 <etharp_update_arp_entry+0x140>)
 8019de0:	4848      	ldr	r0, [pc, #288]	; (8019f04 <etharp_update_arp_entry+0x144>)
 8019de2:	f003 fb63 	bl	801d4ac <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 8019de6:	68bb      	ldr	r3, [r7, #8]
 8019de8:	2b00      	cmp	r3, #0
 8019dea:	d012      	beq.n	8019e12 <etharp_update_arp_entry+0x52>
 8019dec:	68bb      	ldr	r3, [r7, #8]
 8019dee:	681b      	ldr	r3, [r3, #0]
 8019df0:	2b00      	cmp	r3, #0
 8019df2:	d00e      	beq.n	8019e12 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8019df4:	68bb      	ldr	r3, [r7, #8]
 8019df6:	681b      	ldr	r3, [r3, #0]
 8019df8:	68f9      	ldr	r1, [r7, #12]
 8019dfa:	4618      	mov	r0, r3
 8019dfc:	f001 f8fe 	bl	801affc <ip4_addr_isbroadcast_u32>
 8019e00:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8019e02:	2b00      	cmp	r3, #0
 8019e04:	d105      	bne.n	8019e12 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8019e06:	68bb      	ldr	r3, [r7, #8]
 8019e08:	681b      	ldr	r3, [r3, #0]
 8019e0a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 8019e0e:	2be0      	cmp	r3, #224	; 0xe0
 8019e10:	d102      	bne.n	8019e18 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8019e12:	f06f 030f 	mvn.w	r3, #15
 8019e16:	e06c      	b.n	8019ef2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8019e18:	78fb      	ldrb	r3, [r7, #3]
 8019e1a:	68fa      	ldr	r2, [r7, #12]
 8019e1c:	4619      	mov	r1, r3
 8019e1e:	68b8      	ldr	r0, [r7, #8]
 8019e20:	f7ff fe56 	bl	8019ad0 <etharp_find_entry>
 8019e24:	4603      	mov	r3, r0
 8019e26:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8019e28:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 8019e2c:	2b00      	cmp	r3, #0
 8019e2e:	da02      	bge.n	8019e36 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8019e30:	8afb      	ldrh	r3, [r7, #22]
 8019e32:	b25b      	sxtb	r3, r3
 8019e34:	e05d      	b.n	8019ef2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8019e36:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019e3a:	4933      	ldr	r1, [pc, #204]	; (8019f08 <etharp_update_arp_entry+0x148>)
 8019e3c:	4613      	mov	r3, r2
 8019e3e:	005b      	lsls	r3, r3, #1
 8019e40:	4413      	add	r3, r2
 8019e42:	00db      	lsls	r3, r3, #3
 8019e44:	440b      	add	r3, r1
 8019e46:	3314      	adds	r3, #20
 8019e48:	2202      	movs	r2, #2
 8019e4a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 8019e4c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019e50:	492d      	ldr	r1, [pc, #180]	; (8019f08 <etharp_update_arp_entry+0x148>)
 8019e52:	4613      	mov	r3, r2
 8019e54:	005b      	lsls	r3, r3, #1
 8019e56:	4413      	add	r3, r2
 8019e58:	00db      	lsls	r3, r3, #3
 8019e5a:	440b      	add	r3, r1
 8019e5c:	3308      	adds	r3, #8
 8019e5e:	68fa      	ldr	r2, [r7, #12]
 8019e60:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8019e62:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019e66:	4613      	mov	r3, r2
 8019e68:	005b      	lsls	r3, r3, #1
 8019e6a:	4413      	add	r3, r2
 8019e6c:	00db      	lsls	r3, r3, #3
 8019e6e:	3308      	adds	r3, #8
 8019e70:	4a25      	ldr	r2, [pc, #148]	; (8019f08 <etharp_update_arp_entry+0x148>)
 8019e72:	4413      	add	r3, r2
 8019e74:	3304      	adds	r3, #4
 8019e76:	2206      	movs	r2, #6
 8019e78:	6879      	ldr	r1, [r7, #4]
 8019e7a:	4618      	mov	r0, r3
 8019e7c:	f003 fc47 	bl	801d70e <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8019e80:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019e84:	4920      	ldr	r1, [pc, #128]	; (8019f08 <etharp_update_arp_entry+0x148>)
 8019e86:	4613      	mov	r3, r2
 8019e88:	005b      	lsls	r3, r3, #1
 8019e8a:	4413      	add	r3, r2
 8019e8c:	00db      	lsls	r3, r3, #3
 8019e8e:	440b      	add	r3, r1
 8019e90:	3312      	adds	r3, #18
 8019e92:	2200      	movs	r2, #0
 8019e94:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8019e96:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019e9a:	491b      	ldr	r1, [pc, #108]	; (8019f08 <etharp_update_arp_entry+0x148>)
 8019e9c:	4613      	mov	r3, r2
 8019e9e:	005b      	lsls	r3, r3, #1
 8019ea0:	4413      	add	r3, r2
 8019ea2:	00db      	lsls	r3, r3, #3
 8019ea4:	440b      	add	r3, r1
 8019ea6:	681b      	ldr	r3, [r3, #0]
 8019ea8:	2b00      	cmp	r3, #0
 8019eaa:	d021      	beq.n	8019ef0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 8019eac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019eb0:	4915      	ldr	r1, [pc, #84]	; (8019f08 <etharp_update_arp_entry+0x148>)
 8019eb2:	4613      	mov	r3, r2
 8019eb4:	005b      	lsls	r3, r3, #1
 8019eb6:	4413      	add	r3, r2
 8019eb8:	00db      	lsls	r3, r3, #3
 8019eba:	440b      	add	r3, r1
 8019ebc:	681b      	ldr	r3, [r3, #0]
 8019ebe:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 8019ec0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8019ec4:	4910      	ldr	r1, [pc, #64]	; (8019f08 <etharp_update_arp_entry+0x148>)
 8019ec6:	4613      	mov	r3, r2
 8019ec8:	005b      	lsls	r3, r3, #1
 8019eca:	4413      	add	r3, r2
 8019ecc:	00db      	lsls	r3, r3, #3
 8019ece:	440b      	add	r3, r1
 8019ed0:	2200      	movs	r2, #0
 8019ed2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 8019ed4:	68fb      	ldr	r3, [r7, #12]
 8019ed6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8019eda:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8019ede:	9300      	str	r3, [sp, #0]
 8019ee0:	687b      	ldr	r3, [r7, #4]
 8019ee2:	6939      	ldr	r1, [r7, #16]
 8019ee4:	68f8      	ldr	r0, [r7, #12]
 8019ee6:	f001 ff97 	bl	801be18 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 8019eea:	6938      	ldr	r0, [r7, #16]
 8019eec:	f7f9 faec 	bl	80134c8 <pbuf_free>
  }
  return ERR_OK;
 8019ef0:	2300      	movs	r3, #0
}
 8019ef2:	4618      	mov	r0, r3
 8019ef4:	3718      	adds	r7, #24
 8019ef6:	46bd      	mov	sp, r7
 8019ef8:	bd80      	pop	{r7, pc}
 8019efa:	bf00      	nop
 8019efc:	08020850 	.word	0x08020850
 8019f00:	08020948 	.word	0x08020948
 8019f04:	080208c8 	.word	0x080208c8
 8019f08:	200240ac 	.word	0x200240ac

08019f0c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 8019f0c:	b580      	push	{r7, lr}
 8019f0e:	b084      	sub	sp, #16
 8019f10:	af00      	add	r7, sp, #0
 8019f12:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019f14:	2300      	movs	r3, #0
 8019f16:	60fb      	str	r3, [r7, #12]
 8019f18:	e01e      	b.n	8019f58 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 8019f1a:	4913      	ldr	r1, [pc, #76]	; (8019f68 <etharp_cleanup_netif+0x5c>)
 8019f1c:	68fa      	ldr	r2, [r7, #12]
 8019f1e:	4613      	mov	r3, r2
 8019f20:	005b      	lsls	r3, r3, #1
 8019f22:	4413      	add	r3, r2
 8019f24:	00db      	lsls	r3, r3, #3
 8019f26:	440b      	add	r3, r1
 8019f28:	3314      	adds	r3, #20
 8019f2a:	781b      	ldrb	r3, [r3, #0]
 8019f2c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 8019f2e:	7afb      	ldrb	r3, [r7, #11]
 8019f30:	2b00      	cmp	r3, #0
 8019f32:	d00e      	beq.n	8019f52 <etharp_cleanup_netif+0x46>
 8019f34:	490c      	ldr	r1, [pc, #48]	; (8019f68 <etharp_cleanup_netif+0x5c>)
 8019f36:	68fa      	ldr	r2, [r7, #12]
 8019f38:	4613      	mov	r3, r2
 8019f3a:	005b      	lsls	r3, r3, #1
 8019f3c:	4413      	add	r3, r2
 8019f3e:	00db      	lsls	r3, r3, #3
 8019f40:	440b      	add	r3, r1
 8019f42:	3308      	adds	r3, #8
 8019f44:	681b      	ldr	r3, [r3, #0]
 8019f46:	687a      	ldr	r2, [r7, #4]
 8019f48:	429a      	cmp	r2, r3
 8019f4a:	d102      	bne.n	8019f52 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 8019f4c:	68f8      	ldr	r0, [r7, #12]
 8019f4e:	f7ff fce5 	bl	801991c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8019f52:	68fb      	ldr	r3, [r7, #12]
 8019f54:	3301      	adds	r3, #1
 8019f56:	60fb      	str	r3, [r7, #12]
 8019f58:	68fb      	ldr	r3, [r7, #12]
 8019f5a:	2b09      	cmp	r3, #9
 8019f5c:	dddd      	ble.n	8019f1a <etharp_cleanup_netif+0xe>
    }
  }
}
 8019f5e:	bf00      	nop
 8019f60:	bf00      	nop
 8019f62:	3710      	adds	r7, #16
 8019f64:	46bd      	mov	sp, r7
 8019f66:	bd80      	pop	{r7, pc}
 8019f68:	200240ac 	.word	0x200240ac

08019f6c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 8019f6c:	b5b0      	push	{r4, r5, r7, lr}
 8019f6e:	b08a      	sub	sp, #40	; 0x28
 8019f70:	af04      	add	r7, sp, #16
 8019f72:	6078      	str	r0, [r7, #4]
 8019f74:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8019f76:	683b      	ldr	r3, [r7, #0]
 8019f78:	2b00      	cmp	r3, #0
 8019f7a:	d107      	bne.n	8019f8c <etharp_input+0x20>
 8019f7c:	4b3d      	ldr	r3, [pc, #244]	; (801a074 <etharp_input+0x108>)
 8019f7e:	f240 228a 	movw	r2, #650	; 0x28a
 8019f82:	493d      	ldr	r1, [pc, #244]	; (801a078 <etharp_input+0x10c>)
 8019f84:	483d      	ldr	r0, [pc, #244]	; (801a07c <etharp_input+0x110>)
 8019f86:	f003 fa91 	bl	801d4ac <iprintf>
 8019f8a:	e06f      	b.n	801a06c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 8019f8c:	687b      	ldr	r3, [r7, #4]
 8019f8e:	685b      	ldr	r3, [r3, #4]
 8019f90:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8019f92:	693b      	ldr	r3, [r7, #16]
 8019f94:	881b      	ldrh	r3, [r3, #0]
 8019f96:	b29b      	uxth	r3, r3
 8019f98:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8019f9c:	d10c      	bne.n	8019fb8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8019f9e:	693b      	ldr	r3, [r7, #16]
 8019fa0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8019fa2:	2b06      	cmp	r3, #6
 8019fa4:	d108      	bne.n	8019fb8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8019fa6:	693b      	ldr	r3, [r7, #16]
 8019fa8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 8019faa:	2b04      	cmp	r3, #4
 8019fac:	d104      	bne.n	8019fb8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 8019fae:	693b      	ldr	r3, [r7, #16]
 8019fb0:	885b      	ldrh	r3, [r3, #2]
 8019fb2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 8019fb4:	2b08      	cmp	r3, #8
 8019fb6:	d003      	beq.n	8019fc0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 8019fb8:	6878      	ldr	r0, [r7, #4]
 8019fba:	f7f9 fa85 	bl	80134c8 <pbuf_free>
    return;
 8019fbe:	e055      	b.n	801a06c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 8019fc0:	693b      	ldr	r3, [r7, #16]
 8019fc2:	330e      	adds	r3, #14
 8019fc4:	681b      	ldr	r3, [r3, #0]
 8019fc6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 8019fc8:	693b      	ldr	r3, [r7, #16]
 8019fca:	3318      	adds	r3, #24
 8019fcc:	681b      	ldr	r3, [r3, #0]
 8019fce:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 8019fd0:	683b      	ldr	r3, [r7, #0]
 8019fd2:	3304      	adds	r3, #4
 8019fd4:	681b      	ldr	r3, [r3, #0]
 8019fd6:	2b00      	cmp	r3, #0
 8019fd8:	d102      	bne.n	8019fe0 <etharp_input+0x74>
    for_us = 0;
 8019fda:	2300      	movs	r3, #0
 8019fdc:	75fb      	strb	r3, [r7, #23]
 8019fde:	e009      	b.n	8019ff4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 8019fe0:	68ba      	ldr	r2, [r7, #8]
 8019fe2:	683b      	ldr	r3, [r7, #0]
 8019fe4:	3304      	adds	r3, #4
 8019fe6:	681b      	ldr	r3, [r3, #0]
 8019fe8:	429a      	cmp	r2, r3
 8019fea:	bf0c      	ite	eq
 8019fec:	2301      	moveq	r3, #1
 8019fee:	2300      	movne	r3, #0
 8019ff0:	b2db      	uxtb	r3, r3
 8019ff2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 8019ff4:	693b      	ldr	r3, [r7, #16]
 8019ff6:	f103 0208 	add.w	r2, r3, #8
 8019ffa:	7dfb      	ldrb	r3, [r7, #23]
 8019ffc:	2b00      	cmp	r3, #0
 8019ffe:	d001      	beq.n	801a004 <etharp_input+0x98>
 801a000:	2301      	movs	r3, #1
 801a002:	e000      	b.n	801a006 <etharp_input+0x9a>
 801a004:	2302      	movs	r3, #2
 801a006:	f107 010c 	add.w	r1, r7, #12
 801a00a:	6838      	ldr	r0, [r7, #0]
 801a00c:	f7ff fed8 	bl	8019dc0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 801a010:	693b      	ldr	r3, [r7, #16]
 801a012:	88db      	ldrh	r3, [r3, #6]
 801a014:	b29b      	uxth	r3, r3
 801a016:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801a01a:	d003      	beq.n	801a024 <etharp_input+0xb8>
 801a01c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801a020:	d01e      	beq.n	801a060 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 801a022:	e020      	b.n	801a066 <etharp_input+0xfa>
      if (for_us) {
 801a024:	7dfb      	ldrb	r3, [r7, #23]
 801a026:	2b00      	cmp	r3, #0
 801a028:	d01c      	beq.n	801a064 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 801a02a:	683b      	ldr	r3, [r7, #0]
 801a02c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801a030:	693b      	ldr	r3, [r7, #16]
 801a032:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 801a036:	683b      	ldr	r3, [r7, #0]
 801a038:	f103 0526 	add.w	r5, r3, #38	; 0x26
 801a03c:	683b      	ldr	r3, [r7, #0]
 801a03e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 801a040:	693a      	ldr	r2, [r7, #16]
 801a042:	3208      	adds	r2, #8
        etharp_raw(netif,
 801a044:	2102      	movs	r1, #2
 801a046:	9103      	str	r1, [sp, #12]
 801a048:	f107 010c 	add.w	r1, r7, #12
 801a04c:	9102      	str	r1, [sp, #8]
 801a04e:	9201      	str	r2, [sp, #4]
 801a050:	9300      	str	r3, [sp, #0]
 801a052:	462b      	mov	r3, r5
 801a054:	4622      	mov	r2, r4
 801a056:	4601      	mov	r1, r0
 801a058:	6838      	ldr	r0, [r7, #0]
 801a05a:	f000 faeb 	bl	801a634 <etharp_raw>
      break;
 801a05e:	e001      	b.n	801a064 <etharp_input+0xf8>
      break;
 801a060:	bf00      	nop
 801a062:	e000      	b.n	801a066 <etharp_input+0xfa>
      break;
 801a064:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 801a066:	6878      	ldr	r0, [r7, #4]
 801a068:	f7f9 fa2e 	bl	80134c8 <pbuf_free>
}
 801a06c:	3718      	adds	r7, #24
 801a06e:	46bd      	mov	sp, r7
 801a070:	bdb0      	pop	{r4, r5, r7, pc}
 801a072:	bf00      	nop
 801a074:	08020850 	.word	0x08020850
 801a078:	080209a0 	.word	0x080209a0
 801a07c:	080208c8 	.word	0x080208c8

0801a080 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 801a080:	b580      	push	{r7, lr}
 801a082:	b086      	sub	sp, #24
 801a084:	af02      	add	r7, sp, #8
 801a086:	60f8      	str	r0, [r7, #12]
 801a088:	60b9      	str	r1, [r7, #8]
 801a08a:	4613      	mov	r3, r2
 801a08c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 801a08e:	79fa      	ldrb	r2, [r7, #7]
 801a090:	4944      	ldr	r1, [pc, #272]	; (801a1a4 <etharp_output_to_arp_index+0x124>)
 801a092:	4613      	mov	r3, r2
 801a094:	005b      	lsls	r3, r3, #1
 801a096:	4413      	add	r3, r2
 801a098:	00db      	lsls	r3, r3, #3
 801a09a:	440b      	add	r3, r1
 801a09c:	3314      	adds	r3, #20
 801a09e:	781b      	ldrb	r3, [r3, #0]
 801a0a0:	2b01      	cmp	r3, #1
 801a0a2:	d806      	bhi.n	801a0b2 <etharp_output_to_arp_index+0x32>
 801a0a4:	4b40      	ldr	r3, [pc, #256]	; (801a1a8 <etharp_output_to_arp_index+0x128>)
 801a0a6:	f240 22ee 	movw	r2, #750	; 0x2ee
 801a0aa:	4940      	ldr	r1, [pc, #256]	; (801a1ac <etharp_output_to_arp_index+0x12c>)
 801a0ac:	4840      	ldr	r0, [pc, #256]	; (801a1b0 <etharp_output_to_arp_index+0x130>)
 801a0ae:	f003 f9fd 	bl	801d4ac <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 801a0b2:	79fa      	ldrb	r2, [r7, #7]
 801a0b4:	493b      	ldr	r1, [pc, #236]	; (801a1a4 <etharp_output_to_arp_index+0x124>)
 801a0b6:	4613      	mov	r3, r2
 801a0b8:	005b      	lsls	r3, r3, #1
 801a0ba:	4413      	add	r3, r2
 801a0bc:	00db      	lsls	r3, r3, #3
 801a0be:	440b      	add	r3, r1
 801a0c0:	3314      	adds	r3, #20
 801a0c2:	781b      	ldrb	r3, [r3, #0]
 801a0c4:	2b02      	cmp	r3, #2
 801a0c6:	d153      	bne.n	801a170 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 801a0c8:	79fa      	ldrb	r2, [r7, #7]
 801a0ca:	4936      	ldr	r1, [pc, #216]	; (801a1a4 <etharp_output_to_arp_index+0x124>)
 801a0cc:	4613      	mov	r3, r2
 801a0ce:	005b      	lsls	r3, r3, #1
 801a0d0:	4413      	add	r3, r2
 801a0d2:	00db      	lsls	r3, r3, #3
 801a0d4:	440b      	add	r3, r1
 801a0d6:	3312      	adds	r3, #18
 801a0d8:	881b      	ldrh	r3, [r3, #0]
 801a0da:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 801a0de:	d919      	bls.n	801a114 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 801a0e0:	79fa      	ldrb	r2, [r7, #7]
 801a0e2:	4613      	mov	r3, r2
 801a0e4:	005b      	lsls	r3, r3, #1
 801a0e6:	4413      	add	r3, r2
 801a0e8:	00db      	lsls	r3, r3, #3
 801a0ea:	4a2e      	ldr	r2, [pc, #184]	; (801a1a4 <etharp_output_to_arp_index+0x124>)
 801a0ec:	4413      	add	r3, r2
 801a0ee:	3304      	adds	r3, #4
 801a0f0:	4619      	mov	r1, r3
 801a0f2:	68f8      	ldr	r0, [r7, #12]
 801a0f4:	f000 fb4c 	bl	801a790 <etharp_request>
 801a0f8:	4603      	mov	r3, r0
 801a0fa:	2b00      	cmp	r3, #0
 801a0fc:	d138      	bne.n	801a170 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801a0fe:	79fa      	ldrb	r2, [r7, #7]
 801a100:	4928      	ldr	r1, [pc, #160]	; (801a1a4 <etharp_output_to_arp_index+0x124>)
 801a102:	4613      	mov	r3, r2
 801a104:	005b      	lsls	r3, r3, #1
 801a106:	4413      	add	r3, r2
 801a108:	00db      	lsls	r3, r3, #3
 801a10a:	440b      	add	r3, r1
 801a10c:	3314      	adds	r3, #20
 801a10e:	2203      	movs	r2, #3
 801a110:	701a      	strb	r2, [r3, #0]
 801a112:	e02d      	b.n	801a170 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 801a114:	79fa      	ldrb	r2, [r7, #7]
 801a116:	4923      	ldr	r1, [pc, #140]	; (801a1a4 <etharp_output_to_arp_index+0x124>)
 801a118:	4613      	mov	r3, r2
 801a11a:	005b      	lsls	r3, r3, #1
 801a11c:	4413      	add	r3, r2
 801a11e:	00db      	lsls	r3, r3, #3
 801a120:	440b      	add	r3, r1
 801a122:	3312      	adds	r3, #18
 801a124:	881b      	ldrh	r3, [r3, #0]
 801a126:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 801a12a:	d321      	bcc.n	801a170 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 801a12c:	79fa      	ldrb	r2, [r7, #7]
 801a12e:	4613      	mov	r3, r2
 801a130:	005b      	lsls	r3, r3, #1
 801a132:	4413      	add	r3, r2
 801a134:	00db      	lsls	r3, r3, #3
 801a136:	4a1b      	ldr	r2, [pc, #108]	; (801a1a4 <etharp_output_to_arp_index+0x124>)
 801a138:	4413      	add	r3, r2
 801a13a:	1d19      	adds	r1, r3, #4
 801a13c:	79fa      	ldrb	r2, [r7, #7]
 801a13e:	4613      	mov	r3, r2
 801a140:	005b      	lsls	r3, r3, #1
 801a142:	4413      	add	r3, r2
 801a144:	00db      	lsls	r3, r3, #3
 801a146:	3308      	adds	r3, #8
 801a148:	4a16      	ldr	r2, [pc, #88]	; (801a1a4 <etharp_output_to_arp_index+0x124>)
 801a14a:	4413      	add	r3, r2
 801a14c:	3304      	adds	r3, #4
 801a14e:	461a      	mov	r2, r3
 801a150:	68f8      	ldr	r0, [r7, #12]
 801a152:	f000 fafb 	bl	801a74c <etharp_request_dst>
 801a156:	4603      	mov	r3, r0
 801a158:	2b00      	cmp	r3, #0
 801a15a:	d109      	bne.n	801a170 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 801a15c:	79fa      	ldrb	r2, [r7, #7]
 801a15e:	4911      	ldr	r1, [pc, #68]	; (801a1a4 <etharp_output_to_arp_index+0x124>)
 801a160:	4613      	mov	r3, r2
 801a162:	005b      	lsls	r3, r3, #1
 801a164:	4413      	add	r3, r2
 801a166:	00db      	lsls	r3, r3, #3
 801a168:	440b      	add	r3, r1
 801a16a:	3314      	adds	r3, #20
 801a16c:	2203      	movs	r2, #3
 801a16e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 801a170:	68fb      	ldr	r3, [r7, #12]
 801a172:	f103 0126 	add.w	r1, r3, #38	; 0x26
 801a176:	79fa      	ldrb	r2, [r7, #7]
 801a178:	4613      	mov	r3, r2
 801a17a:	005b      	lsls	r3, r3, #1
 801a17c:	4413      	add	r3, r2
 801a17e:	00db      	lsls	r3, r3, #3
 801a180:	3308      	adds	r3, #8
 801a182:	4a08      	ldr	r2, [pc, #32]	; (801a1a4 <etharp_output_to_arp_index+0x124>)
 801a184:	4413      	add	r3, r2
 801a186:	3304      	adds	r3, #4
 801a188:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801a18c:	9200      	str	r2, [sp, #0]
 801a18e:	460a      	mov	r2, r1
 801a190:	68b9      	ldr	r1, [r7, #8]
 801a192:	68f8      	ldr	r0, [r7, #12]
 801a194:	f001 fe40 	bl	801be18 <ethernet_output>
 801a198:	4603      	mov	r3, r0
}
 801a19a:	4618      	mov	r0, r3
 801a19c:	3710      	adds	r7, #16
 801a19e:	46bd      	mov	sp, r7
 801a1a0:	bd80      	pop	{r7, pc}
 801a1a2:	bf00      	nop
 801a1a4:	200240ac 	.word	0x200240ac
 801a1a8:	08020850 	.word	0x08020850
 801a1ac:	080209c0 	.word	0x080209c0
 801a1b0:	080208c8 	.word	0x080208c8

0801a1b4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 801a1b4:	b580      	push	{r7, lr}
 801a1b6:	b08a      	sub	sp, #40	; 0x28
 801a1b8:	af02      	add	r7, sp, #8
 801a1ba:	60f8      	str	r0, [r7, #12]
 801a1bc:	60b9      	str	r1, [r7, #8]
 801a1be:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 801a1c0:	687b      	ldr	r3, [r7, #4]
 801a1c2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 801a1c4:	68fb      	ldr	r3, [r7, #12]
 801a1c6:	2b00      	cmp	r3, #0
 801a1c8:	d106      	bne.n	801a1d8 <etharp_output+0x24>
 801a1ca:	4b73      	ldr	r3, [pc, #460]	; (801a398 <etharp_output+0x1e4>)
 801a1cc:	f240 321e 	movw	r2, #798	; 0x31e
 801a1d0:	4972      	ldr	r1, [pc, #456]	; (801a39c <etharp_output+0x1e8>)
 801a1d2:	4873      	ldr	r0, [pc, #460]	; (801a3a0 <etharp_output+0x1ec>)
 801a1d4:	f003 f96a 	bl	801d4ac <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 801a1d8:	68bb      	ldr	r3, [r7, #8]
 801a1da:	2b00      	cmp	r3, #0
 801a1dc:	d106      	bne.n	801a1ec <etharp_output+0x38>
 801a1de:	4b6e      	ldr	r3, [pc, #440]	; (801a398 <etharp_output+0x1e4>)
 801a1e0:	f240 321f 	movw	r2, #799	; 0x31f
 801a1e4:	496f      	ldr	r1, [pc, #444]	; (801a3a4 <etharp_output+0x1f0>)
 801a1e6:	486e      	ldr	r0, [pc, #440]	; (801a3a0 <etharp_output+0x1ec>)
 801a1e8:	f003 f960 	bl	801d4ac <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 801a1ec:	687b      	ldr	r3, [r7, #4]
 801a1ee:	2b00      	cmp	r3, #0
 801a1f0:	d106      	bne.n	801a200 <etharp_output+0x4c>
 801a1f2:	4b69      	ldr	r3, [pc, #420]	; (801a398 <etharp_output+0x1e4>)
 801a1f4:	f44f 7248 	mov.w	r2, #800	; 0x320
 801a1f8:	496b      	ldr	r1, [pc, #428]	; (801a3a8 <etharp_output+0x1f4>)
 801a1fa:	4869      	ldr	r0, [pc, #420]	; (801a3a0 <etharp_output+0x1ec>)
 801a1fc:	f003 f956 	bl	801d4ac <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 801a200:	687b      	ldr	r3, [r7, #4]
 801a202:	681b      	ldr	r3, [r3, #0]
 801a204:	68f9      	ldr	r1, [r7, #12]
 801a206:	4618      	mov	r0, r3
 801a208:	f000 fef8 	bl	801affc <ip4_addr_isbroadcast_u32>
 801a20c:	4603      	mov	r3, r0
 801a20e:	2b00      	cmp	r3, #0
 801a210:	d002      	beq.n	801a218 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 801a212:	4b66      	ldr	r3, [pc, #408]	; (801a3ac <etharp_output+0x1f8>)
 801a214:	61fb      	str	r3, [r7, #28]
 801a216:	e0af      	b.n	801a378 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 801a218:	687b      	ldr	r3, [r7, #4]
 801a21a:	681b      	ldr	r3, [r3, #0]
 801a21c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a220:	2be0      	cmp	r3, #224	; 0xe0
 801a222:	d118      	bne.n	801a256 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 801a224:	2301      	movs	r3, #1
 801a226:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 801a228:	2300      	movs	r3, #0
 801a22a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 801a22c:	235e      	movs	r3, #94	; 0x5e
 801a22e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 801a230:	687b      	ldr	r3, [r7, #4]
 801a232:	3301      	adds	r3, #1
 801a234:	781b      	ldrb	r3, [r3, #0]
 801a236:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 801a23a:	b2db      	uxtb	r3, r3
 801a23c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 801a23e:	687b      	ldr	r3, [r7, #4]
 801a240:	3302      	adds	r3, #2
 801a242:	781b      	ldrb	r3, [r3, #0]
 801a244:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 801a246:	687b      	ldr	r3, [r7, #4]
 801a248:	3303      	adds	r3, #3
 801a24a:	781b      	ldrb	r3, [r3, #0]
 801a24c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 801a24e:	f107 0310 	add.w	r3, r7, #16
 801a252:	61fb      	str	r3, [r7, #28]
 801a254:	e090      	b.n	801a378 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801a256:	687b      	ldr	r3, [r7, #4]
 801a258:	681a      	ldr	r2, [r3, #0]
 801a25a:	68fb      	ldr	r3, [r7, #12]
 801a25c:	3304      	adds	r3, #4
 801a25e:	681b      	ldr	r3, [r3, #0]
 801a260:	405a      	eors	r2, r3
 801a262:	68fb      	ldr	r3, [r7, #12]
 801a264:	3308      	adds	r3, #8
 801a266:	681b      	ldr	r3, [r3, #0]
 801a268:	4013      	ands	r3, r2
 801a26a:	2b00      	cmp	r3, #0
 801a26c:	d012      	beq.n	801a294 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 801a26e:	687b      	ldr	r3, [r7, #4]
 801a270:	681b      	ldr	r3, [r3, #0]
 801a272:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 801a274:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 801a278:	4293      	cmp	r3, r2
 801a27a:	d00b      	beq.n	801a294 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 801a27c:	68fb      	ldr	r3, [r7, #12]
 801a27e:	330c      	adds	r3, #12
 801a280:	681b      	ldr	r3, [r3, #0]
 801a282:	2b00      	cmp	r3, #0
 801a284:	d003      	beq.n	801a28e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 801a286:	68fb      	ldr	r3, [r7, #12]
 801a288:	330c      	adds	r3, #12
 801a28a:	61bb      	str	r3, [r7, #24]
 801a28c:	e002      	b.n	801a294 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 801a28e:	f06f 0303 	mvn.w	r3, #3
 801a292:	e07d      	b.n	801a390 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801a294:	4b46      	ldr	r3, [pc, #280]	; (801a3b0 <etharp_output+0x1fc>)
 801a296:	781b      	ldrb	r3, [r3, #0]
 801a298:	4619      	mov	r1, r3
 801a29a:	4a46      	ldr	r2, [pc, #280]	; (801a3b4 <etharp_output+0x200>)
 801a29c:	460b      	mov	r3, r1
 801a29e:	005b      	lsls	r3, r3, #1
 801a2a0:	440b      	add	r3, r1
 801a2a2:	00db      	lsls	r3, r3, #3
 801a2a4:	4413      	add	r3, r2
 801a2a6:	3314      	adds	r3, #20
 801a2a8:	781b      	ldrb	r3, [r3, #0]
 801a2aa:	2b01      	cmp	r3, #1
 801a2ac:	d925      	bls.n	801a2fa <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 801a2ae:	4b40      	ldr	r3, [pc, #256]	; (801a3b0 <etharp_output+0x1fc>)
 801a2b0:	781b      	ldrb	r3, [r3, #0]
 801a2b2:	4619      	mov	r1, r3
 801a2b4:	4a3f      	ldr	r2, [pc, #252]	; (801a3b4 <etharp_output+0x200>)
 801a2b6:	460b      	mov	r3, r1
 801a2b8:	005b      	lsls	r3, r3, #1
 801a2ba:	440b      	add	r3, r1
 801a2bc:	00db      	lsls	r3, r3, #3
 801a2be:	4413      	add	r3, r2
 801a2c0:	3308      	adds	r3, #8
 801a2c2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 801a2c4:	68fa      	ldr	r2, [r7, #12]
 801a2c6:	429a      	cmp	r2, r3
 801a2c8:	d117      	bne.n	801a2fa <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 801a2ca:	69bb      	ldr	r3, [r7, #24]
 801a2cc:	681a      	ldr	r2, [r3, #0]
 801a2ce:	4b38      	ldr	r3, [pc, #224]	; (801a3b0 <etharp_output+0x1fc>)
 801a2d0:	781b      	ldrb	r3, [r3, #0]
 801a2d2:	4618      	mov	r0, r3
 801a2d4:	4937      	ldr	r1, [pc, #220]	; (801a3b4 <etharp_output+0x200>)
 801a2d6:	4603      	mov	r3, r0
 801a2d8:	005b      	lsls	r3, r3, #1
 801a2da:	4403      	add	r3, r0
 801a2dc:	00db      	lsls	r3, r3, #3
 801a2de:	440b      	add	r3, r1
 801a2e0:	3304      	adds	r3, #4
 801a2e2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 801a2e4:	429a      	cmp	r2, r3
 801a2e6:	d108      	bne.n	801a2fa <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 801a2e8:	4b31      	ldr	r3, [pc, #196]	; (801a3b0 <etharp_output+0x1fc>)
 801a2ea:	781b      	ldrb	r3, [r3, #0]
 801a2ec:	461a      	mov	r2, r3
 801a2ee:	68b9      	ldr	r1, [r7, #8]
 801a2f0:	68f8      	ldr	r0, [r7, #12]
 801a2f2:	f7ff fec5 	bl	801a080 <etharp_output_to_arp_index>
 801a2f6:	4603      	mov	r3, r0
 801a2f8:	e04a      	b.n	801a390 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801a2fa:	2300      	movs	r3, #0
 801a2fc:	75fb      	strb	r3, [r7, #23]
 801a2fe:	e031      	b.n	801a364 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801a300:	7dfa      	ldrb	r2, [r7, #23]
 801a302:	492c      	ldr	r1, [pc, #176]	; (801a3b4 <etharp_output+0x200>)
 801a304:	4613      	mov	r3, r2
 801a306:	005b      	lsls	r3, r3, #1
 801a308:	4413      	add	r3, r2
 801a30a:	00db      	lsls	r3, r3, #3
 801a30c:	440b      	add	r3, r1
 801a30e:	3314      	adds	r3, #20
 801a310:	781b      	ldrb	r3, [r3, #0]
 801a312:	2b01      	cmp	r3, #1
 801a314:	d923      	bls.n	801a35e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 801a316:	7dfa      	ldrb	r2, [r7, #23]
 801a318:	4926      	ldr	r1, [pc, #152]	; (801a3b4 <etharp_output+0x200>)
 801a31a:	4613      	mov	r3, r2
 801a31c:	005b      	lsls	r3, r3, #1
 801a31e:	4413      	add	r3, r2
 801a320:	00db      	lsls	r3, r3, #3
 801a322:	440b      	add	r3, r1
 801a324:	3308      	adds	r3, #8
 801a326:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 801a328:	68fa      	ldr	r2, [r7, #12]
 801a32a:	429a      	cmp	r2, r3
 801a32c:	d117      	bne.n	801a35e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 801a32e:	69bb      	ldr	r3, [r7, #24]
 801a330:	6819      	ldr	r1, [r3, #0]
 801a332:	7dfa      	ldrb	r2, [r7, #23]
 801a334:	481f      	ldr	r0, [pc, #124]	; (801a3b4 <etharp_output+0x200>)
 801a336:	4613      	mov	r3, r2
 801a338:	005b      	lsls	r3, r3, #1
 801a33a:	4413      	add	r3, r2
 801a33c:	00db      	lsls	r3, r3, #3
 801a33e:	4403      	add	r3, r0
 801a340:	3304      	adds	r3, #4
 801a342:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 801a344:	4299      	cmp	r1, r3
 801a346:	d10a      	bne.n	801a35e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 801a348:	4a19      	ldr	r2, [pc, #100]	; (801a3b0 <etharp_output+0x1fc>)
 801a34a:	7dfb      	ldrb	r3, [r7, #23]
 801a34c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 801a34e:	7dfb      	ldrb	r3, [r7, #23]
 801a350:	461a      	mov	r2, r3
 801a352:	68b9      	ldr	r1, [r7, #8]
 801a354:	68f8      	ldr	r0, [r7, #12]
 801a356:	f7ff fe93 	bl	801a080 <etharp_output_to_arp_index>
 801a35a:	4603      	mov	r3, r0
 801a35c:	e018      	b.n	801a390 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 801a35e:	7dfb      	ldrb	r3, [r7, #23]
 801a360:	3301      	adds	r3, #1
 801a362:	75fb      	strb	r3, [r7, #23]
 801a364:	7dfb      	ldrb	r3, [r7, #23]
 801a366:	2b09      	cmp	r3, #9
 801a368:	d9ca      	bls.n	801a300 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 801a36a:	68ba      	ldr	r2, [r7, #8]
 801a36c:	69b9      	ldr	r1, [r7, #24]
 801a36e:	68f8      	ldr	r0, [r7, #12]
 801a370:	f000 f822 	bl	801a3b8 <etharp_query>
 801a374:	4603      	mov	r3, r0
 801a376:	e00b      	b.n	801a390 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 801a378:	68fb      	ldr	r3, [r7, #12]
 801a37a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 801a37e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 801a382:	9300      	str	r3, [sp, #0]
 801a384:	69fb      	ldr	r3, [r7, #28]
 801a386:	68b9      	ldr	r1, [r7, #8]
 801a388:	68f8      	ldr	r0, [r7, #12]
 801a38a:	f001 fd45 	bl	801be18 <ethernet_output>
 801a38e:	4603      	mov	r3, r0
}
 801a390:	4618      	mov	r0, r3
 801a392:	3720      	adds	r7, #32
 801a394:	46bd      	mov	sp, r7
 801a396:	bd80      	pop	{r7, pc}
 801a398:	08020850 	.word	0x08020850
 801a39c:	080209a0 	.word	0x080209a0
 801a3a0:	080208c8 	.word	0x080208c8
 801a3a4:	080209f0 	.word	0x080209f0
 801a3a8:	08020990 	.word	0x08020990
 801a3ac:	08021080 	.word	0x08021080
 801a3b0:	2002419c 	.word	0x2002419c
 801a3b4:	200240ac 	.word	0x200240ac

0801a3b8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 801a3b8:	b580      	push	{r7, lr}
 801a3ba:	b08c      	sub	sp, #48	; 0x30
 801a3bc:	af02      	add	r7, sp, #8
 801a3be:	60f8      	str	r0, [r7, #12]
 801a3c0:	60b9      	str	r1, [r7, #8]
 801a3c2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 801a3c4:	68fb      	ldr	r3, [r7, #12]
 801a3c6:	3326      	adds	r3, #38	; 0x26
 801a3c8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 801a3ca:	23ff      	movs	r3, #255	; 0xff
 801a3cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 801a3d0:	2300      	movs	r3, #0
 801a3d2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801a3d4:	68bb      	ldr	r3, [r7, #8]
 801a3d6:	681b      	ldr	r3, [r3, #0]
 801a3d8:	68f9      	ldr	r1, [r7, #12]
 801a3da:	4618      	mov	r0, r3
 801a3dc:	f000 fe0e 	bl	801affc <ip4_addr_isbroadcast_u32>
 801a3e0:	4603      	mov	r3, r0
 801a3e2:	2b00      	cmp	r3, #0
 801a3e4:	d10c      	bne.n	801a400 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801a3e6:	68bb      	ldr	r3, [r7, #8]
 801a3e8:	681b      	ldr	r3, [r3, #0]
 801a3ea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 801a3ee:	2be0      	cmp	r3, #224	; 0xe0
 801a3f0:	d006      	beq.n	801a400 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 801a3f2:	68bb      	ldr	r3, [r7, #8]
 801a3f4:	2b00      	cmp	r3, #0
 801a3f6:	d003      	beq.n	801a400 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 801a3f8:	68bb      	ldr	r3, [r7, #8]
 801a3fa:	681b      	ldr	r3, [r3, #0]
 801a3fc:	2b00      	cmp	r3, #0
 801a3fe:	d102      	bne.n	801a406 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 801a400:	f06f 030f 	mvn.w	r3, #15
 801a404:	e101      	b.n	801a60a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 801a406:	68fa      	ldr	r2, [r7, #12]
 801a408:	2101      	movs	r1, #1
 801a40a:	68b8      	ldr	r0, [r7, #8]
 801a40c:	f7ff fb60 	bl	8019ad0 <etharp_find_entry>
 801a410:	4603      	mov	r3, r0
 801a412:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 801a414:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 801a418:	2b00      	cmp	r3, #0
 801a41a:	da02      	bge.n	801a422 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 801a41c:	8a7b      	ldrh	r3, [r7, #18]
 801a41e:	b25b      	sxtb	r3, r3
 801a420:	e0f3      	b.n	801a60a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 801a422:	8a7b      	ldrh	r3, [r7, #18]
 801a424:	2b7e      	cmp	r3, #126	; 0x7e
 801a426:	d906      	bls.n	801a436 <etharp_query+0x7e>
 801a428:	4b7a      	ldr	r3, [pc, #488]	; (801a614 <etharp_query+0x25c>)
 801a42a:	f240 32c1 	movw	r2, #961	; 0x3c1
 801a42e:	497a      	ldr	r1, [pc, #488]	; (801a618 <etharp_query+0x260>)
 801a430:	487a      	ldr	r0, [pc, #488]	; (801a61c <etharp_query+0x264>)
 801a432:	f003 f83b 	bl	801d4ac <iprintf>
  i = (netif_addr_idx_t)i_err;
 801a436:	8a7b      	ldrh	r3, [r7, #18]
 801a438:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 801a43a:	7c7a      	ldrb	r2, [r7, #17]
 801a43c:	4978      	ldr	r1, [pc, #480]	; (801a620 <etharp_query+0x268>)
 801a43e:	4613      	mov	r3, r2
 801a440:	005b      	lsls	r3, r3, #1
 801a442:	4413      	add	r3, r2
 801a444:	00db      	lsls	r3, r3, #3
 801a446:	440b      	add	r3, r1
 801a448:	3314      	adds	r3, #20
 801a44a:	781b      	ldrb	r3, [r3, #0]
 801a44c:	2b00      	cmp	r3, #0
 801a44e:	d115      	bne.n	801a47c <etharp_query+0xc4>
    is_new_entry = 1;
 801a450:	2301      	movs	r3, #1
 801a452:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 801a454:	7c7a      	ldrb	r2, [r7, #17]
 801a456:	4972      	ldr	r1, [pc, #456]	; (801a620 <etharp_query+0x268>)
 801a458:	4613      	mov	r3, r2
 801a45a:	005b      	lsls	r3, r3, #1
 801a45c:	4413      	add	r3, r2
 801a45e:	00db      	lsls	r3, r3, #3
 801a460:	440b      	add	r3, r1
 801a462:	3314      	adds	r3, #20
 801a464:	2201      	movs	r2, #1
 801a466:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 801a468:	7c7a      	ldrb	r2, [r7, #17]
 801a46a:	496d      	ldr	r1, [pc, #436]	; (801a620 <etharp_query+0x268>)
 801a46c:	4613      	mov	r3, r2
 801a46e:	005b      	lsls	r3, r3, #1
 801a470:	4413      	add	r3, r2
 801a472:	00db      	lsls	r3, r3, #3
 801a474:	440b      	add	r3, r1
 801a476:	3308      	adds	r3, #8
 801a478:	68fa      	ldr	r2, [r7, #12]
 801a47a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 801a47c:	7c7a      	ldrb	r2, [r7, #17]
 801a47e:	4968      	ldr	r1, [pc, #416]	; (801a620 <etharp_query+0x268>)
 801a480:	4613      	mov	r3, r2
 801a482:	005b      	lsls	r3, r3, #1
 801a484:	4413      	add	r3, r2
 801a486:	00db      	lsls	r3, r3, #3
 801a488:	440b      	add	r3, r1
 801a48a:	3314      	adds	r3, #20
 801a48c:	781b      	ldrb	r3, [r3, #0]
 801a48e:	2b01      	cmp	r3, #1
 801a490:	d011      	beq.n	801a4b6 <etharp_query+0xfe>
 801a492:	7c7a      	ldrb	r2, [r7, #17]
 801a494:	4962      	ldr	r1, [pc, #392]	; (801a620 <etharp_query+0x268>)
 801a496:	4613      	mov	r3, r2
 801a498:	005b      	lsls	r3, r3, #1
 801a49a:	4413      	add	r3, r2
 801a49c:	00db      	lsls	r3, r3, #3
 801a49e:	440b      	add	r3, r1
 801a4a0:	3314      	adds	r3, #20
 801a4a2:	781b      	ldrb	r3, [r3, #0]
 801a4a4:	2b01      	cmp	r3, #1
 801a4a6:	d806      	bhi.n	801a4b6 <etharp_query+0xfe>
 801a4a8:	4b5a      	ldr	r3, [pc, #360]	; (801a614 <etharp_query+0x25c>)
 801a4aa:	f240 32cd 	movw	r2, #973	; 0x3cd
 801a4ae:	495d      	ldr	r1, [pc, #372]	; (801a624 <etharp_query+0x26c>)
 801a4b0:	485a      	ldr	r0, [pc, #360]	; (801a61c <etharp_query+0x264>)
 801a4b2:	f002 fffb 	bl	801d4ac <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 801a4b6:	6a3b      	ldr	r3, [r7, #32]
 801a4b8:	2b00      	cmp	r3, #0
 801a4ba:	d102      	bne.n	801a4c2 <etharp_query+0x10a>
 801a4bc:	687b      	ldr	r3, [r7, #4]
 801a4be:	2b00      	cmp	r3, #0
 801a4c0:	d10c      	bne.n	801a4dc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 801a4c2:	68b9      	ldr	r1, [r7, #8]
 801a4c4:	68f8      	ldr	r0, [r7, #12]
 801a4c6:	f000 f963 	bl	801a790 <etharp_request>
 801a4ca:	4603      	mov	r3, r0
 801a4cc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 801a4d0:	687b      	ldr	r3, [r7, #4]
 801a4d2:	2b00      	cmp	r3, #0
 801a4d4:	d102      	bne.n	801a4dc <etharp_query+0x124>
      return result;
 801a4d6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 801a4da:	e096      	b.n	801a60a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 801a4dc:	687b      	ldr	r3, [r7, #4]
 801a4de:	2b00      	cmp	r3, #0
 801a4e0:	d106      	bne.n	801a4f0 <etharp_query+0x138>
 801a4e2:	4b4c      	ldr	r3, [pc, #304]	; (801a614 <etharp_query+0x25c>)
 801a4e4:	f240 32e1 	movw	r2, #993	; 0x3e1
 801a4e8:	494f      	ldr	r1, [pc, #316]	; (801a628 <etharp_query+0x270>)
 801a4ea:	484c      	ldr	r0, [pc, #304]	; (801a61c <etharp_query+0x264>)
 801a4ec:	f002 ffde 	bl	801d4ac <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 801a4f0:	7c7a      	ldrb	r2, [r7, #17]
 801a4f2:	494b      	ldr	r1, [pc, #300]	; (801a620 <etharp_query+0x268>)
 801a4f4:	4613      	mov	r3, r2
 801a4f6:	005b      	lsls	r3, r3, #1
 801a4f8:	4413      	add	r3, r2
 801a4fa:	00db      	lsls	r3, r3, #3
 801a4fc:	440b      	add	r3, r1
 801a4fe:	3314      	adds	r3, #20
 801a500:	781b      	ldrb	r3, [r3, #0]
 801a502:	2b01      	cmp	r3, #1
 801a504:	d917      	bls.n	801a536 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 801a506:	4a49      	ldr	r2, [pc, #292]	; (801a62c <etharp_query+0x274>)
 801a508:	7c7b      	ldrb	r3, [r7, #17]
 801a50a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 801a50c:	7c7a      	ldrb	r2, [r7, #17]
 801a50e:	4613      	mov	r3, r2
 801a510:	005b      	lsls	r3, r3, #1
 801a512:	4413      	add	r3, r2
 801a514:	00db      	lsls	r3, r3, #3
 801a516:	3308      	adds	r3, #8
 801a518:	4a41      	ldr	r2, [pc, #260]	; (801a620 <etharp_query+0x268>)
 801a51a:	4413      	add	r3, r2
 801a51c:	3304      	adds	r3, #4
 801a51e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 801a522:	9200      	str	r2, [sp, #0]
 801a524:	697a      	ldr	r2, [r7, #20]
 801a526:	6879      	ldr	r1, [r7, #4]
 801a528:	68f8      	ldr	r0, [r7, #12]
 801a52a:	f001 fc75 	bl	801be18 <ethernet_output>
 801a52e:	4603      	mov	r3, r0
 801a530:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a534:	e067      	b.n	801a606 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 801a536:	7c7a      	ldrb	r2, [r7, #17]
 801a538:	4939      	ldr	r1, [pc, #228]	; (801a620 <etharp_query+0x268>)
 801a53a:	4613      	mov	r3, r2
 801a53c:	005b      	lsls	r3, r3, #1
 801a53e:	4413      	add	r3, r2
 801a540:	00db      	lsls	r3, r3, #3
 801a542:	440b      	add	r3, r1
 801a544:	3314      	adds	r3, #20
 801a546:	781b      	ldrb	r3, [r3, #0]
 801a548:	2b01      	cmp	r3, #1
 801a54a:	d15c      	bne.n	801a606 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 801a54c:	2300      	movs	r3, #0
 801a54e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 801a550:	687b      	ldr	r3, [r7, #4]
 801a552:	61fb      	str	r3, [r7, #28]
    while (p) {
 801a554:	e01c      	b.n	801a590 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 801a556:	69fb      	ldr	r3, [r7, #28]
 801a558:	895a      	ldrh	r2, [r3, #10]
 801a55a:	69fb      	ldr	r3, [r7, #28]
 801a55c:	891b      	ldrh	r3, [r3, #8]
 801a55e:	429a      	cmp	r2, r3
 801a560:	d10a      	bne.n	801a578 <etharp_query+0x1c0>
 801a562:	69fb      	ldr	r3, [r7, #28]
 801a564:	681b      	ldr	r3, [r3, #0]
 801a566:	2b00      	cmp	r3, #0
 801a568:	d006      	beq.n	801a578 <etharp_query+0x1c0>
 801a56a:	4b2a      	ldr	r3, [pc, #168]	; (801a614 <etharp_query+0x25c>)
 801a56c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 801a570:	492f      	ldr	r1, [pc, #188]	; (801a630 <etharp_query+0x278>)
 801a572:	482a      	ldr	r0, [pc, #168]	; (801a61c <etharp_query+0x264>)
 801a574:	f002 ff9a 	bl	801d4ac <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 801a578:	69fb      	ldr	r3, [r7, #28]
 801a57a:	7b1b      	ldrb	r3, [r3, #12]
 801a57c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 801a580:	2b00      	cmp	r3, #0
 801a582:	d002      	beq.n	801a58a <etharp_query+0x1d2>
        copy_needed = 1;
 801a584:	2301      	movs	r3, #1
 801a586:	61bb      	str	r3, [r7, #24]
        break;
 801a588:	e005      	b.n	801a596 <etharp_query+0x1de>
      }
      p = p->next;
 801a58a:	69fb      	ldr	r3, [r7, #28]
 801a58c:	681b      	ldr	r3, [r3, #0]
 801a58e:	61fb      	str	r3, [r7, #28]
    while (p) {
 801a590:	69fb      	ldr	r3, [r7, #28]
 801a592:	2b00      	cmp	r3, #0
 801a594:	d1df      	bne.n	801a556 <etharp_query+0x19e>
    }
    if (copy_needed) {
 801a596:	69bb      	ldr	r3, [r7, #24]
 801a598:	2b00      	cmp	r3, #0
 801a59a:	d007      	beq.n	801a5ac <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 801a59c:	687a      	ldr	r2, [r7, #4]
 801a59e:	f44f 7120 	mov.w	r1, #640	; 0x280
 801a5a2:	200e      	movs	r0, #14
 801a5a4:	f7f9 fa08 	bl	80139b8 <pbuf_clone>
 801a5a8:	61f8      	str	r0, [r7, #28]
 801a5aa:	e004      	b.n	801a5b6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 801a5ac:	687b      	ldr	r3, [r7, #4]
 801a5ae:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 801a5b0:	69f8      	ldr	r0, [r7, #28]
 801a5b2:	f7f9 f82f 	bl	8013614 <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 801a5b6:	69fb      	ldr	r3, [r7, #28]
 801a5b8:	2b00      	cmp	r3, #0
 801a5ba:	d021      	beq.n	801a600 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 801a5bc:	7c7a      	ldrb	r2, [r7, #17]
 801a5be:	4918      	ldr	r1, [pc, #96]	; (801a620 <etharp_query+0x268>)
 801a5c0:	4613      	mov	r3, r2
 801a5c2:	005b      	lsls	r3, r3, #1
 801a5c4:	4413      	add	r3, r2
 801a5c6:	00db      	lsls	r3, r3, #3
 801a5c8:	440b      	add	r3, r1
 801a5ca:	681b      	ldr	r3, [r3, #0]
 801a5cc:	2b00      	cmp	r3, #0
 801a5ce:	d00a      	beq.n	801a5e6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 801a5d0:	7c7a      	ldrb	r2, [r7, #17]
 801a5d2:	4913      	ldr	r1, [pc, #76]	; (801a620 <etharp_query+0x268>)
 801a5d4:	4613      	mov	r3, r2
 801a5d6:	005b      	lsls	r3, r3, #1
 801a5d8:	4413      	add	r3, r2
 801a5da:	00db      	lsls	r3, r3, #3
 801a5dc:	440b      	add	r3, r1
 801a5de:	681b      	ldr	r3, [r3, #0]
 801a5e0:	4618      	mov	r0, r3
 801a5e2:	f7f8 ff71 	bl	80134c8 <pbuf_free>
      }
      arp_table[i].q = p;
 801a5e6:	7c7a      	ldrb	r2, [r7, #17]
 801a5e8:	490d      	ldr	r1, [pc, #52]	; (801a620 <etharp_query+0x268>)
 801a5ea:	4613      	mov	r3, r2
 801a5ec:	005b      	lsls	r3, r3, #1
 801a5ee:	4413      	add	r3, r2
 801a5f0:	00db      	lsls	r3, r3, #3
 801a5f2:	440b      	add	r3, r1
 801a5f4:	69fa      	ldr	r2, [r7, #28]
 801a5f6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 801a5f8:	2300      	movs	r3, #0
 801a5fa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801a5fe:	e002      	b.n	801a606 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 801a600:	23ff      	movs	r3, #255	; 0xff
 801a602:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 801a606:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801a60a:	4618      	mov	r0, r3
 801a60c:	3728      	adds	r7, #40	; 0x28
 801a60e:	46bd      	mov	sp, r7
 801a610:	bd80      	pop	{r7, pc}
 801a612:	bf00      	nop
 801a614:	08020850 	.word	0x08020850
 801a618:	080209fc 	.word	0x080209fc
 801a61c:	080208c8 	.word	0x080208c8
 801a620:	200240ac 	.word	0x200240ac
 801a624:	08020a0c 	.word	0x08020a0c
 801a628:	080209f0 	.word	0x080209f0
 801a62c:	2002419c 	.word	0x2002419c
 801a630:	08020a34 	.word	0x08020a34

0801a634 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 801a634:	b580      	push	{r7, lr}
 801a636:	b08a      	sub	sp, #40	; 0x28
 801a638:	af02      	add	r7, sp, #8
 801a63a:	60f8      	str	r0, [r7, #12]
 801a63c:	60b9      	str	r1, [r7, #8]
 801a63e:	607a      	str	r2, [r7, #4]
 801a640:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 801a642:	2300      	movs	r3, #0
 801a644:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 801a646:	68fb      	ldr	r3, [r7, #12]
 801a648:	2b00      	cmp	r3, #0
 801a64a:	d106      	bne.n	801a65a <etharp_raw+0x26>
 801a64c:	4b3a      	ldr	r3, [pc, #232]	; (801a738 <etharp_raw+0x104>)
 801a64e:	f240 4257 	movw	r2, #1111	; 0x457
 801a652:	493a      	ldr	r1, [pc, #232]	; (801a73c <etharp_raw+0x108>)
 801a654:	483a      	ldr	r0, [pc, #232]	; (801a740 <etharp_raw+0x10c>)
 801a656:	f002 ff29 	bl	801d4ac <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801a65a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a65e:	211c      	movs	r1, #28
 801a660:	200e      	movs	r0, #14
 801a662:	f7f8 fc4d 	bl	8012f00 <pbuf_alloc>
 801a666:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 801a668:	69bb      	ldr	r3, [r7, #24]
 801a66a:	2b00      	cmp	r3, #0
 801a66c:	d102      	bne.n	801a674 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801a66e:	f04f 33ff 	mov.w	r3, #4294967295
 801a672:	e05d      	b.n	801a730 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 801a674:	69bb      	ldr	r3, [r7, #24]
 801a676:	895b      	ldrh	r3, [r3, #10]
 801a678:	2b1b      	cmp	r3, #27
 801a67a:	d806      	bhi.n	801a68a <etharp_raw+0x56>
 801a67c:	4b2e      	ldr	r3, [pc, #184]	; (801a738 <etharp_raw+0x104>)
 801a67e:	f240 4262 	movw	r2, #1122	; 0x462
 801a682:	4930      	ldr	r1, [pc, #192]	; (801a744 <etharp_raw+0x110>)
 801a684:	482e      	ldr	r0, [pc, #184]	; (801a740 <etharp_raw+0x10c>)
 801a686:	f002 ff11 	bl	801d4ac <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801a68a:	69bb      	ldr	r3, [r7, #24]
 801a68c:	685b      	ldr	r3, [r3, #4]
 801a68e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 801a690:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 801a692:	4618      	mov	r0, r3
 801a694:	f7f7 fb16 	bl	8011cc4 <lwip_htons>
 801a698:	4603      	mov	r3, r0
 801a69a:	461a      	mov	r2, r3
 801a69c:	697b      	ldr	r3, [r7, #20]
 801a69e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 801a6a0:	68fb      	ldr	r3, [r7, #12]
 801a6a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801a6a6:	2b06      	cmp	r3, #6
 801a6a8:	d006      	beq.n	801a6b8 <etharp_raw+0x84>
 801a6aa:	4b23      	ldr	r3, [pc, #140]	; (801a738 <etharp_raw+0x104>)
 801a6ac:	f240 4269 	movw	r2, #1129	; 0x469
 801a6b0:	4925      	ldr	r1, [pc, #148]	; (801a748 <etharp_raw+0x114>)
 801a6b2:	4823      	ldr	r0, [pc, #140]	; (801a740 <etharp_raw+0x10c>)
 801a6b4:	f002 fefa 	bl	801d4ac <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 801a6b8:	697b      	ldr	r3, [r7, #20]
 801a6ba:	3308      	adds	r3, #8
 801a6bc:	2206      	movs	r2, #6
 801a6be:	6839      	ldr	r1, [r7, #0]
 801a6c0:	4618      	mov	r0, r3
 801a6c2:	f003 f824 	bl	801d70e <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 801a6c6:	697b      	ldr	r3, [r7, #20]
 801a6c8:	3312      	adds	r3, #18
 801a6ca:	2206      	movs	r2, #6
 801a6cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801a6ce:	4618      	mov	r0, r3
 801a6d0:	f003 f81d 	bl	801d70e <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 801a6d4:	697b      	ldr	r3, [r7, #20]
 801a6d6:	330e      	adds	r3, #14
 801a6d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 801a6da:	6812      	ldr	r2, [r2, #0]
 801a6dc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 801a6de:	697b      	ldr	r3, [r7, #20]
 801a6e0:	3318      	adds	r3, #24
 801a6e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801a6e4:	6812      	ldr	r2, [r2, #0]
 801a6e6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 801a6e8:	697b      	ldr	r3, [r7, #20]
 801a6ea:	2200      	movs	r2, #0
 801a6ec:	701a      	strb	r2, [r3, #0]
 801a6ee:	2200      	movs	r2, #0
 801a6f0:	f042 0201 	orr.w	r2, r2, #1
 801a6f4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 801a6f6:	697b      	ldr	r3, [r7, #20]
 801a6f8:	2200      	movs	r2, #0
 801a6fa:	f042 0208 	orr.w	r2, r2, #8
 801a6fe:	709a      	strb	r2, [r3, #2]
 801a700:	2200      	movs	r2, #0
 801a702:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 801a704:	697b      	ldr	r3, [r7, #20]
 801a706:	2206      	movs	r2, #6
 801a708:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801a70a:	697b      	ldr	r3, [r7, #20]
 801a70c:	2204      	movs	r2, #4
 801a70e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 801a710:	f640 0306 	movw	r3, #2054	; 0x806
 801a714:	9300      	str	r3, [sp, #0]
 801a716:	687b      	ldr	r3, [r7, #4]
 801a718:	68ba      	ldr	r2, [r7, #8]
 801a71a:	69b9      	ldr	r1, [r7, #24]
 801a71c:	68f8      	ldr	r0, [r7, #12]
 801a71e:	f001 fb7b 	bl	801be18 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 801a722:	69b8      	ldr	r0, [r7, #24]
 801a724:	f7f8 fed0 	bl	80134c8 <pbuf_free>
  p = NULL;
 801a728:	2300      	movs	r3, #0
 801a72a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801a72c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 801a730:	4618      	mov	r0, r3
 801a732:	3720      	adds	r7, #32
 801a734:	46bd      	mov	sp, r7
 801a736:	bd80      	pop	{r7, pc}
 801a738:	08020850 	.word	0x08020850
 801a73c:	080209a0 	.word	0x080209a0
 801a740:	080208c8 	.word	0x080208c8
 801a744:	08020a50 	.word	0x08020a50
 801a748:	08020a84 	.word	0x08020a84

0801a74c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801a74c:	b580      	push	{r7, lr}
 801a74e:	b088      	sub	sp, #32
 801a750:	af04      	add	r7, sp, #16
 801a752:	60f8      	str	r0, [r7, #12]
 801a754:	60b9      	str	r1, [r7, #8]
 801a756:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801a758:	68fb      	ldr	r3, [r7, #12]
 801a75a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801a75e:	68fb      	ldr	r3, [r7, #12]
 801a760:	f103 0026 	add.w	r0, r3, #38	; 0x26
 801a764:	68fb      	ldr	r3, [r7, #12]
 801a766:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 801a768:	2201      	movs	r2, #1
 801a76a:	9203      	str	r2, [sp, #12]
 801a76c:	68ba      	ldr	r2, [r7, #8]
 801a76e:	9202      	str	r2, [sp, #8]
 801a770:	4a06      	ldr	r2, [pc, #24]	; (801a78c <etharp_request_dst+0x40>)
 801a772:	9201      	str	r2, [sp, #4]
 801a774:	9300      	str	r3, [sp, #0]
 801a776:	4603      	mov	r3, r0
 801a778:	687a      	ldr	r2, [r7, #4]
 801a77a:	68f8      	ldr	r0, [r7, #12]
 801a77c:	f7ff ff5a 	bl	801a634 <etharp_raw>
 801a780:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 801a782:	4618      	mov	r0, r3
 801a784:	3710      	adds	r7, #16
 801a786:	46bd      	mov	sp, r7
 801a788:	bd80      	pop	{r7, pc}
 801a78a:	bf00      	nop
 801a78c:	08021088 	.word	0x08021088

0801a790 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 801a790:	b580      	push	{r7, lr}
 801a792:	b082      	sub	sp, #8
 801a794:	af00      	add	r7, sp, #0
 801a796:	6078      	str	r0, [r7, #4]
 801a798:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801a79a:	4a05      	ldr	r2, [pc, #20]	; (801a7b0 <etharp_request+0x20>)
 801a79c:	6839      	ldr	r1, [r7, #0]
 801a79e:	6878      	ldr	r0, [r7, #4]
 801a7a0:	f7ff ffd4 	bl	801a74c <etharp_request_dst>
 801a7a4:	4603      	mov	r3, r0
}
 801a7a6:	4618      	mov	r0, r3
 801a7a8:	3708      	adds	r7, #8
 801a7aa:	46bd      	mov	sp, r7
 801a7ac:	bd80      	pop	{r7, pc}
 801a7ae:	bf00      	nop
 801a7b0:	08021080 	.word	0x08021080

0801a7b4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 801a7b4:	b580      	push	{r7, lr}
 801a7b6:	b08e      	sub	sp, #56	; 0x38
 801a7b8:	af04      	add	r7, sp, #16
 801a7ba:	6078      	str	r0, [r7, #4]
 801a7bc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 801a7be:	4b79      	ldr	r3, [pc, #484]	; (801a9a4 <icmp_input+0x1f0>)
 801a7c0:	689b      	ldr	r3, [r3, #8]
 801a7c2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 801a7c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801a7c6:	781b      	ldrb	r3, [r3, #0]
 801a7c8:	f003 030f 	and.w	r3, r3, #15
 801a7cc:	b2db      	uxtb	r3, r3
 801a7ce:	009b      	lsls	r3, r3, #2
 801a7d0:	b2db      	uxtb	r3, r3
 801a7d2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 801a7d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a7d6:	2b13      	cmp	r3, #19
 801a7d8:	f240 80cd 	bls.w	801a976 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 801a7dc:	687b      	ldr	r3, [r7, #4]
 801a7de:	895b      	ldrh	r3, [r3, #10]
 801a7e0:	2b03      	cmp	r3, #3
 801a7e2:	f240 80ca 	bls.w	801a97a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 801a7e6:	687b      	ldr	r3, [r7, #4]
 801a7e8:	685b      	ldr	r3, [r3, #4]
 801a7ea:	781b      	ldrb	r3, [r3, #0]
 801a7ec:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 801a7f0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 801a7f4:	2b00      	cmp	r3, #0
 801a7f6:	f000 80b7 	beq.w	801a968 <icmp_input+0x1b4>
 801a7fa:	2b08      	cmp	r3, #8
 801a7fc:	f040 80b7 	bne.w	801a96e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 801a800:	4b69      	ldr	r3, [pc, #420]	; (801a9a8 <icmp_input+0x1f4>)
 801a802:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801a804:	4b67      	ldr	r3, [pc, #412]	; (801a9a4 <icmp_input+0x1f0>)
 801a806:	695b      	ldr	r3, [r3, #20]
 801a808:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801a80c:	2be0      	cmp	r3, #224	; 0xe0
 801a80e:	f000 80bb 	beq.w	801a988 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 801a812:	4b64      	ldr	r3, [pc, #400]	; (801a9a4 <icmp_input+0x1f0>)
 801a814:	695b      	ldr	r3, [r3, #20]
 801a816:	4a63      	ldr	r2, [pc, #396]	; (801a9a4 <icmp_input+0x1f0>)
 801a818:	6812      	ldr	r2, [r2, #0]
 801a81a:	4611      	mov	r1, r2
 801a81c:	4618      	mov	r0, r3
 801a81e:	f000 fbed 	bl	801affc <ip4_addr_isbroadcast_u32>
 801a822:	4603      	mov	r3, r0
 801a824:	2b00      	cmp	r3, #0
 801a826:	f040 80b1 	bne.w	801a98c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801a82a:	687b      	ldr	r3, [r7, #4]
 801a82c:	891b      	ldrh	r3, [r3, #8]
 801a82e:	2b07      	cmp	r3, #7
 801a830:	f240 80a5 	bls.w	801a97e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801a834:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a836:	330e      	adds	r3, #14
 801a838:	4619      	mov	r1, r3
 801a83a:	6878      	ldr	r0, [r7, #4]
 801a83c:	f7f8 fdae 	bl	801339c <pbuf_add_header>
 801a840:	4603      	mov	r3, r0
 801a842:	2b00      	cmp	r3, #0
 801a844:	d04b      	beq.n	801a8de <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 801a846:	687b      	ldr	r3, [r7, #4]
 801a848:	891a      	ldrh	r2, [r3, #8]
 801a84a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a84c:	4413      	add	r3, r2
 801a84e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 801a850:	687b      	ldr	r3, [r7, #4]
 801a852:	891b      	ldrh	r3, [r3, #8]
 801a854:	8b7a      	ldrh	r2, [r7, #26]
 801a856:	429a      	cmp	r2, r3
 801a858:	f0c0 809a 	bcc.w	801a990 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801a85c:	8b7b      	ldrh	r3, [r7, #26]
 801a85e:	f44f 7220 	mov.w	r2, #640	; 0x280
 801a862:	4619      	mov	r1, r3
 801a864:	200e      	movs	r0, #14
 801a866:	f7f8 fb4b 	bl	8012f00 <pbuf_alloc>
 801a86a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801a86c:	697b      	ldr	r3, [r7, #20]
 801a86e:	2b00      	cmp	r3, #0
 801a870:	f000 8090 	beq.w	801a994 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 801a874:	697b      	ldr	r3, [r7, #20]
 801a876:	895b      	ldrh	r3, [r3, #10]
 801a878:	461a      	mov	r2, r3
 801a87a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a87c:	3308      	adds	r3, #8
 801a87e:	429a      	cmp	r2, r3
 801a880:	d203      	bcs.n	801a88a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 801a882:	6978      	ldr	r0, [r7, #20]
 801a884:	f7f8 fe20 	bl	80134c8 <pbuf_free>
          goto icmperr;
 801a888:	e085      	b.n	801a996 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801a88a:	697b      	ldr	r3, [r7, #20]
 801a88c:	685b      	ldr	r3, [r3, #4]
 801a88e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801a890:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801a892:	4618      	mov	r0, r3
 801a894:	f002 ff3b 	bl	801d70e <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 801a898:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a89a:	4619      	mov	r1, r3
 801a89c:	6978      	ldr	r0, [r7, #20]
 801a89e:	f7f8 fd8d 	bl	80133bc <pbuf_remove_header>
 801a8a2:	4603      	mov	r3, r0
 801a8a4:	2b00      	cmp	r3, #0
 801a8a6:	d009      	beq.n	801a8bc <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 801a8a8:	4b40      	ldr	r3, [pc, #256]	; (801a9ac <icmp_input+0x1f8>)
 801a8aa:	22b6      	movs	r2, #182	; 0xb6
 801a8ac:	4940      	ldr	r1, [pc, #256]	; (801a9b0 <icmp_input+0x1fc>)
 801a8ae:	4841      	ldr	r0, [pc, #260]	; (801a9b4 <icmp_input+0x200>)
 801a8b0:	f002 fdfc 	bl	801d4ac <iprintf>
          pbuf_free(r);
 801a8b4:	6978      	ldr	r0, [r7, #20]
 801a8b6:	f7f8 fe07 	bl	80134c8 <pbuf_free>
          goto icmperr;
 801a8ba:	e06c      	b.n	801a996 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 801a8bc:	6879      	ldr	r1, [r7, #4]
 801a8be:	6978      	ldr	r0, [r7, #20]
 801a8c0:	f7f8 ff36 	bl	8013730 <pbuf_copy>
 801a8c4:	4603      	mov	r3, r0
 801a8c6:	2b00      	cmp	r3, #0
 801a8c8:	d003      	beq.n	801a8d2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 801a8ca:	6978      	ldr	r0, [r7, #20]
 801a8cc:	f7f8 fdfc 	bl	80134c8 <pbuf_free>
          goto icmperr;
 801a8d0:	e061      	b.n	801a996 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 801a8d2:	6878      	ldr	r0, [r7, #4]
 801a8d4:	f7f8 fdf8 	bl	80134c8 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 801a8d8:	697b      	ldr	r3, [r7, #20]
 801a8da:	607b      	str	r3, [r7, #4]
 801a8dc:	e00f      	b.n	801a8fe <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 801a8de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a8e0:	330e      	adds	r3, #14
 801a8e2:	4619      	mov	r1, r3
 801a8e4:	6878      	ldr	r0, [r7, #4]
 801a8e6:	f7f8 fd69 	bl	80133bc <pbuf_remove_header>
 801a8ea:	4603      	mov	r3, r0
 801a8ec:	2b00      	cmp	r3, #0
 801a8ee:	d006      	beq.n	801a8fe <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 801a8f0:	4b2e      	ldr	r3, [pc, #184]	; (801a9ac <icmp_input+0x1f8>)
 801a8f2:	22c7      	movs	r2, #199	; 0xc7
 801a8f4:	4930      	ldr	r1, [pc, #192]	; (801a9b8 <icmp_input+0x204>)
 801a8f6:	482f      	ldr	r0, [pc, #188]	; (801a9b4 <icmp_input+0x200>)
 801a8f8:	f002 fdd8 	bl	801d4ac <iprintf>
          goto icmperr;
 801a8fc:	e04b      	b.n	801a996 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 801a8fe:	687b      	ldr	r3, [r7, #4]
 801a900:	685b      	ldr	r3, [r3, #4]
 801a902:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 801a904:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801a906:	4619      	mov	r1, r3
 801a908:	6878      	ldr	r0, [r7, #4]
 801a90a:	f7f8 fd47 	bl	801339c <pbuf_add_header>
 801a90e:	4603      	mov	r3, r0
 801a910:	2b00      	cmp	r3, #0
 801a912:	d12b      	bne.n	801a96c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 801a914:	687b      	ldr	r3, [r7, #4]
 801a916:	685b      	ldr	r3, [r3, #4]
 801a918:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801a91a:	69fb      	ldr	r3, [r7, #28]
 801a91c:	681a      	ldr	r2, [r3, #0]
 801a91e:	68fb      	ldr	r3, [r7, #12]
 801a920:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 801a922:	4b20      	ldr	r3, [pc, #128]	; (801a9a4 <icmp_input+0x1f0>)
 801a924:	691a      	ldr	r2, [r3, #16]
 801a926:	68fb      	ldr	r3, [r7, #12]
 801a928:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801a92a:	693b      	ldr	r3, [r7, #16]
 801a92c:	2200      	movs	r2, #0
 801a92e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 801a930:	693b      	ldr	r3, [r7, #16]
 801a932:	2200      	movs	r2, #0
 801a934:	709a      	strb	r2, [r3, #2]
 801a936:	2200      	movs	r2, #0
 801a938:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801a93a:	68fb      	ldr	r3, [r7, #12]
 801a93c:	22ff      	movs	r2, #255	; 0xff
 801a93e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 801a940:	68fb      	ldr	r3, [r7, #12]
 801a942:	2200      	movs	r2, #0
 801a944:	729a      	strb	r2, [r3, #10]
 801a946:	2200      	movs	r2, #0
 801a948:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801a94a:	683b      	ldr	r3, [r7, #0]
 801a94c:	9302      	str	r3, [sp, #8]
 801a94e:	2301      	movs	r3, #1
 801a950:	9301      	str	r3, [sp, #4]
 801a952:	2300      	movs	r3, #0
 801a954:	9300      	str	r3, [sp, #0]
 801a956:	23ff      	movs	r3, #255	; 0xff
 801a958:	2200      	movs	r2, #0
 801a95a:	69f9      	ldr	r1, [r7, #28]
 801a95c:	6878      	ldr	r0, [r7, #4]
 801a95e:	f000 fa75 	bl	801ae4c <ip4_output_if>
 801a962:	4603      	mov	r3, r0
 801a964:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 801a966:	e001      	b.n	801a96c <icmp_input+0x1b8>
      break;
 801a968:	bf00      	nop
 801a96a:	e000      	b.n	801a96e <icmp_input+0x1ba>
      break;
 801a96c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801a96e:	6878      	ldr	r0, [r7, #4]
 801a970:	f7f8 fdaa 	bl	80134c8 <pbuf_free>
  return;
 801a974:	e013      	b.n	801a99e <icmp_input+0x1ea>
    goto lenerr;
 801a976:	bf00      	nop
 801a978:	e002      	b.n	801a980 <icmp_input+0x1cc>
    goto lenerr;
 801a97a:	bf00      	nop
 801a97c:	e000      	b.n	801a980 <icmp_input+0x1cc>
        goto lenerr;
 801a97e:	bf00      	nop
lenerr:
  pbuf_free(p);
 801a980:	6878      	ldr	r0, [r7, #4]
 801a982:	f7f8 fda1 	bl	80134c8 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801a986:	e00a      	b.n	801a99e <icmp_input+0x1ea>
        goto icmperr;
 801a988:	bf00      	nop
 801a98a:	e004      	b.n	801a996 <icmp_input+0x1e2>
        goto icmperr;
 801a98c:	bf00      	nop
 801a98e:	e002      	b.n	801a996 <icmp_input+0x1e2>
          goto icmperr;
 801a990:	bf00      	nop
 801a992:	e000      	b.n	801a996 <icmp_input+0x1e2>
          goto icmperr;
 801a994:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 801a996:	6878      	ldr	r0, [r7, #4]
 801a998:	f7f8 fd96 	bl	80134c8 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801a99c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801a99e:	3728      	adds	r7, #40	; 0x28
 801a9a0:	46bd      	mov	sp, r7
 801a9a2:	bd80      	pop	{r7, pc}
 801a9a4:	2001e768 	.word	0x2001e768
 801a9a8:	2001e77c 	.word	0x2001e77c
 801a9ac:	08020ac8 	.word	0x08020ac8
 801a9b0:	08020b00 	.word	0x08020b00
 801a9b4:	08020b38 	.word	0x08020b38
 801a9b8:	08020b60 	.word	0x08020b60

0801a9bc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 801a9bc:	b580      	push	{r7, lr}
 801a9be:	b082      	sub	sp, #8
 801a9c0:	af00      	add	r7, sp, #0
 801a9c2:	6078      	str	r0, [r7, #4]
 801a9c4:	460b      	mov	r3, r1
 801a9c6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 801a9c8:	78fb      	ldrb	r3, [r7, #3]
 801a9ca:	461a      	mov	r2, r3
 801a9cc:	2103      	movs	r1, #3
 801a9ce:	6878      	ldr	r0, [r7, #4]
 801a9d0:	f000 f814 	bl	801a9fc <icmp_send_response>
}
 801a9d4:	bf00      	nop
 801a9d6:	3708      	adds	r7, #8
 801a9d8:	46bd      	mov	sp, r7
 801a9da:	bd80      	pop	{r7, pc}

0801a9dc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 801a9dc:	b580      	push	{r7, lr}
 801a9de:	b082      	sub	sp, #8
 801a9e0:	af00      	add	r7, sp, #0
 801a9e2:	6078      	str	r0, [r7, #4]
 801a9e4:	460b      	mov	r3, r1
 801a9e6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 801a9e8:	78fb      	ldrb	r3, [r7, #3]
 801a9ea:	461a      	mov	r2, r3
 801a9ec:	210b      	movs	r1, #11
 801a9ee:	6878      	ldr	r0, [r7, #4]
 801a9f0:	f000 f804 	bl	801a9fc <icmp_send_response>
}
 801a9f4:	bf00      	nop
 801a9f6:	3708      	adds	r7, #8
 801a9f8:	46bd      	mov	sp, r7
 801a9fa:	bd80      	pop	{r7, pc}

0801a9fc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 801a9fc:	b580      	push	{r7, lr}
 801a9fe:	b08c      	sub	sp, #48	; 0x30
 801aa00:	af04      	add	r7, sp, #16
 801aa02:	6078      	str	r0, [r7, #4]
 801aa04:	460b      	mov	r3, r1
 801aa06:	70fb      	strb	r3, [r7, #3]
 801aa08:	4613      	mov	r3, r2
 801aa0a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801aa0c:	f44f 7220 	mov.w	r2, #640	; 0x280
 801aa10:	2124      	movs	r1, #36	; 0x24
 801aa12:	2022      	movs	r0, #34	; 0x22
 801aa14:	f7f8 fa74 	bl	8012f00 <pbuf_alloc>
 801aa18:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801aa1a:	69fb      	ldr	r3, [r7, #28]
 801aa1c:	2b00      	cmp	r3, #0
 801aa1e:	d04c      	beq.n	801aaba <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 801aa20:	69fb      	ldr	r3, [r7, #28]
 801aa22:	895b      	ldrh	r3, [r3, #10]
 801aa24:	2b23      	cmp	r3, #35	; 0x23
 801aa26:	d806      	bhi.n	801aa36 <icmp_send_response+0x3a>
 801aa28:	4b26      	ldr	r3, [pc, #152]	; (801aac4 <icmp_send_response+0xc8>)
 801aa2a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801aa2e:	4926      	ldr	r1, [pc, #152]	; (801aac8 <icmp_send_response+0xcc>)
 801aa30:	4826      	ldr	r0, [pc, #152]	; (801aacc <icmp_send_response+0xd0>)
 801aa32:	f002 fd3b 	bl	801d4ac <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 801aa36:	687b      	ldr	r3, [r7, #4]
 801aa38:	685b      	ldr	r3, [r3, #4]
 801aa3a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801aa3c:	69fb      	ldr	r3, [r7, #28]
 801aa3e:	685b      	ldr	r3, [r3, #4]
 801aa40:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 801aa42:	697b      	ldr	r3, [r7, #20]
 801aa44:	78fa      	ldrb	r2, [r7, #3]
 801aa46:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 801aa48:	697b      	ldr	r3, [r7, #20]
 801aa4a:	78ba      	ldrb	r2, [r7, #2]
 801aa4c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801aa4e:	697b      	ldr	r3, [r7, #20]
 801aa50:	2200      	movs	r2, #0
 801aa52:	711a      	strb	r2, [r3, #4]
 801aa54:	2200      	movs	r2, #0
 801aa56:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 801aa58:	697b      	ldr	r3, [r7, #20]
 801aa5a:	2200      	movs	r2, #0
 801aa5c:	719a      	strb	r2, [r3, #6]
 801aa5e:	2200      	movs	r2, #0
 801aa60:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 801aa62:	69fb      	ldr	r3, [r7, #28]
 801aa64:	685b      	ldr	r3, [r3, #4]
 801aa66:	f103 0008 	add.w	r0, r3, #8
 801aa6a:	687b      	ldr	r3, [r7, #4]
 801aa6c:	685b      	ldr	r3, [r3, #4]
 801aa6e:	221c      	movs	r2, #28
 801aa70:	4619      	mov	r1, r3
 801aa72:	f002 fe4c 	bl	801d70e <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 801aa76:	69bb      	ldr	r3, [r7, #24]
 801aa78:	68db      	ldr	r3, [r3, #12]
 801aa7a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801aa7c:	f107 030c 	add.w	r3, r7, #12
 801aa80:	4618      	mov	r0, r3
 801aa82:	f000 f825 	bl	801aad0 <ip4_route>
 801aa86:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 801aa88:	693b      	ldr	r3, [r7, #16]
 801aa8a:	2b00      	cmp	r3, #0
 801aa8c:	d011      	beq.n	801aab2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801aa8e:	697b      	ldr	r3, [r7, #20]
 801aa90:	2200      	movs	r2, #0
 801aa92:	709a      	strb	r2, [r3, #2]
 801aa94:	2200      	movs	r2, #0
 801aa96:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 801aa98:	f107 020c 	add.w	r2, r7, #12
 801aa9c:	693b      	ldr	r3, [r7, #16]
 801aa9e:	9302      	str	r3, [sp, #8]
 801aaa0:	2301      	movs	r3, #1
 801aaa2:	9301      	str	r3, [sp, #4]
 801aaa4:	2300      	movs	r3, #0
 801aaa6:	9300      	str	r3, [sp, #0]
 801aaa8:	23ff      	movs	r3, #255	; 0xff
 801aaaa:	2100      	movs	r1, #0
 801aaac:	69f8      	ldr	r0, [r7, #28]
 801aaae:	f000 f9cd 	bl	801ae4c <ip4_output_if>
  }
  pbuf_free(q);
 801aab2:	69f8      	ldr	r0, [r7, #28]
 801aab4:	f7f8 fd08 	bl	80134c8 <pbuf_free>
 801aab8:	e000      	b.n	801aabc <icmp_send_response+0xc0>
    return;
 801aaba:	bf00      	nop
}
 801aabc:	3720      	adds	r7, #32
 801aabe:	46bd      	mov	sp, r7
 801aac0:	bd80      	pop	{r7, pc}
 801aac2:	bf00      	nop
 801aac4:	08020ac8 	.word	0x08020ac8
 801aac8:	08020b94 	.word	0x08020b94
 801aacc:	08020b38 	.word	0x08020b38

0801aad0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 801aad0:	b480      	push	{r7}
 801aad2:	b085      	sub	sp, #20
 801aad4:	af00      	add	r7, sp, #0
 801aad6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 801aad8:	4b33      	ldr	r3, [pc, #204]	; (801aba8 <ip4_route+0xd8>)
 801aada:	681b      	ldr	r3, [r3, #0]
 801aadc:	60fb      	str	r3, [r7, #12]
 801aade:	e036      	b.n	801ab4e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 801aae0:	68fb      	ldr	r3, [r7, #12]
 801aae2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801aae6:	f003 0301 	and.w	r3, r3, #1
 801aaea:	b2db      	uxtb	r3, r3
 801aaec:	2b00      	cmp	r3, #0
 801aaee:	d02b      	beq.n	801ab48 <ip4_route+0x78>
 801aaf0:	68fb      	ldr	r3, [r7, #12]
 801aaf2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801aaf6:	089b      	lsrs	r3, r3, #2
 801aaf8:	f003 0301 	and.w	r3, r3, #1
 801aafc:	b2db      	uxtb	r3, r3
 801aafe:	2b00      	cmp	r3, #0
 801ab00:	d022      	beq.n	801ab48 <ip4_route+0x78>
 801ab02:	68fb      	ldr	r3, [r7, #12]
 801ab04:	3304      	adds	r3, #4
 801ab06:	681b      	ldr	r3, [r3, #0]
 801ab08:	2b00      	cmp	r3, #0
 801ab0a:	d01d      	beq.n	801ab48 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801ab0c:	687b      	ldr	r3, [r7, #4]
 801ab0e:	681a      	ldr	r2, [r3, #0]
 801ab10:	68fb      	ldr	r3, [r7, #12]
 801ab12:	3304      	adds	r3, #4
 801ab14:	681b      	ldr	r3, [r3, #0]
 801ab16:	405a      	eors	r2, r3
 801ab18:	68fb      	ldr	r3, [r7, #12]
 801ab1a:	3308      	adds	r3, #8
 801ab1c:	681b      	ldr	r3, [r3, #0]
 801ab1e:	4013      	ands	r3, r2
 801ab20:	2b00      	cmp	r3, #0
 801ab22:	d101      	bne.n	801ab28 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 801ab24:	68fb      	ldr	r3, [r7, #12]
 801ab26:	e038      	b.n	801ab9a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 801ab28:	68fb      	ldr	r3, [r7, #12]
 801ab2a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801ab2e:	f003 0302 	and.w	r3, r3, #2
 801ab32:	2b00      	cmp	r3, #0
 801ab34:	d108      	bne.n	801ab48 <ip4_route+0x78>
 801ab36:	687b      	ldr	r3, [r7, #4]
 801ab38:	681a      	ldr	r2, [r3, #0]
 801ab3a:	68fb      	ldr	r3, [r7, #12]
 801ab3c:	330c      	adds	r3, #12
 801ab3e:	681b      	ldr	r3, [r3, #0]
 801ab40:	429a      	cmp	r2, r3
 801ab42:	d101      	bne.n	801ab48 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 801ab44:	68fb      	ldr	r3, [r7, #12]
 801ab46:	e028      	b.n	801ab9a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 801ab48:	68fb      	ldr	r3, [r7, #12]
 801ab4a:	681b      	ldr	r3, [r3, #0]
 801ab4c:	60fb      	str	r3, [r7, #12]
 801ab4e:	68fb      	ldr	r3, [r7, #12]
 801ab50:	2b00      	cmp	r3, #0
 801ab52:	d1c5      	bne.n	801aae0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801ab54:	4b15      	ldr	r3, [pc, #84]	; (801abac <ip4_route+0xdc>)
 801ab56:	681b      	ldr	r3, [r3, #0]
 801ab58:	2b00      	cmp	r3, #0
 801ab5a:	d01a      	beq.n	801ab92 <ip4_route+0xc2>
 801ab5c:	4b13      	ldr	r3, [pc, #76]	; (801abac <ip4_route+0xdc>)
 801ab5e:	681b      	ldr	r3, [r3, #0]
 801ab60:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801ab64:	f003 0301 	and.w	r3, r3, #1
 801ab68:	2b00      	cmp	r3, #0
 801ab6a:	d012      	beq.n	801ab92 <ip4_route+0xc2>
 801ab6c:	4b0f      	ldr	r3, [pc, #60]	; (801abac <ip4_route+0xdc>)
 801ab6e:	681b      	ldr	r3, [r3, #0]
 801ab70:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801ab74:	f003 0304 	and.w	r3, r3, #4
 801ab78:	2b00      	cmp	r3, #0
 801ab7a:	d00a      	beq.n	801ab92 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801ab7c:	4b0b      	ldr	r3, [pc, #44]	; (801abac <ip4_route+0xdc>)
 801ab7e:	681b      	ldr	r3, [r3, #0]
 801ab80:	3304      	adds	r3, #4
 801ab82:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 801ab84:	2b00      	cmp	r3, #0
 801ab86:	d004      	beq.n	801ab92 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801ab88:	687b      	ldr	r3, [r7, #4]
 801ab8a:	681b      	ldr	r3, [r3, #0]
 801ab8c:	b2db      	uxtb	r3, r3
 801ab8e:	2b7f      	cmp	r3, #127	; 0x7f
 801ab90:	d101      	bne.n	801ab96 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 801ab92:	2300      	movs	r3, #0
 801ab94:	e001      	b.n	801ab9a <ip4_route+0xca>
  }

  return netif_default;
 801ab96:	4b05      	ldr	r3, [pc, #20]	; (801abac <ip4_route+0xdc>)
 801ab98:	681b      	ldr	r3, [r3, #0]
}
 801ab9a:	4618      	mov	r0, r3
 801ab9c:	3714      	adds	r7, #20
 801ab9e:	46bd      	mov	sp, r7
 801aba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 801aba4:	4770      	bx	lr
 801aba6:	bf00      	nop
 801aba8:	20024040 	.word	0x20024040
 801abac:	20024044 	.word	0x20024044

0801abb0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 801abb0:	b580      	push	{r7, lr}
 801abb2:	b082      	sub	sp, #8
 801abb4:	af00      	add	r7, sp, #0
 801abb6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 801abb8:	687b      	ldr	r3, [r7, #4]
 801abba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801abbe:	f003 0301 	and.w	r3, r3, #1
 801abc2:	b2db      	uxtb	r3, r3
 801abc4:	2b00      	cmp	r3, #0
 801abc6:	d016      	beq.n	801abf6 <ip4_input_accept+0x46>
 801abc8:	687b      	ldr	r3, [r7, #4]
 801abca:	3304      	adds	r3, #4
 801abcc:	681b      	ldr	r3, [r3, #0]
 801abce:	2b00      	cmp	r3, #0
 801abd0:	d011      	beq.n	801abf6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801abd2:	4b0b      	ldr	r3, [pc, #44]	; (801ac00 <ip4_input_accept+0x50>)
 801abd4:	695a      	ldr	r2, [r3, #20]
 801abd6:	687b      	ldr	r3, [r7, #4]
 801abd8:	3304      	adds	r3, #4
 801abda:	681b      	ldr	r3, [r3, #0]
 801abdc:	429a      	cmp	r2, r3
 801abde:	d008      	beq.n	801abf2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 801abe0:	4b07      	ldr	r3, [pc, #28]	; (801ac00 <ip4_input_accept+0x50>)
 801abe2:	695b      	ldr	r3, [r3, #20]
 801abe4:	6879      	ldr	r1, [r7, #4]
 801abe6:	4618      	mov	r0, r3
 801abe8:	f000 fa08 	bl	801affc <ip4_addr_isbroadcast_u32>
 801abec:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 801abee:	2b00      	cmp	r3, #0
 801abf0:	d001      	beq.n	801abf6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 801abf2:	2301      	movs	r3, #1
 801abf4:	e000      	b.n	801abf8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 801abf6:	2300      	movs	r3, #0
}
 801abf8:	4618      	mov	r0, r3
 801abfa:	3708      	adds	r7, #8
 801abfc:	46bd      	mov	sp, r7
 801abfe:	bd80      	pop	{r7, pc}
 801ac00:	2001e768 	.word	0x2001e768

0801ac04 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 801ac04:	b580      	push	{r7, lr}
 801ac06:	b086      	sub	sp, #24
 801ac08:	af00      	add	r7, sp, #0
 801ac0a:	6078      	str	r0, [r7, #4]
 801ac0c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801ac0e:	687b      	ldr	r3, [r7, #4]
 801ac10:	685b      	ldr	r3, [r3, #4]
 801ac12:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 801ac14:	697b      	ldr	r3, [r7, #20]
 801ac16:	781b      	ldrb	r3, [r3, #0]
 801ac18:	091b      	lsrs	r3, r3, #4
 801ac1a:	b2db      	uxtb	r3, r3
 801ac1c:	2b04      	cmp	r3, #4
 801ac1e:	d004      	beq.n	801ac2a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 801ac20:	6878      	ldr	r0, [r7, #4]
 801ac22:	f7f8 fc51 	bl	80134c8 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 801ac26:	2300      	movs	r3, #0
 801ac28:	e107      	b.n	801ae3a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801ac2a:	697b      	ldr	r3, [r7, #20]
 801ac2c:	781b      	ldrb	r3, [r3, #0]
 801ac2e:	f003 030f 	and.w	r3, r3, #15
 801ac32:	b2db      	uxtb	r3, r3
 801ac34:	009b      	lsls	r3, r3, #2
 801ac36:	b2db      	uxtb	r3, r3
 801ac38:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801ac3a:	697b      	ldr	r3, [r7, #20]
 801ac3c:	885b      	ldrh	r3, [r3, #2]
 801ac3e:	b29b      	uxth	r3, r3
 801ac40:	4618      	mov	r0, r3
 801ac42:	f7f7 f83f 	bl	8011cc4 <lwip_htons>
 801ac46:	4603      	mov	r3, r0
 801ac48:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801ac4a:	687b      	ldr	r3, [r7, #4]
 801ac4c:	891b      	ldrh	r3, [r3, #8]
 801ac4e:	89ba      	ldrh	r2, [r7, #12]
 801ac50:	429a      	cmp	r2, r3
 801ac52:	d204      	bcs.n	801ac5e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 801ac54:	89bb      	ldrh	r3, [r7, #12]
 801ac56:	4619      	mov	r1, r3
 801ac58:	6878      	ldr	r0, [r7, #4]
 801ac5a:	f7f8 faaf 	bl	80131bc <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801ac5e:	687b      	ldr	r3, [r7, #4]
 801ac60:	895b      	ldrh	r3, [r3, #10]
 801ac62:	89fa      	ldrh	r2, [r7, #14]
 801ac64:	429a      	cmp	r2, r3
 801ac66:	d807      	bhi.n	801ac78 <ip4_input+0x74>
 801ac68:	687b      	ldr	r3, [r7, #4]
 801ac6a:	891b      	ldrh	r3, [r3, #8]
 801ac6c:	89ba      	ldrh	r2, [r7, #12]
 801ac6e:	429a      	cmp	r2, r3
 801ac70:	d802      	bhi.n	801ac78 <ip4_input+0x74>
 801ac72:	89fb      	ldrh	r3, [r7, #14]
 801ac74:	2b13      	cmp	r3, #19
 801ac76:	d804      	bhi.n	801ac82 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 801ac78:	6878      	ldr	r0, [r7, #4]
 801ac7a:	f7f8 fc25 	bl	80134c8 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801ac7e:	2300      	movs	r3, #0
 801ac80:	e0db      	b.n	801ae3a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 801ac82:	697b      	ldr	r3, [r7, #20]
 801ac84:	691b      	ldr	r3, [r3, #16]
 801ac86:	4a6f      	ldr	r2, [pc, #444]	; (801ae44 <ip4_input+0x240>)
 801ac88:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801ac8a:	697b      	ldr	r3, [r7, #20]
 801ac8c:	68db      	ldr	r3, [r3, #12]
 801ac8e:	4a6d      	ldr	r2, [pc, #436]	; (801ae44 <ip4_input+0x240>)
 801ac90:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801ac92:	4b6c      	ldr	r3, [pc, #432]	; (801ae44 <ip4_input+0x240>)
 801ac94:	695b      	ldr	r3, [r3, #20]
 801ac96:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801ac9a:	2be0      	cmp	r3, #224	; 0xe0
 801ac9c:	d112      	bne.n	801acc4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801ac9e:	683b      	ldr	r3, [r7, #0]
 801aca0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801aca4:	f003 0301 	and.w	r3, r3, #1
 801aca8:	b2db      	uxtb	r3, r3
 801acaa:	2b00      	cmp	r3, #0
 801acac:	d007      	beq.n	801acbe <ip4_input+0xba>
 801acae:	683b      	ldr	r3, [r7, #0]
 801acb0:	3304      	adds	r3, #4
 801acb2:	681b      	ldr	r3, [r3, #0]
 801acb4:	2b00      	cmp	r3, #0
 801acb6:	d002      	beq.n	801acbe <ip4_input+0xba>
      netif = inp;
 801acb8:	683b      	ldr	r3, [r7, #0]
 801acba:	613b      	str	r3, [r7, #16]
 801acbc:	e02a      	b.n	801ad14 <ip4_input+0x110>
    } else {
      netif = NULL;
 801acbe:	2300      	movs	r3, #0
 801acc0:	613b      	str	r3, [r7, #16]
 801acc2:	e027      	b.n	801ad14 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 801acc4:	6838      	ldr	r0, [r7, #0]
 801acc6:	f7ff ff73 	bl	801abb0 <ip4_input_accept>
 801acca:	4603      	mov	r3, r0
 801accc:	2b00      	cmp	r3, #0
 801acce:	d002      	beq.n	801acd6 <ip4_input+0xd2>
      netif = inp;
 801acd0:	683b      	ldr	r3, [r7, #0]
 801acd2:	613b      	str	r3, [r7, #16]
 801acd4:	e01e      	b.n	801ad14 <ip4_input+0x110>
    } else {
      netif = NULL;
 801acd6:	2300      	movs	r3, #0
 801acd8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 801acda:	4b5a      	ldr	r3, [pc, #360]	; (801ae44 <ip4_input+0x240>)
 801acdc:	695b      	ldr	r3, [r3, #20]
 801acde:	b2db      	uxtb	r3, r3
 801ace0:	2b7f      	cmp	r3, #127	; 0x7f
 801ace2:	d017      	beq.n	801ad14 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 801ace4:	4b58      	ldr	r3, [pc, #352]	; (801ae48 <ip4_input+0x244>)
 801ace6:	681b      	ldr	r3, [r3, #0]
 801ace8:	613b      	str	r3, [r7, #16]
 801acea:	e00e      	b.n	801ad0a <ip4_input+0x106>
          if (netif == inp) {
 801acec:	693a      	ldr	r2, [r7, #16]
 801acee:	683b      	ldr	r3, [r7, #0]
 801acf0:	429a      	cmp	r2, r3
 801acf2:	d006      	beq.n	801ad02 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 801acf4:	6938      	ldr	r0, [r7, #16]
 801acf6:	f7ff ff5b 	bl	801abb0 <ip4_input_accept>
 801acfa:	4603      	mov	r3, r0
 801acfc:	2b00      	cmp	r3, #0
 801acfe:	d108      	bne.n	801ad12 <ip4_input+0x10e>
 801ad00:	e000      	b.n	801ad04 <ip4_input+0x100>
            continue;
 801ad02:	bf00      	nop
        NETIF_FOREACH(netif) {
 801ad04:	693b      	ldr	r3, [r7, #16]
 801ad06:	681b      	ldr	r3, [r3, #0]
 801ad08:	613b      	str	r3, [r7, #16]
 801ad0a:	693b      	ldr	r3, [r7, #16]
 801ad0c:	2b00      	cmp	r3, #0
 801ad0e:	d1ed      	bne.n	801acec <ip4_input+0xe8>
 801ad10:	e000      	b.n	801ad14 <ip4_input+0x110>
            break;
 801ad12:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801ad14:	4b4b      	ldr	r3, [pc, #300]	; (801ae44 <ip4_input+0x240>)
 801ad16:	691b      	ldr	r3, [r3, #16]
 801ad18:	6839      	ldr	r1, [r7, #0]
 801ad1a:	4618      	mov	r0, r3
 801ad1c:	f000 f96e 	bl	801affc <ip4_addr_isbroadcast_u32>
 801ad20:	4603      	mov	r3, r0
 801ad22:	2b00      	cmp	r3, #0
 801ad24:	d105      	bne.n	801ad32 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 801ad26:	4b47      	ldr	r3, [pc, #284]	; (801ae44 <ip4_input+0x240>)
 801ad28:	691b      	ldr	r3, [r3, #16]
 801ad2a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801ad2e:	2be0      	cmp	r3, #224	; 0xe0
 801ad30:	d104      	bne.n	801ad3c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 801ad32:	6878      	ldr	r0, [r7, #4]
 801ad34:	f7f8 fbc8 	bl	80134c8 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 801ad38:	2300      	movs	r3, #0
 801ad3a:	e07e      	b.n	801ae3a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801ad3c:	693b      	ldr	r3, [r7, #16]
 801ad3e:	2b00      	cmp	r3, #0
 801ad40:	d104      	bne.n	801ad4c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 801ad42:	6878      	ldr	r0, [r7, #4]
 801ad44:	f7f8 fbc0 	bl	80134c8 <pbuf_free>
    return ERR_OK;
 801ad48:	2300      	movs	r3, #0
 801ad4a:	e076      	b.n	801ae3a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801ad4c:	697b      	ldr	r3, [r7, #20]
 801ad4e:	88db      	ldrh	r3, [r3, #6]
 801ad50:	b29b      	uxth	r3, r3
 801ad52:	461a      	mov	r2, r3
 801ad54:	f64f 733f 	movw	r3, #65343	; 0xff3f
 801ad58:	4013      	ands	r3, r2
 801ad5a:	2b00      	cmp	r3, #0
 801ad5c:	d00b      	beq.n	801ad76 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801ad5e:	6878      	ldr	r0, [r7, #4]
 801ad60:	f000 fc92 	bl	801b688 <ip4_reass>
 801ad64:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 801ad66:	687b      	ldr	r3, [r7, #4]
 801ad68:	2b00      	cmp	r3, #0
 801ad6a:	d101      	bne.n	801ad70 <ip4_input+0x16c>
      return ERR_OK;
 801ad6c:	2300      	movs	r3, #0
 801ad6e:	e064      	b.n	801ae3a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 801ad70:	687b      	ldr	r3, [r7, #4]
 801ad72:	685b      	ldr	r3, [r3, #4]
 801ad74:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 801ad76:	4a33      	ldr	r2, [pc, #204]	; (801ae44 <ip4_input+0x240>)
 801ad78:	693b      	ldr	r3, [r7, #16]
 801ad7a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801ad7c:	4a31      	ldr	r2, [pc, #196]	; (801ae44 <ip4_input+0x240>)
 801ad7e:	683b      	ldr	r3, [r7, #0]
 801ad80:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 801ad82:	4a30      	ldr	r2, [pc, #192]	; (801ae44 <ip4_input+0x240>)
 801ad84:	697b      	ldr	r3, [r7, #20]
 801ad86:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 801ad88:	697b      	ldr	r3, [r7, #20]
 801ad8a:	781b      	ldrb	r3, [r3, #0]
 801ad8c:	f003 030f 	and.w	r3, r3, #15
 801ad90:	b2db      	uxtb	r3, r3
 801ad92:	009b      	lsls	r3, r3, #2
 801ad94:	b2db      	uxtb	r3, r3
 801ad96:	b29a      	uxth	r2, r3
 801ad98:	4b2a      	ldr	r3, [pc, #168]	; (801ae44 <ip4_input+0x240>)
 801ad9a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801ad9c:	89fb      	ldrh	r3, [r7, #14]
 801ad9e:	4619      	mov	r1, r3
 801ada0:	6878      	ldr	r0, [r7, #4]
 801ada2:	f7f8 fb0b 	bl	80133bc <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 801ada6:	697b      	ldr	r3, [r7, #20]
 801ada8:	7a5b      	ldrb	r3, [r3, #9]
 801adaa:	2b11      	cmp	r3, #17
 801adac:	d006      	beq.n	801adbc <ip4_input+0x1b8>
 801adae:	2b11      	cmp	r3, #17
 801adb0:	dc13      	bgt.n	801adda <ip4_input+0x1d6>
 801adb2:	2b01      	cmp	r3, #1
 801adb4:	d00c      	beq.n	801add0 <ip4_input+0x1cc>
 801adb6:	2b06      	cmp	r3, #6
 801adb8:	d005      	beq.n	801adc6 <ip4_input+0x1c2>
 801adba:	e00e      	b.n	801adda <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 801adbc:	6839      	ldr	r1, [r7, #0]
 801adbe:	6878      	ldr	r0, [r7, #4]
 801adc0:	f7fe f9b0 	bl	8019124 <udp_input>
        break;
 801adc4:	e026      	b.n	801ae14 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 801adc6:	6839      	ldr	r1, [r7, #0]
 801adc8:	6878      	ldr	r0, [r7, #4]
 801adca:	f7fa f9c1 	bl	8015150 <tcp_input>
        break;
 801adce:	e021      	b.n	801ae14 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 801add0:	6839      	ldr	r1, [r7, #0]
 801add2:	6878      	ldr	r0, [r7, #4]
 801add4:	f7ff fcee 	bl	801a7b4 <icmp_input>
        break;
 801add8:	e01c      	b.n	801ae14 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801adda:	4b1a      	ldr	r3, [pc, #104]	; (801ae44 <ip4_input+0x240>)
 801addc:	695b      	ldr	r3, [r3, #20]
 801adde:	6939      	ldr	r1, [r7, #16]
 801ade0:	4618      	mov	r0, r3
 801ade2:	f000 f90b 	bl	801affc <ip4_addr_isbroadcast_u32>
 801ade6:	4603      	mov	r3, r0
 801ade8:	2b00      	cmp	r3, #0
 801adea:	d10f      	bne.n	801ae0c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 801adec:	4b15      	ldr	r3, [pc, #84]	; (801ae44 <ip4_input+0x240>)
 801adee:	695b      	ldr	r3, [r3, #20]
 801adf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 801adf4:	2be0      	cmp	r3, #224	; 0xe0
 801adf6:	d009      	beq.n	801ae0c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 801adf8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 801adfc:	4619      	mov	r1, r3
 801adfe:	6878      	ldr	r0, [r7, #4]
 801ae00:	f7f8 fb4f 	bl	80134a2 <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 801ae04:	2102      	movs	r1, #2
 801ae06:	6878      	ldr	r0, [r7, #4]
 801ae08:	f7ff fdd8 	bl	801a9bc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801ae0c:	6878      	ldr	r0, [r7, #4]
 801ae0e:	f7f8 fb5b 	bl	80134c8 <pbuf_free>
        break;
 801ae12:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 801ae14:	4b0b      	ldr	r3, [pc, #44]	; (801ae44 <ip4_input+0x240>)
 801ae16:	2200      	movs	r2, #0
 801ae18:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801ae1a:	4b0a      	ldr	r3, [pc, #40]	; (801ae44 <ip4_input+0x240>)
 801ae1c:	2200      	movs	r2, #0
 801ae1e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 801ae20:	4b08      	ldr	r3, [pc, #32]	; (801ae44 <ip4_input+0x240>)
 801ae22:	2200      	movs	r2, #0
 801ae24:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 801ae26:	4b07      	ldr	r3, [pc, #28]	; (801ae44 <ip4_input+0x240>)
 801ae28:	2200      	movs	r2, #0
 801ae2a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801ae2c:	4b05      	ldr	r3, [pc, #20]	; (801ae44 <ip4_input+0x240>)
 801ae2e:	2200      	movs	r2, #0
 801ae30:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 801ae32:	4b04      	ldr	r3, [pc, #16]	; (801ae44 <ip4_input+0x240>)
 801ae34:	2200      	movs	r2, #0
 801ae36:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 801ae38:	2300      	movs	r3, #0
}
 801ae3a:	4618      	mov	r0, r3
 801ae3c:	3718      	adds	r7, #24
 801ae3e:	46bd      	mov	sp, r7
 801ae40:	bd80      	pop	{r7, pc}
 801ae42:	bf00      	nop
 801ae44:	2001e768 	.word	0x2001e768
 801ae48:	20024040 	.word	0x20024040

0801ae4c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801ae4c:	b580      	push	{r7, lr}
 801ae4e:	b08a      	sub	sp, #40	; 0x28
 801ae50:	af04      	add	r7, sp, #16
 801ae52:	60f8      	str	r0, [r7, #12]
 801ae54:	60b9      	str	r1, [r7, #8]
 801ae56:	607a      	str	r2, [r7, #4]
 801ae58:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801ae5a:	68bb      	ldr	r3, [r7, #8]
 801ae5c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801ae5e:	687b      	ldr	r3, [r7, #4]
 801ae60:	2b00      	cmp	r3, #0
 801ae62:	d009      	beq.n	801ae78 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 801ae64:	68bb      	ldr	r3, [r7, #8]
 801ae66:	2b00      	cmp	r3, #0
 801ae68:	d003      	beq.n	801ae72 <ip4_output_if+0x26>
 801ae6a:	68bb      	ldr	r3, [r7, #8]
 801ae6c:	681b      	ldr	r3, [r3, #0]
 801ae6e:	2b00      	cmp	r3, #0
 801ae70:	d102      	bne.n	801ae78 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 801ae72:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ae74:	3304      	adds	r3, #4
 801ae76:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 801ae78:	78fa      	ldrb	r2, [r7, #3]
 801ae7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801ae7c:	9302      	str	r3, [sp, #8]
 801ae7e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 801ae82:	9301      	str	r3, [sp, #4]
 801ae84:	f897 3020 	ldrb.w	r3, [r7, #32]
 801ae88:	9300      	str	r3, [sp, #0]
 801ae8a:	4613      	mov	r3, r2
 801ae8c:	687a      	ldr	r2, [r7, #4]
 801ae8e:	6979      	ldr	r1, [r7, #20]
 801ae90:	68f8      	ldr	r0, [r7, #12]
 801ae92:	f000 f805 	bl	801aea0 <ip4_output_if_src>
 801ae96:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 801ae98:	4618      	mov	r0, r3
 801ae9a:	3718      	adds	r7, #24
 801ae9c:	46bd      	mov	sp, r7
 801ae9e:	bd80      	pop	{r7, pc}

0801aea0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 801aea0:	b580      	push	{r7, lr}
 801aea2:	b088      	sub	sp, #32
 801aea4:	af00      	add	r7, sp, #0
 801aea6:	60f8      	str	r0, [r7, #12]
 801aea8:	60b9      	str	r1, [r7, #8]
 801aeaa:	607a      	str	r2, [r7, #4]
 801aeac:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 801aeae:	68fb      	ldr	r3, [r7, #12]
 801aeb0:	7b9b      	ldrb	r3, [r3, #14]
 801aeb2:	2b01      	cmp	r3, #1
 801aeb4:	d006      	beq.n	801aec4 <ip4_output_if_src+0x24>
 801aeb6:	4b4b      	ldr	r3, [pc, #300]	; (801afe4 <ip4_output_if_src+0x144>)
 801aeb8:	f44f 7255 	mov.w	r2, #852	; 0x354
 801aebc:	494a      	ldr	r1, [pc, #296]	; (801afe8 <ip4_output_if_src+0x148>)
 801aebe:	484b      	ldr	r0, [pc, #300]	; (801afec <ip4_output_if_src+0x14c>)
 801aec0:	f002 faf4 	bl	801d4ac <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 801aec4:	687b      	ldr	r3, [r7, #4]
 801aec6:	2b00      	cmp	r3, #0
 801aec8:	d060      	beq.n	801af8c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 801aeca:	2314      	movs	r3, #20
 801aecc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 801aece:	2114      	movs	r1, #20
 801aed0:	68f8      	ldr	r0, [r7, #12]
 801aed2:	f7f8 fa63 	bl	801339c <pbuf_add_header>
 801aed6:	4603      	mov	r3, r0
 801aed8:	2b00      	cmp	r3, #0
 801aeda:	d002      	beq.n	801aee2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801aedc:	f06f 0301 	mvn.w	r3, #1
 801aee0:	e07c      	b.n	801afdc <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 801aee2:	68fb      	ldr	r3, [r7, #12]
 801aee4:	685b      	ldr	r3, [r3, #4]
 801aee6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 801aee8:	68fb      	ldr	r3, [r7, #12]
 801aeea:	895b      	ldrh	r3, [r3, #10]
 801aeec:	2b13      	cmp	r3, #19
 801aeee:	d806      	bhi.n	801aefe <ip4_output_if_src+0x5e>
 801aef0:	4b3c      	ldr	r3, [pc, #240]	; (801afe4 <ip4_output_if_src+0x144>)
 801aef2:	f44f 7262 	mov.w	r2, #904	; 0x388
 801aef6:	493e      	ldr	r1, [pc, #248]	; (801aff0 <ip4_output_if_src+0x150>)
 801aef8:	483c      	ldr	r0, [pc, #240]	; (801afec <ip4_output_if_src+0x14c>)
 801aefa:	f002 fad7 	bl	801d4ac <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 801aefe:	69fb      	ldr	r3, [r7, #28]
 801af00:	78fa      	ldrb	r2, [r7, #3]
 801af02:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 801af04:	69fb      	ldr	r3, [r7, #28]
 801af06:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801af0a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801af0c:	687b      	ldr	r3, [r7, #4]
 801af0e:	681a      	ldr	r2, [r3, #0]
 801af10:	69fb      	ldr	r3, [r7, #28]
 801af12:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 801af14:	8b7b      	ldrh	r3, [r7, #26]
 801af16:	089b      	lsrs	r3, r3, #2
 801af18:	b29b      	uxth	r3, r3
 801af1a:	b2db      	uxtb	r3, r3
 801af1c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801af20:	b2da      	uxtb	r2, r3
 801af22:	69fb      	ldr	r3, [r7, #28]
 801af24:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 801af26:	69fb      	ldr	r3, [r7, #28]
 801af28:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801af2c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801af2e:	68fb      	ldr	r3, [r7, #12]
 801af30:	891b      	ldrh	r3, [r3, #8]
 801af32:	4618      	mov	r0, r3
 801af34:	f7f6 fec6 	bl	8011cc4 <lwip_htons>
 801af38:	4603      	mov	r3, r0
 801af3a:	461a      	mov	r2, r3
 801af3c:	69fb      	ldr	r3, [r7, #28]
 801af3e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 801af40:	69fb      	ldr	r3, [r7, #28]
 801af42:	2200      	movs	r2, #0
 801af44:	719a      	strb	r2, [r3, #6]
 801af46:	2200      	movs	r2, #0
 801af48:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801af4a:	4b2a      	ldr	r3, [pc, #168]	; (801aff4 <ip4_output_if_src+0x154>)
 801af4c:	881b      	ldrh	r3, [r3, #0]
 801af4e:	4618      	mov	r0, r3
 801af50:	f7f6 feb8 	bl	8011cc4 <lwip_htons>
 801af54:	4603      	mov	r3, r0
 801af56:	461a      	mov	r2, r3
 801af58:	69fb      	ldr	r3, [r7, #28]
 801af5a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801af5c:	4b25      	ldr	r3, [pc, #148]	; (801aff4 <ip4_output_if_src+0x154>)
 801af5e:	881b      	ldrh	r3, [r3, #0]
 801af60:	3301      	adds	r3, #1
 801af62:	b29a      	uxth	r2, r3
 801af64:	4b23      	ldr	r3, [pc, #140]	; (801aff4 <ip4_output_if_src+0x154>)
 801af66:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 801af68:	68bb      	ldr	r3, [r7, #8]
 801af6a:	2b00      	cmp	r3, #0
 801af6c:	d104      	bne.n	801af78 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801af6e:	4b22      	ldr	r3, [pc, #136]	; (801aff8 <ip4_output_if_src+0x158>)
 801af70:	681a      	ldr	r2, [r3, #0]
 801af72:	69fb      	ldr	r3, [r7, #28]
 801af74:	60da      	str	r2, [r3, #12]
 801af76:	e003      	b.n	801af80 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 801af78:	68bb      	ldr	r3, [r7, #8]
 801af7a:	681a      	ldr	r2, [r3, #0]
 801af7c:	69fb      	ldr	r3, [r7, #28]
 801af7e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 801af80:	69fb      	ldr	r3, [r7, #28]
 801af82:	2200      	movs	r2, #0
 801af84:	729a      	strb	r2, [r3, #10]
 801af86:	2200      	movs	r2, #0
 801af88:	72da      	strb	r2, [r3, #11]
 801af8a:	e00f      	b.n	801afac <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801af8c:	68fb      	ldr	r3, [r7, #12]
 801af8e:	895b      	ldrh	r3, [r3, #10]
 801af90:	2b13      	cmp	r3, #19
 801af92:	d802      	bhi.n	801af9a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 801af94:	f06f 0301 	mvn.w	r3, #1
 801af98:	e020      	b.n	801afdc <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801af9a:	68fb      	ldr	r3, [r7, #12]
 801af9c:	685b      	ldr	r3, [r3, #4]
 801af9e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 801afa0:	69fb      	ldr	r3, [r7, #28]
 801afa2:	691b      	ldr	r3, [r3, #16]
 801afa4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 801afa6:	f107 0314 	add.w	r3, r7, #20
 801afaa:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 801afac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801afae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801afb0:	2b00      	cmp	r3, #0
 801afb2:	d00c      	beq.n	801afce <ip4_output_if_src+0x12e>
 801afb4:	68fb      	ldr	r3, [r7, #12]
 801afb6:	891a      	ldrh	r2, [r3, #8]
 801afb8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801afba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801afbc:	429a      	cmp	r2, r3
 801afbe:	d906      	bls.n	801afce <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 801afc0:	687a      	ldr	r2, [r7, #4]
 801afc2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 801afc4:	68f8      	ldr	r0, [r7, #12]
 801afc6:	f000 fd53 	bl	801ba70 <ip4_frag>
 801afca:	4603      	mov	r3, r0
 801afcc:	e006      	b.n	801afdc <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 801afce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801afd0:	695b      	ldr	r3, [r3, #20]
 801afd2:	687a      	ldr	r2, [r7, #4]
 801afd4:	68f9      	ldr	r1, [r7, #12]
 801afd6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801afd8:	4798      	blx	r3
 801afda:	4603      	mov	r3, r0
}
 801afdc:	4618      	mov	r0, r3
 801afde:	3720      	adds	r7, #32
 801afe0:	46bd      	mov	sp, r7
 801afe2:	bd80      	pop	{r7, pc}
 801afe4:	08020bc0 	.word	0x08020bc0
 801afe8:	08020bf4 	.word	0x08020bf4
 801afec:	08020c00 	.word	0x08020c00
 801aff0:	08020c28 	.word	0x08020c28
 801aff4:	2002419e 	.word	0x2002419e
 801aff8:	0802107c 	.word	0x0802107c

0801affc <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 801affc:	b480      	push	{r7}
 801affe:	b085      	sub	sp, #20
 801b000:	af00      	add	r7, sp, #0
 801b002:	6078      	str	r0, [r7, #4]
 801b004:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 801b006:	687b      	ldr	r3, [r7, #4]
 801b008:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 801b00a:	687b      	ldr	r3, [r7, #4]
 801b00c:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b010:	d002      	beq.n	801b018 <ip4_addr_isbroadcast_u32+0x1c>
 801b012:	687b      	ldr	r3, [r7, #4]
 801b014:	2b00      	cmp	r3, #0
 801b016:	d101      	bne.n	801b01c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 801b018:	2301      	movs	r3, #1
 801b01a:	e02a      	b.n	801b072 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 801b01c:	683b      	ldr	r3, [r7, #0]
 801b01e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801b022:	f003 0302 	and.w	r3, r3, #2
 801b026:	2b00      	cmp	r3, #0
 801b028:	d101      	bne.n	801b02e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 801b02a:	2300      	movs	r3, #0
 801b02c:	e021      	b.n	801b072 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 801b02e:	683b      	ldr	r3, [r7, #0]
 801b030:	3304      	adds	r3, #4
 801b032:	681b      	ldr	r3, [r3, #0]
 801b034:	687a      	ldr	r2, [r7, #4]
 801b036:	429a      	cmp	r2, r3
 801b038:	d101      	bne.n	801b03e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 801b03a:	2300      	movs	r3, #0
 801b03c:	e019      	b.n	801b072 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 801b03e:	68fa      	ldr	r2, [r7, #12]
 801b040:	683b      	ldr	r3, [r7, #0]
 801b042:	3304      	adds	r3, #4
 801b044:	681b      	ldr	r3, [r3, #0]
 801b046:	405a      	eors	r2, r3
 801b048:	683b      	ldr	r3, [r7, #0]
 801b04a:	3308      	adds	r3, #8
 801b04c:	681b      	ldr	r3, [r3, #0]
 801b04e:	4013      	ands	r3, r2
 801b050:	2b00      	cmp	r3, #0
 801b052:	d10d      	bne.n	801b070 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801b054:	683b      	ldr	r3, [r7, #0]
 801b056:	3308      	adds	r3, #8
 801b058:	681b      	ldr	r3, [r3, #0]
 801b05a:	43da      	mvns	r2, r3
 801b05c:	687b      	ldr	r3, [r7, #4]
 801b05e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 801b060:	683b      	ldr	r3, [r7, #0]
 801b062:	3308      	adds	r3, #8
 801b064:	681b      	ldr	r3, [r3, #0]
 801b066:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 801b068:	429a      	cmp	r2, r3
 801b06a:	d101      	bne.n	801b070 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 801b06c:	2301      	movs	r3, #1
 801b06e:	e000      	b.n	801b072 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 801b070:	2300      	movs	r3, #0
  }
}
 801b072:	4618      	mov	r0, r3
 801b074:	3714      	adds	r7, #20
 801b076:	46bd      	mov	sp, r7
 801b078:	f85d 7b04 	ldr.w	r7, [sp], #4
 801b07c:	4770      	bx	lr
	...

0801b080 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 801b080:	b580      	push	{r7, lr}
 801b082:	b084      	sub	sp, #16
 801b084:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 801b086:	2300      	movs	r3, #0
 801b088:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 801b08a:	4b12      	ldr	r3, [pc, #72]	; (801b0d4 <ip_reass_tmr+0x54>)
 801b08c:	681b      	ldr	r3, [r3, #0]
 801b08e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 801b090:	e018      	b.n	801b0c4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 801b092:	68fb      	ldr	r3, [r7, #12]
 801b094:	7fdb      	ldrb	r3, [r3, #31]
 801b096:	2b00      	cmp	r3, #0
 801b098:	d00b      	beq.n	801b0b2 <ip_reass_tmr+0x32>
      r->timer--;
 801b09a:	68fb      	ldr	r3, [r7, #12]
 801b09c:	7fdb      	ldrb	r3, [r3, #31]
 801b09e:	3b01      	subs	r3, #1
 801b0a0:	b2da      	uxtb	r2, r3
 801b0a2:	68fb      	ldr	r3, [r7, #12]
 801b0a4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 801b0a6:	68fb      	ldr	r3, [r7, #12]
 801b0a8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 801b0aa:	68fb      	ldr	r3, [r7, #12]
 801b0ac:	681b      	ldr	r3, [r3, #0]
 801b0ae:	60fb      	str	r3, [r7, #12]
 801b0b0:	e008      	b.n	801b0c4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 801b0b2:	68fb      	ldr	r3, [r7, #12]
 801b0b4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 801b0b6:	68fb      	ldr	r3, [r7, #12]
 801b0b8:	681b      	ldr	r3, [r3, #0]
 801b0ba:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 801b0bc:	68b9      	ldr	r1, [r7, #8]
 801b0be:	6878      	ldr	r0, [r7, #4]
 801b0c0:	f000 f80a 	bl	801b0d8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 801b0c4:	68fb      	ldr	r3, [r7, #12]
 801b0c6:	2b00      	cmp	r3, #0
 801b0c8:	d1e3      	bne.n	801b092 <ip_reass_tmr+0x12>
    }
  }
}
 801b0ca:	bf00      	nop
 801b0cc:	bf00      	nop
 801b0ce:	3710      	adds	r7, #16
 801b0d0:	46bd      	mov	sp, r7
 801b0d2:	bd80      	pop	{r7, pc}
 801b0d4:	200241a0 	.word	0x200241a0

0801b0d8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801b0d8:	b580      	push	{r7, lr}
 801b0da:	b088      	sub	sp, #32
 801b0dc:	af00      	add	r7, sp, #0
 801b0de:	6078      	str	r0, [r7, #4]
 801b0e0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 801b0e2:	2300      	movs	r3, #0
 801b0e4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 801b0e6:	683a      	ldr	r2, [r7, #0]
 801b0e8:	687b      	ldr	r3, [r7, #4]
 801b0ea:	429a      	cmp	r2, r3
 801b0ec:	d105      	bne.n	801b0fa <ip_reass_free_complete_datagram+0x22>
 801b0ee:	4b45      	ldr	r3, [pc, #276]	; (801b204 <ip_reass_free_complete_datagram+0x12c>)
 801b0f0:	22ab      	movs	r2, #171	; 0xab
 801b0f2:	4945      	ldr	r1, [pc, #276]	; (801b208 <ip_reass_free_complete_datagram+0x130>)
 801b0f4:	4845      	ldr	r0, [pc, #276]	; (801b20c <ip_reass_free_complete_datagram+0x134>)
 801b0f6:	f002 f9d9 	bl	801d4ac <iprintf>
  if (prev != NULL) {
 801b0fa:	683b      	ldr	r3, [r7, #0]
 801b0fc:	2b00      	cmp	r3, #0
 801b0fe:	d00a      	beq.n	801b116 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 801b100:	683b      	ldr	r3, [r7, #0]
 801b102:	681b      	ldr	r3, [r3, #0]
 801b104:	687a      	ldr	r2, [r7, #4]
 801b106:	429a      	cmp	r2, r3
 801b108:	d005      	beq.n	801b116 <ip_reass_free_complete_datagram+0x3e>
 801b10a:	4b3e      	ldr	r3, [pc, #248]	; (801b204 <ip_reass_free_complete_datagram+0x12c>)
 801b10c:	22ad      	movs	r2, #173	; 0xad
 801b10e:	4940      	ldr	r1, [pc, #256]	; (801b210 <ip_reass_free_complete_datagram+0x138>)
 801b110:	483e      	ldr	r0, [pc, #248]	; (801b20c <ip_reass_free_complete_datagram+0x134>)
 801b112:	f002 f9cb 	bl	801d4ac <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 801b116:	687b      	ldr	r3, [r7, #4]
 801b118:	685b      	ldr	r3, [r3, #4]
 801b11a:	685b      	ldr	r3, [r3, #4]
 801b11c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 801b11e:	697b      	ldr	r3, [r7, #20]
 801b120:	889b      	ldrh	r3, [r3, #4]
 801b122:	b29b      	uxth	r3, r3
 801b124:	2b00      	cmp	r3, #0
 801b126:	d12a      	bne.n	801b17e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 801b128:	687b      	ldr	r3, [r7, #4]
 801b12a:	685b      	ldr	r3, [r3, #4]
 801b12c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 801b12e:	697b      	ldr	r3, [r7, #20]
 801b130:	681a      	ldr	r2, [r3, #0]
 801b132:	687b      	ldr	r3, [r7, #4]
 801b134:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 801b136:	69bb      	ldr	r3, [r7, #24]
 801b138:	6858      	ldr	r0, [r3, #4]
 801b13a:	687b      	ldr	r3, [r7, #4]
 801b13c:	3308      	adds	r3, #8
 801b13e:	2214      	movs	r2, #20
 801b140:	4619      	mov	r1, r3
 801b142:	f002 fae4 	bl	801d70e <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 801b146:	2101      	movs	r1, #1
 801b148:	69b8      	ldr	r0, [r7, #24]
 801b14a:	f7ff fc47 	bl	801a9dc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 801b14e:	69b8      	ldr	r0, [r7, #24]
 801b150:	f7f8 fa48 	bl	80135e4 <pbuf_clen>
 801b154:	4603      	mov	r3, r0
 801b156:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801b158:	8bfa      	ldrh	r2, [r7, #30]
 801b15a:	8a7b      	ldrh	r3, [r7, #18]
 801b15c:	4413      	add	r3, r2
 801b15e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b162:	db05      	blt.n	801b170 <ip_reass_free_complete_datagram+0x98>
 801b164:	4b27      	ldr	r3, [pc, #156]	; (801b204 <ip_reass_free_complete_datagram+0x12c>)
 801b166:	22bc      	movs	r2, #188	; 0xbc
 801b168:	492a      	ldr	r1, [pc, #168]	; (801b214 <ip_reass_free_complete_datagram+0x13c>)
 801b16a:	4828      	ldr	r0, [pc, #160]	; (801b20c <ip_reass_free_complete_datagram+0x134>)
 801b16c:	f002 f99e 	bl	801d4ac <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801b170:	8bfa      	ldrh	r2, [r7, #30]
 801b172:	8a7b      	ldrh	r3, [r7, #18]
 801b174:	4413      	add	r3, r2
 801b176:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 801b178:	69b8      	ldr	r0, [r7, #24]
 801b17a:	f7f8 f9a5 	bl	80134c8 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 801b17e:	687b      	ldr	r3, [r7, #4]
 801b180:	685b      	ldr	r3, [r3, #4]
 801b182:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 801b184:	e01f      	b.n	801b1c6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 801b186:	69bb      	ldr	r3, [r7, #24]
 801b188:	685b      	ldr	r3, [r3, #4]
 801b18a:	617b      	str	r3, [r7, #20]
    pcur = p;
 801b18c:	69bb      	ldr	r3, [r7, #24]
 801b18e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 801b190:	697b      	ldr	r3, [r7, #20]
 801b192:	681b      	ldr	r3, [r3, #0]
 801b194:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 801b196:	68f8      	ldr	r0, [r7, #12]
 801b198:	f7f8 fa24 	bl	80135e4 <pbuf_clen>
 801b19c:	4603      	mov	r3, r0
 801b19e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 801b1a0:	8bfa      	ldrh	r2, [r7, #30]
 801b1a2:	8a7b      	ldrh	r3, [r7, #18]
 801b1a4:	4413      	add	r3, r2
 801b1a6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 801b1aa:	db05      	blt.n	801b1b8 <ip_reass_free_complete_datagram+0xe0>
 801b1ac:	4b15      	ldr	r3, [pc, #84]	; (801b204 <ip_reass_free_complete_datagram+0x12c>)
 801b1ae:	22cc      	movs	r2, #204	; 0xcc
 801b1b0:	4918      	ldr	r1, [pc, #96]	; (801b214 <ip_reass_free_complete_datagram+0x13c>)
 801b1b2:	4816      	ldr	r0, [pc, #88]	; (801b20c <ip_reass_free_complete_datagram+0x134>)
 801b1b4:	f002 f97a 	bl	801d4ac <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 801b1b8:	8bfa      	ldrh	r2, [r7, #30]
 801b1ba:	8a7b      	ldrh	r3, [r7, #18]
 801b1bc:	4413      	add	r3, r2
 801b1be:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 801b1c0:	68f8      	ldr	r0, [r7, #12]
 801b1c2:	f7f8 f981 	bl	80134c8 <pbuf_free>
  while (p != NULL) {
 801b1c6:	69bb      	ldr	r3, [r7, #24]
 801b1c8:	2b00      	cmp	r3, #0
 801b1ca:	d1dc      	bne.n	801b186 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 801b1cc:	6839      	ldr	r1, [r7, #0]
 801b1ce:	6878      	ldr	r0, [r7, #4]
 801b1d0:	f000 f8c2 	bl	801b358 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 801b1d4:	4b10      	ldr	r3, [pc, #64]	; (801b218 <ip_reass_free_complete_datagram+0x140>)
 801b1d6:	881b      	ldrh	r3, [r3, #0]
 801b1d8:	8bfa      	ldrh	r2, [r7, #30]
 801b1da:	429a      	cmp	r2, r3
 801b1dc:	d905      	bls.n	801b1ea <ip_reass_free_complete_datagram+0x112>
 801b1de:	4b09      	ldr	r3, [pc, #36]	; (801b204 <ip_reass_free_complete_datagram+0x12c>)
 801b1e0:	22d2      	movs	r2, #210	; 0xd2
 801b1e2:	490e      	ldr	r1, [pc, #56]	; (801b21c <ip_reass_free_complete_datagram+0x144>)
 801b1e4:	4809      	ldr	r0, [pc, #36]	; (801b20c <ip_reass_free_complete_datagram+0x134>)
 801b1e6:	f002 f961 	bl	801d4ac <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 801b1ea:	4b0b      	ldr	r3, [pc, #44]	; (801b218 <ip_reass_free_complete_datagram+0x140>)
 801b1ec:	881a      	ldrh	r2, [r3, #0]
 801b1ee:	8bfb      	ldrh	r3, [r7, #30]
 801b1f0:	1ad3      	subs	r3, r2, r3
 801b1f2:	b29a      	uxth	r2, r3
 801b1f4:	4b08      	ldr	r3, [pc, #32]	; (801b218 <ip_reass_free_complete_datagram+0x140>)
 801b1f6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 801b1f8:	8bfb      	ldrh	r3, [r7, #30]
}
 801b1fa:	4618      	mov	r0, r3
 801b1fc:	3720      	adds	r7, #32
 801b1fe:	46bd      	mov	sp, r7
 801b200:	bd80      	pop	{r7, pc}
 801b202:	bf00      	nop
 801b204:	08020c58 	.word	0x08020c58
 801b208:	08020c94 	.word	0x08020c94
 801b20c:	08020ca0 	.word	0x08020ca0
 801b210:	08020cc8 	.word	0x08020cc8
 801b214:	08020cdc 	.word	0x08020cdc
 801b218:	200241a4 	.word	0x200241a4
 801b21c:	08020cfc 	.word	0x08020cfc

0801b220 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 801b220:	b580      	push	{r7, lr}
 801b222:	b08a      	sub	sp, #40	; 0x28
 801b224:	af00      	add	r7, sp, #0
 801b226:	6078      	str	r0, [r7, #4]
 801b228:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 801b22a:	2300      	movs	r3, #0
 801b22c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 801b22e:	2300      	movs	r3, #0
 801b230:	623b      	str	r3, [r7, #32]
    prev = NULL;
 801b232:	2300      	movs	r3, #0
 801b234:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 801b236:	2300      	movs	r3, #0
 801b238:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 801b23a:	2300      	movs	r3, #0
 801b23c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 801b23e:	4b28      	ldr	r3, [pc, #160]	; (801b2e0 <ip_reass_remove_oldest_datagram+0xc0>)
 801b240:	681b      	ldr	r3, [r3, #0]
 801b242:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801b244:	e030      	b.n	801b2a8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 801b246:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b248:	695a      	ldr	r2, [r3, #20]
 801b24a:	687b      	ldr	r3, [r7, #4]
 801b24c:	68db      	ldr	r3, [r3, #12]
 801b24e:	429a      	cmp	r2, r3
 801b250:	d10c      	bne.n	801b26c <ip_reass_remove_oldest_datagram+0x4c>
 801b252:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b254:	699a      	ldr	r2, [r3, #24]
 801b256:	687b      	ldr	r3, [r7, #4]
 801b258:	691b      	ldr	r3, [r3, #16]
 801b25a:	429a      	cmp	r2, r3
 801b25c:	d106      	bne.n	801b26c <ip_reass_remove_oldest_datagram+0x4c>
 801b25e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b260:	899a      	ldrh	r2, [r3, #12]
 801b262:	687b      	ldr	r3, [r7, #4]
 801b264:	889b      	ldrh	r3, [r3, #4]
 801b266:	b29b      	uxth	r3, r3
 801b268:	429a      	cmp	r2, r3
 801b26a:	d014      	beq.n	801b296 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 801b26c:	693b      	ldr	r3, [r7, #16]
 801b26e:	3301      	adds	r3, #1
 801b270:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 801b272:	6a3b      	ldr	r3, [r7, #32]
 801b274:	2b00      	cmp	r3, #0
 801b276:	d104      	bne.n	801b282 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 801b278:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b27a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801b27c:	69fb      	ldr	r3, [r7, #28]
 801b27e:	61bb      	str	r3, [r7, #24]
 801b280:	e009      	b.n	801b296 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 801b282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b284:	7fda      	ldrb	r2, [r3, #31]
 801b286:	6a3b      	ldr	r3, [r7, #32]
 801b288:	7fdb      	ldrb	r3, [r3, #31]
 801b28a:	429a      	cmp	r2, r3
 801b28c:	d803      	bhi.n	801b296 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 801b28e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b290:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 801b292:	69fb      	ldr	r3, [r7, #28]
 801b294:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 801b296:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b298:	681b      	ldr	r3, [r3, #0]
 801b29a:	2b00      	cmp	r3, #0
 801b29c:	d001      	beq.n	801b2a2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 801b29e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2a0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 801b2a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2a4:	681b      	ldr	r3, [r3, #0]
 801b2a6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 801b2a8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b2aa:	2b00      	cmp	r3, #0
 801b2ac:	d1cb      	bne.n	801b246 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 801b2ae:	6a3b      	ldr	r3, [r7, #32]
 801b2b0:	2b00      	cmp	r3, #0
 801b2b2:	d008      	beq.n	801b2c6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 801b2b4:	69b9      	ldr	r1, [r7, #24]
 801b2b6:	6a38      	ldr	r0, [r7, #32]
 801b2b8:	f7ff ff0e 	bl	801b0d8 <ip_reass_free_complete_datagram>
 801b2bc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 801b2be:	697a      	ldr	r2, [r7, #20]
 801b2c0:	68fb      	ldr	r3, [r7, #12]
 801b2c2:	4413      	add	r3, r2
 801b2c4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 801b2c6:	697a      	ldr	r2, [r7, #20]
 801b2c8:	683b      	ldr	r3, [r7, #0]
 801b2ca:	429a      	cmp	r2, r3
 801b2cc:	da02      	bge.n	801b2d4 <ip_reass_remove_oldest_datagram+0xb4>
 801b2ce:	693b      	ldr	r3, [r7, #16]
 801b2d0:	2b01      	cmp	r3, #1
 801b2d2:	dcac      	bgt.n	801b22e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 801b2d4:	697b      	ldr	r3, [r7, #20]
}
 801b2d6:	4618      	mov	r0, r3
 801b2d8:	3728      	adds	r7, #40	; 0x28
 801b2da:	46bd      	mov	sp, r7
 801b2dc:	bd80      	pop	{r7, pc}
 801b2de:	bf00      	nop
 801b2e0:	200241a0 	.word	0x200241a0

0801b2e4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 801b2e4:	b580      	push	{r7, lr}
 801b2e6:	b084      	sub	sp, #16
 801b2e8:	af00      	add	r7, sp, #0
 801b2ea:	6078      	str	r0, [r7, #4]
 801b2ec:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801b2ee:	2004      	movs	r0, #4
 801b2f0:	f7f7 f9d0 	bl	8012694 <memp_malloc>
 801b2f4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 801b2f6:	68fb      	ldr	r3, [r7, #12]
 801b2f8:	2b00      	cmp	r3, #0
 801b2fa:	d110      	bne.n	801b31e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 801b2fc:	6839      	ldr	r1, [r7, #0]
 801b2fe:	6878      	ldr	r0, [r7, #4]
 801b300:	f7ff ff8e 	bl	801b220 <ip_reass_remove_oldest_datagram>
 801b304:	4602      	mov	r2, r0
 801b306:	683b      	ldr	r3, [r7, #0]
 801b308:	4293      	cmp	r3, r2
 801b30a:	dc03      	bgt.n	801b314 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 801b30c:	2004      	movs	r0, #4
 801b30e:	f7f7 f9c1 	bl	8012694 <memp_malloc>
 801b312:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 801b314:	68fb      	ldr	r3, [r7, #12]
 801b316:	2b00      	cmp	r3, #0
 801b318:	d101      	bne.n	801b31e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 801b31a:	2300      	movs	r3, #0
 801b31c:	e016      	b.n	801b34c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 801b31e:	2220      	movs	r2, #32
 801b320:	2100      	movs	r1, #0
 801b322:	68f8      	ldr	r0, [r7, #12]
 801b324:	f002 f927 	bl	801d576 <memset>
  ipr->timer = IP_REASS_MAXAGE;
 801b328:	68fb      	ldr	r3, [r7, #12]
 801b32a:	220f      	movs	r2, #15
 801b32c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 801b32e:	4b09      	ldr	r3, [pc, #36]	; (801b354 <ip_reass_enqueue_new_datagram+0x70>)
 801b330:	681a      	ldr	r2, [r3, #0]
 801b332:	68fb      	ldr	r3, [r7, #12]
 801b334:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 801b336:	4a07      	ldr	r2, [pc, #28]	; (801b354 <ip_reass_enqueue_new_datagram+0x70>)
 801b338:	68fb      	ldr	r3, [r7, #12]
 801b33a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 801b33c:	68fb      	ldr	r3, [r7, #12]
 801b33e:	3308      	adds	r3, #8
 801b340:	2214      	movs	r2, #20
 801b342:	6879      	ldr	r1, [r7, #4]
 801b344:	4618      	mov	r0, r3
 801b346:	f002 f9e2 	bl	801d70e <memcpy>
  return ipr;
 801b34a:	68fb      	ldr	r3, [r7, #12]
}
 801b34c:	4618      	mov	r0, r3
 801b34e:	3710      	adds	r7, #16
 801b350:	46bd      	mov	sp, r7
 801b352:	bd80      	pop	{r7, pc}
 801b354:	200241a0 	.word	0x200241a0

0801b358 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 801b358:	b580      	push	{r7, lr}
 801b35a:	b082      	sub	sp, #8
 801b35c:	af00      	add	r7, sp, #0
 801b35e:	6078      	str	r0, [r7, #4]
 801b360:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 801b362:	4b10      	ldr	r3, [pc, #64]	; (801b3a4 <ip_reass_dequeue_datagram+0x4c>)
 801b364:	681b      	ldr	r3, [r3, #0]
 801b366:	687a      	ldr	r2, [r7, #4]
 801b368:	429a      	cmp	r2, r3
 801b36a:	d104      	bne.n	801b376 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 801b36c:	687b      	ldr	r3, [r7, #4]
 801b36e:	681b      	ldr	r3, [r3, #0]
 801b370:	4a0c      	ldr	r2, [pc, #48]	; (801b3a4 <ip_reass_dequeue_datagram+0x4c>)
 801b372:	6013      	str	r3, [r2, #0]
 801b374:	e00d      	b.n	801b392 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 801b376:	683b      	ldr	r3, [r7, #0]
 801b378:	2b00      	cmp	r3, #0
 801b37a:	d106      	bne.n	801b38a <ip_reass_dequeue_datagram+0x32>
 801b37c:	4b0a      	ldr	r3, [pc, #40]	; (801b3a8 <ip_reass_dequeue_datagram+0x50>)
 801b37e:	f240 1245 	movw	r2, #325	; 0x145
 801b382:	490a      	ldr	r1, [pc, #40]	; (801b3ac <ip_reass_dequeue_datagram+0x54>)
 801b384:	480a      	ldr	r0, [pc, #40]	; (801b3b0 <ip_reass_dequeue_datagram+0x58>)
 801b386:	f002 f891 	bl	801d4ac <iprintf>
    prev->next = ipr->next;
 801b38a:	687b      	ldr	r3, [r7, #4]
 801b38c:	681a      	ldr	r2, [r3, #0]
 801b38e:	683b      	ldr	r3, [r7, #0]
 801b390:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 801b392:	6879      	ldr	r1, [r7, #4]
 801b394:	2004      	movs	r0, #4
 801b396:	f7f7 f9f3 	bl	8012780 <memp_free>
}
 801b39a:	bf00      	nop
 801b39c:	3708      	adds	r7, #8
 801b39e:	46bd      	mov	sp, r7
 801b3a0:	bd80      	pop	{r7, pc}
 801b3a2:	bf00      	nop
 801b3a4:	200241a0 	.word	0x200241a0
 801b3a8:	08020c58 	.word	0x08020c58
 801b3ac:	08020d20 	.word	0x08020d20
 801b3b0:	08020ca0 	.word	0x08020ca0

0801b3b4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 801b3b4:	b580      	push	{r7, lr}
 801b3b6:	b08c      	sub	sp, #48	; 0x30
 801b3b8:	af00      	add	r7, sp, #0
 801b3ba:	60f8      	str	r0, [r7, #12]
 801b3bc:	60b9      	str	r1, [r7, #8]
 801b3be:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 801b3c0:	2300      	movs	r3, #0
 801b3c2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 801b3c4:	2301      	movs	r3, #1
 801b3c6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 801b3c8:	68bb      	ldr	r3, [r7, #8]
 801b3ca:	685b      	ldr	r3, [r3, #4]
 801b3cc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801b3ce:	69fb      	ldr	r3, [r7, #28]
 801b3d0:	885b      	ldrh	r3, [r3, #2]
 801b3d2:	b29b      	uxth	r3, r3
 801b3d4:	4618      	mov	r0, r3
 801b3d6:	f7f6 fc75 	bl	8011cc4 <lwip_htons>
 801b3da:	4603      	mov	r3, r0
 801b3dc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 801b3de:	69fb      	ldr	r3, [r7, #28]
 801b3e0:	781b      	ldrb	r3, [r3, #0]
 801b3e2:	f003 030f 	and.w	r3, r3, #15
 801b3e6:	b2db      	uxtb	r3, r3
 801b3e8:	009b      	lsls	r3, r3, #2
 801b3ea:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 801b3ec:	7e7b      	ldrb	r3, [r7, #25]
 801b3ee:	b29b      	uxth	r3, r3
 801b3f0:	8b7a      	ldrh	r2, [r7, #26]
 801b3f2:	429a      	cmp	r2, r3
 801b3f4:	d202      	bcs.n	801b3fc <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b3f6:	f04f 33ff 	mov.w	r3, #4294967295
 801b3fa:	e135      	b.n	801b668 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 801b3fc:	7e7b      	ldrb	r3, [r7, #25]
 801b3fe:	b29b      	uxth	r3, r3
 801b400:	8b7a      	ldrh	r2, [r7, #26]
 801b402:	1ad3      	subs	r3, r2, r3
 801b404:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 801b406:	69fb      	ldr	r3, [r7, #28]
 801b408:	88db      	ldrh	r3, [r3, #6]
 801b40a:	b29b      	uxth	r3, r3
 801b40c:	4618      	mov	r0, r3
 801b40e:	f7f6 fc59 	bl	8011cc4 <lwip_htons>
 801b412:	4603      	mov	r3, r0
 801b414:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b418:	b29b      	uxth	r3, r3
 801b41a:	00db      	lsls	r3, r3, #3
 801b41c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 801b41e:	68bb      	ldr	r3, [r7, #8]
 801b420:	685b      	ldr	r3, [r3, #4]
 801b422:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 801b424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b426:	2200      	movs	r2, #0
 801b428:	701a      	strb	r2, [r3, #0]
 801b42a:	2200      	movs	r2, #0
 801b42c:	705a      	strb	r2, [r3, #1]
 801b42e:	2200      	movs	r2, #0
 801b430:	709a      	strb	r2, [r3, #2]
 801b432:	2200      	movs	r2, #0
 801b434:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 801b436:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b438:	8afa      	ldrh	r2, [r7, #22]
 801b43a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 801b43c:	8afa      	ldrh	r2, [r7, #22]
 801b43e:	8b7b      	ldrh	r3, [r7, #26]
 801b440:	4413      	add	r3, r2
 801b442:	b29a      	uxth	r2, r3
 801b444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b446:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 801b448:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b44a:	88db      	ldrh	r3, [r3, #6]
 801b44c:	b29b      	uxth	r3, r3
 801b44e:	8afa      	ldrh	r2, [r7, #22]
 801b450:	429a      	cmp	r2, r3
 801b452:	d902      	bls.n	801b45a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b454:	f04f 33ff 	mov.w	r3, #4294967295
 801b458:	e106      	b.n	801b668 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 801b45a:	68fb      	ldr	r3, [r7, #12]
 801b45c:	685b      	ldr	r3, [r3, #4]
 801b45e:	627b      	str	r3, [r7, #36]	; 0x24
 801b460:	e068      	b.n	801b534 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 801b462:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b464:	685b      	ldr	r3, [r3, #4]
 801b466:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 801b468:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b46a:	889b      	ldrh	r3, [r3, #4]
 801b46c:	b29a      	uxth	r2, r3
 801b46e:	693b      	ldr	r3, [r7, #16]
 801b470:	889b      	ldrh	r3, [r3, #4]
 801b472:	b29b      	uxth	r3, r3
 801b474:	429a      	cmp	r2, r3
 801b476:	d235      	bcs.n	801b4e4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 801b478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b47a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 801b47c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 801b47e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b480:	2b00      	cmp	r3, #0
 801b482:	d020      	beq.n	801b4c6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 801b484:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b486:	889b      	ldrh	r3, [r3, #4]
 801b488:	b29a      	uxth	r2, r3
 801b48a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b48c:	88db      	ldrh	r3, [r3, #6]
 801b48e:	b29b      	uxth	r3, r3
 801b490:	429a      	cmp	r2, r3
 801b492:	d307      	bcc.n	801b4a4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 801b494:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b496:	88db      	ldrh	r3, [r3, #6]
 801b498:	b29a      	uxth	r2, r3
 801b49a:	693b      	ldr	r3, [r7, #16]
 801b49c:	889b      	ldrh	r3, [r3, #4]
 801b49e:	b29b      	uxth	r3, r3
 801b4a0:	429a      	cmp	r2, r3
 801b4a2:	d902      	bls.n	801b4aa <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b4a4:	f04f 33ff 	mov.w	r3, #4294967295
 801b4a8:	e0de      	b.n	801b668 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 801b4aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b4ac:	68ba      	ldr	r2, [r7, #8]
 801b4ae:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 801b4b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b4b2:	88db      	ldrh	r3, [r3, #6]
 801b4b4:	b29a      	uxth	r2, r3
 801b4b6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4b8:	889b      	ldrh	r3, [r3, #4]
 801b4ba:	b29b      	uxth	r3, r3
 801b4bc:	429a      	cmp	r2, r3
 801b4be:	d03d      	beq.n	801b53c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801b4c0:	2300      	movs	r3, #0
 801b4c2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 801b4c4:	e03a      	b.n	801b53c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 801b4c6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4c8:	88db      	ldrh	r3, [r3, #6]
 801b4ca:	b29a      	uxth	r2, r3
 801b4cc:	693b      	ldr	r3, [r7, #16]
 801b4ce:	889b      	ldrh	r3, [r3, #4]
 801b4d0:	b29b      	uxth	r3, r3
 801b4d2:	429a      	cmp	r2, r3
 801b4d4:	d902      	bls.n	801b4dc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b4d6:	f04f 33ff 	mov.w	r3, #4294967295
 801b4da:	e0c5      	b.n	801b668 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 801b4dc:	68fb      	ldr	r3, [r7, #12]
 801b4de:	68ba      	ldr	r2, [r7, #8]
 801b4e0:	605a      	str	r2, [r3, #4]
      break;
 801b4e2:	e02b      	b.n	801b53c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 801b4e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4e6:	889b      	ldrh	r3, [r3, #4]
 801b4e8:	b29a      	uxth	r2, r3
 801b4ea:	693b      	ldr	r3, [r7, #16]
 801b4ec:	889b      	ldrh	r3, [r3, #4]
 801b4ee:	b29b      	uxth	r3, r3
 801b4f0:	429a      	cmp	r2, r3
 801b4f2:	d102      	bne.n	801b4fa <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b4f4:	f04f 33ff 	mov.w	r3, #4294967295
 801b4f8:	e0b6      	b.n	801b668 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 801b4fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b4fc:	889b      	ldrh	r3, [r3, #4]
 801b4fe:	b29a      	uxth	r2, r3
 801b500:	693b      	ldr	r3, [r7, #16]
 801b502:	88db      	ldrh	r3, [r3, #6]
 801b504:	b29b      	uxth	r3, r3
 801b506:	429a      	cmp	r2, r3
 801b508:	d202      	bcs.n	801b510 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 801b50a:	f04f 33ff 	mov.w	r3, #4294967295
 801b50e:	e0ab      	b.n	801b668 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 801b510:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b512:	2b00      	cmp	r3, #0
 801b514:	d009      	beq.n	801b52a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 801b516:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b518:	88db      	ldrh	r3, [r3, #6]
 801b51a:	b29a      	uxth	r2, r3
 801b51c:	693b      	ldr	r3, [r7, #16]
 801b51e:	889b      	ldrh	r3, [r3, #4]
 801b520:	b29b      	uxth	r3, r3
 801b522:	429a      	cmp	r2, r3
 801b524:	d001      	beq.n	801b52a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 801b526:	2300      	movs	r3, #0
 801b528:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 801b52a:	693b      	ldr	r3, [r7, #16]
 801b52c:	681b      	ldr	r3, [r3, #0]
 801b52e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 801b530:	693b      	ldr	r3, [r7, #16]
 801b532:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 801b534:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b536:	2b00      	cmp	r3, #0
 801b538:	d193      	bne.n	801b462 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 801b53a:	e000      	b.n	801b53e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 801b53c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 801b53e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b540:	2b00      	cmp	r3, #0
 801b542:	d12d      	bne.n	801b5a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 801b544:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b546:	2b00      	cmp	r3, #0
 801b548:	d01c      	beq.n	801b584 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 801b54a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b54c:	88db      	ldrh	r3, [r3, #6]
 801b54e:	b29a      	uxth	r2, r3
 801b550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b552:	889b      	ldrh	r3, [r3, #4]
 801b554:	b29b      	uxth	r3, r3
 801b556:	429a      	cmp	r2, r3
 801b558:	d906      	bls.n	801b568 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 801b55a:	4b45      	ldr	r3, [pc, #276]	; (801b670 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b55c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 801b560:	4944      	ldr	r1, [pc, #272]	; (801b674 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 801b562:	4845      	ldr	r0, [pc, #276]	; (801b678 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b564:	f001 ffa2 	bl	801d4ac <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 801b568:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b56a:	68ba      	ldr	r2, [r7, #8]
 801b56c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 801b56e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b570:	88db      	ldrh	r3, [r3, #6]
 801b572:	b29a      	uxth	r2, r3
 801b574:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b576:	889b      	ldrh	r3, [r3, #4]
 801b578:	b29b      	uxth	r3, r3
 801b57a:	429a      	cmp	r2, r3
 801b57c:	d010      	beq.n	801b5a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 801b57e:	2300      	movs	r3, #0
 801b580:	623b      	str	r3, [r7, #32]
 801b582:	e00d      	b.n	801b5a0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 801b584:	68fb      	ldr	r3, [r7, #12]
 801b586:	685b      	ldr	r3, [r3, #4]
 801b588:	2b00      	cmp	r3, #0
 801b58a:	d006      	beq.n	801b59a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 801b58c:	4b38      	ldr	r3, [pc, #224]	; (801b670 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b58e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 801b592:	493a      	ldr	r1, [pc, #232]	; (801b67c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 801b594:	4838      	ldr	r0, [pc, #224]	; (801b678 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b596:	f001 ff89 	bl	801d4ac <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 801b59a:	68fb      	ldr	r3, [r7, #12]
 801b59c:	68ba      	ldr	r2, [r7, #8]
 801b59e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 801b5a0:	687b      	ldr	r3, [r7, #4]
 801b5a2:	2b00      	cmp	r3, #0
 801b5a4:	d105      	bne.n	801b5b2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 801b5a6:	68fb      	ldr	r3, [r7, #12]
 801b5a8:	7f9b      	ldrb	r3, [r3, #30]
 801b5aa:	f003 0301 	and.w	r3, r3, #1
 801b5ae:	2b00      	cmp	r3, #0
 801b5b0:	d059      	beq.n	801b666 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 801b5b2:	6a3b      	ldr	r3, [r7, #32]
 801b5b4:	2b00      	cmp	r3, #0
 801b5b6:	d04f      	beq.n	801b658 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 801b5b8:	68fb      	ldr	r3, [r7, #12]
 801b5ba:	685b      	ldr	r3, [r3, #4]
 801b5bc:	2b00      	cmp	r3, #0
 801b5be:	d006      	beq.n	801b5ce <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 801b5c0:	68fb      	ldr	r3, [r7, #12]
 801b5c2:	685b      	ldr	r3, [r3, #4]
 801b5c4:	685b      	ldr	r3, [r3, #4]
 801b5c6:	889b      	ldrh	r3, [r3, #4]
 801b5c8:	b29b      	uxth	r3, r3
 801b5ca:	2b00      	cmp	r3, #0
 801b5cc:	d002      	beq.n	801b5d4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 801b5ce:	2300      	movs	r3, #0
 801b5d0:	623b      	str	r3, [r7, #32]
 801b5d2:	e041      	b.n	801b658 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 801b5d4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b5d6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 801b5d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b5da:	681b      	ldr	r3, [r3, #0]
 801b5dc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801b5de:	e012      	b.n	801b606 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 801b5e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b5e2:	685b      	ldr	r3, [r3, #4]
 801b5e4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 801b5e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b5e8:	88db      	ldrh	r3, [r3, #6]
 801b5ea:	b29a      	uxth	r2, r3
 801b5ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b5ee:	889b      	ldrh	r3, [r3, #4]
 801b5f0:	b29b      	uxth	r3, r3
 801b5f2:	429a      	cmp	r2, r3
 801b5f4:	d002      	beq.n	801b5fc <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 801b5f6:	2300      	movs	r3, #0
 801b5f8:	623b      	str	r3, [r7, #32]
            break;
 801b5fa:	e007      	b.n	801b60c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 801b5fc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b5fe:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 801b600:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b602:	681b      	ldr	r3, [r3, #0]
 801b604:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 801b606:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801b608:	2b00      	cmp	r3, #0
 801b60a:	d1e9      	bne.n	801b5e0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801b60c:	6a3b      	ldr	r3, [r7, #32]
 801b60e:	2b00      	cmp	r3, #0
 801b610:	d022      	beq.n	801b658 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 801b612:	68fb      	ldr	r3, [r7, #12]
 801b614:	685b      	ldr	r3, [r3, #4]
 801b616:	2b00      	cmp	r3, #0
 801b618:	d106      	bne.n	801b628 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801b61a:	4b15      	ldr	r3, [pc, #84]	; (801b670 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b61c:	f240 12df 	movw	r2, #479	; 0x1df
 801b620:	4917      	ldr	r1, [pc, #92]	; (801b680 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801b622:	4815      	ldr	r0, [pc, #84]	; (801b678 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b624:	f001 ff42 	bl	801d4ac <iprintf>
          LWIP_ASSERT("sanity check",
 801b628:	68fb      	ldr	r3, [r7, #12]
 801b62a:	685b      	ldr	r3, [r3, #4]
 801b62c:	685b      	ldr	r3, [r3, #4]
 801b62e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801b630:	429a      	cmp	r2, r3
 801b632:	d106      	bne.n	801b642 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 801b634:	4b0e      	ldr	r3, [pc, #56]	; (801b670 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b636:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801b63a:	4911      	ldr	r1, [pc, #68]	; (801b680 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801b63c:	480e      	ldr	r0, [pc, #56]	; (801b678 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b63e:	f001 ff35 	bl	801d4ac <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 801b642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b644:	681b      	ldr	r3, [r3, #0]
 801b646:	2b00      	cmp	r3, #0
 801b648:	d006      	beq.n	801b658 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801b64a:	4b09      	ldr	r3, [pc, #36]	; (801b670 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801b64c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 801b650:	490c      	ldr	r1, [pc, #48]	; (801b684 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 801b652:	4809      	ldr	r0, [pc, #36]	; (801b678 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801b654:	f001 ff2a 	bl	801d4ac <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 801b658:	6a3b      	ldr	r3, [r7, #32]
 801b65a:	2b00      	cmp	r3, #0
 801b65c:	bf14      	ite	ne
 801b65e:	2301      	movne	r3, #1
 801b660:	2300      	moveq	r3, #0
 801b662:	b2db      	uxtb	r3, r3
 801b664:	e000      	b.n	801b668 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 801b666:	2300      	movs	r3, #0
}
 801b668:	4618      	mov	r0, r3
 801b66a:	3730      	adds	r7, #48	; 0x30
 801b66c:	46bd      	mov	sp, r7
 801b66e:	bd80      	pop	{r7, pc}
 801b670:	08020c58 	.word	0x08020c58
 801b674:	08020d3c 	.word	0x08020d3c
 801b678:	08020ca0 	.word	0x08020ca0
 801b67c:	08020d5c 	.word	0x08020d5c
 801b680:	08020d94 	.word	0x08020d94
 801b684:	08020da4 	.word	0x08020da4

0801b688 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 801b688:	b580      	push	{r7, lr}
 801b68a:	b08e      	sub	sp, #56	; 0x38
 801b68c:	af00      	add	r7, sp, #0
 801b68e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 801b690:	687b      	ldr	r3, [r7, #4]
 801b692:	685b      	ldr	r3, [r3, #4]
 801b694:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 801b696:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b698:	781b      	ldrb	r3, [r3, #0]
 801b69a:	f003 030f 	and.w	r3, r3, #15
 801b69e:	b2db      	uxtb	r3, r3
 801b6a0:	009b      	lsls	r3, r3, #2
 801b6a2:	b2db      	uxtb	r3, r3
 801b6a4:	2b14      	cmp	r3, #20
 801b6a6:	f040 8171 	bne.w	801b98c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 801b6aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b6ac:	88db      	ldrh	r3, [r3, #6]
 801b6ae:	b29b      	uxth	r3, r3
 801b6b0:	4618      	mov	r0, r3
 801b6b2:	f7f6 fb07 	bl	8011cc4 <lwip_htons>
 801b6b6:	4603      	mov	r3, r0
 801b6b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b6bc:	b29b      	uxth	r3, r3
 801b6be:	00db      	lsls	r3, r3, #3
 801b6c0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 801b6c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b6c4:	885b      	ldrh	r3, [r3, #2]
 801b6c6:	b29b      	uxth	r3, r3
 801b6c8:	4618      	mov	r0, r3
 801b6ca:	f7f6 fafb 	bl	8011cc4 <lwip_htons>
 801b6ce:	4603      	mov	r3, r0
 801b6d0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 801b6d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b6d4:	781b      	ldrb	r3, [r3, #0]
 801b6d6:	f003 030f 	and.w	r3, r3, #15
 801b6da:	b2db      	uxtb	r3, r3
 801b6dc:	009b      	lsls	r3, r3, #2
 801b6de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 801b6e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801b6e6:	b29b      	uxth	r3, r3
 801b6e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801b6ea:	429a      	cmp	r2, r3
 801b6ec:	f0c0 8150 	bcc.w	801b990 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 801b6f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 801b6f4:	b29b      	uxth	r3, r3
 801b6f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801b6f8:	1ad3      	subs	r3, r2, r3
 801b6fa:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 801b6fc:	6878      	ldr	r0, [r7, #4]
 801b6fe:	f7f7 ff71 	bl	80135e4 <pbuf_clen>
 801b702:	4603      	mov	r3, r0
 801b704:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 801b706:	4b8c      	ldr	r3, [pc, #560]	; (801b938 <ip4_reass+0x2b0>)
 801b708:	881b      	ldrh	r3, [r3, #0]
 801b70a:	461a      	mov	r2, r3
 801b70c:	8c3b      	ldrh	r3, [r7, #32]
 801b70e:	4413      	add	r3, r2
 801b710:	2b0a      	cmp	r3, #10
 801b712:	dd10      	ble.n	801b736 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801b714:	8c3b      	ldrh	r3, [r7, #32]
 801b716:	4619      	mov	r1, r3
 801b718:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b71a:	f7ff fd81 	bl	801b220 <ip_reass_remove_oldest_datagram>
 801b71e:	4603      	mov	r3, r0
 801b720:	2b00      	cmp	r3, #0
 801b722:	f000 8137 	beq.w	801b994 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 801b726:	4b84      	ldr	r3, [pc, #528]	; (801b938 <ip4_reass+0x2b0>)
 801b728:	881b      	ldrh	r3, [r3, #0]
 801b72a:	461a      	mov	r2, r3
 801b72c:	8c3b      	ldrh	r3, [r7, #32]
 801b72e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 801b730:	2b0a      	cmp	r3, #10
 801b732:	f300 812f 	bgt.w	801b994 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801b736:	4b81      	ldr	r3, [pc, #516]	; (801b93c <ip4_reass+0x2b4>)
 801b738:	681b      	ldr	r3, [r3, #0]
 801b73a:	633b      	str	r3, [r7, #48]	; 0x30
 801b73c:	e015      	b.n	801b76a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801b73e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b740:	695a      	ldr	r2, [r3, #20]
 801b742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b744:	68db      	ldr	r3, [r3, #12]
 801b746:	429a      	cmp	r2, r3
 801b748:	d10c      	bne.n	801b764 <ip4_reass+0xdc>
 801b74a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b74c:	699a      	ldr	r2, [r3, #24]
 801b74e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b750:	691b      	ldr	r3, [r3, #16]
 801b752:	429a      	cmp	r2, r3
 801b754:	d106      	bne.n	801b764 <ip4_reass+0xdc>
 801b756:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b758:	899a      	ldrh	r2, [r3, #12]
 801b75a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b75c:	889b      	ldrh	r3, [r3, #4]
 801b75e:	b29b      	uxth	r3, r3
 801b760:	429a      	cmp	r2, r3
 801b762:	d006      	beq.n	801b772 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 801b764:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b766:	681b      	ldr	r3, [r3, #0]
 801b768:	633b      	str	r3, [r7, #48]	; 0x30
 801b76a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b76c:	2b00      	cmp	r3, #0
 801b76e:	d1e6      	bne.n	801b73e <ip4_reass+0xb6>
 801b770:	e000      	b.n	801b774 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 801b772:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 801b774:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b776:	2b00      	cmp	r3, #0
 801b778:	d109      	bne.n	801b78e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801b77a:	8c3b      	ldrh	r3, [r7, #32]
 801b77c:	4619      	mov	r1, r3
 801b77e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b780:	f7ff fdb0 	bl	801b2e4 <ip_reass_enqueue_new_datagram>
 801b784:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 801b786:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b788:	2b00      	cmp	r3, #0
 801b78a:	d11c      	bne.n	801b7c6 <ip4_reass+0x13e>
      goto nullreturn;
 801b78c:	e105      	b.n	801b99a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801b78e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b790:	88db      	ldrh	r3, [r3, #6]
 801b792:	b29b      	uxth	r3, r3
 801b794:	4618      	mov	r0, r3
 801b796:	f7f6 fa95 	bl	8011cc4 <lwip_htons>
 801b79a:	4603      	mov	r3, r0
 801b79c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801b7a0:	2b00      	cmp	r3, #0
 801b7a2:	d110      	bne.n	801b7c6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 801b7a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b7a6:	89db      	ldrh	r3, [r3, #14]
 801b7a8:	4618      	mov	r0, r3
 801b7aa:	f7f6 fa8b 	bl	8011cc4 <lwip_htons>
 801b7ae:	4603      	mov	r3, r0
 801b7b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801b7b4:	2b00      	cmp	r3, #0
 801b7b6:	d006      	beq.n	801b7c6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 801b7b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b7ba:	3308      	adds	r3, #8
 801b7bc:	2214      	movs	r2, #20
 801b7be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 801b7c0:	4618      	mov	r0, r3
 801b7c2:	f001 ffa4 	bl	801d70e <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 801b7c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b7c8:	88db      	ldrh	r3, [r3, #6]
 801b7ca:	b29b      	uxth	r3, r3
 801b7cc:	f003 0320 	and.w	r3, r3, #32
 801b7d0:	2b00      	cmp	r3, #0
 801b7d2:	bf0c      	ite	eq
 801b7d4:	2301      	moveq	r3, #1
 801b7d6:	2300      	movne	r3, #0
 801b7d8:	b2db      	uxtb	r3, r3
 801b7da:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 801b7dc:	69fb      	ldr	r3, [r7, #28]
 801b7de:	2b00      	cmp	r3, #0
 801b7e0:	d00e      	beq.n	801b800 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 801b7e2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801b7e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b7e6:	4413      	add	r3, r2
 801b7e8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 801b7ea:	8b7a      	ldrh	r2, [r7, #26]
 801b7ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 801b7ee:	429a      	cmp	r2, r3
 801b7f0:	f0c0 80a0 	bcc.w	801b934 <ip4_reass+0x2ac>
 801b7f4:	8b7b      	ldrh	r3, [r7, #26]
 801b7f6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 801b7fa:	4293      	cmp	r3, r2
 801b7fc:	f200 809a 	bhi.w	801b934 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 801b800:	69fa      	ldr	r2, [r7, #28]
 801b802:	6879      	ldr	r1, [r7, #4]
 801b804:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b806:	f7ff fdd5 	bl	801b3b4 <ip_reass_chain_frag_into_datagram_and_validate>
 801b80a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801b80c:	697b      	ldr	r3, [r7, #20]
 801b80e:	f1b3 3fff 	cmp.w	r3, #4294967295
 801b812:	f000 809b 	beq.w	801b94c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 801b816:	4b48      	ldr	r3, [pc, #288]	; (801b938 <ip4_reass+0x2b0>)
 801b818:	881a      	ldrh	r2, [r3, #0]
 801b81a:	8c3b      	ldrh	r3, [r7, #32]
 801b81c:	4413      	add	r3, r2
 801b81e:	b29a      	uxth	r2, r3
 801b820:	4b45      	ldr	r3, [pc, #276]	; (801b938 <ip4_reass+0x2b0>)
 801b822:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 801b824:	69fb      	ldr	r3, [r7, #28]
 801b826:	2b00      	cmp	r3, #0
 801b828:	d00d      	beq.n	801b846 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801b82a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801b82c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801b82e:	4413      	add	r3, r2
 801b830:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 801b832:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b834:	8a7a      	ldrh	r2, [r7, #18]
 801b836:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 801b838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b83a:	7f9b      	ldrb	r3, [r3, #30]
 801b83c:	f043 0301 	orr.w	r3, r3, #1
 801b840:	b2da      	uxtb	r2, r3
 801b842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b844:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 801b846:	697b      	ldr	r3, [r7, #20]
 801b848:	2b01      	cmp	r3, #1
 801b84a:	d171      	bne.n	801b930 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801b84c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b84e:	8b9b      	ldrh	r3, [r3, #28]
 801b850:	3314      	adds	r3, #20
 801b852:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 801b854:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b856:	685b      	ldr	r3, [r3, #4]
 801b858:	685b      	ldr	r3, [r3, #4]
 801b85a:	681b      	ldr	r3, [r3, #0]
 801b85c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801b85e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b860:	685b      	ldr	r3, [r3, #4]
 801b862:	685b      	ldr	r3, [r3, #4]
 801b864:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 801b866:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b868:	3308      	adds	r3, #8
 801b86a:	2214      	movs	r2, #20
 801b86c:	4619      	mov	r1, r3
 801b86e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801b870:	f001 ff4d 	bl	801d70e <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 801b874:	8a3b      	ldrh	r3, [r7, #16]
 801b876:	4618      	mov	r0, r3
 801b878:	f7f6 fa24 	bl	8011cc4 <lwip_htons>
 801b87c:	4603      	mov	r3, r0
 801b87e:	461a      	mov	r2, r3
 801b880:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b882:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 801b884:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b886:	2200      	movs	r2, #0
 801b888:	719a      	strb	r2, [r3, #6]
 801b88a:	2200      	movs	r2, #0
 801b88c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801b88e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801b890:	2200      	movs	r2, #0
 801b892:	729a      	strb	r2, [r3, #10]
 801b894:	2200      	movs	r2, #0
 801b896:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 801b898:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b89a:	685b      	ldr	r3, [r3, #4]
 801b89c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801b89e:	e00d      	b.n	801b8bc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 801b8a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b8a2:	685b      	ldr	r3, [r3, #4]
 801b8a4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 801b8a6:	2114      	movs	r1, #20
 801b8a8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 801b8aa:	f7f7 fd87 	bl	80133bc <pbuf_remove_header>
      pbuf_cat(p, r);
 801b8ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801b8b0:	6878      	ldr	r0, [r7, #4]
 801b8b2:	f7f7 fed7 	bl	8013664 <pbuf_cat>
      r = iprh->next_pbuf;
 801b8b6:	68fb      	ldr	r3, [r7, #12]
 801b8b8:	681b      	ldr	r3, [r3, #0]
 801b8ba:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 801b8bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801b8be:	2b00      	cmp	r3, #0
 801b8c0:	d1ee      	bne.n	801b8a0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 801b8c2:	4b1e      	ldr	r3, [pc, #120]	; (801b93c <ip4_reass+0x2b4>)
 801b8c4:	681b      	ldr	r3, [r3, #0]
 801b8c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b8c8:	429a      	cmp	r2, r3
 801b8ca:	d102      	bne.n	801b8d2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 801b8cc:	2300      	movs	r3, #0
 801b8ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b8d0:	e010      	b.n	801b8f4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801b8d2:	4b1a      	ldr	r3, [pc, #104]	; (801b93c <ip4_reass+0x2b4>)
 801b8d4:	681b      	ldr	r3, [r3, #0]
 801b8d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b8d8:	e007      	b.n	801b8ea <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 801b8da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b8dc:	681b      	ldr	r3, [r3, #0]
 801b8de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b8e0:	429a      	cmp	r2, r3
 801b8e2:	d006      	beq.n	801b8f2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 801b8e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b8e6:	681b      	ldr	r3, [r3, #0]
 801b8e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 801b8ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801b8ec:	2b00      	cmp	r3, #0
 801b8ee:	d1f4      	bne.n	801b8da <ip4_reass+0x252>
 801b8f0:	e000      	b.n	801b8f4 <ip4_reass+0x26c>
          break;
 801b8f2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 801b8f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 801b8f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b8f8:	f7ff fd2e 	bl	801b358 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 801b8fc:	6878      	ldr	r0, [r7, #4]
 801b8fe:	f7f7 fe71 	bl	80135e4 <pbuf_clen>
 801b902:	4603      	mov	r3, r0
 801b904:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 801b906:	4b0c      	ldr	r3, [pc, #48]	; (801b938 <ip4_reass+0x2b0>)
 801b908:	881b      	ldrh	r3, [r3, #0]
 801b90a:	8c3a      	ldrh	r2, [r7, #32]
 801b90c:	429a      	cmp	r2, r3
 801b90e:	d906      	bls.n	801b91e <ip4_reass+0x296>
 801b910:	4b0b      	ldr	r3, [pc, #44]	; (801b940 <ip4_reass+0x2b8>)
 801b912:	f240 229b 	movw	r2, #667	; 0x29b
 801b916:	490b      	ldr	r1, [pc, #44]	; (801b944 <ip4_reass+0x2bc>)
 801b918:	480b      	ldr	r0, [pc, #44]	; (801b948 <ip4_reass+0x2c0>)
 801b91a:	f001 fdc7 	bl	801d4ac <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801b91e:	4b06      	ldr	r3, [pc, #24]	; (801b938 <ip4_reass+0x2b0>)
 801b920:	881a      	ldrh	r2, [r3, #0]
 801b922:	8c3b      	ldrh	r3, [r7, #32]
 801b924:	1ad3      	subs	r3, r2, r3
 801b926:	b29a      	uxth	r2, r3
 801b928:	4b03      	ldr	r3, [pc, #12]	; (801b938 <ip4_reass+0x2b0>)
 801b92a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801b92c:	687b      	ldr	r3, [r7, #4]
 801b92e:	e038      	b.n	801b9a2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 801b930:	2300      	movs	r3, #0
 801b932:	e036      	b.n	801b9a2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 801b934:	bf00      	nop
 801b936:	e00a      	b.n	801b94e <ip4_reass+0x2c6>
 801b938:	200241a4 	.word	0x200241a4
 801b93c:	200241a0 	.word	0x200241a0
 801b940:	08020c58 	.word	0x08020c58
 801b944:	08020dc8 	.word	0x08020dc8
 801b948:	08020ca0 	.word	0x08020ca0
    goto nullreturn_ipr;
 801b94c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801b94e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b950:	2b00      	cmp	r3, #0
 801b952:	d106      	bne.n	801b962 <ip4_reass+0x2da>
 801b954:	4b15      	ldr	r3, [pc, #84]	; (801b9ac <ip4_reass+0x324>)
 801b956:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801b95a:	4915      	ldr	r1, [pc, #84]	; (801b9b0 <ip4_reass+0x328>)
 801b95c:	4815      	ldr	r0, [pc, #84]	; (801b9b4 <ip4_reass+0x32c>)
 801b95e:	f001 fda5 	bl	801d4ac <iprintf>
  if (ipr->p == NULL) {
 801b962:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801b964:	685b      	ldr	r3, [r3, #4]
 801b966:	2b00      	cmp	r3, #0
 801b968:	d116      	bne.n	801b998 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801b96a:	4b13      	ldr	r3, [pc, #76]	; (801b9b8 <ip4_reass+0x330>)
 801b96c:	681b      	ldr	r3, [r3, #0]
 801b96e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 801b970:	429a      	cmp	r2, r3
 801b972:	d006      	beq.n	801b982 <ip4_reass+0x2fa>
 801b974:	4b0d      	ldr	r3, [pc, #52]	; (801b9ac <ip4_reass+0x324>)
 801b976:	f240 22ab 	movw	r2, #683	; 0x2ab
 801b97a:	4910      	ldr	r1, [pc, #64]	; (801b9bc <ip4_reass+0x334>)
 801b97c:	480d      	ldr	r0, [pc, #52]	; (801b9b4 <ip4_reass+0x32c>)
 801b97e:	f001 fd95 	bl	801d4ac <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 801b982:	2100      	movs	r1, #0
 801b984:	6b38      	ldr	r0, [r7, #48]	; 0x30
 801b986:	f7ff fce7 	bl	801b358 <ip_reass_dequeue_datagram>
 801b98a:	e006      	b.n	801b99a <ip4_reass+0x312>
    goto nullreturn;
 801b98c:	bf00      	nop
 801b98e:	e004      	b.n	801b99a <ip4_reass+0x312>
    goto nullreturn;
 801b990:	bf00      	nop
 801b992:	e002      	b.n	801b99a <ip4_reass+0x312>
      goto nullreturn;
 801b994:	bf00      	nop
 801b996:	e000      	b.n	801b99a <ip4_reass+0x312>
  }

nullreturn:
 801b998:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801b99a:	6878      	ldr	r0, [r7, #4]
 801b99c:	f7f7 fd94 	bl	80134c8 <pbuf_free>
  return NULL;
 801b9a0:	2300      	movs	r3, #0
}
 801b9a2:	4618      	mov	r0, r3
 801b9a4:	3738      	adds	r7, #56	; 0x38
 801b9a6:	46bd      	mov	sp, r7
 801b9a8:	bd80      	pop	{r7, pc}
 801b9aa:	bf00      	nop
 801b9ac:	08020c58 	.word	0x08020c58
 801b9b0:	08020de4 	.word	0x08020de4
 801b9b4:	08020ca0 	.word	0x08020ca0
 801b9b8:	200241a0 	.word	0x200241a0
 801b9bc:	08020df0 	.word	0x08020df0

0801b9c0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 801b9c0:	b580      	push	{r7, lr}
 801b9c2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 801b9c4:	2005      	movs	r0, #5
 801b9c6:	f7f6 fe65 	bl	8012694 <memp_malloc>
 801b9ca:	4603      	mov	r3, r0
}
 801b9cc:	4618      	mov	r0, r3
 801b9ce:	bd80      	pop	{r7, pc}

0801b9d0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 801b9d0:	b580      	push	{r7, lr}
 801b9d2:	b082      	sub	sp, #8
 801b9d4:	af00      	add	r7, sp, #0
 801b9d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 801b9d8:	687b      	ldr	r3, [r7, #4]
 801b9da:	2b00      	cmp	r3, #0
 801b9dc:	d106      	bne.n	801b9ec <ip_frag_free_pbuf_custom_ref+0x1c>
 801b9de:	4b07      	ldr	r3, [pc, #28]	; (801b9fc <ip_frag_free_pbuf_custom_ref+0x2c>)
 801b9e0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 801b9e4:	4906      	ldr	r1, [pc, #24]	; (801ba00 <ip_frag_free_pbuf_custom_ref+0x30>)
 801b9e6:	4807      	ldr	r0, [pc, #28]	; (801ba04 <ip_frag_free_pbuf_custom_ref+0x34>)
 801b9e8:	f001 fd60 	bl	801d4ac <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 801b9ec:	6879      	ldr	r1, [r7, #4]
 801b9ee:	2005      	movs	r0, #5
 801b9f0:	f7f6 fec6 	bl	8012780 <memp_free>
}
 801b9f4:	bf00      	nop
 801b9f6:	3708      	adds	r7, #8
 801b9f8:	46bd      	mov	sp, r7
 801b9fa:	bd80      	pop	{r7, pc}
 801b9fc:	08020c58 	.word	0x08020c58
 801ba00:	08020e10 	.word	0x08020e10
 801ba04:	08020ca0 	.word	0x08020ca0

0801ba08 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 801ba08:	b580      	push	{r7, lr}
 801ba0a:	b084      	sub	sp, #16
 801ba0c:	af00      	add	r7, sp, #0
 801ba0e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 801ba10:	687b      	ldr	r3, [r7, #4]
 801ba12:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 801ba14:	68fb      	ldr	r3, [r7, #12]
 801ba16:	2b00      	cmp	r3, #0
 801ba18:	d106      	bne.n	801ba28 <ipfrag_free_pbuf_custom+0x20>
 801ba1a:	4b11      	ldr	r3, [pc, #68]	; (801ba60 <ipfrag_free_pbuf_custom+0x58>)
 801ba1c:	f240 22ce 	movw	r2, #718	; 0x2ce
 801ba20:	4910      	ldr	r1, [pc, #64]	; (801ba64 <ipfrag_free_pbuf_custom+0x5c>)
 801ba22:	4811      	ldr	r0, [pc, #68]	; (801ba68 <ipfrag_free_pbuf_custom+0x60>)
 801ba24:	f001 fd42 	bl	801d4ac <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 801ba28:	68fa      	ldr	r2, [r7, #12]
 801ba2a:	687b      	ldr	r3, [r7, #4]
 801ba2c:	429a      	cmp	r2, r3
 801ba2e:	d006      	beq.n	801ba3e <ipfrag_free_pbuf_custom+0x36>
 801ba30:	4b0b      	ldr	r3, [pc, #44]	; (801ba60 <ipfrag_free_pbuf_custom+0x58>)
 801ba32:	f240 22cf 	movw	r2, #719	; 0x2cf
 801ba36:	490d      	ldr	r1, [pc, #52]	; (801ba6c <ipfrag_free_pbuf_custom+0x64>)
 801ba38:	480b      	ldr	r0, [pc, #44]	; (801ba68 <ipfrag_free_pbuf_custom+0x60>)
 801ba3a:	f001 fd37 	bl	801d4ac <iprintf>
  if (pcr->original != NULL) {
 801ba3e:	68fb      	ldr	r3, [r7, #12]
 801ba40:	695b      	ldr	r3, [r3, #20]
 801ba42:	2b00      	cmp	r3, #0
 801ba44:	d004      	beq.n	801ba50 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 801ba46:	68fb      	ldr	r3, [r7, #12]
 801ba48:	695b      	ldr	r3, [r3, #20]
 801ba4a:	4618      	mov	r0, r3
 801ba4c:	f7f7 fd3c 	bl	80134c8 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 801ba50:	68f8      	ldr	r0, [r7, #12]
 801ba52:	f7ff ffbd 	bl	801b9d0 <ip_frag_free_pbuf_custom_ref>
}
 801ba56:	bf00      	nop
 801ba58:	3710      	adds	r7, #16
 801ba5a:	46bd      	mov	sp, r7
 801ba5c:	bd80      	pop	{r7, pc}
 801ba5e:	bf00      	nop
 801ba60:	08020c58 	.word	0x08020c58
 801ba64:	08020e1c 	.word	0x08020e1c
 801ba68:	08020ca0 	.word	0x08020ca0
 801ba6c:	08020e28 	.word	0x08020e28

0801ba70 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 801ba70:	b580      	push	{r7, lr}
 801ba72:	b094      	sub	sp, #80	; 0x50
 801ba74:	af02      	add	r7, sp, #8
 801ba76:	60f8      	str	r0, [r7, #12]
 801ba78:	60b9      	str	r1, [r7, #8]
 801ba7a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801ba7c:	2300      	movs	r3, #0
 801ba7e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 801ba82:	68bb      	ldr	r3, [r7, #8]
 801ba84:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801ba86:	3b14      	subs	r3, #20
 801ba88:	2b00      	cmp	r3, #0
 801ba8a:	da00      	bge.n	801ba8e <ip4_frag+0x1e>
 801ba8c:	3307      	adds	r3, #7
 801ba8e:	10db      	asrs	r3, r3, #3
 801ba90:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 801ba92:	2314      	movs	r3, #20
 801ba94:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 801ba96:	68fb      	ldr	r3, [r7, #12]
 801ba98:	685b      	ldr	r3, [r3, #4]
 801ba9a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801ba9c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801ba9e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 801baa0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801baa2:	781b      	ldrb	r3, [r3, #0]
 801baa4:	f003 030f 	and.w	r3, r3, #15
 801baa8:	b2db      	uxtb	r3, r3
 801baaa:	009b      	lsls	r3, r3, #2
 801baac:	b2db      	uxtb	r3, r3
 801baae:	2b14      	cmp	r3, #20
 801bab0:	d002      	beq.n	801bab8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 801bab2:	f06f 0305 	mvn.w	r3, #5
 801bab6:	e110      	b.n	801bcda <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 801bab8:	68fb      	ldr	r3, [r7, #12]
 801baba:	895b      	ldrh	r3, [r3, #10]
 801babc:	2b13      	cmp	r3, #19
 801babe:	d809      	bhi.n	801bad4 <ip4_frag+0x64>
 801bac0:	4b88      	ldr	r3, [pc, #544]	; (801bce4 <ip4_frag+0x274>)
 801bac2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 801bac6:	4988      	ldr	r1, [pc, #544]	; (801bce8 <ip4_frag+0x278>)
 801bac8:	4888      	ldr	r0, [pc, #544]	; (801bcec <ip4_frag+0x27c>)
 801baca:	f001 fcef 	bl	801d4ac <iprintf>
 801bace:	f06f 0305 	mvn.w	r3, #5
 801bad2:	e102      	b.n	801bcda <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 801bad4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bad6:	88db      	ldrh	r3, [r3, #6]
 801bad8:	b29b      	uxth	r3, r3
 801bada:	4618      	mov	r0, r3
 801badc:	f7f6 f8f2 	bl	8011cc4 <lwip_htons>
 801bae0:	4603      	mov	r3, r0
 801bae2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 801bae4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801bae6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801baea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 801baee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801baf0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 801baf4:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 801baf6:	68fb      	ldr	r3, [r7, #12]
 801baf8:	891b      	ldrh	r3, [r3, #8]
 801bafa:	3b14      	subs	r3, #20
 801bafc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 801bb00:	e0e1      	b.n	801bcc6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 801bb02:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801bb04:	00db      	lsls	r3, r3, #3
 801bb06:	b29b      	uxth	r3, r3
 801bb08:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801bb0c:	4293      	cmp	r3, r2
 801bb0e:	bf28      	it	cs
 801bb10:	4613      	movcs	r3, r2
 801bb12:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 801bb14:	f44f 7220 	mov.w	r2, #640	; 0x280
 801bb18:	2114      	movs	r1, #20
 801bb1a:	200e      	movs	r0, #14
 801bb1c:	f7f7 f9f0 	bl	8012f00 <pbuf_alloc>
 801bb20:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 801bb22:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb24:	2b00      	cmp	r3, #0
 801bb26:	f000 80d5 	beq.w	801bcd4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801bb2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb2c:	895b      	ldrh	r3, [r3, #10]
 801bb2e:	2b13      	cmp	r3, #19
 801bb30:	d806      	bhi.n	801bb40 <ip4_frag+0xd0>
 801bb32:	4b6c      	ldr	r3, [pc, #432]	; (801bce4 <ip4_frag+0x274>)
 801bb34:	f44f 7249 	mov.w	r2, #804	; 0x324
 801bb38:	496d      	ldr	r1, [pc, #436]	; (801bcf0 <ip4_frag+0x280>)
 801bb3a:	486c      	ldr	r0, [pc, #432]	; (801bcec <ip4_frag+0x27c>)
 801bb3c:	f001 fcb6 	bl	801d4ac <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 801bb40:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb42:	685b      	ldr	r3, [r3, #4]
 801bb44:	2214      	movs	r2, #20
 801bb46:	6b79      	ldr	r1, [r7, #52]	; 0x34
 801bb48:	4618      	mov	r0, r3
 801bb4a:	f001 fde0 	bl	801d70e <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801bb4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bb50:	685b      	ldr	r3, [r3, #4]
 801bb52:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 801bb54:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801bb56:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801bb5a:	e064      	b.n	801bc26 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801bb5c:	68fb      	ldr	r3, [r7, #12]
 801bb5e:	895a      	ldrh	r2, [r3, #10]
 801bb60:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801bb62:	1ad3      	subs	r3, r2, r3
 801bb64:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 801bb66:	68fb      	ldr	r3, [r7, #12]
 801bb68:	895b      	ldrh	r3, [r3, #10]
 801bb6a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801bb6c:	429a      	cmp	r2, r3
 801bb6e:	d906      	bls.n	801bb7e <ip4_frag+0x10e>
 801bb70:	4b5c      	ldr	r3, [pc, #368]	; (801bce4 <ip4_frag+0x274>)
 801bb72:	f240 322d 	movw	r2, #813	; 0x32d
 801bb76:	495f      	ldr	r1, [pc, #380]	; (801bcf4 <ip4_frag+0x284>)
 801bb78:	485c      	ldr	r0, [pc, #368]	; (801bcec <ip4_frag+0x27c>)
 801bb7a:	f001 fc97 	bl	801d4ac <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801bb7e:	8bfa      	ldrh	r2, [r7, #30]
 801bb80:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801bb84:	4293      	cmp	r3, r2
 801bb86:	bf28      	it	cs
 801bb88:	4613      	movcs	r3, r2
 801bb8a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801bb8e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801bb92:	2b00      	cmp	r3, #0
 801bb94:	d105      	bne.n	801bba2 <ip4_frag+0x132>
        poff = 0;
 801bb96:	2300      	movs	r3, #0
 801bb98:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801bb9a:	68fb      	ldr	r3, [r7, #12]
 801bb9c:	681b      	ldr	r3, [r3, #0]
 801bb9e:	60fb      	str	r3, [r7, #12]
        continue;
 801bba0:	e041      	b.n	801bc26 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 801bba2:	f7ff ff0d 	bl	801b9c0 <ip_frag_alloc_pbuf_custom_ref>
 801bba6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 801bba8:	69bb      	ldr	r3, [r7, #24]
 801bbaa:	2b00      	cmp	r3, #0
 801bbac:	d103      	bne.n	801bbb6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 801bbae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801bbb0:	f7f7 fc8a 	bl	80134c8 <pbuf_free>
        goto memerr;
 801bbb4:	e08f      	b.n	801bcd6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801bbb6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 801bbb8:	68fb      	ldr	r3, [r7, #12]
 801bbba:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 801bbbc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801bbbe:	4413      	add	r3, r2
 801bbc0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 801bbc4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 801bbc8:	9201      	str	r2, [sp, #4]
 801bbca:	9300      	str	r3, [sp, #0]
 801bbcc:	4603      	mov	r3, r0
 801bbce:	2241      	movs	r2, #65	; 0x41
 801bbd0:	2000      	movs	r0, #0
 801bbd2:	f7f7 fabf 	bl	8013154 <pbuf_alloced_custom>
 801bbd6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 801bbd8:	697b      	ldr	r3, [r7, #20]
 801bbda:	2b00      	cmp	r3, #0
 801bbdc:	d106      	bne.n	801bbec <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 801bbde:	69b8      	ldr	r0, [r7, #24]
 801bbe0:	f7ff fef6 	bl	801b9d0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 801bbe4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801bbe6:	f7f7 fc6f 	bl	80134c8 <pbuf_free>
        goto memerr;
 801bbea:	e074      	b.n	801bcd6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 801bbec:	68f8      	ldr	r0, [r7, #12]
 801bbee:	f7f7 fd11 	bl	8013614 <pbuf_ref>
      pcr->original = p;
 801bbf2:	69bb      	ldr	r3, [r7, #24]
 801bbf4:	68fa      	ldr	r2, [r7, #12]
 801bbf6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 801bbf8:	69bb      	ldr	r3, [r7, #24]
 801bbfa:	4a3f      	ldr	r2, [pc, #252]	; (801bcf8 <ip4_frag+0x288>)
 801bbfc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 801bbfe:	6979      	ldr	r1, [r7, #20]
 801bc00:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801bc02:	f7f7 fd2f 	bl	8013664 <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 801bc06:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801bc0a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801bc0e:	1ad3      	subs	r3, r2, r3
 801bc10:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 801bc14:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801bc18:	2b00      	cmp	r3, #0
 801bc1a:	d004      	beq.n	801bc26 <ip4_frag+0x1b6>
        poff = 0;
 801bc1c:	2300      	movs	r3, #0
 801bc1e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801bc20:	68fb      	ldr	r3, [r7, #12]
 801bc22:	681b      	ldr	r3, [r3, #0]
 801bc24:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 801bc26:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801bc2a:	2b00      	cmp	r3, #0
 801bc2c:	d196      	bne.n	801bb5c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801bc2e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801bc30:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801bc34:	4413      	add	r3, r2
 801bc36:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 801bc38:	68bb      	ldr	r3, [r7, #8]
 801bc3a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801bc3c:	f1a3 0213 	sub.w	r2, r3, #19
 801bc40:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801bc44:	429a      	cmp	r2, r3
 801bc46:	bfcc      	ite	gt
 801bc48:	2301      	movgt	r3, #1
 801bc4a:	2300      	movle	r3, #0
 801bc4c:	b2db      	uxtb	r3, r3
 801bc4e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 801bc50:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801bc54:	f3c3 030c 	ubfx	r3, r3, #0, #13
 801bc58:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801bc5a:	6a3b      	ldr	r3, [r7, #32]
 801bc5c:	2b00      	cmp	r3, #0
 801bc5e:	d002      	beq.n	801bc66 <ip4_frag+0x1f6>
 801bc60:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bc62:	2b00      	cmp	r3, #0
 801bc64:	d003      	beq.n	801bc6e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 801bc66:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801bc68:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801bc6c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801bc6e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801bc70:	4618      	mov	r0, r3
 801bc72:	f7f6 f827 	bl	8011cc4 <lwip_htons>
 801bc76:	4603      	mov	r3, r0
 801bc78:	461a      	mov	r2, r3
 801bc7a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bc7c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801bc7e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801bc80:	3314      	adds	r3, #20
 801bc82:	b29b      	uxth	r3, r3
 801bc84:	4618      	mov	r0, r3
 801bc86:	f7f6 f81d 	bl	8011cc4 <lwip_htons>
 801bc8a:	4603      	mov	r3, r0
 801bc8c:	461a      	mov	r2, r3
 801bc8e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bc90:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 801bc92:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801bc94:	2200      	movs	r2, #0
 801bc96:	729a      	strb	r2, [r3, #10]
 801bc98:	2200      	movs	r2, #0
 801bc9a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801bc9c:	68bb      	ldr	r3, [r7, #8]
 801bc9e:	695b      	ldr	r3, [r3, #20]
 801bca0:	687a      	ldr	r2, [r7, #4]
 801bca2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 801bca4:	68b8      	ldr	r0, [r7, #8]
 801bca6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 801bca8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 801bcaa:	f7f7 fc0d 	bl	80134c8 <pbuf_free>
    left = (u16_t)(left - fragsize);
 801bcae:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801bcb2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 801bcb4:	1ad3      	subs	r3, r2, r3
 801bcb6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 801bcba:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 801bcbe:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801bcc0:	4413      	add	r3, r2
 801bcc2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 801bcc6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801bcca:	2b00      	cmp	r3, #0
 801bccc:	f47f af19 	bne.w	801bb02 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 801bcd0:	2300      	movs	r3, #0
 801bcd2:	e002      	b.n	801bcda <ip4_frag+0x26a>
      goto memerr;
 801bcd4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 801bcd6:	f04f 33ff 	mov.w	r3, #4294967295
}
 801bcda:	4618      	mov	r0, r3
 801bcdc:	3748      	adds	r7, #72	; 0x48
 801bcde:	46bd      	mov	sp, r7
 801bce0:	bd80      	pop	{r7, pc}
 801bce2:	bf00      	nop
 801bce4:	08020c58 	.word	0x08020c58
 801bce8:	08020e34 	.word	0x08020e34
 801bcec:	08020ca0 	.word	0x08020ca0
 801bcf0:	08020e50 	.word	0x08020e50
 801bcf4:	08020e70 	.word	0x08020e70
 801bcf8:	0801ba09 	.word	0x0801ba09

0801bcfc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 801bcfc:	b580      	push	{r7, lr}
 801bcfe:	b086      	sub	sp, #24
 801bd00:	af00      	add	r7, sp, #0
 801bd02:	6078      	str	r0, [r7, #4]
 801bd04:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 801bd06:	230e      	movs	r3, #14
 801bd08:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801bd0a:	687b      	ldr	r3, [r7, #4]
 801bd0c:	895b      	ldrh	r3, [r3, #10]
 801bd0e:	2b0e      	cmp	r3, #14
 801bd10:	d96e      	bls.n	801bdf0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 801bd12:	687b      	ldr	r3, [r7, #4]
 801bd14:	7bdb      	ldrb	r3, [r3, #15]
 801bd16:	2b00      	cmp	r3, #0
 801bd18:	d106      	bne.n	801bd28 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801bd1a:	683b      	ldr	r3, [r7, #0]
 801bd1c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 801bd20:	3301      	adds	r3, #1
 801bd22:	b2da      	uxtb	r2, r3
 801bd24:	687b      	ldr	r3, [r7, #4]
 801bd26:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 801bd28:	687b      	ldr	r3, [r7, #4]
 801bd2a:	685b      	ldr	r3, [r3, #4]
 801bd2c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801bd2e:	693b      	ldr	r3, [r7, #16]
 801bd30:	7b1a      	ldrb	r2, [r3, #12]
 801bd32:	7b5b      	ldrb	r3, [r3, #13]
 801bd34:	021b      	lsls	r3, r3, #8
 801bd36:	4313      	orrs	r3, r2
 801bd38:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801bd3a:	693b      	ldr	r3, [r7, #16]
 801bd3c:	781b      	ldrb	r3, [r3, #0]
 801bd3e:	f003 0301 	and.w	r3, r3, #1
 801bd42:	2b00      	cmp	r3, #0
 801bd44:	d023      	beq.n	801bd8e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 801bd46:	693b      	ldr	r3, [r7, #16]
 801bd48:	781b      	ldrb	r3, [r3, #0]
 801bd4a:	2b01      	cmp	r3, #1
 801bd4c:	d10f      	bne.n	801bd6e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801bd4e:	693b      	ldr	r3, [r7, #16]
 801bd50:	785b      	ldrb	r3, [r3, #1]
 801bd52:	2b00      	cmp	r3, #0
 801bd54:	d11b      	bne.n	801bd8e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 801bd56:	693b      	ldr	r3, [r7, #16]
 801bd58:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801bd5a:	2b5e      	cmp	r3, #94	; 0x5e
 801bd5c:	d117      	bne.n	801bd8e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801bd5e:	687b      	ldr	r3, [r7, #4]
 801bd60:	7b5b      	ldrb	r3, [r3, #13]
 801bd62:	f043 0310 	orr.w	r3, r3, #16
 801bd66:	b2da      	uxtb	r2, r3
 801bd68:	687b      	ldr	r3, [r7, #4]
 801bd6a:	735a      	strb	r2, [r3, #13]
 801bd6c:	e00f      	b.n	801bd8e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801bd6e:	693b      	ldr	r3, [r7, #16]
 801bd70:	2206      	movs	r2, #6
 801bd72:	4928      	ldr	r1, [pc, #160]	; (801be14 <ethernet_input+0x118>)
 801bd74:	4618      	mov	r0, r3
 801bd76:	f001 fbee 	bl	801d556 <memcmp>
 801bd7a:	4603      	mov	r3, r0
 801bd7c:	2b00      	cmp	r3, #0
 801bd7e:	d106      	bne.n	801bd8e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 801bd80:	687b      	ldr	r3, [r7, #4]
 801bd82:	7b5b      	ldrb	r3, [r3, #13]
 801bd84:	f043 0308 	orr.w	r3, r3, #8
 801bd88:	b2da      	uxtb	r2, r3
 801bd8a:	687b      	ldr	r3, [r7, #4]
 801bd8c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801bd8e:	89fb      	ldrh	r3, [r7, #14]
 801bd90:	2b08      	cmp	r3, #8
 801bd92:	d003      	beq.n	801bd9c <ethernet_input+0xa0>
 801bd94:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 801bd98:	d014      	beq.n	801bdc4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801bd9a:	e032      	b.n	801be02 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801bd9c:	683b      	ldr	r3, [r7, #0]
 801bd9e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801bda2:	f003 0308 	and.w	r3, r3, #8
 801bda6:	2b00      	cmp	r3, #0
 801bda8:	d024      	beq.n	801bdf4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801bdaa:	8afb      	ldrh	r3, [r7, #22]
 801bdac:	4619      	mov	r1, r3
 801bdae:	6878      	ldr	r0, [r7, #4]
 801bdb0:	f7f7 fb04 	bl	80133bc <pbuf_remove_header>
 801bdb4:	4603      	mov	r3, r0
 801bdb6:	2b00      	cmp	r3, #0
 801bdb8:	d11e      	bne.n	801bdf8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 801bdba:	6839      	ldr	r1, [r7, #0]
 801bdbc:	6878      	ldr	r0, [r7, #4]
 801bdbe:	f7fe ff21 	bl	801ac04 <ip4_input>
      break;
 801bdc2:	e013      	b.n	801bdec <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801bdc4:	683b      	ldr	r3, [r7, #0]
 801bdc6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801bdca:	f003 0308 	and.w	r3, r3, #8
 801bdce:	2b00      	cmp	r3, #0
 801bdd0:	d014      	beq.n	801bdfc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 801bdd2:	8afb      	ldrh	r3, [r7, #22]
 801bdd4:	4619      	mov	r1, r3
 801bdd6:	6878      	ldr	r0, [r7, #4]
 801bdd8:	f7f7 faf0 	bl	80133bc <pbuf_remove_header>
 801bddc:	4603      	mov	r3, r0
 801bdde:	2b00      	cmp	r3, #0
 801bde0:	d10e      	bne.n	801be00 <ethernet_input+0x104>
        etharp_input(p, netif);
 801bde2:	6839      	ldr	r1, [r7, #0]
 801bde4:	6878      	ldr	r0, [r7, #4]
 801bde6:	f7fe f8c1 	bl	8019f6c <etharp_input>
      break;
 801bdea:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 801bdec:	2300      	movs	r3, #0
 801bdee:	e00c      	b.n	801be0a <ethernet_input+0x10e>
    goto free_and_return;
 801bdf0:	bf00      	nop
 801bdf2:	e006      	b.n	801be02 <ethernet_input+0x106>
        goto free_and_return;
 801bdf4:	bf00      	nop
 801bdf6:	e004      	b.n	801be02 <ethernet_input+0x106>
        goto free_and_return;
 801bdf8:	bf00      	nop
 801bdfa:	e002      	b.n	801be02 <ethernet_input+0x106>
        goto free_and_return;
 801bdfc:	bf00      	nop
 801bdfe:	e000      	b.n	801be02 <ethernet_input+0x106>
        goto free_and_return;
 801be00:	bf00      	nop

free_and_return:
  pbuf_free(p);
 801be02:	6878      	ldr	r0, [r7, #4]
 801be04:	f7f7 fb60 	bl	80134c8 <pbuf_free>
  return ERR_OK;
 801be08:	2300      	movs	r3, #0
}
 801be0a:	4618      	mov	r0, r3
 801be0c:	3718      	adds	r7, #24
 801be0e:	46bd      	mov	sp, r7
 801be10:	bd80      	pop	{r7, pc}
 801be12:	bf00      	nop
 801be14:	08021080 	.word	0x08021080

0801be18 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 801be18:	b580      	push	{r7, lr}
 801be1a:	b086      	sub	sp, #24
 801be1c:	af00      	add	r7, sp, #0
 801be1e:	60f8      	str	r0, [r7, #12]
 801be20:	60b9      	str	r1, [r7, #8]
 801be22:	607a      	str	r2, [r7, #4]
 801be24:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 801be26:	8c3b      	ldrh	r3, [r7, #32]
 801be28:	4618      	mov	r0, r3
 801be2a:	f7f5 ff4b 	bl	8011cc4 <lwip_htons>
 801be2e:	4603      	mov	r3, r0
 801be30:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 801be32:	210e      	movs	r1, #14
 801be34:	68b8      	ldr	r0, [r7, #8]
 801be36:	f7f7 fab1 	bl	801339c <pbuf_add_header>
 801be3a:	4603      	mov	r3, r0
 801be3c:	2b00      	cmp	r3, #0
 801be3e:	d125      	bne.n	801be8c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 801be40:	68bb      	ldr	r3, [r7, #8]
 801be42:	685b      	ldr	r3, [r3, #4]
 801be44:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 801be46:	693b      	ldr	r3, [r7, #16]
 801be48:	8afa      	ldrh	r2, [r7, #22]
 801be4a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801be4c:	693b      	ldr	r3, [r7, #16]
 801be4e:	2206      	movs	r2, #6
 801be50:	6839      	ldr	r1, [r7, #0]
 801be52:	4618      	mov	r0, r3
 801be54:	f001 fc5b 	bl	801d70e <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 801be58:	693b      	ldr	r3, [r7, #16]
 801be5a:	3306      	adds	r3, #6
 801be5c:	2206      	movs	r2, #6
 801be5e:	6879      	ldr	r1, [r7, #4]
 801be60:	4618      	mov	r0, r3
 801be62:	f001 fc54 	bl	801d70e <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 801be66:	68fb      	ldr	r3, [r7, #12]
 801be68:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801be6c:	2b06      	cmp	r3, #6
 801be6e:	d006      	beq.n	801be7e <ethernet_output+0x66>
 801be70:	4b0a      	ldr	r3, [pc, #40]	; (801be9c <ethernet_output+0x84>)
 801be72:	f44f 7299 	mov.w	r2, #306	; 0x132
 801be76:	490a      	ldr	r1, [pc, #40]	; (801bea0 <ethernet_output+0x88>)
 801be78:	480a      	ldr	r0, [pc, #40]	; (801bea4 <ethernet_output+0x8c>)
 801be7a:	f001 fb17 	bl	801d4ac <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801be7e:	68fb      	ldr	r3, [r7, #12]
 801be80:	699b      	ldr	r3, [r3, #24]
 801be82:	68b9      	ldr	r1, [r7, #8]
 801be84:	68f8      	ldr	r0, [r7, #12]
 801be86:	4798      	blx	r3
 801be88:	4603      	mov	r3, r0
 801be8a:	e002      	b.n	801be92 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801be8c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801be8e:	f06f 0301 	mvn.w	r3, #1
}
 801be92:	4618      	mov	r0, r3
 801be94:	3718      	adds	r7, #24
 801be96:	46bd      	mov	sp, r7
 801be98:	bd80      	pop	{r7, pc}
 801be9a:	bf00      	nop
 801be9c:	08020e80 	.word	0x08020e80
 801bea0:	08020eb8 	.word	0x08020eb8
 801bea4:	08020eec 	.word	0x08020eec

0801bea8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 801bea8:	b580      	push	{r7, lr}
 801beaa:	b086      	sub	sp, #24
 801beac:	af00      	add	r7, sp, #0
 801beae:	6078      	str	r0, [r7, #4]
 801beb0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
 801beb2:	683b      	ldr	r3, [r7, #0]
 801beb4:	60bb      	str	r3, [r7, #8]
 801beb6:	2304      	movs	r3, #4
 801beb8:	60fb      	str	r3, [r7, #12]
 801beba:	2300      	movs	r3, #0
 801bebc:	613b      	str	r3, [r7, #16]
 801bebe:	2300      	movs	r3, #0
 801bec0:	617b      	str	r3, [r7, #20]
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
 801bec2:	f107 0308 	add.w	r3, r7, #8
 801bec6:	2100      	movs	r1, #0
 801bec8:	4618      	mov	r0, r3
 801beca:	f7f2 ff27 	bl	800ed1c <osMessageCreate>
 801bece:	4602      	mov	r2, r0
 801bed0:	687b      	ldr	r3, [r7, #4]
 801bed2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 801bed4:	687b      	ldr	r3, [r7, #4]
 801bed6:	681b      	ldr	r3, [r3, #0]
 801bed8:	2b00      	cmp	r3, #0
 801beda:	d102      	bne.n	801bee2 <sys_mbox_new+0x3a>
    return ERR_MEM;
 801bedc:	f04f 33ff 	mov.w	r3, #4294967295
 801bee0:	e000      	b.n	801bee4 <sys_mbox_new+0x3c>

  return ERR_OK;
 801bee2:	2300      	movs	r3, #0
}
 801bee4:	4618      	mov	r0, r3
 801bee6:	3718      	adds	r7, #24
 801bee8:	46bd      	mov	sp, r7
 801beea:	bd80      	pop	{r7, pc}

0801beec <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 801beec:	b580      	push	{r7, lr}
 801beee:	b084      	sub	sp, #16
 801bef0:	af00      	add	r7, sp, #0
 801bef2:	6078      	str	r0, [r7, #4]
 801bef4:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
 801bef6:	687b      	ldr	r3, [r7, #4]
 801bef8:	681b      	ldr	r3, [r3, #0]
 801befa:	6839      	ldr	r1, [r7, #0]
 801befc:	2200      	movs	r2, #0
 801befe:	4618      	mov	r0, r3
 801bf00:	f7f2 ff34 	bl	800ed6c <osMessagePut>
 801bf04:	4603      	mov	r3, r0
 801bf06:	2b00      	cmp	r3, #0
 801bf08:	d102      	bne.n	801bf10 <sys_mbox_trypost+0x24>
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
#endif
  {
    result = ERR_OK;
 801bf0a:	2300      	movs	r3, #0
 801bf0c:	73fb      	strb	r3, [r7, #15]
 801bf0e:	e001      	b.n	801bf14 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 801bf10:	23ff      	movs	r3, #255	; 0xff
 801bf12:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 801bf14:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801bf18:	4618      	mov	r0, r3
 801bf1a:	3710      	adds	r7, #16
 801bf1c:	46bd      	mov	sp, r7
 801bf1e:	bd80      	pop	{r7, pc}

0801bf20 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 801bf20:	b580      	push	{r7, lr}
 801bf22:	b08c      	sub	sp, #48	; 0x30
 801bf24:	af00      	add	r7, sp, #0
 801bf26:	61f8      	str	r0, [r7, #28]
 801bf28:	61b9      	str	r1, [r7, #24]
 801bf2a:	617a      	str	r2, [r7, #20]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
 801bf2c:	f7f2 fd27 	bl	800e97e <osKernelSysTick>
 801bf30:	62f8      	str	r0, [r7, #44]	; 0x2c
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
#endif
  if(timeout != 0)
 801bf32:	697b      	ldr	r3, [r7, #20]
 801bf34:	2b00      	cmp	r3, #0
 801bf36:	d017      	beq.n	801bf68 <sys_arch_mbox_fetch+0x48>
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, timeout);
 801bf38:	69fb      	ldr	r3, [r7, #28]
 801bf3a:	6819      	ldr	r1, [r3, #0]
 801bf3c:	f107 0320 	add.w	r3, r7, #32
 801bf40:	697a      	ldr	r2, [r7, #20]
 801bf42:	4618      	mov	r0, r3
 801bf44:	f7f2 ff52 	bl	800edec <osMessageGet>

    if(event.status == osEventMessage)
 801bf48:	6a3b      	ldr	r3, [r7, #32]
 801bf4a:	2b10      	cmp	r3, #16
 801bf4c:	d109      	bne.n	801bf62 <sys_arch_mbox_fetch+0x42>
    {
      *msg = (void *)event.value.v;
 801bf4e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf50:	461a      	mov	r2, r3
 801bf52:	69bb      	ldr	r3, [r7, #24]
 801bf54:	601a      	str	r2, [r3, #0]
      return (osKernelSysTick() - starttime);
 801bf56:	f7f2 fd12 	bl	800e97e <osKernelSysTick>
 801bf5a:	4602      	mov	r2, r0
 801bf5c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf5e:	1ad3      	subs	r3, r2, r3
 801bf60:	e019      	b.n	801bf96 <sys_arch_mbox_fetch+0x76>
      return (osKernelGetTickCount() - starttime);
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801bf62:	f04f 33ff 	mov.w	r3, #4294967295
 801bf66:	e016      	b.n	801bf96 <sys_arch_mbox_fetch+0x76>
    }
  }
  else
  {
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
 801bf68:	69fb      	ldr	r3, [r7, #28]
 801bf6a:	6819      	ldr	r1, [r3, #0]
 801bf6c:	463b      	mov	r3, r7
 801bf6e:	f04f 32ff 	mov.w	r2, #4294967295
 801bf72:	4618      	mov	r0, r3
 801bf74:	f7f2 ff3a 	bl	800edec <osMessageGet>
 801bf78:	f107 0320 	add.w	r3, r7, #32
 801bf7c:	463a      	mov	r2, r7
 801bf7e:	ca07      	ldmia	r2, {r0, r1, r2}
 801bf80:	e883 0007 	stmia.w	r3, {r0, r1, r2}
    *msg = (void *)event.value.v;
 801bf84:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801bf86:	461a      	mov	r2, r3
 801bf88:	69bb      	ldr	r3, [r7, #24]
 801bf8a:	601a      	str	r2, [r3, #0]
    return (osKernelSysTick() - starttime);
 801bf8c:	f7f2 fcf7 	bl	800e97e <osKernelSysTick>
 801bf90:	4602      	mov	r2, r0
 801bf92:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801bf94:	1ad3      	subs	r3, r2, r3
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
    return (osKernelGetTickCount() - starttime);
#endif
  }
}
 801bf96:	4618      	mov	r0, r3
 801bf98:	3730      	adds	r7, #48	; 0x30
 801bf9a:	46bd      	mov	sp, r7
 801bf9c:	bd80      	pop	{r7, pc}

0801bf9e <sys_mbox_valid>:
    return SYS_MBOX_EMPTY;
  }
}
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 801bf9e:	b480      	push	{r7}
 801bfa0:	b083      	sub	sp, #12
 801bfa2:	af00      	add	r7, sp, #0
 801bfa4:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 801bfa6:	687b      	ldr	r3, [r7, #4]
 801bfa8:	681b      	ldr	r3, [r3, #0]
 801bfaa:	2b00      	cmp	r3, #0
 801bfac:	d101      	bne.n	801bfb2 <sys_mbox_valid+0x14>
    return 0;
 801bfae:	2300      	movs	r3, #0
 801bfb0:	e000      	b.n	801bfb4 <sys_mbox_valid+0x16>
  else
    return 1;
 801bfb2:	2301      	movs	r3, #1
}
 801bfb4:	4618      	mov	r0, r3
 801bfb6:	370c      	adds	r7, #12
 801bfb8:	46bd      	mov	sp, r7
 801bfba:	f85d 7b04 	ldr.w	r7, [sp], #4
 801bfbe:	4770      	bx	lr

0801bfc0 <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 801bfc0:	b580      	push	{r7, lr}
 801bfc2:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
 801bfc4:	4803      	ldr	r0, [pc, #12]	; (801bfd4 <sys_init+0x14>)
 801bfc6:	f7f2 fd56 	bl	800ea76 <osMutexCreate>
 801bfca:	4603      	mov	r3, r0
 801bfcc:	4a02      	ldr	r2, [pc, #8]	; (801bfd8 <sys_init+0x18>)
 801bfce:	6013      	str	r3, [r2, #0]
#else
  lwip_sys_mutex = osMutexNew(NULL);
#endif
}
 801bfd0:	bf00      	nop
 801bfd2:	bd80      	pop	{r7, pc}
 801bfd4:	08021090 	.word	0x08021090
 801bfd8:	200241a8 	.word	0x200241a8

0801bfdc <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 801bfdc:	b580      	push	{r7, lr}
 801bfde:	b084      	sub	sp, #16
 801bfe0:	af00      	add	r7, sp, #0
 801bfe2:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
 801bfe4:	2300      	movs	r3, #0
 801bfe6:	60bb      	str	r3, [r7, #8]
 801bfe8:	2300      	movs	r3, #0
 801bfea:	60fb      	str	r3, [r7, #12]
  *mutex = osMutexCreate(osMutex(MUTEX));
 801bfec:	f107 0308 	add.w	r3, r7, #8
 801bff0:	4618      	mov	r0, r3
 801bff2:	f7f2 fd40 	bl	800ea76 <osMutexCreate>
 801bff6:	4602      	mov	r2, r0
 801bff8:	687b      	ldr	r3, [r7, #4]
 801bffa:	601a      	str	r2, [r3, #0]
#else
  *mutex = osMutexNew(NULL);
#endif

  if(*mutex == NULL)
 801bffc:	687b      	ldr	r3, [r7, #4]
 801bffe:	681b      	ldr	r3, [r3, #0]
 801c000:	2b00      	cmp	r3, #0
 801c002:	d102      	bne.n	801c00a <sys_mutex_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 801c004:	f04f 33ff 	mov.w	r3, #4294967295
 801c008:	e000      	b.n	801c00c <sys_mutex_new+0x30>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 801c00a:	2300      	movs	r3, #0
}
 801c00c:	4618      	mov	r0, r3
 801c00e:	3710      	adds	r7, #16
 801c010:	46bd      	mov	sp, r7
 801c012:	bd80      	pop	{r7, pc}

0801c014 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 801c014:	b580      	push	{r7, lr}
 801c016:	b082      	sub	sp, #8
 801c018:	af00      	add	r7, sp, #0
 801c01a:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
 801c01c:	687b      	ldr	r3, [r7, #4]
 801c01e:	681b      	ldr	r3, [r3, #0]
 801c020:	f04f 31ff 	mov.w	r1, #4294967295
 801c024:	4618      	mov	r0, r3
 801c026:	f7f2 fd3f 	bl	800eaa8 <osMutexWait>
#else
  osMutexAcquire(*mutex, osWaitForever);
#endif
}
 801c02a:	bf00      	nop
 801c02c:	3708      	adds	r7, #8
 801c02e:	46bd      	mov	sp, r7
 801c030:	bd80      	pop	{r7, pc}

0801c032 <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 801c032:	b580      	push	{r7, lr}
 801c034:	b082      	sub	sp, #8
 801c036:	af00      	add	r7, sp, #0
 801c038:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 801c03a:	687b      	ldr	r3, [r7, #4]
 801c03c:	681b      	ldr	r3, [r3, #0]
 801c03e:	4618      	mov	r0, r3
 801c040:	f7f2 fd80 	bl	800eb44 <osMutexRelease>
}
 801c044:	bf00      	nop
 801c046:	3708      	adds	r7, #8
 801c048:	46bd      	mov	sp, r7
 801c04a:	bd80      	pop	{r7, pc}

0801c04c <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 801c04c:	b580      	push	{r7, lr}
 801c04e:	b08c      	sub	sp, #48	; 0x30
 801c050:	af00      	add	r7, sp, #0
 801c052:	60f8      	str	r0, [r7, #12]
 801c054:	60b9      	str	r1, [r7, #8]
 801c056:	607a      	str	r2, [r7, #4]
 801c058:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
 801c05a:	f107 0314 	add.w	r3, r7, #20
 801c05e:	2200      	movs	r2, #0
 801c060:	601a      	str	r2, [r3, #0]
 801c062:	605a      	str	r2, [r3, #4]
 801c064:	609a      	str	r2, [r3, #8]
 801c066:	60da      	str	r2, [r3, #12]
 801c068:	611a      	str	r2, [r3, #16]
 801c06a:	615a      	str	r2, [r3, #20]
 801c06c:	619a      	str	r2, [r3, #24]
 801c06e:	68fb      	ldr	r3, [r7, #12]
 801c070:	617b      	str	r3, [r7, #20]
 801c072:	68bb      	ldr	r3, [r7, #8]
 801c074:	61bb      	str	r3, [r7, #24]
 801c076:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c078:	b21b      	sxth	r3, r3
 801c07a:	83bb      	strh	r3, [r7, #28]
 801c07c:	683b      	ldr	r3, [r7, #0]
 801c07e:	627b      	str	r3, [r7, #36]	; 0x24
  return osThreadCreate(&os_thread_def, arg);
 801c080:	f107 0314 	add.w	r3, r7, #20
 801c084:	6879      	ldr	r1, [r7, #4]
 801c086:	4618      	mov	r0, r3
 801c088:	f7f2 fc89 	bl	800e99e <osThreadCreate>
 801c08c:	4603      	mov	r3, r0
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
#endif
}
 801c08e:	4618      	mov	r0, r3
 801c090:	3730      	adds	r7, #48	; 0x30
 801c092:	46bd      	mov	sp, r7
 801c094:	bd80      	pop	{r7, pc}
	...

0801c098 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 801c098:	b580      	push	{r7, lr}
 801c09a:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
 801c09c:	4b04      	ldr	r3, [pc, #16]	; (801c0b0 <sys_arch_protect+0x18>)
 801c09e:	681b      	ldr	r3, [r3, #0]
 801c0a0:	f04f 31ff 	mov.w	r1, #4294967295
 801c0a4:	4618      	mov	r0, r3
 801c0a6:	f7f2 fcff 	bl	800eaa8 <osMutexWait>
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
#endif
  return (sys_prot_t)1;
 801c0aa:	2301      	movs	r3, #1
}
 801c0ac:	4618      	mov	r0, r3
 801c0ae:	bd80      	pop	{r7, pc}
 801c0b0:	200241a8 	.word	0x200241a8

0801c0b4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 801c0b4:	b580      	push	{r7, lr}
 801c0b6:	b082      	sub	sp, #8
 801c0b8:	af00      	add	r7, sp, #0
 801c0ba:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 801c0bc:	4b04      	ldr	r3, [pc, #16]	; (801c0d0 <sys_arch_unprotect+0x1c>)
 801c0be:	681b      	ldr	r3, [r3, #0]
 801c0c0:	4618      	mov	r0, r3
 801c0c2:	f7f2 fd3f 	bl	800eb44 <osMutexRelease>
}
 801c0c6:	bf00      	nop
 801c0c8:	3708      	adds	r7, #8
 801c0ca:	46bd      	mov	sp, r7
 801c0cc:	bd80      	pop	{r7, pc}
 801c0ce:	bf00      	nop
 801c0d0:	200241a8 	.word	0x200241a8

0801c0d4 <adc_1_2_3_dac1_task>:
 * \param[in]       test_select: select what test in the function to run
 * \param[in]       error_report: report to pc about test error
 */
void
adc_1_2_3_dac1_task(uint8_t* data, uint16_t sizeof_data, SemaphoreHandle_t* interrupt_sem, uint8_t test_select,
                    uint8_t* error_report) {
 801c0d4:	b580      	push	{r7, lr}
 801c0d6:	b086      	sub	sp, #24
 801c0d8:	af00      	add	r7, sp, #0
 801c0da:	60f8      	str	r0, [r7, #12]
 801c0dc:	607a      	str	r2, [r7, #4]
 801c0de:	461a      	mov	r2, r3
 801c0e0:	460b      	mov	r3, r1
 801c0e2:	817b      	strh	r3, [r7, #10]
 801c0e4:	4613      	mov	r3, r2
 801c0e6:	727b      	strb	r3, [r7, #9]

    HAL_StatusTypeDef status; /* error return check */
    *error_report = NO_ERROR; /* initalized to  NO_ERROR if an error is accruing it will change it */
 801c0e8:	6a3b      	ldr	r3, [r7, #32]
 801c0ea:	2200      	movs	r2, #0
 801c0ec:	701a      	strb	r2, [r3, #0]
    /* run task test requested by pc */
    switch (test_select) {
 801c0ee:	7a7b      	ldrb	r3, [r7, #9]
 801c0f0:	2b02      	cmp	r3, #2
 801c0f2:	d044      	beq.n	801c17e <adc_1_2_3_dac1_task+0xaa>
 801c0f4:	2b02      	cmp	r3, #2
 801c0f6:	dc61      	bgt.n	801c1bc <adc_1_2_3_dac1_task+0xe8>
 801c0f8:	2b00      	cmp	r3, #0
 801c0fa:	d002      	beq.n	801c102 <adc_1_2_3_dac1_task+0x2e>
 801c0fc:	2b01      	cmp	r3, #1
 801c0fe:	d01f      	beq.n	801c140 <adc_1_2_3_dac1_task+0x6c>
            HAL_ADC_Start(&hadc3);
            data[0] = HAL_ADC_GetValue(&hadc3);

            break;

        default: break;
 801c100:	e05c      	b.n	801c1bc <adc_1_2_3_dac1_task+0xe8>
            HAL_DAC_Start(&hdac, DAC1_CHANNEL_1);
 801c102:	2100      	movs	r1, #0
 801c104:	482f      	ldr	r0, [pc, #188]	; (801c1c4 <adc_1_2_3_dac1_task+0xf0>)
 801c106:	f7e7 fd1d 	bl	8003b44 <HAL_DAC_Start>
            status = HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, data[0]);
 801c10a:	68fb      	ldr	r3, [r7, #12]
 801c10c:	781b      	ldrb	r3, [r3, #0]
 801c10e:	2200      	movs	r2, #0
 801c110:	2100      	movs	r1, #0
 801c112:	482c      	ldr	r0, [pc, #176]	; (801c1c4 <adc_1_2_3_dac1_task+0xf0>)
 801c114:	f7e7 fd6d 	bl	8003bf2 <HAL_DAC_SetValue>
 801c118:	4603      	mov	r3, r0
 801c11a:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801c11c:	7dfb      	ldrb	r3, [r7, #23]
 801c11e:	2b00      	cmp	r3, #0
 801c120:	d003      	beq.n	801c12a <adc_1_2_3_dac1_task+0x56>
                *error_report = HAL_RETURN_ERROR;
 801c122:	6a3b      	ldr	r3, [r7, #32]
 801c124:	2201      	movs	r2, #1
 801c126:	701a      	strb	r2, [r3, #0]
                return;
 801c128:	e049      	b.n	801c1be <adc_1_2_3_dac1_task+0xea>
            HAL_ADC_Start(&hadc1);
 801c12a:	4827      	ldr	r0, [pc, #156]	; (801c1c8 <adc_1_2_3_dac1_task+0xf4>)
 801c12c:	f7e7 f8da 	bl	80032e4 <HAL_ADC_Start>
            data[0] = HAL_ADC_GetValue(&hadc1);
 801c130:	4825      	ldr	r0, [pc, #148]	; (801c1c8 <adc_1_2_3_dac1_task+0xf4>)
 801c132:	f7e7 f9a5 	bl	8003480 <HAL_ADC_GetValue>
 801c136:	4603      	mov	r3, r0
 801c138:	b2da      	uxtb	r2, r3
 801c13a:	68fb      	ldr	r3, [r7, #12]
 801c13c:	701a      	strb	r2, [r3, #0]
            break;
 801c13e:	e03e      	b.n	801c1be <adc_1_2_3_dac1_task+0xea>
            HAL_DAC_Start(&hdac, DAC1_CHANNEL_1);
 801c140:	2100      	movs	r1, #0
 801c142:	4820      	ldr	r0, [pc, #128]	; (801c1c4 <adc_1_2_3_dac1_task+0xf0>)
 801c144:	f7e7 fcfe 	bl	8003b44 <HAL_DAC_Start>
            status = HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, data[0]);
 801c148:	68fb      	ldr	r3, [r7, #12]
 801c14a:	781b      	ldrb	r3, [r3, #0]
 801c14c:	2200      	movs	r2, #0
 801c14e:	2100      	movs	r1, #0
 801c150:	481c      	ldr	r0, [pc, #112]	; (801c1c4 <adc_1_2_3_dac1_task+0xf0>)
 801c152:	f7e7 fd4e 	bl	8003bf2 <HAL_DAC_SetValue>
 801c156:	4603      	mov	r3, r0
 801c158:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801c15a:	7dfb      	ldrb	r3, [r7, #23]
 801c15c:	2b00      	cmp	r3, #0
 801c15e:	d003      	beq.n	801c168 <adc_1_2_3_dac1_task+0x94>
                *error_report = HAL_RETURN_ERROR;
 801c160:	6a3b      	ldr	r3, [r7, #32]
 801c162:	2201      	movs	r2, #1
 801c164:	701a      	strb	r2, [r3, #0]
                return;
 801c166:	e02a      	b.n	801c1be <adc_1_2_3_dac1_task+0xea>
            HAL_ADC_Start(&hadc2);
 801c168:	4818      	ldr	r0, [pc, #96]	; (801c1cc <adc_1_2_3_dac1_task+0xf8>)
 801c16a:	f7e7 f8bb 	bl	80032e4 <HAL_ADC_Start>
            data[0] = HAL_ADC_GetValue(&hadc2);
 801c16e:	4817      	ldr	r0, [pc, #92]	; (801c1cc <adc_1_2_3_dac1_task+0xf8>)
 801c170:	f7e7 f986 	bl	8003480 <HAL_ADC_GetValue>
 801c174:	4603      	mov	r3, r0
 801c176:	b2da      	uxtb	r2, r3
 801c178:	68fb      	ldr	r3, [r7, #12]
 801c17a:	701a      	strb	r2, [r3, #0]
            break;
 801c17c:	e01f      	b.n	801c1be <adc_1_2_3_dac1_task+0xea>
            HAL_DAC_Start(&hdac, DAC1_CHANNEL_1);
 801c17e:	2100      	movs	r1, #0
 801c180:	4810      	ldr	r0, [pc, #64]	; (801c1c4 <adc_1_2_3_dac1_task+0xf0>)
 801c182:	f7e7 fcdf 	bl	8003b44 <HAL_DAC_Start>
            status = HAL_DAC_SetValue(&hdac, DAC1_CHANNEL_1, DAC_ALIGN_12B_R, data[0]);
 801c186:	68fb      	ldr	r3, [r7, #12]
 801c188:	781b      	ldrb	r3, [r3, #0]
 801c18a:	2200      	movs	r2, #0
 801c18c:	2100      	movs	r1, #0
 801c18e:	480d      	ldr	r0, [pc, #52]	; (801c1c4 <adc_1_2_3_dac1_task+0xf0>)
 801c190:	f7e7 fd2f 	bl	8003bf2 <HAL_DAC_SetValue>
 801c194:	4603      	mov	r3, r0
 801c196:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801c198:	7dfb      	ldrb	r3, [r7, #23]
 801c19a:	2b00      	cmp	r3, #0
 801c19c:	d003      	beq.n	801c1a6 <adc_1_2_3_dac1_task+0xd2>
                *error_report = HAL_RETURN_ERROR;
 801c19e:	6a3b      	ldr	r3, [r7, #32]
 801c1a0:	2201      	movs	r2, #1
 801c1a2:	701a      	strb	r2, [r3, #0]
                return;
 801c1a4:	e00b      	b.n	801c1be <adc_1_2_3_dac1_task+0xea>
            HAL_ADC_Start(&hadc3);
 801c1a6:	480a      	ldr	r0, [pc, #40]	; (801c1d0 <adc_1_2_3_dac1_task+0xfc>)
 801c1a8:	f7e7 f89c 	bl	80032e4 <HAL_ADC_Start>
            data[0] = HAL_ADC_GetValue(&hadc3);
 801c1ac:	4808      	ldr	r0, [pc, #32]	; (801c1d0 <adc_1_2_3_dac1_task+0xfc>)
 801c1ae:	f7e7 f967 	bl	8003480 <HAL_ADC_GetValue>
 801c1b2:	4603      	mov	r3, r0
 801c1b4:	b2da      	uxtb	r2, r3
 801c1b6:	68fb      	ldr	r3, [r7, #12]
 801c1b8:	701a      	strb	r2, [r3, #0]
            break;
 801c1ba:	e000      	b.n	801c1be <adc_1_2_3_dac1_task+0xea>
        default: break;
 801c1bc:	bf00      	nop
    }
}
 801c1be:	3718      	adds	r7, #24
 801c1c0:	46bd      	mov	sp, r7
 801c1c2:	bd80      	pop	{r7, pc}
 801c1c4:	200003d8 	.word	0x200003d8
 801c1c8:	20000300 	.word	0x20000300
 801c1cc:	20000348 	.word	0x20000348
 801c1d0:	20000390 	.word	0x20000390

0801c1d4 <flash_task>:
 * \param[in]       test_select: select what test in the function to run
 * \param[in]       error_report: report to pc about test error
 */
void
flash_task(uint8_t* data, uint16_t sizeof_data, SemaphoreHandle_t* interrupt_sem, uint8_t test_select,
           uint8_t* error_report) {
 801c1d4:	b5b0      	push	{r4, r5, r7, lr}
 801c1d6:	b08a      	sub	sp, #40	; 0x28
 801c1d8:	af00      	add	r7, sp, #0
 801c1da:	60f8      	str	r0, [r7, #12]
 801c1dc:	607a      	str	r2, [r7, #4]
 801c1de:	461a      	mov	r2, r3
 801c1e0:	460b      	mov	r3, r1
 801c1e2:	817b      	strh	r3, [r7, #10]
 801c1e4:	4613      	mov	r3, r2
 801c1e6:	727b      	strb	r3, [r7, #9]

    HAL_StatusTypeDef status; /* error return check */
    *error_report = NO_ERROR; /* initalized to  NO_ERROR if an error is accruing it will change it */
 801c1e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c1ea:	2200      	movs	r2, #0
 801c1ec:	701a      	strb	r2, [r3, #0]
    FLASH_EraseInitTypeDef erase_init;
    uint32_t page_error;
    switch (test_select) {
 801c1ee:	7a7b      	ldrb	r3, [r7, #9]
 801c1f0:	2b00      	cmp	r3, #0
 801c1f2:	d177      	bne.n	801c2e4 <flash_task+0x110>
  __ASM volatile ("cpsid i" : : : "memory");
 801c1f4:	b672      	cpsid	i
}
 801c1f6:	bf00      	nop

            /* no irq while writing to the flash */
            __disable_irq();

            /* erase flash */
            erase_init.TypeErase = FLASH_TYPEERASE_SECTORS;
 801c1f8:	2300      	movs	r3, #0
 801c1fa:	617b      	str	r3, [r7, #20]
            erase_init.Sector = FLASH_SECTOR_6;
 801c1fc:	2306      	movs	r3, #6
 801c1fe:	61bb      	str	r3, [r7, #24]
            erase_init.NbSectors = 1;
 801c200:	2301      	movs	r3, #1
 801c202:	61fb      	str	r3, [r7, #28]
            erase_init.VoltageRange = FLASH_VOLTAGE_RANGE_3;
 801c204:	2302      	movs	r3, #2
 801c206:	623b      	str	r3, [r7, #32]

            HAL_FLASH_Unlock();
 801c208:	f7e9 fd26 	bl	8005c58 <HAL_FLASH_Unlock>
            __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP | FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR
 801c20c:	4b39      	ldr	r3, [pc, #228]	; (801c2f4 <flash_task+0x120>)
 801c20e:	2273      	movs	r2, #115	; 0x73
 801c210:	60da      	str	r2, [r3, #12]
                                   | FLASH_FLAG_PGPERR);

            status = HAL_FLASHEx_Erase(&erase_init, &page_error);
 801c212:	f107 0210 	add.w	r2, r7, #16
 801c216:	f107 0314 	add.w	r3, r7, #20
 801c21a:	4611      	mov	r1, r2
 801c21c:	4618      	mov	r0, r3
 801c21e:	f7e9 fe7d 	bl	8005f1c <HAL_FLASHEx_Erase>
 801c222:	4603      	mov	r3, r0
 801c224:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
            if (status != HAL_OK) {
 801c228:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801c22c:	2b00      	cmp	r3, #0
 801c22e:	d007      	beq.n	801c240 <flash_task+0x6c>
                *error_report = HAL_RETURN_ERROR;
 801c230:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c232:	2201      	movs	r2, #1
 801c234:	701a      	strb	r2, [r3, #0]
                HAL_FLASH_Lock();
 801c236:	f7e9 fd31 	bl	8005c9c <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 801c23a:	b662      	cpsie	i
}
 801c23c:	bf00      	nop
                __enable_irq();

                return;
 801c23e:	e056      	b.n	801c2ee <flash_task+0x11a>
            }

            /* write to flash */
            for (uint8_t j = 0; j < sizeof_data / sizeof(uint32_t); j++) {
 801c240:	2300      	movs	r3, #0
 801c242:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801c246:	e026      	b.n	801c296 <flash_task+0xc2>

                status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_ADDR + j * sizeof(uint32_t),
 801c248:	f897 2027 	ldrb.w	r2, [r7, #39]	; 0x27
 801c24c:	4b2a      	ldr	r3, [pc, #168]	; (801c2f8 <flash_task+0x124>)
 801c24e:	4413      	add	r3, r2
 801c250:	0099      	lsls	r1, r3, #2
                                           *(uint32_t*)(data + j * sizeof(uint32_t)));
 801c252:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c256:	009b      	lsls	r3, r3, #2
 801c258:	68fa      	ldr	r2, [r7, #12]
 801c25a:	4413      	add	r3, r2
 801c25c:	681b      	ldr	r3, [r3, #0]
                status = HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, FLASH_ADDR + j * sizeof(uint32_t),
 801c25e:	2200      	movs	r2, #0
 801c260:	461c      	mov	r4, r3
 801c262:	4615      	mov	r5, r2
 801c264:	4622      	mov	r2, r4
 801c266:	462b      	mov	r3, r5
 801c268:	2002      	movs	r0, #2
 801c26a:	f7e9 fbd1 	bl	8005a10 <HAL_FLASH_Program>
 801c26e:	4603      	mov	r3, r0
 801c270:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
                if (status != HAL_OK) {
 801c274:	f897 3025 	ldrb.w	r3, [r7, #37]	; 0x25
 801c278:	2b00      	cmp	r3, #0
 801c27a:	d007      	beq.n	801c28c <flash_task+0xb8>
                    *error_report = HAL_RETURN_ERROR;
 801c27c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801c27e:	2201      	movs	r2, #1
 801c280:	701a      	strb	r2, [r3, #0]
                    HAL_FLASH_Lock();
 801c282:	f7e9 fd0b 	bl	8005c9c <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 801c286:	b662      	cpsie	i
}
 801c288:	bf00      	nop
                    __enable_irq();

                    return;
 801c28a:	e030      	b.n	801c2ee <flash_task+0x11a>
            for (uint8_t j = 0; j < sizeof_data / sizeof(uint32_t); j++) {
 801c28c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c290:	3301      	adds	r3, #1
 801c292:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 801c296:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 801c29a:	b29a      	uxth	r2, r3
 801c29c:	897b      	ldrh	r3, [r7, #10]
 801c29e:	089b      	lsrs	r3, r3, #2
 801c2a0:	b29b      	uxth	r3, r3
 801c2a2:	429a      	cmp	r2, r3
 801c2a4:	d3d0      	bcc.n	801c248 <flash_task+0x74>
                }
            }

            /* read from flash */
            for (uint8_t j = 0; j < sizeof_data / sizeof(uint32_t); j++) {
 801c2a6:	2300      	movs	r3, #0
 801c2a8:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801c2ac:	e011      	b.n	801c2d2 <flash_task+0xfe>

                *((uint32_t*)(data + j * sizeof(uint32_t))) = *((uint32_t*)(FLASH_ADDR + j * sizeof(uint32_t)));
 801c2ae:	f897 2026 	ldrb.w	r2, [r7, #38]	; 0x26
 801c2b2:	4b11      	ldr	r3, [pc, #68]	; (801c2f8 <flash_task+0x124>)
 801c2b4:	4413      	add	r3, r2
 801c2b6:	009b      	lsls	r3, r3, #2
 801c2b8:	4619      	mov	r1, r3
 801c2ba:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801c2be:	009b      	lsls	r3, r3, #2
 801c2c0:	68fa      	ldr	r2, [r7, #12]
 801c2c2:	4413      	add	r3, r2
 801c2c4:	680a      	ldr	r2, [r1, #0]
 801c2c6:	601a      	str	r2, [r3, #0]
            for (uint8_t j = 0; j < sizeof_data / sizeof(uint32_t); j++) {
 801c2c8:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801c2cc:	3301      	adds	r3, #1
 801c2ce:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 801c2d2:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 801c2d6:	b29a      	uxth	r2, r3
 801c2d8:	897b      	ldrh	r3, [r7, #10]
 801c2da:	089b      	lsrs	r3, r3, #2
 801c2dc:	b29b      	uxth	r3, r3
 801c2de:	429a      	cmp	r2, r3
 801c2e0:	d3e5      	bcc.n	801c2ae <flash_task+0xda>
            }

            break;
 801c2e2:	e000      	b.n	801c2e6 <flash_task+0x112>

        default: break;
 801c2e4:	bf00      	nop
    }
    HAL_FLASH_Lock();
 801c2e6:	f7e9 fcd9 	bl	8005c9c <HAL_FLASH_Lock>
  __ASM volatile ("cpsie i" : : : "memory");
 801c2ea:	b662      	cpsie	i
}
 801c2ec:	bf00      	nop
    __enable_irq();
}
 801c2ee:	3728      	adds	r7, #40	; 0x28
 801c2f0:	46bd      	mov	sp, r7
 801c2f2:	bdb0      	pop	{r4, r5, r7, pc}
 801c2f4:	40023c00 	.word	0x40023c00
 801c2f8:	02020000 	.word	0x02020000

0801c2fc <I2C_1_2_task>:
 * \param[in]       test_select: select what test in the function to run
 * \param[in]       error_report: report to pc about test error
 */
void
I2C_1_2_task(uint8_t* data, uint16_t sizeof_data, SemaphoreHandle_t* interrupt_sem, uint8_t test_select,
             uint8_t* error_report) {
 801c2fc:	b580      	push	{r7, lr}
 801c2fe:	b086      	sub	sp, #24
 801c300:	af00      	add	r7, sp, #0
 801c302:	60f8      	str	r0, [r7, #12]
 801c304:	607a      	str	r2, [r7, #4]
 801c306:	461a      	mov	r2, r3
 801c308:	460b      	mov	r3, r1
 801c30a:	817b      	strh	r3, [r7, #10]
 801c30c:	4613      	mov	r3, r2
 801c30e:	727b      	strb	r3, [r7, #9]

    HAL_StatusTypeDef status; /* error return check */
    *error_report = NO_ERROR; /* initalized to  NO_ERROR if an error is accruing it will change it */
 801c310:	6a3b      	ldr	r3, [r7, #32]
 801c312:	2200      	movs	r2, #0
 801c314:	701a      	strb	r2, [r3, #0]

    /* run task test requested by pc */
    switch (test_select) {
 801c316:	7a7b      	ldrb	r3, [r7, #9]
 801c318:	2b02      	cmp	r3, #2
 801c31a:	d04a      	beq.n	801c3b2 <I2C_1_2_task+0xb6>
 801c31c:	2b02      	cmp	r3, #2
 801c31e:	dc69      	bgt.n	801c3f4 <I2C_1_2_task+0xf8>
 801c320:	2b00      	cmp	r3, #0
 801c322:	d002      	beq.n	801c32a <I2C_1_2_task+0x2e>
 801c324:	2b01      	cmp	r3, #1
 801c326:	d022      	beq.n	801c36e <I2C_1_2_task+0x72>
                *error_report = HAL_RETURN_ERROR;
            }

            break;

        default: break;
 801c328:	e064      	b.n	801c3f4 <I2C_1_2_task+0xf8>
            status = HAL_I2C_Master_Receive_IT(&hi2c1, 0, data, sizeof_data);
 801c32a:	897b      	ldrh	r3, [r7, #10]
 801c32c:	68fa      	ldr	r2, [r7, #12]
 801c32e:	2100      	movs	r1, #0
 801c330:	4854      	ldr	r0, [pc, #336]	; (801c484 <I2C_1_2_task+0x188>)
 801c332:	f7ea f933 	bl	800659c <HAL_I2C_Master_Receive_IT>
 801c336:	4603      	mov	r3, r0
 801c338:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801c33a:	7dfb      	ldrb	r3, [r7, #23]
 801c33c:	2b00      	cmp	r3, #0
 801c33e:	d003      	beq.n	801c348 <I2C_1_2_task+0x4c>
                *error_report = HAL_RETURN_ERROR;
 801c340:	6a3b      	ldr	r3, [r7, #32]
 801c342:	2201      	movs	r2, #1
 801c344:	701a      	strb	r2, [r3, #0]
                return;
 801c346:	e099      	b.n	801c47c <I2C_1_2_task+0x180>
            status = HAL_I2C_Slave_Transmit_IT(&hi2c2, data, sizeof_data);
 801c348:	897b      	ldrh	r3, [r7, #10]
 801c34a:	461a      	mov	r2, r3
 801c34c:	68f9      	ldr	r1, [r7, #12]
 801c34e:	484e      	ldr	r0, [pc, #312]	; (801c488 <I2C_1_2_task+0x18c>)
 801c350:	f7ea f994 	bl	800667c <HAL_I2C_Slave_Transmit_IT>
 801c354:	4603      	mov	r3, r0
 801c356:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801c358:	7dfb      	ldrb	r3, [r7, #23]
 801c35a:	2b00      	cmp	r3, #0
 801c35c:	d04c      	beq.n	801c3f8 <I2C_1_2_task+0xfc>
                HAL_I2C_Master_Abort_IT(&hi2c1, 0);
 801c35e:	2100      	movs	r1, #0
 801c360:	4848      	ldr	r0, [pc, #288]	; (801c484 <I2C_1_2_task+0x188>)
 801c362:	f7ea fae9 	bl	8006938 <HAL_I2C_Master_Abort_IT>
                *error_report = HAL_RETURN_ERROR;
 801c366:	6a3b      	ldr	r3, [r7, #32]
 801c368:	2201      	movs	r2, #1
 801c36a:	701a      	strb	r2, [r3, #0]
            break;
 801c36c:	e044      	b.n	801c3f8 <I2C_1_2_task+0xfc>
            status = HAL_I2C_Master_Receive_IT(&hi2c2, 0, data, sizeof_data);
 801c36e:	897b      	ldrh	r3, [r7, #10]
 801c370:	68fa      	ldr	r2, [r7, #12]
 801c372:	2100      	movs	r1, #0
 801c374:	4844      	ldr	r0, [pc, #272]	; (801c488 <I2C_1_2_task+0x18c>)
 801c376:	f7ea f911 	bl	800659c <HAL_I2C_Master_Receive_IT>
 801c37a:	4603      	mov	r3, r0
 801c37c:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801c37e:	7dfb      	ldrb	r3, [r7, #23]
 801c380:	2b00      	cmp	r3, #0
 801c382:	d003      	beq.n	801c38c <I2C_1_2_task+0x90>
                *error_report = HAL_RETURN_ERROR;
 801c384:	6a3b      	ldr	r3, [r7, #32]
 801c386:	2201      	movs	r2, #1
 801c388:	701a      	strb	r2, [r3, #0]
                return;
 801c38a:	e077      	b.n	801c47c <I2C_1_2_task+0x180>
            status = HAL_I2C_Slave_Transmit_IT(&hi2c1, data, sizeof_data);
 801c38c:	897b      	ldrh	r3, [r7, #10]
 801c38e:	461a      	mov	r2, r3
 801c390:	68f9      	ldr	r1, [r7, #12]
 801c392:	483c      	ldr	r0, [pc, #240]	; (801c484 <I2C_1_2_task+0x188>)
 801c394:	f7ea f972 	bl	800667c <HAL_I2C_Slave_Transmit_IT>
 801c398:	4603      	mov	r3, r0
 801c39a:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801c39c:	7dfb      	ldrb	r3, [r7, #23]
 801c39e:	2b00      	cmp	r3, #0
 801c3a0:	d02c      	beq.n	801c3fc <I2C_1_2_task+0x100>
                HAL_I2C_Master_Abort_IT(&hi2c2, 0);
 801c3a2:	2100      	movs	r1, #0
 801c3a4:	4838      	ldr	r0, [pc, #224]	; (801c488 <I2C_1_2_task+0x18c>)
 801c3a6:	f7ea fac7 	bl	8006938 <HAL_I2C_Master_Abort_IT>
                *error_report = HAL_RETURN_ERROR;
 801c3aa:	6a3b      	ldr	r3, [r7, #32]
 801c3ac:	2201      	movs	r2, #1
 801c3ae:	701a      	strb	r2, [r3, #0]
            break;
 801c3b0:	e024      	b.n	801c3fc <I2C_1_2_task+0x100>
            status = HAL_I2C_Master_Receive_DMA(&hi2c1, 0, data, sizeof_data);
 801c3b2:	897b      	ldrh	r3, [r7, #10]
 801c3b4:	68fa      	ldr	r2, [r7, #12]
 801c3b6:	2100      	movs	r1, #0
 801c3b8:	4832      	ldr	r0, [pc, #200]	; (801c484 <I2C_1_2_task+0x188>)
 801c3ba:	f7ea f9cd 	bl	8006758 <HAL_I2C_Master_Receive_DMA>
 801c3be:	4603      	mov	r3, r0
 801c3c0:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801c3c2:	7dfb      	ldrb	r3, [r7, #23]
 801c3c4:	2b00      	cmp	r3, #0
 801c3c6:	d002      	beq.n	801c3ce <I2C_1_2_task+0xd2>
                *error_report = HAL_RETURN_ERROR;
 801c3c8:	6a3b      	ldr	r3, [r7, #32]
 801c3ca:	2201      	movs	r2, #1
 801c3cc:	701a      	strb	r2, [r3, #0]
            status = HAL_I2C_Slave_Transmit_IT(&hi2c2, data, sizeof_data);
 801c3ce:	897b      	ldrh	r3, [r7, #10]
 801c3d0:	461a      	mov	r2, r3
 801c3d2:	68f9      	ldr	r1, [r7, #12]
 801c3d4:	482c      	ldr	r0, [pc, #176]	; (801c488 <I2C_1_2_task+0x18c>)
 801c3d6:	f7ea f951 	bl	800667c <HAL_I2C_Slave_Transmit_IT>
 801c3da:	4603      	mov	r3, r0
 801c3dc:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801c3de:	7dfb      	ldrb	r3, [r7, #23]
 801c3e0:	2b00      	cmp	r3, #0
 801c3e2:	d00d      	beq.n	801c400 <I2C_1_2_task+0x104>
                HAL_I2C_Master_Abort_IT(&hi2c1, 0);
 801c3e4:	2100      	movs	r1, #0
 801c3e6:	4827      	ldr	r0, [pc, #156]	; (801c484 <I2C_1_2_task+0x188>)
 801c3e8:	f7ea faa6 	bl	8006938 <HAL_I2C_Master_Abort_IT>
                *error_report = HAL_RETURN_ERROR;
 801c3ec:	6a3b      	ldr	r3, [r7, #32]
 801c3ee:	2201      	movs	r2, #1
 801c3f0:	701a      	strb	r2, [r3, #0]
            break;
 801c3f2:	e005      	b.n	801c400 <I2C_1_2_task+0x104>
        default: break;
 801c3f4:	bf00      	nop
 801c3f6:	e004      	b.n	801c402 <I2C_1_2_task+0x106>
            break;
 801c3f8:	bf00      	nop
 801c3fa:	e002      	b.n	801c402 <I2C_1_2_task+0x106>
            break;
 801c3fc:	bf00      	nop
 801c3fe:	e000      	b.n	801c402 <I2C_1_2_task+0x106>
            break;
 801c400:	bf00      	nop
    }
    /* waite for rx interrupt to release the semaphore, if to match time has passed report over time error  */
    if (xSemaphoreTake(*interrupt_sem, TIME_ELAPSED_ERROR) == pdFALSE && *error_report == NO_ERROR) {
 801c402:	687b      	ldr	r3, [r7, #4]
 801c404:	681b      	ldr	r3, [r3, #0]
 801c406:	2164      	movs	r1, #100	; 0x64
 801c408:	4618      	mov	r0, r3
 801c40a:	f7f3 fad3 	bl	800f9b4 <xQueueSemaphoreTake>
 801c40e:	4603      	mov	r3, r0
 801c410:	2b00      	cmp	r3, #0
 801c412:	d11b      	bne.n	801c44c <I2C_1_2_task+0x150>
 801c414:	6a3b      	ldr	r3, [r7, #32]
 801c416:	781b      	ldrb	r3, [r3, #0]
 801c418:	2b00      	cmp	r3, #0
 801c41a:	d117      	bne.n	801c44c <I2C_1_2_task+0x150>

        /* abort transmission in case HAL returns error so callback isr function wont release semaphore */
        HAL_I2C_Master_Abort_IT(&hi2c1, 0);
 801c41c:	2100      	movs	r1, #0
 801c41e:	4819      	ldr	r0, [pc, #100]	; (801c484 <I2C_1_2_task+0x188>)
 801c420:	f7ea fa8a 	bl	8006938 <HAL_I2C_Master_Abort_IT>
        xSemaphoreTake(*interrupt_sem, TIME_ELAPSED_ERROR);
 801c424:	687b      	ldr	r3, [r7, #4]
 801c426:	681b      	ldr	r3, [r3, #0]
 801c428:	2164      	movs	r1, #100	; 0x64
 801c42a:	4618      	mov	r0, r3
 801c42c:	f7f3 fac2 	bl	800f9b4 <xQueueSemaphoreTake>
        HAL_I2C_Master_Abort_IT(&hi2c2, 0);
 801c430:	2100      	movs	r1, #0
 801c432:	4815      	ldr	r0, [pc, #84]	; (801c488 <I2C_1_2_task+0x18c>)
 801c434:	f7ea fa80 	bl	8006938 <HAL_I2C_Master_Abort_IT>
        xSemaphoreTake(*interrupt_sem, TIME_ELAPSED_ERROR);
 801c438:	687b      	ldr	r3, [r7, #4]
 801c43a:	681b      	ldr	r3, [r3, #0]
 801c43c:	2164      	movs	r1, #100	; 0x64
 801c43e:	4618      	mov	r0, r3
 801c440:	f7f3 fab8 	bl	800f9b4 <xQueueSemaphoreTake>

        *error_report = OVER_TIME;
 801c444:	6a3b      	ldr	r3, [r7, #32]
 801c446:	2203      	movs	r2, #3
 801c448:	701a      	strb	r2, [r3, #0]
 801c44a:	e017      	b.n	801c47c <I2C_1_2_task+0x180>

    } else if (*error_report == ERROR_IT) {
 801c44c:	6a3b      	ldr	r3, [r7, #32]
 801c44e:	781b      	ldrb	r3, [r3, #0]
 801c450:	2b02      	cmp	r3, #2
 801c452:	d113      	bne.n	801c47c <I2C_1_2_task+0x180>

        /* abort transmission in case HAL returns error so callback isr function wont release semaphore */
        HAL_I2C_Master_Abort_IT(&hi2c1, 0);
 801c454:	2100      	movs	r1, #0
 801c456:	480b      	ldr	r0, [pc, #44]	; (801c484 <I2C_1_2_task+0x188>)
 801c458:	f7ea fa6e 	bl	8006938 <HAL_I2C_Master_Abort_IT>
        xSemaphoreTake(*interrupt_sem, TIME_ELAPSED_ERROR);
 801c45c:	687b      	ldr	r3, [r7, #4]
 801c45e:	681b      	ldr	r3, [r3, #0]
 801c460:	2164      	movs	r1, #100	; 0x64
 801c462:	4618      	mov	r0, r3
 801c464:	f7f3 faa6 	bl	800f9b4 <xQueueSemaphoreTake>
        HAL_I2C_Master_Abort_IT(&hi2c2, 0);
 801c468:	2100      	movs	r1, #0
 801c46a:	4807      	ldr	r0, [pc, #28]	; (801c488 <I2C_1_2_task+0x18c>)
 801c46c:	f7ea fa64 	bl	8006938 <HAL_I2C_Master_Abort_IT>
        xSemaphoreTake(*interrupt_sem, TIME_ELAPSED_ERROR);
 801c470:	687b      	ldr	r3, [r7, #4]
 801c472:	681b      	ldr	r3, [r3, #0]
 801c474:	2164      	movs	r1, #100	; 0x64
 801c476:	4618      	mov	r0, r3
 801c478:	f7f3 fa9c 	bl	800f9b4 <xQueueSemaphoreTake>
    }
}
 801c47c:	3718      	adds	r7, #24
 801c47e:	46bd      	mov	sp, r7
 801c480:	bd80      	pop	{r7, pc}
 801c482:	bf00      	nop
 801c484:	20000690 	.word	0x20000690
 801c488:	200006e4 	.word	0x200006e4

0801c48c <HAL_I2C_MasterRxCpltCallback>:

void
HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef* hi2c) {
 801c48c:	b580      	push	{r7, lr}
 801c48e:	b082      	sub	sp, #8
 801c490:	af00      	add	r7, sp, #0
 801c492:	6078      	str	r0, [r7, #4]

    if (hi2c == &hi2c1 || hi2c == &hi2c2) {
 801c494:	687b      	ldr	r3, [r7, #4]
 801c496:	4a08      	ldr	r2, [pc, #32]	; (801c4b8 <HAL_I2C_MasterRxCpltCallback+0x2c>)
 801c498:	4293      	cmp	r3, r2
 801c49a:	d003      	beq.n	801c4a4 <HAL_I2C_MasterRxCpltCallback+0x18>
 801c49c:	687b      	ldr	r3, [r7, #4]
 801c49e:	4a07      	ldr	r2, [pc, #28]	; (801c4bc <HAL_I2C_MasterRxCpltCallback+0x30>)
 801c4a0:	4293      	cmp	r3, r2
 801c4a2:	d105      	bne.n	801c4b0 <HAL_I2C_MasterRxCpltCallback+0x24>

        xSemaphoreGiveFromISR(stm_test_list_array[I2C_1_2].q, NULL);
 801c4a4:	4b06      	ldr	r3, [pc, #24]	; (801c4c0 <HAL_I2C_MasterRxCpltCallback+0x34>)
 801c4a6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c4a8:	2100      	movs	r1, #0
 801c4aa:	4618      	mov	r0, r3
 801c4ac:	f7f3 f906 	bl	800f6bc <xQueueGiveFromISR>
    }
}
 801c4b0:	bf00      	nop
 801c4b2:	3708      	adds	r7, #8
 801c4b4:	46bd      	mov	sp, r7
 801c4b6:	bd80      	pop	{r7, pc}
 801c4b8:	20000690 	.word	0x20000690
 801c4bc:	200006e4 	.word	0x200006e4
 801c4c0:	200000a0 	.word	0x200000a0

0801c4c4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void
HAL_I2C_ErrorCallback(I2C_HandleTypeDef* hi2c) {
 801c4c4:	b580      	push	{r7, lr}
 801c4c6:	b084      	sub	sp, #16
 801c4c8:	af00      	add	r7, sp, #0
 801c4ca:	6078      	str	r0, [r7, #4]

    unit_tasting_package_t* cast;

    if (hi2c == &hi2c1 || hi2c == &hi2c2) {
 801c4cc:	687b      	ldr	r3, [r7, #4]
 801c4ce:	4a0c      	ldr	r2, [pc, #48]	; (801c500 <HAL_I2C_ErrorCallback+0x3c>)
 801c4d0:	4293      	cmp	r3, r2
 801c4d2:	d003      	beq.n	801c4dc <HAL_I2C_ErrorCallback+0x18>
 801c4d4:	687b      	ldr	r3, [r7, #4]
 801c4d6:	4a0b      	ldr	r2, [pc, #44]	; (801c504 <HAL_I2C_ErrorCallback+0x40>)
 801c4d8:	4293      	cmp	r3, r2
 801c4da:	d10d      	bne.n	801c4f8 <HAL_I2C_ErrorCallback+0x34>

        cast = stm_test_list_array[I2C_1_2].taskX_pack.p->payload;
 801c4dc:	4b0a      	ldr	r3, [pc, #40]	; (801c508 <HAL_I2C_ErrorCallback+0x44>)
 801c4de:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 801c4e0:	685b      	ldr	r3, [r3, #4]
 801c4e2:	60fb      	str	r3, [r7, #12]

        cast->error_report = ERROR_IT;
 801c4e4:	68fb      	ldr	r3, [r7, #12]
 801c4e6:	2202      	movs	r2, #2
 801c4e8:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

        xSemaphoreGiveFromISR(stm_test_list_array[I2C_1_2].q, NULL);
 801c4ec:	4b06      	ldr	r3, [pc, #24]	; (801c508 <HAL_I2C_ErrorCallback+0x44>)
 801c4ee:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c4f0:	2100      	movs	r1, #0
 801c4f2:	4618      	mov	r0, r3
 801c4f4:	f7f3 f8e2 	bl	800f6bc <xQueueGiveFromISR>
    }
}
 801c4f8:	bf00      	nop
 801c4fa:	3710      	adds	r7, #16
 801c4fc:	46bd      	mov	sp, r7
 801c4fe:	bd80      	pop	{r7, pc}
 801c500:	20000690 	.word	0x20000690
 801c504:	200006e4 	.word	0x200006e4
 801c508:	200000a0 	.word	0x200000a0

0801c50c <HAL_I2C_AbortCpltCallback>:

void
HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef* hi2c) {
 801c50c:	b580      	push	{r7, lr}
 801c50e:	b082      	sub	sp, #8
 801c510:	af00      	add	r7, sp, #0
 801c512:	6078      	str	r0, [r7, #4]
    if (hi2c == &hi2c1 || hi2c == &hi2c2) {
 801c514:	687b      	ldr	r3, [r7, #4]
 801c516:	4a08      	ldr	r2, [pc, #32]	; (801c538 <HAL_I2C_AbortCpltCallback+0x2c>)
 801c518:	4293      	cmp	r3, r2
 801c51a:	d003      	beq.n	801c524 <HAL_I2C_AbortCpltCallback+0x18>
 801c51c:	687b      	ldr	r3, [r7, #4]
 801c51e:	4a07      	ldr	r2, [pc, #28]	; (801c53c <HAL_I2C_AbortCpltCallback+0x30>)
 801c520:	4293      	cmp	r3, r2
 801c522:	d105      	bne.n	801c530 <HAL_I2C_AbortCpltCallback+0x24>

        xSemaphoreGiveFromISR(stm_test_list_array[I2C_1_2].q, NULL);
 801c524:	4b06      	ldr	r3, [pc, #24]	; (801c540 <HAL_I2C_AbortCpltCallback+0x34>)
 801c526:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 801c528:	2100      	movs	r1, #0
 801c52a:	4618      	mov	r0, r3
 801c52c:	f7f3 f8c6 	bl	800f6bc <xQueueGiveFromISR>
    }
}
 801c530:	bf00      	nop
 801c532:	3708      	adds	r7, #8
 801c534:	46bd      	mov	sp, r7
 801c536:	bd80      	pop	{r7, pc}
 801c538:	20000690 	.word	0x20000690
 801c53c:	200006e4 	.word	0x200006e4
 801c540:	200000a0 	.word	0x200000a0

0801c544 <spi_1_2_task>:
 * \param[in]       test_select: select what test in the function to run
 * \param[in]       error_report: report to pc about test error
 */
void
spi_1_2_task(uint8_t* data, uint16_t sizeof_data, SemaphoreHandle_t* interrupt_sem, uint8_t test_select,
             uint8_t* error_report) {
 801c544:	b580      	push	{r7, lr}
 801c546:	b086      	sub	sp, #24
 801c548:	af00      	add	r7, sp, #0
 801c54a:	60f8      	str	r0, [r7, #12]
 801c54c:	607a      	str	r2, [r7, #4]
 801c54e:	461a      	mov	r2, r3
 801c550:	460b      	mov	r3, r1
 801c552:	817b      	strh	r3, [r7, #10]
 801c554:	4613      	mov	r3, r2
 801c556:	727b      	strb	r3, [r7, #9]

    HAL_StatusTypeDef status; /* error return check */
    *error_report = NO_ERROR; /* initalized to  NO_ERROR if an error is accruing it will change it */
 801c558:	6a3b      	ldr	r3, [r7, #32]
 801c55a:	2200      	movs	r2, #0
 801c55c:	701a      	strb	r2, [r3, #0]

    /* run task test requested by pc */
    switch (test_select) {
 801c55e:	7a7b      	ldrb	r3, [r7, #9]
 801c560:	2b04      	cmp	r3, #4
 801c562:	f200 80dd 	bhi.w	801c720 <spi_1_2_task+0x1dc>
 801c566:	a201      	add	r2, pc, #4	; (adr r2, 801c56c <spi_1_2_task+0x28>)
 801c568:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c56c:	0801c581 	.word	0x0801c581
 801c570:	0801c5c5 	.word	0x0801c5c5
 801c574:	0801c621 	.word	0x0801c621
 801c578:	0801c663 	.word	0x0801c663
 801c57c:	0801c6bd 	.word	0x0801c6bd

        case 0: /* spi1 TI rx spi2 TI tx */

            /* peripheral receive testing data  */
            status = HAL_SPI_Receive_IT(&hspi1, data, sizeof_data);
 801c580:	897b      	ldrh	r3, [r7, #10]
 801c582:	461a      	mov	r2, r3
 801c584:	68f9      	ldr	r1, [r7, #12]
 801c586:	488a      	ldr	r0, [pc, #552]	; (801c7b0 <spi_1_2_task+0x26c>)
 801c588:	f7ed f9e4 	bl	8009954 <HAL_SPI_Receive_IT>
 801c58c:	4603      	mov	r3, r0
 801c58e:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801c590:	7dfb      	ldrb	r3, [r7, #23]
 801c592:	2b00      	cmp	r3, #0
 801c594:	d003      	beq.n	801c59e <spi_1_2_task+0x5a>

                *error_report = HAL_RETURN_ERROR;
 801c596:	6a3b      	ldr	r3, [r7, #32]
 801c598:	2201      	movs	r2, #1
 801c59a:	701a      	strb	r2, [r3, #0]
                return;
 801c59c:	e104      	b.n	801c7a8 <spi_1_2_task+0x264>
            }

            /* peripheral transmit testing data  */
            status = HAL_SPI_Transmit_IT(&hspi2, data, sizeof_data);
 801c59e:	897b      	ldrh	r3, [r7, #10]
 801c5a0:	461a      	mov	r2, r3
 801c5a2:	68f9      	ldr	r1, [r7, #12]
 801c5a4:	4883      	ldr	r0, [pc, #524]	; (801c7b4 <spi_1_2_task+0x270>)
 801c5a6:	f7ed f949 	bl	800983c <HAL_SPI_Transmit_IT>
 801c5aa:	4603      	mov	r3, r0
 801c5ac:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801c5ae:	7dfb      	ldrb	r3, [r7, #23]
 801c5b0:	2b00      	cmp	r3, #0
 801c5b2:	f000 80b7 	beq.w	801c724 <spi_1_2_task+0x1e0>
                /* abort transmission in case HAL returns error so callback isr function wont release semaphore */
                HAL_SPI_Abort_IT(&hspi1);
 801c5b6:	487e      	ldr	r0, [pc, #504]	; (801c7b0 <spi_1_2_task+0x26c>)
 801c5b8:	f7ed febc 	bl	800a334 <HAL_SPI_Abort_IT>
                *error_report = HAL_RETURN_ERROR;
 801c5bc:	6a3b      	ldr	r3, [r7, #32]
 801c5be:	2201      	movs	r2, #1
 801c5c0:	701a      	strb	r2, [r3, #0]
            }

            break;
 801c5c2:	e0af      	b.n	801c724 <spi_1_2_task+0x1e0>

        case 1: /* spi2 TI rx spi1 TI tx */

            /* peripheral receive testing data  */
            status = HAL_SPI_Receive_IT(&hspi2, data, sizeof_data);
 801c5c4:	897b      	ldrh	r3, [r7, #10]
 801c5c6:	461a      	mov	r2, r3
 801c5c8:	68f9      	ldr	r1, [r7, #12]
 801c5ca:	487a      	ldr	r0, [pc, #488]	; (801c7b4 <spi_1_2_task+0x270>)
 801c5cc:	f7ed f9c2 	bl	8009954 <HAL_SPI_Receive_IT>
 801c5d0:	4603      	mov	r3, r0
 801c5d2:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801c5d4:	7dfb      	ldrb	r3, [r7, #23]
 801c5d6:	2b00      	cmp	r3, #0
 801c5d8:	d006      	beq.n	801c5e8 <spi_1_2_task+0xa4>
                HAL_SPI_Abort_IT(&hspi2);
 801c5da:	4876      	ldr	r0, [pc, #472]	; (801c7b4 <spi_1_2_task+0x270>)
 801c5dc:	f7ed feaa 	bl	800a334 <HAL_SPI_Abort_IT>
                *error_report = HAL_RETURN_ERROR;
 801c5e0:	6a3b      	ldr	r3, [r7, #32]
 801c5e2:	2201      	movs	r2, #1
 801c5e4:	701a      	strb	r2, [r3, #0]
                break;
 801c5e6:	e0a6      	b.n	801c736 <spi_1_2_task+0x1f2>
            }

            /* peripheral transmit testing data  */
            status = HAL_SPI_Transmit_IT(&hspi1, data, sizeof_data);
 801c5e8:	897b      	ldrh	r3, [r7, #10]
 801c5ea:	461a      	mov	r2, r3
 801c5ec:	68f9      	ldr	r1, [r7, #12]
 801c5ee:	4870      	ldr	r0, [pc, #448]	; (801c7b0 <spi_1_2_task+0x26c>)
 801c5f0:	f7ed f924 	bl	800983c <HAL_SPI_Transmit_IT>
 801c5f4:	4603      	mov	r3, r0
 801c5f6:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801c5f8:	7dfb      	ldrb	r3, [r7, #23]
 801c5fa:	2b00      	cmp	r3, #0
 801c5fc:	f000 8094 	beq.w	801c728 <spi_1_2_task+0x1e4>
                /* abort transmission in case HAL returns error so callback isr function wont release semaphore */
                HAL_SPI_Abort_IT(&hspi1);
 801c600:	486b      	ldr	r0, [pc, #428]	; (801c7b0 <spi_1_2_task+0x26c>)
 801c602:	f7ed fe97 	bl	800a334 <HAL_SPI_Abort_IT>
                xSemaphoreTake(*interrupt_sem, TIME_ELAPSED_ERROR);
 801c606:	687b      	ldr	r3, [r7, #4]
 801c608:	681b      	ldr	r3, [r3, #0]
 801c60a:	2164      	movs	r1, #100	; 0x64
 801c60c:	4618      	mov	r0, r3
 801c60e:	f7f3 f9d1 	bl	800f9b4 <xQueueSemaphoreTake>

                HAL_SPI_Abort_IT(&hspi2);
 801c612:	4868      	ldr	r0, [pc, #416]	; (801c7b4 <spi_1_2_task+0x270>)
 801c614:	f7ed fe8e 	bl	800a334 <HAL_SPI_Abort_IT>
                *error_report = HAL_RETURN_ERROR;
 801c618:	6a3b      	ldr	r3, [r7, #32]
 801c61a:	2201      	movs	r2, #1
 801c61c:	701a      	strb	r2, [r3, #0]
            }

            break;
 801c61e:	e083      	b.n	801c728 <spi_1_2_task+0x1e4>

        case 2: /* spi1 DMA rx spi2 TI tx */

            /* peripheral receive testing data  */
            status = HAL_SPI_Receive_DMA(&hspi1, data, sizeof_data);
 801c620:	897b      	ldrh	r3, [r7, #10]
 801c622:	461a      	mov	r2, r3
 801c624:	68f9      	ldr	r1, [r7, #12]
 801c626:	4862      	ldr	r0, [pc, #392]	; (801c7b0 <spi_1_2_task+0x26c>)
 801c628:	f7ed fbe0 	bl	8009dec <HAL_SPI_Receive_DMA>
 801c62c:	4603      	mov	r3, r0
 801c62e:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801c630:	7dfb      	ldrb	r3, [r7, #23]
 801c632:	2b00      	cmp	r3, #0
 801c634:	d003      	beq.n	801c63e <spi_1_2_task+0xfa>

                *error_report = HAL_RETURN_ERROR;
 801c636:	6a3b      	ldr	r3, [r7, #32]
 801c638:	2201      	movs	r2, #1
 801c63a:	701a      	strb	r2, [r3, #0]
                return;
 801c63c:	e0b4      	b.n	801c7a8 <spi_1_2_task+0x264>
            }
            /* peripheral transmit testing data  */
            status = HAL_SPI_Transmit_IT(&hspi2, data, sizeof_data);
 801c63e:	897b      	ldrh	r3, [r7, #10]
 801c640:	461a      	mov	r2, r3
 801c642:	68f9      	ldr	r1, [r7, #12]
 801c644:	485b      	ldr	r0, [pc, #364]	; (801c7b4 <spi_1_2_task+0x270>)
 801c646:	f7ed f8f9 	bl	800983c <HAL_SPI_Transmit_IT>
 801c64a:	4603      	mov	r3, r0
 801c64c:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801c64e:	7dfb      	ldrb	r3, [r7, #23]
 801c650:	2b00      	cmp	r3, #0
 801c652:	d06b      	beq.n	801c72c <spi_1_2_task+0x1e8>
                /* abort transmission in case HAL returns error so callback isr function wont release semaphore */
                HAL_SPI_Abort_IT(&hspi1);
 801c654:	4856      	ldr	r0, [pc, #344]	; (801c7b0 <spi_1_2_task+0x26c>)
 801c656:	f7ed fe6d 	bl	800a334 <HAL_SPI_Abort_IT>
                *error_report = HAL_RETURN_ERROR;
 801c65a:	6a3b      	ldr	r3, [r7, #32]
 801c65c:	2201      	movs	r2, #1
 801c65e:	701a      	strb	r2, [r3, #0]
            }

            break;
 801c660:	e064      	b.n	801c72c <spi_1_2_task+0x1e8>

        case 3: /* spi2 DMA rx spi1 DMA tx */

            status = HAL_SPI_Receive_DMA(&hspi2, data, sizeof_data);
 801c662:	897b      	ldrh	r3, [r7, #10]
 801c664:	461a      	mov	r2, r3
 801c666:	68f9      	ldr	r1, [r7, #12]
 801c668:	4852      	ldr	r0, [pc, #328]	; (801c7b4 <spi_1_2_task+0x270>)
 801c66a:	f7ed fbbf 	bl	8009dec <HAL_SPI_Receive_DMA>
 801c66e:	4603      	mov	r3, r0
 801c670:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801c672:	7dfb      	ldrb	r3, [r7, #23]
 801c674:	2b00      	cmp	r3, #0
 801c676:	d006      	beq.n	801c686 <spi_1_2_task+0x142>
                HAL_SPI_Abort_IT(&hspi2);
 801c678:	484e      	ldr	r0, [pc, #312]	; (801c7b4 <spi_1_2_task+0x270>)
 801c67a:	f7ed fe5b 	bl	800a334 <HAL_SPI_Abort_IT>

                *error_report = HAL_RETURN_ERROR;
 801c67e:	6a3b      	ldr	r3, [r7, #32]
 801c680:	2201      	movs	r2, #1
 801c682:	701a      	strb	r2, [r3, #0]
                break;
 801c684:	e057      	b.n	801c736 <spi_1_2_task+0x1f2>
            }
            /* peripheral transmit testing data  */
            status = HAL_SPI_Transmit_DMA(&hspi1, data, sizeof_data);
 801c686:	897b      	ldrh	r3, [r7, #10]
 801c688:	461a      	mov	r2, r3
 801c68a:	68f9      	ldr	r1, [r7, #12]
 801c68c:	4848      	ldr	r0, [pc, #288]	; (801c7b0 <spi_1_2_task+0x26c>)
 801c68e:	f7ed fabd 	bl	8009c0c <HAL_SPI_Transmit_DMA>
 801c692:	4603      	mov	r3, r0
 801c694:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801c696:	7dfb      	ldrb	r3, [r7, #23]
 801c698:	2b00      	cmp	r3, #0
 801c69a:	d049      	beq.n	801c730 <spi_1_2_task+0x1ec>
                /* abort transmission in case HAL returns error so callback isr function wont release semaphore */
                HAL_SPI_Abort_IT(&hspi1);
 801c69c:	4844      	ldr	r0, [pc, #272]	; (801c7b0 <spi_1_2_task+0x26c>)
 801c69e:	f7ed fe49 	bl	800a334 <HAL_SPI_Abort_IT>
                xSemaphoreTake(*interrupt_sem, TIME_ELAPSED_ERROR);
 801c6a2:	687b      	ldr	r3, [r7, #4]
 801c6a4:	681b      	ldr	r3, [r3, #0]
 801c6a6:	2164      	movs	r1, #100	; 0x64
 801c6a8:	4618      	mov	r0, r3
 801c6aa:	f7f3 f983 	bl	800f9b4 <xQueueSemaphoreTake>

                HAL_SPI_Abort_IT(&hspi2);
 801c6ae:	4841      	ldr	r0, [pc, #260]	; (801c7b4 <spi_1_2_task+0x270>)
 801c6b0:	f7ed fe40 	bl	800a334 <HAL_SPI_Abort_IT>
                *error_report = HAL_RETURN_ERROR;
 801c6b4:	6a3b      	ldr	r3, [r7, #32]
 801c6b6:	2201      	movs	r2, #1
 801c6b8:	701a      	strb	r2, [r3, #0]
            }

            break;
 801c6ba:	e039      	b.n	801c730 <spi_1_2_task+0x1ec>

        case 4: /* spi2 IT rx/tx spi1 it rx/tx */

            spi_tx_rx = NO_PERIPHERAL_FINISH;
 801c6bc:	4b3e      	ldr	r3, [pc, #248]	; (801c7b8 <spi_1_2_task+0x274>)
 801c6be:	2200      	movs	r2, #0
 801c6c0:	701a      	strb	r2, [r3, #0]

            /* peripheral tx/rx testing data  */
            status = HAL_SPI_TransmitReceive_IT(&hspi1, data, data + sizeof_data / 2, sizeof_data / 2);
 801c6c2:	897b      	ldrh	r3, [r7, #10]
 801c6c4:	085b      	lsrs	r3, r3, #1
 801c6c6:	b29b      	uxth	r3, r3
 801c6c8:	461a      	mov	r2, r3
 801c6ca:	68fb      	ldr	r3, [r7, #12]
 801c6cc:	441a      	add	r2, r3
 801c6ce:	897b      	ldrh	r3, [r7, #10]
 801c6d0:	085b      	lsrs	r3, r3, #1
 801c6d2:	b29b      	uxth	r3, r3
 801c6d4:	68f9      	ldr	r1, [r7, #12]
 801c6d6:	4836      	ldr	r0, [pc, #216]	; (801c7b0 <spi_1_2_task+0x26c>)
 801c6d8:	f7ed f9ea 	bl	8009ab0 <HAL_SPI_TransmitReceive_IT>
 801c6dc:	4603      	mov	r3, r0
 801c6de:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801c6e0:	7dfb      	ldrb	r3, [r7, #23]
 801c6e2:	2b00      	cmp	r3, #0
 801c6e4:	d003      	beq.n	801c6ee <spi_1_2_task+0x1aa>

                *error_report = HAL_RETURN_ERROR;
 801c6e6:	6a3b      	ldr	r3, [r7, #32]
 801c6e8:	2201      	movs	r2, #1
 801c6ea:	701a      	strb	r2, [r3, #0]
                return;
 801c6ec:	e05c      	b.n	801c7a8 <spi_1_2_task+0x264>
            }
            /* peripheral tx/rx testing data  */
            status = HAL_SPI_TransmitReceive_IT(&hspi2, data + sizeof_data / 2, data, sizeof_data / 2);
 801c6ee:	897b      	ldrh	r3, [r7, #10]
 801c6f0:	085b      	lsrs	r3, r3, #1
 801c6f2:	b29b      	uxth	r3, r3
 801c6f4:	461a      	mov	r2, r3
 801c6f6:	68fb      	ldr	r3, [r7, #12]
 801c6f8:	1899      	adds	r1, r3, r2
 801c6fa:	897b      	ldrh	r3, [r7, #10]
 801c6fc:	085b      	lsrs	r3, r3, #1
 801c6fe:	b29b      	uxth	r3, r3
 801c700:	68fa      	ldr	r2, [r7, #12]
 801c702:	482c      	ldr	r0, [pc, #176]	; (801c7b4 <spi_1_2_task+0x270>)
 801c704:	f7ed f9d4 	bl	8009ab0 <HAL_SPI_TransmitReceive_IT>
 801c708:	4603      	mov	r3, r0
 801c70a:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801c70c:	7dfb      	ldrb	r3, [r7, #23]
 801c70e:	2b00      	cmp	r3, #0
 801c710:	d010      	beq.n	801c734 <spi_1_2_task+0x1f0>
                /* abort transmission in case HAL returns error so callback isr function wont release semaphore */
                HAL_SPI_Abort_IT(&hspi1);
 801c712:	4827      	ldr	r0, [pc, #156]	; (801c7b0 <spi_1_2_task+0x26c>)
 801c714:	f7ed fe0e 	bl	800a334 <HAL_SPI_Abort_IT>
                *error_report = HAL_RETURN_ERROR;
 801c718:	6a3b      	ldr	r3, [r7, #32]
 801c71a:	2201      	movs	r2, #1
 801c71c:	701a      	strb	r2, [r3, #0]
            }

            break;
 801c71e:	e009      	b.n	801c734 <spi_1_2_task+0x1f0>

        default: break;
 801c720:	bf00      	nop
 801c722:	e008      	b.n	801c736 <spi_1_2_task+0x1f2>
            break;
 801c724:	bf00      	nop
 801c726:	e006      	b.n	801c736 <spi_1_2_task+0x1f2>
            break;
 801c728:	bf00      	nop
 801c72a:	e004      	b.n	801c736 <spi_1_2_task+0x1f2>
            break;
 801c72c:	bf00      	nop
 801c72e:	e002      	b.n	801c736 <spi_1_2_task+0x1f2>
            break;
 801c730:	bf00      	nop
 801c732:	e000      	b.n	801c736 <spi_1_2_task+0x1f2>
            break;
 801c734:	bf00      	nop
    }
    /* waite for rx interrupt to release the semaphore, if to match time has passed report over time error  */
    if (xSemaphoreTake(*interrupt_sem, TIME_ELAPSED_ERROR) == pdFALSE && *error_report == NO_ERROR) {
 801c736:	687b      	ldr	r3, [r7, #4]
 801c738:	681b      	ldr	r3, [r3, #0]
 801c73a:	2164      	movs	r1, #100	; 0x64
 801c73c:	4618      	mov	r0, r3
 801c73e:	f7f3 f939 	bl	800f9b4 <xQueueSemaphoreTake>
 801c742:	4603      	mov	r3, r0
 801c744:	2b00      	cmp	r3, #0
 801c746:	d119      	bne.n	801c77c <spi_1_2_task+0x238>
 801c748:	6a3b      	ldr	r3, [r7, #32]
 801c74a:	781b      	ldrb	r3, [r3, #0]
 801c74c:	2b00      	cmp	r3, #0
 801c74e:	d115      	bne.n	801c77c <spi_1_2_task+0x238>

        /* abort transmission in case HAL returns error so callback isr function wont release semaphore */
        HAL_SPI_Abort_IT(&hspi2);
 801c750:	4818      	ldr	r0, [pc, #96]	; (801c7b4 <spi_1_2_task+0x270>)
 801c752:	f7ed fdef 	bl	800a334 <HAL_SPI_Abort_IT>
        xSemaphoreTake(*interrupt_sem, TIME_ELAPSED_ERROR);
 801c756:	687b      	ldr	r3, [r7, #4]
 801c758:	681b      	ldr	r3, [r3, #0]
 801c75a:	2164      	movs	r1, #100	; 0x64
 801c75c:	4618      	mov	r0, r3
 801c75e:	f7f3 f929 	bl	800f9b4 <xQueueSemaphoreTake>

        HAL_SPI_Abort_IT(&hspi1);
 801c762:	4813      	ldr	r0, [pc, #76]	; (801c7b0 <spi_1_2_task+0x26c>)
 801c764:	f7ed fde6 	bl	800a334 <HAL_SPI_Abort_IT>
        xSemaphoreTake(*interrupt_sem, TIME_ELAPSED_ERROR);
 801c768:	687b      	ldr	r3, [r7, #4]
 801c76a:	681b      	ldr	r3, [r3, #0]
 801c76c:	2164      	movs	r1, #100	; 0x64
 801c76e:	4618      	mov	r0, r3
 801c770:	f7f3 f920 	bl	800f9b4 <xQueueSemaphoreTake>

        *error_report = OVER_TIME;
 801c774:	6a3b      	ldr	r3, [r7, #32]
 801c776:	2203      	movs	r2, #3
 801c778:	701a      	strb	r2, [r3, #0]
 801c77a:	e015      	b.n	801c7a8 <spi_1_2_task+0x264>

    } else if (*error_report == ERROR_IT) {
 801c77c:	6a3b      	ldr	r3, [r7, #32]
 801c77e:	781b      	ldrb	r3, [r3, #0]
 801c780:	2b02      	cmp	r3, #2
 801c782:	d111      	bne.n	801c7a8 <spi_1_2_task+0x264>

        /* abort transmission in case HAL returns error so callback isr function wont release semaphore */
        HAL_SPI_Abort_IT(&hspi2);
 801c784:	480b      	ldr	r0, [pc, #44]	; (801c7b4 <spi_1_2_task+0x270>)
 801c786:	f7ed fdd5 	bl	800a334 <HAL_SPI_Abort_IT>
        xSemaphoreTake(*interrupt_sem, TIME_ELAPSED_ERROR);
 801c78a:	687b      	ldr	r3, [r7, #4]
 801c78c:	681b      	ldr	r3, [r3, #0]
 801c78e:	2164      	movs	r1, #100	; 0x64
 801c790:	4618      	mov	r0, r3
 801c792:	f7f3 f90f 	bl	800f9b4 <xQueueSemaphoreTake>

        HAL_SPI_Abort_IT(&hspi1);
 801c796:	4806      	ldr	r0, [pc, #24]	; (801c7b0 <spi_1_2_task+0x26c>)
 801c798:	f7ed fdcc 	bl	800a334 <HAL_SPI_Abort_IT>
        xSemaphoreTake(*interrupt_sem, TIME_ELAPSED_ERROR);
 801c79c:	687b      	ldr	r3, [r7, #4]
 801c79e:	681b      	ldr	r3, [r3, #0]
 801c7a0:	2164      	movs	r1, #100	; 0x64
 801c7a2:	4618      	mov	r0, r3
 801c7a4:	f7f3 f906 	bl	800f9b4 <xQueueSemaphoreTake>
    }
}
 801c7a8:	3718      	adds	r7, #24
 801c7aa:	46bd      	mov	sp, r7
 801c7ac:	bd80      	pop	{r7, pc}
 801c7ae:	bf00      	nop
 801c7b0:	200008a0 	.word	0x200008a0
 801c7b4:	20000904 	.word	0x20000904
 801c7b8:	200241ac 	.word	0x200241ac

0801c7bc <HAL_SPI_RxCpltCallback>:

/* peripheral isr callback function`s begin */

void
HAL_SPI_RxCpltCallback(SPI_HandleTypeDef* hspi) {
 801c7bc:	b580      	push	{r7, lr}
 801c7be:	b082      	sub	sp, #8
 801c7c0:	af00      	add	r7, sp, #0
 801c7c2:	6078      	str	r0, [r7, #4]

    if (hspi == &hspi1 || hspi == &hspi2) {
 801c7c4:	687b      	ldr	r3, [r7, #4]
 801c7c6:	4a08      	ldr	r2, [pc, #32]	; (801c7e8 <HAL_SPI_RxCpltCallback+0x2c>)
 801c7c8:	4293      	cmp	r3, r2
 801c7ca:	d003      	beq.n	801c7d4 <HAL_SPI_RxCpltCallback+0x18>
 801c7cc:	687b      	ldr	r3, [r7, #4]
 801c7ce:	4a07      	ldr	r2, [pc, #28]	; (801c7ec <HAL_SPI_RxCpltCallback+0x30>)
 801c7d0:	4293      	cmp	r3, r2
 801c7d2:	d105      	bne.n	801c7e0 <HAL_SPI_RxCpltCallback+0x24>

        xSemaphoreGiveFromISR(stm_test_list_array[SPI_1_2].q, NULL);
 801c7d4:	4b06      	ldr	r3, [pc, #24]	; (801c7f0 <HAL_SPI_RxCpltCallback+0x34>)
 801c7d6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c7d8:	2100      	movs	r1, #0
 801c7da:	4618      	mov	r0, r3
 801c7dc:	f7f2 ff6e 	bl	800f6bc <xQueueGiveFromISR>
    }
}
 801c7e0:	bf00      	nop
 801c7e2:	3708      	adds	r7, #8
 801c7e4:	46bd      	mov	sp, r7
 801c7e6:	bd80      	pop	{r7, pc}
 801c7e8:	200008a0 	.word	0x200008a0
 801c7ec:	20000904 	.word	0x20000904
 801c7f0:	200000a0 	.word	0x200000a0

0801c7f4 <HAL_SPI_TxRxCpltCallback>:

void
HAL_SPI_TxRxCpltCallback(SPI_HandleTypeDef* hspi) {
 801c7f4:	b580      	push	{r7, lr}
 801c7f6:	b082      	sub	sp, #8
 801c7f8:	af00      	add	r7, sp, #0
 801c7fa:	6078      	str	r0, [r7, #4]
    /* Prevent unused argument(s) compilation warning */

    if ((hspi == &hspi1 || hspi == &hspi2) && spi_tx_rx == ONE_PERIPHERAL_FINISH) {
 801c7fc:	687b      	ldr	r3, [r7, #4]
 801c7fe:	4a0d      	ldr	r2, [pc, #52]	; (801c834 <HAL_SPI_TxRxCpltCallback+0x40>)
 801c800:	4293      	cmp	r3, r2
 801c802:	d003      	beq.n	801c80c <HAL_SPI_TxRxCpltCallback+0x18>
 801c804:	687b      	ldr	r3, [r7, #4]
 801c806:	4a0c      	ldr	r2, [pc, #48]	; (801c838 <HAL_SPI_TxRxCpltCallback+0x44>)
 801c808:	4293      	cmp	r3, r2
 801c80a:	d10a      	bne.n	801c822 <HAL_SPI_TxRxCpltCallback+0x2e>
 801c80c:	4b0b      	ldr	r3, [pc, #44]	; (801c83c <HAL_SPI_TxRxCpltCallback+0x48>)
 801c80e:	781b      	ldrb	r3, [r3, #0]
 801c810:	2b01      	cmp	r3, #1
 801c812:	d106      	bne.n	801c822 <HAL_SPI_TxRxCpltCallback+0x2e>

        xSemaphoreGiveFromISR(stm_test_list_array[SPI_1_2].q, NULL);
 801c814:	4b0a      	ldr	r3, [pc, #40]	; (801c840 <HAL_SPI_TxRxCpltCallback+0x4c>)
 801c816:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c818:	2100      	movs	r1, #0
 801c81a:	4618      	mov	r0, r3
 801c81c:	f7f2 ff4e 	bl	800f6bc <xQueueGiveFromISR>
 801c820:	e003      	b.n	801c82a <HAL_SPI_TxRxCpltCallback+0x36>
    } else {

        spi_tx_rx = ONE_PERIPHERAL_FINISH;
 801c822:	4b06      	ldr	r3, [pc, #24]	; (801c83c <HAL_SPI_TxRxCpltCallback+0x48>)
 801c824:	2201      	movs	r2, #1
 801c826:	701a      	strb	r2, [r3, #0]
    }
    /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_SPI_TxRxHalfCpltCallback() should be implemented in the user file
   */
}
 801c828:	bf00      	nop
 801c82a:	bf00      	nop
 801c82c:	3708      	adds	r7, #8
 801c82e:	46bd      	mov	sp, r7
 801c830:	bd80      	pop	{r7, pc}
 801c832:	bf00      	nop
 801c834:	200008a0 	.word	0x200008a0
 801c838:	20000904 	.word	0x20000904
 801c83c:	200241ac 	.word	0x200241ac
 801c840:	200000a0 	.word	0x200000a0

0801c844 <HAL_SPI_AbortCpltCallback>:
  * @brief  SPI Abort Complete callback.
  * @param  hspi SPI handle.
  * @retval None
  */
void
HAL_SPI_AbortCpltCallback(SPI_HandleTypeDef* hspi) {
 801c844:	b580      	push	{r7, lr}
 801c846:	b082      	sub	sp, #8
 801c848:	af00      	add	r7, sp, #0
 801c84a:	6078      	str	r0, [r7, #4]
    /* releases semaphore and report errors*/
    if (hspi == &hspi1 || hspi == &hspi2) {
 801c84c:	687b      	ldr	r3, [r7, #4]
 801c84e:	4a08      	ldr	r2, [pc, #32]	; (801c870 <HAL_SPI_AbortCpltCallback+0x2c>)
 801c850:	4293      	cmp	r3, r2
 801c852:	d003      	beq.n	801c85c <HAL_SPI_AbortCpltCallback+0x18>
 801c854:	687b      	ldr	r3, [r7, #4]
 801c856:	4a07      	ldr	r2, [pc, #28]	; (801c874 <HAL_SPI_AbortCpltCallback+0x30>)
 801c858:	4293      	cmp	r3, r2
 801c85a:	d105      	bne.n	801c868 <HAL_SPI_AbortCpltCallback+0x24>

        xSemaphoreGiveFromISR(stm_test_list_array[SPI_1_2].q, NULL);
 801c85c:	4b06      	ldr	r3, [pc, #24]	; (801c878 <HAL_SPI_AbortCpltCallback+0x34>)
 801c85e:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c860:	2100      	movs	r1, #0
 801c862:	4618      	mov	r0, r3
 801c864:	f7f2 ff2a 	bl	800f6bc <xQueueGiveFromISR>
    }
}
 801c868:	bf00      	nop
 801c86a:	3708      	adds	r7, #8
 801c86c:	46bd      	mov	sp, r7
 801c86e:	bd80      	pop	{r7, pc}
 801c870:	200008a0 	.word	0x200008a0
 801c874:	20000904 	.word	0x20000904
 801c878:	200000a0 	.word	0x200000a0

0801c87c <HAL_SPI_ErrorCallback>:
   * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
   *               the configuration information for SPI module.
   * @retval None
   */
void
HAL_SPI_ErrorCallback(SPI_HandleTypeDef* hspi) {
 801c87c:	b580      	push	{r7, lr}
 801c87e:	b084      	sub	sp, #16
 801c880:	af00      	add	r7, sp, #0
 801c882:	6078      	str	r0, [r7, #4]

    unit_tasting_package_t* cast; /* for casting  */

    /* releases semaphore and report errors */
    if (hspi == &hspi1 || hspi == &hspi2) {
 801c884:	687b      	ldr	r3, [r7, #4]
 801c886:	4a0c      	ldr	r2, [pc, #48]	; (801c8b8 <HAL_SPI_ErrorCallback+0x3c>)
 801c888:	4293      	cmp	r3, r2
 801c88a:	d003      	beq.n	801c894 <HAL_SPI_ErrorCallback+0x18>
 801c88c:	687b      	ldr	r3, [r7, #4]
 801c88e:	4a0b      	ldr	r2, [pc, #44]	; (801c8bc <HAL_SPI_ErrorCallback+0x40>)
 801c890:	4293      	cmp	r3, r2
 801c892:	d10d      	bne.n	801c8b0 <HAL_SPI_ErrorCallback+0x34>

        cast = stm_test_list_array[SPI_1_2].taskX_pack.p->payload;
 801c894:	4b0a      	ldr	r3, [pc, #40]	; (801c8c0 <HAL_SPI_ErrorCallback+0x44>)
 801c896:	6e5b      	ldr	r3, [r3, #100]	; 0x64
 801c898:	685b      	ldr	r3, [r3, #4]
 801c89a:	60fb      	str	r3, [r7, #12]
        cast->error_report = ERROR_IT;
 801c89c:	68fb      	ldr	r3, [r7, #12]
 801c89e:	2202      	movs	r2, #2
 801c8a0:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        xSemaphoreGiveFromISR(stm_test_list_array[SPI_1_2].q, NULL);
 801c8a4:	4b06      	ldr	r3, [pc, #24]	; (801c8c0 <HAL_SPI_ErrorCallback+0x44>)
 801c8a6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 801c8a8:	2100      	movs	r1, #0
 801c8aa:	4618      	mov	r0, r3
 801c8ac:	f7f2 ff06 	bl	800f6bc <xQueueGiveFromISR>
    }
}
 801c8b0:	bf00      	nop
 801c8b2:	3710      	adds	r7, #16
 801c8b4:	46bd      	mov	sp, r7
 801c8b6:	bd80      	pop	{r7, pc}
 801c8b8:	200008a0 	.word	0x200008a0
 801c8bc:	20000904 	.word	0x20000904
 801c8c0:	200000a0 	.word	0x200000a0

0801c8c4 <UART_1_2_task>:
 * \param[in]       error_report: report to pc about test error
 */

void
UART_1_2_task(uint8_t* data, uint16_t sizeof_data, SemaphoreHandle_t* interrupt_sem, uint8_t test_select,
              uint8_t* error_report) {
 801c8c4:	b580      	push	{r7, lr}
 801c8c6:	b086      	sub	sp, #24
 801c8c8:	af00      	add	r7, sp, #0
 801c8ca:	60f8      	str	r0, [r7, #12]
 801c8cc:	607a      	str	r2, [r7, #4]
 801c8ce:	461a      	mov	r2, r3
 801c8d0:	460b      	mov	r3, r1
 801c8d2:	817b      	strh	r3, [r7, #10]
 801c8d4:	4613      	mov	r3, r2
 801c8d6:	727b      	strb	r3, [r7, #9]

    HAL_StatusTypeDef status; /* error return check */
    *error_report = NO_ERROR; /* initalized to  NO_ERROR if an error is accruing it will change it */
 801c8d8:	6a3b      	ldr	r3, [r7, #32]
 801c8da:	2200      	movs	r2, #0
 801c8dc:	701a      	strb	r2, [r3, #0]

    /* run task test requested by pc */
    switch (test_select) {
 801c8de:	7a7b      	ldrb	r3, [r7, #9]
 801c8e0:	2b00      	cmp	r3, #0
 801c8e2:	d002      	beq.n	801c8ea <UART_1_2_task+0x26>
 801c8e4:	2b01      	cmp	r3, #1
 801c8e6:	d021      	beq.n	801c92c <UART_1_2_task+0x68>
                *error_report = HAL_RETURN_ERROR;
            }

            break;

        default: break;
 801c8e8:	e044      	b.n	801c974 <UART_1_2_task+0xb0>
            status = HAL_UART_Receive_IT(&huart1, data, sizeof_data);
 801c8ea:	897b      	ldrh	r3, [r7, #10]
 801c8ec:	461a      	mov	r2, r3
 801c8ee:	68f9      	ldr	r1, [r7, #12]
 801c8f0:	4833      	ldr	r0, [pc, #204]	; (801c9c0 <UART_1_2_task+0xfc>)
 801c8f2:	f7ef fa3d 	bl	800bd70 <HAL_UART_Receive_IT>
 801c8f6:	4603      	mov	r3, r0
 801c8f8:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801c8fa:	7dfb      	ldrb	r3, [r7, #23]
 801c8fc:	2b00      	cmp	r3, #0
 801c8fe:	d003      	beq.n	801c908 <UART_1_2_task+0x44>
                *error_report = HAL_RETURN_ERROR;
 801c900:	6a3b      	ldr	r3, [r7, #32]
 801c902:	2201      	movs	r2, #1
 801c904:	701a      	strb	r2, [r3, #0]
                return;
 801c906:	e057      	b.n	801c9b8 <UART_1_2_task+0xf4>
            status = HAL_UART_Transmit_IT(&huart2, data, sizeof_data);
 801c908:	897b      	ldrh	r3, [r7, #10]
 801c90a:	461a      	mov	r2, r3
 801c90c:	68f9      	ldr	r1, [r7, #12]
 801c90e:	482d      	ldr	r0, [pc, #180]	; (801c9c4 <UART_1_2_task+0x100>)
 801c910:	f7ef f9d0 	bl	800bcb4 <HAL_UART_Transmit_IT>
 801c914:	4603      	mov	r3, r0
 801c916:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801c918:	7dfb      	ldrb	r3, [r7, #23]
 801c91a:	2b00      	cmp	r3, #0
 801c91c:	d027      	beq.n	801c96e <UART_1_2_task+0xaa>
                HAL_UART_Abort_IT(&huart1);
 801c91e:	4828      	ldr	r0, [pc, #160]	; (801c9c0 <UART_1_2_task+0xfc>)
 801c920:	f7ef fb2a 	bl	800bf78 <HAL_UART_Abort_IT>
                *error_report = HAL_RETURN_ERROR;
 801c924:	6a3b      	ldr	r3, [r7, #32]
 801c926:	2201      	movs	r2, #1
 801c928:	701a      	strb	r2, [r3, #0]
            break;
 801c92a:	e020      	b.n	801c96e <UART_1_2_task+0xaa>
            status = HAL_UART_Receive_IT(&huart2, data, sizeof_data);
 801c92c:	897b      	ldrh	r3, [r7, #10]
 801c92e:	461a      	mov	r2, r3
 801c930:	68f9      	ldr	r1, [r7, #12]
 801c932:	4824      	ldr	r0, [pc, #144]	; (801c9c4 <UART_1_2_task+0x100>)
 801c934:	f7ef fa1c 	bl	800bd70 <HAL_UART_Receive_IT>
 801c938:	4603      	mov	r3, r0
 801c93a:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801c93c:	7dfb      	ldrb	r3, [r7, #23]
 801c93e:	2b00      	cmp	r3, #0
 801c940:	d003      	beq.n	801c94a <UART_1_2_task+0x86>
                *error_report = HAL_RETURN_ERROR;
 801c942:	6a3b      	ldr	r3, [r7, #32]
 801c944:	2201      	movs	r2, #1
 801c946:	701a      	strb	r2, [r3, #0]
                return;
 801c948:	e036      	b.n	801c9b8 <UART_1_2_task+0xf4>
            status = HAL_UART_Transmit_IT(&huart1, data, sizeof_data);
 801c94a:	897b      	ldrh	r3, [r7, #10]
 801c94c:	461a      	mov	r2, r3
 801c94e:	68f9      	ldr	r1, [r7, #12]
 801c950:	481b      	ldr	r0, [pc, #108]	; (801c9c0 <UART_1_2_task+0xfc>)
 801c952:	f7ef f9af 	bl	800bcb4 <HAL_UART_Transmit_IT>
 801c956:	4603      	mov	r3, r0
 801c958:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801c95a:	7dfb      	ldrb	r3, [r7, #23]
 801c95c:	2b00      	cmp	r3, #0
 801c95e:	d008      	beq.n	801c972 <UART_1_2_task+0xae>
                HAL_UART_Abort_IT(&huart2);
 801c960:	4818      	ldr	r0, [pc, #96]	; (801c9c4 <UART_1_2_task+0x100>)
 801c962:	f7ef fb09 	bl	800bf78 <HAL_UART_Abort_IT>
                *error_report = HAL_RETURN_ERROR;
 801c966:	6a3b      	ldr	r3, [r7, #32]
 801c968:	2201      	movs	r2, #1
 801c96a:	701a      	strb	r2, [r3, #0]
            break;
 801c96c:	e001      	b.n	801c972 <UART_1_2_task+0xae>
            break;
 801c96e:	bf00      	nop
 801c970:	e000      	b.n	801c974 <UART_1_2_task+0xb0>
            break;
 801c972:	bf00      	nop
    }

    /* waite for rx interrupt to release the semaphore, if to match time has passed report over time error  */
    if (xSemaphoreTake(*interrupt_sem, TIME_ELAPSED_ERROR) == pdFALSE && *error_report == NO_ERROR) {
 801c974:	687b      	ldr	r3, [r7, #4]
 801c976:	681b      	ldr	r3, [r3, #0]
 801c978:	2164      	movs	r1, #100	; 0x64
 801c97a:	4618      	mov	r0, r3
 801c97c:	f7f3 f81a 	bl	800f9b4 <xQueueSemaphoreTake>
 801c980:	4603      	mov	r3, r0
 801c982:	2b00      	cmp	r3, #0
 801c984:	d118      	bne.n	801c9b8 <UART_1_2_task+0xf4>
 801c986:	6a3b      	ldr	r3, [r7, #32]
 801c988:	781b      	ldrb	r3, [r3, #0]
 801c98a:	2b00      	cmp	r3, #0
 801c98c:	d114      	bne.n	801c9b8 <UART_1_2_task+0xf4>

        /* abort transmission in case HAL returns error so callback isr function wont release semaphore */
        HAL_UART_Abort_IT(&huart1);
 801c98e:	480c      	ldr	r0, [pc, #48]	; (801c9c0 <UART_1_2_task+0xfc>)
 801c990:	f7ef faf2 	bl	800bf78 <HAL_UART_Abort_IT>
        xSemaphoreTake(*interrupt_sem, TIME_ELAPSED_ERROR);
 801c994:	687b      	ldr	r3, [r7, #4]
 801c996:	681b      	ldr	r3, [r3, #0]
 801c998:	2164      	movs	r1, #100	; 0x64
 801c99a:	4618      	mov	r0, r3
 801c99c:	f7f3 f80a 	bl	800f9b4 <xQueueSemaphoreTake>

        HAL_UART_Abort_IT(&huart2);
 801c9a0:	4808      	ldr	r0, [pc, #32]	; (801c9c4 <UART_1_2_task+0x100>)
 801c9a2:	f7ef fae9 	bl	800bf78 <HAL_UART_Abort_IT>
        xSemaphoreTake(*interrupt_sem, TIME_ELAPSED_ERROR);
 801c9a6:	687b      	ldr	r3, [r7, #4]
 801c9a8:	681b      	ldr	r3, [r3, #0]
 801c9aa:	2164      	movs	r1, #100	; 0x64
 801c9ac:	4618      	mov	r0, r3
 801c9ae:	f7f3 f801 	bl	800f9b4 <xQueueSemaphoreTake>

        *error_report = OVER_TIME;
 801c9b2:	6a3b      	ldr	r3, [r7, #32]
 801c9b4:	2203      	movs	r2, #3
 801c9b6:	701a      	strb	r2, [r3, #0]
    }
}
 801c9b8:	3718      	adds	r7, #24
 801c9ba:	46bd      	mov	sp, r7
 801c9bc:	bd80      	pop	{r7, pc}
 801c9be:	bf00      	nop
 801c9c0:	20000ee4 	.word	0x20000ee4
 801c9c4:	20000f6c 	.word	0x20000f6c

0801c9c8 <UART_4_5_task>:
 * \param[in]       test_select: select what test in the function to run
 * \param[in]       error_report: report to pc about test error
 */
void
UART_4_5_task(uint8_t* data, uint16_t sizeof_data, SemaphoreHandle_t* interrupt_sem, uint8_t test_select,
              uint8_t* error_report) {
 801c9c8:	b580      	push	{r7, lr}
 801c9ca:	b086      	sub	sp, #24
 801c9cc:	af00      	add	r7, sp, #0
 801c9ce:	60f8      	str	r0, [r7, #12]
 801c9d0:	607a      	str	r2, [r7, #4]
 801c9d2:	461a      	mov	r2, r3
 801c9d4:	460b      	mov	r3, r1
 801c9d6:	817b      	strh	r3, [r7, #10]
 801c9d8:	4613      	mov	r3, r2
 801c9da:	727b      	strb	r3, [r7, #9]

    HAL_StatusTypeDef status; /* error return check */
    *error_report = NO_ERROR; /* initalized to  NO_ERROR if an error is accruing it will change it */
 801c9dc:	6a3b      	ldr	r3, [r7, #32]
 801c9de:	2200      	movs	r2, #0
 801c9e0:	701a      	strb	r2, [r3, #0]

    /* run task test requested by pc */
    switch (test_select) {
 801c9e2:	7a7b      	ldrb	r3, [r7, #9]
 801c9e4:	2b03      	cmp	r3, #3
 801c9e6:	f200 808f 	bhi.w	801cb08 <UART_4_5_task+0x140>
 801c9ea:	a201      	add	r2, pc, #4	; (adr r2, 801c9f0 <UART_4_5_task+0x28>)
 801c9ec:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 801c9f0:	0801ca01 	.word	0x0801ca01
 801c9f4:	0801ca43 	.word	0x0801ca43
 801c9f8:	0801ca85 	.word	0x0801ca85
 801c9fc:	0801cac7 	.word	0x0801cac7

        case 0: /* uart4 TI rx uart5 TI tx */

            /* peripheral receive testing data  */
            status = HAL_UART_Receive_IT(&huart4, data, sizeof_data);
 801ca00:	897b      	ldrh	r3, [r7, #10]
 801ca02:	461a      	mov	r2, r3
 801ca04:	68f9      	ldr	r1, [r7, #12]
 801ca06:	4863      	ldr	r0, [pc, #396]	; (801cb94 <UART_4_5_task+0x1cc>)
 801ca08:	f7ef f9b2 	bl	800bd70 <HAL_UART_Receive_IT>
 801ca0c:	4603      	mov	r3, r0
 801ca0e:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801ca10:	7dfb      	ldrb	r3, [r7, #23]
 801ca12:	2b00      	cmp	r3, #0
 801ca14:	d003      	beq.n	801ca1e <UART_4_5_task+0x56>

                *error_report = HAL_RETURN_ERROR;
 801ca16:	6a3b      	ldr	r3, [r7, #32]
 801ca18:	2201      	movs	r2, #1
 801ca1a:	701a      	strb	r2, [r3, #0]

                return;
 801ca1c:	e0b6      	b.n	801cb8c <UART_4_5_task+0x1c4>
            }

            /* peripheral transmit testing data  */
            status = HAL_UART_Transmit_IT(&huart5, data, sizeof_data);
 801ca1e:	897b      	ldrh	r3, [r7, #10]
 801ca20:	461a      	mov	r2, r3
 801ca22:	68f9      	ldr	r1, [r7, #12]
 801ca24:	485c      	ldr	r0, [pc, #368]	; (801cb98 <UART_4_5_task+0x1d0>)
 801ca26:	f7ef f945 	bl	800bcb4 <HAL_UART_Transmit_IT>
 801ca2a:	4603      	mov	r3, r0
 801ca2c:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801ca2e:	7dfb      	ldrb	r3, [r7, #23]
 801ca30:	2b00      	cmp	r3, #0
 801ca32:	d06b      	beq.n	801cb0c <UART_4_5_task+0x144>
                /* abort transmission in case HAL returns error so callback isr function wont release semaphore */
                HAL_UART_Abort_IT(&huart4);
 801ca34:	4857      	ldr	r0, [pc, #348]	; (801cb94 <UART_4_5_task+0x1cc>)
 801ca36:	f7ef fa9f 	bl	800bf78 <HAL_UART_Abort_IT>
                *error_report = HAL_RETURN_ERROR;
 801ca3a:	6a3b      	ldr	r3, [r7, #32]
 801ca3c:	2201      	movs	r2, #1
 801ca3e:	701a      	strb	r2, [r3, #0]
            }
            break;
 801ca40:	e064      	b.n	801cb0c <UART_4_5_task+0x144>

        case 1: /* uart5 TI rx uart4 TI tx */

            /* peripheral receive testing data  */
            status = HAL_UART_Receive_IT(&huart5, data, sizeof_data);
 801ca42:	897b      	ldrh	r3, [r7, #10]
 801ca44:	461a      	mov	r2, r3
 801ca46:	68f9      	ldr	r1, [r7, #12]
 801ca48:	4853      	ldr	r0, [pc, #332]	; (801cb98 <UART_4_5_task+0x1d0>)
 801ca4a:	f7ef f991 	bl	800bd70 <HAL_UART_Receive_IT>
 801ca4e:	4603      	mov	r3, r0
 801ca50:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801ca52:	7dfb      	ldrb	r3, [r7, #23]
 801ca54:	2b00      	cmp	r3, #0
 801ca56:	d003      	beq.n	801ca60 <UART_4_5_task+0x98>

                *error_report = HAL_RETURN_ERROR;
 801ca58:	6a3b      	ldr	r3, [r7, #32]
 801ca5a:	2201      	movs	r2, #1
 801ca5c:	701a      	strb	r2, [r3, #0]
                return;
 801ca5e:	e095      	b.n	801cb8c <UART_4_5_task+0x1c4>
            }
            /* peripheral transmit testing data  */
            status = HAL_UART_Transmit_IT(&huart4, data, sizeof_data);
 801ca60:	897b      	ldrh	r3, [r7, #10]
 801ca62:	461a      	mov	r2, r3
 801ca64:	68f9      	ldr	r1, [r7, #12]
 801ca66:	484b      	ldr	r0, [pc, #300]	; (801cb94 <UART_4_5_task+0x1cc>)
 801ca68:	f7ef f924 	bl	800bcb4 <HAL_UART_Transmit_IT>
 801ca6c:	4603      	mov	r3, r0
 801ca6e:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801ca70:	7dfb      	ldrb	r3, [r7, #23]
 801ca72:	2b00      	cmp	r3, #0
 801ca74:	d04c      	beq.n	801cb10 <UART_4_5_task+0x148>
                /* abort transmission in case HAL returns error so callback isr function wont release semaphore */
                HAL_UART_Abort_IT(&huart5);
 801ca76:	4848      	ldr	r0, [pc, #288]	; (801cb98 <UART_4_5_task+0x1d0>)
 801ca78:	f7ef fa7e 	bl	800bf78 <HAL_UART_Abort_IT>
                *error_report = HAL_RETURN_ERROR;
 801ca7c:	6a3b      	ldr	r3, [r7, #32]
 801ca7e:	2201      	movs	r2, #1
 801ca80:	701a      	strb	r2, [r3, #0]
            }

            break;
 801ca82:	e045      	b.n	801cb10 <UART_4_5_task+0x148>

        case 2: /* uart4 DMA rx uart5 DMA tx */

            /* peripheral receive testing data  */
            status = HAL_UART_Receive_DMA(&huart4, data, sizeof_data);
 801ca84:	897b      	ldrh	r3, [r7, #10]
 801ca86:	461a      	mov	r2, r3
 801ca88:	68f9      	ldr	r1, [r7, #12]
 801ca8a:	4842      	ldr	r0, [pc, #264]	; (801cb94 <UART_4_5_task+0x1cc>)
 801ca8c:	f7ef fa30 	bl	800bef0 <HAL_UART_Receive_DMA>
 801ca90:	4603      	mov	r3, r0
 801ca92:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801ca94:	7dfb      	ldrb	r3, [r7, #23]
 801ca96:	2b00      	cmp	r3, #0
 801ca98:	d003      	beq.n	801caa2 <UART_4_5_task+0xda>

                *error_report = HAL_RETURN_ERROR;
 801ca9a:	6a3b      	ldr	r3, [r7, #32]
 801ca9c:	2201      	movs	r2, #1
 801ca9e:	701a      	strb	r2, [r3, #0]
                return;
 801caa0:	e074      	b.n	801cb8c <UART_4_5_task+0x1c4>
            }

            /* peripheral transmit testing data  */
            status = HAL_UART_Transmit_DMA(&huart5, data, sizeof_data);
 801caa2:	897b      	ldrh	r3, [r7, #10]
 801caa4:	461a      	mov	r2, r3
 801caa6:	68f9      	ldr	r1, [r7, #12]
 801caa8:	483b      	ldr	r0, [pc, #236]	; (801cb98 <UART_4_5_task+0x1d0>)
 801caaa:	f7ef f9a5 	bl	800bdf8 <HAL_UART_Transmit_DMA>
 801caae:	4603      	mov	r3, r0
 801cab0:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801cab2:	7dfb      	ldrb	r3, [r7, #23]
 801cab4:	2b00      	cmp	r3, #0
 801cab6:	d02d      	beq.n	801cb14 <UART_4_5_task+0x14c>
                /* abort transmission in case HAL returns error so callback isr function wont release semaphore */
                HAL_UART_Abort_IT(&huart4);
 801cab8:	4836      	ldr	r0, [pc, #216]	; (801cb94 <UART_4_5_task+0x1cc>)
 801caba:	f7ef fa5d 	bl	800bf78 <HAL_UART_Abort_IT>
                *error_report = HAL_RETURN_ERROR;
 801cabe:	6a3b      	ldr	r3, [r7, #32]
 801cac0:	2201      	movs	r2, #1
 801cac2:	701a      	strb	r2, [r3, #0]
            }

            break;
 801cac4:	e026      	b.n	801cb14 <UART_4_5_task+0x14c>

        case 3: /* uart5 DMA rx uart4 DMA tx */

            /* peripheral receive testing data  */
            status = HAL_UART_Receive_DMA(&huart5, data, sizeof_data);
 801cac6:	897b      	ldrh	r3, [r7, #10]
 801cac8:	461a      	mov	r2, r3
 801caca:	68f9      	ldr	r1, [r7, #12]
 801cacc:	4832      	ldr	r0, [pc, #200]	; (801cb98 <UART_4_5_task+0x1d0>)
 801cace:	f7ef fa0f 	bl	800bef0 <HAL_UART_Receive_DMA>
 801cad2:	4603      	mov	r3, r0
 801cad4:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801cad6:	7dfb      	ldrb	r3, [r7, #23]
 801cad8:	2b00      	cmp	r3, #0
 801cada:	d003      	beq.n	801cae4 <UART_4_5_task+0x11c>

                *error_report = HAL_RETURN_ERROR;
 801cadc:	6a3b      	ldr	r3, [r7, #32]
 801cade:	2201      	movs	r2, #1
 801cae0:	701a      	strb	r2, [r3, #0]
                return;
 801cae2:	e053      	b.n	801cb8c <UART_4_5_task+0x1c4>
            }

            /* peripheral transmit testing data  */
            status = HAL_UART_Transmit_DMA(&huart4, data, sizeof_data);
 801cae4:	897b      	ldrh	r3, [r7, #10]
 801cae6:	461a      	mov	r2, r3
 801cae8:	68f9      	ldr	r1, [r7, #12]
 801caea:	482a      	ldr	r0, [pc, #168]	; (801cb94 <UART_4_5_task+0x1cc>)
 801caec:	f7ef f984 	bl	800bdf8 <HAL_UART_Transmit_DMA>
 801caf0:	4603      	mov	r3, r0
 801caf2:	75fb      	strb	r3, [r7, #23]
            if (status != HAL_OK) {
 801caf4:	7dfb      	ldrb	r3, [r7, #23]
 801caf6:	2b00      	cmp	r3, #0
 801caf8:	d00e      	beq.n	801cb18 <UART_4_5_task+0x150>
                /* abort transmission in case HAL returns error so callback isr function wont release semaphore */
                HAL_UART_Abort_IT(&huart5);
 801cafa:	4827      	ldr	r0, [pc, #156]	; (801cb98 <UART_4_5_task+0x1d0>)
 801cafc:	f7ef fa3c 	bl	800bf78 <HAL_UART_Abort_IT>
                *error_report = HAL_RETURN_ERROR;
 801cb00:	6a3b      	ldr	r3, [r7, #32]
 801cb02:	2201      	movs	r2, #1
 801cb04:	701a      	strb	r2, [r3, #0]
            }
            break;
 801cb06:	e007      	b.n	801cb18 <UART_4_5_task+0x150>

        default: break;
 801cb08:	bf00      	nop
 801cb0a:	e006      	b.n	801cb1a <UART_4_5_task+0x152>
            break;
 801cb0c:	bf00      	nop
 801cb0e:	e004      	b.n	801cb1a <UART_4_5_task+0x152>
            break;
 801cb10:	bf00      	nop
 801cb12:	e002      	b.n	801cb1a <UART_4_5_task+0x152>
            break;
 801cb14:	bf00      	nop
 801cb16:	e000      	b.n	801cb1a <UART_4_5_task+0x152>
            break;
 801cb18:	bf00      	nop
    }

    /* waite for rx interrupt to release the semaphore, if to match time has passed report over time error  */
    if (xSemaphoreTake(*interrupt_sem, TIME_ELAPSED_ERROR) == pdFALSE && *error_report == NO_ERROR) {
 801cb1a:	687b      	ldr	r3, [r7, #4]
 801cb1c:	681b      	ldr	r3, [r3, #0]
 801cb1e:	2164      	movs	r1, #100	; 0x64
 801cb20:	4618      	mov	r0, r3
 801cb22:	f7f2 ff47 	bl	800f9b4 <xQueueSemaphoreTake>
 801cb26:	4603      	mov	r3, r0
 801cb28:	2b00      	cmp	r3, #0
 801cb2a:	d119      	bne.n	801cb60 <UART_4_5_task+0x198>
 801cb2c:	6a3b      	ldr	r3, [r7, #32]
 801cb2e:	781b      	ldrb	r3, [r3, #0]
 801cb30:	2b00      	cmp	r3, #0
 801cb32:	d115      	bne.n	801cb60 <UART_4_5_task+0x198>

        /* abort transmission in case HAL returns error so callback isr function wont release semaphore */
        HAL_UART_Abort_IT(&huart4);
 801cb34:	4817      	ldr	r0, [pc, #92]	; (801cb94 <UART_4_5_task+0x1cc>)
 801cb36:	f7ef fa1f 	bl	800bf78 <HAL_UART_Abort_IT>
        xSemaphoreTake(*interrupt_sem, TIME_ELAPSED_ERROR);
 801cb3a:	687b      	ldr	r3, [r7, #4]
 801cb3c:	681b      	ldr	r3, [r3, #0]
 801cb3e:	2164      	movs	r1, #100	; 0x64
 801cb40:	4618      	mov	r0, r3
 801cb42:	f7f2 ff37 	bl	800f9b4 <xQueueSemaphoreTake>

        HAL_UART_Abort_IT(&huart5);
 801cb46:	4814      	ldr	r0, [pc, #80]	; (801cb98 <UART_4_5_task+0x1d0>)
 801cb48:	f7ef fa16 	bl	800bf78 <HAL_UART_Abort_IT>
        xSemaphoreTake(*interrupt_sem, TIME_ELAPSED_ERROR);
 801cb4c:	687b      	ldr	r3, [r7, #4]
 801cb4e:	681b      	ldr	r3, [r3, #0]
 801cb50:	2164      	movs	r1, #100	; 0x64
 801cb52:	4618      	mov	r0, r3
 801cb54:	f7f2 ff2e 	bl	800f9b4 <xQueueSemaphoreTake>

        *error_report = OVER_TIME;
 801cb58:	6a3b      	ldr	r3, [r7, #32]
 801cb5a:	2203      	movs	r2, #3
 801cb5c:	701a      	strb	r2, [r3, #0]
 801cb5e:	e015      	b.n	801cb8c <UART_4_5_task+0x1c4>

    } else if (*error_report == ERROR_IT) {
 801cb60:	6a3b      	ldr	r3, [r7, #32]
 801cb62:	781b      	ldrb	r3, [r3, #0]
 801cb64:	2b02      	cmp	r3, #2
 801cb66:	d111      	bne.n	801cb8c <UART_4_5_task+0x1c4>

        /* abort transmission in case HAL returns error so callback isr function wont release semaphore */
        HAL_UART_Abort_IT(&huart4);
 801cb68:	480a      	ldr	r0, [pc, #40]	; (801cb94 <UART_4_5_task+0x1cc>)
 801cb6a:	f7ef fa05 	bl	800bf78 <HAL_UART_Abort_IT>
        xSemaphoreTake(*interrupt_sem, TIME_ELAPSED_ERROR);
 801cb6e:	687b      	ldr	r3, [r7, #4]
 801cb70:	681b      	ldr	r3, [r3, #0]
 801cb72:	2164      	movs	r1, #100	; 0x64
 801cb74:	4618      	mov	r0, r3
 801cb76:	f7f2 ff1d 	bl	800f9b4 <xQueueSemaphoreTake>

        HAL_UART_Abort_IT(&huart5);
 801cb7a:	4807      	ldr	r0, [pc, #28]	; (801cb98 <UART_4_5_task+0x1d0>)
 801cb7c:	f7ef f9fc 	bl	800bf78 <HAL_UART_Abort_IT>
        xSemaphoreTake(*interrupt_sem, TIME_ELAPSED_ERROR);
 801cb80:	687b      	ldr	r3, [r7, #4]
 801cb82:	681b      	ldr	r3, [r3, #0]
 801cb84:	2164      	movs	r1, #100	; 0x64
 801cb86:	4618      	mov	r0, r3
 801cb88:	f7f2 ff14 	bl	800f9b4 <xQueueSemaphoreTake>
    }
}
 801cb8c:	3718      	adds	r7, #24
 801cb8e:	46bd      	mov	sp, r7
 801cb90:	bd80      	pop	{r7, pc}
 801cb92:	bf00      	nop
 801cb94:	20000cc4 	.word	0x20000cc4
 801cb98:	20000d4c 	.word	0x20000d4c

0801cb9c <HAL_UART_RxCpltCallback>:

void
HAL_UART_RxCpltCallback(UART_HandleTypeDef* huart) {
 801cb9c:	b580      	push	{r7, lr}
 801cb9e:	b082      	sub	sp, #8
 801cba0:	af00      	add	r7, sp, #0
 801cba2:	6078      	str	r0, [r7, #4]

    if (huart == &huart4 || huart == &huart5) {
 801cba4:	687b      	ldr	r3, [r7, #4]
 801cba6:	4a10      	ldr	r2, [pc, #64]	; (801cbe8 <HAL_UART_RxCpltCallback+0x4c>)
 801cba8:	4293      	cmp	r3, r2
 801cbaa:	d003      	beq.n	801cbb4 <HAL_UART_RxCpltCallback+0x18>
 801cbac:	687b      	ldr	r3, [r7, #4]
 801cbae:	4a0f      	ldr	r2, [pc, #60]	; (801cbec <HAL_UART_RxCpltCallback+0x50>)
 801cbb0:	4293      	cmp	r3, r2
 801cbb2:	d106      	bne.n	801cbc2 <HAL_UART_RxCpltCallback+0x26>

        xSemaphoreGiveFromISR(stm_test_list_array[UART_4_5].q, NULL);
 801cbb4:	4b0e      	ldr	r3, [pc, #56]	; (801cbf0 <HAL_UART_RxCpltCallback+0x54>)
 801cbb6:	6a1b      	ldr	r3, [r3, #32]
 801cbb8:	2100      	movs	r1, #0
 801cbba:	4618      	mov	r0, r3
 801cbbc:	f7f2 fd7e 	bl	800f6bc <xQueueGiveFromISR>

    } else if (huart == &huart1 || huart == &huart2) {

        xSemaphoreGiveFromISR(stm_test_list_array[UART_1_2].q, NULL);
    }
}
 801cbc0:	e00d      	b.n	801cbde <HAL_UART_RxCpltCallback+0x42>
    } else if (huart == &huart1 || huart == &huart2) {
 801cbc2:	687b      	ldr	r3, [r7, #4]
 801cbc4:	4a0b      	ldr	r2, [pc, #44]	; (801cbf4 <HAL_UART_RxCpltCallback+0x58>)
 801cbc6:	4293      	cmp	r3, r2
 801cbc8:	d003      	beq.n	801cbd2 <HAL_UART_RxCpltCallback+0x36>
 801cbca:	687b      	ldr	r3, [r7, #4]
 801cbcc:	4a0a      	ldr	r2, [pc, #40]	; (801cbf8 <HAL_UART_RxCpltCallback+0x5c>)
 801cbce:	4293      	cmp	r3, r2
 801cbd0:	d105      	bne.n	801cbde <HAL_UART_RxCpltCallback+0x42>
        xSemaphoreGiveFromISR(stm_test_list_array[UART_1_2].q, NULL);
 801cbd2:	4b07      	ldr	r3, [pc, #28]	; (801cbf0 <HAL_UART_RxCpltCallback+0x54>)
 801cbd4:	685b      	ldr	r3, [r3, #4]
 801cbd6:	2100      	movs	r1, #0
 801cbd8:	4618      	mov	r0, r3
 801cbda:	f7f2 fd6f 	bl	800f6bc <xQueueGiveFromISR>
}
 801cbde:	bf00      	nop
 801cbe0:	3708      	adds	r7, #8
 801cbe2:	46bd      	mov	sp, r7
 801cbe4:	bd80      	pop	{r7, pc}
 801cbe6:	bf00      	nop
 801cbe8:	20000cc4 	.word	0x20000cc4
 801cbec:	20000d4c 	.word	0x20000d4c
 801cbf0:	200000a0 	.word	0x200000a0
 801cbf4:	20000ee4 	.word	0x20000ee4
 801cbf8:	20000f6c 	.word	0x20000f6c

0801cbfc <HAL_UART_ErrorCallback>:

/* callbacks */
void
HAL_UART_ErrorCallback(UART_HandleTypeDef* huart) {
 801cbfc:	b580      	push	{r7, lr}
 801cbfe:	b084      	sub	sp, #16
 801cc00:	af00      	add	r7, sp, #0
 801cc02:	6078      	str	r0, [r7, #4]
    unit_tasting_package_t* cast;

    if (huart == &huart4 || huart == &huart5) {
 801cc04:	687b      	ldr	r3, [r7, #4]
 801cc06:	4a15      	ldr	r2, [pc, #84]	; (801cc5c <HAL_UART_ErrorCallback+0x60>)
 801cc08:	4293      	cmp	r3, r2
 801cc0a:	d003      	beq.n	801cc14 <HAL_UART_ErrorCallback+0x18>
 801cc0c:	687b      	ldr	r3, [r7, #4]
 801cc0e:	4a14      	ldr	r2, [pc, #80]	; (801cc60 <HAL_UART_ErrorCallback+0x64>)
 801cc10:	4293      	cmp	r3, r2
 801cc12:	d108      	bne.n	801cc26 <HAL_UART_ErrorCallback+0x2a>

        cast = stm_test_list_array[UART_4_5].taskX_pack.p->payload;
 801cc14:	4b13      	ldr	r3, [pc, #76]	; (801cc64 <HAL_UART_ErrorCallback+0x68>)
 801cc16:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 801cc18:	685b      	ldr	r3, [r3, #4]
 801cc1a:	60fb      	str	r3, [r7, #12]
        cast->error_report = ERROR_IT;
 801cc1c:	68fb      	ldr	r3, [r7, #12]
 801cc1e:	2202      	movs	r2, #2
 801cc20:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71

        cast = stm_test_list_array[UART_1_2].taskX_pack.p->payload;
        cast->error_report = ERROR_IT;
        xSemaphoreGiveFromISR(stm_test_list_array[UART_1_2].q, NULL);
    }
}
 801cc24:	e015      	b.n	801cc52 <HAL_UART_ErrorCallback+0x56>
    } else if (huart == &huart1 || huart == &huart2) {
 801cc26:	687b      	ldr	r3, [r7, #4]
 801cc28:	4a0f      	ldr	r2, [pc, #60]	; (801cc68 <HAL_UART_ErrorCallback+0x6c>)
 801cc2a:	4293      	cmp	r3, r2
 801cc2c:	d003      	beq.n	801cc36 <HAL_UART_ErrorCallback+0x3a>
 801cc2e:	687b      	ldr	r3, [r7, #4]
 801cc30:	4a0e      	ldr	r2, [pc, #56]	; (801cc6c <HAL_UART_ErrorCallback+0x70>)
 801cc32:	4293      	cmp	r3, r2
 801cc34:	d10d      	bne.n	801cc52 <HAL_UART_ErrorCallback+0x56>
        cast = stm_test_list_array[UART_1_2].taskX_pack.p->payload;
 801cc36:	4b0b      	ldr	r3, [pc, #44]	; (801cc64 <HAL_UART_ErrorCallback+0x68>)
 801cc38:	691b      	ldr	r3, [r3, #16]
 801cc3a:	685b      	ldr	r3, [r3, #4]
 801cc3c:	60fb      	str	r3, [r7, #12]
        cast->error_report = ERROR_IT;
 801cc3e:	68fb      	ldr	r3, [r7, #12]
 801cc40:	2202      	movs	r2, #2
 801cc42:	f883 2071 	strb.w	r2, [r3, #113]	; 0x71
        xSemaphoreGiveFromISR(stm_test_list_array[UART_1_2].q, NULL);
 801cc46:	4b07      	ldr	r3, [pc, #28]	; (801cc64 <HAL_UART_ErrorCallback+0x68>)
 801cc48:	685b      	ldr	r3, [r3, #4]
 801cc4a:	2100      	movs	r1, #0
 801cc4c:	4618      	mov	r0, r3
 801cc4e:	f7f2 fd35 	bl	800f6bc <xQueueGiveFromISR>
}
 801cc52:	bf00      	nop
 801cc54:	3710      	adds	r7, #16
 801cc56:	46bd      	mov	sp, r7
 801cc58:	bd80      	pop	{r7, pc}
 801cc5a:	bf00      	nop
 801cc5c:	20000cc4 	.word	0x20000cc4
 801cc60:	20000d4c 	.word	0x20000d4c
 801cc64:	200000a0 	.word	0x200000a0
 801cc68:	20000ee4 	.word	0x20000ee4
 801cc6c:	20000f6c 	.word	0x20000f6c

0801cc70 <HAL_UART_AbortCpltCallback>:

void
HAL_UART_AbortCpltCallback(UART_HandleTypeDef* huart) {
 801cc70:	b580      	push	{r7, lr}
 801cc72:	b082      	sub	sp, #8
 801cc74:	af00      	add	r7, sp, #0
 801cc76:	6078      	str	r0, [r7, #4]
    if (huart == &huart4 || huart == &huart5) {
 801cc78:	687b      	ldr	r3, [r7, #4]
 801cc7a:	4a10      	ldr	r2, [pc, #64]	; (801ccbc <HAL_UART_AbortCpltCallback+0x4c>)
 801cc7c:	4293      	cmp	r3, r2
 801cc7e:	d003      	beq.n	801cc88 <HAL_UART_AbortCpltCallback+0x18>
 801cc80:	687b      	ldr	r3, [r7, #4]
 801cc82:	4a0f      	ldr	r2, [pc, #60]	; (801ccc0 <HAL_UART_AbortCpltCallback+0x50>)
 801cc84:	4293      	cmp	r3, r2
 801cc86:	d106      	bne.n	801cc96 <HAL_UART_AbortCpltCallback+0x26>

        xSemaphoreGiveFromISR(stm_test_list_array[UART_4_5].q, NULL);
 801cc88:	4b0e      	ldr	r3, [pc, #56]	; (801ccc4 <HAL_UART_AbortCpltCallback+0x54>)
 801cc8a:	6a1b      	ldr	r3, [r3, #32]
 801cc8c:	2100      	movs	r1, #0
 801cc8e:	4618      	mov	r0, r3
 801cc90:	f7f2 fd14 	bl	800f6bc <xQueueGiveFromISR>

    } else if (huart == &huart1 || huart == &huart2) {

        xSemaphoreGiveFromISR(stm_test_list_array[0].q, NULL);
    }
}
 801cc94:	e00d      	b.n	801ccb2 <HAL_UART_AbortCpltCallback+0x42>
    } else if (huart == &huart1 || huart == &huart2) {
 801cc96:	687b      	ldr	r3, [r7, #4]
 801cc98:	4a0b      	ldr	r2, [pc, #44]	; (801ccc8 <HAL_UART_AbortCpltCallback+0x58>)
 801cc9a:	4293      	cmp	r3, r2
 801cc9c:	d003      	beq.n	801cca6 <HAL_UART_AbortCpltCallback+0x36>
 801cc9e:	687b      	ldr	r3, [r7, #4]
 801cca0:	4a0a      	ldr	r2, [pc, #40]	; (801cccc <HAL_UART_AbortCpltCallback+0x5c>)
 801cca2:	4293      	cmp	r3, r2
 801cca4:	d105      	bne.n	801ccb2 <HAL_UART_AbortCpltCallback+0x42>
        xSemaphoreGiveFromISR(stm_test_list_array[0].q, NULL);
 801cca6:	4b07      	ldr	r3, [pc, #28]	; (801ccc4 <HAL_UART_AbortCpltCallback+0x54>)
 801cca8:	685b      	ldr	r3, [r3, #4]
 801ccaa:	2100      	movs	r1, #0
 801ccac:	4618      	mov	r0, r3
 801ccae:	f7f2 fd05 	bl	800f6bc <xQueueGiveFromISR>
}
 801ccb2:	bf00      	nop
 801ccb4:	3708      	adds	r7, #8
 801ccb6:	46bd      	mov	sp, r7
 801ccb8:	bd80      	pop	{r7, pc}
 801ccba:	bf00      	nop
 801ccbc:	20000cc4 	.word	0x20000cc4
 801ccc0:	20000d4c 	.word	0x20000d4c
 801ccc4:	200000a0 	.word	0x200000a0
 801ccc8:	20000ee4 	.word	0x20000ee4
 801cccc:	20000f6c 	.word	0x20000f6c

0801ccd0 <ur_main>:

/**
 * \brief           main function start up the software create the tasks and semaphore's
 */
void
ur_main() {
 801ccd0:	b580      	push	{r7, lr}
 801ccd2:	b086      	sub	sp, #24
 801ccd4:	af02      	add	r7, sp, #8

    BaseType_t err;

    /* creating semaphores for each testing task  */
    for (int i = 0; i < test_list_size; i++) {
 801ccd6:	2300      	movs	r3, #0
 801ccd8:	60fb      	str	r3, [r7, #12]
 801ccda:	e01f      	b.n	801cd1c <ur_main+0x4c>

        stm_test_list_array[i].q = xSemaphoreCreateBinary();
 801ccdc:	2203      	movs	r2, #3
 801ccde:	2100      	movs	r1, #0
 801cce0:	2001      	movs	r0, #1
 801cce2:	f7f2 fa97 	bl	800f214 <xQueueGenericCreate>
 801cce6:	4601      	mov	r1, r0
 801cce8:	483e      	ldr	r0, [pc, #248]	; (801cde4 <ur_main+0x114>)
 801ccea:	68fa      	ldr	r2, [r7, #12]
 801ccec:	4613      	mov	r3, r2
 801ccee:	00db      	lsls	r3, r3, #3
 801ccf0:	1a9b      	subs	r3, r3, r2
 801ccf2:	009b      	lsls	r3, r3, #2
 801ccf4:	4403      	add	r3, r0
 801ccf6:	3304      	adds	r3, #4
 801ccf8:	6019      	str	r1, [r3, #0]

        if (stm_test_list_array[i].q == NULL) {
 801ccfa:	493a      	ldr	r1, [pc, #232]	; (801cde4 <ur_main+0x114>)
 801ccfc:	68fa      	ldr	r2, [r7, #12]
 801ccfe:	4613      	mov	r3, r2
 801cd00:	00db      	lsls	r3, r3, #3
 801cd02:	1a9b      	subs	r3, r3, r2
 801cd04:	009b      	lsls	r3, r3, #2
 801cd06:	440b      	add	r3, r1
 801cd08:	3304      	adds	r3, #4
 801cd0a:	681b      	ldr	r3, [r3, #0]
 801cd0c:	2b00      	cmp	r3, #0
 801cd0e:	d102      	bne.n	801cd16 <ur_main+0x46>
             exit(SEMAPHORE_CREATE_FAILED);
 801cd10:	2001      	movs	r0, #1
 801cd12:	f000 fab9 	bl	801d288 <exit>
    for (int i = 0; i < test_list_size; i++) {
 801cd16:	68fb      	ldr	r3, [r7, #12]
 801cd18:	3301      	adds	r3, #1
 801cd1a:	60fb      	str	r3, [r7, #12]
 801cd1c:	4b32      	ldr	r3, [pc, #200]	; (801cde8 <ur_main+0x118>)
 801cd1e:	881b      	ldrh	r3, [r3, #0]
 801cd20:	461a      	mov	r2, r3
 801cd22:	68fb      	ldr	r3, [r7, #12]
 801cd24:	4293      	cmp	r3, r2
 801cd26:	dbd9      	blt.n	801ccdc <ur_main+0xc>
        }
    }

    /* creating semaphore for "app_data_init_task" */
    app_init_sem = xSemaphoreCreateBinary();
 801cd28:	2203      	movs	r2, #3
 801cd2a:	2100      	movs	r1, #0
 801cd2c:	2001      	movs	r0, #1
 801cd2e:	f7f2 fa71 	bl	800f214 <xQueueGenericCreate>
 801cd32:	4603      	mov	r3, r0
 801cd34:	4a2d      	ldr	r2, [pc, #180]	; (801cdec <ur_main+0x11c>)
 801cd36:	6013      	str	r3, [r2, #0]

    if (app_init_sem == NULL)
 801cd38:	4b2c      	ldr	r3, [pc, #176]	; (801cdec <ur_main+0x11c>)
 801cd3a:	681b      	ldr	r3, [r3, #0]
 801cd3c:	2b00      	cmp	r3, #0
 801cd3e:	d102      	bne.n	801cd46 <ur_main+0x76>

    {
        exit(SEMAPHORE_CREATE_FAILED);
 801cd40:	2001      	movs	r0, #1
 801cd42:	f000 faa1 	bl	801d288 <exit>
    }

    /* create "begin_task" */
    err = xTaskCreate((TaskFunction_t)begin_task, "begin_task", BEGIN_TASK_STACK_SIZE, NULL, 0, NULL);
 801cd46:	2300      	movs	r3, #0
 801cd48:	9301      	str	r3, [sp, #4]
 801cd4a:	2300      	movs	r3, #0
 801cd4c:	9300      	str	r3, [sp, #0]
 801cd4e:	2300      	movs	r3, #0
 801cd50:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 801cd54:	4926      	ldr	r1, [pc, #152]	; (801cdf0 <ur_main+0x120>)
 801cd56:	4827      	ldr	r0, [pc, #156]	; (801cdf4 <ur_main+0x124>)
 801cd58:	f7f3 f951 	bl	800fffe <xTaskCreate>
 801cd5c:	6078      	str	r0, [r7, #4]

    if (err != pdPASS) {
 801cd5e:	687b      	ldr	r3, [r7, #4]
 801cd60:	2b01      	cmp	r3, #1
 801cd62:	d002      	beq.n	801cd6a <ur_main+0x9a>
        exit(TASK_CREATE_FAILED);
 801cd64:	2002      	movs	r0, #2
 801cd66:	f000 fa8f 	bl	801d288 <exit>
    }

    /* create "app_data_init_task" */
    err = xTaskCreate((TaskFunction_t)app_data_init_task, "app_data_init_task", APP_INIT_TASK_STACK_SIZE, NULL,
 801cd6a:	2300      	movs	r3, #0
 801cd6c:	9301      	str	r3, [sp, #4]
 801cd6e:	f06f 0302 	mvn.w	r3, #2
 801cd72:	9300      	str	r3, [sp, #0]
 801cd74:	2300      	movs	r3, #0
 801cd76:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 801cd7a:	491f      	ldr	r1, [pc, #124]	; (801cdf8 <ur_main+0x128>)
 801cd7c:	481f      	ldr	r0, [pc, #124]	; (801cdfc <ur_main+0x12c>)
 801cd7e:	f7f3 f93e 	bl	800fffe <xTaskCreate>
 801cd82:	6078      	str	r0, [r7, #4]
                      UNIT_TEST_TASK_PRIORITY, NULL);

    if (err != pdPASS) {
 801cd84:	687b      	ldr	r3, [r7, #4]
 801cd86:	2b01      	cmp	r3, #1
 801cd88:	d002      	beq.n	801cd90 <ur_main+0xc0>

    	exit(TASK_CREATE_FAILED);
 801cd8a:	2002      	movs	r0, #2
 801cd8c:	f000 fa7c 	bl	801d288 <exit>
    }

    /* crate a task's from function "testing_thread". each task, except a member from "stm_test_list_array" */
    for (uint16_t i = 0; i < test_list_size; i++) {
 801cd90:	2300      	movs	r3, #0
 801cd92:	817b      	strh	r3, [r7, #10]
 801cd94:	e01b      	b.n	801cdce <ur_main+0xfe>

        err = xTaskCreate((TaskFunction_t)testing_thread, "test_task", TESTIN_THREAD_STACK_SIZE,
                          &stm_test_list_array[i], UNIT_TEST_TASK_PRIORITY, NULL);
 801cd96:	897a      	ldrh	r2, [r7, #10]
 801cd98:	4613      	mov	r3, r2
 801cd9a:	00db      	lsls	r3, r3, #3
 801cd9c:	1a9b      	subs	r3, r3, r2
 801cd9e:	009b      	lsls	r3, r3, #2
 801cda0:	4a10      	ldr	r2, [pc, #64]	; (801cde4 <ur_main+0x114>)
 801cda2:	4413      	add	r3, r2
        err = xTaskCreate((TaskFunction_t)testing_thread, "test_task", TESTIN_THREAD_STACK_SIZE,
 801cda4:	2200      	movs	r2, #0
 801cda6:	9201      	str	r2, [sp, #4]
 801cda8:	f06f 0202 	mvn.w	r2, #2
 801cdac:	9200      	str	r2, [sp, #0]
 801cdae:	f44f 62a0 	mov.w	r2, #1280	; 0x500
 801cdb2:	4913      	ldr	r1, [pc, #76]	; (801ce00 <ur_main+0x130>)
 801cdb4:	4813      	ldr	r0, [pc, #76]	; (801ce04 <ur_main+0x134>)
 801cdb6:	f7f3 f922 	bl	800fffe <xTaskCreate>
 801cdba:	6078      	str	r0, [r7, #4]
        if (err != pdPASS) {
 801cdbc:	687b      	ldr	r3, [r7, #4]
 801cdbe:	2b01      	cmp	r3, #1
 801cdc0:	d002      	beq.n	801cdc8 <ur_main+0xf8>
        	exit(TASK_CREATE_FAILED);
 801cdc2:	2002      	movs	r0, #2
 801cdc4:	f000 fa60 	bl	801d288 <exit>
    for (uint16_t i = 0; i < test_list_size; i++) {
 801cdc8:	897b      	ldrh	r3, [r7, #10]
 801cdca:	3301      	adds	r3, #1
 801cdcc:	817b      	strh	r3, [r7, #10]
 801cdce:	4b06      	ldr	r3, [pc, #24]	; (801cde8 <ur_main+0x118>)
 801cdd0:	881b      	ldrh	r3, [r3, #0]
 801cdd2:	897a      	ldrh	r2, [r7, #10]
 801cdd4:	429a      	cmp	r2, r3
 801cdd6:	d3de      	bcc.n	801cd96 <ur_main+0xc6>
        }
    }

    /* start freertos */
    vTaskStartScheduler();
 801cdd8:	f7f3 fb28 	bl	801042c <vTaskStartScheduler>
}
 801cddc:	bf00      	nop
 801cdde:	3710      	adds	r7, #16
 801cde0:	46bd      	mov	sp, r7
 801cde2:	bd80      	pop	{r7, pc}
 801cde4:	200000a0 	.word	0x200000a0
 801cde8:	080217c4 	.word	0x080217c4
 801cdec:	200241b0 	.word	0x200241b0
 801cdf0:	08020f14 	.word	0x08020f14
 801cdf4:	0801d0ed 	.word	0x0801d0ed
 801cdf8:	08020f20 	.word	0x08020f20
 801cdfc:	0801d105 	.word	0x0801d105
 801ce00:	08020f34 	.word	0x08020f34
 801ce04:	0801d201 	.word	0x0801d201

0801ce08 <udp_receive_callback>:
 * \param[in]       p: received pocket.
 * \param[in]       addr: sender ip address.
 * \param[in]       addr: sender port number.
 */
void
udp_receive_callback(void* arg, struct udp_pcb* upcb, struct pbuf* p, const ip_addr_t* addr, u16_t port) {
 801ce08:	b580      	push	{r7, lr}
 801ce0a:	b086      	sub	sp, #24
 801ce0c:	af00      	add	r7, sp, #0
 801ce0e:	60f8      	str	r0, [r7, #12]
 801ce10:	60b9      	str	r1, [r7, #8]
 801ce12:	607a      	str	r2, [r7, #4]
 801ce14:	603b      	str	r3, [r7, #0]

    unit_tasting_package_t* payload_cast; /* for casting the payload to "unit_tasting_package_t" */
    uint16_t tast_type;                   /* destination port  */

    /* check if pocket is sent to "app_data_init_task"  and if so directing the payload to task */
    if (upcb->local_port == APP_INIT_PORT) {
 801ce16:	68bb      	ldr	r3, [r7, #8]
 801ce18:	8a5b      	ldrh	r3, [r3, #18]
 801ce1a:	f24c 3256 	movw	r2, #50006	; 0xc356
 801ce1e:	4293      	cmp	r3, r2
 801ce20:	d119      	bne.n	801ce56 <udp_receive_callback+0x4e>

        /* copy the sender payload in data structors belonging to the receiving task */
        memcpy(&app_commend, p->payload, p->len);
 801ce22:	687b      	ldr	r3, [r7, #4]
 801ce24:	6859      	ldr	r1, [r3, #4]
 801ce26:	687b      	ldr	r3, [r7, #4]
 801ce28:	895b      	ldrh	r3, [r3, #10]
 801ce2a:	461a      	mov	r2, r3
 801ce2c:	483e      	ldr	r0, [pc, #248]	; (801cf28 <udp_receive_callback+0x120>)
 801ce2e:	f000 fc6e 	bl	801d70e <memcpy>

        /* drop the pocket after is copied   */
        pbuf_free(p);
 801ce32:	6878      	ldr	r0, [r7, #4]
 801ce34:	f7f6 fb48 	bl	80134c8 <pbuf_free>

        /* Store the sender information in data structors belonging to the receiving task */
        app_sender_port = port;
 801ce38:	4a3c      	ldr	r2, [pc, #240]	; (801cf2c <udp_receive_callback+0x124>)
 801ce3a:	8c3b      	ldrh	r3, [r7, #32]
 801ce3c:	8013      	strh	r3, [r2, #0]
        ip_addr_copy(app_sender_ip, *addr);
 801ce3e:	683b      	ldr	r3, [r7, #0]
 801ce40:	681b      	ldr	r3, [r3, #0]
 801ce42:	4a3b      	ldr	r2, [pc, #236]	; (801cf30 <udp_receive_callback+0x128>)
 801ce44:	6013      	str	r3, [r2, #0]

        /* start the task */
        xSemaphoreGive(app_init_sem);
 801ce46:	4b3b      	ldr	r3, [pc, #236]	; (801cf34 <udp_receive_callback+0x12c>)
 801ce48:	6818      	ldr	r0, [r3, #0]
 801ce4a:	2300      	movs	r3, #0
 801ce4c:	2200      	movs	r2, #0
 801ce4e:	2100      	movs	r1, #0
 801ce50:	f7f2 fa8e 	bl	800f370 <xQueueGenericSend>
        return;
 801ce54:	e064      	b.n	801cf20 <udp_receive_callback+0x118>
    } else {

        payload_cast = p->payload; /* cast the payload to  unit_tasting_package_t pointer */
 801ce56:	687b      	ldr	r3, [r7, #4]
 801ce58:	685b      	ldr	r3, [r3, #4]
 801ce5a:	617b      	str	r3, [r7, #20]
        tast_type = upcb->local_port
 801ce5c:	68bb      	ldr	r3, [r7, #8]
 801ce5e:	8a5a      	ldrh	r2, [r3, #18]
 801ce60:	f643 43a9 	movw	r3, #15529	; 0x3ca9
 801ce64:	4413      	add	r3, r2
 801ce66:	827b      	strh	r3, [r7, #18]
                    - SERVER_OFFSET_PORT; /* compute and store the task receiving the pocket by the dentation port */

        /* check if the id sent matches the card id */
        if (memcmp(payload_cast->id, this_card_name_and_id.id, ID_SIZE * sizeof(uint32_t)) != 0) {
 801ce68:	697b      	ldr	r3, [r7, #20]
 801ce6a:	220c      	movs	r2, #12
 801ce6c:	4932      	ldr	r1, [pc, #200]	; (801cf38 <udp_receive_callback+0x130>)
 801ce6e:	4618      	mov	r0, r3
 801ce70:	f000 fb71 	bl	801d556 <memcmp>
 801ce74:	4603      	mov	r3, r0
 801ce76:	2b00      	cmp	r3, #0
 801ce78:	d003      	beq.n	801ce82 <udp_receive_callback+0x7a>

            pbuf_free(p);
 801ce7a:	6878      	ldr	r0, [r7, #4]
 801ce7c:	f7f6 fb24 	bl	80134c8 <pbuf_free>
            return;
 801ce80:	e04e      	b.n	801cf20 <udp_receive_callback+0x118>
        }

        /* Check if we finished with the last packet */
        if (p->len > sizeof(unit_tasting_package_t) || stm_test_list_array[tast_type].test_complete_flag == TEST_RUNNING
 801ce82:	687b      	ldr	r3, [r7, #4]
 801ce84:	895b      	ldrh	r3, [r3, #10]
 801ce86:	2b72      	cmp	r3, #114	; 0x72
 801ce88:	d80f      	bhi.n	801ceaa <udp_receive_callback+0xa2>
 801ce8a:	8a7a      	ldrh	r2, [r7, #18]
 801ce8c:	492b      	ldr	r1, [pc, #172]	; (801cf3c <udp_receive_callback+0x134>)
 801ce8e:	4613      	mov	r3, r2
 801ce90:	00db      	lsls	r3, r3, #3
 801ce92:	1a9b      	subs	r3, r3, r2
 801ce94:	009b      	lsls	r3, r3, #2
 801ce96:	440b      	add	r3, r1
 801ce98:	3314      	adds	r3, #20
 801ce9a:	781b      	ldrb	r3, [r3, #0]
 801ce9c:	2b01      	cmp	r3, #1
 801ce9e:	d004      	beq.n	801ceaa <udp_receive_callback+0xa2>
            || tast_type >= test_list_size) {
 801cea0:	4b27      	ldr	r3, [pc, #156]	; (801cf40 <udp_receive_callback+0x138>)
 801cea2:	881b      	ldrh	r3, [r3, #0]
 801cea4:	8a7a      	ldrh	r2, [r7, #18]
 801cea6:	429a      	cmp	r2, r3
 801cea8:	d303      	bcc.n	801ceb2 <udp_receive_callback+0xaa>
            /* Drop the packet */
            pbuf_free(p);
 801ceaa:	6878      	ldr	r0, [r7, #4]
 801ceac:	f7f6 fb0c 	bl	80134c8 <pbuf_free>
            return;
 801ceb0:	e036      	b.n	801cf20 <udp_receive_callback+0x118>
        }

        /* Store the sender information in data structors belonging to the receiving task */
        ip_addr_copy(stm_test_list_array[tast_type].taskX_pack.dst_ip_addr, *addr);
 801ceb2:	8a7a      	ldrh	r2, [r7, #18]
 801ceb4:	683b      	ldr	r3, [r7, #0]
 801ceb6:	6819      	ldr	r1, [r3, #0]
 801ceb8:	4820      	ldr	r0, [pc, #128]	; (801cf3c <udp_receive_callback+0x134>)
 801ceba:	4613      	mov	r3, r2
 801cebc:	00db      	lsls	r3, r3, #3
 801cebe:	1a9b      	subs	r3, r3, r2
 801cec0:	009b      	lsls	r3, r3, #2
 801cec2:	4403      	add	r3, r0
 801cec4:	3308      	adds	r3, #8
 801cec6:	6019      	str	r1, [r3, #0]
        stm_test_list_array[tast_type].taskX_pack.dst_port = port;
 801cec8:	8a7a      	ldrh	r2, [r7, #18]
 801ceca:	491c      	ldr	r1, [pc, #112]	; (801cf3c <udp_receive_callback+0x134>)
 801cecc:	4613      	mov	r3, r2
 801cece:	00db      	lsls	r3, r3, #3
 801ced0:	1a9b      	subs	r3, r3, r2
 801ced2:	009b      	lsls	r3, r3, #2
 801ced4:	440b      	add	r3, r1
 801ced6:	330c      	adds	r3, #12
 801ced8:	8c3a      	ldrh	r2, [r7, #32]
 801ceda:	801a      	strh	r2, [r3, #0]
        stm_test_list_array[tast_type].taskX_pack.p = p;
 801cedc:	8a7a      	ldrh	r2, [r7, #18]
 801cede:	4917      	ldr	r1, [pc, #92]	; (801cf3c <udp_receive_callback+0x134>)
 801cee0:	4613      	mov	r3, r2
 801cee2:	00db      	lsls	r3, r3, #3
 801cee4:	1a9b      	subs	r3, r3, r2
 801cee6:	009b      	lsls	r3, r3, #2
 801cee8:	440b      	add	r3, r1
 801ceea:	3310      	adds	r3, #16
 801ceec:	687a      	ldr	r2, [r7, #4]
 801ceee:	601a      	str	r2, [r3, #0]

        /* set the tasks test_complete_flag to test running */
        stm_test_list_array[tast_type].test_complete_flag = TEST_RUNNING;
 801cef0:	8a7a      	ldrh	r2, [r7, #18]
 801cef2:	4912      	ldr	r1, [pc, #72]	; (801cf3c <udp_receive_callback+0x134>)
 801cef4:	4613      	mov	r3, r2
 801cef6:	00db      	lsls	r3, r3, #3
 801cef8:	1a9b      	subs	r3, r3, r2
 801cefa:	009b      	lsls	r3, r3, #2
 801cefc:	440b      	add	r3, r1
 801cefe:	3314      	adds	r3, #20
 801cf00:	2201      	movs	r2, #1
 801cf02:	701a      	strb	r2, [r3, #0]

        /* start the task */
        xSemaphoreGive(stm_test_list_array[tast_type].q);
 801cf04:	8a7a      	ldrh	r2, [r7, #18]
 801cf06:	490d      	ldr	r1, [pc, #52]	; (801cf3c <udp_receive_callback+0x134>)
 801cf08:	4613      	mov	r3, r2
 801cf0a:	00db      	lsls	r3, r3, #3
 801cf0c:	1a9b      	subs	r3, r3, r2
 801cf0e:	009b      	lsls	r3, r3, #2
 801cf10:	440b      	add	r3, r1
 801cf12:	3304      	adds	r3, #4
 801cf14:	6818      	ldr	r0, [r3, #0]
 801cf16:	2300      	movs	r3, #0
 801cf18:	2200      	movs	r2, #0
 801cf1a:	2100      	movs	r1, #0
 801cf1c:	f7f2 fa28 	bl	800f370 <xQueueGenericSend>
    }
}
 801cf20:	3718      	adds	r7, #24
 801cf22:	46bd      	mov	sp, r7
 801cf24:	bd80      	pop	{r7, pc}
 801cf26:	bf00      	nop
 801cf28:	200241b8 	.word	0x200241b8
 801cf2c:	200241c8 	.word	0x200241c8
 801cf30:	200241cc 	.word	0x200241cc
 801cf34:	200241b0 	.word	0x200241b0
 801cf38:	20000030 	.word	0x20000030
 801cf3c:	200000a0 	.word	0x200000a0
 801cf40:	080217c4 	.word	0x080217c4

0801cf44 <send_packet>:
 * \param[in]       ipaddr: ip address to send to
 * \param[in]       port: port number to send to
 * \return          error massage
 */
err_t
send_packet(struct udp_pcb* pcb, const void* payload, u16_t payload_len, const ip_addr_t* ipaddr, u16_t port) {
 801cf44:	b580      	push	{r7, lr}
 801cf46:	b086      	sub	sp, #24
 801cf48:	af00      	add	r7, sp, #0
 801cf4a:	60f8      	str	r0, [r7, #12]
 801cf4c:	60b9      	str	r1, [r7, #8]
 801cf4e:	603b      	str	r3, [r7, #0]
 801cf50:	4613      	mov	r3, r2
 801cf52:	80fb      	strh	r3, [r7, #6]
    err_t err; /* except function error return */
    struct pbuf* p;

    /* allocate a pbuf for the payload */
    p = pbuf_alloc(PBUF_TRANSPORT, payload_len, PBUF_RAM);
 801cf54:	88fb      	ldrh	r3, [r7, #6]
 801cf56:	f44f 7220 	mov.w	r2, #640	; 0x280
 801cf5a:	4619      	mov	r1, r3
 801cf5c:	2036      	movs	r0, #54	; 0x36
 801cf5e:	f7f5 ffcf 	bl	8012f00 <pbuf_alloc>
 801cf62:	6178      	str	r0, [r7, #20]
    if (!p) {
 801cf64:	697b      	ldr	r3, [r7, #20]
 801cf66:	2b00      	cmp	r3, #0
 801cf68:	d102      	bne.n	801cf70 <send_packet+0x2c>
        /* failed to allocate pbuf*/
        return ERR_MEM;
 801cf6a:	f04f 33ff 	mov.w	r3, #4294967295
 801cf6e:	e013      	b.n	801cf98 <send_packet+0x54>
    }

    /* copy the payload into the pbuf */
    memcpy(p->payload, payload, payload_len);
 801cf70:	697b      	ldr	r3, [r7, #20]
 801cf72:	685b      	ldr	r3, [r3, #4]
 801cf74:	88fa      	ldrh	r2, [r7, #6]
 801cf76:	68b9      	ldr	r1, [r7, #8]
 801cf78:	4618      	mov	r0, r3
 801cf7a:	f000 fbc8 	bl	801d70e <memcpy>

    /* send the packet */
    err = udp_sendto(pcb, p, ipaddr, port);
 801cf7e:	8c3b      	ldrh	r3, [r7, #32]
 801cf80:	683a      	ldr	r2, [r7, #0]
 801cf82:	6979      	ldr	r1, [r7, #20]
 801cf84:	68f8      	ldr	r0, [r7, #12]
 801cf86:	f7fc f9e1 	bl	801934c <udp_sendto>
 801cf8a:	4603      	mov	r3, r0
 801cf8c:	74fb      	strb	r3, [r7, #19]

    /* free the pbuf */
    pbuf_free(p);
 801cf8e:	6978      	ldr	r0, [r7, #20]
 801cf90:	f7f6 fa9a 	bl	80134c8 <pbuf_free>

    return err;
 801cf94:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 801cf98:	4618      	mov	r0, r3
 801cf9a:	3718      	adds	r7, #24
 801cf9c:	46bd      	mov	sp, r7
 801cf9e:	bd80      	pop	{r7, pc}

0801cfa0 <udpServer_init>:

/**
 * \brief           creating sockets initialising  card uniq id and task's ruining flags
 */
void
udpServer_init(void) {
 801cfa0:	b590      	push	{r4, r7, lr}
 801cfa2:	b083      	sub	sp, #12
 801cfa4:	af00      	add	r7, sp, #0

    err_t err; /* except function error return */
    /* crating sockets for testing tasks  */
    for (uint8_t i = 0; i < test_list_size; i++) {
 801cfa6:	2300      	movs	r3, #0
 801cfa8:	71fb      	strb	r3, [r7, #7]
 801cfaa:	e041      	b.n	801d030 <udpServer_init+0x90>

        /* creating udp_pcb */
        stm_test_list_array[i].pcb_and_port_for_test = udp_new();
 801cfac:	79fc      	ldrb	r4, [r7, #7]
 801cfae:	f7fc fc6d 	bl	801988c <udp_new>
 801cfb2:	4602      	mov	r2, r0
 801cfb4:	4946      	ldr	r1, [pc, #280]	; (801d0d0 <udpServer_init+0x130>)
 801cfb6:	4623      	mov	r3, r4
 801cfb8:	00db      	lsls	r3, r3, #3
 801cfba:	1b1b      	subs	r3, r3, r4
 801cfbc:	009b      	lsls	r3, r3, #2
 801cfbe:	440b      	add	r3, r1
 801cfc0:	3318      	adds	r3, #24
 801cfc2:	601a      	str	r2, [r3, #0]
        /* configuring the udp_pcb,  port number is task array index + SERVER_OFFSET_PORT */
        err = udp_bind(stm_test_list_array[i].pcb_and_port_for_test, IP_ADDR_ANY, SERVER_OFFSET_PORT + i);
 801cfc4:	79fa      	ldrb	r2, [r7, #7]
 801cfc6:	4942      	ldr	r1, [pc, #264]	; (801d0d0 <udpServer_init+0x130>)
 801cfc8:	4613      	mov	r3, r2
 801cfca:	00db      	lsls	r3, r3, #3
 801cfcc:	1a9b      	subs	r3, r3, r2
 801cfce:	009b      	lsls	r3, r3, #2
 801cfd0:	440b      	add	r3, r1
 801cfd2:	3318      	adds	r3, #24
 801cfd4:	6818      	ldr	r0, [r3, #0]
 801cfd6:	79fb      	ldrb	r3, [r7, #7]
 801cfd8:	b29a      	uxth	r2, r3
 801cfda:	4b3e      	ldr	r3, [pc, #248]	; (801d0d4 <udpServer_init+0x134>)
 801cfdc:	4413      	add	r3, r2
 801cfde:	b29b      	uxth	r3, r3
 801cfe0:	461a      	mov	r2, r3
 801cfe2:	493d      	ldr	r1, [pc, #244]	; (801d0d8 <udpServer_init+0x138>)
 801cfe4:	f7fc fb68 	bl	80196b8 <udp_bind>
 801cfe8:	4603      	mov	r3, r0
 801cfea:	717b      	strb	r3, [r7, #5]

        /* configuring the udp_pcb  receive callback function to udp_receive_callback   */
        if (err == ERR_OK) {
 801cfec:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801cff0:	2b00      	cmp	r3, #0
 801cff2:	d10e      	bne.n	801d012 <udpServer_init+0x72>
            udp_recv(stm_test_list_array[i].pcb_and_port_for_test, udp_receive_callback, NULL);
 801cff4:	79fa      	ldrb	r2, [r7, #7]
 801cff6:	4936      	ldr	r1, [pc, #216]	; (801d0d0 <udpServer_init+0x130>)
 801cff8:	4613      	mov	r3, r2
 801cffa:	00db      	lsls	r3, r3, #3
 801cffc:	1a9b      	subs	r3, r3, r2
 801cffe:	009b      	lsls	r3, r3, #2
 801d000:	440b      	add	r3, r1
 801d002:	3318      	adds	r3, #24
 801d004:	681b      	ldr	r3, [r3, #0]
 801d006:	2200      	movs	r2, #0
 801d008:	4934      	ldr	r1, [pc, #208]	; (801d0dc <udpServer_init+0x13c>)
 801d00a:	4618      	mov	r0, r3
 801d00c:	f7fc fbdc 	bl	80197c8 <udp_recv>
 801d010:	e00b      	b.n	801d02a <udpServer_init+0x8a>
        } else {
            udp_remove(stm_test_list_array[i].pcb_and_port_for_test);
 801d012:	79fa      	ldrb	r2, [r7, #7]
 801d014:	492e      	ldr	r1, [pc, #184]	; (801d0d0 <udpServer_init+0x130>)
 801d016:	4613      	mov	r3, r2
 801d018:	00db      	lsls	r3, r3, #3
 801d01a:	1a9b      	subs	r3, r3, r2
 801d01c:	009b      	lsls	r3, r3, #2
 801d01e:	440b      	add	r3, r1
 801d020:	3318      	adds	r3, #24
 801d022:	681b      	ldr	r3, [r3, #0]
 801d024:	4618      	mov	r0, r3
 801d026:	f7fc fbef 	bl	8019808 <udp_remove>
    for (uint8_t i = 0; i < test_list_size; i++) {
 801d02a:	79fb      	ldrb	r3, [r7, #7]
 801d02c:	3301      	adds	r3, #1
 801d02e:	71fb      	strb	r3, [r7, #7]
 801d030:	79fb      	ldrb	r3, [r7, #7]
 801d032:	b29a      	uxth	r2, r3
 801d034:	4b2a      	ldr	r3, [pc, #168]	; (801d0e0 <udpServer_init+0x140>)
 801d036:	881b      	ldrh	r3, [r3, #0]
 801d038:	429a      	cmp	r2, r3
 801d03a:	d3b7      	bcc.n	801cfac <udpServer_init+0xc>
        }
    }

    /* crating a udp_pcb for the app_data_init_task  */
    app_port = udp_new();
 801d03c:	f7fc fc26 	bl	801988c <udp_new>
 801d040:	4603      	mov	r3, r0
 801d042:	4a28      	ldr	r2, [pc, #160]	; (801d0e4 <udpServer_init+0x144>)
 801d044:	6013      	str	r3, [r2, #0]

    err = udp_bind(app_port, IP_ADDR_ANY, APP_INIT_PORT);
 801d046:	4b27      	ldr	r3, [pc, #156]	; (801d0e4 <udpServer_init+0x144>)
 801d048:	681b      	ldr	r3, [r3, #0]
 801d04a:	f24c 3256 	movw	r2, #50006	; 0xc356
 801d04e:	4922      	ldr	r1, [pc, #136]	; (801d0d8 <udpServer_init+0x138>)
 801d050:	4618      	mov	r0, r3
 801d052:	f7fc fb31 	bl	80196b8 <udp_bind>
 801d056:	4603      	mov	r3, r0
 801d058:	717b      	strb	r3, [r7, #5]

    /* configuring the udp_pcb  receive callback function to udp_receive_callback   */
    if (err == ERR_OK) {
 801d05a:	f997 3005 	ldrsb.w	r3, [r7, #5]
 801d05e:	2b00      	cmp	r3, #0
 801d060:	d107      	bne.n	801d072 <udpServer_init+0xd2>
        udp_recv(app_port, udp_receive_callback, NULL);
 801d062:	4b20      	ldr	r3, [pc, #128]	; (801d0e4 <udpServer_init+0x144>)
 801d064:	681b      	ldr	r3, [r3, #0]
 801d066:	2200      	movs	r2, #0
 801d068:	491c      	ldr	r1, [pc, #112]	; (801d0dc <udpServer_init+0x13c>)
 801d06a:	4618      	mov	r0, r3
 801d06c:	f7fc fbac 	bl	80197c8 <udp_recv>
 801d070:	e004      	b.n	801d07c <udpServer_init+0xdc>
    } else {
        udp_remove(app_port);
 801d072:	4b1c      	ldr	r3, [pc, #112]	; (801d0e4 <udpServer_init+0x144>)
 801d074:	681b      	ldr	r3, [r3, #0]
 801d076:	4618      	mov	r0, r3
 801d078:	f7fc fbc6 	bl	8019808 <udp_remove>
    }

    /* setting test_complete_flag to TAST_COMLITE  */
    for (uint8_t i = 0; i < test_list_size; i++) {
 801d07c:	2300      	movs	r3, #0
 801d07e:	71bb      	strb	r3, [r7, #6]
 801d080:	e00c      	b.n	801d09c <udpServer_init+0xfc>

        stm_test_list_array[i].test_complete_flag = TEST_COMPLETE;
 801d082:	79ba      	ldrb	r2, [r7, #6]
 801d084:	4912      	ldr	r1, [pc, #72]	; (801d0d0 <udpServer_init+0x130>)
 801d086:	4613      	mov	r3, r2
 801d088:	00db      	lsls	r3, r3, #3
 801d08a:	1a9b      	subs	r3, r3, r2
 801d08c:	009b      	lsls	r3, r3, #2
 801d08e:	440b      	add	r3, r1
 801d090:	3314      	adds	r3, #20
 801d092:	2200      	movs	r2, #0
 801d094:	701a      	strb	r2, [r3, #0]
    for (uint8_t i = 0; i < test_list_size; i++) {
 801d096:	79bb      	ldrb	r3, [r7, #6]
 801d098:	3301      	adds	r3, #1
 801d09a:	71bb      	strb	r3, [r7, #6]
 801d09c:	79bb      	ldrb	r3, [r7, #6]
 801d09e:	b29a      	uxth	r2, r3
 801d0a0:	4b0f      	ldr	r3, [pc, #60]	; (801d0e0 <udpServer_init+0x140>)
 801d0a2:	881b      	ldrh	r3, [r3, #0]
 801d0a4:	429a      	cmp	r2, r3
 801d0a6:	d3ec      	bcc.n	801d082 <udpServer_init+0xe2>
    }

    /* get card uniq id */
    this_card_name_and_id.id[0] = HAL_GetUIDw0();
 801d0a8:	f7e6 f8b4 	bl	8003214 <HAL_GetUIDw0>
 801d0ac:	4603      	mov	r3, r0
 801d0ae:	4a0e      	ldr	r2, [pc, #56]	; (801d0e8 <udpServer_init+0x148>)
 801d0b0:	6013      	str	r3, [r2, #0]
    this_card_name_and_id.id[1] = HAL_GetUIDw1();
 801d0b2:	f7e6 f8bb 	bl	800322c <HAL_GetUIDw1>
 801d0b6:	4603      	mov	r3, r0
 801d0b8:	4a0b      	ldr	r2, [pc, #44]	; (801d0e8 <udpServer_init+0x148>)
 801d0ba:	6053      	str	r3, [r2, #4]
    this_card_name_and_id.id[2] = HAL_GetUIDw2();
 801d0bc:	f7e6 f8c2 	bl	8003244 <HAL_GetUIDw2>
 801d0c0:	4603      	mov	r3, r0
 801d0c2:	4a09      	ldr	r2, [pc, #36]	; (801d0e8 <udpServer_init+0x148>)
 801d0c4:	6093      	str	r3, [r2, #8]
}
 801d0c6:	bf00      	nop
 801d0c8:	370c      	adds	r7, #12
 801d0ca:	46bd      	mov	sp, r7
 801d0cc:	bd90      	pop	{r4, r7, pc}
 801d0ce:	bf00      	nop
 801d0d0:	200000a0 	.word	0x200000a0
 801d0d4:	ffffc357 	.word	0xffffc357
 801d0d8:	0802107c 	.word	0x0802107c
 801d0dc:	0801ce09 	.word	0x0801ce09
 801d0e0:	080217c4 	.word	0x080217c4
 801d0e4:	200241b4 	.word	0x200241b4
 801d0e8:	20000030 	.word	0x20000030

0801d0ec <begin_task>:
 * \brief           task executed at program startup.
 *                  initialising the server.
 * \param[in]       arg: NULL
 */
void
begin_task(void const* arg) {
 801d0ec:	b580      	push	{r7, lr}
 801d0ee:	b082      	sub	sp, #8
 801d0f0:	af00      	add	r7, sp, #0
 801d0f2:	6078      	str	r0, [r7, #4]

    MX_LWIP_Init();
 801d0f4:	f7f0 fd7e 	bl	800dbf4 <MX_LWIP_Init>
    udpServer_init();
 801d0f8:	f7ff ff52 	bl	801cfa0 <udpServer_init>

    for (;;) {

        osDelay(1);
 801d0fc:	2001      	movs	r0, #1
 801d0fe:	f7f1 fca6 	bl	800ea4e <osDelay>
 801d102:	e7fb      	b.n	801d0fc <begin_task+0x10>

0801d104 <app_data_init_task>:
 *                  excepting form linux pc  request of card and test's information and send the information
 *                  to linux pc app
 * \param[in]       arg: NULL
 */
void
app_data_init_task(void* arg) {
 801d104:	b580      	push	{r7, lr}
 801d106:	b086      	sub	sp, #24
 801d108:	af02      	add	r7, sp, #8
 801d10a:	6078      	str	r0, [r7, #4]
    err_t check; /* error return check */

    for (;;) {

        /* semaphore will be released and received pocket will be directed from  udp_receive_callback when a pocket is sent to the udp_pcb port belonging to this task*/
        if (xSemaphoreTake(app_init_sem, portMAX_DELAY) == pdFALSE) {
 801d10c:	4b34      	ldr	r3, [pc, #208]	; (801d1e0 <app_data_init_task+0xdc>)
 801d10e:	681b      	ldr	r3, [r3, #0]
 801d110:	f04f 31ff 	mov.w	r1, #4294967295
 801d114:	4618      	mov	r0, r3
 801d116:	f7f2 fc4d 	bl	800f9b4 <xQueueSemaphoreTake>
 801d11a:	4603      	mov	r3, r0
 801d11c:	2b00      	cmp	r3, #0
 801d11e:	d054      	beq.n	801d1ca <app_data_init_task+0xc6>
            continue;
        }

        /* if the sender asking for card name and uniq id */
        if (app_commend.type == ID_REQUEST) {
 801d120:	4b30      	ldr	r3, [pc, #192]	; (801d1e4 <app_data_init_task+0xe0>)
 801d122:	7b1b      	ldrb	r3, [r3, #12]
 801d124:	2b00      	cmp	r3, #0
 801d126:	d112      	bne.n	801d14e <app_data_init_task+0x4a>

            check = send_packet(app_port, &this_card_name_and_id, sizeof(this_card_name_and_id), &app_sender_ip,
 801d128:	4b2f      	ldr	r3, [pc, #188]	; (801d1e8 <app_data_init_task+0xe4>)
 801d12a:	6818      	ldr	r0, [r3, #0]
 801d12c:	4b2f      	ldr	r3, [pc, #188]	; (801d1ec <app_data_init_task+0xe8>)
 801d12e:	881b      	ldrh	r3, [r3, #0]
 801d130:	9300      	str	r3, [sp, #0]
 801d132:	4b2f      	ldr	r3, [pc, #188]	; (801d1f0 <app_data_init_task+0xec>)
 801d134:	2270      	movs	r2, #112	; 0x70
 801d136:	492f      	ldr	r1, [pc, #188]	; (801d1f4 <app_data_init_task+0xf0>)
 801d138:	f7ff ff04 	bl	801cf44 <send_packet>
 801d13c:	4603      	mov	r3, r0
 801d13e:	73fb      	strb	r3, [r7, #15]
                                app_sender_port);

            if (check != ERR_OK) {
 801d140:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d144:	2b00      	cmp	r3, #0
 801d146:	d042      	beq.n	801d1ce <app_data_init_task+0xca>

            	exit(UDP_SEND_FAILED);
 801d148:	2003      	movs	r0, #3
 801d14a:	f000 f89d 	bl	801d288 <exit>
            }

            continue;
        }
        /* check if the id sent matches the card id */
        if (memcmp(app_commend.id, this_card_name_and_id.id, ID_SIZE * sizeof(uint32_t)) != 0) {
 801d14e:	220c      	movs	r2, #12
 801d150:	4928      	ldr	r1, [pc, #160]	; (801d1f4 <app_data_init_task+0xf0>)
 801d152:	4824      	ldr	r0, [pc, #144]	; (801d1e4 <app_data_init_task+0xe0>)
 801d154:	f000 f9ff 	bl	801d556 <memcmp>
 801d158:	4603      	mov	r3, r0
 801d15a:	2b00      	cmp	r3, #0
 801d15c:	d139      	bne.n	801d1d2 <app_data_init_task+0xce>

            continue;
        }

        /* check witch request was sent and execute it */
        switch (app_commend.type) {
 801d15e:	4b21      	ldr	r3, [pc, #132]	; (801d1e4 <app_data_init_task+0xe0>)
 801d160:	7b1b      	ldrb	r3, [r3, #12]
 801d162:	2b01      	cmp	r3, #1
 801d164:	d002      	beq.n	801d16c <app_data_init_task+0x68>
 801d166:	2b02      	cmp	r3, #2
 801d168:	d013      	beq.n	801d192 <app_data_init_task+0x8e>
 801d16a:	e037      	b.n	801d1dc <app_data_init_task+0xd8>

                /* if requesting for number of tests */
            case LIST_SIZE_REQUEST:

                /* send number of tests */
                check = send_packet(app_port, &pc_test_list_size, sizeof(pc_test_list_size), &app_sender_ip,
 801d16c:	4b1e      	ldr	r3, [pc, #120]	; (801d1e8 <app_data_init_task+0xe4>)
 801d16e:	6818      	ldr	r0, [r3, #0]
 801d170:	4b1e      	ldr	r3, [pc, #120]	; (801d1ec <app_data_init_task+0xe8>)
 801d172:	881b      	ldrh	r3, [r3, #0]
 801d174:	9300      	str	r3, [sp, #0]
 801d176:	4b1e      	ldr	r3, [pc, #120]	; (801d1f0 <app_data_init_task+0xec>)
 801d178:	2202      	movs	r2, #2
 801d17a:	491f      	ldr	r1, [pc, #124]	; (801d1f8 <app_data_init_task+0xf4>)
 801d17c:	f7ff fee2 	bl	801cf44 <send_packet>
 801d180:	4603      	mov	r3, r0
 801d182:	73fb      	strb	r3, [r7, #15]
                                    app_sender_port);

                if (check != ERR_OK) {
 801d184:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d188:	2b00      	cmp	r3, #0
 801d18a:	d024      	beq.n	801d1d6 <app_data_init_task+0xd2>

                	exit(UDP_SEND_FAILED);
 801d18c:	2003      	movs	r0, #3
 801d18e:	f000 f87b 	bl	801d288 <exit>

                /* if requesting for test list member */
            case LIST_MEMBER_REQUEST:

                /* send test list member */
                check = send_packet(app_port, &pc_test_list_array[app_commend.list_index],
 801d192:	4b15      	ldr	r3, [pc, #84]	; (801d1e8 <app_data_init_task+0xe4>)
 801d194:	6818      	ldr	r0, [r3, #0]
 801d196:	4b13      	ldr	r3, [pc, #76]	; (801d1e4 <app_data_init_task+0xe0>)
 801d198:	f8b3 300d 	ldrh.w	r3, [r3, #13]
 801d19c:	b29b      	uxth	r3, r3
 801d19e:	461a      	mov	r2, r3
 801d1a0:	2366      	movs	r3, #102	; 0x66
 801d1a2:	fb02 f303 	mul.w	r3, r2, r3
 801d1a6:	4a15      	ldr	r2, [pc, #84]	; (801d1fc <app_data_init_task+0xf8>)
 801d1a8:	1899      	adds	r1, r3, r2
 801d1aa:	4b10      	ldr	r3, [pc, #64]	; (801d1ec <app_data_init_task+0xe8>)
 801d1ac:	881b      	ldrh	r3, [r3, #0]
 801d1ae:	9300      	str	r3, [sp, #0]
 801d1b0:	4b0f      	ldr	r3, [pc, #60]	; (801d1f0 <app_data_init_task+0xec>)
 801d1b2:	2266      	movs	r2, #102	; 0x66
 801d1b4:	f7ff fec6 	bl	801cf44 <send_packet>
 801d1b8:	4603      	mov	r3, r0
 801d1ba:	73fb      	strb	r3, [r7, #15]
                                    sizeof(linux_app_test_setting_t), &app_sender_ip, app_sender_port);

                if (check != ERR_OK) {
 801d1bc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 801d1c0:	2b00      	cmp	r3, #0
 801d1c2:	d00a      	beq.n	801d1da <app_data_init_task+0xd6>

                	exit(UDP_SEND_FAILED);
 801d1c4:	2003      	movs	r0, #3
 801d1c6:	f000 f85f 	bl	801d288 <exit>
            continue;
 801d1ca:	bf00      	nop
 801d1cc:	e79e      	b.n	801d10c <app_data_init_task+0x8>
            continue;
 801d1ce:	bf00      	nop
 801d1d0:	e79c      	b.n	801d10c <app_data_init_task+0x8>
            continue;
 801d1d2:	bf00      	nop
 801d1d4:	e79a      	b.n	801d10c <app_data_init_task+0x8>
                break;
 801d1d6:	bf00      	nop
 801d1d8:	e798      	b.n	801d10c <app_data_init_task+0x8>
                }
                break;
 801d1da:	bf00      	nop
        if (xSemaphoreTake(app_init_sem, portMAX_DELAY) == pdFALSE) {
 801d1dc:	e796      	b.n	801d10c <app_data_init_task+0x8>
 801d1de:	bf00      	nop
 801d1e0:	200241b0 	.word	0x200241b0
 801d1e4:	200241b8 	.word	0x200241b8
 801d1e8:	200241b4 	.word	0x200241b4
 801d1ec:	200241c8 	.word	0x200241c8
 801d1f0:	200241cc 	.word	0x200241cc
 801d1f4:	20000030 	.word	0x20000030
 801d1f8:	080217c6 	.word	0x080217c6
 801d1fc:	08021098 	.word	0x08021098

0801d200 <testing_thread>:
 * \param[in]       arg: for each task starting the function, this function except test_func_t instants created by the developer,
 *                  in "stm_test_list_array".
 *                  also containing test function written  by the developer of hardware specific test, code
 */
void
testing_thread(void const* arg) {
 801d200:	b590      	push	{r4, r7, lr}
 801d202:	b089      	sub	sp, #36	; 0x24
 801d204:	af02      	add	r7, sp, #8
 801d206:	6078      	str	r0, [r7, #4]

    err_t check;                                    /* error return check */
    test_func_t* thread_packeg = (test_func_t*)arg; /* for casting arg into a test_func_t pointer */
 801d208:	687b      	ldr	r3, [r7, #4]
 801d20a:	617b      	str	r3, [r7, #20]
    uint8_t* data;                          /* will point to data for testing */

    for (;;) {

        /* semaphore will be released and received pocket will be directed from  udp_receive_callback when a pocket is sent to the udp_pcb port belonging to that task*/
        if (xSemaphoreTake(thread_packeg->q, portMAX_DELAY) == pdFALSE) {
 801d20c:	697b      	ldr	r3, [r7, #20]
 801d20e:	685b      	ldr	r3, [r3, #4]
 801d210:	f04f 31ff 	mov.w	r1, #4294967295
 801d214:	4618      	mov	r0, r3
 801d216:	f7f2 fbcd 	bl	800f9b4 <xQueueSemaphoreTake>
 801d21a:	4603      	mov	r3, r0
 801d21c:	2b00      	cmp	r3, #0
 801d21e:	d030      	beq.n	801d282 <testing_thread+0x82>
            continue;
        }

        uint_test_cast = thread_packeg->taskX_pack.p->payload;
 801d220:	697b      	ldr	r3, [r7, #20]
 801d222:	691b      	ldr	r3, [r3, #16]
 801d224:	685b      	ldr	r3, [r3, #4]
 801d226:	613b      	str	r3, [r7, #16]
        data = uint_test_cast->data;
 801d228:	693b      	ldr	r3, [r7, #16]
 801d22a:	330d      	adds	r3, #13
 801d22c:	60fb      	str	r3, [r7, #12]
        /* peripheral   tx to rx call the developer written, test function */
        thread_packeg->task_ptr(data, MAX_BUF_LEN, &thread_packeg->q, uint_test_cast->request,
 801d22e:	697b      	ldr	r3, [r7, #20]
 801d230:	681c      	ldr	r4, [r3, #0]
 801d232:	697b      	ldr	r3, [r7, #20]
 801d234:	1d1a      	adds	r2, r3, #4
 801d236:	693b      	ldr	r3, [r7, #16]
 801d238:	7b19      	ldrb	r1, [r3, #12]
 801d23a:	693b      	ldr	r3, [r7, #16]
 801d23c:	3371      	adds	r3, #113	; 0x71
 801d23e:	9300      	str	r3, [sp, #0]
 801d240:	460b      	mov	r3, r1
 801d242:	2164      	movs	r1, #100	; 0x64
 801d244:	68f8      	ldr	r0, [r7, #12]
 801d246:	47a0      	blx	r4
                                &uint_test_cast->error_report);

        /* send back the data to pc after being tested */
        check = udp_sendto(thread_packeg->pcb_and_port_for_test, thread_packeg->taskX_pack.p,
 801d248:	697b      	ldr	r3, [r7, #20]
 801d24a:	6998      	ldr	r0, [r3, #24]
 801d24c:	697b      	ldr	r3, [r7, #20]
 801d24e:	6919      	ldr	r1, [r3, #16]
                           &thread_packeg->taskX_pack.dst_ip_addr, thread_packeg->taskX_pack.dst_port);
 801d250:	697b      	ldr	r3, [r7, #20]
 801d252:	f103 0208 	add.w	r2, r3, #8
        check = udp_sendto(thread_packeg->pcb_and_port_for_test, thread_packeg->taskX_pack.p,
 801d256:	697b      	ldr	r3, [r7, #20]
 801d258:	899b      	ldrh	r3, [r3, #12]
 801d25a:	f7fc f877 	bl	801934c <udp_sendto>
 801d25e:	4603      	mov	r3, r0
 801d260:	72fb      	strb	r3, [r7, #11]

        if (check != ERR_OK) {
 801d262:	f997 300b 	ldrsb.w	r3, [r7, #11]
 801d266:	2b00      	cmp	r3, #0
 801d268:	d002      	beq.n	801d270 <testing_thread+0x70>

            exit(UDP_SEND_FAILED);
 801d26a:	2003      	movs	r0, #3
 801d26c:	f000 f80c 	bl	801d288 <exit>
        }
        /* free pbuf received ofter being sent */
        pbuf_free(thread_packeg->taskX_pack.p);
 801d270:	697b      	ldr	r3, [r7, #20]
 801d272:	691b      	ldr	r3, [r3, #16]
 801d274:	4618      	mov	r0, r3
 801d276:	f7f6 f927 	bl	80134c8 <pbuf_free>

        /* indicate to  udp_receive_callback that task is finished  */
        thread_packeg->test_complete_flag = TEST_COMPLETE;
 801d27a:	697b      	ldr	r3, [r7, #20]
 801d27c:	2200      	movs	r2, #0
 801d27e:	751a      	strb	r2, [r3, #20]
 801d280:	e7c4      	b.n	801d20c <testing_thread+0xc>
            continue;
 801d282:	bf00      	nop
        if (xSemaphoreTake(thread_packeg->q, portMAX_DELAY) == pdFALSE) {
 801d284:	e7c2      	b.n	801d20c <testing_thread+0xc>
	...

0801d288 <exit>:
 801d288:	b508      	push	{r3, lr}
 801d28a:	4b06      	ldr	r3, [pc, #24]	; (801d2a4 <exit+0x1c>)
 801d28c:	4604      	mov	r4, r0
 801d28e:	b113      	cbz	r3, 801d296 <exit+0xe>
 801d290:	2100      	movs	r1, #0
 801d292:	f3af 8000 	nop.w
 801d296:	4b04      	ldr	r3, [pc, #16]	; (801d2a8 <exit+0x20>)
 801d298:	681b      	ldr	r3, [r3, #0]
 801d29a:	b103      	cbz	r3, 801d29e <exit+0x16>
 801d29c:	4798      	blx	r3
 801d29e:	4620      	mov	r0, r4
 801d2a0:	f7e4 fefe 	bl	80020a0 <_exit>
 801d2a4:	00000000 	.word	0x00000000
 801d2a8:	20024308 	.word	0x20024308

0801d2ac <rand>:
 801d2ac:	4b16      	ldr	r3, [pc, #88]	; (801d308 <rand+0x5c>)
 801d2ae:	b510      	push	{r4, lr}
 801d2b0:	681c      	ldr	r4, [r3, #0]
 801d2b2:	6b23      	ldr	r3, [r4, #48]	; 0x30
 801d2b4:	b9b3      	cbnz	r3, 801d2e4 <rand+0x38>
 801d2b6:	2018      	movs	r0, #24
 801d2b8:	f000 faa2 	bl	801d800 <malloc>
 801d2bc:	4602      	mov	r2, r0
 801d2be:	6320      	str	r0, [r4, #48]	; 0x30
 801d2c0:	b920      	cbnz	r0, 801d2cc <rand+0x20>
 801d2c2:	4b12      	ldr	r3, [pc, #72]	; (801d30c <rand+0x60>)
 801d2c4:	4812      	ldr	r0, [pc, #72]	; (801d310 <rand+0x64>)
 801d2c6:	2152      	movs	r1, #82	; 0x52
 801d2c8:	f000 fa30 	bl	801d72c <__assert_func>
 801d2cc:	4911      	ldr	r1, [pc, #68]	; (801d314 <rand+0x68>)
 801d2ce:	4b12      	ldr	r3, [pc, #72]	; (801d318 <rand+0x6c>)
 801d2d0:	e9c0 1300 	strd	r1, r3, [r0]
 801d2d4:	4b11      	ldr	r3, [pc, #68]	; (801d31c <rand+0x70>)
 801d2d6:	6083      	str	r3, [r0, #8]
 801d2d8:	230b      	movs	r3, #11
 801d2da:	8183      	strh	r3, [r0, #12]
 801d2dc:	2100      	movs	r1, #0
 801d2de:	2001      	movs	r0, #1
 801d2e0:	e9c2 0104 	strd	r0, r1, [r2, #16]
 801d2e4:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801d2e6:	480e      	ldr	r0, [pc, #56]	; (801d320 <rand+0x74>)
 801d2e8:	690b      	ldr	r3, [r1, #16]
 801d2ea:	694c      	ldr	r4, [r1, #20]
 801d2ec:	4a0d      	ldr	r2, [pc, #52]	; (801d324 <rand+0x78>)
 801d2ee:	4358      	muls	r0, r3
 801d2f0:	fb02 0004 	mla	r0, r2, r4, r0
 801d2f4:	fba3 3202 	umull	r3, r2, r3, r2
 801d2f8:	3301      	adds	r3, #1
 801d2fa:	eb40 0002 	adc.w	r0, r0, r2
 801d2fe:	e9c1 3004 	strd	r3, r0, [r1, #16]
 801d302:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 801d306:	bd10      	pop	{r4, pc}
 801d308:	200001a0 	.word	0x200001a0
 801d30c:	080217c8 	.word	0x080217c8
 801d310:	080217df 	.word	0x080217df
 801d314:	abcd330e 	.word	0xabcd330e
 801d318:	e66d1234 	.word	0xe66d1234
 801d31c:	0005deec 	.word	0x0005deec
 801d320:	5851f42d 	.word	0x5851f42d
 801d324:	4c957f2d 	.word	0x4c957f2d

0801d328 <std>:
 801d328:	2300      	movs	r3, #0
 801d32a:	b510      	push	{r4, lr}
 801d32c:	4604      	mov	r4, r0
 801d32e:	e9c0 3300 	strd	r3, r3, [r0]
 801d332:	e9c0 3304 	strd	r3, r3, [r0, #16]
 801d336:	6083      	str	r3, [r0, #8]
 801d338:	8181      	strh	r1, [r0, #12]
 801d33a:	6643      	str	r3, [r0, #100]	; 0x64
 801d33c:	81c2      	strh	r2, [r0, #14]
 801d33e:	6183      	str	r3, [r0, #24]
 801d340:	4619      	mov	r1, r3
 801d342:	2208      	movs	r2, #8
 801d344:	305c      	adds	r0, #92	; 0x5c
 801d346:	f000 f916 	bl	801d576 <memset>
 801d34a:	4b0d      	ldr	r3, [pc, #52]	; (801d380 <std+0x58>)
 801d34c:	6263      	str	r3, [r4, #36]	; 0x24
 801d34e:	4b0d      	ldr	r3, [pc, #52]	; (801d384 <std+0x5c>)
 801d350:	62a3      	str	r3, [r4, #40]	; 0x28
 801d352:	4b0d      	ldr	r3, [pc, #52]	; (801d388 <std+0x60>)
 801d354:	62e3      	str	r3, [r4, #44]	; 0x2c
 801d356:	4b0d      	ldr	r3, [pc, #52]	; (801d38c <std+0x64>)
 801d358:	6323      	str	r3, [r4, #48]	; 0x30
 801d35a:	4b0d      	ldr	r3, [pc, #52]	; (801d390 <std+0x68>)
 801d35c:	6224      	str	r4, [r4, #32]
 801d35e:	429c      	cmp	r4, r3
 801d360:	d006      	beq.n	801d370 <std+0x48>
 801d362:	f103 0268 	add.w	r2, r3, #104	; 0x68
 801d366:	4294      	cmp	r4, r2
 801d368:	d002      	beq.n	801d370 <std+0x48>
 801d36a:	33d0      	adds	r3, #208	; 0xd0
 801d36c:	429c      	cmp	r4, r3
 801d36e:	d105      	bne.n	801d37c <std+0x54>
 801d370:	f104 0058 	add.w	r0, r4, #88	; 0x58
 801d374:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d378:	f000 b9c6 	b.w	801d708 <__retarget_lock_init_recursive>
 801d37c:	bd10      	pop	{r4, pc}
 801d37e:	bf00      	nop
 801d380:	0801d4d1 	.word	0x0801d4d1
 801d384:	0801d4f3 	.word	0x0801d4f3
 801d388:	0801d52b 	.word	0x0801d52b
 801d38c:	0801d54f 	.word	0x0801d54f
 801d390:	200241d0 	.word	0x200241d0

0801d394 <stdio_exit_handler>:
 801d394:	4a02      	ldr	r2, [pc, #8]	; (801d3a0 <stdio_exit_handler+0xc>)
 801d396:	4903      	ldr	r1, [pc, #12]	; (801d3a4 <stdio_exit_handler+0x10>)
 801d398:	4803      	ldr	r0, [pc, #12]	; (801d3a8 <stdio_exit_handler+0x14>)
 801d39a:	f000 b869 	b.w	801d470 <_fwalk_sglue>
 801d39e:	bf00      	nop
 801d3a0:	20000148 	.word	0x20000148
 801d3a4:	0801e01d 	.word	0x0801e01d
 801d3a8:	20000154 	.word	0x20000154

0801d3ac <cleanup_stdio>:
 801d3ac:	6841      	ldr	r1, [r0, #4]
 801d3ae:	4b0c      	ldr	r3, [pc, #48]	; (801d3e0 <cleanup_stdio+0x34>)
 801d3b0:	4299      	cmp	r1, r3
 801d3b2:	b510      	push	{r4, lr}
 801d3b4:	4604      	mov	r4, r0
 801d3b6:	d001      	beq.n	801d3bc <cleanup_stdio+0x10>
 801d3b8:	f000 fe30 	bl	801e01c <_fflush_r>
 801d3bc:	68a1      	ldr	r1, [r4, #8]
 801d3be:	4b09      	ldr	r3, [pc, #36]	; (801d3e4 <cleanup_stdio+0x38>)
 801d3c0:	4299      	cmp	r1, r3
 801d3c2:	d002      	beq.n	801d3ca <cleanup_stdio+0x1e>
 801d3c4:	4620      	mov	r0, r4
 801d3c6:	f000 fe29 	bl	801e01c <_fflush_r>
 801d3ca:	68e1      	ldr	r1, [r4, #12]
 801d3cc:	4b06      	ldr	r3, [pc, #24]	; (801d3e8 <cleanup_stdio+0x3c>)
 801d3ce:	4299      	cmp	r1, r3
 801d3d0:	d004      	beq.n	801d3dc <cleanup_stdio+0x30>
 801d3d2:	4620      	mov	r0, r4
 801d3d4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d3d8:	f000 be20 	b.w	801e01c <_fflush_r>
 801d3dc:	bd10      	pop	{r4, pc}
 801d3de:	bf00      	nop
 801d3e0:	200241d0 	.word	0x200241d0
 801d3e4:	20024238 	.word	0x20024238
 801d3e8:	200242a0 	.word	0x200242a0

0801d3ec <global_stdio_init.part.0>:
 801d3ec:	b510      	push	{r4, lr}
 801d3ee:	4b0b      	ldr	r3, [pc, #44]	; (801d41c <global_stdio_init.part.0+0x30>)
 801d3f0:	4c0b      	ldr	r4, [pc, #44]	; (801d420 <global_stdio_init.part.0+0x34>)
 801d3f2:	4a0c      	ldr	r2, [pc, #48]	; (801d424 <global_stdio_init.part.0+0x38>)
 801d3f4:	601a      	str	r2, [r3, #0]
 801d3f6:	4620      	mov	r0, r4
 801d3f8:	2200      	movs	r2, #0
 801d3fa:	2104      	movs	r1, #4
 801d3fc:	f7ff ff94 	bl	801d328 <std>
 801d400:	f104 0068 	add.w	r0, r4, #104	; 0x68
 801d404:	2201      	movs	r2, #1
 801d406:	2109      	movs	r1, #9
 801d408:	f7ff ff8e 	bl	801d328 <std>
 801d40c:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 801d410:	2202      	movs	r2, #2
 801d412:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d416:	2112      	movs	r1, #18
 801d418:	f7ff bf86 	b.w	801d328 <std>
 801d41c:	20024308 	.word	0x20024308
 801d420:	200241d0 	.word	0x200241d0
 801d424:	0801d395 	.word	0x0801d395

0801d428 <__sfp_lock_acquire>:
 801d428:	4801      	ldr	r0, [pc, #4]	; (801d430 <__sfp_lock_acquire+0x8>)
 801d42a:	f000 b96e 	b.w	801d70a <__retarget_lock_acquire_recursive>
 801d42e:	bf00      	nop
 801d430:	20024311 	.word	0x20024311

0801d434 <__sfp_lock_release>:
 801d434:	4801      	ldr	r0, [pc, #4]	; (801d43c <__sfp_lock_release+0x8>)
 801d436:	f000 b969 	b.w	801d70c <__retarget_lock_release_recursive>
 801d43a:	bf00      	nop
 801d43c:	20024311 	.word	0x20024311

0801d440 <__sinit>:
 801d440:	b510      	push	{r4, lr}
 801d442:	4604      	mov	r4, r0
 801d444:	f7ff fff0 	bl	801d428 <__sfp_lock_acquire>
 801d448:	6a23      	ldr	r3, [r4, #32]
 801d44a:	b11b      	cbz	r3, 801d454 <__sinit+0x14>
 801d44c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 801d450:	f7ff bff0 	b.w	801d434 <__sfp_lock_release>
 801d454:	4b04      	ldr	r3, [pc, #16]	; (801d468 <__sinit+0x28>)
 801d456:	6223      	str	r3, [r4, #32]
 801d458:	4b04      	ldr	r3, [pc, #16]	; (801d46c <__sinit+0x2c>)
 801d45a:	681b      	ldr	r3, [r3, #0]
 801d45c:	2b00      	cmp	r3, #0
 801d45e:	d1f5      	bne.n	801d44c <__sinit+0xc>
 801d460:	f7ff ffc4 	bl	801d3ec <global_stdio_init.part.0>
 801d464:	e7f2      	b.n	801d44c <__sinit+0xc>
 801d466:	bf00      	nop
 801d468:	0801d3ad 	.word	0x0801d3ad
 801d46c:	20024308 	.word	0x20024308

0801d470 <_fwalk_sglue>:
 801d470:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d474:	4607      	mov	r7, r0
 801d476:	4688      	mov	r8, r1
 801d478:	4614      	mov	r4, r2
 801d47a:	2600      	movs	r6, #0
 801d47c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 801d480:	f1b9 0901 	subs.w	r9, r9, #1
 801d484:	d505      	bpl.n	801d492 <_fwalk_sglue+0x22>
 801d486:	6824      	ldr	r4, [r4, #0]
 801d488:	2c00      	cmp	r4, #0
 801d48a:	d1f7      	bne.n	801d47c <_fwalk_sglue+0xc>
 801d48c:	4630      	mov	r0, r6
 801d48e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d492:	89ab      	ldrh	r3, [r5, #12]
 801d494:	2b01      	cmp	r3, #1
 801d496:	d907      	bls.n	801d4a8 <_fwalk_sglue+0x38>
 801d498:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 801d49c:	3301      	adds	r3, #1
 801d49e:	d003      	beq.n	801d4a8 <_fwalk_sglue+0x38>
 801d4a0:	4629      	mov	r1, r5
 801d4a2:	4638      	mov	r0, r7
 801d4a4:	47c0      	blx	r8
 801d4a6:	4306      	orrs	r6, r0
 801d4a8:	3568      	adds	r5, #104	; 0x68
 801d4aa:	e7e9      	b.n	801d480 <_fwalk_sglue+0x10>

0801d4ac <iprintf>:
 801d4ac:	b40f      	push	{r0, r1, r2, r3}
 801d4ae:	b507      	push	{r0, r1, r2, lr}
 801d4b0:	4906      	ldr	r1, [pc, #24]	; (801d4cc <iprintf+0x20>)
 801d4b2:	ab04      	add	r3, sp, #16
 801d4b4:	6808      	ldr	r0, [r1, #0]
 801d4b6:	f853 2b04 	ldr.w	r2, [r3], #4
 801d4ba:	6881      	ldr	r1, [r0, #8]
 801d4bc:	9301      	str	r3, [sp, #4]
 801d4be:	f000 fa7d 	bl	801d9bc <_vfiprintf_r>
 801d4c2:	b003      	add	sp, #12
 801d4c4:	f85d eb04 	ldr.w	lr, [sp], #4
 801d4c8:	b004      	add	sp, #16
 801d4ca:	4770      	bx	lr
 801d4cc:	200001a0 	.word	0x200001a0

0801d4d0 <__sread>:
 801d4d0:	b510      	push	{r4, lr}
 801d4d2:	460c      	mov	r4, r1
 801d4d4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d4d8:	f000 f8ce 	bl	801d678 <_read_r>
 801d4dc:	2800      	cmp	r0, #0
 801d4de:	bfab      	itete	ge
 801d4e0:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 801d4e2:	89a3      	ldrhlt	r3, [r4, #12]
 801d4e4:	181b      	addge	r3, r3, r0
 801d4e6:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 801d4ea:	bfac      	ite	ge
 801d4ec:	6563      	strge	r3, [r4, #84]	; 0x54
 801d4ee:	81a3      	strhlt	r3, [r4, #12]
 801d4f0:	bd10      	pop	{r4, pc}

0801d4f2 <__swrite>:
 801d4f2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801d4f6:	461f      	mov	r7, r3
 801d4f8:	898b      	ldrh	r3, [r1, #12]
 801d4fa:	05db      	lsls	r3, r3, #23
 801d4fc:	4605      	mov	r5, r0
 801d4fe:	460c      	mov	r4, r1
 801d500:	4616      	mov	r6, r2
 801d502:	d505      	bpl.n	801d510 <__swrite+0x1e>
 801d504:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d508:	2302      	movs	r3, #2
 801d50a:	2200      	movs	r2, #0
 801d50c:	f000 f8a2 	bl	801d654 <_lseek_r>
 801d510:	89a3      	ldrh	r3, [r4, #12]
 801d512:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801d516:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 801d51a:	81a3      	strh	r3, [r4, #12]
 801d51c:	4632      	mov	r2, r6
 801d51e:	463b      	mov	r3, r7
 801d520:	4628      	mov	r0, r5
 801d522:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 801d526:	f000 b8b9 	b.w	801d69c <_write_r>

0801d52a <__sseek>:
 801d52a:	b510      	push	{r4, lr}
 801d52c:	460c      	mov	r4, r1
 801d52e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d532:	f000 f88f 	bl	801d654 <_lseek_r>
 801d536:	1c43      	adds	r3, r0, #1
 801d538:	89a3      	ldrh	r3, [r4, #12]
 801d53a:	bf15      	itete	ne
 801d53c:	6560      	strne	r0, [r4, #84]	; 0x54
 801d53e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 801d542:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 801d546:	81a3      	strheq	r3, [r4, #12]
 801d548:	bf18      	it	ne
 801d54a:	81a3      	strhne	r3, [r4, #12]
 801d54c:	bd10      	pop	{r4, pc}

0801d54e <__sclose>:
 801d54e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801d552:	f000 b819 	b.w	801d588 <_close_r>

0801d556 <memcmp>:
 801d556:	b510      	push	{r4, lr}
 801d558:	3901      	subs	r1, #1
 801d55a:	4402      	add	r2, r0
 801d55c:	4290      	cmp	r0, r2
 801d55e:	d101      	bne.n	801d564 <memcmp+0xe>
 801d560:	2000      	movs	r0, #0
 801d562:	e005      	b.n	801d570 <memcmp+0x1a>
 801d564:	7803      	ldrb	r3, [r0, #0]
 801d566:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 801d56a:	42a3      	cmp	r3, r4
 801d56c:	d001      	beq.n	801d572 <memcmp+0x1c>
 801d56e:	1b18      	subs	r0, r3, r4
 801d570:	bd10      	pop	{r4, pc}
 801d572:	3001      	adds	r0, #1
 801d574:	e7f2      	b.n	801d55c <memcmp+0x6>

0801d576 <memset>:
 801d576:	4402      	add	r2, r0
 801d578:	4603      	mov	r3, r0
 801d57a:	4293      	cmp	r3, r2
 801d57c:	d100      	bne.n	801d580 <memset+0xa>
 801d57e:	4770      	bx	lr
 801d580:	f803 1b01 	strb.w	r1, [r3], #1
 801d584:	e7f9      	b.n	801d57a <memset+0x4>
	...

0801d588 <_close_r>:
 801d588:	b538      	push	{r3, r4, r5, lr}
 801d58a:	4d06      	ldr	r5, [pc, #24]	; (801d5a4 <_close_r+0x1c>)
 801d58c:	2300      	movs	r3, #0
 801d58e:	4604      	mov	r4, r0
 801d590:	4608      	mov	r0, r1
 801d592:	602b      	str	r3, [r5, #0]
 801d594:	f7e4 fdc7 	bl	8002126 <_close>
 801d598:	1c43      	adds	r3, r0, #1
 801d59a:	d102      	bne.n	801d5a2 <_close_r+0x1a>
 801d59c:	682b      	ldr	r3, [r5, #0]
 801d59e:	b103      	cbz	r3, 801d5a2 <_close_r+0x1a>
 801d5a0:	6023      	str	r3, [r4, #0]
 801d5a2:	bd38      	pop	{r3, r4, r5, pc}
 801d5a4:	2002430c 	.word	0x2002430c

0801d5a8 <_reclaim_reent>:
 801d5a8:	4b29      	ldr	r3, [pc, #164]	; (801d650 <_reclaim_reent+0xa8>)
 801d5aa:	681b      	ldr	r3, [r3, #0]
 801d5ac:	4283      	cmp	r3, r0
 801d5ae:	b570      	push	{r4, r5, r6, lr}
 801d5b0:	4604      	mov	r4, r0
 801d5b2:	d04b      	beq.n	801d64c <_reclaim_reent+0xa4>
 801d5b4:	69c3      	ldr	r3, [r0, #28]
 801d5b6:	b143      	cbz	r3, 801d5ca <_reclaim_reent+0x22>
 801d5b8:	68db      	ldr	r3, [r3, #12]
 801d5ba:	2b00      	cmp	r3, #0
 801d5bc:	d144      	bne.n	801d648 <_reclaim_reent+0xa0>
 801d5be:	69e3      	ldr	r3, [r4, #28]
 801d5c0:	6819      	ldr	r1, [r3, #0]
 801d5c2:	b111      	cbz	r1, 801d5ca <_reclaim_reent+0x22>
 801d5c4:	4620      	mov	r0, r4
 801d5c6:	f000 f8cf 	bl	801d768 <_free_r>
 801d5ca:	6961      	ldr	r1, [r4, #20]
 801d5cc:	b111      	cbz	r1, 801d5d4 <_reclaim_reent+0x2c>
 801d5ce:	4620      	mov	r0, r4
 801d5d0:	f000 f8ca 	bl	801d768 <_free_r>
 801d5d4:	69e1      	ldr	r1, [r4, #28]
 801d5d6:	b111      	cbz	r1, 801d5de <_reclaim_reent+0x36>
 801d5d8:	4620      	mov	r0, r4
 801d5da:	f000 f8c5 	bl	801d768 <_free_r>
 801d5de:	6b21      	ldr	r1, [r4, #48]	; 0x30
 801d5e0:	b111      	cbz	r1, 801d5e8 <_reclaim_reent+0x40>
 801d5e2:	4620      	mov	r0, r4
 801d5e4:	f000 f8c0 	bl	801d768 <_free_r>
 801d5e8:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801d5ea:	b111      	cbz	r1, 801d5f2 <_reclaim_reent+0x4a>
 801d5ec:	4620      	mov	r0, r4
 801d5ee:	f000 f8bb 	bl	801d768 <_free_r>
 801d5f2:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 801d5f4:	b111      	cbz	r1, 801d5fc <_reclaim_reent+0x54>
 801d5f6:	4620      	mov	r0, r4
 801d5f8:	f000 f8b6 	bl	801d768 <_free_r>
 801d5fc:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 801d5fe:	b111      	cbz	r1, 801d606 <_reclaim_reent+0x5e>
 801d600:	4620      	mov	r0, r4
 801d602:	f000 f8b1 	bl	801d768 <_free_r>
 801d606:	6c61      	ldr	r1, [r4, #68]	; 0x44
 801d608:	b111      	cbz	r1, 801d610 <_reclaim_reent+0x68>
 801d60a:	4620      	mov	r0, r4
 801d60c:	f000 f8ac 	bl	801d768 <_free_r>
 801d610:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 801d612:	b111      	cbz	r1, 801d61a <_reclaim_reent+0x72>
 801d614:	4620      	mov	r0, r4
 801d616:	f000 f8a7 	bl	801d768 <_free_r>
 801d61a:	6a23      	ldr	r3, [r4, #32]
 801d61c:	b1b3      	cbz	r3, 801d64c <_reclaim_reent+0xa4>
 801d61e:	4620      	mov	r0, r4
 801d620:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 801d624:	4718      	bx	r3
 801d626:	5949      	ldr	r1, [r1, r5]
 801d628:	b941      	cbnz	r1, 801d63c <_reclaim_reent+0x94>
 801d62a:	3504      	adds	r5, #4
 801d62c:	69e3      	ldr	r3, [r4, #28]
 801d62e:	2d80      	cmp	r5, #128	; 0x80
 801d630:	68d9      	ldr	r1, [r3, #12]
 801d632:	d1f8      	bne.n	801d626 <_reclaim_reent+0x7e>
 801d634:	4620      	mov	r0, r4
 801d636:	f000 f897 	bl	801d768 <_free_r>
 801d63a:	e7c0      	b.n	801d5be <_reclaim_reent+0x16>
 801d63c:	680e      	ldr	r6, [r1, #0]
 801d63e:	4620      	mov	r0, r4
 801d640:	f000 f892 	bl	801d768 <_free_r>
 801d644:	4631      	mov	r1, r6
 801d646:	e7ef      	b.n	801d628 <_reclaim_reent+0x80>
 801d648:	2500      	movs	r5, #0
 801d64a:	e7ef      	b.n	801d62c <_reclaim_reent+0x84>
 801d64c:	bd70      	pop	{r4, r5, r6, pc}
 801d64e:	bf00      	nop
 801d650:	200001a0 	.word	0x200001a0

0801d654 <_lseek_r>:
 801d654:	b538      	push	{r3, r4, r5, lr}
 801d656:	4d07      	ldr	r5, [pc, #28]	; (801d674 <_lseek_r+0x20>)
 801d658:	4604      	mov	r4, r0
 801d65a:	4608      	mov	r0, r1
 801d65c:	4611      	mov	r1, r2
 801d65e:	2200      	movs	r2, #0
 801d660:	602a      	str	r2, [r5, #0]
 801d662:	461a      	mov	r2, r3
 801d664:	f7e4 fd86 	bl	8002174 <_lseek>
 801d668:	1c43      	adds	r3, r0, #1
 801d66a:	d102      	bne.n	801d672 <_lseek_r+0x1e>
 801d66c:	682b      	ldr	r3, [r5, #0]
 801d66e:	b103      	cbz	r3, 801d672 <_lseek_r+0x1e>
 801d670:	6023      	str	r3, [r4, #0]
 801d672:	bd38      	pop	{r3, r4, r5, pc}
 801d674:	2002430c 	.word	0x2002430c

0801d678 <_read_r>:
 801d678:	b538      	push	{r3, r4, r5, lr}
 801d67a:	4d07      	ldr	r5, [pc, #28]	; (801d698 <_read_r+0x20>)
 801d67c:	4604      	mov	r4, r0
 801d67e:	4608      	mov	r0, r1
 801d680:	4611      	mov	r1, r2
 801d682:	2200      	movs	r2, #0
 801d684:	602a      	str	r2, [r5, #0]
 801d686:	461a      	mov	r2, r3
 801d688:	f7e4 fd14 	bl	80020b4 <_read>
 801d68c:	1c43      	adds	r3, r0, #1
 801d68e:	d102      	bne.n	801d696 <_read_r+0x1e>
 801d690:	682b      	ldr	r3, [r5, #0]
 801d692:	b103      	cbz	r3, 801d696 <_read_r+0x1e>
 801d694:	6023      	str	r3, [r4, #0]
 801d696:	bd38      	pop	{r3, r4, r5, pc}
 801d698:	2002430c 	.word	0x2002430c

0801d69c <_write_r>:
 801d69c:	b538      	push	{r3, r4, r5, lr}
 801d69e:	4d07      	ldr	r5, [pc, #28]	; (801d6bc <_write_r+0x20>)
 801d6a0:	4604      	mov	r4, r0
 801d6a2:	4608      	mov	r0, r1
 801d6a4:	4611      	mov	r1, r2
 801d6a6:	2200      	movs	r2, #0
 801d6a8:	602a      	str	r2, [r5, #0]
 801d6aa:	461a      	mov	r2, r3
 801d6ac:	f7e4 fd1f 	bl	80020ee <_write>
 801d6b0:	1c43      	adds	r3, r0, #1
 801d6b2:	d102      	bne.n	801d6ba <_write_r+0x1e>
 801d6b4:	682b      	ldr	r3, [r5, #0]
 801d6b6:	b103      	cbz	r3, 801d6ba <_write_r+0x1e>
 801d6b8:	6023      	str	r3, [r4, #0]
 801d6ba:	bd38      	pop	{r3, r4, r5, pc}
 801d6bc:	2002430c 	.word	0x2002430c

0801d6c0 <__libc_init_array>:
 801d6c0:	b570      	push	{r4, r5, r6, lr}
 801d6c2:	4d0d      	ldr	r5, [pc, #52]	; (801d6f8 <__libc_init_array+0x38>)
 801d6c4:	4c0d      	ldr	r4, [pc, #52]	; (801d6fc <__libc_init_array+0x3c>)
 801d6c6:	1b64      	subs	r4, r4, r5
 801d6c8:	10a4      	asrs	r4, r4, #2
 801d6ca:	2600      	movs	r6, #0
 801d6cc:	42a6      	cmp	r6, r4
 801d6ce:	d109      	bne.n	801d6e4 <__libc_init_array+0x24>
 801d6d0:	4d0b      	ldr	r5, [pc, #44]	; (801d700 <__libc_init_array+0x40>)
 801d6d2:	4c0c      	ldr	r4, [pc, #48]	; (801d704 <__libc_init_array+0x44>)
 801d6d4:	f000 fe52 	bl	801e37c <_init>
 801d6d8:	1b64      	subs	r4, r4, r5
 801d6da:	10a4      	asrs	r4, r4, #2
 801d6dc:	2600      	movs	r6, #0
 801d6de:	42a6      	cmp	r6, r4
 801d6e0:	d105      	bne.n	801d6ee <__libc_init_array+0x2e>
 801d6e2:	bd70      	pop	{r4, r5, r6, pc}
 801d6e4:	f855 3b04 	ldr.w	r3, [r5], #4
 801d6e8:	4798      	blx	r3
 801d6ea:	3601      	adds	r6, #1
 801d6ec:	e7ee      	b.n	801d6cc <__libc_init_array+0xc>
 801d6ee:	f855 3b04 	ldr.w	r3, [r5], #4
 801d6f2:	4798      	blx	r3
 801d6f4:	3601      	adds	r6, #1
 801d6f6:	e7f2      	b.n	801d6de <__libc_init_array+0x1e>
 801d6f8:	080218b0 	.word	0x080218b0
 801d6fc:	080218b0 	.word	0x080218b0
 801d700:	080218b0 	.word	0x080218b0
 801d704:	080218b4 	.word	0x080218b4

0801d708 <__retarget_lock_init_recursive>:
 801d708:	4770      	bx	lr

0801d70a <__retarget_lock_acquire_recursive>:
 801d70a:	4770      	bx	lr

0801d70c <__retarget_lock_release_recursive>:
 801d70c:	4770      	bx	lr

0801d70e <memcpy>:
 801d70e:	440a      	add	r2, r1
 801d710:	4291      	cmp	r1, r2
 801d712:	f100 33ff 	add.w	r3, r0, #4294967295
 801d716:	d100      	bne.n	801d71a <memcpy+0xc>
 801d718:	4770      	bx	lr
 801d71a:	b510      	push	{r4, lr}
 801d71c:	f811 4b01 	ldrb.w	r4, [r1], #1
 801d720:	f803 4f01 	strb.w	r4, [r3, #1]!
 801d724:	4291      	cmp	r1, r2
 801d726:	d1f9      	bne.n	801d71c <memcpy+0xe>
 801d728:	bd10      	pop	{r4, pc}
	...

0801d72c <__assert_func>:
 801d72c:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 801d72e:	4614      	mov	r4, r2
 801d730:	461a      	mov	r2, r3
 801d732:	4b09      	ldr	r3, [pc, #36]	; (801d758 <__assert_func+0x2c>)
 801d734:	681b      	ldr	r3, [r3, #0]
 801d736:	4605      	mov	r5, r0
 801d738:	68d8      	ldr	r0, [r3, #12]
 801d73a:	b14c      	cbz	r4, 801d750 <__assert_func+0x24>
 801d73c:	4b07      	ldr	r3, [pc, #28]	; (801d75c <__assert_func+0x30>)
 801d73e:	9100      	str	r1, [sp, #0]
 801d740:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801d744:	4906      	ldr	r1, [pc, #24]	; (801d760 <__assert_func+0x34>)
 801d746:	462b      	mov	r3, r5
 801d748:	f000 fc90 	bl	801e06c <fiprintf>
 801d74c:	f000 fd46 	bl	801e1dc <abort>
 801d750:	4b04      	ldr	r3, [pc, #16]	; (801d764 <__assert_func+0x38>)
 801d752:	461c      	mov	r4, r3
 801d754:	e7f3      	b.n	801d73e <__assert_func+0x12>
 801d756:	bf00      	nop
 801d758:	200001a0 	.word	0x200001a0
 801d75c:	08021837 	.word	0x08021837
 801d760:	08021844 	.word	0x08021844
 801d764:	08021872 	.word	0x08021872

0801d768 <_free_r>:
 801d768:	b537      	push	{r0, r1, r2, r4, r5, lr}
 801d76a:	2900      	cmp	r1, #0
 801d76c:	d044      	beq.n	801d7f8 <_free_r+0x90>
 801d76e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801d772:	9001      	str	r0, [sp, #4]
 801d774:	2b00      	cmp	r3, #0
 801d776:	f1a1 0404 	sub.w	r4, r1, #4
 801d77a:	bfb8      	it	lt
 801d77c:	18e4      	addlt	r4, r4, r3
 801d77e:	f000 f8e7 	bl	801d950 <__malloc_lock>
 801d782:	4a1e      	ldr	r2, [pc, #120]	; (801d7fc <_free_r+0x94>)
 801d784:	9801      	ldr	r0, [sp, #4]
 801d786:	6813      	ldr	r3, [r2, #0]
 801d788:	b933      	cbnz	r3, 801d798 <_free_r+0x30>
 801d78a:	6063      	str	r3, [r4, #4]
 801d78c:	6014      	str	r4, [r2, #0]
 801d78e:	b003      	add	sp, #12
 801d790:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801d794:	f000 b8e2 	b.w	801d95c <__malloc_unlock>
 801d798:	42a3      	cmp	r3, r4
 801d79a:	d908      	bls.n	801d7ae <_free_r+0x46>
 801d79c:	6825      	ldr	r5, [r4, #0]
 801d79e:	1961      	adds	r1, r4, r5
 801d7a0:	428b      	cmp	r3, r1
 801d7a2:	bf01      	itttt	eq
 801d7a4:	6819      	ldreq	r1, [r3, #0]
 801d7a6:	685b      	ldreq	r3, [r3, #4]
 801d7a8:	1949      	addeq	r1, r1, r5
 801d7aa:	6021      	streq	r1, [r4, #0]
 801d7ac:	e7ed      	b.n	801d78a <_free_r+0x22>
 801d7ae:	461a      	mov	r2, r3
 801d7b0:	685b      	ldr	r3, [r3, #4]
 801d7b2:	b10b      	cbz	r3, 801d7b8 <_free_r+0x50>
 801d7b4:	42a3      	cmp	r3, r4
 801d7b6:	d9fa      	bls.n	801d7ae <_free_r+0x46>
 801d7b8:	6811      	ldr	r1, [r2, #0]
 801d7ba:	1855      	adds	r5, r2, r1
 801d7bc:	42a5      	cmp	r5, r4
 801d7be:	d10b      	bne.n	801d7d8 <_free_r+0x70>
 801d7c0:	6824      	ldr	r4, [r4, #0]
 801d7c2:	4421      	add	r1, r4
 801d7c4:	1854      	adds	r4, r2, r1
 801d7c6:	42a3      	cmp	r3, r4
 801d7c8:	6011      	str	r1, [r2, #0]
 801d7ca:	d1e0      	bne.n	801d78e <_free_r+0x26>
 801d7cc:	681c      	ldr	r4, [r3, #0]
 801d7ce:	685b      	ldr	r3, [r3, #4]
 801d7d0:	6053      	str	r3, [r2, #4]
 801d7d2:	440c      	add	r4, r1
 801d7d4:	6014      	str	r4, [r2, #0]
 801d7d6:	e7da      	b.n	801d78e <_free_r+0x26>
 801d7d8:	d902      	bls.n	801d7e0 <_free_r+0x78>
 801d7da:	230c      	movs	r3, #12
 801d7dc:	6003      	str	r3, [r0, #0]
 801d7de:	e7d6      	b.n	801d78e <_free_r+0x26>
 801d7e0:	6825      	ldr	r5, [r4, #0]
 801d7e2:	1961      	adds	r1, r4, r5
 801d7e4:	428b      	cmp	r3, r1
 801d7e6:	bf04      	itt	eq
 801d7e8:	6819      	ldreq	r1, [r3, #0]
 801d7ea:	685b      	ldreq	r3, [r3, #4]
 801d7ec:	6063      	str	r3, [r4, #4]
 801d7ee:	bf04      	itt	eq
 801d7f0:	1949      	addeq	r1, r1, r5
 801d7f2:	6021      	streq	r1, [r4, #0]
 801d7f4:	6054      	str	r4, [r2, #4]
 801d7f6:	e7ca      	b.n	801d78e <_free_r+0x26>
 801d7f8:	b003      	add	sp, #12
 801d7fa:	bd30      	pop	{r4, r5, pc}
 801d7fc:	20024314 	.word	0x20024314

0801d800 <malloc>:
 801d800:	4b02      	ldr	r3, [pc, #8]	; (801d80c <malloc+0xc>)
 801d802:	4601      	mov	r1, r0
 801d804:	6818      	ldr	r0, [r3, #0]
 801d806:	f000 b823 	b.w	801d850 <_malloc_r>
 801d80a:	bf00      	nop
 801d80c:	200001a0 	.word	0x200001a0

0801d810 <sbrk_aligned>:
 801d810:	b570      	push	{r4, r5, r6, lr}
 801d812:	4e0e      	ldr	r6, [pc, #56]	; (801d84c <sbrk_aligned+0x3c>)
 801d814:	460c      	mov	r4, r1
 801d816:	6831      	ldr	r1, [r6, #0]
 801d818:	4605      	mov	r5, r0
 801d81a:	b911      	cbnz	r1, 801d822 <sbrk_aligned+0x12>
 801d81c:	f000 fcce 	bl	801e1bc <_sbrk_r>
 801d820:	6030      	str	r0, [r6, #0]
 801d822:	4621      	mov	r1, r4
 801d824:	4628      	mov	r0, r5
 801d826:	f000 fcc9 	bl	801e1bc <_sbrk_r>
 801d82a:	1c43      	adds	r3, r0, #1
 801d82c:	d00a      	beq.n	801d844 <sbrk_aligned+0x34>
 801d82e:	1cc4      	adds	r4, r0, #3
 801d830:	f024 0403 	bic.w	r4, r4, #3
 801d834:	42a0      	cmp	r0, r4
 801d836:	d007      	beq.n	801d848 <sbrk_aligned+0x38>
 801d838:	1a21      	subs	r1, r4, r0
 801d83a:	4628      	mov	r0, r5
 801d83c:	f000 fcbe 	bl	801e1bc <_sbrk_r>
 801d840:	3001      	adds	r0, #1
 801d842:	d101      	bne.n	801d848 <sbrk_aligned+0x38>
 801d844:	f04f 34ff 	mov.w	r4, #4294967295
 801d848:	4620      	mov	r0, r4
 801d84a:	bd70      	pop	{r4, r5, r6, pc}
 801d84c:	20024318 	.word	0x20024318

0801d850 <_malloc_r>:
 801d850:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801d854:	1ccd      	adds	r5, r1, #3
 801d856:	f025 0503 	bic.w	r5, r5, #3
 801d85a:	3508      	adds	r5, #8
 801d85c:	2d0c      	cmp	r5, #12
 801d85e:	bf38      	it	cc
 801d860:	250c      	movcc	r5, #12
 801d862:	2d00      	cmp	r5, #0
 801d864:	4607      	mov	r7, r0
 801d866:	db01      	blt.n	801d86c <_malloc_r+0x1c>
 801d868:	42a9      	cmp	r1, r5
 801d86a:	d905      	bls.n	801d878 <_malloc_r+0x28>
 801d86c:	230c      	movs	r3, #12
 801d86e:	603b      	str	r3, [r7, #0]
 801d870:	2600      	movs	r6, #0
 801d872:	4630      	mov	r0, r6
 801d874:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 801d878:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 801d94c <_malloc_r+0xfc>
 801d87c:	f000 f868 	bl	801d950 <__malloc_lock>
 801d880:	f8d8 3000 	ldr.w	r3, [r8]
 801d884:	461c      	mov	r4, r3
 801d886:	bb5c      	cbnz	r4, 801d8e0 <_malloc_r+0x90>
 801d888:	4629      	mov	r1, r5
 801d88a:	4638      	mov	r0, r7
 801d88c:	f7ff ffc0 	bl	801d810 <sbrk_aligned>
 801d890:	1c43      	adds	r3, r0, #1
 801d892:	4604      	mov	r4, r0
 801d894:	d155      	bne.n	801d942 <_malloc_r+0xf2>
 801d896:	f8d8 4000 	ldr.w	r4, [r8]
 801d89a:	4626      	mov	r6, r4
 801d89c:	2e00      	cmp	r6, #0
 801d89e:	d145      	bne.n	801d92c <_malloc_r+0xdc>
 801d8a0:	2c00      	cmp	r4, #0
 801d8a2:	d048      	beq.n	801d936 <_malloc_r+0xe6>
 801d8a4:	6823      	ldr	r3, [r4, #0]
 801d8a6:	4631      	mov	r1, r6
 801d8a8:	4638      	mov	r0, r7
 801d8aa:	eb04 0903 	add.w	r9, r4, r3
 801d8ae:	f000 fc85 	bl	801e1bc <_sbrk_r>
 801d8b2:	4581      	cmp	r9, r0
 801d8b4:	d13f      	bne.n	801d936 <_malloc_r+0xe6>
 801d8b6:	6821      	ldr	r1, [r4, #0]
 801d8b8:	1a6d      	subs	r5, r5, r1
 801d8ba:	4629      	mov	r1, r5
 801d8bc:	4638      	mov	r0, r7
 801d8be:	f7ff ffa7 	bl	801d810 <sbrk_aligned>
 801d8c2:	3001      	adds	r0, #1
 801d8c4:	d037      	beq.n	801d936 <_malloc_r+0xe6>
 801d8c6:	6823      	ldr	r3, [r4, #0]
 801d8c8:	442b      	add	r3, r5
 801d8ca:	6023      	str	r3, [r4, #0]
 801d8cc:	f8d8 3000 	ldr.w	r3, [r8]
 801d8d0:	2b00      	cmp	r3, #0
 801d8d2:	d038      	beq.n	801d946 <_malloc_r+0xf6>
 801d8d4:	685a      	ldr	r2, [r3, #4]
 801d8d6:	42a2      	cmp	r2, r4
 801d8d8:	d12b      	bne.n	801d932 <_malloc_r+0xe2>
 801d8da:	2200      	movs	r2, #0
 801d8dc:	605a      	str	r2, [r3, #4]
 801d8de:	e00f      	b.n	801d900 <_malloc_r+0xb0>
 801d8e0:	6822      	ldr	r2, [r4, #0]
 801d8e2:	1b52      	subs	r2, r2, r5
 801d8e4:	d41f      	bmi.n	801d926 <_malloc_r+0xd6>
 801d8e6:	2a0b      	cmp	r2, #11
 801d8e8:	d917      	bls.n	801d91a <_malloc_r+0xca>
 801d8ea:	1961      	adds	r1, r4, r5
 801d8ec:	42a3      	cmp	r3, r4
 801d8ee:	6025      	str	r5, [r4, #0]
 801d8f0:	bf18      	it	ne
 801d8f2:	6059      	strne	r1, [r3, #4]
 801d8f4:	6863      	ldr	r3, [r4, #4]
 801d8f6:	bf08      	it	eq
 801d8f8:	f8c8 1000 	streq.w	r1, [r8]
 801d8fc:	5162      	str	r2, [r4, r5]
 801d8fe:	604b      	str	r3, [r1, #4]
 801d900:	4638      	mov	r0, r7
 801d902:	f104 060b 	add.w	r6, r4, #11
 801d906:	f000 f829 	bl	801d95c <__malloc_unlock>
 801d90a:	f026 0607 	bic.w	r6, r6, #7
 801d90e:	1d23      	adds	r3, r4, #4
 801d910:	1af2      	subs	r2, r6, r3
 801d912:	d0ae      	beq.n	801d872 <_malloc_r+0x22>
 801d914:	1b9b      	subs	r3, r3, r6
 801d916:	50a3      	str	r3, [r4, r2]
 801d918:	e7ab      	b.n	801d872 <_malloc_r+0x22>
 801d91a:	42a3      	cmp	r3, r4
 801d91c:	6862      	ldr	r2, [r4, #4]
 801d91e:	d1dd      	bne.n	801d8dc <_malloc_r+0x8c>
 801d920:	f8c8 2000 	str.w	r2, [r8]
 801d924:	e7ec      	b.n	801d900 <_malloc_r+0xb0>
 801d926:	4623      	mov	r3, r4
 801d928:	6864      	ldr	r4, [r4, #4]
 801d92a:	e7ac      	b.n	801d886 <_malloc_r+0x36>
 801d92c:	4634      	mov	r4, r6
 801d92e:	6876      	ldr	r6, [r6, #4]
 801d930:	e7b4      	b.n	801d89c <_malloc_r+0x4c>
 801d932:	4613      	mov	r3, r2
 801d934:	e7cc      	b.n	801d8d0 <_malloc_r+0x80>
 801d936:	230c      	movs	r3, #12
 801d938:	603b      	str	r3, [r7, #0]
 801d93a:	4638      	mov	r0, r7
 801d93c:	f000 f80e 	bl	801d95c <__malloc_unlock>
 801d940:	e797      	b.n	801d872 <_malloc_r+0x22>
 801d942:	6025      	str	r5, [r4, #0]
 801d944:	e7dc      	b.n	801d900 <_malloc_r+0xb0>
 801d946:	605b      	str	r3, [r3, #4]
 801d948:	deff      	udf	#255	; 0xff
 801d94a:	bf00      	nop
 801d94c:	20024314 	.word	0x20024314

0801d950 <__malloc_lock>:
 801d950:	4801      	ldr	r0, [pc, #4]	; (801d958 <__malloc_lock+0x8>)
 801d952:	f7ff beda 	b.w	801d70a <__retarget_lock_acquire_recursive>
 801d956:	bf00      	nop
 801d958:	20024310 	.word	0x20024310

0801d95c <__malloc_unlock>:
 801d95c:	4801      	ldr	r0, [pc, #4]	; (801d964 <__malloc_unlock+0x8>)
 801d95e:	f7ff bed5 	b.w	801d70c <__retarget_lock_release_recursive>
 801d962:	bf00      	nop
 801d964:	20024310 	.word	0x20024310

0801d968 <__sfputc_r>:
 801d968:	6893      	ldr	r3, [r2, #8]
 801d96a:	3b01      	subs	r3, #1
 801d96c:	2b00      	cmp	r3, #0
 801d96e:	b410      	push	{r4}
 801d970:	6093      	str	r3, [r2, #8]
 801d972:	da08      	bge.n	801d986 <__sfputc_r+0x1e>
 801d974:	6994      	ldr	r4, [r2, #24]
 801d976:	42a3      	cmp	r3, r4
 801d978:	db01      	blt.n	801d97e <__sfputc_r+0x16>
 801d97a:	290a      	cmp	r1, #10
 801d97c:	d103      	bne.n	801d986 <__sfputc_r+0x1e>
 801d97e:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d982:	f000 bb85 	b.w	801e090 <__swbuf_r>
 801d986:	6813      	ldr	r3, [r2, #0]
 801d988:	1c58      	adds	r0, r3, #1
 801d98a:	6010      	str	r0, [r2, #0]
 801d98c:	7019      	strb	r1, [r3, #0]
 801d98e:	4608      	mov	r0, r1
 801d990:	f85d 4b04 	ldr.w	r4, [sp], #4
 801d994:	4770      	bx	lr

0801d996 <__sfputs_r>:
 801d996:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801d998:	4606      	mov	r6, r0
 801d99a:	460f      	mov	r7, r1
 801d99c:	4614      	mov	r4, r2
 801d99e:	18d5      	adds	r5, r2, r3
 801d9a0:	42ac      	cmp	r4, r5
 801d9a2:	d101      	bne.n	801d9a8 <__sfputs_r+0x12>
 801d9a4:	2000      	movs	r0, #0
 801d9a6:	e007      	b.n	801d9b8 <__sfputs_r+0x22>
 801d9a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 801d9ac:	463a      	mov	r2, r7
 801d9ae:	4630      	mov	r0, r6
 801d9b0:	f7ff ffda 	bl	801d968 <__sfputc_r>
 801d9b4:	1c43      	adds	r3, r0, #1
 801d9b6:	d1f3      	bne.n	801d9a0 <__sfputs_r+0xa>
 801d9b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801d9bc <_vfiprintf_r>:
 801d9bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 801d9c0:	460d      	mov	r5, r1
 801d9c2:	b09d      	sub	sp, #116	; 0x74
 801d9c4:	4614      	mov	r4, r2
 801d9c6:	4698      	mov	r8, r3
 801d9c8:	4606      	mov	r6, r0
 801d9ca:	b118      	cbz	r0, 801d9d4 <_vfiprintf_r+0x18>
 801d9cc:	6a03      	ldr	r3, [r0, #32]
 801d9ce:	b90b      	cbnz	r3, 801d9d4 <_vfiprintf_r+0x18>
 801d9d0:	f7ff fd36 	bl	801d440 <__sinit>
 801d9d4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d9d6:	07d9      	lsls	r1, r3, #31
 801d9d8:	d405      	bmi.n	801d9e6 <_vfiprintf_r+0x2a>
 801d9da:	89ab      	ldrh	r3, [r5, #12]
 801d9dc:	059a      	lsls	r2, r3, #22
 801d9de:	d402      	bmi.n	801d9e6 <_vfiprintf_r+0x2a>
 801d9e0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801d9e2:	f7ff fe92 	bl	801d70a <__retarget_lock_acquire_recursive>
 801d9e6:	89ab      	ldrh	r3, [r5, #12]
 801d9e8:	071b      	lsls	r3, r3, #28
 801d9ea:	d501      	bpl.n	801d9f0 <_vfiprintf_r+0x34>
 801d9ec:	692b      	ldr	r3, [r5, #16]
 801d9ee:	b99b      	cbnz	r3, 801da18 <_vfiprintf_r+0x5c>
 801d9f0:	4629      	mov	r1, r5
 801d9f2:	4630      	mov	r0, r6
 801d9f4:	f000 fb8a 	bl	801e10c <__swsetup_r>
 801d9f8:	b170      	cbz	r0, 801da18 <_vfiprintf_r+0x5c>
 801d9fa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801d9fc:	07dc      	lsls	r4, r3, #31
 801d9fe:	d504      	bpl.n	801da0a <_vfiprintf_r+0x4e>
 801da00:	f04f 30ff 	mov.w	r0, #4294967295
 801da04:	b01d      	add	sp, #116	; 0x74
 801da06:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 801da0a:	89ab      	ldrh	r3, [r5, #12]
 801da0c:	0598      	lsls	r0, r3, #22
 801da0e:	d4f7      	bmi.n	801da00 <_vfiprintf_r+0x44>
 801da10:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801da12:	f7ff fe7b 	bl	801d70c <__retarget_lock_release_recursive>
 801da16:	e7f3      	b.n	801da00 <_vfiprintf_r+0x44>
 801da18:	2300      	movs	r3, #0
 801da1a:	9309      	str	r3, [sp, #36]	; 0x24
 801da1c:	2320      	movs	r3, #32
 801da1e:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 801da22:	f8cd 800c 	str.w	r8, [sp, #12]
 801da26:	2330      	movs	r3, #48	; 0x30
 801da28:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 801dbdc <_vfiprintf_r+0x220>
 801da2c:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801da30:	f04f 0901 	mov.w	r9, #1
 801da34:	4623      	mov	r3, r4
 801da36:	469a      	mov	sl, r3
 801da38:	f813 2b01 	ldrb.w	r2, [r3], #1
 801da3c:	b10a      	cbz	r2, 801da42 <_vfiprintf_r+0x86>
 801da3e:	2a25      	cmp	r2, #37	; 0x25
 801da40:	d1f9      	bne.n	801da36 <_vfiprintf_r+0x7a>
 801da42:	ebba 0b04 	subs.w	fp, sl, r4
 801da46:	d00b      	beq.n	801da60 <_vfiprintf_r+0xa4>
 801da48:	465b      	mov	r3, fp
 801da4a:	4622      	mov	r2, r4
 801da4c:	4629      	mov	r1, r5
 801da4e:	4630      	mov	r0, r6
 801da50:	f7ff ffa1 	bl	801d996 <__sfputs_r>
 801da54:	3001      	adds	r0, #1
 801da56:	f000 80a9 	beq.w	801dbac <_vfiprintf_r+0x1f0>
 801da5a:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801da5c:	445a      	add	r2, fp
 801da5e:	9209      	str	r2, [sp, #36]	; 0x24
 801da60:	f89a 3000 	ldrb.w	r3, [sl]
 801da64:	2b00      	cmp	r3, #0
 801da66:	f000 80a1 	beq.w	801dbac <_vfiprintf_r+0x1f0>
 801da6a:	2300      	movs	r3, #0
 801da6c:	f04f 32ff 	mov.w	r2, #4294967295
 801da70:	e9cd 2305 	strd	r2, r3, [sp, #20]
 801da74:	f10a 0a01 	add.w	sl, sl, #1
 801da78:	9304      	str	r3, [sp, #16]
 801da7a:	9307      	str	r3, [sp, #28]
 801da7c:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801da80:	931a      	str	r3, [sp, #104]	; 0x68
 801da82:	4654      	mov	r4, sl
 801da84:	2205      	movs	r2, #5
 801da86:	f814 1b01 	ldrb.w	r1, [r4], #1
 801da8a:	4854      	ldr	r0, [pc, #336]	; (801dbdc <_vfiprintf_r+0x220>)
 801da8c:	f7e2 fbc0 	bl	8000210 <memchr>
 801da90:	9a04      	ldr	r2, [sp, #16]
 801da92:	b9d8      	cbnz	r0, 801dacc <_vfiprintf_r+0x110>
 801da94:	06d1      	lsls	r1, r2, #27
 801da96:	bf44      	itt	mi
 801da98:	2320      	movmi	r3, #32
 801da9a:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801da9e:	0713      	lsls	r3, r2, #28
 801daa0:	bf44      	itt	mi
 801daa2:	232b      	movmi	r3, #43	; 0x2b
 801daa4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 801daa8:	f89a 3000 	ldrb.w	r3, [sl]
 801daac:	2b2a      	cmp	r3, #42	; 0x2a
 801daae:	d015      	beq.n	801dadc <_vfiprintf_r+0x120>
 801dab0:	9a07      	ldr	r2, [sp, #28]
 801dab2:	4654      	mov	r4, sl
 801dab4:	2000      	movs	r0, #0
 801dab6:	f04f 0c0a 	mov.w	ip, #10
 801daba:	4621      	mov	r1, r4
 801dabc:	f811 3b01 	ldrb.w	r3, [r1], #1
 801dac0:	3b30      	subs	r3, #48	; 0x30
 801dac2:	2b09      	cmp	r3, #9
 801dac4:	d94d      	bls.n	801db62 <_vfiprintf_r+0x1a6>
 801dac6:	b1b0      	cbz	r0, 801daf6 <_vfiprintf_r+0x13a>
 801dac8:	9207      	str	r2, [sp, #28]
 801daca:	e014      	b.n	801daf6 <_vfiprintf_r+0x13a>
 801dacc:	eba0 0308 	sub.w	r3, r0, r8
 801dad0:	fa09 f303 	lsl.w	r3, r9, r3
 801dad4:	4313      	orrs	r3, r2
 801dad6:	9304      	str	r3, [sp, #16]
 801dad8:	46a2      	mov	sl, r4
 801dada:	e7d2      	b.n	801da82 <_vfiprintf_r+0xc6>
 801dadc:	9b03      	ldr	r3, [sp, #12]
 801dade:	1d19      	adds	r1, r3, #4
 801dae0:	681b      	ldr	r3, [r3, #0]
 801dae2:	9103      	str	r1, [sp, #12]
 801dae4:	2b00      	cmp	r3, #0
 801dae6:	bfbb      	ittet	lt
 801dae8:	425b      	neglt	r3, r3
 801daea:	f042 0202 	orrlt.w	r2, r2, #2
 801daee:	9307      	strge	r3, [sp, #28]
 801daf0:	9307      	strlt	r3, [sp, #28]
 801daf2:	bfb8      	it	lt
 801daf4:	9204      	strlt	r2, [sp, #16]
 801daf6:	7823      	ldrb	r3, [r4, #0]
 801daf8:	2b2e      	cmp	r3, #46	; 0x2e
 801dafa:	d10c      	bne.n	801db16 <_vfiprintf_r+0x15a>
 801dafc:	7863      	ldrb	r3, [r4, #1]
 801dafe:	2b2a      	cmp	r3, #42	; 0x2a
 801db00:	d134      	bne.n	801db6c <_vfiprintf_r+0x1b0>
 801db02:	9b03      	ldr	r3, [sp, #12]
 801db04:	1d1a      	adds	r2, r3, #4
 801db06:	681b      	ldr	r3, [r3, #0]
 801db08:	9203      	str	r2, [sp, #12]
 801db0a:	2b00      	cmp	r3, #0
 801db0c:	bfb8      	it	lt
 801db0e:	f04f 33ff 	movlt.w	r3, #4294967295
 801db12:	3402      	adds	r4, #2
 801db14:	9305      	str	r3, [sp, #20]
 801db16:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 801dbec <_vfiprintf_r+0x230>
 801db1a:	7821      	ldrb	r1, [r4, #0]
 801db1c:	2203      	movs	r2, #3
 801db1e:	4650      	mov	r0, sl
 801db20:	f7e2 fb76 	bl	8000210 <memchr>
 801db24:	b138      	cbz	r0, 801db36 <_vfiprintf_r+0x17a>
 801db26:	9b04      	ldr	r3, [sp, #16]
 801db28:	eba0 000a 	sub.w	r0, r0, sl
 801db2c:	2240      	movs	r2, #64	; 0x40
 801db2e:	4082      	lsls	r2, r0
 801db30:	4313      	orrs	r3, r2
 801db32:	3401      	adds	r4, #1
 801db34:	9304      	str	r3, [sp, #16]
 801db36:	f814 1b01 	ldrb.w	r1, [r4], #1
 801db3a:	4829      	ldr	r0, [pc, #164]	; (801dbe0 <_vfiprintf_r+0x224>)
 801db3c:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801db40:	2206      	movs	r2, #6
 801db42:	f7e2 fb65 	bl	8000210 <memchr>
 801db46:	2800      	cmp	r0, #0
 801db48:	d03f      	beq.n	801dbca <_vfiprintf_r+0x20e>
 801db4a:	4b26      	ldr	r3, [pc, #152]	; (801dbe4 <_vfiprintf_r+0x228>)
 801db4c:	bb1b      	cbnz	r3, 801db96 <_vfiprintf_r+0x1da>
 801db4e:	9b03      	ldr	r3, [sp, #12]
 801db50:	3307      	adds	r3, #7
 801db52:	f023 0307 	bic.w	r3, r3, #7
 801db56:	3308      	adds	r3, #8
 801db58:	9303      	str	r3, [sp, #12]
 801db5a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801db5c:	443b      	add	r3, r7
 801db5e:	9309      	str	r3, [sp, #36]	; 0x24
 801db60:	e768      	b.n	801da34 <_vfiprintf_r+0x78>
 801db62:	fb0c 3202 	mla	r2, ip, r2, r3
 801db66:	460c      	mov	r4, r1
 801db68:	2001      	movs	r0, #1
 801db6a:	e7a6      	b.n	801daba <_vfiprintf_r+0xfe>
 801db6c:	2300      	movs	r3, #0
 801db6e:	3401      	adds	r4, #1
 801db70:	9305      	str	r3, [sp, #20]
 801db72:	4619      	mov	r1, r3
 801db74:	f04f 0c0a 	mov.w	ip, #10
 801db78:	4620      	mov	r0, r4
 801db7a:	f810 2b01 	ldrb.w	r2, [r0], #1
 801db7e:	3a30      	subs	r2, #48	; 0x30
 801db80:	2a09      	cmp	r2, #9
 801db82:	d903      	bls.n	801db8c <_vfiprintf_r+0x1d0>
 801db84:	2b00      	cmp	r3, #0
 801db86:	d0c6      	beq.n	801db16 <_vfiprintf_r+0x15a>
 801db88:	9105      	str	r1, [sp, #20]
 801db8a:	e7c4      	b.n	801db16 <_vfiprintf_r+0x15a>
 801db8c:	fb0c 2101 	mla	r1, ip, r1, r2
 801db90:	4604      	mov	r4, r0
 801db92:	2301      	movs	r3, #1
 801db94:	e7f0      	b.n	801db78 <_vfiprintf_r+0x1bc>
 801db96:	ab03      	add	r3, sp, #12
 801db98:	9300      	str	r3, [sp, #0]
 801db9a:	462a      	mov	r2, r5
 801db9c:	4b12      	ldr	r3, [pc, #72]	; (801dbe8 <_vfiprintf_r+0x22c>)
 801db9e:	a904      	add	r1, sp, #16
 801dba0:	4630      	mov	r0, r6
 801dba2:	f3af 8000 	nop.w
 801dba6:	4607      	mov	r7, r0
 801dba8:	1c78      	adds	r0, r7, #1
 801dbaa:	d1d6      	bne.n	801db5a <_vfiprintf_r+0x19e>
 801dbac:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801dbae:	07d9      	lsls	r1, r3, #31
 801dbb0:	d405      	bmi.n	801dbbe <_vfiprintf_r+0x202>
 801dbb2:	89ab      	ldrh	r3, [r5, #12]
 801dbb4:	059a      	lsls	r2, r3, #22
 801dbb6:	d402      	bmi.n	801dbbe <_vfiprintf_r+0x202>
 801dbb8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801dbba:	f7ff fda7 	bl	801d70c <__retarget_lock_release_recursive>
 801dbbe:	89ab      	ldrh	r3, [r5, #12]
 801dbc0:	065b      	lsls	r3, r3, #25
 801dbc2:	f53f af1d 	bmi.w	801da00 <_vfiprintf_r+0x44>
 801dbc6:	9809      	ldr	r0, [sp, #36]	; 0x24
 801dbc8:	e71c      	b.n	801da04 <_vfiprintf_r+0x48>
 801dbca:	ab03      	add	r3, sp, #12
 801dbcc:	9300      	str	r3, [sp, #0]
 801dbce:	462a      	mov	r2, r5
 801dbd0:	4b05      	ldr	r3, [pc, #20]	; (801dbe8 <_vfiprintf_r+0x22c>)
 801dbd2:	a904      	add	r1, sp, #16
 801dbd4:	4630      	mov	r0, r6
 801dbd6:	f000 f879 	bl	801dccc <_printf_i>
 801dbda:	e7e4      	b.n	801dba6 <_vfiprintf_r+0x1ea>
 801dbdc:	08021873 	.word	0x08021873
 801dbe0:	0802187d 	.word	0x0802187d
 801dbe4:	00000000 	.word	0x00000000
 801dbe8:	0801d997 	.word	0x0801d997
 801dbec:	08021879 	.word	0x08021879

0801dbf0 <_printf_common>:
 801dbf0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801dbf4:	4616      	mov	r6, r2
 801dbf6:	4699      	mov	r9, r3
 801dbf8:	688a      	ldr	r2, [r1, #8]
 801dbfa:	690b      	ldr	r3, [r1, #16]
 801dbfc:	f8dd 8020 	ldr.w	r8, [sp, #32]
 801dc00:	4293      	cmp	r3, r2
 801dc02:	bfb8      	it	lt
 801dc04:	4613      	movlt	r3, r2
 801dc06:	6033      	str	r3, [r6, #0]
 801dc08:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 801dc0c:	4607      	mov	r7, r0
 801dc0e:	460c      	mov	r4, r1
 801dc10:	b10a      	cbz	r2, 801dc16 <_printf_common+0x26>
 801dc12:	3301      	adds	r3, #1
 801dc14:	6033      	str	r3, [r6, #0]
 801dc16:	6823      	ldr	r3, [r4, #0]
 801dc18:	0699      	lsls	r1, r3, #26
 801dc1a:	bf42      	ittt	mi
 801dc1c:	6833      	ldrmi	r3, [r6, #0]
 801dc1e:	3302      	addmi	r3, #2
 801dc20:	6033      	strmi	r3, [r6, #0]
 801dc22:	6825      	ldr	r5, [r4, #0]
 801dc24:	f015 0506 	ands.w	r5, r5, #6
 801dc28:	d106      	bne.n	801dc38 <_printf_common+0x48>
 801dc2a:	f104 0a19 	add.w	sl, r4, #25
 801dc2e:	68e3      	ldr	r3, [r4, #12]
 801dc30:	6832      	ldr	r2, [r6, #0]
 801dc32:	1a9b      	subs	r3, r3, r2
 801dc34:	42ab      	cmp	r3, r5
 801dc36:	dc26      	bgt.n	801dc86 <_printf_common+0x96>
 801dc38:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 801dc3c:	1e13      	subs	r3, r2, #0
 801dc3e:	6822      	ldr	r2, [r4, #0]
 801dc40:	bf18      	it	ne
 801dc42:	2301      	movne	r3, #1
 801dc44:	0692      	lsls	r2, r2, #26
 801dc46:	d42b      	bmi.n	801dca0 <_printf_common+0xb0>
 801dc48:	f104 0243 	add.w	r2, r4, #67	; 0x43
 801dc4c:	4649      	mov	r1, r9
 801dc4e:	4638      	mov	r0, r7
 801dc50:	47c0      	blx	r8
 801dc52:	3001      	adds	r0, #1
 801dc54:	d01e      	beq.n	801dc94 <_printf_common+0xa4>
 801dc56:	6823      	ldr	r3, [r4, #0]
 801dc58:	6922      	ldr	r2, [r4, #16]
 801dc5a:	f003 0306 	and.w	r3, r3, #6
 801dc5e:	2b04      	cmp	r3, #4
 801dc60:	bf02      	ittt	eq
 801dc62:	68e5      	ldreq	r5, [r4, #12]
 801dc64:	6833      	ldreq	r3, [r6, #0]
 801dc66:	1aed      	subeq	r5, r5, r3
 801dc68:	68a3      	ldr	r3, [r4, #8]
 801dc6a:	bf0c      	ite	eq
 801dc6c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 801dc70:	2500      	movne	r5, #0
 801dc72:	4293      	cmp	r3, r2
 801dc74:	bfc4      	itt	gt
 801dc76:	1a9b      	subgt	r3, r3, r2
 801dc78:	18ed      	addgt	r5, r5, r3
 801dc7a:	2600      	movs	r6, #0
 801dc7c:	341a      	adds	r4, #26
 801dc7e:	42b5      	cmp	r5, r6
 801dc80:	d11a      	bne.n	801dcb8 <_printf_common+0xc8>
 801dc82:	2000      	movs	r0, #0
 801dc84:	e008      	b.n	801dc98 <_printf_common+0xa8>
 801dc86:	2301      	movs	r3, #1
 801dc88:	4652      	mov	r2, sl
 801dc8a:	4649      	mov	r1, r9
 801dc8c:	4638      	mov	r0, r7
 801dc8e:	47c0      	blx	r8
 801dc90:	3001      	adds	r0, #1
 801dc92:	d103      	bne.n	801dc9c <_printf_common+0xac>
 801dc94:	f04f 30ff 	mov.w	r0, #4294967295
 801dc98:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801dc9c:	3501      	adds	r5, #1
 801dc9e:	e7c6      	b.n	801dc2e <_printf_common+0x3e>
 801dca0:	18e1      	adds	r1, r4, r3
 801dca2:	1c5a      	adds	r2, r3, #1
 801dca4:	2030      	movs	r0, #48	; 0x30
 801dca6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 801dcaa:	4422      	add	r2, r4
 801dcac:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 801dcb0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801dcb4:	3302      	adds	r3, #2
 801dcb6:	e7c7      	b.n	801dc48 <_printf_common+0x58>
 801dcb8:	2301      	movs	r3, #1
 801dcba:	4622      	mov	r2, r4
 801dcbc:	4649      	mov	r1, r9
 801dcbe:	4638      	mov	r0, r7
 801dcc0:	47c0      	blx	r8
 801dcc2:	3001      	adds	r0, #1
 801dcc4:	d0e6      	beq.n	801dc94 <_printf_common+0xa4>
 801dcc6:	3601      	adds	r6, #1
 801dcc8:	e7d9      	b.n	801dc7e <_printf_common+0x8e>
	...

0801dccc <_printf_i>:
 801dccc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 801dcd0:	7e0f      	ldrb	r7, [r1, #24]
 801dcd2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801dcd4:	2f78      	cmp	r7, #120	; 0x78
 801dcd6:	4691      	mov	r9, r2
 801dcd8:	4680      	mov	r8, r0
 801dcda:	460c      	mov	r4, r1
 801dcdc:	469a      	mov	sl, r3
 801dcde:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801dce2:	d807      	bhi.n	801dcf4 <_printf_i+0x28>
 801dce4:	2f62      	cmp	r7, #98	; 0x62
 801dce6:	d80a      	bhi.n	801dcfe <_printf_i+0x32>
 801dce8:	2f00      	cmp	r7, #0
 801dcea:	f000 80d4 	beq.w	801de96 <_printf_i+0x1ca>
 801dcee:	2f58      	cmp	r7, #88	; 0x58
 801dcf0:	f000 80c0 	beq.w	801de74 <_printf_i+0x1a8>
 801dcf4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801dcf8:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 801dcfc:	e03a      	b.n	801dd74 <_printf_i+0xa8>
 801dcfe:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801dd02:	2b15      	cmp	r3, #21
 801dd04:	d8f6      	bhi.n	801dcf4 <_printf_i+0x28>
 801dd06:	a101      	add	r1, pc, #4	; (adr r1, 801dd0c <_printf_i+0x40>)
 801dd08:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 801dd0c:	0801dd65 	.word	0x0801dd65
 801dd10:	0801dd79 	.word	0x0801dd79
 801dd14:	0801dcf5 	.word	0x0801dcf5
 801dd18:	0801dcf5 	.word	0x0801dcf5
 801dd1c:	0801dcf5 	.word	0x0801dcf5
 801dd20:	0801dcf5 	.word	0x0801dcf5
 801dd24:	0801dd79 	.word	0x0801dd79
 801dd28:	0801dcf5 	.word	0x0801dcf5
 801dd2c:	0801dcf5 	.word	0x0801dcf5
 801dd30:	0801dcf5 	.word	0x0801dcf5
 801dd34:	0801dcf5 	.word	0x0801dcf5
 801dd38:	0801de7d 	.word	0x0801de7d
 801dd3c:	0801dda5 	.word	0x0801dda5
 801dd40:	0801de37 	.word	0x0801de37
 801dd44:	0801dcf5 	.word	0x0801dcf5
 801dd48:	0801dcf5 	.word	0x0801dcf5
 801dd4c:	0801de9f 	.word	0x0801de9f
 801dd50:	0801dcf5 	.word	0x0801dcf5
 801dd54:	0801dda5 	.word	0x0801dda5
 801dd58:	0801dcf5 	.word	0x0801dcf5
 801dd5c:	0801dcf5 	.word	0x0801dcf5
 801dd60:	0801de3f 	.word	0x0801de3f
 801dd64:	682b      	ldr	r3, [r5, #0]
 801dd66:	1d1a      	adds	r2, r3, #4
 801dd68:	681b      	ldr	r3, [r3, #0]
 801dd6a:	602a      	str	r2, [r5, #0]
 801dd6c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 801dd70:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 801dd74:	2301      	movs	r3, #1
 801dd76:	e09f      	b.n	801deb8 <_printf_i+0x1ec>
 801dd78:	6820      	ldr	r0, [r4, #0]
 801dd7a:	682b      	ldr	r3, [r5, #0]
 801dd7c:	0607      	lsls	r7, r0, #24
 801dd7e:	f103 0104 	add.w	r1, r3, #4
 801dd82:	6029      	str	r1, [r5, #0]
 801dd84:	d501      	bpl.n	801dd8a <_printf_i+0xbe>
 801dd86:	681e      	ldr	r6, [r3, #0]
 801dd88:	e003      	b.n	801dd92 <_printf_i+0xc6>
 801dd8a:	0646      	lsls	r6, r0, #25
 801dd8c:	d5fb      	bpl.n	801dd86 <_printf_i+0xba>
 801dd8e:	f9b3 6000 	ldrsh.w	r6, [r3]
 801dd92:	2e00      	cmp	r6, #0
 801dd94:	da03      	bge.n	801dd9e <_printf_i+0xd2>
 801dd96:	232d      	movs	r3, #45	; 0x2d
 801dd98:	4276      	negs	r6, r6
 801dd9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801dd9e:	485a      	ldr	r0, [pc, #360]	; (801df08 <_printf_i+0x23c>)
 801dda0:	230a      	movs	r3, #10
 801dda2:	e012      	b.n	801ddca <_printf_i+0xfe>
 801dda4:	682b      	ldr	r3, [r5, #0]
 801dda6:	6820      	ldr	r0, [r4, #0]
 801dda8:	1d19      	adds	r1, r3, #4
 801ddaa:	6029      	str	r1, [r5, #0]
 801ddac:	0605      	lsls	r5, r0, #24
 801ddae:	d501      	bpl.n	801ddb4 <_printf_i+0xe8>
 801ddb0:	681e      	ldr	r6, [r3, #0]
 801ddb2:	e002      	b.n	801ddba <_printf_i+0xee>
 801ddb4:	0641      	lsls	r1, r0, #25
 801ddb6:	d5fb      	bpl.n	801ddb0 <_printf_i+0xe4>
 801ddb8:	881e      	ldrh	r6, [r3, #0]
 801ddba:	4853      	ldr	r0, [pc, #332]	; (801df08 <_printf_i+0x23c>)
 801ddbc:	2f6f      	cmp	r7, #111	; 0x6f
 801ddbe:	bf0c      	ite	eq
 801ddc0:	2308      	moveq	r3, #8
 801ddc2:	230a      	movne	r3, #10
 801ddc4:	2100      	movs	r1, #0
 801ddc6:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 801ddca:	6865      	ldr	r5, [r4, #4]
 801ddcc:	60a5      	str	r5, [r4, #8]
 801ddce:	2d00      	cmp	r5, #0
 801ddd0:	bfa2      	ittt	ge
 801ddd2:	6821      	ldrge	r1, [r4, #0]
 801ddd4:	f021 0104 	bicge.w	r1, r1, #4
 801ddd8:	6021      	strge	r1, [r4, #0]
 801ddda:	b90e      	cbnz	r6, 801dde0 <_printf_i+0x114>
 801dddc:	2d00      	cmp	r5, #0
 801ddde:	d04b      	beq.n	801de78 <_printf_i+0x1ac>
 801dde0:	4615      	mov	r5, r2
 801dde2:	fbb6 f1f3 	udiv	r1, r6, r3
 801dde6:	fb03 6711 	mls	r7, r3, r1, r6
 801ddea:	5dc7      	ldrb	r7, [r0, r7]
 801ddec:	f805 7d01 	strb.w	r7, [r5, #-1]!
 801ddf0:	4637      	mov	r7, r6
 801ddf2:	42bb      	cmp	r3, r7
 801ddf4:	460e      	mov	r6, r1
 801ddf6:	d9f4      	bls.n	801dde2 <_printf_i+0x116>
 801ddf8:	2b08      	cmp	r3, #8
 801ddfa:	d10b      	bne.n	801de14 <_printf_i+0x148>
 801ddfc:	6823      	ldr	r3, [r4, #0]
 801ddfe:	07de      	lsls	r6, r3, #31
 801de00:	d508      	bpl.n	801de14 <_printf_i+0x148>
 801de02:	6923      	ldr	r3, [r4, #16]
 801de04:	6861      	ldr	r1, [r4, #4]
 801de06:	4299      	cmp	r1, r3
 801de08:	bfde      	ittt	le
 801de0a:	2330      	movle	r3, #48	; 0x30
 801de0c:	f805 3c01 	strble.w	r3, [r5, #-1]
 801de10:	f105 35ff 	addle.w	r5, r5, #4294967295
 801de14:	1b52      	subs	r2, r2, r5
 801de16:	6122      	str	r2, [r4, #16]
 801de18:	f8cd a000 	str.w	sl, [sp]
 801de1c:	464b      	mov	r3, r9
 801de1e:	aa03      	add	r2, sp, #12
 801de20:	4621      	mov	r1, r4
 801de22:	4640      	mov	r0, r8
 801de24:	f7ff fee4 	bl	801dbf0 <_printf_common>
 801de28:	3001      	adds	r0, #1
 801de2a:	d14a      	bne.n	801dec2 <_printf_i+0x1f6>
 801de2c:	f04f 30ff 	mov.w	r0, #4294967295
 801de30:	b004      	add	sp, #16
 801de32:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 801de36:	6823      	ldr	r3, [r4, #0]
 801de38:	f043 0320 	orr.w	r3, r3, #32
 801de3c:	6023      	str	r3, [r4, #0]
 801de3e:	4833      	ldr	r0, [pc, #204]	; (801df0c <_printf_i+0x240>)
 801de40:	2778      	movs	r7, #120	; 0x78
 801de42:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 801de46:	6823      	ldr	r3, [r4, #0]
 801de48:	6829      	ldr	r1, [r5, #0]
 801de4a:	061f      	lsls	r7, r3, #24
 801de4c:	f851 6b04 	ldr.w	r6, [r1], #4
 801de50:	d402      	bmi.n	801de58 <_printf_i+0x18c>
 801de52:	065f      	lsls	r7, r3, #25
 801de54:	bf48      	it	mi
 801de56:	b2b6      	uxthmi	r6, r6
 801de58:	07df      	lsls	r7, r3, #31
 801de5a:	bf48      	it	mi
 801de5c:	f043 0320 	orrmi.w	r3, r3, #32
 801de60:	6029      	str	r1, [r5, #0]
 801de62:	bf48      	it	mi
 801de64:	6023      	strmi	r3, [r4, #0]
 801de66:	b91e      	cbnz	r6, 801de70 <_printf_i+0x1a4>
 801de68:	6823      	ldr	r3, [r4, #0]
 801de6a:	f023 0320 	bic.w	r3, r3, #32
 801de6e:	6023      	str	r3, [r4, #0]
 801de70:	2310      	movs	r3, #16
 801de72:	e7a7      	b.n	801ddc4 <_printf_i+0xf8>
 801de74:	4824      	ldr	r0, [pc, #144]	; (801df08 <_printf_i+0x23c>)
 801de76:	e7e4      	b.n	801de42 <_printf_i+0x176>
 801de78:	4615      	mov	r5, r2
 801de7a:	e7bd      	b.n	801ddf8 <_printf_i+0x12c>
 801de7c:	682b      	ldr	r3, [r5, #0]
 801de7e:	6826      	ldr	r6, [r4, #0]
 801de80:	6961      	ldr	r1, [r4, #20]
 801de82:	1d18      	adds	r0, r3, #4
 801de84:	6028      	str	r0, [r5, #0]
 801de86:	0635      	lsls	r5, r6, #24
 801de88:	681b      	ldr	r3, [r3, #0]
 801de8a:	d501      	bpl.n	801de90 <_printf_i+0x1c4>
 801de8c:	6019      	str	r1, [r3, #0]
 801de8e:	e002      	b.n	801de96 <_printf_i+0x1ca>
 801de90:	0670      	lsls	r0, r6, #25
 801de92:	d5fb      	bpl.n	801de8c <_printf_i+0x1c0>
 801de94:	8019      	strh	r1, [r3, #0]
 801de96:	2300      	movs	r3, #0
 801de98:	6123      	str	r3, [r4, #16]
 801de9a:	4615      	mov	r5, r2
 801de9c:	e7bc      	b.n	801de18 <_printf_i+0x14c>
 801de9e:	682b      	ldr	r3, [r5, #0]
 801dea0:	1d1a      	adds	r2, r3, #4
 801dea2:	602a      	str	r2, [r5, #0]
 801dea4:	681d      	ldr	r5, [r3, #0]
 801dea6:	6862      	ldr	r2, [r4, #4]
 801dea8:	2100      	movs	r1, #0
 801deaa:	4628      	mov	r0, r5
 801deac:	f7e2 f9b0 	bl	8000210 <memchr>
 801deb0:	b108      	cbz	r0, 801deb6 <_printf_i+0x1ea>
 801deb2:	1b40      	subs	r0, r0, r5
 801deb4:	6060      	str	r0, [r4, #4]
 801deb6:	6863      	ldr	r3, [r4, #4]
 801deb8:	6123      	str	r3, [r4, #16]
 801deba:	2300      	movs	r3, #0
 801debc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 801dec0:	e7aa      	b.n	801de18 <_printf_i+0x14c>
 801dec2:	6923      	ldr	r3, [r4, #16]
 801dec4:	462a      	mov	r2, r5
 801dec6:	4649      	mov	r1, r9
 801dec8:	4640      	mov	r0, r8
 801deca:	47d0      	blx	sl
 801decc:	3001      	adds	r0, #1
 801dece:	d0ad      	beq.n	801de2c <_printf_i+0x160>
 801ded0:	6823      	ldr	r3, [r4, #0]
 801ded2:	079b      	lsls	r3, r3, #30
 801ded4:	d413      	bmi.n	801defe <_printf_i+0x232>
 801ded6:	68e0      	ldr	r0, [r4, #12]
 801ded8:	9b03      	ldr	r3, [sp, #12]
 801deda:	4298      	cmp	r0, r3
 801dedc:	bfb8      	it	lt
 801dede:	4618      	movlt	r0, r3
 801dee0:	e7a6      	b.n	801de30 <_printf_i+0x164>
 801dee2:	2301      	movs	r3, #1
 801dee4:	4632      	mov	r2, r6
 801dee6:	4649      	mov	r1, r9
 801dee8:	4640      	mov	r0, r8
 801deea:	47d0      	blx	sl
 801deec:	3001      	adds	r0, #1
 801deee:	d09d      	beq.n	801de2c <_printf_i+0x160>
 801def0:	3501      	adds	r5, #1
 801def2:	68e3      	ldr	r3, [r4, #12]
 801def4:	9903      	ldr	r1, [sp, #12]
 801def6:	1a5b      	subs	r3, r3, r1
 801def8:	42ab      	cmp	r3, r5
 801defa:	dcf2      	bgt.n	801dee2 <_printf_i+0x216>
 801defc:	e7eb      	b.n	801ded6 <_printf_i+0x20a>
 801defe:	2500      	movs	r5, #0
 801df00:	f104 0619 	add.w	r6, r4, #25
 801df04:	e7f5      	b.n	801def2 <_printf_i+0x226>
 801df06:	bf00      	nop
 801df08:	08021884 	.word	0x08021884
 801df0c:	08021895 	.word	0x08021895

0801df10 <__sflush_r>:
 801df10:	898a      	ldrh	r2, [r1, #12]
 801df12:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 801df16:	4605      	mov	r5, r0
 801df18:	0710      	lsls	r0, r2, #28
 801df1a:	460c      	mov	r4, r1
 801df1c:	d458      	bmi.n	801dfd0 <__sflush_r+0xc0>
 801df1e:	684b      	ldr	r3, [r1, #4]
 801df20:	2b00      	cmp	r3, #0
 801df22:	dc05      	bgt.n	801df30 <__sflush_r+0x20>
 801df24:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 801df26:	2b00      	cmp	r3, #0
 801df28:	dc02      	bgt.n	801df30 <__sflush_r+0x20>
 801df2a:	2000      	movs	r0, #0
 801df2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 801df30:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801df32:	2e00      	cmp	r6, #0
 801df34:	d0f9      	beq.n	801df2a <__sflush_r+0x1a>
 801df36:	2300      	movs	r3, #0
 801df38:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 801df3c:	682f      	ldr	r7, [r5, #0]
 801df3e:	6a21      	ldr	r1, [r4, #32]
 801df40:	602b      	str	r3, [r5, #0]
 801df42:	d032      	beq.n	801dfaa <__sflush_r+0x9a>
 801df44:	6d60      	ldr	r0, [r4, #84]	; 0x54
 801df46:	89a3      	ldrh	r3, [r4, #12]
 801df48:	075a      	lsls	r2, r3, #29
 801df4a:	d505      	bpl.n	801df58 <__sflush_r+0x48>
 801df4c:	6863      	ldr	r3, [r4, #4]
 801df4e:	1ac0      	subs	r0, r0, r3
 801df50:	6b63      	ldr	r3, [r4, #52]	; 0x34
 801df52:	b10b      	cbz	r3, 801df58 <__sflush_r+0x48>
 801df54:	6c23      	ldr	r3, [r4, #64]	; 0x40
 801df56:	1ac0      	subs	r0, r0, r3
 801df58:	2300      	movs	r3, #0
 801df5a:	4602      	mov	r2, r0
 801df5c:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 801df5e:	6a21      	ldr	r1, [r4, #32]
 801df60:	4628      	mov	r0, r5
 801df62:	47b0      	blx	r6
 801df64:	1c43      	adds	r3, r0, #1
 801df66:	89a3      	ldrh	r3, [r4, #12]
 801df68:	d106      	bne.n	801df78 <__sflush_r+0x68>
 801df6a:	6829      	ldr	r1, [r5, #0]
 801df6c:	291d      	cmp	r1, #29
 801df6e:	d82b      	bhi.n	801dfc8 <__sflush_r+0xb8>
 801df70:	4a29      	ldr	r2, [pc, #164]	; (801e018 <__sflush_r+0x108>)
 801df72:	410a      	asrs	r2, r1
 801df74:	07d6      	lsls	r6, r2, #31
 801df76:	d427      	bmi.n	801dfc8 <__sflush_r+0xb8>
 801df78:	2200      	movs	r2, #0
 801df7a:	6062      	str	r2, [r4, #4]
 801df7c:	04d9      	lsls	r1, r3, #19
 801df7e:	6922      	ldr	r2, [r4, #16]
 801df80:	6022      	str	r2, [r4, #0]
 801df82:	d504      	bpl.n	801df8e <__sflush_r+0x7e>
 801df84:	1c42      	adds	r2, r0, #1
 801df86:	d101      	bne.n	801df8c <__sflush_r+0x7c>
 801df88:	682b      	ldr	r3, [r5, #0]
 801df8a:	b903      	cbnz	r3, 801df8e <__sflush_r+0x7e>
 801df8c:	6560      	str	r0, [r4, #84]	; 0x54
 801df8e:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801df90:	602f      	str	r7, [r5, #0]
 801df92:	2900      	cmp	r1, #0
 801df94:	d0c9      	beq.n	801df2a <__sflush_r+0x1a>
 801df96:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801df9a:	4299      	cmp	r1, r3
 801df9c:	d002      	beq.n	801dfa4 <__sflush_r+0x94>
 801df9e:	4628      	mov	r0, r5
 801dfa0:	f7ff fbe2 	bl	801d768 <_free_r>
 801dfa4:	2000      	movs	r0, #0
 801dfa6:	6360      	str	r0, [r4, #52]	; 0x34
 801dfa8:	e7c0      	b.n	801df2c <__sflush_r+0x1c>
 801dfaa:	2301      	movs	r3, #1
 801dfac:	4628      	mov	r0, r5
 801dfae:	47b0      	blx	r6
 801dfb0:	1c41      	adds	r1, r0, #1
 801dfb2:	d1c8      	bne.n	801df46 <__sflush_r+0x36>
 801dfb4:	682b      	ldr	r3, [r5, #0]
 801dfb6:	2b00      	cmp	r3, #0
 801dfb8:	d0c5      	beq.n	801df46 <__sflush_r+0x36>
 801dfba:	2b1d      	cmp	r3, #29
 801dfbc:	d001      	beq.n	801dfc2 <__sflush_r+0xb2>
 801dfbe:	2b16      	cmp	r3, #22
 801dfc0:	d101      	bne.n	801dfc6 <__sflush_r+0xb6>
 801dfc2:	602f      	str	r7, [r5, #0]
 801dfc4:	e7b1      	b.n	801df2a <__sflush_r+0x1a>
 801dfc6:	89a3      	ldrh	r3, [r4, #12]
 801dfc8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801dfcc:	81a3      	strh	r3, [r4, #12]
 801dfce:	e7ad      	b.n	801df2c <__sflush_r+0x1c>
 801dfd0:	690f      	ldr	r7, [r1, #16]
 801dfd2:	2f00      	cmp	r7, #0
 801dfd4:	d0a9      	beq.n	801df2a <__sflush_r+0x1a>
 801dfd6:	0793      	lsls	r3, r2, #30
 801dfd8:	680e      	ldr	r6, [r1, #0]
 801dfda:	bf08      	it	eq
 801dfdc:	694b      	ldreq	r3, [r1, #20]
 801dfde:	600f      	str	r7, [r1, #0]
 801dfe0:	bf18      	it	ne
 801dfe2:	2300      	movne	r3, #0
 801dfe4:	eba6 0807 	sub.w	r8, r6, r7
 801dfe8:	608b      	str	r3, [r1, #8]
 801dfea:	f1b8 0f00 	cmp.w	r8, #0
 801dfee:	dd9c      	ble.n	801df2a <__sflush_r+0x1a>
 801dff0:	6a21      	ldr	r1, [r4, #32]
 801dff2:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 801dff4:	4643      	mov	r3, r8
 801dff6:	463a      	mov	r2, r7
 801dff8:	4628      	mov	r0, r5
 801dffa:	47b0      	blx	r6
 801dffc:	2800      	cmp	r0, #0
 801dffe:	dc06      	bgt.n	801e00e <__sflush_r+0xfe>
 801e000:	89a3      	ldrh	r3, [r4, #12]
 801e002:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 801e006:	81a3      	strh	r3, [r4, #12]
 801e008:	f04f 30ff 	mov.w	r0, #4294967295
 801e00c:	e78e      	b.n	801df2c <__sflush_r+0x1c>
 801e00e:	4407      	add	r7, r0
 801e010:	eba8 0800 	sub.w	r8, r8, r0
 801e014:	e7e9      	b.n	801dfea <__sflush_r+0xda>
 801e016:	bf00      	nop
 801e018:	dfbffffe 	.word	0xdfbffffe

0801e01c <_fflush_r>:
 801e01c:	b538      	push	{r3, r4, r5, lr}
 801e01e:	690b      	ldr	r3, [r1, #16]
 801e020:	4605      	mov	r5, r0
 801e022:	460c      	mov	r4, r1
 801e024:	b913      	cbnz	r3, 801e02c <_fflush_r+0x10>
 801e026:	2500      	movs	r5, #0
 801e028:	4628      	mov	r0, r5
 801e02a:	bd38      	pop	{r3, r4, r5, pc}
 801e02c:	b118      	cbz	r0, 801e036 <_fflush_r+0x1a>
 801e02e:	6a03      	ldr	r3, [r0, #32]
 801e030:	b90b      	cbnz	r3, 801e036 <_fflush_r+0x1a>
 801e032:	f7ff fa05 	bl	801d440 <__sinit>
 801e036:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e03a:	2b00      	cmp	r3, #0
 801e03c:	d0f3      	beq.n	801e026 <_fflush_r+0xa>
 801e03e:	6e62      	ldr	r2, [r4, #100]	; 0x64
 801e040:	07d0      	lsls	r0, r2, #31
 801e042:	d404      	bmi.n	801e04e <_fflush_r+0x32>
 801e044:	0599      	lsls	r1, r3, #22
 801e046:	d402      	bmi.n	801e04e <_fflush_r+0x32>
 801e048:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e04a:	f7ff fb5e 	bl	801d70a <__retarget_lock_acquire_recursive>
 801e04e:	4628      	mov	r0, r5
 801e050:	4621      	mov	r1, r4
 801e052:	f7ff ff5d 	bl	801df10 <__sflush_r>
 801e056:	6e63      	ldr	r3, [r4, #100]	; 0x64
 801e058:	07da      	lsls	r2, r3, #31
 801e05a:	4605      	mov	r5, r0
 801e05c:	d4e4      	bmi.n	801e028 <_fflush_r+0xc>
 801e05e:	89a3      	ldrh	r3, [r4, #12]
 801e060:	059b      	lsls	r3, r3, #22
 801e062:	d4e1      	bmi.n	801e028 <_fflush_r+0xc>
 801e064:	6da0      	ldr	r0, [r4, #88]	; 0x58
 801e066:	f7ff fb51 	bl	801d70c <__retarget_lock_release_recursive>
 801e06a:	e7dd      	b.n	801e028 <_fflush_r+0xc>

0801e06c <fiprintf>:
 801e06c:	b40e      	push	{r1, r2, r3}
 801e06e:	b503      	push	{r0, r1, lr}
 801e070:	4601      	mov	r1, r0
 801e072:	ab03      	add	r3, sp, #12
 801e074:	4805      	ldr	r0, [pc, #20]	; (801e08c <fiprintf+0x20>)
 801e076:	f853 2b04 	ldr.w	r2, [r3], #4
 801e07a:	6800      	ldr	r0, [r0, #0]
 801e07c:	9301      	str	r3, [sp, #4]
 801e07e:	f7ff fc9d 	bl	801d9bc <_vfiprintf_r>
 801e082:	b002      	add	sp, #8
 801e084:	f85d eb04 	ldr.w	lr, [sp], #4
 801e088:	b003      	add	sp, #12
 801e08a:	4770      	bx	lr
 801e08c:	200001a0 	.word	0x200001a0

0801e090 <__swbuf_r>:
 801e090:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e092:	460e      	mov	r6, r1
 801e094:	4614      	mov	r4, r2
 801e096:	4605      	mov	r5, r0
 801e098:	b118      	cbz	r0, 801e0a2 <__swbuf_r+0x12>
 801e09a:	6a03      	ldr	r3, [r0, #32]
 801e09c:	b90b      	cbnz	r3, 801e0a2 <__swbuf_r+0x12>
 801e09e:	f7ff f9cf 	bl	801d440 <__sinit>
 801e0a2:	69a3      	ldr	r3, [r4, #24]
 801e0a4:	60a3      	str	r3, [r4, #8]
 801e0a6:	89a3      	ldrh	r3, [r4, #12]
 801e0a8:	071a      	lsls	r2, r3, #28
 801e0aa:	d525      	bpl.n	801e0f8 <__swbuf_r+0x68>
 801e0ac:	6923      	ldr	r3, [r4, #16]
 801e0ae:	b31b      	cbz	r3, 801e0f8 <__swbuf_r+0x68>
 801e0b0:	6823      	ldr	r3, [r4, #0]
 801e0b2:	6922      	ldr	r2, [r4, #16]
 801e0b4:	1a98      	subs	r0, r3, r2
 801e0b6:	6963      	ldr	r3, [r4, #20]
 801e0b8:	b2f6      	uxtb	r6, r6
 801e0ba:	4283      	cmp	r3, r0
 801e0bc:	4637      	mov	r7, r6
 801e0be:	dc04      	bgt.n	801e0ca <__swbuf_r+0x3a>
 801e0c0:	4621      	mov	r1, r4
 801e0c2:	4628      	mov	r0, r5
 801e0c4:	f7ff ffaa 	bl	801e01c <_fflush_r>
 801e0c8:	b9e0      	cbnz	r0, 801e104 <__swbuf_r+0x74>
 801e0ca:	68a3      	ldr	r3, [r4, #8]
 801e0cc:	3b01      	subs	r3, #1
 801e0ce:	60a3      	str	r3, [r4, #8]
 801e0d0:	6823      	ldr	r3, [r4, #0]
 801e0d2:	1c5a      	adds	r2, r3, #1
 801e0d4:	6022      	str	r2, [r4, #0]
 801e0d6:	701e      	strb	r6, [r3, #0]
 801e0d8:	6962      	ldr	r2, [r4, #20]
 801e0da:	1c43      	adds	r3, r0, #1
 801e0dc:	429a      	cmp	r2, r3
 801e0de:	d004      	beq.n	801e0ea <__swbuf_r+0x5a>
 801e0e0:	89a3      	ldrh	r3, [r4, #12]
 801e0e2:	07db      	lsls	r3, r3, #31
 801e0e4:	d506      	bpl.n	801e0f4 <__swbuf_r+0x64>
 801e0e6:	2e0a      	cmp	r6, #10
 801e0e8:	d104      	bne.n	801e0f4 <__swbuf_r+0x64>
 801e0ea:	4621      	mov	r1, r4
 801e0ec:	4628      	mov	r0, r5
 801e0ee:	f7ff ff95 	bl	801e01c <_fflush_r>
 801e0f2:	b938      	cbnz	r0, 801e104 <__swbuf_r+0x74>
 801e0f4:	4638      	mov	r0, r7
 801e0f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801e0f8:	4621      	mov	r1, r4
 801e0fa:	4628      	mov	r0, r5
 801e0fc:	f000 f806 	bl	801e10c <__swsetup_r>
 801e100:	2800      	cmp	r0, #0
 801e102:	d0d5      	beq.n	801e0b0 <__swbuf_r+0x20>
 801e104:	f04f 37ff 	mov.w	r7, #4294967295
 801e108:	e7f4      	b.n	801e0f4 <__swbuf_r+0x64>
	...

0801e10c <__swsetup_r>:
 801e10c:	b538      	push	{r3, r4, r5, lr}
 801e10e:	4b2a      	ldr	r3, [pc, #168]	; (801e1b8 <__swsetup_r+0xac>)
 801e110:	4605      	mov	r5, r0
 801e112:	6818      	ldr	r0, [r3, #0]
 801e114:	460c      	mov	r4, r1
 801e116:	b118      	cbz	r0, 801e120 <__swsetup_r+0x14>
 801e118:	6a03      	ldr	r3, [r0, #32]
 801e11a:	b90b      	cbnz	r3, 801e120 <__swsetup_r+0x14>
 801e11c:	f7ff f990 	bl	801d440 <__sinit>
 801e120:	89a3      	ldrh	r3, [r4, #12]
 801e122:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e126:	0718      	lsls	r0, r3, #28
 801e128:	d422      	bmi.n	801e170 <__swsetup_r+0x64>
 801e12a:	06d9      	lsls	r1, r3, #27
 801e12c:	d407      	bmi.n	801e13e <__swsetup_r+0x32>
 801e12e:	2309      	movs	r3, #9
 801e130:	602b      	str	r3, [r5, #0]
 801e132:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 801e136:	81a3      	strh	r3, [r4, #12]
 801e138:	f04f 30ff 	mov.w	r0, #4294967295
 801e13c:	e034      	b.n	801e1a8 <__swsetup_r+0x9c>
 801e13e:	0758      	lsls	r0, r3, #29
 801e140:	d512      	bpl.n	801e168 <__swsetup_r+0x5c>
 801e142:	6b61      	ldr	r1, [r4, #52]	; 0x34
 801e144:	b141      	cbz	r1, 801e158 <__swsetup_r+0x4c>
 801e146:	f104 0344 	add.w	r3, r4, #68	; 0x44
 801e14a:	4299      	cmp	r1, r3
 801e14c:	d002      	beq.n	801e154 <__swsetup_r+0x48>
 801e14e:	4628      	mov	r0, r5
 801e150:	f7ff fb0a 	bl	801d768 <_free_r>
 801e154:	2300      	movs	r3, #0
 801e156:	6363      	str	r3, [r4, #52]	; 0x34
 801e158:	89a3      	ldrh	r3, [r4, #12]
 801e15a:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 801e15e:	81a3      	strh	r3, [r4, #12]
 801e160:	2300      	movs	r3, #0
 801e162:	6063      	str	r3, [r4, #4]
 801e164:	6923      	ldr	r3, [r4, #16]
 801e166:	6023      	str	r3, [r4, #0]
 801e168:	89a3      	ldrh	r3, [r4, #12]
 801e16a:	f043 0308 	orr.w	r3, r3, #8
 801e16e:	81a3      	strh	r3, [r4, #12]
 801e170:	6923      	ldr	r3, [r4, #16]
 801e172:	b94b      	cbnz	r3, 801e188 <__swsetup_r+0x7c>
 801e174:	89a3      	ldrh	r3, [r4, #12]
 801e176:	f403 7320 	and.w	r3, r3, #640	; 0x280
 801e17a:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 801e17e:	d003      	beq.n	801e188 <__swsetup_r+0x7c>
 801e180:	4621      	mov	r1, r4
 801e182:	4628      	mov	r0, r5
 801e184:	f000 f857 	bl	801e236 <__smakebuf_r>
 801e188:	89a0      	ldrh	r0, [r4, #12]
 801e18a:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 801e18e:	f010 0301 	ands.w	r3, r0, #1
 801e192:	d00a      	beq.n	801e1aa <__swsetup_r+0x9e>
 801e194:	2300      	movs	r3, #0
 801e196:	60a3      	str	r3, [r4, #8]
 801e198:	6963      	ldr	r3, [r4, #20]
 801e19a:	425b      	negs	r3, r3
 801e19c:	61a3      	str	r3, [r4, #24]
 801e19e:	6923      	ldr	r3, [r4, #16]
 801e1a0:	b943      	cbnz	r3, 801e1b4 <__swsetup_r+0xa8>
 801e1a2:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 801e1a6:	d1c4      	bne.n	801e132 <__swsetup_r+0x26>
 801e1a8:	bd38      	pop	{r3, r4, r5, pc}
 801e1aa:	0781      	lsls	r1, r0, #30
 801e1ac:	bf58      	it	pl
 801e1ae:	6963      	ldrpl	r3, [r4, #20]
 801e1b0:	60a3      	str	r3, [r4, #8]
 801e1b2:	e7f4      	b.n	801e19e <__swsetup_r+0x92>
 801e1b4:	2000      	movs	r0, #0
 801e1b6:	e7f7      	b.n	801e1a8 <__swsetup_r+0x9c>
 801e1b8:	200001a0 	.word	0x200001a0

0801e1bc <_sbrk_r>:
 801e1bc:	b538      	push	{r3, r4, r5, lr}
 801e1be:	4d06      	ldr	r5, [pc, #24]	; (801e1d8 <_sbrk_r+0x1c>)
 801e1c0:	2300      	movs	r3, #0
 801e1c2:	4604      	mov	r4, r0
 801e1c4:	4608      	mov	r0, r1
 801e1c6:	602b      	str	r3, [r5, #0]
 801e1c8:	f7e3 ffe2 	bl	8002190 <_sbrk>
 801e1cc:	1c43      	adds	r3, r0, #1
 801e1ce:	d102      	bne.n	801e1d6 <_sbrk_r+0x1a>
 801e1d0:	682b      	ldr	r3, [r5, #0]
 801e1d2:	b103      	cbz	r3, 801e1d6 <_sbrk_r+0x1a>
 801e1d4:	6023      	str	r3, [r4, #0]
 801e1d6:	bd38      	pop	{r3, r4, r5, pc}
 801e1d8:	2002430c 	.word	0x2002430c

0801e1dc <abort>:
 801e1dc:	b508      	push	{r3, lr}
 801e1de:	2006      	movs	r0, #6
 801e1e0:	f000 f88e 	bl	801e300 <raise>
 801e1e4:	2001      	movs	r0, #1
 801e1e6:	f7e3 ff5b 	bl	80020a0 <_exit>

0801e1ea <__swhatbuf_r>:
 801e1ea:	b570      	push	{r4, r5, r6, lr}
 801e1ec:	460c      	mov	r4, r1
 801e1ee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 801e1f2:	2900      	cmp	r1, #0
 801e1f4:	b096      	sub	sp, #88	; 0x58
 801e1f6:	4615      	mov	r5, r2
 801e1f8:	461e      	mov	r6, r3
 801e1fa:	da0d      	bge.n	801e218 <__swhatbuf_r+0x2e>
 801e1fc:	89a3      	ldrh	r3, [r4, #12]
 801e1fe:	f013 0f80 	tst.w	r3, #128	; 0x80
 801e202:	f04f 0100 	mov.w	r1, #0
 801e206:	bf0c      	ite	eq
 801e208:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 801e20c:	2340      	movne	r3, #64	; 0x40
 801e20e:	2000      	movs	r0, #0
 801e210:	6031      	str	r1, [r6, #0]
 801e212:	602b      	str	r3, [r5, #0]
 801e214:	b016      	add	sp, #88	; 0x58
 801e216:	bd70      	pop	{r4, r5, r6, pc}
 801e218:	466a      	mov	r2, sp
 801e21a:	f000 f879 	bl	801e310 <_fstat_r>
 801e21e:	2800      	cmp	r0, #0
 801e220:	dbec      	blt.n	801e1fc <__swhatbuf_r+0x12>
 801e222:	9901      	ldr	r1, [sp, #4]
 801e224:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 801e228:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 801e22c:	4259      	negs	r1, r3
 801e22e:	4159      	adcs	r1, r3
 801e230:	f44f 6380 	mov.w	r3, #1024	; 0x400
 801e234:	e7eb      	b.n	801e20e <__swhatbuf_r+0x24>

0801e236 <__smakebuf_r>:
 801e236:	898b      	ldrh	r3, [r1, #12]
 801e238:	b573      	push	{r0, r1, r4, r5, r6, lr}
 801e23a:	079d      	lsls	r5, r3, #30
 801e23c:	4606      	mov	r6, r0
 801e23e:	460c      	mov	r4, r1
 801e240:	d507      	bpl.n	801e252 <__smakebuf_r+0x1c>
 801e242:	f104 0347 	add.w	r3, r4, #71	; 0x47
 801e246:	6023      	str	r3, [r4, #0]
 801e248:	6123      	str	r3, [r4, #16]
 801e24a:	2301      	movs	r3, #1
 801e24c:	6163      	str	r3, [r4, #20]
 801e24e:	b002      	add	sp, #8
 801e250:	bd70      	pop	{r4, r5, r6, pc}
 801e252:	ab01      	add	r3, sp, #4
 801e254:	466a      	mov	r2, sp
 801e256:	f7ff ffc8 	bl	801e1ea <__swhatbuf_r>
 801e25a:	9900      	ldr	r1, [sp, #0]
 801e25c:	4605      	mov	r5, r0
 801e25e:	4630      	mov	r0, r6
 801e260:	f7ff faf6 	bl	801d850 <_malloc_r>
 801e264:	b948      	cbnz	r0, 801e27a <__smakebuf_r+0x44>
 801e266:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 801e26a:	059a      	lsls	r2, r3, #22
 801e26c:	d4ef      	bmi.n	801e24e <__smakebuf_r+0x18>
 801e26e:	f023 0303 	bic.w	r3, r3, #3
 801e272:	f043 0302 	orr.w	r3, r3, #2
 801e276:	81a3      	strh	r3, [r4, #12]
 801e278:	e7e3      	b.n	801e242 <__smakebuf_r+0xc>
 801e27a:	89a3      	ldrh	r3, [r4, #12]
 801e27c:	6020      	str	r0, [r4, #0]
 801e27e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 801e282:	81a3      	strh	r3, [r4, #12]
 801e284:	9b00      	ldr	r3, [sp, #0]
 801e286:	6163      	str	r3, [r4, #20]
 801e288:	9b01      	ldr	r3, [sp, #4]
 801e28a:	6120      	str	r0, [r4, #16]
 801e28c:	b15b      	cbz	r3, 801e2a6 <__smakebuf_r+0x70>
 801e28e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 801e292:	4630      	mov	r0, r6
 801e294:	f000 f84e 	bl	801e334 <_isatty_r>
 801e298:	b128      	cbz	r0, 801e2a6 <__smakebuf_r+0x70>
 801e29a:	89a3      	ldrh	r3, [r4, #12]
 801e29c:	f023 0303 	bic.w	r3, r3, #3
 801e2a0:	f043 0301 	orr.w	r3, r3, #1
 801e2a4:	81a3      	strh	r3, [r4, #12]
 801e2a6:	89a3      	ldrh	r3, [r4, #12]
 801e2a8:	431d      	orrs	r5, r3
 801e2aa:	81a5      	strh	r5, [r4, #12]
 801e2ac:	e7cf      	b.n	801e24e <__smakebuf_r+0x18>

0801e2ae <_raise_r>:
 801e2ae:	291f      	cmp	r1, #31
 801e2b0:	b538      	push	{r3, r4, r5, lr}
 801e2b2:	4604      	mov	r4, r0
 801e2b4:	460d      	mov	r5, r1
 801e2b6:	d904      	bls.n	801e2c2 <_raise_r+0x14>
 801e2b8:	2316      	movs	r3, #22
 801e2ba:	6003      	str	r3, [r0, #0]
 801e2bc:	f04f 30ff 	mov.w	r0, #4294967295
 801e2c0:	bd38      	pop	{r3, r4, r5, pc}
 801e2c2:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 801e2c4:	b112      	cbz	r2, 801e2cc <_raise_r+0x1e>
 801e2c6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 801e2ca:	b94b      	cbnz	r3, 801e2e0 <_raise_r+0x32>
 801e2cc:	4620      	mov	r0, r4
 801e2ce:	f000 f853 	bl	801e378 <_getpid_r>
 801e2d2:	462a      	mov	r2, r5
 801e2d4:	4601      	mov	r1, r0
 801e2d6:	4620      	mov	r0, r4
 801e2d8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 801e2dc:	f000 b83a 	b.w	801e354 <_kill_r>
 801e2e0:	2b01      	cmp	r3, #1
 801e2e2:	d00a      	beq.n	801e2fa <_raise_r+0x4c>
 801e2e4:	1c59      	adds	r1, r3, #1
 801e2e6:	d103      	bne.n	801e2f0 <_raise_r+0x42>
 801e2e8:	2316      	movs	r3, #22
 801e2ea:	6003      	str	r3, [r0, #0]
 801e2ec:	2001      	movs	r0, #1
 801e2ee:	e7e7      	b.n	801e2c0 <_raise_r+0x12>
 801e2f0:	2400      	movs	r4, #0
 801e2f2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 801e2f6:	4628      	mov	r0, r5
 801e2f8:	4798      	blx	r3
 801e2fa:	2000      	movs	r0, #0
 801e2fc:	e7e0      	b.n	801e2c0 <_raise_r+0x12>
	...

0801e300 <raise>:
 801e300:	4b02      	ldr	r3, [pc, #8]	; (801e30c <raise+0xc>)
 801e302:	4601      	mov	r1, r0
 801e304:	6818      	ldr	r0, [r3, #0]
 801e306:	f7ff bfd2 	b.w	801e2ae <_raise_r>
 801e30a:	bf00      	nop
 801e30c:	200001a0 	.word	0x200001a0

0801e310 <_fstat_r>:
 801e310:	b538      	push	{r3, r4, r5, lr}
 801e312:	4d07      	ldr	r5, [pc, #28]	; (801e330 <_fstat_r+0x20>)
 801e314:	2300      	movs	r3, #0
 801e316:	4604      	mov	r4, r0
 801e318:	4608      	mov	r0, r1
 801e31a:	4611      	mov	r1, r2
 801e31c:	602b      	str	r3, [r5, #0]
 801e31e:	f7e3 ff0e 	bl	800213e <_fstat>
 801e322:	1c43      	adds	r3, r0, #1
 801e324:	d102      	bne.n	801e32c <_fstat_r+0x1c>
 801e326:	682b      	ldr	r3, [r5, #0]
 801e328:	b103      	cbz	r3, 801e32c <_fstat_r+0x1c>
 801e32a:	6023      	str	r3, [r4, #0]
 801e32c:	bd38      	pop	{r3, r4, r5, pc}
 801e32e:	bf00      	nop
 801e330:	2002430c 	.word	0x2002430c

0801e334 <_isatty_r>:
 801e334:	b538      	push	{r3, r4, r5, lr}
 801e336:	4d06      	ldr	r5, [pc, #24]	; (801e350 <_isatty_r+0x1c>)
 801e338:	2300      	movs	r3, #0
 801e33a:	4604      	mov	r4, r0
 801e33c:	4608      	mov	r0, r1
 801e33e:	602b      	str	r3, [r5, #0]
 801e340:	f7e3 ff0d 	bl	800215e <_isatty>
 801e344:	1c43      	adds	r3, r0, #1
 801e346:	d102      	bne.n	801e34e <_isatty_r+0x1a>
 801e348:	682b      	ldr	r3, [r5, #0]
 801e34a:	b103      	cbz	r3, 801e34e <_isatty_r+0x1a>
 801e34c:	6023      	str	r3, [r4, #0]
 801e34e:	bd38      	pop	{r3, r4, r5, pc}
 801e350:	2002430c 	.word	0x2002430c

0801e354 <_kill_r>:
 801e354:	b538      	push	{r3, r4, r5, lr}
 801e356:	4d07      	ldr	r5, [pc, #28]	; (801e374 <_kill_r+0x20>)
 801e358:	2300      	movs	r3, #0
 801e35a:	4604      	mov	r4, r0
 801e35c:	4608      	mov	r0, r1
 801e35e:	4611      	mov	r1, r2
 801e360:	602b      	str	r3, [r5, #0]
 801e362:	f7e3 fe8b 	bl	800207c <_kill>
 801e366:	1c43      	adds	r3, r0, #1
 801e368:	d102      	bne.n	801e370 <_kill_r+0x1c>
 801e36a:	682b      	ldr	r3, [r5, #0]
 801e36c:	b103      	cbz	r3, 801e370 <_kill_r+0x1c>
 801e36e:	6023      	str	r3, [r4, #0]
 801e370:	bd38      	pop	{r3, r4, r5, pc}
 801e372:	bf00      	nop
 801e374:	2002430c 	.word	0x2002430c

0801e378 <_getpid_r>:
 801e378:	f7e3 be78 	b.w	800206c <_getpid>

0801e37c <_init>:
 801e37c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e37e:	bf00      	nop
 801e380:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e382:	bc08      	pop	{r3}
 801e384:	469e      	mov	lr, r3
 801e386:	4770      	bx	lr

0801e388 <_fini>:
 801e388:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e38a:	bf00      	nop
 801e38c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801e38e:	bc08      	pop	{r3}
 801e390:	469e      	mov	lr, r3
 801e392:	4770      	bx	lr
